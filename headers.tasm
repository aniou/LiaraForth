; Dictionary Headers for Liara Forth for the W65C265SXB
; Scot W. Stevenson <scot.stevenson@gmail.com>
; First version: 05. Dec 2016
; This version: 11. Mar 2017

; Dictionary headers are kept separately from the code, which allows various
; tricks in the code. We roughly follow the Gforth terminology: The Execution
; Token (xt) is the address of the first byte of a word's code that can be,
; well, executed; the Name Token (nt) is a pointer to the beginning of the
; word's header in the Dictionary. There, the link to the next word in the
; Dictionary is always one cell down from the current word's own nt. In the code
; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
; beginning) for the xt. 
;
; This gives us the following header structure:
;
;              8 bit     8 bit
;               LSB       MSB
; nt_word ->  +--------+--------+
;             | Length | Status |
;          +2 +--------+--------+
;             | Next Header     | -> nt_next_word
;          +4 +-----------------+
;             | Start of Code   | -> xt_word 
;          +6 +-----------------+
;             | End of Code     | -> z_word
;          +8 +--------+--------+
;             | Name   |        |
;             +--------+--------+
;             |        |        |
;             +--------+--------+
;             |        |  ...   | (name string does not end with a zero)
;          +n +--------+--------+
;
; The Status Byte is created by adding the flags defined in
; definitions.tasm: 
;
;       CO - Compile Only
;       IM - Immediate Word
;       NC - Native Compile allowed (inline compile)
;       FN - Force Native Compile (may not be called by JSR)

; Note there are currently five bits unused. The last word (top word in code)
; is always BYE. It is marked as the last word by its value of 0000 in its Next
; Header field. The words are sorted with the more common ones first (further
; down in code) so they are found earlier.  Anythiing to do with output comes
; later (further up) because things will always be slow if there is a human
; involved.

nt_bye  .byte 03    ; length of word string
        .byte { NC } ; status byte
        .word 0000  ; next word in dictionary, 0000 signals end
        .word xt_bye ; start of code, the xt of this word
        .word z_bye ; end of code (points to RTS)
        .byte "bye" ; word name, always lower case

nt_cold .byte 4, 00
        .word nt_bye, xt_cold, z_cold
        .byte "cold"  

nt_word .byte 4, { NC }
        .word nt_cold, xt_word, z_word
        .byte "word"

nt_find .byte 4, { NC }
        .word nt_word, xt_find, z_find
        .byte "find"

nt_aligned .byte 7, { NC }
        .word nt_find, xt_aligned, z_aligned
        .byte "aligned"

nt_align .byte 5, { NC }
        .word nt_aligned, xt_align, z_align
        .byte "align"

nt_wordsnsizes .byte 0b, { NC }
        .word nt_align, xt_wordsnsizes, z_wordsnsizes
        .byte "words&sizes"

nt_words .byte 5, { NC }
        .word nt_wordsnsizes, xt_words, z_words
        .byte "words"

nt_dump .byte 4, { NC }
        .word nt_words, xt_dump, z_dump
        .byte "dump"

nt_unloop .byte 6, { NC + CO }
        .word nt_dump, xt_unloop, z_unloop
        .byte "unloop"

nt_pploop .byte 7, { NC + CO }
        .word nt_unloop, xt_pploop, z_pploop
        .byte "(+loop)"

nt_pqdo .byte 5, { NC + CO }
        .word nt_pploop, xt_pqdo, z_pqdo
        .byte "(?do)"

nt_pdo  .byte 4, { NC + CO }
        .word nt_pqdo, xt_pdo, z_pdo
        .byte "(do)"

nt_marker .byte 6, { IM + NC }
        .word nt_pdo, xt_marker, z_marker
        .byte "marker"

nt_wordsize .byte 8, { NC }
        .word nt_marker, xt_wordsize, z_wordsize
        .byte "wordsize"

nt_pick .byte 4, { NC }
        .word nt_wordsize, xt_pick, z_pick
        .byte "pick"

nt_bell .byte 4, { NC }
        .word nt_pick, xt_bell, z_bell
        .byte "bell"

nt_chars .byte 5, { NC }
        .word nt_bell, xt_chars, z_chars
        .byte "chars"

nt_cellplus .byte 5, { NC }
        .word nt_chars, xt_cellplus, z_cellplus
        .byte "cell+"

nt_charplus .byte 5, { NC }	; uses code of 1+
        .word nt_cellplus, xt_one-plus, z_one-plus
        .byte "char+"

nt_decimal .byte 7, { NC }
        .word nt_charplus, xt_decimal, z_decimal
        .byte "decimal"

nt_hex  .byte 3, { NC }
        .word nt_decimal, xt_hex, z_hex
        .byte "hex"

nt_unused .byte 6, { NC }
        .word nt_hex, xt_unused, z_unused
        .byte "unused"

nt_page .byte 4, { NC }
        .word nt_unused, xt_page, z_page
        .byte "page"

nt_at-xy .byte 5, { NC }
        .word nt_page, xt_at-xy, z_at-xy
        .byte "at-xy"

nt_tworfetch .byte 3, 00	; not natively compiled (yet)
        .word nt_at-xy, xt_tworfetch, z_tworfetch
        .byte "2r@"

nt_2variable .byte 9, { NC }
        .word nt_tworfetch, xt_2variable, z_2variable
        .byte "2variable"

nt_dabs .byte 4, { NC }
        .word nt_2variable, xt_dabs, z_dabs
        .byte "dabs"

nt_dnegate .byte 7, { NC }
        .word nt_dabs, xt_dnegate, z_dnegate
        .byte "dnegate"

nt_dtos .byte 3, { NC }
        .word nt_dnegate, xt_dtos, z_dtos
        .byte "d>s"

nt_stod .byte 3, { NC }
        .word nt_dtos, xt_stod, z_stod
        .byte "s>d"

nt_twofromr .byte 3, { CO }
        .word nt_stod, xt_twofromr, z_twofromr
        .byte "2r>"

nt_twotor .byte 3, { CO }
        .word nt_twofromr, xt_twotor, z_twotor
        .byte "2>r"

nt_dminus .byte 2, { NC }
        .word nt_twotor, xt_dminus, z_dminus
        .byte "d-"

nt_dplus .byte 2, { NC }
        .word nt_dminus, xt_dplus, z_dplus
        .byte "d+"

nt_fmmod .byte 6, { NC }
        .word nt_dplus, xt_fmmod, z_fmmod
        .byte "fm/mod"

nt_smrem .byte 6, { NC }
        .word nt_fmmod, xt_smrem, z_smrem
        .byte "sm/rem"

nt_udmod .byte 6, { NC }
        .word nt_smrem, xt_udmod, z_udmod
        .byte "ud/mod"

nt_ummod .byte 6, { NC }
        .word nt_udmod, xt_ummod, z_ummod
        .byte "um/mod"

nt_star .byte 1, { NC }
        .word nt_ummod, xt_star, z_star
        .byte '*'

nt_mstar .byte 2, { NC }
        .word nt_star, xt_mstar, z_mstar
        .byte "m*"

nt_umstar .byte 3, { NC }
        .word nt_mstar, xt_umstar, z_umstar
        .byte "um*"

nt_cmoveup .byte 6, { NC }
        .word nt_umstar, xt_cmoveup, z_cmoveup
        .byte "cmove>"

nt_cmove .byte 5, { NC }
        .word nt_cmoveup, xt_cmove, z_cmove
        .byte "cmove"

nt_count .byte 5, { NC }
        .word nt_cmove, xt_count, z_count
        .byte "count"

nt_abortq .byte 6, { CO + IM }
        .word nt_count, xt_abortq, z_abortq
        .byte "abort", &34	; ABORT"

nt_abort .byte 5, 00 ; TODO check flags - NC possible?
        .word nt_abortq, xt_abort, z_abort
        .byte "abort"

nt_parse .byte 5, 00
        .word nt_abort, xt_parse, z_parse
        .byte "parse"

nt_quit .byte 4, 00
        .word nt_parse, xt_quit, z_quit
        .byte "quit"

nt_question .byte 1, { NC }
        .word nt_quit, xt_question, z_question
        .byte '?'

nt_int-name .byte 8, { NC }
        .word nt_question, xt_int-name, z_int-name
        .byte "int>name"

nt_name-int .byte 8, { NC }
        .word nt_int-name, xt_name-int, z_name-int
        .byte "name>int"

nt_cr   .byte 2, { NC }
        .word nt_name-int, xt_cr, z_cr 
        .byte "cr"

nt_fill .byte 4, { NC }
        .word nt_cr, xt_fill, z_fill
        .byte "fill"

nt_erase .byte 5, { NC }
        .word nt_fill, xt_erase, z_erase
        .byte "erase"

nt_numbermore .byte 2, { NC } ; "quoth the rumben"
        .word nt_erase, xt_numbermore, z_numbermore
        .byte "#>"

nt_hold .byte 4, { NC }
        .word nt_numbermore, xt_hold, z_hold
        .byte "hold"

nt_hashs .byte 2, { NC } ; also known as "number-s"
        .word nt_hold, xt_hashs, z_hashs
        .byte "#s"

nt_sign .byte 4, { NC }
        .word nt_hashs, xt_sign, z_sign
        .byte "sign"

nt_hash .byte 1, { NC }  ; also known as "number-sign"
        .word nt_sign, xt_hash, z_hash
        .byte '#'

nt_lessnumber .byte 2, { NC }
        .word nt_hash, xt_lessnumber, z_lessnumber
        .byte "<#"

nt_bl   .byte 2, { NC }
        .word nt_lessnumber, xt_bl, z_bl
        .byte "bl"

nt_spaces .byte 6, { NC }
        .word nt_bl, xt_spaces, z_spaces
        .byte "spaces"

nt_space .byte 5, { NC }
        .word nt_spaces, xt_space, z_space
        .byte "space"

nt_dots .byte 2, { NC }
        .word nt_space, xt_dots, z_dots
        .byte ".s"

nt_type .byte 4, { NC }
        .word nt_dots, xt_type, z_type
        .byte "type"

nt_udot .byte 2, { NC }
        .word nt_type, xt_udot, z_udot
        .byte "u."

nt_emit .byte 4, { NC }
        .word nt_udot, xt_emit, z_emit
        .byte "emit"

nt_dot  .byte 1, { NC }
        .word nt_emit, xt_dot, z_dot
        .byte '.'

nt_pad  .byte 3, { NC }
        .word nt_dot, xt_pad, z_pad
        .byte "pad"

nt_base .byte 4, { NC }
        .word nt_pad, xt_base, z_base
        .byte "base"

nt_nc-limit .byte 8, { NC }
        .word nt_base, xt_nc-limit, z_nc-limit
        .byte "nc-limit"

nt_input .byte 5, { NC }
        .word nt_nc-limit, xt_input, z_input
        .byte "input"

nt_output .byte 6, { NC }
        .word nt_input, xt_output, z_output
        .byte "output"

nt_evaluate .byte 8, { NC }
        .word nt_output, xt_evaluate, z_evaluate
        .byte "evaluate"

nt_cells .byte 5, { NC }	; 2* because we have 16 bit stack 
        .word nt_evaluate, xt_two-star, z_two-star
        .byte "cells"

nt_dotquote .byte 2, { CO + NC + IM }
        .word nt_cells, xt_dotquote, z_dotquote
        .byte '.', &34

nt_squote .byte 2, { IM + NC }	; not CO, see source code
        .word nt_dotquote, xt_squote, z_squote
        .byte 's', &34

nt_sliteral .byte 8, { IM + CO }
        .word nt_squote, xt_sliteral, z_sliteral
        .byte "sliteral"

nt_brackettick .byte 3, { IM + CO }
        .word nt_sliteral, xt_brackettick, z_brackettick
        .byte "[']"

nt_bracketchar .byte 6, { IM + CO }
        .word nt_brackettick, xt_bracketchar, z_bracketchar
        .byte "[char]"

nt_literal .byte 7, { IM + CO }
        .word nt_bracketchar, xt_literal, z_literal
        .byte "literal"

nt_native-compile .byte 0e, { NC }
        .word nt_literal, xt_native-compile, z_native-compile
        .byte "native-compile"

nt_compile-only .byte 0c, { NC }
        .word nt_native-compile, xt_compile-only, z_compile-only
        .byte "compile-only"

nt_immediate .byte 9, { NC }
        .word nt_compile-only, xt_immediate, z_immediate
        .byte "immediate"

nt_postpone .byte 8, { IM + CO }
        .word nt_immediate, xt_postpone, z_postpone
        .byte "postpone"

nt_rightbracket .byte 1, { NC }
        .word nt_postpone, xt_rightbracket, z_rightbracket
        .byte ']'

nt_leftbracket .byte 1, { IM + CO }
        .word nt_rightbracket, xt_leftbracket, z_leftbracket
        .byte '['

nt_latestnt .byte 8, { NC }
        .word nt_leftbracket, xt_latestnt, z_latestnt
        .byte "latestnt"

nt_latestxt .byte 8, { NC }
        .word nt_latestnt, xt_latestxt, z_latestxt
        .byte "latestxt"

nt_dtrailing .byte 9, { NC }
        .word nt_latestxt, xt_dtrailing, z_dtrailing
        .byte "-trailing"

nt_slashstring .byte 7, { NC }
        .word nt_dtrailing, xt_slashstring, z_slashstring
        .byte "/string"

nt_zbranch .byte 7, { IM + CO }
        .word nt_slashstring, xt_zbranch, z_zbranch
        .byte "0branch"

nt_branch .byte 6, { IM + CO }
        .word nt_zbranch, xt_branch, z_branch
        .byte "branch"

nt_again .byte 5, { IM + NC + CO }
        .word nt_branch, xt_again, z_again
        .byte "again"

nt_begin .byte 5, { IM + NC + CO }
        .word nt_again, xt_begin, z_begin
        .byte "begin"

nt_compilecomma .byte 08, { CO }
        .word nt_begin, xt_compilecomma, z_compilecomma
        .byte "compile,"

nt_semicolon .byte 1, { CO + IM }
        .word nt_compilecomma, xt_semicolon, z_semicolon
        .byte ';'

nt_colon .byte 1, { NC }
        .word nt_semicolon, xt_colon, z_colon
        .byte ':'

nt_allot .byte 5, { NC }
        .word nt_colon, xt_allot, z_allot
        .byte "allot"

nt_defer .byte 5, { NC }
        .word nt_allot, xt_defer, z_defer
        .byte "defer"

nt_tobody .byte 5, { NC }
        .word nt_defer, xt_tobody, z_tobody
        .byte ">body"

nt_does .byte 5, { IM + CO }
        .word nt_tobody, xt_does, z_does
        .byte "does>"

nt_create .byte 6, { NC }
        .word nt_does, xt_create, z_create
        .byte "create"

nt_name-string .byte 0b, { NC }
        .word nt_create, xt_name-string, z_name-string
        .byte "name>string"

nt_2dup .byte 4, { NC }
        .word nt_name-string, xt_2dup, z_2dup
        .byte "2dup"

nt_abs   .byte 3, { NC }
        .word nt_2dup, xt_abs, z_abs
        .byte "abs"

nt_state .byte 5, { NC }
        .word nt_abs, xt_state, z_state
        .byte "state"

nt_to-in .byte 3, { NC }
        .word nt_state, xt_to-in, z_to-in
        .byte ">in"

nt_source .byte 6, { NC }
         .word nt_to-in, xt_source, z_source
         .byte "source"

nt_depth .byte 5, { NC }
        .word nt_source, xt_depth, z_depth
        .byte "depth"

nt_to   .byte 2, { NC }
        .word nt_depth, xt_to, z_to
        .byte "to"

nt_value .byte 5, { NC }  ; uses routines of CONSTANT
        .word nt_to, xt_constant, z_constant
        .byte "value"

nt_constant .byte 8, { NC }
        .word nt_value, xt_constant, z_constant
        .byte "constant"

nt_variable .byte 8, { NC }
        .word nt_constant, xt_variable, z_variable
        .byte "variable"

nt_tick  .byte 1, { NC }
        .word nt_variable, xt_tick, z_tick
        .byte 27	; hex for "'"

nt_move .byte 4, { NC }
        .word nt_tick, xt_move, z_move
        .byte "move"

nt_min  .byte 3, { NC }
        .word nt_move, xt_min, z_min
        .byte "min"

nt_max  .byte 3, { NC }
        .word nt_min, xt_max, z_max
        .byte "max"

nt_negate .byte 6, { NC }
        .word nt_max, xt_negate, z_negate
        .byte "negate"

nt_invert .byte 6, { NC }
        .word nt_negate, xt_invert, z_invert
        .byte "invert"

nt_char .byte 4, { NC }
        .word nt_invert, xt_char, z_char
        .byte "char"

nt_rshift .byte 6, { NC }
        .word nt_char, xt_rshift, z_rshift
        .byte "rshift"

nt_xor  .byte 3, { NC }
        .word nt_rshift, xt_xor, z_xor
        .byte "xor"

nt_or   .byte 2, { NC }
        .word nt_xor, xt_or, z_or
        .byte "or"

nt_and  .byte 3, { NC }
        .word nt_or, xt_and, z_and
        .byte "and"

nt_lshift .byte 6, { NC }
        .word nt_and, xt_lshift, z_lshift
        .byte "lshift"

nt_plusstore .byte 2, { NC }
        .word nt_lshift, xt_plusstore, z_plusstore
        .byte "+!"

nt_c-comma .byte 2, { NC }
        .word nt_plusstore, xt_c-comma, z_c-comma
        .byte "c,"

nt_c-fetch .byte 2, { NC }
        .word nt_c-comma, xt_c-fetch, z_c-fetch
        .byte "c@"

nt_c-store .byte 2, { NC }
        .word nt_c-fetch, xt_c-store, z_c-store
        .byte "c!"

nt_two-star .byte 2, { NC }
        .word nt_c-store, xt_two-star, z_two-star
        .byte "2*"

nt_minus .byte 1, { NC }
        .word nt_two-star, xt_minus, z_minus
        .byte '-'

nt_plus .byte 1, { NC }
        .word nt_minus, xt_plus, z_plus
        .byte '+'

nt_one-minus .byte 2, { NC }
        .word nt_plus, xt_one-minus, z_one-minus
        .byte "1-"

nt_one-plus .byte 2, { NC }
        .word nt_one-minus, xt_one-plus, z_one-plus
        .byte "1+"

nt_zero-notequal .byte 3, { NC }
        .word nt_one-plus, xt_zero-notequal, z_zero-notequal
        .byte "0<>"

nt_zero-more .byte 2, { NC }
        .word nt_zero-notequal, xt_zero-more, z_zero-more
        .byte "0>"

nt_zero-less .byte 2, { NC }
        .word nt_zero-more, xt_zero-less, z_zero-less
        .byte "0<"

nt_greater .byte 1, { NC }
        .word nt_zero-less, xt_greater, z_greater
        .byte '>'

nt_less .byte 1, { NC }
        .word nt_greater, xt_less, z_less
        .byte '<'

nt_zero-equal .byte 2, { NC }
        .word nt_less, xt_zero-equal, z_zero-equal
        .byte "0="

nt_not-equal .byte 2, { NC }
        .word nt_zero-equal, xt_not-equal, z_not-equal
        .byte "<>"

nt_equal .byte 1, { NC }
        .word nt_not-equal, xt_equal, z_equal
        .byte '='

nt_false .byte 5, { NC }
        .word nt_equal, xt_zero, z_zero
        .byte "false"

nt_true  .byte 4, { NC }
        .word nt_false, xt_true, z_true
        .byte "true"

nt_tonumber .byte 7, { NC }	; see if actually NC
        .word nt_true, xt_tonumber, z_tonumber
        .byte ">number"

nt_number .byte 6, { NC }	; see if actually NC
        .word nt_tonumber, xt_number, z_number
        .byte "number"

nt_two  .byte 1, { NC }
        .word nt_number, xt_two, z_two
        .byte '2'

nt_one  .byte 1, { NC }
        .word nt_two, xt_one, z_one
        .byte '1'

nt_zero  .byte 1, { NC }
        .word nt_one, xt_zero, z_zero
        .byte '0'

nt_find-name .byte 9, 0
        .word nt_zero, xt_find-name, z_find-name
        .byte "find-name"

nt_refill .byte 6, 0 ; TODO check flags
        .word nt_find-name, xt_refill, z_refill
        .byte "refill"

nt_parse-name .byte &10, 0
        .word nt_refill, xt_parse-name, z_parse-name
        .byte "parse-name"

nt_source-id .byte 9, { NC }
        .word nt_parse-name, xt_source-id, z_source-id
        .byte "source-id"

nt_comma .byte 1, { NC }
        .word nt_source-id, xt_comma, z_comma
        .byte ','

nt_accept .byte 6, 00 ; TODO check flags
        .word nt_comma, xt_accept, z_accept 
        .byte "accept"

nt_key  .byte 3, { NC }
        .word nt_accept, xt_key, z_key
        .byte "key"

nt_backslash .byte 1, { NC }
        .word nt_key, xt_backslash, z_backslash
        .byte '\'

nt_qdup .byte 4, { NC }
        .word nt_backslash, xt_qdup, z_qdup
        .byte "?dup"

nt_tuck .byte 4, { NC }
        .word nt_qdup, xt_tuck, z_tuck
        .byte "tuck"

nt_nip  .byte 3, { NC }
        .word nt_tuck, xt_nip, z_nip
        .byte "nip"

nt_mrot .byte 4, { NC }
        .word nt_nip, xt_mrot, z_mrot
        .byte "-rot"

nt_rot  .byte 3, { NC }
        .word nt_mrot, xt_rot, z_rot
        .byte "rot"

nt_2over .byte 5, { NC }
        .word nt_rot, xt_2over, z_2over
        .byte "2over"

nt_2swap .byte 5, { NC }
        .word nt_2over, xt_2swap, z_2swap
        .byte "2swap"

nt_execute .byte 7, { NC }
        .word nt_2swap, xt_execute, z_execute
        .byte "execute"

nt_here .byte 4, { NC }
        .word nt_execute, xt_here, z_here
        .byte "here"

nt_2drop .byte 5, { NC }
        .word nt_here, xt_2drop, z_2drop
        .byte "2drop"

nt_rfetch .byte 2, 0 ; we follow Gforth in making this not CO
        .word nt_2drop, xt_rfetch, z_rfetch
        .byte "r@"

nt_fromr .byte 2, { CO }
        .word nt_rfetch, xt_fromr, z_fromr
        .byte "r>"

nt_tor  .byte 2, { CO }
        .word nt_fromr, xt_tor, z_tor
        .byte ">r"

nt_digitq .byte 6, { NC }
        .word nt_tor, xt_digitq, z_digitq
        .byte "digit?"

nt_bounds .byte 6, { NC }
        .word nt_digitq, xt_bounds, z_bounds
        .byte "bounds"

nt_over .byte 4, { NC }
        .word nt_bounds, xt_over, z_over
        .byte "over"

nt_fetch .byte 1, { NC }
        .word nt_over, xt_fetch, z_fetch
        .byte '@' 

nt_store .byte 1, { NC }
        .word nt_fetch, xt_store, z_store
        .byte '!'

nt_swap  .byte 4, { NC }
        .word nt_store, xt_swap, z_swap
        .byte "swap"

nt_dup   .byte 3, { NC }
        .word nt_swap, xt_dup, z_dup
        .byte "dup"

; DROP is always the first entry in dictionary
nt_drop  .byte 4, { NC }
        .word nt_dup, xt_drop, z_drop
        .byte "drop"

; END
