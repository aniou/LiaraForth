; Dictionary Headers for Liara Forth for the W65C265SXB
; Scot W. Stevenson <scot.stevenson@gmail.com>
; First version: 05. Dec 2016
; This version: 31. Dec 2016

; Dictionary headers are kept separately from the code, which allows various
; tricks in the code. We roughly follow the Gforth terminology: The Execution
; Token (xt) is the address of the first byte of a word's code that can be,
; well, executed; the Name Token (nt) is a pointer to the beginning of the
; word's header in the Dictionary. There, the link to the next word in the
; Dictionary is always one cell down from the current word's own nt. In the code
; itself, we use "h_<WORD>" ("header") for the nt and "a_<WORD>" ("A" as the
; beginning) for the xt. 
;
; This gives us the following header structure for each header:

;              8 bit     8 bit
;               LSB       MSB
; h_word ->  +--------+--------+
;            | Status | Length |
;         +2 +--------+--------+
;            | Next Header     | -> h_next (nt of next word) 
;         +4 +-----------------+
;            | Start of Code   | -> a_word (xt of this word)
;         +6 +-----------------+
;            | End of Code     | -> z_word
;         +8 +--------+--------+
;            | Name   |        |
;            +--------+--------+
;            |        |        |
;            +--------+--------+
;            |        |  ...   | (name string does not end with a zero)
;         +n +--------+--------+

; Status bytes are created by adding dictionary flags defined in
; definitions.tasm:
;
;       PW - Primitive Word (natively coded)
;       CO - Compile Only
;       IM - Immediate Word
;       NC - Native Compile (inline compile)

; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
; the link to the Next Word field. The words are sorted with the more common
; ones first (further down in code) and the output words later (further up)
; because things will always be slow if there is a human involved.

h_bye   .byte { PW + NC } ; status byte
        .byte 03    ; length of word string
        .word 0000  ; next word in dictionary, 0000 signals end
        .word a_bye ; start of code, the xt of this word
        .word z_bye ; end of code (points to RTS)
        .byte "bye" ; lowercase word name

h_cold  .byte 00, 4  
        .word h_bye, a_cold, z_cold
        .byte "cold"  

h_count .byte { NC + PW }, 5
        .word a_count, z_count, h_cold
        .byte "count"

h_abort .byte 00, 5 ; TODO check flags
        .word h_count, a_abort, z_abort
        .byte "abort"

h_parse .byte 00, 5
        .word h_quit, a_parse, z_parse
        .byte "parse"

h_quit  .byte 00, 4 
        .word h_parse, a_quit, z_quit
        .byte "quit"

h_cr    .byte { PW + NC }, 2
        .word h_quit, a_cr, z_cr 
        .byte "cr"

h_state .byte { PW + NC }, 5
        .word h_cr, a_state, z_state
        .byte "state"

h_to-in .byte { PW + NC }, 3
        .word h_state, a_to-in, z_to-in
        .byte ">IN"

h_source .byte { PW + NC }, 6
         .word h_to-in, a_source, z_source
         .byte "source"

h_plus  .byte { PW + NC }, 1
        .word h_source, a_plus, z_plus
        .byte '+'

h_one-plus .byte { PW + NC }, 2
        .word h_plus, a_one-plus, z_one-plus
        .byte "1+"

h_false .byte { PW + NC }, 5
        .word h_one-plus, a_zero, z_zero
        .byte "false"

h_true  .byte { PW + NC }, 4
        .word h_false, a_true, z_true
        .byte "true"

h_one   .byte { PW + NC }, 3
        .word h_true, a_one, z_one
        .byte "one"

h_zero  .byte { PW + NC }, 4
        .word h_one, a_zero, z_zero
        .byte "zero"

h_refill .byte { PW }, 6 ; TODO check flags
        .word h_zero, a_refill, z_refill
        .byte "refill"

h_parse-name .byte 0, &10
        .word h_refill, a_parse-name, z_parse-name
        .byte "parse-name"

h_source-id .byte { PW + NC }, 9
        .word h_parse-name, a_source-id, z_source-id
        .byte "source-id"

h_comma .byte { PW + NC }, 1
        .word h_source-id, a_comma, z_comma
        .byte ','

h_accept .byte 00, 6 ; TODO check flags
        .word h_comma, a_accept, z_accept 
        .byte "accept"

h_tuck  .byte { PW + NC }, 4
        .word h_accept, a_tuck, z_tuck
        .byte "tuck"

h_nip   .byte { PW + NC }, 3
        .word h_tuck, a_nip, z_nip
        .byte "nip"

h_here  .byte { PW + NC }, 4
        .word h_nip, a_here, z_here
        .byte "here"

h_swap  .byte { PW + NC }, 04
        .word h_here, a_swap, z_swap
        .byte "swap"

h_dup   .byte { PW + NC }, 03
        .word h_swap, a_dup, z_dup
        .byte "dup"

h_drop  .byte { PW + NC }, 04
        .word h_dup, a_drop, z_drop
        .byte "drop"

; END
