; Liara Forth for the W65C265SXB
; Scot W. Stevenson <scot.stevenson@gmail.com>
; First version: 01. Apr 2016
; This version: 02. Dec 2016

; This code is written in Typist's Assembler Notation for the 65c02/65816
; See docs/MANUAL.md for more information

        .mpu 65816
        .origin 8000

; ===================================================================
; TOP INCLUDES

        .include definitions.tasm
        .include macros.tasm

; ===================================================================
; SETUP
        .native
        .axy16

                ; start with first input buffer
                lda.# buffer1
                sta.d cib

                ; start the machine
                jmp a_cold

; ===================================================================
; DICTIONARY ROUTINES

; Dictionary routines are listed alphabetically to make it easier to
; find them unless there is a reason to change that (for example, QUIT drops
; through to ABORT).


; -------------------------------------------------------------------
; COLD ( -- )
; Reboot the system. This word may not be compiled.
a_cold  .axy16  ; paranoid
                sei

                ; TODO switch to Single Task mode
                ; TODO setup Direct Page stuff
                ; TODO setup CP
                ; TODO setup DP
                ; TODO initiate TIB
                ; TODO initiate PAD
                ; TODO initiate User variables

                ; clear current input buffer
                jsr clearbuffer

                ; print boot strings
        .a8
                lda.# 00  ; bank byte

                jsr.l SEND_CR
                ldx.# s_title
                jsr printstring
                ldx.# s_version
                jsr printstring
                ldx.# s_author
                jsr printstring
                ldx.# s_disclaimer
                jsr printstring
                ldx.# s_typebye
                jsr printstring

                cli

        .a16

z_cold  ; dummy value, word may not be compiled
                ; drop through to QUIT

; ===================================================================
; WORD CODE
;
; Word code routines are sorted alphabetically, except for the first one, 
; QUIT. The byte and cycle values are calculated without the RTS 
; instruction.

; -------------------------------------------------------------------
; QUIT ( -- )
; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
; the ANSI Forth recommendation to use REFILL.

z_cold
                ; clear Return Stack
a_quit          lda.# stack0
                tcs

                ; TODO put 0 in SOURCE-ID
                ; TODO switch to interpret mode

                ; TODO start REFILL

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; *** TESTING STOP START ***

z_quit          stp  ; TODO for testing only

; *** TESTING STOP END ***
; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

; -------------------------------------------------------------------
; BYE ( -- ) 2 bytes / 7-8 cycles
; Leave Liara Forth, returning to Mensch Monitor

a_bye           brk 00  ; status byte 00 required for assembler
z_bye           rts     ; dummy for compiling, never reached

; -------------------------------------------------------------------
; DROP ( n -- ) 4 bytes / 9 cycles
; Drop first entry on Data Stack. Destroys Y

a_drop          
                lda.dx 00 
                inx
                inx
z_drop          rts


; -------------------------------------------------------------------
; DUP  ( n -- n n ) 4 bytes / 9 cycles
; Duplicate first entry on Data Stack

a_dup           dex
                dex
                sta.dx 00
z_dup           rts

; -------------------------------------------------------------------
; SWAP ( -- ) 5 bytes / 12 cycles
; Exchange TOS with NOS, destroys Y

a_swap          ldy.dx 00
                sta.dx 00
                tya 
z_swap          rts


; ===================================================================
; DICTIONARY HEADERS

; Dictionary headers are kept separately from the code. For each word, the
; structure is:

;               8bit     8bit
; h_word ->  +--------+--------+
;            | Status | Length |
;         +2 +--------+--------+
;            | Start of Code   | -> a_word
;         +4 +-----------------+
;            | End of Code     | -> z_word
;         +6 +-----------------+
;            | Next Header     | -> h_next_word
;         +8 +--------+--------+
;            | Name   |        |
;            +--------+--------+
;            |        |        |
;            +--------+--------+
;            |        |  ...   |
;         +n +--------+--------+

; Status bytes are created by adding dictionary flags defined in
; definitions.tasm:
;
;       PW - Primitive Word (natively coded)
;       CO - Compile Only
;       IM - Immediate Word
;       NC - Native Compile (inline compile)

; The last word (top word in code) is always COLD, signaled to FIND by a 0000 in
; the link to the Next Word field. The words are sorted with the more common
; ones first (further down in code). 

h_cold  .byte 00  ; status byte (never compile)
        .byte 04  ; length of word string
        .word a_cold  ; start of code
        .word z_cold  ; end of code (points to RTS)
        .word 0000    ; next word in dictionary, 0000 signals is end
        .byte "cold"  ; lowercase word name

h_bye   .byte { PW + NC }, 03
        .word a_bye, z_byte, h_cold 
        .byte "bye"

h_quit  .byte 00, 04 
        .word a_quit, z_quit, h_bye
        .byte "quit"

h_swap  .byte { PW + NC }, 04
        .word a_swap, z_swap, h_quit
        .byte "swap"

h_dup   .byte { PW + NC }, 03
        .word a_dup, z_dup, h_quit
        .byte "dup"

h_drop  .byte { PW + NC }, 04
        .word a_drop, z_drop, h_dup
        .byte "drop"

; ===================================================================
; HELPER FUNCTIONS, LOW-LEVEL

; Print a string with a CR added on. Thin wrapper to PUT_STR. Assumes
; bank byte in A8 and address of zero-terminated string in X16
printstring     jsr.l PUT_STR
                jsr.l SEND_CR
                rts

; Swap the two input buffers. Assumes A16, destroys Y.
swapbuffers     tay
                lda.d cib
                eor.# 0100  ; flip 07d00 / 07c00
                sta.d cib
                tya
                rts

; Clear current buffer. Assumes buffer size 256 bytes and A16, destroys Y.
clearbuffer     sta.d tmptos
                lda.# 0000
                tay

@               sta.diy cib  ; STA (cib),y
                dey
                dey
                bne -

                lda.d tmptos
                rts


; ===================================================================
; BOTTOM INCLUDES

        .include strings.tasm


; ===================================================================
; END

        .end
