; Liara Forth for the W65C265SXB
; Scot W. Stevenson <scot.stevenson@gmail.com>
; First version: 01. Apr 2016
; This version: 07. Dec 2016

; This code is written in Typist's Assembler Notation for the 65c02/65816
; See docs/MANUAL.md for more information

        .mpu 65816
        .origin 8000

; ===================================================================
; TOP INCLUDES

        .include definitions.tasm
        .include macros.tasm

; ===================================================================
; SETUP
        .native
        .axy16

                ; start with first input buffer
                lda.# buffer1
                sta.d cib

                ; drops through to cold

; ===================================================================
; DICTIONARY ROUTINES

; Dictionary routines are listed alphabetically to make it easier to
; find them unless there is a reason to change that (for example, ABORT drops
; through to QUIT 


; -------------------------------------------------------------------
; COLD ( -- )
; Reboot the system. This word may not be compiled.
a_cold  .axy16  ; paranoid
                sei

                ; TODO switch to Single Task mode
                ; TODO setup Direct Page stuff
                ; TODO setup CP
                ; TODO setup DP
                ; TODO initiate TIB
                ; TODO initiate PAD
                ; TODO initiate User variables

                ; clear current input buffer
                jsr clearbuffer

                ; print boot strings
        .a8
                lda.# 00  ; bank byte

                jsr.l SEND_CR
                ldx.# s_title
                jsr printstring
                ldx.# s_version
                jsr printstring
                ldx.# s_author
                jsr printstring
                ldx.# s_disclaimer
                jsr printstring
                ldx.# s_typebye
                jsr printstring

                cli

        .a16

z_cold  ; dummy value, word may not be compiled
                ; drop through to QUIT

; ===================================================================
; WORD CODE
;
; Word code routines are sorted alphabetically, except for the first two, 
; ABORT and QUIT. The byte and cycle values are calculated without the RTS 
; instruction.

; -------------------------------------------------------------------
; ABORT ( -- ) 
; Reset the parameter (data) stack pointer and continue as QUIT 
; We can jump here via subroutine because we reset the stack pointer
; anyway
a_abort         ; clear Data Stack
                ldx.# dsp0

                ; TODO set output and input to 

z_abort         ; dummy value for compilation

; -------------------------------------------------------------------
; QUIT ( -- )
; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
; the ANSI Forth recommendation to use REFILL.

                
a_quit          ; clear Return Stack
                lda.# stack0
                tcs

                ; TODO put 0 in SOURCE-ID
                ; TODO switch to interpret mode
                ; TODO start REFILL
                
                ; see
                ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; *** TESTING STOP START ***

z_quit          stp  ; TODO for testing only

; *** TESTING STOP END ***
; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

; -------------------------------------------------------------------
; ACCEPT ( addr n -- n ) X bytes / X cycles
; Receive a string of at most n characters

a_accept        nop
                nop
z_accept        rts

; -------------------------------------------------------------------
; BYE ( -- ) 2 bytes / 7-8 cycles
; Leave Liara Forth, returning to Mensch Monitor

a_bye           brk 00  ; status byte 00 required for assembler
z_bye           rts     ; dummy for compiling, never reached

; -------------------------------------------------------------------
; DROP ( n -- ) 4 bytes / 9 cycles
; Drop first entry on Data Stack. Destroys Y

a_drop          
                lda.dx 00 
                inx
                inx

z_drop          rts


; -------------------------------------------------------------------
; DUP  ( n -- n n ) 4 bytes / 9 cycles
; Duplicate first entry on Data Stack

a_dup           dex
                dex
                sta.dx 00

z_dup           rts

; -------------------------------------------------------------------
; FALSE ( -- f ) 7 bytes / 12 cycles
; Pushes value $0000 for Forth true on Data Stack
; This is the same code as for ZERO, see there


; -------------------------------------------------------------------
; HERE ( -- u ) 6 bytes / 13 cycles
; Push Compiler Pointer address on the Data Stack

a_here          dex
                dex
                sta.dx 00
                lda.d cp

z_here          rts

; -------------------------------------------------------------------
; NIP ( n m -- m ) 2 bytes / 4 cycles
; Delete entry that is NOS
;
a_nip           inx
                inx
z_nip           rts

; -------------------------------------------------------------------
; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
; Pushes the number 1 on the Data Stack

a_one           dex
                dex
                sta.dx 00
                lda.# 0001 
   
z_one           rts

; -------------------------------------------------------------------
; 1+ "ONE-PLUS" ( n -- n+1 ) 1 bytes / 2 cycles
; Add 1 to TOS

a_one-plus      inc.a
z_one-plus      rts

; -------------------------------------------------------------------
; + "PLUS" ( n m -- n+m ) 5 bytes / 11 cycles
; Add TOS and NOS

a_plus          clc
                adc.dx 00
                inx
                inx 

z_plus          rts

; ------------------------------------------------------------------- 
; REFILL ( -- f ) X bytes / X cycles
; "Attempt to fill the input buffer from the input source, returning a true flag
; if successful. When the input source is the user input device, attempt to
; receive input into the terminal input buffer. If successful, make the result
; the input buffer, set >IN to zero, and return true. Receipt of a line
; containing no characters is considered successful. If there is no input
; available from the current input source, return false. When the input source
; is a string from EVALUATE, return false and perform no other action."

a_refill        nop
                nop
z_refill        rts

; -------------------------------------------------------------------
; SWAP ( n m -- m n ) 5 bytes / 12 cycles
; Exchange TOS with NOS, destroys Y

a_swap          ldy.dx 00
                sta.dx 00
                tya 

z_swap          rts

; -------------------------------------------------------------------
; TRUE ( -- f ) 7 bytes / 12 cycles
; Pushes value $FFFF for Forth true on Data Stack

a_true          dex
                dex
                sta.dx 00 
                lda.# 0ffff

z_true          rts

; -------------------------------------------------------------------
; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
; Insert TOS below NOS

a_tuck          dex
                dex
                ldy.dx 2
                sty.dx 0
                sta.dx 2
                
z_tuck          rts

; -------------------------------------------------------------------
; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
; Pushes the number 0000 on the Data Stack

a_zero          dex
                dex
                sta.dx 00 
                lda.# 0000

z_zero          rts



; ===================================================================
; MIDDLE INCLUDES

        .include dict_headers.tasm

; ===================================================================
; HELPER FUNCTIONS, LOW-LEVEL

; Print a string with a CR added on. Thin wrapper to PUT_STR. Assumes
; bank byte in A8 and address of zero-terminated string in X16
printstring     jsr.l PUT_STR
                jsr.l SEND_CR
                rts

; Swap the two input buffers. Assumes A16, destroys Y.
swapbuffers     tay
                lda.d cib
                eor.# 0100  ; flip 07d00 / 07c00
                sta.d cib
                tya
                rts

; Clear current buffer. Assumes buffer size 256 bytes and A16, destroys Y.
clearbuffer     sta.d tmptos
                lda.# 0000
                tay

@               sta.diy cib  ; STA (cib),y
                dey
                dey
                bne -

                lda.d tmptos
                rts


; ===================================================================
; BOTTOM INCLUDES

        .include strings.tasm


; ===================================================================
; END

        .end
