; Liara Forth for the W65C265SXB
; Scot W. Stevenson <scot.stevenson@gmail.com>
; First version: 01. Apr 2016
; This version: 31. Dec 2016

; This code is written in Typist's Assembler Notation for the 65c02/65816
; See docs/MANUAL.md for more information

        .mpu 65816
;       .origin 8000    ; start of code to save to Flash memory
        .origin 6000    ; start of code to save to built-in RAM

; ===================================================================
; TOP INCLUDES

        .include definitions.tasm


; ===================================================================
; DICTIONARY ROUTINES

; Word code routines are sorted alphabetically, except for the first three
; - COLD, ABORT, and QUIT - which flow into each other.  The byte and cycle
; values are calculated without the RTS instruction.


; -------------------------------------------------------------------
; COLD ( -- ) X bytes / X Cycles
; Reboot the system. TODO determine how to compile this word

a_cold  
        .native
        .axy16
                sei

                ; TODO switch to Single Task mode
                ; TODO set up Direct Page stuff
                ; TODO set up CP
                ; TODO set up DP
                ; TODO initiate PAD
                ; TODO initiate User variables
                ; TODO initiate high-level words 
                
                ; Prepare input buffers
                lda.# ibuffer1  ; start with first input buffer
                sta.d cib
                stz.d ciblen    ; current input buffer is empty
                stz.d piblen    ; previous input buffer is empty

                cli             ; PUT_CHR in printstring uses interrupts

                ; print boot strings
                lda.# s_title
                jsr printstring
                lda.# s_version
                jsr printstring
                lda.# s_author
                jsr printstring
                lda.# s_disclaimer
                jsr printstring
                lda.# s_typebye
                jsr printstring
                
                ; drop through to QUIT

; -------------------------------------------------------------------
; ABORT ( -- ) 6+ bytes / 6+ cycles
; Reset the parameter (data) stack pointer and continue as QUIT 
; We can jump here via subroutine because we reset the stack pointer
; anyway. Flows into QUIT.

a_abort         ; clear Data Stack
                ldy.# 0000
                ldx.# dsp0

; drops through to QUIT, z_abort is the same as z_quit.

; -------------------------------------------------------------------
; QUIT ( -- ) X bytes / X cycles
; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
; system prompt until after the first output.
                
a_quit          ; clear Return Stack
                lda.# stack0
                tcs

                ; switch SOURCE-ID to zero (keyboard input)
                stz.d insrc
                
                ; switch to interpret state (STATE is zero)
                stz.d state
               
                ; empty current input buffer. Note the previous input line is
                ; conserved even if we came here from an abort
                stz.d ciblen

quit_main_loop
                ; accept a line from the current input source
                jsr a_refill
                
                tya             ; force flag test
                bne quit_refill_ok

                ; If REFILL returned a FALSE flag, something went wrong and we
                ; need to print an error message and reset the machine. We don't
                ; need to save A because we're going to clober it anyway when we
                ; go back to ABORT.
                lda.# es_refill1 
                jsr printstring
        
                jmp a_abort

quit_refill_ok
                ; Assume we have successfully accepted a string of input from
                ; a source, with address of buffer in cib and length of input in
                ; ciblen

                ; TODO PARSE INPUT

                ; Display system prompt if all went well
                lda.# s_ok
                jsr printstring

                
                ; ---------------
                ; TESTING: Print line received from ACCEPT
                lda.# tests_quit
                jsr printstring
                
                ; add a zero to the end of the buffer to terminate the string
                ; for printing
                phx
                ldx.d ciblen
                inx

                lda.# 0000
                sta.x cib
                plx
                
                lda.d cib
                jsr printstring
                ; ---------------

                
                bra quit_main_loop

z_cold
z_abort         
z_quit          nop  ; dummy for compilation, TODO test if required

; -------------------------------------------------------------------
; >IN "TO-IN" ( -- addr ) 6 bytes / X cycles
; Return address where pointer to current char in input buffer lives (>IN)

a_to-in         dex
                dex
                sty.dx 00

                ldy.# toin      ; >IN
z_to-in         rts

; -------------------------------------------------------------------
; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
; Add TOS and NOS

a_plus          tya
                clc
                adc.dx 00
                tay
                inx
                inx 

z_plus          rts

; -------------------------------------------------------------------
; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
; Pushes the number 0000 on the Data Stack

a_zero          dex
                dex
                sty.dx 00 
                ldy.# 0000

z_zero          rts

               
; -------------------------------------------------------------------
; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
; Pushes the number 1 on the Data Stack

a_one           dex
                dex
                sty.dx 00
                ldy.# 0001 
   
z_one           rts


; -------------------------------------------------------------------
; 1+ "ONE-PLUS" ( n -- n+1 ) 1 bytes / 2 cycles
; Add 1 to TOS. Because there is no checking if there is actually anything on
; the Data Stack, this routine will fail silently if the stack is empty. 

a_one-plus      iny
z_one-plus      rts


; -------------------------------------------------------------------
; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
; Receive a string of at most n1 characters, placing them at addr. Return the
; actual number of characters as n2. Characters are echoed as they are received

a_accept        
                ; Set up loop
                lda.dx 00       ; max number of chars to accept is NOS
                bne accept_nonzero
                                
                tay             ; if we were told to get zero chars, just quit TODO TEST
                inx
                inx
                rts

accept_nonzero
                sta.d tmp2      ; non-zero number requested, save in tmp2
                sty.d tmp1      ; address of buffer to use in tmp1 
                ldy.# 0000      ; TOS is dropped anyway, so don't save Y
        .a8

accept_loop
                jsr.l GET_CHR   ; blocks with Mensch Monitor. TODO see if KEY better

                cmp.# AscLF     ; we quit on both line feed and carriage return
                beq accept_eol

                cmp.# AscCR
                beq accept_eol

                ; TODO control sequences such as BACKSPACE, DEL, CNTRL-P, etc

                jsr.l PUT_CHR   ; echo character. TODO see if this should be EMIT

                ; TODO multitasking: Add PAUSE here (or in EMIT?) 

                sta.diy cib     ; STA (CIB),Y
                iny
                cpy.d tmp2      ; reached character limit? TODO TEST
                bne accept_loop ; fall thru if buffer limit reached

accept_eol
                sty.d ciblen    ; Y contains number of chars accepted already
                inx             
                inx
        .a16
                
z_accept        rts

; -------------------------------------------------------------------
; BYE ( -- ) 2 bytes / 7-8 cycles
; Leave Liara Forth, returning to Mensch Monitor

a_bye           brk 00  ; status byte 00 required for assembler
z_bye           rts     ; dummy for compiling, never reached

; -------------------------------------------------------------------
; COMMA "," ( n -- ) 11 bytes / 29 cycles
; Allot one cell and store TOS in memory. We ignore alignment issues, though
; satisfy the ANSI requirement that an aligned compiler pointer will remain
; aligned
; There is another variant possible: 
;               tya
;               ldy.d cp
;               sta.y 0000
;               iny
;               iny
;               sty.d cp
;               ldy.dx 00
;               inx
;               inx
; This is as fast as the variant below, but three bytes longer

a_comma         tya
                sta.di cp       ; STA (CP)
                inc.d cp
                inc.d cp

                ldy.dx 00
                inx
                inx

z_comma         rts

; -------------------------------------------------------------------
; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
; Convert old-style character string to address-length pair. Note that the
; length of the string c-addr ist stored in character length (8 bit), not cell
; length (16 bit). This is rarely used these days, though COUNT can also be used
; to step through a string character by character. 

a_count         tya
                inc.a           ; String address starts one char later
                dex
                dex
                sta.dx 00       ; NOS
                
                lda.y 0000      ; LDA $0000,Y  first byte is length
                xba             ; move length to LSBS
                and.# 00ff      ; get rid of whatever was MSB
                tay             ; TOS
                
z_count         rts


; -------------------------------------------------------------------
; CR ( -- ) X bytes / X cycles
; Cause following output to appear at beginning of next line

a_cr            
        .a8     
                lda.# AscLF     ; test with AscCR for emulators
                jsr.l PUT_CHR
        .a16

z_cr            rts

; -------------------------------------------------------------------
; DROP ( n -- ) 4 bytes / 9 cycles
; Drop first entry on Data Stack

a_drop          
                ldy.dx 00 
                inx
                inx

z_drop          rts


; -------------------------------------------------------------------
; DUP  ( n -- n n ) 4 bytes / 9 cycles
; Duplicate first entry on Data Stack

a_dup           dex
                dex
                sty.dx 00

z_dup           rts

; -------------------------------------------------------------------
; FALSE ( -- f ) 7 bytes / 12 cycles
; Pushes value $0000 for Forth true on Data Stack. This is the same code as for 
; ZERO, see there. Dictionary entry should have a_zero/z_zero instead of
; a_false/z_false

; -------------------------------------------------------------------
; HERE ( -- u ) 6 bytes / 13 cycles
; Push Compiler Pointer address on the Data Stack

a_here          dex
                dex
                sty.dx 00
                ldy.d cp

z_here          rts

; -------------------------------------------------------------------
; NIP ( n m -- m ) 2 bytes / 4 cycles
; Delete entry that is NOS
;
a_nip           inx
                inx
z_nip           rts

; ------------------------------------------------------------------- 
; REFILL ( -- f ) X bytes / X cycles
; "Attempt to fill the input buffer from the input source, returning a true flag
; if successful. When the input source is the user input device, attempt to
; receive input into the terminal input buffer. If successful, make the result
; the input buffer, set >IN to zero, and return true. Receipt of a line
; containing no characters is considered successful. If there is no input
; available from the current input source, return false. When the input source
; is a string from EVALUATE, return false and perform no other action."
; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
; and Conklin & Rather p. 156
a_refill        
                ; We handle buffer switches here so that regardless of input
                ; source, we have access to the previous input. This is not in
                ; the ANSI specification in any way.
                lda.d cib
                eor.# 0100      ; flip 07d00 / 07c00
                sta.d cib
                
                lda.d ciblen
                sta.d piblen

                ; Get input source from SOURCE-ID. We don't have blocks in this
                ; version, or else we would have to check BLK first. This is an
                ; optimized version of a subroutine jump to SOURCE-ID
                lda.d insrc
                bne refill_source_is_not_keyboard

                ; SOURCE-ID of zero means we're getting stuff from the keyboard
                ; with ACCEPT. 
                dex                     ; push Data Stack down twice
                dex
                dex
                dex
                sty.dx 02

                lda.# buffersize        ; 256 chars, ANSI demands at least 80 as NOS
                sta.dx 00

                ldy.d cib               ; address of current input buffer TOS 

                jsr a_accept

                ; Add success flag TRUE
                dex
                dex
                sty.dx 00
                ldy.# 0ffff
                rts

refill_source_is_not_keyboard
                ; If SOURCE-ID doesn't return a zero, it must be a string in
                ; memory or a file (remember, no blocks in this version)
                cmp.# 0ffff
                bne refill_source_is_not_string

                ; Simply return FALSE flag as per specification
                dex
                dex
                sty.dx 00
                ldy.# 0000
                rts

refill_source_is_not_string
                ; Since we don't have blocks, this must mean that we are trying
                ; to read from a file. However, we don't have files yet, so we 
                ; report an error and jump to ABORT.
                lda.# es_refill2 
                jsr printstring

                jmp a_abort

z_refill        rts     ; dummy for compiling

; -------------------------------------------------------------------
; SOURCE ( -- addr u ) 12 bytes / X cycles
; Return the address and size of current input buffer. Replaces TIB and #TIB in
; ANSI Forth

a_source        dex             ; make room on Data Stack
                dex
                dex
                dex
                sty.dx 02

                lda.d cib       ; address of current input buffer as NOS
                sta.dx 00

                ldy.d ciblen    ; length of current input buffer as TOS
                
z_source        rts

; -------------------------------------------------------------------
; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
; Since we don't have blocks (yet), this will give the input source: 0 is
; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.

a_source-id     dex
                dex
                sty.dx 00
                ldy.d insrc
                
z_source-id     rts

; -------------------------------------------------------------------
; STATE ( -- addr ) 7 bytes / 12 cycles
; Return the address of a cell containing the compilation-state flag. STATE
; is true when in compilation state, false otherwise. STATE should be changed
; directly by the user; see
; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250

a_state         dex
                dex
                sty.dx 00
                ldy.# state
                
z_state         rts


; -------------------------------------------------------------------
; SWAP ( n m -- m n ) 5 bytes / 12 cycles
; Exchange TOS with NOS, destroys Y

a_swap          lda.dx 00
                sty.dx 00
                tay 

z_swap          rts

; -------------------------------------------------------------------
; TRUE ( -- f ) 7 bytes / 12 cycles
; Pushes value $FFFF for Forth true on Data Stack

a_true          dex
                dex
                sty.dx 00 
                ldy.# 0ffff

z_true          rts

; -------------------------------------------------------------------
; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
; Insert TOS below NOS

a_tuck          dex
                dex
                lda.dx 2
                sta.dx 0
                sty.dx 2
                
z_tuck          rts


; ===================================================================
; MIDDLE INCLUDES

        .include headers.tasm

; ===================================================================
; LOW LEVEL HELPER FUNCTIONS

; ------------------------------------------------------------------- 
; Print a zero terminated string to the console, adding a CR character. Takes
; the address of the string in 16-bit A register, calls PUT_CHR from the Mensch
; Monitor. A is destroyed. We could probably figure out some way to use TYPE
; instead, but zero terminated strings are easier for the 65816 to use. 
; This would be shorter with PUT_STR, but we want to keep the number of Monitor
; routines called as small as possible to make porting the code easier
printstring     
                ; don't use tmpdsp for X because we don't know if the user has
                ; used it for something already
                phx
                tax ; x16 contains address of string
        .a8
@
                lda.x 0000      ; LDA $0000,X 
                beq printstring_done
                jsr.l PUT_CHR
                inx
                bra -

printstring_done
                lda.# AscLF     ; should be CR on some systems
                jsr.l PUT_CHR
        .a16
                plx
                rts

; ===================================================================
; BOTTOM INCLUDES

        .include strings.tasm

; ===================================================================
; TESTING ROUTINES (UNCOMMENT FOR USE)
                
                ; --- TODO TESTING (PRINT A) ---
                ; lda.# 61
                ; jsr.l 00:e04b
                ; brk 00
                ; --- TODO TESTING ---
                
                ; --- TODO TESTING (HALT CPU) ---
                ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
                ; stp    ; STP for crude65816 emulator tests
                ; --- TODO TESTING ---
                
; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


; ===================================================================
; END

        .end
