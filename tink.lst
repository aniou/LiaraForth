A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 24. January 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Thu Feb 16 14:19:13 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.10890 seconds
Code origin: 006000
Bytes of machine code: 3603

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 16. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 ; start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   ; start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   ; end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   ; end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   ; end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           ; buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         ; maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         ; start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         ; start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         ; size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         ; distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 ; single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 ; multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 ; multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             ; single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             ; initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      ; Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      ; Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  ; Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  ; Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  ; Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  ; Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    ; Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } ; Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } ; Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   ; Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  ; STATE: 1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   ; Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   ; Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   ; Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   ; Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } ; Currently compiliing word
  16:073 | DONE wsp | em  8  8 |        |             |
  16:074 | DONE wsp | em  8  8 |        |             |
  16:075 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:076 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:077 | DONE wsp | em  8  8 |        |             |
  16:078 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              ; break (Control-C) ASCII character
  16:080 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ; ACSCII bell sound
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              ; backspace ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              ; line feed ASCII character
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              ; carriage return ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ; ASCII CNTR-n (for next command)
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ; ASCII CNTR-p (for previous command)
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              ; Escape ASCII character
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              ; space ASCII character
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              ; DEL ASCII character
  16:089 | DONE wsp | em  8  8 |        |             |
  16:090 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:091 | DONE dir | em  8  8 |        |             |         .equ PW 0008                 ; Primitive (Native) Word
  16:092 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 ; Compile Only
  16:093 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 ; Immediate Word
  16:094 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 ; Native (inline) Compile
  16:095 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           ; 19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           ; Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           ; Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           ; Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           ; Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           ; Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           ; Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           ; Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           ; Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           ; Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           ; Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           ; Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           ; Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           ; Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           ; Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           ; Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           ; Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           ; Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           ; System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           ; Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           ; Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           ; Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           ; Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           ; Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           ; Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           ; UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           ; UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           ; Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           ; Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           ; Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           ; Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           ; Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           ; Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           ; Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           ; Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           ; Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           ; Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           ; Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           ; Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           ; Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           ; Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           ; Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           ; Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          ; UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          ; UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          ; UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          ; UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          ; UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          ; UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          ; UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          ; UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           ; UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            ; Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           ; Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           ; Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      ; Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           ; Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    ; And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           ; Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           ; Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             ; Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           ; Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      ; Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           ; UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           ; we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  ; save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             ; (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           ; timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           ; transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  ; Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             ; (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           ; Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           ; No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           ; Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  ; save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           ; read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                ; shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  ; restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           ; don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     ; these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             | 		; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 87 63    |                 jsr 006387           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  57:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  58:000 | DONE ins | na 16 16 | 00606a | a9 d3 6a    |                 lda.# 006ad3         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         ; start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE wsp | na 16 16 |        |             |
  70:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         ; previous input buffer is empty
  71:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         ; SOURCE-ID is zero
  72:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         ; STATE is zero (interpret)
  73:000 | DONE wsp | na 16 16 |        |             |
  74:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  75:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  76:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  77:000 | DONE wsp | na 16 16 |        |             |
  78:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  79:000 | DONE ins | na 16 16 | 006085 | 20 6c 65    |                 jsr 00656c           
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  82:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is rubbish, so we don't have to push it to the
  83:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  84:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  88:000 | DONE ins | na 16 16 | 00608c | a9 a0 6b    |                 lda.# 006ba0         
  89:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            ; Start address goes in NOS
  90:000 | DONE ins | na 16 16 | 006091 | a0 cb 00    |                 ldy.# 0000cb         ; length goes in TOS
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE ins | na 16 16 | 006094 | 20 39 64    |                 jsr 006439           
  93:000 | DONE wsp | na 16 16 |        |             |
  94:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to ABORT
  95:000 | DONE wsp | na 16 16 |        |             |
  96:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  97:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  98:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  99:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 100:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 101:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 102:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 103:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 103:001 | DONE ctl | na 16 16 |        |             |         .!a16
 104:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 105:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 106:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE wsp | na 16 16 |        |             |
 109:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 110:000 | DONE wsp | na 16 16 |        |             |
 111:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 112:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 113:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 114:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 115:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 116:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 117:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 118:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 119:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 120:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 123:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 124:000 | DONE ins | na 16 16 | 0060a3 | 9c 68 64    |                 stz 006468           
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 127:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 130:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 131:000 | DONE wsp | na 16 16 |        |             |
 132:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 133:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 134:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 135:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 136:000 | DONE wsp | na 16 16 |        |             |
 137:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 138:000 | DONE ins | na 16 16 | 0060ac | 20 de 65    |                 jsr 0065de           ; ( -- f )
 139:000 | DONE wsp | na 16 16 |        |             |
 140:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  ; force flag test
 141:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 142:000 | DONE wsp | na 16 16 |        |             |
 143:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 145:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 146:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 147:000 | DONE ins | na 16 16 | 0060b2 | a9 3f 6d    |                 lda.# 006d3f         
 148:000 | DONE ins | na 16 16 | 0060b5 | 4c 66 6b    |                 jmp 006b66           
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE wsp | na 16 16 |        |             |
 151:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 152:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 153:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 154:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 155:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 156:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            ; drop TOS
 157:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 158:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 159:000 | DONE wsp | na 16 16 |        |             |
 160:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 161:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 164:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 165:000 | DONE ins | na 16 16 | 0060be | 20 f4 6a    |                 jsr 006af4           
 166:000 | DONE wsp | na 16 16 |        |             |
 167:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 168:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 169:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 170:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 171:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           ; DSP must always be smaller (!) than DSP0
 172:000 | DONE wsp | na 16 16 |        |             |
 173:000 | DONE ins | na 16 16 | 0060c6 | a9 a5 6d    |                 lda.# 006da5         
 174:000 | DONE ins | na 16 16 | 0060c9 | 4c 66 6b    |                 jmp 006b66           
 175:000 | DONE wsp | na 16 16 |        |             |
 176:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 177:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 178:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 179:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 180:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 181:000 | DONE wsp | na 16 16 |        |             |
 182:000 | DONE ins | na 16 16 | 0060d0 | a9 6b 6c    |                 lda.# 006c6b         
 183:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 184:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 185:000 | DONE ins | na 16 16 | 0060d5 | a9 6f 6c    |                 lda.# 006c6f         ; fall through to quit_print
 186:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 187:000 | DONE ins | na 16 16 | 0060d8 | 20 6c 6b    |                 jsr 006b6c           
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, guys. Now get the next one
 190:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 191:000 | DONE wsp | na 16 16 |        |             |
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 194:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 194:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  ; dummy for compilation, TODO test if required
 195:000 | DONE wsp | na 16 16 |        |             |
 196:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 197:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 198:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 199:000 | DONE lbl | na 16 16 | 0060df |             | xt_to-in                             
 200:000 | DONE ins | na 16 16 | 0060df | ca          |                 dex                  
 201:000 | DONE ins | na 16 16 | 0060e0 | ca          |                 dex                  
 202:000 | DONE ins | na 16 16 | 0060e1 | 94 00       |                 sty.dx 00            
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | a0 12 02    |                 ldy.# 000212         ; >IN
 205:000 | DONE lbl | na 16 16 | 0060e6 |             | z_to-in                              
 205:001 | DONE ins | na 16 16 | 0060e6 | 60          |                 rts                  
 206:000 | DONE wsp | na 16 16 |        |             |
 207:000 | DONE wsp | na 16 16 |        |             |
 208:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 209:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 210:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 211:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 212:000 | DONE cmt | na 16 16 |        |             | ; aligned
 213:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 214:000 | DONE cmt | na 16 16 |        |             | ;               tya
 215:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 216:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 217:000 | DONE cmt | na 16 16 |        |             | ;               iny
 218:000 | DONE cmt | na 16 16 |        |             | ;               iny
 219:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 220:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 221:000 | DONE cmt | na 16 16 |        |             | ;               inx
 222:000 | DONE cmt | na 16 16 |        |             | ;               inx
 223:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 224:000 | DONE lbl | na 16 16 | 0060e7 |             | xt_comma                             
 225:000 | DONE ins | na 16 16 | 0060e7 | 98          |                 tya                  
 226:000 | DONE ins | na 16 16 | 0060e8 | 92 00       |                 sta.di 000200        ; STA (CP)
 227:000 | DONE ins | na 16 16 | 0060ea | e6 00       |                 inc.d 000200         
 228:000 | DONE ins | na 16 16 | 0060ec | e6 00       |                 inc.d 000200         
 229:000 | DONE wsp | na 16 16 |        |             |
 230:000 | DONE ins | na 16 16 | 0060ee | b4 00       |                 ldy.dx 00            
 231:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 232:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE lbl | na 16 16 | 0060f2 |             | z_comma                              
 234:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 235:000 | DONE wsp | na 16 16 |        |             |
 236:000 | DONE wsp | na 16 16 |        |             |
 237:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 238:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 239:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 240:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 241:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_colon                             
 242:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 243:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 244:000 | DONE ins | na 16 16 | 0060f3 | a5 14       |                 lda.d 000214         
 245:000 | DONE ins | na 16 16 | 0060f5 | f0 06       |                 beq 0060fd           
 246:000 | DONE wsp | na 16 16 |        |             |
 247:000 | DONE ins | na 16 16 | 0060f7 | a9 8d 6d    |                 lda.# 006d8d         
 248:000 | DONE ins | na 16 16 | 0060fa | 4c 66 6b    |                 jmp 006b66           
 249:000 | DONE lbl | na 16 16 | 0060fd |             | @                                    
 250:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 251:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 252:000 | DONE ins | na 16 16 | 0060fd | e6 14       |                 inc.d 000214         
 253:000 | DONE wsp | na 16 16 |        |             |
 254:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 255:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 256:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 257:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 258:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 259:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 260:000 | DONE ins | na 16 16 | 0060ff | a5 02       |                 lda.d 000202         
 261:000 | DONE ins | na 16 16 | 006101 | 48          |                 pha                  ; CREATE uses tmp1, tmp2 and tmp3
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE ins | na 16 16 | 006102 | 20 14 63    |                 jsr 006314           
 264:000 | DONE wsp | na 16 16 |        |             |
 265:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 266:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 267:000 | DONE ins | na 16 16 | 006105 | a5 02       |                 lda.d 000202         
 268:000 | DONE ins | na 16 16 | 006107 | 85 1e       |                 sta.d 00021e         
 269:000 | DONE ins | na 16 16 | 006109 | 68          |                 pla                  
 270:000 | DONE ins | na 16 16 | 00610a | 85 02       |                 sta.d 000202         
 271:000 | DONE wsp | na 16 16 |        |             |
 272:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 273:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 274:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 275:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 276:000 | DONE ins | na 16 16 | 00610c | a5 00       |                 lda.d 000200         
 277:000 | DONE ins | na 16 16 | 00610e | 38          |                 sec                  
 278:000 | DONE ins | na 16 16 | 00610f | e9 03 00    |                 sbc.# 0003           
 279:000 | DONE ins | na 16 16 | 006112 | 85 00       |                 sta.d 000200         
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE lbl | na 16 16 | 006114 |             | z_colon                              
 281:001 | DONE ins | na 16 16 | 006114 | 60          |                 rts                  
 282:000 | DONE wsp | na 16 16 |        |             |
 283:000 | DONE wsp | na 16 16 |        |             |
 284:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 285:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 286:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 287:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 288:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free
 289:000 | DONE cmt | na 16 16 |        |             | ; byte.
 290:000 | DONE lbl | na 16 16 | 006115 |             | xt_semicolon                         
 291:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 292:000 | DONE ins | na 16 16 | 006115 | 84 06       |                 sty.d 000206         
 293:000 | DONE wsp | na 16 16 |        |             |
 294:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 295:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 296:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 297:000 | DONE ins | na 16 16 | 006117 | a0 06 00    |                 ldy.# 0006           
 298:000 | DONE ins | na 16 16 | 00611a | a5 00       |                 lda.d 000200         
 299:000 | DONE ins | na 16 16 | 00611c | 91 1e       |                 sta.diy 00021e       ; STA (WORKWORD),Y
 300:000 | DONE wsp | na 16 16 |        |             |
 301:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 302:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 303:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 304:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 305:000 | DONE ins | na 16 16 | 00611e | a9 60 00    |                 lda.# 60             ; opcode for RTS
 306:000 | DONE ins | na 16 16 | 006121 | 92 00       |                 sta.di 000200        ; STA (CP)
 307:000 | DONE ins | na 16 16 | 006123 | e6 00       |                 inc.d 000200         ; MSB will be overwritten
 308:000 | DONE wsp | na 16 16 |        |             |
 309:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 310:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 311:000 | DONE ins | na 16 16 | 006125 | a5 1e       |                 lda.d 00021e         
 312:000 | DONE ins | na 16 16 | 006127 | 85 02       |                 sta.d 000202         
 313:000 | DONE wsp | na 16 16 |        |             |
 314:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 315:000 | DONE ins | na 16 16 | 006129 | a4 06       |                 ldy.d 000206         
 316:000 | DONE wsp | na 16 16 |        |             |
 317:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 318:000 | DONE ins | na 16 16 | 00612b | 64 14       |                 stz.d 000214         
 319:000 | DONE wsp | na 16 16 |        |             |
 320:000 | DONE lbl | na 16 16 | 00612d |             | z_semicolon                          
 320:001 | DONE ins | na 16 16 | 00612d | 60          |                 rts                  
 321:000 | DONE wsp | na 16 16 |        |             |
 322:000 | DONE wsp | na 16 16 |        |             |
 323:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 324:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 325:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and so can be pretty
 326:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 327:000 | DONE lbl | na 16 16 | 00612e |             | xt_question                          
 328:000 | DONE ins | na 16 16 | 00612e | 20 3f 61    |                 jsr 00613f           
 329:000 | DONE ins | na 16 16 | 006131 | 20 9c 63    |                 jsr 00639c           
 330:000 | DONE wsp | na 16 16 |        |             |
 331:000 | DONE lbl | na 16 16 | 006134 |             | z_question                           
 331:001 | DONE ins | na 16 16 | 006134 | 60          |                 rts                  
 332:000 | DONE wsp | na 16 16 |        |             |
 333:000 | DONE wsp | na 16 16 |        |             |
 334:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 335:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 336:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 337:000 | DONE lbl | na 16 16 | 006135 |             | xt_store                             
 338:000 | DONE ins | na 16 16 | 006135 | b5 00       |                 lda.dx 00            ; NOS has value
 339:000 | DONE ins | na 16 16 | 006137 | 99 00 00    |                 sta.y 0000           
 340:000 | DONE ins | na 16 16 | 00613a | e8          |                 inx                  
 341:000 | DONE ins | na 16 16 | 00613b | e8          |                 inx                  
 342:000 | DONE ins | na 16 16 | 00613c | e8          |                 inx                  
 343:000 | DONE ins | na 16 16 | 00613d | e8          |                 inx                  
 344:000 | DONE wsp | na 16 16 |        |             |
 345:000 | DONE lbl | na 16 16 | 00613e |             | z_store                              
 345:001 | DONE ins | na 16 16 | 00613e | 60          |                 rts                  
 346:000 | DONE wsp | na 16 16 |        |             |
 347:000 | DONE wsp | na 16 16 |        |             |
 348:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 349:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 350:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 351:000 | DONE lbl | na 16 16 | 00613f |             | xt_fetch                             
 352:000 | DONE ins | na 16 16 | 00613f | b9 00 00    |                 lda.y 0000           
 353:000 | DONE ins | na 16 16 | 006142 | a8          |                 tay                  
 354:000 | DONE lbl | na 16 16 | 006143 |             | z_fetch                              
 354:001 | DONE ins | na 16 16 | 006143 | 60          |                 rts                  
 355:000 | DONE wsp | na 16 16 |        |             |
 356:000 | DONE wsp | na 16 16 |        |             |
 357:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 358:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 359:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 360:000 | DONE lbl | na 16 16 | 006144 |             | xt_leftbracket                       
 361:000 | DONE ins | na 16 16 | 006144 | 64 14       |                 stz.d 000214         
 362:000 | DONE lbl | na 16 16 | 006146 |             | z_leftbracket                        
 362:001 | DONE ins | na 16 16 | 006146 | 60          |                 rts                  
 363:000 | DONE wsp | na 16 16 |        |             |
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 366:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 367:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 368:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 369:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 370:000 | DONE lbl | na 16 16 | 006147 |             | xt_rightbracket                      
 371:000 | DONE ins | na 16 16 | 006147 | a9 01 00    |                 lda.# 0001           
 372:000 | DONE ins | na 16 16 | 00614a | 85 14       |                 sta.d 000214         
 373:000 | DONE wsp | na 16 16 |        |             |
 374:000 | DONE lbl | na 16 16 | 00614c |             | z_rightbracket                       
 374:001 | DONE ins | na 16 16 | 00614c | 60          |                 rts                  
 375:000 | DONE wsp | na 16 16 |        |             |
 376:000 | DONE wsp | na 16 16 |        |             |
 377:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 378:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 379:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 380:000 | DONE lbl | na 16 16 | 00614d |             | xt_plus                              
 381:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 382:000 | DONE ins | na 16 16 | 00614d | 98          |                 tya                  
 383:000 | DONE ins | na 16 16 | 00614e | 18          |                 clc                  
 384:000 | DONE ins | na 16 16 | 00614f | 75 00       |                 adc.dx 00            
 385:000 | DONE ins | na 16 16 | 006151 | a8          |                 tay                  
 386:000 | DONE ins | na 16 16 | 006152 | e8          |                 inx                  
 387:000 | DONE ins | na 16 16 | 006153 | e8          |                 inx                  
 388:000 | DONE wsp | na 16 16 |        |             |
 389:000 | DONE lbl | na 16 16 | 006154 |             | z_plus                               
 389:001 | DONE ins | na 16 16 | 006154 | 60          |                 rts                  
 390:000 | DONE wsp | na 16 16 |        |             |
 391:000 | DONE wsp | na 16 16 |        |             |
 392:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 393:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 394:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 395:000 | DONE lbl | na 16 16 | 006155 |             | xt_minus                             
 396:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 397:000 | DONE ins | na 16 16 | 006155 | 98          |                 tya                  
 398:000 | DONE ins | na 16 16 | 006156 | 49 ff ff    |                 eor.# 0ffff          
 399:000 | DONE wsp | na 16 16 |        |             |
 400:000 | DONE ins | na 16 16 | 006159 | 38          |                 sec                  ; not CLC
 401:000 | DONE ins | na 16 16 | 00615a | 75 00       |                 adc.dx 00            
 402:000 | DONE wsp | na 16 16 |        |             |
 403:000 | DONE ins | na 16 16 | 00615c | a8          |                 tay                  
 404:000 | DONE ins | na 16 16 | 00615d | e8          |                 inx                  
 405:000 | DONE ins | na 16 16 | 00615e | e8          |                 inx                  
 406:000 | DONE wsp | na 16 16 |        |             |
 407:000 | DONE lbl | na 16 16 | 00615f |             | z_minus                              
 407:001 | DONE ins | na 16 16 | 00615f | 60          |                 rts                  
 408:000 | DONE wsp | na 16 16 |        |             |
 409:000 | DONE wsp | na 16 16 |        |             |
 410:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 411:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 412:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 413:000 | DONE lbl | na 16 16 | 006160 |             | xt_zero                              
 414:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 415:000 | DONE ins | na 16 16 | 006160 | ca          |                 dex                  
 416:000 | DONE ins | na 16 16 | 006161 | ca          |                 dex                  
 417:000 | DONE ins | na 16 16 | 006162 | 94 00       |                 sty.dx 00            
 418:000 | DONE ins | na 16 16 | 006164 | a0 00 00    |                 ldy.# 0000           
 419:000 | DONE wsp | na 16 16 |        |             |
 420:000 | DONE lbl | na 16 16 | 006167 |             | z_zero                               
 420:001 | DONE ins | na 16 16 | 006167 | 60          |                 rts                  
 421:000 | DONE wsp | na 16 16 |        |             |
 422:000 | DONE wsp | na 16 16 |        |             |
 423:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 424:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 425:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 426:000 | DONE lbl | na 16 16 | 006168 |             | xt_one                               
 427:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 428:000 | DONE ins | na 16 16 | 006168 | ca          |                 dex                  
 429:000 | DONE ins | na 16 16 | 006169 | ca          |                 dex                  
 430:000 | DONE ins | na 16 16 | 00616a | 94 00       |                 sty.dx 00            
 431:000 | DONE ins | na 16 16 | 00616c | a0 01 00    |                 ldy.# 0001           
 432:000 | DONE wsp | na 16 16 |        |             |
 433:000 | DONE lbl | na 16 16 | 00616f |             | z_one                                
 433:001 | DONE ins | na 16 16 | 00616f | 60          |                 rts                  
 434:000 | DONE wsp | na 16 16 |        |             |
 435:000 | DONE wsp | na 16 16 |        |             |
 436:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 437:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 438:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 439:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 440:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 441:000 | DONE lbl | na 16 16 | 006170 |             | xt_one-minus                         
 442:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 443:000 | DONE ins | na 16 16 | 006170 | 88          |                 dey                  
 444:000 | DONE lbl | na 16 16 | 006171 |             | z_one-minus                          
 444:001 | DONE ins | na 16 16 | 006171 | 60          |                 rts                  
 445:000 | DONE wsp | na 16 16 |        |             |
 446:000 | DONE wsp | na 16 16 |        |             |
 447:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 448:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 449:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 450:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 451:000 | DONE lbl | na 16 16 | 006172 |             | xt_one-plus                          
 452:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 453:000 | DONE ins | na 16 16 | 006172 | c8          |                 iny                  
 454:000 | DONE lbl | na 16 16 | 006173 |             | z_one-plus                           
 454:001 | DONE ins | na 16 16 | 006173 | 60          |                 rts                  
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE wsp | na 16 16 |        |             |
 457:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 458:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 459:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 460:000 | DONE lbl | na 16 16 | 006174 |             | xt_two                               
 461:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 462:000 | DONE ins | na 16 16 | 006174 | ca          |                 dex                  
 463:000 | DONE ins | na 16 16 | 006175 | ca          |                 dex                  
 464:000 | DONE ins | na 16 16 | 006176 | 94 00       |                 sty.dx 00            
 465:000 | DONE ins | na 16 16 | 006178 | a0 02 00    |                 ldy.# 0002           
 466:000 | DONE wsp | na 16 16 |        |             |
 467:000 | DONE lbl | na 16 16 | 00617b |             | z_two                                
 467:001 | DONE ins | na 16 16 | 00617b | 60          |                 rts                  
 468:000 | DONE wsp | na 16 16 |        |             |
 469:000 | DONE wsp | na 16 16 |        |             |
 470:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 471:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 472:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 473:000 | DONE lbl | na 16 16 | 00617c |             | xt_two-star                          
 474:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 475:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 476:000 | DONE ins | na 16 16 | 00617c | 98          |                 tya                  
 477:000 | DONE ins | na 16 16 | 00617d | 0a          |                 asl.a                
 478:000 | DONE ins | na 16 16 | 00617e | a8          |                 tay                  
 479:000 | DONE wsp | na 16 16 |        |             |
 480:000 | DONE lbl | na 16 16 | 00617f |             | z_two-star                           
 480:001 | DONE ins | na 16 16 | 00617f | 60          |                 rts                  
 481:000 | DONE wsp | na 16 16 |        |             |
 482:000 | DONE wsp | na 16 16 |        |             |
 483:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 484:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
 485:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
 486:000 | DONE lbl | na 16 16 | 006180 |             | xt_2drop                             
 487:000 | DONE ins | na 16 16 | 006180 | b4 02       |                 ldy.dx 02            
 488:000 | DONE ins | na 16 16 | 006182 | e8          |                 inx                  
 489:000 | DONE ins | na 16 16 | 006183 | e8          |                 inx                  
 490:000 | DONE ins | na 16 16 | 006184 | e8          |                 inx                  
 491:000 | DONE ins | na 16 16 | 006185 | e8          |                 inx                  
 492:000 | DONE wsp | na 16 16 |        |             |
 493:000 | DONE lbl | na 16 16 | 006186 |             | z_2drop                              
 493:001 | DONE ins | na 16 16 | 006186 | 60          |                 rts                  
 494:000 | DONE wsp | na 16 16 |        |             |
 495:000 | DONE wsp | na 16 16 |        |             |
 496:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 497:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 498:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 499:000 | DONE wsp | na 16 16 |        |             |
 500:000 | DONE lbl | na 16 16 | 006187 |             | xt_2dup                              
 501:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 502:000 | DONE ins | na 16 16 | 006187 | ca          |                 dex                  
 503:000 | DONE ins | na 16 16 | 006188 | ca          |                 dex                  
 504:000 | DONE ins | na 16 16 | 006189 | ca          |                 dex                  
 505:000 | DONE ins | na 16 16 | 00618a | ca          |                 dex                  
 506:000 | DONE ins | na 16 16 | 00618b | 94 02       |                 sty.dx 02            
 507:000 | DONE ins | na 16 16 | 00618d | b5 04       |                 lda.dx 04            
 508:000 | DONE ins | na 16 16 | 00618f | 95 00       |                 sta.dx 00            
 509:000 | DONE wsp | na 16 16 |        |             |
 510:000 | DONE lbl | na 16 16 | 006191 |             | z_2dup                               
 510:001 | DONE ins | na 16 16 | 006191 | 60          |                 rts                  
 511:000 | DONE wsp | na 16 16 |        |             |
 512:000 | DONE wsp | na 16 16 |        |             |
 513:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 514:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 515:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 516:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 517:000 | DONE lbl | na 16 16 | 006192 |             | xt_tick                              
 518:000 | DONE ins | na 16 16 | 006192 | 20 79 65    |                 jsr 006579           ; ( -- addr u )
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE cmt | na 16 16 |        |             | 		; if we got a zero, complain and abort
 521:000 | DONE ins | na 16 16 | 006195 | 98          |                 tya                  ; force flag check
 522:000 | DONE ins | na 16 16 | 006196 | d0 06       |                 bne 00619e           
 523:000 | DONE wsp | na 16 16 |        |             |
 524:000 | DONE ins | na 16 16 | 006198 | a9 18 6d    |                 lda.# 006d18         
 525:000 | DONE ins | na 16 16 | 00619b | 4c 66 6b    |                 jmp 006b66           
 526:000 | DONE wsp | na 16 16 |        |             |
 527:000 | DONE lbl | na 16 16 | 00619e |             | tick_have_word                       
 528:000 | DONE ins | na 16 16 | 00619e | 20 76 64    |                 jsr 006476           ; ( addr u -- nt)
 529:000 | DONE ins | na 16 16 | 0061a1 | 98          |                 tya                  ; force flag check
 530:000 | DONE wsp | na 16 16 |        |             |
 531:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 532:000 | DONE ins | na 16 16 | 0061a2 | d0 06       |                 bne 0061aa           
 533:000 | DONE wsp | na 16 16 |        |             |
 534:000 | DONE ins | na 16 16 | 0061a4 | a9 b5 6d    |                 lda.# 006db5         
 535:000 | DONE ins | na 16 16 | 0061a7 | 4c 66 6b    |                 jmp 006b66           
 536:000 | DONE wsp | na 16 16 |        |             |
 537:000 | DONE lbl | na 16 16 | 0061aa |             | tick_have_nt                         
 538:000 | DONE ins | na 16 16 | 0061aa | 20 2e 65    |                 jsr 00652e           ; ( nt -- xt )
 539:000 | DONE wsp | na 16 16 |        |             |
 540:000 | DONE lbl | na 16 16 | 0061ad |             | z_tick                               
 540:001 | DONE ins | na 16 16 | 0061ad | 60          |                 rts                  
 541:000 | DONE wsp | na 16 16 |        |             |
 542:000 | DONE wsp | na 16 16 |        |             |
 543:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 544:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 545:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 546:000 | DONE lbl | na 16 16 | 0061ae |             | xt_abs                               
 547:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 548:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 549:000 | DONE ins | na 16 16 | 0061ae | 98          |                 tya                  ; force flag test
 550:000 | DONE ins | na 16 16 | 0061af | 10 05       |                 bpl 0061b6           ; positive number is easy
 551:000 | DONE wsp | na 16 16 |        |             |
 552:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 553:000 | DONE ins | na 16 16 | 0061b1 | 49 ff ff    |                 eor.# 0ffff          
 554:000 | DONE ins | na 16 16 | 0061b4 | 1a          |                 inc.a                
 555:000 | DONE ins | na 16 16 | 0061b5 | a8          |                 tay                  
 556:000 | DONE wsp | na 16 16 |        |             |
 557:000 | DONE lbl | na 16 16 | 0061b6 |             | z_abs                                
 557:001 | DONE ins | na 16 16 | 0061b6 | 60          |                 rts                  
 558:000 | DONE wsp | na 16 16 |        |             |
 559:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 560:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 561:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 562:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 563:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 564:000 | DONE lbl | na 16 16 | 0061b7 |             | xt_accept                            
 565:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 566:000 | DONE ins | na 16 16 | 0061b7 | 98          |                 tya                  ; force flag test
 567:000 | DONE ins | na 16 16 | 0061b8 | d0 03       |                 bne 0061bd           
 568:000 | DONE wsp | na 16 16 |        |             |
 569:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 570:000 | DONE ins | na 16 16 | 0061ba | e8          |                 inx                  ; NIP, TOS is zero which is also FALSE
 571:000 | DONE ins | na 16 16 | 0061bb | e8          |                 inx                  
 572:000 | DONE wsp | na 16 16 |        |             |
 573:000 | DONE ins | na 16 16 | 0061bc | 60          |                 rts                  
 574:000 | DONE wsp | na 16 16 |        |             |
 575:000 | DONE lbl | na 16 16 | 0061bd |             | accept_nonzero                       
 576:000 | DONE ins | na 16 16 | 0061bd | b5 00       |                 lda.dx 00            ; address of buffer is NOS
 577:000 | DONE ins | na 16 16 | 0061bf | 85 16       |                 sta.d 000216         
 578:000 | DONE ins | na 16 16 | 0061c1 | e8          |                 inx                  ; NIP
 579:000 | DONE ins | na 16 16 | 0061c2 | e8          |                 inx                  
 580:000 | DONE wsp | na 16 16 |        |             |
 581:000 | DONE ins | na 16 16 | 0061c3 | 84 18       |                 sty.d 000218         ; Save max number of chars in tmp2
 582:000 | DONE ins | na 16 16 | 0061c5 | a0 00 00    |                 ldy.# 0000           ; Use Y as counter
 583:000 | DONE ins | na 16 16 | 0061c8 | e2 20       |                 sep 20               
 583:001 | DONE ctl | na  8 16 |        |             |         .!a8
 584:000 | DONE wsp | na  8 16 |        |             |
 585:000 | DONE lbl | na  8 16 | 0061ca |             | accept_loop                          
 586:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 587:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
 588:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 589:000 | DONE ins | na  8 16 | 0061ca | 20 47 60    |                 jsr 006047           
 590:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 591:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
 592:000 | DONE ins | na  8 16 | 0061cd | c9 0a       |                 cmp.# AscLF          
 593:000 | DONE ins | na  8 16 | 0061cf | f0 44       |                 beq 006215           
 594:000 | DONE ins | na  8 16 | 0061d1 | c9 0d       |                 cmp.# AscCR          
 595:000 | DONE ins | na  8 16 | 0061d3 | f0 40       |                 beq 006215           
 596:000 | DONE wsp | na  8 16 |        |             |
 597:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
 598:000 | DONE ins | na  8 16 | 0061d5 | c9 08       |                 cmp.# AscBS          
 599:000 | DONE ins | na  8 16 | 0061d7 | f0 44       |                 beq 00621d           
 600:000 | DONE ins | na  8 16 | 0061d9 | c9 7f       |                 cmp.# AscDEL         
 601:000 | DONE ins | na  8 16 | 0061db | f0 40       |                 beq 00621d           
 602:000 | DONE wsp | na  8 16 |        |             |
 603:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
 604:000 | DONE ins | na  8 16 | 0061dd | c9 03       |                 cmp.# AscCC          
 605:000 | DONE ins | na  8 16 | 0061df | d0 03       |                 bne 0061e4           
 606:000 | DONE ins | na  8 16 | 0061e1 | 4c 97 60    |                 jmp 006097           
 607:000 | DONE lbl | na  8 16 | 0061e4 |             | @                                    
 608:000 | DONE ins | na  8 16 | 0061e4 | c9 1b       |                 cmp.# AscESC         
 609:000 | DONE ins | na  8 16 | 0061e6 | d0 03       |                 bne 0061eb           
 610:000 | DONE ins | na  8 16 | 0061e8 | 4c 97 60    |                 jmp 006097           
 611:000 | DONE lbl | na  8 16 | 0061eb |             | @                                    
 612:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
 613:000 | DONE ins | na  8 16 | 0061eb | c9 10       |                 cmp.# AscCP          
 614:000 | DONE ins | na  8 16 | 0061ed | d0 0c       |                 bne 0061fb           
 615:000 | DONE ins | na  8 16 | 0061ef | c2 20       |                 rep 20               
 615:001 | DONE ctl | na 16 16 |        |             |         .!a16
 616:000 | DONE ins | na 16 16 | 0061f1 | a9 ce 6d    |                 lda.# 006dce         
 617:000 | DONE ins | na 16 16 | 0061f4 | 20 6c 6b    |                 jsr 006b6c           
 618:000 | DONE ins | na 16 16 | 0061f7 | e2 20       |                 sep 20               
 618:001 | DONE ctl | na  8 16 |        |             |         .!a8
 619:000 | DONE ins | na  8 16 | 0061f9 | 80 cf       |                 bra 0061ca           
 620:000 | DONE lbl | na  8 16 | 0061fb |             | @                                    
 621:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
 622:000 | DONE ins | na  8 16 | 0061fb | c9 0e       |                 cmp.# AscCN          
 623:000 | DONE ins | na  8 16 | 0061fd | d0 0c       |                 bne 00620b           
 624:000 | DONE ins | na  8 16 | 0061ff | c2 20       |                 rep 20               
 624:001 | DONE ctl | na 16 16 |        |             |         .!a16
 625:000 | DONE ins | na 16 16 | 006201 | a9 e1 6d    |                 lda.# 006de1         
 626:000 | DONE ins | na 16 16 | 006204 | 20 6c 6b    |                 jsr 006b6c           
 627:000 | DONE ins | na 16 16 | 006207 | e2 20       |                 sep 20               
 627:001 | DONE ctl | na  8 16 |        |             |         .!a8
 628:000 | DONE ins | na  8 16 | 006209 | 80 bf       |                 bra 0061ca           
 629:000 | DONE wsp | na  8 16 |        |             |
 630:000 | DONE lbl | na  8 16 | 00620b |             | @                                    
 631:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
 632:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
 633:000 | DONE ins | na  8 16 | 00620b | 20 36 60    |                 jsr 006036           ; echo character
 634:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 635:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 636:000 | DONE wsp | na  8 16 |        |             |
 637:000 | DONE ins | na  8 16 | 00620e | 91 0c       |                 sta.diy 00020c       ; STA (CIB),Y
 638:000 | DONE ins | na  8 16 | 006210 | c8          |                 iny                  
 639:000 | DONE ins | na  8 16 | 006211 | c4 18       |                 cpy.d 000218         ; reached character limit?
 640:000 | DONE ins | na  8 16 | 006213 | d0 b5       |                 bne 0061ca           ; fall thru if buffer limit reached
 641:000 | DONE wsp | na  8 16 |        |             |
 642:000 | DONE lbl | na  8 16 | 006215 |             | accept_eol                           
 643:000 | DONE ins | na  8 16 | 006215 | 84 0e       |                 sty.d 00020e         ; Y contains number of chars accepted already
 644:000 | DONE ins | na  8 16 | 006217 | c2 20       |                 rep 20               
 644:001 | DONE ctl | na 16 16 |        |             |         .!a16
 645:000 | DONE ins | na 16 16 | 006219 | 20 2e 66    |                 jsr 00662e           ; print final space
 646:000 | DONE ins | na 16 16 | 00621c | 60          |                 rts                  ; this is the actual return of the routine
 647:000 | DONE wsp | na 16 16 |        |             |
 648:000 | DONE lbl | na 16 16 | 00621d |             | accept_bs                            
 649:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 650:000 | DONE ins | na  8 16 | 00621d | c0 00 00    |                 cpy.# 0000           ; buffer empty?
 651:000 | DONE ins | na  8 16 | 006220 | d0 06       |                 bne 006228           
 652:000 | DONE wsp | na  8 16 |        |             |
 653:000 | DONE ins | na  8 16 | 006222 | a9 07       |                 lda.# AscBELL        ; complain and don't delete beyond the start of line
 654:000 | DONE ins | na  8 16 | 006224 | 20 36 60    |                 jsr 006036           
 655:000 | DONE ins | na  8 16 | 006227 | c8          |                 iny                  
 656:000 | DONE lbl | na  8 16 | 006228 |             | @                                    
 657:000 | DONE ins | na  8 16 | 006228 | 88          |                 dey                  
 658:000 | DONE ins | na  8 16 | 006229 | a9 08       |                 lda.# AscBS          ; move back one
 659:000 | DONE ins | na  8 16 | 00622b | 20 36 60    |                 jsr 006036           
 660:000 | DONE ins | na  8 16 | 00622e | a9 20       |                 lda.# AscSP          ; print a space (rubout)
 661:000 | DONE ins | na  8 16 | 006230 | 20 36 60    |                 jsr 006036           
 662:000 | DONE ins | na  8 16 | 006233 | a9 08       |                 lda.# AscBS          ; move back over space
 663:000 | DONE ins | na  8 16 | 006235 | 20 36 60    |                 jsr 006036           
 664:000 | DONE wsp | na  8 16 |        |             |
 665:000 | DONE ins | na  8 16 | 006238 | 80 90       |                 bra 0061ca           
 666:000 | DONE wsp | na  8 16 |        |             |
 667:000 | DONE lbl | na  8 16 | 00623a |             | z_accept                             
 667:001 | DONE ins | na  8 16 | 00623a | 60          |                 rts                  
 668:000 | DONE wsp | na  8 16 |        |             |
 669:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 670:000 | DONE cmt | na  8 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
 671:000 | DONE cmt | na  8 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
 672:000 | DONE cmt | na  8 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
 673:000 | DONE cmt | na  8 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
 674:000 | DONE cmt | na  8 16 |        |             | ; past the Dictionary.
 675:000 | DONE cmt | na  8 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
 676:000 | DONE cmt | na  8 16 |        |             | ; TODO test negative values
 677:000 | DONE lbl | na  8 16 | 00623b |             | xt_allot                             
 678:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 679:000 | DONE ins | na 16 16 | 00623b | 98          |                 tya                  ; force flag check
 680:000 | DONE ins | na 16 16 | 00623c | f0 21       |                 beq 00625f           ; zero bytes, don't do anything
 681:000 | DONE ins | na 16 16 | 00623e | 30 12       |                 bmi 006252           ; free memory instead of reserving it
 682:000 | DONE wsp | na 16 16 |        |             |
 683:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
 684:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
 685:000 | DONE ins | na 16 16 | 006240 | 18          |                 clc                  
 686:000 | DONE ins | na 16 16 | 006241 | 65 00       |                 adc.d 000200         ; create new CP
 687:000 | DONE ins | na 16 16 | 006243 | b0 07       |                 bcs 00624c           ; oops, we've wrapped
 688:000 | DONE wsp | na 16 16 |        |             |
 689:000 | DONE ins | na 16 16 | 006245 | a8          |                 tay                  ; save copy of new CP
 690:000 | DONE wsp | na 16 16 |        |             |
 691:000 | DONE ins | na 16 16 | 006246 | 38          |                 sec                  
 692:000 | DONE ins | na 16 16 | 006247 | e9 ff 7b    |                 sbc.# 007bff         
 693:000 | DONE ins | na 16 16 | 00624a | 30 11       |                 bmi 00625d           ; oops, fall thru if beyond max RAM
 694:000 | DONE wsp | na 16 16 |        |             |
 695:000 | DONE lbl | na 16 16 | 00624c |             | allot_error                          
 696:000 | DONE ins | na 16 16 | 00624c | a9 79 6c    |                 lda.# 006c79         
 697:000 | DONE ins | na 16 16 | 00624f | 4c 66 6b    |                 jmp 006b66           
 698:000 | DONE wsp | na 16 16 |        |             |
 699:000 | DONE lbl | na 16 16 | 006252 |             | allot_minus                          
 700:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
 701:000 | DONE ins | na 16 16 | 006252 | 38          |                 sec                  
 702:000 | DONE ins | na 16 16 | 006253 | e5 00       |                 sbc.d 000200         
 703:000 | DONE ins | na 16 16 | 006255 | 90 f5       |                 bcc 00624c           ; oops, we've wrapped
 704:000 | DONE wsp | na 16 16 |        |             |
 705:000 | DONE ins | na 16 16 | 006257 | a8          |                 tay                  
 706:000 | DONE wsp | na 16 16 |        |             |
 707:000 | DONE ins | na 16 16 | 006258 | e9 00 03    |                 sbc.# 000300         ; Carry Flag must still be set
 708:000 | DONE ins | na 16 16 | 00625b | 30 ef       |                 bmi 00624c           ; oops, gone too far back
 709:000 | DONE wsp | na 16 16 |        |             |
 710:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
 711:000 | DONE lbl | na 16 16 | 00625d |             | allot_done                           
 712:000 | DONE ins | na 16 16 | 00625d | 84 00       |                 sty.d 000200         ; new compiler pointer
 713:000 | DONE lbl | na 16 16 | 00625f |             | allot_real_gone                      
 714:000 | DONE ins | na 16 16 | 00625f | b4 00       |                 ldy.dx 00            ; DROP
 715:000 | DONE ins | na 16 16 | 006261 | e8          |                 inx                  
 716:000 | DONE ins | na 16 16 | 006262 | e8          |                 inx                  
 717:000 | DONE wsp | na 16 16 |        |             |
 718:000 | DONE lbl | na 16 16 | 006263 |             | z_allot                              
 718:001 | DONE ins | na 16 16 | 006263 | 60          |                 rts                  
 719:000 | DONE wsp | na 16 16 |        |             |
 720:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 721:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
 722:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
 723:000 | DONE lbl | na 16 16 | 006264 |             | xt_and                               
 724:000 | DONE ins | na 16 16 | 006264 | 98          |                 tya                  
 725:000 | DONE ins | na 16 16 | 006265 | 35 00       |                 and.dx 00            
 726:000 | DONE ins | na 16 16 | 006267 | a8          |                 tay                  
 727:000 | DONE wsp | na 16 16 |        |             |
 728:000 | DONE ins | na 16 16 | 006268 | e8          |                 inx                  ; NIP
 729:000 | DONE ins | na 16 16 | 006269 | e8          |                 inx                  
 730:000 | DONE wsp | na 16 16 |        |             |
 731:000 | DONE lbl | na 16 16 | 00626a |             | z_and                                
 731:001 | DONE ins | na 16 16 | 00626a | 60          |                 rts                  
 732:000 | DONE wsp | na 16 16 |        |             |
 733:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 734:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
 735:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
 736:000 | DONE lbl | na 16 16 | 00626b |             | xt_base                              
 737:000 | DONE ins | na 16 16 | 00626b | ca          |                 dex                  
 738:000 | DONE ins | na 16 16 | 00626c | ca          |                 dex                  
 739:000 | DONE ins | na 16 16 | 00626d | 94 00       |                 sty.dx 00            
 740:000 | DONE wsp | na 16 16 |        |             |
 741:000 | DONE ins | na 16 16 | 00626f | a0 1c 02    |                 ldy.# 00021c         
 742:000 | DONE wsp | na 16 16 |        |             |
 743:000 | DONE lbl | na 16 16 | 006272 |             | z_base                               
 743:001 | DONE ins | na 16 16 | 006272 | 60          |                 rts                  
 744:000 | DONE wsp | na 16 16 |        |             |
 745:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 746:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 747:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
 748:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 749:000 | DONE lbl | na 16 16 | 006273 |             | xt_bell                              
 750:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 751:000 | DONE ins | na 16 16 | 006273 | a9 07 00    |                 lda.# AscBELL        
 752:000 | DONE ins | na 16 16 | 006276 | 20 36 60    |                 jsr 006036           
 753:000 | DONE wsp | na 16 16 |        |             |
 754:000 | DONE lbl | na 16 16 | 006279 |             | z_bell                               
 754:001 | DONE ins | na 16 16 | 006279 | 60          |                 rts                  
 755:000 | DONE wsp | na 16 16 |        |             |
 756:000 | DONE wsp | na 16 16 |        |             |
 757:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 758:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 759:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 760:000 | DONE lbl | na 16 16 | 00627a |             | xt_bl                                
 761:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 762:000 | DONE ins | na 16 16 | 00627a | ca          |                 dex                  
 763:000 | DONE ins | na 16 16 | 00627b | ca          |                 dex                  
 764:000 | DONE ins | na 16 16 | 00627c | 94 00       |                 sty.dx 00            
 765:000 | DONE ins | na 16 16 | 00627e | a0 20 00    |                 ldy.# AscSP          
 766:000 | DONE wsp | na 16 16 |        |             |
 767:000 | DONE lbl | na 16 16 | 006281 |             | z_bl                                 
 767:001 | DONE ins | na 16 16 | 006281 | 60          |                 rts                  
 768:000 | DONE wsp | na 16 16 |        |             |
 769:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 770:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 771:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 772:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
 773:000 | DONE lbl | na 16 16 | 006282 |             | xt_bye                               
 774:000 | DONE ins | na 16 16 | 006282 | 58          |                 cli                  
 775:000 | DONE ins | na 16 16 | 006283 | 00 00       |                 brk 00               ; status byte 00 required for assembler
 776:000 | DONE wsp | na 16 16 |        |             |
 777:000 | DONE lbl | na 16 16 | 006285 |             | z_bye                                
 777:001 | DONE ins | na 16 16 | 006285 | 60          |                 rts                  ; dummy for compiling, never reached
 778:000 | DONE wsp | na 16 16 |        |             |
 779:000 | DONE wsp | na 16 16 |        |             |
 780:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 781:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
 782:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
 783:000 | DONE lbl | na 16 16 | 006286 |             | xt_c-comma                           
 784:000 | DONE ins | na 16 16 | 006286 | 98          |                 tya                  
 785:000 | DONE ins | na 16 16 | 006287 | e2 20       |                 sep 20               
 785:001 | DONE ctl | na  8 16 |        |             |         .!a8
 786:000 | DONE ins | na  8 16 | 006289 | 92 00       |                 sta.di 000200        ; STA (CP)
 787:000 | DONE ins | na  8 16 | 00628b | c2 20       |                 rep 20               
 787:001 | DONE ctl | na 16 16 |        |             |         .!a16
 788:000 | DONE ins | na 16 16 | 00628d | e6 00       |                 inc.d 000200         ; quick version of 1 ALLOT
 789:000 | DONE wsp | na 16 16 |        |             |
 790:000 | DONE ins | na 16 16 | 00628f | b4 00       |                 ldy.dx 00            
 791:000 | DONE ins | na 16 16 | 006291 | e8          |                 inx                  
 792:000 | DONE ins | na 16 16 | 006292 | e8          |                 inx                  
 793:000 | DONE wsp | na 16 16 |        |             |
 794:000 | DONE lbl | na 16 16 | 006293 |             | z_c-comma                            
 794:001 | DONE ins | na 16 16 | 006293 | 60          |                 rts                  
 795:000 | DONE wsp | na 16 16 |        |             |
 796:000 | DONE wsp | na 16 16 |        |             |
 797:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 798:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
 799:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
 800:000 | DONE lbl | na 16 16 | 006294 |             | xt_c-fetch                           
 801:000 | DONE ins | na 16 16 | 006294 | e2 20       |                 sep 20               
 801:001 | DONE ctl | na  8 16 |        |             |         .!a8
 802:000 | DONE ins | na  8 16 | 006296 | b9 00 00    |                 lda.y 0000           
 803:000 | DONE ins | na  8 16 | 006299 | c2 20       |                 rep 20               
 803:001 | DONE ctl | na 16 16 |        |             |         .!a16
 804:000 | DONE ins | na 16 16 | 00629b | 29 ff 00    |                 and.# 00ff           
 805:000 | DONE ins | na 16 16 | 00629e | a8          |                 tay                  
 806:000 | DONE wsp | na 16 16 |        |             |
 807:000 | DONE lbl | na 16 16 | 00629f |             | z_c-fetch                            
 807:001 | DONE ins | na 16 16 | 00629f | 60          |                 rts                  
 808:000 | DONE wsp | na 16 16 |        |             |
 809:000 | DONE wsp | na 16 16 |        |             |
 810:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 811:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
 812:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
 813:000 | DONE lbl | na 16 16 | 0062a0 |             | xt_c-store                           
 814:000 | DONE ins | na 16 16 | 0062a0 | b5 00       |                 lda.dx 00            
 815:000 | DONE ins | na 16 16 | 0062a2 | e2 20       |                 sep 20               
 815:001 | DONE ctl | na  8 16 |        |             |         .!a8
 816:000 | DONE ins | na  8 16 | 0062a4 | 99 00 00    |                 sta.y 0000           
 817:000 | DONE ins | na  8 16 | 0062a7 | c2 20       |                 rep 20               
 817:001 | DONE ctl | na 16 16 |        |             |         .!a16
 818:000 | DONE ins | na 16 16 | 0062a9 | b4 02       |                 ldy.dx 02            
 819:000 | DONE ins | na 16 16 | 0062ab | e8          |                 inx                  
 820:000 | DONE ins | na 16 16 | 0062ac | e8          |                 inx                  
 821:000 | DONE ins | na 16 16 | 0062ad | e8          |                 inx                  
 822:000 | DONE ins | na 16 16 | 0062ae | e8          |                 inx                  
 823:000 | DONE wsp | na 16 16 |        |             |
 824:000 | DONE lbl | na 16 16 | 0062af |             | z_c-store                            
 824:001 | DONE ins | na 16 16 | 0062af | 60          |                 rts                  
 825:000 | DONE wsp | na 16 16 |        |             |
 826:000 | DONE wsp | na 16 16 |        |             |
 827:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 828:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
 829:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
 830:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
 831:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
 832:000 | DONE wsp | na 16 16 |        |             |
 833:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 834:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
 835:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
 836:000 | DONE lbl | na 16 16 | 0062b0 |             | xt_char                              
 837:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 838:000 | DONE ins | na 16 16 | 0062b0 | 20 79 65    |                 jsr 006579           ; ( -- addr u )
 839:000 | DONE wsp | na 16 16 |        |             |
 840:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
 841:000 | DONE ins | na 16 16 | 0062b3 | 98          |                 tya                  ; force flag check
 842:000 | DONE ins | na 16 16 | 0062b4 | d0 06       |                 bne 0062bc           
 843:000 | DONE wsp | na 16 16 |        |             |
 844:000 | DONE ins | na 16 16 | 0062b6 | a9 18 6d    |                 lda.# 006d18         
 845:000 | DONE ins | na 16 16 | 0062b9 | 4c 66 6b    |                 jmp 006b66           
 846:000 | DONE wsp | na 16 16 |        |             |
 847:000 | DONE lbl | na 16 16 | 0062bc |             | char_got_char                        
 848:000 | DONE ins | na 16 16 | 0062bc | b4 00       |                 ldy.dx 00            ; get addr from NOS
 849:000 | DONE ins | na 16 16 | 0062be | b9 00 00    |                 lda.y 0000           ; LDA 0000,Y - could be C@
 850:000 | DONE ins | na 16 16 | 0062c1 | 29 ff 00    |                 and.# 00ff           
 851:000 | DONE ins | na 16 16 | 0062c4 | a8          |                 tay                  
 852:000 | DONE wsp | na 16 16 |        |             |
 853:000 | DONE ins | na 16 16 | 0062c5 | e8          |                 inx                  
 854:000 | DONE ins | na 16 16 | 0062c6 | e8          |                 inx                  
 855:000 | DONE wsp | na 16 16 |        |             |
 856:000 | DONE lbl | na 16 16 | 0062c7 |             | z_char                               
 856:001 | DONE ins | na 16 16 | 0062c7 | 60          |                 rts                  
 857:000 | DONE wsp | na 16 16 |        |             |
 858:000 | DONE wsp | na 16 16 |        |             |
 859:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 860:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
 861:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
 862:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
 863:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
 864:000 | DONE lbl | na 16 16 | 0062c8 |             | xt_compile-only                      
 865:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 866:000 | DONE ins | na 16 16 | 0062c8 | a9 04 00    |                 lda.# CO             
 867:000 | DONE ins | na 16 16 | 0062cb | eb          |                 xba                  ; flags are MSB
 868:000 | DONE ins | na 16 16 | 0062cc | 12 02       |                 ora.di 000202        ; ORA (DP)
 869:000 | DONE ins | na 16 16 | 0062ce | 92 02       |                 sta.di 000202        
 870:000 | DONE wsp | na 16 16 |        |             |
 871:000 | DONE lbl | na 16 16 | 0062d0 |             | z_compile-only                       
 871:001 | DONE ins | na 16 16 | 0062d0 | 60          |                 rts                  
 872:000 | DONE wsp | na 16 16 |        |             |
 873:000 | DONE wsp | na 16 16 |        |             |
 874:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 875:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
 876:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
 877:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
 878:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
 879:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
 880:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
 881:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
 882:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
 883:000 | DONE lbl | na 16 16 | 0062d1 |             | xt_compilecomma                      
 884:000 | DONE wsp | na 16 16 |        |             |
 885:000 | DONE lbl | na 16 16 | 0062d1 |             | compile_as_code                      
 886:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
 887:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
 888:000 | DONE cmt | na 16 16 |        |             |                 ; TODO currently just compiles subroutine jumps
 889:000 | DONE wsp | na 16 16 |        |             |
 890:000 | DONE lbl | na 16 16 | 0062d1 |             | compile_as_jump                      
 891:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
 892:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
 893:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
 894:000 | DONE cmt | na 16 16 |        |             |                 ; win!
 895:000 | DONE ins | na 16 16 | 0062d1 | a9 20 00    |                 lda.# 20             ; opcode for JSR
 896:000 | DONE ins | na 16 16 | 0062d4 | 92 00       |                 sta.di 000200        ; STA (CP)
 897:000 | DONE ins | na 16 16 | 0062d6 | e6 00       |                 inc.d 000200         
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
 900:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
 901:000 | DONE ins | na 16 16 | 0062d8 | 98          |                 tya                  
 902:000 | DONE ins | na 16 16 | 0062d9 | 92 00       |                 sta.di 000200        
 903:000 | DONE ins | na 16 16 | 0062db | e6 00       |                 inc.d 000200         
 904:000 | DONE ins | na 16 16 | 0062dd | e6 00       |                 inc.d 000200         
 905:000 | DONE wsp | na 16 16 |        |             |
 906:000 | DONE ins | na 16 16 | 0062df | b4 00       |                 ldy.dx 00            
 907:000 | DONE ins | na 16 16 | 0062e1 | e8          |                 inx                  
 908:000 | DONE ins | na 16 16 | 0062e2 | e8          |                 inx                  
 909:000 | DONE wsp | na 16 16 |        |             |
 910:000 | DONE lbl | na 16 16 | 0062e3 |             | z_compilecomma                       
 910:001 | DONE ins | na 16 16 | 0062e3 | 60          |                 rts                  
 911:000 | DONE wsp | na 16 16 |        |             |
 912:000 | DONE wsp | na 16 16 |        |             |
 913:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 914:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
 915:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
 916:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
 917:000 | DONE cmt | na 16 16 |        |             | ; lifting.
 918:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
 919:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
 920:000 | DONE lbl | na 16 16 | 0062e4 |             | xt_constant                          
 921:000 | DONE ins | na 16 16 | 0062e4 | 20 14 63    |                 jsr 006314           
 922:000 | DONE wsp | na 16 16 |        |             |
 923:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
 924:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
 925:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
 926:000 | DONE ins | na 16 16 | 0062e7 | a5 00       |                 lda.d 000200         
 927:000 | DONE ins | na 16 16 | 0062e9 | 3a          |                 dec.a                
 928:000 | DONE ins | na 16 16 | 0062ea | 3a          |                 dec.a                
 929:000 | DONE ins | na 16 16 | 0062eb | 85 16       |                 sta.d 000216         
 930:000 | DONE wsp | na 16 16 |        |             |
 931:000 | DONE ins | na 16 16 | 0062ed | a9 e6 6a    |                 lda.# 006ae6         
 932:000 | DONE ins | na 16 16 | 0062f0 | 92 16       |                 sta.di 000216        ; STA (TMP1)
 933:000 | DONE wsp | na 16 16 |        |             |
 934:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
 935:000 | DONE ins | na 16 16 | 0062f2 | 98          |                 tya                  ; there is no "sty.di cp"
 936:000 | DONE ins | na 16 16 | 0062f3 | 92 00       |                 sta.di 000200        
 937:000 | DONE ins | na 16 16 | 0062f5 | e6 00       |                 inc.d 000200         
 938:000 | DONE ins | na 16 16 | 0062f7 | e6 00       |                 inc.d 000200         
 939:000 | DONE wsp | na 16 16 |        |             |
 940:000 | DONE ins | na 16 16 | 0062f9 | b4 00       |                 ldy.dx 00            ; DROP
 941:000 | DONE ins | na 16 16 | 0062fb | e8          |                 inx                  
 942:000 | DONE ins | na 16 16 | 0062fc | e8          |                 inx                  
 943:000 | DONE wsp | na 16 16 |        |             |
 944:000 | DONE lbl | na 16 16 | 0062fd |             | z_constant                           
 944:001 | DONE ins | na 16 16 | 0062fd | 60          |                 rts                  
 945:000 | DONE wsp | na 16 16 |        |             |
 946:000 | DONE wsp | na 16 16 |        |             |
 947:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 948:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 949:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 950:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 951:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 952:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 953:000 | DONE lbl | na 16 16 | 0062fe |             | xt_count                             
 954:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 955:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 956:000 | DONE ins | na 16 16 | 0062fe | 98          |                 tya                  
 957:000 | DONE ins | na 16 16 | 0062ff | 1a          |                 inc.a                ; String address starts one char later
 958:000 | DONE wsp | na 16 16 |        |             |
 959:000 | DONE ins | na 16 16 | 006300 | ca          |                 dex                  
 960:000 | DONE ins | na 16 16 | 006301 | ca          |                 dex                  
 961:000 | DONE ins | na 16 16 | 006302 | 95 00       |                 sta.dx 00            ; NOS
 962:000 | DONE wsp | na 16 16 |        |             |
 963:000 | DONE ins | na 16 16 | 006304 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y  first byte is length
 964:000 | DONE ins | na 16 16 | 006307 | eb          |                 xba                  ; move length to LSB
 965:000 | DONE ins | na 16 16 | 006308 | 29 ff 00    |                 and.# 00ff           ; get rid of whatever was MSB
 966:000 | DONE ins | na 16 16 | 00630b | a8          |                 tay                  ; TOS
 967:000 | DONE wsp | na 16 16 |        |             |
 968:000 | DONE lbl | na 16 16 | 00630c |             | z_count                              
 968:001 | DONE ins | na 16 16 | 00630c | 60          |                 rts                  
 969:000 | DONE wsp | na 16 16 |        |             |
 970:000 | DONE wsp | na 16 16 |        |             |
 971:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 972:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 973:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 974:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 975:000 | DONE lbl | na 16 16 | 00630d |             | xt_cr                                
 976:000 | DONE ins | na 16 16 | 00630d | a9 0a 00    |                 lda.# AscLF          ; test with AscCR for emulators
 977:000 | DONE ins | na 16 16 | 006310 | 20 36 60    |                 jsr 006036           
 978:000 | DONE wsp | na 16 16 |        |             |
 979:000 | DONE lbl | na 16 16 | 006313 |             | z_cr                                 
 979:001 | DONE ins | na 16 16 | 006313 | 60          |                 rts                  
 980:000 | DONE wsp | na 16 16 |        |             |
 981:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 982:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
 983:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
 984:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
 985:000 | DONE cmt | na 16 16 |        |             | ; address.
 986:000 | DONE lbl | na 16 16 | 006314 |             | xt_create                            
 987:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 988:000 | DONE ins | na 16 16 | 006314 | 20 79 65    |                 jsr 006579           ; ( -- addr u )
 989:000 | DONE ins | na 16 16 | 006317 | d0 06       |                 bne 00631f           
 990:000 | DONE wsp | na 16 16 |        |             |
 991:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
 992:000 | DONE ins | na 16 16 | 006319 | a9 18 6d    |                 lda.# 006d18         
 993:000 | DONE ins | na 16 16 | 00631c | 4c 66 6b    |                 jmp 006b66           
 994:000 | DONE wsp | na 16 16 |        |             |
 995:000 | DONE lbl | na 16 16 | 00631f |             | create_got_name                      
 996:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
 997:000 | DONE ins | na 16 16 | 00631f | 20 9f 6b    |                 jsr 006b9f           
 998:000 | DONE wsp | na 16 16 |        |             |
 999:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1000:000 | DONE cmt | na 16 16 |        |             |                 ; word
1001:000 | DONE ins | na 16 16 | 006322 | a5 00       |                 lda.d 000200         
1002:000 | DONE ins | na 16 16 | 006324 | 85 16       |                 sta.d 000216         ; save start of new word
1003:000 | DONE wsp | na 16 16 |        |             |
1004:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1005:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1006:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1007:000 | DONE ins | na 16 16 | 006326 | 98          |                 tya                  
1008:000 | DONE ins | na 16 16 | 006327 | 29 ff 00    |                 and.# 00ff           
1009:000 | DONE ins | na 16 16 | 00632a | 85 18       |                 sta.d 000218         ; save length of name string
1010:000 | DONE wsp | na 16 16 |        |             |
1011:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1012:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1013:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1014:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1015:000 | DONE ins | na 16 16 | 00632c | 18          |                 clc                  
1016:000 | DONE ins | na 16 16 | 00632d | 69 08 00    |                 adc.# 0008           
1017:000 | DONE ins | na 16 16 | 006330 | 85 1a       |                 sta.d 00021a         ; total bytes required for header
1018:000 | DONE wsp | na 16 16 |        |             |
1019:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1020:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1021:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1022:000 | DONE ins | na 16 16 | 006332 | 1a          |                 inc.a                
1023:000 | DONE ins | na 16 16 | 006333 | 1a          |                 inc.a                
1024:000 | DONE ins | na 16 16 | 006334 | 1a          |                 inc.a                
1025:000 | DONE wsp | na 16 16 |        |             |
1026:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1027:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1028:000 | DONE ins | na 16 16 | 006335 | 18          |                 clc                  
1029:000 | DONE ins | na 16 16 | 006336 | 65 00       |                 adc.d 000200         
1030:000 | DONE ins | na 16 16 | 006338 | 85 00       |                 sta.d 000200         
1031:000 | DONE wsp | na 16 16 |        |             |
1032:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1033:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1034:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1035:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1036:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1037:000 | DONE ins | na 16 16 | 00633a | b5 00       |                 lda.dx 00            
1038:000 | DONE ins | na 16 16 | 00633c | 48          |                 pha                  
1039:000 | DONE wsp | na 16 16 |        |             |
1040:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1041:000 | DONE ins | na 16 16 | 00633d | a0 00 00    |                 ldy.# 0000           ; Y is now an index, not TOS
1042:000 | DONE ins | na 16 16 | 006340 | a5 18       |                 lda.d 000218         ; get length byte
1043:000 | DONE ins | na 16 16 | 006342 | 91 16       |                 sta.diy 000216       ; STA (TMP1),Y
1044:000 | DONE ins | na 16 16 | 006344 | c8          |                 iny                  
1045:000 | DONE ins | na 16 16 | 006345 | c8          |                 iny                  
1046:000 | DONE wsp | na 16 16 |        |             |
1047:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1048:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1049:000 | DONE ins | na 16 16 | 006346 | a5 02       |                 lda.d 000202         
1050:000 | DONE ins | na 16 16 | 006348 | 91 16       |                 sta.diy 000216       
1051:000 | DONE ins | na 16 16 | 00634a | c8          |                 iny                  
1052:000 | DONE ins | na 16 16 | 00634b | c8          |                 iny                  
1053:000 | DONE wsp | na 16 16 |        |             |
1054:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1055:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1056:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1057:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1058:000 | DONE ins | na 16 16 | 00634c | a5 16       |                 lda.d 000216         ; can't use CP, because we've allotted space
1059:000 | DONE ins | na 16 16 | 00634e | 85 02       |                 sta.d 000202         ; while we've got it, make old CP the new DP
1060:000 | DONE wsp | na 16 16 |        |             |
1061:000 | DONE ins | na 16 16 | 006350 | 18          |                 clc                  
1062:000 | DONE ins | na 16 16 | 006351 | 65 1a       |                 adc.d 00021a         ; total header length
1063:000 | DONE ins | na 16 16 | 006353 | 91 16       |                 sta.diy 000216       
1064:000 | DONE ins | na 16 16 | 006355 | c8          |                 iny                  
1065:000 | DONE ins | na 16 16 | 006356 | c8          |                 iny                  
1066:000 | DONE wsp | na 16 16 |        |             |
1067:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1068:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1069:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1070:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1071:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1072:000 | DONE ins | na 16 16 | 006357 | 1a          |                 inc.a                
1073:000 | DONE ins | na 16 16 | 006358 | 1a          |                 inc.a                
1074:000 | DONE ins | na 16 16 | 006359 | 1a          |                 inc.a                
1075:000 | DONE ins | na 16 16 | 00635a | 91 16       |                 sta.diy 000216       
1076:000 | DONE ins | na 16 16 | 00635c | c8          |                 iny                  
1077:000 | DONE ins | na 16 16 | 00635d | c8          |                 iny                  
1078:000 | DONE wsp | na 16 16 |        |             |
1079:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1080:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1081:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1082:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1083:000 | DONE ins | na 16 16 | 00635e | 68          |                 pla                  ; get back string address
1084:000 | DONE ins | na 16 16 | 00635f | 38          |                 sec                  
1085:000 | DONE ins | na 16 16 | 006360 | e9 08 00    |                 sbc.# 0008           
1086:000 | DONE ins | na 16 16 | 006363 | 85 1a       |                 sta.d 00021a         
1087:000 | DONE ins | na 16 16 | 006365 | e2 20       |                 sep 20               
1087:001 | DONE ctl | na  8 16 |        |             |         .!a8
1088:000 | DONE lbl | na  8 16 | 006367 |             | @                                    
1089:000 | DONE ins | na  8 16 | 006367 | b1 1a       |                 lda.diy 00021a       
1090:000 | DONE ins | na  8 16 | 006369 | 91 16       |                 sta.diy 000216       
1091:000 | DONE ins | na  8 16 | 00636b | c8          |                 iny                  
1092:000 | DONE ins | na  8 16 | 00636c | c6 18       |                 dec.d 000218         
1093:000 | DONE ins | na  8 16 | 00636e | d0 f7       |                 bne 006367           
1094:000 | DONE wsp | na  8 16 |        |             |
1095:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1096:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1097:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1098:000 | DONE cmt | na  8 16 |        |             |                 ; good
1099:000 | DONE ins | na  8 16 | 006370 | a9 20       |                 lda.# 20             ; opcode of JSR
1100:000 | DONE ins | na  8 16 | 006372 | 91 16       |                 sta.diy 000216       
1101:000 | DONE ins | na  8 16 | 006374 | c8          |                 iny                  ; single increase only because we have 8-bit A
1102:000 | DONE wsp | na  8 16 |        |             |
1103:000 | DONE ins | na  8 16 | 006375 | a9 df       |                 lda.# .lsb 006adf    
1104:000 | DONE ins | na  8 16 | 006377 | 91 16       |                 sta.diy 000216       
1105:000 | DONE ins | na  8 16 | 006379 | c8          |                 iny                  
1106:000 | DONE wsp | na  8 16 |        |             |
1107:000 | DONE ins | na  8 16 | 00637a | a9 6a       |                 lda.# .msb 006adf    
1108:000 | DONE ins | na  8 16 | 00637c | 91 16       |                 sta.diy 000216       
1109:000 | DONE wsp | na  8 16 |        |             |
1110:000 | DONE ins | na  8 16 | 00637e | c2 20       |                 rep 20               
1110:001 | DONE ctl | na 16 16 |        |             |         .!a16
1111:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1112:000 | DONE ins | na 16 16 | 006380 | b4 02       |                 ldy.dx 02            
1113:000 | DONE ins | na 16 16 | 006382 | e8          |                 inx                  
1114:000 | DONE ins | na 16 16 | 006383 | e8          |                 inx                  
1115:000 | DONE ins | na 16 16 | 006384 | e8          |                 inx                  
1116:000 | DONE ins | na 16 16 | 006385 | e8          |                 inx                  
1117:000 | DONE wsp | na 16 16 |        |             |
1118:000 | DONE lbl | na 16 16 | 006386 |             | z_create                             
1118:001 | DONE ins | na 16 16 | 006386 | 60          |                 rts                  
1119:000 | DONE wsp | na 16 16 |        |             |
1120:000 | DONE wsp | na 16 16 |        |             |
1121:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1122:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1123:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1124:000 | DONE lbl | na 16 16 | 006387 |             | xt_decimal                           
1125:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1126:000 | DONE ins | na 16 16 | 006387 | a9 0a 00    |                 lda.# 000a           
1127:000 | DONE ins | na 16 16 | 00638a | 85 1c       |                 sta.d 00021c         
1128:000 | DONE wsp | na 16 16 |        |             |
1129:000 | DONE lbl | na 16 16 | 00638c |             | z_decimal                            
1129:001 | DONE ins | na 16 16 | 00638c | 60          |                 rts                  
1130:000 | DONE wsp | na 16 16 |        |             |
1131:000 | DONE wsp | na 16 16 |        |             |
1132:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1133:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1134:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1135:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1136:000 | DONE lbl | na 16 16 | 00638d |             | xt_depth                             
1137:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1138:000 | DONE cmt | na 16 16 |        |             | 		; We've got zero entries when X is dsp0
1139:000 | DONE ins | na 16 16 | 00638d | 86 04       |                 stx.d 000204         
1140:000 | DONE ins | na 16 16 | 00638f | a9 f8 02    |                 lda.# 0002f8         
1141:000 | DONE ins | na 16 16 | 006392 | 38          |                 sec                  
1142:000 | DONE ins | na 16 16 | 006393 | e5 04       |                 sbc.d 000204         
1143:000 | DONE wsp | na 16 16 |        |             |
1144:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
1145:000 | DONE ins | na 16 16 | 006395 | 4a          |                 lsr.a                
1146:000 | DONE wsp | na 16 16 |        |             |
1147:000 | DONE ins | na 16 16 | 006396 | ca          |                 dex                  
1148:000 | DONE ins | na 16 16 | 006397 | ca          |                 dex                  
1149:000 | DONE ins | na 16 16 | 006398 | 94 00       |                 sty.dx 00            
1150:000 | DONE wsp | na 16 16 |        |             |
1151:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
1152:000 | DONE ins | na 16 16 | 00639a | a8          |                 tay                  
1153:000 | DONE wsp | na 16 16 |        |             |
1154:000 | DONE lbl | na 16 16 | 00639b |             | z_depth                              
1154:001 | DONE ins | na 16 16 | 00639b | 60          |                 rts                  
1155:000 | DONE wsp | na 16 16 |        |             |
1156:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1157:000 | DONE cmt | na 16 16 |        |             | ; DOT ( n -- ) X bytes / X cycles
1158:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
1159:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
1160:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
1161:000 | DONE cmt | na 16 16 |        |             | ; focus on size
1162:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
1163:000 | DONE lbl | na 16 16 | 00639c |             | xt_dot                               
1164:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1165:000 | DONE ins | na 16 16 | 00639c | 98          |                 tya                  
1166:000 | DONE ins | na 16 16 | 00639d | 29 00 ff    |                 and.# 0ff00          
1167:000 | DONE ins | na 16 16 | 0063a0 | eb          |                 xba                  
1168:000 | DONE ins | na 16 16 | 0063a1 | 20 84 6b    |                 jsr 006b84           
1169:000 | DONE ins | na 16 16 | 0063a4 | 98          |                 tya                  
1170:000 | DONE ins | na 16 16 | 0063a5 | 29 ff 00    |                 and.# 00ff           
1171:000 | DONE ins | na 16 16 | 0063a8 | 20 84 6b    |                 jsr 006b84           
1172:000 | DONE ins | na 16 16 | 0063ab | 20 2e 66    |                 jsr 00662e           
1173:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1174:000 | DONE wsp | na 16 16 |        |             |
1175:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
1176:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
1177:000 | DONE ins | na 16 16 | 0063ae | 20 08 64    |                 jsr 006408           
1178:000 | DONE wsp | na 16 16 |        |             |
1179:000 | DONE lbl | na 16 16 | 0063b1 |             | z_dot                                
1179:001 | DONE ins | na 16 16 | 0063b1 | 60          |                 rts                  
1180:000 | DONE wsp | na 16 16 |        |             |
1181:000 | DONE wsp | na 16 16 |        |             |
1182:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1183:000 | DONE cmt | na 16 16 |        |             | ; DOTPAREN ( "string" -- ) 13 bytes / X cycles
1184:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
1185:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
1186:000 | DONE lbl | na 16 16 | 0063b2 |             | xt_dotparen                          
1187:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
1188:000 | DONE ins | na 16 16 | 0063b2 | ca          |                 dex                  
1189:000 | DONE ins | na 16 16 | 0063b3 | ca          |                 dex                  
1190:000 | DONE ins | na 16 16 | 0063b4 | 94 00       |                 sty.dx 00            
1191:000 | DONE ins | na 16 16 | 0063b6 | a0 29 00    |                 ldy.# 29             
1192:000 | DONE wsp | na 16 16 |        |             |
1193:000 | DONE ins | na 16 16 | 0063b9 | 20 ab 65    |                 jsr 0065ab           ; ( -- addr u)
1194:000 | DONE ins | na 16 16 | 0063bc | 20 61 66    |                 jsr 006661           
1195:000 | DONE wsp | na 16 16 |        |             |
1196:000 | DONE lbl | na 16 16 | 0063bf |             | z_dotparen                           
1196:001 | DONE ins | na 16 16 | 0063bf | 60          |                 rts                  
1197:000 | DONE wsp | na 16 16 |        |             |
1198:000 | DONE wsp | na 16 16 |        |             |
1199:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1200:000 | DONE cmt | na 16 16 |        |             | ; DOTS ".S" ( -- ) X bytes / X cycles
1201:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
1202:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
1203:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
1204:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
1205:000 | DONE lbl | na 16 16 | 0063c0 |             | xt_dots                              
1206:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1207:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1208:000 | DONE ins | na 16 16 | 0063c0 | 20 8d 63    |                 jsr 00638d           ; ( -- u)
1209:000 | DONE wsp | na 16 16 |        |             |
1210:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
1211:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
1212:000 | DONE ins | na 16 16 | 0063c3 | a9 3c 00    |                 lda.# 3c             
1213:000 | DONE ins | na 16 16 | 0063c6 | 20 36 60    |                 jsr 006036           
1214:000 | DONE wsp | na 16 16 |        |             |
1215:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1216:000 | DONE ins | na 16 16 | 0063c9 | 98          |                 tya                  
1217:000 | DONE ins | na 16 16 | 0063ca | 29 00 ff    |                 and.# 0ff00          
1218:000 | DONE ins | na 16 16 | 0063cd | eb          |                 xba                  
1219:000 | DONE ins | na 16 16 | 0063ce | 20 84 6b    |                 jsr 006b84           
1220:000 | DONE ins | na 16 16 | 0063d1 | 98          |                 tya                  
1221:000 | DONE ins | na 16 16 | 0063d2 | 29 ff 00    |                 and.# 00ff           
1222:000 | DONE ins | na 16 16 | 0063d5 | 20 84 6b    |                 jsr 006b84           
1223:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1224:000 | DONE wsp | na 16 16 |        |             |
1225:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
1226:000 | DONE ins | na 16 16 | 0063d8 | a9 3e 00    |                 lda.# 3e             
1227:000 | DONE ins | na 16 16 | 0063db | 20 36 60    |                 jsr 006036           
1228:000 | DONE ins | na 16 16 | 0063de | 20 2e 66    |                 jsr 00662e           
1229:000 | DONE wsp | na 16 16 |        |             |
1230:000 | DONE wsp | na 16 16 |        |             |
1231:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
1232:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
1233:000 | DONE ins | na 16 16 | 0063e1 | 98          |                 tya                  ; force flag test
1234:000 | DONE ins | na 16 16 | 0063e2 | f0 20       |                 beq 006404           
1235:000 | DONE wsp | na 16 16 |        |             |
1236:000 | DONE lbl | na 16 16 | 0063e4 |             | dots_not_empty                       
1237:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
1238:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
1239:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
1240:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
1241:000 | DONE wsp | na 16 16 |        |             |
1242:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
1243:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
1244:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
1245:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
1246:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
1247:000 | DONE ins | na 16 16 | 0063e4 | da          |                 phx                  
1248:000 | DONE wsp | na 16 16 |        |             |
1249:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
1250:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
1251:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
1252:000 | DONE ins | na 16 16 | 0063e5 | a2 f8 02    |                 ldx.# 0002f8         ; points to dsp0, which is garbage
1253:000 | DONE ins | na 16 16 | 0063e8 | ca          |                 dex                  
1254:000 | DONE ins | na 16 16 | 0063e9 | ca          |                 dex                  ; points to dsp0-2, which is more garbage
1255:000 | DONE wsp | na 16 16 |        |             |
1256:000 | DONE lbl | na 16 16 | 0063ea |             | dots_loop                            
1257:000 | DONE ins | na 16 16 | 0063ea | ca          |                 dex                  ; get next element on DS, initially dsp0-4
1258:000 | DONE ins | na 16 16 | 0063eb | ca          |                 dex                  
1259:000 | DONE wsp | na 16 16 |        |             |
1260:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1261:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
1262:000 | DONE ins | na 16 16 | 0063ec | b5 00       |                 lda.dx 00            
1263:000 | DONE ins | na 16 16 | 0063ee | 29 00 ff    |                 and.# 0ff00          
1264:000 | DONE ins | na 16 16 | 0063f1 | eb          |                 xba                  
1265:000 | DONE ins | na 16 16 | 0063f2 | 20 84 6b    |                 jsr 006b84           
1266:000 | DONE ins | na 16 16 | 0063f5 | b5 00       |                 lda.dx 00            
1267:000 | DONE ins | na 16 16 | 0063f7 | 29 ff 00    |                 and.# 00ff           
1268:000 | DONE ins | na 16 16 | 0063fa | 20 84 6b    |                 jsr 006b84           
1269:000 | DONE ins | na 16 16 | 0063fd | 20 2e 66    |                 jsr 00662e           
1270:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1271:000 | DONE wsp | na 16 16 |        |             |
1272:000 | DONE ins | na 16 16 | 006400 | 88          |                 dey                  
1273:000 | DONE ins | na 16 16 | 006401 | d0 e7       |                 bne 0063ea           
1274:000 | DONE wsp | na 16 16 |        |             |
1275:000 | DONE ins | na 16 16 | 006403 | fa          |                 plx                  ; restore original DSP
1276:000 | DONE wsp | na 16 16 |        |             |
1277:000 | DONE lbl | na 16 16 | 006404 |             | dots_done                            
1278:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
1279:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
1280:000 | DONE ins | na 16 16 | 006404 | 20 08 64    |                 jsr 006408           
1281:000 | DONE wsp | na 16 16 |        |             |
1282:000 | DONE lbl | na 16 16 | 006407 |             | z_dots                               
1282:001 | DONE ins | na 16 16 | 006407 | 60          |                 rts                  
1283:000 | DONE wsp | na 16 16 |        |             |
1284:000 | DONE wsp | na 16 16 |        |             |
1285:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1286:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1287:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1288:000 | DONE wsp | na 16 16 |        |             |
1289:000 | DONE lbl | na 16 16 | 006408 |             | xt_drop                              
1290:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1291:000 | DONE ins | na 16 16 | 006408 | b4 00       |                 ldy.dx 00            
1292:000 | DONE ins | na 16 16 | 00640a | e8          |                 inx                  
1293:000 | DONE ins | na 16 16 | 00640b | e8          |                 inx                  
1294:000 | DONE wsp | na 16 16 |        |             |
1295:000 | DONE lbl | na 16 16 | 00640c |             | z_drop                               
1295:001 | DONE ins | na 16 16 | 00640c | 60          |                 rts                  
1296:000 | DONE wsp | na 16 16 |        |             |
1297:000 | DONE wsp | na 16 16 |        |             |
1298:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1299:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1300:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1301:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1302:000 | DONE lbl | na 16 16 | 00640d |             | xt_dump                              
1303:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1304:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1305:000 | DONE ins | na 16 16 | 00640d | 84 16       |                 sty.d 000216         
1306:000 | DONE wsp | na 16 16 |        |             |
1307:000 | DONE lbl | na 16 16 | 00640f |             | dump_line_loop                       
1308:000 | DONE ins | na 16 16 | 00640f | 20 0d 63    |                 jsr 00630d           
1309:000 | DONE wsp | na 16 16 |        |             |
1310:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1311:000 | DONE ins | na 16 16 | 006412 | a0 10 00    |                 ldy.# 0010           
1312:000 | DONE lbl | na 16 16 | 006415 |             | dump_byte_loop                       
1313:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1314:000 | DONE ins | na 16 16 | 006415 | a5 16       |                 lda.d 000216         
1315:000 | DONE ins | na 16 16 | 006417 | f0 11       |                 beq 00642a           
1316:000 | DONE wsp | na 16 16 |        |             |
1317:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1318:000 | DONE ins | na 16 16 | 006419 | a1 00       |                 lda.dxi 00           
1319:000 | DONE ins | na 16 16 | 00641b | 20 84 6b    |                 jsr 006b84           ; TODO replace by EMIT
1320:000 | DONE ins | na 16 16 | 00641e | 20 2e 66    |                 jsr 00662e           
1321:000 | DONE wsp | na 16 16 |        |             |
1322:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1323:000 | DONE ins | na 16 16 | 006421 | f6 00       |                 inc.dx 00            
1324:000 | DONE wsp | na 16 16 |        |             |
1325:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1326:000 | DONE ins | na 16 16 | 006423 | c6 16       |                 dec.d 000216         
1327:000 | DONE ins | na 16 16 | 006425 | 88          |                 dey                  
1328:000 | DONE ins | na 16 16 | 006426 | d0 ed       |                 bne 006415           
1329:000 | DONE ins | na 16 16 | 006428 | 80 e5       |                 bra 00640f           
1330:000 | DONE wsp | na 16 16 |        |             |
1331:000 | DONE lbl | na 16 16 | 00642a |             | dump_done                            
1332:000 | DONE ins | na 16 16 | 00642a | 20 0d 63    |                 jsr 00630d           
1333:000 | DONE wsp | na 16 16 |        |             |
1334:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1335:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1336:000 | DONE ins | na 16 16 | 00642d | b4 02       |                 ldy.dx 02            
1337:000 | DONE ins | na 16 16 | 00642f | e8          |                 inx                  
1338:000 | DONE ins | na 16 16 | 006430 | e8          |                 inx                  
1339:000 | DONE ins | na 16 16 | 006431 | e8          |                 inx                  
1340:000 | DONE ins | na 16 16 | 006432 | e8          |                 inx                  
1341:000 | DONE wsp | na 16 16 |        |             |
1342:000 | DONE lbl | na 16 16 | 006433 |             | z_dump                               
1342:001 | DONE ins | na 16 16 | 006433 | 60          |                 rts                  
1343:000 | DONE wsp | na 16 16 |        |             |
1344:000 | DONE wsp | na 16 16 |        |             |
1345:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1346:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1347:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1348:000 | DONE wsp | na 16 16 |        |             |
1349:000 | DONE lbl | na 16 16 | 006434 |             | xt_dup                               
1350:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1351:000 | DONE ins | na 16 16 | 006434 | ca          |                 dex                  
1352:000 | DONE ins | na 16 16 | 006435 | ca          |                 dex                  
1353:000 | DONE ins | na 16 16 | 006436 | 94 00       |                 sty.dx 00            
1354:000 | DONE wsp | na 16 16 |        |             |
1355:000 | DONE lbl | na 16 16 | 006438 |             | z_dup                                
1355:001 | DONE ins | na 16 16 | 006438 | 60          |                 rts                  
1356:000 | DONE wsp | na 16 16 |        |             |
1357:000 | DONE wsp | na 16 16 |        |             |
1358:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1359:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1360:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1361:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1362:000 | DONE lbl | na 16 16 | 006439 |             | xt_evaluate                          
1363:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1364:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1365:000 | DONE ins | na 16 16 | 006439 | a5 12       |                 lda.d 000212         ; >IN
1366:000 | DONE ins | na 16 16 | 00643b | 48          |                 pha                  
1367:000 | DONE ins | na 16 16 | 00643c | a5 0a       |                 lda.d 00020a         ; Input Source (SOURCE-ID)
1368:000 | DONE ins | na 16 16 | 00643e | 48          |                 pha                  
1369:000 | DONE ins | na 16 16 | 00643f | a5 0c       |                 lda.d 00020c         
1370:000 | DONE ins | na 16 16 | 006441 | 48          |                 pha                  
1371:000 | DONE ins | na 16 16 | 006442 | a5 0e       |                 lda.d 00020e         
1372:000 | DONE ins | na 16 16 | 006444 | 48          |                 pha                  
1373:000 | DONE wsp | na 16 16 |        |             |
1374:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
1375:000 | DONE ins | na 16 16 | 006445 | a9 ff ff    |                 lda.# 0ffff          
1376:000 | DONE ins | na 16 16 | 006448 | 85 0a       |                 sta.d 00020a         
1377:000 | DONE wsp | na 16 16 |        |             |
1378:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
1379:000 | DONE ins | na 16 16 | 00644a | 64 12       |                 stz.d 000212         
1380:000 | DONE wsp | na 16 16 |        |             |
1381:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
1382:000 | DONE ins | na 16 16 | 00644c | 84 0e       |                 sty.d 00020e         
1383:000 | DONE ins | na 16 16 | 00644e | b5 00       |                 lda.dx 00            
1384:000 | DONE ins | na 16 16 | 006450 | 85 0c       |                 sta.d 00020c         
1385:000 | DONE wsp | na 16 16 |        |             |
1386:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1387:000 | DONE ins | na 16 16 | 006452 | b4 02       |                 ldy.dx 02            
1388:000 | DONE ins | na 16 16 | 006454 | e8          |                 inx                  
1389:000 | DONE ins | na 16 16 | 006455 | e8          |                 inx                  
1390:000 | DONE ins | na 16 16 | 006456 | e8          |                 inx                  
1391:000 | DONE ins | na 16 16 | 006457 | e8          |                 inx                  
1392:000 | DONE wsp | na 16 16 |        |             |
1393:000 | DONE ins | na 16 16 | 006458 | 20 f4 6a    |                 jsr 006af4           
1394:000 | DONE wsp | na 16 16 |        |             |
1395:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1396:000 | DONE ins | na 16 16 | 00645b | 68          |                 pla                  
1397:000 | DONE ins | na 16 16 | 00645c | 85 0e       |                 sta.d 00020e         
1398:000 | DONE ins | na 16 16 | 00645e | 68          |                 pla                  
1399:000 | DONE ins | na 16 16 | 00645f | 85 0c       |                 sta.d 00020c         
1400:000 | DONE ins | na 16 16 | 006461 | 68          |                 pla                  
1401:000 | DONE ins | na 16 16 | 006462 | 85 0a       |                 sta.d 00020a         
1402:000 | DONE ins | na 16 16 | 006464 | 68          |                 pla                  
1403:000 | DONE ins | na 16 16 | 006465 | 85 12       |                 sta.d 000212         
1404:000 | DONE wsp | na 16 16 |        |             |
1405:000 | DONE lbl | na 16 16 | 006467 |             | z_evaluate                           
1405:001 | DONE ins | na 16 16 | 006467 | 60          |                 rts                  
1406:000 | DONE wsp | na 16 16 |        |             |
1407:000 | DONE wsp | na 16 16 |        |             |
1408:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1409:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1410:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1411:000 | DONE wsp | na 16 16 |        |             |
1412:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1413:000 | DONE cmt | na 16 16 |        |             | ; range
1414:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1415:000 | DONE lbl | na 16 16 | 006468 |             | execute_ip                           
1415:001 | DONE dir | na 16 16 | 006468 | (3 bytes)   |         .byte 00, 00, 00             
1415:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1416:000 | DONE wsp | na 16 16 |        |             |
1417:000 | DONE lbl | na 16 16 | 00646b |             | xt_execute                           
1418:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1419:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1420:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
1421:000 | DONE ins | na 16 16 | 00646b | 8c 68 64    |                 sty 006468           
1422:000 | DONE ins | na 16 16 | 00646e | b4 00       |                 ldy.dx 00            
1423:000 | DONE ins | na 16 16 | 006470 | e8          |                 inx                  
1424:000 | DONE ins | na 16 16 | 006471 | e8          |                 inx                  
1425:000 | DONE wsp | na 16 16 |        |             |
1426:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
1427:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
1428:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
1429:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
1430:000 | DONE ins | na 16 16 | 006472 | 6c 68 64    |                 jmp.i 006468         ; JMP (EXECUTE_IP)
1431:000 | DONE wsp | na 16 16 |        |             |
1432:000 | DONE lbl | na 16 16 | 006475 |             | z_execute                            
1432:001 | DONE ins | na 16 16 | 006475 | ea          |                 nop                  ; Never reached, see if we need the NOP
1433:000 | DONE wsp | na 16 16 |        |             |
1434:000 | DONE wsp | na 16 16 |        |             |
1435:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1436:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1437:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1438:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
1439:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
1440:000 | DONE wsp | na 16 16 |        |             |
1441:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1442:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1443:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1444:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1445:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1446:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1447:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1448:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1449:000 | DONE lbl | na 16 16 | 006476 |             | xt_find-name                         
1450:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1451:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1452:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1453:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1454:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1455:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1456:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1457:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1458:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1459:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1460:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1461:000 | DONE ins | na 16 16 | 006476 | 84 06       |                 sty.d 000206         ; length of mystery string in tmptos, Y now free
1462:000 | DONE wsp | na 16 16 |        |             |
1463:000 | DONE ins | na 16 16 | 006478 | a4 02       |                 ldy.d 000202         
1464:000 | DONE ins | na 16 16 | 00647a | 84 16       |                 sty.d 000216         ; nt of first Dictionary word
1465:000 | DONE wsp | na 16 16 |        |             |
1466:000 | DONE ins | na 16 16 | 00647c | b4 00       |                 ldy.dx 00            
1467:000 | DONE ins | na 16 16 | 00647e | 84 18       |                 sty.d 000218         ; address of mystery string, was NOS
1468:000 | DONE wsp | na 16 16 |        |             |
1469:000 | DONE lbl | na 16 16 | 006480 |             | find-name_loop                       
1470:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1471:000 | DONE ins | na 16 16 | 006480 | b2 16       |                 lda.di 000216        ; LSB in first header word is length
1472:000 | DONE ins | na 16 16 | 006482 | 29 ff 00    |                 and.# 00ff           
1473:000 | DONE ins | na 16 16 | 006485 | c5 06       |                 cmp.d 000206         ; we test LSB
1474:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1475:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1476:000 | DONE cmt | na 16 16 |        |             |                 ; same
1477:000 | DONE ins | na 16 16 | 006487 | f0 0c       |                 beq 006495           
1478:000 | DONE wsp | na 16 16 |        |             |
1479:000 | DONE lbl | na 16 16 | 006489 |             | find-name_next_entry                 
1480:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1481:000 | DONE ins | na 16 16 | 006489 | e6 16       |                 inc.d 000216         
1482:000 | DONE ins | na 16 16 | 00648b | e6 16       |                 inc.d 000216         
1483:000 | DONE ins | na 16 16 | 00648d | b2 16       |                 lda.di 000216        ; LDA (TMP1)
1484:000 | DONE wsp | na 16 16 |        |             |
1485:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1486:000 | DONE ins | na 16 16 | 00648f | f0 36       |                 beq 0064c7           
1487:000 | DONE wsp | na 16 16 |        |             |
1488:000 | DONE ins | na 16 16 | 006491 | 85 16       |                 sta.d 000216         ; new header
1489:000 | DONE ins | na 16 16 | 006493 | 80 eb       |                 bra 006480           
1490:000 | DONE wsp | na 16 16 |        |             |
1491:000 | DONE lbl | na 16 16 | 006495 |             | find-name_chars                      
1492:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1493:000 | DONE wsp | na 16 16 |        |             |
1494:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1495:000 | DONE ins | na 16 16 | 006495 | e2 20       |                 sep 20               
1495:001 | DONE ctl | na  8 16 |        |             |         .!a8
1496:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1497:000 | DONE cmt | na  8 16 |        |             |                 ; header
1498:000 | DONE ins | na  8 16 | 006497 | a0 08 00    |                 ldy.# 0008           
1499:000 | DONE ins | na  8 16 | 00649a | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y - first char of entry
1500:000 | DONE ins | na  8 16 | 00649c | d2 18       |                 cmp.di 000218        ; CMP (TMP2) - first char of mystery string
1501:000 | DONE ins | na  8 16 | 00649e | f0 04       |                 beq 0064a4           
1502:000 | DONE wsp | na  8 16 |        |             |
1503:000 | DONE lbl | na  8 16 | 0064a0 |             | find-name_char_nomatcnt_8            
1504:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1505:000 | DONE ins | na  8 16 | 0064a0 | c2 20       |                 rep 20               
1505:001 | DONE ctl | na 16 16 |        |             |         .!a16
1506:000 | DONE ins | na 16 16 | 0064a2 | 80 e5       |                 bra 006489           
1507:000 | DONE wsp | na 16 16 |        |             |
1508:000 | DONE lbl | na 16 16 | 0064a4 |             | find-name_all_chars                  
1509:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1510:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1511:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1512:000 | DONE ins | na  8 16 | 0064a4 | a4 06       |                 ldy.d 000206         
1513:000 | DONE ins | na  8 16 | 0064a6 | 88          |                 dey                  ; faster and shorter than CPY.# 01
1514:000 | DONE ins | na  8 16 | 0064a7 | f0 18       |                 beq 0064c1           
1515:000 | DONE wsp | na  8 16 |        |             |
1516:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1517:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1518:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1519:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1520:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1521:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1522:000 | DONE wsp | na  8 16 |        |             |
1523:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1524:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1525:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1526:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1527:000 | DONE ins | na  8 16 | 0064a9 | c2 20       |                 rep 20               
1527:001 | DONE ctl | na 16 16 |        |             |         .!a16
1528:000 | DONE ins | na 16 16 | 0064ab | a5 16       |                 lda.d 000216         ; address of Dictionary string
1529:000 | DONE ins | na 16 16 | 0064ad | 18          |                 clc                  
1530:000 | DONE ins | na 16 16 | 0064ae | 69 08 00    |                 adc.# 0008           
1531:000 | DONE ins | na 16 16 | 0064b1 | 85 1a       |                 sta.d 00021a         
1532:000 | DONE ins | na 16 16 | 0064b3 | e2 20       |                 sep 20               
1532:001 | DONE ctl | na  8 16 |        |             |         .!a8
1533:000 | DONE ins | na  8 16 | 0064b5 | a4 06       |                 ldy.d 000206         ; get length of strings as loop index
1534:000 | DONE ins | na  8 16 | 0064b7 | 88          |                 dey                  ; first index is length minus 1
1535:000 | DONE wsp | na  8 16 |        |             |
1536:000 | DONE lbl | na  8 16 | 0064b8 |             | @                                    
1537:000 | DONE ins | na  8 16 | 0064b8 | b1 18       |                 lda.diy 000218       ; LDA (TMP2),Y - last char of mystery string
1538:000 | DONE ins | na  8 16 | 0064ba | d1 1a       |                 cmp.diy 00021a       ; CMP (TMP1),Y - last char of DP string
1539:000 | DONE ins | na  8 16 | 0064bc | d0 e2       |                 bne 0064a0           
1540:000 | DONE ins | na  8 16 | 0064be | 88          |                 dey                  ; start of string (Y=0) was already tested
1541:000 | DONE ins | na  8 16 | 0064bf | d0 f7       |                 bne 0064b8           
1542:000 | DONE wsp | na  8 16 |        |             |
1543:000 | DONE lbl | na  8 16 | 0064c1 |             | find-name_success                    
1544:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1545:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1546:000 | DONE ins | na  8 16 | 0064c1 | c2 20       |                 rep 20               
1546:001 | DONE ctl | na 16 16 |        |             |         .!a16
1547:000 | DONE ins | na 16 16 | 0064c3 | a4 16       |                 ldy.d 000216         ; get the correct DP
1548:000 | DONE ins | na 16 16 | 0064c5 | 80 03       |                 bra 0064ca           
1549:000 | DONE wsp | na 16 16 |        |             |
1550:000 | DONE wsp | na 16 16 |        |             |
1551:000 | DONE lbl | na 16 16 | 0064c7 |             | find-name_failure_16                 
1552:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1553:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1554:000 | DONE ins | na 16 16 | 0064c7 | a0 00 00    |                 ldy.# 0000           ; fall thru
1555:000 | DONE wsp | na 16 16 |        |             |
1556:000 | DONE lbl | na 16 16 | 0064ca |             | find-name_done                       
1557:000 | DONE ins | na 16 16 | 0064ca | e8          |                 inx                  ; drop old address (NIP)
1558:000 | DONE ins | na 16 16 | 0064cb | e8          |                 inx                  
1559:000 | DONE wsp | na 16 16 |        |             |
1560:000 | DONE lbl | na 16 16 | 0064cc |             | z_find-name                          
1560:001 | DONE ins | na 16 16 | 0064cc | 60          |                 rts                  
1561:000 | DONE wsp | na 16 16 |        |             |
1562:000 | DONE wsp | na 16 16 |        |             |
1563:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1564:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
1565:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
1566:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
1567:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
1568:000 | DONE lbl | na 16 16 | 0064cd |             | xt_immediate                         
1569:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1570:000 | DONE ins | na 16 16 | 0064cd | a9 02 00    |                 lda.# IM             ; Immediate flag
1571:000 | DONE ins | na 16 16 | 0064d0 | eb          |                 xba                  ; flags are MSB
1572:000 | DONE ins | na 16 16 | 0064d1 | 12 02       |                 ora.di 000202        ; ORA (DP)
1573:000 | DONE ins | na 16 16 | 0064d3 | 92 02       |                 sta.di 000202        
1574:000 | DONE wsp | na 16 16 |        |             |
1575:000 | DONE lbl | na 16 16 | 0064d5 |             | z_immediate                          
1575:001 | DONE ins | na 16 16 | 0064d5 | 60          |                 rts                  
1576:000 | DONE wsp | na 16 16 |        |             |
1577:000 | DONE wsp | na 16 16 |        |             |
1578:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1579:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
1580:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
1581:000 | DONE lbl | na 16 16 | 0064d6 |             | xt_invert                            
1582:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1583:000 | DONE ins | na 16 16 | 0064d6 | 98          |                 tya                  
1584:000 | DONE ins | na 16 16 | 0064d7 | 49 ff ff    |                 eor.# 0ffff          
1585:000 | DONE ins | na 16 16 | 0064da | a8          |                 tay                  
1586:000 | DONE wsp | na 16 16 |        |             |
1587:000 | DONE lbl | na 16 16 | 0064db |             | z_invert                             
1587:001 | DONE ins | na 16 16 | 0064db | 60          |                 rts                  
1588:000 | DONE wsp | na 16 16 |        |             |
1589:000 | DONE wsp | na 16 16 |        |             |
1590:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1591:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
1592:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
1593:000 | DONE lbl | na 16 16 | 0064dc |             | xt_here                              
1594:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1595:000 | DONE ins | na 16 16 | 0064dc | ca          |                 dex                  
1596:000 | DONE ins | na 16 16 | 0064dd | ca          |                 dex                  
1597:000 | DONE ins | na 16 16 | 0064de | 94 00       |                 sty.dx 00            
1598:000 | DONE wsp | na 16 16 |        |             |
1599:000 | DONE ins | na 16 16 | 0064e0 | a4 00       |                 ldy.d 000200         
1600:000 | DONE wsp | na 16 16 |        |             |
1601:000 | DONE lbl | na 16 16 | 0064e2 |             | z_here                               
1601:001 | DONE ins | na 16 16 | 0064e2 | 60          |                 rts                  
1602:000 | DONE wsp | na 16 16 |        |             |
1603:000 | DONE wsp | na 16 16 |        |             |
1604:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1605:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
1606:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
1607:000 | DONE lbl | na 16 16 | 0064e3 |             | xt_hex                               
1608:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1609:000 | DONE ins | na 16 16 | 0064e3 | a9 10 00    |                 lda.# 0010           
1610:000 | DONE ins | na 16 16 | 0064e6 | 85 1c       |                 sta.d 00021c         
1611:000 | DONE wsp | na 16 16 |        |             |
1612:000 | DONE lbl | na 16 16 | 0064e8 |             | z_hex                                
1612:001 | DONE ins | na 16 16 | 0064e8 | 60          |                 rts                  
1613:000 | DONE wsp | na 16 16 |        |             |
1614:000 | DONE wsp | na 16 16 |        |             |
1615:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1616:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
1617:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
1618:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word
1619:000 | DONE lbl | na 16 16 | 0064e9 |             | xt_literal                           
1620:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
1621:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT
1622:000 | DONE ins | na 16 16 | 0064e9 | f4 fb 64    |                 phe.# 0064fb         ; PEA LIT_RT_START
1623:000 | DONE ins | na 16 16 | 0064ec | 20 45 6b    |                 jsr 006b45           
1624:000 | DONE wsp | na 16 16 |        |             |
1625:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
1626:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
1627:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
1628:000 | DONE ins | na 16 16 | 0064ef | 98          |                 tya                  
1629:000 | DONE ins | na 16 16 | 0064f0 | 92 00       |                 sta.di 000200        
1630:000 | DONE ins | na 16 16 | 0064f2 | e6 00       |                 inc.d 000200         
1631:000 | DONE ins | na 16 16 | 0064f4 | e6 00       |                 inc.d 000200         
1632:000 | DONE wsp | na 16 16 |        |             |
1633:000 | DONE ins | na 16 16 | 0064f6 | b4 00       |                 ldy.dx 00            ; DROP
1634:000 | DONE ins | na 16 16 | 0064f8 | e8          |                 inx                  
1635:000 | DONE ins | na 16 16 | 0064f9 | e8          |                 inx                  
1636:000 | DONE wsp | na 16 16 |        |             |
1637:000 | DONE lbl | na 16 16 | 0064fa |             | z_literal                            
1637:001 | DONE ins | na 16 16 | 0064fa | 60          |                 rts                  
1638:000 | DONE wsp | na 16 16 |        |             |
1639:000 | DONE lbl | na 16 16 | 0064fb |             | literal_rt                           
1640:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
1641:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
1642:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
1643:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
1644:000 | DONE wsp | na 16 16 |        |             |
1645:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
1646:000 | DONE ins | na 16 16 | 0064fb | ca          |                 dex                  
1647:000 | DONE ins | na 16 16 | 0064fc | ca          |                 dex                  
1648:000 | DONE ins | na 16 16 | 0064fd | 94 00       |                 sty.dx 00            
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
1651:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
1652:000 | DONE ins | na 16 16 | 0064ff | 7a          |                 ply                  
1653:000 | DONE ins | na 16 16 | 006500 | c8          |                 iny                  
1654:000 | DONE ins | na 16 16 | 006501 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y - get value after jump
1655:000 | DONE wsp | na 16 16 |        |             |
1656:000 | DONE ins | na 16 16 | 006504 | c8          |                 iny                  ; move return address past data and restore
1657:000 | DONE ins | na 16 16 | 006505 | 5a          |                 phy                  ; so we can get back home
1658:000 | DONE wsp | na 16 16 |        |             |
1659:000 | DONE ins | na 16 16 | 006506 | a8          |                 tay                  ; Value is now on the Data Stack ( -- n )
1660:000 | DONE wsp | na 16 16 |        |             |
1661:000 | DONE ins | na 16 16 | 006507 | 60          |                 rts                  
1662:000 | DONE wsp | na 16 16 |        |             |
1663:000 | DONE wsp | na 16 16 |        |             |
1664:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1665:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
1666:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
1667:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1668:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1669:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1670:000 | DONE lbl | na 16 16 | 006508 |             | xt_max                               
1671:000 | DONE ins | na 16 16 | 006508 | 98          |                 tya                  
1672:000 | DONE ins | na 16 16 | 006509 | d5 00       |                 cmp.dx 00            
1673:000 | DONE wsp | na 16 16 |        |             |
1674:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1675:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1676:000 | DONE ins | na 16 16 | 00650b | f0 0b       |                 beq 006518           ; Faster than DROP because TOS is in Y
1677:000 | DONE wsp | na 16 16 |        |             |
1678:000 | DONE ins | na 16 16 | 00650d | f5 00       |                 sbc.dx 00            
1679:000 | DONE ins | na 16 16 | 00650f | 50 03       |                 bvc 006514           ; no overflow, skip ahead
1680:000 | DONE wsp | na 16 16 |        |             |
1681:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1682:000 | DONE ins | na 16 16 | 006511 | 49 00 80    |                 eor.# 8000           ; compliment negative flag
1683:000 | DONE wsp | na 16 16 |        |             |
1684:000 | DONE lbl | na 16 16 | 006514 |             | max_no_ov                            
1685:000 | DONE ins | na 16 16 | 006514 | 10 02       |                 bpl 006518           ; keep TOS
1686:000 | DONE lbl | na 16 16 | 006516 |             | max_drop                             
1687:000 | DONE ins | na 16 16 | 006516 | b4 00       |                 ldy.dx 00            ; DROP so NOS is result
1688:000 | DONE lbl | na 16 16 | 006518 |             | max_nip                              
1689:000 | DONE ins | na 16 16 | 006518 | e8          |                 inx                  
1690:000 | DONE ins | na 16 16 | 006519 | e8          |                 inx                  
1691:000 | DONE wsp | na 16 16 |        |             |
1692:000 | DONE lbl | na 16 16 | 00651a |             | z_max                                
1692:001 | DONE ins | na 16 16 | 00651a | 60          |                 rts                  
1693:000 | DONE wsp | na 16 16 |        |             |
1694:000 | DONE wsp | na 16 16 |        |             |
1695:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1696:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
1697:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
1698:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1699:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1700:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1701:000 | DONE lbl | na 16 16 | 00651b |             | xt_min                               
1702:000 | DONE ins | na 16 16 | 00651b | 98          |                 tya                  
1703:000 | DONE ins | na 16 16 | 00651c | d5 00       |                 cmp.dx 00            
1704:000 | DONE wsp | na 16 16 |        |             |
1705:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1706:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1707:000 | DONE ins | na 16 16 | 00651e | f0 0b       |                 beq 00652b           ; Faster than DROP because TOS is in Y
1708:000 | DONE wsp | na 16 16 |        |             |
1709:000 | DONE ins | na 16 16 | 006520 | f5 00       |                 sbc.dx 00            
1710:000 | DONE ins | na 16 16 | 006522 | 50 03       |                 bvc 006527           ; no overflow, skip ahead
1711:000 | DONE wsp | na 16 16 |        |             |
1712:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1713:000 | DONE ins | na 16 16 | 006524 | 49 00 80    |                 eor.# 8000           ; compliment negative flag
1714:000 | DONE wsp | na 16 16 |        |             |
1715:000 | DONE lbl | na 16 16 | 006527 |             | min_no_ov                            
1716:000 | DONE ins | na 16 16 | 006527 | 30 02       |                 bmi 00652b           ; keep TOS
1717:000 | DONE lbl | na 16 16 | 006529 |             | min_drop                             
1718:000 | DONE ins | na 16 16 | 006529 | b4 00       |                 ldy.dx 00            ; DROP so NOS is result
1719:000 | DONE lbl | na 16 16 | 00652b |             | min_nip                              
1720:000 | DONE ins | na 16 16 | 00652b | e8          |                 inx                  
1721:000 | DONE ins | na 16 16 | 00652c | e8          |                 inx                  
1722:000 | DONE wsp | na 16 16 |        |             |
1723:000 | DONE lbl | na 16 16 | 00652d |             | z_min                                
1723:001 | DONE ins | na 16 16 | 00652d | 60          |                 rts                  
1724:000 | DONE wsp | na 16 16 |        |             |
1725:000 | DONE wsp | na 16 16 |        |             |
1726:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1727:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
1728:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
1729:000 | DONE lbl | na 16 16 | 00652e |             | xt_name-int                          
1730:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1731:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1732:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
1733:000 | DONE ins | na 16 16 | 00652e | c8          |                 iny                  
1734:000 | DONE ins | na 16 16 | 00652f | c8          |                 iny                  
1735:000 | DONE ins | na 16 16 | 006530 | c8          |                 iny                  
1736:000 | DONE ins | na 16 16 | 006531 | c8          |                 iny                  
1737:000 | DONE ins | na 16 16 | 006532 | b9 00 00    |                 lda.y 0000           
1738:000 | DONE ins | na 16 16 | 006535 | a8          |                 tay                  
1739:000 | DONE wsp | na 16 16 |        |             |
1740:000 | DONE lbl | na 16 16 | 006536 |             | z_name-int                           
1740:001 | DONE ins | na 16 16 | 006536 | 60          |                 rts                  
1741:000 | DONE wsp | na 16 16 |        |             |
1742:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1743:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
1744:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
1745:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
1746:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
1747:000 | DONE lbl | na 16 16 | 006537 |             | xt_name-string                       
1748:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1749:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1750:000 | DONE ins | na 16 16 | 006537 | ca          |                 dex                  ; move NOS down one
1751:000 | DONE ins | na 16 16 | 006538 | ca          |                 dex                  
1752:000 | DONE wsp | na 16 16 |        |             |
1753:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
1754:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
1755:000 | DONE ins | na 16 16 | 006539 | 98          |                 tya                  
1756:000 | DONE ins | na 16 16 | 00653a | 18          |                 clc                  
1757:000 | DONE ins | na 16 16 | 00653b | 69 08 00    |                 adc.# 0008           
1758:000 | DONE ins | na 16 16 | 00653e | 95 00       |                 sta.dx 00            ; NOS
1759:000 | DONE wsp | na 16 16 |        |             |
1760:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
1761:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
1762:000 | DONE ins | na 16 16 | 006540 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1763:000 | DONE ins | na 16 16 | 006543 | 29 ff 00    |                 and.# 00ff           ; mask all but length byte
1764:000 | DONE ins | na 16 16 | 006546 | a8          |                 tay                  
1765:000 | DONE wsp | na 16 16 |        |             |
1766:000 | DONE lbl | na 16 16 | 006547 |             | z_name-string                        
1766:001 | DONE ins | na 16 16 | 006547 | 60          |                 rts                  
1767:000 | DONE wsp | na 16 16 |        |             |
1768:000 | DONE wsp | na 16 16 |        |             |
1769:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1770:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
1771:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
1772:000 | DONE lbl | na 16 16 | 006548 |             | xt_negate                            
1773:000 | DONE ins | na 16 16 | 006548 | 98          |                 tya                  
1774:000 | DONE ins | na 16 16 | 006549 | 49 ff ff    |                 eor.# 0ffff          
1775:000 | DONE ins | na 16 16 | 00654c | 1a          |                 inc.a                
1776:000 | DONE ins | na 16 16 | 00654d | a8          |                 tay                  
1777:000 | DONE wsp | na 16 16 |        |             |
1778:000 | DONE lbl | na 16 16 | 00654e |             | z_negate                             
1778:001 | DONE ins | na 16 16 | 00654e | 60          |                 rts                  
1779:000 | DONE wsp | na 16 16 |        |             |
1780:000 | DONE wsp | na 16 16 |        |             |
1781:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1782:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
1783:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
1784:000 | DONE lbl | na 16 16 | 00654f |             | xt_nip                               
1785:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1786:000 | DONE ins | na 16 16 | 00654f | e8          |                 inx                  
1787:000 | DONE ins | na 16 16 | 006550 | e8          |                 inx                  
1788:000 | DONE lbl | na 16 16 | 006551 |             | z_nip                                
1788:001 | DONE ins | na 16 16 | 006551 | 60          |                 rts                  
1789:000 | DONE wsp | na 16 16 |        |             |
1790:000 | DONE wsp | na 16 16 |        |             |
1791:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1792:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
1793:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
1794:000 | DONE lbl | na 16 16 | 006552 |             | xt_or                                
1795:000 | DONE ins | na 16 16 | 006552 | 98          |                 tya                  
1796:000 | DONE ins | na 16 16 | 006553 | 15 00       |                 ora.dx 00            
1797:000 | DONE ins | na 16 16 | 006555 | a8          |                 tay                  
1798:000 | DONE wsp | na 16 16 |        |             |
1799:000 | DONE ins | na 16 16 | 006556 | e8          |                 inx                  
1800:000 | DONE ins | na 16 16 | 006557 | e8          |                 inx                  
1801:000 | DONE wsp | na 16 16 |        |             |
1802:000 | DONE lbl | na 16 16 | 006558 |             | z_or                                 
1802:001 | DONE ins | na 16 16 | 006558 | 60          |                 rts                  
1803:000 | DONE wsp | na 16 16 |        |             |
1804:000 | DONE wsp | na 16 16 |        |             |
1805:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1806:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
1807:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
1808:000 | DONE lbl | na 16 16 | 006559 |             | xt_over                              
1809:000 | DONE ins | na 16 16 | 006559 | ca          |                 dex                  
1810:000 | DONE ins | na 16 16 | 00655a | ca          |                 dex                  
1811:000 | DONE ins | na 16 16 | 00655b | 94 00       |                 sty.dx 00            
1812:000 | DONE ins | na 16 16 | 00655d | b4 02       |                 ldy.dx 02            
1813:000 | DONE wsp | na 16 16 |        |             |
1814:000 | DONE lbl | na 16 16 | 00655f |             | z_over                               
1814:001 | DONE ins | na 16 16 | 00655f | 60          |                 rts                  
1815:000 | DONE wsp | na 16 16 |        |             |
1816:000 | DONE wsp | na 16 16 |        |             |
1817:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1818:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
1819:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
1820:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
1821:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
1822:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
1823:000 | DONE lbl | na 16 16 | 006560 |             | xt_pad                               
1824:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1825:000 | DONE ins | na 16 16 | 006560 | ca          |                 dex                  
1826:000 | DONE ins | na 16 16 | 006561 | ca          |                 dex                  
1827:000 | DONE ins | na 16 16 | 006562 | 94 00       |                 sty.dx 00            
1828:000 | DONE wsp | na 16 16 |        |             |
1829:000 | DONE ins | na 16 16 | 006564 | a5 00       |                 lda.d 000200         
1830:000 | DONE ins | na 16 16 | 006566 | 18          |                 clc                  
1831:000 | DONE ins | na 16 16 | 006567 | 69 7f 00    |                 adc.# 00007f         
1832:000 | DONE ins | na 16 16 | 00656a | a8          |                 tay                  
1833:000 | DONE wsp | na 16 16 |        |             |
1834:000 | DONE lbl | na 16 16 | 00656b |             | z_pad                                
1834:001 | DONE ins | na 16 16 | 00656b | 60          |                 rts                  
1835:000 | DONE wsp | na 16 16 |        |             |
1836:000 | DONE wsp | na 16 16 |        |             |
1837:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1838:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
1839:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
1840:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
1841:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
1842:000 | DONE lbl | na 16 16 | 00656c |             | xt_page                              
1843:000 | DONE ins | na 16 16 | 00656c | a9 c5 6d    |                 lda.# 006dc5         
1844:000 | DONE ins | na 16 16 | 00656f | 20 6c 6b    |                 jsr 006b6c           
1845:000 | DONE wsp | na 16 16 |        |             |
1846:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
1847:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
1848:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
1849:000 | DONE ins | na 16 16 | 006572 | a9 ca 6d    |                 lda.# 006dca         
1850:000 | DONE ins | na 16 16 | 006575 | 20 6c 6b    |                 jsr 006b6c           
1851:000 | DONE wsp | na 16 16 |        |             |
1852:000 | DONE lbl | na 16 16 | 006578 |             | z_page                               
1852:001 | DONE ins | na 16 16 | 006578 | 60          |                 rts                  
1853:000 | DONE wsp | na 16 16 |        |             |
1854:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1855:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
1856:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
1857:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
1858:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
1859:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
1860:000 | DONE lbl | na 16 16 | 006579 |             | xt_parse-name                        
1861:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1862:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1863:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
1864:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
1865:000 | DONE ins | na 16 16 | 006579 | 5a          |                 phy                  ; save TOS for later use
1866:000 | DONE ins | na 16 16 | 00657a | a4 12       |                 ldy.d 000212         ; >IN
1867:000 | DONE ins | na 16 16 | 00657c | e2 20       |                 sep 20               
1867:001 | DONE ctl | na  8 16 |        |             |         .!a8
1868:000 | DONE lbl | na  8 16 | 00657e |             | parse-name_loop                      
1869:000 | DONE ins | na  8 16 | 00657e | c4 0e       |                 cpy.d 00020e         ; end of line?
1870:000 | DONE ins | na  8 16 | 006580 | f0 09       |                 beq 00658b           
1871:000 | DONE wsp | na  8 16 |        |             |
1872:000 | DONE ins | na  8 16 | 006582 | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1873:000 | DONE ins | na  8 16 | 006584 | c9 20       |                 cmp.# AscSP          
1874:000 | DONE ins | na  8 16 | 006586 | d0 17       |                 bne 00659f           
1875:000 | DONE ins | na  8 16 | 006588 | c8          |                 iny                  
1876:000 | DONE ins | na  8 16 | 006589 | 80 f3       |                 bra 00657e           
1877:000 | DONE wsp | na  8 16 |        |             |
1878:000 | DONE lbl | na  8 16 | 00658b |             | parse-name_empty_line                
1879:000 | DONE ins | na  8 16 | 00658b | c2 20       |                 rep 20               
1879:001 | DONE ctl | na 16 16 |        |             |         .!a16
1880:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
1881:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
1882:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
1883:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
1884:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
1885:000 | DONE ins | na 16 16 | 00658d | ca          |                 dex                  
1886:000 | DONE ins | na 16 16 | 00658e | ca          |                 dex                  
1887:000 | DONE ins | na 16 16 | 00658f | ca          |                 dex                  
1888:000 | DONE ins | na 16 16 | 006590 | ca          |                 dex                  
1889:000 | DONE wsp | na 16 16 |        |             |
1890:000 | DONE ins | na 16 16 | 006591 | 7a          |                 ply                  ; restore old TOS as 3OS
1891:000 | DONE ins | na 16 16 | 006592 | 94 02       |                 sty.dx 02            
1892:000 | DONE wsp | na 16 16 |        |             |
1893:000 | DONE ins | na 16 16 | 006594 | a5 0c       |                 lda.d 00020c         
1894:000 | DONE ins | na 16 16 | 006596 | 18          |                 clc                  
1895:000 | DONE ins | na 16 16 | 006597 | 65 0e       |                 adc.d 00020e         
1896:000 | DONE ins | na 16 16 | 006599 | 95 00       |                 sta.dx 00            ; Address as NOS
1897:000 | DONE wsp | na 16 16 |        |             |
1898:000 | DONE ins | na 16 16 | 00659b | a0 00 00    |                 ldy.# 0000           ; TOS
1899:000 | DONE wsp | na 16 16 |        |             |
1900:000 | DONE ins | na 16 16 | 00659e | 60          |                 rts                  ; don't have to go through PARSE
1901:000 | DONE wsp | na 16 16 |        |             |
1902:000 | DONE lbl | na 16 16 | 00659f |             | parse-name_found                     
1903:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1904:000 | DONE ins | na 16 16 | 00659f | c2 20       |                 rep 20               
1904:001 | DONE ctl | na 16 16 |        |             |         .!a16
1905:000 | DONE ins | na 16 16 | 0065a1 | 84 12       |                 sty.d 000212         ; new >IN
1906:000 | DONE wsp | na 16 16 |        |             |
1907:000 | DONE ins | na 16 16 | 0065a3 | 7a          |                 ply                  ; recover TOS
1908:000 | DONE ins | na 16 16 | 0065a4 | ca          |                 dex                  
1909:000 | DONE ins | na 16 16 | 0065a5 | ca          |                 dex                  
1910:000 | DONE ins | na 16 16 | 0065a6 | 94 00       |                 sty.dx 00            
1911:000 | DONE wsp | na 16 16 |        |             |
1912:000 | DONE ins | na 16 16 | 0065a8 | a0 20 00    |                 ldy.# AscSP          ; put space on TOS for PARSE
1913:000 | DONE wsp | na 16 16 |        |             |
1914:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
1915:000 | DONE wsp | na 16 16 |        |             |
1916:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1917:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
1918:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
1919:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
1920:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
1921:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
1922:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
1923:000 | DONE cmt | na 16 16 |        |             | ;
1924:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
1925:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
1926:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
1927:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
1928:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
1929:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
1930:000 | DONE cmt | na 16 16 |        |             | ;
1931:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
1932:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
1933:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
1934:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
1935:000 | DONE lbl | na 16 16 | 0065ab |             | xt_parse                             
1936:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1937:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1938:000 | DONE ins | na 16 16 | 0065ab | 84 16       |                 sty.d 000216         ; save delimiter, char is LSB
1939:000 | DONE wsp | na 16 16 |        |             |
1940:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
1941:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
1942:000 | DONE cmt | na 16 16 |        |             |                 ; return
1943:000 | DONE ins | na 16 16 | 0065ad | a5 12       |                 lda.d 000212         
1944:000 | DONE ins | na 16 16 | 0065af | 85 1a       |                 sta.d 00021a         ; save >IN for later length calculation
1945:000 | DONE ins | na 16 16 | 0065b1 | 18          |                 clc                  
1946:000 | DONE ins | na 16 16 | 0065b2 | 65 0c       |                 adc.d 00020c         
1947:000 | DONE wsp | na 16 16 |        |             |
1948:000 | DONE ins | na 16 16 | 0065b4 | ca          |                 dex                  ; save addr as NOS
1949:000 | DONE ins | na 16 16 | 0065b5 | ca          |                 dex                  
1950:000 | DONE ins | na 16 16 | 0065b6 | 95 00       |                 sta.dx 00            
1951:000 | DONE wsp | na 16 16 |        |             |
1952:000 | DONE ins | na 16 16 | 0065b8 | 64 18       |                 stz.d 000218         ; offset for EOL/char found adjustment of >IN
1953:000 | DONE wsp | na 16 16 |        |             |
1954:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
1955:000 | DONE ins | na 16 16 | 0065ba | a4 12       |                 ldy.d 000212         
1956:000 | DONE ins | na 16 16 | 0065bc | e2 20       |                 sep 20               
1956:001 | DONE ctl | na  8 16 |        |             |         .!a8
1957:000 | DONE wsp | na  8 16 |        |             |
1958:000 | DONE lbl | na  8 16 | 0065be |             | parse_loop                           
1959:000 | DONE ins | na  8 16 | 0065be | c4 0e       |                 cpy.d 00020e         ; check for EOL first
1960:000 | DONE ins | na  8 16 | 0065c0 | f0 0d       |                 beq 0065cf           
1961:000 | DONE wsp | na  8 16 |        |             |
1962:000 | DONE ins | na  8 16 | 0065c2 | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1963:000 | DONE ins | na  8 16 | 0065c4 | c5 16       |                 cmp.d 000216         ; found delimiter?
1964:000 | DONE ins | na  8 16 | 0065c6 | f0 03       |                 beq 0065cb           
1965:000 | DONE ins | na  8 16 | 0065c8 | c8          |                 iny                  
1966:000 | DONE ins | na  8 16 | 0065c9 | 80 f3       |                 bra 0065be           
1967:000 | DONE wsp | na  8 16 |        |             |
1968:000 | DONE lbl | na  8 16 | 0065cb |             | parse_found_delimiter                
1969:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
1970:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
1971:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
1972:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
1973:000 | DONE ins | na  8 16 | 0065cb | c2 20       |                 rep 20               
1973:001 | DONE ctl | na 16 16 |        |             |         .!a16
1974:000 | DONE ins | na 16 16 | 0065cd | e6 18       |                 inc.d 000218         
1975:000 | DONE wsp | na 16 16 |        |             |
1976:000 | DONE lbl | na 16 16 | 0065cf |             | parse_reached_eol                    
1977:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
1978:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1979:000 | DONE ins | na 16 16 | 0065cf | c2 20       |                 rep 20               
1979:001 | DONE ctl | na 16 16 |        |             |         .!a16
1980:000 | DONE ins | na 16 16 | 0065d1 | 98          |                 tya                  
1981:000 | DONE ins | na 16 16 | 0065d2 | 38          |                 sec                  
1982:000 | DONE ins | na 16 16 | 0065d3 | e5 1a       |                 sbc.d 00021a         ; original value for >IN / index of first char
1983:000 | DONE ins | na 16 16 | 0065d5 | 48          |                 pha                  ; save so we can manipulate Y
1984:000 | DONE wsp | na 16 16 |        |             |
1985:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
1986:000 | DONE ins | na 16 16 | 0065d6 | 98          |                 tya                  
1987:000 | DONE ins | na 16 16 | 0065d7 | 18          |                 clc                  
1988:000 | DONE ins | na 16 16 | 0065d8 | 65 18       |                 adc.d 000218         ; offset for EOL vs found delimiter
1989:000 | DONE ins | na 16 16 | 0065da | 85 12       |                 sta.d 000212         
1990:000 | DONE wsp | na 16 16 |        |             |
1991:000 | DONE ins | na 16 16 | 0065dc | 7a          |                 ply                  ; length of string in TOS
1992:000 | DONE wsp | na 16 16 |        |             |
1993:000 | DONE lbl | na 16 16 | 0065dd |             | z_parse-name                         
1994:000 | DONE lbl | na 16 16 | 0065dd |             | z_parse                              
1994:001 | DONE ins | na 16 16 | 0065dd | 60          |                 rts                  
1995:000 | DONE wsp | na 16 16 |        |             |
1996:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1997:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
1998:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
1999:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
2000:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
2001:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
2002:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
2003:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
2004:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
2005:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
2006:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
2007:000 | DONE lbl | na 16 16 | 0065de |             | xt_refill                            
2008:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2009:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2010:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
2011:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
2012:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
2013:000 | DONE ins | na 16 16 | 0065de | a5 0c       |                 lda.d 00020c         
2014:000 | DONE ins | na 16 16 | 0065e0 | 49 00 01    |                 eor.# 0100           ; flip 07d00 / 07c00
2015:000 | DONE ins | na 16 16 | 0065e3 | 85 0c       |                 sta.d 00020c         
2016:000 | DONE wsp | na 16 16 |        |             |
2017:000 | DONE ins | na 16 16 | 0065e5 | a5 0e       |                 lda.d 00020e         ; current length is now previous length
2018:000 | DONE ins | na 16 16 | 0065e7 | 85 10       |                 sta.d 000210         
2019:000 | DONE wsp | na 16 16 |        |             |
2020:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
2021:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
2022:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
2023:000 | DONE ins | na 16 16 | 0065e9 | a5 0a       |                 lda.d 00020a         
2024:000 | DONE ins | na 16 16 | 0065eb | d0 14       |                 bne 006601           
2025:000 | DONE wsp | na 16 16 |        |             |
2026:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
2027:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
2028:000 | DONE ins | na 16 16 | 0065ed | ca          |                 dex                  ; push Data Stack down twice
2029:000 | DONE ins | na 16 16 | 0065ee | ca          |                 dex                  
2030:000 | DONE ins | na 16 16 | 0065ef | 94 00       |                 sty.dx 00            
2031:000 | DONE wsp | na 16 16 |        |             |
2032:000 | DONE ins | na 16 16 | 0065f1 | a5 0c       |                 lda.d 00020c         ; address of current input buffer NOS
2033:000 | DONE ins | na 16 16 | 0065f3 | ca          |                 dex                  
2034:000 | DONE ins | na 16 16 | 0065f4 | ca          |                 dex                  
2035:000 | DONE ins | na 16 16 | 0065f5 | 95 00       |                 sta.dx 00            
2036:000 | DONE wsp | na 16 16 |        |             |
2037:000 | DONE ins | na 16 16 | 0065f7 | a0 ff 00    |                 ldy.# 0000ff         
2038:000 | DONE wsp | na 16 16 |        |             |
2039:000 | DONE ins | na 16 16 | 0065fa | 20 b7 61    |                 jsr 0061b7           ; ( addr n1 -- n2)
2040:000 | DONE wsp | na 16 16 |        |             |
2041:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
2042:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
2043:000 | DONE ins | na 16 16 | 0065fd | a0 ff ff    |                 ldy.# 0ffff          
2044:000 | DONE wsp | na 16 16 |        |             |
2045:000 | DONE ins | na 16 16 | 006600 | 60          |                 rts                  
2046:000 | DONE wsp | na 16 16 |        |             |
2047:000 | DONE lbl | na 16 16 | 006601 |             | refill_src_not_kbd                   
2048:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
2049:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
2050:000 | DONE ins | na 16 16 | 006601 | 1a          |                 inc.a                
2051:000 | DONE ins | na 16 16 | 006602 | d0 06       |                 bne 00660a           
2052:000 | DONE wsp | na 16 16 |        |             |
2053:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
2054:000 | DONE ins | na 16 16 | 006604 | ca          |                 dex                  
2055:000 | DONE ins | na 16 16 | 006605 | ca          |                 dex                  
2056:000 | DONE ins | na 16 16 | 006606 | 94 00       |                 sty.dx 00            
2057:000 | DONE ins | na 16 16 | 006608 | a8          |                 tay                  
2058:000 | DONE wsp | na 16 16 |        |             |
2059:000 | DONE ins | na 16 16 | 006609 | 60          |                 rts                  
2060:000 | DONE wsp | na 16 16 |        |             |
2061:000 | DONE lbl | na 16 16 | 00660a |             | refill_source_is_not_string          
2062:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
2063:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
2064:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
2065:000 | DONE ins | na 16 16 | 00660a | a9 6d 6d    |                 lda.# 006d6d         
2066:000 | DONE ins | na 16 16 | 00660d | 4c 66 6b    |                 jmp 006b66           
2067:000 | DONE wsp | na 16 16 |        |             |
2068:000 | DONE lbl | na 16 16 | 006610 |             | z_refill                             
2068:001 | DONE ins | na 16 16 | 006610 | 60          |                 rts                  ; dummy for compiling
2069:000 | DONE wsp | na 16 16 |        |             |
2070:000 | DONE wsp | na 16 16 |        |             |
2071:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2072:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
2073:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
2074:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
2075:000 | DONE lbl | na 16 16 | 006611 |             | xt_rot                               
2076:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2077:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2078:000 | DONE ins | na 16 16 | 006611 | b5 00       |                 lda.dx 00            ; save b
2079:000 | DONE ins | na 16 16 | 006613 | 94 00       |                 sty.dx 00            ; move c to NOS
2080:000 | DONE ins | na 16 16 | 006615 | b4 02       |                 ldy.dx 02            ; move a to TOS
2081:000 | DONE ins | na 16 16 | 006617 | 95 02       |                 sta.dx 02            ; save b as 3OS
2082:000 | DONE wsp | na 16 16 |        |             |
2083:000 | DONE lbl | na 16 16 | 006619 |             | z_rot                                
2083:001 | DONE ins | na 16 16 | 006619 | 60          |                 rts                  
2084:000 | DONE wsp | na 16 16 |        |             |
2085:000 | DONE wsp | na 16 16 |        |             |
2086:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2087:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
2088:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
2089:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
2090:000 | DONE wsp | na 16 16 |        |             |
2091:000 | DONE lbl | na 16 16 | 00661a |             | xt_source                            
2092:000 | DONE ins | na 16 16 | 00661a | ca          |                 dex                  ; make room on Data Stack
2093:000 | DONE ins | na 16 16 | 00661b | ca          |                 dex                  
2094:000 | DONE ins | na 16 16 | 00661c | ca          |                 dex                  
2095:000 | DONE ins | na 16 16 | 00661d | ca          |                 dex                  
2096:000 | DONE ins | na 16 16 | 00661e | 94 02       |                 sty.dx 02            
2097:000 | DONE wsp | na 16 16 |        |             |
2098:000 | DONE ins | na 16 16 | 006620 | a5 0c       |                 lda.d 00020c         ; address of current input buffer as NOS
2099:000 | DONE ins | na 16 16 | 006622 | 95 00       |                 sta.dx 00            
2100:000 | DONE wsp | na 16 16 |        |             |
2101:000 | DONE ins | na 16 16 | 006624 | a4 0e       |                 ldy.d 00020e         ; length of current input buffer as TOS
2102:000 | DONE wsp | na 16 16 |        |             |
2103:000 | DONE lbl | na 16 16 | 006626 |             | z_source                             
2103:001 | DONE ins | na 16 16 | 006626 | 60          |                 rts                  
2104:000 | DONE wsp | na 16 16 |        |             |
2105:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2106:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
2107:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
2108:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
2109:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
2110:000 | DONE lbl | na 16 16 | 006627 |             | xt_source-id                         
2111:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2112:000 | DONE ins | na 16 16 | 006627 | ca          |                 dex                  
2113:000 | DONE ins | na 16 16 | 006628 | ca          |                 dex                  
2114:000 | DONE ins | na 16 16 | 006629 | 94 00       |                 sty.dx 00            
2115:000 | DONE ins | na 16 16 | 00662b | a4 0a       |                 ldy.d 00020a         
2116:000 | DONE wsp | na 16 16 |        |             |
2117:000 | DONE lbl | na 16 16 | 00662d |             | z_source-id                          
2117:001 | DONE ins | na 16 16 | 00662d | 60          |                 rts                  
2118:000 | DONE wsp | na 16 16 |        |             |
2119:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2120:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
2121:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
2122:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
2123:000 | DONE lbl | na 16 16 | 00662e |             | xt_space                             
2124:000 | DONE ins | na 16 16 | 00662e | a9 20 00    |                 lda.# AscSP          
2125:000 | DONE ins | na 16 16 | 006631 | 20 36 60    |                 jsr 006036           
2126:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2127:000 | DONE wsp | na 16 16 |        |             |
2128:000 | DONE lbl | na 16 16 | 006634 |             | z_space                              
2128:001 | DONE ins | na 16 16 | 006634 | 60          |                 rts                  
2129:000 | DONE wsp | na 16 16 |        |             |
2130:000 | DONE wsp | na 16 16 |        |             |
2131:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2132:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
2133:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
2134:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
2135:000 | DONE lbl | na 16 16 | 006635 |             | xt_spaces                            
2136:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2137:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2138:000 | DONE lbl | na 16 16 | 006635 |             | @                                    
2139:000 | DONE ins | na 16 16 | 006635 | 88          |                 dey                  ; this also handles case u=0
2140:000 | DONE ins | na 16 16 | 006636 | 30 05       |                 bmi 00663d           
2141:000 | DONE wsp | na 16 16 |        |             |
2142:000 | DONE ins | na 16 16 | 006638 | 20 2e 66    |                 jsr 00662e           
2143:000 | DONE ins | na 16 16 | 00663b | 80 f8       |                 bra 006635           
2144:000 | DONE wsp | na 16 16 |        |             |
2145:000 | DONE lbl | na 16 16 | 00663d |             | spaces_done                          
2146:000 | DONE ins | na 16 16 | 00663d | b4 00       |                 ldy.dx 00            ; DROP
2147:000 | DONE ins | na 16 16 | 00663f | e8          |                 inx                  
2148:000 | DONE ins | na 16 16 | 006640 | e8          |                 inx                  
2149:000 | DONE wsp | na 16 16 |        |             |
2150:000 | DONE lbl | na 16 16 | 006641 |             | z_spaces                             
2150:001 | DONE ins | na 16 16 | 006641 | 60          |                 rts                  
2151:000 | DONE wsp | na 16 16 |        |             |
2152:000 | DONE wsp | na 16 16 |        |             |
2153:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2154:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
2155:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
2156:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
2157:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
2158:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
2159:000 | DONE lbl | na 16 16 | 006642 |             | xt_state                             
2160:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2161:000 | DONE ins | na 16 16 | 006642 | ca          |                 dex                  
2162:000 | DONE ins | na 16 16 | 006643 | ca          |                 dex                  
2163:000 | DONE ins | na 16 16 | 006644 | 94 00       |                 sty.dx 00            
2164:000 | DONE ins | na 16 16 | 006646 | a0 14 02    |                 ldy.# 000214         
2165:000 | DONE wsp | na 16 16 |        |             |
2166:000 | DONE lbl | na 16 16 | 006649 |             | z_state                              
2166:001 | DONE ins | na 16 16 | 006649 | 60          |                 rts                  
2167:000 | DONE wsp | na 16 16 |        |             |
2168:000 | DONE wsp | na 16 16 |        |             |
2169:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2170:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
2171:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
2172:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
2173:000 | DONE lbl | na 16 16 | 00664a |             | xt_swap                              
2174:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2175:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2176:000 | DONE ins | na 16 16 | 00664a | b5 00       |                 lda.dx 00            
2177:000 | DONE ins | na 16 16 | 00664c | 94 00       |                 sty.dx 00            
2178:000 | DONE ins | na 16 16 | 00664e | a8          |                 tay                  
2179:000 | DONE wsp | na 16 16 |        |             |
2180:000 | DONE lbl | na 16 16 | 00664f |             | z_swap                               
2180:001 | DONE ins | na 16 16 | 00664f | 60          |                 rts                  
2181:000 | DONE wsp | na 16 16 |        |             |
2182:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2183:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
2184:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
2185:000 | DONE lbl | na 16 16 | 006650 |             | xt_true                              
2186:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2187:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2188:000 | DONE ins | na 16 16 | 006650 | ca          |                 dex                  
2189:000 | DONE ins | na 16 16 | 006651 | ca          |                 dex                  
2190:000 | DONE ins | na 16 16 | 006652 | 94 00       |                 sty.dx 00            
2191:000 | DONE ins | na 16 16 | 006654 | a0 ff ff    |                 ldy.# 0ffff          
2192:000 | DONE wsp | na 16 16 |        |             |
2193:000 | DONE lbl | na 16 16 | 006657 |             | z_true                               
2193:001 | DONE ins | na 16 16 | 006657 | 60          |                 rts                  
2194:000 | DONE wsp | na 16 16 |        |             |
2195:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2196:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
2197:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
2198:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
2199:000 | DONE lbl | na 16 16 | 006658 |             | xt_tuck                              
2200:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2201:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2202:000 | DONE ins | na 16 16 | 006658 | ca          |                 dex                  
2203:000 | DONE ins | na 16 16 | 006659 | ca          |                 dex                  
2204:000 | DONE ins | na 16 16 | 00665a | b5 02       |                 lda.dx 2             
2205:000 | DONE ins | na 16 16 | 00665c | 95 00       |                 sta.dx 0             
2206:000 | DONE ins | na 16 16 | 00665e | 94 02       |                 sty.dx 2             
2207:000 | DONE wsp | na 16 16 |        |             |
2208:000 | DONE lbl | na 16 16 | 006660 |             | z_tuck                               
2208:001 | DONE ins | na 16 16 | 006660 | 60          |                 rts                  
2209:000 | DONE wsp | na 16 16 |        |             |
2210:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2211:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
2212:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
2213:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
2214:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
2215:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
2216:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
2217:000 | DONE cmt | na 16 16 |        |             | ; running.
2218:000 | DONE lbl | na 16 16 | 006661 |             | xt_type                              
2219:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2220:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2221:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
2222:000 | DONE ins | na 16 16 | 006661 | 98          |                 tya                  ; force flag check of TOS
2223:000 | DONE ins | na 16 16 | 006662 | f0 17       |                 beq 00667b           
2224:000 | DONE wsp | na 16 16 |        |             |
2225:000 | DONE ins | na 16 16 | 006664 | b5 00       |                 lda.dx 00            ; get address from NOS
2226:000 | DONE ins | na 16 16 | 006666 | 85 16       |                 sta.d 000216         
2227:000 | DONE ins | na 16 16 | 006668 | 84 18       |                 sty.d 000218         ; number of chars is TOS
2228:000 | DONE ins | na 16 16 | 00666a | a0 00 00    |                 ldy.# 0000           
2229:000 | DONE ins | na 16 16 | 00666d | e2 20       |                 sep 20               
2229:001 | DONE ctl | na  8 16 |        |             |         .!a8
2230:000 | DONE lbl | na  8 16 | 00666f |             | type_loop                            
2231:000 | DONE ins | na  8 16 | 00666f | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
2232:000 | DONE ins | na  8 16 | 006671 | 20 36 60    |                 jsr 006036           
2233:000 | DONE ins | na  8 16 | 006674 | c8          |                 iny                  
2234:000 | DONE ins | na  8 16 | 006675 | c4 18       |                 cpy.d 000218         
2235:000 | DONE ins | na  8 16 | 006677 | d0 f6       |                 bne 00666f           
2236:000 | DONE wsp | na  8 16 |        |             |
2237:000 | DONE ins | na  8 16 | 006679 | c2 20       |                 rep 20               
2237:001 | DONE ctl | na 16 16 |        |             |         .!a16
2238:000 | DONE lbl | na 16 16 | 00667b |             | type_done                            
2239:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
2240:000 | DONE ins | na 16 16 | 00667b | b4 02       |                 ldy.dx 02            
2241:000 | DONE ins | na 16 16 | 00667d | e8          |                 inx                  
2242:000 | DONE ins | na 16 16 | 00667e | e8          |                 inx                  
2243:000 | DONE ins | na 16 16 | 00667f | e8          |                 inx                  
2244:000 | DONE ins | na 16 16 | 006680 | e8          |                 inx                  
2245:000 | DONE wsp | na 16 16 |        |             |
2246:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
2247:000 | DONE wsp | na 16 16 |        |             |
2248:000 | DONE lbl | na 16 16 | 006681 |             | z_type                               
2248:001 | DONE ins | na 16 16 | 006681 | 60          |                 rts                  
2249:000 | DONE wsp | na 16 16 |        |             |
2250:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2251:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
2252:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
2253:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
2254:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
2255:000 | DONE lbl | na 16 16 | 006682 |             | xt_unused                            
2256:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2257:000 | DONE ins | na 16 16 | 006682 | a9 ff 7b    |                 lda.# 007bff         
2258:000 | DONE ins | na 16 16 | 006685 | 38          |                 sec                  
2259:000 | DONE ins | na 16 16 | 006686 | e5 00       |                 sbc.d 000200         ; current compile pointer
2260:000 | DONE wsp | na 16 16 |        |             |
2261:000 | DONE ins | na 16 16 | 006688 | ca          |                 dex                  
2262:000 | DONE ins | na 16 16 | 006689 | ca          |                 dex                  
2263:000 | DONE ins | na 16 16 | 00668a | 94 00       |                 sty.dx 00            
2264:000 | DONE wsp | na 16 16 |        |             |
2265:000 | DONE ins | na 16 16 | 00668c | a8          |                 tay                  
2266:000 | DONE wsp | na 16 16 |        |             |
2267:000 | DONE lbl | na 16 16 | 00668d |             | z_unused                             
2267:001 | DONE ins | na 16 16 | 00668d | 60          |                 rts                  
2268:000 | DONE wsp | na 16 16 |        |             |
2269:000 | DONE wsp | na 16 16 |        |             |
2270:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2271:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
2272:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
2273:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
2274:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
2275:000 | DONE lbl | na 16 16 | 00668e |             | xt_variable                          
2276:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
2277:000 | DONE ins | na 16 16 | 00668e | 20 14 63    |                 jsr 006314           
2278:000 | DONE wsp | na 16 16 |        |             |
2279:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
2280:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
2281:000 | DONE ins | na 16 16 | 006691 | a9 00 00    |                 lda.# 0000           
2282:000 | DONE ins | na 16 16 | 006694 | 92 00       |                 sta.di 000200        ; STA (CP)
2283:000 | DONE wsp | na 16 16 |        |             |
2284:000 | DONE ins | na 16 16 | 006696 | e6 00       |                 inc.d 000200         ; direct COMMA
2285:000 | DONE ins | na 16 16 | 006698 | e6 00       |                 inc.d 000200         
2286:000 | DONE wsp | na 16 16 |        |             |
2287:000 | DONE lbl | na 16 16 | 00669a |             | z_variable                           
2287:001 | DONE ins | na 16 16 | 00669a | 60          |                 rts                  
2288:000 | DONE wsp | na 16 16 |        |             |
2289:000 | DONE wsp | na 16 16 |        |             |
2290:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2291:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
2292:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
2293:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
2294:000 | DONE lbl | na 16 16 | 00669b |             | xt_words                             
2295:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2296:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2297:000 | DONE ins | na 16 16 | 00669b | 20 0d 63    |                 jsr 00630d           ; start on next line, this is a style choice
2298:000 | DONE wsp | na 16 16 |        |             |
2299:000 | DONE ins | na 16 16 | 00669e | a5 02       |                 lda.d 000202         ; nt of first entry in Dictionary (last added)
2300:000 | DONE ins | na 16 16 | 0066a0 | 48          |                 pha                  
2301:000 | DONE wsp | na 16 16 |        |             |
2302:000 | DONE ins | na 16 16 | 0066a1 | ca          |                 dex                  ; create room on TOS
2303:000 | DONE ins | na 16 16 | 0066a2 | ca          |                 dex                  
2304:000 | DONE ins | na 16 16 | 0066a3 | 94 00       |                 sty.dx 00            
2305:000 | DONE wsp | na 16 16 |        |             |
2306:000 | DONE lbl | na 16 16 | 0066a5 |             | words_loop                           
2307:000 | DONE ins | na 16 16 | 0066a5 | a8          |                 tay                  ; ( nt )
2308:000 | DONE ins | na 16 16 | 0066a6 | 20 37 65    |                 jsr 006537           ; ( nt -- addr u )
2309:000 | DONE ins | na 16 16 | 0066a9 | 20 61 66    |                 jsr 006661           ; ( addr u -- )
2310:000 | DONE ins | na 16 16 | 0066ac | 20 2e 66    |                 jsr 00662e           
2311:000 | DONE wsp | na 16 16 |        |             |
2312:000 | DONE ins | na 16 16 | 0066af | 68          |                 pla                  ; get back first entry in Dictionary
2313:000 | DONE wsp | na 16 16 |        |             |
2314:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
2315:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
2316:000 | DONE ins | na 16 16 | 0066b0 | 1a          |                 inc.a                
2317:000 | DONE ins | na 16 16 | 0066b1 | 1a          |                 inc.a                
2318:000 | DONE wsp | na 16 16 |        |             |
2319:000 | DONE ins | na 16 16 | 0066b2 | ca          |                 dex                  
2320:000 | DONE ins | na 16 16 | 0066b3 | ca          |                 dex                  
2321:000 | DONE ins | na 16 16 | 0066b4 | 94 00       |                 sty.dx 00            
2322:000 | DONE wsp | na 16 16 |        |             |
2323:000 | DONE ins | na 16 16 | 0066b6 | a8          |                 tay                  
2324:000 | DONE ins | na 16 16 | 0066b7 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
2325:000 | DONE ins | na 16 16 | 0066ba | 48          |                 pha                  
2326:000 | DONE ins | na 16 16 | 0066bb | d0 e8       |                 bne 0066a5           ; zero entry signals end of Dictionary
2327:000 | DONE wsp | na 16 16 |        |             |
2328:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
2329:000 | DONE ins | na 16 16 | 0066bd | 68          |                 pla                  ; balance MPU stack, value discarded
2330:000 | DONE wsp | na 16 16 |        |             |
2331:000 | DONE ins | na 16 16 | 0066be | b4 00       |                 ldy.dx 00            
2332:000 | DONE ins | na 16 16 | 0066c0 | e8          |                 inx                  
2333:000 | DONE ins | na 16 16 | 0066c1 | e8          |                 inx                  
2334:000 | DONE wsp | na 16 16 |        |             |
2335:000 | DONE lbl | na 16 16 | 0066c2 |             | z_words                              
2335:001 | DONE ins | na 16 16 | 0066c2 | 60          |                 rts                  
2336:000 | DONE wsp | na 16 16 |        |             |
2337:000 | DONE wsp | na 16 16 |        |             |
2338:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2339:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
2340:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
2341:000 | DONE lbl | na 16 16 | 0066c3 |             | xt_xor                               
2342:000 | DONE ins | na 16 16 | 0066c3 | 98          |                 tya                  
2343:000 | DONE ins | na 16 16 | 0066c4 | 55 00       |                 eor.dx 00            
2344:000 | DONE ins | na 16 16 | 0066c6 | a8          |                 tay                  
2345:000 | DONE wsp | na 16 16 |        |             |
2346:000 | DONE ins | na 16 16 | 0066c7 | e8          |                 inx                  
2347:000 | DONE ins | na 16 16 | 0066c8 | e8          |                 inx                  
2348:000 | DONE wsp | na 16 16 |        |             |
2349:000 | DONE lbl | na 16 16 | 0066c9 |             | z_xor                                
2349:001 | DONE ins | na 16 16 | 0066c9 | 60          |                 rts                  
2350:000 | DONE wsp | na 16 16 |        |             |
2351:000 | DONE wsp | na 16 16 |        |             |
2352:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2353:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
2354:000 | DONE wsp | na 16 16 |        |             |
2355:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
2355:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2355:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
2355:003 | DONE cmt | na 16 16 |        |             | ; This version: 16. Feb 2017
2355:004 | DONE wsp | na 16 16 |        |             |
2355:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
2355:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
2355:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
2355:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
2355:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
2355:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
2355:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
2355:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
2355:013 | DONE cmt | na 16 16 |        |             | ;
2355:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
2355:015 | DONE cmt | na 16 16 |        |             | ;
2355:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
2355:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
2355:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
2355:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
2355:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
2355:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
2355:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
2355:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
2355:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
2355:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
2355:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
2355:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
2355:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2355:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
2355:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2355:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
2355:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
2355:033 | DONE wsp | na 16 16 |        |             |
2355:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
2355:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
2355:036 | DONE cmt | na 16 16 |        |             | ;
2355:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
2355:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
2355:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
2355:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
2355:041 | DONE wsp | na 16 16 |        |             |
2355:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
2355:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
2355:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
2355:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
2355:046 | DONE wsp | na 16 16 |        |             |
2355:047 | DONE lbl | na 16 16 | 0066ca |             | nt_bye                               
2355:048 | DONE dir | na 16 16 | 0066ca | (1 bytes)   |         .byte 03                     ; length of word string
2355:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
2355:049 | DONE dir | na 16 16 | 0066cb | (1 bytes)   |         .byte { PW + NC }            ; status byte
2355:049 | DONE dir | na 16 16 |        |             |                 09                       --  	
2355:050 | DONE dir | na 16 16 | 0066cc | (2 bytes)   |         .word 0000                   ; next word in dictionary, 0000 signals end
2355:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
2355:051 | DONE dir | na 16 16 | 0066ce | (2 bytes)   |         .word 006282                 ; start of code, the xt of this word
2355:051 | DONE dir | na 16 16 |        |             |                 82 62                    --  . b
2355:052 | DONE dir | na 16 16 | 0066d0 | (2 bytes)   |         .word 006285                 ; end of code (points to RTS)
2355:052 | DONE dir | na 16 16 |        |             |                 85 62                    --  . b
2355:053 | DONE dir | na 16 16 | 0066d2 | (3 bytes)   |         .byte 62, 79, 65             ; word name, always lower case
2355:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
2355:054 | DONE wsp | na 16 16 |        |             |
2355:055 | DONE lbl | na 16 16 | 0066d5 |             | nt_cold                              
2355:056 | DONE dir | na 16 16 | 0066d5 | (2 bytes)   |         .byte 4, 00                  
2355:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2355:057 | DONE dir | na 16 16 | 0066d7 | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
2355:057 | DONE dir | na 16 16 |        |             |                 ca 66 63 60 de 60        --  . f c ` . `
2355:058 | DONE dir | na 16 16 | 0066dd | (4 bytes)   |         .byte 63, 6f, 6c, 64         
2355:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
2355:059 | DONE wsp | na 16 16 |        |             |
2355:060 | DONE lbl | na 16 16 | 0066e1 |             | nt_words                             
2355:061 | DONE dir | na 16 16 | 0066e1 | (2 bytes)   |         .byte 5, { PW + NC }         
2355:061 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2355:062 | DONE dir | na 16 16 | 0066e3 | (6 bytes)   |         .word nt_cold, xt_words, 0066c2 
2355:062 | DONE dir | na 16 16 |        |             |                 d5 66 9b 66 c2 66        --  . f . f . f
2355:063 | DONE dir | na 16 16 | 0066e9 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
2355:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
2355:064 | DONE wsp | na 16 16 |        |             |
2355:065 | DONE lbl | na 16 16 | 0066ee |             | nt_dump                              
2355:066 | DONE dir | na 16 16 | 0066ee | (2 bytes)   |         .byte 4, { PW + NC }         
2355:066 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:067 | DONE dir | na 16 16 | 0066f0 | (6 bytes)   |         .word nt_words, xt_dump, 006433 
2355:067 | DONE dir | na 16 16 |        |             |                 e1 66 0d 64 33 64        --  . f  d 3 d
2355:068 | DONE dir | na 16 16 | 0066f6 | (4 bytes)   |         .byte 64, 75, 6d, 70         
2355:068 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
2355:069 | DONE wsp | na 16 16 |        |             |
2355:070 | DONE lbl | na 16 16 | 0066fa |             | nt_bell                              
2355:071 | DONE dir | na 16 16 | 0066fa | (2 bytes)   |         .byte 4, { PW + NC }         
2355:071 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:072 | DONE dir | na 16 16 | 0066fc | (6 bytes)   |         .word nt_dump, xt_bell, 006279 
2355:072 | DONE dir | na 16 16 |        |             |                 ee 66 73 62 79 62        --  . f s b y b
2355:073 | DONE dir | na 16 16 | 006702 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
2355:073 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
2355:074 | DONE wsp | na 16 16 |        |             |
2355:075 | DONE lbl | na 16 16 | 006706 |             | nt_decimal                           
2355:076 | DONE dir | na 16 16 | 006706 | (2 bytes)   |         .byte 7, { PW + NC }         
2355:076 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2355:077 | DONE dir | na 16 16 | 006708 | (6 bytes)   |         .word nt_bell, xt_decimal, 00638c 
2355:077 | DONE dir | na 16 16 |        |             |                 fa 66 87 63 8c 63        --  . f . c . c
2355:078 | DONE dir | na 16 16 | 00670e | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
2355:078 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
2355:079 | DONE wsp | na 16 16 |        |             |
2355:080 | DONE lbl | na 16 16 | 006715 |             | nt_hex                               
2355:081 | DONE dir | na 16 16 | 006715 | (2 bytes)   |         .byte 3, { PW + NC }         
2355:081 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2355:082 | DONE dir | na 16 16 | 006717 | (6 bytes)   |         .word nt_decimal, xt_hex, 0064e8 
2355:082 | DONE dir | na 16 16 |        |             |                 06 67 e3 64 e8 64        --  . g . d . d
2355:083 | DONE dir | na 16 16 | 00671d | (3 bytes)   |         .byte 68, 65, 78             
2355:083 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
2355:084 | DONE wsp | na 16 16 |        |             |
2355:085 | DONE lbl | na 16 16 | 006720 |             | nt_unused                            
2355:086 | DONE dir | na 16 16 | 006720 | (2 bytes)   |         .byte 6, { PW + NC }         
2355:086 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2355:087 | DONE dir | na 16 16 | 006722 | (6 bytes)   |         .word nt_hex, xt_unused, 00668d 
2355:087 | DONE dir | na 16 16 |        |             |                 15 67 82 66 8d 66        --  . g . f . f
2355:088 | DONE dir | na 16 16 | 006728 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
2355:088 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
2355:089 | DONE wsp | na 16 16 |        |             |
2355:090 | DONE lbl | na 16 16 | 00672e |             | nt_page                              
2355:091 | DONE dir | na 16 16 | 00672e | (2 bytes)   |         .byte 4, { PW + NC }         
2355:091 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:092 | DONE dir | na 16 16 | 006730 | (6 bytes)   |         .word nt_unused, xt_page, 006578 
2355:092 | DONE dir | na 16 16 |        |             |                 20 67 6c 65 78 65        --    g l e x e
2355:093 | DONE dir | na 16 16 | 006736 | (4 bytes)   |         .byte 70, 61, 67, 65         
2355:093 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
2355:094 | DONE wsp | na 16 16 |        |             |
2355:095 | DONE lbl | na 16 16 | 00673a |             | nt_count                             
2355:096 | DONE dir | na 16 16 | 00673a | (2 bytes)   |         .byte 5, { NC + PW }         
2355:096 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2355:097 | DONE dir | na 16 16 | 00673c | (6 bytes)   |         .word nt_page, xt_count, 00630c 
2355:097 | DONE dir | na 16 16 |        |             |                 2e 67 fe 62 0c 63        --  . g . b  c
2355:098 | DONE dir | na 16 16 | 006742 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
2355:098 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
2355:099 | DONE wsp | na 16 16 |        |             |
2355:100 | DONE lbl | na 16 16 | 006747 |             | nt_abort                             
2355:101 | DONE dir | na 16 16 | 006747 | (2 bytes)   |         .byte 5, 00                  ; TODO check flags
2355:101 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2355:102 | DONE dir | na 16 16 | 006749 | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
2355:102 | DONE dir | na 16 16 |        |             |                 3a 67 97 60 de 60        --  : g . ` . `
2355:103 | DONE dir | na 16 16 | 00674f | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
2355:103 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
2355:104 | DONE wsp | na 16 16 |        |             |
2355:105 | DONE lbl | na 16 16 | 006754 |             | nt_parse                             
2355:106 | DONE dir | na 16 16 | 006754 | (2 bytes)   |         .byte 5, 00                  
2355:106 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2355:107 | DONE dir | na 16 16 | 006756 | (6 bytes)   |         .word nt_abort, xt_parse, 0065dd 
2355:107 | DONE dir | na 16 16 |        |             |                 47 67 ab 65 dd 65        --  G g . e . e
2355:108 | DONE dir | na 16 16 | 00675c | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
2355:108 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
2355:109 | DONE wsp | na 16 16 |        |             |
2355:110 | DONE lbl | na 16 16 | 006761 |             | nt_quit                              
2355:111 | DONE dir | na 16 16 | 006761 | (2 bytes)   |         .byte 4, 00                  
2355:111 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2355:112 | DONE dir | na 16 16 | 006763 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
2355:112 | DONE dir | na 16 16 |        |             |                 54 67 9f 60 de 60        --  T g . ` . `
2355:113 | DONE dir | na 16 16 | 006769 | (4 bytes)   |         .byte 71, 75, 69, 74         
2355:113 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
2355:114 | DONE wsp | na 16 16 |        |             |
2355:115 | DONE lbl | na 16 16 | 00676d |             | nt_question                          
2355:116 | DONE dir | na 16 16 | 00676d | (2 bytes)   |         .byte 1, { PW + NC }         
2355:116 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:117 | DONE dir | na 16 16 | 00676f | (6 bytes)   |         .word nt_quit, xt_question, 006134 
2355:117 | DONE dir | na 16 16 |        |             |                 61 67 2e 61 34 61        --  a g . a 4 a
2355:118 | DONE dir | na 16 16 | 006775 | (1 bytes)   |         .byte 3f                     
2355:118 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
2355:119 | DONE wsp | na 16 16 |        |             |
2355:120 | DONE lbl | na 16 16 | 006776 |             | nt_name-int                          
2355:121 | DONE dir | na 16 16 | 006776 | (2 bytes)   |         .byte 8, { PW + NC }         
2355:121 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2355:122 | DONE dir | na 16 16 | 006778 | (6 bytes)   |         .word nt_question, xt_name-int, 006536 
2355:122 | DONE dir | na 16 16 |        |             |                 6d 67 2e 65 36 65        --  m g . e 6 e
2355:123 | DONE dir | na 16 16 | 00677e | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
2355:123 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
2355:123 | DONE dir | na 16 16 |        |             |                                          -- 
2355:124 | DONE wsp | na 16 16 |        |             |
2355:125 | DONE lbl | na 16 16 | 006786 |             | nt_cr                                
2355:126 | DONE dir | na 16 16 | 006786 | (2 bytes)   |         .byte 2, { PW + NC }         
2355:126 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2355:127 | DONE dir | na 16 16 | 006788 | (6 bytes)   |         .word nt_name-int, xt_cr, 006313 
2355:127 | DONE dir | na 16 16 |        |             |                 76 67 0d 63 13 63        --  v g  c . c
2355:128 | DONE dir | na 16 16 | 00678e | (2 bytes)   |         .byte 63, 72                 
2355:128 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
2355:129 | DONE wsp | na 16 16 |        |             |
2355:130 | DONE lbl | na 16 16 | 006790 |             | nt_bl                                
2355:131 | DONE dir | na 16 16 | 006790 | (2 bytes)   |         .byte 2, { PW + NC }         
2355:131 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2355:132 | DONE dir | na 16 16 | 006792 | (6 bytes)   |         .word nt_cr, xt_bl, 006281   
2355:132 | DONE dir | na 16 16 |        |             |                 86 67 7a 62 81 62        --  . g z b . b
2355:133 | DONE dir | na 16 16 | 006798 | (2 bytes)   |         .byte 62, 6c                 
2355:133 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
2355:134 | DONE wsp | na 16 16 |        |             |
2355:135 | DONE lbl | na 16 16 | 00679a |             | nt_spaces                            
2355:136 | DONE dir | na 16 16 | 00679a | (2 bytes)   |         .byte 6, { PW + NC }         
2355:136 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2355:137 | DONE dir | na 16 16 | 00679c | (6 bytes)   |         .word nt_bl, xt_spaces, 006641 
2355:137 | DONE dir | na 16 16 |        |             |                 90 67 35 66 41 66        --  . g 5 f A f
2355:138 | DONE dir | na 16 16 | 0067a2 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
2355:138 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
2355:139 | DONE wsp | na 16 16 |        |             |
2355:140 | DONE lbl | na 16 16 | 0067a8 |             | nt_space                             
2355:141 | DONE dir | na 16 16 | 0067a8 | (2 bytes)   |         .byte 5, { PW + NC }         
2355:141 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2355:142 | DONE dir | na 16 16 | 0067aa | (6 bytes)   |         .word nt_spaces, xt_space, 006634 
2355:142 | DONE dir | na 16 16 |        |             |                 9a 67 2e 66 34 66        --  . g . f 4 f
2355:143 | DONE dir | na 16 16 | 0067b0 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
2355:143 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
2355:144 | DONE wsp | na 16 16 |        |             |
2355:145 | DONE lbl | na 16 16 | 0067b5 |             | nt_dots                              
2355:146 | DONE dir | na 16 16 | 0067b5 | (2 bytes)   |         .byte 2, { PW + NC }         
2355:146 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2355:147 | DONE dir | na 16 16 | 0067b7 | (6 bytes)   |         .word nt_space, xt_dots, 006407 
2355:147 | DONE dir | na 16 16 |        |             |                 a8 67 c0 63 07 64        --  . g . c . d
2355:148 | DONE dir | na 16 16 | 0067bd | (2 bytes)   |         .byte 2e, 73                 
2355:148 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
2355:149 | DONE wsp | na 16 16 |        |             |
2355:150 | DONE lbl | na 16 16 | 0067bf |             | nt_dotparen                          
2355:151 | DONE dir | na 16 16 | 0067bf | (2 bytes)   |         .byte 2, { IM + NC }         
2355:151 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
2355:152 | DONE dir | na 16 16 | 0067c1 | (6 bytes)   |         .word nt_dots, xt_dotparen, 0063bf 
2355:152 | DONE dir | na 16 16 |        |             |                 b5 67 b2 63 bf 63        --  . g . c . c
2355:153 | DONE dir | na 16 16 | 0067c7 | (2 bytes)   |         .byte 2e, 28                 
2355:153 | DONE dir | na 16 16 |        |             |                 2e 28                    --  . (
2355:154 | DONE wsp | na 16 16 |        |             |
2355:155 | DONE lbl | na 16 16 | 0067c9 |             | nt_type                              
2355:156 | DONE dir | na 16 16 | 0067c9 | (2 bytes)   |         .byte 4, 0                   
2355:156 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2355:157 | DONE dir | na 16 16 | 0067cb | (6 bytes)   |         .word nt_dotparen, xt_type, 006681 
2355:157 | DONE dir | na 16 16 |        |             |                 bf 67 61 66 81 66        --  . g a f . f
2355:158 | DONE dir | na 16 16 | 0067d1 | (4 bytes)   |         .byte 74, 79, 70, 65         
2355:158 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
2355:159 | DONE wsp | na 16 16 |        |             |
2355:160 | DONE lbl | na 16 16 | 0067d5 |             | nt_dot                               
2355:161 | DONE dir | na 16 16 | 0067d5 | (2 bytes)   |         .byte 1, { PW + NC }         
2355:161 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:162 | DONE dir | na 16 16 | 0067d7 | (6 bytes)   |         .word nt_type, xt_dot, 0063b1 
2355:162 | DONE dir | na 16 16 |        |             |                 c9 67 9c 63 b1 63        --  . g . c . c
2355:163 | DONE dir | na 16 16 | 0067dd | (1 bytes)   |         .byte 2e                     
2355:163 | DONE dir | na 16 16 |        |             |                 2e                       --  .
2355:164 | DONE wsp | na 16 16 |        |             |
2355:165 | DONE lbl | na 16 16 | 0067de |             | nt_pad                               
2355:166 | DONE dir | na 16 16 | 0067de | (2 bytes)   |         .byte 3, { PW + NC }         
2355:166 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2355:167 | DONE dir | na 16 16 | 0067e0 | (6 bytes)   |         .word nt_dot, xt_pad, 00656b 
2355:167 | DONE dir | na 16 16 |        |             |                 d5 67 60 65 6b 65        --  . g ` e k e
2355:168 | DONE dir | na 16 16 | 0067e6 | (3 bytes)   |         .byte 70, 61, 64             
2355:168 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
2355:169 | DONE wsp | na 16 16 |        |             |
2355:170 | DONE lbl | na 16 16 | 0067e9 |             | nt_base                              
2355:171 | DONE dir | na 16 16 | 0067e9 | (2 bytes)   |         .byte 4, { PW + NC }         
2355:171 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:172 | DONE dir | na 16 16 | 0067eb | (6 bytes)   |         .word nt_pad, xt_base, 006272 
2355:172 | DONE dir | na 16 16 |        |             |                 de 67 6b 62 72 62        --  . g k b r b
2355:173 | DONE dir | na 16 16 | 0067f1 | (4 bytes)   |         .byte 62, 61, 73, 65         
2355:173 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
2355:174 | DONE wsp | na 16 16 |        |             |
2355:175 | DONE lbl | na 16 16 | 0067f5 |             | nt_evaluate                          
2355:176 | DONE dir | na 16 16 | 0067f5 | (2 bytes)   |         .byte 8, { PW + NC }         
2355:176 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2355:177 | DONE dir | na 16 16 | 0067f7 | (6 bytes)   |         .word nt_base, xt_evaluate, 006467 
2355:177 | DONE dir | na 16 16 |        |             |                 e9 67 39 64 67 64        --  . g 9 d g d
2355:178 | DONE dir | na 16 16 | 0067fd | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
2355:178 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
2355:178 | DONE dir | na 16 16 |        |             |                                          -- 
2355:179 | DONE wsp | na 16 16 |        |             |
2355:180 | DONE lbl | na 16 16 | 006805 |             | nt_cells                             
2355:181 | DONE dir | na 16 16 | 006805 | (2 bytes)   |         .byte 5, { PW + NC }         ; 2* because we have 16 bit stack
2355:181 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2355:182 | DONE dir | na 16 16 | 006807 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 00617f 
2355:182 | DONE dir | na 16 16 |        |             |                 f5 67 7c 61 7f 61        --  . g | a . a
2355:183 | DONE dir | na 16 16 | 00680d | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
2355:183 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
2355:184 | DONE wsp | na 16 16 |        |             |
2355:185 | DONE lbl | na 16 16 | 006812 |             | nt_literal                           
2355:186 | DONE dir | na 16 16 | 006812 | (2 bytes)   |         .byte 7, { IM + CO }         
2355:186 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
2355:187 | DONE dir | na 16 16 | 006814 | (6 bytes)   |         .word nt_cells, xt_literal, 0064fa 
2355:187 | DONE dir | na 16 16 |        |             |                 05 68 e9 64 fa 64        --  . h . d . d
2355:188 | DONE dir | na 16 16 | 00681a | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
2355:188 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
2355:189 | DONE wsp | na 16 16 |        |             |
2355:190 | DONE lbl | na 16 16 | 006821 |             | nt_compile-only                      
2355:191 | DONE dir | na 16 16 | 006821 | (2 bytes)   |         .byte 0c, { PW + NC }        
2355:191 | DONE dir | na 16 16 |        |             |                 0c 09                    --   	
2355:192 | DONE dir | na 16 16 | 006823 | (6 bytes)   |         .word nt_literal, xt_compile-only, 0062d0 
2355:192 | DONE dir | na 16 16 |        |             |                 12 68 c8 62 d0 62        --  . h . b . b
2355:193 | DONE dir | na 16 16 | 006829 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
2355:193 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
2355:193 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
2355:194 | DONE wsp | na 16 16 |        |             |
2355:195 | DONE lbl | na 16 16 | 006835 |             | nt_immediate                         
2355:196 | DONE dir | na 16 16 | 006835 | (2 bytes)   |         .byte 9, { PW + NC }         
2355:196 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2355:197 | DONE dir | na 16 16 | 006837 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 0064d5 
2355:197 | DONE dir | na 16 16 |        |             |                 21 68 cd 64 d5 64        --  ! h . d . d
2355:198 | DONE dir | na 16 16 | 00683d | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
2355:198 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
2355:198 | DONE dir | na 16 16 |        |             |                 65                       --  e
2355:199 | DONE wsp | na 16 16 |        |             |
2355:200 | DONE lbl | na 16 16 | 006846 |             | nt_rightbracket                      
2355:201 | DONE dir | na 16 16 | 006846 | (2 bytes)   |         .byte 1, { PW + NC }         
2355:201 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:202 | DONE dir | na 16 16 | 006848 | (6 bytes)   |         .word nt_immediate, xt_rightbracket, 00614c 
2355:202 | DONE dir | na 16 16 |        |             |                 35 68 47 61 4c 61        --  5 h G a L a
2355:203 | DONE dir | na 16 16 | 00684e | (1 bytes)   |         .byte 5d                     
2355:203 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
2355:204 | DONE wsp | na 16 16 |        |             |
2355:205 | DONE lbl | na 16 16 | 00684f |             | nt_leftbracket                       
2355:206 | DONE dir | na 16 16 | 00684f | (2 bytes)   |         .byte 1, { IM + CO }         
2355:206 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2355:207 | DONE dir | na 16 16 | 006851 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 006146 
2355:207 | DONE dir | na 16 16 |        |             |                 46 68 44 61 46 61        --  F h D a F a
2355:208 | DONE dir | na 16 16 | 006857 | (1 bytes)   |         .byte 5b                     
2355:208 | DONE dir | na 16 16 |        |             |                 5b                       --  [
2355:209 | DONE wsp | na 16 16 |        |             |
2355:210 | DONE lbl | na 16 16 | 006858 |             | nt_compilecomma                      
2355:211 | DONE dir | na 16 16 | 006858 | (2 bytes)   |         .byte 08, { CO }             
2355:211 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
2355:212 | DONE dir | na 16 16 | 00685a | (6 bytes)   |         .word nt_leftbracket, xt_compilecomma, 0062e3 
2355:212 | DONE dir | na 16 16 |        |             |                 4f 68 d1 62 e3 62        --  O h . b . b
2355:213 | DONE dir | na 16 16 | 006860 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
2355:213 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
2355:213 | DONE dir | na 16 16 |        |             |                                          -- 
2355:214 | DONE wsp | na 16 16 |        |             |
2355:215 | DONE lbl | na 16 16 | 006868 |             | nt_semicolon                         
2355:216 | DONE dir | na 16 16 | 006868 | (2 bytes)   |         .byte 1, { CO + IM }         
2355:216 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2355:217 | DONE dir | na 16 16 | 00686a | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 00612d 
2355:217 | DONE dir | na 16 16 |        |             |                 58 68 15 61 2d 61        --  X h . a - a
2355:218 | DONE dir | na 16 16 | 006870 | (1 bytes)   |         .byte 3b                     ; ASCII for semicolon
2355:218 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
2355:219 | DONE wsp | na 16 16 |        |             |
2355:220 | DONE lbl | na 16 16 | 006871 |             | nt_colon                             
2355:221 | DONE dir | na 16 16 | 006871 | (2 bytes)   |         .byte 1, { NC }              
2355:221 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
2355:222 | DONE dir | na 16 16 | 006873 | (6 bytes)   |         .word nt_semicolon, xt_colon, 006114 
2355:222 | DONE dir | na 16 16 |        |             |                 68 68 f3 60 14 61        --  h h . ` . a
2355:223 | DONE dir | na 16 16 | 006879 | (1 bytes)   |         .byte 3a                     
2355:223 | DONE dir | na 16 16 |        |             |                 3a                       --  :
2355:224 | DONE wsp | na 16 16 |        |             |
2355:225 | DONE lbl | na 16 16 | 00687a |             | nt_allot                             
2355:226 | DONE dir | na 16 16 | 00687a | (2 bytes)   |         .byte 5, { PW + NC }         
2355:226 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2355:227 | DONE dir | na 16 16 | 00687c | (6 bytes)   |         .word nt_colon, xt_allot, 006263 
2355:227 | DONE dir | na 16 16 |        |             |                 71 68 3b 62 63 62        --  q h ; b c b
2355:228 | DONE dir | na 16 16 | 006882 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
2355:228 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
2355:229 | DONE wsp | na 16 16 |        |             |
2355:230 | DONE lbl | na 16 16 | 006887 |             | nt_create                            
2355:231 | DONE dir | na 16 16 | 006887 | (2 bytes)   |         .byte 6, { PW + NC }         
2355:231 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2355:232 | DONE dir | na 16 16 | 006889 | (6 bytes)   |         .word nt_allot, xt_create, 006386 
2355:232 | DONE dir | na 16 16 |        |             |                 7a 68 14 63 86 63        --  z h . c . c
2355:233 | DONE dir | na 16 16 | 00688f | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
2355:233 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
2355:234 | DONE wsp | na 16 16 |        |             |
2355:235 | DONE lbl | na 16 16 | 006895 |             | nt_name-string                       
2355:236 | DONE dir | na 16 16 | 006895 | (2 bytes)   |         .byte 0b, { PW + NC }        
2355:236 | DONE dir | na 16 16 |        |             |                 0b 09                    --   	
2355:237 | DONE dir | na 16 16 | 006897 | (6 bytes)   |         .word nt_create, xt_name-string, 006547 
2355:237 | DONE dir | na 16 16 |        |             |                 87 68 37 65 47 65        --  . h 7 e G e
2355:238 | DONE dir | na 16 16 | 00689d | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
2355:238 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
2355:238 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
2355:239 | DONE wsp | na 16 16 |        |             |
2355:240 | DONE lbl | na 16 16 | 0068a8 |             | nt_2dup                              
2355:241 | DONE dir | na 16 16 | 0068a8 | (2 bytes)   |         .byte 4, { PW + NC }         
2355:241 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:242 | DONE dir | na 16 16 | 0068aa | (6 bytes)   |         .word nt_name-string, xt_2dup, 006191 
2355:242 | DONE dir | na 16 16 |        |             |                 95 68 87 61 91 61        --  . h . a . a
2355:243 | DONE dir | na 16 16 | 0068b0 | (4 bytes)   |         .byte 32, 64, 75, 70         
2355:243 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
2355:244 | DONE wsp | na 16 16 |        |             |
2355:245 | DONE lbl | na 16 16 | 0068b4 |             | nt_abs                               
2355:246 | DONE dir | na 16 16 | 0068b4 | (2 bytes)   |         .byte 3, { PW + NC }         
2355:246 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2355:247 | DONE dir | na 16 16 | 0068b6 | (6 bytes)   |         .word nt_2dup, xt_abs, 0061b6 
2355:247 | DONE dir | na 16 16 |        |             |                 a8 68 ae 61 b6 61        --  . h . a . a
2355:248 | DONE dir | na 16 16 | 0068bc | (3 bytes)   |         .byte 61, 62, 73             
2355:248 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
2355:249 | DONE wsp | na 16 16 |        |             |
2355:250 | DONE lbl | na 16 16 | 0068bf |             | nt_state                             
2355:251 | DONE dir | na 16 16 | 0068bf | (2 bytes)   |         .byte 5, { PW + NC }         
2355:251 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2355:252 | DONE dir | na 16 16 | 0068c1 | (6 bytes)   |         .word nt_abs, xt_state, 006649 
2355:252 | DONE dir | na 16 16 |        |             |                 b4 68 42 66 49 66        --  . h B f I f
2355:253 | DONE dir | na 16 16 | 0068c7 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
2355:253 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
2355:254 | DONE wsp | na 16 16 |        |             |
2355:255 | DONE lbl | na 16 16 | 0068cc |             | nt_to-in                             
2355:256 | DONE dir | na 16 16 | 0068cc | (2 bytes)   |         .byte 3, { PW + NC }         
2355:256 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2355:257 | DONE dir | na 16 16 | 0068ce | (6 bytes)   |         .word nt_state, xt_to-in, 0060e6 
2355:257 | DONE dir | na 16 16 |        |             |                 bf 68 df 60 e6 60        --  . h . ` . `
2355:258 | DONE dir | na 16 16 | 0068d4 | (3 bytes)   |         .byte 3e, 69, 6e             
2355:258 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
2355:259 | DONE wsp | na 16 16 |        |             |
2355:260 | DONE lbl | na 16 16 | 0068d7 |             | nt_source                            
2355:261 | DONE dir | na 16 16 | 0068d7 | (2 bytes)   |         .byte 6, { PW + NC }         
2355:261 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2355:262 | DONE dir | na 16 16 | 0068d9 | (6 bytes)   |         .word nt_to-in, xt_source, 006626 
2355:262 | DONE dir | na 16 16 |        |             |                 cc 68 1a 66 26 66        --  . h . f & f
2355:263 | DONE dir | na 16 16 | 0068df | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
2355:263 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
2355:264 | DONE wsp | na 16 16 |        |             |
2355:265 | DONE lbl | na 16 16 | 0068e5 |             | nt_depth                             
2355:266 | DONE dir | na 16 16 | 0068e5 | (2 bytes)   |         .byte 5, { PW + NC }         
2355:266 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2355:267 | DONE dir | na 16 16 | 0068e7 | (6 bytes)   |         .word nt_source, xt_depth, 00639b 
2355:267 | DONE dir | na 16 16 |        |             |                 d7 68 8d 63 9b 63        --  . h . c . c
2355:268 | DONE dir | na 16 16 | 0068ed | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
2355:268 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
2355:269 | DONE wsp | na 16 16 |        |             |
2355:270 | DONE lbl | na 16 16 | 0068f2 |             | nt_constant                          
2355:271 | DONE dir | na 16 16 | 0068f2 | (2 bytes)   |         .byte 8, { PW + NC }         
2355:271 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2355:272 | DONE dir | na 16 16 | 0068f4 | (6 bytes)   |         .word nt_depth, xt_constant, 0062fd 
2355:272 | DONE dir | na 16 16 |        |             |                 e5 68 e4 62 fd 62        --  . h . b . b
2355:273 | DONE dir | na 16 16 | 0068fa | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
2355:273 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
2355:273 | DONE dir | na 16 16 |        |             |                                          -- 
2355:274 | DONE wsp | na 16 16 |        |             |
2355:275 | DONE lbl | na 16 16 | 006902 |             | nt_variable                          
2355:276 | DONE dir | na 16 16 | 006902 | (2 bytes)   |         .byte 8, { PW + NC }         
2355:276 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2355:277 | DONE dir | na 16 16 | 006904 | (6 bytes)   |         .word nt_constant, xt_variable, 00669a 
2355:277 | DONE dir | na 16 16 |        |             |                 f2 68 8e 66 9a 66        --  . h . f . f
2355:278 | DONE dir | na 16 16 | 00690a | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
2355:278 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
2355:278 | DONE dir | na 16 16 |        |             |                                          -- 
2355:279 | DONE wsp | na 16 16 |        |             |
2355:280 | DONE lbl | na 16 16 | 006912 |             | nt_tick                              
2355:281 | DONE dir | na 16 16 | 006912 | (2 bytes)   |         .byte 1, { PW + NC }         
2355:281 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:282 | DONE dir | na 16 16 | 006914 | (6 bytes)   |         .word nt_variable, xt_tick, 0061ad 
2355:282 | DONE dir | na 16 16 |        |             |                 02 69 92 61 ad 61        --  . i . a . a
2355:283 | DONE dir | na 16 16 | 00691a | (1 bytes)   |         .byte 27                     ; hex for "'"
2355:283 | DONE dir | na 16 16 |        |             |                 27                       --  '
2355:284 | DONE wsp | na 16 16 |        |             |
2355:285 | DONE lbl | na 16 16 | 00691b |             | nt_min                               
2355:286 | DONE dir | na 16 16 | 00691b | (2 bytes)   |         .byte 3, { PW + NC }         
2355:286 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2355:287 | DONE dir | na 16 16 | 00691d | (6 bytes)   |         .word nt_tick, xt_min, 00652d 
2355:287 | DONE dir | na 16 16 |        |             |                 12 69 1b 65 2d 65        --  . i . e - e
2355:288 | DONE dir | na 16 16 | 006923 | (3 bytes)   |         .byte 6d, 69, 6e             
2355:288 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
2355:289 | DONE wsp | na 16 16 |        |             |
2355:290 | DONE lbl | na 16 16 | 006926 |             | nt_max                               
2355:291 | DONE dir | na 16 16 | 006926 | (2 bytes)   |         .byte 3, { PW + NC }         
2355:291 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2355:292 | DONE dir | na 16 16 | 006928 | (6 bytes)   |         .word nt_min, xt_max, 00651a 
2355:292 | DONE dir | na 16 16 |        |             |                 1b 69 08 65 1a 65        --  . i . e . e
2355:293 | DONE dir | na 16 16 | 00692e | (3 bytes)   |         .byte 6d, 61, 78             
2355:293 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
2355:294 | DONE wsp | na 16 16 |        |             |
2355:295 | DONE lbl | na 16 16 | 006931 |             | nt_negate                            
2355:296 | DONE dir | na 16 16 | 006931 | (2 bytes)   |         .byte 6, { PW + NC }         
2355:296 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2355:297 | DONE dir | na 16 16 | 006933 | (6 bytes)   |         .word nt_max, xt_negate, 00654e 
2355:297 | DONE dir | na 16 16 |        |             |                 26 69 48 65 4e 65        --  & i H e N e
2355:298 | DONE dir | na 16 16 | 006939 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
2355:298 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
2355:299 | DONE wsp | na 16 16 |        |             |
2355:300 | DONE lbl | na 16 16 | 00693f |             | nt_invert                            
2355:301 | DONE dir | na 16 16 | 00693f | (2 bytes)   |         .byte 6, { PW + NC }         
2355:301 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2355:302 | DONE dir | na 16 16 | 006941 | (6 bytes)   |         .word nt_negate, xt_invert, 0064db 
2355:302 | DONE dir | na 16 16 |        |             |                 31 69 d6 64 db 64        --  1 i . d . d
2355:303 | DONE dir | na 16 16 | 006947 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
2355:303 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
2355:304 | DONE wsp | na 16 16 |        |             |
2355:305 | DONE lbl | na 16 16 | 00694d |             | nt_char                              
2355:306 | DONE dir | na 16 16 | 00694d | (2 bytes)   |         .byte 4, { PW + NC }         
2355:306 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:307 | DONE dir | na 16 16 | 00694f | (6 bytes)   |         .word nt_invert, xt_char, 0062c7 
2355:307 | DONE dir | na 16 16 |        |             |                 3f 69 b0 62 c7 62        --  ? i . b . b
2355:308 | DONE dir | na 16 16 | 006955 | (4 bytes)   |         .byte 63, 68, 61, 72         
2355:308 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
2355:309 | DONE wsp | na 16 16 |        |             |
2355:310 | DONE lbl | na 16 16 | 006959 |             | nt_xor                               
2355:311 | DONE dir | na 16 16 | 006959 | (2 bytes)   |         .byte 3, { PW + NC }         
2355:311 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2355:312 | DONE dir | na 16 16 | 00695b | (6 bytes)   |         .word nt_char, xt_xor, 0066c9 
2355:312 | DONE dir | na 16 16 |        |             |                 4d 69 c3 66 c9 66        --  M i . f . f
2355:313 | DONE dir | na 16 16 | 006961 | (3 bytes)   |         .byte 78, 6f, 72             
2355:313 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
2355:314 | DONE wsp | na 16 16 |        |             |
2355:315 | DONE lbl | na 16 16 | 006964 |             | nt_or                                
2355:316 | DONE dir | na 16 16 | 006964 | (2 bytes)   |         .byte 2, { PW + NC }         
2355:316 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2355:317 | DONE dir | na 16 16 | 006966 | (6 bytes)   |         .word nt_xor, xt_or, 006558  
2355:317 | DONE dir | na 16 16 |        |             |                 59 69 52 65 58 65        --  Y i R e X e
2355:318 | DONE dir | na 16 16 | 00696c | (2 bytes)   |         .byte 6f, 72                 
2355:318 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
2355:319 | DONE wsp | na 16 16 |        |             |
2355:320 | DONE lbl | na 16 16 | 00696e |             | nt_and                               
2355:321 | DONE dir | na 16 16 | 00696e | (2 bytes)   |         .byte 3, { PW + NC }         
2355:321 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2355:322 | DONE dir | na 16 16 | 006970 | (6 bytes)   |         .word nt_or, xt_and, 00626a  
2355:322 | DONE dir | na 16 16 |        |             |                 64 69 64 62 6a 62        --  d i d b j b
2355:323 | DONE dir | na 16 16 | 006976 | (3 bytes)   |         .byte 61, 6e, 64             
2355:323 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
2355:324 | DONE wsp | na 16 16 |        |             |
2355:325 | DONE lbl | na 16 16 | 006979 |             | nt_c-comma                           
2355:326 | DONE dir | na 16 16 | 006979 | (2 bytes)   |         .byte 2, { PW + NC }         
2355:326 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2355:327 | DONE dir | na 16 16 | 00697b | (6 bytes)   |         .word nt_and, xt_c-comma, 006293 
2355:327 | DONE dir | na 16 16 |        |             |                 6e 69 86 62 93 62        --  n i . b . b
2355:328 | DONE dir | na 16 16 | 006981 | (2 bytes)   |         .byte 63, 2c                 
2355:328 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
2355:329 | DONE wsp | na 16 16 |        |             |
2355:330 | DONE lbl | na 16 16 | 006983 |             | nt_c-fetch                           
2355:331 | DONE dir | na 16 16 | 006983 | (2 bytes)   |         .byte 2, { PW + NC }         
2355:331 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2355:332 | DONE dir | na 16 16 | 006985 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 00629f 
2355:332 | DONE dir | na 16 16 |        |             |                 79 69 94 62 9f 62        --  y i . b . b
2355:333 | DONE dir | na 16 16 | 00698b | (2 bytes)   |         .byte 63, 40                 
2355:333 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
2355:334 | DONE wsp | na 16 16 |        |             |
2355:335 | DONE lbl | na 16 16 | 00698d |             | nt_c-store                           
2355:336 | DONE dir | na 16 16 | 00698d | (2 bytes)   |         .byte 2, { PW + NC }         
2355:336 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2355:337 | DONE dir | na 16 16 | 00698f | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0062af 
2355:337 | DONE dir | na 16 16 |        |             |                 83 69 a0 62 af 62        --  . i . b . b
2355:338 | DONE dir | na 16 16 | 006995 | (2 bytes)   |         .byte 63, 21                 
2355:338 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
2355:339 | DONE wsp | na 16 16 |        |             |
2355:340 | DONE lbl | na 16 16 | 006997 |             | nt_two-star                          
2355:341 | DONE dir | na 16 16 | 006997 | (2 bytes)   |         .byte 2, { PW + NC }         
2355:341 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2355:342 | DONE dir | na 16 16 | 006999 | (6 bytes)   |         .word nt_c-store, xt_two-star, 00617f 
2355:342 | DONE dir | na 16 16 |        |             |                 8d 69 7c 61 7f 61        --  . i | a . a
2355:343 | DONE dir | na 16 16 | 00699f | (2 bytes)   |         .byte 32, 2a                 
2355:343 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
2355:344 | DONE wsp | na 16 16 |        |             |
2355:345 | DONE lbl | na 16 16 | 0069a1 |             | nt_minus                             
2355:346 | DONE dir | na 16 16 | 0069a1 | (2 bytes)   |         .byte 1, { PW + NC }         
2355:346 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:347 | DONE dir | na 16 16 | 0069a3 | (6 bytes)   |         .word nt_two-star, xt_minus, 00615f 
2355:347 | DONE dir | na 16 16 |        |             |                 97 69 55 61 5f 61        --  . i U a _ a
2355:348 | DONE dir | na 16 16 | 0069a9 | (1 bytes)   |         .byte 2d                     
2355:348 | DONE dir | na 16 16 |        |             |                 2d                       --  -
2355:349 | DONE wsp | na 16 16 |        |             |
2355:350 | DONE lbl | na 16 16 | 0069aa |             | nt_plus                              
2355:351 | DONE dir | na 16 16 | 0069aa | (2 bytes)   |         .byte 1, { PW + NC }         
2355:351 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:352 | DONE dir | na 16 16 | 0069ac | (6 bytes)   |         .word nt_minus, xt_plus, 006154 
2355:352 | DONE dir | na 16 16 |        |             |                 a1 69 4d 61 54 61        --  . i M a T a
2355:353 | DONE dir | na 16 16 | 0069b2 | (1 bytes)   |         .byte 2b                     
2355:353 | DONE dir | na 16 16 |        |             |                 2b                       --  +
2355:354 | DONE wsp | na 16 16 |        |             |
2355:355 | DONE lbl | na 16 16 | 0069b3 |             | nt_one-minus                         
2355:356 | DONE dir | na 16 16 | 0069b3 | (2 bytes)   |         .byte 2, { PW + NC }         
2355:356 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2355:357 | DONE dir | na 16 16 | 0069b5 | (6 bytes)   |         .word nt_plus, xt_one-minus, 006171 
2355:357 | DONE dir | na 16 16 |        |             |                 aa 69 70 61 71 61        --  . i p a q a
2355:358 | DONE dir | na 16 16 | 0069bb | (2 bytes)   |         .byte 31, 2d                 
2355:358 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
2355:359 | DONE wsp | na 16 16 |        |             |
2355:360 | DONE lbl | na 16 16 | 0069bd |             | nt_one-plus                          
2355:361 | DONE dir | na 16 16 | 0069bd | (2 bytes)   |         .byte 2, { PW + NC }         
2355:361 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2355:362 | DONE dir | na 16 16 | 0069bf | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 006173 
2355:362 | DONE dir | na 16 16 |        |             |                 b3 69 72 61 73 61        --  . i r a s a
2355:363 | DONE dir | na 16 16 | 0069c5 | (2 bytes)   |         .byte 31, 2b                 
2355:363 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
2355:364 | DONE wsp | na 16 16 |        |             |
2355:365 | DONE lbl | na 16 16 | 0069c7 |             | nt_false                             
2355:366 | DONE dir | na 16 16 | 0069c7 | (2 bytes)   |         .byte 5, { PW + NC }         
2355:366 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2355:367 | DONE dir | na 16 16 | 0069c9 | (6 bytes)   |         .word nt_one-plus, xt_zero, 006167 
2355:367 | DONE dir | na 16 16 |        |             |                 bd 69 60 61 67 61        --  . i ` a g a
2355:368 | DONE dir | na 16 16 | 0069cf | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
2355:368 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
2355:369 | DONE wsp | na 16 16 |        |             |
2355:370 | DONE lbl | na 16 16 | 0069d4 |             | nt_true                              
2355:371 | DONE dir | na 16 16 | 0069d4 | (2 bytes)   |         .byte 4, { PW + NC }         
2355:371 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:372 | DONE dir | na 16 16 | 0069d6 | (6 bytes)   |         .word nt_false, xt_true, 006657 
2355:372 | DONE dir | na 16 16 |        |             |                 c7 69 50 66 57 66        --  . i P f W f
2355:373 | DONE dir | na 16 16 | 0069dc | (4 bytes)   |         .byte 74, 72, 75, 65         
2355:373 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
2355:374 | DONE wsp | na 16 16 |        |             |
2355:375 | DONE lbl | na 16 16 | 0069e0 |             | nt_two                               
2355:376 | DONE dir | na 16 16 | 0069e0 | (2 bytes)   |         .byte 1, { PW + NC }         
2355:376 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:377 | DONE dir | na 16 16 | 0069e2 | (6 bytes)   |         .word nt_true, xt_two, 00617b 
2355:377 | DONE dir | na 16 16 |        |             |                 d4 69 74 61 7b 61        --  . i t a { a
2355:378 | DONE dir | na 16 16 | 0069e8 | (1 bytes)   |         .byte 32                     
2355:378 | DONE dir | na 16 16 |        |             |                 32                       --  2
2355:379 | DONE wsp | na 16 16 |        |             |
2355:380 | DONE lbl | na 16 16 | 0069e9 |             | nt_one                               
2355:381 | DONE dir | na 16 16 | 0069e9 | (2 bytes)   |         .byte 1, { PW + NC }         
2355:381 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:382 | DONE dir | na 16 16 | 0069eb | (6 bytes)   |         .word nt_two, xt_one, 00616f 
2355:382 | DONE dir | na 16 16 |        |             |                 e0 69 68 61 6f 61        --  . i h a o a
2355:383 | DONE dir | na 16 16 | 0069f1 | (1 bytes)   |         .byte 31                     
2355:383 | DONE dir | na 16 16 |        |             |                 31                       --  1
2355:384 | DONE wsp | na 16 16 |        |             |
2355:385 | DONE lbl | na 16 16 | 0069f2 |             | nt_zero                              
2355:386 | DONE dir | na 16 16 | 0069f2 | (2 bytes)   |         .byte 1, { PW + NC }         
2355:386 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:387 | DONE dir | na 16 16 | 0069f4 | (6 bytes)   |         .word nt_one, xt_zero, 006167 
2355:387 | DONE dir | na 16 16 |        |             |                 e9 69 60 61 67 61        --  . i ` a g a
2355:388 | DONE dir | na 16 16 | 0069fa | (1 bytes)   |         .byte 30                     
2355:388 | DONE dir | na 16 16 |        |             |                 30                       --  0
2355:389 | DONE wsp | na 16 16 |        |             |
2355:390 | DONE lbl | na 16 16 | 0069fb |             | nt_find-name                         
2355:391 | DONE dir | na 16 16 | 0069fb | (2 bytes)   |         .byte 9, 0                   
2355:391 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
2355:392 | DONE dir | na 16 16 | 0069fd | (6 bytes)   |         .word nt_zero, xt_find-name, 0064cc 
2355:392 | DONE dir | na 16 16 |        |             |                 f2 69 76 64 cc 64        --  . i v d . d
2355:393 | DONE dir | na 16 16 | 006a03 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
2355:393 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
2355:393 | DONE dir | na 16 16 |        |             |                 65                       --  e
2355:394 | DONE wsp | na 16 16 |        |             |
2355:395 | DONE lbl | na 16 16 | 006a0c |             | nt_refill                            
2355:396 | DONE dir | na 16 16 | 006a0c | (2 bytes)   |         .byte 6, { PW }              ; TODO check flags
2355:396 | DONE dir | na 16 16 |        |             |                 06 08                    --  . .
2355:397 | DONE dir | na 16 16 | 006a0e | (6 bytes)   |         .word nt_find-name, xt_refill, 006610 
2355:397 | DONE dir | na 16 16 |        |             |                 fb 69 de 65 10 66        --  . i . e . f
2355:398 | DONE dir | na 16 16 | 006a14 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
2355:398 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
2355:399 | DONE wsp | na 16 16 |        |             |
2355:400 | DONE lbl | na 16 16 | 006a1a |             | nt_parse-name                        
2355:401 | DONE dir | na 16 16 | 006a1a | (2 bytes)   |         .byte &10, 0                 
2355:401 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
2355:402 | DONE dir | na 16 16 | 006a1c | (6 bytes)   |         .word nt_refill, xt_parse-name, 0065dd 
2355:402 | DONE dir | na 16 16 |        |             |                 0c 6a 79 65 dd 65        --   j y e . e
2355:403 | DONE dir | na 16 16 | 006a22 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
2355:403 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
2355:403 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
2355:404 | DONE wsp | na 16 16 |        |             |
2355:405 | DONE lbl | na 16 16 | 006a2c |             | nt_source-id                         
2355:406 | DONE dir | na 16 16 | 006a2c | (2 bytes)   |         .byte 9, { PW + NC }         
2355:406 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2355:407 | DONE dir | na 16 16 | 006a2e | (6 bytes)   |         .word nt_parse-name, xt_source-id, 00662d 
2355:407 | DONE dir | na 16 16 |        |             |                 1a 6a 27 66 2d 66        --  . j ' f - f
2355:408 | DONE dir | na 16 16 | 006a34 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
2355:408 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
2355:408 | DONE dir | na 16 16 |        |             |                 64                       --  d
2355:409 | DONE wsp | na 16 16 |        |             |
2355:410 | DONE lbl | na 16 16 | 006a3d |             | nt_comma                             
2355:411 | DONE dir | na 16 16 | 006a3d | (2 bytes)   |         .byte 1, { PW + NC }         
2355:411 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:412 | DONE dir | na 16 16 | 006a3f | (6 bytes)   |         .word nt_source-id, xt_comma, 0060f2 
2355:412 | DONE dir | na 16 16 |        |             |                 2c 6a e7 60 f2 60        --  , j . ` . `
2355:413 | DONE dir | na 16 16 | 006a45 | (1 bytes)   |         .byte 2c                     
2355:413 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
2355:414 | DONE wsp | na 16 16 |        |             |
2355:415 | DONE lbl | na 16 16 | 006a46 |             | nt_accept                            
2355:416 | DONE dir | na 16 16 | 006a46 | (2 bytes)   |         .byte 6, 00                  ; TODO check flags
2355:416 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
2355:417 | DONE dir | na 16 16 | 006a48 | (6 bytes)   |         .word nt_comma, xt_accept, 00623a 
2355:417 | DONE dir | na 16 16 |        |             |                 3d 6a b7 61 3a 62        --  = j . a : b
2355:418 | DONE dir | na 16 16 | 006a4e | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
2355:418 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
2355:419 | DONE wsp | na 16 16 |        |             |
2355:420 | DONE lbl | na 16 16 | 006a54 |             | nt_tuck                              
2355:421 | DONE dir | na 16 16 | 006a54 | (2 bytes)   |         .byte 4, { PW + NC }         
2355:421 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:422 | DONE dir | na 16 16 | 006a56 | (6 bytes)   |         .word nt_accept, xt_tuck, 006660 
2355:422 | DONE dir | na 16 16 |        |             |                 46 6a 58 66 60 66        --  F j X f ` f
2355:423 | DONE dir | na 16 16 | 006a5c | (4 bytes)   |         .byte 74, 75, 63, 6b         
2355:423 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
2355:424 | DONE wsp | na 16 16 |        |             |
2355:425 | DONE lbl | na 16 16 | 006a60 |             | nt_nip                               
2355:426 | DONE dir | na 16 16 | 006a60 | (2 bytes)   |         .byte 3, { PW + NC }         
2355:426 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2355:427 | DONE dir | na 16 16 | 006a62 | (6 bytes)   |         .word nt_tuck, xt_nip, 006551 
2355:427 | DONE dir | na 16 16 |        |             |                 54 6a 4f 65 51 65        --  T j O e Q e
2355:428 | DONE dir | na 16 16 | 006a68 | (3 bytes)   |         .byte 6e, 69, 70             
2355:428 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
2355:429 | DONE wsp | na 16 16 |        |             |
2355:430 | DONE lbl | na 16 16 | 006a6b |             | nt_rot                               
2355:431 | DONE dir | na 16 16 | 006a6b | (2 bytes)   |         .byte 3, { PW + NC }         
2355:431 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2355:432 | DONE dir | na 16 16 | 006a6d | (6 bytes)   |         .word nt_nip, xt_rot, 006619 
2355:432 | DONE dir | na 16 16 |        |             |                 60 6a 11 66 19 66        --  ` j . f . f
2355:433 | DONE dir | na 16 16 | 006a73 | (3 bytes)   |         .byte 72, 6f, 74             
2355:433 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
2355:434 | DONE wsp | na 16 16 |        |             |
2355:435 | DONE lbl | na 16 16 | 006a76 |             | nt_execute                           
2355:436 | DONE dir | na 16 16 | 006a76 | (2 bytes)   |         .byte 7, { PW + NC }         
2355:436 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2355:437 | DONE dir | na 16 16 | 006a78 | (6 bytes)   |         .word nt_rot, xt_execute, 006475 
2355:437 | DONE dir | na 16 16 |        |             |                 6b 6a 6b 64 75 64        --  k j k d u d
2355:438 | DONE dir | na 16 16 | 006a7e | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
2355:438 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
2355:439 | DONE wsp | na 16 16 |        |             |
2355:440 | DONE lbl | na 16 16 | 006a85 |             | nt_here                              
2355:441 | DONE dir | na 16 16 | 006a85 | (2 bytes)   |         .byte 4, { PW + NC }         
2355:441 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:442 | DONE dir | na 16 16 | 006a87 | (6 bytes)   |         .word nt_execute, xt_here, 0064e2 
2355:442 | DONE dir | na 16 16 |        |             |                 76 6a dc 64 e2 64        --  v j . d . d
2355:443 | DONE dir | na 16 16 | 006a8d | (4 bytes)   |         .byte 68, 65, 72, 65         
2355:443 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
2355:444 | DONE wsp | na 16 16 |        |             |
2355:445 | DONE lbl | na 16 16 | 006a91 |             | nt_2drop                             
2355:446 | DONE dir | na 16 16 | 006a91 | (2 bytes)   |         .byte 5, { PW + NC }         
2355:446 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2355:447 | DONE dir | na 16 16 | 006a93 | (6 bytes)   |         .word nt_here, xt_2drop, 006186 
2355:447 | DONE dir | na 16 16 |        |             |                 85 6a 80 61 86 61        --  . j . a . a
2355:448 | DONE dir | na 16 16 | 006a99 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
2355:448 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
2355:449 | DONE wsp | na 16 16 |        |             |
2355:450 | DONE lbl | na 16 16 | 006a9e |             | nt_over                              
2355:451 | DONE dir | na 16 16 | 006a9e | (2 bytes)   |         .byte 4, { PW + NC }         
2355:451 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:452 | DONE dir | na 16 16 | 006aa0 | (6 bytes)   |         .word nt_2drop, xt_over, 00655f 
2355:452 | DONE dir | na 16 16 |        |             |                 91 6a 59 65 5f 65        --  . j Y e _ e
2355:453 | DONE dir | na 16 16 | 006aa6 | (4 bytes)   |         .byte 6f, 76, 65, 72         
2355:453 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
2355:454 | DONE wsp | na 16 16 |        |             |
2355:455 | DONE lbl | na 16 16 | 006aaa |             | nt_fetch                             
2355:456 | DONE dir | na 16 16 | 006aaa | (2 bytes)   |         .byte 1, { PW + NC }         
2355:456 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:457 | DONE dir | na 16 16 | 006aac | (6 bytes)   |         .word nt_over, xt_fetch, 006143 
2355:457 | DONE dir | na 16 16 |        |             |                 9e 6a 3f 61 43 61        --  . j ? a C a
2355:458 | DONE dir | na 16 16 | 006ab2 | (1 bytes)   |         .byte 40                     
2355:458 | DONE dir | na 16 16 |        |             |                 40                       --  @
2355:459 | DONE wsp | na 16 16 |        |             |
2355:460 | DONE lbl | na 16 16 | 006ab3 |             | nt_store                             
2355:461 | DONE dir | na 16 16 | 006ab3 | (2 bytes)   |         .byte 1, { PW + NC }         
2355:461 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2355:462 | DONE dir | na 16 16 | 006ab5 | (6 bytes)   |         .word nt_fetch, xt_store, 00613e 
2355:462 | DONE dir | na 16 16 |        |             |                 aa 6a 35 61 3e 61        --  . j 5 a > a
2355:463 | DONE dir | na 16 16 | 006abb | (1 bytes)   |         .byte 21                     
2355:463 | DONE dir | na 16 16 |        |             |                 21                       --  !
2355:464 | DONE wsp | na 16 16 |        |             |
2355:465 | DONE lbl | na 16 16 | 006abc |             | nt_swap                              
2355:466 | DONE dir | na 16 16 | 006abc | (2 bytes)   |         .byte 4, { PW + NC }         
2355:466 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:467 | DONE dir | na 16 16 | 006abe | (6 bytes)   |         .word nt_store, xt_swap, 00664f 
2355:467 | DONE dir | na 16 16 |        |             |                 b3 6a 4a 66 4f 66        --  . j J f O f
2355:468 | DONE dir | na 16 16 | 006ac4 | (4 bytes)   |         .byte 73, 77, 61, 70         
2355:468 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
2355:469 | DONE wsp | na 16 16 |        |             |
2355:470 | DONE lbl | na 16 16 | 006ac8 |             | nt_dup                               
2355:471 | DONE dir | na 16 16 | 006ac8 | (2 bytes)   |         .byte 3, { PW + NC }         
2355:471 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2355:472 | DONE dir | na 16 16 | 006aca | (6 bytes)   |         .word nt_swap, xt_dup, 006438 
2355:472 | DONE dir | na 16 16 |        |             |                 bc 6a 34 64 38 64        --  . j 4 d 8 d
2355:473 | DONE dir | na 16 16 | 006ad0 | (3 bytes)   |         .byte 64, 75, 70             
2355:473 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
2355:474 | DONE wsp | na 16 16 |        |             |
2355:475 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
2355:476 | DONE lbl | na 16 16 | 006ad3 |             | nt_drop                              
2355:477 | DONE dir | na 16 16 | 006ad3 | (2 bytes)   |         .byte 4, { PW + NC }         
2355:477 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2355:478 | DONE dir | na 16 16 | 006ad5 | (6 bytes)   |         .word nt_dup, xt_drop, 00640c 
2355:478 | DONE dir | na 16 16 |        |             |                 c8 6a 08 64 0c 64        --  . j . d  d
2355:479 | DONE dir | na 16 16 | 006adb | (4 bytes)   |         .byte 64, 72, 6f, 70         
2355:479 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
2355:480 | DONE wsp | na 16 16 |        |             |
2355:481 | DONE cmt | na 16 16 |        |             | ; END
2356:000 | DONE wsp | na 16 16 |        |             |
2357:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2358:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
2359:000 | DONE wsp | na 16 16 |        |             |
2360:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2361:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
2362:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
2363:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
2364:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
2365:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
2366:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
2367:000 | DONE lbl | na 16 16 | 006adf |             | dovar                                
2368:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2369:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2370:000 | DONE ins | na 16 16 | 006adf | ca          |                 dex                  ; make room on Data Stack
2371:000 | DONE ins | na 16 16 | 006ae0 | ca          |                 dex                  
2372:000 | DONE ins | na 16 16 | 006ae1 | 94 00       |                 sty.dx 00            
2373:000 | DONE wsp | na 16 16 |        |             |
2374:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
2375:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
2376:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
2377:000 | DONE ins | na 16 16 | 006ae3 | 7a          |                 ply                  ; value is now TOS
2378:000 | DONE ins | na 16 16 | 006ae4 | c8          |                 iny                  ; add one because of 65816's address handling
2379:000 | DONE wsp | na 16 16 |        |             |
2380:000 | DONE ins | na 16 16 | 006ae5 | 60          |                 rts                  ; takes us to original caller
2381:000 | DONE wsp | na 16 16 |        |             |
2382:000 | DONE wsp | na 16 16 |        |             |
2383:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2384:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
2385:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
2386:000 | DONE cmt | na 16 16 |        |             | ; the stack
2387:000 | DONE lbl | na 16 16 | 006ae6 |             | doconst                              
2388:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2389:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2390:000 | DONE ins | na 16 16 | 006ae6 | ca          |                 dex                  ; make room on Data Stack
2391:000 | DONE ins | na 16 16 | 006ae7 | ca          |                 dex                  
2392:000 | DONE ins | na 16 16 | 006ae8 | 94 00       |                 sty.dx 00            
2393:000 | DONE wsp | na 16 16 |        |             |
2394:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
2395:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
2396:000 | DONE ins | na 16 16 | 006aea | 68          |                 pla                  ; get the return address
2397:000 | DONE ins | na 16 16 | 006aeb | 85 16       |                 sta.d 000216         
2398:000 | DONE wsp | na 16 16 |        |             |
2399:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
2400:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
2401:000 | DONE ins | na 16 16 | 006aed | a0 01 00    |                 ldy.# 0001           
2402:000 | DONE ins | na 16 16 | 006af0 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
2403:000 | DONE ins | na 16 16 | 006af2 | a8          |                 tay                  
2404:000 | DONE wsp | na 16 16 |        |             |
2405:000 | DONE ins | na 16 16 | 006af3 | 60          |                 rts                  ; takes us to original caller
2406:000 | DONE wsp | na 16 16 |        |             |
2407:000 | DONE wsp | na 16 16 |        |             |
2408:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2409:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
2410:000 | DONE wsp | na 16 16 |        |             |
2411:000 | DONE wsp | na 16 16 |        |             |
2412:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2413:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (AKA INTERPRET)
2414:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
2415:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
2416:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
2417:000 | DONE lbl | na 16 16 | 006af4 |             | compex                               
2418:000 | DONE lbl | na 16 16 | 006af4 |             | compex_loop                          
2419:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2420:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2421:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
2422:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
2423:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
2424:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
2425:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
2426:000 | DONE ins | na 16 16 | 006af4 | 20 79 65    |                 jsr 006579           ; ( "string" -- addr u )
2427:000 | DONE wsp | na 16 16 |        |             |
2428:000 | DONE cmt | na 16 16 |        |             |                 ; TODO decide if we want to make a copy of the string here so
2429:000 | DONE cmt | na 16 16 |        |             |                 ; that we can provide a better error message
2430:000 | DONE wsp | na 16 16 |        |             |
2431:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
2432:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
2433:000 | DONE ins | na 16 16 | 006af7 | 98          |                 tya                  ; force flag check
2434:000 | DONE ins | na 16 16 | 006af8 | f0 3f       |                 beq 006b39           
2435:000 | DONE wsp | na 16 16 |        |             |
2436:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
2437:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
2438:000 | DONE ins | na 16 16 | 006afa | 20 9f 6b    |                 jsr 006b9f           
2439:000 | DONE wsp | na 16 16 |        |             |
2440:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know
2441:000 | DONE ins | na 16 16 | 006afd | 20 76 64    |                 jsr 006476           ; ( addr u -- nt | 0 )
2442:000 | DONE wsp | na 16 16 |        |             |
2443:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
2444:000 | DONE ins | na 16 16 | 006b00 | 98          |                 tya                  
2445:000 | DONE ins | na 16 16 | 006b01 | d0 06       |                 bne 006b09           
2446:000 | DONE wsp | na 16 16 |        |             |
2447:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
2448:000 | DONE wsp | na 16 16 |        |             |
2449:000 | DONE cmt | na 16 16 |        |             |                 ; Number conversion has failed, which means the user screwed up,
2450:000 | DONE cmt | na 16 16 |        |             |                 ; so complain and abort
2451:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print the offending string first
2452:000 | DONE ins | na 16 16 | 006b03 | a9 b5 6d    |                 lda.# 006db5         ; "Unknown word"
2453:000 | DONE ins | na 16 16 | 006b06 | 4c 66 6b    |                 jmp 006b66           
2454:000 | DONE wsp | na 16 16 |        |             |
2455:000 | DONE lbl | na 16 16 | 006b09 |             | compex_got_name_token                
2456:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
2457:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down. This is a quicker
2458:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
2459:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
2460:000 | DONE ins | na 16 16 | 006b09 | 84 16       |                 sty.d 000216         
2461:000 | DONE ins | na 16 16 | 006b0b | c8          |                 iny                  
2462:000 | DONE ins | na 16 16 | 006b0c | c8          |                 iny                  
2463:000 | DONE ins | na 16 16 | 006b0d | c8          |                 iny                  
2464:000 | DONE ins | na 16 16 | 006b0e | c8          |                 iny                  
2465:000 | DONE ins | na 16 16 | 006b0f | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
2466:000 | DONE ins | na 16 16 | 006b12 | a8          |                 tay                  ; xt is TOS
2467:000 | DONE wsp | na 16 16 |        |             |
2468:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
2469:000 | DONE ins | na 16 16 | 006b13 | a5 14       |                 lda.d 000214         
2470:000 | DONE ins | na 16 16 | 006b15 | d0 14       |                 bne 006b2b           
2471:000 | DONE wsp | na 16 16 |        |             |
2472:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
2473:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
2474:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
2475:000 | DONE ins | na 16 16 | 006b17 | b2 16       |                 lda.di 000216        
2476:000 | DONE ins | na 16 16 | 006b19 | eb          |                 xba                  ; flags are MSB
2477:000 | DONE ins | na 16 16 | 006b1a | 29 04 00    |                 and.# CO             ; mask everything but Compile Only bit
2478:000 | DONE ins | na 16 16 | 006b1d | f0 06       |                 beq 006b25           
2479:000 | DONE wsp | na 16 16 |        |             |
2480:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
2481:000 | DONE ins | na 16 16 | 006b1f | a9 a7 6c    |                 lda.# 006ca7         
2482:000 | DONE ins | na 16 16 | 006b22 | 4c 66 6b    |                 jmp 006b66           
2483:000 | DONE wsp | na 16 16 |        |             |
2484:000 | DONE lbl | na 16 16 | 006b25 |             | compex_interpret                     
2485:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
2486:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
2487:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
2488:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
2489:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
2490:000 | DONE ins | na 16 16 | 006b25 | 20 6b 64    |                 jsr 00646b           
2491:000 | DONE wsp | na 16 16 |        |             |
2492:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
2493:000 | DONE ins | na 16 16 | 006b28 | 4c f4 6a    |                 jmp 006af4           
2494:000 | DONE wsp | na 16 16 |        |             |
2495:000 | DONE lbl | na 16 16 | 006b2b |             | compex_compile                       
2496:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
2497:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
2498:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
2499:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
2500:000 | DONE ins | na 16 16 | 006b2b | b2 16       |                 lda.di 000216        
2501:000 | DONE ins | na 16 16 | 006b2d | eb          |                 xba                  ; flags are MSB
2502:000 | DONE ins | na 16 16 | 006b2e | 29 02 00    |                 and.# IM             ; Mask all but IM bit
2503:000 | DONE ins | na 16 16 | 006b31 | d0 f2       |                 bne 006b25           ; IMMEDIATE word, execute right now
2504:000 | DONE wsp | na 16 16 |        |             |
2505:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
2506:000 | DONE ins | na 16 16 | 006b33 | 20 d1 62    |                 jsr 0062d1           
2507:000 | DONE wsp | na 16 16 |        |             |
2508:000 | DONE ins | na 16 16 | 006b36 | 4c f4 6a    |                 jmp 006af4           
2509:000 | DONE wsp | na 16 16 |        |             |
2510:000 | DONE lbl | na 16 16 | 006b39 |             | compex_line_done                     
2511:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
2512:000 | DONE ins | na 16 16 | 006b39 | b4 02       |                 ldy.dx 02            
2513:000 | DONE ins | na 16 16 | 006b3b | e8          |                 inx                  
2514:000 | DONE ins | na 16 16 | 006b3c | e8          |                 inx                  
2515:000 | DONE ins | na 16 16 | 006b3d | e8          |                 inx                  
2516:000 | DONE ins | na 16 16 | 006b3e | e8          |                 inx                  
2517:000 | DONE wsp | na 16 16 |        |             |
2518:000 | DONE ins | na 16 16 | 006b3f | 60          |                 rts                  
2519:000 | DONE wsp | na 16 16 |        |             |
2520:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2521:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
2522:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
2523:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
2524:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
2525:000 | DONE cmt | na 16 16 |        |             | ;
2526:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
2527:000 | DONE cmt | na 16 16 |        |             | ;
2528:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
2529:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
2530:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos
2531:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
2532:000 | DONE wsp | na 16 16 |        |             |
2533:000 | DONE dir | na 16 16 |        |             |         .!a16                        ; paranoid
2534:000 | DONE lbl | na 16 16 | 006b40 |             | cmpl_word                            
2535:000 | DONE ins | na 16 16 | 006b40 | a9 00 00    |                 lda.# 0000           ; zero value as a flag, compile word only
2536:000 | DONE ins | na 16 16 | 006b43 | 80 08       |                 bra 006b4d           
2537:000 | DONE lbl | na 16 16 | 006b45 |             | cmpl_subroutine                      
2538:000 | DONE ins | na 16 16 | 006b45 | a9 20 00    |                 lda.# 0020           ; compile "JSR" opcode first
2539:000 | DONE ins | na 16 16 | 006b48 | 80 03       |                 bra 006b4d           
2540:000 | DONE lbl | na 16 16 | 006b4a |             | cmpl_jump                            
2541:000 | DONE ins | na 16 16 | 006b4a | a9 4c 00    |                 lda.# 004c           ; compile "JMP", fall through to cmpl_common
2542:000 | DONE lbl | na 16 16 | 006b4d |             | cmpl_common                          
2543:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
2544:000 | DONE ins | na 16 16 | 006b4d | 84 06       |                 sty.d 000206         
2545:000 | DONE wsp | na 16 16 |        |             |
2546:000 | DONE ins | na 16 16 | 006b4f | a8          |                 tay                  ; force flag check
2547:000 | DONE ins | na 16 16 | 006b50 | f0 08       |                 beq 006b5a           ; came in through cmpl_word, just compile body
2548:000 | DONE wsp | na 16 16 |        |             |
2549:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
2550:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
2551:000 | DONE ins | na 16 16 | 006b52 | e2 20       |                 sep 20               
2551:001 | DONE ctl | na  8 16 |        |             |         .!a8
2552:000 | DONE ins | na  8 16 | 006b54 | 92 00       |                 sta.di 000200        ; STA (CP)
2553:000 | DONE ins | na  8 16 | 006b56 | c2 20       |                 rep 20               
2553:001 | DONE ctl | na 16 16 |        |             |         .!a16
2554:000 | DONE ins | na 16 16 | 006b58 | e6 00       |                 inc.d 000200         ; fall through to cmpl_body
2555:000 | DONE lbl | na 16 16 | 006b5a |             | cmpl_body                            
2556:000 | DONE ins | na 16 16 | 006b5a | 7a          |                 ply                  ; the return address we'll need later
2557:000 | DONE wsp | na 16 16 |        |             |
2558:000 | DONE ins | na 16 16 | 006b5b | 68          |                 pla                  ; next value on stack is the word to compile
2559:000 | DONE ins | na 16 16 | 006b5c | 92 00       |                 sta.di 000200        ; this is a quicker version of , ("comma")
2560:000 | DONE ins | na 16 16 | 006b5e | e6 00       |                 inc.d 000200         
2561:000 | DONE ins | na 16 16 | 006b60 | e6 00       |                 inc.d 000200         
2562:000 | DONE wsp | na 16 16 |        |             |
2563:000 | DONE ins | na 16 16 | 006b62 | 5a          |                 phy                  ; make sure we can get back home
2564:000 | DONE wsp | na 16 16 |        |             |
2565:000 | DONE ins | na 16 16 | 006b63 | a4 06       |                 ldy.d 000206         ; restore Data Stack
2566:000 | DONE wsp | na 16 16 |        |             |
2567:000 | DONE ins | na 16 16 | 006b65 | 60          |                 rts                  
2568:000 | DONE wsp | na 16 16 |        |             |
2569:000 | DONE wsp | na 16 16 |        |             |
2570:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2571:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
2572:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
2573:000 | DONE lbl | na 16 16 | 006b66 |             | error                                
2574:000 | DONE ins | na 16 16 | 006b66 | 20 6c 6b    |                 jsr 006b6c           
2575:000 | DONE ins | na 16 16 | 006b69 | 4c 97 60    |                 jmp 006097           
2576:000 | DONE wsp | na 16 16 |        |             |
2577:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2578:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
2579:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
2580:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
2581:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
2582:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
2583:000 | DONE lbl | na 16 16 | 006b6c |             | print_string                         
2584:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2585:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2586:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
2587:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
2588:000 | DONE ins | na 16 16 | 006b6c | da          |                 phx                  
2589:000 | DONE ins | na 16 16 | 006b6d | aa          |                 tax                  ; x16 contains address of string
2590:000 | DONE lbl | na 16 16 | 006b6e |             | @                                    
2591:000 | DONE ins | na 16 16 | 006b6e | e2 20       |                 sep 20               
2591:001 | DONE ctl | na  8 16 |        |             |         .!a8
2592:000 | DONE ins | na  8 16 | 006b70 | bd 00 00    |                 lda.x 0000           ; LDA $0000,X
2593:000 | DONE ins | na  8 16 | 006b73 | f0 06       |                 beq 006b7b           
2594:000 | DONE ins | na  8 16 | 006b75 | 20 36 60    |                 jsr 006036           
2595:000 | DONE ins | na  8 16 | 006b78 | e8          |                 inx                  
2596:000 | DONE ins | na  8 16 | 006b79 | 80 f3       |                 bra 006b6e           
2597:000 | DONE wsp | na  8 16 |        |             |
2598:000 | DONE lbl | na  8 16 | 006b7b |             | print_string_done                    
2599:000 | DONE ins | na  8 16 | 006b7b | a9 0a       |                 lda.# AscLF          ; should be CR on some systems
2600:000 | DONE ins | na  8 16 | 006b7d | 20 36 60    |                 jsr 006036           
2601:000 | DONE ins | na  8 16 | 006b80 | c2 20       |                 rep 20               
2601:001 | DONE ctl | na 16 16 |        |             |         .!a16
2602:000 | DONE ins | na 16 16 | 006b82 | fa          |                 plx                  
2603:000 | DONE ins | na 16 16 | 006b83 | 60          |                 rts                  
2604:000 | DONE wsp | na 16 16 |        |             |
2605:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2606:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
2607:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
2608:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
2609:000 | DONE lbl | na 16 16 | 006b84 |             | byte_to_ascii                        
2610:000 | DONE ins | na 16 16 | 006b84 | 48          |                 pha                  
2611:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
2612:000 | DONE ins | na 16 16 | 006b85 | 4a          |                 lsr.a                
2613:000 | DONE ins | na 16 16 | 006b86 | 4a          |                 lsr.a                
2614:000 | DONE ins | na 16 16 | 006b87 | 4a          |                 lsr.a                
2615:000 | DONE ins | na 16 16 | 006b88 | 4a          |                 lsr.a                
2616:000 | DONE ins | na 16 16 | 006b89 | 20 8d 6b    |                 jsr 006b8d           
2617:000 | DONE wsp | na 16 16 |        |             |
2618:000 | DONE ins | na 16 16 | 006b8c | 68          |                 pla                  
2619:000 | DONE wsp | na 16 16 |        |             |
2620:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
2621:000 | DONE wsp | na 16 16 |        |             |
2622:000 | DONE wsp | na 16 16 |        |             |
2623:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2624:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
2625:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
2626:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
2627:000 | DONE lbl | na 16 16 | 006b8d |             | nibble_to_ascii                      
2628:000 | DONE ins | na 16 16 | 006b8d | 29 0f 00    |                 and.# 000f           
2629:000 | DONE ins | na 16 16 | 006b90 | 09 30 00    |                 ora.# 30             
2630:000 | DONE ins | na 16 16 | 006b93 | c9 3a 00    |                 cmp.# 003a           ; '9' + 1
2631:000 | DONE ins | na 16 16 | 006b96 | 90 03       |                 bcc 006b9b           
2632:000 | DONE ins | na 16 16 | 006b98 | 69 06 00    |                 adc.# 0006           
2633:000 | DONE lbl | na 16 16 | 006b9b |             | @                                    
2634:000 | DONE ins | na 16 16 | 006b9b | 20 36 60    |                 jsr 006036           
2635:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2636:000 | DONE ins | na 16 16 | 006b9e | 60          |                 rts                  
2637:000 | DONE wsp | na 16 16 |        |             |
2638:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2639:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
2640:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
2641:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
2642:000 | DONE lbl | na 16 16 | 006b9f |             | string_to_lowercase                  
2643:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
2644:000 | DONE ins | na 16 16 | 006b9f | 60          |                 rts                  
2645:000 | DONE wsp | na 16 16 |        |             |
2646:000 | DONE wsp | na 16 16 |        |             |
2647:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2648:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
2649:000 | DONE wsp | na 16 16 |        |             |
2650:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
2651:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
2652:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
2653:000 | DONE lbl | na 16 16 | 006ba0 |             | hi-start                             
2654:000 | DONE dir | na 16 16 | 006ba0 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
2654:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
2654:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
2654:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
2654:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
2654:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
2655:000 | DONE dir | na 16 16 | 006bc3 | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
2655:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
2655:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
2655:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
2655:000 | DONE dir | na 16 16 |        |             |                 31 36 2e 20 46 65 62 20  --  1 6 .   F e b  
2655:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
2656:000 | DONE dir | na 16 16 | 006be8 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
2656:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
2656:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
2656:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
2656:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
2656:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
2656:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
2656:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
2657:000 | DONE dir | na 16 16 | 006c1b | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
2657:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
2657:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
2657:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
2657:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
2657:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
2657:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
2657:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
2658:000 | DONE dir | na 16 16 | 006c4f | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
2658:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
2658:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
2658:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
2658:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
2659:000 | DONE lbl | na 16 16 | 006c6b |             | hi-end                               
2660:000 | DONE wsp | na 16 16 |        |             |
2661:000 | DONE wsp | na 16 16 |        |             |
2662:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2663:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
2664:000 | DONE wsp | na 16 16 |        |             |
2665:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
2665:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2665:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
2665:003 | DONE cmt | na 16 16 |        |             | ; This version:  15. Feb 2017
2665:004 | DONE wsp | na 16 16 |        |             |
2665:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
2665:006 | DONE wsp | na 16 16 |        |             |
2665:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2665:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
2665:009 | DONE wsp | na 16 16 |        |             |
2665:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
2665:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
2665:012 | DONE cmt | na 16 16 |        |             | ; character
2665:013 | DONE wsp | na 16 16 |        |             |
2665:014 | DONE lbl | na 16 16 | 006c6b |             | s_ok                                 
2665:015 | DONE dir | na 16 16 | 006c6b | (4 bytes)   |         .byte 20, 6f, 6b, 0          ; note space at beginning
2665:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
2665:016 | DONE lbl | na 16 16 | 006c6f |             | s_compiled                           
2665:017 | DONE dir | na 16 16 | 006c6f | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
2665:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
2665:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
2665:018 | DONE wsp | na 16 16 |        |             |
2665:019 | DONE wsp | na 16 16 |        |             |
2665:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2665:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
2665:022 | DONE wsp | na 16 16 |        |             |
2665:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
2665:024 | DONE wsp | na 16 16 |        |             |
2665:025 | DONE lbl | na 16 16 | 006c79 |             | es_allot                             
2665:026 | DONE dir | na 16 16 | 006c79 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
2665:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
2665:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
2665:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
2665:027 | DONE lbl | na 16 16 | 006c8d |             | es_channel                           
2665:028 | DONE dir | na 16 16 | 006c8d | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
2665:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
2665:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
2665:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
2665:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
2665:029 | DONE lbl | na 16 16 | 006ca7 |             | es_componly                          
2665:030 | DONE dir | na 16 16 | 006ca7 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
2665:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
2665:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
2665:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
2665:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
2665:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
2665:031 | DONE lbl | na 16 16 | 006cc8 |             | es_defer                             
2665:032 | DONE dir | na 16 16 | 006cc8 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
2665:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
2665:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
2665:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
2665:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
2665:033 | DONE lbl | na 16 16 | 006ce5 |             | es_divzero                           
2665:034 | DONE dir | na 16 16 | 006ce5 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
2665:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
2665:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
2665:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
2665:035 | DONE lbl | na 16 16 | 006cf6 |             | es_error                             
2665:036 | DONE dir | na 16 16 | 006cf6 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
2665:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
2665:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
2665:037 | DONE lbl | na 16 16 | 006d02 |             | es_intonly                           
2665:038 | DONE dir | na 16 16 | 006d02 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
2665:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
2665:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
2665:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
2665:039 | DONE lbl | na 16 16 | 006d18 |             | es_noname                            
2665:040 | DONE dir | na 16 16 | 006d18 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
2665:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
2665:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
2665:040 | DONE dir | na 16 16 |        |             |                                          -- 
2665:041 | DONE lbl | na 16 16 | 006d28 |             | es_radix                             
2665:042 | DONE dir | na 16 16 | 006d28 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
2665:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
2665:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
2665:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
2665:043 | DONE lbl | na 16 16 | 006d3f |             | es_refill1                           
2665:044 | DONE dir | na 16 16 | 006d3f | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
2665:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
2665:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
2665:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
2665:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
2665:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
2665:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
2665:045 | DONE lbl | na 16 16 | 006d6d |             | es_refill2                           
2665:046 | DONE dir | na 16 16 | 006d6d | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
2665:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
2665:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
2665:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
2665:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
2665:046 | DONE dir | na 16 16 |        |             |                                          -- 
2665:047 | DONE lbl | na 16 16 | 006d8d |             | es_state                             
2665:048 | DONE dir | na 16 16 | 006d8d | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
2665:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
2665:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
2665:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
2665:048 | DONE dir | na 16 16 |        |             |                                          -- 
2665:049 | DONE lbl | na 16 16 | 006da5 |             | es_underflow                         
2665:050 | DONE dir | na 16 16 | 006da5 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
2665:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
2665:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
2665:050 | DONE dir | na 16 16 |        |             |                                          -- 
2665:051 | DONE lbl | na 16 16 | 006db5 |             | es_syntax                            
2665:052 | DONE dir | na 16 16 | 006db5 | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
2665:052 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
2665:052 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
2665:052 | DONE dir | na 16 16 |        |             |                                          -- 
2665:053 | DONE wsp | na 16 16 |        |             |
2665:054 | DONE wsp | na 16 16 |        |             |
2665:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2665:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
2665:057 | DONE wsp | na 16 16 |        |             |
2665:058 | DONE lbl | na 16 16 | 006dc5 |             | vt100_page                           
2665:059 | DONE dir | na 16 16 | 006dc5 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  ; clear screen
2665:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
2665:060 | DONE lbl | na 16 16 | 006dca |             | vt100_home                           
2665:061 | DONE dir | na 16 16 | 006dca | (4 bytes)   |         .byte AscESC, 5b, 48, 0      ; cursor home
2665:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
2665:062 | DONE wsp | na 16 16 |        |             |
2665:063 | DONE wsp | na 16 16 |        |             |
2665:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2665:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
2665:066 | DONE wsp | na 16 16 |        |             |
2665:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
2665:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
2665:069 | DONE wsp | na 16 16 |        |             |
2665:070 | DONE lbl | na 16 16 | 006dce |             | tests_prev_cmd                       
2665:071 | DONE dir | na 16 16 | 006dce | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
2665:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
2665:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
2665:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
2665:072 | DONE lbl | na 16 16 | 006de1 |             | tests_next_cmd                       
2665:073 | DONE dir | na 16 16 | 006de1 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
2665:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
2665:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
2665:074 | DONE wsp | na 16 16 |        |             |
2665:075 | DONE wsp | na 16 16 |        |             |
2665:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2665:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
2665:078 | DONE wsp | na 16 16 |        |             |
2665:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
2665:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
2665:081 | DONE wsp | na 16 16 |        |             |
2665:082 | DONE lbl | na 16 16 | 006df0 |             | alphastr                             
2665:083 | DONE dir | na 16 16 | 006df0 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
2665:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
2665:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
2665:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
2665:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
2665:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
2666:000 | DONE wsp | na 16 16 |        |             |
2667:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2668:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
2669:000 | DONE wsp | na 16 16 |        |             |
2670:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
2671:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
2672:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
2673:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
2674:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
2675:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2676:000 | DONE wsp | na 16 16 |        |             |
2677:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
2678:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2679:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
2680:000 | DONE cmt | na 16 16 |        |             |                 ; xba
2681:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2682:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2683:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
2684:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2685:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
2686:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
2687:000 | DONE wsp | na 16 16 |        |             |
2688:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
2689:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
2690:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
2691:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2692:000 | DONE wsp | na 16 16 |        |             |
2693:000 | DONE wsp | na 16 16 |        |             |
2694:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2695:000 | DONE cmt | na 16 16 |        |             | ; END
2696:000 | DONE wsp | na 16 16 |        |             |
2697:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 00621d
- accept_eol                  : 006215
- accept_loop                 : 0061ca
- accept_nonzero              : 0061bd
- allot_done                  : 00625d
- allot_error                 : 00624c
- allot_minus                 : 006252
- allot_real_gone             : 00625f
- alphastr                    : 006df0
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006b84
- char_got_char               : 0062bc
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 006b5a
- cmpl_common                 : 006b4d
- cmpl_jump                   : 006b4a
- cmpl_subroutine             : 006b45
- cmpl_word                   : 006b40
- co                          : 000004
- compex                      : 006af4
- compex_compile              : 006b2b
- compex_got_name_token       : 006b09
- compex_interpret            : 006b25
- compex_line_done            : 006b39
- compex_loop                 : 006af4
- compile_as_code             : 0062d1
- compile_as_jump             : 0062d1
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 00631f
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 006ae6
- dots_done                   : 006404
- dots_loop                   : 0063ea
- dots_not_empty              : 0063e4
- dovar                       : 006adf
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 006415
- dump_done                   : 00642a
- dump_line_loop              : 00640f
- error                       : 006b66
- es_allot                    : 006c79
- es_channel                  : 006c8d
- es_componly                 : 006ca7
- es_defer                    : 006cc8
- es_divzero                  : 006ce5
- es_error                    : 006cf6
- es_intonly                  : 006d02
- es_noname                   : 006d18
- es_radix                    : 006d28
- es_refill1                  : 006d3f
- es_refill2                  : 006d6d
- es_state                    : 006d8d
- es_syntax                   : 006db5
- es_underflow                : 006da5
- execute_ip                  : 006468
- find-name_all_chars         : 0064a4
- find-name_char_nomatcnt_8   : 0064a0
- find-name_chars             : 006495
- find-name_done              : 0064ca
- find-name_failure_16        : 0064c7
- find-name_loop              : 006480
- find-name_next_entry        : 006489
- find-name_success           : 0064c1
- get_chr                     : 006047
- get_chr_wait                : 00604c
- have_chr?                   : 006056
- hi-end                      : 006c6b
- hi-start                    : 006ba0
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- literal_rt                  : 0064fb
- max_drop                    : 006516
- max_nip                     : 006518
- max_no_ov                   : 006514
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 006529
- min_nip                     : 00652b
- min_no_ov                   : 006527
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 006b8d
- nt_2drop                    : 006a91
- nt_2dup                     : 0068a8
- nt_abort                    : 006747
- nt_abs                      : 0068b4
- nt_accept                   : 006a46
- nt_allot                    : 00687a
- nt_and                      : 00696e
- nt_base                     : 0067e9
- nt_bell                     : 0066fa
- nt_bl                       : 006790
- nt_bye                      : 0066ca
- nt_c-comma                  : 006979
- nt_c-fetch                  : 006983
- nt_c-store                  : 00698d
- nt_cells                    : 006805
- nt_char                     : 00694d
- nt_cold                     : 0066d5
- nt_colon                    : 006871
- nt_comma                    : 006a3d
- nt_compile-only             : 006821
- nt_compilecomma             : 006858
- nt_constant                 : 0068f2
- nt_count                    : 00673a
- nt_cr                       : 006786
- nt_create                   : 006887
- nt_decimal                  : 006706
- nt_depth                    : 0068e5
- nt_dot                      : 0067d5
- nt_dotparen                 : 0067bf
- nt_dots                     : 0067b5
- nt_drop                     : 006ad3
- nt_dump                     : 0066ee
- nt_dup                      : 006ac8
- nt_evaluate                 : 0067f5
- nt_execute                  : 006a76
- nt_false                    : 0069c7
- nt_fetch                    : 006aaa
- nt_find-name                : 0069fb
- nt_here                     : 006a85
- nt_hex                      : 006715
- nt_immediate                : 006835
- nt_invert                   : 00693f
- nt_leftbracket              : 00684f
- nt_literal                  : 006812
- nt_max                      : 006926
- nt_min                      : 00691b
- nt_minus                    : 0069a1
- nt_name-int                 : 006776
- nt_name-string              : 006895
- nt_negate                   : 006931
- nt_nip                      : 006a60
- nt_one                      : 0069e9
- nt_one-minus                : 0069b3
- nt_one-plus                 : 0069bd
- nt_or                       : 006964
- nt_over                     : 006a9e
- nt_pad                      : 0067de
- nt_page                     : 00672e
- nt_parse                    : 006754
- nt_parse-name               : 006a1a
- nt_plus                     : 0069aa
- nt_question                 : 00676d
- nt_quit                     : 006761
- nt_refill                   : 006a0c
- nt_rightbracket             : 006846
- nt_rot                      : 006a6b
- nt_semicolon                : 006868
- nt_source                   : 0068d7
- nt_source-id                : 006a2c
- nt_space                    : 0067a8
- nt_spaces                   : 00679a
- nt_state                    : 0068bf
- nt_store                    : 006ab3
- nt_swap                     : 006abc
- nt_tick                     : 006912
- nt_to-in                    : 0068cc
- nt_true                     : 0069d4
- nt_tuck                     : 006a54
- nt_two                      : 0069e0
- nt_two-star                 : 006997
- nt_type                     : 0067c9
- nt_unused                   : 006720
- nt_variable                 : 006902
- nt_words                    : 0066e1
- nt_xor                      : 006959
- nt_zero                     : 0069f2
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 00658b
- parse-name_found            : 00659f
- parse-name_loop             : 00657e
- parse_found_delimiter       : 0065cb
- parse_loop                  : 0065be
- parse_reached_eol           : 0065cf
- physicalram                 : 007fff
- piblen                      : 000210
- print_string                : 006b6c
- print_string_done           : 006b7b
- put_chr                     : 006036
- put_chr_wait                : 00603c
- pw                          : 000008
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 00660a
- refill_src_not_kbd          : 006601
- reset_hardware              : 006000
- s_compiled                  : 006c6f
- s_ok                        : 006c6b
- spaces_done                 : 00663d
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- string_to_lowercase         : 006b9f
- tests_next_cmd              : 006de1
- tests_prev_cmd              : 006dce
- tick_have_nt                : 0061aa
- tick_have_word              : 00619e
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 00667b
- type_loop                   : 00666f
- vt100_home                  : 006dca
- vt100_page                  : 006dc5
- words_loop                  : 0066a5
- workword                    : 00021e
- xt_2drop                    : 006180
- xt_2dup                     : 006187
- xt_abort                    : 006097
- xt_abs                      : 0061ae
- xt_accept                   : 0061b7
- xt_allot                    : 00623b
- xt_and                      : 006264
- xt_base                     : 00626b
- xt_bell                     : 006273
- xt_bl                       : 00627a
- xt_bye                      : 006282
- xt_c-comma                  : 006286
- xt_c-fetch                  : 006294
- xt_c-store                  : 0062a0
- xt_char                     : 0062b0
- xt_cold                     : 006063
- xt_colon                    : 0060f3
- xt_comma                    : 0060e7
- xt_compile-only             : 0062c8
- xt_compilecomma             : 0062d1
- xt_constant                 : 0062e4
- xt_count                    : 0062fe
- xt_cr                       : 00630d
- xt_create                   : 006314
- xt_decimal                  : 006387
- xt_depth                    : 00638d
- xt_dot                      : 00639c
- xt_dotparen                 : 0063b2
- xt_dots                     : 0063c0
- xt_drop                     : 006408
- xt_dump                     : 00640d
- xt_dup                      : 006434
- xt_evaluate                 : 006439
- xt_execute                  : 00646b
- xt_fetch                    : 00613f
- xt_find-name                : 006476
- xt_here                     : 0064dc
- xt_hex                      : 0064e3
- xt_immediate                : 0064cd
- xt_invert                   : 0064d6
- xt_leftbracket              : 006144
- xt_literal                  : 0064e9
- xt_max                      : 006508
- xt_min                      : 00651b
- xt_minus                    : 006155
- xt_name-int                 : 00652e
- xt_name-string              : 006537
- xt_negate                   : 006548
- xt_nip                      : 00654f
- xt_one                      : 006168
- xt_one-minus                : 006170
- xt_one-plus                 : 006172
- xt_or                       : 006552
- xt_over                     : 006559
- xt_pad                      : 006560
- xt_page                     : 00656c
- xt_parse                    : 0065ab
- xt_parse-name               : 006579
- xt_plus                     : 00614d
- xt_question                 : 00612e
- xt_quit                     : 00609f
- xt_refill                   : 0065de
- xt_rightbracket             : 006147
- xt_rot                      : 006611
- xt_semicolon                : 006115
- xt_source                   : 00661a
- xt_source-id                : 006627
- xt_space                    : 00662e
- xt_spaces                   : 006635
- xt_state                    : 006642
- xt_store                    : 006135
- xt_swap                     : 00664a
- xt_tick                     : 006192
- xt_to-in                    : 0060df
- xt_true                     : 006650
- xt_tuck                     : 006658
- xt_two                      : 006174
- xt_two-star                 : 00617c
- xt_type                     : 006661
- xt_unused                   : 006682
- xt_variable                 : 00668e
- xt_words                    : 00669b
- xt_xor                      : 0066c3
- xt_zero                     : 006160
- z_2drop                     : 006186
- z_2dup                      : 006191
- z_abort                     : 0060de
- z_abs                       : 0061b6
- z_accept                    : 00623a
- z_allot                     : 006263
- z_and                       : 00626a
- z_base                      : 006272
- z_bell                      : 006279
- z_bl                        : 006281
- z_bye                       : 006285
- z_c-comma                   : 006293
- z_c-fetch                   : 00629f
- z_c-store                   : 0062af
- z_char                      : 0062c7
- z_cold                      : 0060de
- z_colon                     : 006114
- z_comma                     : 0060f2
- z_compile-only              : 0062d0
- z_compilecomma              : 0062e3
- z_constant                  : 0062fd
- z_count                     : 00630c
- z_cr                        : 006313
- z_create                    : 006386
- z_decimal                   : 00638c
- z_depth                     : 00639b
- z_dot                       : 0063b1
- z_dotparen                  : 0063bf
- z_dots                      : 006407
- z_drop                      : 00640c
- z_dump                      : 006433
- z_dup                       : 006438
- z_evaluate                  : 006467
- z_execute                   : 006475
- z_fetch                     : 006143
- z_find-name                 : 0064cc
- z_here                      : 0064e2
- z_hex                       : 0064e8
- z_immediate                 : 0064d5
- z_invert                    : 0064db
- z_leftbracket               : 006146
- z_literal                   : 0064fa
- z_max                       : 00651a
- z_min                       : 00652d
- z_minus                     : 00615f
- z_name-int                  : 006536
- z_name-string               : 006547
- z_negate                    : 00654e
- z_nip                       : 006551
- z_one                       : 00616f
- z_one-minus                 : 006171
- z_one-plus                  : 006173
- z_or                        : 006558
- z_over                      : 00655f
- z_pad                       : 00656b
- z_page                      : 006578
- z_parse                     : 0065dd
- z_parse-name                : 0065dd
- z_plus                      : 006154
- z_question                  : 006134
- z_quit                      : 0060de
- z_refill                    : 006610
- z_rightbracket              : 00614c
- z_rot                       : 006619
- z_semicolon                 : 00612d
- z_source                    : 006626
- z_source-id                 : 00662d
- z_space                     : 006634
- z_spaces                    : 006641
- z_state                     : 006649
- z_store                     : 00613e
- z_swap                      : 00664f
- z_tick                      : 0061ad
- z_to-in                     : 0060e6
- z_true                      : 006657
- z_tuck                      : 006660
- z_two                       : 00617b
- z_two-star                  : 00617f
- z_type                      : 006681
- z_unused                    : 00668d
- z_variable                  : 00669a
- z_words                     : 0066c2
- z_xor                       : 0066c9
- z_zero                      : 006167
