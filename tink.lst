A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 24. January 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Thu Feb  9 13:43:53 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.05044 seconds
Code origin: 006000
Bytes of machine code: 2609

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 09. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 ; start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 06. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate file kernel.tasm with symbols
  16:011 | DONE cmt | em  8  8 |        |             | ; prefixed with hw_ . No symbol with this prefix may be defined or used outside
  16:012 | DONE cmt | em  8  8 |        |             | ; of that file.
  16:013 | DONE wsp | em  8  8 |        |             |
  16:014 | DONE cmt | em  8  8 |        |             | ; The definitions for multitasking are preliminary and will probably
  16:015 | DONE cmt | em  8  8 |        |             | ; change
  16:016 | DONE wsp | em  8  8 |        |             |
  16:017 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:018 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:019 | DONE wsp | em  8  8 |        |             |
  16:020 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   ; start of available RAM for Dictionary
  16:021 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   ; end of installed RAM
  16:022 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   ; end of available RAM (single task mode)
  16:023 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   ; end of available RAM (multitask mode)
  16:024 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           ; buffer area start
  16:025 | DONE wsp | em  8  8 |        |             |
  16:026 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:027 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:028 | DONE wsp | em  8  8 |        |             |
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         ; maximum size for input buffers
  16:030 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         ; start of 256 byte input buffer 1
  16:031 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         ; start of 256 byte input buffer 2
  16:032 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         ; size of PAD, must be > &84
  16:033 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         ; distance from CP to PAD (holds number strings)
  16:034 | DONE wsp | em  8  8 |        |             |
  16:035 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:036 | DONE wsp | em  8  8 |        |             |
  16:037 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 ; single task Direct Page (DP) start
  16:038 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 ; multitask Stack (S) area start
  16:039 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 ; multitask Direct Page (DP) area start
  16:040 | DONE wsp | em  8  8 |        |             |
  16:041 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:042 | DONE wsp | em  8  8 |        |             |
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             ; single task Stack (S) start (bottom)
  16:044 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f0             ; initial Data Stack Pointer (X)
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:047 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:048 | DONE wsp | em  8  8 |        |             |
  16:049 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:050 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:051 | DONE wsp | em  8  8 |        |             |
  16:052 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      ; Compiler Pointer, 2 bytes
  16:053 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      ; Dictionary Pointer, 2 bytes
  16:054 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  ; Temporary DSP (X) storage, 2 bytes
  16:055 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  ; Temporary TOS (Y) storage, 2 bytes
  16:056 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  ; Address where output is constructed
  16:057 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  ; Input Source for SOURCE-ID
  16:058 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    ; Current Input Buffer, 7c00 or 7d00
  16:059 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } ; Length of current input buffer
  16:060 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } ; Length of previous input buffer
  16:061 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   ; Pointer to CIB (>IN in Forth)
  16:062 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  ; STATE: 1 compile, 0 interpret
  16:063 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   ; Temporary storage, usually address
  16:064 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   ; Temporary storage, usually counter
  16:065 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   ; Temporary storage
  16:066 | DONE wsp | em  8  8 |        |             |
  16:067 | DONE wsp | em  8  8 |        |             |
  16:068 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:069 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:070 | DONE wsp | em  8  8 |        |             |
  16:071 | DONE cmt | em  8  8 |        |             | ; ASCII character set
  16:072 | DONE wsp | em  8  8 |        |             |
  16:073 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              ; break (Control-C) ASCII character
  16:074 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ; ACSCII bell sound
  16:075 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              ; backspace ASCII character
  16:076 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              ; line feed ASCII character
  16:077 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              ; carriage return ASCII character
  16:078 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ; ASCII CNTR-n (for next command)
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ; ASCII CNTR-p (for previous command)
  16:080 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              ; Escape ASCII character
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              ; space ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              ; DEL ASCII character
  16:083 | DONE wsp | em  8  8 |        |             |
  16:084 | DONE cmt | em  8  8 |        |             | ; Dictionary flags
  16:085 | DONE wsp | em  8  8 |        |             |
  16:086 | DONE dir | em  8  8 |        |             |         .equ PW %10000000            ; Primitive (Native) Word
  16:087 | DONE dir | em  8  8 |        |             |         .equ CO %01000000            ; Compile Only
  16:088 | DONE dir | em  8  8 |        |             |         .equ IM %00100000            ; Immediate Word
  16:089 | DONE dir | em  8  8 |        |             |         .equ NC %00010000            ; Native (inline) Compile
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 29. Jan 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           ; 19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           ; Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           ; Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           ; Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           ; Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           ; Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           ; Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           ; Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           ; Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           ; Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           ; Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           ; Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           ; Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           ; Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           ; Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           ; Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           ; Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           ; Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           ; System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           ; Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           ; Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           ; Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           ; Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           ; Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           ; Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           ; UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           ; UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           ; Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           ; Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           ; Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           ; Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           ; Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           ; Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           ; Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           ; Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           ; Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           ; Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           ; Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           ; Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           ; Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           ; Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           ; Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           ; Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          ; UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          ; UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          ; UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          ; UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          ; UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          ; UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          ; UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          ; UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:109 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:110 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:111 | DONE wsp | na  8 16 |        |             |
  23:112 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           ; UART Interrupt Enable Register (UIER)
  23:113 | DONE wsp | na  8 16 |        |             |
  23:114 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            ; Ensure A15/AMS are output
  23:115 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           ; Port 4 Data Direction Register (PDD4)
  23:116 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           ; Select bank 0 (Port 4 Data Register, PD4)
  23:117 | DONE wsp | na  8 16 |        |             |
  23:118 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      ; Set UART0 to use timer 3
  23:119 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           ; Timer Control Register (TCR)
  23:120 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    ; And set baud rate
  23:121 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           ; Timer 3 Counter Low (T3CL)
  23:122 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:123 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           ; Timer 3 Counter High (T3CH)
  23:124 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             ; Enable timer 3 (1<<3)
  23:125 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           ; Timer Enable Register (TER)
  23:126 | DONE wsp | na  8 16 |        |             |
  23:127 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      ; Set UART0 for 8-N-1
  23:128 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           ; UART 0 Control/Status Register (ACSR0)
  23:129 | DONE wsp | na  8 16 |        |             |
  23:130 | DONE ins | na  8 16 | 00602d | 4c 60 60    |                 jmp 006060           ; we return with A as 8 bits
  23:131 | DONE wsp | na  8 16 |        |             |
  23:132 | DONE wsp | na  8 16 |        |             |
  23:133 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:134 | DONE cmt | na  8 16 |        |             | ; PUT_CHR
  23:135 | DONE cmt | na  8 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:136 | DONE cmt | na  8 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:137 | DONE lbl | na  8 16 | 006030 |             | put_chr                              
  23:138 | DONE ins | na  8 16 | 006030 | 08          |                 php                  ; save register sizes
  23:139 | DONE ins | na  8 16 | 006031 | e2 20       |                 sep 20               
  23:140 | DONE ctl | na  8 16 |        |             |         .!a8
  23:141 | DONE ins | na  8 16 | 006033 | 48          |                 pha                  
  23:142 | DONE ins | na  8 16 | 006034 | a9 02       |                 lda.# 02             ; (1<<1)
  23:143 | DONE wsp | na  8 16 |        |             |
  23:144 | DONE lbl | na  8 16 | 006036 |             | put_chr_wait                         
  23:145 | DONE ins | na  8 16 | 006036 | 2c 48 df    |                 bit 00df48           ; timer finished?
  23:146 | DONE ins | na  8 16 | 006039 | f0 fb       |                 beq 006036           
  23:147 | DONE wsp | na  8 16 |        |             |
  23:148 | DONE ins | na  8 16 | 00603b | 68          |                 pla                  
  23:149 | DONE ins | na  8 16 | 00603c | 8d 71 df    |                 sta 00df71           ; transmit char
  23:150 | DONE ins | na  8 16 | 00603f | 28          |                 plp                  
  23:151 | DONE wsp | na  8 16 |        |             |
  23:152 | DONE ins | na  8 16 | 006040 | 60          |                 rts                  
  23:153 | DONE wsp | na  8 16 |        |             |
  23:154 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:155 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:156 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:157 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:158 | DONE lbl | na  8 16 | 006041 |             | get_chr                              
  23:159 | DONE ins | na  8 16 | 006041 | 08          |                 php                  ; Save register sizes
  23:160 | DONE ins | na  8 16 | 006042 | e2 20       |                 sep 20               
  23:161 | DONE ctl | na  8 16 |        |             |         .!a8
  23:162 | DONE ins | na  8 16 | 006044 | a9 01       |                 lda.# 01             ; (1<<0)
  23:163 | DONE wsp | na  8 16 |        |             |
  23:164 | DONE lbl | na  8 16 | 006046 |             | get_chr_wait                         
  23:165 | DONE ins | na  8 16 | 006046 | 2c 48 df    |                 bit 00df48           ; Any data in RX buffer?
  23:166 | DONE ins | na  8 16 | 006049 | f0 fb       |                 beq 006046           ; No, keep waiting
  23:167 | DONE ins | na  8 16 | 00604b | ad 71 df    |                 lda 00df71           ; Yes, read it
  23:168 | DONE ins | na  8 16 | 00604e | 28          |                 plp                  
  23:169 | DONE wsp | na  8 16 |        |             |
  23:170 | DONE ins | na  8 16 | 00604f | 60          |                 rts                  
  23:171 | DONE wsp | na  8 16 |        |             |
  23:172 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:173 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:174 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:175 | DONE cmt | na  8 16 |        |             | ; some.
  23:176 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:177 | DONE wsp | na  8 16 |        |             |
  23:178 | DONE lbl | na  8 16 | 006050 |             | have_chr?                            
  23:179 | DONE ins | na  8 16 | 006050 | 48          |                 pha                  ; save caller's A
  23:180 | DONE ins | na  8 16 | 006051 | 08          |                 php                  
  23:181 | DONE ins | na  8 16 | 006052 | e2 20       |                 sep 20               
  23:182 | DONE ctl | na  8 16 |        |             |         .!a8
  23:183 | DONE ins | na  8 16 | 006054 | ad 48 df    |                 lda 00df48           ; read the status register
  23:184 | DONE ins | na  8 16 | 006057 | 28          |                 plp                  
  23:185 | DONE ins | na  8 16 | 006058 | 6a          |                 ror.a                ; shift hw_uart0r bit into carry
  23:186 | DONE ins | na  8 16 | 006059 | c2 20       |                 rep 20               
  23:187 | DONE ctl | na 16 16 |        |             |         .!a16
  23:188 | DONE ins | na 16 16 | 00605b | 68          |                 pla                  ; restore A
  23:189 | DONE ins | na 16 16 | 00605c | 60          |                 rts                  
  23:190 | DONE wsp | na 16 16 |        |             |
  23:191 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system. TODO determine how to compile this word
  37:000 | DONE wsp | na 16 16 |        |             |
  38:000 | DONE lbl | na 16 16 | 00605d |             | a_cold                               
  39:000 | DONE wsp | na 16 16 |        |             |
  40:000 | DONE ins | na 16 16 | 00605d | 4c 00 60    |                 jmp 006000           ; don't use JSR, jump back to start
  41:000 | DONE lbl | na 16 16 | 006060 |             | start                                
  42:000 | DONE ins | na 16 16 | 006060 | 18          |                 clc                  
  42:001 | DONE ins | na 16 16 | 006061 | fb          |                 xce                  
  42:002 | DONE ctl | na 16 16 |        |             |         .!native
  43:000 | DONE ins | na 16 16 | 006062 | c2 20       |                 rep 20               
  43:001 | DONE ctl | na 16 16 |        |             |         .!a16
  44:000 | DONE ins | na 16 16 | 006064 | c2 10       |                 rep 10               
  44:001 | DONE ctl | na 16 16 |        |             |         .!xy16
  45:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  46:000 | DONE wsp | na 16 16 |        |             |
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  49:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate PAD
  50:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  51:000 | DONE wsp | na 16 16 |        |             |
  52:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  53:000 | DONE cmt | na 16 16 |        |             |                 ; clean Dictionary, so we start off the Dictionary Pointer (DP)
  54:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  56:000 | DONE ins | na 16 16 | 006067 | a9 68 67    |                 lda.# 006768         
  57:000 | DONE ins | na 16 16 | 00606a | 85 02       |                 sta.d 000202         
  58:000 | DONE wsp | na 16 16 |        |             |
  59:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) starts after the Data Stack in
  60:000 | DONE ins | na 16 16 | 00606c | a9 00 03    |                 lda.# 000300         
  61:000 | DONE ins | na 16 16 | 00606f | 85 00       |                 sta.d 000200         
  62:000 | DONE wsp | na 16 16 |        |             |
  63:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  64:000 | DONE ins | na 16 16 | 006071 | a9 00 7c    |                 lda.# 007c00         ; start with first input buffer
  65:000 | DONE ins | na 16 16 | 006074 | 85 0c       |                 sta.d 00020c         
  66:000 | DONE wsp | na 16 16 |        |             |
  67:000 | DONE ins | na 16 16 | 006076 | 64 10       |                 stz.d 000210         ; previous input buffer is empty
  68:000 | DONE ins | na 16 16 | 006078 | 64 0a       |                 stz.d 00020a         ; SOURCE-ID is zero
  69:000 | DONE ins | na 16 16 | 00607a | 64 14       |                 stz.d 000214         ; STATE is zero (interpret)
  70:000 | DONE wsp | na 16 16 |        |             |
  71:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
  72:000 | DONE ins | na 16 16 | 00607c | a0 00 00    |                 ldy.# 0000           
  73:000 | DONE ins | na 16 16 | 00607f | a2 f0 02    |                 ldx.# 0002f0         
  74:000 | DONE wsp | na 16 16 |        |             |
  75:000 | DONE ins | na 16 16 | 006082 | 20 7b 63    |                 jsr 00637b           
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE
  78:000 | DONE ins | na 16 16 | 006085 | ca          |                 dex                  
  79:000 | DONE ins | na 16 16 | 006086 | ca          |                 dex                  
  80:000 | DONE ins | na 16 16 | 006087 | ca          |                 dex                  
  81:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  82:000 | DONE ins | na 16 16 | 006089 | a9 d8 67    |                 lda.# 0067d8         
  83:000 | DONE ins | na 16 16 | 00608c | 95 00       |                 sta.dx 00            ; Start address goes in NOS
  84:000 | DONE ins | na 16 16 | 00608e | a0 ca 00    |                 ldy.# 0000ca         ; length goes in TOS
  85:000 | DONE wsp | na 16 16 |        |             |
  86:000 | DONE ins | na 16 16 | 006091 | 20 b2 62    |                 jsr 0062b2           
  87:000 | DONE wsp | na 16 16 |        |             |
  88:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to ABORT
  89:000 | DONE wsp | na 16 16 |        |             |
  90:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  91:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 6+ bytes / 6+ cycles
  92:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  93:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  94:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
  95:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
  96:000 | DONE lbl | na 16 16 | 006094 |             | a_abort                              
  97:000 | DONE ins | na 16 16 | 006094 | c2 20       |                 rep 20               
  97:001 | DONE ctl | na 16 16 |        |             |         .!a16
  98:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
  99:000 | DONE ins | na 16 16 | 006096 | a0 00 00    |                 ldy.# 0000           
 100:000 | DONE ins | na 16 16 | 006099 | a2 f0 02    |                 ldx.# 0002f0         
 101:000 | DONE wsp | na 16 16 |        |             |
 102:000 | DONE wsp | na 16 16 |        |             |
 103:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 104:000 | DONE wsp | na 16 16 |        |             |
 105:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 106:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 107:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 108:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 109:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 110:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output.
 111:000 | DONE lbl | na 16 16 | 00609c |             | a_quit                               ; clear Return Stack
 112:000 | DONE ins | na 16 16 | 00609c | a9 ff 7f    |                 lda.# 007fff         
 113:000 | DONE ins | na 16 16 | 00609f | 1b          |                 tcs                  
 114:000 | DONE wsp | na 16 16 |        |             |
 115:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 116:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else
 117:000 | DONE ins | na 16 16 | 0060a0 | 9c e1 62    |                 stz 0062e1           
 118:000 | DONE wsp | na 16 16 |        |             |
 119:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 120:000 | DONE ins | na 16 16 | 0060a3 | 64 0a       |                 stz.d 00020a         
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 123:000 | DONE ins | na 16 16 | 0060a5 | 64 14       |                 stz.d 000214         
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE lbl | na 16 16 | 0060a7 |             | quit_get_line                        
 126:000 | DONE cmt | na 16 16 |        |             |                 ; empty current input buffer. Note the previous input line is
 127:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 128:000 | DONE ins | na 16 16 | 0060a7 | 64 0e       |                 stz.d 00020e         
 129:000 | DONE wsp | na 16 16 |        |             |
 130:000 | DONE cmt | na 16 16 |        |             |                 ; accept a line from the current input source
 131:000 | DONE ins | na 16 16 | 0060a9 | 20 ed 63    |                 jsr 0063ed           ; ( -- f )
 132:000 | DONE wsp | na 16 16 |        |             |
 133:000 | DONE ins | na 16 16 | 0060ac | 98          |                 tya                  ; force flag test of TOS
 134:000 | DONE ins | na 16 16 | 0060ad | d0 06       |                 bne 0060b5           
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 137:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 138:000 | DONE cmt | na 16 16 |        |             |                 ; need to save A because we're going to clobber it anyway when we
 139:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 140:000 | DONE ins | na 16 16 | 0060af | a9 75 69    |                 lda.# 006975         
 141:000 | DONE ins | na 16 16 | 0060b2 | 4c 9e 67    |                 jmp 00679e           
 142:000 | DONE wsp | na 16 16 |        |             |
 143:000 | DONE wsp | na 16 16 |        |             |
 144:000 | DONE lbl | na 16 16 | 0060b5 |             | quit_refill_successful               
 145:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 146:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 147:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 148:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 149:000 | DONE ins | na 16 16 | 0060b5 | b4 00       |                 ldy.dx 00            ; drop TOS
 150:000 | DONE ins | na 16 16 | 0060b7 | e8          |                 inx                  
 151:000 | DONE ins | na 16 16 | 0060b8 | e8          |                 inx                  
 152:000 | DONE wsp | na 16 16 |        |             |
 153:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 154:000 | DONE ins | na 16 16 | 0060b9 | 64 12       |                 stz.d 000212         
 155:000 | DONE wsp | na 16 16 |        |             |
 156:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 157:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 158:000 | DONE ins | na 16 16 | 0060bb | 20 74 67    |                 jsr 006774           
 159:000 | DONE wsp | na 16 16 |        |             |
 160:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 161:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 162:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 163:000 | DONE ins | na 16 16 | 0060be | e0 f1 02    |                 cpx.# 0002f1         
 164:000 | DONE ins | na 16 16 | 0060c1 | 90 06       |                 bcc 0060c9           ; DSP must always be smaller (!) than DSP0
 165:000 | DONE wsp | na 16 16 |        |             |
 166:000 | DONE ins | na 16 16 | 0060c3 | a9 c3 69    |                 lda.# 0069c3         
 167:000 | DONE ins | na 16 16 | 0060c6 | 4c 9e 67    |                 jmp 00679e           
 168:000 | DONE wsp | na 16 16 |        |             |
 169:000 | DONE lbl | na 16 16 | 0060c9 |             | quit_ok                              
 170:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well
 171:000 | DONE ins | na 16 16 | 0060c9 | a9 a2 68    |                 lda.# 0068a2         
 172:000 | DONE ins | na 16 16 | 0060cc | 20 a4 67    |                 jsr 0067a4           
 173:000 | DONE wsp | na 16 16 |        |             |
 174:000 | DONE wsp | na 16 16 |        |             |
 175:000 | DONE cmt | na 16 16 |        |             |                 ; get next line
 176:000 | DONE ins | na 16 16 | 0060cf | 4c a7 60    |                 jmp 0060a7           
 177:000 | DONE wsp | na 16 16 |        |             |
 178:000 | DONE lbl | na 16 16 | 0060d2 |             | z_cold                               
 179:000 | DONE lbl | na 16 16 | 0060d2 |             | z_abort                              
 180:000 | DONE lbl | na 16 16 | 0060d2 |             | z_quit                               
 180:001 | DONE ins | na 16 16 | 0060d2 | ea          |                 nop                  ; dummy for compilation, TODO test if required
 181:000 | DONE wsp | na 16 16 |        |             |
 182:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 183:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / X cycles
 184:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 185:000 | DONE lbl | na 16 16 | 0060d3 |             | a_to-in                              
 185:001 | DONE ins | na 16 16 | 0060d3 | ca          |                 dex                  
 186:000 | DONE ins | na 16 16 | 0060d4 | ca          |                 dex                  
 187:000 | DONE ins | na 16 16 | 0060d5 | 94 00       |                 sty.dx 00            
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE ins | na 16 16 | 0060d7 | a0 12 02    |                 ldy.# 000212         ; >IN
 190:000 | DONE lbl | na 16 16 | 0060da |             | z_to-in                              
 190:001 | DONE ins | na 16 16 | 0060da | 60          |                 rts                  
 191:000 | DONE wsp | na 16 16 |        |             |
 192:000 | DONE wsp | na 16 16 |        |             |
 193:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 194:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 195:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 196:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 197:000 | DONE cmt | na 16 16 |        |             | ; aligned
 198:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 199:000 | DONE cmt | na 16 16 |        |             | ;               tya
 200:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 201:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 202:000 | DONE cmt | na 16 16 |        |             | ;               iny
 203:000 | DONE cmt | na 16 16 |        |             | ;               iny
 204:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 205:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 206:000 | DONE cmt | na 16 16 |        |             | ;               inx
 207:000 | DONE cmt | na 16 16 |        |             | ;               inx
 208:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 209:000 | DONE lbl | na 16 16 | 0060db |             | a_comma                              
 209:001 | DONE ins | na 16 16 | 0060db | 98          |                 tya                  
 210:000 | DONE ins | na 16 16 | 0060dc | 92 00       |                 sta.di 000200        ; STA (CP)
 211:000 | DONE ins | na 16 16 | 0060de | e6 00       |                 inc.d 000200         
 212:000 | DONE ins | na 16 16 | 0060e0 | e6 00       |                 inc.d 000200         
 213:000 | DONE wsp | na 16 16 |        |             |
 214:000 | DONE ins | na 16 16 | 0060e2 | b4 00       |                 ldy.dx 00            
 215:000 | DONE ins | na 16 16 | 0060e4 | e8          |                 inx                  
 216:000 | DONE ins | na 16 16 | 0060e5 | e8          |                 inx                  
 217:000 | DONE wsp | na 16 16 |        |             |
 218:000 | DONE lbl | na 16 16 | 0060e6 |             | z_comma                              
 218:001 | DONE ins | na 16 16 | 0060e6 | 60          |                 rts                  
 219:000 | DONE wsp | na 16 16 |        |             |
 220:000 | DONE wsp | na 16 16 |        |             |
 221:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 222:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 223:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 224:000 | DONE lbl | na 16 16 | 0060e7 |             | a_store                              
 225:000 | DONE ins | na 16 16 | 0060e7 | b5 00       |                 lda.dx 00            ; NOS has value
 226:000 | DONE ins | na 16 16 | 0060e9 | 99 00 00    |                 sta.y 0000           
 227:000 | DONE ins | na 16 16 | 0060ec | e8          |                 inx                  
 228:000 | DONE ins | na 16 16 | 0060ed | e8          |                 inx                  
 229:000 | DONE ins | na 16 16 | 0060ee | e8          |                 inx                  
 230:000 | DONE ins | na 16 16 | 0060ef | e8          |                 inx                  
 231:000 | DONE wsp | na 16 16 |        |             |
 232:000 | DONE lbl | na 16 16 | 0060f0 |             | z_store                              
 232:001 | DONE ins | na 16 16 | 0060f0 | 60          |                 rts                  
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE wsp | na 16 16 |        |             |
 235:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 236:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / X cycles
 237:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 238:000 | DONE lbl | na 16 16 | 0060f1 |             | a_fetch                              
 239:000 | DONE ins | na 16 16 | 0060f1 | b9 00 00    |                 lda.y 0000           
 240:000 | DONE ins | na 16 16 | 0060f4 | a8          |                 tay                  
 241:000 | DONE lbl | na 16 16 | 0060f5 |             | z_fetch                              
 241:001 | DONE ins | na 16 16 | 0060f5 | 60          |                 rts                  
 242:000 | DONE wsp | na 16 16 |        |             |
 243:000 | DONE wsp | na 16 16 |        |             |
 244:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 245:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 246:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 247:000 | DONE wsp | na 16 16 |        |             |
 248:000 | DONE lbl | na 16 16 | 0060f6 |             | a_plus                               
 248:001 | DONE ins | na 16 16 | 0060f6 | 98          |                 tya                  
 249:000 | DONE ins | na 16 16 | 0060f7 | 18          |                 clc                  
 250:000 | DONE ins | na 16 16 | 0060f8 | 75 00       |                 adc.dx 00            
 251:000 | DONE ins | na 16 16 | 0060fa | a8          |                 tay                  
 252:000 | DONE ins | na 16 16 | 0060fb | e8          |                 inx                  
 253:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 254:000 | DONE wsp | na 16 16 |        |             |
 255:000 | DONE lbl | na 16 16 | 0060fd |             | z_plus                               
 255:001 | DONE ins | na 16 16 | 0060fd | 60          |                 rts                  
 256:000 | DONE wsp | na 16 16 |        |             |
 257:000 | DONE wsp | na 16 16 |        |             |
 258:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 259:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) X bytes / X cycles
 260:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 261:000 | DONE lbl | na 16 16 | 0060fe |             | a_minus                              
 262:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 263:000 | DONE ins | na 16 16 | 0060fe | 98          |                 tya                  
 264:000 | DONE ins | na 16 16 | 0060ff | 49 ff ff    |                 eor.# 0ffff          
 265:000 | DONE wsp | na 16 16 |        |             |
 266:000 | DONE ins | na 16 16 | 006102 | 38          |                 sec                  ; not: CLC
 267:000 | DONE ins | na 16 16 | 006103 | 75 00       |                 adc.dx 00            
 268:000 | DONE wsp | na 16 16 |        |             |
 269:000 | DONE ins | na 16 16 | 006105 | a8          |                 tay                  
 270:000 | DONE ins | na 16 16 | 006106 | e8          |                 inx                  
 271:000 | DONE ins | na 16 16 | 006107 | e8          |                 inx                  
 272:000 | DONE wsp | na 16 16 |        |             |
 273:000 | DONE lbl | na 16 16 | 006108 |             | z_minus                              
 273:001 | DONE ins | na 16 16 | 006108 | 60          |                 rts                  
 274:000 | DONE wsp | na 16 16 |        |             |
 275:000 | DONE wsp | na 16 16 |        |             |
 276:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 277:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 278:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 279:000 | DONE lbl | na 16 16 | 006109 |             | a_zero                               
 280:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 281:000 | DONE ins | na 16 16 | 006109 | ca          |                 dex                  
 282:000 | DONE ins | na 16 16 | 00610a | ca          |                 dex                  
 283:000 | DONE ins | na 16 16 | 00610b | 94 00       |                 sty.dx 00            
 284:000 | DONE ins | na 16 16 | 00610d | a0 00 00    |                 ldy.# 0000           
 285:000 | DONE wsp | na 16 16 |        |             |
 286:000 | DONE lbl | na 16 16 | 006110 |             | z_zero                               
 286:001 | DONE ins | na 16 16 | 006110 | 60          |                 rts                  
 287:000 | DONE wsp | na 16 16 |        |             |
 288:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 289:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 290:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 291:000 | DONE lbl | na 16 16 | 006111 |             | a_one                                
 292:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 293:000 | DONE ins | na 16 16 | 006111 | ca          |                 dex                  
 294:000 | DONE ins | na 16 16 | 006112 | ca          |                 dex                  
 295:000 | DONE ins | na 16 16 | 006113 | 94 00       |                 sty.dx 00            
 296:000 | DONE ins | na 16 16 | 006115 | a0 01 00    |                 ldy.# 0001           
 297:000 | DONE wsp | na 16 16 |        |             |
 298:000 | DONE lbl | na 16 16 | 006118 |             | z_one                                
 298:001 | DONE ins | na 16 16 | 006118 | 60          |                 rts                  
 299:000 | DONE wsp | na 16 16 |        |             |
 300:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 301:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / X cycles
 302:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 303:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 304:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 305:000 | DONE lbl | na 16 16 | 006119 |             | a_one-minus                          
 306:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 307:000 | DONE ins | na 16 16 | 006119 | 88          |                 dey                  
 308:000 | DONE lbl | na 16 16 | 00611a |             | z_one-minus                          
 308:001 | DONE ins | na 16 16 | 00611a | 60          |                 rts                  
 309:000 | DONE wsp | na 16 16 |        |             |
 310:000 | DONE wsp | na 16 16 |        |             |
 311:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 312:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 313:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 314:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 315:000 | DONE lbl | na 16 16 | 00611b |             | a_one-plus                           
 316:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 317:000 | DONE ins | na 16 16 | 00611b | c8          |                 iny                  
 318:000 | DONE lbl | na 16 16 | 00611c |             | z_one-plus                           
 318:001 | DONE ins | na 16 16 | 00611c | 60          |                 rts                  
 319:000 | DONE wsp | na 16 16 |        |             |
 320:000 | DONE wsp | na 16 16 |        |             |
 321:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 322:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 323:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 324:000 | DONE lbl | na 16 16 | 00611d |             | a_two                                
 325:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 326:000 | DONE ins | na 16 16 | 00611d | ca          |                 dex                  
 327:000 | DONE ins | na 16 16 | 00611e | ca          |                 dex                  
 328:000 | DONE ins | na 16 16 | 00611f | 94 00       |                 sty.dx 00            
 329:000 | DONE ins | na 16 16 | 006121 | a0 02 00    |                 ldy.# 0002           
 330:000 | DONE wsp | na 16 16 |        |             |
 331:000 | DONE lbl | na 16 16 | 006124 |             | z_two                                
 331:001 | DONE ins | na 16 16 | 006124 | 60          |                 rts                  
 332:000 | DONE wsp | na 16 16 |        |             |
 333:000 | DONE wsp | na 16 16 |        |             |
 334:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 335:000 | DONE cmt | na 16 16 |        |             | ; TWO-STAR ( n -- n ) 3 bytes / X cycles
 336:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 337:000 | DONE lbl | na 16 16 | 006125 |             | a_two-star                           
 338:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 339:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 340:000 | DONE ins | na 16 16 | 006125 | 98          |                 tya                  
 341:000 | DONE ins | na 16 16 | 006126 | 0a          |                 asl.a                
 342:000 | DONE ins | na 16 16 | 006127 | a8          |                 tay                  
 343:000 | DONE wsp | na 16 16 |        |             |
 344:000 | DONE lbl | na 16 16 | 006128 |             | z_two-star                           
 344:001 | DONE ins | na 16 16 | 006128 | 60          |                 rts                  
 345:000 | DONE wsp | na 16 16 |        |             |
 346:000 | DONE wsp | na 16 16 |        |             |
 347:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 348:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 349:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 350:000 | DONE wsp | na 16 16 |        |             |
 351:000 | DONE lbl | na 16 16 | 006129 |             | a_2dup                               
 352:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 353:000 | DONE ins | na 16 16 | 006129 | ca          |                 dex                  
 354:000 | DONE ins | na 16 16 | 00612a | ca          |                 dex                  
 355:000 | DONE ins | na 16 16 | 00612b | ca          |                 dex                  
 356:000 | DONE ins | na 16 16 | 00612c | ca          |                 dex                  
 357:000 | DONE ins | na 16 16 | 00612d | 94 02       |                 sty.dx 02            
 358:000 | DONE ins | na 16 16 | 00612f | b5 04       |                 lda.dx 04            
 359:000 | DONE ins | na 16 16 | 006131 | 95 00       |                 sta.dx 00            
 360:000 | DONE wsp | na 16 16 |        |             |
 361:000 | DONE lbl | na 16 16 | 006133 |             | z_2dup                               
 361:001 | DONE ins | na 16 16 | 006133 | 60          |                 rts                  
 362:000 | DONE wsp | na 16 16 |        |             |
 363:000 | DONE wsp | na 16 16 |        |             |
 364:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 365:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 366:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 367:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 368:000 | DONE lbl | na 16 16 | 006134 |             | a_tick                               
 369:000 | DONE ins | na 16 16 | 006134 | 20 88 63    |                 jsr 006388           ; ( -- addr u )
 370:000 | DONE wsp | na 16 16 |        |             |
 371:000 | DONE cmt | na 16 16 |        |             | 		; if we got a zero, complain and abort
 372:000 | DONE ins | na 16 16 | 006137 | d0 06       |                 bne 00613f           
 373:000 | DONE wsp | na 16 16 |        |             |
 374:000 | DONE ins | na 16 16 | 006139 | a9 4e 69    |                 lda.# 00694e         
 375:000 | DONE ins | na 16 16 | 00613c | 4c 9e 67    |                 jmp 00679e           
 376:000 | DONE wsp | na 16 16 |        |             |
 377:000 | DONE lbl | na 16 16 | 00613f |             | tick_have_word                       
 378:000 | DONE ins | na 16 16 | 00613f | 20 f4 62    |                 jsr 0062f4           ; ( addr u -- nt)
 379:000 | DONE wsp | na 16 16 |        |             |
 380:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 381:000 | DONE ins | na 16 16 | 006142 | d0 06       |                 bne 00614a           
 382:000 | DONE wsp | na 16 16 |        |             |
 383:000 | DONE ins | na 16 16 | 006144 | a9 d3 69    |                 lda.# 0069d3         
 384:000 | DONE ins | na 16 16 | 006147 | 4c 9e 67    |                 jmp 00679e           
 385:000 | DONE wsp | na 16 16 |        |             |
 386:000 | DONE lbl | na 16 16 | 00614a |             | tick_have_nt                         
 387:000 | DONE ins | na 16 16 | 00614a | 20 52 63    |                 jsr 006352           ; ( nt -- xt )
 388:000 | DONE wsp | na 16 16 |        |             |
 389:000 | DONE lbl | na 16 16 | 00614d |             | z_tick                               
 389:001 | DONE ins | na 16 16 | 00614d | 60          |                 rts                  
 390:000 | DONE wsp | na 16 16 |        |             |
 391:000 | DONE wsp | na 16 16 |        |             |
 392:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 393:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) X bytes / X cycles
 394:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 395:000 | DONE lbl | na 16 16 | 00614e |             | a_abs                                
 396:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 397:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 398:000 | DONE ins | na 16 16 | 00614e | 98          |                 tya                  ; force flag test
 399:000 | DONE ins | na 16 16 | 00614f | 10 05       |                 bpl 006156           ; positive number is easy
 400:000 | DONE wsp | na 16 16 |        |             |
 401:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 402:000 | DONE ins | na 16 16 | 006151 | 49 ff ff    |                 eor.# 0ffff          
 403:000 | DONE ins | na 16 16 | 006154 | 1a          |                 inc.a                
 404:000 | DONE ins | na 16 16 | 006155 | a8          |                 tay                  
 405:000 | DONE wsp | na 16 16 |        |             |
 406:000 | DONE lbl | na 16 16 | 006156 |             | z_abs                                
 406:001 | DONE ins | na 16 16 | 006156 | 60          |                 rts                  
 407:000 | DONE wsp | na 16 16 |        |             |
 408:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 409:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 410:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 411:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 412:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is normally called by REFILL these days.
 413:000 | DONE lbl | na 16 16 | 006157 |             | a_accept                             
 414:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 415:000 | DONE ins | na 16 16 | 006157 | 98          |                 tya                  ; max number of chars to accept is TOS
 416:000 | DONE ins | na 16 16 | 006158 | d0 03       |                 bne 00615d           
 417:000 | DONE wsp | na 16 16 |        |             |
 418:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 419:000 | DONE ins | na 16 16 | 00615a | e8          |                 inx                  ; NIP, TOS is zero which is also FALSE
 420:000 | DONE ins | na 16 16 | 00615b | e8          |                 inx                  
 421:000 | DONE wsp | na 16 16 |        |             |
 422:000 | DONE ins | na 16 16 | 00615c | 60          |                 rts                  
 423:000 | DONE wsp | na 16 16 |        |             |
 424:000 | DONE lbl | na 16 16 | 00615d |             | accept_nonzero                       
 425:000 | DONE ins | na 16 16 | 00615d | b5 00       |                 lda.dx 00            ; address of buffer is NOS
 426:000 | DONE ins | na 16 16 | 00615f | 85 16       |                 sta.d 000216         
 427:000 | DONE ins | na 16 16 | 006161 | e8          |                 inx                  ; NIP
 428:000 | DONE ins | na 16 16 | 006162 | e8          |                 inx                  
 429:000 | DONE wsp | na 16 16 |        |             |
 430:000 | DONE ins | na 16 16 | 006163 | 84 18       |                 sty.d 000218         ; Save max number of chars in tmp2
 431:000 | DONE ins | na 16 16 | 006165 | a0 00 00    |                 ldy.# 0000           ; Use Y as counter
 432:000 | DONE ins | na 16 16 | 006168 | e2 20       |                 sep 20               
 432:001 | DONE ctl | na  8 16 |        |             |         .!a8
 433:000 | DONE wsp | na  8 16 |        |             |
 434:000 | DONE lbl | na  8 16 | 00616a |             | accept_loop                          
 435:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 436:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because vt100 terminal
 437:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 438:000 | DONE ins | na  8 16 | 00616a | 20 41 60    |                 jsr 006041           
 439:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 440:000 | DONE ins | na  8 16 | 00616d | c9 0a       |                 cmp.# AscLF          ; we quit on both line feed and carriage return
 441:000 | DONE ins | na  8 16 | 00616f | f0 44       |                 beq 0061b5           
 442:000 | DONE ins | na  8 16 | 006171 | c9 0d       |                 cmp.# AscCR          
 443:000 | DONE ins | na  8 16 | 006173 | f0 40       |                 beq 0061b5           
 444:000 | DONE wsp | na  8 16 |        |             |
 445:000 | DONE ins | na  8 16 | 006175 | c9 08       |                 cmp.# AscBS          ; BS and DEL do the same thing for the moment
 446:000 | DONE ins | na  8 16 | 006177 | f0 44       |                 beq 0061bd           
 447:000 | DONE ins | na  8 16 | 006179 | c9 7f       |                 cmp.# AscDEL         
 448:000 | DONE ins | na  8 16 | 00617b | f0 40       |                 beq 0061bd           
 449:000 | DONE wsp | na  8 16 |        |             |
 450:000 | DONE ins | na  8 16 | 00617d | c9 03       |                 cmp.# AscCC          ; CTRL-c aborts (see if this is too harsh)
 451:000 | DONE ins | na  8 16 | 00617f | d0 03       |                 bne 006184           
 452:000 | DONE ins | na  8 16 | 006181 | 4c 94 60    |                 jmp 006094           ; ABORT switches back to 16-bit A
 453:000 | DONE lbl | na  8 16 | 006184 |             | @                                    
 454:000 | DONE ins | na  8 16 | 006184 | c9 1b       |                 cmp.# AscESC         ; ESC aborts (in this version)
 455:000 | DONE ins | na  8 16 | 006186 | d0 03       |                 bne 00618b           
 456:000 | DONE ins | na  8 16 | 006188 | 4c 94 60    |                 jmp 006094           ; ABORT switches back to 16-bit A
 457:000 | DONE lbl | na  8 16 | 00618b |             | @                                    
 458:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p, will be used for "previous cmd", TODO
 459:000 | DONE ins | na  8 16 | 00618b | c9 10       |                 cmp.# AscCP          
 460:000 | DONE ins | na  8 16 | 00618d | d0 0c       |                 bne 00619b           
 461:000 | DONE ins | na  8 16 | 00618f | c2 20       |                 rep 20               
 461:001 | DONE ctl | na 16 16 |        |             |         .!a16
 462:000 | DONE ins | na 16 16 | 006191 | a9 ec 69    |                 lda.# 0069ec         
 463:000 | DONE ins | na 16 16 | 006194 | 20 a4 67    |                 jsr 0067a4           
 464:000 | DONE ins | na 16 16 | 006197 | e2 20       |                 sep 20               
 464:001 | DONE ctl | na  8 16 |        |             |         .!a8
 465:000 | DONE ins | na  8 16 | 006199 | 80 cf       |                 bra 00616a           
 466:000 | DONE lbl | na  8 16 | 00619b |             | @                                    
 467:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n, will be used for "next cmd", TODO
 468:000 | DONE ins | na  8 16 | 00619b | c9 0e       |                 cmp.# AscCN          
 469:000 | DONE ins | na  8 16 | 00619d | d0 0c       |                 bne 0061ab           
 470:000 | DONE ins | na  8 16 | 00619f | c2 20       |                 rep 20               
 470:001 | DONE ctl | na 16 16 |        |             |         .!a16
 471:000 | DONE ins | na 16 16 | 0061a1 | a9 ff 69    |                 lda.# 0069ff         
 472:000 | DONE ins | na 16 16 | 0061a4 | 20 a4 67    |                 jsr 0067a4           
 473:000 | DONE ins | na 16 16 | 0061a7 | e2 20       |                 sep 20               
 473:001 | DONE ctl | na  8 16 |        |             |         .!a8
 474:000 | DONE ins | na  8 16 | 0061a9 | 80 bf       |                 bra 00616a           
 475:000 | DONE wsp | na  8 16 |        |             |
 476:000 | DONE lbl | na  8 16 | 0061ab |             | @                                    
 477:000 | DONE cmt | na  8 16 |        |             |                 ; That's enough, echo character
 478:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
 479:000 | DONE ins | na  8 16 | 0061ab | 20 30 60    |                 jsr 006030           ; echo character
 480:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 481:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 482:000 | DONE wsp | na  8 16 |        |             |
 483:000 | DONE ins | na  8 16 | 0061ae | 91 0c       |                 sta.diy 00020c       ; STA (CIB),Y
 484:000 | DONE ins | na  8 16 | 0061b0 | c8          |                 iny                  
 485:000 | DONE ins | na  8 16 | 0061b1 | c4 18       |                 cpy.d 000218         ; reached character limit?
 486:000 | DONE ins | na  8 16 | 0061b3 | d0 b5       |                 bne 00616a           ; fall thru if buffer limit reached
 487:000 | DONE wsp | na  8 16 |        |             |
 488:000 | DONE lbl | na  8 16 | 0061b5 |             | accept_eol                           
 489:000 | DONE ins | na  8 16 | 0061b5 | 84 0e       |                 sty.d 00020e         ; Y contains number of chars accepted already
 490:000 | DONE ins | na  8 16 | 0061b7 | c2 20       |                 rep 20               
 490:001 | DONE ctl | na 16 16 |        |             |         .!a16
 491:000 | DONE ins | na 16 16 | 0061b9 | 20 3d 64    |                 jsr 00643d           ; print final space
 492:000 | DONE ins | na 16 16 | 0061bc | 60          |                 rts                  ; this is the actual return of the routine
 493:000 | DONE wsp | na 16 16 |        |             |
 494:000 | DONE lbl | na 16 16 | 0061bd |             | accept_bs                            
 495:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 496:000 | DONE ins | na  8 16 | 0061bd | c0 00 00    |                 cpy.# 0000           ; buffer empty?
 497:000 | DONE ins | na  8 16 | 0061c0 | d0 06       |                 bne 0061c8           
 498:000 | DONE wsp | na  8 16 |        |             |
 499:000 | DONE ins | na  8 16 | 0061c2 | a9 07       |                 lda.# AscBELL        ; complain and don't delete beyond the start of line
 500:000 | DONE ins | na  8 16 | 0061c4 | 20 30 60    |                 jsr 006030           
 501:000 | DONE ins | na  8 16 | 0061c7 | c8          |                 iny                  
 502:000 | DONE lbl | na  8 16 | 0061c8 |             | @                                    
 503:000 | DONE ins | na  8 16 | 0061c8 | 88          |                 dey                  
 504:000 | DONE ins | na  8 16 | 0061c9 | a9 08       |                 lda.# AscBS          ; move back one
 505:000 | DONE ins | na  8 16 | 0061cb | 20 30 60    |                 jsr 006030           
 506:000 | DONE ins | na  8 16 | 0061ce | a9 20       |                 lda.# AscSP          ; print a space
 507:000 | DONE ins | na  8 16 | 0061d0 | 20 30 60    |                 jsr 006030           
 508:000 | DONE ins | na  8 16 | 0061d3 | a9 08       |                 lda.# AscBS          ; move back over space
 509:000 | DONE ins | na  8 16 | 0061d5 | 20 30 60    |                 jsr 006030           
 510:000 | DONE wsp | na  8 16 |        |             |
 511:000 | DONE ins | na  8 16 | 0061d8 | 80 90       |                 bra 00616a           
 512:000 | DONE wsp | na  8 16 |        |             |
 513:000 | DONE lbl | na  8 16 | 0061da |             | z_accept                             
 513:001 | DONE ins | na  8 16 | 0061da | 60          |                 rts                  
 514:000 | DONE wsp | na  8 16 |        |             |
 515:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 516:000 | DONE cmt | na  8 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
 517:000 | DONE cmt | na  8 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
 518:000 | DONE cmt | na  8 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
 519:000 | DONE cmt | na  8 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
 520:000 | DONE cmt | na  8 16 |        |             | ; past the Dictionary.
 521:000 | DONE cmt | na  8 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
 522:000 | DONE cmt | na  8 16 |        |             | ; TODO test negative values
 523:000 | DONE lbl | na  8 16 | 0061db |             | a_allot                              
 524:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 525:000 | DONE ins | na 16 16 | 0061db | 98          |                 tya                  ; force flag check
 526:000 | DONE ins | na 16 16 | 0061dc | f0 21       |                 beq 0061ff           ; zero bytes, don't do anything
 527:000 | DONE ins | na 16 16 | 0061de | 30 12       |                 bmi 0061f2           ; free memory instead of reserving it
 528:000 | DONE wsp | na 16 16 |        |             |
 529:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
 530:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
 531:000 | DONE ins | na 16 16 | 0061e0 | 18          |                 clc                  
 532:000 | DONE ins | na 16 16 | 0061e1 | 65 00       |                 adc.d 000200         ; create new CP
 533:000 | DONE ins | na 16 16 | 0061e3 | b0 07       |                 bcs 0061ec           ; oops, we've wrapped
 534:000 | DONE wsp | na 16 16 |        |             |
 535:000 | DONE ins | na 16 16 | 0061e5 | a8          |                 tay                  ; save copy of new CP
 536:000 | DONE wsp | na 16 16 |        |             |
 537:000 | DONE ins | na 16 16 | 0061e6 | 38          |                 sec                  
 538:000 | DONE ins | na 16 16 | 0061e7 | e9 ff 7b    |                 sbc.# 007bff         
 539:000 | DONE ins | na 16 16 | 0061ea | 30 11       |                 bmi 0061fd           ; oops, fall thru if beyond max RAM
 540:000 | DONE wsp | na 16 16 |        |             |
 541:000 | DONE lbl | na 16 16 | 0061ec |             | allot_error                          
 542:000 | DONE ins | na 16 16 | 0061ec | a9 a6 68    |                 lda.# 0068a6         
 543:000 | DONE ins | na 16 16 | 0061ef | 4c 9e 67    |                 jmp 00679e           
 544:000 | DONE wsp | na 16 16 |        |             |
 545:000 | DONE lbl | na 16 16 | 0061f2 |             | allot_minus                          
 546:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
 547:000 | DONE ins | na 16 16 | 0061f2 | 38          |                 sec                  
 548:000 | DONE ins | na 16 16 | 0061f3 | e5 00       |                 sbc.d 000200         
 549:000 | DONE ins | na 16 16 | 0061f5 | 90 f5       |                 bcc 0061ec           ; oops, we've wrapped
 550:000 | DONE wsp | na 16 16 |        |             |
 551:000 | DONE ins | na 16 16 | 0061f7 | a8          |                 tay                  
 552:000 | DONE wsp | na 16 16 |        |             |
 553:000 | DONE ins | na 16 16 | 0061f8 | e9 00 03    |                 sbc.# 000300         ; Carry Flag must still be set
 554:000 | DONE ins | na 16 16 | 0061fb | 30 ef       |                 bmi 0061ec           ; oops, gone too far back
 555:000 | DONE wsp | na 16 16 |        |             |
 556:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
 557:000 | DONE lbl | na 16 16 | 0061fd |             | allot_done                           
 558:000 | DONE ins | na 16 16 | 0061fd | 84 00       |                 sty.d 000200         ; new compiler pointer
 559:000 | DONE lbl | na 16 16 | 0061ff |             | allot_real_gone                      
 560:000 | DONE ins | na 16 16 | 0061ff | b4 00       |                 ldy.dx 00            ; DROP
 561:000 | DONE ins | na 16 16 | 006201 | e8          |                 inx                  
 562:000 | DONE ins | na 16 16 | 006202 | e8          |                 inx                  
 563:000 | DONE wsp | na 16 16 |        |             |
 564:000 | DONE lbl | na 16 16 | 006203 |             | z_allot                              
 564:001 | DONE ins | na 16 16 | 006203 | 60          |                 rts                  
 565:000 | DONE wsp | na 16 16 |        |             |
 566:000 | DONE wsp | na 16 16 |        |             |
 567:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 568:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 569:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell
 570:000 | DONE lbl | na 16 16 | 006204 |             | a_bell                               
 571:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 572:000 | DONE ins | na 16 16 | 006204 | a9 07 00    |                 lda.# AscBELL        
 573:000 | DONE ins | na 16 16 | 006207 | 20 30 60    |                 jsr 006030           
 574:000 | DONE wsp | na 16 16 |        |             |
 575:000 | DONE lbl | na 16 16 | 00620a |             | z_bell                               
 575:001 | DONE ins | na 16 16 | 00620a | 60          |                 rts                  
 576:000 | DONE wsp | na 16 16 |        |             |
 577:000 | DONE wsp | na 16 16 |        |             |
 578:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 579:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 580:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 581:000 | DONE wsp | na 16 16 |        |             |
 582:000 | DONE lbl | na 16 16 | 00620b |             | a_bl                                 
 583:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 584:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 585:000 | DONE ins | na 16 16 | 00620b | ca          |                 dex                  
 586:000 | DONE ins | na 16 16 | 00620c | ca          |                 dex                  
 587:000 | DONE ins | na 16 16 | 00620d | 94 00       |                 sty.dx 00            
 588:000 | DONE ins | na 16 16 | 00620f | a0 20 00    |                 ldy.# AscSP          
 589:000 | DONE wsp | na 16 16 |        |             |
 590:000 | DONE lbl | na 16 16 | 006212 |             | z_bl                                 
 590:001 | DONE ins | na 16 16 | 006212 | 60          |                 rts                  
 591:000 | DONE wsp | na 16 16 |        |             |
 592:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 593:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 594:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 595:000 | DONE lbl | na 16 16 | 006213 |             | a_bye                                
 596:000 | DONE ins | na 16 16 | 006213 | 58          |                 cli                  
 597:000 | DONE ins | na 16 16 | 006214 | 00 00       |                 brk 00               ; status byte 00 required for assembler
 598:000 | DONE wsp | na 16 16 |        |             |
 599:000 | DONE lbl | na 16 16 | 006216 |             | z_bye                                
 599:001 | DONE ins | na 16 16 | 006216 | 60          |                 rts                  ; dummy for compiling, never reached
 600:000 | DONE wsp | na 16 16 |        |             |
 601:000 | DONE wsp | na 16 16 |        |             |
 602:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 603:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
 604:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
 605:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
 606:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
 607:000 | DONE wsp | na 16 16 |        |             |
 608:000 | DONE wsp | na 16 16 |        |             |
 609:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 610:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 611:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 612:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 613:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 614:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 615:000 | DONE lbl | na 16 16 | 006217 |             | a_count                              
 616:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 617:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 618:000 | DONE ins | na 16 16 | 006217 | 98          |                 tya                  
 619:000 | DONE ins | na 16 16 | 006218 | 1a          |                 inc.a                ; String address starts one char later
 620:000 | DONE ins | na 16 16 | 006219 | ca          |                 dex                  
 621:000 | DONE ins | na 16 16 | 00621a | ca          |                 dex                  
 622:000 | DONE ins | na 16 16 | 00621b | 95 00       |                 sta.dx 00            ; NOS
 623:000 | DONE wsp | na 16 16 |        |             |
 624:000 | DONE ins | na 16 16 | 00621d | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y  first byte is length
 625:000 | DONE ins | na 16 16 | 006220 | eb          |                 xba                  ; move length to LSB
 626:000 | DONE ins | na 16 16 | 006221 | 29 ff 00    |                 and.# 00ff           ; get rid of whatever was MSB
 627:000 | DONE ins | na 16 16 | 006224 | a8          |                 tay                  ; TOS
 628:000 | DONE wsp | na 16 16 |        |             |
 629:000 | DONE lbl | na 16 16 | 006225 |             | z_count                              
 629:001 | DONE ins | na 16 16 | 006225 | 60          |                 rts                  
 630:000 | DONE wsp | na 16 16 |        |             |
 631:000 | DONE wsp | na 16 16 |        |             |
 632:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 633:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 634:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 635:000 | DONE wsp | na 16 16 |        |             |
 636:000 | DONE lbl | na 16 16 | 006226 |             | a_cr                                 
 637:000 | DONE ins | na 16 16 | 006226 | a9 0a 00    |                 lda.# AscLF          ; test with AscCR for emulators
 638:000 | DONE ins | na 16 16 | 006229 | 20 30 60    |                 jsr 006030           
 639:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 640:000 | DONE wsp | na 16 16 |        |             |
 641:000 | DONE lbl | na 16 16 | 00622c |             | z_cr                                 
 641:001 | DONE ins | na 16 16 | 00622c | 60          |                 rts                  
 642:000 | DONE wsp | na 16 16 |        |             |
 643:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 644:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
 645:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
 646:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
 647:000 | DONE lbl | na 16 16 | 00622d |             | a_depth                              
 648:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 649:000 | DONE cmt | na 16 16 |        |             | 		; We've got zero entries when X is dsp0
 650:000 | DONE ins | na 16 16 | 00622d | 86 04       |                 stx.d 000204         
 651:000 | DONE ins | na 16 16 | 00622f | a9 f0 02    |                 lda.# 0002f0         
 652:000 | DONE ins | na 16 16 | 006232 | 38          |                 sec                  
 653:000 | DONE ins | na 16 16 | 006233 | e5 04       |                 sbc.d 000204         
 654:000 | DONE wsp | na 16 16 |        |             |
 655:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
 656:000 | DONE ins | na 16 16 | 006235 | 4a          |                 lsr.a                
 657:000 | DONE wsp | na 16 16 |        |             |
 658:000 | DONE ins | na 16 16 | 006236 | ca          |                 dex                  
 659:000 | DONE ins | na 16 16 | 006237 | ca          |                 dex                  
 660:000 | DONE ins | na 16 16 | 006238 | 94 00       |                 sty.dx 00            
 661:000 | DONE wsp | na 16 16 |        |             |
 662:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
 663:000 | DONE ins | na 16 16 | 00623a | a8          |                 tay                  
 664:000 | DONE wsp | na 16 16 |        |             |
 665:000 | DONE lbl | na 16 16 | 00623b |             | z_depth                              
 665:001 | DONE ins | na 16 16 | 00623b | 60          |                 rts                  
 666:000 | DONE wsp | na 16 16 |        |             |
 667:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 668:000 | DONE cmt | na 16 16 |        |             | ; DOT ( n -- ) X bytes / X cycles
 669:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
 670:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
 671:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 672:000 | DONE cmt | na 16 16 |        |             | ; focus on size
 673:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
 674:000 | DONE lbl | na 16 16 | 00623c |             | a_dot                                
 675:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 676:000 | DONE ins | na 16 16 | 00623c | 98          |                 tya                  
 677:000 | DONE ins | na 16 16 | 00623d | 29 00 ff    |                 and.# 0ff00          
 678:000 | DONE ins | na 16 16 | 006240 | eb          |                 xba                  
 679:000 | DONE ins | na 16 16 | 006241 | 20 bc 67    |                 jsr 0067bc           
 680:000 | DONE ins | na 16 16 | 006244 | 98          |                 tya                  
 681:000 | DONE ins | na 16 16 | 006245 | 29 ff 00    |                 and.# 00ff           
 682:000 | DONE ins | na 16 16 | 006248 | 20 bc 67    |                 jsr 0067bc           
 683:000 | DONE ins | na 16 16 | 00624b | 20 3d 64    |                 jsr 00643d           
 684:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 685:000 | DONE wsp | na 16 16 |        |             |
 686:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
 687:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
 688:000 | DONE ins | na 16 16 | 00624e | 20 a8 62    |                 jsr 0062a8           
 689:000 | DONE wsp | na 16 16 |        |             |
 690:000 | DONE lbl | na 16 16 | 006251 |             | z_dot                                
 690:001 | DONE ins | na 16 16 | 006251 | 60          |                 rts                  
 691:000 | DONE wsp | na 16 16 |        |             |
 692:000 | DONE wsp | na 16 16 |        |             |
 693:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 694:000 | DONE cmt | na 16 16 |        |             | ; DOTPAREN ( "string" -- ) 13 bytes / X cycles
 695:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 696:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 697:000 | DONE lbl | na 16 16 | 006252 |             | a_dotparen                           
 698:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 699:000 | DONE ins | na 16 16 | 006252 | ca          |                 dex                  
 700:000 | DONE ins | na 16 16 | 006253 | ca          |                 dex                  
 701:000 | DONE ins | na 16 16 | 006254 | 94 00       |                 sty.dx 00            
 702:000 | DONE ins | na 16 16 | 006256 | a0 29 00    |                 ldy.# 29             
 703:000 | DONE wsp | na 16 16 |        |             |
 704:000 | DONE ins | na 16 16 | 006259 | 20 ba 63    |                 jsr 0063ba           ; ( -- addr u)
 705:000 | DONE ins | na 16 16 | 00625c | 20 70 64    |                 jsr 006470           
 706:000 | DONE wsp | na 16 16 |        |             |
 707:000 | DONE lbl | na 16 16 | 00625f |             | z_dotparen                           
 707:001 | DONE ins | na 16 16 | 00625f | 60          |                 rts                  
 708:000 | DONE wsp | na 16 16 |        |             |
 709:000 | DONE wsp | na 16 16 |        |             |
 710:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 711:000 | DONE cmt | na 16 16 |        |             | ; DOTS ".S" ( -- ) X bytes / X cycles
 712:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 713:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 714:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 715:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 716:000 | DONE lbl | na 16 16 | 006260 |             | a_dots                               
 717:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 718:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 719:000 | DONE ins | na 16 16 | 006260 | 20 2d 62    |                 jsr 00622d           ; ( -- u)
 720:000 | DONE wsp | na 16 16 |        |             |
 721:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 722:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 723:000 | DONE ins | na 16 16 | 006263 | a9 3c 00    |                 lda.# 3c             
 724:000 | DONE ins | na 16 16 | 006266 | 20 30 60    |                 jsr 006030           
 725:000 | DONE wsp | na 16 16 |        |             |
 726:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 727:000 | DONE ins | na 16 16 | 006269 | 98          |                 tya                  
 728:000 | DONE ins | na 16 16 | 00626a | 29 00 ff    |                 and.# 0ff00          
 729:000 | DONE ins | na 16 16 | 00626d | eb          |                 xba                  
 730:000 | DONE ins | na 16 16 | 00626e | 20 bc 67    |                 jsr 0067bc           
 731:000 | DONE ins | na 16 16 | 006271 | 98          |                 tya                  
 732:000 | DONE ins | na 16 16 | 006272 | 29 ff 00    |                 and.# 00ff           
 733:000 | DONE ins | na 16 16 | 006275 | 20 bc 67    |                 jsr 0067bc           
 734:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 735:000 | DONE wsp | na 16 16 |        |             |
 736:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 737:000 | DONE ins | na 16 16 | 006278 | a9 3e 00    |                 lda.# 3e             
 738:000 | DONE ins | na 16 16 | 00627b | 20 30 60    |                 jsr 006030           
 739:000 | DONE ins | na 16 16 | 00627e | 20 3d 64    |                 jsr 00643d           
 740:000 | DONE wsp | na 16 16 |        |             |
 741:000 | DONE wsp | na 16 16 |        |             |
 742:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 743:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 744:000 | DONE ins | na 16 16 | 006281 | 98          |                 tya                  ; force flag test
 745:000 | DONE ins | na 16 16 | 006282 | f0 20       |                 beq 0062a4           
 746:000 | DONE wsp | na 16 16 |        |             |
 747:000 | DONE lbl | na 16 16 | 006284 |             | dots_not_empty                       
 748:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 749:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 750:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 751:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 752:000 | DONE wsp | na 16 16 |        |             |
 753:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 754:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 755:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 756:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 757:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
 758:000 | DONE ins | na 16 16 | 006284 | da          |                 phx                  
 759:000 | DONE wsp | na 16 16 |        |             |
 760:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 761:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
 762:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
 763:000 | DONE ins | na 16 16 | 006285 | a2 f0 02    |                 ldx.# 0002f0         ; points to dsp0, which is garbage
 764:000 | DONE ins | na 16 16 | 006288 | ca          |                 dex                  
 765:000 | DONE ins | na 16 16 | 006289 | ca          |                 dex                  ; points to dsp0-2, which is more garbage
 766:000 | DONE wsp | na 16 16 |        |             |
 767:000 | DONE lbl | na 16 16 | 00628a |             | dots_loop                            
 768:000 | DONE ins | na 16 16 | 00628a | ca          |                 dex                  ; get next element on DS, initially dsp0-4
 769:000 | DONE ins | na 16 16 | 00628b | ca          |                 dex                  
 770:000 | DONE wsp | na 16 16 |        |             |
 771:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 772:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 773:000 | DONE ins | na 16 16 | 00628c | b5 00       |                 lda.dx 00            
 774:000 | DONE ins | na 16 16 | 00628e | 29 00 ff    |                 and.# 0ff00          
 775:000 | DONE ins | na 16 16 | 006291 | eb          |                 xba                  
 776:000 | DONE ins | na 16 16 | 006292 | 20 bc 67    |                 jsr 0067bc           
 777:000 | DONE ins | na 16 16 | 006295 | b5 00       |                 lda.dx 00            
 778:000 | DONE ins | na 16 16 | 006297 | 29 ff 00    |                 and.# 00ff           
 779:000 | DONE ins | na 16 16 | 00629a | 20 bc 67    |                 jsr 0067bc           
 780:000 | DONE ins | na 16 16 | 00629d | 20 3d 64    |                 jsr 00643d           
 781:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 782:000 | DONE wsp | na 16 16 |        |             |
 783:000 | DONE ins | na 16 16 | 0062a0 | 88          |                 dey                  
 784:000 | DONE ins | na 16 16 | 0062a1 | d0 e7       |                 bne 00628a           
 785:000 | DONE wsp | na 16 16 |        |             |
 786:000 | DONE ins | na 16 16 | 0062a3 | fa          |                 plx                  ; restore original DSP
 787:000 | DONE wsp | na 16 16 |        |             |
 788:000 | DONE lbl | na 16 16 | 0062a4 |             | dots_done                            
 789:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 790:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 791:000 | DONE ins | na 16 16 | 0062a4 | 20 a8 62    |                 jsr 0062a8           
 792:000 | DONE wsp | na 16 16 |        |             |
 793:000 | DONE lbl | na 16 16 | 0062a7 |             | z_dots                               
 793:001 | DONE ins | na 16 16 | 0062a7 | 60          |                 rts                  
 794:000 | DONE wsp | na 16 16 |        |             |
 795:000 | DONE wsp | na 16 16 |        |             |
 796:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 797:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
 798:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
 799:000 | DONE wsp | na 16 16 |        |             |
 800:000 | DONE lbl | na 16 16 | 0062a8 |             | a_drop                               
 801:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 802:000 | DONE ins | na 16 16 | 0062a8 | b4 00       |                 ldy.dx 00            
 803:000 | DONE ins | na 16 16 | 0062aa | e8          |                 inx                  
 804:000 | DONE ins | na 16 16 | 0062ab | e8          |                 inx                  
 805:000 | DONE wsp | na 16 16 |        |             |
 806:000 | DONE lbl | na 16 16 | 0062ac |             | z_drop                               
 806:001 | DONE ins | na 16 16 | 0062ac | 60          |                 rts                  
 807:000 | DONE wsp | na 16 16 |        |             |
 808:000 | DONE wsp | na 16 16 |        |             |
 809:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 810:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
 811:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
 812:000 | DONE wsp | na 16 16 |        |             |
 813:000 | DONE lbl | na 16 16 | 0062ad |             | a_dup                                
 814:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 815:000 | DONE ins | na 16 16 | 0062ad | ca          |                 dex                  
 816:000 | DONE ins | na 16 16 | 0062ae | ca          |                 dex                  
 817:000 | DONE ins | na 16 16 | 0062af | 94 00       |                 sty.dx 00            
 818:000 | DONE wsp | na 16 16 |        |             |
 819:000 | DONE lbl | na 16 16 | 0062b1 |             | z_dup                                
 819:001 | DONE ins | na 16 16 | 0062b1 | 60          |                 rts                  
 820:000 | DONE wsp | na 16 16 |        |             |
 821:000 | DONE wsp | na 16 16 |        |             |
 822:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 823:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
 824:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
 825:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
 826:000 | DONE lbl | na 16 16 | 0062b2 |             | a_evaluate                           
 827:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
 828:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
 829:000 | DONE ins | na 16 16 | 0062b2 | a5 12       |                 lda.d 000212         ; >IN
 830:000 | DONE ins | na 16 16 | 0062b4 | 48          |                 pha                  
 831:000 | DONE ins | na 16 16 | 0062b5 | a5 0a       |                 lda.d 00020a         ; Input Source (SOURCE-ID)
 832:000 | DONE ins | na 16 16 | 0062b7 | 48          |                 pha                  
 833:000 | DONE ins | na 16 16 | 0062b8 | a5 0c       |                 lda.d 00020c         
 834:000 | DONE ins | na 16 16 | 0062ba | 48          |                 pha                  
 835:000 | DONE ins | na 16 16 | 0062bb | a5 0e       |                 lda.d 00020e         
 836:000 | DONE ins | na 16 16 | 0062bd | 48          |                 pha                  
 837:000 | DONE wsp | na 16 16 |        |             |
 838:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
 839:000 | DONE ins | na 16 16 | 0062be | a9 ff ff    |                 lda.# 0ffff          
 840:000 | DONE ins | na 16 16 | 0062c1 | 85 0a       |                 sta.d 00020a         
 841:000 | DONE wsp | na 16 16 |        |             |
 842:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
 843:000 | DONE ins | na 16 16 | 0062c3 | 64 12       |                 stz.d 000212         
 844:000 | DONE wsp | na 16 16 |        |             |
 845:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
 846:000 | DONE ins | na 16 16 | 0062c5 | 84 0e       |                 sty.d 00020e         
 847:000 | DONE ins | na 16 16 | 0062c7 | b5 00       |                 lda.dx 00            
 848:000 | DONE ins | na 16 16 | 0062c9 | 85 0c       |                 sta.d 00020c         
 849:000 | DONE wsp | na 16 16 |        |             |
 850:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
 851:000 | DONE ins | na 16 16 | 0062cb | b4 02       |                 ldy.dx 02            
 852:000 | DONE ins | na 16 16 | 0062cd | e8          |                 inx                  
 853:000 | DONE ins | na 16 16 | 0062ce | e8          |                 inx                  
 854:000 | DONE ins | na 16 16 | 0062cf | e8          |                 inx                  
 855:000 | DONE ins | na 16 16 | 0062d0 | e8          |                 inx                  
 856:000 | DONE wsp | na 16 16 |        |             |
 857:000 | DONE ins | na 16 16 | 0062d1 | 20 74 67    |                 jsr 006774           
 858:000 | DONE wsp | na 16 16 |        |             |
 859:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
 860:000 | DONE ins | na 16 16 | 0062d4 | 68          |                 pla                  
 861:000 | DONE ins | na 16 16 | 0062d5 | 85 0e       |                 sta.d 00020e         
 862:000 | DONE ins | na 16 16 | 0062d7 | 68          |                 pla                  
 863:000 | DONE ins | na 16 16 | 0062d8 | 85 0c       |                 sta.d 00020c         
 864:000 | DONE ins | na 16 16 | 0062da | 68          |                 pla                  
 865:000 | DONE ins | na 16 16 | 0062db | 85 0a       |                 sta.d 00020a         
 866:000 | DONE ins | na 16 16 | 0062dd | 68          |                 pla                  
 867:000 | DONE ins | na 16 16 | 0062de | 85 12       |                 sta.d 000212         
 868:000 | DONE wsp | na 16 16 |        |             |
 869:000 | DONE lbl | na 16 16 | 0062e0 |             | z_evaluate                           
 869:001 | DONE ins | na 16 16 | 0062e0 | 60          |                 rts                  
 870:000 | DONE wsp | na 16 16 |        |             |
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 873:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
 874:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
 875:000 | DONE wsp | na 16 16 |        |             |
 876:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
 877:000 | DONE cmt | na 16 16 |        |             | ; range
 878:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
 879:000 | DONE lbl | na 16 16 | 0062e1 |             | execute_ip                           
 879:001 | DONE dir | na 16 16 | 0062e1 | (3 bytes)   |         .byte 00, 00, 00             
 879:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
 880:000 | DONE wsp | na 16 16 |        |             |
 881:000 | DONE lbl | na 16 16 | 0062e4 |             | a_execute                            
 882:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 883:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
 884:000 | DONE ins | na 16 16 | 0062e4 | 8c e1 62    |                 sty 0062e1           
 885:000 | DONE ins | na 16 16 | 0062e7 | b4 00       |                 ldy.dx 00            
 886:000 | DONE ins | na 16 16 | 0062e9 | e8          |                 inx                  
 887:000 | DONE ins | na 16 16 | 0062ea | e8          |                 inx                  
 888:000 | DONE wsp | na 16 16 |        |             |
 889:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need, and all the
 890:000 | DONE cmt | na 16 16 |        |             |                 ; Forth commands end with a RTS instruction. We fake the address
 891:000 | DONE cmt | na 16 16 |        |             |                 ; by saving it by hand to the stack
 892:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 893:000 | DONE ins | na 16 16 | 0062eb | a9 f2 62    |                 lda.# 0062f2         
 894:000 | DONE ins | na 16 16 | 0062ee | 48          |                 pha                  
 895:000 | DONE ins | na 16 16 | 0062ef | 6c e1 62    |                 jmp.i 0062e1         ; JMP (EXECUTE_IP)
 896:000 | DONE wsp | na 16 16 |        |             |
 897:000 | DONE lbl | na 16 16 | 0062f2 |             | execute_done                         ; keep the NOP here as the landing site for the indirect
 898:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine jump (easier and quicker than adjusting the
 899:000 | DONE cmt | na 16 16 |        |             |                 ; return address on the stack)
 900:000 | DONE ins | na 16 16 | 0062f2 | ea          |                 nop                  
 901:000 | DONE wsp | na 16 16 |        |             |
 902:000 | DONE lbl | na 16 16 | 0062f3 |             | z_execute                            
 902:001 | DONE ins | na 16 16 | 0062f3 | 60          |                 rts                  
 903:000 | DONE wsp | na 16 16 |        |             |
 904:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 905:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
 906:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
 907:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have a_zero/z_zero instead of
 908:000 | DONE cmt | na 16 16 |        |             | ; a_false/z_false
 909:000 | DONE wsp | na 16 16 |        |             |
 910:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 911:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
 912:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
 913:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
 914:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
 915:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
 916:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
 917:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
 918:000 | DONE lbl | na 16 16 | 0062f4 |             | a_find-name                          
 919:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
 920:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
 921:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
 922:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
 923:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
 924:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
 925:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
 926:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
 927:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 928:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 929:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
 930:000 | DONE ins | na 16 16 | 0062f4 | 84 06       |                 sty.d 000206         ; length of mystery string in tmptos, Y now free
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE ins | na 16 16 | 0062f6 | a4 02       |                 ldy.d 000202         
 933:000 | DONE ins | na 16 16 | 0062f8 | 84 16       |                 sty.d 000216         ; nt of first Dictionary word
 934:000 | DONE wsp | na 16 16 |        |             |
 935:000 | DONE ins | na 16 16 | 0062fa | b4 00       |                 ldy.dx 00            
 936:000 | DONE ins | na 16 16 | 0062fc | 84 18       |                 sty.d 000218         ; address of mystery string, was NOS
 937:000 | DONE wsp | na 16 16 |        |             |
 938:000 | DONE lbl | na 16 16 | 0062fe |             | find-name_loop                       
 939:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
 940:000 | DONE ins | na 16 16 | 0062fe | b2 16       |                 lda.di 000216        ; LSB in first header word is length
 941:000 | DONE ins | na 16 16 | 006300 | 29 ff 00    |                 and.# 00ff           
 942:000 | DONE ins | na 16 16 | 006303 | c5 06       |                 cmp.d 000206         ; we test LSB
 943:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
 944:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
 945:000 | DONE cmt | na 16 16 |        |             |                 ; same
 946:000 | DONE ins | na 16 16 | 006305 | f0 0c       |                 beq 006313           
 947:000 | DONE wsp | na 16 16 |        |             |
 948:000 | DONE lbl | na 16 16 | 006307 |             | find-name_next_entry                 
 949:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
 950:000 | DONE ins | na 16 16 | 006307 | e6 16       |                 inc.d 000216         
 951:000 | DONE ins | na 16 16 | 006309 | e6 16       |                 inc.d 000216         
 952:000 | DONE ins | na 16 16 | 00630b | b2 16       |                 lda.di 000216        ; LDA (TMP1)
 953:000 | DONE wsp | na 16 16 |        |             |
 954:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
 955:000 | DONE ins | na 16 16 | 00630d | f0 36       |                 beq 006345           
 956:000 | DONE wsp | na 16 16 |        |             |
 957:000 | DONE ins | na 16 16 | 00630f | 85 16       |                 sta.d 000216         ; new header
 958:000 | DONE ins | na 16 16 | 006311 | 80 eb       |                 bra 0062fe           
 959:000 | DONE wsp | na 16 16 |        |             |
 960:000 | DONE lbl | na 16 16 | 006313 |             | find-name_chars                      
 961:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
 962:000 | DONE wsp | na 16 16 |        |             |
 963:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
 964:000 | DONE ins | na 16 16 | 006313 | e2 20       |                 sep 20               
 964:001 | DONE ctl | na  8 16 |        |             |         .!a8
 965:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
 966:000 | DONE cmt | na  8 16 |        |             |                 ; header
 967:000 | DONE ins | na  8 16 | 006315 | a0 08 00    |                 ldy.# 0008           
 968:000 | DONE ins | na  8 16 | 006318 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y - first char of entry
 969:000 | DONE ins | na  8 16 | 00631a | d2 18       |                 cmp.di 000218        ; CMP (TMP2) - first char of mystery string
 970:000 | DONE ins | na  8 16 | 00631c | f0 04       |                 beq 006322           
 971:000 | DONE wsp | na  8 16 |        |             |
 972:000 | DONE lbl | na  8 16 | 00631e |             | find-name_char_nomatch_8             
 973:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
 974:000 | DONE ins | na  8 16 | 00631e | c2 20       |                 rep 20               
 974:001 | DONE ctl | na 16 16 |        |             |         .!a16
 975:000 | DONE ins | na 16 16 | 006320 | 80 e5       |                 bra 006307           
 976:000 | DONE wsp | na 16 16 |        |             |
 977:000 | DONE lbl | na 16 16 | 006322 |             | find-name_all_chars                  
 978:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 979:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
 980:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
 981:000 | DONE ins | na  8 16 | 006322 | a4 06       |                 ldy.d 000206         
 982:000 | DONE ins | na  8 16 | 006324 | 88          |                 dey                  ; faster and shorter than CPY.# 01
 983:000 | DONE ins | na  8 16 | 006325 | f0 18       |                 beq 00633f           
 984:000 | DONE wsp | na  8 16 |        |             |
 985:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
 986:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
 987:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
 988:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
 989:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
 990:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
 991:000 | DONE wsp | na  8 16 |        |             |
 992:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
 993:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
 994:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
 995:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
 996:000 | DONE ins | na  8 16 | 006327 | c2 20       |                 rep 20               
 996:001 | DONE ctl | na 16 16 |        |             |         .!a16
 997:000 | DONE ins | na 16 16 | 006329 | a5 16       |                 lda.d 000216         ; address of Dictionary string
 998:000 | DONE ins | na 16 16 | 00632b | 18          |                 clc                  
 999:000 | DONE ins | na 16 16 | 00632c | 69 08 00    |                 adc.# 0008           
1000:000 | DONE ins | na 16 16 | 00632f | 85 1a       |                 sta.d 00021a         
1001:000 | DONE ins | na 16 16 | 006331 | e2 20       |                 sep 20               
1001:001 | DONE ctl | na  8 16 |        |             |         .!a8
1002:000 | DONE ins | na  8 16 | 006333 | a4 06       |                 ldy.d 000206         ; get length of strings as loop index
1003:000 | DONE ins | na  8 16 | 006335 | 88          |                 dey                  ; first index is length minus 1
1004:000 | DONE wsp | na  8 16 |        |             |
1005:000 | DONE lbl | na  8 16 | 006336 |             | @                                    
1006:000 | DONE ins | na  8 16 | 006336 | b1 18       |                 lda.diy 000218       ; LDA (TMP2),Y - last char of mystery string
1007:000 | DONE ins | na  8 16 | 006338 | d1 1a       |                 cmp.diy 00021a       ; CMP (TMP1),Y - last char of DP string
1008:000 | DONE ins | na  8 16 | 00633a | d0 e2       |                 bne 00631e           
1009:000 | DONE ins | na  8 16 | 00633c | 88          |                 dey                  ; start of string (Y=0) was already tested
1010:000 | DONE ins | na  8 16 | 00633d | d0 f7       |                 bne 006336           
1011:000 | DONE wsp | na  8 16 |        |             |
1012:000 | DONE lbl | na  8 16 | 00633f |             | find-name_success                    
1013:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1014:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1015:000 | DONE ins | na  8 16 | 00633f | c2 20       |                 rep 20               
1015:001 | DONE ctl | na 16 16 |        |             |         .!a16
1016:000 | DONE ins | na 16 16 | 006341 | a4 16       |                 ldy.d 000216         ; get the correct DP
1017:000 | DONE ins | na 16 16 | 006343 | 80 03       |                 bra 006348           
1018:000 | DONE wsp | na 16 16 |        |             |
1019:000 | DONE wsp | na 16 16 |        |             |
1020:000 | DONE lbl | na 16 16 | 006345 |             | find-name_failure_16                 
1021:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1022:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1023:000 | DONE ins | na 16 16 | 006345 | a0 00 00    |                 ldy.# 0000           ; fall thru
1024:000 | DONE wsp | na 16 16 |        |             |
1025:000 | DONE lbl | na 16 16 | 006348 |             | find-name_done                       
1026:000 | DONE ins | na 16 16 | 006348 | e8          |                 inx                  ; drop old address (NIP)
1027:000 | DONE ins | na 16 16 | 006349 | e8          |                 inx                  
1028:000 | DONE wsp | na 16 16 |        |             |
1029:000 | DONE lbl | na 16 16 | 00634a |             | z_find-name                          
1029:001 | DONE ins | na 16 16 | 00634a | 60          |                 rts                  
1030:000 | DONE wsp | na 16 16 |        |             |
1031:000 | DONE wsp | na 16 16 |        |             |
1032:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1033:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
1034:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
1035:000 | DONE lbl | na 16 16 | 00634b |             | a_here                               
1036:000 | DONE dir | na 16 16 |        |             |         .!a16                        ; paranoid
1037:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1038:000 | DONE ins | na 16 16 | 00634b | ca          |                 dex                  
1039:000 | DONE ins | na 16 16 | 00634c | ca          |                 dex                  
1040:000 | DONE ins | na 16 16 | 00634d | 94 00       |                 sty.dx 00            
1041:000 | DONE wsp | na 16 16 |        |             |
1042:000 | DONE ins | na 16 16 | 00634f | a4 00       |                 ldy.d 000200         
1043:000 | DONE wsp | na 16 16 |        |             |
1044:000 | DONE lbl | na 16 16 | 006351 |             | z_here                               
1044:001 | DONE ins | na 16 16 | 006351 | 60          |                 rts                  
1045:000 | DONE wsp | na 16 16 |        |             |
1046:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1047:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
1048:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
1049:000 | DONE lbl | na 16 16 | 006352 |             | a_name-int                           
1050:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1051:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1052:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
1053:000 | DONE ins | na 16 16 | 006352 | c8          |                 iny                  
1054:000 | DONE ins | na 16 16 | 006353 | c8          |                 iny                  
1055:000 | DONE ins | na 16 16 | 006354 | c8          |                 iny                  
1056:000 | DONE ins | na 16 16 | 006355 | c8          |                 iny                  
1057:000 | DONE ins | na 16 16 | 006356 | b9 00 00    |                 lda.y 0000           
1058:000 | DONE ins | na 16 16 | 006359 | a8          |                 tay                  
1059:000 | DONE wsp | na 16 16 |        |             |
1060:000 | DONE lbl | na 16 16 | 00635a |             | z_name-int                           
1060:001 | DONE ins | na 16 16 | 00635a | 60          |                 rts                  
1061:000 | DONE wsp | na 16 16 |        |             |
1062:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1063:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
1064:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
1065:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
1066:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
1067:000 | DONE lbl | na 16 16 | 00635b |             | a_name>string                        
1068:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1069:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1070:000 | DONE ins | na 16 16 | 00635b | ca          |                 dex                  ; move NOS down one
1071:000 | DONE ins | na 16 16 | 00635c | ca          |                 dex                  
1072:000 | DONE wsp | na 16 16 |        |             |
1073:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
1074:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
1075:000 | DONE ins | na 16 16 | 00635d | 98          |                 tya                  
1076:000 | DONE ins | na 16 16 | 00635e | 18          |                 clc                  
1077:000 | DONE ins | na 16 16 | 00635f | 69 08 00    |                 adc.# 0008           
1078:000 | DONE ins | na 16 16 | 006362 | 95 00       |                 sta.dx 00            ; NOS
1079:000 | DONE wsp | na 16 16 |        |             |
1080:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
1081:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
1082:000 | DONE ins | na 16 16 | 006364 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1083:000 | DONE ins | na 16 16 | 006367 | 29 ff 00    |                 and.# 00ff           ; mask all but length byte
1084:000 | DONE ins | na 16 16 | 00636a | a8          |                 tay                  
1085:000 | DONE wsp | na 16 16 |        |             |
1086:000 | DONE lbl | na 16 16 | 00636b |             | z_name>string                        
1086:001 | DONE ins | na 16 16 | 00636b | 60          |                 rts                  
1087:000 | DONE wsp | na 16 16 |        |             |
1088:000 | DONE wsp | na 16 16 |        |             |
1089:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1090:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
1091:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
1092:000 | DONE lbl | na 16 16 | 00636c |             | a_nip                                
1093:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1094:000 | DONE ins | na 16 16 | 00636c | e8          |                 inx                  
1095:000 | DONE ins | na 16 16 | 00636d | e8          |                 inx                  
1096:000 | DONE lbl | na 16 16 | 00636e |             | z_nip                                
1096:001 | DONE ins | na 16 16 | 00636e | 60          |                 rts                  
1097:000 | DONE wsp | na 16 16 |        |             |
1098:000 | DONE wsp | na 16 16 |        |             |
1099:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1100:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
1101:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
1102:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
1103:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
1104:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
1105:000 | DONE lbl | na 16 16 | 00636f |             | a_pad                                
1106:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1107:000 | DONE ins | na 16 16 | 00636f | ca          |                 dex                  
1108:000 | DONE ins | na 16 16 | 006370 | ca          |                 dex                  
1109:000 | DONE ins | na 16 16 | 006371 | 94 00       |                 sty.dx 00            
1110:000 | DONE wsp | na 16 16 |        |             |
1111:000 | DONE ins | na 16 16 | 006373 | a5 00       |                 lda.d 000200         
1112:000 | DONE ins | na 16 16 | 006375 | 18          |                 clc                  
1113:000 | DONE ins | na 16 16 | 006376 | 69 7f 00    |                 adc.# 00007f         
1114:000 | DONE ins | na 16 16 | 006379 | a8          |                 tay                  
1115:000 | DONE wsp | na 16 16 |        |             |
1116:000 | DONE lbl | na 16 16 | 00637a |             | z_pad                                
1116:001 | DONE ins | na 16 16 | 00637a | 60          |                 rts                  
1117:000 | DONE wsp | na 16 16 |        |             |
1118:000 | DONE wsp | na 16 16 |        |             |
1119:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1120:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
1121:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
1122:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
1123:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
1124:000 | DONE lbl | na 16 16 | 00637b |             | a_page                               
1125:000 | DONE ins | na 16 16 | 00637b | a9 e3 69    |                 lda.# 0069e3         
1126:000 | DONE ins | na 16 16 | 00637e | 20 a4 67    |                 jsr 0067a4           
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
1129:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
1130:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
1131:000 | DONE ins | na 16 16 | 006381 | a9 e8 69    |                 lda.# 0069e8         
1132:000 | DONE ins | na 16 16 | 006384 | 20 a4 67    |                 jsr 0067a4           
1133:000 | DONE wsp | na 16 16 |        |             |
1134:000 | DONE lbl | na 16 16 | 006387 |             | z_page                               
1134:001 | DONE ins | na 16 16 | 006387 | 60          |                 rts                  
1135:000 | DONE wsp | na 16 16 |        |             |
1136:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1137:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
1138:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
1139:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
1140:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
1141:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
1142:000 | DONE lbl | na 16 16 | 006388 |             | a_parse-name                         
1143:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1144:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1145:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
1146:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
1147:000 | DONE ins | na 16 16 | 006388 | 5a          |                 phy                  ; save TOS for later use
1148:000 | DONE ins | na 16 16 | 006389 | a4 12       |                 ldy.d 000212         ; >IN
1149:000 | DONE ins | na 16 16 | 00638b | e2 20       |                 sep 20               
1149:001 | DONE ctl | na  8 16 |        |             |         .!a8
1150:000 | DONE lbl | na  8 16 | 00638d |             | parse-name_loop                      
1151:000 | DONE ins | na  8 16 | 00638d | c4 0e       |                 cpy.d 00020e         ; end of line?
1152:000 | DONE ins | na  8 16 | 00638f | f0 09       |                 beq 00639a           
1153:000 | DONE wsp | na  8 16 |        |             |
1154:000 | DONE ins | na  8 16 | 006391 | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1155:000 | DONE ins | na  8 16 | 006393 | c9 20       |                 cmp.# AscSP          
1156:000 | DONE ins | na  8 16 | 006395 | d0 17       |                 bne 0063ae           
1157:000 | DONE ins | na  8 16 | 006397 | c8          |                 iny                  
1158:000 | DONE ins | na  8 16 | 006398 | 80 f3       |                 bra 00638d           
1159:000 | DONE wsp | na  8 16 |        |             |
1160:000 | DONE lbl | na  8 16 | 00639a |             | parse-name_empty_line                
1161:000 | DONE ins | na  8 16 | 00639a | c2 20       |                 rep 20               
1161:001 | DONE ctl | na 16 16 |        |             |         .!a16
1162:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
1163:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
1164:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
1165:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
1166:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
1167:000 | DONE ins | na 16 16 | 00639c | ca          |                 dex                  
1168:000 | DONE ins | na 16 16 | 00639d | ca          |                 dex                  
1169:000 | DONE ins | na 16 16 | 00639e | ca          |                 dex                  
1170:000 | DONE ins | na 16 16 | 00639f | ca          |                 dex                  
1171:000 | DONE wsp | na 16 16 |        |             |
1172:000 | DONE ins | na 16 16 | 0063a0 | 7a          |                 ply                  ; restore old TOS as 3OS
1173:000 | DONE ins | na 16 16 | 0063a1 | 94 02       |                 sty.dx 02            
1174:000 | DONE wsp | na 16 16 |        |             |
1175:000 | DONE ins | na 16 16 | 0063a3 | a5 0c       |                 lda.d 00020c         
1176:000 | DONE ins | na 16 16 | 0063a5 | 18          |                 clc                  
1177:000 | DONE ins | na 16 16 | 0063a6 | 65 0e       |                 adc.d 00020e         
1178:000 | DONE ins | na 16 16 | 0063a8 | 95 00       |                 sta.dx 00            ; Address as NOS
1179:000 | DONE wsp | na 16 16 |        |             |
1180:000 | DONE ins | na 16 16 | 0063aa | a0 00 00    |                 ldy.# 0000           ; TOS
1181:000 | DONE wsp | na 16 16 |        |             |
1182:000 | DONE ins | na 16 16 | 0063ad | 60          |                 rts                  ; don't have to go through PARSE
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE lbl | na 16 16 | 0063ae |             | parse-name_found                     
1185:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1186:000 | DONE ins | na 16 16 | 0063ae | c2 20       |                 rep 20               
1186:001 | DONE ctl | na 16 16 |        |             |         .!a16
1187:000 | DONE ins | na 16 16 | 0063b0 | 84 12       |                 sty.d 000212         ; new >IN
1188:000 | DONE wsp | na 16 16 |        |             |
1189:000 | DONE ins | na 16 16 | 0063b2 | 7a          |                 ply                  ; recover TOS
1190:000 | DONE ins | na 16 16 | 0063b3 | ca          |                 dex                  
1191:000 | DONE ins | na 16 16 | 0063b4 | ca          |                 dex                  
1192:000 | DONE ins | na 16 16 | 0063b5 | 94 00       |                 sty.dx 00            
1193:000 | DONE wsp | na 16 16 |        |             |
1194:000 | DONE ins | na 16 16 | 0063b7 | a0 20 00    |                 ldy.# AscSP          ; put space on TOS for PARSE
1195:000 | DONE wsp | na 16 16 |        |             |
1196:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
1197:000 | DONE wsp | na 16 16 |        |             |
1198:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1199:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
1200:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
1201:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
1202:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
1203:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
1204:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
1205:000 | DONE cmt | na 16 16 |        |             | ;
1206:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
1207:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
1208:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
1209:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
1210:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
1211:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
1212:000 | DONE cmt | na 16 16 |        |             | ;
1213:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
1214:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
1215:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
1216:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
1217:000 | DONE lbl | na 16 16 | 0063ba |             | a_parse                              
1218:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1219:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1220:000 | DONE ins | na 16 16 | 0063ba | 84 16       |                 sty.d 000216         ; save delimiter, char is LSB
1221:000 | DONE wsp | na 16 16 |        |             |
1222:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
1223:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
1224:000 | DONE cmt | na 16 16 |        |             |                 ; return
1225:000 | DONE ins | na 16 16 | 0063bc | a5 12       |                 lda.d 000212         
1226:000 | DONE ins | na 16 16 | 0063be | 85 1a       |                 sta.d 00021a         ; save >IN for later length calculation
1227:000 | DONE ins | na 16 16 | 0063c0 | 18          |                 clc                  
1228:000 | DONE ins | na 16 16 | 0063c1 | 65 0c       |                 adc.d 00020c         
1229:000 | DONE wsp | na 16 16 |        |             |
1230:000 | DONE ins | na 16 16 | 0063c3 | ca          |                 dex                  ; save addr as NOS
1231:000 | DONE ins | na 16 16 | 0063c4 | ca          |                 dex                  
1232:000 | DONE ins | na 16 16 | 0063c5 | 95 00       |                 sta.dx 00            
1233:000 | DONE wsp | na 16 16 |        |             |
1234:000 | DONE ins | na 16 16 | 0063c7 | 64 18       |                 stz.d 000218         ; offset for EOL/char found adjustment of >IN
1235:000 | DONE wsp | na 16 16 |        |             |
1236:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
1237:000 | DONE ins | na 16 16 | 0063c9 | a4 12       |                 ldy.d 000212         
1238:000 | DONE ins | na 16 16 | 0063cb | e2 20       |                 sep 20               
1238:001 | DONE ctl | na  8 16 |        |             |         .!a8
1239:000 | DONE wsp | na  8 16 |        |             |
1240:000 | DONE lbl | na  8 16 | 0063cd |             | parse_loop                           
1241:000 | DONE ins | na  8 16 | 0063cd | c4 0e       |                 cpy.d 00020e         ; check for EOL first
1242:000 | DONE ins | na  8 16 | 0063cf | f0 0d       |                 beq 0063de           
1243:000 | DONE wsp | na  8 16 |        |             |
1244:000 | DONE ins | na  8 16 | 0063d1 | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1245:000 | DONE ins | na  8 16 | 0063d3 | c5 16       |                 cmp.d 000216         ; found delimiter?
1246:000 | DONE ins | na  8 16 | 0063d5 | f0 03       |                 beq 0063da           
1247:000 | DONE ins | na  8 16 | 0063d7 | c8          |                 iny                  
1248:000 | DONE ins | na  8 16 | 0063d8 | 80 f3       |                 bra 0063cd           
1249:000 | DONE wsp | na  8 16 |        |             |
1250:000 | DONE lbl | na  8 16 | 0063da |             | parse_found_delimiter                
1251:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
1252:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
1253:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
1254:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
1255:000 | DONE ins | na  8 16 | 0063da | c2 20       |                 rep 20               
1255:001 | DONE ctl | na 16 16 |        |             |         .!a16
1256:000 | DONE ins | na 16 16 | 0063dc | e6 18       |                 inc.d 000218         
1257:000 | DONE wsp | na 16 16 |        |             |
1258:000 | DONE lbl | na 16 16 | 0063de |             | parse_reached_eol                    
1259:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
1260:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1261:000 | DONE ins | na 16 16 | 0063de | c2 20       |                 rep 20               
1261:001 | DONE ctl | na 16 16 |        |             |         .!a16
1262:000 | DONE ins | na 16 16 | 0063e0 | 98          |                 tya                  
1263:000 | DONE ins | na 16 16 | 0063e1 | 38          |                 sec                  
1264:000 | DONE ins | na 16 16 | 0063e2 | e5 1a       |                 sbc.d 00021a         ; original value for >IN / index of first char
1265:000 | DONE ins | na 16 16 | 0063e4 | 48          |                 pha                  ; save so we can manipulate Y
1266:000 | DONE wsp | na 16 16 |        |             |
1267:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
1268:000 | DONE ins | na 16 16 | 0063e5 | 98          |                 tya                  
1269:000 | DONE ins | na 16 16 | 0063e6 | 18          |                 clc                  
1270:000 | DONE ins | na 16 16 | 0063e7 | 65 18       |                 adc.d 000218         ; offset for EOL vs found delimiter
1271:000 | DONE ins | na 16 16 | 0063e9 | 85 12       |                 sta.d 000212         
1272:000 | DONE wsp | na 16 16 |        |             |
1273:000 | DONE ins | na 16 16 | 0063eb | 7a          |                 ply                  ; length of string in TOS
1274:000 | DONE wsp | na 16 16 |        |             |
1275:000 | DONE lbl | na 16 16 | 0063ec |             | z_parse-name                         
1276:000 | DONE lbl | na 16 16 | 0063ec |             | z_parse                              
1276:001 | DONE ins | na 16 16 | 0063ec | 60          |                 rts                  
1277:000 | DONE wsp | na 16 16 |        |             |
1278:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1279:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
1280:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
1281:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
1282:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
1283:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
1284:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
1285:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
1286:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
1287:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
1288:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
1289:000 | DONE lbl | na 16 16 | 0063ed |             | a_refill                             
1290:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1291:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1292:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
1293:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
1294:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
1295:000 | DONE ins | na 16 16 | 0063ed | a5 0c       |                 lda.d 00020c         
1296:000 | DONE ins | na 16 16 | 0063ef | 49 00 01    |                 eor.# 0100           ; flip 07d00 / 07c00
1297:000 | DONE ins | na 16 16 | 0063f2 | 85 0c       |                 sta.d 00020c         
1298:000 | DONE wsp | na 16 16 |        |             |
1299:000 | DONE ins | na 16 16 | 0063f4 | a5 0e       |                 lda.d 00020e         ; current length is now previous length
1300:000 | DONE ins | na 16 16 | 0063f6 | 85 10       |                 sta.d 000210         
1301:000 | DONE wsp | na 16 16 |        |             |
1302:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
1303:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
1304:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
1305:000 | DONE ins | na 16 16 | 0063f8 | a5 0a       |                 lda.d 00020a         
1306:000 | DONE ins | na 16 16 | 0063fa | d0 14       |                 bne 006410           
1307:000 | DONE wsp | na 16 16 |        |             |
1308:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
1309:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
1310:000 | DONE ins | na 16 16 | 0063fc | ca          |                 dex                  ; push Data Stack down twice
1311:000 | DONE ins | na 16 16 | 0063fd | ca          |                 dex                  
1312:000 | DONE ins | na 16 16 | 0063fe | 94 00       |                 sty.dx 00            
1313:000 | DONE wsp | na 16 16 |        |             |
1314:000 | DONE ins | na 16 16 | 006400 | a5 0c       |                 lda.d 00020c         ; address of current input buffer NOS
1315:000 | DONE ins | na 16 16 | 006402 | ca          |                 dex                  
1316:000 | DONE ins | na 16 16 | 006403 | ca          |                 dex                  
1317:000 | DONE ins | na 16 16 | 006404 | 95 00       |                 sta.dx 00            
1318:000 | DONE wsp | na 16 16 |        |             |
1319:000 | DONE ins | na 16 16 | 006406 | a0 ff 00    |                 ldy.# 0000ff         
1320:000 | DONE wsp | na 16 16 |        |             |
1321:000 | DONE ins | na 16 16 | 006409 | 20 57 61    |                 jsr 006157           ; ( addr n1 -- n2)
1322:000 | DONE wsp | na 16 16 |        |             |
1323:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
1324:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
1325:000 | DONE ins | na 16 16 | 00640c | a0 ff ff    |                 ldy.# 0ffff          
1326:000 | DONE wsp | na 16 16 |        |             |
1327:000 | DONE ins | na 16 16 | 00640f | 60          |                 rts                  
1328:000 | DONE wsp | na 16 16 |        |             |
1329:000 | DONE lbl | na 16 16 | 006410 |             | refill_src_not_kbd                   
1330:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
1331:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
1332:000 | DONE ins | na 16 16 | 006410 | 1a          |                 inc.a                
1333:000 | DONE ins | na 16 16 | 006411 | d0 06       |                 bne 006419           
1334:000 | DONE wsp | na 16 16 |        |             |
1335:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
1336:000 | DONE ins | na 16 16 | 006413 | ca          |                 dex                  
1337:000 | DONE ins | na 16 16 | 006414 | ca          |                 dex                  
1338:000 | DONE ins | na 16 16 | 006415 | 94 00       |                 sty.dx 00            
1339:000 | DONE ins | na 16 16 | 006417 | a8          |                 tay                  
1340:000 | DONE wsp | na 16 16 |        |             |
1341:000 | DONE ins | na 16 16 | 006418 | 60          |                 rts                  
1342:000 | DONE wsp | na 16 16 |        |             |
1343:000 | DONE lbl | na 16 16 | 006419 |             | refill_source_is_not_string          
1344:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
1345:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
1346:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
1347:000 | DONE ins | na 16 16 | 006419 | a9 a3 69    |                 lda.# 0069a3         
1348:000 | DONE ins | na 16 16 | 00641c | 4c 9e 67    |                 jmp 00679e           
1349:000 | DONE wsp | na 16 16 |        |             |
1350:000 | DONE lbl | na 16 16 | 00641f |             | z_refill                             
1350:001 | DONE ins | na 16 16 | 00641f | 60          |                 rts                  ; dummy for compiling
1351:000 | DONE wsp | na 16 16 |        |             |
1352:000 | DONE wsp | na 16 16 |        |             |
1353:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1354:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
1355:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
1356:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
1357:000 | DONE lbl | na 16 16 | 006420 |             | a_rot                                
1358:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1359:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1360:000 | DONE ins | na 16 16 | 006420 | b5 00       |                 lda.dx 00            ; save b
1361:000 | DONE ins | na 16 16 | 006422 | 94 00       |                 sty.dx 00            ; move c to NOS
1362:000 | DONE ins | na 16 16 | 006424 | b4 02       |                 ldy.dx 02            ; move a to TOS
1363:000 | DONE ins | na 16 16 | 006426 | 95 02       |                 sta.dx 02            ; save b as 3OS
1364:000 | DONE wsp | na 16 16 |        |             |
1365:000 | DONE lbl | na 16 16 | 006428 |             | z_rot                                
1365:001 | DONE ins | na 16 16 | 006428 | 60          |                 rts                  
1366:000 | DONE wsp | na 16 16 |        |             |
1367:000 | DONE wsp | na 16 16 |        |             |
1368:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1369:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
1370:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
1371:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
1372:000 | DONE wsp | na 16 16 |        |             |
1373:000 | DONE lbl | na 16 16 | 006429 |             | a_source                             
1373:001 | DONE ins | na 16 16 | 006429 | ca          |                 dex                  ; make room on Data Stack
1374:000 | DONE ins | na 16 16 | 00642a | ca          |                 dex                  
1375:000 | DONE ins | na 16 16 | 00642b | ca          |                 dex                  
1376:000 | DONE ins | na 16 16 | 00642c | ca          |                 dex                  
1377:000 | DONE ins | na 16 16 | 00642d | 94 02       |                 sty.dx 02            
1378:000 | DONE wsp | na 16 16 |        |             |
1379:000 | DONE ins | na 16 16 | 00642f | a5 0c       |                 lda.d 00020c         ; address of current input buffer as NOS
1380:000 | DONE ins | na 16 16 | 006431 | 95 00       |                 sta.dx 00            
1381:000 | DONE wsp | na 16 16 |        |             |
1382:000 | DONE ins | na 16 16 | 006433 | a4 0e       |                 ldy.d 00020e         ; length of current input buffer as TOS
1383:000 | DONE wsp | na 16 16 |        |             |
1384:000 | DONE lbl | na 16 16 | 006435 |             | z_source                             
1384:001 | DONE ins | na 16 16 | 006435 | 60          |                 rts                  
1385:000 | DONE wsp | na 16 16 |        |             |
1386:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1387:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
1388:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
1389:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
1390:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
1391:000 | DONE wsp | na 16 16 |        |             |
1392:000 | DONE lbl | na 16 16 | 006436 |             | a_source-id                          
1393:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1394:000 | DONE ins | na 16 16 | 006436 | ca          |                 dex                  
1395:000 | DONE ins | na 16 16 | 006437 | ca          |                 dex                  
1396:000 | DONE ins | na 16 16 | 006438 | 94 00       |                 sty.dx 00            
1397:000 | DONE ins | na 16 16 | 00643a | a4 0a       |                 ldy.d 00020a         
1398:000 | DONE wsp | na 16 16 |        |             |
1399:000 | DONE lbl | na 16 16 | 00643c |             | z_source-id                          
1399:001 | DONE ins | na 16 16 | 00643c | 60          |                 rts                  
1400:000 | DONE wsp | na 16 16 |        |             |
1401:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1402:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
1403:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
1404:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
1405:000 | DONE lbl | na 16 16 | 00643d |             | a_space                              
1406:000 | DONE ins | na 16 16 | 00643d | a9 20 00    |                 lda.# AscSP          
1407:000 | DONE ins | na 16 16 | 006440 | 20 30 60    |                 jsr 006030           
1408:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1409:000 | DONE wsp | na 16 16 |        |             |
1410:000 | DONE lbl | na 16 16 | 006443 |             | z_space                              
1410:001 | DONE ins | na 16 16 | 006443 | 60          |                 rts                  
1411:000 | DONE wsp | na 16 16 |        |             |
1412:000 | DONE wsp | na 16 16 |        |             |
1413:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1414:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
1415:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
1416:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
1417:000 | DONE lbl | na 16 16 | 006444 |             | a_spaces                             
1418:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1419:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1420:000 | DONE lbl | na 16 16 | 006444 |             | @                                    
1421:000 | DONE ins | na 16 16 | 006444 | 88          |                 dey                  ; this also handles case u=0
1422:000 | DONE ins | na 16 16 | 006445 | 30 05       |                 bmi 00644c           
1423:000 | DONE wsp | na 16 16 |        |             |
1424:000 | DONE ins | na 16 16 | 006447 | 20 3d 64    |                 jsr 00643d           
1425:000 | DONE ins | na 16 16 | 00644a | 80 f8       |                 bra 006444           
1426:000 | DONE wsp | na 16 16 |        |             |
1427:000 | DONE lbl | na 16 16 | 00644c |             | spaces_done                          
1428:000 | DONE ins | na 16 16 | 00644c | b4 00       |                 ldy.dx 00            ; DROP
1429:000 | DONE ins | na 16 16 | 00644e | e8          |                 inx                  
1430:000 | DONE ins | na 16 16 | 00644f | e8          |                 inx                  
1431:000 | DONE wsp | na 16 16 |        |             |
1432:000 | DONE lbl | na 16 16 | 006450 |             | z_spaces                             
1432:001 | DONE ins | na 16 16 | 006450 | 60          |                 rts                  
1433:000 | DONE wsp | na 16 16 |        |             |
1434:000 | DONE wsp | na 16 16 |        |             |
1435:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1436:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
1437:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
1438:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
1439:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
1440:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
1441:000 | DONE lbl | na 16 16 | 006451 |             | a_state                              
1442:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1443:000 | DONE ins | na 16 16 | 006451 | ca          |                 dex                  
1444:000 | DONE ins | na 16 16 | 006452 | ca          |                 dex                  
1445:000 | DONE ins | na 16 16 | 006453 | 94 00       |                 sty.dx 00            
1446:000 | DONE ins | na 16 16 | 006455 | a0 14 02    |                 ldy.# 000214         
1447:000 | DONE wsp | na 16 16 |        |             |
1448:000 | DONE lbl | na 16 16 | 006458 |             | z_state                              
1448:001 | DONE ins | na 16 16 | 006458 | 60          |                 rts                  
1449:000 | DONE wsp | na 16 16 |        |             |
1450:000 | DONE wsp | na 16 16 |        |             |
1451:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1452:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
1453:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
1454:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
1455:000 | DONE lbl | na 16 16 | 006459 |             | a_swap                               
1456:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1457:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1458:000 | DONE ins | na 16 16 | 006459 | b5 00       |                 lda.dx 00            
1459:000 | DONE ins | na 16 16 | 00645b | 94 00       |                 sty.dx 00            
1460:000 | DONE ins | na 16 16 | 00645d | a8          |                 tay                  
1461:000 | DONE wsp | na 16 16 |        |             |
1462:000 | DONE lbl | na 16 16 | 00645e |             | z_swap                               
1462:001 | DONE ins | na 16 16 | 00645e | 60          |                 rts                  
1463:000 | DONE wsp | na 16 16 |        |             |
1464:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1465:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
1466:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
1467:000 | DONE lbl | na 16 16 | 00645f |             | a_true                               
1468:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1469:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1470:000 | DONE ins | na 16 16 | 00645f | ca          |                 dex                  
1471:000 | DONE ins | na 16 16 | 006460 | ca          |                 dex                  
1472:000 | DONE ins | na 16 16 | 006461 | 94 00       |                 sty.dx 00            
1473:000 | DONE ins | na 16 16 | 006463 | a0 ff ff    |                 ldy.# 0ffff          
1474:000 | DONE wsp | na 16 16 |        |             |
1475:000 | DONE lbl | na 16 16 | 006466 |             | z_true                               
1475:001 | DONE ins | na 16 16 | 006466 | 60          |                 rts                  
1476:000 | DONE wsp | na 16 16 |        |             |
1477:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1478:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
1479:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
1480:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
1481:000 | DONE lbl | na 16 16 | 006467 |             | a_tuck                               
1482:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1483:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1484:000 | DONE ins | na 16 16 | 006467 | ca          |                 dex                  
1485:000 | DONE ins | na 16 16 | 006468 | ca          |                 dex                  
1486:000 | DONE ins | na 16 16 | 006469 | b5 02       |                 lda.dx 2             
1487:000 | DONE ins | na 16 16 | 00646b | 95 00       |                 sta.dx 0             
1488:000 | DONE ins | na 16 16 | 00646d | 94 02       |                 sty.dx 2             
1489:000 | DONE wsp | na 16 16 |        |             |
1490:000 | DONE lbl | na 16 16 | 00646f |             | z_tuck                               
1490:001 | DONE ins | na 16 16 | 00646f | 60          |                 rts                  
1491:000 | DONE wsp | na 16 16 |        |             |
1492:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1493:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
1494:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
1495:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
1496:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
1497:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
1498:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
1499:000 | DONE cmt | na 16 16 |        |             | ; running.
1500:000 | DONE lbl | na 16 16 | 006470 |             | a_type                               
1501:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1502:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1503:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
1504:000 | DONE ins | na 16 16 | 006470 | 98          |                 tya                  ; force flag check of TOS
1505:000 | DONE ins | na 16 16 | 006471 | f0 17       |                 beq 00648a           
1506:000 | DONE wsp | na 16 16 |        |             |
1507:000 | DONE ins | na 16 16 | 006473 | b5 00       |                 lda.dx 00            ; get address from NOS
1508:000 | DONE ins | na 16 16 | 006475 | 85 16       |                 sta.d 000216         
1509:000 | DONE ins | na 16 16 | 006477 | 84 18       |                 sty.d 000218         ; number of chars is TOS
1510:000 | DONE ins | na 16 16 | 006479 | a0 00 00    |                 ldy.# 0000           
1511:000 | DONE ins | na 16 16 | 00647c | e2 20       |                 sep 20               
1511:001 | DONE ctl | na  8 16 |        |             |         .!a8
1512:000 | DONE lbl | na  8 16 | 00647e |             | type_loop                            
1513:000 | DONE ins | na  8 16 | 00647e | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
1514:000 | DONE ins | na  8 16 | 006480 | 20 30 60    |                 jsr 006030           
1515:000 | DONE ins | na  8 16 | 006483 | c8          |                 iny                  
1516:000 | DONE ins | na  8 16 | 006484 | c4 18       |                 cpy.d 000218         
1517:000 | DONE ins | na  8 16 | 006486 | d0 f6       |                 bne 00647e           
1518:000 | DONE wsp | na  8 16 |        |             |
1519:000 | DONE ins | na  8 16 | 006488 | c2 20       |                 rep 20               
1519:001 | DONE ctl | na 16 16 |        |             |         .!a16
1520:000 | DONE lbl | na 16 16 | 00648a |             | type_done                            
1521:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
1522:000 | DONE ins | na 16 16 | 00648a | b4 02       |                 ldy.dx 02            
1523:000 | DONE ins | na 16 16 | 00648c | e8          |                 inx                  
1524:000 | DONE ins | na 16 16 | 00648d | e8          |                 inx                  
1525:000 | DONE ins | na 16 16 | 00648e | e8          |                 inx                  
1526:000 | DONE ins | na 16 16 | 00648f | e8          |                 inx                  
1527:000 | DONE wsp | na 16 16 |        |             |
1528:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
1529:000 | DONE wsp | na 16 16 |        |             |
1530:000 | DONE lbl | na 16 16 | 006490 |             | z_type                               
1530:001 | DONE ins | na 16 16 | 006490 | 60          |                 rts                  
1531:000 | DONE wsp | na 16 16 |        |             |
1532:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1533:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
1534:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
1535:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
1536:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
1537:000 | DONE lbl | na 16 16 | 006491 |             | a_unused                             
1538:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1539:000 | DONE ins | na 16 16 | 006491 | a9 ff 7b    |                 lda.# 007bff         
1540:000 | DONE ins | na 16 16 | 006494 | 38          |                 sec                  
1541:000 | DONE ins | na 16 16 | 006495 | e5 00       |                 sbc.d 000200         ; current compile pointer
1542:000 | DONE wsp | na 16 16 |        |             |
1543:000 | DONE ins | na 16 16 | 006497 | ca          |                 dex                  
1544:000 | DONE ins | na 16 16 | 006498 | ca          |                 dex                  
1545:000 | DONE ins | na 16 16 | 006499 | 94 00       |                 sty.dx 00            
1546:000 | DONE wsp | na 16 16 |        |             |
1547:000 | DONE ins | na 16 16 | 00649b | a8          |                 tay                  
1548:000 | DONE wsp | na 16 16 |        |             |
1549:000 | DONE lbl | na 16 16 | 00649c |             | z_unused                             
1549:001 | DONE ins | na 16 16 | 00649c | 60          |                 rts                  
1550:000 | DONE wsp | na 16 16 |        |             |
1551:000 | DONE wsp | na 16 16 |        |             |
1552:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1553:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
1554:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
1555:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
1556:000 | DONE lbl | na 16 16 | 00649d |             | a_words                              
1557:000 | DONE ins | na 16 16 | 00649d | 20 26 62    |                 jsr 006226           ; start on next line, this is a style choice
1558:000 | DONE wsp | na 16 16 |        |             |
1559:000 | DONE ins | na 16 16 | 0064a0 | a5 02       |                 lda.d 000202         ; nt of first entry in Dictionary (last added)
1560:000 | DONE ins | na 16 16 | 0064a2 | 48          |                 pha                  
1561:000 | DONE wsp | na 16 16 |        |             |
1562:000 | DONE ins | na 16 16 | 0064a3 | ca          |                 dex                  ; create room on TOS
1563:000 | DONE ins | na 16 16 | 0064a4 | ca          |                 dex                  
1564:000 | DONE ins | na 16 16 | 0064a5 | 94 00       |                 sty.dx 00            
1565:000 | DONE wsp | na 16 16 |        |             |
1566:000 | DONE lbl | na 16 16 | 0064a7 |             | words_loop                           
1567:000 | DONE ins | na 16 16 | 0064a7 | a8          |                 tay                  ; ( nt )
1568:000 | DONE wsp | na 16 16 |        |             |
1569:000 | DONE ins | na 16 16 | 0064a8 | 20 5b 63    |                 jsr 00635b           ; ( nt -- addr u )
1570:000 | DONE ins | na 16 16 | 0064ab | 20 70 64    |                 jsr 006470           ; ( addr u -- )
1571:000 | DONE ins | na 16 16 | 0064ae | 20 3d 64    |                 jsr 00643d           
1572:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1573:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1574:000 | DONE ins | na 16 16 | 0064b1 | 68          |                 pla                  
1575:000 | DONE wsp | na 16 16 |        |             |
1576:000 | DONE cmt | na 16 16 |        |             |                 ; the next nt is two bytes below the nt of the current one in
1577:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
1578:000 | DONE cmt | na 16 16 |        |             |                 ;
1579:000 | DONE ins | na 16 16 | 0064b2 | 1a          |                 inc.a                
1580:000 | DONE ins | na 16 16 | 0064b3 | 1a          |                 inc.a                
1581:000 | DONE wsp | na 16 16 |        |             |
1582:000 | DONE ins | na 16 16 | 0064b4 | ca          |                 dex                  
1583:000 | DONE ins | na 16 16 | 0064b5 | ca          |                 dex                  
1584:000 | DONE ins | na 16 16 | 0064b6 | 94 00       |                 sty.dx 00            
1585:000 | DONE wsp | na 16 16 |        |             |
1586:000 | DONE ins | na 16 16 | 0064b8 | a8          |                 tay                  
1587:000 | DONE ins | na 16 16 | 0064b9 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1588:000 | DONE ins | na 16 16 | 0064bc | 48          |                 pha                  
1589:000 | DONE ins | na 16 16 | 0064bd | d0 e8       |                 bne 0064a7           ; zero entry signals end of Dictionary
1590:000 | DONE wsp | na 16 16 |        |             |
1591:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
1592:000 | DONE ins | na 16 16 | 0064bf | 68          |                 pla                  ; balance MPU stack, value discarded
1593:000 | DONE wsp | na 16 16 |        |             |
1594:000 | DONE ins | na 16 16 | 0064c0 | b4 00       |                 ldy.dx 00            
1595:000 | DONE ins | na 16 16 | 0064c2 | e8          |                 inx                  
1596:000 | DONE ins | na 16 16 | 0064c3 | e8          |                 inx                  
1597:000 | DONE wsp | na 16 16 |        |             |
1598:000 | DONE lbl | na 16 16 | 0064c4 |             | z_words                              
1598:001 | DONE ins | na 16 16 | 0064c4 | 60          |                 rts                  
1599:000 | DONE wsp | na 16 16 |        |             |
1600:000 | DONE wsp | na 16 16 |        |             |
1601:000 | DONE wsp | na 16 16 |        |             |
1602:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1603:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
1604:000 | DONE wsp | na 16 16 |        |             |
1605:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
1605:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1605:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
1605:003 | DONE cmt | na 16 16 |        |             | ; This version: 09. Feb 2017
1605:004 | DONE wsp | na 16 16 |        |             |
1605:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
1605:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
1605:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
1605:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
1605:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
1605:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
1605:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "h_<WORD>" ("header") for the nt and "a_<WORD>" ("A" as the
1605:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
1605:013 | DONE cmt | na 16 16 |        |             | ;
1605:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure for each header:
1605:015 | DONE wsp | na 16 16 |        |             |
1605:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
1605:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
1605:018 | DONE cmt | na 16 16 |        |             | ; h_word ->  +--------+--------+
1605:019 | DONE cmt | na 16 16 |        |             | ;            | Length | Status |
1605:020 | DONE cmt | na 16 16 |        |             | ;         +2 +--------+--------+
1605:021 | DONE cmt | na 16 16 |        |             | ;            | Next Header     | -> h_next (nt of next word)
1605:022 | DONE cmt | na 16 16 |        |             | ;         +4 +-----------------+
1605:023 | DONE cmt | na 16 16 |        |             | ;            | Start of Code   | -> a_word (xt of this word)
1605:024 | DONE cmt | na 16 16 |        |             | ;         +6 +-----------------+
1605:025 | DONE cmt | na 16 16 |        |             | ;            | End of Code     | -> z_word
1605:026 | DONE cmt | na 16 16 |        |             | ;         +8 +--------+--------+
1605:027 | DONE cmt | na 16 16 |        |             | ;            | Name   |        |
1605:028 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1605:029 | DONE cmt | na 16 16 |        |             | ;            |        |        |
1605:030 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1605:031 | DONE cmt | na 16 16 |        |             | ;            |        |  ...   | (name string does not end with a zero)
1605:032 | DONE cmt | na 16 16 |        |             | ;         +n +--------+--------+
1605:033 | DONE wsp | na 16 16 |        |             |
1605:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
1605:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
1605:036 | DONE cmt | na 16 16 |        |             | ;
1605:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
1605:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
1605:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
1605:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
1605:041 | DONE wsp | na 16 16 |        |             |
1605:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
1605:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
1605:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
1605:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
1605:046 | DONE wsp | na 16 16 |        |             |
1605:047 | DONE lbl | na 16 16 | 0064c5 |             | h_bye                                
1605:048 | DONE dir | na 16 16 | 0064c5 | (1 bytes)   |         .byte 03                     ; length of word string
1605:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
1605:049 | DONE dir | na 16 16 | 0064c6 | (1 bytes)   |         .byte { PW + NC }            ; status byte
1605:049 | DONE dir | na 16 16 |        |             |                 90                       --  .
1605:050 | DONE dir | na 16 16 | 0064c7 | (2 bytes)   |         .word 0000                   ; next word in dictionary, 0000 signals end
1605:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
1605:051 | DONE dir | na 16 16 | 0064c9 | (2 bytes)   |         .word 006213                 ; start of code, the xt of this word
1605:051 | DONE dir | na 16 16 |        |             |                 13 62                    --  . b
1605:052 | DONE dir | na 16 16 | 0064cb | (2 bytes)   |         .word 006216                 ; end of code (points to RTS)
1605:052 | DONE dir | na 16 16 |        |             |                 16 62                    --  . b
1605:053 | DONE dir | na 16 16 | 0064cd | (3 bytes)   |         .byte 62, 79, 65             ; lowercase word name
1605:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
1605:054 | DONE wsp | na 16 16 |        |             |
1605:055 | DONE lbl | na 16 16 | 0064d0 |             | h_cold                               
1605:056 | DONE dir | na 16 16 | 0064d0 | (2 bytes)   |         .byte 4, 00                  
1605:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1605:057 | DONE dir | na 16 16 | 0064d2 | (6 bytes)   |         .word h_bye, a_cold, 0060d2  
1605:057 | DONE dir | na 16 16 |        |             |                 c5 64 5d 60 d2 60        --  . d ] ` . `
1605:058 | DONE dir | na 16 16 | 0064d8 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
1605:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
1605:059 | DONE wsp | na 16 16 |        |             |
1605:060 | DONE lbl | na 16 16 | 0064dc |             | h_words                              
1605:061 | DONE dir | na 16 16 | 0064dc | (2 bytes)   |         .byte 5, { PW + NC }         
1605:061 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1605:062 | DONE dir | na 16 16 | 0064de | (6 bytes)   |         .word h_cold, a_words, 0064c4 
1605:062 | DONE dir | na 16 16 |        |             |                 d0 64 9d 64 c4 64        --  . d . d . d
1605:063 | DONE dir | na 16 16 | 0064e4 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
1605:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
1605:064 | DONE wsp | na 16 16 |        |             |
1605:065 | DONE lbl | na 16 16 | 0064e9 |             | h_bell                               
1605:066 | DONE dir | na 16 16 | 0064e9 | (2 bytes)   |         .byte 4, { PW + NC }         
1605:066 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1605:067 | DONE dir | na 16 16 | 0064eb | (6 bytes)   |         .word h_words, a_bell, 00620a 
1605:067 | DONE dir | na 16 16 |        |             |                 dc 64 04 62 0a 62        --  . d . b 
 b
1605:068 | DONE dir | na 16 16 | 0064f1 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
1605:068 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
1605:069 | DONE wsp | na 16 16 |        |             |
1605:070 | DONE lbl | na 16 16 | 0064f5 |             | h_unused                             
1605:071 | DONE dir | na 16 16 | 0064f5 | (2 bytes)   |         .byte 6, { PW + NC }         
1605:071 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1605:072 | DONE dir | na 16 16 | 0064f7 | (6 bytes)   |         .word h_bell, a_unused, 00649c 
1605:072 | DONE dir | na 16 16 |        |             |                 e9 64 91 64 9c 64        --  . d . d . d
1605:073 | DONE dir | na 16 16 | 0064fd | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
1605:073 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
1605:074 | DONE wsp | na 16 16 |        |             |
1605:075 | DONE lbl | na 16 16 | 006503 |             | h_page                               
1605:076 | DONE dir | na 16 16 | 006503 | (2 bytes)   |         .byte 4, { PW + NC }         
1605:076 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1605:077 | DONE dir | na 16 16 | 006505 | (6 bytes)   |         .word h_unused, a_page, 006387 
1605:077 | DONE dir | na 16 16 |        |             |                 f5 64 7b 63 87 63        --  . d { c . c
1605:078 | DONE dir | na 16 16 | 00650b | (4 bytes)   |         .byte 70, 61, 67, 65         
1605:078 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
1605:079 | DONE wsp | na 16 16 |        |             |
1605:080 | DONE lbl | na 16 16 | 00650f |             | h_count                              
1605:081 | DONE dir | na 16 16 | 00650f | (2 bytes)   |         .byte 5, {NC + PW }          
1605:081 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1605:082 | DONE dir | na 16 16 | 006511 | (6 bytes)   |         .word h_page, a_count, 006225 
1605:082 | DONE dir | na 16 16 |        |             |                 03 65 17 62 25 62        --  . e . b % b
1605:083 | DONE dir | na 16 16 | 006517 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
1605:083 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
1605:084 | DONE wsp | na 16 16 |        |             |
1605:085 | DONE lbl | na 16 16 | 00651c |             | h_abort                              
1605:086 | DONE dir | na 16 16 | 00651c | (2 bytes)   |         .byte 5, 00                  ; TODO check flags
1605:086 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1605:087 | DONE dir | na 16 16 | 00651e | (6 bytes)   |         .word h_count, a_abort, 0060d2 
1605:087 | DONE dir | na 16 16 |        |             |                 0f 65 94 60 d2 60        --  . e . ` . `
1605:088 | DONE dir | na 16 16 | 006524 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
1605:088 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
1605:089 | DONE wsp | na 16 16 |        |             |
1605:090 | DONE lbl | na 16 16 | 006529 |             | h_parse                              
1605:091 | DONE dir | na 16 16 | 006529 | (2 bytes)   |         .byte 5, 00                  
1605:091 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1605:092 | DONE dir | na 16 16 | 00652b | (6 bytes)   |         .word h_abort, a_parse, 0063ec 
1605:092 | DONE dir | na 16 16 |        |             |                 1c 65 ba 63 ec 63        --  . e . c . c
1605:093 | DONE dir | na 16 16 | 006531 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
1605:093 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
1605:094 | DONE wsp | na 16 16 |        |             |
1605:095 | DONE lbl | na 16 16 | 006536 |             | h_quit                               
1605:096 | DONE dir | na 16 16 | 006536 | (2 bytes)   |         .byte 4, 00                  
1605:096 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1605:097 | DONE dir | na 16 16 | 006538 | (6 bytes)   |         .word h_parse, a_quit, 0060d2 
1605:097 | DONE dir | na 16 16 |        |             |                 29 65 9c 60 d2 60        --  ) e . ` . `
1605:098 | DONE dir | na 16 16 | 00653e | (4 bytes)   |         .byte 71, 75, 69, 74         
1605:098 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
1605:099 | DONE wsp | na 16 16 |        |             |
1605:100 | DONE lbl | na 16 16 | 006542 |             | h_name-int                           
1605:101 | DONE dir | na 16 16 | 006542 | (2 bytes)   |         .byte 8, { PW + NC }         
1605:101 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1605:102 | DONE dir | na 16 16 | 006544 | (6 bytes)   |         .word h_quit, a_name-int, 00635a 
1605:102 | DONE dir | na 16 16 |        |             |                 36 65 52 63 5a 63        --  6 e R c Z c
1605:103 | DONE dir | na 16 16 | 00654a | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
1605:103 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
1605:103 | DONE dir | na 16 16 |        |             |                                          -- 
1605:104 | DONE wsp | na 16 16 |        |             |
1605:105 | DONE lbl | na 16 16 | 006552 |             | h_cr                                 
1605:106 | DONE dir | na 16 16 | 006552 | (2 bytes)   |         .byte 2, { PW + NC }         
1605:106 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1605:107 | DONE dir | na 16 16 | 006554 | (6 bytes)   |         .word h_name-int, a_cr, 00622c 
1605:107 | DONE dir | na 16 16 |        |             |                 42 65 26 62 2c 62        --  B e & b , b
1605:108 | DONE dir | na 16 16 | 00655a | (2 bytes)   |         .byte 63, 72                 
1605:108 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
1605:109 | DONE wsp | na 16 16 |        |             |
1605:110 | DONE lbl | na 16 16 | 00655c |             | h_bl                                 
1605:111 | DONE dir | na 16 16 | 00655c | (2 bytes)   |         .byte 2, { PW + NC }         
1605:111 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1605:112 | DONE dir | na 16 16 | 00655e | (6 bytes)   |         .word h_cr, a_bl, 006212     
1605:112 | DONE dir | na 16 16 |        |             |                 52 65 0b 62 12 62        --  R e  b . b
1605:113 | DONE dir | na 16 16 | 006564 | (2 bytes)   |         .byte 62, 6c                 
1605:113 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
1605:114 | DONE wsp | na 16 16 |        |             |
1605:115 | DONE lbl | na 16 16 | 006566 |             | h_spaces                             
1605:116 | DONE dir | na 16 16 | 006566 | (2 bytes)   |         .byte 6, { PW + NC }         
1605:116 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1605:117 | DONE dir | na 16 16 | 006568 | (6 bytes)   |         .word h_bl, a_spaces, 006450 
1605:117 | DONE dir | na 16 16 |        |             |                 5c 65 44 64 50 64        --  \ e D d P d
1605:118 | DONE dir | na 16 16 | 00656e | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
1605:118 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
1605:119 | DONE wsp | na 16 16 |        |             |
1605:120 | DONE lbl | na 16 16 | 006574 |             | h_space                              
1605:121 | DONE dir | na 16 16 | 006574 | (2 bytes)   |         .byte 5, { PW + NC }         
1605:121 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1605:122 | DONE dir | na 16 16 | 006576 | (6 bytes)   |         .word h_spaces, a_space, 006443 
1605:122 | DONE dir | na 16 16 |        |             |                 66 65 3d 64 43 64        --  f e = d C d
1605:123 | DONE dir | na 16 16 | 00657c | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
1605:123 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
1605:124 | DONE wsp | na 16 16 |        |             |
1605:125 | DONE lbl | na 16 16 | 006581 |             | h_dots                               
1605:126 | DONE dir | na 16 16 | 006581 | (2 bytes)   |         .byte 2, { PW + NC }         
1605:126 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1605:127 | DONE dir | na 16 16 | 006583 | (6 bytes)   |         .word h_space, a_dots, 0062a7 
1605:127 | DONE dir | na 16 16 |        |             |                 74 65 60 62 a7 62        --  t e ` b . b
1605:128 | DONE dir | na 16 16 | 006589 | (2 bytes)   |         .byte 2e, 73                 
1605:128 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
1605:129 | DONE wsp | na 16 16 |        |             |
1605:130 | DONE lbl | na 16 16 | 00658b |             | h_dotparen                           
1605:131 | DONE dir | na 16 16 | 00658b | (2 bytes)   |         .byte 2, { IM + NC}          
1605:131 | DONE dir | na 16 16 |        |             |                 02 30                    --  . 0
1605:132 | DONE dir | na 16 16 | 00658d | (6 bytes)   |         .word h_dots, a_dotparen, 00625f 
1605:132 | DONE dir | na 16 16 |        |             |                 81 65 52 62 5f 62        --  . e R b _ b
1605:133 | DONE dir | na 16 16 | 006593 | (2 bytes)   |         .byte 2e, 28                 
1605:133 | DONE dir | na 16 16 |        |             |                 2e 28                    --  . (
1605:134 | DONE wsp | na 16 16 |        |             |
1605:135 | DONE lbl | na 16 16 | 006595 |             | h_type                               
1605:136 | DONE dir | na 16 16 | 006595 | (2 bytes)   |         .byte 4, 0                   
1605:136 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1605:137 | DONE dir | na 16 16 | 006597 | (6 bytes)   |         .word h_dotparen, a_type, 006490 
1605:137 | DONE dir | na 16 16 |        |             |                 8b 65 70 64 90 64        --  . e p d . d
1605:138 | DONE dir | na 16 16 | 00659d | (4 bytes)   |         .byte 74, 79, 70, 65         
1605:138 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
1605:139 | DONE wsp | na 16 16 |        |             |
1605:140 | DONE lbl | na 16 16 | 0065a1 |             | h_dot                                
1605:141 | DONE dir | na 16 16 | 0065a1 | (2 bytes)   |         .byte 1, { PW + NC }         
1605:141 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1605:142 | DONE dir | na 16 16 | 0065a3 | (6 bytes)   |         .word h_type, a_dot, 006251  
1605:142 | DONE dir | na 16 16 |        |             |                 95 65 3c 62 51 62        --  . e < b Q b
1605:143 | DONE dir | na 16 16 | 0065a9 | (1 bytes)   |         .byte 2e                     
1605:143 | DONE dir | na 16 16 |        |             |                 2e                       --  .
1605:144 | DONE wsp | na 16 16 |        |             |
1605:145 | DONE lbl | na 16 16 | 0065aa |             | h_pad                                
1605:146 | DONE dir | na 16 16 | 0065aa | (2 bytes)   |         .byte 3, { PW + NC }         
1605:146 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1605:147 | DONE dir | na 16 16 | 0065ac | (6 bytes)   |         .word h_dot, a_pad, 00637a   
1605:147 | DONE dir | na 16 16 |        |             |                 a1 65 6f 63 7a 63        --  . e o c z c
1605:148 | DONE dir | na 16 16 | 0065b2 | (3 bytes)   |         .byte 70, 61, 64             
1605:148 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
1605:149 | DONE wsp | na 16 16 |        |             |
1605:150 | DONE lbl | na 16 16 | 0065b5 |             | h_evaluate                           
1605:151 | DONE dir | na 16 16 | 0065b5 | (2 bytes)   |         .byte 8, { PW + NC }         
1605:151 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1605:152 | DONE dir | na 16 16 | 0065b7 | (6 bytes)   |         .word h_pad, a_evaluate, 0062e0 
1605:152 | DONE dir | na 16 16 |        |             |                 aa 65 b2 62 e0 62        --  . e . b . b
1605:153 | DONE dir | na 16 16 | 0065bd | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
1605:153 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
1605:153 | DONE dir | na 16 16 |        |             |                                          -- 
1605:154 | DONE wsp | na 16 16 |        |             |
1605:155 | DONE lbl | na 16 16 | 0065c5 |             | h_cells                              
1605:156 | DONE dir | na 16 16 | 0065c5 | (2 bytes)   |         .byte 5, { PW + NC }         ; 2* because we have 16 bit stack
1605:156 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1605:157 | DONE dir | na 16 16 | 0065c7 | (6 bytes)   |         .word h_evaluate, a_two-star, 006128 
1605:157 | DONE dir | na 16 16 |        |             |                 b5 65 25 61 28 61        --  . e % a ( a
1605:158 | DONE dir | na 16 16 | 0065cd | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
1605:158 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
1605:159 | DONE wsp | na 16 16 |        |             |
1605:160 | DONE lbl | na 16 16 | 0065d2 |             | h_allot                              
1605:161 | DONE dir | na 16 16 | 0065d2 | (2 bytes)   |         .byte 5, { PW + NC }         
1605:161 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1605:162 | DONE dir | na 16 16 | 0065d4 | (6 bytes)   |         .word h_cells, a_allot, 006203 
1605:162 | DONE dir | na 16 16 |        |             |                 c5 65 db 61 03 62        --  . e . a . b
1605:163 | DONE dir | na 16 16 | 0065da | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
1605:163 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
1605:164 | DONE wsp | na 16 16 |        |             |
1605:165 | DONE lbl | na 16 16 | 0065df |             | h_name>string                        
1605:166 | DONE dir | na 16 16 | 0065df | (2 bytes)   |         .byte 0b, { PW + NC }        
1605:166 | DONE dir | na 16 16 |        |             |                 0b 90                    --   .
1605:167 | DONE dir | na 16 16 | 0065e1 | (6 bytes)   |         .word h_allot, a_name>string, 00636b 
1605:167 | DONE dir | na 16 16 |        |             |                 d2 65 5b 63 6b 63        --  . e [ c k c
1605:168 | DONE dir | na 16 16 | 0065e7 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
1605:168 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
1605:168 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
1605:169 | DONE wsp | na 16 16 |        |             |
1605:170 | DONE lbl | na 16 16 | 0065f2 |             | h_2dup                               
1605:171 | DONE dir | na 16 16 | 0065f2 | (2 bytes)   |         .byte 4, { PW + NC }         
1605:171 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1605:172 | DONE dir | na 16 16 | 0065f4 | (6 bytes)   |         .word h_name>string, a_2dup, 006133 
1605:172 | DONE dir | na 16 16 |        |             |                 df 65 29 61 33 61        --  . e ) a 3 a
1605:173 | DONE dir | na 16 16 | 0065fa | (4 bytes)   |         .byte 32, 64, 75, 70         
1605:173 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
1605:174 | DONE wsp | na 16 16 |        |             |
1605:175 | DONE lbl | na 16 16 | 0065fe |             | h_abs                                
1605:176 | DONE dir | na 16 16 | 0065fe | (2 bytes)   |         .byte 3, { PW + NC }         
1605:176 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1605:177 | DONE dir | na 16 16 | 006600 | (6 bytes)   |         .word h_2dup, a_abs, 006156  
1605:177 | DONE dir | na 16 16 |        |             |                 f2 65 4e 61 56 61        --  . e N a V a
1605:178 | DONE dir | na 16 16 | 006606 | (3 bytes)   |         .byte 61, 62, 73             
1605:178 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
1605:179 | DONE wsp | na 16 16 |        |             |
1605:180 | DONE lbl | na 16 16 | 006609 |             | h_state                              
1605:181 | DONE dir | na 16 16 | 006609 | (2 bytes)   |         .byte 5, { PW + NC }         
1605:181 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1605:182 | DONE dir | na 16 16 | 00660b | (6 bytes)   |         .word h_abs, a_state, 006458 
1605:182 | DONE dir | na 16 16 |        |             |                 fe 65 51 64 58 64        --  . e Q d X d
1605:183 | DONE dir | na 16 16 | 006611 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
1605:183 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
1605:184 | DONE wsp | na 16 16 |        |             |
1605:185 | DONE lbl | na 16 16 | 006616 |             | h_to-in                              
1605:186 | DONE dir | na 16 16 | 006616 | (2 bytes)   |         .byte 3, { PW + NC }         
1605:186 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1605:187 | DONE dir | na 16 16 | 006618 | (6 bytes)   |         .word h_state, a_to-in, 0060da 
1605:187 | DONE dir | na 16 16 |        |             |                 09 66 d3 60 da 60        --  	 f . ` . `
1605:188 | DONE dir | na 16 16 | 00661e | (3 bytes)   |         .byte 3e, 69, 6e             
1605:188 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
1605:189 | DONE wsp | na 16 16 |        |             |
1605:190 | DONE lbl | na 16 16 | 006621 |             | h_source                             
1605:191 | DONE dir | na 16 16 | 006621 | (2 bytes)   |         .byte 6, { PW + NC }         
1605:191 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1605:192 | DONE dir | na 16 16 | 006623 | (6 bytes)   |         .word h_to-in, a_source, 006435 
1605:192 | DONE dir | na 16 16 |        |             |                 16 66 29 64 35 64        --  . f ) d 5 d
1605:193 | DONE dir | na 16 16 | 006629 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
1605:193 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
1605:194 | DONE wsp | na 16 16 |        |             |
1605:195 | DONE lbl | na 16 16 | 00662f |             | h_depth                              
1605:196 | DONE dir | na 16 16 | 00662f | (2 bytes)   |         .byte 5, { PW + NC }         
1605:196 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1605:197 | DONE dir | na 16 16 | 006631 | (6 bytes)   |         .word h_source, a_depth, 00623b 
1605:197 | DONE dir | na 16 16 |        |             |                 21 66 2d 62 3b 62        --  ! f - b ; b
1605:198 | DONE dir | na 16 16 | 006637 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
1605:198 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
1605:199 | DONE wsp | na 16 16 |        |             |
1605:200 | DONE lbl | na 16 16 | 00663c |             | h_tick                               
1605:201 | DONE dir | na 16 16 | 00663c | (2 bytes)   |         .byte 1, { PW + NC }         
1605:201 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1605:202 | DONE dir | na 16 16 | 00663e | (6 bytes)   |         .word h_depth, a_tick, 00614d 
1605:202 | DONE dir | na 16 16 |        |             |                 2f 66 34 61 4d 61        --  / f 4 a M a
1605:203 | DONE dir | na 16 16 | 006644 | (1 bytes)   |         .byte 27                     ; hex for "'"
1605:203 | DONE dir | na 16 16 |        |             |                 27                       --  '
1605:204 | DONE wsp | na 16 16 |        |             |
1605:205 | DONE lbl | na 16 16 | 006645 |             | h_two-star                           
1605:206 | DONE dir | na 16 16 | 006645 | (2 bytes)   |         .byte 2, { PW + NC }         
1605:206 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1605:207 | DONE dir | na 16 16 | 006647 | (6 bytes)   |         .word h_tick, a_two-star, 006128 
1605:207 | DONE dir | na 16 16 |        |             |                 3c 66 25 61 28 61        --  < f % a ( a
1605:208 | DONE dir | na 16 16 | 00664d | (2 bytes)   |         .byte 32, 2a                 
1605:208 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
1605:209 | DONE wsp | na 16 16 |        |             |
1605:210 | DONE lbl | na 16 16 | 00664f |             | h_minus                              
1605:211 | DONE dir | na 16 16 | 00664f | (2 bytes)   |         .byte 1, { PW + NC }         
1605:211 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1605:212 | DONE dir | na 16 16 | 006651 | (6 bytes)   |         .word h_two-star, a_minus, 006108 
1605:212 | DONE dir | na 16 16 |        |             |                 45 66 fe 60 08 61        --  E f . ` . a
1605:213 | DONE dir | na 16 16 | 006657 | (1 bytes)   |         .byte 2d                     
1605:213 | DONE dir | na 16 16 |        |             |                 2d                       --  -
1605:214 | DONE wsp | na 16 16 |        |             |
1605:215 | DONE lbl | na 16 16 | 006658 |             | h_plus                               
1605:216 | DONE dir | na 16 16 | 006658 | (2 bytes)   |         .byte 1, { PW + NC }         
1605:216 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1605:217 | DONE dir | na 16 16 | 00665a | (6 bytes)   |         .word h_minus, a_plus, 0060fd 
1605:217 | DONE dir | na 16 16 |        |             |                 4f 66 f6 60 fd 60        --  O f . ` . `
1605:218 | DONE dir | na 16 16 | 006660 | (1 bytes)   |         .byte 2b                     
1605:218 | DONE dir | na 16 16 |        |             |                 2b                       --  +
1605:219 | DONE wsp | na 16 16 |        |             |
1605:220 | DONE lbl | na 16 16 | 006661 |             | h_one-minus                          
1605:221 | DONE dir | na 16 16 | 006661 | (2 bytes)   |         .byte 2, { PW + NC }         
1605:221 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1605:222 | DONE dir | na 16 16 | 006663 | (6 bytes)   |         .word h_plus, a_one-minus, 00611a 
1605:222 | DONE dir | na 16 16 |        |             |                 58 66 19 61 1a 61        --  X f . a . a
1605:223 | DONE dir | na 16 16 | 006669 | (2 bytes)   |         .byte 31, 2d                 
1605:223 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
1605:224 | DONE wsp | na 16 16 |        |             |
1605:225 | DONE lbl | na 16 16 | 00666b |             | h_one-plus                           
1605:226 | DONE dir | na 16 16 | 00666b | (2 bytes)   |         .byte 2, { PW + NC }         
1605:226 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1605:227 | DONE dir | na 16 16 | 00666d | (6 bytes)   |         .word h_one-minus, a_one-plus, 00611c 
1605:227 | DONE dir | na 16 16 |        |             |                 61 66 1b 61 1c 61        --  a f . a . a
1605:228 | DONE dir | na 16 16 | 006673 | (2 bytes)   |         .byte 31, 2b                 
1605:228 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
1605:229 | DONE wsp | na 16 16 |        |             |
1605:230 | DONE lbl | na 16 16 | 006675 |             | h_false                              
1605:231 | DONE dir | na 16 16 | 006675 | (2 bytes)   |         .byte 5, { PW + NC }         
1605:231 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1605:232 | DONE dir | na 16 16 | 006677 | (6 bytes)   |         .word h_one-plus, a_zero, 006110 
1605:232 | DONE dir | na 16 16 |        |             |                 6b 66 09 61 10 61        --  k f 	 a . a
1605:233 | DONE dir | na 16 16 | 00667d | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
1605:233 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
1605:234 | DONE wsp | na 16 16 |        |             |
1605:235 | DONE lbl | na 16 16 | 006682 |             | h_true                               
1605:236 | DONE dir | na 16 16 | 006682 | (2 bytes)   |         .byte 4, { PW + NC }         
1605:236 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1605:237 | DONE dir | na 16 16 | 006684 | (6 bytes)   |         .word h_false, a_true, 006466 
1605:237 | DONE dir | na 16 16 |        |             |                 75 66 5f 64 66 64        --  u f _ d f d
1605:238 | DONE dir | na 16 16 | 00668a | (4 bytes)   |         .byte 74, 72, 75, 65         
1605:238 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
1605:239 | DONE wsp | na 16 16 |        |             |
1605:240 | DONE lbl | na 16 16 | 00668e |             | h_two                                
1605:241 | DONE dir | na 16 16 | 00668e | (2 bytes)   |         .byte 1, { PW + NC }         
1605:241 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1605:242 | DONE dir | na 16 16 | 006690 | (6 bytes)   |         .word h_true, a_two, 006124  
1605:242 | DONE dir | na 16 16 |        |             |                 82 66 1d 61 24 61        --  . f . a $ a
1605:243 | DONE dir | na 16 16 | 006696 | (1 bytes)   |         .byte 32                     
1605:243 | DONE dir | na 16 16 |        |             |                 32                       --  2
1605:244 | DONE wsp | na 16 16 |        |             |
1605:245 | DONE lbl | na 16 16 | 006697 |             | h_one                                
1605:246 | DONE dir | na 16 16 | 006697 | (2 bytes)   |         .byte 1, { PW + NC }         
1605:246 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1605:247 | DONE dir | na 16 16 | 006699 | (6 bytes)   |         .word h_two, a_one, 006118   
1605:247 | DONE dir | na 16 16 |        |             |                 8e 66 11 61 18 61        --  . f . a . a
1605:248 | DONE dir | na 16 16 | 00669f | (1 bytes)   |         .byte 31                     
1605:248 | DONE dir | na 16 16 |        |             |                 31                       --  1
1605:249 | DONE wsp | na 16 16 |        |             |
1605:250 | DONE lbl | na 16 16 | 0066a0 |             | h_zero                               
1605:251 | DONE dir | na 16 16 | 0066a0 | (2 bytes)   |         .byte 1, { PW + NC }         
1605:251 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1605:252 | DONE dir | na 16 16 | 0066a2 | (6 bytes)   |         .word h_one, a_zero, 006110  
1605:252 | DONE dir | na 16 16 |        |             |                 97 66 09 61 10 61        --  . f 	 a . a
1605:253 | DONE dir | na 16 16 | 0066a8 | (1 bytes)   |         .byte 30                     
1605:253 | DONE dir | na 16 16 |        |             |                 30                       --  0
1605:254 | DONE wsp | na 16 16 |        |             |
1605:255 | DONE lbl | na 16 16 | 0066a9 |             | h_find-name                          
1605:256 | DONE dir | na 16 16 | 0066a9 | (2 bytes)   |         .byte 9, 0                   
1605:256 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
1605:257 | DONE dir | na 16 16 | 0066ab | (6 bytes)   |         .word h_zero, a_find-name, 00634a 
1605:257 | DONE dir | na 16 16 |        |             |                 a0 66 f4 62 4a 63        --  . f . b J c
1605:258 | DONE dir | na 16 16 | 0066b1 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
1605:258 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
1605:258 | DONE dir | na 16 16 |        |             |                 65                       --  e
1605:259 | DONE wsp | na 16 16 |        |             |
1605:260 | DONE lbl | na 16 16 | 0066ba |             | h_refill                             
1605:261 | DONE dir | na 16 16 | 0066ba | (2 bytes)   |         .byte 6, { PW }              ; TODO check flags
1605:261 | DONE dir | na 16 16 |        |             |                 06 80                    --  . .
1605:262 | DONE dir | na 16 16 | 0066bc | (6 bytes)   |         .word h_find-name, a_refill, 00641f 
1605:262 | DONE dir | na 16 16 |        |             |                 a9 66 ed 63 1f 64        --  . f . c . d
1605:263 | DONE dir | na 16 16 | 0066c2 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
1605:263 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
1605:264 | DONE wsp | na 16 16 |        |             |
1605:265 | DONE lbl | na 16 16 | 0066c8 |             | h_parse-name                         
1605:266 | DONE dir | na 16 16 | 0066c8 | (2 bytes)   |         .byte &10, 0                 
1605:266 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
1605:267 | DONE dir | na 16 16 | 0066ca | (6 bytes)   |         .word h_refill, a_parse-name, 0063ec 
1605:267 | DONE dir | na 16 16 |        |             |                 ba 66 88 63 ec 63        --  . f . c . c
1605:268 | DONE dir | na 16 16 | 0066d0 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
1605:268 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
1605:268 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
1605:269 | DONE wsp | na 16 16 |        |             |
1605:270 | DONE lbl | na 16 16 | 0066da |             | h_source-id                          
1605:271 | DONE dir | na 16 16 | 0066da | (2 bytes)   |         .byte 9, { PW + NC }         
1605:271 | DONE dir | na 16 16 |        |             |                 09 90                    --  	 .
1605:272 | DONE dir | na 16 16 | 0066dc | (6 bytes)   |         .word h_parse-name, a_source-id, 00643c 
1605:272 | DONE dir | na 16 16 |        |             |                 c8 66 36 64 3c 64        --  . f 6 d < d
1605:273 | DONE dir | na 16 16 | 0066e2 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
1605:273 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
1605:273 | DONE dir | na 16 16 |        |             |                 64                       --  d
1605:274 | DONE wsp | na 16 16 |        |             |
1605:275 | DONE lbl | na 16 16 | 0066eb |             | h_comma                              
1605:276 | DONE dir | na 16 16 | 0066eb | (2 bytes)   |         .byte 1, { PW + NC }         
1605:276 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1605:277 | DONE dir | na 16 16 | 0066ed | (6 bytes)   |         .word h_source-id, a_comma, 0060e6 
1605:277 | DONE dir | na 16 16 |        |             |                 da 66 db 60 e6 60        --  . f . ` . `
1605:278 | DONE dir | na 16 16 | 0066f3 | (1 bytes)   |         .byte 2c                     
1605:278 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
1605:279 | DONE wsp | na 16 16 |        |             |
1605:280 | DONE lbl | na 16 16 | 0066f4 |             | h_accept                             
1605:281 | DONE dir | na 16 16 | 0066f4 | (2 bytes)   |         .byte 6, 00                  ; TODO check flags
1605:281 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
1605:282 | DONE dir | na 16 16 | 0066f6 | (6 bytes)   |         .word h_comma, a_accept, 0061da 
1605:282 | DONE dir | na 16 16 |        |             |                 eb 66 57 61 da 61        --  . f W a . a
1605:283 | DONE dir | na 16 16 | 0066fc | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
1605:283 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
1605:284 | DONE wsp | na 16 16 |        |             |
1605:285 | DONE lbl | na 16 16 | 006702 |             | h_tuck                               
1605:286 | DONE dir | na 16 16 | 006702 | (2 bytes)   |         .byte 4, { PW + NC }         
1605:286 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1605:287 | DONE dir | na 16 16 | 006704 | (6 bytes)   |         .word h_accept, a_tuck, 00646f 
1605:287 | DONE dir | na 16 16 |        |             |                 f4 66 67 64 6f 64        --  . f g d o d
1605:288 | DONE dir | na 16 16 | 00670a | (4 bytes)   |         .byte 74, 75, 63, 6b         
1605:288 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
1605:289 | DONE wsp | na 16 16 |        |             |
1605:290 | DONE lbl | na 16 16 | 00670e |             | h_nip                                
1605:291 | DONE dir | na 16 16 | 00670e | (2 bytes)   |         .byte 3, { PW + NC }         
1605:291 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1605:292 | DONE dir | na 16 16 | 006710 | (6 bytes)   |         .word h_tuck, a_nip, 00636e  
1605:292 | DONE dir | na 16 16 |        |             |                 02 67 6c 63 6e 63        --  . g l c n c
1605:293 | DONE dir | na 16 16 | 006716 | (3 bytes)   |         .byte 6e, 69, 70             
1605:293 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
1605:294 | DONE wsp | na 16 16 |        |             |
1605:295 | DONE lbl | na 16 16 | 006719 |             | h_rot                                
1605:296 | DONE dir | na 16 16 | 006719 | (2 bytes)   |         .byte 3, { PW + NC }         
1605:296 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1605:297 | DONE dir | na 16 16 | 00671b | (6 bytes)   |         .word h_nip, a_rot, 006428   
1605:297 | DONE dir | na 16 16 |        |             |                 0e 67 20 64 28 64        --  . g   d ( d
1605:298 | DONE dir | na 16 16 | 006721 | (3 bytes)   |         .byte 72, 6f, 74             
1605:298 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
1605:299 | DONE wsp | na 16 16 |        |             |
1605:300 | DONE lbl | na 16 16 | 006724 |             | h_execute                            
1605:301 | DONE dir | na 16 16 | 006724 | (2 bytes)   |         .byte 7, { PW + NC }         
1605:301 | DONE dir | na 16 16 |        |             |                 07 90                    --  . .
1605:302 | DONE dir | na 16 16 | 006726 | (6 bytes)   |         .word h_rot, a_execute, 0062f3 
1605:302 | DONE dir | na 16 16 |        |             |                 19 67 e4 62 f3 62        --  . g . b . b
1605:303 | DONE dir | na 16 16 | 00672c | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
1605:303 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
1605:304 | DONE wsp | na 16 16 |        |             |
1605:305 | DONE lbl | na 16 16 | 006733 |             | h_here                               
1605:306 | DONE dir | na 16 16 | 006733 | (2 bytes)   |         .byte 4, { PW + NC }         
1605:306 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1605:307 | DONE dir | na 16 16 | 006735 | (6 bytes)   |         .word h_execute, a_here, 006351 
1605:307 | DONE dir | na 16 16 |        |             |                 24 67 4b 63 51 63        --  $ g K c Q c
1605:308 | DONE dir | na 16 16 | 00673b | (4 bytes)   |         .byte 68, 65, 72, 65         
1605:308 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
1605:309 | DONE wsp | na 16 16 |        |             |
1605:310 | DONE lbl | na 16 16 | 00673f |             | h_fetch                              
1605:311 | DONE dir | na 16 16 | 00673f | (2 bytes)   |         .byte 1, { PW + NC }         
1605:311 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1605:312 | DONE dir | na 16 16 | 006741 | (6 bytes)   |         .word h_here, a_fetch, 0060f5 
1605:312 | DONE dir | na 16 16 |        |             |                 33 67 f1 60 f5 60        --  3 g . ` . `
1605:313 | DONE dir | na 16 16 | 006747 | (1 bytes)   |         .byte 40                     
1605:313 | DONE dir | na 16 16 |        |             |                 40                       --  @
1605:314 | DONE wsp | na 16 16 |        |             |
1605:315 | DONE lbl | na 16 16 | 006748 |             | h_store                              
1605:316 | DONE dir | na 16 16 | 006748 | (2 bytes)   |         .byte 1, { PW + NC }         
1605:316 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1605:317 | DONE dir | na 16 16 | 00674a | (6 bytes)   |         .word h_fetch, a_store, 0060f0 
1605:317 | DONE dir | na 16 16 |        |             |                 3f 67 e7 60 f0 60        --  ? g . ` . `
1605:318 | DONE dir | na 16 16 | 006750 | (1 bytes)   |         .byte 21                     
1605:318 | DONE dir | na 16 16 |        |             |                 21                       --  !
1605:319 | DONE wsp | na 16 16 |        |             |
1605:320 | DONE lbl | na 16 16 | 006751 |             | h_swap                               
1605:321 | DONE dir | na 16 16 | 006751 | (2 bytes)   |         .byte 4, { PW + NC }         
1605:321 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1605:322 | DONE dir | na 16 16 | 006753 | (6 bytes)   |         .word h_store, a_swap, 00645e 
1605:322 | DONE dir | na 16 16 |        |             |                 48 67 59 64 5e 64        --  H g Y d ^ d
1605:323 | DONE dir | na 16 16 | 006759 | (4 bytes)   |         .byte 73, 77, 61, 70         
1605:323 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
1605:324 | DONE wsp | na 16 16 |        |             |
1605:325 | DONE lbl | na 16 16 | 00675d |             | h_dup                                
1605:326 | DONE dir | na 16 16 | 00675d | (2 bytes)   |         .byte 3, { PW + NC }         
1605:326 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1605:327 | DONE dir | na 16 16 | 00675f | (6 bytes)   |         .word h_swap, a_dup, 0062b1  
1605:327 | DONE dir | na 16 16 |        |             |                 51 67 ad 62 b1 62        --  Q g . b . b
1605:328 | DONE dir | na 16 16 | 006765 | (3 bytes)   |         .byte 64, 75, 70             
1605:328 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
1605:329 | DONE wsp | na 16 16 |        |             |
1605:330 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
1605:331 | DONE lbl | na 16 16 | 006768 |             | h_drop                               
1605:332 | DONE dir | na 16 16 | 006768 | (2 bytes)   |         .byte 4, { PW + NC }         
1605:332 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1605:333 | DONE dir | na 16 16 | 00676a | (6 bytes)   |         .word h_dup, a_drop, 0062ac  
1605:333 | DONE dir | na 16 16 |        |             |                 5d 67 a8 62 ac 62        --  ] g . b . b
1605:334 | DONE dir | na 16 16 | 006770 | (4 bytes)   |         .byte 64, 72, 6f, 70         
1605:334 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
1605:335 | DONE wsp | na 16 16 |        |             |
1605:336 | DONE cmt | na 16 16 |        |             | ; END
1606:000 | DONE wsp | na 16 16 |        |             |
1607:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1608:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
1609:000 | DONE wsp | na 16 16 |        |             |
1610:000 | DONE wsp | na 16 16 |        |             |
1611:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1612:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (INTERPRET)
1613:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
1614:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
1615:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen. Consider moving this up to QUIT once we know what we are
1616:000 | DONE cmt | na 16 16 |        |             | ; doing
1617:000 | DONE lbl | na 16 16 | 006774 |             | compex                               
1618:000 | DONE lbl | na 16 16 | 006774 |             | compex_loop                          
1619:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
1620:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
1621:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
1622:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
1623:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE does not do.
1624:000 | DONE ins | na 16 16 | 006774 | 20 88 63    |                 jsr 006388           ; ( 'string' -- addr u )
1625:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1626:000 | DONE cmt | na 16 16 |        |             |                 ; if PARSE-NAME returns 0 (empty line), no characters were left
1627:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
1628:000 | DONE ins | na 16 16 | 006777 | 98          |                 tya                  ; force flag check
1629:000 | DONE ins | na 16 16 | 006778 | f0 1d       |                 beq 006797           
1630:000 | DONE wsp | na 16 16 |        |             |
1631:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
1632:000 | DONE cmt | na 16 16 |        |             |                  ; internally (sorry, Garth).
1633:000 | DONE ins | na 16 16 | 00677a | 20 d7 67    |                 jsr 0067d7           ; returns ( addr u )
1634:000 | DONE wsp | na 16 16 |        |             |
1635:000 | DONE cmt | na 16 16 |        |             |                 ; If we got something that is not a zero, we go to FIND-NAME to
1636:000 | DONE cmt | na 16 16 |        |             |                 ; get the nt. Returns ( nt | 0 )
1637:000 | DONE ins | na 16 16 | 00677d | 20 f4 62    |                 jsr 0062f4           
1638:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1639:000 | DONE wsp | na 16 16 |        |             |
1640:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
1641:000 | DONE ins | na 16 16 | 006780 | 98          |                 tya                  ; force flag check
1642:000 | DONE ins | na 16 16 | 006781 | d0 06       |                 bne 006789           
1643:000 | DONE wsp | na 16 16 |        |             |
1644:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
1645:000 | DONE wsp | na 16 16 |        |             |
1646:000 | DONE cmt | na 16 16 |        |             |                 ; Woe is us, all has failed
1647:000 | DONE ins | na 16 16 | 006783 | a9 d3 69    |                 lda.# 0069d3         ; "Unknown word"
1648:000 | DONE ins | na 16 16 | 006786 | 4c 9e 67    |                 jmp 00679e           
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE lbl | na 16 16 | 006789 |             | compex_got_name_token                
1651:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if INTERPRETED OR COMPILED
1652:000 | DONE wsp | na 16 16 |        |             |
1653:000 | DONE cmt | na 16 16 |        |             |                 ; INTERPRET WORD
1654:000 | DONE cmt | na 16 16 |        |             |                 ; We arrive here with the nt as TOS. The xt of a word is
1655:000 | DONE cmt | na 16 16 |        |             |                 ; four bytes farther on, so this is a quick version of NAME>INT
1656:000 | DONE wsp | na 16 16 |        |             |
1657:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1658:000 | DONE ins | na 16 16 | 006789 | c8          |                 iny                  
1659:000 | DONE ins | na 16 16 | 00678a | c8          |                 iny                  
1660:000 | DONE ins | na 16 16 | 00678b | c8          |                 iny                  
1661:000 | DONE ins | na 16 16 | 00678c | c8          |                 iny                  
1662:000 | DONE ins | na 16 16 | 00678d | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1663:000 | DONE ins | na 16 16 | 006790 | a8          |                 tay                  
1664:000 | DONE wsp | na 16 16 |        |             |
1665:000 | DONE ins | na 16 16 | 006791 | 20 e4 62    |                 jsr 0062e4           
1666:000 | DONE wsp | na 16 16 |        |             |
1667:000 | DONE cmt | na 16 16 |        |             |                 ; that's quite enough for this word, let's get the next one
1668:000 | DONE ins | na 16 16 | 006794 | 4c 74 67    |                 jmp 006774           
1669:000 | DONE wsp | na 16 16 |        |             |
1670:000 | DONE lbl | na 16 16 | 006797 |             | compex_line_done                     
1671:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
1672:000 | DONE ins | na 16 16 | 006797 | b4 02       |                 ldy.dx 02            
1673:000 | DONE ins | na 16 16 | 006799 | e8          |                 inx                  
1674:000 | DONE ins | na 16 16 | 00679a | e8          |                 inx                  
1675:000 | DONE ins | na 16 16 | 00679b | e8          |                 inx                  
1676:000 | DONE ins | na 16 16 | 00679c | e8          |                 inx                  
1677:000 | DONE wsp | na 16 16 |        |             |
1678:000 | DONE ins | na 16 16 | 00679d | 60          |                 rts                  
1679:000 | DONE wsp | na 16 16 |        |             |
1680:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1681:000 | DONE cmt | na 16 16 |        |             | ; Fatal error encountered: Take address of error string from A, print it and
1682:000 | DONE cmt | na 16 16 |        |             | ; then call abort
1683:000 | DONE lbl | na 16 16 | 00679e |             | error                                
1684:000 | DONE ins | na 16 16 | 00679e | 20 a4 67    |                 jsr 0067a4           
1685:000 | DONE ins | na 16 16 | 0067a1 | 4c 94 60    |                 jmp 006094           
1686:000 | DONE wsp | na 16 16 |        |             |
1687:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1688:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
1689:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
1690:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
1691:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
1692:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
1693:000 | DONE lbl | na 16 16 | 0067a4 |             | print_string                         
1694:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1695:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1696:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
1697:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
1698:000 | DONE ins | na 16 16 | 0067a4 | da          |                 phx                  
1699:000 | DONE ins | na 16 16 | 0067a5 | aa          |                 tax                  ; x16 contains address of string
1700:000 | DONE lbl | na 16 16 | 0067a6 |             | @                                    
1701:000 | DONE ins | na 16 16 | 0067a6 | e2 20       |                 sep 20               
1701:001 | DONE ctl | na  8 16 |        |             |         .!a8
1702:000 | DONE ins | na  8 16 | 0067a8 | bd 00 00    |                 lda.x 0000           ; LDA $0000,X
1703:000 | DONE ins | na  8 16 | 0067ab | f0 06       |                 beq 0067b3           
1704:000 | DONE ins | na  8 16 | 0067ad | 20 30 60    |                 jsr 006030           
1705:000 | DONE ins | na  8 16 | 0067b0 | e8          |                 inx                  
1706:000 | DONE ins | na  8 16 | 0067b1 | 80 f3       |                 bra 0067a6           
1707:000 | DONE wsp | na  8 16 |        |             |
1708:000 | DONE lbl | na  8 16 | 0067b3 |             | print_string_done                    
1709:000 | DONE ins | na  8 16 | 0067b3 | a9 0a       |                 lda.# AscLF          ; should be CR on some systems
1710:000 | DONE ins | na  8 16 | 0067b5 | 20 30 60    |                 jsr 006030           
1711:000 | DONE ins | na  8 16 | 0067b8 | c2 20       |                 rep 20               
1711:001 | DONE ctl | na 16 16 |        |             |         .!a16
1712:000 | DONE ins | na 16 16 | 0067ba | fa          |                 plx                  
1713:000 | DONE ins | na 16 16 | 0067bb | 60          |                 rts                  
1714:000 | DONE wsp | na 16 16 |        |             |
1715:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1716:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
1717:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
1718:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
1719:000 | DONE lbl | na 16 16 | 0067bc |             | byte_to_ascii                        
1720:000 | DONE ins | na 16 16 | 0067bc | 48          |                 pha                  
1721:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
1722:000 | DONE ins | na 16 16 | 0067bd | 4a          |                 lsr.a                
1723:000 | DONE ins | na 16 16 | 0067be | 4a          |                 lsr.a                
1724:000 | DONE ins | na 16 16 | 0067bf | 4a          |                 lsr.a                
1725:000 | DONE ins | na 16 16 | 0067c0 | 4a          |                 lsr.a                
1726:000 | DONE ins | na 16 16 | 0067c1 | 20 c5 67    |                 jsr 0067c5           
1727:000 | DONE wsp | na 16 16 |        |             |
1728:000 | DONE ins | na 16 16 | 0067c4 | 68          |                 pla                  
1729:000 | DONE wsp | na 16 16 |        |             |
1730:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
1731:000 | DONE wsp | na 16 16 |        |             |
1732:000 | DONE wsp | na 16 16 |        |             |
1733:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1734:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
1735:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
1736:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
1737:000 | DONE lbl | na 16 16 | 0067c5 |             | nibble_to_ascii                      
1738:000 | DONE ins | na 16 16 | 0067c5 | 29 0f 00    |                 and.# 000f           
1739:000 | DONE ins | na 16 16 | 0067c8 | 09 30 00    |                 ora.# 30             
1740:000 | DONE ins | na 16 16 | 0067cb | c9 3a 00    |                 cmp.# 003a           ; '9' + 1
1741:000 | DONE ins | na 16 16 | 0067ce | 90 03       |                 bcc 0067d3           
1742:000 | DONE ins | na 16 16 | 0067d0 | 69 06 00    |                 adc.# 0006           
1743:000 | DONE lbl | na 16 16 | 0067d3 |             | @                                    
1744:000 | DONE ins | na 16 16 | 0067d3 | 20 30 60    |                 jsr 006030           
1745:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1746:000 | DONE ins | na 16 16 | 0067d6 | 60          |                 rts                  
1747:000 | DONE wsp | na 16 16 |        |             |
1748:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1749:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to upper case in place. Since we have to
1750:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
1751:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
1752:000 | DONE lbl | na 16 16 | 0067d7 |             | string_to_uppercase                  
1753:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
1754:000 | DONE ins | na 16 16 | 0067d7 | 60          |                 rts                  
1755:000 | DONE wsp | na 16 16 |        |             |
1756:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1757:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
1758:000 | DONE wsp | na 16 16 |        |             |
1759:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
1760:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
1761:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
1762:000 | DONE lbl | na 16 16 | 0067d8 |             | hi-start                             
1763:000 | DONE dir | na 16 16 | 0067d8 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
1763:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
1763:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
1763:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
1763:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
1763:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
1764:000 | DONE dir | na 16 16 | 0067fb | (36 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
1764:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
1764:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
1764:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
1764:000 | DONE dir | na 16 16 |        |             |                 39 2e 20 46 65 62 20 32  --  9 .   F e b   2
1764:000 | DONE dir | na 16 16 |        |             |                 30 31 37 29              --  0 1 7 )
1765:000 | DONE dir | na 16 16 | 00681f | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
1765:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
1765:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
1765:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
1765:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
1765:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
1765:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
1765:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
1766:000 | DONE dir | na 16 16 | 006852 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
1766:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
1766:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
1766:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
1766:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
1766:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
1766:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
1766:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
1767:000 | DONE dir | na 16 16 | 006886 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
1767:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
1767:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
1767:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
1767:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
1768:000 | DONE lbl | na 16 16 | 0068a2 |             | hi-end                               
1769:000 | DONE wsp | na 16 16 |        |             |
1770:000 | DONE wsp | na 16 16 |        |             |
1771:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1772:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
1773:000 | DONE wsp | na 16 16 |        |             |
1774:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
1774:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1774:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
1774:003 | DONE cmt | na 16 16 |        |             | ; This version:  09. Feb 2017
1774:004 | DONE wsp | na 16 16 |        |             |
1774:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
1774:006 | DONE wsp | na 16 16 |        |             |
1774:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1774:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
1774:009 | DONE wsp | na 16 16 |        |             |
1774:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
1774:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
1774:012 | DONE cmt | na 16 16 |        |             | ; character
1774:013 | DONE wsp | na 16 16 |        |             |
1774:014 | DONE lbl | na 16 16 | 0068a2 |             | s_ok                                 
1774:015 | DONE dir | na 16 16 | 0068a2 | (4 bytes)   |         .byte 20, 6f, 6b, 0          ; note space at beginning
1774:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
1774:016 | DONE wsp | na 16 16 |        |             |
1774:017 | DONE wsp | na 16 16 |        |             |
1774:018 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1774:019 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
1774:020 | DONE wsp | na 16 16 |        |             |
1774:021 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
1774:022 | DONE wsp | na 16 16 |        |             |
1774:023 | DONE lbl | na 16 16 | 0068a6 |             | es_allot                             
1774:024 | DONE dir | na 16 16 | 0068a6 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
1774:024 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
1774:024 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
1774:024 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
1774:025 | DONE lbl | na 16 16 | 0068ba |             | es_channel                           
1774:026 | DONE dir | na 16 16 | 0068ba | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
1774:026 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
1774:026 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
1774:026 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
1774:026 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
1774:027 | DONE lbl | na 16 16 | 0068d4 |             | es_componly                          
1774:028 | DONE dir | na 16 16 | 0068d4 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
1774:028 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
1774:028 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
1774:028 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
1774:028 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
1774:028 | DONE dir | na 16 16 |        |             |                 00                       --  .
1774:029 | DONE lbl | na 16 16 | 0068f5 |             | es_defer                             
1774:030 | DONE dir | na 16 16 | 0068f5 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
1774:030 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
1774:030 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
1774:030 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
1774:030 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
1774:031 | DONE lbl | na 16 16 | 006912 |             | es_divzero                           
1774:032 | DONE dir | na 16 16 | 006912 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
1774:032 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
1774:032 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
1774:032 | DONE dir | na 16 16 |        |             |                 00                       --  .
1774:033 | DONE lbl | na 16 16 | 006923 |             | es_empty                             
1774:034 | DONE dir | na 16 16 | 006923 | (9 bytes)   |         .byte 20, 28, 65, 6d, 70, 74, 79, 29, 0 
1774:034 | DONE dir | na 16 16 |        |             |                 20 28 65 6d 70 74 79 29  --    ( e m p t y )
1774:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
1774:035 | DONE lbl | na 16 16 | 00692c |             | es_error                             
1774:036 | DONE dir | na 16 16 | 00692c | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
1774:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
1774:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
1774:037 | DONE lbl | na 16 16 | 006938 |             | es_intonly                           
1774:038 | DONE dir | na 16 16 | 006938 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
1774:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
1774:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
1774:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
1774:039 | DONE lbl | na 16 16 | 00694e |             | es_noname                            
1774:040 | DONE dir | na 16 16 | 00694e | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
1774:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
1774:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
1774:040 | DONE dir | na 16 16 |        |             |                                          -- 
1774:041 | DONE lbl | na 16 16 | 00695e |             | es_radix                             
1774:042 | DONE dir | na 16 16 | 00695e | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
1774:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
1774:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
1774:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
1774:043 | DONE lbl | na 16 16 | 006975 |             | es_refill1                           
1774:044 | DONE dir | na 16 16 | 006975 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
1774:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
1774:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
1774:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
1774:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
1774:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
1774:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
1774:045 | DONE lbl | na 16 16 | 0069a3 |             | es_refill2                           
1774:046 | DONE dir | na 16 16 | 0069a3 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
1774:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
1774:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
1774:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
1774:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
1774:046 | DONE dir | na 16 16 |        |             |                                          -- 
1774:047 | DONE lbl | na 16 16 | 0069c3 |             | es_underflow                         
1774:048 | DONE dir | na 16 16 | 0069c3 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
1774:048 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
1774:048 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
1774:048 | DONE dir | na 16 16 |        |             |                                          -- 
1774:049 | DONE lbl | na 16 16 | 0069d3 |             | es_syntax                            
1774:050 | DONE dir | na 16 16 | 0069d3 | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
1774:050 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
1774:050 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
1774:050 | DONE dir | na 16 16 |        |             |                                          -- 
1774:051 | DONE wsp | na 16 16 |        |             |
1774:052 | DONE wsp | na 16 16 |        |             |
1774:053 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1774:054 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
1774:055 | DONE wsp | na 16 16 |        |             |
1774:056 | DONE lbl | na 16 16 | 0069e3 |             | vt100_page                           
1774:057 | DONE dir | na 16 16 | 0069e3 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  ; clear screen
1774:057 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
1774:058 | DONE lbl | na 16 16 | 0069e8 |             | vt100_home                           
1774:059 | DONE dir | na 16 16 | 0069e8 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      ; cursor home
1774:059 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
1774:060 | DONE wsp | na 16 16 |        |             |
1774:061 | DONE wsp | na 16 16 |        |             |
1774:062 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1774:063 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
1774:064 | DONE wsp | na 16 16 |        |             |
1774:065 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
1774:066 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
1774:067 | DONE wsp | na 16 16 |        |             |
1774:068 | DONE lbl | na 16 16 | 0069ec |             | tests_prev_cmd                       
1774:069 | DONE dir | na 16 16 | 0069ec | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
1774:069 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
1774:069 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
1774:069 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
1774:070 | DONE lbl | na 16 16 | 0069ff |             | tests_next_cmd                       
1774:071 | DONE dir | na 16 16 | 0069ff | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
1774:071 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
1774:071 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
1774:072 | DONE wsp | na 16 16 |        |             |
1774:073 | DONE wsp | na 16 16 |        |             |
1774:074 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1774:075 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
1774:076 | DONE wsp | na 16 16 |        |             |
1774:077 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
1774:078 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
1774:079 | DONE wsp | na 16 16 |        |             |
1774:080 | DONE lbl | na 16 16 | 006a0e |             | alphastr                             
1774:081 | DONE dir | na 16 16 | 006a0e | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
1774:081 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
1774:081 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
1774:081 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
1774:081 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
1774:081 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
1775:000 | DONE wsp | na 16 16 |        |             |
1776:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1777:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
1778:000 | DONE wsp | na 16 16 |        |             |
1779:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
1780:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
1781:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
1782:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
1783:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
1784:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
1785:000 | DONE wsp | na 16 16 |        |             |
1786:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
1787:000 | DONE cmt | na 16 16 |        |             |                 ; tya
1788:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
1789:000 | DONE cmt | na 16 16 |        |             |                 ; xba
1790:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
1791:000 | DONE cmt | na 16 16 |        |             |                 ; tya
1792:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
1793:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
1794:000 | DONE cmt | na 16 16 |        |             |                 ; jsr a_cr
1795:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
1796:000 | DONE wsp | na 16 16 |        |             |
1797:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
1798:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
1799:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
1800:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
1801:000 | DONE wsp | na 16 16 |        |             |
1802:000 | DONE wsp | na 16 16 |        |             |
1803:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1804:000 | DONE cmt | na 16 16 |        |             | ; END
1805:000 | DONE wsp | na 16 16 |        |             |
1806:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- a_2dup                      : 006129
- a_abort                     : 006094
- a_abs                       : 00614e
- a_accept                    : 006157
- a_allot                     : 0061db
- a_bell                      : 006204
- a_bl                        : 00620b
- a_bye                       : 006213
- a_cold                      : 00605d
- a_comma                     : 0060db
- a_count                     : 006217
- a_cr                        : 006226
- a_depth                     : 00622d
- a_dot                       : 00623c
- a_dotparen                  : 006252
- a_dots                      : 006260
- a_drop                      : 0062a8
- a_dup                       : 0062ad
- a_evaluate                  : 0062b2
- a_execute                   : 0062e4
- a_fetch                     : 0060f1
- a_find-name                 : 0062f4
- a_here                      : 00634b
- a_minus                     : 0060fe
- a_name-int                  : 006352
- a_name>string               : 00635b
- a_nip                       : 00636c
- a_one                       : 006111
- a_one-minus                 : 006119
- a_one-plus                  : 00611b
- a_pad                       : 00636f
- a_page                      : 00637b
- a_parse                     : 0063ba
- a_parse-name                : 006388
- a_plus                      : 0060f6
- a_quit                      : 00609c
- a_refill                    : 0063ed
- a_rot                       : 006420
- a_source                    : 006429
- a_source-id                 : 006436
- a_space                     : 00643d
- a_spaces                    : 006444
- a_state                     : 006451
- a_store                     : 0060e7
- a_swap                      : 006459
- a_tick                      : 006134
- a_to-in                     : 0060d3
- a_true                      : 00645f
- a_tuck                      : 006467
- a_two                       : 00611d
- a_two-star                  : 006125
- a_type                      : 006470
- a_unused                    : 006491
- a_words                     : 00649d
- a_zero                      : 006109
- accept_bs                   : 0061bd
- accept_eol                  : 0061b5
- accept_loop                 : 00616a
- accept_nonzero              : 00615d
- allot_done                  : 0061fd
- allot_error                 : 0061ec
- allot_minus                 : 0061f2
- allot_real_gone             : 0061ff
- alphastr                    : 006a0e
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 0067bc
- cib                         : 00020c
- ciblen                      : 00020e
- co                          : 000040
- compex                      : 006774
- compex_got_name_token       : 006789
- compex_line_done            : 006797
- compex_loop                 : 006774
- cp                          : 000200
- cp0                         : 000300
- directpage                  : 000200
- directpage-multiple         : 007400
- dots_done                   : 0062a4
- dots_loop                   : 00628a
- dots_not_empty              : 006284
- dp                          : 000202
- dsp0                        : 0002f0
- error                       : 00679e
- es_allot                    : 0068a6
- es_channel                  : 0068ba
- es_componly                 : 0068d4
- es_defer                    : 0068f5
- es_divzero                  : 006912
- es_empty                    : 006923
- es_error                    : 00692c
- es_intonly                  : 006938
- es_noname                   : 00694e
- es_radix                    : 00695e
- es_refill1                  : 006975
- es_refill2                  : 0069a3
- es_syntax                   : 0069d3
- es_underflow                : 0069c3
- execute_done                : 0062f2
- execute_ip                  : 0062e1
- find-name_all_chars         : 006322
- find-name_char_nomatch_8    : 00631e
- find-name_chars             : 006313
- find-name_done              : 006348
- find-name_failure_16        : 006345
- find-name_loop              : 0062fe
- find-name_next_entry        : 006307
- find-name_success           : 00633f
- get_chr                     : 006041
- get_chr_wait                : 006046
- h_2dup                      : 0065f2
- h_abort                     : 00651c
- h_abs                       : 0065fe
- h_accept                    : 0066f4
- h_allot                     : 0065d2
- h_bell                      : 0064e9
- h_bl                        : 00655c
- h_bye                       : 0064c5
- h_cells                     : 0065c5
- h_cold                      : 0064d0
- h_comma                     : 0066eb
- h_count                     : 00650f
- h_cr                        : 006552
- h_depth                     : 00662f
- h_dot                       : 0065a1
- h_dotparen                  : 00658b
- h_dots                      : 006581
- h_drop                      : 006768
- h_dup                       : 00675d
- h_evaluate                  : 0065b5
- h_execute                   : 006724
- h_false                     : 006675
- h_fetch                     : 00673f
- h_find-name                 : 0066a9
- h_here                      : 006733
- h_minus                     : 00664f
- h_name-int                  : 006542
- h_name>string               : 0065df
- h_nip                       : 00670e
- h_one                       : 006697
- h_one-minus                 : 006661
- h_one-plus                  : 00666b
- h_pad                       : 0065aa
- h_page                      : 006503
- h_parse                     : 006529
- h_parse-name                : 0066c8
- h_plus                      : 006658
- h_quit                      : 006536
- h_refill                    : 0066ba
- h_rot                       : 006719
- h_source                    : 006621
- h_source-id                 : 0066da
- h_space                     : 006574
- h_spaces                    : 006566
- h_state                     : 006609
- h_store                     : 006748
- h_swap                      : 006751
- h_tick                      : 00663c
- h_to-in                     : 006616
- h_true                      : 006682
- h_tuck                      : 006702
- h_two                       : 00668e
- h_two-star                  : 006645
- h_type                      : 006595
- h_unused                    : 0064f5
- h_words                     : 0064dc
- h_zero                      : 0066a0
- have_chr?                   : 006050
- hi-end                      : 0068a2
- hi-start                    : 0067d8
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000020
- insrc                       : 00020a
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- nc                          : 000010
- nibble_to_ascii             : 0067c5
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 00639a
- parse-name_found            : 0063ae
- parse-name_loop             : 00638d
- parse_found_delimiter       : 0063da
- parse_loop                  : 0063cd
- parse_reached_eol           : 0063de
- physicalram                 : 007fff
- piblen                      : 000210
- print_string                : 0067a4
- print_string_done           : 0067b3
- put_chr                     : 006030
- put_chr_wait                : 006036
- pw                          : 000080
- quit_get_line               : 0060a7
- quit_ok                     : 0060c9
- quit_refill_successful      : 0060b5
- refill_source_is_not_string : 006419
- refill_src_not_kbd          : 006410
- reset_hardware              : 006000
- s_ok                        : 0068a2
- spaces_done                 : 00644c
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006060
- state                       : 000214
- string_to_uppercase         : 0067d7
- tests_next_cmd              : 0069ff
- tests_prev_cmd              : 0069ec
- tick_have_nt                : 00614a
- tick_have_word              : 00613f
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 00648a
- type_loop                   : 00647e
- vt100_home                  : 0069e8
- vt100_page                  : 0069e3
- words_loop                  : 0064a7
- z_2dup                      : 006133
- z_abort                     : 0060d2
- z_abs                       : 006156
- z_accept                    : 0061da
- z_allot                     : 006203
- z_bell                      : 00620a
- z_bl                        : 006212
- z_bye                       : 006216
- z_cold                      : 0060d2
- z_comma                     : 0060e6
- z_count                     : 006225
- z_cr                        : 00622c
- z_depth                     : 00623b
- z_dot                       : 006251
- z_dotparen                  : 00625f
- z_dots                      : 0062a7
- z_drop                      : 0062ac
- z_dup                       : 0062b1
- z_evaluate                  : 0062e0
- z_execute                   : 0062f3
- z_fetch                     : 0060f5
- z_find-name                 : 00634a
- z_here                      : 006351
- z_minus                     : 006108
- z_name-int                  : 00635a
- z_name>string               : 00636b
- z_nip                       : 00636e
- z_one                       : 006118
- z_one-minus                 : 00611a
- z_one-plus                  : 00611c
- z_pad                       : 00637a
- z_page                      : 006387
- z_parse                     : 0063ec
- z_parse-name                : 0063ec
- z_plus                      : 0060fd
- z_quit                      : 0060d2
- z_refill                    : 00641f
- z_rot                       : 006428
- z_source                    : 006435
- z_source-id                 : 00643c
- z_space                     : 006443
- z_spaces                    : 006450
- z_state                     : 006458
- z_store                     : 0060f0
- z_swap                      : 00645e
- z_tick                      : 00614d
- z_to-in                     : 0060da
- z_true                      : 006466
- z_tuck                      : 00646f
- z_two                       : 006124
- z_two-star                  : 006128
- z_type                      : 006490
- z_unused                    : 00649c
- z_words                     : 0064c4
- z_zero                      : 006110
