A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Fri Feb 17 20:17:55 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.10960 seconds
Code origin: 006000
Bytes of machine code: 4006

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 17. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: 1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE wsp | em  8  8 |        |             |
  16:074 | DONE wsp | em  8  8 |        |             |
  16:075 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:076 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:077 | DONE wsp | em  8  8 |        |             |
  16:078 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:080 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:089 | DONE wsp | em  8  8 |        |             |
  16:090 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:091 | DONE dir | em  8  8 |        |             |         .equ PW 0008                 Primitive (Native) Word
  16:092 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:093 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:094 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native (inline) Compile
  16:095 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             | 		; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 14 64    |                 jsr 006414           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  57:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  58:000 | DONE ins | na 16 16 | 00606a | a9 0f 6c    |                 lda.# 006c0f         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE wsp | na 16 16 |        |             |
  70:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  71:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  72:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  73:000 | DONE wsp | na 16 16 |        |             |
  74:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  75:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  76:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  77:000 | DONE wsp | na 16 16 |        |             |
  78:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  79:000 | DONE ins | na 16 16 | 006085 | 20 b0 65    |                 jsr 0065b0           
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  82:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is rubbish, so we don't have to push it to the
  83:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  84:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  88:000 | DONE ins | na 16 16 | 00608c | a9 e9 6c    |                 lda.# 006ce9         
  89:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  90:000 | DONE ins | na 16 16 | 006091 | a0 15 01    |                 ldy.# 000115         length goes in TOS
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE ins | na 16 16 | 006094 | 20 7d 64    |                 jsr 00647d           
  93:000 | DONE wsp | na 16 16 |        |             |
  94:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to ABORT
  95:000 | DONE wsp | na 16 16 |        |             |
  96:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  97:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  98:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  99:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 100:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 101:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 102:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 103:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 103:001 | DONE ctl | na 16 16 |        |             |         .!a16
 104:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 105:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 106:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE wsp | na 16 16 |        |             |
 109:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 110:000 | DONE wsp | na 16 16 |        |             |
 111:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 112:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 113:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 114:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 115:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 116:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 117:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 118:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 119:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 120:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 123:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 124:000 | DONE ins | na 16 16 | 0060a3 | 9c ac 64    |                 stz 0064ac           
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 127:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 130:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 131:000 | DONE wsp | na 16 16 |        |             |
 132:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 133:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 134:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 135:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 136:000 | DONE wsp | na 16 16 |        |             |
 137:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 138:000 | DONE ins | na 16 16 | 0060ac | 20 57 66    |                 jsr 006657           ( -- f )
 139:000 | DONE wsp | na 16 16 |        |             |
 140:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 141:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 142:000 | DONE wsp | na 16 16 |        |             |
 143:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 145:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 146:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 147:000 | DONE ins | na 16 16 | 0060b2 | a9 d2 6e    |                 lda.# 006ed2         
 148:000 | DONE ins | na 16 16 | 0060b5 | 4c af 6c    |                 jmp 006caf           
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE wsp | na 16 16 |        |             |
 151:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 152:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 153:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 154:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 155:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 156:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 157:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 158:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 159:000 | DONE wsp | na 16 16 |        |             |
 160:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 161:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 164:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 165:000 | DONE ins | na 16 16 | 0060be | 20 3d 6c    |                 jsr 006c3d           
 166:000 | DONE wsp | na 16 16 |        |             |
 167:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 168:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 169:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 170:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 171:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 172:000 | DONE wsp | na 16 16 |        |             |
 173:000 | DONE ins | na 16 16 | 0060c6 | a9 38 6f    |                 lda.# 006f38         
 174:000 | DONE ins | na 16 16 | 0060c9 | 4c af 6c    |                 jmp 006caf           
 175:000 | DONE wsp | na 16 16 |        |             |
 176:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 177:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 178:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 179:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 180:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 181:000 | DONE wsp | na 16 16 |        |             |
 182:000 | DONE ins | na 16 16 | 0060d0 | a9 fe 6d    |                 lda.# 006dfe         
 183:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 184:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 185:000 | DONE ins | na 16 16 | 0060d5 | a9 02 6e    |                 lda.# 006e02         fall through to quit_print
 186:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 187:000 | DONE ins | na 16 16 | 0060d8 | 20 b5 6c    |                 jsr 006cb5           
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, guys. Now get the next one
 190:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 191:000 | DONE wsp | na 16 16 |        |             |
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 194:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 194:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 195:000 | DONE wsp | na 16 16 |        |             |
 196:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 197:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 198:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 199:000 | DONE lbl | na 16 16 | 0060df |             | xt_to-in                             
 200:000 | DONE ins | na 16 16 | 0060df | ca          |                 dex                  
 201:000 | DONE ins | na 16 16 | 0060e0 | ca          |                 dex                  
 202:000 | DONE ins | na 16 16 | 0060e1 | 94 00       |                 sty.dx 00            
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | a0 12 02    |                 ldy.# 000212         >IN
 205:000 | DONE lbl | na 16 16 | 0060e6 |             | z_to-in                              
 205:001 | DONE ins | na 16 16 | 0060e6 | 60          |                 rts                  
 206:000 | DONE wsp | na 16 16 |        |             |
 207:000 | DONE wsp | na 16 16 |        |             |
 208:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 209:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 210:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
 211:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
 212:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 213:000 | DONE cmt | na 16 16 |        |             | ; focus on size
 214:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
 215:000 | DONE lbl | na 16 16 | 0060e7 |             | xt_dot                               
 216:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 217:000 | DONE ins | na 16 16 | 0060e7 | 98          |                 tya                  
 218:000 | DONE ins | na 16 16 | 0060e8 | 29 00 ff    |                 and.# 0ff00          
 219:000 | DONE ins | na 16 16 | 0060eb | eb          |                 xba                  
 220:000 | DONE ins | na 16 16 | 0060ec | 20 cd 6c    |                 jsr 006ccd           
 221:000 | DONE ins | na 16 16 | 0060ef | 98          |                 tya                  
 222:000 | DONE ins | na 16 16 | 0060f0 | 29 ff 00    |                 and.# 00ff           
 223:000 | DONE ins | na 16 16 | 0060f3 | 20 cd 6c    |                 jsr 006ccd           
 224:000 | DONE ins | na 16 16 | 0060f6 | 20 1a 67    |                 jsr 00671a           
 225:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 226:000 | DONE wsp | na 16 16 |        |             |
 227:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
 228:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
 229:000 | DONE ins | na 16 16 | 0060f9 | 20 4c 64    |                 jsr 00644c           
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE lbl | na 16 16 | 0060fc |             | z_dot                                
 231:001 | DONE ins | na 16 16 | 0060fc | 60          |                 rts                  
 232:000 | DONE wsp | na 16 16 |        |             |
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 235:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 236:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 237:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 238:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 239:000 | DONE lbl | na 16 16 | 0060fd |             | xt_dotparen                          
 240:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 241:000 | DONE ins | na 16 16 | 0060fd | ca          |                 dex                  
 242:000 | DONE ins | na 16 16 | 0060fe | ca          |                 dex                  
 243:000 | DONE ins | na 16 16 | 0060ff | 94 00       |                 sty.dx 00            
 244:000 | DONE ins | na 16 16 | 006101 | a0 29 00    |                 ldy.# 29             
 245:000 | DONE wsp | na 16 16 |        |             |
 246:000 | DONE ins | na 16 16 | 006104 | 20 ef 65    |                 jsr 0065ef           ( -- addr u)
 247:000 | DONE ins | na 16 16 | 006107 | 20 4d 67    |                 jsr 00674d           
 248:000 | DONE wsp | na 16 16 |        |             |
 249:000 | DONE lbl | na 16 16 | 00610a |             | z_dotparen                           
 249:001 | DONE ins | na 16 16 | 00610a | 60          |                 rts                  
 250:000 | DONE wsp | na 16 16 |        |             |
 251:000 | DONE wsp | na 16 16 |        |             |
 252:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 253:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 254:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 255:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 256:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 257:000 | DONE lbl | na 16 16 | 00610b |             | xt_dotquote                          
 258:000 | DONE ins | na 16 16 | 00610b | ca          |                 dex                  
 259:000 | DONE ins | na 16 16 | 00610c | ca          |                 dex                  
 260:000 | DONE ins | na 16 16 | 00610d | 94 00       |                 sty.dx 00            
 261:000 | DONE ins | na 16 16 | 00610f | a0 22 00    |                 ldy.# 0022           ASCII for "
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE ins | na 16 16 | 006112 | 20 ef 65    |                 jsr 0065ef           
 264:000 | DONE ins | na 16 16 | 006115 | 20 a5 66    |                 jsr 0066a5           
 265:000 | DONE wsp | na 16 16 |        |             |
 266:000 | DONE ins | na 16 16 | 006118 | f4 4d 67    |                 phe.# 00674d         
 267:000 | DONE ins | na 16 16 | 00611b | 20 8e 6c    |                 jsr 006c8e           
 268:000 | DONE wsp | na 16 16 |        |             |
 269:000 | DONE ins | na 16 16 | 00611e | 60          |                 rts                  
 270:000 | DONE lbl | na 16 16 | 00611f |             | z_dotquote                           
 271:000 | DONE wsp | na 16 16 |        |             |
 272:000 | DONE wsp | na 16 16 |        |             |
 273:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 274:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 275:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 276:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 277:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 278:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 279:000 | DONE lbl | na 16 16 | 00611f |             | xt_dots                              
 280:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 281:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 282:000 | DONE ins | na 16 16 | 00611f | 20 1a 64    |                 jsr 00641a           ( -- u)
 283:000 | DONE wsp | na 16 16 |        |             |
 284:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 285:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 286:000 | DONE ins | na 16 16 | 006122 | a9 3c 00    |                 lda.# 3c             
 287:000 | DONE ins | na 16 16 | 006125 | 20 36 60    |                 jsr 006036           
 288:000 | DONE wsp | na 16 16 |        |             |
 289:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 290:000 | DONE ins | na 16 16 | 006128 | 98          |                 tya                  
 291:000 | DONE ins | na 16 16 | 006129 | 29 00 ff    |                 and.# 0ff00          
 292:000 | DONE ins | na 16 16 | 00612c | eb          |                 xba                  
 293:000 | DONE ins | na 16 16 | 00612d | 20 cd 6c    |                 jsr 006ccd           
 294:000 | DONE ins | na 16 16 | 006130 | 98          |                 tya                  
 295:000 | DONE ins | na 16 16 | 006131 | 29 ff 00    |                 and.# 00ff           
 296:000 | DONE ins | na 16 16 | 006134 | 20 cd 6c    |                 jsr 006ccd           
 297:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 298:000 | DONE wsp | na 16 16 |        |             |
 299:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 300:000 | DONE ins | na 16 16 | 006137 | a9 3e 00    |                 lda.# 3e             
 301:000 | DONE ins | na 16 16 | 00613a | 20 36 60    |                 jsr 006036           
 302:000 | DONE ins | na 16 16 | 00613d | 20 1a 67    |                 jsr 00671a           
 303:000 | DONE wsp | na 16 16 |        |             |
 304:000 | DONE wsp | na 16 16 |        |             |
 305:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 306:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 307:000 | DONE ins | na 16 16 | 006140 | 98          |                 tya                  force flag test
 308:000 | DONE ins | na 16 16 | 006141 | f0 20       |                 beq 006163           
 309:000 | DONE wsp | na 16 16 |        |             |
 310:000 | DONE lbl | na 16 16 | 006143 |             | dots_not_empty                       
 311:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 312:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 313:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 314:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 315:000 | DONE wsp | na 16 16 |        |             |
 316:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 317:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 318:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 319:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 320:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
 321:000 | DONE ins | na 16 16 | 006143 | da          |                 phx                  
 322:000 | DONE wsp | na 16 16 |        |             |
 323:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 324:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
 325:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
 326:000 | DONE ins | na 16 16 | 006144 | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
 327:000 | DONE ins | na 16 16 | 006147 | ca          |                 dex                  
 328:000 | DONE ins | na 16 16 | 006148 | ca          |                 dex                  points to dsp0-2, which is more garbage
 329:000 | DONE wsp | na 16 16 |        |             |
 330:000 | DONE lbl | na 16 16 | 006149 |             | dots_loop                            
 331:000 | DONE ins | na 16 16 | 006149 | ca          |                 dex                  get next element on DS, initially dsp0-4
 332:000 | DONE ins | na 16 16 | 00614a | ca          |                 dex                  
 333:000 | DONE wsp | na 16 16 |        |             |
 334:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 335:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 336:000 | DONE ins | na 16 16 | 00614b | b5 00       |                 lda.dx 00            
 337:000 | DONE ins | na 16 16 | 00614d | 29 00 ff    |                 and.# 0ff00          
 338:000 | DONE ins | na 16 16 | 006150 | eb          |                 xba                  
 339:000 | DONE ins | na 16 16 | 006151 | 20 cd 6c    |                 jsr 006ccd           
 340:000 | DONE ins | na 16 16 | 006154 | b5 00       |                 lda.dx 00            
 341:000 | DONE ins | na 16 16 | 006156 | 29 ff 00    |                 and.# 00ff           
 342:000 | DONE ins | na 16 16 | 006159 | 20 cd 6c    |                 jsr 006ccd           
 343:000 | DONE ins | na 16 16 | 00615c | 20 1a 67    |                 jsr 00671a           
 344:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 345:000 | DONE wsp | na 16 16 |        |             |
 346:000 | DONE ins | na 16 16 | 00615f | 88          |                 dey                  
 347:000 | DONE ins | na 16 16 | 006160 | d0 e7       |                 bne 006149           
 348:000 | DONE wsp | na 16 16 |        |             |
 349:000 | DONE ins | na 16 16 | 006162 | fa          |                 plx                  restore original DSP
 350:000 | DONE wsp | na 16 16 |        |             |
 351:000 | DONE lbl | na 16 16 | 006163 |             | dots_done                            
 352:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 353:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 354:000 | DONE ins | na 16 16 | 006163 | 20 4c 64    |                 jsr 00644c           
 355:000 | DONE wsp | na 16 16 |        |             |
 356:000 | DONE lbl | na 16 16 | 006166 |             | z_dots                               
 356:001 | DONE ins | na 16 16 | 006166 | 60          |                 rts                  
 357:000 | DONE wsp | na 16 16 |        |             |
 358:000 | DONE wsp | na 16 16 |        |             |
 359:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 360:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 361:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 362:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 363:000 | DONE cmt | na 16 16 |        |             | ; aligned
 364:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 365:000 | DONE cmt | na 16 16 |        |             | ;               tya
 366:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 367:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 368:000 | DONE cmt | na 16 16 |        |             | ;               iny
 369:000 | DONE cmt | na 16 16 |        |             | ;               iny
 370:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 371:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 372:000 | DONE cmt | na 16 16 |        |             | ;               inx
 373:000 | DONE cmt | na 16 16 |        |             | ;               inx
 374:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 375:000 | DONE lbl | na 16 16 | 006167 |             | xt_comma                             
 376:000 | DONE ins | na 16 16 | 006167 | 98          |                 tya                  
 377:000 | DONE ins | na 16 16 | 006168 | 92 00       |                 sta.di 000200        STA (CP)
 378:000 | DONE ins | na 16 16 | 00616a | e6 00       |                 inc.d 000200         
 379:000 | DONE ins | na 16 16 | 00616c | e6 00       |                 inc.d 000200         
 380:000 | DONE wsp | na 16 16 |        |             |
 381:000 | DONE ins | na 16 16 | 00616e | b4 00       |                 ldy.dx 00            
 382:000 | DONE ins | na 16 16 | 006170 | e8          |                 inx                  
 383:000 | DONE ins | na 16 16 | 006171 | e8          |                 inx                  
 384:000 | DONE wsp | na 16 16 |        |             |
 385:000 | DONE lbl | na 16 16 | 006172 |             | z_comma                              
 385:001 | DONE ins | na 16 16 | 006172 | 60          |                 rts                  
 386:000 | DONE wsp | na 16 16 |        |             |
 387:000 | DONE wsp | na 16 16 |        |             |
 388:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 389:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 390:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 391:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 392:000 | DONE lbl | na 16 16 | 006173 |             | xt_colon                             
 393:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 394:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 395:000 | DONE ins | na 16 16 | 006173 | a5 14       |                 lda.d 000214         
 396:000 | DONE ins | na 16 16 | 006175 | f0 06       |                 beq 00617d           
 397:000 | DONE wsp | na 16 16 |        |             |
 398:000 | DONE ins | na 16 16 | 006177 | a9 20 6f    |                 lda.# 006f20         
 399:000 | DONE ins | na 16 16 | 00617a | 4c af 6c    |                 jmp 006caf           
 400:000 | DONE lbl | na 16 16 | 00617d |             | @                                    
 401:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 402:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 403:000 | DONE ins | na 16 16 | 00617d | e6 14       |                 inc.d 000214         
 404:000 | DONE wsp | na 16 16 |        |             |
 405:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 406:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 407:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 408:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 409:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 410:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 411:000 | DONE ins | na 16 16 | 00617f | a5 02       |                 lda.d 000202         
 412:000 | DONE ins | na 16 16 | 006181 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 413:000 | DONE wsp | na 16 16 |        |             |
 414:000 | DONE ins | na 16 16 | 006182 | 20 a1 63    |                 jsr 0063a1           
 415:000 | DONE wsp | na 16 16 |        |             |
 416:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 417:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 418:000 | DONE ins | na 16 16 | 006185 | a5 02       |                 lda.d 000202         
 419:000 | DONE ins | na 16 16 | 006187 | 85 1e       |                 sta.d 00021e         
 420:000 | DONE ins | na 16 16 | 006189 | 68          |                 pla                  
 421:000 | DONE ins | na 16 16 | 00618a | 85 02       |                 sta.d 000202         
 422:000 | DONE wsp | na 16 16 |        |             |
 423:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 424:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 425:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 426:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 427:000 | DONE ins | na 16 16 | 00618c | a5 00       |                 lda.d 000200         
 428:000 | DONE ins | na 16 16 | 00618e | 38          |                 sec                  
 429:000 | DONE ins | na 16 16 | 00618f | e9 03 00    |                 sbc.# 0003           
 430:000 | DONE ins | na 16 16 | 006192 | 85 00       |                 sta.d 000200         
 431:000 | DONE wsp | na 16 16 |        |             |
 432:000 | DONE lbl | na 16 16 | 006194 |             | z_colon                              
 432:001 | DONE ins | na 16 16 | 006194 | 60          |                 rts                  
 433:000 | DONE wsp | na 16 16 |        |             |
 434:000 | DONE wsp | na 16 16 |        |             |
 435:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 436:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 437:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 438:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 439:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 440:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 441:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 442:000 | DONE lbl | na 16 16 | 006195 |             | xt_semicolon                         
 443:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 444:000 | DONE ins | na 16 16 | 006195 | 84 06       |                 sty.d 000206         
 445:000 | DONE wsp | na 16 16 |        |             |
 446:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 447:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 448:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 449:000 | DONE ins | na 16 16 | 006197 | a0 06 00    |                 ldy.# 0006           
 450:000 | DONE ins | na 16 16 | 00619a | a5 00       |                 lda.d 000200         
 451:000 | DONE ins | na 16 16 | 00619c | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 452:000 | DONE wsp | na 16 16 |        |             |
 453:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 454:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 455:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 456:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 457:000 | DONE ins | na 16 16 | 00619e | a9 60 00    |                 lda.# 60             opcode for RTS
 458:000 | DONE ins | na 16 16 | 0061a1 | 92 00       |                 sta.di 000200        STA (CP)
 459:000 | DONE ins | na 16 16 | 0061a3 | e6 00       |                 inc.d 000200         MSB will be overwritten
 460:000 | DONE wsp | na 16 16 |        |             |
 461:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 462:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 463:000 | DONE ins | na 16 16 | 0061a5 | a5 1e       |                 lda.d 00021e         
 464:000 | DONE ins | na 16 16 | 0061a7 | 85 02       |                 sta.d 000202         
 465:000 | DONE wsp | na 16 16 |        |             |
 466:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 467:000 | DONE ins | na 16 16 | 0061a9 | a4 06       |                 ldy.d 000206         
 468:000 | DONE wsp | na 16 16 |        |             |
 469:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 470:000 | DONE ins | na 16 16 | 0061ab | 64 14       |                 stz.d 000214         
 471:000 | DONE wsp | na 16 16 |        |             |
 472:000 | DONE lbl | na 16 16 | 0061ad |             | z_semicolon                          
 472:001 | DONE ins | na 16 16 | 0061ad | 60          |                 rts                  
 473:000 | DONE wsp | na 16 16 |        |             |
 474:000 | DONE wsp | na 16 16 |        |             |
 475:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 476:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 477:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and so can be pretty
 478:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 479:000 | DONE lbl | na 16 16 | 0061ae |             | xt_question                          
 480:000 | DONE ins | na 16 16 | 0061ae | 20 bf 61    |                 jsr 0061bf           
 481:000 | DONE ins | na 16 16 | 0061b1 | 20 e7 60    |                 jsr 0060e7           
 482:000 | DONE wsp | na 16 16 |        |             |
 483:000 | DONE lbl | na 16 16 | 0061b4 |             | z_question                           
 483:001 | DONE ins | na 16 16 | 0061b4 | 60          |                 rts                  
 484:000 | DONE wsp | na 16 16 |        |             |
 485:000 | DONE wsp | na 16 16 |        |             |
 486:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 487:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 488:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 489:000 | DONE lbl | na 16 16 | 0061b5 |             | xt_store                             
 490:000 | DONE ins | na 16 16 | 0061b5 | b5 00       |                 lda.dx 00            NOS has value
 491:000 | DONE ins | na 16 16 | 0061b7 | 99 00 00    |                 sta.y 0000           
 492:000 | DONE ins | na 16 16 | 0061ba | e8          |                 inx                  
 493:000 | DONE ins | na 16 16 | 0061bb | e8          |                 inx                  
 494:000 | DONE ins | na 16 16 | 0061bc | e8          |                 inx                  
 495:000 | DONE ins | na 16 16 | 0061bd | e8          |                 inx                  
 496:000 | DONE wsp | na 16 16 |        |             |
 497:000 | DONE lbl | na 16 16 | 0061be |             | z_store                              
 497:001 | DONE ins | na 16 16 | 0061be | 60          |                 rts                  
 498:000 | DONE wsp | na 16 16 |        |             |
 499:000 | DONE wsp | na 16 16 |        |             |
 500:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 501:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 502:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 503:000 | DONE lbl | na 16 16 | 0061bf |             | xt_fetch                             
 504:000 | DONE ins | na 16 16 | 0061bf | b9 00 00    |                 lda.y 0000           
 505:000 | DONE ins | na 16 16 | 0061c2 | a8          |                 tay                  
 506:000 | DONE wsp | na 16 16 |        |             |
 507:000 | DONE lbl | na 16 16 | 0061c3 |             | z_fetch                              
 507:001 | DONE ins | na 16 16 | 0061c3 | 60          |                 rts                  
 508:000 | DONE wsp | na 16 16 |        |             |
 509:000 | DONE wsp | na 16 16 |        |             |
 510:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 511:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 512:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 513:000 | DONE lbl | na 16 16 | 0061c4 |             | xt_brackettick                       
 514:000 | DONE ins | na 16 16 | 0061c4 | 20 1f 62    |                 jsr 00621f           
 515:000 | DONE ins | na 16 16 | 0061c7 | 4c 2d 65    |                 jmp 00652d           JSR/RTS
 516:000 | DONE lbl | na 16 16 | 0061ca |             | z_brackettick                        
 517:000 | DONE wsp | na 16 16 |        |             |
 518:000 | DONE wsp | na 16 16 |        |             |
 519:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 520:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 521:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 522:000 | DONE lbl | na 16 16 | 0061ca |             | xt_leftbracket                       
 523:000 | DONE ins | na 16 16 | 0061ca | 64 14       |                 stz.d 000214         
 524:000 | DONE lbl | na 16 16 | 0061cc |             | z_leftbracket                        
 524:001 | DONE ins | na 16 16 | 0061cc | 60          |                 rts                  
 525:000 | DONE wsp | na 16 16 |        |             |
 526:000 | DONE wsp | na 16 16 |        |             |
 527:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 528:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 529:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 530:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 531:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 532:000 | DONE lbl | na 16 16 | 0061cd |             | xt_rightbracket                      
 533:000 | DONE ins | na 16 16 | 0061cd | a9 01 00    |                 lda.# 0001           
 534:000 | DONE ins | na 16 16 | 0061d0 | 85 14       |                 sta.d 000214         
 535:000 | DONE wsp | na 16 16 |        |             |
 536:000 | DONE lbl | na 16 16 | 0061d2 |             | z_rightbracket                       
 536:001 | DONE ins | na 16 16 | 0061d2 | 60          |                 rts                  
 537:000 | DONE wsp | na 16 16 |        |             |
 538:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 539:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( -- ) X bytes / X cycles
 540:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 541:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word
 542:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 543:000 | DONE lbl | na 16 16 | 0061d3 |             | xt_bracketchar                       
 544:000 | DONE ins | na 16 16 | 0061d3 | 20 3d 63    |                 jsr 00633d           
 545:000 | DONE ins | na 16 16 | 0061d6 | 20 2d 65    |                 jsr 00652d           
 546:000 | DONE wsp | na 16 16 |        |             |
 547:000 | DONE lbl | na 16 16 | 0061d9 |             | z_bracketchar                        
 547:001 | DONE ins | na 16 16 | 0061d9 | 60          |                 rts                  
 548:000 | DONE wsp | na 16 16 |        |             |
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 551:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 552:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 553:000 | DONE lbl | na 16 16 | 0061da |             | xt_plus                              
 554:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 555:000 | DONE ins | na 16 16 | 0061da | 98          |                 tya                  
 556:000 | DONE ins | na 16 16 | 0061db | 18          |                 clc                  
 557:000 | DONE ins | na 16 16 | 0061dc | 75 00       |                 adc.dx 00            
 558:000 | DONE ins | na 16 16 | 0061de | a8          |                 tay                  
 559:000 | DONE ins | na 16 16 | 0061df | e8          |                 inx                  
 560:000 | DONE ins | na 16 16 | 0061e0 | e8          |                 inx                  
 561:000 | DONE wsp | na 16 16 |        |             |
 562:000 | DONE lbl | na 16 16 | 0061e1 |             | z_plus                               
 562:001 | DONE ins | na 16 16 | 0061e1 | 60          |                 rts                  
 563:000 | DONE wsp | na 16 16 |        |             |
 564:000 | DONE wsp | na 16 16 |        |             |
 565:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 566:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 567:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 568:000 | DONE lbl | na 16 16 | 0061e2 |             | xt_minus                             
 569:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 570:000 | DONE ins | na 16 16 | 0061e2 | 98          |                 tya                  
 571:000 | DONE ins | na 16 16 | 0061e3 | 49 ff ff    |                 eor.# 0ffff          
 572:000 | DONE wsp | na 16 16 |        |             |
 573:000 | DONE ins | na 16 16 | 0061e6 | 38          |                 sec                  not CLC
 574:000 | DONE ins | na 16 16 | 0061e7 | 75 00       |                 adc.dx 00            
 575:000 | DONE wsp | na 16 16 |        |             |
 576:000 | DONE ins | na 16 16 | 0061e9 | a8          |                 tay                  
 577:000 | DONE ins | na 16 16 | 0061ea | e8          |                 inx                  
 578:000 | DONE ins | na 16 16 | 0061eb | e8          |                 inx                  
 579:000 | DONE wsp | na 16 16 |        |             |
 580:000 | DONE lbl | na 16 16 | 0061ec |             | z_minus                              
 580:001 | DONE ins | na 16 16 | 0061ec | 60          |                 rts                  
 581:000 | DONE wsp | na 16 16 |        |             |
 582:000 | DONE wsp | na 16 16 |        |             |
 583:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 584:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 585:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 586:000 | DONE lbl | na 16 16 | 0061ed |             | xt_zero                              
 587:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 588:000 | DONE ins | na 16 16 | 0061ed | ca          |                 dex                  
 589:000 | DONE ins | na 16 16 | 0061ee | ca          |                 dex                  
 590:000 | DONE ins | na 16 16 | 0061ef | 94 00       |                 sty.dx 00            
 591:000 | DONE ins | na 16 16 | 0061f1 | a0 00 00    |                 ldy.# 0000           
 592:000 | DONE wsp | na 16 16 |        |             |
 593:000 | DONE lbl | na 16 16 | 0061f4 |             | z_zero                               
 593:001 | DONE ins | na 16 16 | 0061f4 | 60          |                 rts                  
 594:000 | DONE wsp | na 16 16 |        |             |
 595:000 | DONE wsp | na 16 16 |        |             |
 596:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 597:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 598:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 599:000 | DONE lbl | na 16 16 | 0061f5 |             | xt_one                               
 600:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 601:000 | DONE ins | na 16 16 | 0061f5 | ca          |                 dex                  
 602:000 | DONE ins | na 16 16 | 0061f6 | ca          |                 dex                  
 603:000 | DONE ins | na 16 16 | 0061f7 | 94 00       |                 sty.dx 00            
 604:000 | DONE ins | na 16 16 | 0061f9 | a0 01 00    |                 ldy.# 0001           
 605:000 | DONE wsp | na 16 16 |        |             |
 606:000 | DONE lbl | na 16 16 | 0061fc |             | z_one                                
 606:001 | DONE ins | na 16 16 | 0061fc | 60          |                 rts                  
 607:000 | DONE wsp | na 16 16 |        |             |
 608:000 | DONE wsp | na 16 16 |        |             |
 609:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 610:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 611:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 612:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 613:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 614:000 | DONE lbl | na 16 16 | 0061fd |             | xt_one-minus                         
 615:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 616:000 | DONE ins | na 16 16 | 0061fd | 88          |                 dey                  
 617:000 | DONE lbl | na 16 16 | 0061fe |             | z_one-minus                          
 617:001 | DONE ins | na 16 16 | 0061fe | 60          |                 rts                  
 618:000 | DONE wsp | na 16 16 |        |             |
 619:000 | DONE wsp | na 16 16 |        |             |
 620:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 621:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 622:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 623:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 624:000 | DONE lbl | na 16 16 | 0061ff |             | xt_one-plus                          
 625:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 626:000 | DONE ins | na 16 16 | 0061ff | c8          |                 iny                  
 627:000 | DONE lbl | na 16 16 | 006200 |             | z_one-plus                           
 627:001 | DONE ins | na 16 16 | 006200 | 60          |                 rts                  
 628:000 | DONE wsp | na 16 16 |        |             |
 629:000 | DONE wsp | na 16 16 |        |             |
 630:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 631:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 632:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 633:000 | DONE lbl | na 16 16 | 006201 |             | xt_two                               
 634:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 635:000 | DONE ins | na 16 16 | 006201 | ca          |                 dex                  
 636:000 | DONE ins | na 16 16 | 006202 | ca          |                 dex                  
 637:000 | DONE ins | na 16 16 | 006203 | 94 00       |                 sty.dx 00            
 638:000 | DONE ins | na 16 16 | 006205 | a0 02 00    |                 ldy.# 0002           
 639:000 | DONE wsp | na 16 16 |        |             |
 640:000 | DONE lbl | na 16 16 | 006208 |             | z_two                                
 640:001 | DONE ins | na 16 16 | 006208 | 60          |                 rts                  
 641:000 | DONE wsp | na 16 16 |        |             |
 642:000 | DONE wsp | na 16 16 |        |             |
 643:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 644:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 645:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 646:000 | DONE lbl | na 16 16 | 006209 |             | xt_two-star                          
 647:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 648:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 649:000 | DONE ins | na 16 16 | 006209 | 98          |                 tya                  
 650:000 | DONE ins | na 16 16 | 00620a | 0a          |                 asl.a                
 651:000 | DONE ins | na 16 16 | 00620b | a8          |                 tay                  
 652:000 | DONE wsp | na 16 16 |        |             |
 653:000 | DONE lbl | na 16 16 | 00620c |             | z_two-star                           
 653:001 | DONE ins | na 16 16 | 00620c | 60          |                 rts                  
 654:000 | DONE wsp | na 16 16 |        |             |
 655:000 | DONE wsp | na 16 16 |        |             |
 656:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 657:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
 658:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
 659:000 | DONE lbl | na 16 16 | 00620d |             | xt_2drop                             
 660:000 | DONE ins | na 16 16 | 00620d | b4 02       |                 ldy.dx 02            
 661:000 | DONE ins | na 16 16 | 00620f | e8          |                 inx                  
 662:000 | DONE ins | na 16 16 | 006210 | e8          |                 inx                  
 663:000 | DONE ins | na 16 16 | 006211 | e8          |                 inx                  
 664:000 | DONE ins | na 16 16 | 006212 | e8          |                 inx                  
 665:000 | DONE wsp | na 16 16 |        |             |
 666:000 | DONE lbl | na 16 16 | 006213 |             | z_2drop                              
 666:001 | DONE ins | na 16 16 | 006213 | 60          |                 rts                  
 667:000 | DONE wsp | na 16 16 |        |             |
 668:000 | DONE wsp | na 16 16 |        |             |
 669:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 670:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 671:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 672:000 | DONE wsp | na 16 16 |        |             |
 673:000 | DONE lbl | na 16 16 | 006214 |             | xt_2dup                              
 674:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 675:000 | DONE ins | na 16 16 | 006214 | ca          |                 dex                  
 676:000 | DONE ins | na 16 16 | 006215 | ca          |                 dex                  
 677:000 | DONE ins | na 16 16 | 006216 | ca          |                 dex                  
 678:000 | DONE ins | na 16 16 | 006217 | ca          |                 dex                  
 679:000 | DONE ins | na 16 16 | 006218 | 94 02       |                 sty.dx 02            
 680:000 | DONE ins | na 16 16 | 00621a | b5 04       |                 lda.dx 04            
 681:000 | DONE ins | na 16 16 | 00621c | 95 00       |                 sta.dx 00            
 682:000 | DONE wsp | na 16 16 |        |             |
 683:000 | DONE lbl | na 16 16 | 00621e |             | z_2dup                               
 683:001 | DONE ins | na 16 16 | 00621e | 60          |                 rts                  
 684:000 | DONE wsp | na 16 16 |        |             |
 685:000 | DONE wsp | na 16 16 |        |             |
 686:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 687:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 688:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 689:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 690:000 | DONE lbl | na 16 16 | 00621f |             | xt_tick                              
 691:000 | DONE ins | na 16 16 | 00621f | 20 bd 65    |                 jsr 0065bd           ( -- addr u )
 692:000 | DONE wsp | na 16 16 |        |             |
 693:000 | DONE cmt | na 16 16 |        |             | 		; if we got a zero, complain and abort
 694:000 | DONE ins | na 16 16 | 006222 | 98          |                 tya                  force flag check
 695:000 | DONE ins | na 16 16 | 006223 | d0 06       |                 bne 00622b           
 696:000 | DONE wsp | na 16 16 |        |             |
 697:000 | DONE ins | na 16 16 | 006225 | a9 ab 6e    |                 lda.# 006eab         
 698:000 | DONE ins | na 16 16 | 006228 | 4c af 6c    |                 jmp 006caf           
 699:000 | DONE wsp | na 16 16 |        |             |
 700:000 | DONE lbl | na 16 16 | 00622b |             | tick_have_word                       
 701:000 | DONE ins | na 16 16 | 00622b | 20 ba 64    |                 jsr 0064ba           ( addr u -- nt)
 702:000 | DONE ins | na 16 16 | 00622e | 98          |                 tya                  force flag check
 703:000 | DONE wsp | na 16 16 |        |             |
 704:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 705:000 | DONE ins | na 16 16 | 00622f | d0 06       |                 bne 006237           
 706:000 | DONE wsp | na 16 16 |        |             |
 707:000 | DONE ins | na 16 16 | 006231 | a9 48 6f    |                 lda.# 006f48         
 708:000 | DONE ins | na 16 16 | 006234 | 4c af 6c    |                 jmp 006caf           
 709:000 | DONE wsp | na 16 16 |        |             |
 710:000 | DONE lbl | na 16 16 | 006237 |             | tick_have_nt                         
 711:000 | DONE ins | na 16 16 | 006237 | 20 72 65    |                 jsr 006572           ( nt -- xt )
 712:000 | DONE wsp | na 16 16 |        |             |
 713:000 | DONE lbl | na 16 16 | 00623a |             | z_tick                               
 713:001 | DONE ins | na 16 16 | 00623a | 60          |                 rts                  
 714:000 | DONE wsp | na 16 16 |        |             |
 715:000 | DONE wsp | na 16 16 |        |             |
 716:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 717:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 718:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 719:000 | DONE lbl | na 16 16 | 00623b |             | xt_abs                               
 720:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 721:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 722:000 | DONE ins | na 16 16 | 00623b | 98          |                 tya                  force flag test
 723:000 | DONE ins | na 16 16 | 00623c | 10 05       |                 bpl 006243           positive number is easy
 724:000 | DONE wsp | na 16 16 |        |             |
 725:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 726:000 | DONE ins | na 16 16 | 00623e | 49 ff ff    |                 eor.# 0ffff          
 727:000 | DONE ins | na 16 16 | 006241 | 1a          |                 inc.a                
 728:000 | DONE ins | na 16 16 | 006242 | a8          |                 tay                  
 729:000 | DONE wsp | na 16 16 |        |             |
 730:000 | DONE lbl | na 16 16 | 006243 |             | z_abs                                
 730:001 | DONE ins | na 16 16 | 006243 | 60          |                 rts                  
 731:000 | DONE wsp | na 16 16 |        |             |
 732:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 733:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 734:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 735:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 736:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 737:000 | DONE lbl | na 16 16 | 006244 |             | xt_accept                            
 738:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 739:000 | DONE ins | na 16 16 | 006244 | 98          |                 tya                  force flag test
 740:000 | DONE ins | na 16 16 | 006245 | d0 03       |                 bne 00624a           
 741:000 | DONE wsp | na 16 16 |        |             |
 742:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 743:000 | DONE ins | na 16 16 | 006247 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
 744:000 | DONE ins | na 16 16 | 006248 | e8          |                 inx                  
 745:000 | DONE wsp | na 16 16 |        |             |
 746:000 | DONE ins | na 16 16 | 006249 | 60          |                 rts                  
 747:000 | DONE wsp | na 16 16 |        |             |
 748:000 | DONE lbl | na 16 16 | 00624a |             | accept_nonzero                       
 749:000 | DONE ins | na 16 16 | 00624a | b5 00       |                 lda.dx 00            address of buffer is NOS
 750:000 | DONE ins | na 16 16 | 00624c | 85 16       |                 sta.d 000216         
 751:000 | DONE ins | na 16 16 | 00624e | e8          |                 inx                  NIP
 752:000 | DONE ins | na 16 16 | 00624f | e8          |                 inx                  
 753:000 | DONE wsp | na 16 16 |        |             |
 754:000 | DONE ins | na 16 16 | 006250 | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
 755:000 | DONE ins | na 16 16 | 006252 | a0 00 00    |                 ldy.# 0000           Use Y as counter
 756:000 | DONE ins | na 16 16 | 006255 | e2 20       |                 sep 20               
 756:001 | DONE ctl | na  8 16 |        |             |         .!a8
 757:000 | DONE wsp | na  8 16 |        |             |
 758:000 | DONE lbl | na  8 16 | 006257 |             | accept_loop                          
 759:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 760:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
 761:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 762:000 | DONE ins | na  8 16 | 006257 | 20 47 60    |                 jsr 006047           
 763:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 764:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
 765:000 | DONE ins | na  8 16 | 00625a | c9 0a       |                 cmp.# AscLF          
 766:000 | DONE ins | na  8 16 | 00625c | f0 44       |                 beq 0062a2           
 767:000 | DONE ins | na  8 16 | 00625e | c9 0d       |                 cmp.# AscCR          
 768:000 | DONE ins | na  8 16 | 006260 | f0 40       |                 beq 0062a2           
 769:000 | DONE wsp | na  8 16 |        |             |
 770:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
 771:000 | DONE ins | na  8 16 | 006262 | c9 08       |                 cmp.# AscBS          
 772:000 | DONE ins | na  8 16 | 006264 | f0 44       |                 beq 0062aa           
 773:000 | DONE ins | na  8 16 | 006266 | c9 7f       |                 cmp.# AscDEL         
 774:000 | DONE ins | na  8 16 | 006268 | f0 40       |                 beq 0062aa           
 775:000 | DONE wsp | na  8 16 |        |             |
 776:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
 777:000 | DONE ins | na  8 16 | 00626a | c9 03       |                 cmp.# AscCC          
 778:000 | DONE ins | na  8 16 | 00626c | d0 03       |                 bne 006271           
 779:000 | DONE ins | na  8 16 | 00626e | 4c 97 60    |                 jmp 006097           
 780:000 | DONE lbl | na  8 16 | 006271 |             | @                                    
 781:000 | DONE ins | na  8 16 | 006271 | c9 1b       |                 cmp.# AscESC         
 782:000 | DONE ins | na  8 16 | 006273 | d0 03       |                 bne 006278           
 783:000 | DONE ins | na  8 16 | 006275 | 4c 97 60    |                 jmp 006097           
 784:000 | DONE lbl | na  8 16 | 006278 |             | @                                    
 785:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
 786:000 | DONE ins | na  8 16 | 006278 | c9 10       |                 cmp.# AscCP          
 787:000 | DONE ins | na  8 16 | 00627a | d0 0c       |                 bne 006288           
 788:000 | DONE ins | na  8 16 | 00627c | c2 20       |                 rep 20               
 788:001 | DONE ctl | na 16 16 |        |             |         .!a16
 789:000 | DONE ins | na 16 16 | 00627e | a9 61 6f    |                 lda.# 006f61         
 790:000 | DONE ins | na 16 16 | 006281 | 20 b5 6c    |                 jsr 006cb5           
 791:000 | DONE ins | na 16 16 | 006284 | e2 20       |                 sep 20               
 791:001 | DONE ctl | na  8 16 |        |             |         .!a8
 792:000 | DONE ins | na  8 16 | 006286 | 80 cf       |                 bra 006257           
 793:000 | DONE lbl | na  8 16 | 006288 |             | @                                    
 794:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
 795:000 | DONE ins | na  8 16 | 006288 | c9 0e       |                 cmp.# AscCN          
 796:000 | DONE ins | na  8 16 | 00628a | d0 0c       |                 bne 006298           
 797:000 | DONE ins | na  8 16 | 00628c | c2 20       |                 rep 20               
 797:001 | DONE ctl | na 16 16 |        |             |         .!a16
 798:000 | DONE ins | na 16 16 | 00628e | a9 74 6f    |                 lda.# 006f74         
 799:000 | DONE ins | na 16 16 | 006291 | 20 b5 6c    |                 jsr 006cb5           
 800:000 | DONE ins | na 16 16 | 006294 | e2 20       |                 sep 20               
 800:001 | DONE ctl | na  8 16 |        |             |         .!a8
 801:000 | DONE ins | na  8 16 | 006296 | 80 bf       |                 bra 006257           
 802:000 | DONE wsp | na  8 16 |        |             |
 803:000 | DONE lbl | na  8 16 | 006298 |             | @                                    
 804:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
 805:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
 806:000 | DONE ins | na  8 16 | 006298 | 20 36 60    |                 jsr 006036           echo character
 807:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 808:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 809:000 | DONE wsp | na  8 16 |        |             |
 810:000 | DONE ins | na  8 16 | 00629b | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
 811:000 | DONE ins | na  8 16 | 00629d | c8          |                 iny                  
 812:000 | DONE ins | na  8 16 | 00629e | c4 18       |                 cpy.d 000218         reached character limit?
 813:000 | DONE ins | na  8 16 | 0062a0 | d0 b5       |                 bne 006257           fall thru if buffer limit reached
 814:000 | DONE wsp | na  8 16 |        |             |
 815:000 | DONE lbl | na  8 16 | 0062a2 |             | accept_eol                           
 816:000 | DONE ins | na  8 16 | 0062a2 | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
 817:000 | DONE ins | na  8 16 | 0062a4 | c2 20       |                 rep 20               
 817:001 | DONE ctl | na 16 16 |        |             |         .!a16
 818:000 | DONE ins | na 16 16 | 0062a6 | 20 1a 67    |                 jsr 00671a           print final space
 819:000 | DONE ins | na 16 16 | 0062a9 | 60          |                 rts                  this is the actual return of the routine
 820:000 | DONE wsp | na 16 16 |        |             |
 821:000 | DONE lbl | na 16 16 | 0062aa |             | accept_bs                            
 822:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 823:000 | DONE ins | na  8 16 | 0062aa | c0 00 00    |                 cpy.# 0000           buffer empty?
 824:000 | DONE ins | na  8 16 | 0062ad | d0 06       |                 bne 0062b5           
 825:000 | DONE wsp | na  8 16 |        |             |
 826:000 | DONE ins | na  8 16 | 0062af | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
 827:000 | DONE ins | na  8 16 | 0062b1 | 20 36 60    |                 jsr 006036           
 828:000 | DONE ins | na  8 16 | 0062b4 | c8          |                 iny                  
 829:000 | DONE lbl | na  8 16 | 0062b5 |             | @                                    
 830:000 | DONE ins | na  8 16 | 0062b5 | 88          |                 dey                  
 831:000 | DONE ins | na  8 16 | 0062b6 | a9 08       |                 lda.# AscBS          move back one
 832:000 | DONE ins | na  8 16 | 0062b8 | 20 36 60    |                 jsr 006036           
 833:000 | DONE ins | na  8 16 | 0062bb | a9 20       |                 lda.# AscSP          print a space (rubout)
 834:000 | DONE ins | na  8 16 | 0062bd | 20 36 60    |                 jsr 006036           
 835:000 | DONE ins | na  8 16 | 0062c0 | a9 08       |                 lda.# AscBS          move back over space
 836:000 | DONE ins | na  8 16 | 0062c2 | 20 36 60    |                 jsr 006036           
 837:000 | DONE wsp | na  8 16 |        |             |
 838:000 | DONE ins | na  8 16 | 0062c5 | 80 90       |                 bra 006257           
 839:000 | DONE wsp | na  8 16 |        |             |
 840:000 | DONE lbl | na  8 16 | 0062c7 |             | z_accept                             
 840:001 | DONE ins | na  8 16 | 0062c7 | 60          |                 rts                  
 841:000 | DONE wsp | na  8 16 |        |             |
 842:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 843:000 | DONE cmt | na  8 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
 844:000 | DONE cmt | na  8 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
 845:000 | DONE cmt | na  8 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
 846:000 | DONE cmt | na  8 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
 847:000 | DONE cmt | na  8 16 |        |             | ; past the Dictionary.
 848:000 | DONE cmt | na  8 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
 849:000 | DONE cmt | na  8 16 |        |             | ; TODO test negative values
 850:000 | DONE lbl | na  8 16 | 0062c8 |             | xt_allot                             
 851:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 852:000 | DONE ins | na 16 16 | 0062c8 | 98          |                 tya                  force flag check
 853:000 | DONE ins | na 16 16 | 0062c9 | f0 21       |                 beq 0062ec           zero bytes, don't do anything
 854:000 | DONE ins | na 16 16 | 0062cb | 30 12       |                 bmi 0062df           free memory instead of reserving it
 855:000 | DONE wsp | na 16 16 |        |             |
 856:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
 857:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
 858:000 | DONE ins | na 16 16 | 0062cd | 18          |                 clc                  
 859:000 | DONE ins | na 16 16 | 0062ce | 65 00       |                 adc.d 000200         create new CP
 860:000 | DONE ins | na 16 16 | 0062d0 | b0 07       |                 bcs 0062d9           oops, we've wrapped
 861:000 | DONE wsp | na 16 16 |        |             |
 862:000 | DONE ins | na 16 16 | 0062d2 | a8          |                 tay                  save copy of new CP
 863:000 | DONE wsp | na 16 16 |        |             |
 864:000 | DONE ins | na 16 16 | 0062d3 | 38          |                 sec                  
 865:000 | DONE ins | na 16 16 | 0062d4 | e9 ff 7b    |                 sbc.# 007bff         
 866:000 | DONE ins | na 16 16 | 0062d7 | 30 11       |                 bmi 0062ea           oops, fall thru if beyond max RAM
 867:000 | DONE wsp | na 16 16 |        |             |
 868:000 | DONE lbl | na 16 16 | 0062d9 |             | allot_error                          
 869:000 | DONE ins | na 16 16 | 0062d9 | a9 0c 6e    |                 lda.# 006e0c         
 870:000 | DONE ins | na 16 16 | 0062dc | 4c af 6c    |                 jmp 006caf           
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE lbl | na 16 16 | 0062df |             | allot_minus                          
 873:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
 874:000 | DONE ins | na 16 16 | 0062df | 38          |                 sec                  
 875:000 | DONE ins | na 16 16 | 0062e0 | e5 00       |                 sbc.d 000200         
 876:000 | DONE ins | na 16 16 | 0062e2 | 90 f5       |                 bcc 0062d9           oops, we've wrapped
 877:000 | DONE wsp | na 16 16 |        |             |
 878:000 | DONE ins | na 16 16 | 0062e4 | a8          |                 tay                  
 879:000 | DONE wsp | na 16 16 |        |             |
 880:000 | DONE ins | na 16 16 | 0062e5 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
 881:000 | DONE ins | na 16 16 | 0062e8 | 30 ef       |                 bmi 0062d9           oops, gone too far back
 882:000 | DONE wsp | na 16 16 |        |             |
 883:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
 884:000 | DONE lbl | na 16 16 | 0062ea |             | allot_done                           
 885:000 | DONE ins | na 16 16 | 0062ea | 84 00       |                 sty.d 000200         new compiler pointer
 886:000 | DONE lbl | na 16 16 | 0062ec |             | allot_real_gone                      
 887:000 | DONE ins | na 16 16 | 0062ec | b4 00       |                 ldy.dx 00            DROP
 888:000 | DONE ins | na 16 16 | 0062ee | e8          |                 inx                  
 889:000 | DONE ins | na 16 16 | 0062ef | e8          |                 inx                  
 890:000 | DONE wsp | na 16 16 |        |             |
 891:000 | DONE lbl | na 16 16 | 0062f0 |             | z_allot                              
 891:001 | DONE ins | na 16 16 | 0062f0 | 60          |                 rts                  
 892:000 | DONE wsp | na 16 16 |        |             |
 893:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 894:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
 895:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
 896:000 | DONE lbl | na 16 16 | 0062f1 |             | xt_and                               
 897:000 | DONE ins | na 16 16 | 0062f1 | 98          |                 tya                  
 898:000 | DONE ins | na 16 16 | 0062f2 | 35 00       |                 and.dx 00            
 899:000 | DONE ins | na 16 16 | 0062f4 | a8          |                 tay                  
 900:000 | DONE wsp | na 16 16 |        |             |
 901:000 | DONE ins | na 16 16 | 0062f5 | e8          |                 inx                  NIP
 902:000 | DONE ins | na 16 16 | 0062f6 | e8          |                 inx                  
 903:000 | DONE wsp | na 16 16 |        |             |
 904:000 | DONE lbl | na 16 16 | 0062f7 |             | z_and                                
 904:001 | DONE ins | na 16 16 | 0062f7 | 60          |                 rts                  
 905:000 | DONE wsp | na 16 16 |        |             |
 906:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 907:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
 908:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
 909:000 | DONE lbl | na 16 16 | 0062f8 |             | xt_base                              
 910:000 | DONE ins | na 16 16 | 0062f8 | ca          |                 dex                  
 911:000 | DONE ins | na 16 16 | 0062f9 | ca          |                 dex                  
 912:000 | DONE ins | na 16 16 | 0062fa | 94 00       |                 sty.dx 00            
 913:000 | DONE wsp | na 16 16 |        |             |
 914:000 | DONE ins | na 16 16 | 0062fc | a0 1c 02    |                 ldy.# 00021c         
 915:000 | DONE wsp | na 16 16 |        |             |
 916:000 | DONE lbl | na 16 16 | 0062ff |             | z_base                               
 916:001 | DONE ins | na 16 16 | 0062ff | 60          |                 rts                  
 917:000 | DONE wsp | na 16 16 |        |             |
 918:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 919:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 920:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
 921:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 922:000 | DONE lbl | na 16 16 | 006300 |             | xt_bell                              
 923:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 924:000 | DONE ins | na 16 16 | 006300 | a9 07 00    |                 lda.# AscBELL        
 925:000 | DONE ins | na 16 16 | 006303 | 20 36 60    |                 jsr 006036           
 926:000 | DONE wsp | na 16 16 |        |             |
 927:000 | DONE lbl | na 16 16 | 006306 |             | z_bell                               
 927:001 | DONE ins | na 16 16 | 006306 | 60          |                 rts                  
 928:000 | DONE wsp | na 16 16 |        |             |
 929:000 | DONE wsp | na 16 16 |        |             |
 930:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 931:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 932:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 933:000 | DONE lbl | na 16 16 | 006307 |             | xt_bl                                
 934:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 935:000 | DONE ins | na 16 16 | 006307 | ca          |                 dex                  
 936:000 | DONE ins | na 16 16 | 006308 | ca          |                 dex                  
 937:000 | DONE ins | na 16 16 | 006309 | 94 00       |                 sty.dx 00            
 938:000 | DONE ins | na 16 16 | 00630b | a0 20 00    |                 ldy.# AscSP          
 939:000 | DONE wsp | na 16 16 |        |             |
 940:000 | DONE lbl | na 16 16 | 00630e |             | z_bl                                 
 940:001 | DONE ins | na 16 16 | 00630e | 60          |                 rts                  
 941:000 | DONE wsp | na 16 16 |        |             |
 942:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 943:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 944:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 945:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
 946:000 | DONE lbl | na 16 16 | 00630f |             | xt_bye                               
 947:000 | DONE ins | na 16 16 | 00630f | 58          |                 cli                  
 948:000 | DONE ins | na 16 16 | 006310 | 00 00       |                 brk 00               status byte 00 required for assembler
 949:000 | DONE wsp | na 16 16 |        |             |
 950:000 | DONE lbl | na 16 16 | 006312 |             | z_bye                                
 950:001 | DONE ins | na 16 16 | 006312 | 60          |                 rts                  dummy for compiling, never reached
 951:000 | DONE wsp | na 16 16 |        |             |
 952:000 | DONE wsp | na 16 16 |        |             |
 953:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 954:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
 955:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
 956:000 | DONE lbl | na 16 16 | 006313 |             | xt_c-comma                           
 957:000 | DONE ins | na 16 16 | 006313 | 98          |                 tya                  
 958:000 | DONE ins | na 16 16 | 006314 | e2 20       |                 sep 20               
 958:001 | DONE ctl | na  8 16 |        |             |         .!a8
 959:000 | DONE ins | na  8 16 | 006316 | 92 00       |                 sta.di 000200        STA (CP)
 960:000 | DONE ins | na  8 16 | 006318 | c2 20       |                 rep 20               
 960:001 | DONE ctl | na 16 16 |        |             |         .!a16
 961:000 | DONE ins | na 16 16 | 00631a | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
 962:000 | DONE wsp | na 16 16 |        |             |
 963:000 | DONE ins | na 16 16 | 00631c | b4 00       |                 ldy.dx 00            
 964:000 | DONE ins | na 16 16 | 00631e | e8          |                 inx                  
 965:000 | DONE ins | na 16 16 | 00631f | e8          |                 inx                  
 966:000 | DONE wsp | na 16 16 |        |             |
 967:000 | DONE lbl | na 16 16 | 006320 |             | z_c-comma                            
 967:001 | DONE ins | na 16 16 | 006320 | 60          |                 rts                  
 968:000 | DONE wsp | na 16 16 |        |             |
 969:000 | DONE wsp | na 16 16 |        |             |
 970:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 971:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
 972:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
 973:000 | DONE lbl | na 16 16 | 006321 |             | xt_c-fetch                           
 974:000 | DONE ins | na 16 16 | 006321 | e2 20       |                 sep 20               
 974:001 | DONE ctl | na  8 16 |        |             |         .!a8
 975:000 | DONE ins | na  8 16 | 006323 | b9 00 00    |                 lda.y 0000           
 976:000 | DONE ins | na  8 16 | 006326 | c2 20       |                 rep 20               
 976:001 | DONE ctl | na 16 16 |        |             |         .!a16
 977:000 | DONE ins | na 16 16 | 006328 | 29 ff 00    |                 and.# 00ff           
 978:000 | DONE ins | na 16 16 | 00632b | a8          |                 tay                  
 979:000 | DONE wsp | na 16 16 |        |             |
 980:000 | DONE lbl | na 16 16 | 00632c |             | z_c-fetch                            
 980:001 | DONE ins | na 16 16 | 00632c | 60          |                 rts                  
 981:000 | DONE wsp | na 16 16 |        |             |
 982:000 | DONE wsp | na 16 16 |        |             |
 983:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 984:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
 985:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
 986:000 | DONE lbl | na 16 16 | 00632d |             | xt_c-store                           
 987:000 | DONE ins | na 16 16 | 00632d | b5 00       |                 lda.dx 00            
 988:000 | DONE ins | na 16 16 | 00632f | e2 20       |                 sep 20               
 988:001 | DONE ctl | na  8 16 |        |             |         .!a8
 989:000 | DONE ins | na  8 16 | 006331 | 99 00 00    |                 sta.y 0000           
 990:000 | DONE ins | na  8 16 | 006334 | c2 20       |                 rep 20               
 990:001 | DONE ctl | na 16 16 |        |             |         .!a16
 991:000 | DONE ins | na 16 16 | 006336 | b4 02       |                 ldy.dx 02            
 992:000 | DONE ins | na 16 16 | 006338 | e8          |                 inx                  
 993:000 | DONE ins | na 16 16 | 006339 | e8          |                 inx                  
 994:000 | DONE ins | na 16 16 | 00633a | e8          |                 inx                  
 995:000 | DONE ins | na 16 16 | 00633b | e8          |                 inx                  
 996:000 | DONE wsp | na 16 16 |        |             |
 997:000 | DONE lbl | na 16 16 | 00633c |             | z_c-store                            
 997:001 | DONE ins | na 16 16 | 00633c | 60          |                 rts                  
 998:000 | DONE wsp | na 16 16 |        |             |
 999:000 | DONE wsp | na 16 16 |        |             |
1000:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1001:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1002:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1003:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1004:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
1005:000 | DONE wsp | na 16 16 |        |             |
1006:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1007:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1008:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
1009:000 | DONE lbl | na 16 16 | 00633d |             | xt_char                              
1010:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1011:000 | DONE ins | na 16 16 | 00633d | 20 bd 65    |                 jsr 0065bd           ( -- addr u )
1012:000 | DONE wsp | na 16 16 |        |             |
1013:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
1014:000 | DONE ins | na 16 16 | 006340 | 98          |                 tya                  force flag check
1015:000 | DONE ins | na 16 16 | 006341 | d0 06       |                 bne 006349           
1016:000 | DONE wsp | na 16 16 |        |             |
1017:000 | DONE ins | na 16 16 | 006343 | a9 ab 6e    |                 lda.# 006eab         
1018:000 | DONE ins | na 16 16 | 006346 | 4c af 6c    |                 jmp 006caf           
1019:000 | DONE wsp | na 16 16 |        |             |
1020:000 | DONE lbl | na 16 16 | 006349 |             | char_got_char                        
1021:000 | DONE ins | na 16 16 | 006349 | b4 00       |                 ldy.dx 00            get addr from NOS
1022:000 | DONE ins | na 16 16 | 00634b | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1023:000 | DONE ins | na 16 16 | 00634e | 29 ff 00    |                 and.# 00ff           
1024:000 | DONE ins | na 16 16 | 006351 | a8          |                 tay                  
1025:000 | DONE wsp | na 16 16 |        |             |
1026:000 | DONE ins | na 16 16 | 006352 | e8          |                 inx                  
1027:000 | DONE ins | na 16 16 | 006353 | e8          |                 inx                  
1028:000 | DONE wsp | na 16 16 |        |             |
1029:000 | DONE lbl | na 16 16 | 006354 |             | z_char                               
1029:001 | DONE ins | na 16 16 | 006354 | 60          |                 rts                  
1030:000 | DONE wsp | na 16 16 |        |             |
1031:000 | DONE wsp | na 16 16 |        |             |
1032:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1033:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1034:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1035:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1036:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1037:000 | DONE lbl | na 16 16 | 006355 |             | xt_compile-only                      
1038:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1039:000 | DONE ins | na 16 16 | 006355 | a9 04 00    |                 lda.# CO             
1040:000 | DONE ins | na 16 16 | 006358 | eb          |                 xba                  flags are MSB
1041:000 | DONE ins | na 16 16 | 006359 | 12 02       |                 ora.di 000202        ORA (DP)
1042:000 | DONE ins | na 16 16 | 00635b | 92 02       |                 sta.di 000202        
1043:000 | DONE wsp | na 16 16 |        |             |
1044:000 | DONE lbl | na 16 16 | 00635d |             | z_compile-only                       
1044:001 | DONE ins | na 16 16 | 00635d | 60          |                 rts                  
1045:000 | DONE wsp | na 16 16 |        |             |
1046:000 | DONE wsp | na 16 16 |        |             |
1047:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1048:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1049:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1050:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1051:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1052:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1053:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1054:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1055:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1056:000 | DONE lbl | na 16 16 | 00635e |             | xt_compilecomma                      
1057:000 | DONE wsp | na 16 16 |        |             |
1058:000 | DONE lbl | na 16 16 | 00635e |             | compile_as_code                      
1059:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1060:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1061:000 | DONE cmt | na 16 16 |        |             |                 ; TODO currently just compiles subroutine jumps
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE lbl | na 16 16 | 00635e |             | compile_as_jump                      
1064:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
1065:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
1066:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
1067:000 | DONE cmt | na 16 16 |        |             |                 ; win!
1068:000 | DONE ins | na 16 16 | 00635e | a9 20 00    |                 lda.# 20             opcode for JSR
1069:000 | DONE ins | na 16 16 | 006361 | 92 00       |                 sta.di 000200        STA (CP)
1070:000 | DONE ins | na 16 16 | 006363 | e6 00       |                 inc.d 000200         
1071:000 | DONE wsp | na 16 16 |        |             |
1072:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1073:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1074:000 | DONE ins | na 16 16 | 006365 | 98          |                 tya                  
1075:000 | DONE ins | na 16 16 | 006366 | 92 00       |                 sta.di 000200        
1076:000 | DONE ins | na 16 16 | 006368 | e6 00       |                 inc.d 000200         
1077:000 | DONE ins | na 16 16 | 00636a | e6 00       |                 inc.d 000200         
1078:000 | DONE wsp | na 16 16 |        |             |
1079:000 | DONE ins | na 16 16 | 00636c | b4 00       |                 ldy.dx 00            
1080:000 | DONE ins | na 16 16 | 00636e | e8          |                 inx                  
1081:000 | DONE ins | na 16 16 | 00636f | e8          |                 inx                  
1082:000 | DONE wsp | na 16 16 |        |             |
1083:000 | DONE lbl | na 16 16 | 006370 |             | z_compilecomma                       
1083:001 | DONE ins | na 16 16 | 006370 | 60          |                 rts                  
1084:000 | DONE wsp | na 16 16 |        |             |
1085:000 | DONE wsp | na 16 16 |        |             |
1086:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1087:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1088:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1089:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1090:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1091:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1092:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1093:000 | DONE lbl | na 16 16 | 006371 |             | xt_constant                          
1094:000 | DONE ins | na 16 16 | 006371 | 20 a1 63    |                 jsr 0063a1           
1095:000 | DONE wsp | na 16 16 |        |             |
1096:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1097:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1098:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1099:000 | DONE ins | na 16 16 | 006374 | a5 00       |                 lda.d 000200         
1100:000 | DONE ins | na 16 16 | 006376 | 3a          |                 dec.a                
1101:000 | DONE ins | na 16 16 | 006377 | 3a          |                 dec.a                
1102:000 | DONE ins | na 16 16 | 006378 | 85 16       |                 sta.d 000216         
1103:000 | DONE wsp | na 16 16 |        |             |
1104:000 | DONE ins | na 16 16 | 00637a | a9 1b 6c    |                 lda.# 006c1b         
1105:000 | DONE ins | na 16 16 | 00637d | 92 16       |                 sta.di 000216        STA (TMP1)
1106:000 | DONE wsp | na 16 16 |        |             |
1107:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1108:000 | DONE ins | na 16 16 | 00637f | 98          |                 tya                  there is no "sty.di cp"
1109:000 | DONE ins | na 16 16 | 006380 | 92 00       |                 sta.di 000200        
1110:000 | DONE ins | na 16 16 | 006382 | e6 00       |                 inc.d 000200         
1111:000 | DONE ins | na 16 16 | 006384 | e6 00       |                 inc.d 000200         
1112:000 | DONE wsp | na 16 16 |        |             |
1113:000 | DONE ins | na 16 16 | 006386 | b4 00       |                 ldy.dx 00            DROP
1114:000 | DONE ins | na 16 16 | 006388 | e8          |                 inx                  
1115:000 | DONE ins | na 16 16 | 006389 | e8          |                 inx                  
1116:000 | DONE wsp | na 16 16 |        |             |
1117:000 | DONE lbl | na 16 16 | 00638a |             | z_constant                           
1117:001 | DONE ins | na 16 16 | 00638a | 60          |                 rts                  
1118:000 | DONE wsp | na 16 16 |        |             |
1119:000 | DONE wsp | na 16 16 |        |             |
1120:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1121:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1122:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1123:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
1124:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
1125:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
1126:000 | DONE lbl | na 16 16 | 00638b |             | xt_count                             
1127:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1128:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1129:000 | DONE ins | na 16 16 | 00638b | 98          |                 tya                  
1130:000 | DONE ins | na 16 16 | 00638c | 1a          |                 inc.a                String address starts one char later
1131:000 | DONE wsp | na 16 16 |        |             |
1132:000 | DONE ins | na 16 16 | 00638d | ca          |                 dex                  
1133:000 | DONE ins | na 16 16 | 00638e | ca          |                 dex                  
1134:000 | DONE ins | na 16 16 | 00638f | 95 00       |                 sta.dx 00            NOS
1135:000 | DONE wsp | na 16 16 |        |             |
1136:000 | DONE ins | na 16 16 | 006391 | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
1137:000 | DONE ins | na 16 16 | 006394 | eb          |                 xba                  move length to LSB
1138:000 | DONE ins | na 16 16 | 006395 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
1139:000 | DONE ins | na 16 16 | 006398 | a8          |                 tay                  TOS
1140:000 | DONE wsp | na 16 16 |        |             |
1141:000 | DONE lbl | na 16 16 | 006399 |             | z_count                              
1141:001 | DONE ins | na 16 16 | 006399 | 60          |                 rts                  
1142:000 | DONE wsp | na 16 16 |        |             |
1143:000 | DONE wsp | na 16 16 |        |             |
1144:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1145:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
1146:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
1147:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1148:000 | DONE lbl | na 16 16 | 00639a |             | xt_cr                                
1149:000 | DONE ins | na 16 16 | 00639a | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
1150:000 | DONE ins | na 16 16 | 00639d | 20 36 60    |                 jsr 006036           
1151:000 | DONE wsp | na 16 16 |        |             |
1152:000 | DONE lbl | na 16 16 | 0063a0 |             | z_cr                                 
1152:001 | DONE ins | na 16 16 | 0063a0 | 60          |                 rts                  
1153:000 | DONE wsp | na 16 16 |        |             |
1154:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1155:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
1156:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
1157:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
1158:000 | DONE cmt | na 16 16 |        |             | ; address.
1159:000 | DONE lbl | na 16 16 | 0063a1 |             | xt_create                            
1160:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1161:000 | DONE ins | na 16 16 | 0063a1 | 20 bd 65    |                 jsr 0065bd           ( -- addr u )
1162:000 | DONE ins | na 16 16 | 0063a4 | d0 06       |                 bne 0063ac           
1163:000 | DONE wsp | na 16 16 |        |             |
1164:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1165:000 | DONE ins | na 16 16 | 0063a6 | a9 ab 6e    |                 lda.# 006eab         
1166:000 | DONE ins | na 16 16 | 0063a9 | 4c af 6c    |                 jmp 006caf           
1167:000 | DONE wsp | na 16 16 |        |             |
1168:000 | DONE lbl | na 16 16 | 0063ac |             | create_got_name                      
1169:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1170:000 | DONE ins | na 16 16 | 0063ac | 20 e8 6c    |                 jsr 006ce8           
1171:000 | DONE wsp | na 16 16 |        |             |
1172:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1173:000 | DONE cmt | na 16 16 |        |             |                 ; word
1174:000 | DONE ins | na 16 16 | 0063af | a5 00       |                 lda.d 000200         
1175:000 | DONE ins | na 16 16 | 0063b1 | 85 16       |                 sta.d 000216         save start of new word
1176:000 | DONE wsp | na 16 16 |        |             |
1177:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1178:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1179:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1180:000 | DONE ins | na 16 16 | 0063b3 | 98          |                 tya                  
1181:000 | DONE ins | na 16 16 | 0063b4 | 29 ff 00    |                 and.# 00ff           
1182:000 | DONE ins | na 16 16 | 0063b7 | 85 18       |                 sta.d 000218         save length of name string
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1185:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1186:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1187:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1188:000 | DONE ins | na 16 16 | 0063b9 | 18          |                 clc                  
1189:000 | DONE ins | na 16 16 | 0063ba | 69 08 00    |                 adc.# 0008           
1190:000 | DONE ins | na 16 16 | 0063bd | 85 1a       |                 sta.d 00021a         total bytes required for header
1191:000 | DONE wsp | na 16 16 |        |             |
1192:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1193:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1194:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1195:000 | DONE ins | na 16 16 | 0063bf | 1a          |                 inc.a                
1196:000 | DONE ins | na 16 16 | 0063c0 | 1a          |                 inc.a                
1197:000 | DONE ins | na 16 16 | 0063c1 | 1a          |                 inc.a                
1198:000 | DONE wsp | na 16 16 |        |             |
1199:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1200:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1201:000 | DONE ins | na 16 16 | 0063c2 | 18          |                 clc                  
1202:000 | DONE ins | na 16 16 | 0063c3 | 65 00       |                 adc.d 000200         
1203:000 | DONE ins | na 16 16 | 0063c5 | 85 00       |                 sta.d 000200         
1204:000 | DONE wsp | na 16 16 |        |             |
1205:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1206:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1207:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1208:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1209:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1210:000 | DONE ins | na 16 16 | 0063c7 | b5 00       |                 lda.dx 00            
1211:000 | DONE ins | na 16 16 | 0063c9 | 48          |                 pha                  
1212:000 | DONE wsp | na 16 16 |        |             |
1213:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1214:000 | DONE ins | na 16 16 | 0063ca | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1215:000 | DONE ins | na 16 16 | 0063cd | a5 18       |                 lda.d 000218         get length byte
1216:000 | DONE ins | na 16 16 | 0063cf | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1217:000 | DONE ins | na 16 16 | 0063d1 | c8          |                 iny                  
1218:000 | DONE ins | na 16 16 | 0063d2 | c8          |                 iny                  
1219:000 | DONE wsp | na 16 16 |        |             |
1220:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1221:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1222:000 | DONE ins | na 16 16 | 0063d3 | a5 02       |                 lda.d 000202         
1223:000 | DONE ins | na 16 16 | 0063d5 | 91 16       |                 sta.diy 000216       
1224:000 | DONE ins | na 16 16 | 0063d7 | c8          |                 iny                  
1225:000 | DONE ins | na 16 16 | 0063d8 | c8          |                 iny                  
1226:000 | DONE wsp | na 16 16 |        |             |
1227:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1228:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1229:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1230:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1231:000 | DONE ins | na 16 16 | 0063d9 | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1232:000 | DONE ins | na 16 16 | 0063db | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1233:000 | DONE wsp | na 16 16 |        |             |
1234:000 | DONE ins | na 16 16 | 0063dd | 18          |                 clc                  
1235:000 | DONE ins | na 16 16 | 0063de | 65 1a       |                 adc.d 00021a         total header length
1236:000 | DONE ins | na 16 16 | 0063e0 | 91 16       |                 sta.diy 000216       
1237:000 | DONE ins | na 16 16 | 0063e2 | c8          |                 iny                  
1238:000 | DONE ins | na 16 16 | 0063e3 | c8          |                 iny                  
1239:000 | DONE wsp | na 16 16 |        |             |
1240:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1241:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1242:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1243:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1244:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1245:000 | DONE ins | na 16 16 | 0063e4 | 1a          |                 inc.a                
1246:000 | DONE ins | na 16 16 | 0063e5 | 1a          |                 inc.a                
1247:000 | DONE ins | na 16 16 | 0063e6 | 1a          |                 inc.a                
1248:000 | DONE ins | na 16 16 | 0063e7 | 91 16       |                 sta.diy 000216       
1249:000 | DONE ins | na 16 16 | 0063e9 | c8          |                 iny                  
1250:000 | DONE ins | na 16 16 | 0063ea | c8          |                 iny                  
1251:000 | DONE wsp | na 16 16 |        |             |
1252:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1253:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1254:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1255:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1256:000 | DONE ins | na 16 16 | 0063eb | 68          |                 pla                  get back string address
1257:000 | DONE ins | na 16 16 | 0063ec | 38          |                 sec                  
1258:000 | DONE ins | na 16 16 | 0063ed | e9 08 00    |                 sbc.# 0008           
1259:000 | DONE ins | na 16 16 | 0063f0 | 85 1a       |                 sta.d 00021a         
1260:000 | DONE ins | na 16 16 | 0063f2 | e2 20       |                 sep 20               
1260:001 | DONE ctl | na  8 16 |        |             |         .!a8
1261:000 | DONE lbl | na  8 16 | 0063f4 |             | @                                    
1262:000 | DONE ins | na  8 16 | 0063f4 | b1 1a       |                 lda.diy 00021a       
1263:000 | DONE ins | na  8 16 | 0063f6 | 91 16       |                 sta.diy 000216       
1264:000 | DONE ins | na  8 16 | 0063f8 | c8          |                 iny                  
1265:000 | DONE ins | na  8 16 | 0063f9 | c6 18       |                 dec.d 000218         
1266:000 | DONE ins | na  8 16 | 0063fb | d0 f7       |                 bne 0063f4           
1267:000 | DONE wsp | na  8 16 |        |             |
1268:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1269:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1270:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1271:000 | DONE cmt | na  8 16 |        |             |                 ; good
1272:000 | DONE ins | na  8 16 | 0063fd | a9 20       |                 lda.# 20             opcode of JSR
1273:000 | DONE ins | na  8 16 | 0063ff | 91 16       |                 sta.diy 000216       
1274:000 | DONE ins | na  8 16 | 006401 | c8          |                 iny                  single increase only because we have 8-bit A
1275:000 | DONE wsp | na  8 16 |        |             |
1276:000 | DONE ins | na  8 16 | 006402 | a9 36       |                 lda.# .lsb 006c36    
1277:000 | DONE ins | na  8 16 | 006404 | 91 16       |                 sta.diy 000216       
1278:000 | DONE ins | na  8 16 | 006406 | c8          |                 iny                  
1279:000 | DONE wsp | na  8 16 |        |             |
1280:000 | DONE ins | na  8 16 | 006407 | a9 6c       |                 lda.# .msb 006c36    
1281:000 | DONE ins | na  8 16 | 006409 | 91 16       |                 sta.diy 000216       
1282:000 | DONE wsp | na  8 16 |        |             |
1283:000 | DONE ins | na  8 16 | 00640b | c2 20       |                 rep 20               
1283:001 | DONE ctl | na 16 16 |        |             |         .!a16
1284:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1285:000 | DONE ins | na 16 16 | 00640d | b4 02       |                 ldy.dx 02            
1286:000 | DONE ins | na 16 16 | 00640f | e8          |                 inx                  
1287:000 | DONE ins | na 16 16 | 006410 | e8          |                 inx                  
1288:000 | DONE ins | na 16 16 | 006411 | e8          |                 inx                  
1289:000 | DONE ins | na 16 16 | 006412 | e8          |                 inx                  
1290:000 | DONE wsp | na 16 16 |        |             |
1291:000 | DONE lbl | na 16 16 | 006413 |             | z_create                             
1291:001 | DONE ins | na 16 16 | 006413 | 60          |                 rts                  
1292:000 | DONE wsp | na 16 16 |        |             |
1293:000 | DONE wsp | na 16 16 |        |             |
1294:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1295:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1296:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1297:000 | DONE lbl | na 16 16 | 006414 |             | xt_decimal                           
1298:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1299:000 | DONE ins | na 16 16 | 006414 | a9 0a 00    |                 lda.# 000a           
1300:000 | DONE ins | na 16 16 | 006417 | 85 1c       |                 sta.d 00021c         
1301:000 | DONE wsp | na 16 16 |        |             |
1302:000 | DONE lbl | na 16 16 | 006419 |             | z_decimal                            
1302:001 | DONE ins | na 16 16 | 006419 | 60          |                 rts                  
1303:000 | DONE wsp | na 16 16 |        |             |
1304:000 | DONE wsp | na 16 16 |        |             |
1305:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1306:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1307:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1308:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1309:000 | DONE lbl | na 16 16 | 00641a |             | xt_depth                             
1310:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1311:000 | DONE cmt | na 16 16 |        |             | 		; We've got zero entries when X is dsp0
1312:000 | DONE ins | na 16 16 | 00641a | 86 04       |                 stx.d 000204         
1313:000 | DONE ins | na 16 16 | 00641c | a9 f8 02    |                 lda.# 0002f8         
1314:000 | DONE ins | na 16 16 | 00641f | 38          |                 sec                  
1315:000 | DONE ins | na 16 16 | 006420 | e5 04       |                 sbc.d 000204         
1316:000 | DONE wsp | na 16 16 |        |             |
1317:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
1318:000 | DONE ins | na 16 16 | 006422 | 4a          |                 lsr.a                
1319:000 | DONE wsp | na 16 16 |        |             |
1320:000 | DONE ins | na 16 16 | 006423 | ca          |                 dex                  
1321:000 | DONE ins | na 16 16 | 006424 | ca          |                 dex                  
1322:000 | DONE ins | na 16 16 | 006425 | 94 00       |                 sty.dx 00            
1323:000 | DONE wsp | na 16 16 |        |             |
1324:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
1325:000 | DONE ins | na 16 16 | 006427 | a8          |                 tay                  
1326:000 | DONE wsp | na 16 16 |        |             |
1327:000 | DONE lbl | na 16 16 | 006428 |             | z_depth                              
1327:001 | DONE ins | na 16 16 | 006428 | 60          |                 rts                  
1328:000 | DONE wsp | na 16 16 |        |             |
1329:000 | DONE wsp | na 16 16 |        |             |
1330:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1331:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
1332:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
1333:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
1334:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
1335:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
1336:000 | DONE lbl | na 16 16 | 006429 |             | xt_does                              
1337:000 | DONE cmt | na 16 16 |        |             | 		; compile a subroutine jump to the runtime of DOES>
1338:000 | DONE ins | na 16 16 | 006429 | f4 36 64    |                 phe.# 006436         
1339:000 | DONE ins | na 16 16 | 00642c | 20 8e 6c    |                 jsr 006c8e           
1340:000 | DONE wsp | na 16 16 |        |             |
1341:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
1342:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
1343:000 | DONE ins | na 16 16 | 00642f | f4 29 6c    |                 phe.# 006c29         
1344:000 | DONE ins | na 16 16 | 006432 | 20 8e 6c    |                 jsr 006c8e           
1345:000 | DONE wsp | na 16 16 |        |             |
1346:000 | DONE lbl | na 16 16 | 006435 |             | z_does                               
1346:001 | DONE ins | na 16 16 | 006435 | 60          |                 rts                  
1347:000 | DONE wsp | na 16 16 |        |             |
1348:000 | DONE lbl | na 16 16 | 006436 |             | does_rt                              
1349:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
1350:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
1351:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
1352:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
1353:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
1354:000 | DONE ins | na 16 16 | 006436 | 68          |                 pla                  
1355:000 | DONE ins | na 16 16 | 006437 | 1a          |                 inc.a                increase by one because of RTS mechanics
1356:000 | DONE ins | na 16 16 | 006438 | 85 16       |                 sta.d 000216         
1357:000 | DONE wsp | na 16 16 |        |             |
1358:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
1359:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
1360:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
1361:000 | DONE cmt | na 16 16 |        |             |                 ; now.
1362:000 | DONE ins | na 16 16 | 00643a | a5 02       |                 lda.d 000202         
1363:000 | DONE wsp | na 16 16 |        |             |
1364:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
1365:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
1366:000 | DONE ins | na 16 16 | 00643c | 18          |                 clc                  
1367:000 | DONE ins | na 16 16 | 00643d | 69 04 00    |                 adc.# 0004           
1368:000 | DONE ins | na 16 16 | 006440 | 85 18       |                 sta.d 000218         
1369:000 | DONE wsp | na 16 16 |        |             |
1370:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
1371:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
1372:000 | DONE ins | na 16 16 | 006442 | b2 18       |                 lda.di 000218        LDA (TMP2)
1373:000 | DONE ins | na 16 16 | 006444 | 1a          |                 inc.a                
1374:000 | DONE ins | na 16 16 | 006445 | 85 18       |                 sta.d 000218         Points to address to be replaced
1375:000 | DONE wsp | na 16 16 |        |             |
1376:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
1377:000 | DONE ins | na 16 16 | 006447 | a5 16       |                 lda.d 000216         
1378:000 | DONE ins | na 16 16 | 006449 | 92 18       |                 sta.di 000218        STA (TMP2)
1379:000 | DONE wsp | na 16 16 |        |             |
1380:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
1381:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
1382:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
1383:000 | DONE ins | na 16 16 | 00644b | 60          |                 rts                  
1384:000 | DONE wsp | na 16 16 |        |             |
1385:000 | DONE wsp | na 16 16 |        |             |
1386:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1387:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1388:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1389:000 | DONE wsp | na 16 16 |        |             |
1390:000 | DONE lbl | na 16 16 | 00644c |             | xt_drop                              
1391:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1392:000 | DONE ins | na 16 16 | 00644c | b4 00       |                 ldy.dx 00            
1393:000 | DONE ins | na 16 16 | 00644e | e8          |                 inx                  
1394:000 | DONE ins | na 16 16 | 00644f | e8          |                 inx                  
1395:000 | DONE wsp | na 16 16 |        |             |
1396:000 | DONE lbl | na 16 16 | 006450 |             | z_drop                               
1396:001 | DONE ins | na 16 16 | 006450 | 60          |                 rts                  
1397:000 | DONE wsp | na 16 16 |        |             |
1398:000 | DONE wsp | na 16 16 |        |             |
1399:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1400:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1401:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1402:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1403:000 | DONE lbl | na 16 16 | 006451 |             | xt_dump                              
1404:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1405:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1406:000 | DONE ins | na 16 16 | 006451 | 84 16       |                 sty.d 000216         
1407:000 | DONE wsp | na 16 16 |        |             |
1408:000 | DONE lbl | na 16 16 | 006453 |             | dump_line_loop                       
1409:000 | DONE ins | na 16 16 | 006453 | 20 9a 63    |                 jsr 00639a           
1410:000 | DONE wsp | na 16 16 |        |             |
1411:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1412:000 | DONE ins | na 16 16 | 006456 | a0 10 00    |                 ldy.# 0010           
1413:000 | DONE lbl | na 16 16 | 006459 |             | dump_byte_loop                       
1414:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1415:000 | DONE ins | na 16 16 | 006459 | a5 16       |                 lda.d 000216         
1416:000 | DONE ins | na 16 16 | 00645b | f0 11       |                 beq 00646e           
1417:000 | DONE wsp | na 16 16 |        |             |
1418:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1419:000 | DONE ins | na 16 16 | 00645d | a1 00       |                 lda.dxi 00           
1420:000 | DONE ins | na 16 16 | 00645f | 20 cd 6c    |                 jsr 006ccd           TODO replace by EMIT
1421:000 | DONE ins | na 16 16 | 006462 | 20 1a 67    |                 jsr 00671a           
1422:000 | DONE wsp | na 16 16 |        |             |
1423:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1424:000 | DONE ins | na 16 16 | 006465 | f6 00       |                 inc.dx 00            
1425:000 | DONE wsp | na 16 16 |        |             |
1426:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1427:000 | DONE ins | na 16 16 | 006467 | c6 16       |                 dec.d 000216         
1428:000 | DONE ins | na 16 16 | 006469 | 88          |                 dey                  
1429:000 | DONE ins | na 16 16 | 00646a | d0 ed       |                 bne 006459           
1430:000 | DONE ins | na 16 16 | 00646c | 80 e5       |                 bra 006453           
1431:000 | DONE wsp | na 16 16 |        |             |
1432:000 | DONE lbl | na 16 16 | 00646e |             | dump_done                            
1433:000 | DONE ins | na 16 16 | 00646e | 20 9a 63    |                 jsr 00639a           
1434:000 | DONE wsp | na 16 16 |        |             |
1435:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1436:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1437:000 | DONE ins | na 16 16 | 006471 | b4 02       |                 ldy.dx 02            
1438:000 | DONE ins | na 16 16 | 006473 | e8          |                 inx                  
1439:000 | DONE ins | na 16 16 | 006474 | e8          |                 inx                  
1440:000 | DONE ins | na 16 16 | 006475 | e8          |                 inx                  
1441:000 | DONE ins | na 16 16 | 006476 | e8          |                 inx                  
1442:000 | DONE wsp | na 16 16 |        |             |
1443:000 | DONE lbl | na 16 16 | 006477 |             | z_dump                               
1443:001 | DONE ins | na 16 16 | 006477 | 60          |                 rts                  
1444:000 | DONE wsp | na 16 16 |        |             |
1445:000 | DONE wsp | na 16 16 |        |             |
1446:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1447:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1448:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1449:000 | DONE wsp | na 16 16 |        |             |
1450:000 | DONE lbl | na 16 16 | 006478 |             | xt_dup                               
1451:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1452:000 | DONE ins | na 16 16 | 006478 | ca          |                 dex                  
1453:000 | DONE ins | na 16 16 | 006479 | ca          |                 dex                  
1454:000 | DONE ins | na 16 16 | 00647a | 94 00       |                 sty.dx 00            
1455:000 | DONE wsp | na 16 16 |        |             |
1456:000 | DONE lbl | na 16 16 | 00647c |             | z_dup                                
1456:001 | DONE ins | na 16 16 | 00647c | 60          |                 rts                  
1457:000 | DONE wsp | na 16 16 |        |             |
1458:000 | DONE wsp | na 16 16 |        |             |
1459:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1460:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1461:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1462:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1463:000 | DONE lbl | na 16 16 | 00647d |             | xt_evaluate                          
1464:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1465:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1466:000 | DONE ins | na 16 16 | 00647d | a5 12       |                 lda.d 000212         >IN
1467:000 | DONE ins | na 16 16 | 00647f | 48          |                 pha                  
1468:000 | DONE ins | na 16 16 | 006480 | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
1469:000 | DONE ins | na 16 16 | 006482 | 48          |                 pha                  
1470:000 | DONE ins | na 16 16 | 006483 | a5 0c       |                 lda.d 00020c         
1471:000 | DONE ins | na 16 16 | 006485 | 48          |                 pha                  
1472:000 | DONE ins | na 16 16 | 006486 | a5 0e       |                 lda.d 00020e         
1473:000 | DONE ins | na 16 16 | 006488 | 48          |                 pha                  
1474:000 | DONE wsp | na 16 16 |        |             |
1475:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
1476:000 | DONE ins | na 16 16 | 006489 | a9 ff ff    |                 lda.# 0ffff          
1477:000 | DONE ins | na 16 16 | 00648c | 85 0a       |                 sta.d 00020a         
1478:000 | DONE wsp | na 16 16 |        |             |
1479:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
1480:000 | DONE ins | na 16 16 | 00648e | 64 12       |                 stz.d 000212         
1481:000 | DONE wsp | na 16 16 |        |             |
1482:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
1483:000 | DONE ins | na 16 16 | 006490 | 84 0e       |                 sty.d 00020e         
1484:000 | DONE ins | na 16 16 | 006492 | b5 00       |                 lda.dx 00            
1485:000 | DONE ins | na 16 16 | 006494 | 85 0c       |                 sta.d 00020c         
1486:000 | DONE wsp | na 16 16 |        |             |
1487:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1488:000 | DONE ins | na 16 16 | 006496 | b4 02       |                 ldy.dx 02            
1489:000 | DONE ins | na 16 16 | 006498 | e8          |                 inx                  
1490:000 | DONE ins | na 16 16 | 006499 | e8          |                 inx                  
1491:000 | DONE ins | na 16 16 | 00649a | e8          |                 inx                  
1492:000 | DONE ins | na 16 16 | 00649b | e8          |                 inx                  
1493:000 | DONE wsp | na 16 16 |        |             |
1494:000 | DONE ins | na 16 16 | 00649c | 20 3d 6c    |                 jsr 006c3d           
1495:000 | DONE wsp | na 16 16 |        |             |
1496:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1497:000 | DONE ins | na 16 16 | 00649f | 68          |                 pla                  
1498:000 | DONE ins | na 16 16 | 0064a0 | 85 0e       |                 sta.d 00020e         
1499:000 | DONE ins | na 16 16 | 0064a2 | 68          |                 pla                  
1500:000 | DONE ins | na 16 16 | 0064a3 | 85 0c       |                 sta.d 00020c         
1501:000 | DONE ins | na 16 16 | 0064a5 | 68          |                 pla                  
1502:000 | DONE ins | na 16 16 | 0064a6 | 85 0a       |                 sta.d 00020a         
1503:000 | DONE ins | na 16 16 | 0064a8 | 68          |                 pla                  
1504:000 | DONE ins | na 16 16 | 0064a9 | 85 12       |                 sta.d 000212         
1505:000 | DONE wsp | na 16 16 |        |             |
1506:000 | DONE lbl | na 16 16 | 0064ab |             | z_evaluate                           
1506:001 | DONE ins | na 16 16 | 0064ab | 60          |                 rts                  
1507:000 | DONE wsp | na 16 16 |        |             |
1508:000 | DONE wsp | na 16 16 |        |             |
1509:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1510:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1511:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1512:000 | DONE wsp | na 16 16 |        |             |
1513:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1514:000 | DONE cmt | na 16 16 |        |             | ; range
1515:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1516:000 | DONE lbl | na 16 16 | 0064ac |             | execute_ip                           
1516:001 | DONE dir | na 16 16 | 0064ac | (3 bytes)   |         .byte 00, 00, 00             
1516:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1517:000 | DONE wsp | na 16 16 |        |             |
1518:000 | DONE lbl | na 16 16 | 0064af |             | xt_execute                           
1519:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1520:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1521:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
1522:000 | DONE ins | na 16 16 | 0064af | 8c ac 64    |                 sty 0064ac           
1523:000 | DONE ins | na 16 16 | 0064b2 | b4 00       |                 ldy.dx 00            
1524:000 | DONE ins | na 16 16 | 0064b4 | e8          |                 inx                  
1525:000 | DONE ins | na 16 16 | 0064b5 | e8          |                 inx                  
1526:000 | DONE wsp | na 16 16 |        |             |
1527:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
1528:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
1529:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
1530:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
1531:000 | DONE ins | na 16 16 | 0064b6 | 6c ac 64    |                 jmp.i 0064ac         JMP (EXECUTE_IP)
1532:000 | DONE wsp | na 16 16 |        |             |
1533:000 | DONE lbl | na 16 16 | 0064b9 |             | z_execute                            
1533:001 | DONE ins | na 16 16 | 0064b9 | ea          |                 nop                  Never reached, see if we need the NOP
1534:000 | DONE wsp | na 16 16 |        |             |
1535:000 | DONE wsp | na 16 16 |        |             |
1536:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1537:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1538:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1539:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
1540:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
1541:000 | DONE wsp | na 16 16 |        |             |
1542:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1543:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1544:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1545:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1546:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1547:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1548:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1549:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1550:000 | DONE lbl | na 16 16 | 0064ba |             | xt_find-name                         
1551:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1552:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1553:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1554:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1555:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1556:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1557:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1558:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1559:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1560:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1561:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1562:000 | DONE ins | na 16 16 | 0064ba | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
1563:000 | DONE wsp | na 16 16 |        |             |
1564:000 | DONE ins | na 16 16 | 0064bc | a4 02       |                 ldy.d 000202         
1565:000 | DONE ins | na 16 16 | 0064be | 84 16       |                 sty.d 000216         nt of first Dictionary word
1566:000 | DONE wsp | na 16 16 |        |             |
1567:000 | DONE ins | na 16 16 | 0064c0 | b4 00       |                 ldy.dx 00            
1568:000 | DONE ins | na 16 16 | 0064c2 | 84 18       |                 sty.d 000218         address of mystery string, was NOS
1569:000 | DONE wsp | na 16 16 |        |             |
1570:000 | DONE lbl | na 16 16 | 0064c4 |             | find-name_loop                       
1571:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1572:000 | DONE ins | na 16 16 | 0064c4 | b2 16       |                 lda.di 000216        LSB in first header word is length
1573:000 | DONE ins | na 16 16 | 0064c6 | 29 ff 00    |                 and.# 00ff           
1574:000 | DONE ins | na 16 16 | 0064c9 | c5 06       |                 cmp.d 000206         we test LSB
1575:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1576:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1577:000 | DONE cmt | na 16 16 |        |             |                 ; same
1578:000 | DONE ins | na 16 16 | 0064cb | f0 0c       |                 beq 0064d9           
1579:000 | DONE wsp | na 16 16 |        |             |
1580:000 | DONE lbl | na 16 16 | 0064cd |             | find-name_next_entry                 
1581:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1582:000 | DONE ins | na 16 16 | 0064cd | e6 16       |                 inc.d 000216         
1583:000 | DONE ins | na 16 16 | 0064cf | e6 16       |                 inc.d 000216         
1584:000 | DONE ins | na 16 16 | 0064d1 | b2 16       |                 lda.di 000216        LDA (TMP1)
1585:000 | DONE wsp | na 16 16 |        |             |
1586:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1587:000 | DONE ins | na 16 16 | 0064d3 | f0 36       |                 beq 00650b           
1588:000 | DONE wsp | na 16 16 |        |             |
1589:000 | DONE ins | na 16 16 | 0064d5 | 85 16       |                 sta.d 000216         new header
1590:000 | DONE ins | na 16 16 | 0064d7 | 80 eb       |                 bra 0064c4           
1591:000 | DONE wsp | na 16 16 |        |             |
1592:000 | DONE lbl | na 16 16 | 0064d9 |             | find-name_chars                      
1593:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1594:000 | DONE wsp | na 16 16 |        |             |
1595:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1596:000 | DONE ins | na 16 16 | 0064d9 | e2 20       |                 sep 20               
1596:001 | DONE ctl | na  8 16 |        |             |         .!a8
1597:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1598:000 | DONE cmt | na  8 16 |        |             |                 ; header
1599:000 | DONE ins | na  8 16 | 0064db | a0 08 00    |                 ldy.# 0008           
1600:000 | DONE ins | na  8 16 | 0064de | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
1601:000 | DONE ins | na  8 16 | 0064e0 | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
1602:000 | DONE ins | na  8 16 | 0064e2 | f0 04       |                 beq 0064e8           
1603:000 | DONE wsp | na  8 16 |        |             |
1604:000 | DONE lbl | na  8 16 | 0064e4 |             | find-name_char_nomatcnt_8            
1605:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1606:000 | DONE ins | na  8 16 | 0064e4 | c2 20       |                 rep 20               
1606:001 | DONE ctl | na 16 16 |        |             |         .!a16
1607:000 | DONE ins | na 16 16 | 0064e6 | 80 e5       |                 bra 0064cd           
1608:000 | DONE wsp | na 16 16 |        |             |
1609:000 | DONE lbl | na 16 16 | 0064e8 |             | find-name_all_chars                  
1610:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1611:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1612:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1613:000 | DONE ins | na  8 16 | 0064e8 | a4 06       |                 ldy.d 000206         
1614:000 | DONE ins | na  8 16 | 0064ea | 88          |                 dey                  faster and shorter than CPY.# 01
1615:000 | DONE ins | na  8 16 | 0064eb | f0 18       |                 beq 006505           
1616:000 | DONE wsp | na  8 16 |        |             |
1617:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1618:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1619:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1620:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1621:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1622:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1623:000 | DONE wsp | na  8 16 |        |             |
1624:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1625:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1626:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1627:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1628:000 | DONE ins | na  8 16 | 0064ed | c2 20       |                 rep 20               
1628:001 | DONE ctl | na 16 16 |        |             |         .!a16
1629:000 | DONE ins | na 16 16 | 0064ef | a5 16       |                 lda.d 000216         address of Dictionary string
1630:000 | DONE ins | na 16 16 | 0064f1 | 18          |                 clc                  
1631:000 | DONE ins | na 16 16 | 0064f2 | 69 08 00    |                 adc.# 0008           
1632:000 | DONE ins | na 16 16 | 0064f5 | 85 1a       |                 sta.d 00021a         
1633:000 | DONE ins | na 16 16 | 0064f7 | e2 20       |                 sep 20               
1633:001 | DONE ctl | na  8 16 |        |             |         .!a8
1634:000 | DONE ins | na  8 16 | 0064f9 | a4 06       |                 ldy.d 000206         get length of strings as loop index
1635:000 | DONE ins | na  8 16 | 0064fb | 88          |                 dey                  first index is length minus 1
1636:000 | DONE wsp | na  8 16 |        |             |
1637:000 | DONE lbl | na  8 16 | 0064fc |             | @                                    
1638:000 | DONE ins | na  8 16 | 0064fc | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
1639:000 | DONE ins | na  8 16 | 0064fe | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
1640:000 | DONE ins | na  8 16 | 006500 | d0 e2       |                 bne 0064e4           
1641:000 | DONE ins | na  8 16 | 006502 | 88          |                 dey                  start of string (Y=0) was already tested
1642:000 | DONE ins | na  8 16 | 006503 | d0 f7       |                 bne 0064fc           
1643:000 | DONE wsp | na  8 16 |        |             |
1644:000 | DONE lbl | na  8 16 | 006505 |             | find-name_success                    
1645:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1646:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1647:000 | DONE ins | na  8 16 | 006505 | c2 20       |                 rep 20               
1647:001 | DONE ctl | na 16 16 |        |             |         .!a16
1648:000 | DONE ins | na 16 16 | 006507 | a4 16       |                 ldy.d 000216         get the correct DP
1649:000 | DONE ins | na 16 16 | 006509 | 80 03       |                 bra 00650e           
1650:000 | DONE wsp | na 16 16 |        |             |
1651:000 | DONE wsp | na 16 16 |        |             |
1652:000 | DONE lbl | na 16 16 | 00650b |             | find-name_failure_16                 
1653:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1654:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1655:000 | DONE ins | na 16 16 | 00650b | a0 00 00    |                 ldy.# 0000           fall thru
1656:000 | DONE wsp | na 16 16 |        |             |
1657:000 | DONE lbl | na 16 16 | 00650e |             | find-name_done                       
1658:000 | DONE ins | na 16 16 | 00650e | e8          |                 inx                  drop old address (NIP)
1659:000 | DONE ins | na 16 16 | 00650f | e8          |                 inx                  
1660:000 | DONE wsp | na 16 16 |        |             |
1661:000 | DONE lbl | na 16 16 | 006510 |             | z_find-name                          
1661:001 | DONE ins | na 16 16 | 006510 | 60          |                 rts                  
1662:000 | DONE wsp | na 16 16 |        |             |
1663:000 | DONE wsp | na 16 16 |        |             |
1664:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1665:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
1666:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
1667:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
1668:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
1669:000 | DONE lbl | na 16 16 | 006511 |             | xt_immediate                         
1670:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1671:000 | DONE ins | na 16 16 | 006511 | a9 02 00    |                 lda.# IM             Immediate flag
1672:000 | DONE ins | na 16 16 | 006514 | eb          |                 xba                  flags are MSB
1673:000 | DONE ins | na 16 16 | 006515 | 12 02       |                 ora.di 000202        ORA (DP)
1674:000 | DONE ins | na 16 16 | 006517 | 92 02       |                 sta.di 000202        
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE lbl | na 16 16 | 006519 |             | z_immediate                          
1676:001 | DONE ins | na 16 16 | 006519 | 60          |                 rts                  
1677:000 | DONE wsp | na 16 16 |        |             |
1678:000 | DONE wsp | na 16 16 |        |             |
1679:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1680:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
1681:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
1682:000 | DONE lbl | na 16 16 | 00651a |             | xt_invert                            
1683:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1684:000 | DONE ins | na 16 16 | 00651a | 98          |                 tya                  
1685:000 | DONE ins | na 16 16 | 00651b | 49 ff ff    |                 eor.# 0ffff          
1686:000 | DONE ins | na 16 16 | 00651e | a8          |                 tay                  
1687:000 | DONE wsp | na 16 16 |        |             |
1688:000 | DONE lbl | na 16 16 | 00651f |             | z_invert                             
1688:001 | DONE ins | na 16 16 | 00651f | 60          |                 rts                  
1689:000 | DONE wsp | na 16 16 |        |             |
1690:000 | DONE wsp | na 16 16 |        |             |
1691:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1692:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
1693:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
1694:000 | DONE lbl | na 16 16 | 006520 |             | xt_here                              
1695:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1696:000 | DONE ins | na 16 16 | 006520 | ca          |                 dex                  
1697:000 | DONE ins | na 16 16 | 006521 | ca          |                 dex                  
1698:000 | DONE ins | na 16 16 | 006522 | 94 00       |                 sty.dx 00            
1699:000 | DONE wsp | na 16 16 |        |             |
1700:000 | DONE ins | na 16 16 | 006524 | a4 00       |                 ldy.d 000200         
1701:000 | DONE wsp | na 16 16 |        |             |
1702:000 | DONE lbl | na 16 16 | 006526 |             | z_here                               
1702:001 | DONE ins | na 16 16 | 006526 | 60          |                 rts                  
1703:000 | DONE wsp | na 16 16 |        |             |
1704:000 | DONE wsp | na 16 16 |        |             |
1705:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1706:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
1707:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
1708:000 | DONE lbl | na 16 16 | 006527 |             | xt_hex                               
1709:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1710:000 | DONE ins | na 16 16 | 006527 | a9 10 00    |                 lda.# 0010           
1711:000 | DONE ins | na 16 16 | 00652a | 85 1c       |                 sta.d 00021c         
1712:000 | DONE wsp | na 16 16 |        |             |
1713:000 | DONE lbl | na 16 16 | 00652c |             | z_hex                                
1713:001 | DONE ins | na 16 16 | 00652c | 60          |                 rts                  
1714:000 | DONE wsp | na 16 16 |        |             |
1715:000 | DONE wsp | na 16 16 |        |             |
1716:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1717:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
1718:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
1719:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
1720:000 | DONE cmt | na 16 16 |        |             | ; for instance
1721:000 | DONE lbl | na 16 16 | 00652d |             | xt_literal                           
1722:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
1723:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
1724:000 | DONE ins | na 16 16 | 00652d | f4 3f 65    |                 phe.# 00653f         PEA LITERAL_RT
1725:000 | DONE ins | na 16 16 | 006530 | 20 8e 6c    |                 jsr 006c8e           
1726:000 | DONE wsp | na 16 16 |        |             |
1727:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
1728:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
1729:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
1730:000 | DONE ins | na 16 16 | 006533 | 98          |                 tya                  
1731:000 | DONE ins | na 16 16 | 006534 | 92 00       |                 sta.di 000200        
1732:000 | DONE ins | na 16 16 | 006536 | e6 00       |                 inc.d 000200         
1733:000 | DONE ins | na 16 16 | 006538 | e6 00       |                 inc.d 000200         
1734:000 | DONE wsp | na 16 16 |        |             |
1735:000 | DONE ins | na 16 16 | 00653a | b4 00       |                 ldy.dx 00            DROP
1736:000 | DONE ins | na 16 16 | 00653c | e8          |                 inx                  
1737:000 | DONE ins | na 16 16 | 00653d | e8          |                 inx                  
1738:000 | DONE wsp | na 16 16 |        |             |
1739:000 | DONE lbl | na 16 16 | 00653e |             | z_literal                            
1739:001 | DONE ins | na 16 16 | 00653e | 60          |                 rts                  
1740:000 | DONE wsp | na 16 16 |        |             |
1741:000 | DONE lbl | na 16 16 | 00653f |             | literal_rt                           
1742:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
1743:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
1744:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
1745:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
1746:000 | DONE wsp | na 16 16 |        |             |
1747:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
1748:000 | DONE ins | na 16 16 | 00653f | ca          |                 dex                  
1749:000 | DONE ins | na 16 16 | 006540 | ca          |                 dex                  
1750:000 | DONE ins | na 16 16 | 006541 | 94 00       |                 sty.dx 00            
1751:000 | DONE wsp | na 16 16 |        |             |
1752:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
1753:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
1754:000 | DONE ins | na 16 16 | 006543 | 7a          |                 ply                  
1755:000 | DONE ins | na 16 16 | 006544 | c8          |                 iny                  
1756:000 | DONE ins | na 16 16 | 006545 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
1757:000 | DONE wsp | na 16 16 |        |             |
1758:000 | DONE ins | na 16 16 | 006548 | c8          |                 iny                  move return address past data and restore
1759:000 | DONE ins | na 16 16 | 006549 | 5a          |                 phy                  so we can get back home
1760:000 | DONE wsp | na 16 16 |        |             |
1761:000 | DONE ins | na 16 16 | 00654a | a8          |                 tay                  Value is now on the Data Stack ( -- n )
1762:000 | DONE wsp | na 16 16 |        |             |
1763:000 | DONE ins | na 16 16 | 00654b | 60          |                 rts                  
1764:000 | DONE wsp | na 16 16 |        |             |
1765:000 | DONE wsp | na 16 16 |        |             |
1766:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1767:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
1768:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
1769:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1770:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1771:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1772:000 | DONE lbl | na 16 16 | 00654c |             | xt_max                               
1773:000 | DONE ins | na 16 16 | 00654c | 98          |                 tya                  
1774:000 | DONE ins | na 16 16 | 00654d | d5 00       |                 cmp.dx 00            
1775:000 | DONE wsp | na 16 16 |        |             |
1776:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1777:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1778:000 | DONE ins | na 16 16 | 00654f | f0 0b       |                 beq 00655c           Faster than DROP because TOS is in Y
1779:000 | DONE wsp | na 16 16 |        |             |
1780:000 | DONE ins | na 16 16 | 006551 | f5 00       |                 sbc.dx 00            
1781:000 | DONE ins | na 16 16 | 006553 | 50 03       |                 bvc 006558           no overflow, skip ahead
1782:000 | DONE wsp | na 16 16 |        |             |
1783:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1784:000 | DONE ins | na 16 16 | 006555 | 49 00 80    |                 eor.# 8000           compliment negative flag
1785:000 | DONE wsp | na 16 16 |        |             |
1786:000 | DONE lbl | na 16 16 | 006558 |             | max_no_ov                            
1787:000 | DONE ins | na 16 16 | 006558 | 10 02       |                 bpl 00655c           keep TOS
1788:000 | DONE lbl | na 16 16 | 00655a |             | max_drop                             
1789:000 | DONE ins | na 16 16 | 00655a | b4 00       |                 ldy.dx 00            DROP so NOS is result
1790:000 | DONE lbl | na 16 16 | 00655c |             | max_nip                              
1791:000 | DONE ins | na 16 16 | 00655c | e8          |                 inx                  
1792:000 | DONE ins | na 16 16 | 00655d | e8          |                 inx                  
1793:000 | DONE wsp | na 16 16 |        |             |
1794:000 | DONE lbl | na 16 16 | 00655e |             | z_max                                
1794:001 | DONE ins | na 16 16 | 00655e | 60          |                 rts                  
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE wsp | na 16 16 |        |             |
1797:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1798:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
1799:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
1800:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1801:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1802:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1803:000 | DONE lbl | na 16 16 | 00655f |             | xt_min                               
1804:000 | DONE ins | na 16 16 | 00655f | 98          |                 tya                  
1805:000 | DONE ins | na 16 16 | 006560 | d5 00       |                 cmp.dx 00            
1806:000 | DONE wsp | na 16 16 |        |             |
1807:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1808:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1809:000 | DONE ins | na 16 16 | 006562 | f0 0b       |                 beq 00656f           Faster than DROP because TOS is in Y
1810:000 | DONE wsp | na 16 16 |        |             |
1811:000 | DONE ins | na 16 16 | 006564 | f5 00       |                 sbc.dx 00            
1812:000 | DONE ins | na 16 16 | 006566 | 50 03       |                 bvc 00656b           no overflow, skip ahead
1813:000 | DONE wsp | na 16 16 |        |             |
1814:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1815:000 | DONE ins | na 16 16 | 006568 | 49 00 80    |                 eor.# 8000           compliment negative flag
1816:000 | DONE wsp | na 16 16 |        |             |
1817:000 | DONE lbl | na 16 16 | 00656b |             | min_no_ov                            
1818:000 | DONE ins | na 16 16 | 00656b | 30 02       |                 bmi 00656f           keep TOS
1819:000 | DONE lbl | na 16 16 | 00656d |             | min_drop                             
1820:000 | DONE ins | na 16 16 | 00656d | b4 00       |                 ldy.dx 00            DROP so NOS is result
1821:000 | DONE lbl | na 16 16 | 00656f |             | min_nip                              
1822:000 | DONE ins | na 16 16 | 00656f | e8          |                 inx                  
1823:000 | DONE ins | na 16 16 | 006570 | e8          |                 inx                  
1824:000 | DONE wsp | na 16 16 |        |             |
1825:000 | DONE lbl | na 16 16 | 006571 |             | z_min                                
1825:001 | DONE ins | na 16 16 | 006571 | 60          |                 rts                  
1826:000 | DONE wsp | na 16 16 |        |             |
1827:000 | DONE wsp | na 16 16 |        |             |
1828:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1829:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
1830:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
1831:000 | DONE lbl | na 16 16 | 006572 |             | xt_name-int                          
1832:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1833:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1834:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
1835:000 | DONE ins | na 16 16 | 006572 | c8          |                 iny                  
1836:000 | DONE ins | na 16 16 | 006573 | c8          |                 iny                  
1837:000 | DONE ins | na 16 16 | 006574 | c8          |                 iny                  
1838:000 | DONE ins | na 16 16 | 006575 | c8          |                 iny                  
1839:000 | DONE ins | na 16 16 | 006576 | b9 00 00    |                 lda.y 0000           
1840:000 | DONE ins | na 16 16 | 006579 | a8          |                 tay                  
1841:000 | DONE wsp | na 16 16 |        |             |
1842:000 | DONE lbl | na 16 16 | 00657a |             | z_name-int                           
1842:001 | DONE ins | na 16 16 | 00657a | 60          |                 rts                  
1843:000 | DONE wsp | na 16 16 |        |             |
1844:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1845:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
1846:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
1847:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
1848:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
1849:000 | DONE lbl | na 16 16 | 00657b |             | xt_name-string                       
1850:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1851:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1852:000 | DONE ins | na 16 16 | 00657b | ca          |                 dex                  move NOS down one
1853:000 | DONE ins | na 16 16 | 00657c | ca          |                 dex                  
1854:000 | DONE wsp | na 16 16 |        |             |
1855:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
1856:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
1857:000 | DONE ins | na 16 16 | 00657d | 98          |                 tya                  
1858:000 | DONE ins | na 16 16 | 00657e | 18          |                 clc                  
1859:000 | DONE ins | na 16 16 | 00657f | 69 08 00    |                 adc.# 0008           
1860:000 | DONE ins | na 16 16 | 006582 | 95 00       |                 sta.dx 00            NOS
1861:000 | DONE wsp | na 16 16 |        |             |
1862:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
1863:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
1864:000 | DONE ins | na 16 16 | 006584 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
1865:000 | DONE ins | na 16 16 | 006587 | 29 ff 00    |                 and.# 00ff           mask all but length byte
1866:000 | DONE ins | na 16 16 | 00658a | a8          |                 tay                  
1867:000 | DONE wsp | na 16 16 |        |             |
1868:000 | DONE lbl | na 16 16 | 00658b |             | z_name-string                        
1868:001 | DONE ins | na 16 16 | 00658b | 60          |                 rts                  
1869:000 | DONE wsp | na 16 16 |        |             |
1870:000 | DONE wsp | na 16 16 |        |             |
1871:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1872:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
1873:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
1874:000 | DONE lbl | na 16 16 | 00658c |             | xt_negate                            
1875:000 | DONE ins | na 16 16 | 00658c | 98          |                 tya                  
1876:000 | DONE ins | na 16 16 | 00658d | 49 ff ff    |                 eor.# 0ffff          
1877:000 | DONE ins | na 16 16 | 006590 | 1a          |                 inc.a                
1878:000 | DONE ins | na 16 16 | 006591 | a8          |                 tay                  
1879:000 | DONE wsp | na 16 16 |        |             |
1880:000 | DONE lbl | na 16 16 | 006592 |             | z_negate                             
1880:001 | DONE ins | na 16 16 | 006592 | 60          |                 rts                  
1881:000 | DONE wsp | na 16 16 |        |             |
1882:000 | DONE wsp | na 16 16 |        |             |
1883:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1884:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
1885:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
1886:000 | DONE lbl | na 16 16 | 006593 |             | xt_nip                               
1887:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1888:000 | DONE ins | na 16 16 | 006593 | e8          |                 inx                  
1889:000 | DONE ins | na 16 16 | 006594 | e8          |                 inx                  
1890:000 | DONE lbl | na 16 16 | 006595 |             | z_nip                                
1890:001 | DONE ins | na 16 16 | 006595 | 60          |                 rts                  
1891:000 | DONE wsp | na 16 16 |        |             |
1892:000 | DONE wsp | na 16 16 |        |             |
1893:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1894:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
1895:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
1896:000 | DONE lbl | na 16 16 | 006596 |             | xt_or                                
1897:000 | DONE ins | na 16 16 | 006596 | 98          |                 tya                  
1898:000 | DONE ins | na 16 16 | 006597 | 15 00       |                 ora.dx 00            
1899:000 | DONE ins | na 16 16 | 006599 | a8          |                 tay                  
1900:000 | DONE wsp | na 16 16 |        |             |
1901:000 | DONE ins | na 16 16 | 00659a | e8          |                 inx                  
1902:000 | DONE ins | na 16 16 | 00659b | e8          |                 inx                  
1903:000 | DONE wsp | na 16 16 |        |             |
1904:000 | DONE lbl | na 16 16 | 00659c |             | z_or                                 
1904:001 | DONE ins | na 16 16 | 00659c | 60          |                 rts                  
1905:000 | DONE wsp | na 16 16 |        |             |
1906:000 | DONE wsp | na 16 16 |        |             |
1907:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1908:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
1909:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
1910:000 | DONE lbl | na 16 16 | 00659d |             | xt_over                              
1911:000 | DONE ins | na 16 16 | 00659d | ca          |                 dex                  
1912:000 | DONE ins | na 16 16 | 00659e | ca          |                 dex                  
1913:000 | DONE ins | na 16 16 | 00659f | 94 00       |                 sty.dx 00            
1914:000 | DONE ins | na 16 16 | 0065a1 | b4 02       |                 ldy.dx 02            
1915:000 | DONE wsp | na 16 16 |        |             |
1916:000 | DONE lbl | na 16 16 | 0065a3 |             | z_over                               
1916:001 | DONE ins | na 16 16 | 0065a3 | 60          |                 rts                  
1917:000 | DONE wsp | na 16 16 |        |             |
1918:000 | DONE wsp | na 16 16 |        |             |
1919:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1920:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
1921:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
1922:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
1923:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
1924:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
1925:000 | DONE lbl | na 16 16 | 0065a4 |             | xt_pad                               
1926:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1927:000 | DONE ins | na 16 16 | 0065a4 | ca          |                 dex                  
1928:000 | DONE ins | na 16 16 | 0065a5 | ca          |                 dex                  
1929:000 | DONE ins | na 16 16 | 0065a6 | 94 00       |                 sty.dx 00            
1930:000 | DONE wsp | na 16 16 |        |             |
1931:000 | DONE ins | na 16 16 | 0065a8 | a5 00       |                 lda.d 000200         
1932:000 | DONE ins | na 16 16 | 0065aa | 18          |                 clc                  
1933:000 | DONE ins | na 16 16 | 0065ab | 69 7f 00    |                 adc.# 00007f         
1934:000 | DONE ins | na 16 16 | 0065ae | a8          |                 tay                  
1935:000 | DONE wsp | na 16 16 |        |             |
1936:000 | DONE lbl | na 16 16 | 0065af |             | z_pad                                
1936:001 | DONE ins | na 16 16 | 0065af | 60          |                 rts                  
1937:000 | DONE wsp | na 16 16 |        |             |
1938:000 | DONE wsp | na 16 16 |        |             |
1939:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1940:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
1941:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
1942:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
1943:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
1944:000 | DONE lbl | na 16 16 | 0065b0 |             | xt_page                              
1945:000 | DONE ins | na 16 16 | 0065b0 | a9 58 6f    |                 lda.# 006f58         
1946:000 | DONE ins | na 16 16 | 0065b3 | 20 b5 6c    |                 jsr 006cb5           
1947:000 | DONE wsp | na 16 16 |        |             |
1948:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
1949:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
1950:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
1951:000 | DONE ins | na 16 16 | 0065b6 | a9 5d 6f    |                 lda.# 006f5d         
1952:000 | DONE ins | na 16 16 | 0065b9 | 20 b5 6c    |                 jsr 006cb5           
1953:000 | DONE wsp | na 16 16 |        |             |
1954:000 | DONE lbl | na 16 16 | 0065bc |             | z_page                               
1954:001 | DONE ins | na 16 16 | 0065bc | 60          |                 rts                  
1955:000 | DONE wsp | na 16 16 |        |             |
1956:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1957:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
1958:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
1959:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
1960:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
1961:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
1962:000 | DONE lbl | na 16 16 | 0065bd |             | xt_parse-name                        
1963:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1964:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1965:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
1966:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
1967:000 | DONE ins | na 16 16 | 0065bd | 5a          |                 phy                  save TOS for later use
1968:000 | DONE ins | na 16 16 | 0065be | a4 12       |                 ldy.d 000212         >IN
1969:000 | DONE ins | na 16 16 | 0065c0 | e2 20       |                 sep 20               
1969:001 | DONE ctl | na  8 16 |        |             |         .!a8
1970:000 | DONE lbl | na  8 16 | 0065c2 |             | parse-name_loop                      
1971:000 | DONE ins | na  8 16 | 0065c2 | c4 0e       |                 cpy.d 00020e         end of line?
1972:000 | DONE ins | na  8 16 | 0065c4 | f0 09       |                 beq 0065cf           
1973:000 | DONE wsp | na  8 16 |        |             |
1974:000 | DONE ins | na  8 16 | 0065c6 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
1975:000 | DONE ins | na  8 16 | 0065c8 | c9 20       |                 cmp.# AscSP          
1976:000 | DONE ins | na  8 16 | 0065ca | d0 17       |                 bne 0065e3           
1977:000 | DONE ins | na  8 16 | 0065cc | c8          |                 iny                  
1978:000 | DONE ins | na  8 16 | 0065cd | 80 f3       |                 bra 0065c2           
1979:000 | DONE wsp | na  8 16 |        |             |
1980:000 | DONE lbl | na  8 16 | 0065cf |             | parse-name_empty_line                
1981:000 | DONE ins | na  8 16 | 0065cf | c2 20       |                 rep 20               
1981:001 | DONE ctl | na 16 16 |        |             |         .!a16
1982:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
1983:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
1984:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
1985:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
1986:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
1987:000 | DONE ins | na 16 16 | 0065d1 | ca          |                 dex                  
1988:000 | DONE ins | na 16 16 | 0065d2 | ca          |                 dex                  
1989:000 | DONE ins | na 16 16 | 0065d3 | ca          |                 dex                  
1990:000 | DONE ins | na 16 16 | 0065d4 | ca          |                 dex                  
1991:000 | DONE wsp | na 16 16 |        |             |
1992:000 | DONE ins | na 16 16 | 0065d5 | 7a          |                 ply                  restore old TOS as 3OS
1993:000 | DONE ins | na 16 16 | 0065d6 | 94 02       |                 sty.dx 02            
1994:000 | DONE wsp | na 16 16 |        |             |
1995:000 | DONE ins | na 16 16 | 0065d8 | a5 0c       |                 lda.d 00020c         
1996:000 | DONE ins | na 16 16 | 0065da | 18          |                 clc                  
1997:000 | DONE ins | na 16 16 | 0065db | 65 0e       |                 adc.d 00020e         
1998:000 | DONE ins | na 16 16 | 0065dd | 95 00       |                 sta.dx 00            Address as NOS
1999:000 | DONE wsp | na 16 16 |        |             |
2000:000 | DONE ins | na 16 16 | 0065df | a0 00 00    |                 ldy.# 0000           TOS
2001:000 | DONE wsp | na 16 16 |        |             |
2002:000 | DONE ins | na 16 16 | 0065e2 | 60          |                 rts                  don't have to go through PARSE
2003:000 | DONE wsp | na 16 16 |        |             |
2004:000 | DONE lbl | na 16 16 | 0065e3 |             | parse-name_found                     
2005:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2006:000 | DONE ins | na 16 16 | 0065e3 | c2 20       |                 rep 20               
2006:001 | DONE ctl | na 16 16 |        |             |         .!a16
2007:000 | DONE ins | na 16 16 | 0065e5 | 84 12       |                 sty.d 000212         new >IN
2008:000 | DONE wsp | na 16 16 |        |             |
2009:000 | DONE ins | na 16 16 | 0065e7 | 7a          |                 ply                  recover TOS
2010:000 | DONE ins | na 16 16 | 0065e8 | ca          |                 dex                  
2011:000 | DONE ins | na 16 16 | 0065e9 | ca          |                 dex                  
2012:000 | DONE ins | na 16 16 | 0065ea | 94 00       |                 sty.dx 00            
2013:000 | DONE wsp | na 16 16 |        |             |
2014:000 | DONE ins | na 16 16 | 0065ec | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
2015:000 | DONE wsp | na 16 16 |        |             |
2016:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
2017:000 | DONE wsp | na 16 16 |        |             |
2018:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2019:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
2020:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
2021:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
2022:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
2023:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
2024:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
2025:000 | DONE cmt | na 16 16 |        |             | ;
2026:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
2027:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
2028:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
2029:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
2030:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
2031:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
2032:000 | DONE cmt | na 16 16 |        |             | ;
2033:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
2034:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
2035:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
2036:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
2037:000 | DONE lbl | na 16 16 | 0065ef |             | xt_parse                             
2038:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2039:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2040:000 | DONE ins | na 16 16 | 0065ef | 84 16       |                 sty.d 000216         save delimiter, char is LSB
2041:000 | DONE wsp | na 16 16 |        |             |
2042:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
2043:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
2044:000 | DONE cmt | na 16 16 |        |             |                 ; return
2045:000 | DONE ins | na 16 16 | 0065f1 | a5 12       |                 lda.d 000212         
2046:000 | DONE ins | na 16 16 | 0065f3 | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
2047:000 | DONE ins | na 16 16 | 0065f5 | 18          |                 clc                  
2048:000 | DONE ins | na 16 16 | 0065f6 | 65 0c       |                 adc.d 00020c         
2049:000 | DONE wsp | na 16 16 |        |             |
2050:000 | DONE ins | na 16 16 | 0065f8 | ca          |                 dex                  save addr as NOS
2051:000 | DONE ins | na 16 16 | 0065f9 | ca          |                 dex                  
2052:000 | DONE ins | na 16 16 | 0065fa | 95 00       |                 sta.dx 00            
2053:000 | DONE wsp | na 16 16 |        |             |
2054:000 | DONE ins | na 16 16 | 0065fc | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
2055:000 | DONE wsp | na 16 16 |        |             |
2056:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
2057:000 | DONE ins | na 16 16 | 0065fe | a4 12       |                 ldy.d 000212         
2058:000 | DONE ins | na 16 16 | 006600 | e2 20       |                 sep 20               
2058:001 | DONE ctl | na  8 16 |        |             |         .!a8
2059:000 | DONE wsp | na  8 16 |        |             |
2060:000 | DONE lbl | na  8 16 | 006602 |             | parse_loop                           
2061:000 | DONE ins | na  8 16 | 006602 | c4 0e       |                 cpy.d 00020e         check for EOL first
2062:000 | DONE ins | na  8 16 | 006604 | f0 0d       |                 beq 006613           
2063:000 | DONE wsp | na  8 16 |        |             |
2064:000 | DONE ins | na  8 16 | 006606 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2065:000 | DONE ins | na  8 16 | 006608 | c5 16       |                 cmp.d 000216         found delimiter?
2066:000 | DONE ins | na  8 16 | 00660a | f0 03       |                 beq 00660f           
2067:000 | DONE ins | na  8 16 | 00660c | c8          |                 iny                  
2068:000 | DONE ins | na  8 16 | 00660d | 80 f3       |                 bra 006602           
2069:000 | DONE wsp | na  8 16 |        |             |
2070:000 | DONE lbl | na  8 16 | 00660f |             | parse_found_delimiter                
2071:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
2072:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
2073:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
2074:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
2075:000 | DONE ins | na  8 16 | 00660f | c2 20       |                 rep 20               
2075:001 | DONE ctl | na 16 16 |        |             |         .!a16
2076:000 | DONE ins | na 16 16 | 006611 | e6 18       |                 inc.d 000218         
2077:000 | DONE wsp | na 16 16 |        |             |
2078:000 | DONE lbl | na 16 16 | 006613 |             | parse_reached_eol                    
2079:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
2080:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2081:000 | DONE ins | na 16 16 | 006613 | c2 20       |                 rep 20               
2081:001 | DONE ctl | na 16 16 |        |             |         .!a16
2082:000 | DONE ins | na 16 16 | 006615 | 98          |                 tya                  
2083:000 | DONE ins | na 16 16 | 006616 | 38          |                 sec                  
2084:000 | DONE ins | na 16 16 | 006617 | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
2085:000 | DONE ins | na 16 16 | 006619 | 48          |                 pha                  save so we can manipulate Y
2086:000 | DONE wsp | na 16 16 |        |             |
2087:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
2088:000 | DONE ins | na 16 16 | 00661a | 98          |                 tya                  
2089:000 | DONE ins | na 16 16 | 00661b | 18          |                 clc                  
2090:000 | DONE ins | na 16 16 | 00661c | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
2091:000 | DONE ins | na 16 16 | 00661e | 85 12       |                 sta.d 000212         
2092:000 | DONE wsp | na 16 16 |        |             |
2093:000 | DONE ins | na 16 16 | 006620 | 7a          |                 ply                  length of string in TOS
2094:000 | DONE wsp | na 16 16 |        |             |
2095:000 | DONE lbl | na 16 16 | 006621 |             | z_parse-name                         
2096:000 | DONE lbl | na 16 16 | 006621 |             | z_parse                              
2096:001 | DONE ins | na 16 16 | 006621 | 60          |                 rts                  
2097:000 | DONE wsp | na 16 16 |        |             |
2098:000 | DONE wsp | na 16 16 |        |             |
2099:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2100:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
2101:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
2102:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
2103:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
2104:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
2105:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
2106:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
2107:000 | DONE lbl | na 16 16 | 006622 |             | xt_postpone                          
2108:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
2109:000 | DONE ins | na 16 16 | 006622 | 20 bd 65    |                 jsr 0065bd           ( addr n )
2110:000 | DONE wsp | na 16 16 |        |             |
2111:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
2112:000 | DONE ins | na 16 16 | 006625 | d0 06       |                 bne 00662d           
2113:000 | DONE ins | na 16 16 | 006627 | a9 ab 6e    |                 lda.# 006eab         
2114:000 | DONE ins | na 16 16 | 00662a | 4c af 6c    |                 jmp 006caf           
2115:000 | DONE wsp | na 16 16 |        |             |
2116:000 | DONE lbl | na 16 16 | 00662d |             | pp_got_word                          
2117:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
2118:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
2119:000 | DONE ins | na 16 16 | 00662d | 20 e8 6c    |                 jsr 006ce8           
2120:000 | DONE wsp | na 16 16 |        |             |
2121:000 | DONE ins | na 16 16 | 006630 | 20 ba 64    |                 jsr 0064ba           ( nt | 0 )
2122:000 | DONE wsp | na 16 16 |        |             |
2123:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
2124:000 | DONE ins | na 16 16 | 006633 | d0 03       |                 bne 006638           
2125:000 | DONE ins | na 16 16 | 006635 | a9 48 6f    |                 lda.# 006f48         
2126:000 | DONE wsp | na 16 16 |        |             |
2127:000 | DONE lbl | na 16 16 | 006638 |             | pp_got_nt                            
2128:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
2129:000 | DONE ins | na 16 16 | 006638 | 84 16       |                 sty.d 000216         
2130:000 | DONE wsp | na 16 16 |        |             |
2131:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
2132:000 | DONE ins | na 16 16 | 00663a | 20 72 65    |                 jsr 006572           ( xt )
2133:000 | DONE wsp | na 16 16 |        |             |
2134:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
2135:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
2136:000 | DONE ins | na 16 16 | 00663d | b2 16       |                 lda.di 000216        LDA (TMP1) - get status byte of word
2137:000 | DONE ins | na 16 16 | 00663f | eb          |                 xba                  flags are MSB
2138:000 | DONE ins | na 16 16 | 006640 | 29 02 00    |                 and.# IM             mask everything but Immediate bit
2139:000 | DONE ins | na 16 16 | 006643 | f0 03       |                 beq 006648           
2140:000 | DONE wsp | na 16 16 |        |             |
2141:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
2142:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
2143:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
2144:000 | DONE ins | na 16 16 | 006645 | 4c 5e 63    |                 jmp 00635e           JSR/RTS
2145:000 | DONE wsp | na 16 16 |        |             |
2146:000 | DONE lbl | na 16 16 | 006648 |             | pp_not_immediate                     
2147:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deffered
2148:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
2149:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
2150:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
2151:000 | DONE ins | na 16 16 | 006648 | f4 3f 65    |                 phe.# 00653f         PEA LITERAL_RT
2152:000 | DONE ins | na 16 16 | 00664b | 20 8e 6c    |                 jsr 006c8e           
2153:000 | DONE wsp | na 16 16 |        |             |
2154:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
2155:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
2156:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
2157:000 | DONE ins | na 16 16 | 00664e | 20 67 61    |                 jsr 006167           
2158:000 | DONE wsp | na 16 16 |        |             |
2159:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
2160:000 | DONE ins | na 16 16 | 006651 | f4 5e 63    |                 phe.# 00635e         
2161:000 | DONE ins | na 16 16 | 006654 | 4c 8e 6c    |                 jmp 006c8e           JSR/RTS
2162:000 | DONE wsp | na 16 16 |        |             |
2163:000 | DONE lbl | na 16 16 | 006657 |             | z_postpone                           ; never reached
2164:000 | DONE wsp | na 16 16 |        |             |
2165:000 | DONE wsp | na 16 16 |        |             |
2166:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2167:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
2168:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
2169:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
2170:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
2171:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
2172:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
2173:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
2174:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
2175:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
2176:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
2177:000 | DONE lbl | na 16 16 | 006657 |             | xt_refill                            
2178:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2179:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2180:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
2181:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
2182:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
2183:000 | DONE ins | na 16 16 | 006657 | a5 0c       |                 lda.d 00020c         
2184:000 | DONE ins | na 16 16 | 006659 | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
2185:000 | DONE ins | na 16 16 | 00665c | 85 0c       |                 sta.d 00020c         
2186:000 | DONE wsp | na 16 16 |        |             |
2187:000 | DONE ins | na 16 16 | 00665e | a5 0e       |                 lda.d 00020e         current length is now previous length
2188:000 | DONE ins | na 16 16 | 006660 | 85 10       |                 sta.d 000210         
2189:000 | DONE wsp | na 16 16 |        |             |
2190:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
2191:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
2192:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
2193:000 | DONE ins | na 16 16 | 006662 | a5 0a       |                 lda.d 00020a         
2194:000 | DONE ins | na 16 16 | 006664 | d0 14       |                 bne 00667a           
2195:000 | DONE wsp | na 16 16 |        |             |
2196:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
2197:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
2198:000 | DONE ins | na 16 16 | 006666 | ca          |                 dex                  push Data Stack down twice
2199:000 | DONE ins | na 16 16 | 006667 | ca          |                 dex                  
2200:000 | DONE ins | na 16 16 | 006668 | 94 00       |                 sty.dx 00            
2201:000 | DONE wsp | na 16 16 |        |             |
2202:000 | DONE ins | na 16 16 | 00666a | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
2203:000 | DONE ins | na 16 16 | 00666c | ca          |                 dex                  
2204:000 | DONE ins | na 16 16 | 00666d | ca          |                 dex                  
2205:000 | DONE ins | na 16 16 | 00666e | 95 00       |                 sta.dx 00            
2206:000 | DONE wsp | na 16 16 |        |             |
2207:000 | DONE ins | na 16 16 | 006670 | a0 ff 00    |                 ldy.# 0000ff         
2208:000 | DONE wsp | na 16 16 |        |             |
2209:000 | DONE ins | na 16 16 | 006673 | 20 44 62    |                 jsr 006244           ( addr n1 -- n2)
2210:000 | DONE wsp | na 16 16 |        |             |
2211:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
2212:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
2213:000 | DONE ins | na 16 16 | 006676 | a0 ff ff    |                 ldy.# 0ffff          
2214:000 | DONE wsp | na 16 16 |        |             |
2215:000 | DONE ins | na 16 16 | 006679 | 60          |                 rts                  
2216:000 | DONE wsp | na 16 16 |        |             |
2217:000 | DONE lbl | na 16 16 | 00667a |             | refill_src_not_kbd                   
2218:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
2219:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
2220:000 | DONE ins | na 16 16 | 00667a | 1a          |                 inc.a                
2221:000 | DONE ins | na 16 16 | 00667b | d0 06       |                 bne 006683           
2222:000 | DONE wsp | na 16 16 |        |             |
2223:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
2224:000 | DONE ins | na 16 16 | 00667d | ca          |                 dex                  
2225:000 | DONE ins | na 16 16 | 00667e | ca          |                 dex                  
2226:000 | DONE ins | na 16 16 | 00667f | 94 00       |                 sty.dx 00            
2227:000 | DONE ins | na 16 16 | 006681 | a8          |                 tay                  
2228:000 | DONE wsp | na 16 16 |        |             |
2229:000 | DONE ins | na 16 16 | 006682 | 60          |                 rts                  
2230:000 | DONE wsp | na 16 16 |        |             |
2231:000 | DONE lbl | na 16 16 | 006683 |             | refill_source_is_not_string          
2232:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
2233:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
2234:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
2235:000 | DONE ins | na 16 16 | 006683 | a9 00 6f    |                 lda.# 006f00         
2236:000 | DONE ins | na 16 16 | 006686 | 4c af 6c    |                 jmp 006caf           
2237:000 | DONE wsp | na 16 16 |        |             |
2238:000 | DONE lbl | na 16 16 | 006689 |             | z_refill                             
2238:001 | DONE ins | na 16 16 | 006689 | 60          |                 rts                  dummy for compiling
2239:000 | DONE wsp | na 16 16 |        |             |
2240:000 | DONE wsp | na 16 16 |        |             |
2241:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2242:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
2243:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
2244:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
2245:000 | DONE lbl | na 16 16 | 00668a |             | xt_rot                               
2246:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2247:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2248:000 | DONE ins | na 16 16 | 00668a | b5 00       |                 lda.dx 00            save b
2249:000 | DONE ins | na 16 16 | 00668c | 94 00       |                 sty.dx 00            move c to NOS
2250:000 | DONE ins | na 16 16 | 00668e | b4 02       |                 ldy.dx 02            move a to TOS
2251:000 | DONE ins | na 16 16 | 006690 | 95 02       |                 sta.dx 02            save b as 3OS
2252:000 | DONE wsp | na 16 16 |        |             |
2253:000 | DONE lbl | na 16 16 | 006692 |             | z_rot                                
2253:001 | DONE ins | na 16 16 | 006692 | 60          |                 rts                  
2254:000 | DONE wsp | na 16 16 |        |             |
2255:000 | DONE wsp | na 16 16 |        |             |
2256:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2257:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
2258:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
2259:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
2260:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
2261:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
2262:000 | DONE cmt | na 16 16 |        |             | ; want it in code
2263:000 | DONE lbl | na 16 16 | 006693 |             | xt_squote                            
2264:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
2265:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
2266:000 | DONE ins | na 16 16 | 006693 | ca          |                 dex                  
2267:000 | DONE ins | na 16 16 | 006694 | ca          |                 dex                  
2268:000 | DONE ins | na 16 16 | 006695 | 94 00       |                 sty.dx 00            
2269:000 | DONE wsp | na 16 16 |        |             |
2270:000 | DONE ins | na 16 16 | 006697 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
2271:000 | DONE ins | na 16 16 | 00669a | 20 ef 65    |                 jsr 0065ef           Returns ( addr u ) of string
2272:000 | DONE wsp | na 16 16 |        |             |
2273:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
2274:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
2275:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
2276:000 | DONE ins | na 16 16 | 00669d | a5 14       |                 lda.d 000214         
2277:000 | DONE ins | na 16 16 | 00669f | f0 03       |                 beq 0066a4           if we're interpreting, we're done
2278:000 | DONE wsp | na 16 16 |        |             |
2279:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
2280:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
2281:000 | DONE ins | na 16 16 | 0066a1 | 4c a5 66    |                 jmp 0066a5           JSR/RTS
2282:000 | DONE wsp | na 16 16 |        |             |
2283:000 | DONE lbl | na 16 16 | 0066a4 |             | z_squote                             
2283:001 | DONE ins | na 16 16 | 0066a4 | 60          |                 rts                  
2284:000 | DONE wsp | na 16 16 |        |             |
2285:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2286:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
2287:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
2288:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
2289:000 | DONE cmt | na 16 16 |        |             | ; tmp2
2290:000 | DONE lbl | na 16 16 | 0066a5 |             | xt_sliteral                          
2291:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2292:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
2293:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
2294:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
2295:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
2296:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
2297:000 | DONE ins | na 16 16 | 0066a5 | b5 00       |                 lda.dx 00            Address of string is NOS
2298:000 | DONE ins | na 16 16 | 0066a7 | 85 16       |                 sta.d 000216         
2299:000 | DONE ins | na 16 16 | 0066a9 | 84 18       |                 sty.d 000218         keep copy of string length
2300:000 | DONE wsp | na 16 16 |        |             |
2301:000 | DONE ins | na 16 16 | 0066ab | e2 20       |                 sep 20               
2301:001 | DONE ctl | na  8 16 |        |             |         .!a8
2302:000 | DONE ins | na  8 16 | 0066ad | a9 4c       |                 lda.# 04c            opcode for JMP
2303:000 | DONE ins | na  8 16 | 0066af | 92 00       |                 sta.di 000200        STA (CP)
2304:000 | DONE ins | na  8 16 | 0066b1 | c2 20       |                 rep 20               
2304:001 | DONE ctl | na 16 16 |        |             |         .!a16
2305:000 | DONE ins | na 16 16 | 0066b3 | e6 00       |                 inc.d 000200         
2306:000 | DONE wsp | na 16 16 |        |             |
2307:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
2308:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
2309:000 | DONE ins | na 16 16 | 0066b5 | a5 18       |                 lda.d 000218         string length
2310:000 | DONE ins | na 16 16 | 0066b7 | 1a          |                 inc.a                
2311:000 | DONE ins | na 16 16 | 0066b8 | 1a          |                 inc.a                
2312:000 | DONE wsp | na 16 16 |        |             |
2313:000 | DONE ins | na 16 16 | 0066b9 | 18          |                 clc                  
2314:000 | DONE ins | na 16 16 | 0066ba | 65 00       |                 adc.d 000200         current address
2315:000 | DONE ins | na 16 16 | 0066bc | 92 00       |                 sta.di 000200        store jump target
2316:000 | DONE wsp | na 16 16 |        |             |
2317:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
2318:000 | DONE ins | na 16 16 | 0066be | e6 00       |                 inc.d 000200         
2319:000 | DONE ins | na 16 16 | 0066c0 | e6 00       |                 inc.d 000200         
2320:000 | DONE wsp | na 16 16 |        |             |
2321:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
2322:000 | DONE ins | na 16 16 | 0066c2 | 88          |                 dey                  last offset is one less than length
2323:000 | DONE ins | na 16 16 | 0066c3 | e2 20       |                 sep 20               
2323:001 | DONE ctl | na  8 16 |        |             |         .!a8
2324:000 | DONE lbl | na  8 16 | 0066c5 |             | sl_loop                              
2325:000 | DONE ins | na  8 16 | 0066c5 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2326:000 | DONE ins | na  8 16 | 0066c7 | 91 00       |                 sta.diy 000200       STA (CP),Y
2327:000 | DONE ins | na  8 16 | 0066c9 | 88          |                 dey                  
2328:000 | DONE ins | na  8 16 | 0066ca | 10 f9       |                 bpl 0066c5           
2329:000 | DONE wsp | na  8 16 |        |             |
2330:000 | DONE ins | na  8 16 | 0066cc | c2 20       |                 rep 20               
2330:001 | DONE ctl | na 16 16 |        |             |         .!a16
2331:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
2332:000 | DONE ins | na 16 16 | 0066ce | a5 00       |                 lda.d 000200         
2333:000 | DONE ins | na 16 16 | 0066d0 | 85 16       |                 sta.d 000216         overwrites original address
2334:000 | DONE wsp | na 16 16 |        |             |
2335:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
2336:000 | DONE ins | na 16 16 | 0066d2 | 18          |                 clc                  
2337:000 | DONE ins | na 16 16 | 0066d3 | 65 18       |                 adc.d 000218         length of string
2338:000 | DONE ins | na 16 16 | 0066d5 | 85 00       |                 sta.d 000200         
2339:000 | DONE wsp | na 16 16 |        |             |
2340:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
2341:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
2342:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
2343:000 | DONE cmt | na 16 16 |        |             |                 ;
2344:000 | DONE cmt | na 16 16 |        |             |                 ;       jsr sliteral_rt
2345:000 | DONE cmt | na 16 16 |        |             |                 ;       <string address>
2346:000 | DONE cmt | na 16 16 |        |             |                 ;       <string length>
2347:000 | DONE cmt | na 16 16 |        |             |                 ;
2348:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
2349:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
2350:000 | DONE ins | na 16 16 | 0066d7 | f4 f0 66    |                 phe.# 0066f0         
2351:000 | DONE ins | na 16 16 | 0066da | 20 8e 6c    |                 jsr 006c8e           
2352:000 | DONE wsp | na 16 16 |        |             |
2353:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
2354:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
2355:000 | DONE ins | na 16 16 | 0066dd | a5 16       |                 lda.d 000216         new address of string
2356:000 | DONE ins | na 16 16 | 0066df | 48          |                 pha                  
2357:000 | DONE ins | na 16 16 | 0066e0 | 20 89 6c    |                 jsr 006c89           
2358:000 | DONE wsp | na 16 16 |        |             |
2359:000 | DONE ins | na 16 16 | 0066e3 | a5 18       |                 lda.d 000218         
2360:000 | DONE ins | na 16 16 | 0066e5 | 48          |                 pha                  
2361:000 | DONE ins | na 16 16 | 0066e6 | 20 89 6c    |                 jsr 006c89           
2362:000 | DONE wsp | na 16 16 |        |             |
2363:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
2364:000 | DONE ins | na 16 16 | 0066e9 | b4 02       |                 ldy.dx 02            2DROP
2365:000 | DONE ins | na 16 16 | 0066eb | e8          |                 inx                  
2366:000 | DONE ins | na 16 16 | 0066ec | e8          |                 inx                  
2367:000 | DONE ins | na 16 16 | 0066ed | e8          |                 inx                  
2368:000 | DONE ins | na 16 16 | 0066ee | e8          |                 inx                  
2369:000 | DONE wsp | na 16 16 |        |             |
2370:000 | DONE lbl | na 16 16 | 0066ef |             | z_sliteral                           
2370:001 | DONE ins | na 16 16 | 0066ef | 60          |                 rts                  
2371:000 | DONE wsp | na 16 16 |        |             |
2372:000 | DONE lbl | na 16 16 | 0066f0 |             | sliteral_rt                          
2373:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
2374:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
2375:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
2376:000 | DONE wsp | na 16 16 |        |             |
2377:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
2378:000 | DONE ins | na 16 16 | 0066f0 | ca          |                 dex                  
2379:000 | DONE ins | na 16 16 | 0066f1 | ca          |                 dex                  
2380:000 | DONE ins | na 16 16 | 0066f2 | ca          |                 dex                  
2381:000 | DONE ins | na 16 16 | 0066f3 | ca          |                 dex                  
2382:000 | DONE ins | na 16 16 | 0066f4 | 94 02       |                 sty.dx 02            
2383:000 | DONE wsp | na 16 16 |        |             |
2384:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
2385:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
2386:000 | DONE ins | na 16 16 | 0066f6 | 7a          |                 ply                  
2387:000 | DONE ins | na 16 16 | 0066f7 | c8          |                 iny                  
2388:000 | DONE wsp | na 16 16 |        |             |
2389:000 | DONE ins | na 16 16 | 0066f8 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2390:000 | DONE ins | na 16 16 | 0066fb | 95 00       |                 sta.dx 00            save string address as NOS
2391:000 | DONE ins | na 16 16 | 0066fd | c8          |                 iny                  
2392:000 | DONE ins | na 16 16 | 0066fe | c8          |                 iny                  
2393:000 | DONE ins | na 16 16 | 0066ff | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
2394:000 | DONE wsp | na 16 16 |        |             |
2395:000 | DONE ins | na 16 16 | 006702 | c8          |                 iny                  ... first, though, repair return jump
2396:000 | DONE ins | na 16 16 | 006703 | 5a          |                 phy                  
2397:000 | DONE wsp | na 16 16 |        |             |
2398:000 | DONE ins | na 16 16 | 006704 | a8          |                 tay                  TOS is now length of string
2399:000 | DONE wsp | na 16 16 |        |             |
2400:000 | DONE ins | na 16 16 | 006705 | 60          |                 rts                  
2401:000 | DONE wsp | na 16 16 |        |             |
2402:000 | DONE wsp | na 16 16 |        |             |
2403:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2404:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
2405:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
2406:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
2407:000 | DONE wsp | na 16 16 |        |             |
2408:000 | DONE lbl | na 16 16 | 006706 |             | xt_source                            
2409:000 | DONE ins | na 16 16 | 006706 | ca          |                 dex                  make room on Data Stack
2410:000 | DONE ins | na 16 16 | 006707 | ca          |                 dex                  
2411:000 | DONE ins | na 16 16 | 006708 | ca          |                 dex                  
2412:000 | DONE ins | na 16 16 | 006709 | ca          |                 dex                  
2413:000 | DONE ins | na 16 16 | 00670a | 94 02       |                 sty.dx 02            
2414:000 | DONE wsp | na 16 16 |        |             |
2415:000 | DONE ins | na 16 16 | 00670c | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
2416:000 | DONE ins | na 16 16 | 00670e | 95 00       |                 sta.dx 00            
2417:000 | DONE wsp | na 16 16 |        |             |
2418:000 | DONE ins | na 16 16 | 006710 | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
2419:000 | DONE wsp | na 16 16 |        |             |
2420:000 | DONE lbl | na 16 16 | 006712 |             | z_source                             
2420:001 | DONE ins | na 16 16 | 006712 | 60          |                 rts                  
2421:000 | DONE wsp | na 16 16 |        |             |
2422:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2423:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
2424:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
2425:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
2426:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
2427:000 | DONE lbl | na 16 16 | 006713 |             | xt_source-id                         
2428:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2429:000 | DONE ins | na 16 16 | 006713 | ca          |                 dex                  
2430:000 | DONE ins | na 16 16 | 006714 | ca          |                 dex                  
2431:000 | DONE ins | na 16 16 | 006715 | 94 00       |                 sty.dx 00            
2432:000 | DONE ins | na 16 16 | 006717 | a4 0a       |                 ldy.d 00020a         
2433:000 | DONE wsp | na 16 16 |        |             |
2434:000 | DONE lbl | na 16 16 | 006719 |             | z_source-id                          
2434:001 | DONE ins | na 16 16 | 006719 | 60          |                 rts                  
2435:000 | DONE wsp | na 16 16 |        |             |
2436:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2437:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
2438:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
2439:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
2440:000 | DONE lbl | na 16 16 | 00671a |             | xt_space                             
2441:000 | DONE ins | na 16 16 | 00671a | a9 20 00    |                 lda.# AscSP          
2442:000 | DONE ins | na 16 16 | 00671d | 20 36 60    |                 jsr 006036           
2443:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2444:000 | DONE wsp | na 16 16 |        |             |
2445:000 | DONE lbl | na 16 16 | 006720 |             | z_space                              
2445:001 | DONE ins | na 16 16 | 006720 | 60          |                 rts                  
2446:000 | DONE wsp | na 16 16 |        |             |
2447:000 | DONE wsp | na 16 16 |        |             |
2448:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2449:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
2450:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
2451:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
2452:000 | DONE lbl | na 16 16 | 006721 |             | xt_spaces                            
2453:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2454:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2455:000 | DONE lbl | na 16 16 | 006721 |             | @                                    
2456:000 | DONE ins | na 16 16 | 006721 | 88          |                 dey                  this also handles case u=0
2457:000 | DONE ins | na 16 16 | 006722 | 30 05       |                 bmi 006729           
2458:000 | DONE wsp | na 16 16 |        |             |
2459:000 | DONE ins | na 16 16 | 006724 | 20 1a 67    |                 jsr 00671a           
2460:000 | DONE ins | na 16 16 | 006727 | 80 f8       |                 bra 006721           
2461:000 | DONE wsp | na 16 16 |        |             |
2462:000 | DONE lbl | na 16 16 | 006729 |             | spaces_done                          
2463:000 | DONE ins | na 16 16 | 006729 | b4 00       |                 ldy.dx 00            DROP
2464:000 | DONE ins | na 16 16 | 00672b | e8          |                 inx                  
2465:000 | DONE ins | na 16 16 | 00672c | e8          |                 inx                  
2466:000 | DONE wsp | na 16 16 |        |             |
2467:000 | DONE lbl | na 16 16 | 00672d |             | z_spaces                             
2467:001 | DONE ins | na 16 16 | 00672d | 60          |                 rts                  
2468:000 | DONE wsp | na 16 16 |        |             |
2469:000 | DONE wsp | na 16 16 |        |             |
2470:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2471:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
2472:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
2473:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
2474:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
2475:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
2476:000 | DONE lbl | na 16 16 | 00672e |             | xt_state                             
2477:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2478:000 | DONE ins | na 16 16 | 00672e | ca          |                 dex                  
2479:000 | DONE ins | na 16 16 | 00672f | ca          |                 dex                  
2480:000 | DONE ins | na 16 16 | 006730 | 94 00       |                 sty.dx 00            
2481:000 | DONE ins | na 16 16 | 006732 | a0 14 02    |                 ldy.# 000214         
2482:000 | DONE wsp | na 16 16 |        |             |
2483:000 | DONE lbl | na 16 16 | 006735 |             | z_state                              
2483:001 | DONE ins | na 16 16 | 006735 | 60          |                 rts                  
2484:000 | DONE wsp | na 16 16 |        |             |
2485:000 | DONE wsp | na 16 16 |        |             |
2486:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2487:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
2488:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
2489:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
2490:000 | DONE lbl | na 16 16 | 006736 |             | xt_swap                              
2491:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2492:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2493:000 | DONE ins | na 16 16 | 006736 | b5 00       |                 lda.dx 00            
2494:000 | DONE ins | na 16 16 | 006738 | 94 00       |                 sty.dx 00            
2495:000 | DONE ins | na 16 16 | 00673a | a8          |                 tay                  
2496:000 | DONE wsp | na 16 16 |        |             |
2497:000 | DONE lbl | na 16 16 | 00673b |             | z_swap                               
2497:001 | DONE ins | na 16 16 | 00673b | 60          |                 rts                  
2498:000 | DONE wsp | na 16 16 |        |             |
2499:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2500:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
2501:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
2502:000 | DONE lbl | na 16 16 | 00673c |             | xt_true                              
2503:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2504:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2505:000 | DONE ins | na 16 16 | 00673c | ca          |                 dex                  
2506:000 | DONE ins | na 16 16 | 00673d | ca          |                 dex                  
2507:000 | DONE ins | na 16 16 | 00673e | 94 00       |                 sty.dx 00            
2508:000 | DONE ins | na 16 16 | 006740 | a0 ff ff    |                 ldy.# 0ffff          
2509:000 | DONE wsp | na 16 16 |        |             |
2510:000 | DONE lbl | na 16 16 | 006743 |             | z_true                               
2510:001 | DONE ins | na 16 16 | 006743 | 60          |                 rts                  
2511:000 | DONE wsp | na 16 16 |        |             |
2512:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2513:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
2514:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
2515:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
2516:000 | DONE lbl | na 16 16 | 006744 |             | xt_tuck                              
2517:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2518:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2519:000 | DONE ins | na 16 16 | 006744 | ca          |                 dex                  
2520:000 | DONE ins | na 16 16 | 006745 | ca          |                 dex                  
2521:000 | DONE ins | na 16 16 | 006746 | b5 02       |                 lda.dx 2             
2522:000 | DONE ins | na 16 16 | 006748 | 95 00       |                 sta.dx 0             
2523:000 | DONE ins | na 16 16 | 00674a | 94 02       |                 sty.dx 2             
2524:000 | DONE wsp | na 16 16 |        |             |
2525:000 | DONE lbl | na 16 16 | 00674c |             | z_tuck                               
2525:001 | DONE ins | na 16 16 | 00674c | 60          |                 rts                  
2526:000 | DONE wsp | na 16 16 |        |             |
2527:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2528:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
2529:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
2530:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
2531:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
2532:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
2533:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
2534:000 | DONE cmt | na 16 16 |        |             | ; running.
2535:000 | DONE lbl | na 16 16 | 00674d |             | xt_type                              
2536:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2537:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2538:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
2539:000 | DONE ins | na 16 16 | 00674d | 98          |                 tya                  force flag check of TOS
2540:000 | DONE ins | na 16 16 | 00674e | f0 17       |                 beq 006767           
2541:000 | DONE wsp | na 16 16 |        |             |
2542:000 | DONE ins | na 16 16 | 006750 | b5 00       |                 lda.dx 00            get address from NOS
2543:000 | DONE ins | na 16 16 | 006752 | 85 16       |                 sta.d 000216         
2544:000 | DONE ins | na 16 16 | 006754 | 84 18       |                 sty.d 000218         number of chars is TOS
2545:000 | DONE ins | na 16 16 | 006756 | a0 00 00    |                 ldy.# 0000           
2546:000 | DONE ins | na 16 16 | 006759 | e2 20       |                 sep 20               
2546:001 | DONE ctl | na  8 16 |        |             |         .!a8
2547:000 | DONE lbl | na  8 16 | 00675b |             | type_loop                            
2548:000 | DONE ins | na  8 16 | 00675b | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2549:000 | DONE ins | na  8 16 | 00675d | 20 36 60    |                 jsr 006036           
2550:000 | DONE ins | na  8 16 | 006760 | c8          |                 iny                  
2551:000 | DONE ins | na  8 16 | 006761 | c4 18       |                 cpy.d 000218         
2552:000 | DONE ins | na  8 16 | 006763 | d0 f6       |                 bne 00675b           
2553:000 | DONE wsp | na  8 16 |        |             |
2554:000 | DONE ins | na  8 16 | 006765 | c2 20       |                 rep 20               
2554:001 | DONE ctl | na 16 16 |        |             |         .!a16
2555:000 | DONE lbl | na 16 16 | 006767 |             | type_done                            
2556:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
2557:000 | DONE ins | na 16 16 | 006767 | b4 02       |                 ldy.dx 02            
2558:000 | DONE ins | na 16 16 | 006769 | e8          |                 inx                  
2559:000 | DONE ins | na 16 16 | 00676a | e8          |                 inx                  
2560:000 | DONE ins | na 16 16 | 00676b | e8          |                 inx                  
2561:000 | DONE ins | na 16 16 | 00676c | e8          |                 inx                  
2562:000 | DONE wsp | na 16 16 |        |             |
2563:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
2564:000 | DONE wsp | na 16 16 |        |             |
2565:000 | DONE lbl | na 16 16 | 00676d |             | z_type                               
2565:001 | DONE ins | na 16 16 | 00676d | 60          |                 rts                  
2566:000 | DONE wsp | na 16 16 |        |             |
2567:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2568:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
2569:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
2570:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
2571:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
2572:000 | DONE lbl | na 16 16 | 00676e |             | xt_unused                            
2573:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2574:000 | DONE ins | na 16 16 | 00676e | a9 ff 7b    |                 lda.# 007bff         
2575:000 | DONE ins | na 16 16 | 006771 | 38          |                 sec                  
2576:000 | DONE ins | na 16 16 | 006772 | e5 00       |                 sbc.d 000200         current compile pointer
2577:000 | DONE wsp | na 16 16 |        |             |
2578:000 | DONE ins | na 16 16 | 006774 | ca          |                 dex                  
2579:000 | DONE ins | na 16 16 | 006775 | ca          |                 dex                  
2580:000 | DONE ins | na 16 16 | 006776 | 94 00       |                 sty.dx 00            
2581:000 | DONE wsp | na 16 16 |        |             |
2582:000 | DONE ins | na 16 16 | 006778 | a8          |                 tay                  
2583:000 | DONE wsp | na 16 16 |        |             |
2584:000 | DONE lbl | na 16 16 | 006779 |             | z_unused                             
2584:001 | DONE ins | na 16 16 | 006779 | 60          |                 rts                  
2585:000 | DONE wsp | na 16 16 |        |             |
2586:000 | DONE wsp | na 16 16 |        |             |
2587:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2588:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
2589:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
2590:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
2591:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
2592:000 | DONE lbl | na 16 16 | 00677a |             | xt_variable                          
2593:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
2594:000 | DONE ins | na 16 16 | 00677a | 20 a1 63    |                 jsr 0063a1           
2595:000 | DONE wsp | na 16 16 |        |             |
2596:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
2597:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
2598:000 | DONE ins | na 16 16 | 00677d | a9 00 00    |                 lda.# 0000           
2599:000 | DONE ins | na 16 16 | 006780 | 92 00       |                 sta.di 000200        STA (CP)
2600:000 | DONE wsp | na 16 16 |        |             |
2601:000 | DONE ins | na 16 16 | 006782 | e6 00       |                 inc.d 000200         direct COMMA
2602:000 | DONE ins | na 16 16 | 006784 | e6 00       |                 inc.d 000200         
2603:000 | DONE wsp | na 16 16 |        |             |
2604:000 | DONE lbl | na 16 16 | 006786 |             | z_variable                           
2604:001 | DONE ins | na 16 16 | 006786 | 60          |                 rts                  
2605:000 | DONE wsp | na 16 16 |        |             |
2606:000 | DONE wsp | na 16 16 |        |             |
2607:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2608:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
2609:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
2610:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
2611:000 | DONE lbl | na 16 16 | 006787 |             | xt_words                             
2612:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2613:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2614:000 | DONE ins | na 16 16 | 006787 | 20 9a 63    |                 jsr 00639a           start on next line, this is a style choice
2615:000 | DONE wsp | na 16 16 |        |             |
2616:000 | DONE ins | na 16 16 | 00678a | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
2617:000 | DONE ins | na 16 16 | 00678c | 48          |                 pha                  
2618:000 | DONE wsp | na 16 16 |        |             |
2619:000 | DONE ins | na 16 16 | 00678d | ca          |                 dex                  create room on TOS
2620:000 | DONE ins | na 16 16 | 00678e | ca          |                 dex                  
2621:000 | DONE ins | na 16 16 | 00678f | 94 00       |                 sty.dx 00            
2622:000 | DONE wsp | na 16 16 |        |             |
2623:000 | DONE lbl | na 16 16 | 006791 |             | words_loop                           
2624:000 | DONE ins | na 16 16 | 006791 | a8          |                 tay                  ( nt )
2625:000 | DONE ins | na 16 16 | 006792 | 20 7b 65    |                 jsr 00657b           ( nt -- addr u )
2626:000 | DONE ins | na 16 16 | 006795 | 20 4d 67    |                 jsr 00674d           ( addr u -- )
2627:000 | DONE ins | na 16 16 | 006798 | 20 1a 67    |                 jsr 00671a           
2628:000 | DONE wsp | na 16 16 |        |             |
2629:000 | DONE ins | na 16 16 | 00679b | 68          |                 pla                  get back first entry in Dictionary
2630:000 | DONE wsp | na 16 16 |        |             |
2631:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
2632:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
2633:000 | DONE ins | na 16 16 | 00679c | 1a          |                 inc.a                
2634:000 | DONE ins | na 16 16 | 00679d | 1a          |                 inc.a                
2635:000 | DONE wsp | na 16 16 |        |             |
2636:000 | DONE ins | na 16 16 | 00679e | ca          |                 dex                  
2637:000 | DONE ins | na 16 16 | 00679f | ca          |                 dex                  
2638:000 | DONE ins | na 16 16 | 0067a0 | 94 00       |                 sty.dx 00            
2639:000 | DONE wsp | na 16 16 |        |             |
2640:000 | DONE ins | na 16 16 | 0067a2 | a8          |                 tay                  
2641:000 | DONE ins | na 16 16 | 0067a3 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2642:000 | DONE ins | na 16 16 | 0067a6 | 48          |                 pha                  
2643:000 | DONE ins | na 16 16 | 0067a7 | d0 e8       |                 bne 006791           zero entry signals end of Dictionary
2644:000 | DONE wsp | na 16 16 |        |             |
2645:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
2646:000 | DONE ins | na 16 16 | 0067a9 | 68          |                 pla                  balance MPU stack, value discarded
2647:000 | DONE wsp | na 16 16 |        |             |
2648:000 | DONE ins | na 16 16 | 0067aa | b4 00       |                 ldy.dx 00            
2649:000 | DONE ins | na 16 16 | 0067ac | e8          |                 inx                  
2650:000 | DONE ins | na 16 16 | 0067ad | e8          |                 inx                  
2651:000 | DONE wsp | na 16 16 |        |             |
2652:000 | DONE lbl | na 16 16 | 0067ae |             | z_words                              
2652:001 | DONE ins | na 16 16 | 0067ae | 60          |                 rts                  
2653:000 | DONE wsp | na 16 16 |        |             |
2654:000 | DONE wsp | na 16 16 |        |             |
2655:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2656:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
2657:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
2658:000 | DONE lbl | na 16 16 | 0067af |             | xt_xor                               
2659:000 | DONE ins | na 16 16 | 0067af | 98          |                 tya                  
2660:000 | DONE ins | na 16 16 | 0067b0 | 55 00       |                 eor.dx 00            
2661:000 | DONE ins | na 16 16 | 0067b2 | a8          |                 tay                  
2662:000 | DONE wsp | na 16 16 |        |             |
2663:000 | DONE ins | na 16 16 | 0067b3 | e8          |                 inx                  
2664:000 | DONE ins | na 16 16 | 0067b4 | e8          |                 inx                  
2665:000 | DONE wsp | na 16 16 |        |             |
2666:000 | DONE lbl | na 16 16 | 0067b5 |             | z_xor                                
2666:001 | DONE ins | na 16 16 | 0067b5 | 60          |                 rts                  
2667:000 | DONE wsp | na 16 16 |        |             |
2668:000 | DONE wsp | na 16 16 |        |             |
2669:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2670:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
2671:000 | DONE wsp | na 16 16 |        |             |
2672:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
2672:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2672:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
2672:003 | DONE cmt | na 16 16 |        |             | ; This version: 17. Feb 2017
2672:004 | DONE wsp | na 16 16 |        |             |
2672:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
2672:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
2672:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
2672:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
2672:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
2672:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
2672:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
2672:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
2672:013 | DONE cmt | na 16 16 |        |             | ;
2672:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
2672:015 | DONE cmt | na 16 16 |        |             | ;
2672:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
2672:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
2672:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
2672:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
2672:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
2672:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
2672:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
2672:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
2672:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
2672:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
2672:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
2672:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
2672:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2672:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
2672:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2672:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
2672:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
2672:033 | DONE wsp | na 16 16 |        |             |
2672:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
2672:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
2672:036 | DONE cmt | na 16 16 |        |             | ;
2672:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
2672:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
2672:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
2672:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
2672:041 | DONE wsp | na 16 16 |        |             |
2672:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
2672:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
2672:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
2672:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
2672:046 | DONE wsp | na 16 16 |        |             |
2672:047 | DONE lbl | na 16 16 | 0067b6 |             | nt_bye                               
2672:048 | DONE dir | na 16 16 | 0067b6 | (1 bytes)   |         .byte 03                     length of word string
2672:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
2672:049 | DONE dir | na 16 16 | 0067b7 | (1 bytes)   |         .byte { PW + NC }            status byte
2672:049 | DONE dir | na 16 16 |        |             |                 09                       --  	
2672:050 | DONE dir | na 16 16 | 0067b8 | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
2672:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
2672:051 | DONE dir | na 16 16 | 0067ba | (2 bytes)   |         .word 00630f                 start of code, the xt of this word
2672:051 | DONE dir | na 16 16 |        |             |                 0f 63                    --  . c
2672:052 | DONE dir | na 16 16 | 0067bc | (2 bytes)   |         .word 006312                 end of code (points to RTS)
2672:052 | DONE dir | na 16 16 |        |             |                 12 63                    --  . c
2672:053 | DONE dir | na 16 16 | 0067be | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
2672:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
2672:054 | DONE wsp | na 16 16 |        |             |
2672:055 | DONE lbl | na 16 16 | 0067c1 |             | nt_cold                              
2672:056 | DONE dir | na 16 16 | 0067c1 | (2 bytes)   |         .byte 4, 00                  
2672:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2672:057 | DONE dir | na 16 16 | 0067c3 | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
2672:057 | DONE dir | na 16 16 |        |             |                 b6 67 63 60 de 60        --  . g c ` . `
2672:058 | DONE dir | na 16 16 | 0067c9 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
2672:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
2672:059 | DONE wsp | na 16 16 |        |             |
2672:060 | DONE lbl | na 16 16 | 0067cd |             | nt_words                             
2672:061 | DONE dir | na 16 16 | 0067cd | (2 bytes)   |         .byte 5, { PW + NC }         
2672:061 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2672:062 | DONE dir | na 16 16 | 0067cf | (6 bytes)   |         .word nt_cold, xt_words, 0067ae 
2672:062 | DONE dir | na 16 16 |        |             |                 c1 67 87 67 ae 67        --  . g . g . g
2672:063 | DONE dir | na 16 16 | 0067d5 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
2672:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
2672:064 | DONE wsp | na 16 16 |        |             |
2672:065 | DONE lbl | na 16 16 | 0067da |             | nt_dump                              
2672:066 | DONE dir | na 16 16 | 0067da | (2 bytes)   |         .byte 4, { PW + NC }         
2672:066 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:067 | DONE dir | na 16 16 | 0067dc | (6 bytes)   |         .word nt_words, xt_dump, 006477 
2672:067 | DONE dir | na 16 16 |        |             |                 cd 67 51 64 77 64        --  . g Q d w d
2672:068 | DONE dir | na 16 16 | 0067e2 | (4 bytes)   |         .byte 64, 75, 6d, 70         
2672:068 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
2672:069 | DONE wsp | na 16 16 |        |             |
2672:070 | DONE lbl | na 16 16 | 0067e6 |             | nt_bell                              
2672:071 | DONE dir | na 16 16 | 0067e6 | (2 bytes)   |         .byte 4, { PW + NC }         
2672:071 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:072 | DONE dir | na 16 16 | 0067e8 | (6 bytes)   |         .word nt_dump, xt_bell, 006306 
2672:072 | DONE dir | na 16 16 |        |             |                 da 67 00 63 06 63        --  . g . c . c
2672:073 | DONE dir | na 16 16 | 0067ee | (4 bytes)   |         .byte 62, 65, 6c, 6c         
2672:073 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
2672:074 | DONE wsp | na 16 16 |        |             |
2672:075 | DONE lbl | na 16 16 | 0067f2 |             | nt_decimal                           
2672:076 | DONE dir | na 16 16 | 0067f2 | (2 bytes)   |         .byte 7, { PW + NC }         
2672:076 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2672:077 | DONE dir | na 16 16 | 0067f4 | (6 bytes)   |         .word nt_bell, xt_decimal, 006419 
2672:077 | DONE dir | na 16 16 |        |             |                 e6 67 14 64 19 64        --  . g . d . d
2672:078 | DONE dir | na 16 16 | 0067fa | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
2672:078 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
2672:079 | DONE wsp | na 16 16 |        |             |
2672:080 | DONE lbl | na 16 16 | 006801 |             | nt_hex                               
2672:081 | DONE dir | na 16 16 | 006801 | (2 bytes)   |         .byte 3, { PW + NC }         
2672:081 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2672:082 | DONE dir | na 16 16 | 006803 | (6 bytes)   |         .word nt_decimal, xt_hex, 00652c 
2672:082 | DONE dir | na 16 16 |        |             |                 f2 67 27 65 2c 65        --  . g ' e , e
2672:083 | DONE dir | na 16 16 | 006809 | (3 bytes)   |         .byte 68, 65, 78             
2672:083 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
2672:084 | DONE wsp | na 16 16 |        |             |
2672:085 | DONE lbl | na 16 16 | 00680c |             | nt_unused                            
2672:086 | DONE dir | na 16 16 | 00680c | (2 bytes)   |         .byte 6, { PW + NC }         
2672:086 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2672:087 | DONE dir | na 16 16 | 00680e | (6 bytes)   |         .word nt_hex, xt_unused, 006779 
2672:087 | DONE dir | na 16 16 |        |             |                 01 68 6e 67 79 67        --  . h n g y g
2672:088 | DONE dir | na 16 16 | 006814 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
2672:088 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
2672:089 | DONE wsp | na 16 16 |        |             |
2672:090 | DONE lbl | na 16 16 | 00681a |             | nt_page                              
2672:091 | DONE dir | na 16 16 | 00681a | (2 bytes)   |         .byte 4, { PW + NC }         
2672:091 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:092 | DONE dir | na 16 16 | 00681c | (6 bytes)   |         .word nt_unused, xt_page, 0065bc 
2672:092 | DONE dir | na 16 16 |        |             |                 0c 68 b0 65 bc 65        --   h . e . e
2672:093 | DONE dir | na 16 16 | 006822 | (4 bytes)   |         .byte 70, 61, 67, 65         
2672:093 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
2672:094 | DONE wsp | na 16 16 |        |             |
2672:095 | DONE lbl | na 16 16 | 006826 |             | nt_count                             
2672:096 | DONE dir | na 16 16 | 006826 | (2 bytes)   |         .byte 5, { NC + PW }         
2672:096 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2672:097 | DONE dir | na 16 16 | 006828 | (6 bytes)   |         .word nt_page, xt_count, 006399 
2672:097 | DONE dir | na 16 16 |        |             |                 1a 68 8b 63 99 63        --  . h . c . c
2672:098 | DONE dir | na 16 16 | 00682e | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
2672:098 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
2672:099 | DONE wsp | na 16 16 |        |             |
2672:100 | DONE lbl | na 16 16 | 006833 |             | nt_abort                             
2672:101 | DONE dir | na 16 16 | 006833 | (2 bytes)   |         .byte 5, 00                  TODO check flags
2672:101 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2672:102 | DONE dir | na 16 16 | 006835 | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
2672:102 | DONE dir | na 16 16 |        |             |                 26 68 97 60 de 60        --  & h . ` . `
2672:103 | DONE dir | na 16 16 | 00683b | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
2672:103 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
2672:104 | DONE wsp | na 16 16 |        |             |
2672:105 | DONE lbl | na 16 16 | 006840 |             | nt_parse                             
2672:106 | DONE dir | na 16 16 | 006840 | (2 bytes)   |         .byte 5, 00                  
2672:106 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2672:107 | DONE dir | na 16 16 | 006842 | (6 bytes)   |         .word nt_abort, xt_parse, 006621 
2672:107 | DONE dir | na 16 16 |        |             |                 33 68 ef 65 21 66        --  3 h . e ! f
2672:108 | DONE dir | na 16 16 | 006848 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
2672:108 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
2672:109 | DONE wsp | na 16 16 |        |             |
2672:110 | DONE lbl | na 16 16 | 00684d |             | nt_quit                              
2672:111 | DONE dir | na 16 16 | 00684d | (2 bytes)   |         .byte 4, 00                  
2672:111 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2672:112 | DONE dir | na 16 16 | 00684f | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
2672:112 | DONE dir | na 16 16 |        |             |                 40 68 9f 60 de 60        --  @ h . ` . `
2672:113 | DONE dir | na 16 16 | 006855 | (4 bytes)   |         .byte 71, 75, 69, 74         
2672:113 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
2672:114 | DONE wsp | na 16 16 |        |             |
2672:115 | DONE lbl | na 16 16 | 006859 |             | nt_question                          
2672:116 | DONE dir | na 16 16 | 006859 | (2 bytes)   |         .byte 1, { PW + NC }         
2672:116 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:117 | DONE dir | na 16 16 | 00685b | (6 bytes)   |         .word nt_quit, xt_question, 0061b4 
2672:117 | DONE dir | na 16 16 |        |             |                 4d 68 ae 61 b4 61        --  M h . a . a
2672:118 | DONE dir | na 16 16 | 006861 | (1 bytes)   |         .byte 3f                     
2672:118 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
2672:119 | DONE wsp | na 16 16 |        |             |
2672:120 | DONE lbl | na 16 16 | 006862 |             | nt_name-int                          
2672:121 | DONE dir | na 16 16 | 006862 | (2 bytes)   |         .byte 8, { PW + NC }         
2672:121 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2672:122 | DONE dir | na 16 16 | 006864 | (6 bytes)   |         .word nt_question, xt_name-int, 00657a 
2672:122 | DONE dir | na 16 16 |        |             |                 59 68 72 65 7a 65        --  Y h r e z e
2672:123 | DONE dir | na 16 16 | 00686a | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
2672:123 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
2672:123 | DONE dir | na 16 16 |        |             |                                          -- 
2672:124 | DONE wsp | na 16 16 |        |             |
2672:125 | DONE lbl | na 16 16 | 006872 |             | nt_cr                                
2672:126 | DONE dir | na 16 16 | 006872 | (2 bytes)   |         .byte 2, { PW + NC }         
2672:126 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2672:127 | DONE dir | na 16 16 | 006874 | (6 bytes)   |         .word nt_name-int, xt_cr, 0063a0 
2672:127 | DONE dir | na 16 16 |        |             |                 62 68 9a 63 a0 63        --  b h . c . c
2672:128 | DONE dir | na 16 16 | 00687a | (2 bytes)   |         .byte 63, 72                 
2672:128 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
2672:129 | DONE wsp | na 16 16 |        |             |
2672:130 | DONE lbl | na 16 16 | 00687c |             | nt_bl                                
2672:131 | DONE dir | na 16 16 | 00687c | (2 bytes)   |         .byte 2, { PW + NC }         
2672:131 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2672:132 | DONE dir | na 16 16 | 00687e | (6 bytes)   |         .word nt_cr, xt_bl, 00630e   
2672:132 | DONE dir | na 16 16 |        |             |                 72 68 07 63 0e 63        --  r h . c . c
2672:133 | DONE dir | na 16 16 | 006884 | (2 bytes)   |         .byte 62, 6c                 
2672:133 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
2672:134 | DONE wsp | na 16 16 |        |             |
2672:135 | DONE lbl | na 16 16 | 006886 |             | nt_spaces                            
2672:136 | DONE dir | na 16 16 | 006886 | (2 bytes)   |         .byte 6, { PW + NC }         
2672:136 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2672:137 | DONE dir | na 16 16 | 006888 | (6 bytes)   |         .word nt_bl, xt_spaces, 00672d 
2672:137 | DONE dir | na 16 16 |        |             |                 7c 68 21 67 2d 67        --  | h ! g - g
2672:138 | DONE dir | na 16 16 | 00688e | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
2672:138 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
2672:139 | DONE wsp | na 16 16 |        |             |
2672:140 | DONE lbl | na 16 16 | 006894 |             | nt_space                             
2672:141 | DONE dir | na 16 16 | 006894 | (2 bytes)   |         .byte 5, { PW + NC }         
2672:141 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2672:142 | DONE dir | na 16 16 | 006896 | (6 bytes)   |         .word nt_spaces, xt_space, 006720 
2672:142 | DONE dir | na 16 16 |        |             |                 86 68 1a 67 20 67        --  . h . g   g
2672:143 | DONE dir | na 16 16 | 00689c | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
2672:143 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
2672:144 | DONE wsp | na 16 16 |        |             |
2672:145 | DONE lbl | na 16 16 | 0068a1 |             | nt_dots                              
2672:146 | DONE dir | na 16 16 | 0068a1 | (2 bytes)   |         .byte 2, { PW + NC }         
2672:146 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2672:147 | DONE dir | na 16 16 | 0068a3 | (6 bytes)   |         .word nt_space, xt_dots, 006166 
2672:147 | DONE dir | na 16 16 |        |             |                 94 68 1f 61 66 61        --  . h . a f a
2672:148 | DONE dir | na 16 16 | 0068a9 | (2 bytes)   |         .byte 2e, 73                 
2672:148 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
2672:149 | DONE wsp | na 16 16 |        |             |
2672:150 | DONE lbl | na 16 16 | 0068ab |             | nt_type                              
2672:151 | DONE dir | na 16 16 | 0068ab | (2 bytes)   |         .byte 4, 0                   
2672:151 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2672:152 | DONE dir | na 16 16 | 0068ad | (6 bytes)   |         .word nt_dots, xt_type, 00676d 
2672:152 | DONE dir | na 16 16 |        |             |                 a1 68 4d 67 6d 67        --  . h M g m g
2672:153 | DONE dir | na 16 16 | 0068b3 | (4 bytes)   |         .byte 74, 79, 70, 65         
2672:153 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
2672:154 | DONE wsp | na 16 16 |        |             |
2672:155 | DONE lbl | na 16 16 | 0068b7 |             | nt_dot                               
2672:156 | DONE dir | na 16 16 | 0068b7 | (2 bytes)   |         .byte 1, { PW + NC }         
2672:156 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:157 | DONE dir | na 16 16 | 0068b9 | (6 bytes)   |         .word nt_type, xt_dot, 0060fc 
2672:157 | DONE dir | na 16 16 |        |             |                 ab 68 e7 60 fc 60        --  . h . ` . `
2672:158 | DONE dir | na 16 16 | 0068bf | (1 bytes)   |         .byte 2e                     
2672:158 | DONE dir | na 16 16 |        |             |                 2e                       --  .
2672:159 | DONE wsp | na 16 16 |        |             |
2672:160 | DONE lbl | na 16 16 | 0068c0 |             | nt_pad                               
2672:161 | DONE dir | na 16 16 | 0068c0 | (2 bytes)   |         .byte 3, { PW + NC }         
2672:161 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2672:162 | DONE dir | na 16 16 | 0068c2 | (6 bytes)   |         .word nt_dot, xt_pad, 0065af 
2672:162 | DONE dir | na 16 16 |        |             |                 b7 68 a4 65 af 65        --  . h . e . e
2672:163 | DONE dir | na 16 16 | 0068c8 | (3 bytes)   |         .byte 70, 61, 64             
2672:163 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
2672:164 | DONE wsp | na 16 16 |        |             |
2672:165 | DONE lbl | na 16 16 | 0068cb |             | nt_base                              
2672:166 | DONE dir | na 16 16 | 0068cb | (2 bytes)   |         .byte 4, { PW + NC }         
2672:166 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:167 | DONE dir | na 16 16 | 0068cd | (6 bytes)   |         .word nt_pad, xt_base, 0062ff 
2672:167 | DONE dir | na 16 16 |        |             |                 c0 68 f8 62 ff 62        --  . h . b . b
2672:168 | DONE dir | na 16 16 | 0068d3 | (4 bytes)   |         .byte 62, 61, 73, 65         
2672:168 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
2672:169 | DONE wsp | na 16 16 |        |             |
2672:170 | DONE lbl | na 16 16 | 0068d7 |             | nt_evaluate                          
2672:171 | DONE dir | na 16 16 | 0068d7 | (2 bytes)   |         .byte 8, { PW + NC }         
2672:171 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2672:172 | DONE dir | na 16 16 | 0068d9 | (6 bytes)   |         .word nt_base, xt_evaluate, 0064ab 
2672:172 | DONE dir | na 16 16 |        |             |                 cb 68 7d 64 ab 64        --  . h } d . d
2672:173 | DONE dir | na 16 16 | 0068df | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
2672:173 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
2672:173 | DONE dir | na 16 16 |        |             |                                          -- 
2672:174 | DONE wsp | na 16 16 |        |             |
2672:175 | DONE lbl | na 16 16 | 0068e7 |             | nt_cells                             
2672:176 | DONE dir | na 16 16 | 0068e7 | (2 bytes)   |         .byte 5, { PW + NC }         2* because we have 16 bit stack
2672:176 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2672:177 | DONE dir | na 16 16 | 0068e9 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 00620c 
2672:177 | DONE dir | na 16 16 |        |             |                 d7 68 09 62 0c 62        --  . h 	 b  b
2672:178 | DONE dir | na 16 16 | 0068ef | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
2672:178 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
2672:179 | DONE wsp | na 16 16 |        |             |
2672:180 | DONE lbl | na 16 16 | 0068f4 |             | nt_dotquote                          
2672:181 | DONE dir | na 16 16 | 0068f4 | (2 bytes)   |         .byte 2, { CO + NC + IM }    
2672:181 | DONE dir | na 16 16 |        |             |                 02 07                    --  . .
2672:182 | DONE dir | na 16 16 | 0068f6 | (6 bytes)   |         .word nt_cells, xt_dotquote, 00611f 
2672:182 | DONE dir | na 16 16 |        |             |                 e7 68 0b 61 1f 61        --  . h  a . a
2672:183 | DONE dir | na 16 16 | 0068fc | (2 bytes)   |         .byte 2e, &34                
2672:183 | DONE dir | na 16 16 |        |             |                 2e 22                    --  . "
2672:184 | DONE wsp | na 16 16 |        |             |
2672:185 | DONE lbl | na 16 16 | 0068fe |             | nt_squote                            
2672:186 | DONE dir | na 16 16 | 0068fe | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
2672:186 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
2672:187 | DONE dir | na 16 16 | 006900 | (6 bytes)   |         .word nt_dotquote, xt_squote, 0066a4 
2672:187 | DONE dir | na 16 16 |        |             |                 f4 68 93 66 a4 66        --  . h . f . f
2672:188 | DONE dir | na 16 16 | 006906 | (2 bytes)   |         .byte 73, &34                
2672:188 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
2672:189 | DONE wsp | na 16 16 |        |             |
2672:190 | DONE lbl | na 16 16 | 006908 |             | nt_sliteral                          
2672:191 | DONE dir | na 16 16 | 006908 | (2 bytes)   |         .byte 8, { IM + CO }         
2672:191 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
2672:192 | DONE dir | na 16 16 | 00690a | (6 bytes)   |         .word nt_squote, xt_sliteral, 0066ef 
2672:192 | DONE dir | na 16 16 |        |             |                 fe 68 a5 66 ef 66        --  . h . f . f
2672:193 | DONE dir | na 16 16 | 006910 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
2672:193 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
2672:193 | DONE dir | na 16 16 |        |             |                                          -- 
2672:194 | DONE wsp | na 16 16 |        |             |
2672:195 | DONE lbl | na 16 16 | 006918 |             | nt_brackettick                       
2672:196 | DONE dir | na 16 16 | 006918 | (2 bytes)   |         .byte 3, { IM + CO }         
2672:196 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
2672:197 | DONE dir | na 16 16 | 00691a | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 0061ca 
2672:197 | DONE dir | na 16 16 |        |             |                 08 69 c4 61 ca 61        --  . i . a . a
2672:198 | DONE dir | na 16 16 | 006920 | (3 bytes)   |         .byte 5b, 27, 5d             
2672:198 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
2672:199 | DONE wsp | na 16 16 |        |             |
2672:200 | DONE lbl | na 16 16 | 006923 |             | nt_bracketchar                       
2672:201 | DONE dir | na 16 16 | 006923 | (2 bytes)   |         .byte 6, { IM + CO }         
2672:201 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
2672:202 | DONE dir | na 16 16 | 006925 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 0061d9 
2672:202 | DONE dir | na 16 16 |        |             |                 18 69 d3 61 d9 61        --  . i . a . a
2672:203 | DONE dir | na 16 16 | 00692b | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
2672:203 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
2672:204 | DONE wsp | na 16 16 |        |             |
2672:205 | DONE lbl | na 16 16 | 006931 |             | nt_literal                           
2672:206 | DONE dir | na 16 16 | 006931 | (2 bytes)   |         .byte 7, { IM + CO }         
2672:206 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
2672:207 | DONE dir | na 16 16 | 006933 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 00653e 
2672:207 | DONE dir | na 16 16 |        |             |                 23 69 2d 65 3e 65        --  # i - e > e
2672:208 | DONE dir | na 16 16 | 006939 | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
2672:208 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
2672:209 | DONE wsp | na 16 16 |        |             |
2672:210 | DONE lbl | na 16 16 | 006940 |             | nt_compile-only                      
2672:211 | DONE dir | na 16 16 | 006940 | (2 bytes)   |         .byte 0c, { PW + NC }        
2672:211 | DONE dir | na 16 16 |        |             |                 0c 09                    --   	
2672:212 | DONE dir | na 16 16 | 006942 | (6 bytes)   |         .word nt_literal, xt_compile-only, 00635d 
2672:212 | DONE dir | na 16 16 |        |             |                 31 69 55 63 5d 63        --  1 i U c ] c
2672:213 | DONE dir | na 16 16 | 006948 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
2672:213 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
2672:213 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
2672:214 | DONE wsp | na 16 16 |        |             |
2672:215 | DONE lbl | na 16 16 | 006954 |             | nt_immediate                         
2672:216 | DONE dir | na 16 16 | 006954 | (2 bytes)   |         .byte 9, { PW + NC }         
2672:216 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2672:217 | DONE dir | na 16 16 | 006956 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 006519 
2672:217 | DONE dir | na 16 16 |        |             |                 40 69 11 65 19 65        --  @ i . e . e
2672:218 | DONE dir | na 16 16 | 00695c | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
2672:218 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
2672:218 | DONE dir | na 16 16 |        |             |                 65                       --  e
2672:219 | DONE wsp | na 16 16 |        |             |
2672:220 | DONE lbl | na 16 16 | 006965 |             | nt_postpone                          
2672:221 | DONE dir | na 16 16 | 006965 | (2 bytes)   |         .byte 8, { IM + CO }         
2672:221 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
2672:222 | DONE dir | na 16 16 | 006967 | (6 bytes)   |         .word nt_immediate, xt_postpone, 006657 
2672:222 | DONE dir | na 16 16 |        |             |                 54 69 22 66 57 66        --  T i " f W f
2672:223 | DONE dir | na 16 16 | 00696d | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
2672:223 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
2672:223 | DONE dir | na 16 16 |        |             |                                          -- 
2672:224 | DONE wsp | na 16 16 |        |             |
2672:225 | DONE lbl | na 16 16 | 006975 |             | nt_rightbracket                      
2672:226 | DONE dir | na 16 16 | 006975 | (2 bytes)   |         .byte 1, { PW + NC }         
2672:226 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:227 | DONE dir | na 16 16 | 006977 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 0061d2 
2672:227 | DONE dir | na 16 16 |        |             |                 65 69 cd 61 d2 61        --  e i . a . a
2672:228 | DONE dir | na 16 16 | 00697d | (1 bytes)   |         .byte 5d                     
2672:228 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
2672:229 | DONE wsp | na 16 16 |        |             |
2672:230 | DONE lbl | na 16 16 | 00697e |             | nt_leftbracket                       
2672:231 | DONE dir | na 16 16 | 00697e | (2 bytes)   |         .byte 1, { IM + CO }         
2672:231 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2672:232 | DONE dir | na 16 16 | 006980 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 0061cc 
2672:232 | DONE dir | na 16 16 |        |             |                 75 69 ca 61 cc 61        --  u i . a . a
2672:233 | DONE dir | na 16 16 | 006986 | (1 bytes)   |         .byte 5b                     
2672:233 | DONE dir | na 16 16 |        |             |                 5b                       --  [
2672:234 | DONE wsp | na 16 16 |        |             |
2672:235 | DONE lbl | na 16 16 | 006987 |             | nt_compilecomma                      
2672:236 | DONE dir | na 16 16 | 006987 | (2 bytes)   |         .byte 08, { CO }             
2672:236 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
2672:237 | DONE dir | na 16 16 | 006989 | (6 bytes)   |         .word nt_leftbracket, xt_compilecomma, 006370 
2672:237 | DONE dir | na 16 16 |        |             |                 7e 69 5e 63 70 63        --  ~ i ^ c p c
2672:238 | DONE dir | na 16 16 | 00698f | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
2672:238 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
2672:238 | DONE dir | na 16 16 |        |             |                                          -- 
2672:239 | DONE wsp | na 16 16 |        |             |
2672:240 | DONE lbl | na 16 16 | 006997 |             | nt_semicolon                         
2672:241 | DONE dir | na 16 16 | 006997 | (2 bytes)   |         .byte 1, { CO + IM }         
2672:241 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2672:242 | DONE dir | na 16 16 | 006999 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 0061ad 
2672:242 | DONE dir | na 16 16 |        |             |                 87 69 95 61 ad 61        --  . i . a . a
2672:243 | DONE dir | na 16 16 | 00699f | (1 bytes)   |         .byte 3b                     
2672:243 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
2672:244 | DONE wsp | na 16 16 |        |             |
2672:245 | DONE lbl | na 16 16 | 0069a0 |             | nt_colon                             
2672:246 | DONE dir | na 16 16 | 0069a0 | (2 bytes)   |         .byte 1, { NC }              
2672:246 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
2672:247 | DONE dir | na 16 16 | 0069a2 | (6 bytes)   |         .word nt_semicolon, xt_colon, 006194 
2672:247 | DONE dir | na 16 16 |        |             |                 97 69 73 61 94 61        --  . i s a . a
2672:248 | DONE dir | na 16 16 | 0069a8 | (1 bytes)   |         .byte 3a                     
2672:248 | DONE dir | na 16 16 |        |             |                 3a                       --  :
2672:249 | DONE wsp | na 16 16 |        |             |
2672:250 | DONE lbl | na 16 16 | 0069a9 |             | nt_allot                             
2672:251 | DONE dir | na 16 16 | 0069a9 | (2 bytes)   |         .byte 5, { PW + NC }         
2672:251 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2672:252 | DONE dir | na 16 16 | 0069ab | (6 bytes)   |         .word nt_colon, xt_allot, 0062f0 
2672:252 | DONE dir | na 16 16 |        |             |                 a0 69 c8 62 f0 62        --  . i . b . b
2672:253 | DONE dir | na 16 16 | 0069b1 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
2672:253 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
2672:254 | DONE wsp | na 16 16 |        |             |
2672:255 | DONE lbl | na 16 16 | 0069b6 |             | nt_does                              
2672:256 | DONE dir | na 16 16 | 0069b6 | (2 bytes)   |         .byte 5, { IM + CO }         
2672:256 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
2672:257 | DONE dir | na 16 16 | 0069b8 | (6 bytes)   |         .word nt_allot, xt_does, 006435 
2672:257 | DONE dir | na 16 16 |        |             |                 a9 69 29 64 35 64        --  . i ) d 5 d
2672:258 | DONE dir | na 16 16 | 0069be | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
2672:258 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
2672:259 | DONE wsp | na 16 16 |        |             |
2672:260 | DONE lbl | na 16 16 | 0069c3 |             | nt_create                            
2672:261 | DONE dir | na 16 16 | 0069c3 | (2 bytes)   |         .byte 6, { PW + NC }         
2672:261 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2672:262 | DONE dir | na 16 16 | 0069c5 | (6 bytes)   |         .word nt_does, xt_create, 006413 
2672:262 | DONE dir | na 16 16 |        |             |                 b6 69 a1 63 13 64        --  . i . c . d
2672:263 | DONE dir | na 16 16 | 0069cb | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
2672:263 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
2672:264 | DONE wsp | na 16 16 |        |             |
2672:265 | DONE lbl | na 16 16 | 0069d1 |             | nt_name-string                       
2672:266 | DONE dir | na 16 16 | 0069d1 | (2 bytes)   |         .byte 0b, { PW + NC }        
2672:266 | DONE dir | na 16 16 |        |             |                 0b 09                    --   	
2672:267 | DONE dir | na 16 16 | 0069d3 | (6 bytes)   |         .word nt_create, xt_name-string, 00658b 
2672:267 | DONE dir | na 16 16 |        |             |                 c3 69 7b 65 8b 65        --  . i { e . e
2672:268 | DONE dir | na 16 16 | 0069d9 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
2672:268 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
2672:268 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
2672:269 | DONE wsp | na 16 16 |        |             |
2672:270 | DONE lbl | na 16 16 | 0069e4 |             | nt_2dup                              
2672:271 | DONE dir | na 16 16 | 0069e4 | (2 bytes)   |         .byte 4, { PW + NC }         
2672:271 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:272 | DONE dir | na 16 16 | 0069e6 | (6 bytes)   |         .word nt_name-string, xt_2dup, 00621e 
2672:272 | DONE dir | na 16 16 |        |             |                 d1 69 14 62 1e 62        --  . i . b . b
2672:273 | DONE dir | na 16 16 | 0069ec | (4 bytes)   |         .byte 32, 64, 75, 70         
2672:273 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
2672:274 | DONE wsp | na 16 16 |        |             |
2672:275 | DONE lbl | na 16 16 | 0069f0 |             | nt_abs                               
2672:276 | DONE dir | na 16 16 | 0069f0 | (2 bytes)   |         .byte 3, { PW + NC }         
2672:276 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2672:277 | DONE dir | na 16 16 | 0069f2 | (6 bytes)   |         .word nt_2dup, xt_abs, 006243 
2672:277 | DONE dir | na 16 16 |        |             |                 e4 69 3b 62 43 62        --  . i ; b C b
2672:278 | DONE dir | na 16 16 | 0069f8 | (3 bytes)   |         .byte 61, 62, 73             
2672:278 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
2672:279 | DONE wsp | na 16 16 |        |             |
2672:280 | DONE lbl | na 16 16 | 0069fb |             | nt_state                             
2672:281 | DONE dir | na 16 16 | 0069fb | (2 bytes)   |         .byte 5, { PW + NC }         
2672:281 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2672:282 | DONE dir | na 16 16 | 0069fd | (6 bytes)   |         .word nt_abs, xt_state, 006735 
2672:282 | DONE dir | na 16 16 |        |             |                 f0 69 2e 67 35 67        --  . i . g 5 g
2672:283 | DONE dir | na 16 16 | 006a03 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
2672:283 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
2672:284 | DONE wsp | na 16 16 |        |             |
2672:285 | DONE lbl | na 16 16 | 006a08 |             | nt_to-in                             
2672:286 | DONE dir | na 16 16 | 006a08 | (2 bytes)   |         .byte 3, { PW + NC }         
2672:286 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2672:287 | DONE dir | na 16 16 | 006a0a | (6 bytes)   |         .word nt_state, xt_to-in, 0060e6 
2672:287 | DONE dir | na 16 16 |        |             |                 fb 69 df 60 e6 60        --  . i . ` . `
2672:288 | DONE dir | na 16 16 | 006a10 | (3 bytes)   |         .byte 3e, 69, 6e             
2672:288 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
2672:289 | DONE wsp | na 16 16 |        |             |
2672:290 | DONE lbl | na 16 16 | 006a13 |             | nt_source                            
2672:291 | DONE dir | na 16 16 | 006a13 | (2 bytes)   |         .byte 6, { PW + NC }         
2672:291 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2672:292 | DONE dir | na 16 16 | 006a15 | (6 bytes)   |         .word nt_to-in, xt_source, 006712 
2672:292 | DONE dir | na 16 16 |        |             |                 08 6a 06 67 12 67        --  . j . g . g
2672:293 | DONE dir | na 16 16 | 006a1b | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
2672:293 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
2672:294 | DONE wsp | na 16 16 |        |             |
2672:295 | DONE lbl | na 16 16 | 006a21 |             | nt_depth                             
2672:296 | DONE dir | na 16 16 | 006a21 | (2 bytes)   |         .byte 5, { PW + NC }         
2672:296 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2672:297 | DONE dir | na 16 16 | 006a23 | (6 bytes)   |         .word nt_source, xt_depth, 006428 
2672:297 | DONE dir | na 16 16 |        |             |                 13 6a 1a 64 28 64        --  . j . d ( d
2672:298 | DONE dir | na 16 16 | 006a29 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
2672:298 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
2672:299 | DONE wsp | na 16 16 |        |             |
2672:300 | DONE lbl | na 16 16 | 006a2e |             | nt_constant                          
2672:301 | DONE dir | na 16 16 | 006a2e | (2 bytes)   |         .byte 8, { PW + NC }         
2672:301 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2672:302 | DONE dir | na 16 16 | 006a30 | (6 bytes)   |         .word nt_depth, xt_constant, 00638a 
2672:302 | DONE dir | na 16 16 |        |             |                 21 6a 71 63 8a 63        --  ! j q c . c
2672:303 | DONE dir | na 16 16 | 006a36 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
2672:303 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
2672:303 | DONE dir | na 16 16 |        |             |                                          -- 
2672:304 | DONE wsp | na 16 16 |        |             |
2672:305 | DONE lbl | na 16 16 | 006a3e |             | nt_variable                          
2672:306 | DONE dir | na 16 16 | 006a3e | (2 bytes)   |         .byte 8, { PW + NC }         
2672:306 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2672:307 | DONE dir | na 16 16 | 006a40 | (6 bytes)   |         .word nt_constant, xt_variable, 006786 
2672:307 | DONE dir | na 16 16 |        |             |                 2e 6a 7a 67 86 67        --  . j z g . g
2672:308 | DONE dir | na 16 16 | 006a46 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
2672:308 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
2672:308 | DONE dir | na 16 16 |        |             |                                          -- 
2672:309 | DONE wsp | na 16 16 |        |             |
2672:310 | DONE lbl | na 16 16 | 006a4e |             | nt_tick                              
2672:311 | DONE dir | na 16 16 | 006a4e | (2 bytes)   |         .byte 1, { PW + NC }         
2672:311 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:312 | DONE dir | na 16 16 | 006a50 | (6 bytes)   |         .word nt_variable, xt_tick, 00623a 
2672:312 | DONE dir | na 16 16 |        |             |                 3e 6a 1f 62 3a 62        --  > j . b : b
2672:313 | DONE dir | na 16 16 | 006a56 | (1 bytes)   |         .byte 27                     hex for "'"
2672:313 | DONE dir | na 16 16 |        |             |                 27                       --  '
2672:314 | DONE wsp | na 16 16 |        |             |
2672:315 | DONE lbl | na 16 16 | 006a57 |             | nt_min                               
2672:316 | DONE dir | na 16 16 | 006a57 | (2 bytes)   |         .byte 3, { PW + NC }         
2672:316 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2672:317 | DONE dir | na 16 16 | 006a59 | (6 bytes)   |         .word nt_tick, xt_min, 006571 
2672:317 | DONE dir | na 16 16 |        |             |                 4e 6a 5f 65 71 65        --  N j _ e q e
2672:318 | DONE dir | na 16 16 | 006a5f | (3 bytes)   |         .byte 6d, 69, 6e             
2672:318 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
2672:319 | DONE wsp | na 16 16 |        |             |
2672:320 | DONE lbl | na 16 16 | 006a62 |             | nt_max                               
2672:321 | DONE dir | na 16 16 | 006a62 | (2 bytes)   |         .byte 3, { PW + NC }         
2672:321 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2672:322 | DONE dir | na 16 16 | 006a64 | (6 bytes)   |         .word nt_min, xt_max, 00655e 
2672:322 | DONE dir | na 16 16 |        |             |                 57 6a 4c 65 5e 65        --  W j L e ^ e
2672:323 | DONE dir | na 16 16 | 006a6a | (3 bytes)   |         .byte 6d, 61, 78             
2672:323 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
2672:324 | DONE wsp | na 16 16 |        |             |
2672:325 | DONE lbl | na 16 16 | 006a6d |             | nt_negate                            
2672:326 | DONE dir | na 16 16 | 006a6d | (2 bytes)   |         .byte 6, { PW + NC }         
2672:326 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2672:327 | DONE dir | na 16 16 | 006a6f | (6 bytes)   |         .word nt_max, xt_negate, 006592 
2672:327 | DONE dir | na 16 16 |        |             |                 62 6a 8c 65 92 65        --  b j . e . e
2672:328 | DONE dir | na 16 16 | 006a75 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
2672:328 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
2672:329 | DONE wsp | na 16 16 |        |             |
2672:330 | DONE lbl | na 16 16 | 006a7b |             | nt_invert                            
2672:331 | DONE dir | na 16 16 | 006a7b | (2 bytes)   |         .byte 6, { PW + NC }         
2672:331 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2672:332 | DONE dir | na 16 16 | 006a7d | (6 bytes)   |         .word nt_negate, xt_invert, 00651f 
2672:332 | DONE dir | na 16 16 |        |             |                 6d 6a 1a 65 1f 65        --  m j . e . e
2672:333 | DONE dir | na 16 16 | 006a83 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
2672:333 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
2672:334 | DONE wsp | na 16 16 |        |             |
2672:335 | DONE lbl | na 16 16 | 006a89 |             | nt_char                              
2672:336 | DONE dir | na 16 16 | 006a89 | (2 bytes)   |         .byte 4, { PW + NC }         
2672:336 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:337 | DONE dir | na 16 16 | 006a8b | (6 bytes)   |         .word nt_invert, xt_char, 006354 
2672:337 | DONE dir | na 16 16 |        |             |                 7b 6a 3d 63 54 63        --  { j = c T c
2672:338 | DONE dir | na 16 16 | 006a91 | (4 bytes)   |         .byte 63, 68, 61, 72         
2672:338 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
2672:339 | DONE wsp | na 16 16 |        |             |
2672:340 | DONE lbl | na 16 16 | 006a95 |             | nt_xor                               
2672:341 | DONE dir | na 16 16 | 006a95 | (2 bytes)   |         .byte 3, { PW + NC }         
2672:341 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2672:342 | DONE dir | na 16 16 | 006a97 | (6 bytes)   |         .word nt_char, xt_xor, 0067b5 
2672:342 | DONE dir | na 16 16 |        |             |                 89 6a af 67 b5 67        --  . j . g . g
2672:343 | DONE dir | na 16 16 | 006a9d | (3 bytes)   |         .byte 78, 6f, 72             
2672:343 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
2672:344 | DONE wsp | na 16 16 |        |             |
2672:345 | DONE lbl | na 16 16 | 006aa0 |             | nt_or                                
2672:346 | DONE dir | na 16 16 | 006aa0 | (2 bytes)   |         .byte 2, { PW + NC }         
2672:346 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2672:347 | DONE dir | na 16 16 | 006aa2 | (6 bytes)   |         .word nt_xor, xt_or, 00659c  
2672:347 | DONE dir | na 16 16 |        |             |                 95 6a 96 65 9c 65        --  . j . e . e
2672:348 | DONE dir | na 16 16 | 006aa8 | (2 bytes)   |         .byte 6f, 72                 
2672:348 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
2672:349 | DONE wsp | na 16 16 |        |             |
2672:350 | DONE lbl | na 16 16 | 006aaa |             | nt_and                               
2672:351 | DONE dir | na 16 16 | 006aaa | (2 bytes)   |         .byte 3, { PW + NC }         
2672:351 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2672:352 | DONE dir | na 16 16 | 006aac | (6 bytes)   |         .word nt_or, xt_and, 0062f7  
2672:352 | DONE dir | na 16 16 |        |             |                 a0 6a f1 62 f7 62        --  . j . b . b
2672:353 | DONE dir | na 16 16 | 006ab2 | (3 bytes)   |         .byte 61, 6e, 64             
2672:353 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
2672:354 | DONE wsp | na 16 16 |        |             |
2672:355 | DONE lbl | na 16 16 | 006ab5 |             | nt_c-comma                           
2672:356 | DONE dir | na 16 16 | 006ab5 | (2 bytes)   |         .byte 2, { PW + NC }         
2672:356 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2672:357 | DONE dir | na 16 16 | 006ab7 | (6 bytes)   |         .word nt_and, xt_c-comma, 006320 
2672:357 | DONE dir | na 16 16 |        |             |                 aa 6a 13 63 20 63        --  . j . c   c
2672:358 | DONE dir | na 16 16 | 006abd | (2 bytes)   |         .byte 63, 2c                 
2672:358 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
2672:359 | DONE wsp | na 16 16 |        |             |
2672:360 | DONE lbl | na 16 16 | 006abf |             | nt_c-fetch                           
2672:361 | DONE dir | na 16 16 | 006abf | (2 bytes)   |         .byte 2, { PW + NC }         
2672:361 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2672:362 | DONE dir | na 16 16 | 006ac1 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 00632c 
2672:362 | DONE dir | na 16 16 |        |             |                 b5 6a 21 63 2c 63        --  . j ! c , c
2672:363 | DONE dir | na 16 16 | 006ac7 | (2 bytes)   |         .byte 63, 40                 
2672:363 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
2672:364 | DONE wsp | na 16 16 |        |             |
2672:365 | DONE lbl | na 16 16 | 006ac9 |             | nt_c-store                           
2672:366 | DONE dir | na 16 16 | 006ac9 | (2 bytes)   |         .byte 2, { PW + NC }         
2672:366 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2672:367 | DONE dir | na 16 16 | 006acb | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 00633c 
2672:367 | DONE dir | na 16 16 |        |             |                 bf 6a 2d 63 3c 63        --  . j - c < c
2672:368 | DONE dir | na 16 16 | 006ad1 | (2 bytes)   |         .byte 63, 21                 
2672:368 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
2672:369 | DONE wsp | na 16 16 |        |             |
2672:370 | DONE lbl | na 16 16 | 006ad3 |             | nt_two-star                          
2672:371 | DONE dir | na 16 16 | 006ad3 | (2 bytes)   |         .byte 2, { PW + NC }         
2672:371 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2672:372 | DONE dir | na 16 16 | 006ad5 | (6 bytes)   |         .word nt_c-store, xt_two-star, 00620c 
2672:372 | DONE dir | na 16 16 |        |             |                 c9 6a 09 62 0c 62        --  . j 	 b  b
2672:373 | DONE dir | na 16 16 | 006adb | (2 bytes)   |         .byte 32, 2a                 
2672:373 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
2672:374 | DONE wsp | na 16 16 |        |             |
2672:375 | DONE lbl | na 16 16 | 006add |             | nt_minus                             
2672:376 | DONE dir | na 16 16 | 006add | (2 bytes)   |         .byte 1, { PW + NC }         
2672:376 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:377 | DONE dir | na 16 16 | 006adf | (6 bytes)   |         .word nt_two-star, xt_minus, 0061ec 
2672:377 | DONE dir | na 16 16 |        |             |                 d3 6a e2 61 ec 61        --  . j . a . a
2672:378 | DONE dir | na 16 16 | 006ae5 | (1 bytes)   |         .byte 2d                     
2672:378 | DONE dir | na 16 16 |        |             |                 2d                       --  -
2672:379 | DONE wsp | na 16 16 |        |             |
2672:380 | DONE lbl | na 16 16 | 006ae6 |             | nt_plus                              
2672:381 | DONE dir | na 16 16 | 006ae6 | (2 bytes)   |         .byte 1, { PW + NC }         
2672:381 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:382 | DONE dir | na 16 16 | 006ae8 | (6 bytes)   |         .word nt_minus, xt_plus, 0061e1 
2672:382 | DONE dir | na 16 16 |        |             |                 dd 6a da 61 e1 61        --  . j . a . a
2672:383 | DONE dir | na 16 16 | 006aee | (1 bytes)   |         .byte 2b                     
2672:383 | DONE dir | na 16 16 |        |             |                 2b                       --  +
2672:384 | DONE wsp | na 16 16 |        |             |
2672:385 | DONE lbl | na 16 16 | 006aef |             | nt_one-minus                         
2672:386 | DONE dir | na 16 16 | 006aef | (2 bytes)   |         .byte 2, { PW + NC }         
2672:386 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2672:387 | DONE dir | na 16 16 | 006af1 | (6 bytes)   |         .word nt_plus, xt_one-minus, 0061fe 
2672:387 | DONE dir | na 16 16 |        |             |                 e6 6a fd 61 fe 61        --  . j . a . a
2672:388 | DONE dir | na 16 16 | 006af7 | (2 bytes)   |         .byte 31, 2d                 
2672:388 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
2672:389 | DONE wsp | na 16 16 |        |             |
2672:390 | DONE lbl | na 16 16 | 006af9 |             | nt_one-plus                          
2672:391 | DONE dir | na 16 16 | 006af9 | (2 bytes)   |         .byte 2, { PW + NC }         
2672:391 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2672:392 | DONE dir | na 16 16 | 006afb | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 006200 
2672:392 | DONE dir | na 16 16 |        |             |                 ef 6a ff 61 00 62        --  . j . a . b
2672:393 | DONE dir | na 16 16 | 006b01 | (2 bytes)   |         .byte 31, 2b                 
2672:393 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
2672:394 | DONE wsp | na 16 16 |        |             |
2672:395 | DONE lbl | na 16 16 | 006b03 |             | nt_false                             
2672:396 | DONE dir | na 16 16 | 006b03 | (2 bytes)   |         .byte 5, { PW + NC }         
2672:396 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2672:397 | DONE dir | na 16 16 | 006b05 | (6 bytes)   |         .word nt_one-plus, xt_zero, 0061f4 
2672:397 | DONE dir | na 16 16 |        |             |                 f9 6a ed 61 f4 61        --  . j . a . a
2672:398 | DONE dir | na 16 16 | 006b0b | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
2672:398 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
2672:399 | DONE wsp | na 16 16 |        |             |
2672:400 | DONE lbl | na 16 16 | 006b10 |             | nt_true                              
2672:401 | DONE dir | na 16 16 | 006b10 | (2 bytes)   |         .byte 4, { PW + NC }         
2672:401 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:402 | DONE dir | na 16 16 | 006b12 | (6 bytes)   |         .word nt_false, xt_true, 006743 
2672:402 | DONE dir | na 16 16 |        |             |                 03 6b 3c 67 43 67        --  . k < g C g
2672:403 | DONE dir | na 16 16 | 006b18 | (4 bytes)   |         .byte 74, 72, 75, 65         
2672:403 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
2672:404 | DONE wsp | na 16 16 |        |             |
2672:405 | DONE lbl | na 16 16 | 006b1c |             | nt_two                               
2672:406 | DONE dir | na 16 16 | 006b1c | (2 bytes)   |         .byte 1, { PW + NC }         
2672:406 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:407 | DONE dir | na 16 16 | 006b1e | (6 bytes)   |         .word nt_true, xt_two, 006208 
2672:407 | DONE dir | na 16 16 |        |             |                 10 6b 01 62 08 62        --  . k . b . b
2672:408 | DONE dir | na 16 16 | 006b24 | (1 bytes)   |         .byte 32                     
2672:408 | DONE dir | na 16 16 |        |             |                 32                       --  2
2672:409 | DONE wsp | na 16 16 |        |             |
2672:410 | DONE lbl | na 16 16 | 006b25 |             | nt_one                               
2672:411 | DONE dir | na 16 16 | 006b25 | (2 bytes)   |         .byte 1, { PW + NC }         
2672:411 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:412 | DONE dir | na 16 16 | 006b27 | (6 bytes)   |         .word nt_two, xt_one, 0061fc 
2672:412 | DONE dir | na 16 16 |        |             |                 1c 6b f5 61 fc 61        --  . k . a . a
2672:413 | DONE dir | na 16 16 | 006b2d | (1 bytes)   |         .byte 31                     
2672:413 | DONE dir | na 16 16 |        |             |                 31                       --  1
2672:414 | DONE wsp | na 16 16 |        |             |
2672:415 | DONE lbl | na 16 16 | 006b2e |             | nt_zero                              
2672:416 | DONE dir | na 16 16 | 006b2e | (2 bytes)   |         .byte 1, { PW + NC }         
2672:416 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:417 | DONE dir | na 16 16 | 006b30 | (6 bytes)   |         .word nt_one, xt_zero, 0061f4 
2672:417 | DONE dir | na 16 16 |        |             |                 25 6b ed 61 f4 61        --  % k . a . a
2672:418 | DONE dir | na 16 16 | 006b36 | (1 bytes)   |         .byte 30                     
2672:418 | DONE dir | na 16 16 |        |             |                 30                       --  0
2672:419 | DONE wsp | na 16 16 |        |             |
2672:420 | DONE lbl | na 16 16 | 006b37 |             | nt_find-name                         
2672:421 | DONE dir | na 16 16 | 006b37 | (2 bytes)   |         .byte 9, 0                   
2672:421 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
2672:422 | DONE dir | na 16 16 | 006b39 | (6 bytes)   |         .word nt_zero, xt_find-name, 006510 
2672:422 | DONE dir | na 16 16 |        |             |                 2e 6b ba 64 10 65        --  . k . d . e
2672:423 | DONE dir | na 16 16 | 006b3f | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
2672:423 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
2672:423 | DONE dir | na 16 16 |        |             |                 65                       --  e
2672:424 | DONE wsp | na 16 16 |        |             |
2672:425 | DONE lbl | na 16 16 | 006b48 |             | nt_refill                            
2672:426 | DONE dir | na 16 16 | 006b48 | (2 bytes)   |         .byte 6, { PW }              TODO check flags
2672:426 | DONE dir | na 16 16 |        |             |                 06 08                    --  . .
2672:427 | DONE dir | na 16 16 | 006b4a | (6 bytes)   |         .word nt_find-name, xt_refill, 006689 
2672:427 | DONE dir | na 16 16 |        |             |                 37 6b 57 66 89 66        --  7 k W f . f
2672:428 | DONE dir | na 16 16 | 006b50 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
2672:428 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
2672:429 | DONE wsp | na 16 16 |        |             |
2672:430 | DONE lbl | na 16 16 | 006b56 |             | nt_parse-name                        
2672:431 | DONE dir | na 16 16 | 006b56 | (2 bytes)   |         .byte &10, 0                 
2672:431 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
2672:432 | DONE dir | na 16 16 | 006b58 | (6 bytes)   |         .word nt_refill, xt_parse-name, 006621 
2672:432 | DONE dir | na 16 16 |        |             |                 48 6b bd 65 21 66        --  H k . e ! f
2672:433 | DONE dir | na 16 16 | 006b5e | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
2672:433 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
2672:433 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
2672:434 | DONE wsp | na 16 16 |        |             |
2672:435 | DONE lbl | na 16 16 | 006b68 |             | nt_source-id                         
2672:436 | DONE dir | na 16 16 | 006b68 | (2 bytes)   |         .byte 9, { PW + NC }         
2672:436 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2672:437 | DONE dir | na 16 16 | 006b6a | (6 bytes)   |         .word nt_parse-name, xt_source-id, 006719 
2672:437 | DONE dir | na 16 16 |        |             |                 56 6b 13 67 19 67        --  V k . g . g
2672:438 | DONE dir | na 16 16 | 006b70 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
2672:438 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
2672:438 | DONE dir | na 16 16 |        |             |                 64                       --  d
2672:439 | DONE wsp | na 16 16 |        |             |
2672:440 | DONE lbl | na 16 16 | 006b79 |             | nt_comma                             
2672:441 | DONE dir | na 16 16 | 006b79 | (2 bytes)   |         .byte 1, { PW + NC }         
2672:441 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:442 | DONE dir | na 16 16 | 006b7b | (6 bytes)   |         .word nt_source-id, xt_comma, 006172 
2672:442 | DONE dir | na 16 16 |        |             |                 68 6b 67 61 72 61        --  h k g a r a
2672:443 | DONE dir | na 16 16 | 006b81 | (1 bytes)   |         .byte 2c                     
2672:443 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
2672:444 | DONE wsp | na 16 16 |        |             |
2672:445 | DONE lbl | na 16 16 | 006b82 |             | nt_accept                            
2672:446 | DONE dir | na 16 16 | 006b82 | (2 bytes)   |         .byte 6, 00                  TODO check flags
2672:446 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
2672:447 | DONE dir | na 16 16 | 006b84 | (6 bytes)   |         .word nt_comma, xt_accept, 0062c7 
2672:447 | DONE dir | na 16 16 |        |             |                 79 6b 44 62 c7 62        --  y k D b . b
2672:448 | DONE dir | na 16 16 | 006b8a | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
2672:448 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
2672:449 | DONE wsp | na 16 16 |        |             |
2672:450 | DONE lbl | na 16 16 | 006b90 |             | nt_tuck                              
2672:451 | DONE dir | na 16 16 | 006b90 | (2 bytes)   |         .byte 4, { PW + NC }         
2672:451 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:452 | DONE dir | na 16 16 | 006b92 | (6 bytes)   |         .word nt_accept, xt_tuck, 00674c 
2672:452 | DONE dir | na 16 16 |        |             |                 82 6b 44 67 4c 67        --  . k D g L g
2672:453 | DONE dir | na 16 16 | 006b98 | (4 bytes)   |         .byte 74, 75, 63, 6b         
2672:453 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
2672:454 | DONE wsp | na 16 16 |        |             |
2672:455 | DONE lbl | na 16 16 | 006b9c |             | nt_nip                               
2672:456 | DONE dir | na 16 16 | 006b9c | (2 bytes)   |         .byte 3, { PW + NC }         
2672:456 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2672:457 | DONE dir | na 16 16 | 006b9e | (6 bytes)   |         .word nt_tuck, xt_nip, 006595 
2672:457 | DONE dir | na 16 16 |        |             |                 90 6b 93 65 95 65        --  . k . e . e
2672:458 | DONE dir | na 16 16 | 006ba4 | (3 bytes)   |         .byte 6e, 69, 70             
2672:458 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
2672:459 | DONE wsp | na 16 16 |        |             |
2672:460 | DONE lbl | na 16 16 | 006ba7 |             | nt_rot                               
2672:461 | DONE dir | na 16 16 | 006ba7 | (2 bytes)   |         .byte 3, { PW + NC }         
2672:461 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2672:462 | DONE dir | na 16 16 | 006ba9 | (6 bytes)   |         .word nt_nip, xt_rot, 006692 
2672:462 | DONE dir | na 16 16 |        |             |                 9c 6b 8a 66 92 66        --  . k . f . f
2672:463 | DONE dir | na 16 16 | 006baf | (3 bytes)   |         .byte 72, 6f, 74             
2672:463 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
2672:464 | DONE wsp | na 16 16 |        |             |
2672:465 | DONE lbl | na 16 16 | 006bb2 |             | nt_execute                           
2672:466 | DONE dir | na 16 16 | 006bb2 | (2 bytes)   |         .byte 7, { PW + NC }         
2672:466 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2672:467 | DONE dir | na 16 16 | 006bb4 | (6 bytes)   |         .word nt_rot, xt_execute, 0064b9 
2672:467 | DONE dir | na 16 16 |        |             |                 a7 6b af 64 b9 64        --  . k . d . d
2672:468 | DONE dir | na 16 16 | 006bba | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
2672:468 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
2672:469 | DONE wsp | na 16 16 |        |             |
2672:470 | DONE lbl | na 16 16 | 006bc1 |             | nt_here                              
2672:471 | DONE dir | na 16 16 | 006bc1 | (2 bytes)   |         .byte 4, { PW + NC }         
2672:471 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:472 | DONE dir | na 16 16 | 006bc3 | (6 bytes)   |         .word nt_execute, xt_here, 006526 
2672:472 | DONE dir | na 16 16 |        |             |                 b2 6b 20 65 26 65        --  . k   e & e
2672:473 | DONE dir | na 16 16 | 006bc9 | (4 bytes)   |         .byte 68, 65, 72, 65         
2672:473 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
2672:474 | DONE wsp | na 16 16 |        |             |
2672:475 | DONE lbl | na 16 16 | 006bcd |             | nt_2drop                             
2672:476 | DONE dir | na 16 16 | 006bcd | (2 bytes)   |         .byte 5, { PW + NC }         
2672:476 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2672:477 | DONE dir | na 16 16 | 006bcf | (6 bytes)   |         .word nt_here, xt_2drop, 006213 
2672:477 | DONE dir | na 16 16 |        |             |                 c1 6b 0d 62 13 62        --  . k  b . b
2672:478 | DONE dir | na 16 16 | 006bd5 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
2672:478 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
2672:479 | DONE wsp | na 16 16 |        |             |
2672:480 | DONE lbl | na 16 16 | 006bda |             | nt_over                              
2672:481 | DONE dir | na 16 16 | 006bda | (2 bytes)   |         .byte 4, { PW + NC }         
2672:481 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:482 | DONE dir | na 16 16 | 006bdc | (6 bytes)   |         .word nt_2drop, xt_over, 0065a3 
2672:482 | DONE dir | na 16 16 |        |             |                 cd 6b 9d 65 a3 65        --  . k . e . e
2672:483 | DONE dir | na 16 16 | 006be2 | (4 bytes)   |         .byte 6f, 76, 65, 72         
2672:483 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
2672:484 | DONE wsp | na 16 16 |        |             |
2672:485 | DONE lbl | na 16 16 | 006be6 |             | nt_fetch                             
2672:486 | DONE dir | na 16 16 | 006be6 | (2 bytes)   |         .byte 1, { PW + NC }         
2672:486 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:487 | DONE dir | na 16 16 | 006be8 | (6 bytes)   |         .word nt_over, xt_fetch, 0061c3 
2672:487 | DONE dir | na 16 16 |        |             |                 da 6b bf 61 c3 61        --  . k . a . a
2672:488 | DONE dir | na 16 16 | 006bee | (1 bytes)   |         .byte 40                     
2672:488 | DONE dir | na 16 16 |        |             |                 40                       --  @
2672:489 | DONE wsp | na 16 16 |        |             |
2672:490 | DONE lbl | na 16 16 | 006bef |             | nt_store                             
2672:491 | DONE dir | na 16 16 | 006bef | (2 bytes)   |         .byte 1, { PW + NC }         
2672:491 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2672:492 | DONE dir | na 16 16 | 006bf1 | (6 bytes)   |         .word nt_fetch, xt_store, 0061be 
2672:492 | DONE dir | na 16 16 |        |             |                 e6 6b b5 61 be 61        --  . k . a . a
2672:493 | DONE dir | na 16 16 | 006bf7 | (1 bytes)   |         .byte 21                     
2672:493 | DONE dir | na 16 16 |        |             |                 21                       --  !
2672:494 | DONE wsp | na 16 16 |        |             |
2672:495 | DONE lbl | na 16 16 | 006bf8 |             | nt_swap                              
2672:496 | DONE dir | na 16 16 | 006bf8 | (2 bytes)   |         .byte 4, { PW + NC }         
2672:496 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:497 | DONE dir | na 16 16 | 006bfa | (6 bytes)   |         .word nt_store, xt_swap, 00673b 
2672:497 | DONE dir | na 16 16 |        |             |                 ef 6b 36 67 3b 67        --  . k 6 g ; g
2672:498 | DONE dir | na 16 16 | 006c00 | (4 bytes)   |         .byte 73, 77, 61, 70         
2672:498 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
2672:499 | DONE wsp | na 16 16 |        |             |
2672:500 | DONE lbl | na 16 16 | 006c04 |             | nt_dup                               
2672:501 | DONE dir | na 16 16 | 006c04 | (2 bytes)   |         .byte 3, { PW + NC }         
2672:501 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2672:502 | DONE dir | na 16 16 | 006c06 | (6 bytes)   |         .word nt_swap, xt_dup, 00647c 
2672:502 | DONE dir | na 16 16 |        |             |                 f8 6b 78 64 7c 64        --  . k x d | d
2672:503 | DONE dir | na 16 16 | 006c0c | (3 bytes)   |         .byte 64, 75, 70             
2672:503 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
2672:504 | DONE wsp | na 16 16 |        |             |
2672:505 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
2672:506 | DONE lbl | na 16 16 | 006c0f |             | nt_drop                              
2672:507 | DONE dir | na 16 16 | 006c0f | (2 bytes)   |         .byte 4, { PW + NC }         
2672:507 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2672:508 | DONE dir | na 16 16 | 006c11 | (6 bytes)   |         .word nt_dup, xt_drop, 006450 
2672:508 | DONE dir | na 16 16 |        |             |                 04 6c 4c 64 50 64        --  . l L d P d
2672:509 | DONE dir | na 16 16 | 006c17 | (4 bytes)   |         .byte 64, 72, 6f, 70         
2672:509 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
2672:510 | DONE wsp | na 16 16 |        |             |
2672:511 | DONE cmt | na 16 16 |        |             | ; END
2673:000 | DONE wsp | na 16 16 |        |             |
2674:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2675:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
2676:000 | DONE wsp | na 16 16 |        |             |
2677:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2678:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
2679:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
2680:000 | DONE cmt | na 16 16 |        |             | ; the stack
2681:000 | DONE lbl | na 16 16 | 006c1b |             | doconst                              
2682:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2683:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2684:000 | DONE ins | na 16 16 | 006c1b | ca          |                 dex                  make room on Data Stack
2685:000 | DONE ins | na 16 16 | 006c1c | ca          |                 dex                  
2686:000 | DONE ins | na 16 16 | 006c1d | 94 00       |                 sty.dx 00            
2687:000 | DONE wsp | na 16 16 |        |             |
2688:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
2689:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
2690:000 | DONE ins | na 16 16 | 006c1f | 68          |                 pla                  get the return address
2691:000 | DONE ins | na 16 16 | 006c20 | 85 16       |                 sta.d 000216         
2692:000 | DONE wsp | na 16 16 |        |             |
2693:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
2694:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
2695:000 | DONE ins | na 16 16 | 006c22 | a0 01 00    |                 ldy.# 0001           
2696:000 | DONE ins | na 16 16 | 006c25 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2697:000 | DONE ins | na 16 16 | 006c27 | a8          |                 tay                  
2698:000 | DONE wsp | na 16 16 |        |             |
2699:000 | DONE ins | na 16 16 | 006c28 | 60          |                 rts                  takes us to original caller
2700:000 | DONE wsp | na 16 16 |        |             |
2701:000 | DONE wsp | na 16 16 |        |             |
2702:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2703:000 | DONE cmt | na 16 16 |        |             | ; DODOES
2704:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
2705:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
2706:000 | DONE lbl | na 16 16 | 006c29 |             | dodoes                               
2707:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
2708:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
2709:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
2710:000 | DONE cmt | na 16 16 |        |             |                 ; works
2711:000 | DONE ins | na 16 16 | 006c29 | 68          |                 pla                  
2712:000 | DONE ins | na 16 16 | 006c2a | 1a          |                 inc.a                
2713:000 | DONE ins | na 16 16 | 006c2b | 85 1a       |                 sta.d 00021a         
2714:000 | DONE wsp | na 16 16 |        |             |
2715:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
2716:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
2717:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
2718:000 | DONE ins | na 16 16 | 006c2d | ca          |                 dex                  
2719:000 | DONE ins | na 16 16 | 006c2e | ca          |                 dex                  
2720:000 | DONE ins | na 16 16 | 006c2f | 94 00       |                 sty.dx 00            
2721:000 | DONE wsp | na 16 16 |        |             |
2722:000 | DONE ins | na 16 16 | 006c31 | 7a          |                 ply                  
2723:000 | DONE ins | na 16 16 | 006c32 | c8          |                 iny                  
2724:000 | DONE wsp | na 16 16 |        |             |
2725:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
2726:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
2727:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
2728:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
2729:000 | DONE ins | na 16 16 | 006c33 | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
2730:000 | DONE wsp | na 16 16 |        |             |
2731:000 | DONE wsp | na 16 16 |        |             |
2732:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2733:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
2734:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
2735:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
2736:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
2737:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
2738:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
2739:000 | DONE lbl | na 16 16 | 006c36 |             | dovar                                
2740:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2741:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2742:000 | DONE ins | na 16 16 | 006c36 | ca          |                 dex                  make room on Data Stack
2743:000 | DONE ins | na 16 16 | 006c37 | ca          |                 dex                  
2744:000 | DONE ins | na 16 16 | 006c38 | 94 00       |                 sty.dx 00            
2745:000 | DONE wsp | na 16 16 |        |             |
2746:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
2747:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
2748:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
2749:000 | DONE ins | na 16 16 | 006c3a | 7a          |                 ply                  value is now TOS
2750:000 | DONE ins | na 16 16 | 006c3b | c8          |                 iny                  add one because of 65816's address handling
2751:000 | DONE wsp | na 16 16 |        |             |
2752:000 | DONE ins | na 16 16 | 006c3c | 60          |                 rts                  takes us to original caller
2753:000 | DONE wsp | na 16 16 |        |             |
2754:000 | DONE wsp | na 16 16 |        |             |
2755:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2756:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
2757:000 | DONE wsp | na 16 16 |        |             |
2758:000 | DONE wsp | na 16 16 |        |             |
2759:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2760:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (AKA INTERPRET)
2761:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
2762:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
2763:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
2764:000 | DONE lbl | na 16 16 | 006c3d |             | compex                               
2765:000 | DONE lbl | na 16 16 | 006c3d |             | compex_loop                          
2766:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2767:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2768:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
2769:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
2770:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
2771:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
2772:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
2773:000 | DONE ins | na 16 16 | 006c3d | 20 bd 65    |                 jsr 0065bd           ( "string" -- addr u )
2774:000 | DONE wsp | na 16 16 |        |             |
2775:000 | DONE cmt | na 16 16 |        |             |                 ; TODO decide if we want to make a copy of the string here so
2776:000 | DONE cmt | na 16 16 |        |             |                 ; that we can provide a better error message
2777:000 | DONE wsp | na 16 16 |        |             |
2778:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
2779:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
2780:000 | DONE ins | na 16 16 | 006c40 | 98          |                 tya                  force flag check
2781:000 | DONE ins | na 16 16 | 006c41 | f0 3f       |                 beq 006c82           
2782:000 | DONE wsp | na 16 16 |        |             |
2783:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
2784:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
2785:000 | DONE ins | na 16 16 | 006c43 | 20 e8 6c    |                 jsr 006ce8           
2786:000 | DONE wsp | na 16 16 |        |             |
2787:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know
2788:000 | DONE ins | na 16 16 | 006c46 | 20 ba 64    |                 jsr 0064ba           ( addr u -- nt | 0 )
2789:000 | DONE wsp | na 16 16 |        |             |
2790:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
2791:000 | DONE ins | na 16 16 | 006c49 | 98          |                 tya                  
2792:000 | DONE ins | na 16 16 | 006c4a | d0 06       |                 bne 006c52           
2793:000 | DONE wsp | na 16 16 |        |             |
2794:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
2795:000 | DONE wsp | na 16 16 |        |             |
2796:000 | DONE cmt | na 16 16 |        |             |                 ; Number conversion has failed, which means the user screwed up,
2797:000 | DONE cmt | na 16 16 |        |             |                 ; so complain and abort
2798:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print the offending string first
2799:000 | DONE ins | na 16 16 | 006c4c | a9 48 6f    |                 lda.# 006f48         "Unknown word"
2800:000 | DONE ins | na 16 16 | 006c4f | 4c af 6c    |                 jmp 006caf           
2801:000 | DONE wsp | na 16 16 |        |             |
2802:000 | DONE lbl | na 16 16 | 006c52 |             | compex_got_name_token                
2803:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
2804:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down. This is a quicker
2805:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
2806:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
2807:000 | DONE ins | na 16 16 | 006c52 | 84 16       |                 sty.d 000216         
2808:000 | DONE ins | na 16 16 | 006c54 | c8          |                 iny                  
2809:000 | DONE ins | na 16 16 | 006c55 | c8          |                 iny                  
2810:000 | DONE ins | na 16 16 | 006c56 | c8          |                 iny                  
2811:000 | DONE ins | na 16 16 | 006c57 | c8          |                 iny                  
2812:000 | DONE ins | na 16 16 | 006c58 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2813:000 | DONE ins | na 16 16 | 006c5b | a8          |                 tay                  xt is TOS
2814:000 | DONE wsp | na 16 16 |        |             |
2815:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
2816:000 | DONE ins | na 16 16 | 006c5c | a5 14       |                 lda.d 000214         
2817:000 | DONE ins | na 16 16 | 006c5e | d0 14       |                 bne 006c74           
2818:000 | DONE wsp | na 16 16 |        |             |
2819:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
2820:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
2821:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
2822:000 | DONE ins | na 16 16 | 006c60 | b2 16       |                 lda.di 000216        
2823:000 | DONE ins | na 16 16 | 006c62 | eb          |                 xba                  flags are MSB
2824:000 | DONE ins | na 16 16 | 006c63 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
2825:000 | DONE ins | na 16 16 | 006c66 | f0 06       |                 beq 006c6e           
2826:000 | DONE wsp | na 16 16 |        |             |
2827:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
2828:000 | DONE ins | na 16 16 | 006c68 | a9 3a 6e    |                 lda.# 006e3a         
2829:000 | DONE ins | na 16 16 | 006c6b | 4c af 6c    |                 jmp 006caf           
2830:000 | DONE wsp | na 16 16 |        |             |
2831:000 | DONE lbl | na 16 16 | 006c6e |             | compex_interpret                     
2832:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
2833:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
2834:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
2835:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
2836:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
2837:000 | DONE ins | na 16 16 | 006c6e | 20 af 64    |                 jsr 0064af           
2838:000 | DONE wsp | na 16 16 |        |             |
2839:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
2840:000 | DONE ins | na 16 16 | 006c71 | 4c 3d 6c    |                 jmp 006c3d           
2841:000 | DONE wsp | na 16 16 |        |             |
2842:000 | DONE lbl | na 16 16 | 006c74 |             | compex_compile                       
2843:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
2844:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
2845:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
2846:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
2847:000 | DONE ins | na 16 16 | 006c74 | b2 16       |                 lda.di 000216        
2848:000 | DONE ins | na 16 16 | 006c76 | eb          |                 xba                  flags are MSB
2849:000 | DONE ins | na 16 16 | 006c77 | 29 02 00    |                 and.# IM             Mask all but IM bit
2850:000 | DONE ins | na 16 16 | 006c7a | d0 f2       |                 bne 006c6e           IMMEDIATE word, execute right now
2851:000 | DONE wsp | na 16 16 |        |             |
2852:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
2853:000 | DONE ins | na 16 16 | 006c7c | 20 5e 63    |                 jsr 00635e           
2854:000 | DONE wsp | na 16 16 |        |             |
2855:000 | DONE ins | na 16 16 | 006c7f | 4c 3d 6c    |                 jmp 006c3d           
2856:000 | DONE wsp | na 16 16 |        |             |
2857:000 | DONE lbl | na 16 16 | 006c82 |             | compex_line_done                     
2858:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
2859:000 | DONE ins | na 16 16 | 006c82 | b4 02       |                 ldy.dx 02            
2860:000 | DONE ins | na 16 16 | 006c84 | e8          |                 inx                  
2861:000 | DONE ins | na 16 16 | 006c85 | e8          |                 inx                  
2862:000 | DONE ins | na 16 16 | 006c86 | e8          |                 inx                  
2863:000 | DONE ins | na 16 16 | 006c87 | e8          |                 inx                  
2864:000 | DONE wsp | na 16 16 |        |             |
2865:000 | DONE ins | na 16 16 | 006c88 | 60          |                 rts                  
2866:000 | DONE wsp | na 16 16 |        |             |
2867:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2868:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
2869:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
2870:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
2871:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
2872:000 | DONE cmt | na 16 16 |        |             | ;
2873:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
2874:000 | DONE cmt | na 16 16 |        |             | ;
2875:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
2876:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
2877:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos
2878:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
2879:000 | DONE wsp | na 16 16 |        |             |
2880:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
2881:000 | DONE lbl | na 16 16 | 006c89 |             | cmpl_word                            
2882:000 | DONE ins | na 16 16 | 006c89 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
2883:000 | DONE ins | na 16 16 | 006c8c | 80 08       |                 bra 006c96           
2884:000 | DONE lbl | na 16 16 | 006c8e |             | cmpl_subroutine                      
2885:000 | DONE ins | na 16 16 | 006c8e | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
2886:000 | DONE ins | na 16 16 | 006c91 | 80 03       |                 bra 006c96           
2887:000 | DONE lbl | na 16 16 | 006c93 |             | cmpl_jump                            
2888:000 | DONE ins | na 16 16 | 006c93 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
2889:000 | DONE lbl | na 16 16 | 006c96 |             | cmpl_common                          
2890:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
2891:000 | DONE ins | na 16 16 | 006c96 | 84 06       |                 sty.d 000206         
2892:000 | DONE wsp | na 16 16 |        |             |
2893:000 | DONE ins | na 16 16 | 006c98 | a8          |                 tay                  force flag check
2894:000 | DONE ins | na 16 16 | 006c99 | f0 08       |                 beq 006ca3           came in through cmpl_word, just compile body
2895:000 | DONE wsp | na 16 16 |        |             |
2896:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
2897:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
2898:000 | DONE ins | na 16 16 | 006c9b | e2 20       |                 sep 20               
2898:001 | DONE ctl | na  8 16 |        |             |         .!a8
2899:000 | DONE ins | na  8 16 | 006c9d | 92 00       |                 sta.di 000200        STA (CP)
2900:000 | DONE ins | na  8 16 | 006c9f | c2 20       |                 rep 20               
2900:001 | DONE ctl | na 16 16 |        |             |         .!a16
2901:000 | DONE ins | na 16 16 | 006ca1 | e6 00       |                 inc.d 000200         fall through to cmpl_body
2902:000 | DONE lbl | na 16 16 | 006ca3 |             | cmpl_body                            
2903:000 | DONE ins | na 16 16 | 006ca3 | 7a          |                 ply                  the return address we'll need later
2904:000 | DONE wsp | na 16 16 |        |             |
2905:000 | DONE ins | na 16 16 | 006ca4 | 68          |                 pla                  next value on stack is the word to compile
2906:000 | DONE ins | na 16 16 | 006ca5 | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
2907:000 | DONE ins | na 16 16 | 006ca7 | e6 00       |                 inc.d 000200         
2908:000 | DONE ins | na 16 16 | 006ca9 | e6 00       |                 inc.d 000200         
2909:000 | DONE wsp | na 16 16 |        |             |
2910:000 | DONE ins | na 16 16 | 006cab | 5a          |                 phy                  make sure we can get back home
2911:000 | DONE wsp | na 16 16 |        |             |
2912:000 | DONE ins | na 16 16 | 006cac | a4 06       |                 ldy.d 000206         restore Data Stack
2913:000 | DONE wsp | na 16 16 |        |             |
2914:000 | DONE ins | na 16 16 | 006cae | 60          |                 rts                  
2915:000 | DONE wsp | na 16 16 |        |             |
2916:000 | DONE wsp | na 16 16 |        |             |
2917:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2918:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
2919:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
2920:000 | DONE lbl | na 16 16 | 006caf |             | error                                
2921:000 | DONE ins | na 16 16 | 006caf | 20 b5 6c    |                 jsr 006cb5           
2922:000 | DONE ins | na 16 16 | 006cb2 | 4c 97 60    |                 jmp 006097           
2923:000 | DONE wsp | na 16 16 |        |             |
2924:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2925:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
2926:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
2927:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
2928:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
2929:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
2930:000 | DONE lbl | na 16 16 | 006cb5 |             | print_string                         
2931:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2932:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2933:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
2934:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
2935:000 | DONE ins | na 16 16 | 006cb5 | da          |                 phx                  
2936:000 | DONE ins | na 16 16 | 006cb6 | aa          |                 tax                  x16 contains address of string
2937:000 | DONE lbl | na 16 16 | 006cb7 |             | @                                    
2938:000 | DONE ins | na 16 16 | 006cb7 | e2 20       |                 sep 20               
2938:001 | DONE ctl | na  8 16 |        |             |         .!a8
2939:000 | DONE ins | na  8 16 | 006cb9 | bd 00 00    |                 lda.x 0000           LDA $0000,X
2940:000 | DONE ins | na  8 16 | 006cbc | f0 06       |                 beq 006cc4           
2941:000 | DONE ins | na  8 16 | 006cbe | 20 36 60    |                 jsr 006036           
2942:000 | DONE ins | na  8 16 | 006cc1 | e8          |                 inx                  
2943:000 | DONE ins | na  8 16 | 006cc2 | 80 f3       |                 bra 006cb7           
2944:000 | DONE wsp | na  8 16 |        |             |
2945:000 | DONE lbl | na  8 16 | 006cc4 |             | print_string_done                    
2946:000 | DONE ins | na  8 16 | 006cc4 | a9 0a       |                 lda.# AscLF          should be CR on some systems
2947:000 | DONE ins | na  8 16 | 006cc6 | 20 36 60    |                 jsr 006036           
2948:000 | DONE ins | na  8 16 | 006cc9 | c2 20       |                 rep 20               
2948:001 | DONE ctl | na 16 16 |        |             |         .!a16
2949:000 | DONE ins | na 16 16 | 006ccb | fa          |                 plx                  
2950:000 | DONE ins | na 16 16 | 006ccc | 60          |                 rts                  
2951:000 | DONE wsp | na 16 16 |        |             |
2952:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2953:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
2954:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
2955:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
2956:000 | DONE lbl | na 16 16 | 006ccd |             | byte_to_ascii                        
2957:000 | DONE ins | na 16 16 | 006ccd | 48          |                 pha                  
2958:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
2959:000 | DONE ins | na 16 16 | 006cce | 4a          |                 lsr.a                
2960:000 | DONE ins | na 16 16 | 006ccf | 4a          |                 lsr.a                
2961:000 | DONE ins | na 16 16 | 006cd0 | 4a          |                 lsr.a                
2962:000 | DONE ins | na 16 16 | 006cd1 | 4a          |                 lsr.a                
2963:000 | DONE ins | na 16 16 | 006cd2 | 20 d6 6c    |                 jsr 006cd6           
2964:000 | DONE wsp | na 16 16 |        |             |
2965:000 | DONE ins | na 16 16 | 006cd5 | 68          |                 pla                  
2966:000 | DONE wsp | na 16 16 |        |             |
2967:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
2968:000 | DONE wsp | na 16 16 |        |             |
2969:000 | DONE wsp | na 16 16 |        |             |
2970:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2971:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
2972:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
2973:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
2974:000 | DONE lbl | na 16 16 | 006cd6 |             | nibble_to_ascii                      
2975:000 | DONE ins | na 16 16 | 006cd6 | 29 0f 00    |                 and.# 000f           
2976:000 | DONE ins | na 16 16 | 006cd9 | 09 30 00    |                 ora.# 30             
2977:000 | DONE ins | na 16 16 | 006cdc | c9 3a 00    |                 cmp.# 003a           '9' + 1
2978:000 | DONE ins | na 16 16 | 006cdf | 90 03       |                 bcc 006ce4           
2979:000 | DONE ins | na 16 16 | 006ce1 | 69 06 00    |                 adc.# 0006           
2980:000 | DONE lbl | na 16 16 | 006ce4 |             | @                                    
2981:000 | DONE ins | na 16 16 | 006ce4 | 20 36 60    |                 jsr 006036           
2982:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2983:000 | DONE ins | na 16 16 | 006ce7 | 60          |                 rts                  
2984:000 | DONE wsp | na 16 16 |        |             |
2985:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2986:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
2987:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
2988:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
2989:000 | DONE lbl | na 16 16 | 006ce8 |             | string_to_lowercase                  
2990:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
2991:000 | DONE ins | na 16 16 | 006ce8 | 60          |                 rts                  
2992:000 | DONE wsp | na 16 16 |        |             |
2993:000 | DONE wsp | na 16 16 |        |             |
2994:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2995:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
2996:000 | DONE wsp | na 16 16 |        |             |
2997:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
2998:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
2999:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
3000:000 | DONE lbl | na 16 16 | 006ce9 |             | hi-start                             
3001:000 | DONE cmt | na 16 16 |        |             |         ; High level definitions
3002:000 | DONE dir | na 16 16 | 006ce9 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) ( "parens"
3002:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
3002:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
3002:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
3002:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
3002:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
3003:000 | DONE dir | na 16 16 | 006d0e | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) .( "dotparens"
3003:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
3003:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
3003:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
3003:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
3003:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
3004:000 | DONE wsp | na 16 16 |        |             |
3005:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings
3006:000 | DONE dir | na 16 16 | 006d33 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
3006:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
3006:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
3006:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
3006:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
3006:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
3007:000 | DONE dir | na 16 16 | 006d56 | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
3007:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
3007:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
3007:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
3007:000 | DONE dir | na 16 16 |        |             |                 31 37 2e 20 46 65 62 20  --  1 7 .   F e b  
3007:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
3008:000 | DONE dir | na 16 16 | 006d7b | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
3008:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
3008:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
3008:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
3008:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
3008:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
3008:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
3008:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
3009:000 | DONE dir | na 16 16 | 006dae | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
3009:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
3009:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
3009:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
3009:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
3009:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
3009:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
3009:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
3010:000 | DONE dir | na 16 16 | 006de2 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
3010:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
3010:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
3010:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
3010:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
3011:000 | DONE lbl | na 16 16 | 006dfe |             | hi-end                               
3012:000 | DONE wsp | na 16 16 |        |             |
3013:000 | DONE wsp | na 16 16 |        |             |
3014:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3015:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
3016:000 | DONE wsp | na 16 16 |        |             |
3017:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
3017:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
3017:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
3017:003 | DONE cmt | na 16 16 |        |             | ; This version:  15. Feb 2017
3017:004 | DONE wsp | na 16 16 |        |             |
3017:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
3017:006 | DONE wsp | na 16 16 |        |             |
3017:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3017:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
3017:009 | DONE wsp | na 16 16 |        |             |
3017:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
3017:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
3017:012 | DONE cmt | na 16 16 |        |             | ; character
3017:013 | DONE wsp | na 16 16 |        |             |
3017:014 | DONE lbl | na 16 16 | 006dfe |             | s_ok                                 
3017:015 | DONE dir | na 16 16 | 006dfe | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
3017:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
3017:016 | DONE lbl | na 16 16 | 006e02 |             | s_compiled                           
3017:017 | DONE dir | na 16 16 | 006e02 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
3017:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
3017:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
3017:018 | DONE wsp | na 16 16 |        |             |
3017:019 | DONE wsp | na 16 16 |        |             |
3017:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3017:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
3017:022 | DONE wsp | na 16 16 |        |             |
3017:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
3017:024 | DONE wsp | na 16 16 |        |             |
3017:025 | DONE lbl | na 16 16 | 006e0c |             | es_allot                             
3017:026 | DONE dir | na 16 16 | 006e0c | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
3017:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
3017:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
3017:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
3017:027 | DONE lbl | na 16 16 | 006e20 |             | es_channel                           
3017:028 | DONE dir | na 16 16 | 006e20 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
3017:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
3017:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
3017:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
3017:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
3017:029 | DONE lbl | na 16 16 | 006e3a |             | es_componly                          
3017:030 | DONE dir | na 16 16 | 006e3a | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
3017:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
3017:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
3017:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3017:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
3017:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
3017:031 | DONE lbl | na 16 16 | 006e5b |             | es_defer                             
3017:032 | DONE dir | na 16 16 | 006e5b | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
3017:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
3017:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
3017:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
3017:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
3017:033 | DONE lbl | na 16 16 | 006e78 |             | es_divzero                           
3017:034 | DONE dir | na 16 16 | 006e78 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
3017:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
3017:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
3017:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
3017:035 | DONE lbl | na 16 16 | 006e89 |             | es_error                             
3017:036 | DONE dir | na 16 16 | 006e89 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
3017:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
3017:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
3017:037 | DONE lbl | na 16 16 | 006e95 |             | es_intonly                           
3017:038 | DONE dir | na 16 16 | 006e95 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
3017:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
3017:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
3017:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
3017:039 | DONE lbl | na 16 16 | 006eab |             | es_noname                            
3017:040 | DONE dir | na 16 16 | 006eab | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
3017:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
3017:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
3017:040 | DONE dir | na 16 16 |        |             |                                          -- 
3017:041 | DONE lbl | na 16 16 | 006ebb |             | es_radix                             
3017:042 | DONE dir | na 16 16 | 006ebb | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
3017:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
3017:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
3017:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
3017:043 | DONE lbl | na 16 16 | 006ed2 |             | es_refill1                           
3017:044 | DONE dir | na 16 16 | 006ed2 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
3017:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
3017:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
3017:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
3017:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
3017:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
3017:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
3017:045 | DONE lbl | na 16 16 | 006f00 |             | es_refill2                           
3017:046 | DONE dir | na 16 16 | 006f00 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
3017:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
3017:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
3017:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
3017:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
3017:046 | DONE dir | na 16 16 |        |             |                                          -- 
3017:047 | DONE lbl | na 16 16 | 006f20 |             | es_state                             
3017:048 | DONE dir | na 16 16 | 006f20 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
3017:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
3017:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
3017:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
3017:048 | DONE dir | na 16 16 |        |             |                                          -- 
3017:049 | DONE lbl | na 16 16 | 006f38 |             | es_underflow                         
3017:050 | DONE dir | na 16 16 | 006f38 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
3017:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
3017:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
3017:050 | DONE dir | na 16 16 |        |             |                                          -- 
3017:051 | DONE lbl | na 16 16 | 006f48 |             | es_syntax                            
3017:052 | DONE dir | na 16 16 | 006f48 | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
3017:052 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
3017:052 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
3017:052 | DONE dir | na 16 16 |        |             |                                          -- 
3017:053 | DONE wsp | na 16 16 |        |             |
3017:054 | DONE wsp | na 16 16 |        |             |
3017:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3017:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
3017:057 | DONE wsp | na 16 16 |        |             |
3017:058 | DONE lbl | na 16 16 | 006f58 |             | vt100_page                           
3017:059 | DONE dir | na 16 16 | 006f58 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
3017:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
3017:060 | DONE lbl | na 16 16 | 006f5d |             | vt100_home                           
3017:061 | DONE dir | na 16 16 | 006f5d | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
3017:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
3017:062 | DONE wsp | na 16 16 |        |             |
3017:063 | DONE wsp | na 16 16 |        |             |
3017:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3017:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
3017:066 | DONE wsp | na 16 16 |        |             |
3017:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
3017:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
3017:069 | DONE wsp | na 16 16 |        |             |
3017:070 | DONE lbl | na 16 16 | 006f61 |             | tests_prev_cmd                       
3017:071 | DONE dir | na 16 16 | 006f61 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
3017:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
3017:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
3017:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
3017:072 | DONE lbl | na 16 16 | 006f74 |             | tests_next_cmd                       
3017:073 | DONE dir | na 16 16 | 006f74 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
3017:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
3017:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
3017:074 | DONE wsp | na 16 16 |        |             |
3017:075 | DONE wsp | na 16 16 |        |             |
3017:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3017:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
3017:078 | DONE wsp | na 16 16 |        |             |
3017:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
3017:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
3017:081 | DONE wsp | na 16 16 |        |             |
3017:082 | DONE lbl | na 16 16 | 006f83 |             | alphastr                             
3017:083 | DONE dir | na 16 16 | 006f83 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
3017:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
3017:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
3017:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
3017:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
3017:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
3018:000 | DONE wsp | na 16 16 |        |             |
3019:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3020:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
3021:000 | DONE wsp | na 16 16 |        |             |
3022:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
3023:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
3024:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
3025:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
3026:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
3027:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
3028:000 | DONE wsp | na 16 16 |        |             |
3029:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
3030:000 | DONE cmt | na 16 16 |        |             |                 ; tya
3031:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
3032:000 | DONE cmt | na 16 16 |        |             |                 ; xba
3033:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
3034:000 | DONE cmt | na 16 16 |        |             |                 ; tya
3035:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
3036:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
3037:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
3038:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
3039:000 | DONE wsp | na 16 16 |        |             |
3040:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
3041:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
3042:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
3043:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
3044:000 | DONE wsp | na 16 16 |        |             |
3045:000 | DONE wsp | na 16 16 |        |             |
3046:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3047:000 | DONE cmt | na 16 16 |        |             | ; END
3048:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 0062aa
- accept_eol                  : 0062a2
- accept_loop                 : 006257
- accept_nonzero              : 00624a
- allot_done                  : 0062ea
- allot_error                 : 0062d9
- allot_minus                 : 0062df
- allot_real_gone             : 0062ec
- alphastr                    : 006f83
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006ccd
- char_got_char               : 006349
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 006ca3
- cmpl_common                 : 006c96
- cmpl_jump                   : 006c93
- cmpl_subroutine             : 006c8e
- cmpl_word                   : 006c89
- co                          : 000004
- compex                      : 006c3d
- compex_compile              : 006c74
- compex_got_name_token       : 006c52
- compex_interpret            : 006c6e
- compex_line_done            : 006c82
- compex_loop                 : 006c3d
- compile_as_code             : 00635e
- compile_as_jump             : 00635e
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 0063ac
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 006c1b
- dodoes                      : 006c29
- does_rt                     : 006436
- dots_done                   : 006163
- dots_loop                   : 006149
- dots_not_empty              : 006143
- dovar                       : 006c36
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 006459
- dump_done                   : 00646e
- dump_line_loop              : 006453
- error                       : 006caf
- es_allot                    : 006e0c
- es_channel                  : 006e20
- es_componly                 : 006e3a
- es_defer                    : 006e5b
- es_divzero                  : 006e78
- es_error                    : 006e89
- es_intonly                  : 006e95
- es_noname                   : 006eab
- es_radix                    : 006ebb
- es_refill1                  : 006ed2
- es_refill2                  : 006f00
- es_state                    : 006f20
- es_syntax                   : 006f48
- es_underflow                : 006f38
- execute_ip                  : 0064ac
- find-name_all_chars         : 0064e8
- find-name_char_nomatcnt_8   : 0064e4
- find-name_chars             : 0064d9
- find-name_done              : 00650e
- find-name_failure_16        : 00650b
- find-name_loop              : 0064c4
- find-name_next_entry        : 0064cd
- find-name_success           : 006505
- get_chr                     : 006047
- get_chr_wait                : 00604c
- have_chr?                   : 006056
- hi-end                      : 006dfe
- hi-start                    : 006ce9
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- literal_rt                  : 00653f
- max_drop                    : 00655a
- max_nip                     : 00655c
- max_no_ov                   : 006558
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 00656d
- min_nip                     : 00656f
- min_no_ov                   : 00656b
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 006cd6
- nt_2drop                    : 006bcd
- nt_2dup                     : 0069e4
- nt_abort                    : 006833
- nt_abs                      : 0069f0
- nt_accept                   : 006b82
- nt_allot                    : 0069a9
- nt_and                      : 006aaa
- nt_base                     : 0068cb
- nt_bell                     : 0067e6
- nt_bl                       : 00687c
- nt_bracketchar              : 006923
- nt_brackettick              : 006918
- nt_bye                      : 0067b6
- nt_c-comma                  : 006ab5
- nt_c-fetch                  : 006abf
- nt_c-store                  : 006ac9
- nt_cells                    : 0068e7
- nt_char                     : 006a89
- nt_cold                     : 0067c1
- nt_colon                    : 0069a0
- nt_comma                    : 006b79
- nt_compile-only             : 006940
- nt_compilecomma             : 006987
- nt_constant                 : 006a2e
- nt_count                    : 006826
- nt_cr                       : 006872
- nt_create                   : 0069c3
- nt_decimal                  : 0067f2
- nt_depth                    : 006a21
- nt_does                     : 0069b6
- nt_dot                      : 0068b7
- nt_dotquote                 : 0068f4
- nt_dots                     : 0068a1
- nt_drop                     : 006c0f
- nt_dump                     : 0067da
- nt_dup                      : 006c04
- nt_evaluate                 : 0068d7
- nt_execute                  : 006bb2
- nt_false                    : 006b03
- nt_fetch                    : 006be6
- nt_find-name                : 006b37
- nt_here                     : 006bc1
- nt_hex                      : 006801
- nt_immediate                : 006954
- nt_invert                   : 006a7b
- nt_leftbracket              : 00697e
- nt_literal                  : 006931
- nt_max                      : 006a62
- nt_min                      : 006a57
- nt_minus                    : 006add
- nt_name-int                 : 006862
- nt_name-string              : 0069d1
- nt_negate                   : 006a6d
- nt_nip                      : 006b9c
- nt_one                      : 006b25
- nt_one-minus                : 006aef
- nt_one-plus                 : 006af9
- nt_or                       : 006aa0
- nt_over                     : 006bda
- nt_pad                      : 0068c0
- nt_page                     : 00681a
- nt_parse                    : 006840
- nt_parse-name               : 006b56
- nt_plus                     : 006ae6
- nt_postpone                 : 006965
- nt_question                 : 006859
- nt_quit                     : 00684d
- nt_refill                   : 006b48
- nt_rightbracket             : 006975
- nt_rot                      : 006ba7
- nt_semicolon                : 006997
- nt_sliteral                 : 006908
- nt_source                   : 006a13
- nt_source-id                : 006b68
- nt_space                    : 006894
- nt_spaces                   : 006886
- nt_squote                   : 0068fe
- nt_state                    : 0069fb
- nt_store                    : 006bef
- nt_swap                     : 006bf8
- nt_tick                     : 006a4e
- nt_to-in                    : 006a08
- nt_true                     : 006b10
- nt_tuck                     : 006b90
- nt_two                      : 006b1c
- nt_two-star                 : 006ad3
- nt_type                     : 0068ab
- nt_unused                   : 00680c
- nt_variable                 : 006a3e
- nt_words                    : 0067cd
- nt_xor                      : 006a95
- nt_zero                     : 006b2e
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 0065cf
- parse-name_found            : 0065e3
- parse-name_loop             : 0065c2
- parse_found_delimiter       : 00660f
- parse_loop                  : 006602
- parse_reached_eol           : 006613
- physicalram                 : 007fff
- piblen                      : 000210
- pp_got_nt                   : 006638
- pp_got_word                 : 00662d
- pp_not_immediate            : 006648
- print_string                : 006cb5
- print_string_done           : 006cc4
- put_chr                     : 006036
- put_chr_wait                : 00603c
- pw                          : 000008
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 006683
- refill_src_not_kbd          : 00667a
- reset_hardware              : 006000
- s_compiled                  : 006e02
- s_ok                        : 006dfe
- sl_loop                     : 0066c5
- sliteral_rt                 : 0066f0
- spaces_done                 : 006729
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- string_to_lowercase         : 006ce8
- tests_next_cmd              : 006f74
- tests_prev_cmd              : 006f61
- tick_have_nt                : 006237
- tick_have_word              : 00622b
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 006767
- type_loop                   : 00675b
- vt100_home                  : 006f5d
- vt100_page                  : 006f58
- words_loop                  : 006791
- workword                    : 00021e
- xt_2drop                    : 00620d
- xt_2dup                     : 006214
- xt_abort                    : 006097
- xt_abs                      : 00623b
- xt_accept                   : 006244
- xt_allot                    : 0062c8
- xt_and                      : 0062f1
- xt_base                     : 0062f8
- xt_bell                     : 006300
- xt_bl                       : 006307
- xt_bracketchar              : 0061d3
- xt_brackettick              : 0061c4
- xt_bye                      : 00630f
- xt_c-comma                  : 006313
- xt_c-fetch                  : 006321
- xt_c-store                  : 00632d
- xt_char                     : 00633d
- xt_cold                     : 006063
- xt_colon                    : 006173
- xt_comma                    : 006167
- xt_compile-only             : 006355
- xt_compilecomma             : 00635e
- xt_constant                 : 006371
- xt_count                    : 00638b
- xt_cr                       : 00639a
- xt_create                   : 0063a1
- xt_decimal                  : 006414
- xt_depth                    : 00641a
- xt_does                     : 006429
- xt_dot                      : 0060e7
- xt_dotparen                 : 0060fd
- xt_dotquote                 : 00610b
- xt_dots                     : 00611f
- xt_drop                     : 00644c
- xt_dump                     : 006451
- xt_dup                      : 006478
- xt_evaluate                 : 00647d
- xt_execute                  : 0064af
- xt_fetch                    : 0061bf
- xt_find-name                : 0064ba
- xt_here                     : 006520
- xt_hex                      : 006527
- xt_immediate                : 006511
- xt_invert                   : 00651a
- xt_leftbracket              : 0061ca
- xt_literal                  : 00652d
- xt_max                      : 00654c
- xt_min                      : 00655f
- xt_minus                    : 0061e2
- xt_name-int                 : 006572
- xt_name-string              : 00657b
- xt_negate                   : 00658c
- xt_nip                      : 006593
- xt_one                      : 0061f5
- xt_one-minus                : 0061fd
- xt_one-plus                 : 0061ff
- xt_or                       : 006596
- xt_over                     : 00659d
- xt_pad                      : 0065a4
- xt_page                     : 0065b0
- xt_parse                    : 0065ef
- xt_parse-name               : 0065bd
- xt_plus                     : 0061da
- xt_postpone                 : 006622
- xt_question                 : 0061ae
- xt_quit                     : 00609f
- xt_refill                   : 006657
- xt_rightbracket             : 0061cd
- xt_rot                      : 00668a
- xt_semicolon                : 006195
- xt_sliteral                 : 0066a5
- xt_source                   : 006706
- xt_source-id                : 006713
- xt_space                    : 00671a
- xt_spaces                   : 006721
- xt_squote                   : 006693
- xt_state                    : 00672e
- xt_store                    : 0061b5
- xt_swap                     : 006736
- xt_tick                     : 00621f
- xt_to-in                    : 0060df
- xt_true                     : 00673c
- xt_tuck                     : 006744
- xt_two                      : 006201
- xt_two-star                 : 006209
- xt_type                     : 00674d
- xt_unused                   : 00676e
- xt_variable                 : 00677a
- xt_words                    : 006787
- xt_xor                      : 0067af
- xt_zero                     : 0061ed
- z_2drop                     : 006213
- z_2dup                      : 00621e
- z_abort                     : 0060de
- z_abs                       : 006243
- z_accept                    : 0062c7
- z_allot                     : 0062f0
- z_and                       : 0062f7
- z_base                      : 0062ff
- z_bell                      : 006306
- z_bl                        : 00630e
- z_bracketchar               : 0061d9
- z_brackettick               : 0061ca
- z_bye                       : 006312
- z_c-comma                   : 006320
- z_c-fetch                   : 00632c
- z_c-store                   : 00633c
- z_char                      : 006354
- z_cold                      : 0060de
- z_colon                     : 006194
- z_comma                     : 006172
- z_compile-only              : 00635d
- z_compilecomma              : 006370
- z_constant                  : 00638a
- z_count                     : 006399
- z_cr                        : 0063a0
- z_create                    : 006413
- z_decimal                   : 006419
- z_depth                     : 006428
- z_does                      : 006435
- z_dot                       : 0060fc
- z_dotparen                  : 00610a
- z_dotquote                  : 00611f
- z_dots                      : 006166
- z_drop                      : 006450
- z_dump                      : 006477
- z_dup                       : 00647c
- z_evaluate                  : 0064ab
- z_execute                   : 0064b9
- z_fetch                     : 0061c3
- z_find-name                 : 006510
- z_here                      : 006526
- z_hex                       : 00652c
- z_immediate                 : 006519
- z_invert                    : 00651f
- z_leftbracket               : 0061cc
- z_literal                   : 00653e
- z_max                       : 00655e
- z_min                       : 006571
- z_minus                     : 0061ec
- z_name-int                  : 00657a
- z_name-string               : 00658b
- z_negate                    : 006592
- z_nip                       : 006595
- z_one                       : 0061fc
- z_one-minus                 : 0061fe
- z_one-plus                  : 006200
- z_or                        : 00659c
- z_over                      : 0065a3
- z_pad                       : 0065af
- z_page                      : 0065bc
- z_parse                     : 006621
- z_parse-name                : 006621
- z_plus                      : 0061e1
- z_postpone                  : 006657
- z_question                  : 0061b4
- z_quit                      : 0060de
- z_refill                    : 006689
- z_rightbracket              : 0061d2
- z_rot                       : 006692
- z_semicolon                 : 0061ad
- z_sliteral                  : 0066ef
- z_source                    : 006712
- z_source-id                 : 006719
- z_space                     : 006720
- z_spaces                    : 00672d
- z_squote                    : 0066a4
- z_state                     : 006735
- z_store                     : 0061be
- z_swap                      : 00673b
- z_tick                      : 00623a
- z_to-in                     : 0060e6
- z_true                      : 006743
- z_tuck                      : 00674c
- z_two                       : 006208
- z_two-star                  : 00620c
- z_type                      : 00676d
- z_unused                    : 006779
- z_variable                  : 006786
- z_words                     : 0067ae
- z_xor                       : 0067b5
- z_zero                      : 0061f4
