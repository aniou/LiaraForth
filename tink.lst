A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Fri Mar  3 01:16:35 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.22010 seconds
Code origin: 006000
Bytes of machine code: 7463

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 02. Mar 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  11:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  12:000 | DONE lbl | em  8  8 | 006000 |             | code0                                
  13:000 | DONE wsp | em  8  8 |        |             |
  14:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  15:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  16:000 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  17:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  17:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  17:003 | DONE cmt | em  8  8 |        |             | ; This version: 02. Mar 2017
  17:004 | DONE wsp | em  8  8 |        |             |
  17:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  17:006 | DONE wsp | em  8  8 |        |             |
  17:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  17:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  17:009 | DONE wsp | em  8  8 |        |             |
  17:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  17:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  17:012 | DONE wsp | em  8  8 |        |             |
  17:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  17:015 | DONE wsp | em  8  8 |        |             |
  17:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  17:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  17:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  17:019 | DONE cmt | em  8  8 |        |             |         ; TODO expose this to the user
  17:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  17:021 | DONE wsp | em  8  8 |        |             |
  17:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP
  17:024 | DONE cmt | em  8  8 |        |             | ; We reuse the memory that the Mensch Monitor had been using
  17:025 | DONE wsp | em  8  8 |        |             |
  17:026 | DONE cmt | em  8  8 |        |             |         ; TODO add any extra RAM in other banks
  17:027 | DONE cmt | em  8  8 |        |             |         ; TODO add stuff for multitasking
  17:028 | DONE wsp | em  8  8 |        |             |
  17:029 | DONE cmt | em  8  8 |        |             |         ;  00:0000  +-------------------+  ram-start, dpage, user0
  17:030 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:031 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Data Stack    |  <-- dsp
  17:032 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:033 | DONE cmt | em  8  8 |        |             |         ;  00:0100  +-------------------+  dsp0, stack
  17:034 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:035 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Return Stack  |  <-- rsp
  17:036 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:037 | DONE cmt | em  8  8 |        |             |         ;  00:0200  +-------------------+  rsp0, buffer, buffer0
  17:038 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:039 | DONE cmt | em  8  8 |        |             |         ;           |  v  Input Buffer  |
  17:040 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:041 | DONE cmt | em  8  8 |        |             |         ;  00:0300  +-------------------+  cp0
  17:042 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:043 | DONE cmt | em  8  8 |        |             |         ;           |  v  Dictionary    |  <-- cp
  17:044 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:045 | DONE cmt | em  8  8 |        |             |         ;   (...)   ~~~~~~~~~~~~~~~~~~~~~
  17:046 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:047 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:048 | DONE cmt | em  8  8 |        |             |         ;  00:7fff  +-------------------+  ram-end
  17:049 | DONE wsp | em  8  8 |        |             |
  17:050 | DONE cmt | em  8  8 |        |             |         ; Hard physical addresses
  17:051 | DONE dir | em  8  8 |        |             |         .equ ram-start  0000         start of installed RAM
  17:052 | DONE dir | em  8  8 |        |             |         .equ ram-end { 8000 - 1 }    end of 32k installed RAM
  17:053 | DONE wsp | em  8  8 |        |             |
  17:054 | DONE cmt | em  8  8 |        |             |         ; Soft physical addresses
  17:055 | DONE dir | em  8  8 |        |             |         .equ dpage      ram-start    direct page:       0000 - 00ff
  17:056 | DONE dir | em  8  8 |        |             |         .equ stack { 000000 + 0100 } return stack area: 0100 - 01ff
  17:057 | DONE dir | em  8  8 |        |             |         .equ buffer { stack + 0100 } buffer areas:      0200 - 02ff
  17:058 | DONE wsp | em  8  8 |        |             |
  17:059 | DONE cmt | em  8  8 |        |             |         ; Defined locations
  17:060 | DONE dir | em  8  8 |        |             |         .equ user0      dpage        user and system variables
  17:061 | DONE dir | em  8  8 |        |             |         .equ dsp0 { stack - 1 }      initial Data Stack Pointer:   00ff
  17:062 | DONE dir | em  8  8 |        |             |         .equ stack0 { buffer - 1 }   initial Return Stack Pointer: 01ff
  17:063 | DONE wsp | em  8  8 |        |             |
  17:064 | DONE cmt | em  8  8 |        |             |         ; Buffers
  17:065 | DONE dir | em  8  8 |        |             |         .equ bsize      0080         size of input/output buffers
  17:066 | DONE dir | em  8  8 |        |             |         .equ output { buffer + 000080 } output buffer 0280 (UNUSED)
  17:067 | DONE wsp | em  8  8 |        |             |
  17:068 | DONE cmt | em  8  8 |        |             |         ; Dictionary RAM
  17:069 | DONE dir | em  8  8 |        |             |         .equ cp0 { output + 000080 } Dictionary starts after last buffer
  17:070 | DONE dir | em  8  8 |        |             |         .equ cp-end { code0 - 1 }    Last RAM byte available
  17:071 | DONE wsp | em  8  8 |        |             |
  17:072 | DONE cmt | em  8  8 |        |             |         ; Other locations
  17:073 | DONE dir | em  8  8 |        |             |         .equ padoffset  0ff          offset from CP to PAD (holds number strings)
  17:074 | DONE wsp | em  8  8 |        |             |
  17:075 | DONE wsp | em  8  8 |        |             |
  17:076 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:077 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  17:078 | DONE wsp | em  8  8 |        |             |
  17:079 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  17:080 | DONE cmt | em  8  8 |        |             | ; TODO rewrite with USER variables
  17:081 | DONE dir | em  8  8 |        |             |         .equ cp { 000000 + &00 }     Compiler Pointer, 2 bytes
  17:082 | DONE dir | em  8  8 |        |             |         .equ dp { 000000 + &02 }     Dictionary Pointer, 2 bytes
  17:083 | DONE dir | em  8  8 |        |             |         .equ workword { 000000 + &04 } Currently compiliing word
  17:084 | DONE dir | em  8  8 |        |             |         .equ insrc { 000000 + &06 }  Input Source for SOURCE-ID
  17:085 | DONE dir | em  8  8 |        |             |         .equ cib { 000000 + &08 }    Address of current input buffer
  17:086 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000000 + &10 } Length of current input buffer
  17:087 | DONE dir | em  8  8 |        |             |         .equ toin { 000000 + &12 }   Pointer to CIB (>IN in Forth)
  17:088 | DONE dir | em  8  8 |        |             |         .equ state { 000000 + &14 }  STATE: -1 compile, 0 interpret
  17:089 | DONE dir | em  8  8 |        |             |         .equ base { 000000 + &16 }   Radix for number conversion
  17:090 | DONE dir | em  8  8 |        |             |         .equ tohold { 000000 + &18 } Pointer for formatted output
  17:091 | DONE dir | em  8  8 |        |             |         .equ tmpbranch { 000000 + &20 } temp storage for 0BRANCH, BRANCH only
  17:092 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000000 + &22 }   Temporary storage
  17:093 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000000 + &24 }   Temporary storage
  17:094 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000000 + &26 }   Temporary storage
  17:095 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000000 + &28 } Temporary DSP (X) storage, 2 bytes
  17:096 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000000 + &30 } Temporary TOS (Y) storage, 2 bytes
  17:097 | DONE dir | em  8  8 |        |             |         .equ scratch { 000000 + &32 } 8 byte scratchpad (see UM/MOD)
  17:098 | DONE wsp | em  8  8 |        |             |
  17:099 | DONE wsp | em  8  8 |        |             |
  17:100 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:101 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  17:102 | DONE wsp | em  8  8 |        |             |
  17:103 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  17:104 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  17:105 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  17:106 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  17:107 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  17:108 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  17:109 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  17:110 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  17:111 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  17:112 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  17:113 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  17:114 | DONE wsp | em  8  8 |        |             |
  17:115 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  17:116 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  17:117 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  17:118 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  17:119 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE wsp | em  8  8 |        |             |
  19:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  20:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  21:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  22:000 | DONE wsp | em  8  8 |        |             |
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 02. Mar 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting.
  23:101 | DONE cmt | em  8  8 |        |             | ; Note this does not reset the MPU, which is done by the main Forth code
  23:102 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:103 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:104 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:105 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:106 | DONE ctl | na  8  8 |        |             |         .!native
  23:107 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:108 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:109 | DONE ins | na  8 16 | 006005 | e2 20       |                 sep 20               
  23:110 | DONE ctl | na  8 16 |        |             |         .!a8
  23:111 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:112 | DONE ins | na  8 16 | 006007 | a2 ff 01    |                 ldx.# 01ff           
  23:113 | DONE ins | na  8 16 | 00600a | 9a          |                 txs                  
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600b | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:116 | DONE wsp | na  8 16 |        |             |
  23:117 | DONE ins | na  8 16 | 00600e | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:118 | DONE ins | na  8 16 | 006010 | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:119 | DONE ins | na  8 16 | 006013 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:120 | DONE wsp | na  8 16 |        |             |
  23:121 | DONE ins | na  8 16 | 006016 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:122 | DONE ins | na  8 16 | 006018 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:123 | DONE ins | na  8 16 | 00601b | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:124 | DONE ins | na  8 16 | 00601d | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:125 | DONE ins | na  8 16 | 006020 | a9 00       |                 lda.# .msb 00000b    
  23:126 | DONE ins | na  8 16 | 006022 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:127 | DONE ins | na  8 16 | 006025 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:128 | DONE ins | na  8 16 | 006027 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:129 | DONE wsp | na  8 16 |        |             |
  23:130 | DONE ins | na  8 16 | 00602a | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:131 | DONE ins | na  8 16 | 00602c | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:132 | DONE wsp | na  8 16 |        |             |
  23:133 | DONE ins | na  8 16 | 00602f | c2 20       |                 rep 20               
  23:134 | DONE ctl | na 16 16 |        |             |         .!a16
  23:135 | DONE ins | na 16 16 | 006031 | 4c 64 60    |                 jmp 006064           we return with A as 8 bits
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE wsp | na 16 16 |        |             |
  23:138 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:139 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:140 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:141 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:142 | DONE lbl | na 16 16 | 006034 |             | put_chr                              
  23:143 | DONE ins | na 16 16 | 006034 | 08          |                 php                  save register sizes
  23:144 | DONE ins | na 16 16 | 006035 | e2 20       |                 sep 20               
  23:145 | DONE ctl | na  8 16 |        |             |         .!a8
  23:146 | DONE ins | na  8 16 | 006037 | 48          |                 pha                  
  23:147 | DONE ins | na  8 16 | 006038 | a9 02       |                 lda.# 02             (1<<1)
  23:148 | DONE wsp | na  8 16 |        |             |
  23:149 | DONE lbl | na  8 16 | 00603a |             | put_chr_wait                         
  23:150 | DONE ins | na  8 16 | 00603a | 2c 48 df    |                 bit 00df48           timer finished?
  23:151 | DONE ins | na  8 16 | 00603d | f0 fb       |                 beq 00603a           
  23:152 | DONE wsp | na  8 16 |        |             |
  23:153 | DONE ins | na  8 16 | 00603f | 68          |                 pla                  
  23:154 | DONE ins | na  8 16 | 006040 | 8d 71 df    |                 sta 00df71           transmit char
  23:155 | DONE ins | na  8 16 | 006043 | 28          |                 plp                  
  23:156 | DONE wsp | na  8 16 |        |             |
  23:157 | DONE ins | na  8 16 | 006044 | 60          |                 rts                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:160 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:161 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:162 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:163 | DONE lbl | na  8 16 | 006045 |             | get_chr                              
  23:164 | DONE ins | na  8 16 | 006045 | 08          |                 php                  Save register sizes
  23:165 | DONE ins | na  8 16 | 006046 | e2 20       |                 sep 20               
  23:166 | DONE ctl | na  8 16 |        |             |         .!a8
  23:167 | DONE ins | na  8 16 | 006048 | a9 01       |                 lda.# 01             (1<<0)
  23:168 | DONE wsp | na  8 16 |        |             |
  23:169 | DONE lbl | na  8 16 | 00604a |             | get_chr_wait                         
  23:170 | DONE ins | na  8 16 | 00604a | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:171 | DONE ins | na  8 16 | 00604d | f0 fb       |                 beq 00604a           No, keep waiting
  23:172 | DONE ins | na  8 16 | 00604f | ad 71 df    |                 lda 00df71           Yes, read it
  23:173 | DONE ins | na  8 16 | 006052 | 28          |                 plp                  
  23:174 | DONE wsp | na  8 16 |        |             |
  23:175 | DONE ins | na  8 16 | 006053 | 60          |                 rts                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:178 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:179 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:180 | DONE cmt | na  8 16 |        |             | ; some.
  23:181 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:182 | DONE wsp | na  8 16 |        |             |
  23:183 | DONE lbl | na  8 16 | 006054 |             | have_chr?                            
  23:184 | DONE ins | na  8 16 | 006054 | 48          |                 pha                  save caller's A
  23:185 | DONE ins | na  8 16 | 006055 | 08          |                 php                  
  23:186 | DONE ins | na  8 16 | 006056 | e2 20       |                 sep 20               
  23:187 | DONE ctl | na  8 16 |        |             |         .!a8
  23:188 | DONE ins | na  8 16 | 006058 | ad 48 df    |                 lda 00df48           read the status register
  23:189 | DONE ins | na  8 16 | 00605b | 28          |                 plp                  
  23:190 | DONE ins | na  8 16 | 00605c | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:191 | DONE ins | na  8 16 | 00605d | c2 20       |                 rep 20               
  23:192 | DONE ctl | na 16 16 |        |             |         .!a16
  23:193 | DONE ins | na 16 16 | 00605f | 68          |                 pla                  restore A
  23:194 | DONE ins | na 16 16 | 006060 | 60          |                 rts                  
  23:195 | DONE wsp | na 16 16 |        |             |
  23:196 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE cmt | na 16 16 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE wsp | na 16 16 |        |             |
  27:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  28:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  29:000 | DONE wsp | na 16 16 |        |             |
  30:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  31:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  32:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE wsp | na 16 16 |        |             |
  35:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  36:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  37:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  38:000 | DONE lbl | na 16 16 | 006061 |             | xt_cold                              
  39:000 | DONE wsp | na 16 16 |        |             |
  40:000 | DONE ins | na 16 16 | 006061 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  41:000 | DONE lbl | na 16 16 | 006064 |             | start                                
  42:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  43:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  44:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  45:000 | DONE ins | na 16 16 | 006064 | 78          |                 sei                  
  46:000 | DONE wsp | na 16 16 |        |             |
  47:000 | DONE cmt | na 16 16 |        |             |                 ; Initialize the Return Stack (65816 stack)
  48:000 | DONE ins | na 16 16 | 006065 | a2 ff 01    |                 ldx.# 0001ff         01ff
  49:000 | DONE ins | na 16 16 | 006068 | 9a          |                 txs                  
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack. This is repeated in ABORT, but we have no
  52:000 | DONE cmt | na 16 16 |        |             |                 ; choice if we want to load high-level words via EVALUATE
  53:000 | DONE ins | na 16 16 | 006069 | a0 00 00    |                 ldy.# 0000           
  54:000 | DONE ins | na 16 16 | 00606c | a2 ff 00    |                 ldx.# 0000ff         
  55:000 | DONE wsp | na 16 16 |        |             |
  56:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  57:000 | DONE ins | na 16 16 | 00606f | a9 0a 00    |                 lda.# 000a           
  58:000 | DONE ins | na 16 16 | 006072 | 85 10       |                 sta.d 000010         
  59:000 | DONE wsp | na 16 16 |        |             |
  60:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  61:000 | DONE cmt | na 16 16 |        |             |                 ; in the Dictionary
  62:000 | DONE ins | na 16 16 | 006074 | a9 00 03    |                 lda.# 000300         
  63:000 | DONE ins | na 16 16 | 006077 | 85 00       |                 sta.d 000000         
  64:000 | DONE wsp | na 16 16 |        |             |
  65:000 | DONE cmt | na 16 16 |        |             |                 ; CIB is the input buffer
  66:000 | DONE ins | na 16 16 | 006079 | a9 00 02    |                 lda.# 000200         
  67:000 | DONE ins | na 16 16 | 00607c | 85 08       |                 sta.d 000008         
  68:000 | DONE ins | na 16 16 | 00607e | 64 0a       |                 stz.d 00000a         input buffer starts empty
  69:000 | DONE ins | na 16 16 | 006080 | 64 06       |                 stz.d 000006         SOURCE-ID is zero
  70:000 | DONE ins | na 16 16 | 006082 | 64 0e       |                 stz.d 00000e         STATE is zero (interpret)
  71:000 | DONE wsp | na 16 16 |        |             |
  72:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  73:000 | DONE cmt | na 16 16 |        |             |                 ; new Dictionary, so we start off the Dictionary Pointer (DP)
  74:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  75:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  76:000 | DONE ins | na 16 16 | 006084 | a9 8e 75    |                 lda.# 00758e         
  77:000 | DONE ins | na 16 16 | 006087 | 85 02       |                 sta.d 000002         
  78:000 | DONE wsp | na 16 16 |        |             |
  79:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  80:000 | DONE ins | na 16 16 | 006089 | 20 fd 69    |                 jsr 0069fd           
  81:000 | DONE wsp | na 16 16 |        |             |
  82:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  83:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  84:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  85:000 | DONE ins | na 16 16 | 00608c | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608d | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608e | ca          |                 dex                  
  88:000 | DONE ins | na 16 16 | 00608f | ca          |                 dex                  
  89:000 | DONE ins | na 16 16 | 006090 | a9 71 76    |                 lda.# 007671         
  90:000 | DONE ins | na 16 16 | 006093 | 95 00       |                 sta.dx 00            Start address goes in NOS
  91:000 | DONE ins | na 16 16 | 006095 | a0 0f 05    |                 ldy.# 00050f         length goes in TOS
  92:000 | DONE wsp | na 16 16 |        |             |
  93:000 | DONE ins | na 16 16 | 006098 | 20 7e 67    |                 jsr 00677e           
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
  96:000 | DONE wsp | na 16 16 |        |             |
  97:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  98:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  99:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
 100:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 101:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 102:000 | DONE lbl | na 16 16 | 00609b |             | xt_abort                             
 103:000 | DONE ins | na 16 16 | 00609b | c2 20       |                 rep 20               
 103:001 | DONE ctl | na 16 16 |        |             |         .!a16
 104:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 105:000 | DONE ins | na 16 16 | 00609d | a0 00 00    |                 ldy.# 0000           
 106:000 | DONE ins | na 16 16 | 0060a0 | a2 ff 00    |                 ldx.# 0000ff         
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE wsp | na 16 16 |        |             |
 109:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 110:000 | DONE wsp | na 16 16 |        |             |
 111:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 112:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 113:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 114:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 115:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 116:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 117:000 | DONE lbl | na 16 16 | 0060a3 |             | xt_quit                              
 118:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 119:000 | DONE ins | na 16 16 | 0060a3 | a9 ff 01    |                 lda.# 0001ff         
 120:000 | DONE ins | na 16 16 | 0060a6 | 1b          |                 tcs                  
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 123:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 124:000 | DONE ins | na 16 16 | 0060a7 | 9c ad 67    |                 stz 0067ad           
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 127:000 | DONE ins | na 16 16 | 0060aa | 64 06       |                 stz.d 000006         
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 130:000 | DONE ins | na 16 16 | 0060ac | 64 0e       |                 stz.d 00000e         
 131:000 | DONE wsp | na 16 16 |        |             |
 132:000 | DONE lbl | na 16 16 | 0060ae |             | quit_get_line                        
 133:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer
 134:000 | DONE ins | na 16 16 | 0060ae | 64 0a       |                 stz.d 00000a         
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 137:000 | DONE ins | na 16 16 | 0060b0 | 20 d4 6a    |                 jsr 006ad4           ( -- f )
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE ins | na 16 16 | 0060b3 | 98          |                 tya                  force flag test
 140:000 | DONE ins | na 16 16 | 0060b4 | d0 06       |                 bne 0060bc           
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 143:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 145:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 146:000 | DONE ins | na 16 16 | 0060b6 | a9 54 7c    |                 lda.# 007c54         
 147:000 | DONE ins | na 16 16 | 0060b9 | 4c 37 76    |                 jmp 007637           
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE lbl | na 16 16 | 0060bc |             | quit_refill_successful               
 151:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 152:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address cib and length of input in ciblen. We
 153:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here still with the TRUE flag from REFILL as TOS (in Y)
 154:000 | DONE ins | na 16 16 | 0060bc | b4 00       |                 ldy.dx 00            drop TOS
 155:000 | DONE ins | na 16 16 | 0060be | e8          |                 inx                  
 156:000 | DONE ins | na 16 16 | 0060bf | e8          |                 inx                  
 157:000 | DONE wsp | na 16 16 |        |             |
 158:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 159:000 | DONE ins | na 16 16 | 0060c0 | 64 0c       |                 stz.d 00000c         
 160:000 | DONE wsp | na 16 16 |        |             |
 161:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 162:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 163:000 | DONE ins | na 16 16 | 0060c2 | 20 bc 75    |                 jsr 0075bc           
 164:000 | DONE wsp | na 16 16 |        |             |
 165:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 166:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 167:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 168:000 | DONE ins | na 16 16 | 0060c5 | e0 00 01    |                 cpx.# 000100         
 169:000 | DONE ins | na 16 16 | 0060c8 | 90 06       |                 bcc 0060d0           DSP must always be smaller (!) than DSP0
 170:000 | DONE wsp | na 16 16 |        |             |
 171:000 | DONE ins | na 16 16 | 0060ca | a9 ba 7c    |                 lda.# 007cba         
 172:000 | DONE ins | na 16 16 | 0060cd | 4c 37 76    |                 jmp 007637           
 173:000 | DONE wsp | na 16 16 |        |             |
 174:000 | DONE lbl | na 16 16 | 0060d0 |             | quit_ok                              
 175:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 176:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 177:000 | DONE ins | na 16 16 | 0060d0 | a5 0e       |                 lda.d 00000e         
 178:000 | DONE ins | na 16 16 | 0060d2 | d0 05       |                 bne 0060d9           
 179:000 | DONE wsp | na 16 16 |        |             |
 180:000 | DONE ins | na 16 16 | 0060d4 | a9 80 7b    |                 lda.# 007b80         
 181:000 | DONE ins | na 16 16 | 0060d7 | 80 03       |                 bra 0060dc           
 182:000 | DONE lbl | na 16 16 | 0060d9 |             | quit_compiled                        
 183:000 | DONE ins | na 16 16 | 0060d9 | a9 84 7b    |                 lda.# 007b84         fall through to quit_print
 184:000 | DONE lbl | na 16 16 | 0060dc |             | quit_print                           
 185:000 | DONE ins | na 16 16 | 0060dc | 20 3d 76    |                 jsr 00763d           
 186:000 | DONE wsp | na 16 16 |        |             |
 187:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 188:000 | DONE ins | na 16 16 | 0060df | 4c ae 60    |                 jmp 0060ae           
 189:000 | DONE wsp | na 16 16 |        |             |
 190:000 | DONE lbl | na 16 16 | 0060e2 |             | z_cold                               
 191:000 | DONE lbl | na 16 16 | 0060e2 |             | z_abort                              
 192:000 | DONE lbl | na 16 16 | 0060e2 |             | z_quit                               
 192:001 | DONE ins | na 16 16 | 0060e2 | ea          |                 nop                  dummy for compilation, TODO test if required
 193:000 | DONE wsp | na 16 16 |        |             |
 194:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 195:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 196:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 197:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 198:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 199:000 | DONE lbl | na 16 16 | 0060e3 |             | xt_less                              
 200:000 | DONE ins | na 16 16 | 0060e3 | 98          |                 tya                  
 201:000 | DONE ins | na 16 16 | 0060e4 | a0 00 00    |                 ldy.# 0000           default is false
 202:000 | DONE wsp | na 16 16 |        |             |
 203:000 | DONE ins | na 16 16 | 0060e7 | 38          |                 sec                  
 204:000 | DONE ins | na 16 16 | 0060e8 | f5 00       |                 sbc.dx 00            
 205:000 | DONE ins | na 16 16 | 0060ea | f0 08       |                 beq 0060f4           the same is not greater
 206:000 | DONE ins | na 16 16 | 0060ec | 50 03       |                 bvc 0060f1           no overflow, skip ahead
 207:000 | DONE wsp | na 16 16 |        |             |
 208:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 209:000 | DONE ins | na 16 16 | 0060ee | 49 00 80    |                 eor.# 8000           compliment negative flag
 210:000 | DONE wsp | na 16 16 |        |             |
 211:000 | DONE lbl | na 16 16 | 0060f1 |             | xt_less_no_ov                        
 212:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 213:000 | DONE ins | na 16 16 | 0060f1 | 30 01       |                 bmi 0060f4           
 214:000 | DONE ins | na 16 16 | 0060f3 | 88          |                 dey                  
 215:000 | DONE lbl | na 16 16 | 0060f4 |             | xt_less_nip                          
 216:000 | DONE ins | na 16 16 | 0060f4 | e8          |                 inx                  
 217:000 | DONE ins | na 16 16 | 0060f5 | e8          |                 inx                  
 218:000 | DONE wsp | na 16 16 |        |             |
 219:000 | DONE lbl | na 16 16 | 0060f6 |             | z_less                               
 219:001 | DONE ins | na 16 16 | 0060f6 | 60          |                 rts                  
 220:000 | DONE wsp | na 16 16 |        |             |
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 223:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 224:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 225:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 226:000 | DONE lbl | na 16 16 | 0060f7 |             | xt_not-equal                         
 227:000 | DONE ins | na 16 16 | 0060f7 | 98          |                 tya                  
 228:000 | DONE ins | na 16 16 | 0060f8 | a0 00 00    |                 ldy.# 0000           default value is false
 229:000 | DONE wsp | na 16 16 |        |             |
 230:000 | DONE ins | na 16 16 | 0060fb | d5 00       |                 cmp.dx 00            
 231:000 | DONE ins | na 16 16 | 0060fd | f0 01       |                 beq 006100           
 232:000 | DONE ins | na 16 16 | 0060ff | 88          |                 dey                  wraps to 0FFFF (true)
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE lbl | na 16 16 | 006100 |             | not-equal_equal                      ; yes, this is a silly name
 235:000 | DONE ins | na 16 16 | 006100 | e8          |                 inx                  
 236:000 | DONE ins | na 16 16 | 006101 | e8          |                 inx                  
 237:000 | DONE wsp | na 16 16 |        |             |
 238:000 | DONE lbl | na 16 16 | 006102 |             | z_not-equal                          
 238:001 | DONE ins | na 16 16 | 006102 | 60          |                 rts                  
 239:000 | DONE wsp | na 16 16 |        |             |
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 242:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 243:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 244:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 245:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 246:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 247:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 248:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 249:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 250:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 251:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 252:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 253:000 | DONE lbl | na 16 16 | 006103 |             | xt_lessnumber                        
 254:000 | DONE ins | na 16 16 | 006103 | 20 f1 69    |                 jsr 0069f1           
 255:000 | DONE ins | na 16 16 | 006106 | 84 12       |                 sty.d 000012         
 256:000 | DONE ins | na 16 16 | 006108 | b4 00       |                 ldy.dx 00            
 257:000 | DONE ins | na 16 16 | 00610a | e8          |                 inx                  
 258:000 | DONE ins | na 16 16 | 00610b | e8          |                 inx                  
 259:000 | DONE wsp | na 16 16 |        |             |
 260:000 | DONE lbl | na 16 16 | 00610c |             | z_lessnumber                         
 260:001 | DONE ins | na 16 16 | 00610c | 60          |                 rts                  
 261:000 | DONE wsp | na 16 16 |        |             |
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 264:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 265:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 266:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 267:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 268:000 | DONE lbl | na 16 16 | 00610d |             | xt_greater                           
 269:000 | DONE ins | na 16 16 | 00610d | 98          |                 tya                  
 270:000 | DONE ins | na 16 16 | 00610e | a0 00 00    |                 ldy.# 0000           default is false
 271:000 | DONE wsp | na 16 16 |        |             |
 272:000 | DONE ins | na 16 16 | 006111 | 38          |                 sec                  
 273:000 | DONE ins | na 16 16 | 006112 | f5 00       |                 sbc.dx 00            
 274:000 | DONE ins | na 16 16 | 006114 | f0 08       |                 beq 00611e           the same is not greater
 275:000 | DONE ins | na 16 16 | 006116 | 50 03       |                 bvc 00611b           no overflow, skip ahead
 276:000 | DONE wsp | na 16 16 |        |             |
 277:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 278:000 | DONE ins | na 16 16 | 006118 | 49 00 80    |                 eor.# 8000           compliment negative flag
 279:000 | DONE wsp | na 16 16 |        |             |
 280:000 | DONE lbl | na 16 16 | 00611b |             | xt_greater_no_ov                     
 281:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 282:000 | DONE ins | na 16 16 | 00611b | 10 01       |                 bpl 00611e           
 283:000 | DONE ins | na 16 16 | 00611d | 88          |                 dey                  
 284:000 | DONE lbl | na 16 16 | 00611e |             | xt_greater_nip                       
 285:000 | DONE ins | na 16 16 | 00611e | e8          |                 inx                  
 286:000 | DONE ins | na 16 16 | 00611f | e8          |                 inx                  
 287:000 | DONE wsp | na 16 16 |        |             |
 288:000 | DONE lbl | na 16 16 | 006120 |             | z_greater                            
 288:001 | DONE ins | na 16 16 | 006120 | 60          |                 rts                  
 289:000 | DONE wsp | na 16 16 |        |             |
 290:000 | DONE wsp | na 16 16 |        |             |
 291:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 292:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 293:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 294:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 295:000 | DONE cmt | na 16 16 |        |             | ; after CREATE
 296:000 | DONE lbl | na 16 16 | 006121 |             | xt_tobody                            
 297:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 298:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR. We just need to move xt
 299:000 | DONE cmt | na 16 16 |        |             |                 ; down by three bytes
 300:000 | DONE ins | na 16 16 | 006121 | c8          |                 iny                  
 301:000 | DONE ins | na 16 16 | 006122 | c8          |                 iny                  
 302:000 | DONE ins | na 16 16 | 006123 | c8          |                 iny                  
 303:000 | DONE wsp | na 16 16 |        |             |
 304:000 | DONE lbl | na 16 16 | 006124 |             | z_tobody                             
 304:001 | DONE ins | na 16 16 | 006124 | 60          |                 rts                  
 305:000 | DONE wsp | na 16 16 |        |             |
 306:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 307:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 308:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 309:000 | DONE lbl | na 16 16 | 006125 |             | xt_to-in                             
 310:000 | DONE ins | na 16 16 | 006125 | ca          |                 dex                  
 311:000 | DONE ins | na 16 16 | 006126 | ca          |                 dex                  
 312:000 | DONE ins | na 16 16 | 006127 | 94 00       |                 sty.dx 00            
 313:000 | DONE wsp | na 16 16 |        |             |
 314:000 | DONE ins | na 16 16 | 006129 | a0 0c 00    |                 ldy.# 00000c         >IN
 315:000 | DONE lbl | na 16 16 | 00612c |             | z_to-in                              
 315:001 | DONE ins | na 16 16 | 00612c | 60          |                 rts                  
 316:000 | DONE wsp | na 16 16 |        |             |
 317:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 318:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 319:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 320:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 321:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the origional
 322:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 323:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 324:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 325:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 326:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 327:000 | DONE lbl | na 16 16 | 00612d |             | xt_tonumber                          
 328:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 329:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 330:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 331:000 | DONE cmt | na 16 16 |        |             |                 ;
 332:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 333:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 334:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 335:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 336:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 337:000 | DONE wsp | na 16 16 |        |             |
 338:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 339:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 340:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 341:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 342:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 343:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 344:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 345:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 346:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 347:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 348:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 349:000 | DONE wsp | na 16 16 |        |             |
 350:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 351:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 352:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 353:000 | DONE ins | na 16 16 | 00612d | b5 04       |                 lda.dx 04            ud-lo
 354:000 | DONE ins | na 16 16 | 00612f | 85 20       |                 sta.d 000020         
 355:000 | DONE ins | na 16 16 | 006131 | b5 02       |                 lda.dx 02            ud-hi
 356:000 | DONE ins | na 16 16 | 006133 | 85 22       |                 sta.d 000022         
 357:000 | DONE wsp | na 16 16 |        |             |
 358:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 359:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 360:000 | DONE ins | na 16 16 | 006135 | ca          |                 dex                  
 361:000 | DONE ins | na 16 16 | 006136 | ca          |                 dex                  
 362:000 | DONE ins | na 16 16 | 006137 | 94 00       |                 sty.dx 00            
 363:000 | DONE wsp | na 16 16 |        |             |
 364:000 | DONE lbl | na 16 16 | 006139 |             | tonumber_loop                        
 365:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 366:000 | DONE ins | na 16 16 | 006139 | a1 02       |                 lda.dxi 02           
 367:000 | DONE ins | na 16 16 | 00613b | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 368:000 | DONE wsp | na 16 16 |        |             |
 369:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 370:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 371:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 372:000 | DONE ins | na 16 16 | 00613c | 20 70 66    |                 jsr 006670           ( char -- n -1 | char 0 )
 373:000 | DONE wsp | na 16 16 |        |             |
 374:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 375:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 376:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 377:000 | DONE ins | na 16 16 | 00613f | 98          |                 tya                  
 378:000 | DONE ins | na 16 16 | 006140 | d0 06       |                 bne 006148           
 379:000 | DONE wsp | na 16 16 |        |             |
 380:000 | DONE ins | na 16 16 | 006142 | b4 00       |                 ldy.dx 00            
 381:000 | DONE ins | na 16 16 | 006144 | e8          |                 inx                  
 382:000 | DONE ins | na 16 16 | 006145 | e8          |                 inx                  
 383:000 | DONE ins | na 16 16 | 006146 | 80 35       |                 bra 00617d           
 384:000 | DONE wsp | na 16 16 |        |             |
 385:000 | DONE lbl | na 16 16 | 006148 |             | tonumber_ok                          
 386:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 387:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 388:000 | DONE wsp | na 16 16 |        |             |
 389:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 390:000 | DONE ins | na 16 16 | 006148 | b5 00       |                 lda.dx 00            
 391:000 | DONE ins | na 16 16 | 00614a | 85 24       |                 sta.d 000024         
 392:000 | DONE wsp | na 16 16 |        |             |
 393:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 394:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 395:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 396:000 | DONE ins | na 16 16 | 00614c | a5 22       |                 lda.d 000022         
 397:000 | DONE ins | na 16 16 | 00614e | 95 00       |                 sta.dx 00            
 398:000 | DONE ins | na 16 16 | 006150 | a4 10       |                 ldy.d 000010         ( ud-lo ud-hi addr u ud-hi base )
 399:000 | DONE wsp | na 16 16 |        |             |
 400:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 401:000 | DONE ins | na 16 16 | 006152 | 20 bd 6c    |                 jsr 006cbd           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 402:000 | DONE wsp | na 16 16 |        |             |
 403:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 404:000 | DONE ins | na 16 16 | 006155 | b5 00       |                 lda.dx 00            ud-hi-lo
 405:000 | DONE ins | na 16 16 | 006157 | 85 26       |                 sta.d 000026         
 406:000 | DONE wsp | na 16 16 |        |             |
 407:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 408:000 | DONE ins | na 16 16 | 006159 | a5 20       |                 lda.d 000020         
 409:000 | DONE ins | na 16 16 | 00615b | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 410:000 | DONE ins | na 16 16 | 00615d | a4 10       |                 ldy.d 000010         ( ud-lo ud-hi addr u ud-lo base )
 411:000 | DONE wsp | na 16 16 |        |             |
 412:000 | DONE ins | na 16 16 | 00615f | 20 bd 6c    |                 jsr 006cbd           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 413:000 | DONE ins | na 16 16 | 006162 | 84 22       |                 sty.d 000022         
 414:000 | DONE ins | na 16 16 | 006164 | b5 00       |                 lda.dx 00            
 415:000 | DONE ins | na 16 16 | 006166 | 85 20       |                 sta.d 000020         
 416:000 | DONE wsp | na 16 16 |        |             |
 417:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 418:000 | DONE ins | na 16 16 | 006168 | a5 20       |                 lda.d 000020         
 419:000 | DONE ins | na 16 16 | 00616a | 18          |                 clc                  
 420:000 | DONE ins | na 16 16 | 00616b | 65 24       |                 adc.d 000024         
 421:000 | DONE ins | na 16 16 | 00616d | 85 20       |                 sta.d 000020         this is the new ud-lo
 422:000 | DONE ins | na 16 16 | 00616f | a5 22       |                 lda.d 000022         
 423:000 | DONE ins | na 16 16 | 006171 | 65 26       |                 adc.d 000026         
 424:000 | DONE ins | na 16 16 | 006173 | 85 22       |                 sta.d 000022         this is the new ud-hi
 425:000 | DONE wsp | na 16 16 |        |             |
 426:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 427:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 428:000 | DONE ins | na 16 16 | 006175 | e8          |                 inx                  
 429:000 | DONE ins | na 16 16 | 006176 | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 430:000 | DONE wsp | na 16 16 |        |             |
 431:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 432:000 | DONE ins | na 16 16 | 006177 | f6 02       |                 inc.dx 02            increase address
 433:000 | DONE ins | na 16 16 | 006179 | d6 00       |                 dec.dx 00            decrease length
 434:000 | DONE wsp | na 16 16 |        |             |
 435:000 | DONE ins | na 16 16 | 00617b | d0 bc       |                 bne 006139           
 436:000 | DONE wsp | na 16 16 |        |             |
 437:000 | DONE lbl | na 16 16 | 00617d |             | tonumber_done                        
 438:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 439:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 440:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 441:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 442:000 | DONE ins | na 16 16 | 00617d | b4 00       |                 ldy.dx 00            
 443:000 | DONE ins | na 16 16 | 00617f | e8          |                 inx                  
 444:000 | DONE ins | na 16 16 | 006180 | e8          |                 inx                  ( ud-lo ud-hi addr u )
 445:000 | DONE wsp | na 16 16 |        |             |
 446:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 447:000 | DONE ins | na 16 16 | 006181 | a5 20       |                 lda.d 000020         new ud-lo
 448:000 | DONE ins | na 16 16 | 006183 | 95 04       |                 sta.dx 04            
 449:000 | DONE ins | na 16 16 | 006185 | a5 22       |                 lda.d 000022         
 450:000 | DONE ins | na 16 16 | 006187 | 95 02       |                 sta.dx 02            new ud-hi
 451:000 | DONE wsp | na 16 16 |        |             |
 452:000 | DONE lbl | na 16 16 | 006189 |             | z_tonumber                           
 452:001 | DONE ins | na 16 16 | 006189 | 60          |                 rts                  
 453:000 | DONE wsp | na 16 16 |        |             |
 454:000 | DONE wsp | na 16 16 |        |             |
 455:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 456:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 457:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 458:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 459:000 | DONE lbl | na 16 16 | 00618a |             | xt_tor                               
 460:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 461:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 462:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 463:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 464:000 | DONE ins | na 16 16 | 00618a | 68          |                 pla                  
 465:000 | DONE wsp | na 16 16 |        |             |
 466:000 | DONE ins | na 16 16 | 00618b | 5a          |                 phy                  the actual work
 467:000 | DONE wsp | na 16 16 |        |             |
 468:000 | DONE ins | na 16 16 | 00618c | b4 00       |                 ldy.dx 00            DROP
 469:000 | DONE ins | na 16 16 | 00618e | e8          |                 inx                  
 470:000 | DONE ins | na 16 16 | 00618f | e8          |                 inx                  
 471:000 | DONE wsp | na 16 16 |        |             |
 472:000 | DONE ins | na 16 16 | 006190 | 48          |                 pha                  put return address back in place
 473:000 | DONE wsp | na 16 16 |        |             |
 474:000 | DONE lbl | na 16 16 | 006191 |             | z_tor                                
 474:001 | DONE ins | na 16 16 | 006191 | 60          |                 rts                  
 475:000 | DONE wsp | na 16 16 |        |             |
 476:000 | DONE wsp | na 16 16 |        |             |
 477:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 478:000 | DONE cmt | na 16 16 |        |             | ; /STRING ( addr u n -- ) X bytes / X cycles
 479:000 | DONE cmt | na 16 16 |        |             | ; Remove characters from front of string. Uses tmp1
 480:000 | DONE cmt | na 16 16 |        |             | ; Forth version: ROT OVER + ROT ROT - ;
 481:000 | DONE cmt | na 16 16 |        |             | ; TODO check for negative strings so 1 /STRING TYPE won't try to print the whole
 482:000 | DONE cmt | na 16 16 |        |             | ; address space; follow Gforth in failing gracefully
 483:000 | DONE lbl | na 16 16 | 006192 |             | xt_slashstring                       
 484:000 | DONE ins | na 16 16 | 006192 | 84 16       |                 sty.d 000016         
 485:000 | DONE wsp | na 16 16 |        |             |
 486:000 | DONE ins | na 16 16 | 006194 | b5 00       |                 lda.dx 00            length
 487:000 | DONE ins | na 16 16 | 006196 | 38          |                 sec                  
 488:000 | DONE ins | na 16 16 | 006197 | e5 16       |                 sbc.d 000016         
 489:000 | DONE ins | na 16 16 | 006199 | a8          |                 tay                  
 490:000 | DONE wsp | na 16 16 |        |             |
 491:000 | DONE ins | na 16 16 | 00619a | b5 02       |                 lda.dx 02            address
 492:000 | DONE ins | na 16 16 | 00619c | 18          |                 clc                  
 493:000 | DONE ins | na 16 16 | 00619d | 65 16       |                 adc.d 000016         
 494:000 | DONE ins | na 16 16 | 00619f | 95 02       |                 sta.dx 02            
 495:000 | DONE wsp | na 16 16 |        |             |
 496:000 | DONE ins | na 16 16 | 0061a1 | e8          |                 inx                  
 497:000 | DONE ins | na 16 16 | 0061a2 | e8          |                 inx                  
 498:000 | DONE wsp | na 16 16 |        |             |
 499:000 | DONE lbl | na 16 16 | 0061a3 |             | z_slashstring                        
 499:001 | DONE ins | na 16 16 | 0061a3 | 60          |                 rts                  
 500:000 | DONE wsp | na 16 16 |        |             |
 501:000 | DONE wsp | na 16 16 |        |             |
 502:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 503:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 504:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 505:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE  Based on
 506:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 507:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 508:000 | DONE cmt | na 16 16 |        |             | ; focus on size.
 509:000 | DONE cmt | na 16 16 |        |             | ; TODO Once we know this works, move to assembler
 510:000 | DONE lbl | na 16 16 | 0061a4 |             | xt_dot                               
 511:000 | DONE ins | na 16 16 | 0061a4 | 20 57 67    |                 jsr 006757           ( n n )
 512:000 | DONE ins | na 16 16 | 0061a7 | 20 18 64    |                 jsr 006418           ( n n )
 513:000 | DONE ins | na 16 16 | 0061aa | 20 21 63    |                 jsr 006321           ( n n 0 )
 514:000 | DONE ins | na 16 16 | 0061ad | 20 03 61    |                 jsr 006103           ( n n 0 )
 515:000 | DONE ins | na 16 16 | 0061b0 | 20 9e 62    |                 jsr 00629e           ( n ud )
 516:000 | DONE ins | na 16 16 | 0061b3 | 20 fc 6a    |                 jsr 006afc           ( ud n )
 517:000 | DONE ins | na 16 16 | 0061b6 | 20 5f 6b    |                 jsr 006b5f           ( ud )
 518:000 | DONE ins | na 16 16 | 0061b9 | 20 8f 62    |                 jsr 00628f           
 519:000 | DONE ins | na 16 16 | 0061bc | 20 81 6c    |                 jsr 006c81           
 520:000 | DONE ins | na 16 16 | 0061bf | 20 3c 6c    |                 jsr 006c3c           
 521:000 | DONE wsp | na 16 16 |        |             |
 522:000 | DONE lbl | na 16 16 | 0061c2 |             | z_dot                                
 522:001 | DONE ins | na 16 16 | 0061c2 | 60          |                 rts                  
 523:000 | DONE wsp | na 16 16 |        |             |
 524:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 525:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 526:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 527:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 528:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 529:000 | DONE lbl | na 16 16 | 0061c3 |             | xt_dotparen                          
 530:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 531:000 | DONE ins | na 16 16 | 0061c3 | ca          |                 dex                  
 532:000 | DONE ins | na 16 16 | 0061c4 | ca          |                 dex                  
 533:000 | DONE ins | na 16 16 | 0061c5 | 94 00       |                 sty.dx 00            
 534:000 | DONE ins | na 16 16 | 0061c7 | a0 29 00    |                 ldy.# 29             
 535:000 | DONE wsp | na 16 16 |        |             |
 536:000 | DONE ins | na 16 16 | 0061ca | 20 3c 6a    |                 jsr 006a3c           ( -- addr u)
 537:000 | DONE ins | na 16 16 | 0061cd | 20 81 6c    |                 jsr 006c81           
 538:000 | DONE wsp | na 16 16 |        |             |
 539:000 | DONE lbl | na 16 16 | 0061d0 |             | z_dotparen                           
 539:001 | DONE ins | na 16 16 | 0061d0 | 60          |                 rts                  
 540:000 | DONE wsp | na 16 16 |        |             |
 541:000 | DONE wsp | na 16 16 |        |             |
 542:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 543:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 544:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 545:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 546:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 547:000 | DONE lbl | na 16 16 | 0061d1 |             | xt_dotquote                          
 548:000 | DONE ins | na 16 16 | 0061d1 | ca          |                 dex                  
 549:000 | DONE ins | na 16 16 | 0061d2 | ca          |                 dex                  
 550:000 | DONE ins | na 16 16 | 0061d3 | 94 00       |                 sty.dx 00            
 551:000 | DONE ins | na 16 16 | 0061d5 | a0 22 00    |                 ldy.# 0022           ASCII for "
 552:000 | DONE wsp | na 16 16 |        |             |
 553:000 | DONE ins | na 16 16 | 0061d8 | 20 3c 6a    |                 jsr 006a3c           
 554:000 | DONE ins | na 16 16 | 0061db | 20 6d 6b    |                 jsr 006b6d           
 555:000 | DONE wsp | na 16 16 |        |             |
 556:000 | DONE ins | na 16 16 | 0061de | f4 81 6c    |                 phe.# 006c81         
 557:000 | DONE ins | na 16 16 | 0061e1 | 20 16 76    |                 jsr 007616           
 558:000 | DONE wsp | na 16 16 |        |             |
 559:000 | DONE ins | na 16 16 | 0061e4 | 60          |                 rts                  
 560:000 | DONE lbl | na 16 16 | 0061e5 |             | z_dotquote                           
 561:000 | DONE wsp | na 16 16 |        |             |
 562:000 | DONE wsp | na 16 16 |        |             |
 563:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 564:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 565:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 566:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 567:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 568:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 569:000 | DONE lbl | na 16 16 | 0061e5 |             | xt_dots                              
 570:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 571:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 572:000 | DONE ins | na 16 16 | 0061e5 | 20 e5 66    |                 jsr 0066e5           ( -- u)
 573:000 | DONE wsp | na 16 16 |        |             |
 574:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 575:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 576:000 | DONE ins | na 16 16 | 0061e8 | a9 3c 00    |                 lda.# 3c             
 577:000 | DONE ins | na 16 16 | 0061eb | 20 34 60    |                 jsr 006034           
 578:000 | DONE wsp | na 16 16 |        |             |
 579:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 580:000 | DONE ins | na 16 16 | 0061ee | 98          |                 tya                  
 581:000 | DONE ins | na 16 16 | 0061ef | 29 00 ff    |                 and.# 0ff00          
 582:000 | DONE ins | na 16 16 | 0061f2 | eb          |                 xba                  
 583:000 | DONE ins | na 16 16 | 0061f3 | 20 55 76    |                 jsr 007655           
 584:000 | DONE ins | na 16 16 | 0061f6 | 98          |                 tya                  
 585:000 | DONE ins | na 16 16 | 0061f7 | 29 ff 00    |                 and.# 00ff           
 586:000 | DONE ins | na 16 16 | 0061fa | 20 55 76    |                 jsr 007655           
 587:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 588:000 | DONE wsp | na 16 16 |        |             |
 589:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 590:000 | DONE ins | na 16 16 | 0061fd | a9 3e 00    |                 lda.# 3e             
 591:000 | DONE ins | na 16 16 | 006200 | 20 34 60    |                 jsr 006034           
 592:000 | DONE ins | na 16 16 | 006203 | 20 3c 6c    |                 jsr 006c3c           
 593:000 | DONE wsp | na 16 16 |        |             |
 594:000 | DONE wsp | na 16 16 |        |             |
 595:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 596:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 597:000 | DONE ins | na 16 16 | 006206 | 98          |                 tya                  force flag test
 598:000 | DONE ins | na 16 16 | 006207 | f0 20       |                 beq 006229           
 599:000 | DONE wsp | na 16 16 |        |             |
 600:000 | DONE lbl | na 16 16 | 006209 |             | dots_not_empty                       
 601:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 602:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 603:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 604:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 605:000 | DONE wsp | na 16 16 |        |             |
 606:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 607:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 608:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 609:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 610:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles), and we save the two bytes.
 611:000 | DONE ins | na 16 16 | 006209 | da          |                 phx                  
 612:000 | DONE wsp | na 16 16 |        |             |
 613:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 614:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped.
 615:000 | DONE cmt | na 16 16 |        |             |                 ; See docs/INTERNALS.md for details
 616:000 | DONE ins | na 16 16 | 00620a | a2 ff 00    |                 ldx.# 0000ff         points to dsp0, which is garbage
 617:000 | DONE ins | na 16 16 | 00620d | ca          |                 dex                  
 618:000 | DONE ins | na 16 16 | 00620e | ca          |                 dex                  points to dsp0-2, which is also garbage
 619:000 | DONE wsp | na 16 16 |        |             |
 620:000 | DONE lbl | na 16 16 | 00620f |             | dots_loop                            
 621:000 | DONE ins | na 16 16 | 00620f | ca          |                 dex                  get next element on DS, initially dsp0-4
 622:000 | DONE ins | na 16 16 | 006210 | ca          |                 dex                  
 623:000 | DONE wsp | na 16 16 |        |             |
 624:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 625:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 626:000 | DONE ins | na 16 16 | 006211 | b5 00       |                 lda.dx 00            
 627:000 | DONE ins | na 16 16 | 006213 | 29 00 ff    |                 and.# 0ff00          
 628:000 | DONE ins | na 16 16 | 006216 | eb          |                 xba                  
 629:000 | DONE ins | na 16 16 | 006217 | 20 55 76    |                 jsr 007655           
 630:000 | DONE ins | na 16 16 | 00621a | b5 00       |                 lda.dx 00            
 631:000 | DONE ins | na 16 16 | 00621c | 29 ff 00    |                 and.# 00ff           
 632:000 | DONE ins | na 16 16 | 00621f | 20 55 76    |                 jsr 007655           
 633:000 | DONE ins | na 16 16 | 006222 | 20 3c 6c    |                 jsr 006c3c           
 634:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 635:000 | DONE wsp | na 16 16 |        |             |
 636:000 | DONE ins | na 16 16 | 006225 | 88          |                 dey                  
 637:000 | DONE ins | na 16 16 | 006226 | d0 e7       |                 bne 00620f           
 638:000 | DONE wsp | na 16 16 |        |             |
 639:000 | DONE ins | na 16 16 | 006228 | fa          |                 plx                  restore original DSP
 640:000 | DONE wsp | na 16 16 |        |             |
 641:000 | DONE lbl | na 16 16 | 006229 |             | dots_done                            
 642:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 643:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 644:000 | DONE ins | na 16 16 | 006229 | 20 2b 67    |                 jsr 00672b           
 645:000 | DONE wsp | na 16 16 |        |             |
 646:000 | DONE lbl | na 16 16 | 00622c |             | z_dots                               
 646:001 | DONE ins | na 16 16 | 00622c | 60          |                 rts                  
 647:000 | DONE wsp | na 16 16 |        |             |
 648:000 | DONE wsp | na 16 16 |        |             |
 649:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 650:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 651:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 652:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 653:000 | DONE cmt | na 16 16 |        |             | ; aligned
 654:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 655:000 | DONE cmt | na 16 16 |        |             | ;               tya
 656:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 657:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 658:000 | DONE cmt | na 16 16 |        |             | ;               iny
 659:000 | DONE cmt | na 16 16 |        |             | ;               iny
 660:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 661:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 662:000 | DONE cmt | na 16 16 |        |             | ;               inx
 663:000 | DONE cmt | na 16 16 |        |             | ;               inx
 664:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 665:000 | DONE lbl | na 16 16 | 00622d |             | xt_comma                             
 666:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 667:000 | DONE ins | na 16 16 | 00622d | 98          |                 tya                  
 668:000 | DONE ins | na 16 16 | 00622e | 92 00       |                 sta.di 000000        STA (CP)
 669:000 | DONE ins | na 16 16 | 006230 | e6 00       |                 inc.d 000000         
 670:000 | DONE ins | na 16 16 | 006232 | e6 00       |                 inc.d 000000         
 671:000 | DONE wsp | na 16 16 |        |             |
 672:000 | DONE ins | na 16 16 | 006234 | b4 00       |                 ldy.dx 00            
 673:000 | DONE ins | na 16 16 | 006236 | e8          |                 inx                  
 674:000 | DONE ins | na 16 16 | 006237 | e8          |                 inx                  
 675:000 | DONE wsp | na 16 16 |        |             |
 676:000 | DONE lbl | na 16 16 | 006238 |             | z_comma                              
 676:001 | DONE ins | na 16 16 | 006238 | 60          |                 rts                  
 677:000 | DONE wsp | na 16 16 |        |             |
 678:000 | DONE wsp | na 16 16 |        |             |
 679:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 680:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 681:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 682:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 683:000 | DONE lbl | na 16 16 | 006239 |             | xt_colon                             
 684:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 685:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 686:000 | DONE ins | na 16 16 | 006239 | a5 0e       |                 lda.d 00000e         
 687:000 | DONE ins | na 16 16 | 00623b | f0 06       |                 beq 006243           
 688:000 | DONE wsp | na 16 16 |        |             |
 689:000 | DONE ins | na 16 16 | 00623d | a9 a2 7c    |                 lda.# 007ca2         
 690:000 | DONE ins | na 16 16 | 006240 | 4c 37 76    |                 jmp 007637           
 691:000 | DONE lbl | na 16 16 | 006243 |             | @                                    
 692:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 693:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 694:000 | DONE ins | na 16 16 | 006243 | e6 0e       |                 inc.d 00000e         
 695:000 | DONE wsp | na 16 16 |        |             |
 696:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 697:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 698:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 699:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 700:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 701:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 702:000 | DONE ins | na 16 16 | 006245 | a5 02       |                 lda.d 000002         
 703:000 | DONE ins | na 16 16 | 006247 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 704:000 | DONE wsp | na 16 16 |        |             |
 705:000 | DONE ins | na 16 16 | 006248 | 20 fd 65    |                 jsr 0065fd           
 706:000 | DONE wsp | na 16 16 |        |             |
 707:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 708:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 709:000 | DONE ins | na 16 16 | 00624b | a5 02       |                 lda.d 000002         
 710:000 | DONE ins | na 16 16 | 00624d | 85 04       |                 sta.d 000004         
 711:000 | DONE ins | na 16 16 | 00624f | 68          |                 pla                  
 712:000 | DONE ins | na 16 16 | 006250 | 85 02       |                 sta.d 000002         
 713:000 | DONE wsp | na 16 16 |        |             |
 714:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 715:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 716:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 717:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 718:000 | DONE ins | na 16 16 | 006252 | a5 00       |                 lda.d 000000         
 719:000 | DONE ins | na 16 16 | 006254 | 38          |                 sec                  
 720:000 | DONE ins | na 16 16 | 006255 | e9 03 00    |                 sbc.# 0003           
 721:000 | DONE ins | na 16 16 | 006258 | 85 00       |                 sta.d 000000         
 722:000 | DONE wsp | na 16 16 |        |             |
 723:000 | DONE lbl | na 16 16 | 00625a |             | z_colon                              
 723:001 | DONE ins | na 16 16 | 00625a | 60          |                 rts                  
 724:000 | DONE wsp | na 16 16 |        |             |
 725:000 | DONE wsp | na 16 16 |        |             |
 726:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 727:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 728:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 729:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 730:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 731:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 732:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 733:000 | DONE lbl | na 16 16 | 00625b |             | xt_semicolon                         
 734:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 735:000 | DONE ins | na 16 16 | 00625b | 84 1e       |                 sty.d 00001e         
 736:000 | DONE wsp | na 16 16 |        |             |
 737:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 738:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 739:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 740:000 | DONE ins | na 16 16 | 00625d | a0 06 00    |                 ldy.# 0006           
 741:000 | DONE ins | na 16 16 | 006260 | a5 00       |                 lda.d 000000         
 742:000 | DONE ins | na 16 16 | 006262 | 91 04       |                 sta.diy 000004       STA (WORKWORD),Y
 743:000 | DONE wsp | na 16 16 |        |             |
 744:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 745:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 746:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 747:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 748:000 | DONE ins | na 16 16 | 006264 | a9 60 00    |                 lda.# 60             opcode for RTS
 749:000 | DONE ins | na 16 16 | 006267 | 92 00       |                 sta.di 000000        STA (CP)
 750:000 | DONE ins | na 16 16 | 006269 | e6 00       |                 inc.d 000000         MSB will be overwritten
 751:000 | DONE wsp | na 16 16 |        |             |
 752:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 753:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 754:000 | DONE ins | na 16 16 | 00626b | a5 04       |                 lda.d 000004         
 755:000 | DONE ins | na 16 16 | 00626d | 85 02       |                 sta.d 000002         
 756:000 | DONE wsp | na 16 16 |        |             |
 757:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 758:000 | DONE ins | na 16 16 | 00626f | a4 1e       |                 ldy.d 00001e         
 759:000 | DONE wsp | na 16 16 |        |             |
 760:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 761:000 | DONE ins | na 16 16 | 006271 | 64 0e       |                 stz.d 00000e         
 762:000 | DONE wsp | na 16 16 |        |             |
 763:000 | DONE lbl | na 16 16 | 006273 |             | z_semicolon                          
 763:001 | DONE ins | na 16 16 | 006273 | 60          |                 rts                  
 764:000 | DONE wsp | na 16 16 |        |             |
 765:000 | DONE wsp | na 16 16 |        |             |
 766:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 767:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 768:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 769:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 770:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 771:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 772:000 | DONE lbl | na 16 16 | 006274 |             | xt_hash                              
 773:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 774:000 | DONE ins | na 16 16 | 006274 | 20 eb 64    |                 jsr 0064eb           ( ud addr )
 775:000 | DONE ins | na 16 16 | 006277 | 20 c2 62    |                 jsr 0062c2           ( ud u )
 776:000 | DONE ins | na 16 16 | 00627a | 20 a2 6c    |                 jsr 006ca2           ( rem ud )
 777:000 | DONE ins | na 16 16 | 00627d | 20 fc 6a    |                 jsr 006afc           ( ud rem )
 778:000 | DONE wsp | na 16 16 |        |             |
 779:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 780:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed
 781:000 | DONE ins | na 16 16 | 006280 | e2 20       |                 sep 20               
 781:001 | DONE ctl | na  8 16 |        |             |         .!a8
 782:000 | DONE ins | na  8 16 | 006282 | b9 04 7d    |                 lda.y 007d04         
 783:000 | DONE ins | na  8 16 | 006285 | c2 20       |                 rep 20               
 783:001 | DONE ctl | na 16 16 |        |             |         .!a16
 784:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 785:000 | DONE ins | na 16 16 | 006287 | 29 ff 00    |                 and.# 00ff           
 786:000 | DONE ins | na 16 16 | 00628a | a8          |                 tay                  ( ud char )
 787:000 | DONE wsp | na 16 16 |        |             |
 788:000 | DONE ins | na 16 16 | 00628b | 20 82 68    |                 jsr 006882           JSR/RTS
 789:000 | DONE wsp | na 16 16 |        |             |
 790:000 | DONE lbl | na 16 16 | 00628e |             | z_hash                               
 790:001 | DONE ins | na 16 16 | 00628e | 60          |                 rts                  
 791:000 | DONE wsp | na 16 16 |        |             |
 792:000 | DONE wsp | na 16 16 |        |             |
 793:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 794:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 795:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 796:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 797:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 798:000 | DONE lbl | na 16 16 | 00628f |             | xt_numbermore                        
 799:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 800:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 801:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 802:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 803:000 | DONE ins | na 16 16 | 00628f | a4 12       |                 ldy.d 000012         
 804:000 | DONE ins | na 16 16 | 006291 | 94 00       |                 sty.dx 00            ( addr addr )
 805:000 | DONE wsp | na 16 16 |        |             |
 806:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 807:000 | DONE ins | na 16 16 | 006293 | 20 f1 69    |                 jsr 0069f1           ( addr addr pad )
 808:000 | DONE wsp | na 16 16 |        |             |
 809:000 | DONE ins | na 16 16 | 006296 | 38          |                 sec                  
 810:000 | DONE ins | na 16 16 | 006297 | 98          |                 tya                  
 811:000 | DONE ins | na 16 16 | 006298 | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 812:000 | DONE ins | na 16 16 | 00629a | a8          |                 tay                  ( addr addr n )
 813:000 | DONE wsp | na 16 16 |        |             |
 814:000 | DONE ins | na 16 16 | 00629b | e8          |                 inx                  NIP
 815:000 | DONE ins | na 16 16 | 00629c | e8          |                 inx                  
 816:000 | DONE wsp | na 16 16 |        |             |
 817:000 | DONE lbl | na 16 16 | 00629d |             | z_numbermore                         
 817:001 | DONE ins | na 16 16 | 00629d | 60          |                 rts                  
 818:000 | DONE wsp | na 16 16 |        |             |
 819:000 | DONE wsp | na 16 16 |        |             |
 820:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 821:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 822:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 823:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 824:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 825:000 | DONE lbl | na 16 16 | 00629e |             | xt_hashs                             
 826:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 827:000 | DONE lbl | na 16 16 | 00629e |             | hashs_loop                           
 828:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 829:000 | DONE ins | na 16 16 | 00629e | 20 74 62    |                 jsr 006274           ( ud -- ud )
 830:000 | DONE wsp | na 16 16 |        |             |
 831:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 832:000 | DONE ins | na 16 16 | 0062a1 | 98          |                 tya                  
 833:000 | DONE ins | na 16 16 | 0062a2 | 15 00       |                 ora.dx 00            
 834:000 | DONE ins | na 16 16 | 0062a4 | d0 f8       |                 bne 00629e           
 835:000 | DONE wsp | na 16 16 |        |             |
 836:000 | DONE lbl | na 16 16 | 0062a6 |             | z_hashs                              
 836:001 | DONE ins | na 16 16 | 0062a6 | 60          |                 rts                  
 837:000 | DONE wsp | na 16 16 |        |             |
 838:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 839:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 840:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 841:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 842:000 | DONE lbl | na 16 16 | 0062a7 |             | xt_question                          
 843:000 | DONE ins | na 16 16 | 0062a7 | 20 c2 62    |                 jsr 0062c2           
 844:000 | DONE ins | na 16 16 | 0062aa | 20 a4 61    |                 jsr 0061a4           
 845:000 | DONE wsp | na 16 16 |        |             |
 846:000 | DONE lbl | na 16 16 | 0062ad |             | z_question                           
 846:001 | DONE ins | na 16 16 | 0062ad | 60          |                 rts                  
 847:000 | DONE wsp | na 16 16 |        |             |
 848:000 | DONE wsp | na 16 16 |        |             |
 849:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 850:000 | DONE cmt | na 16 16 |        |             | ; QDUP ( n -- 0 | n n ) X bytes / X cycles
 851:000 | DONE cmt | na 16 16 |        |             | ; If top element on Data Stack is not zero, duplicate it
 852:000 | DONE lbl | na 16 16 | 0062ae |             | xt_qdup                              
 853:000 | DONE ins | na 16 16 | 0062ae | 98          |                 tya                  
 854:000 | DONE ins | na 16 16 | 0062af | f0 04       |                 beq 0062b5           
 855:000 | DONE wsp | na 16 16 |        |             |
 856:000 | DONE ins | na 16 16 | 0062b1 | ca          |                 dex                  
 857:000 | DONE ins | na 16 16 | 0062b2 | ca          |                 dex                  
 858:000 | DONE ins | na 16 16 | 0062b3 | 94 00       |                 sty.dx 00            
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE lbl | na 16 16 | 0062b5 |             | z_qdup                               
 860:001 | DONE ins | na 16 16 | 0062b5 | 60          |                 rts                  
 861:000 | DONE wsp | na 16 16 |        |             |
 862:000 | DONE wsp | na 16 16 |        |             |
 863:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 864:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 865:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 866:000 | DONE lbl | na 16 16 | 0062b6 |             | xt_store                             
 867:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 868:000 | DONE ins | na 16 16 | 0062b6 | b5 00       |                 lda.dx 00            NOS has value
 869:000 | DONE ins | na 16 16 | 0062b8 | 99 00 00    |                 sta.y 0000           
 870:000 | DONE wsp | na 16 16 |        |             |
 871:000 | DONE ins | na 16 16 | 0062bb | b4 02       |                 ldy.dx 02            
 872:000 | DONE ins | na 16 16 | 0062bd | e8          |                 inx                  
 873:000 | DONE ins | na 16 16 | 0062be | e8          |                 inx                  
 874:000 | DONE ins | na 16 16 | 0062bf | e8          |                 inx                  
 875:000 | DONE ins | na 16 16 | 0062c0 | e8          |                 inx                  
 876:000 | DONE wsp | na 16 16 |        |             |
 877:000 | DONE lbl | na 16 16 | 0062c1 |             | z_store                              
 877:001 | DONE ins | na 16 16 | 0062c1 | 60          |                 rts                  
 878:000 | DONE wsp | na 16 16 |        |             |
 879:000 | DONE wsp | na 16 16 |        |             |
 880:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 881:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 882:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 883:000 | DONE lbl | na 16 16 | 0062c2 |             | xt_fetch                             
 884:000 | DONE ins | na 16 16 | 0062c2 | b9 00 00    |                 lda.y 0000           
 885:000 | DONE ins | na 16 16 | 0062c5 | a8          |                 tay                  
 886:000 | DONE wsp | na 16 16 |        |             |
 887:000 | DONE lbl | na 16 16 | 0062c6 |             | z_fetch                              
 887:001 | DONE ins | na 16 16 | 0062c6 | 60          |                 rts                  
 888:000 | DONE wsp | na 16 16 |        |             |
 889:000 | DONE wsp | na 16 16 |        |             |
 890:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 891:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 892:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 893:000 | DONE lbl | na 16 16 | 0062c7 |             | xt_brackettick                       
 894:000 | DONE ins | na 16 16 | 0062c7 | 20 df 63    |                 jsr 0063df           
 895:000 | DONE ins | na 16 16 | 0062ca | 4c a8 68    |                 jmp 0068a8           JSR/RTS
 896:000 | DONE lbl | na 16 16 | 0062cd |             | z_brackettick                        
 897:000 | DONE wsp | na 16 16 |        |             |
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 900:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 901:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 902:000 | DONE lbl | na 16 16 | 0062cd |             | xt_leftbracket                       
 903:000 | DONE ins | na 16 16 | 0062cd | 64 0e       |                 stz.d 00000e         
 904:000 | DONE lbl | na 16 16 | 0062cf |             | z_leftbracket                        
 904:001 | DONE ins | na 16 16 | 0062cf | 60          |                 rts                  
 905:000 | DONE wsp | na 16 16 |        |             |
 906:000 | DONE wsp | na 16 16 |        |             |
 907:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 908:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 909:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 910:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 911:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 912:000 | DONE lbl | na 16 16 | 0062d0 |             | xt_rightbracket                      
 913:000 | DONE ins | na 16 16 | 0062d0 | a9 01 00    |                 lda.# 0001           
 914:000 | DONE ins | na 16 16 | 0062d3 | 85 0e       |                 sta.d 00000e         
 915:000 | DONE wsp | na 16 16 |        |             |
 916:000 | DONE lbl | na 16 16 | 0062d5 |             | z_rightbracket                       
 916:001 | DONE ins | na 16 16 | 0062d5 | 60          |                 rts                  
 917:000 | DONE wsp | na 16 16 |        |             |
 918:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 919:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
 920:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 921:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
 922:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
 923:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
 924:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 925:000 | DONE lbl | na 16 16 | 0062d6 |             | xt_bracketchar                       
 926:000 | DONE ins | na 16 16 | 0062d6 | 20 58 65    |                 jsr 006558           
 927:000 | DONE ins | na 16 16 | 0062d9 | 20 a8 68    |                 jsr 0068a8           
 928:000 | DONE wsp | na 16 16 |        |             |
 929:000 | DONE lbl | na 16 16 | 0062dc |             | z_bracketchar                        
 929:001 | DONE ins | na 16 16 | 0062dc | 60          |                 rts                  
 930:000 | DONE wsp | na 16 16 |        |             |
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 933:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
 934:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
 935:000 | DONE lbl | na 16 16 | 0062dd |             | xt_backslash                         
 936:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 937:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
 938:000 | DONE ins | na 16 16 | 0062dd | a5 0a       |                 lda.d 00000a         
 939:000 | DONE ins | na 16 16 | 0062df | 85 0c       |                 sta.d 00000c         
 940:000 | DONE wsp | na 16 16 |        |             |
 941:000 | DONE lbl | na 16 16 | 0062e1 |             | z_backslash                          
 941:001 | DONE ins | na 16 16 | 0062e1 | 60          |                 rts                  
 942:000 | DONE wsp | na 16 16 |        |             |
 943:000 | DONE wsp | na 16 16 |        |             |
 944:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 945:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 946:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 947:000 | DONE lbl | na 16 16 | 0062e2 |             | xt_plus                              
 948:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 949:000 | DONE ins | na 16 16 | 0062e2 | 98          |                 tya                  
 950:000 | DONE ins | na 16 16 | 0062e3 | 18          |                 clc                  
 951:000 | DONE ins | na 16 16 | 0062e4 | 75 00       |                 adc.dx 00            
 952:000 | DONE ins | na 16 16 | 0062e6 | a8          |                 tay                  
 953:000 | DONE ins | na 16 16 | 0062e7 | e8          |                 inx                  
 954:000 | DONE ins | na 16 16 | 0062e8 | e8          |                 inx                  
 955:000 | DONE wsp | na 16 16 |        |             |
 956:000 | DONE lbl | na 16 16 | 0062e9 |             | z_plus                               
 956:001 | DONE ins | na 16 16 | 0062e9 | 60          |                 rts                  
 957:000 | DONE wsp | na 16 16 |        |             |
 958:000 | DONE wsp | na 16 16 |        |             |
 959:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 960:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 961:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 962:000 | DONE lbl | na 16 16 | 0062ea |             | xt_minus                             
 963:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 964:000 | DONE ins | na 16 16 | 0062ea | 98          |                 tya                  
 965:000 | DONE ins | na 16 16 | 0062eb | 49 ff ff    |                 eor.# 0ffff          
 966:000 | DONE wsp | na 16 16 |        |             |
 967:000 | DONE ins | na 16 16 | 0062ee | 38          |                 sec                  not CLC
 968:000 | DONE ins | na 16 16 | 0062ef | 75 00       |                 adc.dx 00            
 969:000 | DONE wsp | na 16 16 |        |             |
 970:000 | DONE ins | na 16 16 | 0062f1 | a8          |                 tay                  
 971:000 | DONE ins | na 16 16 | 0062f2 | e8          |                 inx                  
 972:000 | DONE ins | na 16 16 | 0062f3 | e8          |                 inx                  
 973:000 | DONE wsp | na 16 16 |        |             |
 974:000 | DONE lbl | na 16 16 | 0062f4 |             | z_minus                              
 974:001 | DONE ins | na 16 16 | 0062f4 | 60          |                 rts                  
 975:000 | DONE wsp | na 16 16 |        |             |
 976:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 977:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
 978:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
 979:000 | DONE lbl | na 16 16 | 0062f5 |             | xt_mrot                              
 980:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 981:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 982:000 | DONE ins | na 16 16 | 0062f5 | b5 02       |                 lda.dx 02            save a
 983:000 | DONE ins | na 16 16 | 0062f7 | 94 02       |                 sty.dx 02            move c to 3OS
 984:000 | DONE ins | na 16 16 | 0062f9 | b4 00       |                 ldy.dx 00            move b to TOS
 985:000 | DONE ins | na 16 16 | 0062fb | 95 00       |                 sta.dx 00            save a as NOS
 986:000 | DONE wsp | na 16 16 |        |             |
 987:000 | DONE lbl | na 16 16 | 0062fd |             | z_mrot                               
 987:001 | DONE ins | na 16 16 | 0062fd | 60          |                 rts                  
 988:000 | DONE wsp | na 16 16 |        |             |
 989:000 | DONE wsp | na 16 16 |        |             |
 990:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 991:000 | DONE cmt | na 16 16 |        |             | ; -TRAILING ( addr u -- addr u ) X bytes / X cycles
 992:000 | DONE cmt | na 16 16 |        |             | ; Remove any trailing blanks. Uses tmp3
 993:000 | DONE lbl | na 16 16 | 0062fe |             | xt_dtrailing                         
 994:000 | DONE cmt | na 16 16 |        |             |                 ; if u is zero, just return string
 995:000 | DONE ins | na 16 16 | 0062fe | 98          |                 tya                  force flag check
 996:000 | DONE ins | na 16 16 | 0062ff | f0 13       |                 beq 006314           
 997:000 | DONE wsp | na 16 16 |        |             |
 998:000 | DONE ins | na 16 16 | 006301 | b5 00       |                 lda.dx 00            
 999:000 | DONE ins | na 16 16 | 006303 | 85 1a       |                 sta.d 00001a         
1000:000 | DONE ins | na 16 16 | 006305 | 88          |                 dey                  convert length to index
1001:000 | DONE ins | na 16 16 | 006306 | e2 20       |                 sep 20               
1001:001 | DONE ctl | na  8 16 |        |             |         .!a8
1002:000 | DONE wsp | na  8 16 |        |             |
1003:000 | DONE lbl | na  8 16 | 006308 |             | dtrailing_loop                       
1004:000 | DONE ins | na  8 16 | 006308 | b1 1a       |                 lda.diy 00001a       
1005:000 | DONE ins | na  8 16 | 00630a | c9 20       |                 cmp.# 20             
1006:000 | DONE ins | na  8 16 | 00630c | d0 03       |                 bne 006311           
1007:000 | DONE ins | na  8 16 | 00630e | 88          |                 dey                  
1008:000 | DONE ins | na  8 16 | 00630f | 10 f7       |                 bpl 006308           fall through when done
1009:000 | DONE wsp | na  8 16 |        |             |
1010:000 | DONE lbl | na  8 16 | 006311 |             | dtrailing_done                       
1011:000 | DONE ins | na  8 16 | 006311 | c2 20       |                 rep 20               
1011:001 | DONE ctl | na 16 16 |        |             |         .!a16
1012:000 | DONE ins | na 16 16 | 006313 | c8          |                 iny                  convert index to length
1013:000 | DONE wsp | na 16 16 |        |             |
1014:000 | DONE lbl | na 16 16 | 006314 |             | z_dtrailing                          
1014:001 | DONE ins | na 16 16 | 006314 | 60          |                 rts                  
1015:000 | DONE wsp | na 16 16 |        |             |
1016:000 | DONE wsp | na 16 16 |        |             |
1017:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1018:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
1019:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
1020:000 | DONE lbl | na 16 16 | 006315 |             | xt_equal                             
1021:000 | DONE ins | na 16 16 | 006315 | 98          |                 tya                  
1022:000 | DONE ins | na 16 16 | 006316 | a0 00 00    |                 ldy.# 0000           default value is false
1023:000 | DONE wsp | na 16 16 |        |             |
1024:000 | DONE ins | na 16 16 | 006319 | d5 00       |                 cmp.dx 00            
1025:000 | DONE ins | na 16 16 | 00631b | d0 01       |                 bne 00631e           
1026:000 | DONE ins | na 16 16 | 00631d | 88          |                 dey                  wraps to 0FFFF (true)
1027:000 | DONE wsp | na 16 16 |        |             |
1028:000 | DONE lbl | na 16 16 | 00631e |             | equal_not                            
1029:000 | DONE ins | na 16 16 | 00631e | e8          |                 inx                  
1030:000 | DONE ins | na 16 16 | 00631f | e8          |                 inx                  
1031:000 | DONE wsp | na 16 16 |        |             |
1032:000 | DONE lbl | na 16 16 | 006320 |             | z_equal                              
1032:001 | DONE ins | na 16 16 | 006320 | 60          |                 rts                  
1033:000 | DONE wsp | na 16 16 |        |             |
1034:000 | DONE wsp | na 16 16 |        |             |
1035:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1036:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
1037:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
1038:000 | DONE lbl | na 16 16 | 006321 |             | xt_zero                              
1039:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1040:000 | DONE ins | na 16 16 | 006321 | ca          |                 dex                  
1041:000 | DONE ins | na 16 16 | 006322 | ca          |                 dex                  
1042:000 | DONE ins | na 16 16 | 006323 | 94 00       |                 sty.dx 00            
1043:000 | DONE ins | na 16 16 | 006325 | a0 00 00    |                 ldy.# 0000           
1044:000 | DONE wsp | na 16 16 |        |             |
1045:000 | DONE lbl | na 16 16 | 006328 |             | z_zero                               
1045:001 | DONE ins | na 16 16 | 006328 | 60          |                 rts                  
1046:000 | DONE wsp | na 16 16 |        |             |
1047:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1048:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
1049:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
1050:000 | DONE lbl | na 16 16 | 006329 |             | xt_zero-equal                        
1051:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1052:000 | DONE ins | na 16 16 | 006329 | 98          |                 tya                  force flag check
1053:000 | DONE ins | na 16 16 | 00632a | d0 05       |                 bne 006331           
1054:000 | DONE wsp | na 16 16 |        |             |
1055:000 | DONE ins | na 16 16 | 00632c | a0 ff ff    |                 ldy.# 0ffff          
1056:000 | DONE ins | na 16 16 | 00632f | 80 03       |                 bra 006334           
1057:000 | DONE lbl | na 16 16 | 006331 |             | ze_not_zero                          
1058:000 | DONE ins | na 16 16 | 006331 | a0 00 00    |                 ldy.# 0000           
1059:000 | DONE wsp | na 16 16 |        |             |
1060:000 | DONE lbl | na 16 16 | 006334 |             | z_zero-equal                         
1060:001 | DONE ins | na 16 16 | 006334 | 60          |                 rts                  
1061:000 | DONE wsp | na 16 16 |        |             |
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1064:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1065:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1066:000 | DONE lbl | na 16 16 | 006335 |             | xt_zero-less                         
1067:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1068:000 | DONE ins | na 16 16 | 006335 | 98          |                 tya                  force flag check
1069:000 | DONE ins | na 16 16 | 006336 | 30 05       |                 bmi 00633d           
1070:000 | DONE wsp | na 16 16 |        |             |
1071:000 | DONE ins | na 16 16 | 006338 | a0 00 00    |                 ldy.# 0000           
1072:000 | DONE ins | na 16 16 | 00633b | 80 03       |                 bra 006340           
1073:000 | DONE wsp | na 16 16 |        |             |
1074:000 | DONE lbl | na 16 16 | 00633d |             | zero-less-is-less                    
1075:000 | DONE ins | na 16 16 | 00633d | a0 ff ff    |                 ldy.# 0ffff          
1076:000 | DONE wsp | na 16 16 |        |             |
1077:000 | DONE lbl | na 16 16 | 006340 |             | z_zero-less                          
1077:001 | DONE ins | na 16 16 | 006340 | 60          |                 rts                  
1078:000 | DONE wsp | na 16 16 |        |             |
1079:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1080:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1081:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1082:000 | DONE lbl | na 16 16 | 006341 |             | xt_zero-notequal                     
1083:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1084:000 | DONE ins | na 16 16 | 006341 | 98          |                 tya                  force flag check
1085:000 | DONE ins | na 16 16 | 006342 | f0 05       |                 beq 006349           
1086:000 | DONE ins | na 16 16 | 006344 | a0 ff ff    |                 ldy.# 0ffff          
1087:000 | DONE ins | na 16 16 | 006347 | 80 03       |                 bra 00634c           
1088:000 | DONE lbl | na 16 16 | 006349 |             | zne_is_zero                          
1089:000 | DONE ins | na 16 16 | 006349 | a0 00 00    |                 ldy.# 0000           
1090:000 | DONE lbl | na 16 16 | 00634c |             | z_zero-notequal                      
1091:000 | DONE ins | na 16 16 | 00634c | 60          |                 rts                  
1092:000 | DONE wsp | na 16 16 |        |             |
1093:000 | DONE wsp | na 16 16 |        |             |
1094:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1095:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1096:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1097:000 | DONE lbl | na 16 16 | 00634d |             | xt_zero-more                         
1098:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1099:000 | DONE ins | na 16 16 | 00634d | a9 00 00    |                 lda.# 0000           default is false
1100:000 | DONE wsp | na 16 16 |        |             |
1101:000 | DONE ins | na 16 16 | 006350 | 88          |                 dey                  
1102:000 | DONE ins | na 16 16 | 006351 | 10 02       |                 bpl 006355           was at least 1
1103:000 | DONE wsp | na 16 16 |        |             |
1104:000 | DONE ins | na 16 16 | 006353 | 80 01       |                 bra 006356           nope, stays false
1105:000 | DONE wsp | na 16 16 |        |             |
1106:000 | DONE lbl | na 16 16 | 006355 |             | zero-more_true                       
1107:000 | DONE ins | na 16 16 | 006355 | 3a          |                 dec.a                wraps to 0ffff, true
1108:000 | DONE lbl | na 16 16 | 006356 |             | zero-more_done                       
1109:000 | DONE ins | na 16 16 | 006356 | a8          |                 tay                  
1110:000 | DONE wsp | na 16 16 |        |             |
1111:000 | DONE lbl | na 16 16 | 006357 |             | z_zero-more                          
1111:001 | DONE ins | na 16 16 | 006357 | 60          |                 rts                  
1112:000 | DONE wsp | na 16 16 |        |             |
1113:000 | DONE wsp | na 16 16 |        |             |
1114:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1115:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1116:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1117:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1118:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1119:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmpbranch
1120:000 | DONE lbl | na 16 16 | 006358 |             | xt_zbranch                           
1121:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1122:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1123:000 | DONE ins | na 16 16 | 006358 | f4 5f 63    |                 phe.# 00635f         
1124:000 | DONE ins | na 16 16 | 00635b | 20 16 76    |                 jsr 007616           
1125:000 | DONE wsp | na 16 16 |        |             |
1126:000 | DONE lbl | na 16 16 | 00635e |             | z_zbranch                            
1126:001 | DONE ins | na 16 16 | 00635e | 60          |                 rts                  
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE lbl | na 16 16 | 00635f |             | zbranch_rt                           
1129:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1130:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1131:000 | DONE ins | na 16 16 | 00635f | 98          |                 tya                  force flag check
1132:000 | DONE ins | na 16 16 | 006360 | f0 05       |                 beq 006367           flag is false (zero), so we branch
1133:000 | DONE wsp | na 16 16 |        |             |
1134:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1135:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1136:000 | DONE ins | na 16 16 | 006362 | 68          |                 pla                  
1137:000 | DONE ins | na 16 16 | 006363 | 1a          |                 inc.a                
1138:000 | DONE ins | na 16 16 | 006364 | 1a          |                 inc.a                
1139:000 | DONE wsp | na 16 16 |        |             |
1140:000 | DONE ins | na 16 16 | 006365 | 80 09       |                 bra 006370           
1141:000 | DONE wsp | na 16 16 |        |             |
1142:000 | DONE lbl | na 16 16 | 006367 |             | zb_zero                              
1143:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1144:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1145:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1146:000 | DONE ins | na 16 16 | 006367 | 68          |                 pla                  
1147:000 | DONE ins | na 16 16 | 006368 | 85 14       |                 sta.d 000014         
1148:000 | DONE ins | na 16 16 | 00636a | a0 01 00    |                 ldy.# 0001           
1149:000 | DONE ins | na 16 16 | 00636d | b1 14       |                 lda.diy 000014       
1150:000 | DONE wsp | na 16 16 |        |             |
1151:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1152:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1153:000 | DONE ins | na 16 16 | 00636f | 3a          |                 dec.a                
1154:000 | DONE wsp | na 16 16 |        |             |
1155:000 | DONE lbl | na 16 16 | 006370 |             | zb_done                              
1156:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1157:000 | DONE ins | na 16 16 | 006370 | 48          |                 pha                  
1158:000 | DONE wsp | na 16 16 |        |             |
1159:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1160:000 | DONE ins | na 16 16 | 006371 | b4 00       |                 ldy.dx 00            
1161:000 | DONE ins | na 16 16 | 006373 | e8          |                 inx                  
1162:000 | DONE ins | na 16 16 | 006374 | e8          |                 inx                  
1163:000 | DONE wsp | na 16 16 |        |             |
1164:000 | DONE ins | na 16 16 | 006375 | 60          |                 rts                  
1165:000 | DONE wsp | na 16 16 |        |             |
1166:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1167:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1168:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1169:000 | DONE lbl | na 16 16 | 006376 |             | xt_one                               
1170:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1171:000 | DONE ins | na 16 16 | 006376 | ca          |                 dex                  
1172:000 | DONE ins | na 16 16 | 006377 | ca          |                 dex                  
1173:000 | DONE ins | na 16 16 | 006378 | 94 00       |                 sty.dx 00            
1174:000 | DONE ins | na 16 16 | 00637a | a0 01 00    |                 ldy.# 0001           
1175:000 | DONE wsp | na 16 16 |        |             |
1176:000 | DONE lbl | na 16 16 | 00637d |             | z_one                                
1176:001 | DONE ins | na 16 16 | 00637d | 60          |                 rts                  
1177:000 | DONE wsp | na 16 16 |        |             |
1178:000 | DONE wsp | na 16 16 |        |             |
1179:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1180:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1181:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1182:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1183:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1184:000 | DONE lbl | na 16 16 | 00637e |             | xt_one-minus                         
1185:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1186:000 | DONE ins | na 16 16 | 00637e | 88          |                 dey                  
1187:000 | DONE lbl | na 16 16 | 00637f |             | z_one-minus                          
1187:001 | DONE ins | na 16 16 | 00637f | 60          |                 rts                  
1188:000 | DONE wsp | na 16 16 |        |             |
1189:000 | DONE wsp | na 16 16 |        |             |
1190:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1191:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1192:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1193:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1194:000 | DONE lbl | na 16 16 | 006380 |             | xt_one-plus                          
1195:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1196:000 | DONE ins | na 16 16 | 006380 | c8          |                 iny                  
1197:000 | DONE lbl | na 16 16 | 006381 |             | z_one-plus                           
1197:001 | DONE ins | na 16 16 | 006381 | 60          |                 rts                  
1198:000 | DONE wsp | na 16 16 |        |             |
1199:000 | DONE wsp | na 16 16 |        |             |
1200:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1201:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1202:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1203:000 | DONE lbl | na 16 16 | 006382 |             | xt_two                               
1204:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1205:000 | DONE ins | na 16 16 | 006382 | ca          |                 dex                  
1206:000 | DONE ins | na 16 16 | 006383 | ca          |                 dex                  
1207:000 | DONE ins | na 16 16 | 006384 | 94 00       |                 sty.dx 00            
1208:000 | DONE ins | na 16 16 | 006386 | a0 02 00    |                 ldy.# 0002           
1209:000 | DONE wsp | na 16 16 |        |             |
1210:000 | DONE lbl | na 16 16 | 006389 |             | z_two                                
1210:001 | DONE ins | na 16 16 | 006389 | 60          |                 rts                  
1211:000 | DONE wsp | na 16 16 |        |             |
1212:000 | DONE wsp | na 16 16 |        |             |
1213:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1214:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1215:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1216:000 | DONE lbl | na 16 16 | 00638a |             | xt_two-star                          
1217:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1218:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1219:000 | DONE ins | na 16 16 | 00638a | 98          |                 tya                  
1220:000 | DONE ins | na 16 16 | 00638b | 0a          |                 asl.a                
1221:000 | DONE ins | na 16 16 | 00638c | a8          |                 tay                  
1222:000 | DONE wsp | na 16 16 |        |             |
1223:000 | DONE lbl | na 16 16 | 00638d |             | z_two-star                           
1223:001 | DONE ins | na 16 16 | 00638d | 60          |                 rts                  
1224:000 | DONE wsp | na 16 16 |        |             |
1225:000 | DONE wsp | na 16 16 |        |             |
1226:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1227:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1228:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1229:000 | DONE lbl | na 16 16 | 00638e |             | xt_2drop                             
1230:000 | DONE ins | na 16 16 | 00638e | b4 02       |                 ldy.dx 02            
1231:000 | DONE ins | na 16 16 | 006390 | e8          |                 inx                  
1232:000 | DONE ins | na 16 16 | 006391 | e8          |                 inx                  
1233:000 | DONE ins | na 16 16 | 006392 | e8          |                 inx                  
1234:000 | DONE ins | na 16 16 | 006393 | e8          |                 inx                  
1235:000 | DONE wsp | na 16 16 |        |             |
1236:000 | DONE lbl | na 16 16 | 006394 |             | z_2drop                              
1236:001 | DONE ins | na 16 16 | 006394 | 60          |                 rts                  
1237:000 | DONE wsp | na 16 16 |        |             |
1238:000 | DONE wsp | na 16 16 |        |             |
1239:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1240:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1241:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1242:000 | DONE wsp | na 16 16 |        |             |
1243:000 | DONE lbl | na 16 16 | 006395 |             | xt_2dup                              
1244:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1245:000 | DONE ins | na 16 16 | 006395 | ca          |                 dex                  
1246:000 | DONE ins | na 16 16 | 006396 | ca          |                 dex                  
1247:000 | DONE ins | na 16 16 | 006397 | ca          |                 dex                  
1248:000 | DONE ins | na 16 16 | 006398 | ca          |                 dex                  
1249:000 | DONE ins | na 16 16 | 006399 | 94 02       |                 sty.dx 02            
1250:000 | DONE ins | na 16 16 | 00639b | b5 04       |                 lda.dx 04            
1251:000 | DONE ins | na 16 16 | 00639d | 95 00       |                 sta.dx 00            
1252:000 | DONE wsp | na 16 16 |        |             |
1253:000 | DONE lbl | na 16 16 | 00639f |             | z_2dup                               
1253:001 | DONE ins | na 16 16 | 00639f | 60          |                 rts                  
1254:000 | DONE wsp | na 16 16 |        |             |
1255:000 | DONE wsp | na 16 16 |        |             |
1256:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1257:000 | DONE cmt | na 16 16 |        |             | ; 2OVER ( d1 d2 -- d1 d2 d1 ) X bytes / X cycles
1258:000 | DONE cmt | na 16 16 |        |             | ; Copy cell pair that is NOS to TOS
1259:000 | DONE lbl | na 16 16 | 0063a0 |             | xt_2over                             
1260:000 | DONE ins | na 16 16 | 0063a0 | ca          |                 dex                  
1261:000 | DONE ins | na 16 16 | 0063a1 | ca          |                 dex                  
1262:000 | DONE ins | na 16 16 | 0063a2 | ca          |                 dex                  
1263:000 | DONE ins | na 16 16 | 0063a3 | ca          |                 dex                  
1264:000 | DONE ins | na 16 16 | 0063a4 | 94 02       |                 sty.dx 02            
1265:000 | DONE ins | na 16 16 | 0063a6 | b4 06       |                 ldy.dx 06            
1266:000 | DONE ins | na 16 16 | 0063a8 | b5 08       |                 lda.dx 08            
1267:000 | DONE ins | na 16 16 | 0063aa | 95 00       |                 sta.dx 00            
1268:000 | DONE wsp | na 16 16 |        |             |
1269:000 | DONE lbl | na 16 16 | 0063ac |             | z_2over                              
1269:001 | DONE ins | na 16 16 | 0063ac | 60          |                 rts                  
1270:000 | DONE wsp | na 16 16 |        |             |
1271:000 | DONE wsp | na 16 16 |        |             |
1272:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1273:000 | DONE cmt | na 16 16 |        |             | ; 2R@ ( -- n1 n2 )(R: n1 n2 -- n1 n2 )  X bytes / X cycles
1274:000 | DONE cmt | na 16 16 |        |             | ; Copy two words off the Return Stack.  This is R> R> 2DUP >R >R SWAP but we
1275:000 | DONE cmt | na 16 16 |        |             | ; can do this a lot faster in assembler This routine may not be natively
1276:000 | DONE cmt | na 16 16 |        |             | ; compiled; because it accessed by a JSR, the first element on the Return Stack
1277:000 | DONE cmt | na 16 16 |        |             | ; (LDA.S 01) is the return address.
1278:000 | DONE lbl | na 16 16 | 0063ad |             | xt_tworfetch                         
1279:000 | DONE cmt | na 16 16 |        |             |                 ; make room on the Data Stack
1280:000 | DONE ins | na 16 16 | 0063ad | ca          |                 dex                  
1281:000 | DONE ins | na 16 16 | 0063ae | ca          |                 dex                  
1282:000 | DONE ins | na 16 16 | 0063af | ca          |                 dex                  
1283:000 | DONE ins | na 16 16 | 0063b0 | ca          |                 dex                  
1284:000 | DONE ins | na 16 16 | 0063b1 | 94 02       |                 sty.dx 02            
1285:000 | DONE wsp | na 16 16 |        |             |
1286:000 | DONE ins | na 16 16 | 0063b3 | a3 03       |                 lda.s 03             get top of Return Stack
1287:000 | DONE ins | na 16 16 | 0063b5 | a8          |                 tay                  
1288:000 | DONE ins | na 16 16 | 0063b6 | a3 05       |                 lda.s 05             get next on Return Stack
1289:000 | DONE ins | na 16 16 | 0063b8 | 95 00       |                 sta.dx 00            
1290:000 | DONE wsp | na 16 16 |        |             |
1291:000 | DONE lbl | na 16 16 | 0063ba |             | z_tworfetch                          
1291:001 | DONE ins | na 16 16 | 0063ba | 60          |                 rts                  
1292:000 | DONE wsp | na 16 16 |        |             |
1293:000 | DONE wsp | na 16 16 |        |             |
1294:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1295:000 | DONE cmt | na 16 16 |        |             | ; 2SWAP ( d1 d2 -- d2 d1 ) X bytes / X cycles
1296:000 | DONE cmt | na 16 16 |        |             | ; Swap two double cell numbers on the Data Stack.
1297:000 | DONE lbl | na 16 16 | 0063bb |             | xt_2swap                             
1298:000 | DONE ins | na 16 16 | 0063bb | 5a          |                 phy                  hi word of TOS
1299:000 | DONE ins | na 16 16 | 0063bc | b4 02       |                 ldy.dx 02            hi word of NOS
1300:000 | DONE ins | na 16 16 | 0063be | 68          |                 pla                  
1301:000 | DONE ins | na 16 16 | 0063bf | 95 02       |                 sta.dx 02            
1302:000 | DONE wsp | na 16 16 |        |             |
1303:000 | DONE ins | na 16 16 | 0063c1 | b5 00       |                 lda.dx 00            lo word of TOS
1304:000 | DONE ins | na 16 16 | 0063c3 | 48          |                 pha                  
1305:000 | DONE ins | na 16 16 | 0063c4 | b5 04       |                 lda.dx 04            lo word of NOS
1306:000 | DONE ins | na 16 16 | 0063c6 | 95 00       |                 sta.dx 00            
1307:000 | DONE ins | na 16 16 | 0063c8 | 68          |                 pla                  
1308:000 | DONE ins | na 16 16 | 0063c9 | 95 04       |                 sta.dx 04            
1309:000 | DONE wsp | na 16 16 |        |             |
1310:000 | DONE lbl | na 16 16 | 0063cb |             | z_2swap                              
1310:001 | DONE ins | na 16 16 | 0063cb | 60          |                 rts                  
1311:000 | DONE wsp | na 16 16 |        |             |
1312:000 | DONE wsp | na 16 16 |        |             |
1313:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1314:000 | DONE cmt | na 16 16 |        |             | ; 2VARIABLE ( "name" -- ) X bytes / X cycles
1315:000 | DONE cmt | na 16 16 |        |             | ; Create a variable with space for a double celled word. This can be realized in
1316:000 | DONE cmt | na 16 16 |        |             | ; Forth as either CREATE 2 CELLS ALLOT or just CREATE 0 , 0 ,
1317:000 | DONE cmt | na 16 16 |        |             | ; We use the second variant, letting CREATE do the hard work
1318:000 | DONE cmt | na 16 16 |        |             | ; TODO see if it is faster to use Y as an index and increase by four
1319:000 | DONE lbl | na 16 16 | 0063cc |             | xt_2variable                         
1320:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1321:000 | DONE ins | na 16 16 | 0063cc | 20 fd 65    |                 jsr 0065fd           
1322:000 | DONE wsp | na 16 16 |        |             |
1323:000 | DONE ins | na 16 16 | 0063cf | a9 00 00    |                 lda.# 0000           
1324:000 | DONE ins | na 16 16 | 0063d2 | 92 00       |                 sta.di 000000        
1325:000 | DONE ins | na 16 16 | 0063d4 | e6 00       |                 inc.d 000000         
1326:000 | DONE ins | na 16 16 | 0063d6 | e6 00       |                 inc.d 000000         
1327:000 | DONE ins | na 16 16 | 0063d8 | 92 00       |                 sta.di 000000        
1328:000 | DONE ins | na 16 16 | 0063da | e6 00       |                 inc.d 000000         
1329:000 | DONE ins | na 16 16 | 0063dc | e6 00       |                 inc.d 000000         
1330:000 | DONE wsp | na 16 16 |        |             |
1331:000 | DONE lbl | na 16 16 | 0063de |             | z_2variable                          
1331:001 | DONE ins | na 16 16 | 0063de | 60          |                 rts                  
1332:000 | DONE wsp | na 16 16 |        |             |
1333:000 | DONE wsp | na 16 16 |        |             |
1334:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1335:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1336:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1337:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1338:000 | DONE lbl | na 16 16 | 0063df |             | xt_tick                              
1339:000 | DONE ins | na 16 16 | 0063df | 20 0a 6a    |                 jsr 006a0a           ( -- addr u )
1340:000 | DONE wsp | na 16 16 |        |             |
1341:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1342:000 | DONE ins | na 16 16 | 0063e2 | 98          |                 tya                  force flag check
1343:000 | DONE ins | na 16 16 | 0063e3 | d0 06       |                 bne 0063eb           
1344:000 | DONE wsp | na 16 16 |        |             |
1345:000 | DONE ins | na 16 16 | 0063e5 | a9 2d 7c    |                 lda.# 007c2d         
1346:000 | DONE ins | na 16 16 | 0063e8 | 4c 37 76    |                 jmp 007637           
1347:000 | DONE wsp | na 16 16 |        |             |
1348:000 | DONE lbl | na 16 16 | 0063eb |             | tick_have_word                       
1349:000 | DONE ins | na 16 16 | 0063eb | 20 bb 67    |                 jsr 0067bb           ( addr u -- nt)
1350:000 | DONE ins | na 16 16 | 0063ee | 98          |                 tya                  force flag check
1351:000 | DONE wsp | na 16 16 |        |             |
1352:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1353:000 | DONE ins | na 16 16 | 0063ef | d0 06       |                 bne 0063f7           
1354:000 | DONE wsp | na 16 16 |        |             |
1355:000 | DONE ins | na 16 16 | 0063f1 | a9 ca 7c    |                 lda.# 007cca         
1356:000 | DONE ins | na 16 16 | 0063f4 | 4c 37 76    |                 jmp 007637           
1357:000 | DONE wsp | na 16 16 |        |             |
1358:000 | DONE lbl | na 16 16 | 0063f7 |             | tick_have_nt                         
1359:000 | DONE ins | na 16 16 | 0063f7 | 20 32 69    |                 jsr 006932           ( nt -- xt )
1360:000 | DONE wsp | na 16 16 |        |             |
1361:000 | DONE lbl | na 16 16 | 0063fa |             | z_tick                               
1361:001 | DONE ins | na 16 16 | 0063fa | 60          |                 rts                  
1362:000 | DONE wsp | na 16 16 |        |             |
1363:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1364:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1365:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1366:000 | DONE lbl | na 16 16 | 0063fb |             | xt_abortq                            
1367:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1368:000 | DONE ins | na 16 16 | 0063fb | 20 19 6b    |                 jsr 006b19           save string
1369:000 | DONE wsp | na 16 16 |        |             |
1370:000 | DONE ins | na 16 16 | 0063fe | f4 05 64    |                 phe.# 006405         compile run-time aspect
1371:000 | DONE ins | na 16 16 | 006401 | 20 16 76    |                 jsr 007616           
1372:000 | DONE wsp | na 16 16 |        |             |
1373:000 | DONE ins | na 16 16 | 006404 | 60          |                 rts                  
1374:000 | DONE wsp | na 16 16 |        |             |
1375:000 | DONE lbl | na 16 16 | 006405 |             | abortq_rt                            
1376:000 | DONE cmt | na 16 16 |        |             |                 ; we land here with ( f addr u )
1377:000 | DONE ins | na 16 16 | 006405 | b5 02       |                 lda.dx 02            get flag as 3OS
1378:000 | DONE ins | na 16 16 | 006407 | f0 06       |                 beq 00640f           if FALSE, we're done
1379:000 | DONE wsp | na 16 16 |        |             |
1380:000 | DONE cmt | na 16 16 |        |             |                 ; if TRUE, we print string and ABORT
1381:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we want to inform user we're aborting
1382:000 | DONE ins | na 16 16 | 006409 | 20 81 6c    |                 jsr 006c81           
1383:000 | DONE ins | na 16 16 | 00640c | 4c 9b 60    |                 jmp 00609b           not JSR because we never come back
1384:000 | DONE wsp | na 16 16 |        |             |
1385:000 | DONE lbl | na 16 16 | 00640f |             | abortq_done                          
1386:000 | DONE cmt | na 16 16 |        |             |                 ; drop the three entries from the Data Stack
1387:000 | DONE ins | na 16 16 | 00640f | b4 04       |                 ldy.dx 04            fourth on the stack
1388:000 | DONE wsp | na 16 16 |        |             |
1389:000 | DONE cmt | na 16 16 |        |             |                 ; this is the same size, but three cycles faster than six INX
1390:000 | DONE cmt | na 16 16 |        |             |                 ; instructions
1391:000 | DONE ins | na 16 16 | 006411 | 8a          |                 txa                  
1392:000 | DONE ins | na 16 16 | 006412 | 18          |                 clc                  
1393:000 | DONE ins | na 16 16 | 006413 | 69 06 00    |                 adc.# 0006           
1394:000 | DONE ins | na 16 16 | 006416 | aa          |                 tax                  
1395:000 | DONE wsp | na 16 16 |        |             |
1396:000 | DONE lbl | na 16 16 | 006417 |             | z_abortq                             
1396:001 | DONE ins | na 16 16 | 006417 | 60          |                 rts                  
1397:000 | DONE wsp | na 16 16 |        |             |
1398:000 | DONE wsp | na 16 16 |        |             |
1399:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1400:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1401:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1402:000 | DONE lbl | na 16 16 | 006418 |             | xt_abs                               
1403:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1404:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1405:000 | DONE ins | na 16 16 | 006418 | 98          |                 tya                  force flag test
1406:000 | DONE ins | na 16 16 | 006419 | 10 05       |                 bpl 006420           positive number is easy
1407:000 | DONE wsp | na 16 16 |        |             |
1408:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1409:000 | DONE ins | na 16 16 | 00641b | 49 ff ff    |                 eor.# 0ffff          
1410:000 | DONE ins | na 16 16 | 00641e | 1a          |                 inc.a                
1411:000 | DONE ins | na 16 16 | 00641f | a8          |                 tay                  
1412:000 | DONE wsp | na 16 16 |        |             |
1413:000 | DONE lbl | na 16 16 | 006420 |             | z_abs                                
1413:001 | DONE ins | na 16 16 | 006420 | 60          |                 rts                  
1414:000 | DONE wsp | na 16 16 |        |             |
1415:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1416:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1417:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1418:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1419:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1420:000 | DONE lbl | na 16 16 | 006421 |             | xt_accept                            
1421:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1422:000 | DONE ins | na 16 16 | 006421 | 98          |                 tya                  force flag test
1423:000 | DONE ins | na 16 16 | 006422 | d0 03       |                 bne 006427           
1424:000 | DONE wsp | na 16 16 |        |             |
1425:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1426:000 | DONE ins | na 16 16 | 006424 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1427:000 | DONE ins | na 16 16 | 006425 | e8          |                 inx                  
1428:000 | DONE wsp | na 16 16 |        |             |
1429:000 | DONE ins | na 16 16 | 006426 | 60          |                 rts                  
1430:000 | DONE wsp | na 16 16 |        |             |
1431:000 | DONE lbl | na 16 16 | 006427 |             | accept_nonzero                       
1432:000 | DONE ins | na 16 16 | 006427 | b5 00       |                 lda.dx 00            address of buffer is NOS
1433:000 | DONE ins | na 16 16 | 006429 | 85 16       |                 sta.d 000016         
1434:000 | DONE ins | na 16 16 | 00642b | e8          |                 inx                  NIP
1435:000 | DONE ins | na 16 16 | 00642c | e8          |                 inx                  
1436:000 | DONE wsp | na 16 16 |        |             |
1437:000 | DONE ins | na 16 16 | 00642d | 84 18       |                 sty.d 000018         Save max number of chars in tmp2
1438:000 | DONE ins | na 16 16 | 00642f | a0 00 00    |                 ldy.# 0000           Use Y as counter
1439:000 | DONE ins | na 16 16 | 006432 | e2 20       |                 sep 20               
1439:001 | DONE ctl | na  8 16 |        |             |         .!a8
1440:000 | DONE wsp | na  8 16 |        |             |
1441:000 | DONE lbl | na  8 16 | 006434 |             | accept_loop                          
1442:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
1443:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1444:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
1445:000 | DONE ins | na  8 16 | 006434 | 20 45 60    |                 jsr 006045           
1446:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1447:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
1448:000 | DONE ins | na  8 16 | 006437 | c9 0a       |                 cmp.# AscLF          
1449:000 | DONE ins | na  8 16 | 006439 | f0 44       |                 beq 00647f           
1450:000 | DONE ins | na  8 16 | 00643b | c9 0d       |                 cmp.# AscCR          
1451:000 | DONE ins | na  8 16 | 00643d | f0 40       |                 beq 00647f           
1452:000 | DONE wsp | na  8 16 |        |             |
1453:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
1454:000 | DONE ins | na  8 16 | 00643f | c9 08       |                 cmp.# AscBS          
1455:000 | DONE ins | na  8 16 | 006441 | f0 44       |                 beq 006487           
1456:000 | DONE ins | na  8 16 | 006443 | c9 7f       |                 cmp.# AscDEL         
1457:000 | DONE ins | na  8 16 | 006445 | f0 40       |                 beq 006487           
1458:000 | DONE wsp | na  8 16 |        |             |
1459:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1460:000 | DONE ins | na  8 16 | 006447 | c9 03       |                 cmp.# AscCC          
1461:000 | DONE ins | na  8 16 | 006449 | d0 03       |                 bne 00644e           
1462:000 | DONE ins | na  8 16 | 00644b | 4c 9b 60    |                 jmp 00609b           
1463:000 | DONE lbl | na  8 16 | 00644e |             | @                                    
1464:000 | DONE ins | na  8 16 | 00644e | c9 1b       |                 cmp.# AscESC         
1465:000 | DONE ins | na  8 16 | 006450 | d0 03       |                 bne 006455           
1466:000 | DONE ins | na  8 16 | 006452 | 4c 9b 60    |                 jmp 00609b           
1467:000 | DONE lbl | na  8 16 | 006455 |             | @                                    
1468:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1469:000 | DONE ins | na  8 16 | 006455 | c9 10       |                 cmp.# AscCP          
1470:000 | DONE ins | na  8 16 | 006457 | d0 0c       |                 bne 006465           
1471:000 | DONE ins | na  8 16 | 006459 | c2 20       |                 rep 20               
1471:001 | DONE ctl | na 16 16 |        |             |         .!a16
1472:000 | DONE ins | na 16 16 | 00645b | a9 e2 7c    |                 lda.# 007ce2         
1473:000 | DONE ins | na 16 16 | 00645e | 20 3d 76    |                 jsr 00763d           
1474:000 | DONE ins | na 16 16 | 006461 | e2 20       |                 sep 20               
1474:001 | DONE ctl | na  8 16 |        |             |         .!a8
1475:000 | DONE ins | na  8 16 | 006463 | 80 cf       |                 bra 006434           
1476:000 | DONE lbl | na  8 16 | 006465 |             | @                                    
1477:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1478:000 | DONE ins | na  8 16 | 006465 | c9 0e       |                 cmp.# AscCN          
1479:000 | DONE ins | na  8 16 | 006467 | d0 0c       |                 bne 006475           
1480:000 | DONE ins | na  8 16 | 006469 | c2 20       |                 rep 20               
1480:001 | DONE ctl | na 16 16 |        |             |         .!a16
1481:000 | DONE ins | na 16 16 | 00646b | a9 f5 7c    |                 lda.# 007cf5         
1482:000 | DONE ins | na 16 16 | 00646e | 20 3d 76    |                 jsr 00763d           
1483:000 | DONE ins | na 16 16 | 006471 | e2 20       |                 sep 20               
1483:001 | DONE ctl | na  8 16 |        |             |         .!a8
1484:000 | DONE ins | na  8 16 | 006473 | 80 bf       |                 bra 006434           
1485:000 | DONE wsp | na  8 16 |        |             |
1486:000 | DONE lbl | na  8 16 | 006475 |             | @                                    
1487:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
1488:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
1489:000 | DONE ins | na  8 16 | 006475 | 20 34 60    |                 jsr 006034           echo character
1490:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1491:000 | DONE ins | na  8 16 | 006478 | 91 08       |                 sta.diy 000008       STA (CIB),Y
1492:000 | DONE ins | na  8 16 | 00647a | c8          |                 iny                  
1493:000 | DONE ins | na  8 16 | 00647b | c4 18       |                 cpy.d 000018         reached character limit?
1494:000 | DONE ins | na  8 16 | 00647d | d0 b5       |                 bne 006434           fall thru if buffer limit reached
1495:000 | DONE wsp | na  8 16 |        |             |
1496:000 | DONE lbl | na  8 16 | 00647f |             | accept_eol                           
1497:000 | DONE ins | na  8 16 | 00647f | 84 0a       |                 sty.d 00000a         Y contains number of chars accepted already
1498:000 | DONE ins | na  8 16 | 006481 | c2 20       |                 rep 20               
1498:001 | DONE ctl | na 16 16 |        |             |         .!a16
1499:000 | DONE ins | na 16 16 | 006483 | 20 3c 6c    |                 jsr 006c3c           print final space
1500:000 | DONE ins | na 16 16 | 006486 | 60          |                 rts                  this is the actual return of the routine
1501:000 | DONE wsp | na 16 16 |        |             |
1502:000 | DONE lbl | na 16 16 | 006487 |             | accept_bs                            
1503:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1504:000 | DONE ins | na  8 16 | 006487 | c0 00 00    |                 cpy.# 0000           buffer empty?
1505:000 | DONE ins | na  8 16 | 00648a | d0 06       |                 bne 006492           
1506:000 | DONE wsp | na  8 16 |        |             |
1507:000 | DONE ins | na  8 16 | 00648c | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
1508:000 | DONE ins | na  8 16 | 00648e | 20 34 60    |                 jsr 006034           
1509:000 | DONE ins | na  8 16 | 006491 | c8          |                 iny                  
1510:000 | DONE lbl | na  8 16 | 006492 |             | @                                    
1511:000 | DONE ins | na  8 16 | 006492 | 88          |                 dey                  
1512:000 | DONE ins | na  8 16 | 006493 | a9 08       |                 lda.# AscBS          move back one
1513:000 | DONE ins | na  8 16 | 006495 | 20 34 60    |                 jsr 006034           
1514:000 | DONE ins | na  8 16 | 006498 | a9 20       |                 lda.# AscSP          print a space (rubout)
1515:000 | DONE ins | na  8 16 | 00649a | 20 34 60    |                 jsr 006034           
1516:000 | DONE ins | na  8 16 | 00649d | a9 08       |                 lda.# AscBS          move back over space
1517:000 | DONE ins | na  8 16 | 00649f | 20 34 60    |                 jsr 006034           
1518:000 | DONE wsp | na  8 16 |        |             |
1519:000 | DONE ins | na  8 16 | 0064a2 | 80 90       |                 bra 006434           
1520:000 | DONE wsp | na  8 16 |        |             |
1521:000 | DONE lbl | na  8 16 | 0064a4 |             | z_accept                             
1521:001 | DONE ins | na  8 16 | 0064a4 | 60          |                 rts                  
1522:000 | DONE wsp | na  8 16 |        |             |
1523:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1524:000 | DONE cmt | na  8 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1525:000 | DONE cmt | na  8 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1526:000 | DONE cmt | na  8 16 |        |             | ; instead of BRA to make sure we have the range.
1527:000 | DONE cmt | na  8 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1528:000 | DONE lbl | na  8 16 | 0064a5 |             | xt_again                             
1529:000 | DONE wsp | na  8 16 |        |             |
1530:000 | DONE cmt | na  8 16 |        |             |                 ; Add the opcode for a JMP
1531:000 | DONE ins | na  8 16 | 0064a5 | e2 20       |                 sep 20               
1531:001 | DONE ctl | na  8 16 |        |             |         .!a8
1532:000 | DONE ins | na  8 16 | 0064a7 | a9 4c       |                 lda.# 4c             
1533:000 | DONE ins | na  8 16 | 0064a9 | 92 00       |                 sta.di 000000        STA (CP)
1534:000 | DONE ins | na  8 16 | 0064ab | c2 20       |                 rep 20               
1534:001 | DONE ctl | na 16 16 |        |             |         .!a16
1535:000 | DONE ins | na 16 16 | 0064ad | e6 00       |                 inc.d 000000         
1536:000 | DONE wsp | na 16 16 |        |             |
1537:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1538:000 | DONE ins | na 16 16 | 0064af | 98          |                 tya                  
1539:000 | DONE ins | na 16 16 | 0064b0 | 92 00       |                 sta.di 000000        
1540:000 | DONE ins | na 16 16 | 0064b2 | e6 00       |                 inc.d 000000         
1541:000 | DONE ins | na 16 16 | 0064b4 | e6 00       |                 inc.d 000000         
1542:000 | DONE wsp | na 16 16 |        |             |
1543:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1544:000 | DONE ins | na 16 16 | 0064b6 | b4 00       |                 ldy.dx 00            
1545:000 | DONE ins | na 16 16 | 0064b8 | e8          |                 inx                  
1546:000 | DONE ins | na 16 16 | 0064b9 | e8          |                 inx                  
1547:000 | DONE wsp | na 16 16 |        |             |
1548:000 | DONE lbl | na 16 16 | 0064ba |             | z_again                              
1548:001 | DONE ins | na 16 16 | 0064ba | 60          |                 rts                  
1549:000 | DONE wsp | na 16 16 |        |             |
1550:000 | DONE wsp | na 16 16 |        |             |
1551:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1552:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1553:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1554:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1555:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1556:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1557:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1558:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1559:000 | DONE lbl | na 16 16 | 0064bb |             | xt_allot                             
1560:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1561:000 | DONE ins | na 16 16 | 0064bb | 98          |                 tya                  force flag check
1562:000 | DONE ins | na 16 16 | 0064bc | f0 21       |                 beq 0064df           zero bytes, don't do anything
1563:000 | DONE ins | na 16 16 | 0064be | 30 12       |                 bmi 0064d2           free memory instead of reserving it
1564:000 | DONE wsp | na 16 16 |        |             |
1565:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1566:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1567:000 | DONE ins | na 16 16 | 0064c0 | 18          |                 clc                  
1568:000 | DONE ins | na 16 16 | 0064c1 | 65 00       |                 adc.d 000000         create new CP
1569:000 | DONE ins | na 16 16 | 0064c3 | b0 07       |                 bcs 0064cc           oops, we've wrapped
1570:000 | DONE wsp | na 16 16 |        |             |
1571:000 | DONE ins | na 16 16 | 0064c5 | a8          |                 tay                  save copy of new CP
1572:000 | DONE wsp | na 16 16 |        |             |
1573:000 | DONE ins | na 16 16 | 0064c6 | 38          |                 sec                  
1574:000 | DONE ins | na 16 16 | 0064c7 | e9 ff 5f    |                 sbc.# 005fff         
1575:000 | DONE ins | na 16 16 | 0064ca | 30 11       |                 bmi 0064dd           oops, fall thru if beyond max RAM
1576:000 | DONE wsp | na 16 16 |        |             |
1577:000 | DONE lbl | na 16 16 | 0064cc |             | allot_error                          
1578:000 | DONE ins | na 16 16 | 0064cc | a9 8e 7b    |                 lda.# 007b8e         
1579:000 | DONE ins | na 16 16 | 0064cf | 4c 37 76    |                 jmp 007637           
1580:000 | DONE wsp | na 16 16 |        |             |
1581:000 | DONE lbl | na 16 16 | 0064d2 |             | allot_minus                          
1582:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1583:000 | DONE ins | na 16 16 | 0064d2 | 38          |                 sec                  
1584:000 | DONE ins | na 16 16 | 0064d3 | e5 00       |                 sbc.d 000000         
1585:000 | DONE ins | na 16 16 | 0064d5 | 90 f5       |                 bcc 0064cc           oops, we've wrapped
1586:000 | DONE wsp | na 16 16 |        |             |
1587:000 | DONE ins | na 16 16 | 0064d7 | a8          |                 tay                  
1588:000 | DONE wsp | na 16 16 |        |             |
1589:000 | DONE ins | na 16 16 | 0064d8 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1590:000 | DONE ins | na 16 16 | 0064db | 30 ef       |                 bmi 0064cc           oops, gone too far back
1591:000 | DONE wsp | na 16 16 |        |             |
1592:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1593:000 | DONE lbl | na 16 16 | 0064dd |             | allot_done                           
1594:000 | DONE ins | na 16 16 | 0064dd | 84 00       |                 sty.d 000000         new compiler pointer
1595:000 | DONE lbl | na 16 16 | 0064df |             | allot_real_gone                      
1596:000 | DONE ins | na 16 16 | 0064df | b4 00       |                 ldy.dx 00            DROP
1597:000 | DONE ins | na 16 16 | 0064e1 | e8          |                 inx                  
1598:000 | DONE ins | na 16 16 | 0064e2 | e8          |                 inx                  
1599:000 | DONE wsp | na 16 16 |        |             |
1600:000 | DONE lbl | na 16 16 | 0064e3 |             | z_allot                              
1600:001 | DONE ins | na 16 16 | 0064e3 | 60          |                 rts                  
1601:000 | DONE wsp | na 16 16 |        |             |
1602:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1603:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1604:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1605:000 | DONE lbl | na 16 16 | 0064e4 |             | xt_and                               
1606:000 | DONE ins | na 16 16 | 0064e4 | 98          |                 tya                  
1607:000 | DONE ins | na 16 16 | 0064e5 | 35 00       |                 and.dx 00            
1608:000 | DONE ins | na 16 16 | 0064e7 | a8          |                 tay                  
1609:000 | DONE wsp | na 16 16 |        |             |
1610:000 | DONE ins | na 16 16 | 0064e8 | e8          |                 inx                  NIP
1611:000 | DONE ins | na 16 16 | 0064e9 | e8          |                 inx                  
1612:000 | DONE wsp | na 16 16 |        |             |
1613:000 | DONE lbl | na 16 16 | 0064ea |             | z_and                                
1613:001 | DONE ins | na 16 16 | 0064ea | 60          |                 rts                  
1614:000 | DONE wsp | na 16 16 |        |             |
1615:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1616:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1617:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1618:000 | DONE lbl | na 16 16 | 0064eb |             | xt_base                              
1619:000 | DONE ins | na 16 16 | 0064eb | ca          |                 dex                  
1620:000 | DONE ins | na 16 16 | 0064ec | ca          |                 dex                  
1621:000 | DONE ins | na 16 16 | 0064ed | 94 00       |                 sty.dx 00            
1622:000 | DONE wsp | na 16 16 |        |             |
1623:000 | DONE ins | na 16 16 | 0064ef | a0 10 00    |                 ldy.# 000010         
1624:000 | DONE wsp | na 16 16 |        |             |
1625:000 | DONE lbl | na 16 16 | 0064f2 |             | z_base                               
1625:001 | DONE ins | na 16 16 | 0064f2 | 60          |                 rts                  
1626:000 | DONE wsp | na 16 16 |        |             |
1627:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1628:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1629:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1630:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1631:000 | DONE lbl | na 16 16 | 0064f3 |             | xt_bell                              
1632:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1633:000 | DONE ins | na 16 16 | 0064f3 | a9 07 00    |                 lda.# AscBELL        
1634:000 | DONE ins | na 16 16 | 0064f6 | 20 34 60    |                 jsr 006034           
1635:000 | DONE wsp | na 16 16 |        |             |
1636:000 | DONE lbl | na 16 16 | 0064f9 |             | z_bell                               
1636:001 | DONE ins | na 16 16 | 0064f9 | 60          |                 rts                  
1637:000 | DONE wsp | na 16 16 |        |             |
1638:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1639:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1640:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1641:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1642:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1643:000 | DONE lbl | na 16 16 | 0064fa |             | xt_begin                             
1644:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1645:000 | DONE ins | na 16 16 | 0064fa | ca          |                 dex                  
1646:000 | DONE ins | na 16 16 | 0064fb | ca          |                 dex                  
1647:000 | DONE ins | na 16 16 | 0064fc | 94 00       |                 sty.dx 00            
1648:000 | DONE wsp | na 16 16 |        |             |
1649:000 | DONE ins | na 16 16 | 0064fe | a4 00       |                 ldy.d 000000         
1650:000 | DONE wsp | na 16 16 |        |             |
1651:000 | DONE lbl | na 16 16 | 006500 |             | z_begin                              
1651:001 | DONE ins | na 16 16 | 006500 | 60          |                 rts                  
1652:000 | DONE wsp | na 16 16 |        |             |
1653:000 | DONE wsp | na 16 16 |        |             |
1654:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1655:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1656:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1657:000 | DONE lbl | na 16 16 | 006501 |             | xt_bl                                
1658:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1659:000 | DONE ins | na 16 16 | 006501 | ca          |                 dex                  
1660:000 | DONE ins | na 16 16 | 006502 | ca          |                 dex                  
1661:000 | DONE ins | na 16 16 | 006503 | 94 00       |                 sty.dx 00            
1662:000 | DONE ins | na 16 16 | 006505 | a0 20 00    |                 ldy.# AscSP          
1663:000 | DONE wsp | na 16 16 |        |             |
1664:000 | DONE lbl | na 16 16 | 006508 |             | z_bl                                 
1664:001 | DONE ins | na 16 16 | 006508 | 60          |                 rts                  
1665:000 | DONE wsp | na 16 16 |        |             |
1666:000 | DONE wsp | na 16 16 |        |             |
1667:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1668:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1669:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1670:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1671:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler. Uses tmptos
1672:000 | DONE lbl | na 16 16 | 006509 |             | xt_bounds                            
1673:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1674:000 | DONE ins | na 16 16 | 006509 | 84 1e       |                 sty.d 00001e         
1675:000 | DONE ins | na 16 16 | 00650b | b4 00       |                 ldy.dx 00            addr now TOS
1676:000 | DONE wsp | na 16 16 |        |             |
1677:000 | DONE ins | na 16 16 | 00650d | 18          |                 clc                  
1678:000 | DONE ins | na 16 16 | 00650e | 65 1e       |                 adc.d 00001e         
1679:000 | DONE ins | na 16 16 | 006510 | 95 00       |                 sta.dx 00            addr+u now NOS
1680:000 | DONE wsp | na 16 16 |        |             |
1681:000 | DONE lbl | na 16 16 | 006512 |             | z_bounds                             
1681:001 | DONE ins | na 16 16 | 006512 | 60          |                 rts                  
1682:000 | DONE wsp | na 16 16 |        |             |
1683:000 | DONE wsp | na 16 16 |        |             |
1684:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1685:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1686:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. This word was adapted from Tali Forth. It
1687:000 | DONE cmt | na 16 16 |        |             | ; uses tmpbranch
1688:000 | DONE lbl | na 16 16 | 006513 |             | xt_branch                            
1689:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1690:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1691:000 | DONE ins | na 16 16 | 006513 | f4 1a 65    |                 phe.# 00651a         
1692:000 | DONE ins | na 16 16 | 006516 | 20 16 76    |                 jsr 007616           
1693:000 | DONE wsp | na 16 16 |        |             |
1694:000 | DONE lbl | na 16 16 | 006519 |             | z_branch                             
1694:001 | DONE ins | na 16 16 | 006519 | 60          |                 rts                  
1695:000 | DONE wsp | na 16 16 |        |             |
1696:000 | DONE lbl | na 16 16 | 00651a |             | branch_rt                            
1697:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1698:000 | DONE ins | na 16 16 | 00651a | 68          |                 pla                  
1699:000 | DONE ins | na 16 16 | 00651b | 85 14       |                 sta.d 000014         
1700:000 | DONE wsp | na 16 16 |        |             |
1701:000 | DONE ins | na 16 16 | 00651d | 5a          |                 phy                  avoid using temp variables
1702:000 | DONE ins | na 16 16 | 00651e | a0 01 00    |                 ldy.# 0001           
1703:000 | DONE ins | na 16 16 | 006521 | b1 14       |                 lda.diy 000014       LDA (TMPBRANCH),Y
1704:000 | DONE ins | na 16 16 | 006523 | 7a          |                 ply                  
1705:000 | DONE wsp | na 16 16 |        |             |
1706:000 | DONE ins | na 16 16 | 006524 | 3a          |                 dec.a                
1707:000 | DONE ins | na 16 16 | 006525 | 48          |                 pha                  put target address back on Return Stack
1708:000 | DONE wsp | na 16 16 |        |             |
1709:000 | DONE ins | na 16 16 | 006526 | 60          |                 rts                  
1710:000 | DONE wsp | na 16 16 |        |             |
1711:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1712:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1713:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1714:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
1715:000 | DONE lbl | na 16 16 | 006527 |             | xt_bye                               
1716:000 | DONE ins | na 16 16 | 006527 | 58          |                 cli                  
1717:000 | DONE ins | na 16 16 | 006528 | 00 00       |                 brk 00               status byte 00 required for assembler
1718:000 | DONE wsp | na 16 16 |        |             |
1719:000 | DONE lbl | na 16 16 | 00652a |             | z_bye                                
1719:001 | DONE ins | na 16 16 | 00652a | 60          |                 rts                  dummy for compiling, never reached
1720:000 | DONE wsp | na 16 16 |        |             |
1721:000 | DONE wsp | na 16 16 |        |             |
1722:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1723:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1724:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
1725:000 | DONE lbl | na 16 16 | 00652b |             | xt_c-comma                           
1726:000 | DONE ins | na 16 16 | 00652b | 98          |                 tya                  
1727:000 | DONE ins | na 16 16 | 00652c | e2 20       |                 sep 20               
1727:001 | DONE ctl | na  8 16 |        |             |         .!a8
1728:000 | DONE ins | na  8 16 | 00652e | 92 00       |                 sta.di 000000        STA (CP)
1729:000 | DONE ins | na  8 16 | 006530 | c2 20       |                 rep 20               
1729:001 | DONE ctl | na 16 16 |        |             |         .!a16
1730:000 | DONE ins | na 16 16 | 006532 | e6 00       |                 inc.d 000000         quick version of 1 ALLOT
1731:000 | DONE wsp | na 16 16 |        |             |
1732:000 | DONE ins | na 16 16 | 006534 | b4 00       |                 ldy.dx 00            
1733:000 | DONE ins | na 16 16 | 006536 | e8          |                 inx                  
1734:000 | DONE ins | na 16 16 | 006537 | e8          |                 inx                  
1735:000 | DONE wsp | na 16 16 |        |             |
1736:000 | DONE lbl | na 16 16 | 006538 |             | z_c-comma                            
1736:001 | DONE ins | na 16 16 | 006538 | 60          |                 rts                  
1737:000 | DONE wsp | na 16 16 |        |             |
1738:000 | DONE wsp | na 16 16 |        |             |
1739:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1740:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1741:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
1742:000 | DONE lbl | na 16 16 | 006539 |             | xt_c-fetch                           
1743:000 | DONE ins | na 16 16 | 006539 | e2 20       |                 sep 20               
1743:001 | DONE ctl | na  8 16 |        |             |         .!a8
1744:000 | DONE ins | na  8 16 | 00653b | b9 00 00    |                 lda.y 0000           
1745:000 | DONE ins | na  8 16 | 00653e | c2 20       |                 rep 20               
1745:001 | DONE ctl | na 16 16 |        |             |         .!a16
1746:000 | DONE ins | na 16 16 | 006540 | 29 ff 00    |                 and.# 00ff           
1747:000 | DONE ins | na 16 16 | 006543 | a8          |                 tay                  
1748:000 | DONE wsp | na 16 16 |        |             |
1749:000 | DONE lbl | na 16 16 | 006544 |             | z_c-fetch                            
1749:001 | DONE ins | na 16 16 | 006544 | 60          |                 rts                  
1750:000 | DONE wsp | na 16 16 |        |             |
1751:000 | DONE wsp | na 16 16 |        |             |
1752:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1753:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1754:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
1755:000 | DONE lbl | na 16 16 | 006545 |             | xt_c-store                           
1756:000 | DONE ins | na 16 16 | 006545 | b5 00       |                 lda.dx 00            
1757:000 | DONE ins | na 16 16 | 006547 | e2 20       |                 sep 20               
1757:001 | DONE ctl | na  8 16 |        |             |         .!a8
1758:000 | DONE ins | na  8 16 | 006549 | 99 00 00    |                 sta.y 0000           
1759:000 | DONE ins | na  8 16 | 00654c | c2 20       |                 rep 20               
1759:001 | DONE ctl | na 16 16 |        |             |         .!a16
1760:000 | DONE ins | na 16 16 | 00654e | b4 02       |                 ldy.dx 02            
1761:000 | DONE ins | na 16 16 | 006550 | e8          |                 inx                  
1762:000 | DONE ins | na 16 16 | 006551 | e8          |                 inx                  
1763:000 | DONE ins | na 16 16 | 006552 | e8          |                 inx                  
1764:000 | DONE ins | na 16 16 | 006553 | e8          |                 inx                  
1765:000 | DONE wsp | na 16 16 |        |             |
1766:000 | DONE lbl | na 16 16 | 006554 |             | z_c-store                            
1766:001 | DONE ins | na 16 16 | 006554 | 60          |                 rts                  
1767:000 | DONE wsp | na 16 16 |        |             |
1768:000 | DONE wsp | na 16 16 |        |             |
1769:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1770:000 | DONE cmt | na 16 16 |        |             | ; CELL+ ( u -- u+2 ) X bytes / X cycles
1771:000 | DONE cmt | na 16 16 |        |             | ; Add the size of one cell to the value on top of the stack. Since this is
1772:000 | DONE cmt | na 16 16 |        |             | ; a 16-bit cell size, we add two
1773:000 | DONE lbl | na 16 16 | 006555 |             | xt_cellplus                          
1774:000 | DONE ins | na 16 16 | 006555 | c8          |                 iny                  
1775:000 | DONE ins | na 16 16 | 006556 | c8          |                 iny                  
1776:000 | DONE lbl | na 16 16 | 006557 |             | z_cellplus                           
1776:001 | DONE ins | na 16 16 | 006557 | 60          |                 rts                  
1777:000 | DONE wsp | na 16 16 |        |             |
1778:000 | DONE wsp | na 16 16 |        |             |
1779:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1780:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1781:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1782:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1783:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
1784:000 | DONE wsp | na 16 16 |        |             |
1785:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1786:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1787:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
1788:000 | DONE lbl | na 16 16 | 006558 |             | xt_char                              
1789:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1790:000 | DONE ins | na 16 16 | 006558 | 20 0a 6a    |                 jsr 006a0a           ( -- addr u )
1791:000 | DONE wsp | na 16 16 |        |             |
1792:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
1793:000 | DONE ins | na 16 16 | 00655b | 98          |                 tya                  force flag check
1794:000 | DONE ins | na 16 16 | 00655c | d0 06       |                 bne 006564           
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE ins | na 16 16 | 00655e | a9 2d 7c    |                 lda.# 007c2d         
1797:000 | DONE ins | na 16 16 | 006561 | 4c 37 76    |                 jmp 007637           
1798:000 | DONE wsp | na 16 16 |        |             |
1799:000 | DONE lbl | na 16 16 | 006564 |             | char_got_char                        
1800:000 | DONE ins | na 16 16 | 006564 | b4 00       |                 ldy.dx 00            get addr from NOS
1801:000 | DONE ins | na 16 16 | 006566 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1802:000 | DONE ins | na 16 16 | 006569 | 29 ff 00    |                 and.# 00ff           
1803:000 | DONE ins | na 16 16 | 00656c | a8          |                 tay                  
1804:000 | DONE wsp | na 16 16 |        |             |
1805:000 | DONE ins | na 16 16 | 00656d | e8          |                 inx                  
1806:000 | DONE ins | na 16 16 | 00656e | e8          |                 inx                  
1807:000 | DONE wsp | na 16 16 |        |             |
1808:000 | DONE lbl | na 16 16 | 00656f |             | z_char                               
1808:001 | DONE ins | na 16 16 | 00656f | 60          |                 rts                  
1809:000 | DONE wsp | na 16 16 |        |             |
1810:000 | DONE wsp | na 16 16 |        |             |
1811:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1812:000 | DONE cmt | na 16 16 |        |             | ; CHARPLUS ( u -- u+1 ) X bytes / X cycles
1813:000 | DONE cmt | na 16 16 |        |             | ; Adds the size of a character to the value on top of the stack. Since our
1814:000 | DONE cmt | na 16 16 |        |             | ; character size is one, this is the same code as 1+, see there
1815:000 | DONE wsp | na 16 16 |        |             |
1816:000 | DONE wsp | na 16 16 |        |             |
1817:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1818:000 | DONE cmt | na 16 16 |        |             | ; CHARS ( u -- u ) X bytes / X cycles
1819:000 | DONE cmt | na 16 16 |        |             | ; Return the size in bytes of the number of characters on the top of the stack.
1820:000 | DONE cmt | na 16 16 |        |             | ; In this case, does nothing
1821:000 | DONE lbl | na 16 16 | 006570 |             | xt_chars                             
1822:000 | DONE wsp | na 16 16 |        |             |
1823:000 | DONE ins | na 16 16 | 006570 | ea          |                 nop                  
1824:000 | DONE lbl | na 16 16 | 006571 |             | z_chars                              
1824:001 | DONE ins | na 16 16 | 006571 | 60          |                 rts                  
1825:000 | DONE wsp | na 16 16 |        |             |
1826:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1827:000 | DONE cmt | na 16 16 |        |             | ; CMOVE ( addr1 addr2 u -- ) X bytes / X cycles
1828:000 | DONE cmt | na 16 16 |        |             | ; Move characters from a lower to a higher address. Because of the danger of
1829:000 | DONE cmt | na 16 16 |        |             | ; overlap, we must start at the end of the source string (addr1+u) and copy
1830:000 | DONE cmt | na 16 16 |        |             | ; byte-by-byte to the end of the destination address (addr2+u). This is what the
1831:000 | DONE cmt | na 16 16 |        |             | ; MVP instruction is for. Use MOVE if you are not sure what to do.
1832:000 | DONE cmt | na 16 16 |        |             | ;       =====* source
1833:000 | DONE cmt | na 16 16 |        |             | ;          ====* destination
1834:000 | DONE lbl | na 16 16 | 006572 |             | xt_cmove                             
1835:000 | DONE cmt | na 16 16 |        |             |                 ; We start at the end of the blocks, so we have to increase both
1836:000 | DONE cmt | na 16 16 |        |             |                 ; addr1 and addr2 by u
1837:000 | DONE ins | na 16 16 | 006572 | 98          |                 tya                  
1838:000 | DONE ins | na 16 16 | 006573 | 18          |                 clc                  
1839:000 | DONE ins | na 16 16 | 006574 | 75 02       |                 adc.dx 02            source, goes in X
1840:000 | DONE ins | na 16 16 | 006576 | 3a          |                 dec.a                convert length to index
1841:000 | DONE ins | na 16 16 | 006577 | 95 02       |                 sta.dx 02            
1842:000 | DONE wsp | na 16 16 |        |             |
1843:000 | DONE ins | na 16 16 | 006579 | 98          |                 tya                  
1844:000 | DONE ins | na 16 16 | 00657a | 18          |                 clc                  
1845:000 | DONE ins | na 16 16 | 00657b | 75 00       |                 adc.dx 00            destination, goes in Y
1846:000 | DONE ins | na 16 16 | 00657d | 3a          |                 dec.a                convert length to index
1847:000 | DONE wsp | na 16 16 |        |             |
1848:000 | DONE ins | na 16 16 | 00657e | 86 1c       |                 stx.d 00001c         keep DSP safe
1849:000 | DONE wsp | na 16 16 |        |             |
1850:000 | DONE ins | na 16 16 | 006580 | 88          |                 dey                  
1851:000 | DONE ins | na 16 16 | 006581 | 5a          |                 phy                  save number of bytes to transfer
1852:000 | DONE wsp | na 16 16 |        |             |
1853:000 | DONE ins | na 16 16 | 006582 | a8          |                 tay                  destination now in Y
1854:000 | DONE wsp | na 16 16 |        |             |
1855:000 | DONE ins | na 16 16 | 006583 | b5 02       |                 lda.dx 02            get source address
1856:000 | DONE ins | na 16 16 | 006585 | aa          |                 tax                  
1857:000 | DONE wsp | na 16 16 |        |             |
1858:000 | DONE ins | na 16 16 | 006586 | 68          |                 pla                  retrieve number of bytes to transfer
1859:000 | DONE ins | na 16 16 | 006587 | 44 00 00    |                 mvp 0                
1859:001 | DONE ctl | na 16 16 |        |             |            
1860:000 | DONE wsp | na 16 16 |        |             |
1861:000 | DONE ins | na 16 16 | 00658a | a6 1c       |                 ldx.d 00001c         
1862:000 | DONE ins | na 16 16 | 00658c | b4 04       |                 ldy.dx 04            
1863:000 | DONE wsp | na 16 16 |        |             |
1864:000 | DONE ins | na 16 16 | 00658e | 8a          |                 txa                  It's worth addition for three cells dropped
1865:000 | DONE ins | na 16 16 | 00658f | 18          |                 clc                  
1866:000 | DONE ins | na 16 16 | 006590 | 69 06 00    |                 adc.# 0006           
1867:000 | DONE ins | na 16 16 | 006593 | aa          |                 tax                  
1868:000 | DONE wsp | na 16 16 |        |             |
1869:000 | DONE lbl | na 16 16 | 006594 |             | z_cmove                              
1869:001 | DONE ins | na 16 16 | 006594 | 60          |                 rts                  
1870:000 | DONE wsp | na 16 16 |        |             |
1871:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1872:000 | DONE cmt | na 16 16 |        |             | ; CMOVE> ( addr1 addr 2 u -- ) X bytes / X cycles
1873:000 | DONE cmt | na 16 16 |        |             | ; Move characters from a higher to a lower address. Because of the danger of
1874:000 | DONE cmt | na 16 16 |        |             | ; overlap, we must start at the beginning of the source (addr1) to copy it
1875:000 | DONE cmt | na 16 16 |        |             | ; byte-by-byte to the beginning of the destination (addr2). This is what the MVN
1876:000 | DONE cmt | na 16 16 |        |             | ; instruction is for. Use MOVE if you are not sure what to do.
1877:000 | DONE cmt | na 16 16 |        |             | ;          *==== source
1878:000 | DONE cmt | na 16 16 |        |             | ;       *===== destination
1879:000 | DONE lbl | na 16 16 | 006595 |             | xt_cmoveup                           
1880:000 | DONE ins | na 16 16 | 006595 | 86 1c       |                 stx.d 00001c         keep DSP safe
1881:000 | DONE wsp | na 16 16 |        |             |
1882:000 | DONE ins | na 16 16 | 006597 | 88          |                 dey                  
1883:000 | DONE ins | na 16 16 | 006598 | 5a          |                 phy                  save number of bytes to transfer
1884:000 | DONE wsp | na 16 16 |        |             |
1885:000 | DONE ins | na 16 16 | 006599 | b5 00       |                 lda.dx 00            get destination address
1886:000 | DONE ins | na 16 16 | 00659b | a8          |                 tay                  
1887:000 | DONE wsp | na 16 16 |        |             |
1888:000 | DONE ins | na 16 16 | 00659c | b5 02       |                 lda.dx 02            get source address
1889:000 | DONE ins | na 16 16 | 00659e | aa          |                 tax                  
1890:000 | DONE wsp | na 16 16 |        |             |
1891:000 | DONE ins | na 16 16 | 00659f | 68          |                 pla                  retrieve number of bytes to transfer
1892:000 | DONE ins | na 16 16 | 0065a0 | 54 00 00    |                 mvn 0                
1892:001 | DONE ctl | na 16 16 |        |             |            
1893:000 | DONE wsp | na 16 16 |        |             |
1894:000 | DONE ins | na 16 16 | 0065a3 | a6 1c       |                 ldx.d 00001c         
1895:000 | DONE ins | na 16 16 | 0065a5 | b4 04       |                 ldy.dx 04            
1896:000 | DONE wsp | na 16 16 |        |             |
1897:000 | DONE ins | na 16 16 | 0065a7 | 8a          |                 txa                  It's worth addition for three cells dropped
1898:000 | DONE ins | na 16 16 | 0065a8 | 18          |                 clc                  
1899:000 | DONE ins | na 16 16 | 0065a9 | 69 06 00    |                 adc.# 0006           
1900:000 | DONE ins | na 16 16 | 0065ac | aa          |                 tax                  
1901:000 | DONE wsp | na 16 16 |        |             |
1902:000 | DONE lbl | na 16 16 | 0065ad |             | z_cmoveup                            
1902:001 | DONE ins | na 16 16 | 0065ad | 60          |                 rts                  
1903:000 | DONE wsp | na 16 16 |        |             |
1904:000 | DONE wsp | na 16 16 |        |             |
1905:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1906:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1907:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1908:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1909:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1910:000 | DONE lbl | na 16 16 | 0065ae |             | xt_compile-only                      
1911:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1912:000 | DONE ins | na 16 16 | 0065ae | a9 04 00    |                 lda.# CO             
1913:000 | DONE ins | na 16 16 | 0065b1 | eb          |                 xba                  flags are MSB
1914:000 | DONE ins | na 16 16 | 0065b2 | 12 02       |                 ora.di 000002        ORA (DP)
1915:000 | DONE ins | na 16 16 | 0065b4 | 92 02       |                 sta.di 000002        
1916:000 | DONE wsp | na 16 16 |        |             |
1917:000 | DONE lbl | na 16 16 | 0065b6 |             | z_compile-only                       
1917:001 | DONE ins | na 16 16 | 0065b6 | 60          |                 rts                  
1918:000 | DONE wsp | na 16 16 |        |             |
1919:000 | DONE wsp | na 16 16 |        |             |
1920:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1921:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1922:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1923:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1924:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1925:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1926:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1927:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1928:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1929:000 | DONE cmt | na 16 16 |        |             | ; TODO currently just compiles subroutine jumps
1930:000 | DONE lbl | na 16 16 | 0065b7 |             | xt_compilecomma                      
1931:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1932:000 | DONE wsp | na 16 16 |        |             |
1933:000 | DONE lbl | na 16 16 | 0065b7 |             | compile_as_code                      
1934:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1935:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1936:000 | DONE cmt | na 16 16 |        |             |                 ; TODO consider special cases:
1937:000 | DONE cmt | na 16 16 |        |             |                 ;  - >R R> R@ should strip PLA/PHA if native compiled
1938:000 | DONE cmt | na 16 16 |        |             |                 ;  - Don't compile comments
1939:000 | DONE wsp | na 16 16 |        |             |
1940:000 | DONE lbl | na 16 16 | 0065b7 |             | compile_as_jump                      
1941:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump.
1942:000 | DONE ins | na 16 16 | 0065b7 | e2 20       |                 sep 20               
1942:001 | DONE ctl | na  8 16 |        |             |         .!a8
1943:000 | DONE ins | na  8 16 | 0065b9 | a9 20       |                 lda.# 20             opcode for JSR
1944:000 | DONE ins | na  8 16 | 0065bb | 92 00       |                 sta.di 000000        STA (CP)
1945:000 | DONE ins | na  8 16 | 0065bd | c2 20       |                 rep 20               
1945:001 | DONE ctl | na 16 16 |        |             |         .!a16
1946:000 | DONE ins | na 16 16 | 0065bf | e6 00       |                 inc.d 000000         
1947:000 | DONE wsp | na 16 16 |        |             |
1948:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1949:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1950:000 | DONE ins | na 16 16 | 0065c1 | 98          |                 tya                  
1951:000 | DONE ins | na 16 16 | 0065c2 | 92 00       |                 sta.di 000000        
1952:000 | DONE ins | na 16 16 | 0065c4 | e6 00       |                 inc.d 000000         
1953:000 | DONE ins | na 16 16 | 0065c6 | e6 00       |                 inc.d 000000         
1954:000 | DONE wsp | na 16 16 |        |             |
1955:000 | DONE ins | na 16 16 | 0065c8 | b4 00       |                 ldy.dx 00            
1956:000 | DONE ins | na 16 16 | 0065ca | e8          |                 inx                  
1957:000 | DONE ins | na 16 16 | 0065cb | e8          |                 inx                  
1958:000 | DONE wsp | na 16 16 |        |             |
1959:000 | DONE lbl | na 16 16 | 0065cc |             | z_compilecomma                       
1959:001 | DONE ins | na 16 16 | 0065cc | 60          |                 rts                  
1960:000 | DONE wsp | na 16 16 |        |             |
1961:000 | DONE wsp | na 16 16 |        |             |
1962:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1963:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1964:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1965:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1966:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1967:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1968:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1969:000 | DONE lbl | na 16 16 | 0065cd |             | xt_constant                          
1970:000 | DONE ins | na 16 16 | 0065cd | 20 fd 65    |                 jsr 0065fd           
1971:000 | DONE wsp | na 16 16 |        |             |
1972:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1973:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1974:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1975:000 | DONE ins | na 16 16 | 0065d0 | a5 00       |                 lda.d 000000         
1976:000 | DONE ins | na 16 16 | 0065d2 | 3a          |                 dec.a                
1977:000 | DONE ins | na 16 16 | 0065d3 | 3a          |                 dec.a                
1978:000 | DONE ins | na 16 16 | 0065d4 | 85 16       |                 sta.d 000016         
1979:000 | DONE wsp | na 16 16 |        |             |
1980:000 | DONE ins | na 16 16 | 0065d6 | a9 9a 75    |                 lda.# 00759a         
1981:000 | DONE ins | na 16 16 | 0065d9 | 92 16       |                 sta.di 000016        STA (TMP1)
1982:000 | DONE wsp | na 16 16 |        |             |
1983:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1984:000 | DONE ins | na 16 16 | 0065db | 98          |                 tya                  there is no "sty.di cp"
1985:000 | DONE ins | na 16 16 | 0065dc | 92 00       |                 sta.di 000000        
1986:000 | DONE ins | na 16 16 | 0065de | e6 00       |                 inc.d 000000         
1987:000 | DONE ins | na 16 16 | 0065e0 | e6 00       |                 inc.d 000000         
1988:000 | DONE wsp | na 16 16 |        |             |
1989:000 | DONE ins | na 16 16 | 0065e2 | b4 00       |                 ldy.dx 00            DROP
1990:000 | DONE ins | na 16 16 | 0065e4 | e8          |                 inx                  
1991:000 | DONE ins | na 16 16 | 0065e5 | e8          |                 inx                  
1992:000 | DONE wsp | na 16 16 |        |             |
1993:000 | DONE lbl | na 16 16 | 0065e6 |             | z_constant                           
1993:001 | DONE ins | na 16 16 | 0065e6 | 60          |                 rts                  
1994:000 | DONE wsp | na 16 16 |        |             |
1995:000 | DONE wsp | na 16 16 |        |             |
1996:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1997:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1998:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1999:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
2000:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
2001:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
2002:000 | DONE lbl | na 16 16 | 0065e7 |             | xt_count                             
2003:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2004:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2005:000 | DONE ins | na 16 16 | 0065e7 | 98          |                 tya                  
2006:000 | DONE ins | na 16 16 | 0065e8 | 1a          |                 inc.a                String address starts one char later
2007:000 | DONE wsp | na 16 16 |        |             |
2008:000 | DONE ins | na 16 16 | 0065e9 | ca          |                 dex                  
2009:000 | DONE ins | na 16 16 | 0065ea | ca          |                 dex                  
2010:000 | DONE ins | na 16 16 | 0065eb | 95 00       |                 sta.dx 00            NOS
2011:000 | DONE wsp | na 16 16 |        |             |
2012:000 | DONE ins | na 16 16 | 0065ed | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
2013:000 | DONE ins | na 16 16 | 0065f0 | eb          |                 xba                  move length to LSB
2014:000 | DONE ins | na 16 16 | 0065f1 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
2015:000 | DONE ins | na 16 16 | 0065f4 | a8          |                 tay                  TOS
2016:000 | DONE wsp | na 16 16 |        |             |
2017:000 | DONE lbl | na 16 16 | 0065f5 |             | z_count                              
2017:001 | DONE ins | na 16 16 | 0065f5 | 60          |                 rts                  
2018:000 | DONE wsp | na 16 16 |        |             |
2019:000 | DONE wsp | na 16 16 |        |             |
2020:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2021:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
2022:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
2023:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
2024:000 | DONE lbl | na 16 16 | 0065f6 |             | xt_cr                                
2025:000 | DONE ins | na 16 16 | 0065f6 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
2026:000 | DONE ins | na 16 16 | 0065f9 | 20 34 60    |                 jsr 006034           
2027:000 | DONE wsp | na 16 16 |        |             |
2028:000 | DONE lbl | na 16 16 | 0065fc |             | z_cr                                 
2028:001 | DONE ins | na 16 16 | 0065fc | 60          |                 rts                  
2029:000 | DONE wsp | na 16 16 |        |             |
2030:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2031:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
2032:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
2033:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
2034:000 | DONE cmt | na 16 16 |        |             | ; address.
2035:000 | DONE lbl | na 16 16 | 0065fd |             | xt_create                            
2036:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2037:000 | DONE ins | na 16 16 | 0065fd | 20 0a 6a    |                 jsr 006a0a           ( -- addr u )
2038:000 | DONE ins | na 16 16 | 006600 | d0 06       |                 bne 006608           
2039:000 | DONE wsp | na 16 16 |        |             |
2040:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
2041:000 | DONE ins | na 16 16 | 006602 | a9 2d 7c    |                 lda.# 007c2d         
2042:000 | DONE ins | na 16 16 | 006605 | 4c 37 76    |                 jmp 007637           
2043:000 | DONE wsp | na 16 16 |        |             |
2044:000 | DONE lbl | na 16 16 | 006608 |             | create_got_name                      
2045:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
2046:000 | DONE ins | na 16 16 | 006608 | 20 70 76    |                 jsr 007670           
2047:000 | DONE wsp | na 16 16 |        |             |
2048:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
2049:000 | DONE cmt | na 16 16 |        |             |                 ; word
2050:000 | DONE ins | na 16 16 | 00660b | a5 00       |                 lda.d 000000         
2051:000 | DONE ins | na 16 16 | 00660d | 85 16       |                 sta.d 000016         save start of new word
2052:000 | DONE wsp | na 16 16 |        |             |
2053:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
2054:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
2055:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
2056:000 | DONE ins | na 16 16 | 00660f | 98          |                 tya                  
2057:000 | DONE ins | na 16 16 | 006610 | 29 ff 00    |                 and.# 00ff           
2058:000 | DONE ins | na 16 16 | 006613 | 85 18       |                 sta.d 000018         save length of name string
2059:000 | DONE wsp | na 16 16 |        |             |
2060:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
2061:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
2062:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
2063:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
2064:000 | DONE ins | na 16 16 | 006615 | 18          |                 clc                  
2065:000 | DONE ins | na 16 16 | 006616 | 69 08 00    |                 adc.# 0008           
2066:000 | DONE ins | na 16 16 | 006619 | 85 1a       |                 sta.d 00001a         total bytes required for header
2067:000 | DONE wsp | na 16 16 |        |             |
2068:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
2069:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
2070:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
2071:000 | DONE ins | na 16 16 | 00661b | 1a          |                 inc.a                
2072:000 | DONE ins | na 16 16 | 00661c | 1a          |                 inc.a                
2073:000 | DONE ins | na 16 16 | 00661d | 1a          |                 inc.a                
2074:000 | DONE wsp | na 16 16 |        |             |
2075:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
2076:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
2077:000 | DONE ins | na 16 16 | 00661e | 18          |                 clc                  
2078:000 | DONE ins | na 16 16 | 00661f | 65 00       |                 adc.d 000000         
2079:000 | DONE ins | na 16 16 | 006621 | 85 00       |                 sta.d 000000         
2080:000 | DONE wsp | na 16 16 |        |             |
2081:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
2082:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
2083:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
2084:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
2085:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
2086:000 | DONE ins | na 16 16 | 006623 | b5 00       |                 lda.dx 00            
2087:000 | DONE ins | na 16 16 | 006625 | 48          |                 pha                  
2088:000 | DONE wsp | na 16 16 |        |             |
2089:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
2090:000 | DONE ins | na 16 16 | 006626 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
2091:000 | DONE ins | na 16 16 | 006629 | a5 18       |                 lda.d 000018         get length byte
2092:000 | DONE ins | na 16 16 | 00662b | 91 16       |                 sta.diy 000016       STA (TMP1),Y
2093:000 | DONE ins | na 16 16 | 00662d | c8          |                 iny                  
2094:000 | DONE ins | na 16 16 | 00662e | c8          |                 iny                  
2095:000 | DONE wsp | na 16 16 |        |             |
2096:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
2097:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
2098:000 | DONE ins | na 16 16 | 00662f | a5 02       |                 lda.d 000002         
2099:000 | DONE ins | na 16 16 | 006631 | 91 16       |                 sta.diy 000016       
2100:000 | DONE ins | na 16 16 | 006633 | c8          |                 iny                  
2101:000 | DONE ins | na 16 16 | 006634 | c8          |                 iny                  
2102:000 | DONE wsp | na 16 16 |        |             |
2103:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
2104:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
2105:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
2106:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
2107:000 | DONE ins | na 16 16 | 006635 | a5 16       |                 lda.d 000016         can't use CP, because we've allotted space
2108:000 | DONE ins | na 16 16 | 006637 | 85 02       |                 sta.d 000002         while we've got it, make old CP the new DP
2109:000 | DONE wsp | na 16 16 |        |             |
2110:000 | DONE ins | na 16 16 | 006639 | 18          |                 clc                  
2111:000 | DONE ins | na 16 16 | 00663a | 65 1a       |                 adc.d 00001a         total header length
2112:000 | DONE ins | na 16 16 | 00663c | 91 16       |                 sta.diy 000016       
2113:000 | DONE ins | na 16 16 | 00663e | c8          |                 iny                  
2114:000 | DONE ins | na 16 16 | 00663f | c8          |                 iny                  
2115:000 | DONE wsp | na 16 16 |        |             |
2116:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
2117:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
2118:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
2119:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
2120:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
2121:000 | DONE ins | na 16 16 | 006640 | 1a          |                 inc.a                
2122:000 | DONE ins | na 16 16 | 006641 | 1a          |                 inc.a                
2123:000 | DONE ins | na 16 16 | 006642 | 1a          |                 inc.a                
2124:000 | DONE ins | na 16 16 | 006643 | 91 16       |                 sta.diy 000016       
2125:000 | DONE ins | na 16 16 | 006645 | c8          |                 iny                  
2126:000 | DONE ins | na 16 16 | 006646 | c8          |                 iny                  
2127:000 | DONE wsp | na 16 16 |        |             |
2128:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
2129:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
2130:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
2131:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
2132:000 | DONE ins | na 16 16 | 006647 | 68          |                 pla                  get back string address
2133:000 | DONE ins | na 16 16 | 006648 | 38          |                 sec                  
2134:000 | DONE ins | na 16 16 | 006649 | e9 08 00    |                 sbc.# 0008           
2135:000 | DONE ins | na 16 16 | 00664c | 85 1a       |                 sta.d 00001a         
2136:000 | DONE ins | na 16 16 | 00664e | e2 20       |                 sep 20               
2136:001 | DONE ctl | na  8 16 |        |             |         .!a8
2137:000 | DONE lbl | na  8 16 | 006650 |             | @                                    
2138:000 | DONE ins | na  8 16 | 006650 | b1 1a       |                 lda.diy 00001a       
2139:000 | DONE ins | na  8 16 | 006652 | 91 16       |                 sta.diy 000016       
2140:000 | DONE ins | na  8 16 | 006654 | c8          |                 iny                  
2141:000 | DONE ins | na  8 16 | 006655 | c6 18       |                 dec.d 000018         
2142:000 | DONE ins | na  8 16 | 006657 | d0 f7       |                 bne 006650           
2143:000 | DONE wsp | na  8 16 |        |             |
2144:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
2145:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
2146:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
2147:000 | DONE cmt | na  8 16 |        |             |                 ; good
2148:000 | DONE ins | na  8 16 | 006659 | a9 20       |                 lda.# 20             opcode of JSR
2149:000 | DONE ins | na  8 16 | 00665b | 91 16       |                 sta.diy 000016       
2150:000 | DONE ins | na  8 16 | 00665d | c8          |                 iny                  single increase only because we have 8-bit A
2151:000 | DONE wsp | na  8 16 |        |             |
2152:000 | DONE ins | na  8 16 | 00665e | a9 b5       |                 lda.# .lsb 0075b5    
2153:000 | DONE ins | na  8 16 | 006660 | 91 16       |                 sta.diy 000016       
2154:000 | DONE ins | na  8 16 | 006662 | c8          |                 iny                  
2155:000 | DONE wsp | na  8 16 |        |             |
2156:000 | DONE ins | na  8 16 | 006663 | a9 75       |                 lda.# .msb 0075b5    
2157:000 | DONE ins | na  8 16 | 006665 | 91 16       |                 sta.diy 000016       
2158:000 | DONE wsp | na  8 16 |        |             |
2159:000 | DONE ins | na  8 16 | 006667 | c2 20       |                 rep 20               
2159:001 | DONE ctl | na 16 16 |        |             |         .!a16
2160:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
2161:000 | DONE ins | na 16 16 | 006669 | b4 02       |                 ldy.dx 02            
2162:000 | DONE ins | na 16 16 | 00666b | e8          |                 inx                  
2163:000 | DONE ins | na 16 16 | 00666c | e8          |                 inx                  
2164:000 | DONE ins | na 16 16 | 00666d | e8          |                 inx                  
2165:000 | DONE ins | na 16 16 | 00666e | e8          |                 inx                  
2166:000 | DONE wsp | na 16 16 |        |             |
2167:000 | DONE lbl | na 16 16 | 00666f |             | z_create                             
2167:001 | DONE ins | na 16 16 | 00666f | 60          |                 rts                  
2168:000 | DONE wsp | na 16 16 |        |             |
2169:000 | DONE wsp | na 16 16 |        |             |
2170:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2171:000 | DONE cmt | na 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
2172:000 | DONE cmt | na 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
2173:000 | DONE cmt | na 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
2174:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2175:000 | DONE cmt | na 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
2176:000 | DONE cmt | na 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
2177:000 | DONE cmt | na 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
2178:000 | DONE cmt | na 16 16 |        |             | ; following pForth and Gforth.
2179:000 | DONE lbl | na 16 16 | 006670 |             | xt_digitq                            
2180:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2181:000 | DONE ins | na 16 16 | 006670 | 98          |                 tya                  
2182:000 | DONE ins | na 16 16 | 006671 | 29 ff 00    |                 and.# 00ff           paranoid
2183:000 | DONE wsp | na 16 16 |        |             |
2184:000 | DONE ins | na 16 16 | 006674 | e2 20       |                 sep 20               
2184:001 | DONE ctl | na  8 16 |        |             |         .!a8
2185:000 | DONE cmt | na  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
2186:000 | DONE ins | na  8 16 | 006676 | c9 30       |                 cmp.# 30             
2187:000 | DONE ins | na  8 16 | 006678 | 90 1d       |                 bcc 006697           
2188:000 | DONE wsp | na  8 16 |        |             |
2189:000 | DONE cmt | na  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
2190:000 | DONE cmt | na  8 16 |        |             |                 ; a normal number
2191:000 | DONE ins | na  8 16 | 00667a | c9 3a       |                 cmp.# 00003a         This is ':'
2192:000 | DONE ins | na  8 16 | 00667c | 90 12       |                 bcc 006690           
2193:000 | DONE wsp | na  8 16 |        |             |
2194:000 | DONE cmt | na  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
2195:000 | DONE cmt | na  8 16 |        |             |                 ; we can treat the whole range as a number
2196:000 | DONE ins | na  8 16 | 00667e | c9 40       |                 cmp.# 000040         This is '@'
2197:000 | DONE ins | na  8 16 | 006680 | 90 15       |                 bcc 006697           
2198:000 | DONE wsp | na  8 16 |        |             |
2199:000 | DONE cmt | na  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
2200:000 | DONE ins | na  8 16 | 006682 | c9 61       |                 cmp.# 61             
2201:000 | DONE ins | na  8 16 | 006684 | 90 07       |                 bcc 00668d           not lower case, too low
2202:000 | DONE ins | na  8 16 | 006686 | c9 7b       |                 cmp.# 00007b         
2203:000 | DONE ins | na  8 16 | 006688 | b0 03       |                 bcs 00668d           not lower case, too high
2204:000 | DONE wsp | na  8 16 |        |             |
2205:000 | DONE ins | na  8 16 | 00668a | 18          |                 clc                  just right
2206:000 | DONE ins | na  8 16 | 00668b | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
2207:000 | DONE wsp | na  8 16 |        |             |
2208:000 | DONE lbl | na  8 16 | 00668d |             | dq_case_done                         
2209:000 | DONE cmt | na  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
2210:000 | DONE cmt | na  8 16 |        |             |                 ; whole range as one number
2211:000 | DONE ins | na  8 16 | 00668d | 38          |                 sec                  
2212:000 | DONE ins | na  8 16 | 00668e | e9 07       |                 sbc.# 07             fall through to dq_checkbase
2213:000 | DONE wsp | na  8 16 |        |             |
2214:000 | DONE lbl | na  8 16 | 006690 |             | dq_checkbase                         
2215:000 | DONE cmt | na  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
2216:000 | DONE ins | na  8 16 | 006690 | 38          |                 sec                  
2217:000 | DONE ins | na  8 16 | 006691 | e9 30       |                 sbc.# 30             This is also the actual conversion step
2218:000 | DONE ins | na  8 16 | 006693 | c5 10       |                 cmp.d 000010         
2219:000 | DONE ins | na  8 16 | 006695 | 90 0b       |                 bcc 0066a2           
2220:000 | DONE wsp | na  8 16 |        |             |
2221:000 | DONE lbl | na  8 16 | 006697 |             | dq_notdigit                          
2222:000 | DONE cmt | na  8 16 |        |             |                 ; not a digit, add a false flag
2223:000 | DONE ins | na  8 16 | 006697 | ca          |                 dex                  
2224:000 | DONE ins | na  8 16 | 006698 | ca          |                 dex                  
2225:000 | DONE ins | na  8 16 | 006699 | 94 00       |                 sty.dx 00            keep the offending character in NOS
2226:000 | DONE ins | na  8 16 | 00669b | a0 00 00    |                 ldy.# 0000           
2227:000 | DONE ins | na  8 16 | 00669e | c2 20       |                 rep 20               
2227:001 | DONE ctl | na 16 16 |        |             |         .!a16
2228:000 | DONE ins | na 16 16 | 0066a0 | 80 09       |                 bra 0066ab           
2229:000 | DONE wsp | na 16 16 |        |             |
2230:000 | DONE lbl | na 16 16 | 0066a2 |             | dq_success                           
2231:000 | DONE ins | na 16 16 | 0066a2 | ca          |                 dex                  
2232:000 | DONE ins | na 16 16 | 0066a3 | ca          |                 dex                  
2233:000 | DONE ins | na 16 16 | 0066a4 | c2 20       |                 rep 20               
2233:001 | DONE ctl | na 16 16 |        |             |         .!a16
2234:000 | DONE ins | na 16 16 | 0066a6 | 95 00       |                 sta.dx 00            put the number in NOS
2235:000 | DONE ins | na 16 16 | 0066a8 | a0 ff ff    |                 ldy.# 0ffff          
2236:000 | DONE wsp | na 16 16 |        |             |
2237:000 | DONE lbl | na 16 16 | 0066ab |             | z_digitq                             
2237:001 | DONE ins | na 16 16 | 0066ab | 60          |                 rts                  
2238:000 | DONE wsp | na 16 16 |        |             |
2239:000 | DONE wsp | na 16 16 |        |             |
2240:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2241:000 | DONE cmt | na 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
2242:000 | DONE cmt | na 16 16 |        |             | ; Add two double cell numbers
2243:000 | DONE lbl | na 16 16 | 0066ac |             | xt_dplus                             
2244:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2245:000 | DONE ins | na 16 16 | 0066ac | 5a          |                 phy                  save hi word of first number, frees Y
2246:000 | DONE ins | na 16 16 | 0066ad | b5 00       |                 lda.dx 00            lo word of first number
2247:000 | DONE ins | na 16 16 | 0066af | 18          |                 clc                  
2248:000 | DONE ins | na 16 16 | 0066b0 | 75 04       |                 adc.dx 04            add lo word of second number
2249:000 | DONE ins | na 16 16 | 0066b2 | a8          |                 tay                  
2250:000 | DONE wsp | na 16 16 |        |             |
2251:000 | DONE ins | na 16 16 | 0066b3 | 68          |                 pla                  get hi word of first number
2252:000 | DONE ins | na 16 16 | 0066b4 | 75 02       |                 adc.dx 02            add hi word of second number
2253:000 | DONE wsp | na 16 16 |        |             |
2254:000 | DONE ins | na 16 16 | 0066b6 | e8          |                 inx                  
2255:000 | DONE ins | na 16 16 | 0066b7 | e8          |                 inx                  
2256:000 | DONE ins | na 16 16 | 0066b8 | e8          |                 inx                  
2257:000 | DONE ins | na 16 16 | 0066b9 | e8          |                 inx                  
2258:000 | DONE wsp | na 16 16 |        |             |
2259:000 | DONE ins | na 16 16 | 0066ba | 94 00       |                 sty.dx 00            lo result goes NOS
2260:000 | DONE ins | na 16 16 | 0066bc | a8          |                 tay                  to result goes TOS
2261:000 | DONE wsp | na 16 16 |        |             |
2262:000 | DONE lbl | na 16 16 | 0066bd |             | z_dplus                              
2262:001 | DONE ins | na 16 16 | 0066bd | 60          |                 rts                  
2263:000 | DONE wsp | na 16 16 |        |             |
2264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2265:000 | DONE cmt | na 16 16 |        |             | ; DMINUS ( d d -- d ) X bytes / X cycles
2266:000 | DONE cmt | na 16 16 |        |             | ; Subtract two double cell numbers
2267:000 | DONE lbl | na 16 16 | 0066be |             | xt_dminus                            
2268:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2269:000 | DONE ins | na 16 16 | 0066be | b5 04       |                 lda.dx 04            lo word NOS
2270:000 | DONE ins | na 16 16 | 0066c0 | 38          |                 sec                  
2271:000 | DONE ins | na 16 16 | 0066c1 | f5 00       |                 sbc.dx 00            lo word TOS
2272:000 | DONE ins | na 16 16 | 0066c3 | 48          |                 pha                  
2273:000 | DONE wsp | na 16 16 |        |             |
2274:000 | DONE ins | na 16 16 | 0066c4 | 94 00       |                 sty.dx 00            use as temp storage for hi word TOS
2275:000 | DONE ins | na 16 16 | 0066c6 | b5 02       |                 lda.dx 02            hi word, NOS
2276:000 | DONE ins | na 16 16 | 0066c8 | f5 00       |                 sbc.dx 00            hi word, TOS
2277:000 | DONE ins | na 16 16 | 0066ca | a8          |                 tay                  result hi word now TOS
2278:000 | DONE wsp | na 16 16 |        |             |
2279:000 | DONE ins | na 16 16 | 0066cb | e8          |                 inx                  
2280:000 | DONE ins | na 16 16 | 0066cc | e8          |                 inx                  
2281:000 | DONE ins | na 16 16 | 0066cd | e8          |                 inx                  
2282:000 | DONE ins | na 16 16 | 0066ce | e8          |                 inx                  
2283:000 | DONE wsp | na 16 16 |        |             |
2284:000 | DONE ins | na 16 16 | 0066cf | 68          |                 pla                  
2285:000 | DONE ins | na 16 16 | 0066d0 | 95 00       |                 sta.dx 00            result lo word now NOS
2286:000 | DONE wsp | na 16 16 |        |             |
2287:000 | DONE lbl | na 16 16 | 0066d2 |             | z_dminus                             
2287:001 | DONE ins | na 16 16 | 0066d2 | 60          |                 rts                  
2288:000 | DONE wsp | na 16 16 |        |             |
2289:000 | DONE wsp | na 16 16 |        |             |
2290:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2291:000 | DONE cmt | na 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2292:000 | DONE cmt | na 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2293:000 | DONE cmt | na 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2294:000 | DONE cmt | na 16 16 |        |             | ; TODO make this work the way Gforth's does
2295:000 | DONE lbl | na 16 16 | 0066d3 |             | xt_dtos                              
2296:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2297:000 | DONE ins | na 16 16 | 0066d3 | b4 00       |                 ldy.dx 00            
2298:000 | DONE ins | na 16 16 | 0066d5 | e8          |                 inx                  
2299:000 | DONE ins | na 16 16 | 0066d6 | e8          |                 inx                  
2300:000 | DONE wsp | na 16 16 |        |             |
2301:000 | DONE lbl | na 16 16 | 0066d7 |             | z_dtos                               
2301:001 | DONE ins | na 16 16 | 0066d7 | 60          |                 rts                  
2302:000 | DONE wsp | na 16 16 |        |             |
2303:000 | DONE wsp | na 16 16 |        |             |
2304:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2305:000 | DONE cmt | na 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2306:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a double number
2307:000 | DONE cmt | na 16 16 |        |             | ; TODO recode in assembler
2308:000 | DONE lbl | na 16 16 | 0066d8 |             | xt_dabs                              
2309:000 | DONE cmt | na 16 16 |        |             |                 ; double cell is TOS
2310:000 | DONE ins | na 16 16 | 0066d8 | 98          |                 tya                  force flag test
2311:000 | DONE ins | na 16 16 | 0066d9 | f0 03       |                 beq 0066de           already positive, life is good
2312:000 | DONE wsp | na 16 16 |        |             |
2313:000 | DONE ins | na 16 16 | 0066db | 20 f4 66    |                 jsr 0066f4           
2314:000 | DONE wsp | na 16 16 |        |             |
2315:000 | DONE lbl | na 16 16 | 0066de |             | z_dabs                               
2315:001 | DONE ins | na 16 16 | 0066de | 60          |                 rts                  
2316:000 | DONE wsp | na 16 16 |        |             |
2317:000 | DONE wsp | na 16 16 |        |             |
2318:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2319:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2320:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
2321:000 | DONE lbl | na 16 16 | 0066df |             | xt_decimal                           
2322:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2323:000 | DONE ins | na 16 16 | 0066df | a9 0a 00    |                 lda.# 000a           
2324:000 | DONE ins | na 16 16 | 0066e2 | 85 10       |                 sta.d 000010         
2325:000 | DONE wsp | na 16 16 |        |             |
2326:000 | DONE lbl | na 16 16 | 0066e4 |             | z_decimal                            
2326:001 | DONE ins | na 16 16 | 0066e4 | 60          |                 rts                  
2327:000 | DONE wsp | na 16 16 |        |             |
2328:000 | DONE wsp | na 16 16 |        |             |
2329:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2330:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2331:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2332:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
2333:000 | DONE lbl | na 16 16 | 0066e5 |             | xt_depth                             
2334:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2335:000 | DONE cmt | na 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2336:000 | DONE ins | na 16 16 | 0066e5 | 86 1c       |                 stx.d 00001c         
2337:000 | DONE ins | na 16 16 | 0066e7 | a9 ff 00    |                 lda.# 0000ff         
2338:000 | DONE ins | na 16 16 | 0066ea | 38          |                 sec                  
2339:000 | DONE ins | na 16 16 | 0066eb | e5 1c       |                 sbc.d 00001c         
2340:000 | DONE wsp | na 16 16 |        |             |
2341:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2342:000 | DONE ins | na 16 16 | 0066ed | 4a          |                 lsr.a                
2343:000 | DONE wsp | na 16 16 |        |             |
2344:000 | DONE ins | na 16 16 | 0066ee | ca          |                 dex                  
2345:000 | DONE ins | na 16 16 | 0066ef | ca          |                 dex                  
2346:000 | DONE ins | na 16 16 | 0066f0 | 94 00       |                 sty.dx 00            
2347:000 | DONE wsp | na 16 16 |        |             |
2348:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
2349:000 | DONE ins | na 16 16 | 0066f2 | a8          |                 tay                  
2350:000 | DONE wsp | na 16 16 |        |             |
2351:000 | DONE lbl | na 16 16 | 0066f3 |             | z_depth                              
2351:001 | DONE ins | na 16 16 | 0066f3 | 60          |                 rts                  
2352:000 | DONE wsp | na 16 16 |        |             |
2353:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2354:000 | DONE cmt | na 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2355:000 | DONE cmt | na 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2356:000 | DONE lbl | na 16 16 | 0066f4 |             | xt_dnegate                           
2357:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2358:000 | DONE cmt | na 16 16 |        |             |                 ; start off with LSW (in NOS)
2359:000 | DONE ins | na 16 16 | 0066f4 | b5 00       |                 lda.dx 00            
2360:000 | DONE ins | na 16 16 | 0066f6 | 49 ff ff    |                 eor.# 0ffff          
2361:000 | DONE wsp | na 16 16 |        |             |
2362:000 | DONE cmt | na 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2363:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
2364:000 | DONE ins | na 16 16 | 0066f9 | 18          |                 clc                  
2365:000 | DONE ins | na 16 16 | 0066fa | 69 01 00    |                 adc.# 0001           
2366:000 | DONE ins | na 16 16 | 0066fd | 95 00       |                 sta.dx 00            
2367:000 | DONE wsp | na 16 16 |        |             |
2368:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
2369:000 | DONE ins | na 16 16 | 0066ff | 98          |                 tya                  
2370:000 | DONE ins | na 16 16 | 006700 | 49 ff ff    |                 eor.# 0ffff          
2371:000 | DONE ins | na 16 16 | 006703 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2372:000 | DONE ins | na 16 16 | 006706 | a8          |                 tay                  
2373:000 | DONE wsp | na 16 16 |        |             |
2374:000 | DONE lbl | na 16 16 | 006707 |             | z_dnegate                            
2374:001 | DONE ins | na 16 16 | 006707 | 60          |                 rts                  
2375:000 | DONE wsp | na 16 16 |        |             |
2376:000 | DONE wsp | na 16 16 |        |             |
2377:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2378:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2379:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2380:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
2381:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2382:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2383:000 | DONE lbl | na 16 16 | 006708 |             | xt_does                              
2384:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2385:000 | DONE ins | na 16 16 | 006708 | f4 15 67    |                 phe.# 006715         
2386:000 | DONE ins | na 16 16 | 00670b | 20 16 76    |                 jsr 007616           
2387:000 | DONE wsp | na 16 16 |        |             |
2388:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2389:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2390:000 | DONE ins | na 16 16 | 00670e | f4 a8 75    |                 phe.# 0075a8         
2391:000 | DONE ins | na 16 16 | 006711 | 20 16 76    |                 jsr 007616           
2392:000 | DONE wsp | na 16 16 |        |             |
2393:000 | DONE lbl | na 16 16 | 006714 |             | z_does                               
2393:001 | DONE ins | na 16 16 | 006714 | 60          |                 rts                  
2394:000 | DONE wsp | na 16 16 |        |             |
2395:000 | DONE lbl | na 16 16 | 006715 |             | does_rt                              
2396:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2397:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2398:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2399:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2400:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
2401:000 | DONE ins | na 16 16 | 006715 | 68          |                 pla                  
2402:000 | DONE ins | na 16 16 | 006716 | 1a          |                 inc.a                increase by one because of RTS mechanics
2403:000 | DONE ins | na 16 16 | 006717 | 85 16       |                 sta.d 000016         
2404:000 | DONE wsp | na 16 16 |        |             |
2405:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2406:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2407:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2408:000 | DONE cmt | na 16 16 |        |             |                 ; now.
2409:000 | DONE ins | na 16 16 | 006719 | a5 02       |                 lda.d 000002         
2410:000 | DONE wsp | na 16 16 |        |             |
2411:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2412:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
2413:000 | DONE ins | na 16 16 | 00671b | 18          |                 clc                  
2414:000 | DONE ins | na 16 16 | 00671c | 69 04 00    |                 adc.# 0004           
2415:000 | DONE ins | na 16 16 | 00671f | 85 18       |                 sta.d 000018         
2416:000 | DONE wsp | na 16 16 |        |             |
2417:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2418:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
2419:000 | DONE ins | na 16 16 | 006721 | b2 18       |                 lda.di 000018        LDA (TMP2)
2420:000 | DONE ins | na 16 16 | 006723 | 1a          |                 inc.a                
2421:000 | DONE ins | na 16 16 | 006724 | 85 18       |                 sta.d 000018         Points to address to be replaced
2422:000 | DONE wsp | na 16 16 |        |             |
2423:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
2424:000 | DONE ins | na 16 16 | 006726 | a5 16       |                 lda.d 000016         
2425:000 | DONE ins | na 16 16 | 006728 | 92 18       |                 sta.di 000018        STA (TMP2)
2426:000 | DONE wsp | na 16 16 |        |             |
2427:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2428:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2429:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2430:000 | DONE ins | na 16 16 | 00672a | 60          |                 rts                  
2431:000 | DONE wsp | na 16 16 |        |             |
2432:000 | DONE wsp | na 16 16 |        |             |
2433:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2434:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2435:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
2436:000 | DONE wsp | na 16 16 |        |             |
2437:000 | DONE lbl | na 16 16 | 00672b |             | xt_drop                              
2438:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2439:000 | DONE ins | na 16 16 | 00672b | b4 00       |                 ldy.dx 00            
2440:000 | DONE ins | na 16 16 | 00672d | e8          |                 inx                  
2441:000 | DONE ins | na 16 16 | 00672e | e8          |                 inx                  
2442:000 | DONE wsp | na 16 16 |        |             |
2443:000 | DONE lbl | na 16 16 | 00672f |             | z_drop                               
2443:001 | DONE ins | na 16 16 | 00672f | 60          |                 rts                  
2444:000 | DONE wsp | na 16 16 |        |             |
2445:000 | DONE wsp | na 16 16 |        |             |
2446:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2447:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2448:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
2449:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
2450:000 | DONE lbl | na 16 16 | 006730 |             | xt_dump                              
2451:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
2452:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
2453:000 | DONE ins | na 16 16 | 006730 | 84 16       |                 sty.d 000016         
2454:000 | DONE wsp | na 16 16 |        |             |
2455:000 | DONE lbl | na 16 16 | 006732 |             | dump_line_loop                       
2456:000 | DONE ins | na 16 16 | 006732 | 20 f6 65    |                 jsr 0065f6           
2457:000 | DONE wsp | na 16 16 |        |             |
2458:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
2459:000 | DONE ins | na 16 16 | 006735 | a0 10 00    |                 ldy.# 0010           
2460:000 | DONE lbl | na 16 16 | 006738 |             | dump_byte_loop                       
2461:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
2462:000 | DONE ins | na 16 16 | 006738 | a5 16       |                 lda.d 000016         
2463:000 | DONE ins | na 16 16 | 00673a | f0 11       |                 beq 00674d           
2464:000 | DONE wsp | na 16 16 |        |             |
2465:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
2466:000 | DONE ins | na 16 16 | 00673c | a1 00       |                 lda.dxi 00           
2467:000 | DONE ins | na 16 16 | 00673e | 20 55 76    |                 jsr 007655           TODO replace by EMIT
2468:000 | DONE ins | na 16 16 | 006741 | 20 3c 6c    |                 jsr 006c3c           
2469:000 | DONE wsp | na 16 16 |        |             |
2470:000 | DONE cmt | na 16 16 |        |             |                 ; next character
2471:000 | DONE ins | na 16 16 | 006744 | f6 00       |                 inc.dx 00            
2472:000 | DONE wsp | na 16 16 |        |             |
2473:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
2474:000 | DONE ins | na 16 16 | 006746 | c6 16       |                 dec.d 000016         
2475:000 | DONE ins | na 16 16 | 006748 | 88          |                 dey                  
2476:000 | DONE ins | na 16 16 | 006749 | d0 ed       |                 bne 006738           
2477:000 | DONE ins | na 16 16 | 00674b | 80 e5       |                 bra 006732           
2478:000 | DONE wsp | na 16 16 |        |             |
2479:000 | DONE lbl | na 16 16 | 00674d |             | dump_done                            
2480:000 | DONE ins | na 16 16 | 00674d | 20 f6 65    |                 jsr 0065f6           
2481:000 | DONE wsp | na 16 16 |        |             |
2482:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
2483:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
2484:000 | DONE ins | na 16 16 | 006750 | b4 02       |                 ldy.dx 02            
2485:000 | DONE ins | na 16 16 | 006752 | e8          |                 inx                  
2486:000 | DONE ins | na 16 16 | 006753 | e8          |                 inx                  
2487:000 | DONE ins | na 16 16 | 006754 | e8          |                 inx                  
2488:000 | DONE ins | na 16 16 | 006755 | e8          |                 inx                  
2489:000 | DONE wsp | na 16 16 |        |             |
2490:000 | DONE lbl | na 16 16 | 006756 |             | z_dump                               
2490:001 | DONE ins | na 16 16 | 006756 | 60          |                 rts                  
2491:000 | DONE wsp | na 16 16 |        |             |
2492:000 | DONE wsp | na 16 16 |        |             |
2493:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2494:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2495:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
2496:000 | DONE lbl | na 16 16 | 006757 |             | xt_dup                               
2497:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2498:000 | DONE ins | na 16 16 | 006757 | ca          |                 dex                  
2499:000 | DONE ins | na 16 16 | 006758 | ca          |                 dex                  
2500:000 | DONE ins | na 16 16 | 006759 | 94 00       |                 sty.dx 00            
2501:000 | DONE wsp | na 16 16 |        |             |
2502:000 | DONE lbl | na 16 16 | 00675b |             | z_dup                                
2502:001 | DONE ins | na 16 16 | 00675b | 60          |                 rts                  
2503:000 | DONE wsp | na 16 16 |        |             |
2504:000 | DONE wsp | na 16 16 |        |             |
2505:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2506:000 | DONE cmt | na 16 16 |        |             | ; ERASE ( addr u -- ) X bytes / X cycles
2507:000 | DONE cmt | na 16 16 |        |             | ; Set a region of memory to zero. Uses tmp2
2508:000 | DONE lbl | na 16 16 | 00675c |             | xt_erase                             
2509:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2510:000 | DONE ins | na 16 16 | 00675c | ca          |                 dex                  
2511:000 | DONE ins | na 16 16 | 00675d | ca          |                 dex                  
2512:000 | DONE ins | na 16 16 | 00675e | 94 00       |                 sty.dx 00            
2513:000 | DONE wsp | na 16 16 |        |             |
2514:000 | DONE ins | na 16 16 | 006760 | a0 00 00    |                 ldy.# 0000           falls through to FILL
2515:000 | DONE wsp | na 16 16 |        |             |
2516:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2517:000 | DONE cmt | na 16 16 |        |             | ; FILL ( addr u b -- ) X bytes / X cycles
2518:000 | DONE cmt | na 16 16 |        |             | ; Fill the given region of memory with the LSB of the TOS. Shares code with
2519:000 | DONE cmt | na 16 16 |        |             | ; ERASE
2520:000 | DONE lbl | na 16 16 | 006763 |             | xt_fill                              
2521:000 | DONE ins | na 16 16 | 006763 | b5 02       |                 lda.dx 02            address is 3OS
2522:000 | DONE ins | na 16 16 | 006765 | 85 18       |                 sta.d 000018         
2523:000 | DONE wsp | na 16 16 |        |             |
2524:000 | DONE ins | na 16 16 | 006767 | 98          |                 tya                  
2525:000 | DONE ins | na 16 16 | 006768 | b4 00       |                 ldy.dx 00            don't bother with drop, to it later
2526:000 | DONE ins | na 16 16 | 00676a | e2 20       |                 sep 20               
2526:001 | DONE ctl | na  8 16 |        |             |         .!a8
2527:000 | DONE lbl | na  8 16 | 00676c |             | erase_loop                           
2528:000 | DONE ins | na  8 16 | 00676c | 88          |                 dey                  
2529:000 | DONE ins | na  8 16 | 00676d | 30 04       |                 bmi 006773           
2530:000 | DONE wsp | na  8 16 |        |             |
2531:000 | DONE ins | na  8 16 | 00676f | 91 18       |                 sta.diy 000018       
2532:000 | DONE ins | na  8 16 | 006771 | 80 f9       |                 bra 00676c           
2533:000 | DONE wsp | na  8 16 |        |             |
2534:000 | DONE lbl | na  8 16 | 006773 |             | erase_done                           
2535:000 | DONE ins | na  8 16 | 006773 | c2 20       |                 rep 20               
2535:001 | DONE ctl | na 16 16 |        |             |         .!a16
2536:000 | DONE ins | na 16 16 | 006775 | b4 02       |                 ldy.dx 02            dump three elements off the sack
2537:000 | DONE ins | na 16 16 | 006777 | 8a          |                 txa                  
2538:000 | DONE ins | na 16 16 | 006778 | 18          |                 clc                  
2539:000 | DONE ins | na 16 16 | 006779 | 69 06 00    |                 adc.# 0006           
2540:000 | DONE ins | na 16 16 | 00677c | aa          |                 tax                  
2541:000 | DONE lbl | na 16 16 | 00677d |             | z_fill                               
2542:000 | DONE lbl | na 16 16 | 00677d |             | z_erase                              
2542:001 | DONE ins | na 16 16 | 00677d | 60          |                 rts                  
2543:000 | DONE wsp | na 16 16 |        |             |
2544:000 | DONE wsp | na 16 16 |        |             |
2545:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2546:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
2547:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
2548:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
2549:000 | DONE lbl | na 16 16 | 00677e |             | xt_evaluate                          
2550:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
2551:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
2552:000 | DONE ins | na 16 16 | 00677e | a5 0c       |                 lda.d 00000c         >IN
2553:000 | DONE ins | na 16 16 | 006780 | 48          |                 pha                  
2554:000 | DONE ins | na 16 16 | 006781 | a5 06       |                 lda.d 000006         Input Source (SOURCE-ID)
2555:000 | DONE ins | na 16 16 | 006783 | 48          |                 pha                  
2556:000 | DONE ins | na 16 16 | 006784 | a5 08       |                 lda.d 000008         
2557:000 | DONE ins | na 16 16 | 006786 | 48          |                 pha                  
2558:000 | DONE ins | na 16 16 | 006787 | a5 0a       |                 lda.d 00000a         
2559:000 | DONE ins | na 16 16 | 006789 | 48          |                 pha                  
2560:000 | DONE wsp | na 16 16 |        |             |
2561:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
2562:000 | DONE ins | na 16 16 | 00678a | a9 ff ff    |                 lda.# 0ffff          
2563:000 | DONE ins | na 16 16 | 00678d | 85 06       |                 sta.d 000006         
2564:000 | DONE wsp | na 16 16 |        |             |
2565:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
2566:000 | DONE ins | na 16 16 | 00678f | 64 0c       |                 stz.d 00000c         
2567:000 | DONE wsp | na 16 16 |        |             |
2568:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
2569:000 | DONE ins | na 16 16 | 006791 | 84 0a       |                 sty.d 00000a         
2570:000 | DONE ins | na 16 16 | 006793 | b5 00       |                 lda.dx 00            
2571:000 | DONE ins | na 16 16 | 006795 | 85 08       |                 sta.d 000008         
2572:000 | DONE wsp | na 16 16 |        |             |
2573:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
2574:000 | DONE ins | na 16 16 | 006797 | b4 02       |                 ldy.dx 02            
2575:000 | DONE ins | na 16 16 | 006799 | e8          |                 inx                  
2576:000 | DONE ins | na 16 16 | 00679a | e8          |                 inx                  
2577:000 | DONE ins | na 16 16 | 00679b | e8          |                 inx                  
2578:000 | DONE ins | na 16 16 | 00679c | e8          |                 inx                  
2579:000 | DONE wsp | na 16 16 |        |             |
2580:000 | DONE ins | na 16 16 | 00679d | 20 bc 75    |                 jsr 0075bc           
2581:000 | DONE wsp | na 16 16 |        |             |
2582:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
2583:000 | DONE ins | na 16 16 | 0067a0 | 68          |                 pla                  
2584:000 | DONE ins | na 16 16 | 0067a1 | 85 0a       |                 sta.d 00000a         
2585:000 | DONE ins | na 16 16 | 0067a3 | 68          |                 pla                  
2586:000 | DONE ins | na 16 16 | 0067a4 | 85 08       |                 sta.d 000008         
2587:000 | DONE ins | na 16 16 | 0067a6 | 68          |                 pla                  
2588:000 | DONE ins | na 16 16 | 0067a7 | 85 06       |                 sta.d 000006         
2589:000 | DONE ins | na 16 16 | 0067a9 | 68          |                 pla                  
2590:000 | DONE ins | na 16 16 | 0067aa | 85 0c       |                 sta.d 00000c         
2591:000 | DONE wsp | na 16 16 |        |             |
2592:000 | DONE lbl | na 16 16 | 0067ac |             | z_evaluate                           
2592:001 | DONE ins | na 16 16 | 0067ac | 60          |                 rts                  
2593:000 | DONE wsp | na 16 16 |        |             |
2594:000 | DONE wsp | na 16 16 |        |             |
2595:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2596:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2597:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
2598:000 | DONE wsp | na 16 16 |        |             |
2599:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2600:000 | DONE cmt | na 16 16 |        |             | ; range
2601:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2602:000 | DONE lbl | na 16 16 | 0067ad |             | execute_ip                           
2602:001 | DONE dir | na 16 16 | 0067ad | (3 bytes)   |         .byte 00, 00, 00             
2602:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
2603:000 | DONE wsp | na 16 16 |        |             |
2604:000 | DONE lbl | na 16 16 | 0067b0 |             | xt_execute                           
2605:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2606:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2607:000 | DONE cmt | na 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
2608:000 | DONE ins | na 16 16 | 0067b0 | 8c ad 67    |                 sty 0067ad           
2609:000 | DONE ins | na 16 16 | 0067b3 | b4 00       |                 ldy.dx 00            
2610:000 | DONE ins | na 16 16 | 0067b5 | e8          |                 inx                  
2611:000 | DONE ins | na 16 16 | 0067b6 | e8          |                 inx                  
2612:000 | DONE wsp | na 16 16 |        |             |
2613:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
2614:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
2615:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
2616:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
2617:000 | DONE ins | na 16 16 | 0067b7 | 6c ad 67    |                 jmp.i 0067ad         JMP (EXECUTE_IP)
2618:000 | DONE wsp | na 16 16 |        |             |
2619:000 | DONE lbl | na 16 16 | 0067ba |             | z_execute                            
2619:001 | DONE ins | na 16 16 | 0067ba | ea          |                 nop                  Never reached, see if we need the NOP
2620:000 | DONE wsp | na 16 16 |        |             |
2621:000 | DONE wsp | na 16 16 |        |             |
2622:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2623:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
2624:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
2625:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
2626:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
2627:000 | DONE wsp | na 16 16 |        |             |
2628:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2629:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
2630:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
2631:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
2632:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
2633:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
2634:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2635:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
2636:000 | DONE lbl | na 16 16 | 0067bb |             | xt_find-name                         
2637:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
2638:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
2639:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
2640:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
2641:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
2642:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
2643:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
2644:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
2645:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2646:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2647:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
2648:000 | DONE ins | na 16 16 | 0067bb | 84 1e       |                 sty.d 00001e         length of mystery string in tmptos, Y now free
2649:000 | DONE wsp | na 16 16 |        |             |
2650:000 | DONE ins | na 16 16 | 0067bd | a4 02       |                 ldy.d 000002         
2651:000 | DONE ins | na 16 16 | 0067bf | 84 16       |                 sty.d 000016         nt of first Dictionary word
2652:000 | DONE wsp | na 16 16 |        |             |
2653:000 | DONE ins | na 16 16 | 0067c1 | b4 00       |                 ldy.dx 00            
2654:000 | DONE ins | na 16 16 | 0067c3 | 84 18       |                 sty.d 000018         address of mystery string, was NOS
2655:000 | DONE wsp | na 16 16 |        |             |
2656:000 | DONE lbl | na 16 16 | 0067c5 |             | find-name_loop                       
2657:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
2658:000 | DONE ins | na 16 16 | 0067c5 | b2 16       |                 lda.di 000016        LSB in first header word is length
2659:000 | DONE ins | na 16 16 | 0067c7 | 29 ff 00    |                 and.# 00ff           
2660:000 | DONE ins | na 16 16 | 0067ca | c5 1e       |                 cmp.d 00001e         we test LSB
2661:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
2662:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
2663:000 | DONE cmt | na 16 16 |        |             |                 ; same
2664:000 | DONE ins | na 16 16 | 0067cc | f0 0c       |                 beq 0067da           
2665:000 | DONE wsp | na 16 16 |        |             |
2666:000 | DONE lbl | na 16 16 | 0067ce |             | find-name_next_entry                 
2667:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
2668:000 | DONE ins | na 16 16 | 0067ce | e6 16       |                 inc.d 000016         
2669:000 | DONE ins | na 16 16 | 0067d0 | e6 16       |                 inc.d 000016         
2670:000 | DONE ins | na 16 16 | 0067d2 | b2 16       |                 lda.di 000016        LDA (TMP1)
2671:000 | DONE wsp | na 16 16 |        |             |
2672:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
2673:000 | DONE ins | na 16 16 | 0067d4 | f0 36       |                 beq 00680c           
2674:000 | DONE wsp | na 16 16 |        |             |
2675:000 | DONE ins | na 16 16 | 0067d6 | 85 16       |                 sta.d 000016         new header
2676:000 | DONE ins | na 16 16 | 0067d8 | 80 eb       |                 bra 0067c5           
2677:000 | DONE wsp | na 16 16 |        |             |
2678:000 | DONE lbl | na 16 16 | 0067da |             | find-name_chars                      
2679:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
2680:000 | DONE wsp | na 16 16 |        |             |
2681:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
2682:000 | DONE ins | na 16 16 | 0067da | e2 20       |                 sep 20               
2682:001 | DONE ctl | na  8 16 |        |             |         .!a8
2683:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
2684:000 | DONE cmt | na  8 16 |        |             |                 ; header
2685:000 | DONE ins | na  8 16 | 0067dc | a0 08 00    |                 ldy.# 0008           
2686:000 | DONE ins | na  8 16 | 0067df | b1 16       |                 lda.diy 000016       LDA (TMP1),Y - first char of entry
2687:000 | DONE ins | na  8 16 | 0067e1 | d2 18       |                 cmp.di 000018        CMP (TMP2) - first char of mystery string
2688:000 | DONE ins | na  8 16 | 0067e3 | f0 04       |                 beq 0067e9           
2689:000 | DONE wsp | na  8 16 |        |             |
2690:000 | DONE lbl | na  8 16 | 0067e5 |             | find-name_char_nomatcnt_8            
2691:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
2692:000 | DONE ins | na  8 16 | 0067e5 | c2 20       |                 rep 20               
2692:001 | DONE ctl | na 16 16 |        |             |         .!a16
2693:000 | DONE ins | na 16 16 | 0067e7 | 80 e5       |                 bra 0067ce           
2694:000 | DONE wsp | na 16 16 |        |             |
2695:000 | DONE lbl | na 16 16 | 0067e9 |             | find-name_all_chars                  
2696:000 | DONE dir | na  8 16 |        |             |         .!a8                         
2697:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
2698:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
2699:000 | DONE ins | na  8 16 | 0067e9 | a4 1e       |                 ldy.d 00001e         
2700:000 | DONE ins | na  8 16 | 0067eb | 88          |                 dey                  faster and shorter than CPY.# 01
2701:000 | DONE ins | na  8 16 | 0067ec | f0 18       |                 beq 006806           
2702:000 | DONE wsp | na  8 16 |        |             |
2703:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
2704:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
2705:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
2706:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
2707:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
2708:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
2709:000 | DONE wsp | na  8 16 |        |             |
2710:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
2711:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
2712:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
2713:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
2714:000 | DONE ins | na  8 16 | 0067ee | c2 20       |                 rep 20               
2714:001 | DONE ctl | na 16 16 |        |             |         .!a16
2715:000 | DONE ins | na 16 16 | 0067f0 | a5 16       |                 lda.d 000016         address of Dictionary string
2716:000 | DONE ins | na 16 16 | 0067f2 | 18          |                 clc                  
2717:000 | DONE ins | na 16 16 | 0067f3 | 69 08 00    |                 adc.# 0008           
2718:000 | DONE ins | na 16 16 | 0067f6 | 85 1a       |                 sta.d 00001a         
2719:000 | DONE ins | na 16 16 | 0067f8 | e2 20       |                 sep 20               
2719:001 | DONE ctl | na  8 16 |        |             |         .!a8
2720:000 | DONE ins | na  8 16 | 0067fa | a4 1e       |                 ldy.d 00001e         get length of strings as loop index
2721:000 | DONE ins | na  8 16 | 0067fc | 88          |                 dey                  first index is length minus 1
2722:000 | DONE wsp | na  8 16 |        |             |
2723:000 | DONE lbl | na  8 16 | 0067fd |             | @                                    
2724:000 | DONE ins | na  8 16 | 0067fd | b1 18       |                 lda.diy 000018       LDA (TMP2),Y - last char of mystery string
2725:000 | DONE ins | na  8 16 | 0067ff | d1 1a       |                 cmp.diy 00001a       CMP (TMP1),Y - last char of DP string
2726:000 | DONE ins | na  8 16 | 006801 | d0 e2       |                 bne 0067e5           
2727:000 | DONE ins | na  8 16 | 006803 | 88          |                 dey                  start of string (Y=0) was already tested
2728:000 | DONE ins | na  8 16 | 006804 | d0 f7       |                 bne 0067fd           
2729:000 | DONE wsp | na  8 16 |        |             |
2730:000 | DONE lbl | na  8 16 | 006806 |             | find-name_success                    
2731:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
2732:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
2733:000 | DONE ins | na  8 16 | 006806 | c2 20       |                 rep 20               
2733:001 | DONE ctl | na 16 16 |        |             |         .!a16
2734:000 | DONE ins | na 16 16 | 006808 | a4 16       |                 ldy.d 000016         get the correct DP
2735:000 | DONE ins | na 16 16 | 00680a | 80 03       |                 bra 00680f           
2736:000 | DONE wsp | na 16 16 |        |             |
2737:000 | DONE wsp | na 16 16 |        |             |
2738:000 | DONE lbl | na 16 16 | 00680c |             | find-name_failure_16                 
2739:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
2740:000 | DONE cmt | na 16 16 |        |             |                 ; bit
2741:000 | DONE ins | na 16 16 | 00680c | a0 00 00    |                 ldy.# 0000           fall thru
2742:000 | DONE wsp | na 16 16 |        |             |
2743:000 | DONE lbl | na 16 16 | 00680f |             | find-name_done                       
2744:000 | DONE ins | na 16 16 | 00680f | e8          |                 inx                  drop old address (NIP)
2745:000 | DONE ins | na 16 16 | 006810 | e8          |                 inx                  
2746:000 | DONE wsp | na 16 16 |        |             |
2747:000 | DONE lbl | na 16 16 | 006811 |             | z_find-name                          
2747:001 | DONE ins | na 16 16 | 006811 | 60          |                 rts                  
2748:000 | DONE wsp | na 16 16 |        |             |
2749:000 | DONE wsp | na 16 16 |        |             |
2750:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2751:000 | DONE cmt | na 16 16 |        |             | ; FM/MOD ( d n1 -- n2 n3 ) X bytes / X cycles
2752:000 | DONE cmt | na 16 16 |        |             | ; Floored division, compare with SM/REM. We define FM/MOD in terms of UM/MOD,
2753:000 | DONE cmt | na 16 16 |        |             | ; see http://git.savannah.gnu.org/cgit/gforth.git/tree/prim We prefer to use
2754:000 | DONE cmt | na 16 16 |        |             | ; SM/REM for further words. You could also define FM/MOD in Terms of SM/REM,
2755:000 | DONE cmt | na 16 16 |        |             | ; see http://www.figuk.plus.com/build/arith.htm
2756:000 | DONE cmt | na 16 16 |        |             | ; Original Forth: DUP >R DUP 0< IF NEGATE >R DNEGATE R> THEN >R DUP 0< R@ AND +
2757:000 | DONE cmt | na 16 16 |        |             | ; R> UM/MOD R> 0< IF SWAP NEGATE SWAP THEN ;
2758:000 | DONE cmt | na 16 16 |        |             | ; TODO this is just a 1:1 list of jumps, optimize once it is working
2759:000 | DONE lbl | na 16 16 | 006812 |             | xt_fmmod                             
2760:000 | DONE ins | na 16 16 | 006812 | 20 57 67    |                 jsr 006757           
2761:000 | DONE ins | na 16 16 | 006815 | 20 8a 61    |                 jsr 00618a           
2762:000 | DONE ins | na 16 16 | 006818 | 20 57 67    |                 jsr 006757           
2763:000 | DONE wsp | na 16 16 |        |             |
2764:000 | DONE ins | na 16 16 | 00681b | 98          |                 tya                  0< IF
2765:000 | DONE ins | na 16 16 | 00681c | 10 12       |                 bpl 006830           
2766:000 | DONE wsp | na 16 16 |        |             |
2767:000 | DONE ins | na 16 16 | 00681e | b4 00       |                 ldy.dx 00            
2768:000 | DONE ins | na 16 16 | 006820 | e8          |                 inx                  
2769:000 | DONE ins | na 16 16 | 006821 | e8          |                 inx                  
2770:000 | DONE wsp | na 16 16 |        |             |
2771:000 | DONE ins | na 16 16 | 006822 | 20 55 69    |                 jsr 006955           
2772:000 | DONE ins | na 16 16 | 006825 | 20 8a 61    |                 jsr 00618a           
2773:000 | DONE ins | na 16 16 | 006828 | 20 f4 66    |                 jsr 0066f4           
2774:000 | DONE ins | na 16 16 | 00682b | 20 cc 6a    |                 jsr 006acc           
2775:000 | DONE wsp | na 16 16 |        |             |
2776:000 | DONE ins | na 16 16 | 00682e | 80 04       |                 bra 006834           
2777:000 | DONE lbl | na 16 16 | 006830 |             | fmmod_1                              
2778:000 | DONE ins | na 16 16 | 006830 | b4 00       |                 ldy.dx 00            
2779:000 | DONE ins | na 16 16 | 006832 | e8          |                 inx                  
2780:000 | DONE ins | na 16 16 | 006833 | e8          |                 inx                  
2781:000 | DONE lbl | na 16 16 | 006834 |             | fmmod_1_1                            
2782:000 | DONE ins | na 16 16 | 006834 | 20 8a 61    |                 jsr 00618a           
2783:000 | DONE ins | na 16 16 | 006837 | 20 57 67    |                 jsr 006757           
2784:000 | DONE ins | na 16 16 | 00683a | 20 35 63    |                 jsr 006335           
2785:000 | DONE ins | na 16 16 | 00683d | 20 c3 6a    |                 jsr 006ac3           
2786:000 | DONE ins | na 16 16 | 006840 | 20 e4 64    |                 jsr 0064e4           
2787:000 | DONE ins | na 16 16 | 006843 | 20 e2 62    |                 jsr 0062e2           
2788:000 | DONE ins | na 16 16 | 006846 | 20 cc 6a    |                 jsr 006acc           
2789:000 | DONE ins | na 16 16 | 006849 | 20 1c 6d    |                 jsr 006d1c           
2790:000 | DONE ins | na 16 16 | 00684c | 20 cc 6a    |                 jsr 006acc           
2791:000 | DONE wsp | na 16 16 |        |             |
2792:000 | DONE ins | na 16 16 | 00684f | 98          |                 tya                  
2793:000 | DONE ins | na 16 16 | 006850 | 10 0f       |                 bpl 006861           
2794:000 | DONE wsp | na 16 16 |        |             |
2795:000 | DONE ins | na 16 16 | 006852 | b4 00       |                 ldy.dx 00            
2796:000 | DONE ins | na 16 16 | 006854 | e8          |                 inx                  
2797:000 | DONE ins | na 16 16 | 006855 | e8          |                 inx                  
2798:000 | DONE wsp | na 16 16 |        |             |
2799:000 | DONE ins | na 16 16 | 006856 | 20 60 6c    |                 jsr 006c60           
2800:000 | DONE ins | na 16 16 | 006859 | 20 55 69    |                 jsr 006955           
2801:000 | DONE ins | na 16 16 | 00685c | 20 60 6c    |                 jsr 006c60           
2802:000 | DONE wsp | na 16 16 |        |             |
2803:000 | DONE ins | na 16 16 | 00685f | 80 04       |                 bra 006865           
2804:000 | DONE lbl | na 16 16 | 006861 |             | fmmod_2                              
2805:000 | DONE wsp | na 16 16 |        |             |
2806:000 | DONE ins | na 16 16 | 006861 | b4 00       |                 ldy.dx 00            
2807:000 | DONE ins | na 16 16 | 006863 | e8          |                 inx                  
2808:000 | DONE ins | na 16 16 | 006864 | e8          |                 inx                  
2809:000 | DONE wsp | na 16 16 |        |             |
2810:000 | DONE lbl | na 16 16 | 006865 |             | fmmod_2_1                            
2811:000 | DONE wsp | na 16 16 |        |             |
2812:000 | DONE lbl | na 16 16 | 006865 |             | z_fmmod                              
2812:001 | DONE ins | na 16 16 | 006865 | 60          |                 rts                  
2813:000 | DONE wsp | na 16 16 |        |             |
2814:000 | DONE wsp | na 16 16 |        |             |
2815:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2816:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
2817:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
2818:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
2819:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
2820:000 | DONE lbl | na 16 16 | 006866 |             | xt_immediate                         
2821:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2822:000 | DONE ins | na 16 16 | 006866 | a9 02 00    |                 lda.# IM             Immediate flag
2823:000 | DONE ins | na 16 16 | 006869 | eb          |                 xba                  flags are MSB
2824:000 | DONE ins | na 16 16 | 00686a | 12 02       |                 ora.di 000002        ORA (DP)
2825:000 | DONE ins | na 16 16 | 00686c | 92 02       |                 sta.di 000002        
2826:000 | DONE wsp | na 16 16 |        |             |
2827:000 | DONE lbl | na 16 16 | 00686e |             | z_immediate                          
2827:001 | DONE ins | na 16 16 | 00686e | 60          |                 rts                  
2828:000 | DONE wsp | na 16 16 |        |             |
2829:000 | DONE wsp | na 16 16 |        |             |
2830:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2831:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
2832:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
2833:000 | DONE lbl | na 16 16 | 00686f |             | xt_invert                            
2834:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2835:000 | DONE ins | na 16 16 | 00686f | 98          |                 tya                  
2836:000 | DONE ins | na 16 16 | 006870 | 49 ff ff    |                 eor.# 0ffff          
2837:000 | DONE ins | na 16 16 | 006873 | a8          |                 tay                  
2838:000 | DONE wsp | na 16 16 |        |             |
2839:000 | DONE lbl | na 16 16 | 006874 |             | z_invert                             
2839:001 | DONE ins | na 16 16 | 006874 | 60          |                 rts                  
2840:000 | DONE wsp | na 16 16 |        |             |
2841:000 | DONE wsp | na 16 16 |        |             |
2842:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2843:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
2844:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
2845:000 | DONE lbl | na 16 16 | 006875 |             | xt_here                              
2846:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2847:000 | DONE ins | na 16 16 | 006875 | ca          |                 dex                  
2848:000 | DONE ins | na 16 16 | 006876 | ca          |                 dex                  
2849:000 | DONE ins | na 16 16 | 006877 | 94 00       |                 sty.dx 00            
2850:000 | DONE wsp | na 16 16 |        |             |
2851:000 | DONE ins | na 16 16 | 006879 | a4 00       |                 ldy.d 000000         
2852:000 | DONE wsp | na 16 16 |        |             |
2853:000 | DONE lbl | na 16 16 | 00687b |             | z_here                               
2853:001 | DONE ins | na 16 16 | 00687b | 60          |                 rts                  
2854:000 | DONE wsp | na 16 16 |        |             |
2855:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2856:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
2857:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
2858:000 | DONE lbl | na 16 16 | 00687c |             | xt_hex                               
2859:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2860:000 | DONE ins | na 16 16 | 00687c | a9 10 00    |                 lda.# 0010           
2861:000 | DONE ins | na 16 16 | 00687f | 85 10       |                 sta.d 000010         
2862:000 | DONE wsp | na 16 16 |        |             |
2863:000 | DONE lbl | na 16 16 | 006881 |             | z_hex                                
2863:001 | DONE ins | na 16 16 | 006881 | 60          |                 rts                  
2864:000 | DONE wsp | na 16 16 |        |             |
2865:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2866:000 | DONE cmt | na 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
2867:000 | DONE cmt | na 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
2868:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2869:000 | DONE cmt | na 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
2870:000 | DONE cmt | na 16 16 |        |             | ; tohold instead of HLD.
2871:000 | DONE lbl | na 16 16 | 006882 |             | xt_hold                              
2872:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2873:000 | DONE ins | na 16 16 | 006882 | c6 12       |                 dec.d 000012         -1 HLD +!
2874:000 | DONE wsp | na 16 16 |        |             |
2875:000 | DONE ins | na 16 16 | 006884 | 98          |                 tya                  
2876:000 | DONE ins | na 16 16 | 006885 | e2 20       |                 sep 20               
2876:001 | DONE ctl | na  8 16 |        |             |         .!a8
2877:000 | DONE ins | na  8 16 | 006887 | 92 12       |                 sta.di 000012        STA (TOHOLD)
2878:000 | DONE ins | na  8 16 | 006889 | c2 20       |                 rep 20               
2878:001 | DONE ctl | na 16 16 |        |             |         .!a16
2879:000 | DONE ins | na 16 16 | 00688b | b4 00       |                 ldy.dx 00            
2880:000 | DONE ins | na 16 16 | 00688d | e8          |                 inx                  
2881:000 | DONE ins | na 16 16 | 00688e | e8          |                 inx                  
2882:000 | DONE wsp | na 16 16 |        |             |
2883:000 | DONE lbl | na 16 16 | 00688f |             | z_hold                               
2883:001 | DONE ins | na 16 16 | 00688f | 60          |                 rts                  
2884:000 | DONE wsp | na 16 16 |        |             |
2885:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2886:000 | DONE cmt | na 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
2887:000 | DONE cmt | na 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
2888:000 | DONE cmt | na 16 16 |        |             | ; version of this word is called LATEST.
2889:000 | DONE lbl | na 16 16 | 006890 |             | xt_latestnt                          
2890:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2891:000 | DONE ins | na 16 16 | 006890 | ca          |                 dex                  make room on Data Stack
2892:000 | DONE ins | na 16 16 | 006891 | ca          |                 dex                  
2893:000 | DONE ins | na 16 16 | 006892 | 94 00       |                 sty.dx 00            
2894:000 | DONE wsp | na 16 16 |        |             |
2895:000 | DONE ins | na 16 16 | 006894 | a5 02       |                 lda.d 000002         
2896:000 | DONE ins | na 16 16 | 006896 | a8          |                 tay                  
2897:000 | DONE wsp | na 16 16 |        |             |
2898:000 | DONE lbl | na 16 16 | 006897 |             | z_latestnt                           
2898:001 | DONE ins | na 16 16 | 006897 | 60          |                 rts                  
2899:000 | DONE wsp | na 16 16 |        |             |
2900:000 | DONE wsp | na 16 16 |        |             |
2901:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2902:000 | DONE cmt | na 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
2903:000 | DONE cmt | na 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
2904:000 | DONE cmt | na 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
2905:000 | DONE lbl | na 16 16 | 006898 |             | xt_latestxt                          
2906:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2907:000 | DONE ins | na 16 16 | 006898 | ca          |                 dex                  make room on Data Stack
2908:000 | DONE ins | na 16 16 | 006899 | ca          |                 dex                  
2909:000 | DONE ins | na 16 16 | 00689a | 94 00       |                 sty.dx 00            
2910:000 | DONE wsp | na 16 16 |        |             |
2911:000 | DONE ins | na 16 16 | 00689c | a5 02       |                 lda.d 000002         
2912:000 | DONE wsp | na 16 16 |        |             |
2913:000 | DONE ins | na 16 16 | 00689e | 18          |                 clc                  xt is stored four bytes below nt in header
2914:000 | DONE ins | na 16 16 | 00689f | 69 04 00    |                 adc.# 0004           
2915:000 | DONE ins | na 16 16 | 0068a2 | a8          |                 tay                  
2916:000 | DONE wsp | na 16 16 |        |             |
2917:000 | DONE ins | na 16 16 | 0068a3 | b9 00 00    |                 lda.y 0000           FETCH
2918:000 | DONE ins | na 16 16 | 0068a6 | a8          |                 tay                  
2919:000 | DONE wsp | na 16 16 |        |             |
2920:000 | DONE lbl | na 16 16 | 0068a7 |             | z_latestxt                           
2920:001 | DONE ins | na 16 16 | 0068a7 | 60          |                 rts                  
2921:000 | DONE wsp | na 16 16 |        |             |
2922:000 | DONE wsp | na 16 16 |        |             |
2923:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2924:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
2925:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
2926:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
2927:000 | DONE cmt | na 16 16 |        |             | ; for instance
2928:000 | DONE lbl | na 16 16 | 0068a8 |             | xt_literal                           
2929:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
2930:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
2931:000 | DONE ins | na 16 16 | 0068a8 | f4 ba 68    |                 phe.# 0068ba         PEA LITERAL_RT
2932:000 | DONE ins | na 16 16 | 0068ab | 20 16 76    |                 jsr 007616           
2933:000 | DONE wsp | na 16 16 |        |             |
2934:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
2935:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
2936:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
2937:000 | DONE ins | na 16 16 | 0068ae | 98          |                 tya                  
2938:000 | DONE ins | na 16 16 | 0068af | 92 00       |                 sta.di 000000        
2939:000 | DONE ins | na 16 16 | 0068b1 | e6 00       |                 inc.d 000000         
2940:000 | DONE ins | na 16 16 | 0068b3 | e6 00       |                 inc.d 000000         
2941:000 | DONE wsp | na 16 16 |        |             |
2942:000 | DONE ins | na 16 16 | 0068b5 | b4 00       |                 ldy.dx 00            DROP
2943:000 | DONE ins | na 16 16 | 0068b7 | e8          |                 inx                  
2944:000 | DONE ins | na 16 16 | 0068b8 | e8          |                 inx                  
2945:000 | DONE wsp | na 16 16 |        |             |
2946:000 | DONE lbl | na 16 16 | 0068b9 |             | z_literal                            
2946:001 | DONE ins | na 16 16 | 0068b9 | 60          |                 rts                  
2947:000 | DONE wsp | na 16 16 |        |             |
2948:000 | DONE lbl | na 16 16 | 0068ba |             | literal_rt                           
2949:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
2950:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
2951:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
2952:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
2953:000 | DONE wsp | na 16 16 |        |             |
2954:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
2955:000 | DONE ins | na 16 16 | 0068ba | ca          |                 dex                  
2956:000 | DONE ins | na 16 16 | 0068bb | ca          |                 dex                  
2957:000 | DONE ins | na 16 16 | 0068bc | 94 00       |                 sty.dx 00            
2958:000 | DONE wsp | na 16 16 |        |             |
2959:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
2960:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
2961:000 | DONE ins | na 16 16 | 0068be | 7a          |                 ply                  
2962:000 | DONE ins | na 16 16 | 0068bf | c8          |                 iny                  
2963:000 | DONE ins | na 16 16 | 0068c0 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
2964:000 | DONE wsp | na 16 16 |        |             |
2965:000 | DONE ins | na 16 16 | 0068c3 | c8          |                 iny                  move return address past data and restore
2966:000 | DONE ins | na 16 16 | 0068c4 | 5a          |                 phy                  so we can get back home
2967:000 | DONE wsp | na 16 16 |        |             |
2968:000 | DONE ins | na 16 16 | 0068c5 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
2969:000 | DONE wsp | na 16 16 |        |             |
2970:000 | DONE ins | na 16 16 | 0068c6 | 60          |                 rts                  
2971:000 | DONE wsp | na 16 16 |        |             |
2972:000 | DONE wsp | na 16 16 |        |             |
2973:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2974:000 | DONE cmt | na 16 16 |        |             | ; LSHIFT ( n u -- n ) X bytes / X cycles
2975:000 | DONE cmt | na 16 16 |        |             | ; Logically shift TOS u times to the left, adding zeros to the right
2976:000 | DONE lbl | na 16 16 | 0068c7 |             | xt_lshift                            
2977:000 | DONE cmt | na 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
2978:000 | DONE cmt | na 16 16 |        |             |                 ; zeros anyway
2979:000 | DONE ins | na 16 16 | 0068c7 | 98          |                 tya                  
2980:000 | DONE ins | na 16 16 | 0068c8 | 29 0f 00    |                 and.# 000f           
2981:000 | DONE ins | na 16 16 | 0068cb | f0 09       |                 beq 0068d6           if zero shifts, we're done
2982:000 | DONE wsp | na 16 16 |        |             |
2983:000 | DONE ins | na 16 16 | 0068cd | a8          |                 tay                  number of shifts is TOS
2984:000 | DONE ins | na 16 16 | 0068ce | b5 00       |                 lda.dx 00            number is in NOS
2985:000 | DONE lbl | na 16 16 | 0068d0 |             | lshift_loop                          
2986:000 | DONE ins | na 16 16 | 0068d0 | 0a          |                 asl.a                
2987:000 | DONE ins | na 16 16 | 0068d1 | 88          |                 dey                  
2988:000 | DONE ins | na 16 16 | 0068d2 | d0 fc       |                 bne 0068d0           
2989:000 | DONE wsp | na 16 16 |        |             |
2990:000 | DONE ins | na 16 16 | 0068d4 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
2991:000 | DONE wsp | na 16 16 |        |             |
2992:000 | DONE lbl | na 16 16 | 0068d6 |             | lshift_done                          
2993:000 | DONE ins | na 16 16 | 0068d6 | b4 00       |                 ldy.dx 00            
2994:000 | DONE ins | na 16 16 | 0068d8 | e8          |                 inx                  
2995:000 | DONE ins | na 16 16 | 0068d9 | e8          |                 inx                  
2996:000 | DONE wsp | na 16 16 |        |             |
2997:000 | DONE lbl | na 16 16 | 0068da |             | z_lshift                             
2997:001 | DONE ins | na 16 16 | 0068da | 60          |                 rts                  
2998:000 | DONE wsp | na 16 16 |        |             |
2999:000 | DONE wsp | na 16 16 |        |             |
3000:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3001:000 | DONE cmt | na 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
3002:000 | DONE cmt | na 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
3003:000 | DONE cmt | na 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
3004:000 | DONE cmt | na 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
3005:000 | DONE cmt | na 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
3006:000 | DONE cmt | na 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
3007:000 | DONE lbl | na 16 16 | 0068db |             | xt_mstar                             
3008:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3009:000 | DONE cmt | na 16 16 |        |             |                 ; figure out the sign
3010:000 | DONE ins | na 16 16 | 0068db | 98          |                 tya                  
3011:000 | DONE ins | na 16 16 | 0068dc | 55 00       |                 eor.dx 00            
3012:000 | DONE wsp | na 16 16 |        |             |
3013:000 | DONE cmt | na 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
3014:000 | DONE cmt | na 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
3015:000 | DONE ins | na 16 16 | 0068de | 48          |                 pha                  
3016:000 | DONE wsp | na 16 16 |        |             |
3017:000 | DONE cmt | na 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
3018:000 | DONE cmt | na 16 16 |        |             |                 ; UM*, which does the real work
3019:000 | DONE ins | na 16 16 | 0068df | 98          |                 tya                  
3020:000 | DONE ins | na 16 16 | 0068e0 | 10 05       |                 bpl 0068e7           
3021:000 | DONE wsp | na 16 16 |        |             |
3022:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is negative so we have to ABS it
3023:000 | DONE ins | na 16 16 | 0068e2 | 49 ff ff    |                 eor.# 0ffff          
3024:000 | DONE ins | na 16 16 | 0068e5 | 1a          |                 inc.a                
3025:000 | DONE ins | na 16 16 | 0068e6 | a8          |                 tay                  
3026:000 | DONE wsp | na 16 16 |        |             |
3027:000 | DONE lbl | na 16 16 | 0068e7 |             | mstar_abs_nos                        
3028:000 | DONE ins | na 16 16 | 0068e7 | b5 00       |                 lda.dx 00            
3029:000 | DONE ins | na 16 16 | 0068e9 | 10 06       |                 bpl 0068f1           
3030:000 | DONE wsp | na 16 16 |        |             |
3031:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is negative so we have to ABS it
3032:000 | DONE ins | na 16 16 | 0068eb | 49 ff ff    |                 eor.# 0ffff          
3033:000 | DONE ins | na 16 16 | 0068ee | 1a          |                 inc.a                
3034:000 | DONE ins | na 16 16 | 0068ef | 95 00       |                 sta.dx 00            
3035:000 | DONE wsp | na 16 16 |        |             |
3036:000 | DONE lbl | na 16 16 | 0068f1 |             | mstar_umstar                         
3037:000 | DONE ins | na 16 16 | 0068f1 | 20 bd 6c    |                 jsr 006cbd           now ( d ) on stack
3038:000 | DONE wsp | na 16 16 |        |             |
3039:000 | DONE cmt | na 16 16 |        |             |                 ; handle the sign
3040:000 | DONE ins | na 16 16 | 0068f4 | 68          |                 pla                  
3041:000 | DONE wsp | na 16 16 |        |             |
3042:000 | DONE cmt | na 16 16 |        |             |                 ; postive, we don't have to care
3043:000 | DONE ins | na 16 16 | 0068f5 | 10 03       |                 bpl 0068fa           
3044:000 | DONE wsp | na 16 16 |        |             |
3045:000 | DONE ins | na 16 16 | 0068f7 | 20 f4 66    |                 jsr 0066f4           
3046:000 | DONE wsp | na 16 16 |        |             |
3047:000 | DONE lbl | na 16 16 | 0068fa |             | z_mstar                              
3047:001 | DONE ins | na 16 16 | 0068fa | 60          |                 rts                  
3048:000 | DONE wsp | na 16 16 |        |             |
3049:000 | DONE wsp | na 16 16 |        |             |
3050:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3051:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
3052:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
3053:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3054:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3055:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3056:000 | DONE lbl | na 16 16 | 0068fb |             | xt_max                               
3057:000 | DONE ins | na 16 16 | 0068fb | 98          |                 tya                  
3058:000 | DONE ins | na 16 16 | 0068fc | d5 00       |                 cmp.dx 00            
3059:000 | DONE wsp | na 16 16 |        |             |
3060:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3061:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
3062:000 | DONE ins | na 16 16 | 0068fe | f0 0b       |                 beq 00690b           Faster than DROP because TOS is in Y
3063:000 | DONE wsp | na 16 16 |        |             |
3064:000 | DONE ins | na 16 16 | 006900 | f5 00       |                 sbc.dx 00            
3065:000 | DONE ins | na 16 16 | 006902 | 50 03       |                 bvc 006907           no overflow, skip ahead
3066:000 | DONE wsp | na 16 16 |        |             |
3067:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3068:000 | DONE ins | na 16 16 | 006904 | 49 00 80    |                 eor.# 8000           compliment negative flag
3069:000 | DONE wsp | na 16 16 |        |             |
3070:000 | DONE lbl | na 16 16 | 006907 |             | max_no_ov                            
3071:000 | DONE ins | na 16 16 | 006907 | 10 02       |                 bpl 00690b           keep TOS
3072:000 | DONE lbl | na 16 16 | 006909 |             | max_drop                             
3073:000 | DONE ins | na 16 16 | 006909 | b4 00       |                 ldy.dx 00            DROP so NOS is result
3074:000 | DONE lbl | na 16 16 | 00690b |             | max_nip                              
3075:000 | DONE ins | na 16 16 | 00690b | e8          |                 inx                  
3076:000 | DONE ins | na 16 16 | 00690c | e8          |                 inx                  
3077:000 | DONE wsp | na 16 16 |        |             |
3078:000 | DONE lbl | na 16 16 | 00690d |             | z_max                                
3078:001 | DONE ins | na 16 16 | 00690d | 60          |                 rts                  
3079:000 | DONE wsp | na 16 16 |        |             |
3080:000 | DONE wsp | na 16 16 |        |             |
3081:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3082:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
3083:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
3084:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3085:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3086:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3087:000 | DONE lbl | na 16 16 | 00690e |             | xt_min                               
3088:000 | DONE ins | na 16 16 | 00690e | 98          |                 tya                  
3089:000 | DONE ins | na 16 16 | 00690f | d5 00       |                 cmp.dx 00            
3090:000 | DONE wsp | na 16 16 |        |             |
3091:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3092:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
3093:000 | DONE ins | na 16 16 | 006911 | f0 0b       |                 beq 00691e           Faster than DROP because TOS is in Y
3094:000 | DONE wsp | na 16 16 |        |             |
3095:000 | DONE ins | na 16 16 | 006913 | f5 00       |                 sbc.dx 00            
3096:000 | DONE ins | na 16 16 | 006915 | 50 03       |                 bvc 00691a           no overflow, skip ahead
3097:000 | DONE wsp | na 16 16 |        |             |
3098:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3099:000 | DONE ins | na 16 16 | 006917 | 49 00 80    |                 eor.# 8000           compliment negative flag
3100:000 | DONE wsp | na 16 16 |        |             |
3101:000 | DONE lbl | na 16 16 | 00691a |             | min_no_ov                            
3102:000 | DONE ins | na 16 16 | 00691a | 30 02       |                 bmi 00691e           keep TOS
3103:000 | DONE lbl | na 16 16 | 00691c |             | min_drop                             
3104:000 | DONE ins | na 16 16 | 00691c | b4 00       |                 ldy.dx 00            DROP so NOS is result
3105:000 | DONE lbl | na 16 16 | 00691e |             | min_nip                              
3106:000 | DONE ins | na 16 16 | 00691e | e8          |                 inx                  
3107:000 | DONE ins | na 16 16 | 00691f | e8          |                 inx                  
3108:000 | DONE wsp | na 16 16 |        |             |
3109:000 | DONE lbl | na 16 16 | 006920 |             | z_min                                
3109:001 | DONE ins | na 16 16 | 006920 | 60          |                 rts                  
3110:000 | DONE wsp | na 16 16 |        |             |
3111:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3112:000 | DONE cmt | na 16 16 |        |             | ; MOVE ( addr1 addr2 u -- ) X bytes / X cycles
3113:000 | DONE cmt | na 16 16 |        |             | ; Move u bytes from addr1 to addr2, so that in the end, addr2 contains exactly
3114:000 | DONE cmt | na 16 16 |        |             | ; what was in addr1. This routine calls CMOVE or CMOVE>. Forth verison is
3115:000 | DONE cmt | na 16 16 |        |             | ; >R 2DUP U< IF R> CMOVE> ELSE  R> CMOVE THEN ; see
3116:000 | DONE cmt | na 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/-l2WlE7pEE0
3117:000 | DONE cmt | na 16 16 |        |             | ; Also see CMOVE> and CMOVE and http://forum.6502.org/viewtopic.php?f=2&t=1685
3118:000 | DONE lbl | na 16 16 | 006921 |             | xt_move                              
3119:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3120:000 | DONE cmt | na 16 16 |        |             |                 ; if u is zero, we just skip all of this
3121:000 | DONE ins | na 16 16 | 006921 | 98          |                 tya                  
3122:000 | DONE ins | na 16 16 | 006922 | f0 0e       |                 beq 006932           
3123:000 | DONE wsp | na 16 16 |        |             |
3124:000 | DONE cmt | na 16 16 |        |             |                 ; if source and destination are the same, that would be silly as
3125:000 | DONE cmt | na 16 16 |        |             |                 ; well
3126:000 | DONE ins | na 16 16 | 006924 | b5 00       |                 lda.dx 00            addr2 (destination)
3127:000 | DONE ins | na 16 16 | 006926 | d5 04       |                 cmp.dx 04            addr1 (source)
3128:000 | DONE ins | na 16 16 | 006928 | f0 08       |                 beq 006932           
3129:000 | DONE wsp | na 16 16 |        |             |
3130:000 | DONE cmt | na 16 16 |        |             |                 ; The destination is higher than the source, so use CMOVE, which
3131:000 | DONE cmt | na 16 16 |        |             |                 ; calls MVP
3132:000 | DONE ins | na 16 16 | 00692a | 10 03       |                 bpl 00692f           
3133:000 | DONE wsp | na 16 16 |        |             |
3134:000 | DONE ins | na 16 16 | 00692c | 4c 72 65    |                 jmp 006572           JSR/RTS
3135:000 | DONE wsp | na 16 16 |        |             |
3136:000 | DONE cmt | na 16 16 |        |             |                 ; The source is higher than the destination, use CMOVE>,
3137:000 | DONE cmt | na 16 16 |        |             |                 ; which calls MVN
3138:000 | DONE lbl | na 16 16 | 00692f |             | move_cmoveup                         
3139:000 | DONE ins | na 16 16 | 00692f | 4c 95 65    |                 jmp 006595           
3140:000 | DONE wsp | na 16 16 |        |             |
3141:000 | DONE lbl | na 16 16 | 006932 |             | z_move                               ; never reached
3142:000 | DONE wsp | na 16 16 |        |             |
3143:000 | DONE wsp | na 16 16 |        |             |
3144:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3145:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
3146:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
3147:000 | DONE lbl | na 16 16 | 006932 |             | xt_name-int                          
3148:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3149:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3150:000 | DONE cmt | na 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
3151:000 | DONE ins | na 16 16 | 006932 | c8          |                 iny                  
3152:000 | DONE ins | na 16 16 | 006933 | c8          |                 iny                  
3153:000 | DONE ins | na 16 16 | 006934 | c8          |                 iny                  
3154:000 | DONE ins | na 16 16 | 006935 | c8          |                 iny                  
3155:000 | DONE ins | na 16 16 | 006936 | b9 00 00    |                 lda.y 0000           
3156:000 | DONE ins | na 16 16 | 006939 | a8          |                 tay                  
3157:000 | DONE wsp | na 16 16 |        |             |
3158:000 | DONE lbl | na 16 16 | 00693a |             | z_name-int                           
3158:001 | DONE ins | na 16 16 | 00693a | 60          |                 rts                  
3159:000 | DONE wsp | na 16 16 |        |             |
3160:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3161:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
3162:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
3163:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
3164:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
3165:000 | DONE lbl | na 16 16 | 00693b |             | xt_name-string                       
3166:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3167:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3168:000 | DONE ins | na 16 16 | 00693b | ca          |                 dex                  move NOS down one
3169:000 | DONE ins | na 16 16 | 00693c | ca          |                 dex                  
3170:000 | DONE wsp | na 16 16 |        |             |
3171:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
3172:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
3173:000 | DONE ins | na 16 16 | 00693d | 98          |                 tya                  
3174:000 | DONE ins | na 16 16 | 00693e | 18          |                 clc                  
3175:000 | DONE ins | na 16 16 | 00693f | 69 08 00    |                 adc.# 0008           
3176:000 | DONE ins | na 16 16 | 006942 | 95 00       |                 sta.dx 00            NOS
3177:000 | DONE wsp | na 16 16 |        |             |
3178:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
3179:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
3180:000 | DONE ins | na 16 16 | 006944 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3181:000 | DONE ins | na 16 16 | 006947 | 29 ff 00    |                 and.# 00ff           mask all but length byte
3182:000 | DONE ins | na 16 16 | 00694a | a8          |                 tay                  
3183:000 | DONE wsp | na 16 16 |        |             |
3184:000 | DONE lbl | na 16 16 | 00694b |             | z_name-string                        
3184:001 | DONE ins | na 16 16 | 00694b | 60          |                 rts                  
3185:000 | DONE wsp | na 16 16 |        |             |
3186:000 | DONE wsp | na 16 16 |        |             |
3187:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3188:000 | DONE cmt | na 16 16 |        |             | ; NATIVE-COMPILE ( -- ) X bytes / X cycles
3189:000 | DONE cmt | na 16 16 |        |             | ; Enable native compilation for last word in Dictionary
3190:000 | DONE lbl | na 16 16 | 00694c |             | xt_native-compile                    
3191:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3192:000 | DONE ins | na 16 16 | 00694c | a9 01 00    |                 lda.# NC             
3193:000 | DONE ins | na 16 16 | 00694f | eb          |                 xba                  flags are MSB
3194:000 | DONE ins | na 16 16 | 006950 | 12 02       |                 ora.di 000002        ORA (DP)
3195:000 | DONE ins | na 16 16 | 006952 | 92 02       |                 sta.di 000002        
3196:000 | DONE wsp | na 16 16 |        |             |
3197:000 | DONE lbl | na 16 16 | 006954 |             | z_native-compile                     
3198:000 | DONE ins | na 16 16 | 006954 | 60          |                 rts                  
3199:000 | DONE wsp | na 16 16 |        |             |
3200:000 | DONE wsp | na 16 16 |        |             |
3201:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3202:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
3203:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
3204:000 | DONE lbl | na 16 16 | 006955 |             | xt_negate                            
3205:000 | DONE ins | na 16 16 | 006955 | 98          |                 tya                  
3206:000 | DONE ins | na 16 16 | 006956 | 49 ff ff    |                 eor.# 0ffff          
3207:000 | DONE ins | na 16 16 | 006959 | 1a          |                 inc.a                
3208:000 | DONE ins | na 16 16 | 00695a | a8          |                 tay                  
3209:000 | DONE wsp | na 16 16 |        |             |
3210:000 | DONE lbl | na 16 16 | 00695b |             | z_negate                             
3210:001 | DONE ins | na 16 16 | 00695b | 60          |                 rts                  
3211:000 | DONE wsp | na 16 16 |        |             |
3212:000 | DONE wsp | na 16 16 |        |             |
3213:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3214:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
3215:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
3216:000 | DONE lbl | na 16 16 | 00695c |             | xt_nip                               
3217:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3218:000 | DONE ins | na 16 16 | 00695c | e8          |                 inx                  
3219:000 | DONE ins | na 16 16 | 00695d | e8          |                 inx                  
3220:000 | DONE lbl | na 16 16 | 00695e |             | z_nip                                
3220:001 | DONE ins | na 16 16 | 00695e | 60          |                 rts                  
3221:000 | DONE wsp | na 16 16 |        |             |
3222:000 | DONE wsp | na 16 16 |        |             |
3223:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3224:000 | DONE cmt | na 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
3225:000 | DONE cmt | na 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
3226:000 | DONE cmt | na 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
3227:000 | DONE cmt | na 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
3228:000 | DONE cmt | na 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
3229:000 | DONE cmt | na 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
3230:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
3231:000 | DONE cmt | na 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
3232:000 | DONE cmt | na 16 16 |        |             | ; signal a double cell number is required to be the last character of the
3233:000 | DONE cmt | na 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
3234:000 | DONE cmt | na 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
3235:000 | DONE lbl | na 16 16 | 00695f |             | xt_number                            
3236:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3237:000 | DONE cmt | na 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
3238:000 | DONE cmt | na 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
3239:000 | DONE cmt | na 16 16 |        |             |                 ; for double
3240:000 | DONE ins | na 16 16 | 00695f | f4 00 00    |                 phe.# 0000           
3241:000 | DONE wsp | na 16 16 |        |             |
3242:000 | DONE ins | na 16 16 | 006962 | 84 1e       |                 sty.d 00001e         save length of string, freeing Y
3243:000 | DONE wsp | na 16 16 |        |             |
3244:000 | DONE cmt | na 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
3245:000 | DONE cmt | na 16 16 |        |             |                 ; a flag
3246:000 | DONE ins | na 16 16 | 006964 | e2 20       |                 sep 20               
3246:001 | DONE ctl | na  8 16 |        |             |         .!a8
3247:000 | DONE ins | na  8 16 | 006966 | a1 00       |                 lda.dxi 00           get first character
3248:000 | DONE ins | na  8 16 | 006968 | c9 2d       |                 cmp.# 2d             
3249:000 | DONE ins | na  8 16 | 00696a | c2 20       |                 rep 20               
3249:001 | DONE ctl | na 16 16 |        |             |         .!a16
3250:000 | DONE ins | na 16 16 | 00696c | d0 09       |                 bne 006977           
3251:000 | DONE wsp | na 16 16 |        |             |
3252:000 | DONE cmt | na 16 16 |        |             |                 ; We have a minus.
3253:000 | DONE ins | na 16 16 | 00696e | 68          |                 pla                  
3254:000 | DONE ins | na 16 16 | 00696f | 09 00 ff    |                 ora.# 0ff00          MSB is minus
3255:000 | DONE ins | na 16 16 | 006972 | 48          |                 pha                  
3256:000 | DONE wsp | na 16 16 |        |             |
3257:000 | DONE ins | na 16 16 | 006973 | f6 00       |                 inc.dx 00            start one character later
3258:000 | DONE ins | na 16 16 | 006975 | c6 1e       |                 dec.d 00001e         reduce string length by one
3259:000 | DONE wsp | na 16 16 |        |             |
3260:000 | DONE lbl | na 16 16 | 006977 |             | number_dot                           
3261:000 | DONE cmt | na 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
3262:000 | DONE ins | na 16 16 | 006977 | a5 1e       |                 lda.d 00001e         get the string length
3263:000 | DONE ins | na 16 16 | 006979 | 3a          |                 dec.a                subtract one to convert length to index
3264:000 | DONE ins | na 16 16 | 00697a | 18          |                 clc                  
3265:000 | DONE ins | na 16 16 | 00697b | 75 00       |                 adc.dx 00            add length of string
3266:000 | DONE ins | na 16 16 | 00697d | a8          |                 tay                  
3267:000 | DONE ins | na 16 16 | 00697e | e2 20       |                 sep 20               
3267:001 | DONE ctl | na  8 16 |        |             |         .!a8
3268:000 | DONE ins | na  8 16 | 006980 | b9 00 00    |                 lda.y 0000           get last character
3269:000 | DONE ins | na  8 16 | 006983 | c9 2e       |                 cmp.# 2e             
3270:000 | DONE ins | na  8 16 | 006985 | c2 20       |                 rep 20               
3270:001 | DONE ctl | na 16 16 |        |             |         .!a16
3271:000 | DONE ins | na 16 16 | 006987 | d0 07       |                 bne 006990           
3272:000 | DONE wsp | na 16 16 |        |             |
3273:000 | DONE cmt | na 16 16 |        |             |                 ; we have a dot
3274:000 | DONE ins | na 16 16 | 006989 | 68          |                 pla                  get the flag back
3275:000 | DONE ins | na 16 16 | 00698a | 09 ff 00    |                 ora.# 00ff           LSB is double
3276:000 | DONE ins | na 16 16 | 00698d | 48          |                 pha                  
3277:000 | DONE wsp | na 16 16 |        |             |
3278:000 | DONE ins | na 16 16 | 00698e | c6 1e       |                 dec.d 00001e         reduce string length by one
3279:000 | DONE wsp | na 16 16 |        |             |
3280:000 | DONE lbl | na 16 16 | 006990 |             | number_main                          
3281:000 | DONE cmt | na 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
3282:000 | DONE ins | na 16 16 | 006990 | b5 00       |                 lda.dx 00            get the string address to safety
3283:000 | DONE ins | na 16 16 | 006992 | 74 00       |                 stz.dx 00            NOS is now zero
3284:000 | DONE ins | na 16 16 | 006994 | ca          |                 dex                  
3285:000 | DONE ins | na 16 16 | 006995 | ca          |                 dex                  
3286:000 | DONE ins | na 16 16 | 006996 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
3287:000 | DONE ins | na 16 16 | 006998 | ca          |                 dex                  
3288:000 | DONE ins | na 16 16 | 006999 | ca          |                 dex                  
3289:000 | DONE wsp | na 16 16 |        |             |
3290:000 | DONE ins | na 16 16 | 00699a | 95 00       |                 sta.dx 00            address is back as NOS
3291:000 | DONE ins | na 16 16 | 00699c | a4 1e       |                 ldy.d 00001e         length is back as TOS
3292:000 | DONE wsp | na 16 16 |        |             |
3293:000 | DONE lbl | na 16 16 | 00699e |             | number_loop                          
3294:000 | DONE ins | na 16 16 | 00699e | 20 2d 61    |                 jsr 00612d           ( ud addr u -- ud addr u )
3295:000 | DONE wsp | na 16 16 |        |             |
3296:000 | DONE ins | na 16 16 | 0069a1 | 98          |                 tya                  test length of returned string, should be 0
3297:000 | DONE ins | na 16 16 | 0069a2 | f0 06       |                 beq 0069aa           
3298:000 | DONE wsp | na 16 16 |        |             |
3299:000 | DONE cmt | na 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
3300:000 | DONE cmt | na 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
3301:000 | DONE cmt | na 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
3302:000 | DONE cmt | na 16 16 |        |             |                 ; trouble one way or another
3303:000 | DONE cmt | na 16 16 |        |             |                 ; TODO print offending string
3304:000 | DONE ins | na 16 16 | 0069a4 | a9 ca 7c    |                 lda.# 007cca         
3305:000 | DONE ins | na 16 16 | 0069a7 | 4c 37 76    |                 jmp 007637           
3306:000 | DONE wsp | na 16 16 |        |             |
3307:000 | DONE lbl | na 16 16 | 0069aa |             | number_ok                            
3308:000 | DONE cmt | na 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
3309:000 | DONE ins | na 16 16 | 0069aa | b4 02       |                 ldy.dx 02            
3310:000 | DONE ins | na 16 16 | 0069ac | e8          |                 inx                  
3311:000 | DONE ins | na 16 16 | 0069ad | e8          |                 inx                  
3312:000 | DONE ins | na 16 16 | 0069ae | e8          |                 inx                  
3313:000 | DONE ins | na 16 16 | 0069af | e8          |                 inx                  
3314:000 | DONE wsp | na 16 16 |        |             |
3315:000 | DONE cmt | na 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
3316:000 | DONE cmt | na 16 16 |        |             |                 ; a minus and might actually be single-cell
3317:000 | DONE ins | na 16 16 | 0069b0 | 68          |                 pla                  get copy of the flags
3318:000 | DONE ins | na 16 16 | 0069b1 | 48          |                 pha                  
3319:000 | DONE ins | na 16 16 | 0069b2 | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
3320:000 | DONE ins | na 16 16 | 0069b5 | f0 1b       |                 beq 0069d2           
3321:000 | DONE wsp | na 16 16 |        |             |
3322:000 | DONE cmt | na 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
3323:000 | DONE cmt | na 16 16 |        |             |                 ; negate it
3324:000 | DONE ins | na 16 16 | 0069b7 | 68          |                 pla                  
3325:000 | DONE ins | na 16 16 | 0069b8 | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
3326:000 | DONE ins | na 16 16 | 0069bb | f0 25       |                 beq 0069e2           no minus, all done
3327:000 | DONE wsp | na 16 16 |        |             |
3328:000 | DONE ins | na 16 16 | 0069bd | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
3329:000 | DONE ins | na 16 16 | 0069bf | 49 ff ff    |                 eor.# 0ffff          
3330:000 | DONE wsp | na 16 16 |        |             |
3331:000 | DONE cmt | na 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
3332:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
3333:000 | DONE ins | na 16 16 | 0069c2 | 18          |                 clc                  
3334:000 | DONE ins | na 16 16 | 0069c3 | 69 01 00    |                 adc.# 0001           
3335:000 | DONE ins | na 16 16 | 0069c6 | 95 00       |                 sta.dx 00            
3336:000 | DONE wsp | na 16 16 |        |             |
3337:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
3338:000 | DONE ins | na 16 16 | 0069c8 | 98          |                 tya                  
3339:000 | DONE ins | na 16 16 | 0069c9 | 49 ff ff    |                 eor.# 0ffff          
3340:000 | DONE ins | na 16 16 | 0069cc | 69 00 00    |                 adc.# 0000           we are only interested in the carry
3341:000 | DONE ins | na 16 16 | 0069cf | a8          |                 tay                  
3342:000 | DONE wsp | na 16 16 |        |             |
3343:000 | DONE ins | na 16 16 | 0069d0 | 80 10       |                 bra 0069e2           
3344:000 | DONE wsp | na 16 16 |        |             |
3345:000 | DONE lbl | na 16 16 | 0069d2 |             | number_single                        
3346:000 | DONE cmt | na 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
3347:000 | DONE ins | na 16 16 | 0069d2 | b4 00       |                 ldy.dx 00            
3348:000 | DONE ins | na 16 16 | 0069d4 | e8          |                 inx                  
3349:000 | DONE ins | na 16 16 | 0069d5 | e8          |                 inx                  
3350:000 | DONE wsp | na 16 16 |        |             |
3351:000 | DONE cmt | na 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
3352:000 | DONE cmt | na 16 16 |        |             |                 ; doubled for speed
3353:000 | DONE ins | na 16 16 | 0069d6 | 68          |                 pla                  
3354:000 | DONE ins | na 16 16 | 0069d7 | 29 00 ff    |                 and.# 0ff00          
3355:000 | DONE ins | na 16 16 | 0069da | f0 06       |                 beq 0069e2           no minus, all done
3356:000 | DONE wsp | na 16 16 |        |             |
3357:000 | DONE ins | na 16 16 | 0069dc | 98          |                 tya                  NEGATE
3358:000 | DONE ins | na 16 16 | 0069dd | 49 ff ff    |                 eor.# 0ffff          
3359:000 | DONE ins | na 16 16 | 0069e0 | 1a          |                 inc.a                
3360:000 | DONE ins | na 16 16 | 0069e1 | a8          |                 tay                  fall through to end
3361:000 | DONE wsp | na 16 16 |        |             |
3362:000 | DONE lbl | na 16 16 | 0069e2 |             | z_number                             
3362:001 | DONE ins | na 16 16 | 0069e2 | 60          |                 rts                  
3363:000 | DONE wsp | na 16 16 |        |             |
3364:000 | DONE wsp | na 16 16 |        |             |
3365:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3366:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
3367:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
3368:000 | DONE lbl | na 16 16 | 0069e3 |             | xt_or                                
3369:000 | DONE ins | na 16 16 | 0069e3 | 98          |                 tya                  
3370:000 | DONE ins | na 16 16 | 0069e4 | 15 00       |                 ora.dx 00            
3371:000 | DONE ins | na 16 16 | 0069e6 | a8          |                 tay                  
3372:000 | DONE wsp | na 16 16 |        |             |
3373:000 | DONE ins | na 16 16 | 0069e7 | e8          |                 inx                  
3374:000 | DONE ins | na 16 16 | 0069e8 | e8          |                 inx                  
3375:000 | DONE wsp | na 16 16 |        |             |
3376:000 | DONE lbl | na 16 16 | 0069e9 |             | z_or                                 
3376:001 | DONE ins | na 16 16 | 0069e9 | 60          |                 rts                  
3377:000 | DONE wsp | na 16 16 |        |             |
3378:000 | DONE wsp | na 16 16 |        |             |
3379:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3380:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
3381:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
3382:000 | DONE lbl | na 16 16 | 0069ea |             | xt_over                              
3383:000 | DONE ins | na 16 16 | 0069ea | ca          |                 dex                  
3384:000 | DONE ins | na 16 16 | 0069eb | ca          |                 dex                  
3385:000 | DONE ins | na 16 16 | 0069ec | 94 00       |                 sty.dx 00            
3386:000 | DONE ins | na 16 16 | 0069ee | b4 02       |                 ldy.dx 02            
3387:000 | DONE wsp | na 16 16 |        |             |
3388:000 | DONE lbl | na 16 16 | 0069f0 |             | z_over                               
3388:001 | DONE ins | na 16 16 | 0069f0 | 60          |                 rts                  
3389:000 | DONE wsp | na 16 16 |        |             |
3390:000 | DONE wsp | na 16 16 |        |             |
3391:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3392:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
3393:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
3394:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
3395:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
3396:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
3397:000 | DONE lbl | na 16 16 | 0069f1 |             | xt_pad                               
3398:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3399:000 | DONE ins | na 16 16 | 0069f1 | ca          |                 dex                  
3400:000 | DONE ins | na 16 16 | 0069f2 | ca          |                 dex                  
3401:000 | DONE ins | na 16 16 | 0069f3 | 94 00       |                 sty.dx 00            
3402:000 | DONE wsp | na 16 16 |        |             |
3403:000 | DONE ins | na 16 16 | 0069f5 | a5 00       |                 lda.d 000000         
3404:000 | DONE ins | na 16 16 | 0069f7 | 18          |                 clc                  
3405:000 | DONE ins | na 16 16 | 0069f8 | 69 ff 00    |                 adc.# 0000ff         
3406:000 | DONE ins | na 16 16 | 0069fb | a8          |                 tay                  
3407:000 | DONE wsp | na 16 16 |        |             |
3408:000 | DONE lbl | na 16 16 | 0069fc |             | z_pad                                
3408:001 | DONE ins | na 16 16 | 0069fc | 60          |                 rts                  
3409:000 | DONE wsp | na 16 16 |        |             |
3410:000 | DONE wsp | na 16 16 |        |             |
3411:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3412:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
3413:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
3414:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
3415:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
3416:000 | DONE lbl | na 16 16 | 0069fd |             | xt_page                              
3417:000 | DONE ins | na 16 16 | 0069fd | a9 d9 7c    |                 lda.# 007cd9         
3418:000 | DONE ins | na 16 16 | 006a00 | 20 3d 76    |                 jsr 00763d           
3419:000 | DONE wsp | na 16 16 |        |             |
3420:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
3421:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
3422:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
3423:000 | DONE ins | na 16 16 | 006a03 | a9 de 7c    |                 lda.# 007cde         
3424:000 | DONE ins | na 16 16 | 006a06 | 20 3d 76    |                 jsr 00763d           
3425:000 | DONE wsp | na 16 16 |        |             |
3426:000 | DONE lbl | na 16 16 | 006a09 |             | z_page                               
3426:001 | DONE ins | na 16 16 | 006a09 | 60          |                 rts                  
3427:000 | DONE wsp | na 16 16 |        |             |
3428:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3429:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
3430:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
3431:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
3432:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
3433:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
3434:000 | DONE cmt | na 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
3435:000 | DONE lbl | na 16 16 | 006a0a |             | xt_parse-name                        
3436:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3437:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3438:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
3439:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
3440:000 | DONE ins | na 16 16 | 006a0a | 5a          |                 phy                  save TOS for later use
3441:000 | DONE ins | na 16 16 | 006a0b | a4 0c       |                 ldy.d 00000c         >IN
3442:000 | DONE ins | na 16 16 | 006a0d | e2 20       |                 sep 20               
3442:001 | DONE ctl | na  8 16 |        |             |         .!a8
3443:000 | DONE lbl | na  8 16 | 006a0f |             | parse-name_loop                      
3444:000 | DONE ins | na  8 16 | 006a0f | c4 0a       |                 cpy.d 00000a         end of line?
3445:000 | DONE ins | na  8 16 | 006a11 | f0 09       |                 beq 006a1c           
3446:000 | DONE wsp | na  8 16 |        |             |
3447:000 | DONE ins | na  8 16 | 006a13 | b1 08       |                 lda.diy 000008       LDA (CIB),Y
3448:000 | DONE ins | na  8 16 | 006a15 | c9 20       |                 cmp.# AscSP          
3449:000 | DONE ins | na  8 16 | 006a17 | d0 17       |                 bne 006a30           
3450:000 | DONE ins | na  8 16 | 006a19 | c8          |                 iny                  
3451:000 | DONE ins | na  8 16 | 006a1a | 80 f3       |                 bra 006a0f           
3452:000 | DONE wsp | na  8 16 |        |             |
3453:000 | DONE lbl | na  8 16 | 006a1c |             | parse-name_empty_line                
3454:000 | DONE ins | na  8 16 | 006a1c | c2 20       |                 rep 20               
3454:001 | DONE ctl | na 16 16 |        |             |         .!a16
3455:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
3456:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
3457:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
3458:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
3459:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
3460:000 | DONE ins | na 16 16 | 006a1e | ca          |                 dex                  
3461:000 | DONE ins | na 16 16 | 006a1f | ca          |                 dex                  
3462:000 | DONE ins | na 16 16 | 006a20 | ca          |                 dex                  
3463:000 | DONE ins | na 16 16 | 006a21 | ca          |                 dex                  
3464:000 | DONE wsp | na 16 16 |        |             |
3465:000 | DONE ins | na 16 16 | 006a22 | 7a          |                 ply                  restore old TOS as 3OS
3466:000 | DONE ins | na 16 16 | 006a23 | 94 02       |                 sty.dx 02            
3467:000 | DONE wsp | na 16 16 |        |             |
3468:000 | DONE ins | na 16 16 | 006a25 | a5 08       |                 lda.d 000008         
3469:000 | DONE ins | na 16 16 | 006a27 | 18          |                 clc                  
3470:000 | DONE ins | na 16 16 | 006a28 | 65 0a       |                 adc.d 00000a         
3471:000 | DONE ins | na 16 16 | 006a2a | 95 00       |                 sta.dx 00            Address as NOS
3472:000 | DONE wsp | na 16 16 |        |             |
3473:000 | DONE ins | na 16 16 | 006a2c | a0 00 00    |                 ldy.# 0000           TOS
3474:000 | DONE wsp | na 16 16 |        |             |
3475:000 | DONE ins | na 16 16 | 006a2f | 60          |                 rts                  don't have to go through PARSE
3476:000 | DONE wsp | na 16 16 |        |             |
3477:000 | DONE lbl | na 16 16 | 006a30 |             | parse-name_found                     
3478:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3479:000 | DONE ins | na 16 16 | 006a30 | c2 20       |                 rep 20               
3479:001 | DONE ctl | na 16 16 |        |             |         .!a16
3480:000 | DONE ins | na 16 16 | 006a32 | 84 0c       |                 sty.d 00000c         new >IN
3481:000 | DONE wsp | na 16 16 |        |             |
3482:000 | DONE ins | na 16 16 | 006a34 | 7a          |                 ply                  recover TOS
3483:000 | DONE ins | na 16 16 | 006a35 | ca          |                 dex                  
3484:000 | DONE ins | na 16 16 | 006a36 | ca          |                 dex                  
3485:000 | DONE ins | na 16 16 | 006a37 | 94 00       |                 sty.dx 00            
3486:000 | DONE wsp | na 16 16 |        |             |
3487:000 | DONE ins | na 16 16 | 006a39 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
3488:000 | DONE wsp | na 16 16 |        |             |
3489:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
3490:000 | DONE wsp | na 16 16 |        |             |
3491:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3492:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
3493:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
3494:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
3495:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
3496:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
3497:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
3498:000 | DONE cmt | na 16 16 |        |             | ;
3499:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
3500:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
3501:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
3502:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
3503:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
3504:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
3505:000 | DONE cmt | na 16 16 |        |             | ;
3506:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
3507:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
3508:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
3509:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
3510:000 | DONE lbl | na 16 16 | 006a3c |             | xt_parse                             
3511:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3512:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3513:000 | DONE ins | na 16 16 | 006a3c | 84 16       |                 sty.d 000016         save delimiter, char is LSB
3514:000 | DONE wsp | na 16 16 |        |             |
3515:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
3516:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
3517:000 | DONE cmt | na 16 16 |        |             |                 ; return
3518:000 | DONE ins | na 16 16 | 006a3e | a5 0c       |                 lda.d 00000c         
3519:000 | DONE ins | na 16 16 | 006a40 | 85 1a       |                 sta.d 00001a         save >IN for later length calculation
3520:000 | DONE ins | na 16 16 | 006a42 | 18          |                 clc                  
3521:000 | DONE ins | na 16 16 | 006a43 | 65 08       |                 adc.d 000008         
3522:000 | DONE wsp | na 16 16 |        |             |
3523:000 | DONE ins | na 16 16 | 006a45 | ca          |                 dex                  save addr as NOS
3524:000 | DONE ins | na 16 16 | 006a46 | ca          |                 dex                  
3525:000 | DONE ins | na 16 16 | 006a47 | 95 00       |                 sta.dx 00            
3526:000 | DONE wsp | na 16 16 |        |             |
3527:000 | DONE ins | na 16 16 | 006a49 | 64 18       |                 stz.d 000018         offset for EOL/char found adjustment of >IN
3528:000 | DONE wsp | na 16 16 |        |             |
3529:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
3530:000 | DONE ins | na 16 16 | 006a4b | a4 0c       |                 ldy.d 00000c         
3531:000 | DONE ins | na 16 16 | 006a4d | e2 20       |                 sep 20               
3531:001 | DONE ctl | na  8 16 |        |             |         .!a8
3532:000 | DONE wsp | na  8 16 |        |             |
3533:000 | DONE lbl | na  8 16 | 006a4f |             | parse_loop                           
3534:000 | DONE ins | na  8 16 | 006a4f | c4 0a       |                 cpy.d 00000a         check for EOL first
3535:000 | DONE ins | na  8 16 | 006a51 | f0 0d       |                 beq 006a60           
3536:000 | DONE wsp | na  8 16 |        |             |
3537:000 | DONE ins | na  8 16 | 006a53 | b1 08       |                 lda.diy 000008       LDA (CIB),Y
3538:000 | DONE ins | na  8 16 | 006a55 | c5 16       |                 cmp.d 000016         found delimiter?
3539:000 | DONE ins | na  8 16 | 006a57 | f0 03       |                 beq 006a5c           
3540:000 | DONE ins | na  8 16 | 006a59 | c8          |                 iny                  
3541:000 | DONE ins | na  8 16 | 006a5a | 80 f3       |                 bra 006a4f           
3542:000 | DONE wsp | na  8 16 |        |             |
3543:000 | DONE lbl | na  8 16 | 006a5c |             | parse_found_delimiter                
3544:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
3545:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
3546:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
3547:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
3548:000 | DONE ins | na  8 16 | 006a5c | c2 20       |                 rep 20               
3548:001 | DONE ctl | na 16 16 |        |             |         .!a16
3549:000 | DONE ins | na 16 16 | 006a5e | e6 18       |                 inc.d 000018         
3550:000 | DONE wsp | na 16 16 |        |             |
3551:000 | DONE lbl | na 16 16 | 006a60 |             | parse_reached_eol                    
3552:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
3553:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3554:000 | DONE ins | na 16 16 | 006a60 | c2 20       |                 rep 20               
3554:001 | DONE ctl | na 16 16 |        |             |         .!a16
3555:000 | DONE ins | na 16 16 | 006a62 | 98          |                 tya                  
3556:000 | DONE ins | na 16 16 | 006a63 | 38          |                 sec                  
3557:000 | DONE ins | na 16 16 | 006a64 | e5 1a       |                 sbc.d 00001a         original value for >IN / index of first char
3558:000 | DONE ins | na 16 16 | 006a66 | 48          |                 pha                  save so we can manipulate Y
3559:000 | DONE wsp | na 16 16 |        |             |
3560:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
3561:000 | DONE ins | na 16 16 | 006a67 | 98          |                 tya                  
3562:000 | DONE ins | na 16 16 | 006a68 | 18          |                 clc                  
3563:000 | DONE ins | na 16 16 | 006a69 | 65 18       |                 adc.d 000018         offset for EOL vs found delimiter
3564:000 | DONE ins | na 16 16 | 006a6b | 85 0c       |                 sta.d 00000c         
3565:000 | DONE wsp | na 16 16 |        |             |
3566:000 | DONE ins | na 16 16 | 006a6d | 7a          |                 ply                  length of string in TOS
3567:000 | DONE wsp | na 16 16 |        |             |
3568:000 | DONE lbl | na 16 16 | 006a6e |             | z_parse-name                         
3569:000 | DONE lbl | na 16 16 | 006a6e |             | z_parse                              
3569:001 | DONE ins | na 16 16 | 006a6e | 60          |                 rts                  
3570:000 | DONE wsp | na 16 16 |        |             |
3571:000 | DONE wsp | na 16 16 |        |             |
3572:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3573:000 | DONE cmt | na 16 16 |        |             | ; PICK ( n n u -- n n n ) X bytes / X cycles
3574:000 | DONE cmt | na 16 16 |        |             | ; Take the u-th element out of the stack and put it on TOS, overwriting the
3575:000 | DONE cmt | na 16 16 |        |             | ; current TOS. 0 PICK is equivalent to DUP, 1 PICK to OVER. Note that using PICK
3576:000 | DONE cmt | na 16 16 |        |             | ; is considered poor coding form. Also note that FIG Forth has a different
3577:000 | DONE cmt | na 16 16 |        |             | ; behavior for PICK than ANS Forth.
3578:000 | DONE cmt | na 16 16 |        |             | ; TODO use DEPTH to check for underflow
3579:000 | DONE lbl | na 16 16 | 006a6f |             | xt_pick                              
3580:000 | DONE ins | na 16 16 | 006a6f | 86 1c       |                 stx.d 00001c         
3581:000 | DONE wsp | na 16 16 |        |             |
3582:000 | DONE ins | na 16 16 | 006a71 | 98          |                 tya                  Y is just an offset to the DSP
3583:000 | DONE ins | na 16 16 | 006a72 | 0a          |                 asl.a                double because of cell size two bytes
3584:000 | DONE wsp | na 16 16 |        |             |
3585:000 | DONE ins | na 16 16 | 006a73 | 18          |                 clc                  
3586:000 | DONE ins | na 16 16 | 006a74 | 65 1c       |                 adc.d 00001c         
3587:000 | DONE wsp | na 16 16 |        |             |
3588:000 | DONE ins | na 16 16 | 006a76 | aa          |                 tax                  
3589:000 | DONE ins | na 16 16 | 006a77 | b5 00       |                 lda.dx 00            LDA $00,X
3590:000 | DONE ins | na 16 16 | 006a79 | a8          |                 tay                  Is now TOS
3591:000 | DONE wsp | na 16 16 |        |             |
3592:000 | DONE ins | na 16 16 | 006a7a | a6 1c       |                 ldx.d 00001c         
3593:000 | DONE wsp | na 16 16 |        |             |
3594:000 | DONE lbl | na 16 16 | 006a7c |             | z_pick                               
3594:001 | DONE ins | na 16 16 | 006a7c | 60          |                 rts                  
3595:000 | DONE wsp | na 16 16 |        |             |
3596:000 | DONE wsp | na 16 16 |        |             |
3597:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3598:000 | DONE cmt | na 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
3599:000 | DONE cmt | na 16 16 |        |             | ; Add NOS to address in TOS
3600:000 | DONE lbl | na 16 16 | 006a7d |             | xt_plusstore                         
3601:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3602:000 | DONE ins | na 16 16 | 006a7d | b9 00 00    |                 lda.y 0000           
3603:000 | DONE ins | na 16 16 | 006a80 | 18          |                 clc                  
3604:000 | DONE ins | na 16 16 | 006a81 | 75 00       |                 adc.dx 00            
3605:000 | DONE ins | na 16 16 | 006a83 | 99 00 00    |                 sta.y 0000           
3606:000 | DONE wsp | na 16 16 |        |             |
3607:000 | DONE ins | na 16 16 | 006a86 | b4 02       |                 ldy.dx 02            
3608:000 | DONE ins | na 16 16 | 006a88 | e8          |                 inx                  
3609:000 | DONE ins | na 16 16 | 006a89 | e8          |                 inx                  
3610:000 | DONE ins | na 16 16 | 006a8a | e8          |                 inx                  
3611:000 | DONE ins | na 16 16 | 006a8b | e8          |                 inx                  
3612:000 | DONE wsp | na 16 16 |        |             |
3613:000 | DONE lbl | na 16 16 | 006a8c |             | z_plusstore                          
3613:001 | DONE ins | na 16 16 | 006a8c | 60          |                 rts                  
3614:000 | DONE wsp | na 16 16 |        |             |
3615:000 | DONE wsp | na 16 16 |        |             |
3616:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3617:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
3618:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
3619:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
3620:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
3621:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
3622:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
3623:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
3624:000 | DONE lbl | na 16 16 | 006a8d |             | xt_postpone                          
3625:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
3626:000 | DONE ins | na 16 16 | 006a8d | 20 0a 6a    |                 jsr 006a0a           ( addr n )
3627:000 | DONE wsp | na 16 16 |        |             |
3628:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
3629:000 | DONE ins | na 16 16 | 006a90 | d0 06       |                 bne 006a98           
3630:000 | DONE ins | na 16 16 | 006a92 | a9 2d 7c    |                 lda.# 007c2d         
3631:000 | DONE ins | na 16 16 | 006a95 | 4c 37 76    |                 jmp 007637           
3632:000 | DONE wsp | na 16 16 |        |             |
3633:000 | DONE lbl | na 16 16 | 006a98 |             | pp_got_word                          
3634:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
3635:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
3636:000 | DONE ins | na 16 16 | 006a98 | 20 70 76    |                 jsr 007670           
3637:000 | DONE wsp | na 16 16 |        |             |
3638:000 | DONE ins | na 16 16 | 006a9b | 20 bb 67    |                 jsr 0067bb           ( nt | 0 )
3639:000 | DONE wsp | na 16 16 |        |             |
3640:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
3641:000 | DONE ins | na 16 16 | 006a9e | d0 03       |                 bne 006aa3           
3642:000 | DONE ins | na 16 16 | 006aa0 | a9 ca 7c    |                 lda.# 007cca         
3643:000 | DONE wsp | na 16 16 |        |             |
3644:000 | DONE lbl | na 16 16 | 006aa3 |             | pp_got_nt                            
3645:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
3646:000 | DONE ins | na 16 16 | 006aa3 | 84 16       |                 sty.d 000016         
3647:000 | DONE wsp | na 16 16 |        |             |
3648:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
3649:000 | DONE ins | na 16 16 | 006aa5 | 20 32 69    |                 jsr 006932           NAME>INT ( nt -- xt )
3650:000 | DONE wsp | na 16 16 |        |             |
3651:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
3652:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
3653:000 | DONE ins | na 16 16 | 006aa8 | b2 16       |                 lda.di 000016        LDA (TMP1) - get status byte of word
3654:000 | DONE ins | na 16 16 | 006aaa | eb          |                 xba                  flags are MSB
3655:000 | DONE ins | na 16 16 | 006aab | 29 02 00    |                 and.# IM             mask everything but Immediate bit
3656:000 | DONE ins | na 16 16 | 006aae | f0 03       |                 beq 006ab3           
3657:000 | DONE wsp | na 16 16 |        |             |
3658:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
3659:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
3660:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
3661:000 | DONE ins | na 16 16 | 006ab0 | 4c b7 65    |                 jmp 0065b7           JSR/RTS
3662:000 | DONE wsp | na 16 16 |        |             |
3663:000 | DONE lbl | na 16 16 | 006ab3 |             | pp_not_immediate                     
3664:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deferred
3665:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
3666:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
3667:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
3668:000 | DONE ins | na 16 16 | 006ab3 | f4 ba 68    |                 phe.# 0068ba         PEA LITERAL_RT
3669:000 | DONE ins | na 16 16 | 006ab6 | 20 16 76    |                 jsr 007616           
3670:000 | DONE wsp | na 16 16 |        |             |
3671:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
3672:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
3673:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
3674:000 | DONE ins | na 16 16 | 006ab9 | 20 2d 62    |                 jsr 00622d           
3675:000 | DONE wsp | na 16 16 |        |             |
3676:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
3677:000 | DONE ins | na 16 16 | 006abc | f4 b7 65    |                 phe.# 0065b7         
3678:000 | DONE ins | na 16 16 | 006abf | 20 16 76    |                 jsr 007616           JSR/RTS
3679:000 | DONE wsp | na 16 16 |        |             |
3680:000 | DONE lbl | na 16 16 | 006ac2 |             | z_postpone                           
3680:001 | DONE ins | na 16 16 | 006ac2 | 60          |                 rts                  
3681:000 | DONE wsp | na 16 16 |        |             |
3682:000 | DONE wsp | na 16 16 |        |             |
3683:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3684:000 | DONE cmt | na 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
3685:000 | DONE cmt | na 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
3686:000 | DONE cmt | na 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
3687:000 | DONE cmt | na 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
3688:000 | DONE cmt | na 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
3689:000 | DONE cmt | na 16 16 |        |             | ; actually short enough to make that reasonable
3690:000 | DONE cmt | na 16 16 |        |             | ; TODO consider special case in COMPILE, see there
3691:000 | DONE lbl | na 16 16 | 006ac3 |             | xt_rfetch                            
3692:000 | DONE cmt | na 16 16 |        |             |                 ; get return address that is on top of the return stack
3693:000 | DONE ins | na 16 16 | 006ac3 | 68          |                 pla                  
3694:000 | DONE wsp | na 16 16 |        |             |
3695:000 | DONE ins | na 16 16 | 006ac4 | ca          |                 dex                  
3696:000 | DONE ins | na 16 16 | 006ac5 | ca          |                 dex                  
3697:000 | DONE ins | na 16 16 | 006ac6 | 94 00       |                 sty.dx 00            
3698:000 | DONE wsp | na 16 16 |        |             |
3699:000 | DONE ins | na 16 16 | 006ac8 | 7a          |                 ply                  get top of return stack and push copy back again
3700:000 | DONE ins | na 16 16 | 006ac9 | 5a          |                 phy                  
3701:000 | DONE wsp | na 16 16 |        |             |
3702:000 | DONE ins | na 16 16 | 006aca | 48          |                 pha                  restore the return address
3703:000 | DONE wsp | na 16 16 |        |             |
3704:000 | DONE lbl | na 16 16 | 006acb |             | z_rfetch                             
3704:001 | DONE ins | na 16 16 | 006acb | 60          |                 rts                  
3705:000 | DONE wsp | na 16 16 |        |             |
3706:000 | DONE wsp | na 16 16 |        |             |
3707:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3708:000 | DONE cmt | na 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
3709:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
3710:000 | DONE cmt | na 16 16 |        |             | ; jump address out of the way first.
3711:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
3712:000 | DONE lbl | na 16 16 | 006acc |             | xt_fromr                             
3713:000 | DONE cmt | na 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
3714:000 | DONE cmt | na 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
3715:000 | DONE cmt | na 16 16 |        |             |                 ; a waste of nine cycles
3716:000 | DONE ins | na 16 16 | 006acc | 68          |                 pla                  
3717:000 | DONE wsp | na 16 16 |        |             |
3718:000 | DONE ins | na 16 16 | 006acd | ca          |                 dex                  
3719:000 | DONE ins | na 16 16 | 006ace | ca          |                 dex                  
3720:000 | DONE ins | na 16 16 | 006acf | 94 00       |                 sty.dx 00            
3721:000 | DONE wsp | na 16 16 |        |             |
3722:000 | DONE ins | na 16 16 | 006ad1 | 7a          |                 ply                  the actual work
3723:000 | DONE wsp | na 16 16 |        |             |
3724:000 | DONE ins | na 16 16 | 006ad2 | 48          |                 pha                  get return address back
3725:000 | DONE wsp | na 16 16 |        |             |
3726:000 | DONE lbl | na 16 16 | 006ad3 |             | z_fromr                              
3726:001 | DONE ins | na 16 16 | 006ad3 | 60          |                 rts                  
3727:000 | DONE wsp | na 16 16 |        |             |
3728:000 | DONE wsp | na 16 16 |        |             |
3729:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3730:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
3731:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
3732:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
3733:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
3734:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
3735:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
3736:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
3737:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
3738:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
3739:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
3740:000 | DONE lbl | na 16 16 | 006ad4 |             | xt_refill                            
3741:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3742:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3743:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
3744:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
3745:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
3746:000 | DONE ins | na 16 16 | 006ad4 | a5 06       |                 lda.d 000006         
3747:000 | DONE ins | na 16 16 | 006ad6 | d0 14       |                 bne 006aec           
3748:000 | DONE wsp | na 16 16 |        |             |
3749:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
3750:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
3751:000 | DONE ins | na 16 16 | 006ad8 | ca          |                 dex                  
3752:000 | DONE ins | na 16 16 | 006ad9 | ca          |                 dex                  
3753:000 | DONE ins | na 16 16 | 006ada | ca          |                 dex                  
3754:000 | DONE ins | na 16 16 | 006adb | ca          |                 dex                  
3755:000 | DONE ins | na 16 16 | 006adc | 94 02       |                 sty.dx 02            
3756:000 | DONE wsp | na 16 16 |        |             |
3757:000 | DONE ins | na 16 16 | 006ade | a5 08       |                 lda.d 000008         address of current input buffer NOS
3758:000 | DONE ins | na 16 16 | 006ae0 | 95 00       |                 sta.dx 00            
3759:000 | DONE ins | na 16 16 | 006ae2 | a0 80 00    |                 ldy.# 000080         max number of chars to accept TOS
3760:000 | DONE wsp | na 16 16 |        |             |
3761:000 | DONE ins | na 16 16 | 006ae5 | 20 21 64    |                 jsr 006421           ( addr n1 -- n2)
3762:000 | DONE wsp | na 16 16 |        |             |
3763:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
3764:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
3765:000 | DONE ins | na 16 16 | 006ae8 | a0 ff ff    |                 ldy.# 0ffff          
3766:000 | DONE wsp | na 16 16 |        |             |
3767:000 | DONE ins | na 16 16 | 006aeb | 60          |                 rts                  
3768:000 | DONE wsp | na 16 16 |        |             |
3769:000 | DONE lbl | na 16 16 | 006aec |             | refill_src_not_kbd                   
3770:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
3771:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
3772:000 | DONE ins | na 16 16 | 006aec | 1a          |                 inc.a                
3773:000 | DONE ins | na 16 16 | 006aed | d0 06       |                 bne 006af5           
3774:000 | DONE wsp | na 16 16 |        |             |
3775:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
3776:000 | DONE ins | na 16 16 | 006aef | ca          |                 dex                  
3777:000 | DONE ins | na 16 16 | 006af0 | ca          |                 dex                  
3778:000 | DONE ins | na 16 16 | 006af1 | 94 00       |                 sty.dx 00            
3779:000 | DONE ins | na 16 16 | 006af3 | a8          |                 tay                  
3780:000 | DONE wsp | na 16 16 |        |             |
3781:000 | DONE ins | na 16 16 | 006af4 | 60          |                 rts                  
3782:000 | DONE wsp | na 16 16 |        |             |
3783:000 | DONE lbl | na 16 16 | 006af5 |             | refill_source_is_not_string          
3784:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
3785:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
3786:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
3787:000 | DONE ins | na 16 16 | 006af5 | a9 82 7c    |                 lda.# 007c82         
3788:000 | DONE ins | na 16 16 | 006af8 | 4c 37 76    |                 jmp 007637           
3789:000 | DONE wsp | na 16 16 |        |             |
3790:000 | DONE lbl | na 16 16 | 006afb |             | z_refill                             
3790:001 | DONE ins | na 16 16 | 006afb | 60          |                 rts                  dummy for compiling
3791:000 | DONE wsp | na 16 16 |        |             |
3792:000 | DONE wsp | na 16 16 |        |             |
3793:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3794:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
3795:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
3796:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
3797:000 | DONE lbl | na 16 16 | 006afc |             | xt_rot                               
3798:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3799:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3800:000 | DONE ins | na 16 16 | 006afc | b5 00       |                 lda.dx 00            save b
3801:000 | DONE ins | na 16 16 | 006afe | 94 00       |                 sty.dx 00            move c to NOS
3802:000 | DONE ins | na 16 16 | 006b00 | b4 02       |                 ldy.dx 02            move a to TOS
3803:000 | DONE ins | na 16 16 | 006b02 | 95 02       |                 sta.dx 02            save b as 3OS
3804:000 | DONE wsp | na 16 16 |        |             |
3805:000 | DONE lbl | na 16 16 | 006b04 |             | z_rot                                
3805:001 | DONE ins | na 16 16 | 006b04 | 60          |                 rts                  
3806:000 | DONE wsp | na 16 16 |        |             |
3807:000 | DONE wsp | na 16 16 |        |             |
3808:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3809:000 | DONE cmt | na 16 16 |        |             | ; RSHIFT ( n u -- u ) X bytes / X cycles
3810:000 | DONE cmt | na 16 16 |        |             | ; Shift TOS right, filling vacant bits with zero
3811:000 | DONE lbl | na 16 16 | 006b05 |             | xt_rshift                            
3812:000 | DONE cmt | na 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
3813:000 | DONE cmt | na 16 16 |        |             |                 ; zeros anyway
3814:000 | DONE ins | na 16 16 | 006b05 | 98          |                 tya                  
3815:000 | DONE ins | na 16 16 | 006b06 | 29 0f 00    |                 and.# 000f           
3816:000 | DONE ins | na 16 16 | 006b09 | f0 09       |                 beq 006b14           if zero shifts, we're done
3817:000 | DONE wsp | na 16 16 |        |             |
3818:000 | DONE ins | na 16 16 | 006b0b | a8          |                 tay                  number of shifts is TOS
3819:000 | DONE ins | na 16 16 | 006b0c | b5 00       |                 lda.dx 00            number is in NOS
3820:000 | DONE lbl | na 16 16 | 006b0e |             | rshift_loop                          
3821:000 | DONE ins | na 16 16 | 006b0e | 4a          |                 lsr.a                
3822:000 | DONE ins | na 16 16 | 006b0f | 88          |                 dey                  
3823:000 | DONE ins | na 16 16 | 006b10 | d0 fc       |                 bne 006b0e           
3824:000 | DONE wsp | na 16 16 |        |             |
3825:000 | DONE ins | na 16 16 | 006b12 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
3826:000 | DONE wsp | na 16 16 |        |             |
3827:000 | DONE lbl | na 16 16 | 006b14 |             | rshift_done                          
3828:000 | DONE ins | na 16 16 | 006b14 | b4 00       |                 ldy.dx 00            
3829:000 | DONE ins | na 16 16 | 006b16 | e8          |                 inx                  
3830:000 | DONE ins | na 16 16 | 006b17 | e8          |                 inx                  
3831:000 | DONE wsp | na 16 16 |        |             |
3832:000 | DONE lbl | na 16 16 | 006b18 |             | z_rshift                             
3832:001 | DONE ins | na 16 16 | 006b18 | 60          |                 rts                  
3833:000 | DONE wsp | na 16 16 |        |             |
3834:000 | DONE wsp | na 16 16 |        |             |
3835:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3836:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
3837:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
3838:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
3839:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
3840:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
3841:000 | DONE cmt | na 16 16 |        |             | ; want it in code
3842:000 | DONE lbl | na 16 16 | 006b19 |             | xt_squote                            
3843:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
3844:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
3845:000 | DONE ins | na 16 16 | 006b19 | ca          |                 dex                  
3846:000 | DONE ins | na 16 16 | 006b1a | ca          |                 dex                  
3847:000 | DONE ins | na 16 16 | 006b1b | 94 00       |                 sty.dx 00            
3848:000 | DONE wsp | na 16 16 |        |             |
3849:000 | DONE ins | na 16 16 | 006b1d | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
3850:000 | DONE ins | na 16 16 | 006b20 | 20 3c 6a    |                 jsr 006a3c           Returns ( addr u ) of string
3851:000 | DONE wsp | na 16 16 |        |             |
3852:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
3853:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
3854:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
3855:000 | DONE ins | na 16 16 | 006b23 | a5 0e       |                 lda.d 00000e         
3856:000 | DONE ins | na 16 16 | 006b25 | d0 24       |                 bne 006b4b           
3857:000 | DONE wsp | na 16 16 |        |             |
3858:000 | DONE cmt | na 16 16 |        |             | 		; We copy our string to someplace safe because it lives
3859:000 | DONE cmt | na 16 16 |        |             |                 ; dangerously if we leave it in the input buffer. This might
3860:000 | DONE cmt | na 16 16 |        |             |                 ; seem like a lot of effort for a few bytes, but MVN is so fast
3861:000 | DONE cmt | na 16 16 |        |             |                 ; - 7 cycles per byte - that it is worth it. See
3862:000 | DONE cmt | na 16 16 |        |             |                 ; http://forum.6502.org/viewtopic.php?f=2&t=1685&p=50975#p50975
3863:000 | DONE cmt | na 16 16 |        |             |                 ; and http://6502.org/tutorials/65c816opcodes.html#6.6
3864:000 | DONE ins | na 16 16 | 006b27 | ca          |                 dex                  
3865:000 | DONE ins | na 16 16 | 006b28 | ca          |                 dex                  
3866:000 | DONE ins | na 16 16 | 006b29 | 94 00       |                 sty.dx 00            
3867:000 | DONE ins | na 16 16 | 006b2b | a4 00       |                 ldy.d 000000         HERE  ( addr-s u addr-d )
3868:000 | DONE wsp | na 16 16 |        |             |
3869:000 | DONE ins | na 16 16 | 006b2d | b5 00       |                 lda.dx 00            SWAP ( addr-s addr-d u )
3870:000 | DONE ins | na 16 16 | 006b2f | 94 00       |                 sty.dx 00            
3871:000 | DONE ins | na 16 16 | 006b31 | a8          |                 tay                  
3872:000 | DONE wsp | na 16 16 |        |             |
3873:000 | DONE ins | na 16 16 | 006b32 | 5a          |                 phy                  save copy of u
3874:000 | DONE ins | na 16 16 | 006b33 | b5 00       |                 lda.dx 00            save copy of addr-d
3875:000 | DONE ins | na 16 16 | 006b35 | 48          |                 pha                  
3876:000 | DONE wsp | na 16 16 |        |             |
3877:000 | DONE ins | na 16 16 | 006b36 | 20 21 69    |                 jsr 006921           
3878:000 | DONE wsp | na 16 16 |        |             |
3879:000 | DONE ins | na 16 16 | 006b39 | ca          |                 dex                  
3880:000 | DONE ins | na 16 16 | 006b3a | ca          |                 dex                  
3881:000 | DONE ins | na 16 16 | 006b3b | ca          |                 dex                  
3882:000 | DONE ins | na 16 16 | 006b3c | ca          |                 dex                  
3883:000 | DONE ins | na 16 16 | 006b3d | 94 02       |                 sty.dx 02            
3884:000 | DONE wsp | na 16 16 |        |             |
3885:000 | DONE ins | na 16 16 | 006b3f | 68          |                 pla                  get addr-d back
3886:000 | DONE ins | na 16 16 | 006b40 | 95 00       |                 sta.dx 00            put TOS
3887:000 | DONE ins | na 16 16 | 006b42 | 68          |                 pla                  get u back
3888:000 | DONE ins | na 16 16 | 006b43 | a8          |                 tay                  
3889:000 | DONE wsp | na 16 16 |        |             |
3890:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
3891:000 | DONE ins | na 16 16 | 006b44 | 18          |                 clc                  
3892:000 | DONE ins | na 16 16 | 006b45 | 65 00       |                 adc.d 000000         
3893:000 | DONE ins | na 16 16 | 006b47 | 85 00       |                 sta.d 000000         
3894:000 | DONE wsp | na 16 16 |        |             |
3895:000 | DONE ins | na 16 16 | 006b49 | 80 03       |                 bra 006b4e           
3896:000 | DONE wsp | na 16 16 |        |             |
3897:000 | DONE lbl | na 16 16 | 006b4b |             | squote_compile                       
3898:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
3899:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
3900:000 | DONE ins | na 16 16 | 006b4b | 4c 6d 6b    |                 jmp 006b6d           JSR/RTS
3901:000 | DONE wsp | na 16 16 |        |             |
3902:000 | DONE lbl | na 16 16 | 006b4e |             | z_squote                             
3902:001 | DONE ins | na 16 16 | 006b4e | 60          |                 rts                  
3903:000 | DONE wsp | na 16 16 |        |             |
3904:000 | DONE wsp | na 16 16 |        |             |
3905:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3906:000 | DONE cmt | na 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
3907:000 | DONE cmt | na 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
3908:000 | DONE lbl | na 16 16 | 006b4f |             | xt_stod                              
3909:000 | DONE ins | na 16 16 | 006b4f | ca          |                 dex                  make room on stack
3910:000 | DONE ins | na 16 16 | 006b50 | ca          |                 dex                  
3911:000 | DONE ins | na 16 16 | 006b51 | 94 00       |                 sty.dx 00            
3912:000 | DONE wsp | na 16 16 |        |             |
3913:000 | DONE ins | na 16 16 | 006b53 | 98          |                 tya                  force flag check
3914:000 | DONE ins | na 16 16 | 006b54 | 10 05       |                 bpl 006b5b           
3915:000 | DONE wsp | na 16 16 |        |             |
3916:000 | DONE cmt | na 16 16 |        |             |                 ; negative number, extend sign
3917:000 | DONE ins | na 16 16 | 006b56 | a0 ff ff    |                 ldy.# 0ffff          
3918:000 | DONE ins | na 16 16 | 006b59 | 80 03       |                 bra 006b5e           
3919:000 | DONE wsp | na 16 16 |        |             |
3920:000 | DONE lbl | na 16 16 | 006b5b |             | stod_pos                             
3921:000 | DONE cmt | na 16 16 |        |             |                 ; positive number
3922:000 | DONE ins | na 16 16 | 006b5b | a0 00 00    |                 ldy.# 0000           fall through
3923:000 | DONE wsp | na 16 16 |        |             |
3924:000 | DONE lbl | na 16 16 | 006b5e |             | z_stod                               
3924:001 | DONE ins | na 16 16 | 006b5e | 60          |                 rts                  
3925:000 | DONE wsp | na 16 16 |        |             |
3926:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3927:000 | DONE cmt | na 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
3928:000 | DONE cmt | na 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
3929:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
3930:000 | DONE cmt | na 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
3931:000 | DONE lbl | na 16 16 | 006b5f |             | xt_sign                              
3932:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3933:000 | DONE cmt | na 16 16 |        |             |                 ; See if number is negative
3934:000 | DONE ins | na 16 16 | 006b5f | 98          |                 tya                  force flag check
3935:000 | DONE ins | na 16 16 | 006b60 | 10 06       |                 bpl 006b68           
3936:000 | DONE wsp | na 16 16 |        |             |
3937:000 | DONE cmt | na 16 16 |        |             |                 ; We're negative, overwrite number TOS
3938:000 | DONE ins | na 16 16 | 006b62 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
3939:000 | DONE wsp | na 16 16 |        |             |
3940:000 | DONE ins | na 16 16 | 006b65 | 4c 82 68    |                 jmp 006882           JSR/RTS, does not fall through
3941:000 | DONE wsp | na 16 16 |        |             |
3942:000 | DONE lbl | na 16 16 | 006b68 |             | sign_plus                            
3943:000 | DONE ins | na 16 16 | 006b68 | b4 00       |                 ldy.dx 00            get rid of number and leave
3944:000 | DONE ins | na 16 16 | 006b6a | e8          |                 inx                  
3945:000 | DONE ins | na 16 16 | 006b6b | e8          |                 inx                  
3946:000 | DONE wsp | na 16 16 |        |             |
3947:000 | DONE lbl | na 16 16 | 006b6c |             | z_sign                               
3947:001 | DONE ins | na 16 16 | 006b6c | 60          |                 rts                  
3948:000 | DONE wsp | na 16 16 |        |             |
3949:000 | DONE wsp | na 16 16 |        |             |
3950:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3951:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
3952:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
3953:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
3954:000 | DONE cmt | na 16 16 |        |             | ; tmp2
3955:000 | DONE lbl | na 16 16 | 006b6d |             | xt_sliteral                          
3956:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3957:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
3958:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
3959:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
3960:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
3961:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
3962:000 | DONE ins | na 16 16 | 006b6d | b5 00       |                 lda.dx 00            Address of string is NOS
3963:000 | DONE ins | na 16 16 | 006b6f | 85 16       |                 sta.d 000016         
3964:000 | DONE ins | na 16 16 | 006b71 | 84 18       |                 sty.d 000018         keep copy of string length
3965:000 | DONE wsp | na 16 16 |        |             |
3966:000 | DONE ins | na 16 16 | 006b73 | e2 20       |                 sep 20               
3966:001 | DONE ctl | na  8 16 |        |             |         .!a8
3967:000 | DONE ins | na  8 16 | 006b75 | a9 4c       |                 lda.# 04c            opcode for JMP
3968:000 | DONE ins | na  8 16 | 006b77 | 92 00       |                 sta.di 000000        STA (CP)
3969:000 | DONE ins | na  8 16 | 006b79 | c2 20       |                 rep 20               
3969:001 | DONE ctl | na 16 16 |        |             |         .!a16
3970:000 | DONE ins | na 16 16 | 006b7b | e6 00       |                 inc.d 000000         
3971:000 | DONE wsp | na 16 16 |        |             |
3972:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
3973:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
3974:000 | DONE ins | na 16 16 | 006b7d | a5 18       |                 lda.d 000018         string length
3975:000 | DONE ins | na 16 16 | 006b7f | 1a          |                 inc.a                
3976:000 | DONE ins | na 16 16 | 006b80 | 1a          |                 inc.a                
3977:000 | DONE wsp | na 16 16 |        |             |
3978:000 | DONE ins | na 16 16 | 006b81 | 18          |                 clc                  
3979:000 | DONE ins | na 16 16 | 006b82 | 65 00       |                 adc.d 000000         current address
3980:000 | DONE ins | na 16 16 | 006b84 | 92 00       |                 sta.di 000000        store jump target
3981:000 | DONE wsp | na 16 16 |        |             |
3982:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
3983:000 | DONE ins | na 16 16 | 006b86 | e6 00       |                 inc.d 000000         
3984:000 | DONE ins | na 16 16 | 006b88 | e6 00       |                 inc.d 000000         
3985:000 | DONE wsp | na 16 16 |        |             |
3986:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
3987:000 | DONE ins | na 16 16 | 006b8a | 88          |                 dey                  last offset is one less than length
3988:000 | DONE ins | na 16 16 | 006b8b | e2 20       |                 sep 20               
3988:001 | DONE ctl | na  8 16 |        |             |         .!a8
3989:000 | DONE lbl | na  8 16 | 006b8d |             | sl_loop                              
3990:000 | DONE ins | na  8 16 | 006b8d | b1 16       |                 lda.diy 000016       LDA (TMP1),Y
3991:000 | DONE ins | na  8 16 | 006b8f | 91 00       |                 sta.diy 000000       STA (CP),Y
3992:000 | DONE ins | na  8 16 | 006b91 | 88          |                 dey                  
3993:000 | DONE ins | na  8 16 | 006b92 | 10 f9       |                 bpl 006b8d           
3994:000 | DONE wsp | na  8 16 |        |             |
3995:000 | DONE ins | na  8 16 | 006b94 | c2 20       |                 rep 20               
3995:001 | DONE ctl | na 16 16 |        |             |         .!a16
3996:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
3997:000 | DONE ins | na 16 16 | 006b96 | a5 00       |                 lda.d 000000         
3998:000 | DONE ins | na 16 16 | 006b98 | 85 16       |                 sta.d 000016         overwrites original address
3999:000 | DONE wsp | na 16 16 |        |             |
4000:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
4001:000 | DONE ins | na 16 16 | 006b9a | 18          |                 clc                  
4002:000 | DONE ins | na 16 16 | 006b9b | 65 18       |                 adc.d 000018         length of string
4003:000 | DONE ins | na 16 16 | 006b9d | 85 00       |                 sta.d 000000         
4004:000 | DONE wsp | na 16 16 |        |             |
4005:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
4006:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
4007:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
4008:000 | DONE cmt | na 16 16 |        |             |                 ;
4009:000 | DONE cmt | na 16 16 |        |             |                 ; xt -->    jmp a
4010:000 | DONE cmt | na 16 16 |        |             |                 ;           <string data bytes>
4011:000 | DONE cmt | na 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
4012:000 | DONE cmt | na 16 16 |        |             |                 ;           <string address>
4013:000 | DONE cmt | na 16 16 |        |             |                 ;           <string length>
4014:000 | DONE cmt | na 16 16 |        |             |                 ; rts -->
4015:000 | DONE cmt | na 16 16 |        |             |                 ;
4016:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
4017:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
4018:000 | DONE ins | na 16 16 | 006b9f | f4 b8 6b    |                 phe.# 006bb8         
4019:000 | DONE ins | na 16 16 | 006ba2 | 20 16 76    |                 jsr 007616           
4020:000 | DONE wsp | na 16 16 |        |             |
4021:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
4022:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
4023:000 | DONE ins | na 16 16 | 006ba5 | a5 16       |                 lda.d 000016         new address of string
4024:000 | DONE ins | na 16 16 | 006ba7 | 48          |                 pha                  
4025:000 | DONE ins | na 16 16 | 006ba8 | 20 11 76    |                 jsr 007611           
4026:000 | DONE wsp | na 16 16 |        |             |
4027:000 | DONE ins | na 16 16 | 006bab | a5 18       |                 lda.d 000018         
4028:000 | DONE ins | na 16 16 | 006bad | 48          |                 pha                  
4029:000 | DONE ins | na 16 16 | 006bae | 20 11 76    |                 jsr 007611           
4030:000 | DONE wsp | na 16 16 |        |             |
4031:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
4032:000 | DONE ins | na 16 16 | 006bb1 | b4 02       |                 ldy.dx 02            2DROP
4033:000 | DONE ins | na 16 16 | 006bb3 | e8          |                 inx                  
4034:000 | DONE ins | na 16 16 | 006bb4 | e8          |                 inx                  
4035:000 | DONE ins | na 16 16 | 006bb5 | e8          |                 inx                  
4036:000 | DONE ins | na 16 16 | 006bb6 | e8          |                 inx                  
4037:000 | DONE wsp | na 16 16 |        |             |
4038:000 | DONE lbl | na 16 16 | 006bb7 |             | z_sliteral                           
4038:001 | DONE ins | na 16 16 | 006bb7 | 60          |                 rts                  
4039:000 | DONE wsp | na 16 16 |        |             |
4040:000 | DONE lbl | na 16 16 | 006bb8 |             | sliteral_rt                          
4041:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
4042:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
4043:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
4044:000 | DONE wsp | na 16 16 |        |             |
4045:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
4046:000 | DONE ins | na 16 16 | 006bb8 | ca          |                 dex                  
4047:000 | DONE ins | na 16 16 | 006bb9 | ca          |                 dex                  
4048:000 | DONE ins | na 16 16 | 006bba | ca          |                 dex                  
4049:000 | DONE ins | na 16 16 | 006bbb | ca          |                 dex                  
4050:000 | DONE ins | na 16 16 | 006bbc | 94 02       |                 sty.dx 02            
4051:000 | DONE wsp | na 16 16 |        |             |
4052:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
4053:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
4054:000 | DONE ins | na 16 16 | 006bbe | 7a          |                 ply                  
4055:000 | DONE ins | na 16 16 | 006bbf | c8          |                 iny                  
4056:000 | DONE wsp | na 16 16 |        |             |
4057:000 | DONE ins | na 16 16 | 006bc0 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4058:000 | DONE ins | na 16 16 | 006bc3 | 95 00       |                 sta.dx 00            save string address as NOS
4059:000 | DONE ins | na 16 16 | 006bc5 | c8          |                 iny                  
4060:000 | DONE ins | na 16 16 | 006bc6 | c8          |                 iny                  
4061:000 | DONE ins | na 16 16 | 006bc7 | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
4062:000 | DONE wsp | na 16 16 |        |             |
4063:000 | DONE ins | na 16 16 | 006bca | c8          |                 iny                  ... first, though, repair return jump
4064:000 | DONE ins | na 16 16 | 006bcb | 5a          |                 phy                  
4065:000 | DONE wsp | na 16 16 |        |             |
4066:000 | DONE ins | na 16 16 | 006bcc | a8          |                 tay                  TOS is now length of string
4067:000 | DONE wsp | na 16 16 |        |             |
4068:000 | DONE ins | na 16 16 | 006bcd | 60          |                 rts                  
4069:000 | DONE wsp | na 16 16 |        |             |
4070:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4071:000 | DONE cmt | na 16 16 |        |             | ; SM/REM ( d n1 -- n2 n3) X bytes / X cycles
4072:000 | DONE cmt | na 16 16 |        |             | ; Symmetic signed division. Compare FM/MOD. Code from Gforth, see
4073:000 | DONE cmt | na 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4074:000 | DONE cmt | na 16 16 |        |             | ; and http://git.savannah.gnu.org/cgit/gforth.git/tree/prim ; see
4075:000 | DONE cmt | na 16 16 |        |             | ; http://www.figuk.plus.com/build/arith.htm for variants. Forth is
4076:000 | DONE cmt | na 16 16 |        |             | ; SM/REM OVER >R DUP >R ABS -ROT DABS ROT UM/MOD R>
4077:000 | DONE cmt | na 16 16 |        |             | ; R@ XOR 0< IF NEGATE THEN R> 0< IF SWAP NEGATE SWAP THEN ;
4078:000 | DONE cmt | na 16 16 |        |             | ; TODO optimize in assembler
4079:000 | DONE lbl | na 16 16 | 006bce |             | xt_smrem                             
4080:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4081:000 | DONE ins | na 16 16 | 006bce | 20 ea 69    |                 jsr 0069ea           
4082:000 | DONE wsp | na 16 16 |        |             |
4083:000 | DONE ins | na 16 16 | 006bd1 | 5a          |                 phy                  >R
4084:000 | DONE ins | na 16 16 | 006bd2 | b4 00       |                 ldy.dx 00            
4085:000 | DONE ins | na 16 16 | 006bd4 | e8          |                 inx                  
4086:000 | DONE ins | na 16 16 | 006bd5 | e8          |                 inx                  
4087:000 | DONE wsp | na 16 16 |        |             |
4088:000 | DONE ins | na 16 16 | 006bd6 | ca          |                 dex                  DUP
4089:000 | DONE ins | na 16 16 | 006bd7 | ca          |                 dex                  
4090:000 | DONE ins | na 16 16 | 006bd8 | 94 00       |                 sty.dx 00            
4091:000 | DONE wsp | na 16 16 |        |             |
4092:000 | DONE ins | na 16 16 | 006bda | 5a          |                 phy                  >R
4093:000 | DONE ins | na 16 16 | 006bdb | b4 00       |                 ldy.dx 00            
4094:000 | DONE ins | na 16 16 | 006bdd | e8          |                 inx                  
4095:000 | DONE ins | na 16 16 | 006bde | e8          |                 inx                  
4096:000 | DONE wsp | na 16 16 |        |             |
4097:000 | DONE ins | na 16 16 | 006bdf | 20 18 64    |                 jsr 006418           ABS
4098:000 | DONE ins | na 16 16 | 006be2 | 20 f5 62    |                 jsr 0062f5           -ROT
4099:000 | DONE ins | na 16 16 | 006be5 | 20 d8 66    |                 jsr 0066d8           DABS
4100:000 | DONE ins | na 16 16 | 006be8 | 20 fc 6a    |                 jsr 006afc           ROT
4101:000 | DONE ins | na 16 16 | 006beb | 20 1c 6d    |                 jsr 006d1c           UM/MOD
4102:000 | DONE wsp | na 16 16 |        |             |
4103:000 | DONE ins | na 16 16 | 006bee | ca          |                 dex                  R>
4104:000 | DONE ins | na 16 16 | 006bef | ca          |                 dex                  
4105:000 | DONE ins | na 16 16 | 006bf0 | 94 00       |                 sty.dx 00            
4106:000 | DONE ins | na 16 16 | 006bf2 | 7a          |                 ply                  
4107:000 | DONE wsp | na 16 16 |        |             |
4108:000 | DONE ins | na 16 16 | 006bf3 | ca          |                 dex                  R@
4109:000 | DONE ins | na 16 16 | 006bf4 | ca          |                 dex                  
4110:000 | DONE ins | na 16 16 | 006bf5 | 94 00       |                 sty.dx 00            
4111:000 | DONE ins | na 16 16 | 006bf7 | 7a          |                 ply                  
4112:000 | DONE ins | na 16 16 | 006bf8 | 5a          |                 phy                  
4113:000 | DONE wsp | na 16 16 |        |             |
4114:000 | DONE ins | na 16 16 | 006bf9 | 20 dd 6d    |                 jsr 006ddd           XOR
4115:000 | DONE wsp | na 16 16 |        |             |
4116:000 | DONE ins | na 16 16 | 006bfc | 98          |                 tya                  0< IF
4117:000 | DONE ins | na 16 16 | 006bfd | 10 09       |                 bpl 006c08           
4118:000 | DONE wsp | na 16 16 |        |             |
4119:000 | DONE ins | na 16 16 | 006bff | b4 00       |                 ldy.dx 00            from IF
4120:000 | DONE ins | na 16 16 | 006c01 | e8          |                 inx                  
4121:000 | DONE ins | na 16 16 | 006c02 | e8          |                 inx                  
4122:000 | DONE wsp | na 16 16 |        |             |
4123:000 | DONE ins | na 16 16 | 006c03 | 20 55 69    |                 jsr 006955           NEGATE
4124:000 | DONE ins | na 16 16 | 006c06 | 80 04       |                 bra 006c0c           
4125:000 | DONE lbl | na 16 16 | 006c08 |             | smrem_1                              
4126:000 | DONE ins | na 16 16 | 006c08 | b4 00       |                 ldy.dx 00            from IF
4127:000 | DONE ins | na 16 16 | 006c0a | e8          |                 inx                  
4128:000 | DONE ins | na 16 16 | 006c0b | e8          |                 inx                  
4129:000 | DONE wsp | na 16 16 |        |             |
4130:000 | DONE lbl | na 16 16 | 006c0c |             | smrem_1_1                            
4131:000 | DONE ins | na 16 16 | 006c0c | ca          |                 dex                  R>
4132:000 | DONE ins | na 16 16 | 006c0d | ca          |                 dex                  
4133:000 | DONE ins | na 16 16 | 006c0e | 94 00       |                 sty.dx 00            
4134:000 | DONE ins | na 16 16 | 006c10 | 7a          |                 ply                  
4135:000 | DONE wsp | na 16 16 |        |             |
4136:000 | DONE ins | na 16 16 | 006c11 | 98          |                 tya                  0< IF
4137:000 | DONE ins | na 16 16 | 006c12 | 10 0f       |                 bpl 006c23           
4138:000 | DONE wsp | na 16 16 |        |             |
4139:000 | DONE ins | na 16 16 | 006c14 | b4 00       |                 ldy.dx 00            from IF
4140:000 | DONE ins | na 16 16 | 006c16 | e8          |                 inx                  
4141:000 | DONE ins | na 16 16 | 006c17 | e8          |                 inx                  
4142:000 | DONE wsp | na 16 16 |        |             |
4143:000 | DONE ins | na 16 16 | 006c18 | 20 60 6c    |                 jsr 006c60           
4144:000 | DONE ins | na 16 16 | 006c1b | 20 55 69    |                 jsr 006955           
4145:000 | DONE ins | na 16 16 | 006c1e | 20 60 6c    |                 jsr 006c60           
4146:000 | DONE ins | na 16 16 | 006c21 | 80 04       |                 bra 006c27           
4147:000 | DONE wsp | na 16 16 |        |             |
4148:000 | DONE lbl | na 16 16 | 006c23 |             | smrem_2                              
4149:000 | DONE ins | na 16 16 | 006c23 | b4 00       |                 ldy.dx 00            
4150:000 | DONE ins | na 16 16 | 006c25 | e8          |                 inx                  
4151:000 | DONE ins | na 16 16 | 006c26 | e8          |                 inx                  
4152:000 | DONE wsp | na 16 16 |        |             |
4153:000 | DONE wsp | na 16 16 |        |             |
4154:000 | DONE lbl | na 16 16 | 006c27 |             | smrem_2_1                            
4155:000 | DONE wsp | na 16 16 |        |             |
4156:000 | DONE lbl | na 16 16 | 006c27 |             | z_smrem                              
4156:001 | DONE ins | na 16 16 | 006c27 | 60          |                 rts                  
4157:000 | DONE wsp | na 16 16 |        |             |
4158:000 | DONE wsp | na 16 16 |        |             |
4159:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4160:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
4161:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
4162:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
4163:000 | DONE wsp | na 16 16 |        |             |
4164:000 | DONE lbl | na 16 16 | 006c28 |             | xt_source                            
4165:000 | DONE ins | na 16 16 | 006c28 | ca          |                 dex                  make room on Data Stack
4166:000 | DONE ins | na 16 16 | 006c29 | ca          |                 dex                  
4167:000 | DONE ins | na 16 16 | 006c2a | ca          |                 dex                  
4168:000 | DONE ins | na 16 16 | 006c2b | ca          |                 dex                  
4169:000 | DONE ins | na 16 16 | 006c2c | 94 02       |                 sty.dx 02            
4170:000 | DONE wsp | na 16 16 |        |             |
4171:000 | DONE ins | na 16 16 | 006c2e | a5 08       |                 lda.d 000008         address of current input buffer as NOS
4172:000 | DONE ins | na 16 16 | 006c30 | 95 00       |                 sta.dx 00            
4173:000 | DONE wsp | na 16 16 |        |             |
4174:000 | DONE ins | na 16 16 | 006c32 | a4 0a       |                 ldy.d 00000a         length of current input buffer as TOS
4175:000 | DONE wsp | na 16 16 |        |             |
4176:000 | DONE lbl | na 16 16 | 006c34 |             | z_source                             
4176:001 | DONE ins | na 16 16 | 006c34 | 60          |                 rts                  
4177:000 | DONE wsp | na 16 16 |        |             |
4178:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4179:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
4180:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
4181:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
4182:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
4183:000 | DONE lbl | na 16 16 | 006c35 |             | xt_source-id                         
4184:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4185:000 | DONE ins | na 16 16 | 006c35 | ca          |                 dex                  
4186:000 | DONE ins | na 16 16 | 006c36 | ca          |                 dex                  
4187:000 | DONE ins | na 16 16 | 006c37 | 94 00       |                 sty.dx 00            
4188:000 | DONE ins | na 16 16 | 006c39 | a4 06       |                 ldy.d 000006         
4189:000 | DONE wsp | na 16 16 |        |             |
4190:000 | DONE lbl | na 16 16 | 006c3b |             | z_source-id                          
4190:001 | DONE ins | na 16 16 | 006c3b | 60          |                 rts                  
4191:000 | DONE wsp | na 16 16 |        |             |
4192:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4193:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
4194:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
4195:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
4196:000 | DONE lbl | na 16 16 | 006c3c |             | xt_space                             
4197:000 | DONE ins | na 16 16 | 006c3c | a9 20 00    |                 lda.# AscSP          
4198:000 | DONE ins | na 16 16 | 006c3f | 20 34 60    |                 jsr 006034           
4199:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4200:000 | DONE wsp | na 16 16 |        |             |
4201:000 | DONE lbl | na 16 16 | 006c42 |             | z_space                              
4201:001 | DONE ins | na 16 16 | 006c42 | 60          |                 rts                  
4202:000 | DONE wsp | na 16 16 |        |             |
4203:000 | DONE wsp | na 16 16 |        |             |
4204:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4205:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
4206:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
4207:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
4208:000 | DONE lbl | na 16 16 | 006c43 |             | xt_spaces                            
4209:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4210:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4211:000 | DONE lbl | na 16 16 | 006c43 |             | @                                    
4212:000 | DONE ins | na 16 16 | 006c43 | 88          |                 dey                  this also handles case u=0
4213:000 | DONE ins | na 16 16 | 006c44 | 30 05       |                 bmi 006c4b           
4214:000 | DONE wsp | na 16 16 |        |             |
4215:000 | DONE ins | na 16 16 | 006c46 | 20 3c 6c    |                 jsr 006c3c           
4216:000 | DONE ins | na 16 16 | 006c49 | 80 f8       |                 bra 006c43           
4217:000 | DONE wsp | na 16 16 |        |             |
4218:000 | DONE lbl | na 16 16 | 006c4b |             | spaces_done                          
4219:000 | DONE ins | na 16 16 | 006c4b | b4 00       |                 ldy.dx 00            DROP
4220:000 | DONE ins | na 16 16 | 006c4d | e8          |                 inx                  
4221:000 | DONE ins | na 16 16 | 006c4e | e8          |                 inx                  
4222:000 | DONE wsp | na 16 16 |        |             |
4223:000 | DONE lbl | na 16 16 | 006c4f |             | z_spaces                             
4223:001 | DONE ins | na 16 16 | 006c4f | 60          |                 rts                  
4224:000 | DONE wsp | na 16 16 |        |             |
4225:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4226:000 | DONE cmt | na 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
4227:000 | DONE cmt | na 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
4228:000 | DONE cmt | na 16 16 |        |             | ; more than UM* DROP
4229:000 | DONE lbl | na 16 16 | 006c50 |             | xt_star                              
4230:000 | DONE ins | na 16 16 | 006c50 | 20 bd 6c    |                 jsr 006cbd           
4231:000 | DONE ins | na 16 16 | 006c53 | b4 00       |                 ldy.dx 00            DROP
4232:000 | DONE ins | na 16 16 | 006c55 | e8          |                 inx                  
4233:000 | DONE ins | na 16 16 | 006c56 | e8          |                 inx                  
4234:000 | DONE wsp | na 16 16 |        |             |
4235:000 | DONE lbl | na 16 16 | 006c57 |             | z_star                               
4235:001 | DONE ins | na 16 16 | 006c57 | 60          |                 rts                  
4236:000 | DONE wsp | na 16 16 |        |             |
4237:000 | DONE wsp | na 16 16 |        |             |
4238:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4239:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
4240:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
4241:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
4242:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
4243:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
4244:000 | DONE lbl | na 16 16 | 006c58 |             | xt_state                             
4245:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4246:000 | DONE ins | na 16 16 | 006c58 | ca          |                 dex                  
4247:000 | DONE ins | na 16 16 | 006c59 | ca          |                 dex                  
4248:000 | DONE ins | na 16 16 | 006c5a | 94 00       |                 sty.dx 00            
4249:000 | DONE ins | na 16 16 | 006c5c | a0 0e 00    |                 ldy.# 00000e         
4250:000 | DONE wsp | na 16 16 |        |             |
4251:000 | DONE lbl | na 16 16 | 006c5f |             | z_state                              
4251:001 | DONE ins | na 16 16 | 006c5f | 60          |                 rts                  
4252:000 | DONE wsp | na 16 16 |        |             |
4253:000 | DONE wsp | na 16 16 |        |             |
4254:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4255:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
4256:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
4257:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
4258:000 | DONE lbl | na 16 16 | 006c60 |             | xt_swap                              
4259:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4260:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4261:000 | DONE ins | na 16 16 | 006c60 | b5 00       |                 lda.dx 00            
4262:000 | DONE ins | na 16 16 | 006c62 | 94 00       |                 sty.dx 00            
4263:000 | DONE ins | na 16 16 | 006c64 | a8          |                 tay                  
4264:000 | DONE wsp | na 16 16 |        |             |
4265:000 | DONE lbl | na 16 16 | 006c65 |             | z_swap                               
4265:001 | DONE ins | na 16 16 | 006c65 | 60          |                 rts                  
4266:000 | DONE wsp | na 16 16 |        |             |
4267:000 | DONE wsp | na 16 16 |        |             |
4268:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4269:000 | DONE cmt | na 16 16 |        |             | ; TO ( n "name" -- ) X bytes / X cycles
4270:000 | DONE cmt | na 16 16 |        |             | ; Change the value of a VALUE. Note that in theory this would work with CONSTANT
4271:000 | DONE cmt | na 16 16 |        |             | ; as well, but we frown on this behavior. Note that while it is in violation of
4272:000 | DONE cmt | na 16 16 |        |             | ; ANS Forth, we can change the number in a VALUE with <number> ' <value> >BODY
4273:000 | DONE cmt | na 16 16 |        |             | ; +!  just as you can with Gforth
4274:000 | DONE cmt | na 16 16 |        |             | ; TODO unroll this to assembler
4275:000 | DONE lbl | na 16 16 | 006c66 |             | xt_to                                
4276:000 | DONE ins | na 16 16 | 006c66 | 20 df 63    |                 jsr 0063df           '
4277:000 | DONE ins | na 16 16 | 006c69 | 20 21 61    |                 jsr 006121           >BODY
4278:000 | DONE ins | na 16 16 | 006c6c | 20 b6 62    |                 jsr 0062b6           !
4279:000 | DONE wsp | na 16 16 |        |             |
4280:000 | DONE lbl | na 16 16 | 006c6f |             | z_to                                 
4280:001 | DONE ins | na 16 16 | 006c6f | 60          |                 rts                  
4281:000 | DONE wsp | na 16 16 |        |             |
4282:000 | DONE wsp | na 16 16 |        |             |
4283:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4284:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
4285:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
4286:000 | DONE lbl | na 16 16 | 006c70 |             | xt_true                              
4287:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4288:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4289:000 | DONE ins | na 16 16 | 006c70 | ca          |                 dex                  
4290:000 | DONE ins | na 16 16 | 006c71 | ca          |                 dex                  
4291:000 | DONE ins | na 16 16 | 006c72 | 94 00       |                 sty.dx 00            
4292:000 | DONE ins | na 16 16 | 006c74 | a0 ff ff    |                 ldy.# 0ffff          
4293:000 | DONE wsp | na 16 16 |        |             |
4294:000 | DONE lbl | na 16 16 | 006c77 |             | z_true                               
4294:001 | DONE ins | na 16 16 | 006c77 | 60          |                 rts                  
4295:000 | DONE wsp | na 16 16 |        |             |
4296:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4297:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
4298:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
4299:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
4300:000 | DONE lbl | na 16 16 | 006c78 |             | xt_tuck                              
4301:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4302:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4303:000 | DONE ins | na 16 16 | 006c78 | ca          |                 dex                  
4304:000 | DONE ins | na 16 16 | 006c79 | ca          |                 dex                  
4305:000 | DONE ins | na 16 16 | 006c7a | b5 02       |                 lda.dx 2             
4306:000 | DONE ins | na 16 16 | 006c7c | 95 00       |                 sta.dx 0             
4307:000 | DONE ins | na 16 16 | 006c7e | 94 02       |                 sty.dx 2             
4308:000 | DONE wsp | na 16 16 |        |             |
4309:000 | DONE lbl | na 16 16 | 006c80 |             | z_tuck                               
4309:001 | DONE ins | na 16 16 | 006c80 | 60          |                 rts                  
4310:000 | DONE wsp | na 16 16 |        |             |
4311:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4312:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
4313:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
4314:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
4315:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
4316:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
4317:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
4318:000 | DONE cmt | na 16 16 |        |             | ; running.
4319:000 | DONE lbl | na 16 16 | 006c81 |             | xt_type                              
4320:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4321:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4322:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
4323:000 | DONE ins | na 16 16 | 006c81 | 98          |                 tya                  force flag check of TOS
4324:000 | DONE ins | na 16 16 | 006c82 | f0 17       |                 beq 006c9b           
4325:000 | DONE wsp | na 16 16 |        |             |
4326:000 | DONE ins | na 16 16 | 006c84 | b5 00       |                 lda.dx 00            get address from NOS
4327:000 | DONE ins | na 16 16 | 006c86 | 85 16       |                 sta.d 000016         
4328:000 | DONE ins | na 16 16 | 006c88 | 84 18       |                 sty.d 000018         number of chars is TOS
4329:000 | DONE ins | na 16 16 | 006c8a | a0 00 00    |                 ldy.# 0000           
4330:000 | DONE ins | na 16 16 | 006c8d | e2 20       |                 sep 20               
4330:001 | DONE ctl | na  8 16 |        |             |         .!a8
4331:000 | DONE lbl | na  8 16 | 006c8f |             | type_loop                            
4332:000 | DONE ins | na  8 16 | 006c8f | b1 16       |                 lda.diy 000016       LDA (TMP1),Y
4333:000 | DONE ins | na  8 16 | 006c91 | 20 34 60    |                 jsr 006034           
4334:000 | DONE ins | na  8 16 | 006c94 | c8          |                 iny                  
4335:000 | DONE ins | na  8 16 | 006c95 | c4 18       |                 cpy.d 000018         
4336:000 | DONE ins | na  8 16 | 006c97 | d0 f6       |                 bne 006c8f           
4337:000 | DONE wsp | na  8 16 |        |             |
4338:000 | DONE ins | na  8 16 | 006c99 | c2 20       |                 rep 20               
4338:001 | DONE ctl | na 16 16 |        |             |         .!a16
4339:000 | DONE lbl | na 16 16 | 006c9b |             | type_done                            
4340:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
4341:000 | DONE ins | na 16 16 | 006c9b | b4 02       |                 ldy.dx 02            
4342:000 | DONE ins | na 16 16 | 006c9d | e8          |                 inx                  
4343:000 | DONE ins | na 16 16 | 006c9e | e8          |                 inx                  
4344:000 | DONE ins | na 16 16 | 006c9f | e8          |                 inx                  
4345:000 | DONE ins | na 16 16 | 006ca0 | e8          |                 inx                  
4346:000 | DONE wsp | na 16 16 |        |             |
4347:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
4348:000 | DONE wsp | na 16 16 |        |             |
4349:000 | DONE lbl | na 16 16 | 006ca1 |             | z_type                               
4349:001 | DONE ins | na 16 16 | 006ca1 | 60          |                 rts                  
4350:000 | DONE wsp | na 16 16 |        |             |
4351:000 | DONE wsp | na 16 16 |        |             |
4352:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4353:000 | DONE cmt | na 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
4354:000 | DONE cmt | na 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
4355:000 | DONE cmt | na 16 16 |        |             | ; result and a single-cell remainder. Based on
4356:000 | DONE cmt | na 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
4357:000 | DONE cmt | na 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
4358:000 | DONE cmt | na 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
4359:000 | DONE cmt | na 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
4360:000 | DONE cmt | na 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
4361:000 | DONE lbl | na 16 16 | 006ca2 |             | xt_udmod                             
4362:000 | DONE ins | na 16 16 | 006ca2 | 20 8a 61    |                 jsr 00618a           
4363:000 | DONE ins | na 16 16 | 006ca5 | 20 21 63    |                 jsr 006321           
4364:000 | DONE ins | na 16 16 | 006ca8 | 20 c3 6a    |                 jsr 006ac3           
4365:000 | DONE ins | na 16 16 | 006cab | 20 1c 6d    |                 jsr 006d1c           
4366:000 | DONE ins | na 16 16 | 006cae | 20 fc 6a    |                 jsr 006afc           
4367:000 | DONE ins | na 16 16 | 006cb1 | 20 fc 6a    |                 jsr 006afc           
4368:000 | DONE ins | na 16 16 | 006cb4 | 20 cc 6a    |                 jsr 006acc           
4369:000 | DONE ins | na 16 16 | 006cb7 | 20 1c 6d    |                 jsr 006d1c           
4370:000 | DONE ins | na 16 16 | 006cba | 4c fc 6a    |                 jmp 006afc           JSR/RTS
4371:000 | DONE lbl | na 16 16 | 006cbd |             | z_udmod                              
4372:000 | DONE wsp | na 16 16 |        |             |
4373:000 | DONE wsp | na 16 16 |        |             |
4374:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4375:000 | DONE cmt | na 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
4376:000 | DONE cmt | na 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
4377:000 | DONE cmt | na 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
4378:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
4379:000 | DONE cmt | na 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
4380:000 | DONE cmt | na 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
4381:000 | DONE cmt | na 16 16 |        |             | ; call this "U*"
4382:000 | DONE wsp | na 16 16 |        |             |
4383:000 | DONE cmt | na 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
4384:000 | DONE cmt | na 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
4385:000 | DONE cmt | na 16 16 |        |             | ; consider switching to a table-supported version based on
4386:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
4387:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
4388:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
4389:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
4390:000 | DONE cmt | na 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
4391:000 | DONE lbl | na 16 16 | 006cbd |             | xt_umstar                            
4392:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4393:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
4394:000 | DONE ins | na 16 16 | 006cbd | 98          |                 tya                  
4395:000 | DONE ins | na 16 16 | 006cbe | f0 3d       |                 beq 006cfd           
4396:000 | DONE ins | na 16 16 | 006cc0 | b5 00       |                 lda.dx 00            
4397:000 | DONE ins | na 16 16 | 006cc2 | f0 39       |                 beq 006cfd           
4398:000 | DONE wsp | na 16 16 |        |             |
4399:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
4400:000 | DONE cmt | na 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
4401:000 | DONE cmt | na 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
4402:000 | DONE cmt | na 16 16 |        |             |                 ; answer
4403:000 | DONE ins | na 16 16 | 006cc4 | c0 01 00    |                 cpy.# 0001           non-distructively
4404:000 | DONE ins | na 16 16 | 006cc7 | f0 3b       |                 beq 006d04           
4405:000 | DONE ins | na 16 16 | 006cc9 | b5 00       |                 lda.dx 00            
4406:000 | DONE ins | na 16 16 | 006ccb | 3a          |                 dec.a                don't care about distruction
4407:000 | DONE ins | na 16 16 | 006ccc | f0 39       |                 beq 006d07           
4408:000 | DONE wsp | na 16 16 |        |             |
4409:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
4410:000 | DONE ins | na 16 16 | 006cce | c0 02 00    |                 cpy.# 0002           
4411:000 | DONE ins | na 16 16 | 006cd1 | f0 3b       |                 beq 006d0e           
4412:000 | DONE wsp | na 16 16 |        |             |
4413:000 | DONE ins | na 16 16 | 006cd3 | b5 00       |                 lda.dx 00            
4414:000 | DONE ins | na 16 16 | 006cd5 | c9 02 00    |                 cmp.# 0002           
4415:000 | DONE ins | na 16 16 | 006cd8 | f0 38       |                 beq 006d12           
4416:000 | DONE wsp | na 16 16 |        |             |
4417:000 | DONE cmt | na 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
4418:000 | DONE ins | na 16 16 | 006cda | 84 16       |                 sty.d 000016         TOS number  "40"
4419:000 | DONE ins | na 16 16 | 006cdc | 85 18       |                 sta.d 000018         NOS number  "41"
4420:000 | DONE ins | na 16 16 | 006cde | a0 10 00    |                 ldy.# &16            loop counter
4421:000 | DONE wsp | na 16 16 |        |             |
4422:000 | DONE ins | na 16 16 | 006ce1 | a9 00 00    |                 lda.# 0000           
4423:000 | DONE ins | na 16 16 | 006ce4 | 85 1a       |                 sta.d 00001a         Most Significat Word (MSW) of result
4424:000 | DONE wsp | na 16 16 |        |             |
4425:000 | DONE lbl | na 16 16 | 006ce6 |             | umstar_loop                          
4426:000 | DONE ins | na 16 16 | 006ce6 | 0a          |                 asl.a                useless for first iteration
4427:000 | DONE ins | na 16 16 | 006ce7 | 26 1a       |                 rol.d 00001a         move carry into MSB, useless first iteration
4428:000 | DONE ins | na 16 16 | 006ce9 | 06 18       |                 asl.d 000018         move bit of NOS number into carry
4429:000 | DONE wsp | na 16 16 |        |             |
4430:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
4431:000 | DONE cmt | na 16 16 |        |             |                 ; the next bit
4432:000 | DONE ins | na 16 16 | 006ceb | 90 07       |                 bcc 006cf4           
4433:000 | DONE wsp | na 16 16 |        |             |
4434:000 | DONE ins | na 16 16 | 006ced | 18          |                 clc                  
4435:000 | DONE ins | na 16 16 | 006cee | 65 16       |                 adc.d 000016         we have a set bit, so add TOS
4436:000 | DONE wsp | na 16 16 |        |             |
4437:000 | DONE cmt | na 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
4438:000 | DONE ins | na 16 16 | 006cf0 | 90 02       |                 bcc 006cf4           
4439:000 | DONE ins | na 16 16 | 006cf2 | e6 1a       |                 inc.d 00001a         
4440:000 | DONE wsp | na 16 16 |        |             |
4441:000 | DONE lbl | na 16 16 | 006cf4 |             | umstar_counter                       
4442:000 | DONE ins | na 16 16 | 006cf4 | 88          |                 dey                  
4443:000 | DONE ins | na 16 16 | 006cf5 | d0 ef       |                 bne 006ce6           
4444:000 | DONE wsp | na 16 16 |        |             |
4445:000 | DONE cmt | na 16 16 |        |             |                 ; We're all done, clean up and leave
4446:000 | DONE ins | na 16 16 | 006cf7 | 95 00       |                 sta.dx 00            store lower cell of number in NOS
4447:000 | DONE ins | na 16 16 | 006cf9 | a4 1a       |                 ldy.d 00001a         store MSB in TOS as double cell
4448:000 | DONE wsp | na 16 16 |        |             |
4449:000 | DONE ins | na 16 16 | 006cfb | 80 1e       |                 bra 006d1b           don't use RTS so we can natively compile
4450:000 | DONE wsp | na 16 16 |        |             |
4451:000 | DONE lbl | na 16 16 | 006cfd |             | umstar_zero                          
4452:000 | DONE cmt | na 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
4453:000 | DONE ins | na 16 16 | 006cfd | a0 00 00    |                 ldy.# 0000           
4454:000 | DONE ins | na 16 16 | 006d00 | 94 00       |                 sty.dx 00            
4455:000 | DONE ins | na 16 16 | 006d02 | 80 17       |                 bra 006d1b           
4456:000 | DONE wsp | na 16 16 |        |             |
4457:000 | DONE lbl | na 16 16 | 006d04 |             | umstar_one_tos                       
4458:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is one, life is easy
4459:000 | DONE ins | na 16 16 | 006d04 | 88          |                 dey                  NOS is LSW, TOS becomes zero
4460:000 | DONE ins | na 16 16 | 006d05 | 80 14       |                 bra 006d1b           
4461:000 | DONE lbl | na 16 16 | 006d07 |             | umstar_one_nos                       
4462:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is one, life is easy
4463:000 | DONE ins | na 16 16 | 006d07 | 94 00       |                 sty.dx 00            
4464:000 | DONE ins | na 16 16 | 006d09 | a0 00 00    |                 ldy.# 0000           
4465:000 | DONE ins | na 16 16 | 006d0c | 80 0d       |                 bra 006d1b           
4466:000 | DONE wsp | na 16 16 |        |             |
4467:000 | DONE lbl | na 16 16 | 006d0e |             | umstar_two_tos                       
4468:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is two, life is easy
4469:000 | DONE ins | na 16 16 | 006d0e | b5 00       |                 lda.dx 00            
4470:000 | DONE ins | na 16 16 | 006d10 | 80 01       |                 bra 006d13           
4471:000 | DONE lbl | na 16 16 | 006d12 |             | umstar_two_nos                       
4472:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is two, life is still easy
4473:000 | DONE ins | na 16 16 | 006d12 | 98          |                 tya                  
4474:000 | DONE lbl | na 16 16 | 006d13 |             | umstar_two_common                    
4475:000 | DONE ins | na 16 16 | 006d13 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
4476:000 | DONE ins | na 16 16 | 006d14 | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
4477:000 | DONE wsp | na 16 16 |        |             |
4478:000 | DONE ins | na 16 16 | 006d16 | a9 00 00    |                 lda.# 0000           
4479:000 | DONE ins | na 16 16 | 006d19 | 2a          |                 rol.a                Rotate any Carry Flag into MSW
4480:000 | DONE ins | na 16 16 | 006d1a | a8          |                 tay                  
4481:000 | DONE wsp | na 16 16 |        |             |
4482:000 | DONE lbl | na 16 16 | 006d1b |             | z_umstar                             
4482:001 | DONE ins | na 16 16 | 006d1b | 60          |                 rts                  
4483:000 | DONE wsp | na 16 16 |        |             |
4484:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4485:000 | DONE cmt | na 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
4486:000 | DONE cmt | na 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
4487:000 | DONE cmt | na 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
4488:000 | DONE cmt | na 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
4489:000 | DONE cmt | na 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
4490:000 | DONE cmt | na 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
4491:000 | DONE lbl | na 16 16 | 006d1c |             | xt_ummod                             
4492:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4493:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4494:000 | DONE cmt | na 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
4495:000 | DONE cmt | na 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
4496:000 | DONE cmt | na 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
4497:000 | DONE cmt | na 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
4498:000 | DONE cmt | na 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
4499:000 | DONE cmt | na 16 16 |        |             |                 ;
4500:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
4501:000 | DONE cmt | na 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
4502:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
4503:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
4504:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
4505:000 | DONE cmt | na 16 16 |        |             |                 ;
4506:000 | DONE cmt | na 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
4507:000 | DONE cmt | na 16 16 |        |             |                 ; and low cell in 3OS
4508:000 | DONE wsp | na 16 16 |        |             |
4509:000 | DONE cmt | na 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
4510:000 | DONE cmt | na 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
4511:000 | DONE cmt | na 16 16 |        |             |                 ; to appear like in Gforth
4512:000 | DONE ins | na 16 16 | 006d1c | 98          |                 tya                  force flag test
4513:000 | DONE ins | na 16 16 | 006d1d | d0 06       |                 bne 006d25           
4514:000 | DONE wsp | na 16 16 |        |             |
4515:000 | DONE ins | na 16 16 | 006d1f | a9 fa 7b    |                 lda.# 007bfa         
4516:000 | DONE ins | na 16 16 | 006d22 | 4c 37 76    |                 jmp 007637           
4517:000 | DONE wsp | na 16 16 |        |             |
4518:000 | DONE lbl | na 16 16 | 006d25 |             | ummod_notzero                        
4519:000 | DONE ins | na 16 16 | 006d25 | 84 20       |                 sty.d 000020         Y is now free
4520:000 | DONE ins | na 16 16 | 006d27 | b5 00       |                 lda.dx 00            high cell of dividend
4521:000 | DONE ins | na 16 16 | 006d29 | 85 22       |                 sta.d 000022         
4522:000 | DONE ins | na 16 16 | 006d2b | b5 02       |                 lda.dx 02            low cell of dividend
4523:000 | DONE ins | na 16 16 | 006d2d | 85 24       |                 sta.d 000024         
4524:000 | DONE wsp | na 16 16 |        |             |
4525:000 | DONE cmt | na 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
4526:000 | DONE cmt | na 16 16 |        |             |                 ; Pointer, freeing X for index duty
4527:000 | DONE ins | na 16 16 | 006d2f | e8          |                 inx                  
4528:000 | DONE ins | na 16 16 | 006d30 | e8          |                 inx                  
4529:000 | DONE ins | na 16 16 | 006d31 | 86 1c       |                 stx.d 00001c         
4530:000 | DONE wsp | na 16 16 |        |             |
4531:000 | DONE cmt | na 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
4532:000 | DONE cmt | na 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
4533:000 | DONE cmt | na 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
4534:000 | DONE cmt | na 16 16 |        |             |                 ; we did that already in a separate step
4535:000 | DONE ins | na 16 16 | 006d33 | 38          |                 sec                  
4536:000 | DONE ins | na 16 16 | 006d34 | a5 22       |                 lda.d 000022         
4537:000 | DONE ins | na 16 16 | 006d36 | e5 20       |                 sbc.d 000020         
4538:000 | DONE ins | na 16 16 | 006d38 | b0 21       |                 bcs 006d5b           
4539:000 | DONE wsp | na 16 16 |        |             |
4540:000 | DONE cmt | na 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
4541:000 | DONE cmt | na 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
4542:000 | DONE cmt | na 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
4543:000 | DONE cmt | na 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
4544:000 | DONE cmt | na 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
4545:000 | DONE cmt | na 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
4546:000 | DONE ins | na 16 16 | 006d3a | a2 11 00    |                 ldx.# &17            
4547:000 | DONE wsp | na 16 16 |        |             |
4548:000 | DONE lbl | na 16 16 | 006d3d |             | ummod_shift                          
4549:000 | DONE cmt | na 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
4550:000 | DONE cmt | na 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
4551:000 | DONE cmt | na 16 16 |        |             |                 ; pushed off the other end in the last rotation
4552:000 | DONE ins | na 16 16 | 006d3d | 26 24       |                 rol.d 000024         
4553:000 | DONE wsp | na 16 16 |        |             |
4554:000 | DONE cmt | na 16 16 |        |             |                 ; loop control
4555:000 | DONE ins | na 16 16 | 006d3f | ca          |                 dex                  
4556:000 | DONE ins | na 16 16 | 006d40 | f0 22       |                 beq 006d64           
4557:000 | DONE wsp | na 16 16 |        |             |
4558:000 | DONE cmt | na 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
4559:000 | DONE cmt | na 16 16 |        |             |                 ; next bit in from high bit of low cell
4560:000 | DONE ins | na 16 16 | 006d42 | 26 22       |                 rol.d 000022         
4561:000 | DONE ins | na 16 16 | 006d44 | a9 00 00    |                 lda.# 0000           
4562:000 | DONE ins | na 16 16 | 006d47 | 2a          |                 rol.a                
4563:000 | DONE ins | na 16 16 | 006d48 | 85 26       |                 sta.d 000026         store old high bit of dividend
4564:000 | DONE wsp | na 16 16 |        |             |
4565:000 | DONE cmt | na 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
4566:000 | DONE cmt | na 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
4567:000 | DONE cmt | na 16 16 |        |             |                 ; cleared, divisor did not fit
4568:000 | DONE ins | na 16 16 | 006d4a | 38          |                 sec                  
4569:000 | DONE ins | na 16 16 | 006d4b | a5 22       |                 lda.d 000022         
4570:000 | DONE ins | na 16 16 | 006d4d | e5 20       |                 sbc.d 000020         
4571:000 | DONE ins | na 16 16 | 006d4f | a8          |                 tay                  save difference in Y until we know if we need it
4572:000 | DONE wsp | na 16 16 |        |             |
4573:000 | DONE cmt | na 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
4574:000 | DONE cmt | na 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
4575:000 | DONE cmt | na 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
4576:000 | DONE cmt | na 16 16 |        |             |                 ; remains set
4577:000 | DONE ins | na 16 16 | 006d50 | a5 26       |                 lda.d 000026         
4578:000 | DONE ins | na 16 16 | 006d52 | e9 00 00    |                 sbc.# 0000           
4579:000 | DONE ins | na 16 16 | 006d55 | 90 e6       |                 bcc 006d3d           
4580:000 | DONE wsp | na 16 16 |        |             |
4581:000 | DONE cmt | na 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
4582:000 | DONE cmt | na 16 16 |        |             |                 ; cell to what it would be after subtraction
4583:000 | DONE ins | na 16 16 | 006d57 | 84 22       |                 sty.d 000022         
4584:000 | DONE ins | na 16 16 | 006d59 | 80 e2       |                 bra 006d3d           
4585:000 | DONE wsp | na 16 16 |        |             |
4586:000 | DONE lbl | na 16 16 | 006d5b |             | ummod_overflow                       
4587:000 | DONE cmt | na 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
4588:000 | DONE cmt | na 16 16 |        |             |                 ; in both the quotient and remainder
4589:000 | DONE ins | na 16 16 | 006d5b | a6 1c       |                 ldx.d 00001c         restore DSP
4590:000 | DONE ins | na 16 16 | 006d5d | a0 ff ff    |                 ldy.# 0ffff          
4591:000 | DONE ins | na 16 16 | 006d60 | 94 00       |                 sty.dx 00            
4592:000 | DONE ins | na 16 16 | 006d62 | 80 08       |                 bra 006d6c           go to end to enable native coding
4593:000 | DONE wsp | na 16 16 |        |             |
4594:000 | DONE lbl | na 16 16 | 006d64 |             | ummod_complete                       
4595:000 | DONE ins | na 16 16 | 006d64 | a6 1c       |                 ldx.d 00001c         restore DSP
4596:000 | DONE ins | na 16 16 | 006d66 | a4 24       |                 ldy.d 000024         quotient is TOS
4597:000 | DONE ins | na 16 16 | 006d68 | a5 22       |                 lda.d 000022         remainder is NOS
4598:000 | DONE ins | na 16 16 | 006d6a | 95 00       |                 sta.dx 00            
4599:000 | DONE wsp | na 16 16 |        |             |
4600:000 | DONE lbl | na 16 16 | 006d6c |             | z_ummod                              
4600:001 | DONE ins | na 16 16 | 006d6c | 60          |                 rts                  
4601:000 | DONE wsp | na 16 16 |        |             |
4602:000 | DONE wsp | na 16 16 |        |             |
4603:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4604:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
4605:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not exclude the
4606:000 | DONE cmt | na 16 16 |        |             | ; space for PAD.
4607:000 | DONE lbl | na 16 16 | 006d6d |             | xt_unused                            
4608:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4609:000 | DONE ins | na 16 16 | 006d6d | a9 ff 5f    |                 lda.# 005fff         
4610:000 | DONE ins | na 16 16 | 006d70 | 38          |                 sec                  
4611:000 | DONE ins | na 16 16 | 006d71 | e5 00       |                 sbc.d 000000         current compile pointer
4612:000 | DONE wsp | na 16 16 |        |             |
4613:000 | DONE ins | na 16 16 | 006d73 | ca          |                 dex                  
4614:000 | DONE ins | na 16 16 | 006d74 | ca          |                 dex                  
4615:000 | DONE ins | na 16 16 | 006d75 | 94 00       |                 sty.dx 00            
4616:000 | DONE wsp | na 16 16 |        |             |
4617:000 | DONE ins | na 16 16 | 006d77 | a8          |                 tay                  
4618:000 | DONE wsp | na 16 16 |        |             |
4619:000 | DONE lbl | na 16 16 | 006d78 |             | z_unused                             
4619:001 | DONE ins | na 16 16 | 006d78 | 60          |                 rts                  
4620:000 | DONE wsp | na 16 16 |        |             |
4621:000 | DONE wsp | na 16 16 |        |             |
4622:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4623:000 | DONE cmt | na 16 16 |        |             | ; VALUE ( n "name" -- ) X bytes / X cycles
4624:000 | DONE cmt | na 16 16 |        |             | ; Associate a name with a value (like a constant) that can be changed (like
4625:000 | DONE cmt | na 16 16 |        |             | ; a variable) with TO. We use the routines as CONSTANT, see there.
4626:000 | DONE wsp | na 16 16 |        |             |
4627:000 | DONE wsp | na 16 16 |        |             |
4628:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4629:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
4630:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
4631:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
4632:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
4633:000 | DONE lbl | na 16 16 | 006d79 |             | xt_variable                          
4634:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
4635:000 | DONE ins | na 16 16 | 006d79 | 20 fd 65    |                 jsr 0065fd           
4636:000 | DONE wsp | na 16 16 |        |             |
4637:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
4638:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
4639:000 | DONE ins | na 16 16 | 006d7c | a9 00 00    |                 lda.# 0000           
4640:000 | DONE ins | na 16 16 | 006d7f | 92 00       |                 sta.di 000000        STA (CP)
4641:000 | DONE wsp | na 16 16 |        |             |
4642:000 | DONE ins | na 16 16 | 006d81 | e6 00       |                 inc.d 000000         direct COMMA
4643:000 | DONE ins | na 16 16 | 006d83 | e6 00       |                 inc.d 000000         
4644:000 | DONE wsp | na 16 16 |        |             |
4645:000 | DONE lbl | na 16 16 | 006d85 |             | z_variable                           
4645:001 | DONE ins | na 16 16 | 006d85 | 60          |                 rts                  
4646:000 | DONE wsp | na 16 16 |        |             |
4647:000 | DONE wsp | na 16 16 |        |             |
4648:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4649:000 | DONE cmt | na 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
4650:000 | DONE cmt | na 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
4651:000 | DONE cmt | na 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
4652:000 | DONE cmt | na 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
4653:000 | DONE lbl | na 16 16 | 006d86 |             | xt_wordsnsizes                       
4654:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4655:000 | DONE ins | na 16 16 | 006d86 | a9 ff ff    |                 lda.# 0ffff          
4656:000 | DONE ins | na 16 16 | 006d89 | 85 1a       |                 sta.d 00001a         set flag that we want sizes, too
4657:000 | DONE wsp | na 16 16 |        |             |
4658:000 | DONE cmt | na 16 16 |        |             |                 ; continue with WORDS
4659:000 | DONE ins | na 16 16 | 006d8b | 80 02       |                 bra 006d8f           
4660:000 | DONE wsp | na 16 16 |        |             |
4661:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4662:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
4663:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
4664:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
4665:000 | DONE cmt | na 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
4666:000 | DONE cmt | na 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
4667:000 | DONE lbl | na 16 16 | 006d8d |             | xt_words                             
4668:000 | DONE ins | na 16 16 | 006d8d | 64 1a       |                 stz.d 00001a         store flag that we don't want to print sizes
4669:000 | DONE wsp | na 16 16 |        |             |
4670:000 | DONE lbl | na 16 16 | 006d8f |             | words_common                         
4671:000 | DONE cmt | na 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
4672:000 | DONE ins | na 16 16 | 006d8f | 20 f6 65    |                 jsr 0065f6           start on next line, this is a style choice
4673:000 | DONE wsp | na 16 16 |        |             |
4674:000 | DONE ins | na 16 16 | 006d92 | a5 02       |                 lda.d 000002         nt of first entry in Dictionary (last added)
4675:000 | DONE ins | na 16 16 | 006d94 | 48          |                 pha                  
4676:000 | DONE wsp | na 16 16 |        |             |
4677:000 | DONE ins | na 16 16 | 006d95 | ca          |                 dex                  create room on TOS
4678:000 | DONE ins | na 16 16 | 006d96 | ca          |                 dex                  
4679:000 | DONE ins | na 16 16 | 006d97 | 94 00       |                 sty.dx 00            
4680:000 | DONE wsp | na 16 16 |        |             |
4681:000 | DONE lbl | na 16 16 | 006d99 |             | words_loop                           
4682:000 | DONE ins | na 16 16 | 006d99 | a8          |                 tay                  ( nt )
4683:000 | DONE ins | na 16 16 | 006d9a | 20 3b 69    |                 jsr 00693b           ( nt -- addr u )
4684:000 | DONE ins | na 16 16 | 006d9d | 20 81 6c    |                 jsr 006c81           ( addr u -- )
4685:000 | DONE ins | na 16 16 | 006da0 | 20 3c 6c    |                 jsr 006c3c           
4686:000 | DONE wsp | na 16 16 |        |             |
4687:000 | DONE cmt | na 16 16 |        |             |                 ; If the user wants sizes as well, print them
4688:000 | DONE ins | na 16 16 | 006da3 | a5 1a       |                 lda.d 00001a         
4689:000 | DONE ins | na 16 16 | 006da5 | f0 0f       |                 beq 006db6           
4690:000 | DONE wsp | na 16 16 |        |             |
4691:000 | DONE cmt | na 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
4692:000 | DONE cmt | na 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
4693:000 | DONE ins | na 16 16 | 006da7 | ca          |                 dex                  
4694:000 | DONE ins | na 16 16 | 006da8 | ca          |                 dex                  
4695:000 | DONE ins | na 16 16 | 006da9 | 94 00       |                 sty.dx 00            
4696:000 | DONE wsp | na 16 16 |        |             |
4697:000 | DONE ins | na 16 16 | 006dab | 7a          |                 ply                  get nt back again
4698:000 | DONE ins | na 16 16 | 006dac | 5a          |                 phy                  
4699:000 | DONE ins | na 16 16 | 006dad | 20 ca 6d    |                 jsr 006dca           ( u )
4700:000 | DONE ins | na 16 16 | 006db0 | 20 a4 61    |                 jsr 0061a4           
4701:000 | DONE ins | na 16 16 | 006db3 | 20 3c 6c    |                 jsr 006c3c           
4702:000 | DONE wsp | na 16 16 |        |             |
4703:000 | DONE lbl | na 16 16 | 006db6 |             | words_nosizes                        
4704:000 | DONE ins | na 16 16 | 006db6 | 68          |                 pla                  get back first entry in Dictionary
4705:000 | DONE wsp | na 16 16 |        |             |
4706:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
4707:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
4708:000 | DONE ins | na 16 16 | 006db7 | 1a          |                 inc.a                
4709:000 | DONE ins | na 16 16 | 006db8 | 1a          |                 inc.a                
4710:000 | DONE wsp | na 16 16 |        |             |
4711:000 | DONE ins | na 16 16 | 006db9 | ca          |                 dex                  
4712:000 | DONE ins | na 16 16 | 006dba | ca          |                 dex                  
4713:000 | DONE ins | na 16 16 | 006dbb | 94 00       |                 sty.dx 00            
4714:000 | DONE wsp | na 16 16 |        |             |
4715:000 | DONE ins | na 16 16 | 006dbd | a8          |                 tay                  
4716:000 | DONE ins | na 16 16 | 006dbe | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4717:000 | DONE ins | na 16 16 | 006dc1 | 48          |                 pha                  
4718:000 | DONE ins | na 16 16 | 006dc2 | d0 d5       |                 bne 006d99           zero entry signals end of Dictionary
4719:000 | DONE wsp | na 16 16 |        |             |
4720:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
4721:000 | DONE ins | na 16 16 | 006dc4 | 68          |                 pla                  balance MPU stack, value discarded
4722:000 | DONE wsp | na 16 16 |        |             |
4723:000 | DONE ins | na 16 16 | 006dc5 | b4 00       |                 ldy.dx 00            
4724:000 | DONE ins | na 16 16 | 006dc7 | e8          |                 inx                  
4725:000 | DONE ins | na 16 16 | 006dc8 | e8          |                 inx                  
4726:000 | DONE wsp | na 16 16 |        |             |
4727:000 | DONE lbl | na 16 16 | 006dc9 |             | z_words                              
4728:000 | DONE lbl | na 16 16 | 006dc9 |             | z_wordsnsizes                        
4728:001 | DONE ins | na 16 16 | 006dc9 | 60          |                 rts                  
4729:000 | DONE wsp | na 16 16 |        |             |
4730:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4731:000 | DONE cmt | na 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
4732:000 | DONE cmt | na 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
4733:000 | DONE cmt | na 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
4734:000 | DONE cmt | na 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
4735:000 | DONE lbl | na 16 16 | 006dca |             | xt_wordsize                          
4736:000 | DONE cmt | na 16 16 |        |             |                 ; We get the beginning address of the code from the word's
4737:000 | DONE cmt | na 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
4738:000 | DONE cmt | na 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
4739:000 | DONE ins | na 16 16 | 006dca | c8          |                 iny                  
4740:000 | DONE ins | na 16 16 | 006dcb | c8          |                 iny                  
4741:000 | DONE ins | na 16 16 | 006dcc | c8          |                 iny                  
4742:000 | DONE ins | na 16 16 | 006dcd | c8          |                 iny                  nt+4, location of xt
4743:000 | DONE ins | na 16 16 | 006dce | b9 00 00    |                 lda.y 0000           get xt
4744:000 | DONE ins | na 16 16 | 006dd1 | 85 18       |                 sta.d 000018         
4745:000 | DONE wsp | na 16 16 |        |             |
4746:000 | DONE ins | na 16 16 | 006dd3 | c8          |                 iny                  
4747:000 | DONE ins | na 16 16 | 006dd4 | c8          |                 iny                  nt+6, location of z_word
4748:000 | DONE ins | na 16 16 | 006dd5 | b9 00 00    |                 lda.y 0000           
4749:000 | DONE wsp | na 16 16 |        |             |
4750:000 | DONE ins | na 16 16 | 006dd8 | 38          |                 sec                  (z_word - xt_word)
4751:000 | DONE ins | na 16 16 | 006dd9 | e5 18       |                 sbc.d 000018         
4752:000 | DONE ins | na 16 16 | 006ddb | a8          |                 tay                  
4753:000 | DONE wsp | na 16 16 |        |             |
4754:000 | DONE lbl | na 16 16 | 006ddc |             | z_wordsize                           
4754:001 | DONE ins | na 16 16 | 006ddc | 60          |                 rts                  
4755:000 | DONE wsp | na 16 16 |        |             |
4756:000 | DONE wsp | na 16 16 |        |             |
4757:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4758:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
4759:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
4760:000 | DONE lbl | na 16 16 | 006ddd |             | xt_xor                               
4761:000 | DONE ins | na 16 16 | 006ddd | 98          |                 tya                  
4762:000 | DONE ins | na 16 16 | 006dde | 55 00       |                 eor.dx 00            
4763:000 | DONE ins | na 16 16 | 006de0 | a8          |                 tay                  
4764:000 | DONE wsp | na 16 16 |        |             |
4765:000 | DONE ins | na 16 16 | 006de1 | e8          |                 inx                  
4766:000 | DONE ins | na 16 16 | 006de2 | e8          |                 inx                  
4767:000 | DONE wsp | na 16 16 |        |             |
4768:000 | DONE lbl | na 16 16 | 006de3 |             | z_xor                                
4768:001 | DONE ins | na 16 16 | 006de3 | 60          |                 rts                  
4769:000 | DONE wsp | na 16 16 |        |             |
4770:000 | DONE wsp | na 16 16 |        |             |
4771:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4772:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
4773:000 | DONE wsp | na 16 16 |        |             |
4774:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
4774:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
4774:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
4774:003 | DONE cmt | na 16 16 |        |             | ; This version: 02. Mar 2017
4774:004 | DONE wsp | na 16 16 |        |             |
4774:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
4774:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
4774:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
4774:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
4774:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
4774:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
4774:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
4774:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
4774:013 | DONE cmt | na 16 16 |        |             | ;
4774:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
4774:015 | DONE cmt | na 16 16 |        |             | ;
4774:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
4774:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
4774:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
4774:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
4774:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
4774:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
4774:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
4774:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
4774:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
4774:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
4774:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
4774:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
4774:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
4774:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
4774:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
4774:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
4774:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
4774:033 | DONE cmt | na 16 16 |        |             | ;
4774:034 | DONE cmt | na 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
4774:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
4774:036 | DONE cmt | na 16 16 |        |             | ;
4774:037 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
4774:038 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
4774:039 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
4774:040 | DONE wsp | na 16 16 |        |             |
4774:041 | DONE cmt | na 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
4774:042 | DONE cmt | na 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
4774:043 | DONE cmt | na 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
4774:044 | DONE cmt | na 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
4774:045 | DONE cmt | na 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
4774:046 | DONE cmt | na 16 16 |        |             | ; involved.
4774:047 | DONE wsp | na 16 16 |        |             |
4774:048 | DONE lbl | na 16 16 | 006de4 |             | nt_bye                               
4774:049 | DONE dir | na 16 16 | 006de4 | (1 bytes)   |         .byte 03                     length of word string
4774:049 | DONE dir | na 16 16 |        |             |                 03                       --  .
4774:050 | DONE dir | na 16 16 | 006de5 | (1 bytes)   |         .byte { NC }                 status byte
4774:050 | DONE dir | na 16 16 |        |             |                 01                       --  .
4774:051 | DONE dir | na 16 16 | 006de6 | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
4774:051 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
4774:052 | DONE dir | na 16 16 | 006de8 | (2 bytes)   |         .word 006527                 start of code, the xt of this word
4774:052 | DONE dir | na 16 16 |        |             |                 27 65                    --  ' e
4774:053 | DONE dir | na 16 16 | 006dea | (2 bytes)   |         .word 00652a                 end of code (points to RTS)
4774:053 | DONE dir | na 16 16 |        |             |                 2a 65                    --  * e
4774:054 | DONE dir | na 16 16 | 006dec | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
4774:054 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
4774:055 | DONE wsp | na 16 16 |        |             |
4774:056 | DONE lbl | na 16 16 | 006def |             | nt_cold                              
4774:057 | DONE dir | na 16 16 | 006def | (2 bytes)   |         .byte 4, 00                  
4774:057 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4774:058 | DONE dir | na 16 16 | 006df1 | (6 bytes)   |         .word nt_bye, xt_cold, 0060e2 
4774:058 | DONE dir | na 16 16 |        |             |                 e4 6d 61 60 e2 60        --  . m a ` . `
4774:059 | DONE dir | na 16 16 | 006df7 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
4774:059 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
4774:060 | DONE wsp | na 16 16 |        |             |
4774:061 | DONE lbl | na 16 16 | 006dfb |             | nt_wordsnsizes                       
4774:062 | DONE dir | na 16 16 | 006dfb | (2 bytes)   |         .byte 0b, { NC }             
4774:062 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
4774:063 | DONE dir | na 16 16 | 006dfd | (6 bytes)   |         .word nt_cold, xt_wordsnsizes, 006dc9 
4774:063 | DONE dir | na 16 16 |        |             |                 ef 6d 86 6d c9 6d        --  . m . m . m
4774:064 | DONE dir | na 16 16 | 006e03 | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
4774:064 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
4774:064 | DONE dir | na 16 16 |        |             |                 7a 65 73                 --  z e s
4774:065 | DONE wsp | na 16 16 |        |             |
4774:066 | DONE lbl | na 16 16 | 006e0e |             | nt_words                             
4774:067 | DONE dir | na 16 16 | 006e0e | (2 bytes)   |         .byte 5, { NC }              
4774:067 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:068 | DONE dir | na 16 16 | 006e10 | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 006dc9 
4774:068 | DONE dir | na 16 16 |        |             |                 fb 6d 8d 6d c9 6d        --  . m . m . m
4774:069 | DONE dir | na 16 16 | 006e16 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
4774:069 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
4774:070 | DONE wsp | na 16 16 |        |             |
4774:071 | DONE lbl | na 16 16 | 006e1b |             | nt_dump                              
4774:072 | DONE dir | na 16 16 | 006e1b | (2 bytes)   |         .byte 4, { NC }              
4774:072 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:073 | DONE dir | na 16 16 | 006e1d | (6 bytes)   |         .word nt_words, xt_dump, 006756 
4774:073 | DONE dir | na 16 16 |        |             |                 0e 6e 30 67 56 67        --  . n 0 g V g
4774:074 | DONE dir | na 16 16 | 006e23 | (4 bytes)   |         .byte 64, 75, 6d, 70         
4774:074 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
4774:075 | DONE wsp | na 16 16 |        |             |
4774:076 | DONE lbl | na 16 16 | 006e27 |             | nt_wordsize                          
4774:077 | DONE dir | na 16 16 | 006e27 | (2 bytes)   |         .byte 8, { NC }              
4774:077 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4774:078 | DONE dir | na 16 16 | 006e29 | (6 bytes)   |         .word nt_dump, xt_wordsize, 006ddc 
4774:078 | DONE dir | na 16 16 |        |             |                 1b 6e ca 6d dc 6d        --  . n . m . m
4774:079 | DONE dir | na 16 16 | 006e2f | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
4774:079 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
4774:079 | DONE dir | na 16 16 |        |             |                                          -- 
4774:080 | DONE wsp | na 16 16 |        |             |
4774:081 | DONE lbl | na 16 16 | 006e37 |             | nt_pick                              
4774:082 | DONE dir | na 16 16 | 006e37 | (2 bytes)   |         .byte 4, { NC }              
4774:082 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:083 | DONE dir | na 16 16 | 006e39 | (6 bytes)   |         .word nt_wordsize, xt_pick, 006a7c 
4774:083 | DONE dir | na 16 16 |        |             |                 27 6e 6f 6a 7c 6a        --  ' n o j | j
4774:084 | DONE dir | na 16 16 | 006e3f | (4 bytes)   |         .byte 70, 69, 63, 6b         
4774:084 | DONE dir | na 16 16 |        |             |                 70 69 63 6b              --  p i c k
4774:085 | DONE wsp | na 16 16 |        |             |
4774:086 | DONE lbl | na 16 16 | 006e43 |             | nt_bell                              
4774:087 | DONE dir | na 16 16 | 006e43 | (2 bytes)   |         .byte 4, { NC }              
4774:087 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:088 | DONE dir | na 16 16 | 006e45 | (6 bytes)   |         .word nt_pick, xt_bell, 0064f9 
4774:088 | DONE dir | na 16 16 |        |             |                 37 6e f3 64 f9 64        --  7 n . d . d
4774:089 | DONE dir | na 16 16 | 006e4b | (4 bytes)   |         .byte 62, 65, 6c, 6c         
4774:089 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
4774:090 | DONE wsp | na 16 16 |        |             |
4774:091 | DONE lbl | na 16 16 | 006e4f |             | nt_chars                             
4774:092 | DONE dir | na 16 16 | 006e4f | (2 bytes)   |         .byte 5, { NC }              
4774:092 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:093 | DONE dir | na 16 16 | 006e51 | (6 bytes)   |         .word nt_bell, xt_chars, 006571 
4774:093 | DONE dir | na 16 16 |        |             |                 43 6e 70 65 71 65        --  C n p e q e
4774:094 | DONE dir | na 16 16 | 006e57 | (5 bytes)   |         .byte 63, 68, 61, 72, 73     
4774:094 | DONE dir | na 16 16 |        |             |                 63 68 61 72 73           --  c h a r s
4774:095 | DONE wsp | na 16 16 |        |             |
4774:096 | DONE lbl | na 16 16 | 006e5c |             | nt_cellplus                          
4774:097 | DONE dir | na 16 16 | 006e5c | (2 bytes)   |         .byte 5, { NC }              
4774:097 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:098 | DONE dir | na 16 16 | 006e5e | (6 bytes)   |         .word nt_chars, xt_cellplus, 006557 
4774:098 | DONE dir | na 16 16 |        |             |                 4f 6e 55 65 57 65        --  O n U e W e
4774:099 | DONE dir | na 16 16 | 006e64 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 2b     
4774:099 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 2b           --  c e l l +
4774:100 | DONE wsp | na 16 16 |        |             |
4774:101 | DONE lbl | na 16 16 | 006e69 |             | nt_charplus                          
4774:102 | DONE dir | na 16 16 | 006e69 | (2 bytes)   |         .byte 5, { NC }              uses code of 1+
4774:102 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:103 | DONE dir | na 16 16 | 006e6b | (6 bytes)   |         .word nt_cellplus, xt_one-plus, 006381 
4774:103 | DONE dir | na 16 16 |        |             |                 5c 6e 80 63 81 63        --  \ n . c . c
4774:104 | DONE dir | na 16 16 | 006e71 | (5 bytes)   |         .byte 63, 68, 61, 72, 2b     
4774:104 | DONE dir | na 16 16 |        |             |                 63 68 61 72 2b           --  c h a r +
4774:105 | DONE wsp | na 16 16 |        |             |
4774:106 | DONE lbl | na 16 16 | 006e76 |             | nt_decimal                           
4774:107 | DONE dir | na 16 16 | 006e76 | (2 bytes)   |         .byte 7, { NC }              
4774:107 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4774:108 | DONE dir | na 16 16 | 006e78 | (6 bytes)   |         .word nt_charplus, xt_decimal, 0066e4 
4774:108 | DONE dir | na 16 16 |        |             |                 69 6e df 66 e4 66        --  i n . f . f
4774:109 | DONE dir | na 16 16 | 006e7e | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
4774:109 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
4774:110 | DONE wsp | na 16 16 |        |             |
4774:111 | DONE lbl | na 16 16 | 006e85 |             | nt_hex                               
4774:112 | DONE dir | na 16 16 | 006e85 | (2 bytes)   |         .byte 3, { NC }              
4774:112 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:113 | DONE dir | na 16 16 | 006e87 | (6 bytes)   |         .word nt_decimal, xt_hex, 006881 
4774:113 | DONE dir | na 16 16 |        |             |                 76 6e 7c 68 81 68        --  v n | h . h
4774:114 | DONE dir | na 16 16 | 006e8d | (3 bytes)   |         .byte 68, 65, 78             
4774:114 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
4774:115 | DONE wsp | na 16 16 |        |             |
4774:116 | DONE lbl | na 16 16 | 006e90 |             | nt_unused                            
4774:117 | DONE dir | na 16 16 | 006e90 | (2 bytes)   |         .byte 6, { NC }              
4774:117 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:118 | DONE dir | na 16 16 | 006e92 | (6 bytes)   |         .word nt_hex, xt_unused, 006d78 
4774:118 | DONE dir | na 16 16 |        |             |                 85 6e 6d 6d 78 6d        --  . n m m x m
4774:119 | DONE dir | na 16 16 | 006e98 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
4774:119 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
4774:120 | DONE wsp | na 16 16 |        |             |
4774:121 | DONE lbl | na 16 16 | 006e9e |             | nt_page                              
4774:122 | DONE dir | na 16 16 | 006e9e | (2 bytes)   |         .byte 4, { NC }              
4774:122 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:123 | DONE dir | na 16 16 | 006ea0 | (6 bytes)   |         .word nt_unused, xt_page, 006a09 
4774:123 | DONE dir | na 16 16 |        |             |                 90 6e fd 69 09 6a        --  . n . i 	 j
4774:124 | DONE dir | na 16 16 | 006ea6 | (4 bytes)   |         .byte 70, 61, 67, 65         
4774:124 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
4774:125 | DONE wsp | na 16 16 |        |             |
4774:126 | DONE lbl | na 16 16 | 006eaa |             | nt_tworfetch                         
4774:127 | DONE dir | na 16 16 | 006eaa | (2 bytes)   |         .byte 3, 00                  not natively compiled
4774:127 | DONE dir | na 16 16 |        |             |                 03 00                    --  . .
4774:128 | DONE dir | na 16 16 | 006eac | (6 bytes)   |         .word nt_page, xt_tworfetch, 0063ba 
4774:128 | DONE dir | na 16 16 |        |             |                 9e 6e ad 63 ba 63        --  . n . c . c
4774:129 | DONE dir | na 16 16 | 006eb2 | (3 bytes)   |         .byte 32, 72, 40             
4774:129 | DONE dir | na 16 16 |        |             |                 32 72 40                 --  2 r @
4774:130 | DONE wsp | na 16 16 |        |             |
4774:131 | DONE lbl | na 16 16 | 006eb5 |             | nt_2variable                         
4774:132 | DONE dir | na 16 16 | 006eb5 | (2 bytes)   |         .byte 9, { NC }              
4774:132 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4774:133 | DONE dir | na 16 16 | 006eb7 | (6 bytes)   |         .word nt_tworfetch, xt_2variable, 0063de 
4774:133 | DONE dir | na 16 16 |        |             |                 aa 6e cc 63 de 63        --  . n . c . c
4774:134 | DONE dir | na 16 16 | 006ebd | (9 bytes)   |         .byte 32, 76, 61, 72, 69, 61, 62, 6c, 65 
4774:134 | DONE dir | na 16 16 |        |             |                 32 76 61 72 69 61 62 6c  --  2 v a r i a b l
4774:134 | DONE dir | na 16 16 |        |             |                 65                       --  e
4774:135 | DONE wsp | na 16 16 |        |             |
4774:136 | DONE lbl | na 16 16 | 006ec6 |             | nt_dabs                              
4774:137 | DONE dir | na 16 16 | 006ec6 | (2 bytes)   |         .byte 4, { NC }              
4774:137 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:138 | DONE dir | na 16 16 | 006ec8 | (6 bytes)   |         .word nt_2variable, xt_dabs, 0066de 
4774:138 | DONE dir | na 16 16 |        |             |                 b5 6e d8 66 de 66        --  . n . f . f
4774:139 | DONE dir | na 16 16 | 006ece | (4 bytes)   |         .byte 64, 61, 62, 73         
4774:139 | DONE dir | na 16 16 |        |             |                 64 61 62 73              --  d a b s
4774:140 | DONE wsp | na 16 16 |        |             |
4774:141 | DONE lbl | na 16 16 | 006ed2 |             | nt_dnegate                           
4774:142 | DONE dir | na 16 16 | 006ed2 | (2 bytes)   |         .byte 7, { NC }              
4774:142 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4774:143 | DONE dir | na 16 16 | 006ed4 | (6 bytes)   |         .word nt_dabs, xt_dnegate, 006707 
4774:143 | DONE dir | na 16 16 |        |             |                 c6 6e f4 66 07 67        --  . n . f . g
4774:144 | DONE dir | na 16 16 | 006eda | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
4774:144 | DONE dir | na 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
4774:145 | DONE wsp | na 16 16 |        |             |
4774:146 | DONE lbl | na 16 16 | 006ee1 |             | nt_dtos                              
4774:147 | DONE dir | na 16 16 | 006ee1 | (2 bytes)   |         .byte 3, { NC }              
4774:147 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:148 | DONE dir | na 16 16 | 006ee3 | (6 bytes)   |         .word nt_dnegate, xt_dtos, 0066d7 
4774:148 | DONE dir | na 16 16 |        |             |                 d2 6e d3 66 d7 66        --  . n . f . f
4774:149 | DONE dir | na 16 16 | 006ee9 | (3 bytes)   |         .byte 64, 3e, 73             
4774:149 | DONE dir | na 16 16 |        |             |                 64 3e 73                 --  d > s
4774:150 | DONE wsp | na 16 16 |        |             |
4774:151 | DONE lbl | na 16 16 | 006eec |             | nt_stod                              
4774:152 | DONE dir | na 16 16 | 006eec | (2 bytes)   |         .byte 3, { NC }              
4774:152 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:153 | DONE dir | na 16 16 | 006eee | (6 bytes)   |         .word nt_dtos, xt_stod, 006b5e 
4774:153 | DONE dir | na 16 16 |        |             |                 e1 6e 4f 6b 5e 6b        --  . n O k ^ k
4774:154 | DONE dir | na 16 16 | 006ef4 | (3 bytes)   |         .byte 73, 3e, 64             
4774:154 | DONE dir | na 16 16 |        |             |                 73 3e 64                 --  s > d
4774:155 | DONE wsp | na 16 16 |        |             |
4774:156 | DONE lbl | na 16 16 | 006ef7 |             | nt_dminus                            
4774:157 | DONE dir | na 16 16 | 006ef7 | (2 bytes)   |         .byte 2, { NC }              
4774:157 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:158 | DONE dir | na 16 16 | 006ef9 | (6 bytes)   |         .word nt_stod, xt_dminus, 0066d2 
4774:158 | DONE dir | na 16 16 |        |             |                 ec 6e be 66 d2 66        --  . n . f . f
4774:159 | DONE dir | na 16 16 | 006eff | (2 bytes)   |         .byte 64, 2d                 
4774:159 | DONE dir | na 16 16 |        |             |                 64 2d                    --  d -
4774:160 | DONE wsp | na 16 16 |        |             |
4774:161 | DONE lbl | na 16 16 | 006f01 |             | nt_dplus                             
4774:162 | DONE dir | na 16 16 | 006f01 | (2 bytes)   |         .byte 2, { NC }              
4774:162 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:163 | DONE dir | na 16 16 | 006f03 | (6 bytes)   |         .word nt_dminus, xt_dplus, 0066bd 
4774:163 | DONE dir | na 16 16 |        |             |                 f7 6e ac 66 bd 66        --  . n . f . f
4774:164 | DONE dir | na 16 16 | 006f09 | (2 bytes)   |         .byte 64, 2b                 
4774:164 | DONE dir | na 16 16 |        |             |                 64 2b                    --  d +
4774:165 | DONE wsp | na 16 16 |        |             |
4774:166 | DONE lbl | na 16 16 | 006f0b |             | nt_fmmod                             
4774:167 | DONE dir | na 16 16 | 006f0b | (2 bytes)   |         .byte 6, { NC }              
4774:167 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:168 | DONE dir | na 16 16 | 006f0d | (6 bytes)   |         .word nt_dplus, xt_fmmod, 006865 
4774:168 | DONE dir | na 16 16 |        |             |                 01 6f 12 68 65 68        --  . o . h e h
4774:169 | DONE dir | na 16 16 | 006f13 | (6 bytes)   |         .byte 66, 6d, 2f, 6d, 6f, 64 
4774:169 | DONE dir | na 16 16 |        |             |                 66 6d 2f 6d 6f 64        --  f m / m o d
4774:170 | DONE wsp | na 16 16 |        |             |
4774:171 | DONE lbl | na 16 16 | 006f19 |             | nt_smrem                             
4774:172 | DONE dir | na 16 16 | 006f19 | (2 bytes)   |         .byte 6, { NC }              
4774:172 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:173 | DONE dir | na 16 16 | 006f1b | (6 bytes)   |         .word nt_fmmod, xt_smrem, 006c27 
4774:173 | DONE dir | na 16 16 |        |             |                 0b 6f ce 6b 27 6c        --   o . k ' l
4774:174 | DONE dir | na 16 16 | 006f21 | (6 bytes)   |         .byte 73, 6d, 2f, 72, 65, 6d 
4774:174 | DONE dir | na 16 16 |        |             |                 73 6d 2f 72 65 6d        --  s m / r e m
4774:175 | DONE wsp | na 16 16 |        |             |
4774:176 | DONE lbl | na 16 16 | 006f27 |             | nt_udmod                             
4774:177 | DONE dir | na 16 16 | 006f27 | (2 bytes)   |         .byte 6, { NC }              
4774:177 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:178 | DONE dir | na 16 16 | 006f29 | (6 bytes)   |         .word nt_smrem, xt_udmod, 006cbd 
4774:178 | DONE dir | na 16 16 |        |             |                 19 6f a2 6c bd 6c        --  . o . l . l
4774:179 | DONE dir | na 16 16 | 006f2f | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
4774:179 | DONE dir | na 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
4774:180 | DONE wsp | na 16 16 |        |             |
4774:181 | DONE lbl | na 16 16 | 006f35 |             | nt_ummod                             
4774:182 | DONE dir | na 16 16 | 006f35 | (2 bytes)   |         .byte 6, { NC }              
4774:182 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:183 | DONE dir | na 16 16 | 006f37 | (6 bytes)   |         .word nt_udmod, xt_ummod, 006d6c 
4774:183 | DONE dir | na 16 16 |        |             |                 27 6f 1c 6d 6c 6d        --  ' o . m l m
4774:184 | DONE dir | na 16 16 | 006f3d | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
4774:184 | DONE dir | na 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
4774:185 | DONE wsp | na 16 16 |        |             |
4774:186 | DONE lbl | na 16 16 | 006f43 |             | nt_star                              
4774:187 | DONE dir | na 16 16 | 006f43 | (2 bytes)   |         .byte 1, { NC }              
4774:187 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:188 | DONE dir | na 16 16 | 006f45 | (6 bytes)   |         .word nt_ummod, xt_star, 006c57 
4774:188 | DONE dir | na 16 16 |        |             |                 35 6f 50 6c 57 6c        --  5 o P l W l
4774:189 | DONE dir | na 16 16 | 006f4b | (1 bytes)   |         .byte 2a                     
4774:189 | DONE dir | na 16 16 |        |             |                 2a                       --  *
4774:190 | DONE wsp | na 16 16 |        |             |
4774:191 | DONE lbl | na 16 16 | 006f4c |             | nt_mstar                             
4774:192 | DONE dir | na 16 16 | 006f4c | (2 bytes)   |         .byte 2, { NC }              
4774:192 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:193 | DONE dir | na 16 16 | 006f4e | (6 bytes)   |         .word nt_star, xt_mstar, 0068fa 
4774:193 | DONE dir | na 16 16 |        |             |                 43 6f db 68 fa 68        --  C o . h . h
4774:194 | DONE dir | na 16 16 | 006f54 | (2 bytes)   |         .byte 6d, 2a                 
4774:194 | DONE dir | na 16 16 |        |             |                 6d 2a                    --  m *
4774:195 | DONE wsp | na 16 16 |        |             |
4774:196 | DONE lbl | na 16 16 | 006f56 |             | nt_umstar                            
4774:197 | DONE dir | na 16 16 | 006f56 | (2 bytes)   |         .byte 3, { NC }              
4774:197 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:198 | DONE dir | na 16 16 | 006f58 | (6 bytes)   |         .word nt_mstar, xt_umstar, 006d1b 
4774:198 | DONE dir | na 16 16 |        |             |                 4c 6f bd 6c 1b 6d        --  L o . l . m
4774:199 | DONE dir | na 16 16 | 006f5e | (3 bytes)   |         .byte 75, 6d, 2a             
4774:199 | DONE dir | na 16 16 |        |             |                 75 6d 2a                 --  u m *
4774:200 | DONE wsp | na 16 16 |        |             |
4774:201 | DONE lbl | na 16 16 | 006f61 |             | nt_cmoveup                           
4774:202 | DONE dir | na 16 16 | 006f61 | (2 bytes)   |         .byte 6, { NC }              
4774:202 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:203 | DONE dir | na 16 16 | 006f63 | (6 bytes)   |         .word nt_umstar, xt_cmoveup, 0065ad 
4774:203 | DONE dir | na 16 16 |        |             |                 56 6f 95 65 ad 65        --  V o . e . e
4774:204 | DONE dir | na 16 16 | 006f69 | (6 bytes)   |         .byte 63, 6d, 6f, 76, 65, 3e 
4774:204 | DONE dir | na 16 16 |        |             |                 63 6d 6f 76 65 3e        --  c m o v e >
4774:205 | DONE wsp | na 16 16 |        |             |
4774:206 | DONE lbl | na 16 16 | 006f6f |             | nt_cmove                             
4774:207 | DONE dir | na 16 16 | 006f6f | (2 bytes)   |         .byte 5, { NC }              
4774:207 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:208 | DONE dir | na 16 16 | 006f71 | (6 bytes)   |         .word nt_cmoveup, xt_cmove, 006594 
4774:208 | DONE dir | na 16 16 |        |             |                 61 6f 72 65 94 65        --  a o r e . e
4774:209 | DONE dir | na 16 16 | 006f77 | (5 bytes)   |         .byte 63, 6d, 6f, 76, 65     
4774:209 | DONE dir | na 16 16 |        |             |                 63 6d 6f 76 65           --  c m o v e
4774:210 | DONE wsp | na 16 16 |        |             |
4774:211 | DONE lbl | na 16 16 | 006f7c |             | nt_count                             
4774:212 | DONE dir | na 16 16 | 006f7c | (2 bytes)   |         .byte 5, { NC }              
4774:212 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:213 | DONE dir | na 16 16 | 006f7e | (6 bytes)   |         .word nt_cmove, xt_count, 0065f5 
4774:213 | DONE dir | na 16 16 |        |             |                 6f 6f e7 65 f5 65        --  o o . e . e
4774:214 | DONE dir | na 16 16 | 006f84 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
4774:214 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
4774:215 | DONE wsp | na 16 16 |        |             |
4774:216 | DONE lbl | na 16 16 | 006f89 |             | nt_abortq                            
4774:217 | DONE dir | na 16 16 | 006f89 | (2 bytes)   |         .byte 6, { CO + IM }         
4774:217 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4774:218 | DONE dir | na 16 16 | 006f8b | (6 bytes)   |         .word nt_count, xt_abortq, 006417 
4774:218 | DONE dir | na 16 16 |        |             |                 7c 6f fb 63 17 64        --  | o . c . d
4774:219 | DONE dir | na 16 16 | 006f91 | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
4774:219 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
4774:220 | DONE wsp | na 16 16 |        |             |
4774:221 | DONE lbl | na 16 16 | 006f97 |             | nt_abort                             
4774:222 | DONE dir | na 16 16 | 006f97 | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
4774:222 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
4774:223 | DONE dir | na 16 16 | 006f99 | (6 bytes)   |         .word nt_abortq, xt_abort, 0060e2 
4774:223 | DONE dir | na 16 16 |        |             |                 89 6f 9b 60 e2 60        --  . o . ` . `
4774:224 | DONE dir | na 16 16 | 006f9f | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
4774:224 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
4774:225 | DONE wsp | na 16 16 |        |             |
4774:226 | DONE lbl | na 16 16 | 006fa4 |             | nt_parse                             
4774:227 | DONE dir | na 16 16 | 006fa4 | (2 bytes)   |         .byte 5, 00                  
4774:227 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
4774:228 | DONE dir | na 16 16 | 006fa6 | (6 bytes)   |         .word nt_abort, xt_parse, 006a6e 
4774:228 | DONE dir | na 16 16 |        |             |                 97 6f 3c 6a 6e 6a        --  . o < j n j
4774:229 | DONE dir | na 16 16 | 006fac | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
4774:229 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
4774:230 | DONE wsp | na 16 16 |        |             |
4774:231 | DONE lbl | na 16 16 | 006fb1 |             | nt_quit                              
4774:232 | DONE dir | na 16 16 | 006fb1 | (2 bytes)   |         .byte 4, 00                  
4774:232 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4774:233 | DONE dir | na 16 16 | 006fb3 | (6 bytes)   |         .word nt_parse, xt_quit, 0060e2 
4774:233 | DONE dir | na 16 16 |        |             |                 a4 6f a3 60 e2 60        --  . o . ` . `
4774:234 | DONE dir | na 16 16 | 006fb9 | (4 bytes)   |         .byte 71, 75, 69, 74         
4774:234 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
4774:235 | DONE wsp | na 16 16 |        |             |
4774:236 | DONE lbl | na 16 16 | 006fbd |             | nt_question                          
4774:237 | DONE dir | na 16 16 | 006fbd | (2 bytes)   |         .byte 1, { NC }              
4774:237 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:238 | DONE dir | na 16 16 | 006fbf | (6 bytes)   |         .word nt_quit, xt_question, 0062ad 
4774:238 | DONE dir | na 16 16 |        |             |                 b1 6f a7 62 ad 62        --  . o . b . b
4774:239 | DONE dir | na 16 16 | 006fc5 | (1 bytes)   |         .byte 3f                     
4774:239 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
4774:240 | DONE wsp | na 16 16 |        |             |
4774:241 | DONE lbl | na 16 16 | 006fc6 |             | nt_name-int                          
4774:242 | DONE dir | na 16 16 | 006fc6 | (2 bytes)   |         .byte 8, { NC }              
4774:242 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4774:243 | DONE dir | na 16 16 | 006fc8 | (6 bytes)   |         .word nt_question, xt_name-int, 00693a 
4774:243 | DONE dir | na 16 16 |        |             |                 bd 6f 32 69 3a 69        --  . o 2 i : i
4774:244 | DONE dir | na 16 16 | 006fce | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
4774:244 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
4774:244 | DONE dir | na 16 16 |        |             |                                          -- 
4774:245 | DONE wsp | na 16 16 |        |             |
4774:246 | DONE lbl | na 16 16 | 006fd6 |             | nt_cr                                
4774:247 | DONE dir | na 16 16 | 006fd6 | (2 bytes)   |         .byte 2, { NC }              
4774:247 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:248 | DONE dir | na 16 16 | 006fd8 | (6 bytes)   |         .word nt_name-int, xt_cr, 0065fc 
4774:248 | DONE dir | na 16 16 |        |             |                 c6 6f f6 65 fc 65        --  . o . e . e
4774:249 | DONE dir | na 16 16 | 006fde | (2 bytes)   |         .byte 63, 72                 
4774:249 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
4774:250 | DONE wsp | na 16 16 |        |             |
4774:251 | DONE lbl | na 16 16 | 006fe0 |             | nt_fill                              
4774:252 | DONE dir | na 16 16 | 006fe0 | (2 bytes)   |         .byte 4, { NC }              
4774:252 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:253 | DONE dir | na 16 16 | 006fe2 | (6 bytes)   |         .word nt_cr, xt_fill, 00677d 
4774:253 | DONE dir | na 16 16 |        |             |                 d6 6f 63 67 7d 67        --  . o c g } g
4774:254 | DONE dir | na 16 16 | 006fe8 | (4 bytes)   |         .byte 66, 69, 6c, 6c         
4774:254 | DONE dir | na 16 16 |        |             |                 66 69 6c 6c              --  f i l l
4774:255 | DONE wsp | na 16 16 |        |             |
4774:256 | DONE lbl | na 16 16 | 006fec |             | nt_erase                             
4774:257 | DONE dir | na 16 16 | 006fec | (2 bytes)   |         .byte 5, { NC }              
4774:257 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:258 | DONE dir | na 16 16 | 006fee | (6 bytes)   |         .word nt_fill, xt_erase, 00677d 
4774:258 | DONE dir | na 16 16 |        |             |                 e0 6f 5c 67 7d 67        --  . o \ g } g
4774:259 | DONE dir | na 16 16 | 006ff4 | (5 bytes)   |         .byte 65, 72, 61, 73, 65     
4774:259 | DONE dir | na 16 16 |        |             |                 65 72 61 73 65           --  e r a s e
4774:260 | DONE wsp | na 16 16 |        |             |
4774:261 | DONE lbl | na 16 16 | 006ff9 |             | nt_numbermore                        
4774:262 | DONE dir | na 16 16 | 006ff9 | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
4774:262 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:263 | DONE dir | na 16 16 | 006ffb | (6 bytes)   |         .word nt_erase, xt_numbermore, 00629d 
4774:263 | DONE dir | na 16 16 |        |             |                 ec 6f 8f 62 9d 62        --  . o . b . b
4774:264 | DONE dir | na 16 16 | 007001 | (2 bytes)   |         .byte 23, 3e                 
4774:264 | DONE dir | na 16 16 |        |             |                 23 3e                    --  # >
4774:265 | DONE wsp | na 16 16 |        |             |
4774:266 | DONE lbl | na 16 16 | 007003 |             | nt_hold                              
4774:267 | DONE dir | na 16 16 | 007003 | (2 bytes)   |         .byte 4, { NC }              
4774:267 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:268 | DONE dir | na 16 16 | 007005 | (6 bytes)   |         .word nt_numbermore, xt_hold, 00688f 
4774:268 | DONE dir | na 16 16 |        |             |                 f9 6f 82 68 8f 68        --  . o . h . h
4774:269 | DONE dir | na 16 16 | 00700b | (4 bytes)   |         .byte 68, 6f, 6c, 64         
4774:269 | DONE dir | na 16 16 |        |             |                 68 6f 6c 64              --  h o l d
4774:270 | DONE wsp | na 16 16 |        |             |
4774:271 | DONE lbl | na 16 16 | 00700f |             | nt_hashs                             
4774:272 | DONE dir | na 16 16 | 00700f | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
4774:272 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:273 | DONE dir | na 16 16 | 007011 | (6 bytes)   |         .word nt_hold, xt_hashs, 0062a6 
4774:273 | DONE dir | na 16 16 |        |             |                 03 70 9e 62 a6 62        --  . p . b . b
4774:274 | DONE dir | na 16 16 | 007017 | (2 bytes)   |         .byte 23, 73                 
4774:274 | DONE dir | na 16 16 |        |             |                 23 73                    --  # s
4774:275 | DONE wsp | na 16 16 |        |             |
4774:276 | DONE lbl | na 16 16 | 007019 |             | nt_sign                              
4774:277 | DONE dir | na 16 16 | 007019 | (2 bytes)   |         .byte 4, { NC }              
4774:277 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:278 | DONE dir | na 16 16 | 00701b | (6 bytes)   |         .word nt_hashs, xt_sign, 006b6c 
4774:278 | DONE dir | na 16 16 |        |             |                 0f 70 5f 6b 6c 6b        --  . p _ k l k
4774:279 | DONE dir | na 16 16 | 007021 | (4 bytes)   |         .byte 73, 69, 67, 6e         
4774:279 | DONE dir | na 16 16 |        |             |                 73 69 67 6e              --  s i g n
4774:280 | DONE wsp | na 16 16 |        |             |
4774:281 | DONE lbl | na 16 16 | 007025 |             | nt_hash                              
4774:282 | DONE dir | na 16 16 | 007025 | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
4774:282 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:283 | DONE dir | na 16 16 | 007027 | (6 bytes)   |         .word nt_sign, xt_hash, 00628e 
4774:283 | DONE dir | na 16 16 |        |             |                 19 70 74 62 8e 62        --  . p t b . b
4774:284 | DONE dir | na 16 16 | 00702d | (1 bytes)   |         .byte 23                     
4774:284 | DONE dir | na 16 16 |        |             |                 23                       --  #
4774:285 | DONE wsp | na 16 16 |        |             |
4774:286 | DONE lbl | na 16 16 | 00702e |             | nt_lessnumber                        
4774:287 | DONE dir | na 16 16 | 00702e | (2 bytes)   |         .byte 2, { NC }              
4774:287 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:288 | DONE dir | na 16 16 | 007030 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 00610c 
4774:288 | DONE dir | na 16 16 |        |             |                 25 70 03 61 0c 61        --  % p . a  a
4774:289 | DONE dir | na 16 16 | 007036 | (2 bytes)   |         .byte 3c, 23                 
4774:289 | DONE dir | na 16 16 |        |             |                 3c 23                    --  < #
4774:290 | DONE wsp | na 16 16 |        |             |
4774:291 | DONE lbl | na 16 16 | 007038 |             | nt_bl                                
4774:292 | DONE dir | na 16 16 | 007038 | (2 bytes)   |         .byte 2, { NC }              
4774:292 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:293 | DONE dir | na 16 16 | 00703a | (6 bytes)   |         .word nt_lessnumber, xt_bl, 006508 
4774:293 | DONE dir | na 16 16 |        |             |                 2e 70 01 65 08 65        --  . p . e . e
4774:294 | DONE dir | na 16 16 | 007040 | (2 bytes)   |         .byte 62, 6c                 
4774:294 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
4774:295 | DONE wsp | na 16 16 |        |             |
4774:296 | DONE lbl | na 16 16 | 007042 |             | nt_spaces                            
4774:297 | DONE dir | na 16 16 | 007042 | (2 bytes)   |         .byte 6, { NC }              
4774:297 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:298 | DONE dir | na 16 16 | 007044 | (6 bytes)   |         .word nt_bl, xt_spaces, 006c4f 
4774:298 | DONE dir | na 16 16 |        |             |                 38 70 43 6c 4f 6c        --  8 p C l O l
4774:299 | DONE dir | na 16 16 | 00704a | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
4774:299 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
4774:300 | DONE wsp | na 16 16 |        |             |
4774:301 | DONE lbl | na 16 16 | 007050 |             | nt_space                             
4774:302 | DONE dir | na 16 16 | 007050 | (2 bytes)   |         .byte 5, { NC }              
4774:302 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:303 | DONE dir | na 16 16 | 007052 | (6 bytes)   |         .word nt_spaces, xt_space, 006c42 
4774:303 | DONE dir | na 16 16 |        |             |                 42 70 3c 6c 42 6c        --  B p < l B l
4774:304 | DONE dir | na 16 16 | 007058 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
4774:304 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
4774:305 | DONE wsp | na 16 16 |        |             |
4774:306 | DONE lbl | na 16 16 | 00705d |             | nt_dots                              
4774:307 | DONE dir | na 16 16 | 00705d | (2 bytes)   |         .byte 2, { NC }              
4774:307 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:308 | DONE dir | na 16 16 | 00705f | (6 bytes)   |         .word nt_space, xt_dots, 00622c 
4774:308 | DONE dir | na 16 16 |        |             |                 50 70 e5 61 2c 62        --  P p . a , b
4774:309 | DONE dir | na 16 16 | 007065 | (2 bytes)   |         .byte 2e, 73                 
4774:309 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
4774:310 | DONE wsp | na 16 16 |        |             |
4774:311 | DONE lbl | na 16 16 | 007067 |             | nt_type                              
4774:312 | DONE dir | na 16 16 | 007067 | (2 bytes)   |         .byte 4, 0                   
4774:312 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4774:313 | DONE dir | na 16 16 | 007069 | (6 bytes)   |         .word nt_dots, xt_type, 006ca1 
4774:313 | DONE dir | na 16 16 |        |             |                 5d 70 81 6c a1 6c        --  ] p . l . l
4774:314 | DONE dir | na 16 16 | 00706f | (4 bytes)   |         .byte 74, 79, 70, 65         
4774:314 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
4774:315 | DONE wsp | na 16 16 |        |             |
4774:316 | DONE lbl | na 16 16 | 007073 |             | nt_dot                               
4774:317 | DONE dir | na 16 16 | 007073 | (2 bytes)   |         .byte 1, { NC }              
4774:317 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:318 | DONE dir | na 16 16 | 007075 | (6 bytes)   |         .word nt_type, xt_dot, 0061c2 
4774:318 | DONE dir | na 16 16 |        |             |                 67 70 a4 61 c2 61        --  g p . a . a
4774:319 | DONE dir | na 16 16 | 00707b | (1 bytes)   |         .byte 2e                     
4774:319 | DONE dir | na 16 16 |        |             |                 2e                       --  .
4774:320 | DONE wsp | na 16 16 |        |             |
4774:321 | DONE lbl | na 16 16 | 00707c |             | nt_pad                               
4774:322 | DONE dir | na 16 16 | 00707c | (2 bytes)   |         .byte 3, { NC }              
4774:322 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:323 | DONE dir | na 16 16 | 00707e | (6 bytes)   |         .word nt_dot, xt_pad, 0069fc 
4774:323 | DONE dir | na 16 16 |        |             |                 73 70 f1 69 fc 69        --  s p . i . i
4774:324 | DONE dir | na 16 16 | 007084 | (3 bytes)   |         .byte 70, 61, 64             
4774:324 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
4774:325 | DONE wsp | na 16 16 |        |             |
4774:326 | DONE lbl | na 16 16 | 007087 |             | nt_base                              
4774:327 | DONE dir | na 16 16 | 007087 | (2 bytes)   |         .byte 4, { NC }              
4774:327 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:328 | DONE dir | na 16 16 | 007089 | (6 bytes)   |         .word nt_pad, xt_base, 0064f2 
4774:328 | DONE dir | na 16 16 |        |             |                 7c 70 eb 64 f2 64        --  | p . d . d
4774:329 | DONE dir | na 16 16 | 00708f | (4 bytes)   |         .byte 62, 61, 73, 65         
4774:329 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
4774:330 | DONE wsp | na 16 16 |        |             |
4774:331 | DONE lbl | na 16 16 | 007093 |             | nt_evaluate                          
4774:332 | DONE dir | na 16 16 | 007093 | (2 bytes)   |         .byte 8, { NC }              
4774:332 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4774:333 | DONE dir | na 16 16 | 007095 | (6 bytes)   |         .word nt_base, xt_evaluate, 0067ac 
4774:333 | DONE dir | na 16 16 |        |             |                 87 70 7e 67 ac 67        --  . p ~ g . g
4774:334 | DONE dir | na 16 16 | 00709b | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
4774:334 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
4774:334 | DONE dir | na 16 16 |        |             |                                          -- 
4774:335 | DONE wsp | na 16 16 |        |             |
4774:336 | DONE lbl | na 16 16 | 0070a3 |             | nt_cells                             
4774:337 | DONE dir | na 16 16 | 0070a3 | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
4774:337 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:338 | DONE dir | na 16 16 | 0070a5 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 00638d 
4774:338 | DONE dir | na 16 16 |        |             |                 93 70 8a 63 8d 63        --  . p . c . c
4774:339 | DONE dir | na 16 16 | 0070ab | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
4774:339 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
4774:340 | DONE wsp | na 16 16 |        |             |
4774:341 | DONE lbl | na 16 16 | 0070b0 |             | nt_dotquote                          
4774:342 | DONE dir | na 16 16 | 0070b0 | (2 bytes)   |         .byte 2, { CO + NC + IM }    
4774:342 | DONE dir | na 16 16 |        |             |                 02 07                    --  . .
4774:343 | DONE dir | na 16 16 | 0070b2 | (6 bytes)   |         .word nt_cells, xt_dotquote, 0061e5 
4774:343 | DONE dir | na 16 16 |        |             |                 a3 70 d1 61 e5 61        --  . p . a . a
4774:344 | DONE dir | na 16 16 | 0070b8 | (2 bytes)   |         .byte 2e, &34                
4774:344 | DONE dir | na 16 16 |        |             |                 2e 22                    --  . "
4774:345 | DONE wsp | na 16 16 |        |             |
4774:346 | DONE lbl | na 16 16 | 0070ba |             | nt_squote                            
4774:347 | DONE dir | na 16 16 | 0070ba | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
4774:347 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
4774:348 | DONE dir | na 16 16 | 0070bc | (6 bytes)   |         .word nt_dotquote, xt_squote, 006b4e 
4774:348 | DONE dir | na 16 16 |        |             |                 b0 70 19 6b 4e 6b        --  . p . k N k
4774:349 | DONE dir | na 16 16 | 0070c2 | (2 bytes)   |         .byte 73, &34                
4774:349 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
4774:350 | DONE wsp | na 16 16 |        |             |
4774:351 | DONE lbl | na 16 16 | 0070c4 |             | nt_sliteral                          
4774:352 | DONE dir | na 16 16 | 0070c4 | (2 bytes)   |         .byte 8, { IM + CO }         
4774:352 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
4774:353 | DONE dir | na 16 16 | 0070c6 | (6 bytes)   |         .word nt_squote, xt_sliteral, 006bb7 
4774:353 | DONE dir | na 16 16 |        |             |                 ba 70 6d 6b b7 6b        --  . p m k . k
4774:354 | DONE dir | na 16 16 | 0070cc | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
4774:354 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
4774:354 | DONE dir | na 16 16 |        |             |                                          -- 
4774:355 | DONE wsp | na 16 16 |        |             |
4774:356 | DONE lbl | na 16 16 | 0070d4 |             | nt_brackettick                       
4774:357 | DONE dir | na 16 16 | 0070d4 | (2 bytes)   |         .byte 3, { IM + CO }         
4774:357 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
4774:358 | DONE dir | na 16 16 | 0070d6 | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 0062cd 
4774:358 | DONE dir | na 16 16 |        |             |                 c4 70 c7 62 cd 62        --  . p . b . b
4774:359 | DONE dir | na 16 16 | 0070dc | (3 bytes)   |         .byte 5b, 27, 5d             
4774:359 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
4774:360 | DONE wsp | na 16 16 |        |             |
4774:361 | DONE lbl | na 16 16 | 0070df |             | nt_bracketchar                       
4774:362 | DONE dir | na 16 16 | 0070df | (2 bytes)   |         .byte 6, { IM + CO }         
4774:362 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4774:363 | DONE dir | na 16 16 | 0070e1 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 0062dc 
4774:363 | DONE dir | na 16 16 |        |             |                 d4 70 d6 62 dc 62        --  . p . b . b
4774:364 | DONE dir | na 16 16 | 0070e7 | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
4774:364 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
4774:365 | DONE wsp | na 16 16 |        |             |
4774:366 | DONE lbl | na 16 16 | 0070ed |             | nt_literal                           
4774:367 | DONE dir | na 16 16 | 0070ed | (2 bytes)   |         .byte 7, { IM + CO }         
4774:367 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
4774:368 | DONE dir | na 16 16 | 0070ef | (6 bytes)   |         .word nt_bracketchar, xt_literal, 0068b9 
4774:368 | DONE dir | na 16 16 |        |             |                 df 70 a8 68 b9 68        --  . p . h . h
4774:369 | DONE dir | na 16 16 | 0070f5 | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
4774:369 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
4774:370 | DONE wsp | na 16 16 |        |             |
4774:371 | DONE lbl | na 16 16 | 0070fc |             | nt_native-compile                    
4774:372 | DONE dir | na 16 16 | 0070fc | (2 bytes)   |         .byte 0e, { NC }             
4774:372 | DONE dir | na 16 16 |        |             |                 0e 01                    --  . .
4774:373 | DONE dir | na 16 16 | 0070fe | (6 bytes)   |         .word nt_literal, xt_native-compile, 006954 
4774:373 | DONE dir | na 16 16 |        |             |                 ed 70 4c 69 54 69        --  . p L i T i
4774:374 | DONE dir | na 16 16 | 007104 | (14 bytes)  |         .byte 6e, 61, 74, 69, 76, 65, 2d, 63, 6f, 6d, 70, 69, 6c, 65 
4774:374 | DONE dir | na 16 16 |        |             |                 6e 61 74 69 76 65 2d 63  --  n a t i v e - c
4774:374 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65        --  o m p i l e
4774:375 | DONE wsp | na 16 16 |        |             |
4774:376 | DONE lbl | na 16 16 | 007112 |             | nt_compile-only                      
4774:377 | DONE dir | na 16 16 | 007112 | (2 bytes)   |         .byte 0c, { NC }             
4774:377 | DONE dir | na 16 16 |        |             |                 0c 01                    --   .
4774:378 | DONE dir | na 16 16 | 007114 | (6 bytes)   |         .word nt_native-compile, xt_compile-only, 0065b6 
4774:378 | DONE dir | na 16 16 |        |             |                 fc 70 ae 65 b6 65        --  . p . e . e
4774:379 | DONE dir | na 16 16 | 00711a | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
4774:379 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
4774:379 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
4774:380 | DONE wsp | na 16 16 |        |             |
4774:381 | DONE lbl | na 16 16 | 007126 |             | nt_immediate                         
4774:382 | DONE dir | na 16 16 | 007126 | (2 bytes)   |         .byte 9, { NC }              
4774:382 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4774:383 | DONE dir | na 16 16 | 007128 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 00686e 
4774:383 | DONE dir | na 16 16 |        |             |                 12 71 66 68 6e 68        --  . q f h n h
4774:384 | DONE dir | na 16 16 | 00712e | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
4774:384 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
4774:384 | DONE dir | na 16 16 |        |             |                 65                       --  e
4774:385 | DONE wsp | na 16 16 |        |             |
4774:386 | DONE lbl | na 16 16 | 007137 |             | nt_postpone                          
4774:387 | DONE dir | na 16 16 | 007137 | (2 bytes)   |         .byte 8, { IM + CO }         
4774:387 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
4774:388 | DONE dir | na 16 16 | 007139 | (6 bytes)   |         .word nt_immediate, xt_postpone, 006ac2 
4774:388 | DONE dir | na 16 16 |        |             |                 26 71 8d 6a c2 6a        --  & q . j . j
4774:389 | DONE dir | na 16 16 | 00713f | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
4774:389 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4774:389 | DONE dir | na 16 16 |        |             |                                          -- 
4774:390 | DONE wsp | na 16 16 |        |             |
4774:391 | DONE lbl | na 16 16 | 007147 |             | nt_rightbracket                      
4774:392 | DONE dir | na 16 16 | 007147 | (2 bytes)   |         .byte 1, { NC }              
4774:392 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:393 | DONE dir | na 16 16 | 007149 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 0062d5 
4774:393 | DONE dir | na 16 16 |        |             |                 37 71 d0 62 d5 62        --  7 q . b . b
4774:394 | DONE dir | na 16 16 | 00714f | (1 bytes)   |         .byte 5d                     
4774:394 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
4774:395 | DONE wsp | na 16 16 |        |             |
4774:396 | DONE lbl | na 16 16 | 007150 |             | nt_leftbracket                       
4774:397 | DONE dir | na 16 16 | 007150 | (2 bytes)   |         .byte 1, { IM + CO }         
4774:397 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
4774:398 | DONE dir | na 16 16 | 007152 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 0062cf 
4774:398 | DONE dir | na 16 16 |        |             |                 47 71 cd 62 cf 62        --  G q . b . b
4774:399 | DONE dir | na 16 16 | 007158 | (1 bytes)   |         .byte 5b                     
4774:399 | DONE dir | na 16 16 |        |             |                 5b                       --  [
4774:400 | DONE wsp | na 16 16 |        |             |
4774:401 | DONE lbl | na 16 16 | 007159 |             | nt_latestnt                          
4774:402 | DONE dir | na 16 16 | 007159 | (2 bytes)   |         .byte 8, { NC }              
4774:402 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4774:403 | DONE dir | na 16 16 | 00715b | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 006897 
4774:403 | DONE dir | na 16 16 |        |             |                 50 71 90 68 97 68        --  P q . h . h
4774:404 | DONE dir | na 16 16 | 007161 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
4774:404 | DONE dir | na 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
4774:404 | DONE dir | na 16 16 |        |             |                                          -- 
4774:405 | DONE wsp | na 16 16 |        |             |
4774:406 | DONE lbl | na 16 16 | 007169 |             | nt_latestxt                          
4774:407 | DONE dir | na 16 16 | 007169 | (2 bytes)   |         .byte 8, { NC }              
4774:407 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4774:408 | DONE dir | na 16 16 | 00716b | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 0068a7 
4774:408 | DONE dir | na 16 16 |        |             |                 59 71 98 68 a7 68        --  Y q . h . h
4774:409 | DONE dir | na 16 16 | 007171 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
4774:409 | DONE dir | na 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
4774:409 | DONE dir | na 16 16 |        |             |                                          -- 
4774:410 | DONE wsp | na 16 16 |        |             |
4774:411 | DONE lbl | na 16 16 | 007179 |             | nt_dtrailing                         
4774:412 | DONE dir | na 16 16 | 007179 | (2 bytes)   |         .byte 9, { NC }              
4774:412 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4774:413 | DONE dir | na 16 16 | 00717b | (6 bytes)   |         .word nt_latestxt, xt_dtrailing, 006314 
4774:413 | DONE dir | na 16 16 |        |             |                 69 71 fe 62 14 63        --  i q . b . c
4774:414 | DONE dir | na 16 16 | 007181 | (9 bytes)   |         .byte 2d, 74, 72, 61, 69, 6c, 69, 6e, 67 
4774:414 | DONE dir | na 16 16 |        |             |                 2d 74 72 61 69 6c 69 6e  --  - t r a i l i n
4774:414 | DONE dir | na 16 16 |        |             |                 67                       --  g
4774:415 | DONE wsp | na 16 16 |        |             |
4774:416 | DONE lbl | na 16 16 | 00718a |             | nt_slashstring                       
4774:417 | DONE dir | na 16 16 | 00718a | (2 bytes)   |         .byte 7, { NC }              
4774:417 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4774:418 | DONE dir | na 16 16 | 00718c | (6 bytes)   |         .word nt_dtrailing, xt_slashstring, 0061a3 
4774:418 | DONE dir | na 16 16 |        |             |                 79 71 92 61 a3 61        --  y q . a . a
4774:419 | DONE dir | na 16 16 | 007192 | (7 bytes)   |         .byte 2f, 73, 74, 72, 69, 6e, 67 
4774:419 | DONE dir | na 16 16 |        |             |                 2f 73 74 72 69 6e 67     --  / s t r i n g
4774:420 | DONE wsp | na 16 16 |        |             |
4774:421 | DONE lbl | na 16 16 | 007199 |             | nt_zbranch                           
4774:422 | DONE dir | na 16 16 | 007199 | (2 bytes)   |         .byte 7, { IM + CO }         
4774:422 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
4774:423 | DONE dir | na 16 16 | 00719b | (6 bytes)   |         .word nt_slashstring, xt_zbranch, 00635e 
4774:423 | DONE dir | na 16 16 |        |             |                 8a 71 58 63 5e 63        --  . q X c ^ c
4774:424 | DONE dir | na 16 16 | 0071a1 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
4774:424 | DONE dir | na 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
4774:425 | DONE wsp | na 16 16 |        |             |
4774:426 | DONE lbl | na 16 16 | 0071a8 |             | nt_branch                            
4774:427 | DONE dir | na 16 16 | 0071a8 | (2 bytes)   |         .byte 6, { IM + CO }         
4774:427 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4774:428 | DONE dir | na 16 16 | 0071aa | (6 bytes)   |         .word nt_zbranch, xt_branch, 006519 
4774:428 | DONE dir | na 16 16 |        |             |                 99 71 13 65 19 65        --  . q . e . e
4774:429 | DONE dir | na 16 16 | 0071b0 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
4774:429 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
4774:430 | DONE wsp | na 16 16 |        |             |
4774:431 | DONE lbl | na 16 16 | 0071b6 |             | nt_again                             
4774:432 | DONE dir | na 16 16 | 0071b6 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
4774:432 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
4774:433 | DONE dir | na 16 16 | 0071b8 | (6 bytes)   |         .word nt_branch, xt_again, 0064ba 
4774:433 | DONE dir | na 16 16 |        |             |                 a8 71 a5 64 ba 64        --  . q . d . d
4774:434 | DONE dir | na 16 16 | 0071be | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
4774:434 | DONE dir | na 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
4774:435 | DONE wsp | na 16 16 |        |             |
4774:436 | DONE lbl | na 16 16 | 0071c3 |             | nt_begin                             
4774:437 | DONE dir | na 16 16 | 0071c3 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
4774:437 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
4774:438 | DONE dir | na 16 16 | 0071c5 | (6 bytes)   |         .word nt_again, xt_begin, 006500 
4774:438 | DONE dir | na 16 16 |        |             |                 b6 71 fa 64 00 65        --  . q . d . e
4774:439 | DONE dir | na 16 16 | 0071cb | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
4774:439 | DONE dir | na 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
4774:440 | DONE wsp | na 16 16 |        |             |
4774:441 | DONE lbl | na 16 16 | 0071d0 |             | nt_compilecomma                      
4774:442 | DONE dir | na 16 16 | 0071d0 | (2 bytes)   |         .byte 08, { CO }             
4774:442 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
4774:443 | DONE dir | na 16 16 | 0071d2 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 0065cc 
4774:443 | DONE dir | na 16 16 |        |             |                 c3 71 b7 65 cc 65        --  . q . e . e
4774:444 | DONE dir | na 16 16 | 0071d8 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
4774:444 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
4774:444 | DONE dir | na 16 16 |        |             |                                          -- 
4774:445 | DONE wsp | na 16 16 |        |             |
4774:446 | DONE lbl | na 16 16 | 0071e0 |             | nt_semicolon                         
4774:447 | DONE dir | na 16 16 | 0071e0 | (2 bytes)   |         .byte 1, { CO + IM }         
4774:447 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
4774:448 | DONE dir | na 16 16 | 0071e2 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 006273 
4774:448 | DONE dir | na 16 16 |        |             |                 d0 71 5b 62 73 62        --  . q [ b s b
4774:449 | DONE dir | na 16 16 | 0071e8 | (1 bytes)   |         .byte 3b                     
4774:449 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
4774:450 | DONE wsp | na 16 16 |        |             |
4774:451 | DONE lbl | na 16 16 | 0071e9 |             | nt_colon                             
4774:452 | DONE dir | na 16 16 | 0071e9 | (2 bytes)   |         .byte 1, { NC }              
4774:452 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:453 | DONE dir | na 16 16 | 0071eb | (6 bytes)   |         .word nt_semicolon, xt_colon, 00625a 
4774:453 | DONE dir | na 16 16 |        |             |                 e0 71 39 62 5a 62        --  . q 9 b Z b
4774:454 | DONE dir | na 16 16 | 0071f1 | (1 bytes)   |         .byte 3a                     
4774:454 | DONE dir | na 16 16 |        |             |                 3a                       --  :
4774:455 | DONE wsp | na 16 16 |        |             |
4774:456 | DONE lbl | na 16 16 | 0071f2 |             | nt_allot                             
4774:457 | DONE dir | na 16 16 | 0071f2 | (2 bytes)   |         .byte 5, { NC }              
4774:457 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:458 | DONE dir | na 16 16 | 0071f4 | (6 bytes)   |         .word nt_colon, xt_allot, 0064e3 
4774:458 | DONE dir | na 16 16 |        |             |                 e9 71 bb 64 e3 64        --  . q . d . d
4774:459 | DONE dir | na 16 16 | 0071fa | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
4774:459 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
4774:460 | DONE wsp | na 16 16 |        |             |
4774:461 | DONE lbl | na 16 16 | 0071ff |             | nt_tobody                            
4774:462 | DONE dir | na 16 16 | 0071ff | (2 bytes)   |         .byte 5, { NC }              
4774:462 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:463 | DONE dir | na 16 16 | 007201 | (6 bytes)   |         .word nt_allot, xt_tobody, 006124 
4774:463 | DONE dir | na 16 16 |        |             |                 f2 71 21 61 24 61        --  . q ! a $ a
4774:464 | DONE dir | na 16 16 | 007207 | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
4774:464 | DONE dir | na 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
4774:465 | DONE wsp | na 16 16 |        |             |
4774:466 | DONE lbl | na 16 16 | 00720c |             | nt_does                              
4774:467 | DONE dir | na 16 16 | 00720c | (2 bytes)   |         .byte 5, { IM + CO }         
4774:467 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
4774:468 | DONE dir | na 16 16 | 00720e | (6 bytes)   |         .word nt_tobody, xt_does, 006714 
4774:468 | DONE dir | na 16 16 |        |             |                 ff 71 08 67 14 67        --  . q . g . g
4774:469 | DONE dir | na 16 16 | 007214 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
4774:469 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
4774:470 | DONE wsp | na 16 16 |        |             |
4774:471 | DONE lbl | na 16 16 | 007219 |             | nt_create                            
4774:472 | DONE dir | na 16 16 | 007219 | (2 bytes)   |         .byte 6, { NC }              
4774:472 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:473 | DONE dir | na 16 16 | 00721b | (6 bytes)   |         .word nt_does, xt_create, 00666f 
4774:473 | DONE dir | na 16 16 |        |             |                 0c 72 fd 65 6f 66        --   r . e o f
4774:474 | DONE dir | na 16 16 | 007221 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
4774:474 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
4774:475 | DONE wsp | na 16 16 |        |             |
4774:476 | DONE lbl | na 16 16 | 007227 |             | nt_name-string                       
4774:477 | DONE dir | na 16 16 | 007227 | (2 bytes)   |         .byte 0b, { NC }             
4774:477 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
4774:478 | DONE dir | na 16 16 | 007229 | (6 bytes)   |         .word nt_create, xt_name-string, 00694b 
4774:478 | DONE dir | na 16 16 |        |             |                 19 72 3b 69 4b 69        --  . r ; i K i
4774:479 | DONE dir | na 16 16 | 00722f | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
4774:479 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
4774:479 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
4774:480 | DONE wsp | na 16 16 |        |             |
4774:481 | DONE lbl | na 16 16 | 00723a |             | nt_2dup                              
4774:482 | DONE dir | na 16 16 | 00723a | (2 bytes)   |         .byte 4, { NC }              
4774:482 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:483 | DONE dir | na 16 16 | 00723c | (6 bytes)   |         .word nt_name-string, xt_2dup, 00639f 
4774:483 | DONE dir | na 16 16 |        |             |                 27 72 95 63 9f 63        --  ' r . c . c
4774:484 | DONE dir | na 16 16 | 007242 | (4 bytes)   |         .byte 32, 64, 75, 70         
4774:484 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
4774:485 | DONE wsp | na 16 16 |        |             |
4774:486 | DONE lbl | na 16 16 | 007246 |             | nt_abs                               
4774:487 | DONE dir | na 16 16 | 007246 | (2 bytes)   |         .byte 3, { NC }              
4774:487 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:488 | DONE dir | na 16 16 | 007248 | (6 bytes)   |         .word nt_2dup, xt_abs, 006420 
4774:488 | DONE dir | na 16 16 |        |             |                 3a 72 18 64 20 64        --  : r . d   d
4774:489 | DONE dir | na 16 16 | 00724e | (3 bytes)   |         .byte 61, 62, 73             
4774:489 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
4774:490 | DONE wsp | na 16 16 |        |             |
4774:491 | DONE lbl | na 16 16 | 007251 |             | nt_state                             
4774:492 | DONE dir | na 16 16 | 007251 | (2 bytes)   |         .byte 5, { NC }              
4774:492 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:493 | DONE dir | na 16 16 | 007253 | (6 bytes)   |         .word nt_abs, xt_state, 006c5f 
4774:493 | DONE dir | na 16 16 |        |             |                 46 72 58 6c 5f 6c        --  F r X l _ l
4774:494 | DONE dir | na 16 16 | 007259 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
4774:494 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
4774:495 | DONE wsp | na 16 16 |        |             |
4774:496 | DONE lbl | na 16 16 | 00725e |             | nt_to-in                             
4774:497 | DONE dir | na 16 16 | 00725e | (2 bytes)   |         .byte 3, { NC }              
4774:497 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:498 | DONE dir | na 16 16 | 007260 | (6 bytes)   |         .word nt_state, xt_to-in, 00612c 
4774:498 | DONE dir | na 16 16 |        |             |                 51 72 25 61 2c 61        --  Q r % a , a
4774:499 | DONE dir | na 16 16 | 007266 | (3 bytes)   |         .byte 3e, 69, 6e             
4774:499 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
4774:500 | DONE wsp | na 16 16 |        |             |
4774:501 | DONE lbl | na 16 16 | 007269 |             | nt_source                            
4774:502 | DONE dir | na 16 16 | 007269 | (2 bytes)   |         .byte 6, { NC }              
4774:502 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:503 | DONE dir | na 16 16 | 00726b | (6 bytes)   |         .word nt_to-in, xt_source, 006c34 
4774:503 | DONE dir | na 16 16 |        |             |                 5e 72 28 6c 34 6c        --  ^ r ( l 4 l
4774:504 | DONE dir | na 16 16 | 007271 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
4774:504 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
4774:505 | DONE wsp | na 16 16 |        |             |
4774:506 | DONE lbl | na 16 16 | 007277 |             | nt_depth                             
4774:507 | DONE dir | na 16 16 | 007277 | (2 bytes)   |         .byte 5, { NC }              
4774:507 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:508 | DONE dir | na 16 16 | 007279 | (6 bytes)   |         .word nt_source, xt_depth, 0066f3 
4774:508 | DONE dir | na 16 16 |        |             |                 69 72 e5 66 f3 66        --  i r . f . f
4774:509 | DONE dir | na 16 16 | 00727f | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
4774:509 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
4774:510 | DONE wsp | na 16 16 |        |             |
4774:511 | DONE lbl | na 16 16 | 007284 |             | nt_to                                
4774:512 | DONE dir | na 16 16 | 007284 | (2 bytes)   |         .byte 2, { NC }              
4774:512 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:513 | DONE dir | na 16 16 | 007286 | (6 bytes)   |         .word nt_depth, xt_to, 006c6f 
4774:513 | DONE dir | na 16 16 |        |             |                 77 72 66 6c 6f 6c        --  w r f l o l
4774:514 | DONE dir | na 16 16 | 00728c | (2 bytes)   |         .byte 74, 6f                 
4774:514 | DONE dir | na 16 16 |        |             |                 74 6f                    --  t o
4774:515 | DONE wsp | na 16 16 |        |             |
4774:516 | DONE lbl | na 16 16 | 00728e |             | nt_value                             
4774:517 | DONE dir | na 16 16 | 00728e | (2 bytes)   |         .byte 5, { NC }              uses routines of CONSTANT
4774:517 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:518 | DONE dir | na 16 16 | 007290 | (6 bytes)   |         .word nt_to, xt_constant, 0065e6 
4774:518 | DONE dir | na 16 16 |        |             |                 84 72 cd 65 e6 65        --  . r . e . e
4774:519 | DONE dir | na 16 16 | 007296 | (5 bytes)   |         .byte 76, 61, 6c, 75, 65     
4774:519 | DONE dir | na 16 16 |        |             |                 76 61 6c 75 65           --  v a l u e
4774:520 | DONE wsp | na 16 16 |        |             |
4774:521 | DONE lbl | na 16 16 | 00729b |             | nt_constant                          
4774:522 | DONE dir | na 16 16 | 00729b | (2 bytes)   |         .byte 8, { NC }              
4774:522 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4774:523 | DONE dir | na 16 16 | 00729d | (6 bytes)   |         .word nt_value, xt_constant, 0065e6 
4774:523 | DONE dir | na 16 16 |        |             |                 8e 72 cd 65 e6 65        --  . r . e . e
4774:524 | DONE dir | na 16 16 | 0072a3 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
4774:524 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
4774:524 | DONE dir | na 16 16 |        |             |                                          -- 
4774:525 | DONE wsp | na 16 16 |        |             |
4774:526 | DONE lbl | na 16 16 | 0072ab |             | nt_variable                          
4774:527 | DONE dir | na 16 16 | 0072ab | (2 bytes)   |         .byte 8, { NC }              
4774:527 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4774:528 | DONE dir | na 16 16 | 0072ad | (6 bytes)   |         .word nt_constant, xt_variable, 006d85 
4774:528 | DONE dir | na 16 16 |        |             |                 9b 72 79 6d 85 6d        --  . r y m . m
4774:529 | DONE dir | na 16 16 | 0072b3 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
4774:529 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
4774:529 | DONE dir | na 16 16 |        |             |                                          -- 
4774:530 | DONE wsp | na 16 16 |        |             |
4774:531 | DONE lbl | na 16 16 | 0072bb |             | nt_tick                              
4774:532 | DONE dir | na 16 16 | 0072bb | (2 bytes)   |         .byte 1, { NC }              
4774:532 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:533 | DONE dir | na 16 16 | 0072bd | (6 bytes)   |         .word nt_variable, xt_tick, 0063fa 
4774:533 | DONE dir | na 16 16 |        |             |                 ab 72 df 63 fa 63        --  . r . c . c
4774:534 | DONE dir | na 16 16 | 0072c3 | (1 bytes)   |         .byte 27                     hex for "'"
4774:534 | DONE dir | na 16 16 |        |             |                 27                       --  '
4774:535 | DONE wsp | na 16 16 |        |             |
4774:536 | DONE lbl | na 16 16 | 0072c4 |             | nt_move                              
4774:537 | DONE dir | na 16 16 | 0072c4 | (2 bytes)   |         .byte 4, { NC }              
4774:537 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:538 | DONE dir | na 16 16 | 0072c6 | (6 bytes)   |         .word nt_tick, xt_move, 006932 
4774:538 | DONE dir | na 16 16 |        |             |                 bb 72 21 69 32 69        --  . r ! i 2 i
4774:539 | DONE dir | na 16 16 | 0072cc | (4 bytes)   |         .byte 6d, 6f, 76, 65         
4774:539 | DONE dir | na 16 16 |        |             |                 6d 6f 76 65              --  m o v e
4774:540 | DONE wsp | na 16 16 |        |             |
4774:541 | DONE lbl | na 16 16 | 0072d0 |             | nt_min                               
4774:542 | DONE dir | na 16 16 | 0072d0 | (2 bytes)   |         .byte 3, { NC }              
4774:542 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:543 | DONE dir | na 16 16 | 0072d2 | (6 bytes)   |         .word nt_move, xt_min, 006920 
4774:543 | DONE dir | na 16 16 |        |             |                 c4 72 0e 69 20 69        --  . r . i   i
4774:544 | DONE dir | na 16 16 | 0072d8 | (3 bytes)   |         .byte 6d, 69, 6e             
4774:544 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
4774:545 | DONE wsp | na 16 16 |        |             |
4774:546 | DONE lbl | na 16 16 | 0072db |             | nt_max                               
4774:547 | DONE dir | na 16 16 | 0072db | (2 bytes)   |         .byte 3, { NC }              
4774:547 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:548 | DONE dir | na 16 16 | 0072dd | (6 bytes)   |         .word nt_min, xt_max, 00690d 
4774:548 | DONE dir | na 16 16 |        |             |                 d0 72 fb 68 0d 69        --  . r . h  i
4774:549 | DONE dir | na 16 16 | 0072e3 | (3 bytes)   |         .byte 6d, 61, 78             
4774:549 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
4774:550 | DONE wsp | na 16 16 |        |             |
4774:551 | DONE lbl | na 16 16 | 0072e6 |             | nt_negate                            
4774:552 | DONE dir | na 16 16 | 0072e6 | (2 bytes)   |         .byte 6, { NC }              
4774:552 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:553 | DONE dir | na 16 16 | 0072e8 | (6 bytes)   |         .word nt_max, xt_negate, 00695b 
4774:553 | DONE dir | na 16 16 |        |             |                 db 72 55 69 5b 69        --  . r U i [ i
4774:554 | DONE dir | na 16 16 | 0072ee | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
4774:554 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
4774:555 | DONE wsp | na 16 16 |        |             |
4774:556 | DONE lbl | na 16 16 | 0072f4 |             | nt_invert                            
4774:557 | DONE dir | na 16 16 | 0072f4 | (2 bytes)   |         .byte 6, { NC }              
4774:557 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:558 | DONE dir | na 16 16 | 0072f6 | (6 bytes)   |         .word nt_negate, xt_invert, 006874 
4774:558 | DONE dir | na 16 16 |        |             |                 e6 72 6f 68 74 68        --  . r o h t h
4774:559 | DONE dir | na 16 16 | 0072fc | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
4774:559 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
4774:560 | DONE wsp | na 16 16 |        |             |
4774:561 | DONE lbl | na 16 16 | 007302 |             | nt_char                              
4774:562 | DONE dir | na 16 16 | 007302 | (2 bytes)   |         .byte 4, { NC }              
4774:562 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:563 | DONE dir | na 16 16 | 007304 | (6 bytes)   |         .word nt_invert, xt_char, 00656f 
4774:563 | DONE dir | na 16 16 |        |             |                 f4 72 58 65 6f 65        --  . r X e o e
4774:564 | DONE dir | na 16 16 | 00730a | (4 bytes)   |         .byte 63, 68, 61, 72         
4774:564 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
4774:565 | DONE wsp | na 16 16 |        |             |
4774:566 | DONE lbl | na 16 16 | 00730e |             | nt_rshift                            
4774:567 | DONE dir | na 16 16 | 00730e | (2 bytes)   |         .byte 6, { NC }              
4774:567 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:568 | DONE dir | na 16 16 | 007310 | (6 bytes)   |         .word nt_char, xt_rshift, 006b18 
4774:568 | DONE dir | na 16 16 |        |             |                 02 73 05 6b 18 6b        --  . s . k . k
4774:569 | DONE dir | na 16 16 | 007316 | (6 bytes)   |         .byte 72, 73, 68, 69, 66, 74 
4774:569 | DONE dir | na 16 16 |        |             |                 72 73 68 69 66 74        --  r s h i f t
4774:570 | DONE wsp | na 16 16 |        |             |
4774:571 | DONE lbl | na 16 16 | 00731c |             | nt_xor                               
4774:572 | DONE dir | na 16 16 | 00731c | (2 bytes)   |         .byte 3, { NC }              
4774:572 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:573 | DONE dir | na 16 16 | 00731e | (6 bytes)   |         .word nt_rshift, xt_xor, 006de3 
4774:573 | DONE dir | na 16 16 |        |             |                 0e 73 dd 6d e3 6d        --  . s . m . m
4774:574 | DONE dir | na 16 16 | 007324 | (3 bytes)   |         .byte 78, 6f, 72             
4774:574 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
4774:575 | DONE wsp | na 16 16 |        |             |
4774:576 | DONE lbl | na 16 16 | 007327 |             | nt_or                                
4774:577 | DONE dir | na 16 16 | 007327 | (2 bytes)   |         .byte 2, { NC }              
4774:577 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:578 | DONE dir | na 16 16 | 007329 | (6 bytes)   |         .word nt_xor, xt_or, 0069e9  
4774:578 | DONE dir | na 16 16 |        |             |                 1c 73 e3 69 e9 69        --  . s . i . i
4774:579 | DONE dir | na 16 16 | 00732f | (2 bytes)   |         .byte 6f, 72                 
4774:579 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
4774:580 | DONE wsp | na 16 16 |        |             |
4774:581 | DONE lbl | na 16 16 | 007331 |             | nt_and                               
4774:582 | DONE dir | na 16 16 | 007331 | (2 bytes)   |         .byte 3, { NC }              
4774:582 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:583 | DONE dir | na 16 16 | 007333 | (6 bytes)   |         .word nt_or, xt_and, 0064ea  
4774:583 | DONE dir | na 16 16 |        |             |                 27 73 e4 64 ea 64        --  ' s . d . d
4774:584 | DONE dir | na 16 16 | 007339 | (3 bytes)   |         .byte 61, 6e, 64             
4774:584 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
4774:585 | DONE wsp | na 16 16 |        |             |
4774:586 | DONE lbl | na 16 16 | 00733c |             | nt_lshift                            
4774:587 | DONE dir | na 16 16 | 00733c | (2 bytes)   |         .byte 6, { NC }              
4774:587 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:588 | DONE dir | na 16 16 | 00733e | (6 bytes)   |         .word nt_and, xt_lshift, 0068da 
4774:588 | DONE dir | na 16 16 |        |             |                 31 73 c7 68 da 68        --  1 s . h . h
4774:589 | DONE dir | na 16 16 | 007344 | (6 bytes)   |         .byte 6c, 73, 68, 69, 66, 74 
4774:589 | DONE dir | na 16 16 |        |             |                 6c 73 68 69 66 74        --  l s h i f t
4774:590 | DONE wsp | na 16 16 |        |             |
4774:591 | DONE lbl | na 16 16 | 00734a |             | nt_plusstore                         
4774:592 | DONE dir | na 16 16 | 00734a | (2 bytes)   |         .byte 2, { NC }              
4774:592 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:593 | DONE dir | na 16 16 | 00734c | (6 bytes)   |         .word nt_lshift, xt_plusstore, 006a8c 
4774:593 | DONE dir | na 16 16 |        |             |                 3c 73 7d 6a 8c 6a        --  < s } j . j
4774:594 | DONE dir | na 16 16 | 007352 | (2 bytes)   |         .byte 2b, 21                 
4774:594 | DONE dir | na 16 16 |        |             |                 2b 21                    --  + !
4774:595 | DONE wsp | na 16 16 |        |             |
4774:596 | DONE lbl | na 16 16 | 007354 |             | nt_c-comma                           
4774:597 | DONE dir | na 16 16 | 007354 | (2 bytes)   |         .byte 2, { NC }              
4774:597 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:598 | DONE dir | na 16 16 | 007356 | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 006538 
4774:598 | DONE dir | na 16 16 |        |             |                 4a 73 2b 65 38 65        --  J s + e 8 e
4774:599 | DONE dir | na 16 16 | 00735c | (2 bytes)   |         .byte 63, 2c                 
4774:599 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
4774:600 | DONE wsp | na 16 16 |        |             |
4774:601 | DONE lbl | na 16 16 | 00735e |             | nt_c-fetch                           
4774:602 | DONE dir | na 16 16 | 00735e | (2 bytes)   |         .byte 2, { NC }              
4774:602 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:603 | DONE dir | na 16 16 | 007360 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 006544 
4774:603 | DONE dir | na 16 16 |        |             |                 54 73 39 65 44 65        --  T s 9 e D e
4774:604 | DONE dir | na 16 16 | 007366 | (2 bytes)   |         .byte 63, 40                 
4774:604 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
4774:605 | DONE wsp | na 16 16 |        |             |
4774:606 | DONE lbl | na 16 16 | 007368 |             | nt_c-store                           
4774:607 | DONE dir | na 16 16 | 007368 | (2 bytes)   |         .byte 2, { NC }              
4774:607 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:608 | DONE dir | na 16 16 | 00736a | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 006554 
4774:608 | DONE dir | na 16 16 |        |             |                 5e 73 45 65 54 65        --  ^ s E e T e
4774:609 | DONE dir | na 16 16 | 007370 | (2 bytes)   |         .byte 63, 21                 
4774:609 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
4774:610 | DONE wsp | na 16 16 |        |             |
4774:611 | DONE lbl | na 16 16 | 007372 |             | nt_two-star                          
4774:612 | DONE dir | na 16 16 | 007372 | (2 bytes)   |         .byte 2, { NC }              
4774:612 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:613 | DONE dir | na 16 16 | 007374 | (6 bytes)   |         .word nt_c-store, xt_two-star, 00638d 
4774:613 | DONE dir | na 16 16 |        |             |                 68 73 8a 63 8d 63        --  h s . c . c
4774:614 | DONE dir | na 16 16 | 00737a | (2 bytes)   |         .byte 32, 2a                 
4774:614 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
4774:615 | DONE wsp | na 16 16 |        |             |
4774:616 | DONE lbl | na 16 16 | 00737c |             | nt_minus                             
4774:617 | DONE dir | na 16 16 | 00737c | (2 bytes)   |         .byte 1, { NC }              
4774:617 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:618 | DONE dir | na 16 16 | 00737e | (6 bytes)   |         .word nt_two-star, xt_minus, 0062f4 
4774:618 | DONE dir | na 16 16 |        |             |                 72 73 ea 62 f4 62        --  r s . b . b
4774:619 | DONE dir | na 16 16 | 007384 | (1 bytes)   |         .byte 2d                     
4774:619 | DONE dir | na 16 16 |        |             |                 2d                       --  -
4774:620 | DONE wsp | na 16 16 |        |             |
4774:621 | DONE lbl | na 16 16 | 007385 |             | nt_plus                              
4774:622 | DONE dir | na 16 16 | 007385 | (2 bytes)   |         .byte 1, { NC }              
4774:622 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:623 | DONE dir | na 16 16 | 007387 | (6 bytes)   |         .word nt_minus, xt_plus, 0062e9 
4774:623 | DONE dir | na 16 16 |        |             |                 7c 73 e2 62 e9 62        --  | s . b . b
4774:624 | DONE dir | na 16 16 | 00738d | (1 bytes)   |         .byte 2b                     
4774:624 | DONE dir | na 16 16 |        |             |                 2b                       --  +
4774:625 | DONE wsp | na 16 16 |        |             |
4774:626 | DONE lbl | na 16 16 | 00738e |             | nt_one-minus                         
4774:627 | DONE dir | na 16 16 | 00738e | (2 bytes)   |         .byte 2, { NC }              
4774:627 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:628 | DONE dir | na 16 16 | 007390 | (6 bytes)   |         .word nt_plus, xt_one-minus, 00637f 
4774:628 | DONE dir | na 16 16 |        |             |                 85 73 7e 63 7f 63        --  . s ~ c . c
4774:629 | DONE dir | na 16 16 | 007396 | (2 bytes)   |         .byte 31, 2d                 
4774:629 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
4774:630 | DONE wsp | na 16 16 |        |             |
4774:631 | DONE lbl | na 16 16 | 007398 |             | nt_one-plus                          
4774:632 | DONE dir | na 16 16 | 007398 | (2 bytes)   |         .byte 2, { NC }              
4774:632 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:633 | DONE dir | na 16 16 | 00739a | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 006381 
4774:633 | DONE dir | na 16 16 |        |             |                 8e 73 80 63 81 63        --  . s . c . c
4774:634 | DONE dir | na 16 16 | 0073a0 | (2 bytes)   |         .byte 31, 2b                 
4774:634 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
4774:635 | DONE wsp | na 16 16 |        |             |
4774:636 | DONE lbl | na 16 16 | 0073a2 |             | nt_zero-notequal                     
4774:637 | DONE dir | na 16 16 | 0073a2 | (2 bytes)   |         .byte 3, { NC }              
4774:637 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:638 | DONE dir | na 16 16 | 0073a4 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 00634c 
4774:638 | DONE dir | na 16 16 |        |             |                 98 73 41 63 4c 63        --  . s A c L c
4774:639 | DONE dir | na 16 16 | 0073aa | (3 bytes)   |         .byte 30, 3c, 3e             
4774:639 | DONE dir | na 16 16 |        |             |                 30 3c 3e                 --  0 < >
4774:640 | DONE wsp | na 16 16 |        |             |
4774:641 | DONE lbl | na 16 16 | 0073ad |             | nt_zero-more                         
4774:642 | DONE dir | na 16 16 | 0073ad | (2 bytes)   |         .byte 2, { NC }              
4774:642 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:643 | DONE dir | na 16 16 | 0073af | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 006357 
4774:643 | DONE dir | na 16 16 |        |             |                 a2 73 4d 63 57 63        --  . s M c W c
4774:644 | DONE dir | na 16 16 | 0073b5 | (2 bytes)   |         .byte 30, 3e                 
4774:644 | DONE dir | na 16 16 |        |             |                 30 3e                    --  0 >
4774:645 | DONE wsp | na 16 16 |        |             |
4774:646 | DONE lbl | na 16 16 | 0073b7 |             | nt_zero-less                         
4774:647 | DONE dir | na 16 16 | 0073b7 | (2 bytes)   |         .byte 2, { NC }              
4774:647 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:648 | DONE dir | na 16 16 | 0073b9 | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 006340 
4774:648 | DONE dir | na 16 16 |        |             |                 ad 73 35 63 40 63        --  . s 5 c @ c
4774:649 | DONE dir | na 16 16 | 0073bf | (2 bytes)   |         .byte 30, 3c                 
4774:649 | DONE dir | na 16 16 |        |             |                 30 3c                    --  0 <
4774:650 | DONE wsp | na 16 16 |        |             |
4774:651 | DONE lbl | na 16 16 | 0073c1 |             | nt_greater                           
4774:652 | DONE dir | na 16 16 | 0073c1 | (2 bytes)   |         .byte 1, { NC }              
4774:652 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:653 | DONE dir | na 16 16 | 0073c3 | (6 bytes)   |         .word nt_zero-less, xt_greater, 006120 
4774:653 | DONE dir | na 16 16 |        |             |                 b7 73 0d 61 20 61        --  . s  a   a
4774:654 | DONE dir | na 16 16 | 0073c9 | (1 bytes)   |         .byte 3e                     
4774:654 | DONE dir | na 16 16 |        |             |                 3e                       --  >
4774:655 | DONE wsp | na 16 16 |        |             |
4774:656 | DONE lbl | na 16 16 | 0073ca |             | nt_less                              
4774:657 | DONE dir | na 16 16 | 0073ca | (2 bytes)   |         .byte 1, { NC }              
4774:657 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:658 | DONE dir | na 16 16 | 0073cc | (6 bytes)   |         .word nt_greater, xt_less, 0060f6 
4774:658 | DONE dir | na 16 16 |        |             |                 c1 73 e3 60 f6 60        --  . s . ` . `
4774:659 | DONE dir | na 16 16 | 0073d2 | (1 bytes)   |         .byte 3c                     
4774:659 | DONE dir | na 16 16 |        |             |                 3c                       --  <
4774:660 | DONE wsp | na 16 16 |        |             |
4774:661 | DONE lbl | na 16 16 | 0073d3 |             | nt_zero-equal                        
4774:662 | DONE dir | na 16 16 | 0073d3 | (2 bytes)   |         .byte 2, { NC }              
4774:662 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:663 | DONE dir | na 16 16 | 0073d5 | (6 bytes)   |         .word nt_less, xt_zero-equal, 006334 
4774:663 | DONE dir | na 16 16 |        |             |                 ca 73 29 63 34 63        --  . s ) c 4 c
4774:664 | DONE dir | na 16 16 | 0073db | (2 bytes)   |         .byte 30, 3d                 
4774:664 | DONE dir | na 16 16 |        |             |                 30 3d                    --  0 =
4774:665 | DONE wsp | na 16 16 |        |             |
4774:666 | DONE lbl | na 16 16 | 0073dd |             | nt_not-equal                         
4774:667 | DONE dir | na 16 16 | 0073dd | (2 bytes)   |         .byte 2, { NC }              
4774:667 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4774:668 | DONE dir | na 16 16 | 0073df | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 006102 
4774:668 | DONE dir | na 16 16 |        |             |                 d3 73 f7 60 02 61        --  . s . ` . a
4774:669 | DONE dir | na 16 16 | 0073e5 | (2 bytes)   |         .byte 3c, 3e                 
4774:669 | DONE dir | na 16 16 |        |             |                 3c 3e                    --  < >
4774:670 | DONE wsp | na 16 16 |        |             |
4774:671 | DONE lbl | na 16 16 | 0073e7 |             | nt_equal                             
4774:672 | DONE dir | na 16 16 | 0073e7 | (2 bytes)   |         .byte 1, { NC }              
4774:672 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:673 | DONE dir | na 16 16 | 0073e9 | (6 bytes)   |         .word nt_not-equal, xt_equal, 006320 
4774:673 | DONE dir | na 16 16 |        |             |                 dd 73 15 63 20 63        --  . s . c   c
4774:674 | DONE dir | na 16 16 | 0073ef | (1 bytes)   |         .byte 3d                     
4774:674 | DONE dir | na 16 16 |        |             |                 3d                       --  =
4774:675 | DONE wsp | na 16 16 |        |             |
4774:676 | DONE lbl | na 16 16 | 0073f0 |             | nt_false                             
4774:677 | DONE dir | na 16 16 | 0073f0 | (2 bytes)   |         .byte 5, { NC }              
4774:677 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:678 | DONE dir | na 16 16 | 0073f2 | (6 bytes)   |         .word nt_equal, xt_zero, 006328 
4774:678 | DONE dir | na 16 16 |        |             |                 e7 73 21 63 28 63        --  . s ! c ( c
4774:679 | DONE dir | na 16 16 | 0073f8 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
4774:679 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
4774:680 | DONE wsp | na 16 16 |        |             |
4774:681 | DONE lbl | na 16 16 | 0073fd |             | nt_true                              
4774:682 | DONE dir | na 16 16 | 0073fd | (2 bytes)   |         .byte 4, { NC }              
4774:682 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:683 | DONE dir | na 16 16 | 0073ff | (6 bytes)   |         .word nt_false, xt_true, 006c77 
4774:683 | DONE dir | na 16 16 |        |             |                 f0 73 70 6c 77 6c        --  . s p l w l
4774:684 | DONE dir | na 16 16 | 007405 | (4 bytes)   |         .byte 74, 72, 75, 65         
4774:684 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
4774:685 | DONE wsp | na 16 16 |        |             |
4774:686 | DONE lbl | na 16 16 | 007409 |             | nt_tonumber                          
4774:687 | DONE dir | na 16 16 | 007409 | (2 bytes)   |         .byte 7, { NC }              see if actually NC
4774:687 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4774:688 | DONE dir | na 16 16 | 00740b | (6 bytes)   |         .word nt_true, xt_tonumber, 006189 
4774:688 | DONE dir | na 16 16 |        |             |                 fd 73 2d 61 89 61        --  . s - a . a
4774:689 | DONE dir | na 16 16 | 007411 | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
4774:689 | DONE dir | na 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
4774:690 | DONE wsp | na 16 16 |        |             |
4774:691 | DONE lbl | na 16 16 | 007418 |             | nt_number                            
4774:692 | DONE dir | na 16 16 | 007418 | (2 bytes)   |         .byte 6, { NC }              see if actually NC
4774:692 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:693 | DONE dir | na 16 16 | 00741a | (6 bytes)   |         .word nt_tonumber, xt_number, 0069e2 
4774:693 | DONE dir | na 16 16 |        |             |                 09 74 5f 69 e2 69        --  	 t _ i . i
4774:694 | DONE dir | na 16 16 | 007420 | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
4774:694 | DONE dir | na 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
4774:695 | DONE wsp | na 16 16 |        |             |
4774:696 | DONE lbl | na 16 16 | 007426 |             | nt_two                               
4774:697 | DONE dir | na 16 16 | 007426 | (2 bytes)   |         .byte 1, { NC }              
4774:697 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:698 | DONE dir | na 16 16 | 007428 | (6 bytes)   |         .word nt_number, xt_two, 006389 
4774:698 | DONE dir | na 16 16 |        |             |                 18 74 82 63 89 63        --  . t . c . c
4774:699 | DONE dir | na 16 16 | 00742e | (1 bytes)   |         .byte 32                     
4774:699 | DONE dir | na 16 16 |        |             |                 32                       --  2
4774:700 | DONE wsp | na 16 16 |        |             |
4774:701 | DONE lbl | na 16 16 | 00742f |             | nt_one                               
4774:702 | DONE dir | na 16 16 | 00742f | (2 bytes)   |         .byte 1, { NC }              
4774:702 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:703 | DONE dir | na 16 16 | 007431 | (6 bytes)   |         .word nt_two, xt_one, 00637d 
4774:703 | DONE dir | na 16 16 |        |             |                 26 74 76 63 7d 63        --  & t v c } c
4774:704 | DONE dir | na 16 16 | 007437 | (1 bytes)   |         .byte 31                     
4774:704 | DONE dir | na 16 16 |        |             |                 31                       --  1
4774:705 | DONE wsp | na 16 16 |        |             |
4774:706 | DONE lbl | na 16 16 | 007438 |             | nt_zero                              
4774:707 | DONE dir | na 16 16 | 007438 | (2 bytes)   |         .byte 1, { NC }              
4774:707 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:708 | DONE dir | na 16 16 | 00743a | (6 bytes)   |         .word nt_one, xt_zero, 006328 
4774:708 | DONE dir | na 16 16 |        |             |                 2f 74 21 63 28 63        --  / t ! c ( c
4774:709 | DONE dir | na 16 16 | 007440 | (1 bytes)   |         .byte 30                     
4774:709 | DONE dir | na 16 16 |        |             |                 30                       --  0
4774:710 | DONE wsp | na 16 16 |        |             |
4774:711 | DONE lbl | na 16 16 | 007441 |             | nt_find-name                         
4774:712 | DONE dir | na 16 16 | 007441 | (2 bytes)   |         .byte 9, 0                   
4774:712 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
4774:713 | DONE dir | na 16 16 | 007443 | (6 bytes)   |         .word nt_zero, xt_find-name, 006811 
4774:713 | DONE dir | na 16 16 |        |             |                 38 74 bb 67 11 68        --  8 t . g . h
4774:714 | DONE dir | na 16 16 | 007449 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
4774:714 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
4774:714 | DONE dir | na 16 16 |        |             |                 65                       --  e
4774:715 | DONE wsp | na 16 16 |        |             |
4774:716 | DONE lbl | na 16 16 | 007452 |             | nt_refill                            
4774:717 | DONE dir | na 16 16 | 007452 | (2 bytes)   |         .byte 6, 0                   TODO check flags
4774:717 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
4774:718 | DONE dir | na 16 16 | 007454 | (6 bytes)   |         .word nt_find-name, xt_refill, 006afb 
4774:718 | DONE dir | na 16 16 |        |             |                 41 74 d4 6a fb 6a        --  A t . j . j
4774:719 | DONE dir | na 16 16 | 00745a | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
4774:719 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
4774:720 | DONE wsp | na 16 16 |        |             |
4774:721 | DONE lbl | na 16 16 | 007460 |             | nt_parse-name                        
4774:722 | DONE dir | na 16 16 | 007460 | (2 bytes)   |         .byte &10, 0                 
4774:722 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
4774:723 | DONE dir | na 16 16 | 007462 | (6 bytes)   |         .word nt_refill, xt_parse-name, 006a6e 
4774:723 | DONE dir | na 16 16 |        |             |                 52 74 0a 6a 6e 6a        --  R t 
 j n j
4774:724 | DONE dir | na 16 16 | 007468 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
4774:724 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
4774:724 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
4774:725 | DONE wsp | na 16 16 |        |             |
4774:726 | DONE lbl | na 16 16 | 007472 |             | nt_source-id                         
4774:727 | DONE dir | na 16 16 | 007472 | (2 bytes)   |         .byte 9, { NC }              
4774:727 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4774:728 | DONE dir | na 16 16 | 007474 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 006c3b 
4774:728 | DONE dir | na 16 16 |        |             |                 60 74 35 6c 3b 6c        --  ` t 5 l ; l
4774:729 | DONE dir | na 16 16 | 00747a | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
4774:729 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
4774:729 | DONE dir | na 16 16 |        |             |                 64                       --  d
4774:730 | DONE wsp | na 16 16 |        |             |
4774:731 | DONE lbl | na 16 16 | 007483 |             | nt_comma                             
4774:732 | DONE dir | na 16 16 | 007483 | (2 bytes)   |         .byte 1, { NC }              
4774:732 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:733 | DONE dir | na 16 16 | 007485 | (6 bytes)   |         .word nt_source-id, xt_comma, 006238 
4774:733 | DONE dir | na 16 16 |        |             |                 72 74 2d 62 38 62        --  r t - b 8 b
4774:734 | DONE dir | na 16 16 | 00748b | (1 bytes)   |         .byte 2c                     
4774:734 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
4774:735 | DONE wsp | na 16 16 |        |             |
4774:736 | DONE lbl | na 16 16 | 00748c |             | nt_accept                            
4774:737 | DONE dir | na 16 16 | 00748c | (2 bytes)   |         .byte 6, 00                  TODO check flags
4774:737 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
4774:738 | DONE dir | na 16 16 | 00748e | (6 bytes)   |         .word nt_comma, xt_accept, 0064a4 
4774:738 | DONE dir | na 16 16 |        |             |                 83 74 21 64 a4 64        --  . t ! d . d
4774:739 | DONE dir | na 16 16 | 007494 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
4774:739 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
4774:740 | DONE wsp | na 16 16 |        |             |
4774:741 | DONE lbl | na 16 16 | 00749a |             | nt_backslash                         
4774:742 | DONE dir | na 16 16 | 00749a | (2 bytes)   |         .byte 1, { NC }              
4774:742 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:743 | DONE dir | na 16 16 | 00749c | (6 bytes)   |         .word nt_accept, xt_backslash, 0062e1 
4774:743 | DONE dir | na 16 16 |        |             |                 8c 74 dd 62 e1 62        --  . t . b . b
4774:744 | DONE dir | na 16 16 | 0074a2 | (1 bytes)   |         .byte 5c                     
4774:744 | DONE dir | na 16 16 |        |             |                 5c                       --  \
4774:745 | DONE wsp | na 16 16 |        |             |
4774:746 | DONE lbl | na 16 16 | 0074a3 |             | nt_qdup                              
4774:747 | DONE dir | na 16 16 | 0074a3 | (2 bytes)   |         .byte 4, { NC }              
4774:747 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:748 | DONE dir | na 16 16 | 0074a5 | (6 bytes)   |         .word nt_backslash, xt_qdup, 0062b5 
4774:748 | DONE dir | na 16 16 |        |             |                 9a 74 ae 62 b5 62        --  . t . b . b
4774:749 | DONE dir | na 16 16 | 0074ab | (4 bytes)   |         .byte 3f, 64, 75, 70         
4774:749 | DONE dir | na 16 16 |        |             |                 3f 64 75 70              --  ? d u p
4774:750 | DONE wsp | na 16 16 |        |             |
4774:751 | DONE lbl | na 16 16 | 0074af |             | nt_tuck                              
4774:752 | DONE dir | na 16 16 | 0074af | (2 bytes)   |         .byte 4, { NC }              
4774:752 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:753 | DONE dir | na 16 16 | 0074b1 | (6 bytes)   |         .word nt_qdup, xt_tuck, 006c80 
4774:753 | DONE dir | na 16 16 |        |             |                 a3 74 78 6c 80 6c        --  . t x l . l
4774:754 | DONE dir | na 16 16 | 0074b7 | (4 bytes)   |         .byte 74, 75, 63, 6b         
4774:754 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
4774:755 | DONE wsp | na 16 16 |        |             |
4774:756 | DONE lbl | na 16 16 | 0074bb |             | nt_nip                               
4774:757 | DONE dir | na 16 16 | 0074bb | (2 bytes)   |         .byte 3, { NC }              
4774:757 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:758 | DONE dir | na 16 16 | 0074bd | (6 bytes)   |         .word nt_tuck, xt_nip, 00695e 
4774:758 | DONE dir | na 16 16 |        |             |                 af 74 5c 69 5e 69        --  . t \ i ^ i
4774:759 | DONE dir | na 16 16 | 0074c3 | (3 bytes)   |         .byte 6e, 69, 70             
4774:759 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
4774:760 | DONE wsp | na 16 16 |        |             |
4774:761 | DONE lbl | na 16 16 | 0074c6 |             | nt_mrot                              
4774:762 | DONE dir | na 16 16 | 0074c6 | (2 bytes)   |         .byte 4, { NC }              
4774:762 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:763 | DONE dir | na 16 16 | 0074c8 | (6 bytes)   |         .word nt_nip, xt_mrot, 0062fd 
4774:763 | DONE dir | na 16 16 |        |             |                 bb 74 f5 62 fd 62        --  . t . b . b
4774:764 | DONE dir | na 16 16 | 0074ce | (4 bytes)   |         .byte 2d, 72, 6f, 74         
4774:764 | DONE dir | na 16 16 |        |             |                 2d 72 6f 74              --  - r o t
4774:765 | DONE wsp | na 16 16 |        |             |
4774:766 | DONE lbl | na 16 16 | 0074d2 |             | nt_rot                               
4774:767 | DONE dir | na 16 16 | 0074d2 | (2 bytes)   |         .byte 3, { NC }              
4774:767 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:768 | DONE dir | na 16 16 | 0074d4 | (6 bytes)   |         .word nt_mrot, xt_rot, 006b04 
4774:768 | DONE dir | na 16 16 |        |             |                 c6 74 fc 6a 04 6b        --  . t . j . k
4774:769 | DONE dir | na 16 16 | 0074da | (3 bytes)   |         .byte 72, 6f, 74             
4774:769 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
4774:770 | DONE wsp | na 16 16 |        |             |
4774:771 | DONE lbl | na 16 16 | 0074dd |             | nt_2over                             
4774:772 | DONE dir | na 16 16 | 0074dd | (2 bytes)   |         .byte 5, { NC }              
4774:772 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:773 | DONE dir | na 16 16 | 0074df | (6 bytes)   |         .word nt_rot, xt_2over, 0063ac 
4774:773 | DONE dir | na 16 16 |        |             |                 d2 74 a0 63 ac 63        --  . t . c . c
4774:774 | DONE dir | na 16 16 | 0074e5 | (5 bytes)   |         .byte 32, 6f, 76, 65, 72     
4774:774 | DONE dir | na 16 16 |        |             |                 32 6f 76 65 72           --  2 o v e r
4774:775 | DONE wsp | na 16 16 |        |             |
4774:776 | DONE lbl | na 16 16 | 0074ea |             | nt_2swap                             
4774:777 | DONE dir | na 16 16 | 0074ea | (2 bytes)   |         .byte 5, { NC }              
4774:777 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:778 | DONE dir | na 16 16 | 0074ec | (6 bytes)   |         .word nt_2over, xt_2swap, 0063cb 
4774:778 | DONE dir | na 16 16 |        |             |                 dd 74 bb 63 cb 63        --  . t . c . c
4774:779 | DONE dir | na 16 16 | 0074f2 | (5 bytes)   |         .byte 32, 73, 77, 61, 70     
4774:779 | DONE dir | na 16 16 |        |             |                 32 73 77 61 70           --  2 s w a p
4774:780 | DONE wsp | na 16 16 |        |             |
4774:781 | DONE lbl | na 16 16 | 0074f7 |             | nt_execute                           
4774:782 | DONE dir | na 16 16 | 0074f7 | (2 bytes)   |         .byte 7, { NC }              
4774:782 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4774:783 | DONE dir | na 16 16 | 0074f9 | (6 bytes)   |         .word nt_2swap, xt_execute, 0067ba 
4774:783 | DONE dir | na 16 16 |        |             |                 ea 74 b0 67 ba 67        --  . t . g . g
4774:784 | DONE dir | na 16 16 | 0074ff | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
4774:784 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
4774:785 | DONE wsp | na 16 16 |        |             |
4774:786 | DONE lbl | na 16 16 | 007506 |             | nt_here                              
4774:787 | DONE dir | na 16 16 | 007506 | (2 bytes)   |         .byte 4, { NC }              
4774:787 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:788 | DONE dir | na 16 16 | 007508 | (6 bytes)   |         .word nt_execute, xt_here, 00687b 
4774:788 | DONE dir | na 16 16 |        |             |                 f7 74 75 68 7b 68        --  . t u h { h
4774:789 | DONE dir | na 16 16 | 00750e | (4 bytes)   |         .byte 68, 65, 72, 65         
4774:789 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
4774:790 | DONE wsp | na 16 16 |        |             |
4774:791 | DONE lbl | na 16 16 | 007512 |             | nt_2drop                             
4774:792 | DONE dir | na 16 16 | 007512 | (2 bytes)   |         .byte 5, { NC }              
4774:792 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4774:793 | DONE dir | na 16 16 | 007514 | (6 bytes)   |         .word nt_here, xt_2drop, 006394 
4774:793 | DONE dir | na 16 16 |        |             |                 06 75 8e 63 94 63        --  . u . c . c
4774:794 | DONE dir | na 16 16 | 00751a | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
4774:794 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
4774:795 | DONE wsp | na 16 16 |        |             |
4774:796 | DONE lbl | na 16 16 | 00751f |             | nt_rfetch                            
4774:797 | DONE dir | na 16 16 | 00751f | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
4774:797 | DONE dir | na 16 16 |        |             |                 02 00                    --  . .
4774:798 | DONE dir | na 16 16 | 007521 | (6 bytes)   |         .word nt_2drop, xt_rfetch, 006acb 
4774:798 | DONE dir | na 16 16 |        |             |                 12 75 c3 6a cb 6a        --  . u . j . j
4774:799 | DONE dir | na 16 16 | 007527 | (2 bytes)   |         .byte 72, 40                 
4774:799 | DONE dir | na 16 16 |        |             |                 72 40                    --  r @
4774:800 | DONE wsp | na 16 16 |        |             |
4774:801 | DONE lbl | na 16 16 | 007529 |             | nt_fromr                             
4774:802 | DONE dir | na 16 16 | 007529 | (2 bytes)   |         .byte 2, { CO }              
4774:802 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
4774:803 | DONE dir | na 16 16 | 00752b | (6 bytes)   |         .word nt_rfetch, xt_fromr, 006ad3 
4774:803 | DONE dir | na 16 16 |        |             |                 1f 75 cc 6a d3 6a        --  . u . j . j
4774:804 | DONE dir | na 16 16 | 007531 | (2 bytes)   |         .byte 72, 3e                 
4774:804 | DONE dir | na 16 16 |        |             |                 72 3e                    --  r >
4774:805 | DONE wsp | na 16 16 |        |             |
4774:806 | DONE lbl | na 16 16 | 007533 |             | nt_tor                               
4774:807 | DONE dir | na 16 16 | 007533 | (2 bytes)   |         .byte 2, { CO }              
4774:807 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
4774:808 | DONE dir | na 16 16 | 007535 | (6 bytes)   |         .word nt_fromr, xt_tor, 006191 
4774:808 | DONE dir | na 16 16 |        |             |                 29 75 8a 61 91 61        --  ) u . a . a
4774:809 | DONE dir | na 16 16 | 00753b | (2 bytes)   |         .byte 3e, 72                 
4774:809 | DONE dir | na 16 16 |        |             |                 3e 72                    --  > r
4774:810 | DONE wsp | na 16 16 |        |             |
4774:811 | DONE lbl | na 16 16 | 00753d |             | nt_digitq                            
4774:812 | DONE dir | na 16 16 | 00753d | (2 bytes)   |         .byte 6, { NC }              
4774:812 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:813 | DONE dir | na 16 16 | 00753f | (6 bytes)   |         .word nt_tor, xt_digitq, 0066ab 
4774:813 | DONE dir | na 16 16 |        |             |                 33 75 70 66 ab 66        --  3 u p f . f
4774:814 | DONE dir | na 16 16 | 007545 | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
4774:814 | DONE dir | na 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
4774:815 | DONE wsp | na 16 16 |        |             |
4774:816 | DONE lbl | na 16 16 | 00754b |             | nt_bounds                            
4774:817 | DONE dir | na 16 16 | 00754b | (2 bytes)   |         .byte 6, { NC }              
4774:817 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4774:818 | DONE dir | na 16 16 | 00754d | (6 bytes)   |         .word nt_digitq, xt_bounds, 006512 
4774:818 | DONE dir | na 16 16 |        |             |                 3d 75 09 65 12 65        --  = u 	 e . e
4774:819 | DONE dir | na 16 16 | 007553 | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
4774:819 | DONE dir | na 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
4774:820 | DONE wsp | na 16 16 |        |             |
4774:821 | DONE lbl | na 16 16 | 007559 |             | nt_over                              
4774:822 | DONE dir | na 16 16 | 007559 | (2 bytes)   |         .byte 4, { NC }              
4774:822 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:823 | DONE dir | na 16 16 | 00755b | (6 bytes)   |         .word nt_bounds, xt_over, 0069f0 
4774:823 | DONE dir | na 16 16 |        |             |                 4b 75 ea 69 f0 69        --  K u . i . i
4774:824 | DONE dir | na 16 16 | 007561 | (4 bytes)   |         .byte 6f, 76, 65, 72         
4774:824 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
4774:825 | DONE wsp | na 16 16 |        |             |
4774:826 | DONE lbl | na 16 16 | 007565 |             | nt_fetch                             
4774:827 | DONE dir | na 16 16 | 007565 | (2 bytes)   |         .byte 1, { NC }              
4774:827 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:828 | DONE dir | na 16 16 | 007567 | (6 bytes)   |         .word nt_over, xt_fetch, 0062c6 
4774:828 | DONE dir | na 16 16 |        |             |                 59 75 c2 62 c6 62        --  Y u . b . b
4774:829 | DONE dir | na 16 16 | 00756d | (1 bytes)   |         .byte 40                     
4774:829 | DONE dir | na 16 16 |        |             |                 40                       --  @
4774:830 | DONE wsp | na 16 16 |        |             |
4774:831 | DONE lbl | na 16 16 | 00756e |             | nt_store                             
4774:832 | DONE dir | na 16 16 | 00756e | (2 bytes)   |         .byte 1, { NC }              
4774:832 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4774:833 | DONE dir | na 16 16 | 007570 | (6 bytes)   |         .word nt_fetch, xt_store, 0062c1 
4774:833 | DONE dir | na 16 16 |        |             |                 65 75 b6 62 c1 62        --  e u . b . b
4774:834 | DONE dir | na 16 16 | 007576 | (1 bytes)   |         .byte 21                     
4774:834 | DONE dir | na 16 16 |        |             |                 21                       --  !
4774:835 | DONE wsp | na 16 16 |        |             |
4774:836 | DONE lbl | na 16 16 | 007577 |             | nt_swap                              
4774:837 | DONE dir | na 16 16 | 007577 | (2 bytes)   |         .byte 4, { NC }              
4774:837 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:838 | DONE dir | na 16 16 | 007579 | (6 bytes)   |         .word nt_store, xt_swap, 006c65 
4774:838 | DONE dir | na 16 16 |        |             |                 6e 75 60 6c 65 6c        --  n u ` l e l
4774:839 | DONE dir | na 16 16 | 00757f | (4 bytes)   |         .byte 73, 77, 61, 70         
4774:839 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
4774:840 | DONE wsp | na 16 16 |        |             |
4774:841 | DONE lbl | na 16 16 | 007583 |             | nt_dup                               
4774:842 | DONE dir | na 16 16 | 007583 | (2 bytes)   |         .byte 3, { NC }              
4774:842 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4774:843 | DONE dir | na 16 16 | 007585 | (6 bytes)   |         .word nt_swap, xt_dup, 00675b 
4774:843 | DONE dir | na 16 16 |        |             |                 77 75 57 67 5b 67        --  w u W g [ g
4774:844 | DONE dir | na 16 16 | 00758b | (3 bytes)   |         .byte 64, 75, 70             
4774:844 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
4774:845 | DONE wsp | na 16 16 |        |             |
4774:846 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
4774:847 | DONE lbl | na 16 16 | 00758e |             | nt_drop                              
4774:848 | DONE dir | na 16 16 | 00758e | (2 bytes)   |         .byte 4, { NC }              
4774:848 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4774:849 | DONE dir | na 16 16 | 007590 | (6 bytes)   |         .word nt_dup, xt_drop, 00672f 
4774:849 | DONE dir | na 16 16 |        |             |                 83 75 2b 67 2f 67        --  . u + g / g
4774:850 | DONE dir | na 16 16 | 007596 | (4 bytes)   |         .byte 64, 72, 6f, 70         
4774:850 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
4774:851 | DONE wsp | na 16 16 |        |             |
4774:852 | DONE cmt | na 16 16 |        |             | ; END
4775:000 | DONE wsp | na 16 16 |        |             |
4776:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4777:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
4778:000 | DONE wsp | na 16 16 |        |             |
4779:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4780:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
4781:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
4782:000 | DONE cmt | na 16 16 |        |             | ; the stack
4783:000 | DONE lbl | na 16 16 | 00759a |             | doconst                              
4784:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4785:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4786:000 | DONE ins | na 16 16 | 00759a | ca          |                 dex                  make room on Data Stack
4787:000 | DONE ins | na 16 16 | 00759b | ca          |                 dex                  
4788:000 | DONE ins | na 16 16 | 00759c | 94 00       |                 sty.dx 00            
4789:000 | DONE wsp | na 16 16 |        |             |
4790:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
4791:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
4792:000 | DONE ins | na 16 16 | 00759e | 68          |                 pla                  get the return address
4793:000 | DONE ins | na 16 16 | 00759f | 85 16       |                 sta.d 000016         
4794:000 | DONE wsp | na 16 16 |        |             |
4795:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
4796:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
4797:000 | DONE ins | na 16 16 | 0075a1 | a0 01 00    |                 ldy.# 0001           
4798:000 | DONE ins | na 16 16 | 0075a4 | b1 16       |                 lda.diy 000016       LDA (TMP1),Y
4799:000 | DONE ins | na 16 16 | 0075a6 | a8          |                 tay                  
4800:000 | DONE wsp | na 16 16 |        |             |
4801:000 | DONE ins | na 16 16 | 0075a7 | 60          |                 rts                  takes us to original caller
4802:000 | DONE wsp | na 16 16 |        |             |
4803:000 | DONE wsp | na 16 16 |        |             |
4804:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4805:000 | DONE cmt | na 16 16 |        |             | ; DODOES
4806:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
4807:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
4808:000 | DONE lbl | na 16 16 | 0075a8 |             | dodoes                               
4809:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
4810:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
4811:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
4812:000 | DONE cmt | na 16 16 |        |             |                 ; works
4813:000 | DONE ins | na 16 16 | 0075a8 | 68          |                 pla                  
4814:000 | DONE ins | na 16 16 | 0075a9 | 1a          |                 inc.a                
4815:000 | DONE ins | na 16 16 | 0075aa | 85 1a       |                 sta.d 00001a         
4816:000 | DONE wsp | na 16 16 |        |             |
4817:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
4818:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
4819:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
4820:000 | DONE ins | na 16 16 | 0075ac | ca          |                 dex                  
4821:000 | DONE ins | na 16 16 | 0075ad | ca          |                 dex                  
4822:000 | DONE ins | na 16 16 | 0075ae | 94 00       |                 sty.dx 00            
4823:000 | DONE wsp | na 16 16 |        |             |
4824:000 | DONE ins | na 16 16 | 0075b0 | 7a          |                 ply                  
4825:000 | DONE ins | na 16 16 | 0075b1 | c8          |                 iny                  
4826:000 | DONE wsp | na 16 16 |        |             |
4827:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
4828:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
4829:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
4830:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
4831:000 | DONE ins | na 16 16 | 0075b2 | 6c 1a 00    |                 jmp.i 00001a         JMP (TMP3)
4832:000 | DONE wsp | na 16 16 |        |             |
4833:000 | DONE wsp | na 16 16 |        |             |
4834:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4835:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
4836:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
4837:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
4838:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
4839:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
4840:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
4841:000 | DONE lbl | na 16 16 | 0075b5 |             | dovar                                
4842:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4843:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4844:000 | DONE ins | na 16 16 | 0075b5 | ca          |                 dex                  make room on Data Stack
4845:000 | DONE ins | na 16 16 | 0075b6 | ca          |                 dex                  
4846:000 | DONE ins | na 16 16 | 0075b7 | 94 00       |                 sty.dx 00            
4847:000 | DONE wsp | na 16 16 |        |             |
4848:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
4849:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
4850:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
4851:000 | DONE ins | na 16 16 | 0075b9 | 7a          |                 ply                  value is now TOS
4852:000 | DONE ins | na 16 16 | 0075ba | c8          |                 iny                  add one because of 65816's address handling
4853:000 | DONE wsp | na 16 16 |        |             |
4854:000 | DONE ins | na 16 16 | 0075bb | 60          |                 rts                  takes us to original caller
4855:000 | DONE wsp | na 16 16 |        |             |
4856:000 | DONE wsp | na 16 16 |        |             |
4857:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4858:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
4859:000 | DONE wsp | na 16 16 |        |             |
4860:000 | DONE wsp | na 16 16 |        |             |
4861:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4862:000 | DONE cmt | na 16 16 |        |             | ; INTERPRET
4863:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
4864:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
4865:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
4866:000 | DONE lbl | na 16 16 | 0075bc |             | interpret                            
4867:000 | DONE lbl | na 16 16 | 0075bc |             | interpret_loop                       
4868:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4869:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4870:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
4871:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
4872:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
4873:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
4874:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
4875:000 | DONE ins | na 16 16 | 0075bc | 20 0a 6a    |                 jsr 006a0a           ( "string" -- addr u )
4876:000 | DONE wsp | na 16 16 |        |             |
4877:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
4878:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
4879:000 | DONE ins | na 16 16 | 0075bf | 98          |                 tya                  force flag check
4880:000 | DONE ins | na 16 16 | 0075c0 | f0 48       |                 beq 00760a           
4881:000 | DONE wsp | na 16 16 |        |             |
4882:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
4883:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
4884:000 | DONE ins | na 16 16 | 0075c2 | 20 70 76    |                 jsr 007670           
4885:000 | DONE wsp | na 16 16 |        |             |
4886:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
4887:000 | DONE cmt | na 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
4888:000 | DONE cmt | na 16 16 |        |             |                 ; we have to go see if it is a number
4889:000 | DONE ins | na 16 16 | 0075c5 | 20 95 63    |                 jsr 006395           TODO convert this to assembler
4890:000 | DONE ins | na 16 16 | 0075c8 | 20 bb 67    |                 jsr 0067bb           ( addr u -- nt | 0 )
4891:000 | DONE wsp | na 16 16 |        |             |
4892:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
4893:000 | DONE ins | na 16 16 | 0075cb | 98          |                 tya                  
4894:000 | DONE ins | na 16 16 | 0075cc | d0 08       |                 bne 0075d6           
4895:000 | DONE wsp | na 16 16 |        |             |
4896:000 | DONE cmt | na 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
4897:000 | DONE cmt | na 16 16 |        |             |                 ; a number.
4898:000 | DONE ins | na 16 16 | 0075ce | 20 2b 67    |                 jsr 00672b           TODO convert this to assembler
4899:000 | DONE wsp | na 16 16 |        |             |
4900:000 | DONE wsp | na 16 16 |        |             |
4901:000 | DONE cmt | na 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
4902:000 | DONE cmt | na 16 16 |        |             |                 ; complaining for us
4903:000 | DONE ins | na 16 16 | 0075d1 | 20 5f 69    |                 jsr 00695f           ( addr u -- u | d )
4904:000 | DONE wsp | na 16 16 |        |             |
4905:000 | DONE cmt | na 16 16 |        |             |                 ; That was so much fun we should do it again!
4906:000 | DONE ins | na 16 16 | 0075d4 | 80 e6       |                 bra 0075bc           
4907:000 | DONE wsp | na 16 16 |        |             |
4908:000 | DONE lbl | na 16 16 | 0075d6 |             | interpret_got_name_token             
4909:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
4910:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four bytes father down.
4911:000 | DONE wsp | na 16 16 |        |             |
4912:000 | DONE cmt | na 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
4913:000 | DONE cmt | na 16 16 |        |             |                 ; really fast if Y is TOS
4914:000 | DONE ins | na 16 16 | 0075d6 | e8          |                 inx                  
4915:000 | DONE ins | na 16 16 | 0075d7 | e8          |                 inx                  
4916:000 | DONE ins | na 16 16 | 0075d8 | e8          |                 inx                  
4917:000 | DONE ins | na 16 16 | 0075d9 | e8          |                 inx                  
4918:000 | DONE wsp | na 16 16 |        |             |
4919:000 | DONE cmt | na 16 16 |        |             |                 ; This is a quicker
4920:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
4921:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
4922:000 | DONE ins | na 16 16 | 0075da | 84 14       |                 sty.d 000014         
4923:000 | DONE ins | na 16 16 | 0075dc | c8          |                 iny                  
4924:000 | DONE ins | na 16 16 | 0075dd | c8          |                 iny                  
4925:000 | DONE ins | na 16 16 | 0075de | c8          |                 iny                  
4926:000 | DONE ins | na 16 16 | 0075df | c8          |                 iny                  
4927:000 | DONE ins | na 16 16 | 0075e0 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4928:000 | DONE ins | na 16 16 | 0075e3 | a8          |                 tay                  xt is TOS
4929:000 | DONE wsp | na 16 16 |        |             |
4930:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
4931:000 | DONE ins | na 16 16 | 0075e4 | a5 0e       |                 lda.d 00000e         
4932:000 | DONE ins | na 16 16 | 0075e6 | d0 14       |                 bne 0075fc           
4933:000 | DONE wsp | na 16 16 |        |             |
4934:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
4935:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
4936:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
4937:000 | DONE ins | na 16 16 | 0075e8 | b2 14       |                 lda.di 000014        
4938:000 | DONE ins | na 16 16 | 0075ea | eb          |                 xba                  flags are MSB
4939:000 | DONE ins | na 16 16 | 0075eb | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
4940:000 | DONE ins | na 16 16 | 0075ee | f0 06       |                 beq 0075f6           
4941:000 | DONE wsp | na 16 16 |        |             |
4942:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
4943:000 | DONE ins | na 16 16 | 0075f0 | a9 bc 7b    |                 lda.# 007bbc         
4944:000 | DONE ins | na 16 16 | 0075f3 | 4c 37 76    |                 jmp 007637           
4945:000 | DONE wsp | na 16 16 |        |             |
4946:000 | DONE lbl | na 16 16 | 0075f6 |             | interpret_interpret                  
4947:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
4948:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
4949:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
4950:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
4951:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
4952:000 | DONE ins | na 16 16 | 0075f6 | 20 b0 67    |                 jsr 0067b0           
4953:000 | DONE wsp | na 16 16 |        |             |
4954:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
4955:000 | DONE ins | na 16 16 | 0075f9 | 4c bc 75    |                 jmp 0075bc           
4956:000 | DONE wsp | na 16 16 |        |             |
4957:000 | DONE lbl | na 16 16 | 0075fc |             | interpret_compile                    
4958:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
4959:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
4960:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
4961:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
4962:000 | DONE ins | na 16 16 | 0075fc | b2 14       |                 lda.di 000014        
4963:000 | DONE ins | na 16 16 | 0075fe | eb          |                 xba                  flags are MSB
4964:000 | DONE ins | na 16 16 | 0075ff | 29 02 00    |                 and.# IM             Mask all but IM bit
4965:000 | DONE ins | na 16 16 | 007602 | d0 f2       |                 bne 0075f6           IMMEDIATE word, execute right now
4966:000 | DONE wsp | na 16 16 |        |             |
4967:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
4968:000 | DONE ins | na 16 16 | 007604 | 20 b7 65    |                 jsr 0065b7           
4969:000 | DONE ins | na 16 16 | 007607 | 4c bc 75    |                 jmp 0075bc           
4970:000 | DONE wsp | na 16 16 |        |             |
4971:000 | DONE lbl | na 16 16 | 00760a |             | interpret_line_done                  
4972:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
4973:000 | DONE ins | na 16 16 | 00760a | b4 02       |                 ldy.dx 02            
4974:000 | DONE ins | na 16 16 | 00760c | e8          |                 inx                  
4975:000 | DONE ins | na 16 16 | 00760d | e8          |                 inx                  
4976:000 | DONE ins | na 16 16 | 00760e | e8          |                 inx                  
4977:000 | DONE ins | na 16 16 | 00760f | e8          |                 inx                  
4978:000 | DONE wsp | na 16 16 |        |             |
4979:000 | DONE ins | na 16 16 | 007610 | 60          |                 rts                  
4980:000 | DONE wsp | na 16 16 |        |             |
4981:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4982:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
4983:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
4984:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
4985:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
4986:000 | DONE cmt | na 16 16 |        |             | ;
4987:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
4988:000 | DONE cmt | na 16 16 |        |             | ;
4989:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
4990:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
4991:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
4992:000 | DONE cmt | na 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
4993:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
4994:000 | DONE wsp | na 16 16 |        |             |
4995:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
4996:000 | DONE lbl | na 16 16 | 007611 |             | cmpl_word                            
4997:000 | DONE ins | na 16 16 | 007611 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
4998:000 | DONE ins | na 16 16 | 007614 | 80 08       |                 bra 00761e           
4999:000 | DONE lbl | na 16 16 | 007616 |             | cmpl_subroutine                      
5000:000 | DONE ins | na 16 16 | 007616 | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
5001:000 | DONE ins | na 16 16 | 007619 | 80 03       |                 bra 00761e           
5002:000 | DONE lbl | na 16 16 | 00761b |             | cmpl_jump                            
5003:000 | DONE ins | na 16 16 | 00761b | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
5004:000 | DONE lbl | na 16 16 | 00761e |             | cmpl_common                          
5005:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
5006:000 | DONE ins | na 16 16 | 00761e | 84 1e       |                 sty.d 00001e         
5007:000 | DONE wsp | na 16 16 |        |             |
5008:000 | DONE ins | na 16 16 | 007620 | a8          |                 tay                  force flag check
5009:000 | DONE ins | na 16 16 | 007621 | f0 08       |                 beq 00762b           came in through cmpl_word, just compile body
5010:000 | DONE wsp | na 16 16 |        |             |
5011:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
5012:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
5013:000 | DONE ins | na 16 16 | 007623 | e2 20       |                 sep 20               
5013:001 | DONE ctl | na  8 16 |        |             |         .!a8
5014:000 | DONE ins | na  8 16 | 007625 | 92 00       |                 sta.di 000000        STA (CP)
5015:000 | DONE ins | na  8 16 | 007627 | c2 20       |                 rep 20               
5015:001 | DONE ctl | na 16 16 |        |             |         .!a16
5016:000 | DONE ins | na 16 16 | 007629 | e6 00       |                 inc.d 000000         fall through to cmpl_body
5017:000 | DONE lbl | na 16 16 | 00762b |             | cmpl_body                            
5018:000 | DONE ins | na 16 16 | 00762b | 7a          |                 ply                  the return address we'll need later
5019:000 | DONE wsp | na 16 16 |        |             |
5020:000 | DONE ins | na 16 16 | 00762c | 68          |                 pla                  next value on stack is the word to compile
5021:000 | DONE ins | na 16 16 | 00762d | 92 00       |                 sta.di 000000        this is a quicker version of , ("comma")
5022:000 | DONE ins | na 16 16 | 00762f | e6 00       |                 inc.d 000000         
5023:000 | DONE ins | na 16 16 | 007631 | e6 00       |                 inc.d 000000         
5024:000 | DONE wsp | na 16 16 |        |             |
5025:000 | DONE ins | na 16 16 | 007633 | 5a          |                 phy                  make sure we can get back home
5026:000 | DONE wsp | na 16 16 |        |             |
5027:000 | DONE ins | na 16 16 | 007634 | a4 1e       |                 ldy.d 00001e         restore Data Stack
5028:000 | DONE wsp | na 16 16 |        |             |
5029:000 | DONE ins | na 16 16 | 007636 | 60          |                 rts                  
5030:000 | DONE wsp | na 16 16 |        |             |
5031:000 | DONE wsp | na 16 16 |        |             |
5032:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
5033:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
5034:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
5035:000 | DONE lbl | na 16 16 | 007637 |             | error                                
5036:000 | DONE ins | na 16 16 | 007637 | 20 3d 76    |                 jsr 00763d           
5037:000 | DONE ins | na 16 16 | 00763a | 4c 9b 60    |                 jmp 00609b           
5038:000 | DONE wsp | na 16 16 |        |             |
5039:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
5040:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
5041:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
5042:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
5043:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
5044:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
5045:000 | DONE lbl | na 16 16 | 00763d |             | print_string                         
5046:000 | DONE dir | na 16 16 |        |             |         .!a16                        
5047:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
5048:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
5049:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
5050:000 | DONE ins | na 16 16 | 00763d | da          |                 phx                  
5051:000 | DONE ins | na 16 16 | 00763e | aa          |                 tax                  x16 contains address of string
5052:000 | DONE lbl | na 16 16 | 00763f |             | @                                    
5053:000 | DONE ins | na 16 16 | 00763f | e2 20       |                 sep 20               
5053:001 | DONE ctl | na  8 16 |        |             |         .!a8
5054:000 | DONE ins | na  8 16 | 007641 | bd 00 00    |                 lda.x 0000           LDA $0000,X
5055:000 | DONE ins | na  8 16 | 007644 | f0 06       |                 beq 00764c           
5056:000 | DONE ins | na  8 16 | 007646 | 20 34 60    |                 jsr 006034           
5057:000 | DONE ins | na  8 16 | 007649 | e8          |                 inx                  
5058:000 | DONE ins | na  8 16 | 00764a | 80 f3       |                 bra 00763f           
5059:000 | DONE wsp | na  8 16 |        |             |
5060:000 | DONE lbl | na  8 16 | 00764c |             | print_string_done                    
5061:000 | DONE ins | na  8 16 | 00764c | a9 0a       |                 lda.# AscLF          should be CR on some systems
5062:000 | DONE ins | na  8 16 | 00764e | 20 34 60    |                 jsr 006034           
5063:000 | DONE ins | na  8 16 | 007651 | c2 20       |                 rep 20               
5063:001 | DONE ctl | na 16 16 |        |             |         .!a16
5064:000 | DONE ins | na 16 16 | 007653 | fa          |                 plx                  
5065:000 | DONE ins | na 16 16 | 007654 | 60          |                 rts                  
5066:000 | DONE wsp | na 16 16 |        |             |
5067:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
5068:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
5069:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
5070:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
5071:000 | DONE lbl | na 16 16 | 007655 |             | byte_to_ascii                        
5072:000 | DONE ins | na 16 16 | 007655 | 48          |                 pha                  
5073:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
5074:000 | DONE ins | na 16 16 | 007656 | 4a          |                 lsr.a                
5075:000 | DONE ins | na 16 16 | 007657 | 4a          |                 lsr.a                
5076:000 | DONE ins | na 16 16 | 007658 | 4a          |                 lsr.a                
5077:000 | DONE ins | na 16 16 | 007659 | 4a          |                 lsr.a                
5078:000 | DONE ins | na 16 16 | 00765a | 20 5e 76    |                 jsr 00765e           
5079:000 | DONE wsp | na 16 16 |        |             |
5080:000 | DONE ins | na 16 16 | 00765d | 68          |                 pla                  
5081:000 | DONE wsp | na 16 16 |        |             |
5082:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
5083:000 | DONE wsp | na 16 16 |        |             |
5084:000 | DONE wsp | na 16 16 |        |             |
5085:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
5086:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
5087:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
5088:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
5089:000 | DONE lbl | na 16 16 | 00765e |             | nibble_to_ascii                      
5090:000 | DONE ins | na 16 16 | 00765e | 29 0f 00    |                 and.# 000f           
5091:000 | DONE ins | na 16 16 | 007661 | 09 30 00    |                 ora.# 30             
5092:000 | DONE ins | na 16 16 | 007664 | c9 3a 00    |                 cmp.# 003a           '9' + 1
5093:000 | DONE ins | na 16 16 | 007667 | 90 03       |                 bcc 00766c           
5094:000 | DONE ins | na 16 16 | 007669 | 69 06 00    |                 adc.# 0006           
5095:000 | DONE lbl | na 16 16 | 00766c |             | @                                    
5096:000 | DONE ins | na 16 16 | 00766c | 20 34 60    |                 jsr 006034           
5097:000 | DONE dir | na 16 16 |        |             |         .!a16                        
5098:000 | DONE ins | na 16 16 | 00766f | 60          |                 rts                  
5099:000 | DONE wsp | na 16 16 |        |             |
5100:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
5101:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
5102:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
5103:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
5104:000 | DONE lbl | na 16 16 | 007670 |             | string_to_lowercase                  
5105:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
5106:000 | DONE ins | na 16 16 | 007670 | 60          |                 rts                  
5107:000 | DONE wsp | na 16 16 |        |             |
5108:000 | DONE wsp | na 16 16 |        |             |
5109:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5110:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
5111:000 | DONE wsp | na 16 16 |        |             |
5112:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
5113:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
5114:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
5115:000 | DONE lbl | na 16 16 | 007671 |             | hi-start                             
5116:000 | DONE dir | na 16 16 | 007671 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) 
5116:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
5116:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
5116:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
5116:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5116:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5117:000 | DONE dir | na 16 16 | 007696 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) 
5117:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
5117:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
5117:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
5117:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5117:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5118:000 | DONE wsp | na 16 16 |        |             |
5119:000 | DONE cmt | na 16 16 |        |             |         ; High flow control. Some of these could be realized with CS-ROLL and
5120:000 | DONE cmt | na 16 16 |        |             |         ; CS-PICK instead
5121:000 | DONE dir | na 16 16 | 0076bb | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) 
5121:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
5121:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
5121:000 | DONE dir | na 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
5121:000 | DONE dir | na 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
5121:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5121:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5121:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5121:000 | DONE dir | na 16 16 |        |             |                                          -- 
5122:000 | DONE dir | na 16 16 | 0076f3 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) 
5122:000 | DONE dir | na 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
5122:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
5122:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5122:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5122:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5122:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5123:000 | DONE dir | na 16 16 | 00771f | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) 
5123:000 | DONE dir | na 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
5123:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5123:000 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
5123:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
5123:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
5123:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5123:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5123:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5123:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5124:000 | DONE dir | na 16 16 | 007763 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) 
5124:000 | DONE dir | na 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
5124:000 | DONE dir | na 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
5124:000 | DONE dir | na 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
5124:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
5124:000 | DONE dir | na 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
5124:000 | DONE dir | na 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
5124:000 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5124:000 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
5125:000 | DONE dir | na 16 16 | 0077a0 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) 
5125:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
5125:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5125:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5125:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
5125:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5125:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5125:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5126:000 | DONE dir | na 16 16 | 0077d4 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) 
5126:000 | DONE dir | na 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
5126:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5126:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5126:000 | DONE dir | na 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
5126:000 | DONE dir | na 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
5126:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5126:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5126:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5126:000 | DONE dir | na 16 16 |        |             |                                          -- 
5127:000 | DONE wsp | na 16 16 |        |             |
5128:000 | DONE cmt | na 16 16 |        |             |         ; DEFER and friends. Code taken from ANSI Forth specifications. Many of
5129:000 | DONE cmt | na 16 16 |        |             |         ; these will be moved to assembler code in due course
5130:000 | DONE dir | na 16 16 | 007814 | (45 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 20, 63, 72, 65, 61, 74, (...) 
5130:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 65 66 65 72 20  --  :   d e f e r  
5130:000 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65 20 5b  --  c r e a t e   [
5130:000 | DONE dir | na 16 16 |        |             |                 27 5d 20 61 62 6f 72 74  --  ' ]   a b o r t
5130:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 64 6f 65 73 3e  --    ,   d o e s >
5130:000 | DONE dir | na 16 16 |        |             |                 20 40 20 65 78 65 63 75  --    @   e x e c u
5130:000 | DONE dir | na 16 16 |        |             |                 74 65 20 3b 20           --  t e   ;  
5131:000 | DONE dir | na 16 16 | 007841 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 21, 20, 3e, 62, 6f, 64, (...) 
5131:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 65 66 65 72 21  --  :   d e f e r !
5131:000 | DONE dir | na 16 16 |        |             |                 20 3e 62 6f 64 79 20 21  --    > b o d y   !
5131:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
5132:000 | DONE dir | na 16 16 | 007854 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 40, 20, 3e, 62, 6f, 64, (...) 
5132:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 65 66 65 72 40  --  :   d e f e r @
5132:000 | DONE dir | na 16 16 |        |             |                 20 3e 62 6f 64 79 20 40  --    > b o d y   @
5132:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
5133:000 | DONE dir | na 16 16 | 007867 | (76 bytes)  |         .byte 3a, 20, 69, 73, 20, 73, 74, 61, 74, 65, 20, 40, 20, (...) 
5133:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 73 20 73 74 61  --  :   i s   s t a
5133:000 | DONE dir | na 16 16 |        |             |                 74 65 20 40 20 69 66 20  --  t e   @   i f  
5133:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5133:000 | DONE dir | na 16 16 |        |             |                 20 5b 27 5d 20 70 6f 73  --    [ ' ]   p o s
5133:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 64 65  --  t p o n e   d e
5133:000 | DONE dir | na 16 16 |        |             |                 66 65 72 21 20 65 6c 73  --  f e r !   e l s
5133:000 | DONE dir | na 16 16 |        |             |                 65 20 27 20 64 65 66 65  --  e   '   d e f e
5133:000 | DONE dir | na 16 16 |        |             |                 72 21 20 74 68 65 6e 20  --  r !   t h e n  
5133:000 | DONE dir | na 16 16 |        |             |                 3b 20 69 6d 6d 65 64 69  --  ;   i m m e d i
5133:000 | DONE dir | na 16 16 |        |             |                 61 74 65 20              --  a t e  
5134:000 | DONE dir | na 16 16 | 0078b3 | (83 bytes)  |         .byte 3a, 20, 61, 63, 74, 69, 6f, 6e, 2d, 6f, 66, 20, 73, (...) 
5134:000 | DONE dir | na 16 16 |        |             |                 3a 20 61 63 74 69 6f 6e  --  :   a c t i o n
5134:000 | DONE dir | na 16 16 |        |             |                 2d 6f 66 20 73 74 61 74  --  - o f   s t a t
5134:000 | DONE dir | na 16 16 |        |             |                 65 20 40 20 69 66 20 70  --  e   @   i f   p
5134:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5134:000 | DONE dir | na 16 16 |        |             |                 5b 27 5d 20 70 6f 73 74  --  [ ' ]   p o s t
5134:000 | DONE dir | na 16 16 |        |             |                 70 6f 6e 65 20 64 65 66  --  p o n e   d e f
5134:000 | DONE dir | na 16 16 |        |             |                 65 72 40 20 65 6c 73 65  --  e r @   e l s e
5134:000 | DONE dir | na 16 16 |        |             |                 20 27 20 64 65 66 65 72  --    '   d e f e r
5134:000 | DONE dir | na 16 16 |        |             |                 40 20 74 68 65 6e 20 3b  --  @   t h e n   ;
5134:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5134:000 | DONE dir | na 16 16 |        |             |                 74 65 20                 --  t e  
5135:000 | DONE wsp | na 16 16 |        |             |
5136:000 | DONE cmt | na 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
5137:000 | DONE cmt | na 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
5138:000 | DONE cmt | na 16 16 |        |             |         ; stuff
5139:000 | DONE dir | na 16 16 | 007906 | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
5139:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
5139:000 | DONE dir | na 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
5139:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5139:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5139:000 | DONE dir | na 16 16 |        |             |                 20                       --   
5140:000 | DONE dir | na 16 16 | 007927 | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
5140:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
5140:000 | DONE dir | na 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
5140:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5140:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
5141:000 | DONE dir | na 16 16 | 007941 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
5141:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
5141:000 | DONE dir | na 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
5141:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5141:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5141:000 | DONE dir | na 16 16 |        |             |                 20                       --   
5142:000 | DONE dir | na 16 16 | 007962 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
5142:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
5142:000 | DONE dir | na 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
5142:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5142:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
5143:000 | DONE wsp | na 16 16 |        |             |
5144:000 | DONE cmt | na 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
5145:000 | DONE cmt | na 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
5146:000 | DONE cmt | na 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
5147:000 | DONE dir | na 16 16 | 00797c | (29 bytes)  |         .byte 3a, 20, 75, 2e, 20, 30, 20, 3c, 23, 20, 23, 73, 20, (...) 
5147:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 20 30 20 3c  --  :   u .   0   <
5147:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 23 3e 20  --  #   # s   # >  
5147:000 | DONE dir | na 16 16 |        |             |                 74 79 70 65 20 73 70 61  --  t y p e   s p a
5147:000 | DONE dir | na 16 16 |        |             |                 63 65 20 3b 20           --  c e   ;  
5148:000 | DONE dir | na 16 16 | 007999 | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
5148:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
5148:000 | DONE dir | na 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
5148:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5148:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5148:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5148:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5149:000 | DONE dir | na 16 16 | 0079c5 | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
5149:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
5149:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
5149:000 | DONE dir | na 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
5149:000 | DONE dir | na 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
5149:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5149:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5149:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5149:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5150:000 | DONE dir | na 16 16 | 007a01 | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
5150:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
5150:000 | DONE dir | na 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
5150:000 | DONE dir | na 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
5150:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5151:000 | DONE dir | na 16 16 | 007a1d | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
5151:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
5151:000 | DONE dir | na 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
5151:000 | DONE dir | na 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
5151:000 | DONE dir | na 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
5151:000 | DONE dir | na 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
5151:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
5152:000 | DONE dir | na 16 16 | 007a48 | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
5152:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
5152:000 | DONE dir | na 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
5152:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
5152:000 | DONE dir | na 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
5152:000 | DONE dir | na 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
5152:000 | DONE dir | na 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
5153:000 | DONE dir | na 16 16 | 007a76 | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
5153:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
5153:000 | DONE dir | na 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
5153:000 | DONE dir | na 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
5153:000 | DONE dir | na 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
5153:000 | DONE dir | na 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
5153:000 | DONE dir | na 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
5153:000 | DONE dir | na 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
5153:000 | DONE dir | na 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
5154:000 | DONE cmt | na 16 16 |        |             | ;       .byte ": . dup abs 0 <# #s rot sign #> type space ; "
5155:000 | DONE wsp | na 16 16 |        |             |
5156:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
5157:000 | DONE cmt | na 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
5158:000 | DONE cmt | na 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
5159:000 | DONE dir | na 16 16 | 007ab3 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
5159:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
5159:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
5159:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
5159:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
5159:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
5160:000 | DONE dir | na 16 16 | 007ad6 | (39 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
5160:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
5160:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
5160:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
5160:000 | DONE dir | na 16 16 |        |             |                 30 32 2e 20 4d 61 72 63  --  0 2 .   M a r c
5160:000 | DONE dir | na 16 16 |        |             |                 68 20 32 30 31 37 29     --  h   2 0 1 7 )
5161:000 | DONE dir | na 16 16 | 007afd | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
5161:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
5161:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
5161:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
5161:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
5161:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
5161:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
5161:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
5162:000 | DONE dir | na 16 16 | 007b30 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
5162:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
5162:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
5162:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
5162:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
5162:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
5162:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
5162:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
5163:000 | DONE dir | na 16 16 | 007b64 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
5163:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
5163:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
5163:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
5163:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
5164:000 | DONE lbl | na 16 16 | 007b80 |             | hi-end                               
5165:000 | DONE wsp | na 16 16 |        |             |
5166:000 | DONE wsp | na 16 16 |        |             |
5167:000 | DONE wsp | na 16 16 |        |             |
5168:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5169:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
5170:000 | DONE wsp | na 16 16 |        |             |
5171:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
5171:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5171:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
5171:003 | DONE cmt | na 16 16 |        |             | ; This version:  21. Feb 2017
5171:004 | DONE wsp | na 16 16 |        |             |
5171:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
5171:006 | DONE wsp | na 16 16 |        |             |
5171:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5171:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
5171:009 | DONE wsp | na 16 16 |        |             |
5171:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
5171:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
5171:012 | DONE cmt | na 16 16 |        |             | ; character
5171:013 | DONE wsp | na 16 16 |        |             |
5171:014 | DONE lbl | na 16 16 | 007b80 |             | s_ok                                 
5171:015 | DONE dir | na 16 16 | 007b80 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
5171:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
5171:016 | DONE lbl | na 16 16 | 007b84 |             | s_compiled                           
5171:017 | DONE dir | na 16 16 | 007b84 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
5171:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
5171:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
5171:018 | DONE wsp | na 16 16 |        |             |
5171:019 | DONE wsp | na 16 16 |        |             |
5171:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5171:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
5171:022 | DONE wsp | na 16 16 |        |             |
5171:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
5171:024 | DONE wsp | na 16 16 |        |             |
5171:025 | DONE lbl | na 16 16 | 007b8e |             | es_allot                             
5171:026 | DONE dir | na 16 16 | 007b8e | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
5171:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
5171:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
5171:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
5171:027 | DONE lbl | na 16 16 | 007ba2 |             | es_channel                           
5171:028 | DONE dir | na 16 16 | 007ba2 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
5171:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
5171:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
5171:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
5171:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
5171:029 | DONE lbl | na 16 16 | 007bbc |             | es_componly                          
5171:030 | DONE dir | na 16 16 | 007bbc | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
5171:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
5171:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
5171:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5171:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
5171:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
5171:031 | DONE lbl | na 16 16 | 007bdd |             | es_defer                             
5171:032 | DONE dir | na 16 16 | 007bdd | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
5171:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
5171:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
5171:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
5171:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
5171:033 | DONE lbl | na 16 16 | 007bfa |             | es_divzero                           
5171:034 | DONE dir | na 16 16 | 007bfa | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
5171:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
5171:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
5171:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
5171:035 | DONE lbl | na 16 16 | 007c0b |             | es_error                             
5171:036 | DONE dir | na 16 16 | 007c0b | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
5171:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
5171:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
5171:037 | DONE lbl | na 16 16 | 007c17 |             | es_intonly                           
5171:038 | DONE dir | na 16 16 | 007c17 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
5171:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
5171:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
5171:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
5171:039 | DONE lbl | na 16 16 | 007c2d |             | es_noname                            
5171:040 | DONE dir | na 16 16 | 007c2d | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
5171:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
5171:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
5171:040 | DONE dir | na 16 16 |        |             |                                          -- 
5171:041 | DONE lbl | na 16 16 | 007c3d |             | es_radix                             
5171:042 | DONE dir | na 16 16 | 007c3d | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
5171:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
5171:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
5171:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
5171:043 | DONE lbl | na 16 16 | 007c54 |             | es_refill1                           
5171:044 | DONE dir | na 16 16 | 007c54 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
5171:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
5171:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
5171:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
5171:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
5171:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
5171:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
5171:045 | DONE lbl | na 16 16 | 007c82 |             | es_refill2                           
5171:046 | DONE dir | na 16 16 | 007c82 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
5171:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
5171:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
5171:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
5171:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
5171:046 | DONE dir | na 16 16 |        |             |                                          -- 
5171:047 | DONE lbl | na 16 16 | 007ca2 |             | es_state                             
5171:048 | DONE dir | na 16 16 | 007ca2 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
5171:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
5171:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
5171:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
5171:048 | DONE dir | na 16 16 |        |             |                                          -- 
5171:049 | DONE lbl | na 16 16 | 007cba |             | es_underflow                         
5171:050 | DONE dir | na 16 16 | 007cba | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
5171:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
5171:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
5171:050 | DONE dir | na 16 16 |        |             |                                          -- 
5171:051 | DONE lbl | na 16 16 | 007cca |             | es_syntax                            
5171:052 | DONE dir | na 16 16 | 007cca | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
5171:052 | DONE dir | na 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
5171:052 | DONE dir | na 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
5171:053 | DONE wsp | na 16 16 |        |             |
5171:054 | DONE wsp | na 16 16 |        |             |
5171:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5171:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
5171:057 | DONE wsp | na 16 16 |        |             |
5171:058 | DONE lbl | na 16 16 | 007cd9 |             | vt100_page                           
5171:059 | DONE dir | na 16 16 | 007cd9 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
5171:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
5171:060 | DONE lbl | na 16 16 | 007cde |             | vt100_home                           
5171:061 | DONE dir | na 16 16 | 007cde | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
5171:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
5171:062 | DONE wsp | na 16 16 |        |             |
5171:063 | DONE wsp | na 16 16 |        |             |
5171:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5171:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
5171:066 | DONE wsp | na 16 16 |        |             |
5171:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
5171:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
5171:069 | DONE wsp | na 16 16 |        |             |
5171:070 | DONE lbl | na 16 16 | 007ce2 |             | tests_prev_cmd                       
5171:071 | DONE dir | na 16 16 | 007ce2 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
5171:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
5171:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
5171:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
5171:072 | DONE lbl | na 16 16 | 007cf5 |             | tests_next_cmd                       
5171:073 | DONE dir | na 16 16 | 007cf5 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
5171:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
5171:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
5171:074 | DONE wsp | na 16 16 |        |             |
5171:075 | DONE wsp | na 16 16 |        |             |
5171:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5171:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
5171:078 | DONE wsp | na 16 16 |        |             |
5171:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
5171:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
5171:081 | DONE wsp | na 16 16 |        |             |
5171:082 | DONE lbl | na 16 16 | 007d04 |             | alphastring                          
5171:083 | DONE dir | na 16 16 | 007d04 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
5171:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
5171:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
5171:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
5171:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
5171:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
5172:000 | DONE wsp | na 16 16 |        |             |
5173:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5174:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
5175:000 | DONE wsp | na 16 16 |        |             |
5176:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
5177:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
5178:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
5179:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
5180:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
5181:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
5182:000 | DONE wsp | na 16 16 |        |             |
5183:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
5184:000 | DONE cmt | na 16 16 |        |             |                 ; tya
5185:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
5186:000 | DONE cmt | na 16 16 |        |             |                 ; xba
5187:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
5188:000 | DONE cmt | na 16 16 |        |             |                 ; tya
5189:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
5190:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
5191:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
5192:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
5193:000 | DONE wsp | na 16 16 |        |             |
5194:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
5195:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
5196:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
5197:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
5198:000 | DONE wsp | na 16 16 |        |             |
5199:000 | DONE wsp | na 16 16 |        |             |
5200:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5201:000 | DONE cmt | na 16 16 |        |             | ; END
5202:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abortq_done                 : 00640f
- abortq_rt                   : 006405
- accept_bs                   : 006487
- accept_eol                  : 00647f
- accept_loop                 : 006434
- accept_nonzero              : 006427
- allot_done                  : 0064dd
- allot_error                 : 0064cc
- allot_minus                 : 0064d2
- allot_real_gone             : 0064df
- alphastring                 : 007d04
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 000010
- branch_rt                   : 00651a
- brg_value                   : 00000b
- bsize                       : 000080
- buffer                      : 000200
- byte_to_ascii               : 007655
- char_got_char               : 006564
- cib                         : 000008
- ciblen                      : 00000a
- cmpl_body                   : 00762b
- cmpl_common                 : 00761e
- cmpl_jump                   : 00761b
- cmpl_subroutine             : 007616
- cmpl_word                   : 007611
- co                          : 000004
- code0                       : 006000
- compile_as_code             : 0065b7
- compile_as_jump             : 0065b7
- cp                          : 000000
- cp-end                      : 005fff
- cp0                         : 000300
- create_got_name             : 006608
- doconst                     : 00759a
- dodoes                      : 0075a8
- does_rt                     : 006715
- dots_done                   : 006229
- dots_loop                   : 00620f
- dots_not_empty              : 006209
- dovar                       : 0075b5
- dp                          : 000002
- dpage                       : 000000
- dq_case_done                : 00668d
- dq_checkbase                : 006690
- dq_notdigit                 : 006697
- dq_success                  : 0066a2
- dsp0                        : 0000ff
- dtrailing_done              : 006311
- dtrailing_loop              : 006308
- dump_byte_loop              : 006738
- dump_done                   : 00674d
- dump_line_loop              : 006732
- equal_not                   : 00631e
- erase_done                  : 006773
- erase_loop                  : 00676c
- error                       : 007637
- es_allot                    : 007b8e
- es_channel                  : 007ba2
- es_componly                 : 007bbc
- es_defer                    : 007bdd
- es_divzero                  : 007bfa
- es_error                    : 007c0b
- es_intonly                  : 007c17
- es_noname                   : 007c2d
- es_radix                    : 007c3d
- es_refill1                  : 007c54
- es_refill2                  : 007c82
- es_state                    : 007ca2
- es_syntax                   : 007cca
- es_underflow                : 007cba
- execute_ip                  : 0067ad
- find-name_all_chars         : 0067e9
- find-name_char_nomatcnt_8   : 0067e5
- find-name_chars             : 0067da
- find-name_done              : 00680f
- find-name_failure_16        : 00680c
- find-name_loop              : 0067c5
- find-name_next_entry        : 0067ce
- find-name_success           : 006806
- fmmod_1                     : 006830
- fmmod_1_1                   : 006834
- fmmod_2                     : 006861
- fmmod_2_1                   : 006865
- get_chr                     : 006045
- get_chr_wait                : 00604a
- hashs_loop                  : 00629e
- have_chr?                   : 006054
- hi-end                      : 007b80
- hi-start                    : 007671
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- im                          : 000002
- insrc                       : 000006
- interpret                   : 0075bc
- interpret_compile           : 0075fc
- interpret_got_name_token    : 0075d6
- interpret_interpret         : 0075f6
- interpret_line_done         : 00760a
- interpret_loop              : 0075bc
- literal_rt                  : 0068ba
- lshift_done                 : 0068d6
- lshift_loop                 : 0068d0
- max_drop                    : 006909
- max_nip                     : 00690b
- max_no_ov                   : 006907
- min_drop                    : 00691c
- min_nip                     : 00691e
- min_no_ov                   : 00691a
- move_cmoveup                : 00692f
- mstar_abs_nos               : 0068e7
- mstar_umstar                : 0068f1
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 00765e
- not-equal_equal             : 006100
- nt_2drop                    : 007512
- nt_2dup                     : 00723a
- nt_2over                    : 0074dd
- nt_2swap                    : 0074ea
- nt_2variable                : 006eb5
- nt_abort                    : 006f97
- nt_abortq                   : 006f89
- nt_abs                      : 007246
- nt_accept                   : 00748c
- nt_again                    : 0071b6
- nt_allot                    : 0071f2
- nt_and                      : 007331
- nt_backslash                : 00749a
- nt_base                     : 007087
- nt_begin                    : 0071c3
- nt_bell                     : 006e43
- nt_bl                       : 007038
- nt_bounds                   : 00754b
- nt_bracketchar              : 0070df
- nt_brackettick              : 0070d4
- nt_branch                   : 0071a8
- nt_bye                      : 006de4
- nt_c-comma                  : 007354
- nt_c-fetch                  : 00735e
- nt_c-store                  : 007368
- nt_cellplus                 : 006e5c
- nt_cells                    : 0070a3
- nt_char                     : 007302
- nt_charplus                 : 006e69
- nt_chars                    : 006e4f
- nt_cmove                    : 006f6f
- nt_cmoveup                  : 006f61
- nt_cold                     : 006def
- nt_colon                    : 0071e9
- nt_comma                    : 007483
- nt_compile-only             : 007112
- nt_compilecomma             : 0071d0
- nt_constant                 : 00729b
- nt_count                    : 006f7c
- nt_cr                       : 006fd6
- nt_create                   : 007219
- nt_dabs                     : 006ec6
- nt_decimal                  : 006e76
- nt_depth                    : 007277
- nt_digitq                   : 00753d
- nt_dminus                   : 006ef7
- nt_dnegate                  : 006ed2
- nt_does                     : 00720c
- nt_dot                      : 007073
- nt_dotquote                 : 0070b0
- nt_dots                     : 00705d
- nt_dplus                    : 006f01
- nt_drop                     : 00758e
- nt_dtos                     : 006ee1
- nt_dtrailing                : 007179
- nt_dump                     : 006e1b
- nt_dup                      : 007583
- nt_equal                    : 0073e7
- nt_erase                    : 006fec
- nt_evaluate                 : 007093
- nt_execute                  : 0074f7
- nt_false                    : 0073f0
- nt_fetch                    : 007565
- nt_fill                     : 006fe0
- nt_find-name                : 007441
- nt_fmmod                    : 006f0b
- nt_fromr                    : 007529
- nt_greater                  : 0073c1
- nt_hash                     : 007025
- nt_hashs                    : 00700f
- nt_here                     : 007506
- nt_hex                      : 006e85
- nt_hold                     : 007003
- nt_immediate                : 007126
- nt_invert                   : 0072f4
- nt_latestnt                 : 007159
- nt_latestxt                 : 007169
- nt_leftbracket              : 007150
- nt_less                     : 0073ca
- nt_lessnumber               : 00702e
- nt_literal                  : 0070ed
- nt_lshift                   : 00733c
- nt_max                      : 0072db
- nt_min                      : 0072d0
- nt_minus                    : 00737c
- nt_move                     : 0072c4
- nt_mrot                     : 0074c6
- nt_mstar                    : 006f4c
- nt_name-int                 : 006fc6
- nt_name-string              : 007227
- nt_native-compile           : 0070fc
- nt_negate                   : 0072e6
- nt_nip                      : 0074bb
- nt_not-equal                : 0073dd
- nt_number                   : 007418
- nt_numbermore               : 006ff9
- nt_one                      : 00742f
- nt_one-minus                : 00738e
- nt_one-plus                 : 007398
- nt_or                       : 007327
- nt_over                     : 007559
- nt_pad                      : 00707c
- nt_page                     : 006e9e
- nt_parse                    : 006fa4
- nt_parse-name               : 007460
- nt_pick                     : 006e37
- nt_plus                     : 007385
- nt_plusstore                : 00734a
- nt_postpone                 : 007137
- nt_qdup                     : 0074a3
- nt_question                 : 006fbd
- nt_quit                     : 006fb1
- nt_refill                   : 007452
- nt_rfetch                   : 00751f
- nt_rightbracket             : 007147
- nt_rot                      : 0074d2
- nt_rshift                   : 00730e
- nt_semicolon                : 0071e0
- nt_sign                     : 007019
- nt_slashstring              : 00718a
- nt_sliteral                 : 0070c4
- nt_smrem                    : 006f19
- nt_source                   : 007269
- nt_source-id                : 007472
- nt_space                    : 007050
- nt_spaces                   : 007042
- nt_squote                   : 0070ba
- nt_star                     : 006f43
- nt_state                    : 007251
- nt_stod                     : 006eec
- nt_store                    : 00756e
- nt_swap                     : 007577
- nt_tick                     : 0072bb
- nt_to                       : 007284
- nt_to-in                    : 00725e
- nt_tobody                   : 0071ff
- nt_tonumber                 : 007409
- nt_tor                      : 007533
- nt_true                     : 0073fd
- nt_tuck                     : 0074af
- nt_two                      : 007426
- nt_two-star                 : 007372
- nt_tworfetch                : 006eaa
- nt_type                     : 007067
- nt_udmod                    : 006f27
- nt_ummod                    : 006f35
- nt_umstar                   : 006f56
- nt_unused                   : 006e90
- nt_value                    : 00728e
- nt_variable                 : 0072ab
- nt_words                    : 006e0e
- nt_wordsize                 : 006e27
- nt_wordsnsizes              : 006dfb
- nt_xor                      : 00731c
- nt_zbranch                  : 007199
- nt_zero                     : 007438
- nt_zero-equal               : 0073d3
- nt_zero-less                : 0073b7
- nt_zero-more                : 0073ad
- nt_zero-notequal            : 0073a2
- number_dot                  : 006977
- number_loop                 : 00699e
- number_main                 : 006990
- number_ok                   : 0069aa
- number_single               : 0069d2
- output                      : 000280
- padoffset                   : 0000ff
- parse-name_empty_line       : 006a1c
- parse-name_found            : 006a30
- parse-name_loop             : 006a0f
- parse_found_delimiter       : 006a5c
- parse_loop                  : 006a4f
- parse_reached_eol           : 006a60
- pp_got_nt                   : 006aa3
- pp_got_word                 : 006a98
- pp_not_immediate            : 006ab3
- print_string                : 00763d
- print_string_done           : 00764c
- put_chr                     : 006034
- put_chr_wait                : 00603a
- quit_compiled               : 0060d9
- quit_get_line               : 0060ae
- quit_ok                     : 0060d0
- quit_print                  : 0060dc
- quit_refill_successful      : 0060bc
- ram-end                     : 007fff
- ram-start                   : 000000
- refill_source_is_not_string : 006af5
- refill_src_not_kbd          : 006aec
- reset_hardware              : 006000
- rshift_done                 : 006b14
- rshift_loop                 : 006b0e
- s_compiled                  : 007b84
- s_ok                        : 007b80
- scratch                     : 000020
- sign_plus                   : 006b68
- sl_loop                     : 006b8d
- sliteral_rt                 : 006bb8
- smrem_1                     : 006c08
- smrem_1_1                   : 006c0c
- smrem_2                     : 006c23
- smrem_2_1                   : 006c27
- spaces_done                 : 006c4b
- squote_compile              : 006b4b
- stack                       : 000100
- stack0                      : 0001ff
- start                       : 006064
- state                       : 00000e
- stod_pos                    : 006b5b
- string_to_lowercase         : 007670
- tests_next_cmd              : 007cf5
- tests_prev_cmd              : 007ce2
- tick_have_nt                : 0063f7
- tick_have_word              : 0063eb
- tmp1                        : 000016
- tmp2                        : 000018
- tmp3                        : 00001a
- tmpbranch                   : 000014
- tmpdsp                      : 00001c
- tmptos                      : 00001e
- tohold                      : 000012
- toin                        : 00000c
- tonumber_done               : 00617d
- tonumber_loop               : 006139
- tonumber_ok                 : 006148
- type_done                   : 006c9b
- type_loop                   : 006c8f
- ummod_complete              : 006d64
- ummod_notzero               : 006d25
- ummod_overflow              : 006d5b
- ummod_shift                 : 006d3d
- umstar_counter              : 006cf4
- umstar_loop                 : 006ce6
- umstar_one_nos              : 006d07
- umstar_one_tos              : 006d04
- umstar_two_common           : 006d13
- umstar_two_nos              : 006d12
- umstar_two_tos              : 006d0e
- umstar_zero                 : 006cfd
- user0                       : 000000
- vt100_home                  : 007cde
- vt100_page                  : 007cd9
- words_common                : 006d8f
- words_loop                  : 006d99
- words_nosizes               : 006db6
- workword                    : 000004
- xt_2drop                    : 00638e
- xt_2dup                     : 006395
- xt_2over                    : 0063a0
- xt_2swap                    : 0063bb
- xt_2variable                : 0063cc
- xt_abort                    : 00609b
- xt_abortq                   : 0063fb
- xt_abs                      : 006418
- xt_accept                   : 006421
- xt_again                    : 0064a5
- xt_allot                    : 0064bb
- xt_and                      : 0064e4
- xt_backslash                : 0062dd
- xt_base                     : 0064eb
- xt_begin                    : 0064fa
- xt_bell                     : 0064f3
- xt_bl                       : 006501
- xt_bounds                   : 006509
- xt_bracketchar              : 0062d6
- xt_brackettick              : 0062c7
- xt_branch                   : 006513
- xt_bye                      : 006527
- xt_c-comma                  : 00652b
- xt_c-fetch                  : 006539
- xt_c-store                  : 006545
- xt_cellplus                 : 006555
- xt_char                     : 006558
- xt_chars                    : 006570
- xt_cmove                    : 006572
- xt_cmoveup                  : 006595
- xt_cold                     : 006061
- xt_colon                    : 006239
- xt_comma                    : 00622d
- xt_compile-only             : 0065ae
- xt_compilecomma             : 0065b7
- xt_constant                 : 0065cd
- xt_count                    : 0065e7
- xt_cr                       : 0065f6
- xt_create                   : 0065fd
- xt_dabs                     : 0066d8
- xt_decimal                  : 0066df
- xt_depth                    : 0066e5
- xt_digitq                   : 006670
- xt_dminus                   : 0066be
- xt_dnegate                  : 0066f4
- xt_does                     : 006708
- xt_dot                      : 0061a4
- xt_dotparen                 : 0061c3
- xt_dotquote                 : 0061d1
- xt_dots                     : 0061e5
- xt_dplus                    : 0066ac
- xt_drop                     : 00672b
- xt_dtos                     : 0066d3
- xt_dtrailing                : 0062fe
- xt_dump                     : 006730
- xt_dup                      : 006757
- xt_equal                    : 006315
- xt_erase                    : 00675c
- xt_evaluate                 : 00677e
- xt_execute                  : 0067b0
- xt_fetch                    : 0062c2
- xt_fill                     : 006763
- xt_find-name                : 0067bb
- xt_fmmod                    : 006812
- xt_fromr                    : 006acc
- xt_greater                  : 00610d
- xt_greater_nip              : 00611e
- xt_greater_no_ov            : 00611b
- xt_hash                     : 006274
- xt_hashs                    : 00629e
- xt_here                     : 006875
- xt_hex                      : 00687c
- xt_hold                     : 006882
- xt_immediate                : 006866
- xt_invert                   : 00686f
- xt_latestnt                 : 006890
- xt_latestxt                 : 006898
- xt_leftbracket              : 0062cd
- xt_less                     : 0060e3
- xt_less_nip                 : 0060f4
- xt_less_no_ov               : 0060f1
- xt_lessnumber               : 006103
- xt_literal                  : 0068a8
- xt_lshift                   : 0068c7
- xt_max                      : 0068fb
- xt_min                      : 00690e
- xt_minus                    : 0062ea
- xt_move                     : 006921
- xt_mrot                     : 0062f5
- xt_mstar                    : 0068db
- xt_name-int                 : 006932
- xt_name-string              : 00693b
- xt_native-compile           : 00694c
- xt_negate                   : 006955
- xt_nip                      : 00695c
- xt_not-equal                : 0060f7
- xt_number                   : 00695f
- xt_numbermore               : 00628f
- xt_one                      : 006376
- xt_one-minus                : 00637e
- xt_one-plus                 : 006380
- xt_or                       : 0069e3
- xt_over                     : 0069ea
- xt_pad                      : 0069f1
- xt_page                     : 0069fd
- xt_parse                    : 006a3c
- xt_parse-name               : 006a0a
- xt_pick                     : 006a6f
- xt_plus                     : 0062e2
- xt_plusstore                : 006a7d
- xt_postpone                 : 006a8d
- xt_qdup                     : 0062ae
- xt_question                 : 0062a7
- xt_quit                     : 0060a3
- xt_refill                   : 006ad4
- xt_rfetch                   : 006ac3
- xt_rightbracket             : 0062d0
- xt_rot                      : 006afc
- xt_rshift                   : 006b05
- xt_semicolon                : 00625b
- xt_sign                     : 006b5f
- xt_slashstring              : 006192
- xt_sliteral                 : 006b6d
- xt_smrem                    : 006bce
- xt_source                   : 006c28
- xt_source-id                : 006c35
- xt_space                    : 006c3c
- xt_spaces                   : 006c43
- xt_squote                   : 006b19
- xt_star                     : 006c50
- xt_state                    : 006c58
- xt_stod                     : 006b4f
- xt_store                    : 0062b6
- xt_swap                     : 006c60
- xt_tick                     : 0063df
- xt_to                       : 006c66
- xt_to-in                    : 006125
- xt_tobody                   : 006121
- xt_tonumber                 : 00612d
- xt_tor                      : 00618a
- xt_true                     : 006c70
- xt_tuck                     : 006c78
- xt_two                      : 006382
- xt_two-star                 : 00638a
- xt_tworfetch                : 0063ad
- xt_type                     : 006c81
- xt_udmod                    : 006ca2
- xt_ummod                    : 006d1c
- xt_umstar                   : 006cbd
- xt_unused                   : 006d6d
- xt_variable                 : 006d79
- xt_words                    : 006d8d
- xt_wordsize                 : 006dca
- xt_wordsnsizes              : 006d86
- xt_xor                      : 006ddd
- xt_zbranch                  : 006358
- xt_zero                     : 006321
- xt_zero-equal               : 006329
- xt_zero-less                : 006335
- xt_zero-more                : 00634d
- xt_zero-notequal            : 006341
- z_2drop                     : 006394
- z_2dup                      : 00639f
- z_2over                     : 0063ac
- z_2swap                     : 0063cb
- z_2variable                 : 0063de
- z_abort                     : 0060e2
- z_abortq                    : 006417
- z_abs                       : 006420
- z_accept                    : 0064a4
- z_again                     : 0064ba
- z_allot                     : 0064e3
- z_and                       : 0064ea
- z_backslash                 : 0062e1
- z_base                      : 0064f2
- z_begin                     : 006500
- z_bell                      : 0064f9
- z_bl                        : 006508
- z_bounds                    : 006512
- z_bracketchar               : 0062dc
- z_brackettick               : 0062cd
- z_branch                    : 006519
- z_bye                       : 00652a
- z_c-comma                   : 006538
- z_c-fetch                   : 006544
- z_c-store                   : 006554
- z_cellplus                  : 006557
- z_char                      : 00656f
- z_chars                     : 006571
- z_cmove                     : 006594
- z_cmoveup                   : 0065ad
- z_cold                      : 0060e2
- z_colon                     : 00625a
- z_comma                     : 006238
- z_compile-only              : 0065b6
- z_compilecomma              : 0065cc
- z_constant                  : 0065e6
- z_count                     : 0065f5
- z_cr                        : 0065fc
- z_create                    : 00666f
- z_dabs                      : 0066de
- z_decimal                   : 0066e4
- z_depth                     : 0066f3
- z_digitq                    : 0066ab
- z_dminus                    : 0066d2
- z_dnegate                   : 006707
- z_does                      : 006714
- z_dot                       : 0061c2
- z_dotparen                  : 0061d0
- z_dotquote                  : 0061e5
- z_dots                      : 00622c
- z_dplus                     : 0066bd
- z_drop                      : 00672f
- z_dtos                      : 0066d7
- z_dtrailing                 : 006314
- z_dump                      : 006756
- z_dup                       : 00675b
- z_equal                     : 006320
- z_erase                     : 00677d
- z_evaluate                  : 0067ac
- z_execute                   : 0067ba
- z_fetch                     : 0062c6
- z_fill                      : 00677d
- z_find-name                 : 006811
- z_fmmod                     : 006865
- z_fromr                     : 006ad3
- z_greater                   : 006120
- z_hash                      : 00628e
- z_hashs                     : 0062a6
- z_here                      : 00687b
- z_hex                       : 006881
- z_hold                      : 00688f
- z_immediate                 : 00686e
- z_invert                    : 006874
- z_latestnt                  : 006897
- z_latestxt                  : 0068a7
- z_leftbracket               : 0062cf
- z_less                      : 0060f6
- z_lessnumber                : 00610c
- z_literal                   : 0068b9
- z_lshift                    : 0068da
- z_max                       : 00690d
- z_min                       : 006920
- z_minus                     : 0062f4
- z_move                      : 006932
- z_mrot                      : 0062fd
- z_mstar                     : 0068fa
- z_name-int                  : 00693a
- z_name-string               : 00694b
- z_native-compile            : 006954
- z_negate                    : 00695b
- z_nip                       : 00695e
- z_not-equal                 : 006102
- z_number                    : 0069e2
- z_numbermore                : 00629d
- z_one                       : 00637d
- z_one-minus                 : 00637f
- z_one-plus                  : 006381
- z_or                        : 0069e9
- z_over                      : 0069f0
- z_pad                       : 0069fc
- z_page                      : 006a09
- z_parse                     : 006a6e
- z_parse-name                : 006a6e
- z_pick                      : 006a7c
- z_plus                      : 0062e9
- z_plusstore                 : 006a8c
- z_postpone                  : 006ac2
- z_qdup                      : 0062b5
- z_question                  : 0062ad
- z_quit                      : 0060e2
- z_refill                    : 006afb
- z_rfetch                    : 006acb
- z_rightbracket              : 0062d5
- z_rot                       : 006b04
- z_rshift                    : 006b18
- z_semicolon                 : 006273
- z_sign                      : 006b6c
- z_slashstring               : 0061a3
- z_sliteral                  : 006bb7
- z_smrem                     : 006c27
- z_source                    : 006c34
- z_source-id                 : 006c3b
- z_space                     : 006c42
- z_spaces                    : 006c4f
- z_squote                    : 006b4e
- z_star                      : 006c57
- z_state                     : 006c5f
- z_stod                      : 006b5e
- z_store                     : 0062c1
- z_swap                      : 006c65
- z_tick                      : 0063fa
- z_to                        : 006c6f
- z_to-in                     : 00612c
- z_tobody                    : 006124
- z_tonumber                  : 006189
- z_tor                       : 006191
- z_true                      : 006c77
- z_tuck                      : 006c80
- z_two                       : 006389
- z_two-star                  : 00638d
- z_tworfetch                 : 0063ba
- z_type                      : 006ca1
- z_udmod                     : 006cbd
- z_ummod                     : 006d6c
- z_umstar                    : 006d1b
- z_unused                    : 006d78
- z_variable                  : 006d85
- z_words                     : 006dc9
- z_wordsize                  : 006ddc
- z_wordsnsizes               : 006dc9
- z_xor                       : 006de3
- z_zbranch                   : 00635e
- z_zero                      : 006328
- z_zero-equal                : 006334
- z_zero-less                 : 006340
- z_zero-more                 : 006357
- z_zero-notequal             : 00634c
- zb_done                     : 006370
- zb_zero                     : 006367
- zbranch_rt                  : 00635f
- ze_not_zero                 : 006331
- zero-less-is-less           : 00633d
- zero-more_done              : 006356
- zero-more_true              : 006355
- zne_is_zero                 : 006349
