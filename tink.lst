A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Mon Sep 18 01:38:30 2017
Target MPU: 65816
External files loaded: 5
Number of passes executed: 35
Number of steps executed: 11
Assembly time: 0.12549 seconds
Code origin: 005000
Bytes of machine code: 9056

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 18. Sep 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE dir | em  8  8 |        |             |         .origin 5000                 start of code to save to built-in RAM
  11:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE lbl | em  8  8 | 005000 |             | code0                                ; used to calculate UNUSED
  14:000 | DONE wsp | em  8  8 |        |             |
  15:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  18:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  18:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  18:003 | DONE cmt | em  8  8 |        |             | ; This version: 09. June 2017
  18:004 | DONE wsp | em  8  8 |        |             |
  18:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  18:006 | DONE wsp | em  8  8 |        |             |
  18:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  18:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  18:009 | DONE wsp | em  8  8 |        |             |
  18:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  18:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  18:012 | DONE wsp | em  8  8 |        |             |
  18:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  18:014 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP
  18:015 | DONE cmt | em  8  8 |        |             | ; We reuse the memory that the Mensch Monitor had been using
  18:016 | DONE wsp | em  8  8 |        |             |
  18:017 | DONE cmt | em  8  8 |        |             |         ; TODO add any extra RAM in other banks
  18:018 | DONE cmt | em  8  8 |        |             |         ; TODO add stuff for multitasking
  18:019 | DONE wsp | em  8  8 |        |             |
  18:020 | DONE cmt | em  8  8 |        |             |         ;  00:0000  +-------------------+  ram-start, dpage, user0
  18:021 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:022 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Data Stack    |  <-- dsp
  18:023 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  18:024 | DONE cmt | em  8  8 |        |             |         ;  00:0100  +-------------------+  dsp0, stack
  18:025 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:026 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Return Stack  |  <-- rsp
  18:027 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  18:028 | DONE cmt | em  8  8 |        |             |         ;  00:0200  +-------------------+  rsp0, buffer, buffer0
  18:029 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  18:030 | DONE cmt | em  8  8 |        |             |         ;           |  v  Input Buffer  |
  18:031 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:032 | DONE cmt | em  8  8 |        |             |         ;  00:0300  +-------------------+  cp0
  18:033 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  18:034 | DONE cmt | em  8  8 |        |             |         ;           |  v  Dictionary    |  <-- cp
  18:035 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:036 | DONE cmt | em  8  8 |        |             |         ;   (...)   ~~~~~~~~~~~~~~~~~~~~~
  18:037 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:038 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:039 | DONE cmt | em  8  8 |        |             |         ;  00:7fff  +-------------------+  ram-end
  18:040 | DONE wsp | em  8  8 |        |             |
  18:041 | DONE cmt | em  8  8 |        |             |         ; Hard physical addresses
  18:042 | DONE dir | em  8  8 |        |             |         .equ ram-start  0000         start of installed RAM
  18:043 | DONE dir | em  8  8 |        |             |         .equ ram-end { 8000 - 1 }    end of 32k installed RAM
  18:044 | DONE wsp | em  8  8 |        |             |
  18:045 | DONE cmt | em  8  8 |        |             |         ; Soft physical addresses
  18:046 | DONE dir | em  8  8 |        |             |         .equ dpage      ram-start    direct page:       0000 - 00ff
  18:047 | DONE dir | em  8  8 |        |             |         .equ stack { 000000 + 0100 } return stack area: 0100 - 01ff
  18:048 | DONE dir | em  8  8 |        |             |         .equ buffer0 { stack + 0100 } buffer areas:      0200 - 02ff
  18:049 | DONE wsp | em  8  8 |        |             |
  18:050 | DONE cmt | em  8  8 |        |             |         ; Defined locations
  18:051 | DONE dir | em  8  8 |        |             |         .equ user0      dpage        user and system variables
  18:052 | DONE dir | em  8  8 |        |             |         .equ dsp0 { stack - 1 }      initial Data Stack Pointer:   00ff
  18:053 | DONE dir | em  8  8 |        |             |         .equ stack0 { buffer0 - 1 }  initial Return Stack Pointer: 01ff
  18:054 | DONE wsp | em  8  8 |        |             |
  18:055 | DONE cmt | em  8  8 |        |             |         ; Buffers
  18:056 | DONE dir | em  8  8 |        |             |         .equ bsize      0080         size of input/output buffers
  18:057 | DONE dir | em  8  8 |        |             |         .equ buffer1 { buffer0 + 000080 } output buffer 0280 (UNUSED)
  18:058 | DONE wsp | em  8  8 |        |             |
  18:059 | DONE cmt | em  8  8 |        |             |         ; Dictionary RAM
  18:060 | DONE dir | em  8  8 |        |             |         .equ cp0 { buffer1 + 000080 } Dictionary starts after last buffer
  18:061 | DONE dir | em  8  8 |        |             |         .equ cp-end { code0 - 1 }    Last RAM byte available
  18:062 | DONE wsp | em  8  8 |        |             |
  18:063 | DONE cmt | em  8  8 |        |             |         ; Other locations
  18:064 | DONE dir | em  8  8 |        |             |         .equ padoffset  0ff          offset from CP to PAD (holds number strings)
  18:065 | DONE wsp | em  8  8 |        |             |
  18:066 | DONE wsp | em  8  8 |        |             |
  18:067 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  18:068 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  18:069 | DONE wsp | em  8  8 |        |             |
  18:070 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  18:071 | DONE cmt | em  8  8 |        |             | ; TODO rewrite with USER variables
  18:072 | DONE dir | em  8  8 |        |             |         .equ cp { 000000 + &00 }     Compiler Pointer, 2 bytes
  18:073 | DONE dir | em  8  8 |        |             |         .equ dp { 000000 + &02 }     Dictionary Pointer, 2 bytes
  18:074 | DONE dir | em  8  8 |        |             |         .equ workword { 000000 + &04 } nt (not xt) of word being compiled
  18:075 | DONE dir | em  8  8 |        |             |         .equ insrc { 000000 + &06 }  Input Source for SOURCE-ID
  18:076 | DONE dir | em  8  8 |        |             |         .equ cib { 000000 + &08 }    Address of current input buffer
  18:077 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000000 + &10 } Length of current input buffer
  18:078 | DONE dir | em  8  8 |        |             |         .equ toin { 000000 + &12 }   Pointer to CIB (>IN in Forth)
  18:079 | DONE dir | em  8  8 |        |             |         .equ output { 000000 + &14 } Jump target for EMIT
  18:080 | DONE dir | em  8  8 |        |             |         .equ input { 000000 + &16 }  Jump target for KEY
  18:081 | DONE dir | em  8  8 |        |             |         .equ havekey { 000000 + &18 } Jump target for KEY?
  18:082 | DONE dir | em  8  8 |        |             |         .equ state { 000000 + &20 }  STATE: -1 compile, 0 interpret
  18:083 | DONE dir | em  8  8 |        |             |         .equ base { 000000 + &22 }   Radix for number conversion
  18:084 | DONE dir | em  8  8 |        |             |         .equ tohold { 000000 + &24 } Pointer for formatted output
  18:085 | DONE dir | em  8  8 |        |             |         .equ tmpbranch { 000000 + &26 } temp storage for 0BRANCH, BRANCH only
  18:086 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000000 + &28 }   Temporary storage
  18:087 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000000 + &30 }   Temporary storage
  18:088 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000000 + &32 }   Temporary storage
  18:089 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000000 + &34 } Temporary DSP (X) storage, 2 bytes
  18:090 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000000 + &36 } Temporary TOS (Y) storage, 2 bytes
  18:091 | DONE dir | em  8  8 |        |             |         .equ nc_limit { 000000 + &38 } Holds limit for Native Compile size
  18:092 | DONE dir | em  8  8 |        |             |         .equ scratch { 000000 + &40 } 8 byte scratchpad (see UM/MOD)
  18:093 | DONE wsp | em  8  8 |        |             |
  18:094 | DONE wsp | em  8  8 |        |             |
  18:095 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  18:096 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  18:097 | DONE wsp | em  8  8 |        |             |
  18:098 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  18:099 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  18:100 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  18:101 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  18:102 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  18:103 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  18:104 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  18:105 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  18:106 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  18:107 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  18:108 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  18:109 | DONE wsp | em  8  8 |        |             |
  18:110 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four bits are currently unused
  18:111 | DONE dir | em  8  8 |        |             |         .equ CO 0001                 Compile Only
  18:112 | DONE dir | em  8  8 |        |             |         .equ AN 0002                 Always Native Compile
  18:113 | DONE dir | em  8  8 |        |             |         .equ IM 0004                 Immediate Word
  18:114 | DONE dir | em  8  8 |        |             |         .equ NN 0008                 Never Native Compile
  18:115 | DONE wsp | em  8  8 |        |             |
  19:000 | DONE wsp | em  8  8 |        |             |
  20:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  21:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One (very ALPHA) for the crude65816 emulator,
  22:000 | DONE cmt | em  8  8 |        |             | ; and one for the 265sxb board. Only use one. Which ever kernel file is used, it
  23:000 | DONE cmt | em  8  8 |        |             | ; must contain at least the routines put_chr, get_chr and have_chr, which work
  24:000 | DONE cmt | em  8  8 |        |             | ; on the A register
  25:000 | DONE wsp | em  8  8 |        |             |
  26:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  26:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  26:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  26:003 | DONE cmt | em  8  8 |        |             | ; This version: 19. Mar 2017
  26:004 | DONE wsp | em  8  8 |        |             |
  26:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing at the
  26:006 | DONE cmt | em  8  8 |        |             | ; very least the the PUT_CHR, GET_CHR and HAVE_CHR routines that Liara Forth
  26:007 | DONE cmt | em  8  8 |        |             | ; uses. These MUST BE PRESENT. It is in its own section to make porting Forth
  26:008 | DONE cmt | em  8  8 |        |             | ; to other machines easier.
  26:009 | DONE wsp | em  8  8 |        |             |
  26:010 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  26:011 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  26:012 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  26:013 | DONE cmt | em  8  8 |        |             | ; following license:
  26:014 | DONE cmt | em  8  8 |        |             | ;
  26:015 | DONE cmt | em  8  8 |        |             | ;     This work is made available under the terms of the Creative Commons
  26:016 | DONE cmt | em  8  8 |        |             | ;     Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  26:017 | DONE cmt | em  8  8 |        |             | ;     following URL to see the details.
  26:018 | DONE cmt | em  8  8 |        |             | ;     http://creativecommons.org/licenses/by-nc-sa/4.0/
  26:019 | DONE wsp | em  8  8 |        |             |
  26:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  26:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  26:022 | DONE wsp | em  8  8 |        |             |
  26:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  26:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  26:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  26:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  26:027 | DONE wsp | em  8  8 |        |             |
  26:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  26:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  26:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  26:031 | DONE cmt | em  8  8 |        |             | ;
  26:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  26:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  26:034 | DONE wsp | em  8  8 |        |             |
  26:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  26:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  26:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  26:038 | DONE wsp | em  8  8 |        |             |
  26:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  26:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  26:041 | DONE wsp | em  8  8 |        |             |
  26:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  26:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  26:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  26:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  26:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  26:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  26:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  26:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  26:050 | DONE wsp | em  8  8 |        |             |
  26:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  26:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  26:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  26:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  26:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  26:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  26:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  26:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  26:059 | DONE wsp | em  8  8 |        |             |
  26:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  26:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  26:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  26:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  26:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  26:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  26:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  26:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  26:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  26:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  26:070 | DONE wsp | em  8  8 |        |             |
  26:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  26:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  26:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  26:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  26:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  26:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  26:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  26:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  26:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  26:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  26:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  26:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  26:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  26:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  26:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  26:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  26:087 | DONE wsp | em  8  8 |        |             |
  26:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  26:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  26:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  26:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  26:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  26:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  26:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  26:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  26:096 | DONE wsp | em  8  8 |        |             |
  26:097 | DONE wsp | em  8  8 |        |             |
  26:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  26:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  26:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting.
  26:101 | DONE cmt | em  8  8 |        |             | ; Note this does not reset the MPU, which is done by the main Forth code
  26:102 | DONE lbl | em  8  8 | 005000 |             | reset_hardware                       
  26:103 | DONE ins | em  8  8 | 005000 | 78          |                 sei                  
  26:104 | DONE ins | em  8  8 | 005001 | 18          |                 clc                  
  26:105 | DONE ins | em  8  8 | 005002 | fb          |                 xce                  
  26:106 | DONE ctl | na  8  8 |        |             |         .!native
  26:107 | DONE ins | na  8  8 | 005003 | c2 10       |                 rep 10               
  26:108 | DONE ctl | na  8 16 |        |             |         .!xy16
  26:109 | DONE ins | na  8 16 | 005005 | e2 20       |                 sep 20               
  26:110 | DONE ctl | na  8 16 |        |             |         .!a8
  26:111 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  26:112 | DONE ins | na  8 16 | 005007 | a2 ff 01    |                 ldx.# 01ff           
  26:113 | DONE ins | na  8 16 | 00500a | 9a          |                 txs                  
  26:114 | DONE wsp | na  8 16 |        |             |
  26:115 | DONE ins | na  8 16 | 00500b | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  26:116 | DONE wsp | na  8 16 |        |             |
  26:117 | DONE ins | na  8 16 | 00500e | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  26:118 | DONE ins | na  8 16 | 005010 | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  26:119 | DONE ins | na  8 16 | 005013 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  26:120 | DONE wsp | na  8 16 |        |             |
  26:121 | DONE ins | na  8 16 | 005016 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  26:122 | DONE ins | na  8 16 | 005018 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  26:123 | DONE ins | na  8 16 | 00501b | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  26:124 | DONE ins | na  8 16 | 00501d | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  26:125 | DONE ins | na  8 16 | 005020 | a9 00       |                 lda.# .msb 00000b    
  26:126 | DONE ins | na  8 16 | 005022 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  26:127 | DONE ins | na  8 16 | 005025 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  26:128 | DONE ins | na  8 16 | 005027 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  26:129 | DONE wsp | na  8 16 |        |             |
  26:130 | DONE ins | na  8 16 | 00502a | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  26:131 | DONE ins | na  8 16 | 00502c | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  26:132 | DONE wsp | na  8 16 |        |             |
  26:133 | DONE ins | na  8 16 | 00502f | c2 20       |                 rep 20               
  26:134 | DONE ctl | na 16 16 |        |             |         .!a16
  26:135 | DONE ins | na 16 16 | 005031 | 4c 64 50    |                 jmp 005064           we return with A as 8 bits
  26:136 | DONE wsp | na 16 16 |        |             |
  26:137 | DONE wsp | na 16 16 |        |             |
  26:138 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  26:139 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  26:140 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  26:141 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. This handles all the register size stuff, and does not need to be
  26:142 | DONE cmt | na 16 16 |        |             | ; called with a 8-bit Y register as TOS. This is only called directly by EMIT
  26:143 | DONE cmt | na 16 16 |        |             | ; through the OUTPUT variable. In Forth, this is refered to as UART0
  26:144 | DONE lbl | na 16 16 | 005034 |             | put_chr                              
  26:145 | DONE ins | na 16 16 | 005034 | e2 20       |                 sep 20               
  26:146 | DONE ctl | na  8 16 |        |             |         .!a8
  26:147 | DONE ins | na  8 16 | 005036 | 48          |                 pha                  
  26:148 | DONE ins | na  8 16 | 005037 | a9 02       |                 lda.# 02             (1<<1)
  26:149 | DONE wsp | na  8 16 |        |             |
  26:150 | DONE lbl | na  8 16 | 005039 |             | put_chr_wait                         
  26:151 | DONE ins | na  8 16 | 005039 | 2c 48 df    |                 bit 00df48           timer finished?
  26:152 | DONE ins | na  8 16 | 00503c | f0 fb       |                 beq 005039           
  26:153 | DONE wsp | na  8 16 |        |             |
  26:154 | DONE ins | na  8 16 | 00503e | 68          |                 pla                  
  26:155 | DONE ins | na  8 16 | 00503f | 8d 71 df    |                 sta 00df71           transmit char
  26:156 | DONE ins | na  8 16 | 005042 | c2 20       |                 rep 20               
  26:157 | DONE ctl | na 16 16 |        |             |         .!a16
  26:158 | DONE wsp | na 16 16 |        |             |
  26:159 | DONE ins | na 16 16 | 005044 | 60          |                 rts                  
  26:160 | DONE wsp | na 16 16 |        |             |
  26:161 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  26:162 | DONE cmt | na 16 16 |        |             | ; GET_CHR
  26:163 | DONE cmt | na 16 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  26:164 | DONE cmt | na 16 16 |        |             | ; if the buffer is empty. This is handled by KEY through the INPUT variable
  26:165 | DONE cmt | na 16 16 |        |             | ; Note the routine returns its value through A - getting it TOS is the caller's
  26:166 | DONE cmt | na 16 16 |        |             | ; problem
  26:167 | DONE lbl | na 16 16 | 005045 |             | get_chr                              
  26:168 | DONE ins | na 16 16 | 005045 | e2 20       |                 sep 20               
  26:169 | DONE ctl | na  8 16 |        |             |         .!a8
  26:170 | DONE ins | na  8 16 | 005047 | a9 01       |                 lda.# 01             (1<<0)
  26:171 | DONE wsp | na  8 16 |        |             |
  26:172 | DONE lbl | na  8 16 | 005049 |             | get_chr_wait                         
  26:173 | DONE ins | na  8 16 | 005049 | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  26:174 | DONE ins | na  8 16 | 00504c | f0 fb       |                 beq 005049           No, keep waiting
  26:175 | DONE ins | na  8 16 | 00504e | ad 71 df    |                 lda 00df71           Yes, read it
  26:176 | DONE ins | na  8 16 | 005051 | c2 20       |                 rep 20               
  26:177 | DONE ctl | na 16 16 |        |             |         .!a16
  26:178 | DONE ins | na 16 16 | 005053 | 29 ff 00    |                 and.# 00ff           paranoid
  26:179 | DONE wsp | na 16 16 |        |             |
  26:180 | DONE ins | na 16 16 | 005056 | 60          |                 rts                  
  26:181 | DONE wsp | na 16 16 |        |             |
  26:182 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  26:183 | DONE cmt | na 16 16 |        |             | ; HAVE_CHR
  26:184 | DONE cmt | na 16 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  26:185 | DONE cmt | na 16 16 |        |             | ; some. This should be handled by KEY? through the HAVEKEY variable
  26:186 | DONE lbl | na 16 16 | 005057 |             | have_chr                             
  26:187 | DONE ins | na 16 16 | 005057 | 18          |                 clc                  
  26:188 | DONE ins | na 16 16 | 005058 | e2 20       |                 sep 20               
  26:189 | DONE ctl | na  8 16 |        |             |         .!a8
  26:190 | DONE ins | na  8 16 | 00505a | ad 48 df    |                 lda 00df48           read the status register
  26:191 | DONE ins | na  8 16 | 00505d | 6a          |                 ror.a                shift hw_uart0r bit into carry
  26:192 | DONE ins | na  8 16 | 00505e | c2 20       |                 rep 20               
  26:193 | DONE ctl | na 16 16 |        |             |         .!a16
  26:194 | DONE wsp | na 16 16 |        |             |
  26:195 | DONE ins | na 16 16 | 005060 | 60          |                 rts                  
  26:196 | DONE wsp | na 16 16 |        |             |
  26:197 | DONE cmt | na 16 16 |        |             | ; END
  27:000 | DONE cmt | na 16 16 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE wsp | na 16 16 |        |             |
  30:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  31:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  34:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  35:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  36:000 | DONE wsp | na 16 16 |        |             |
  37:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  38:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  39:000 | DONE cmt | na 16 16 |        |             | ; Reset the Forth system. Use BYE to return to the Mensch Monitor.
  40:000 | DONE lbl | na 16 16 | 005061 |             | xt_cold                              
  41:000 | DONE wsp | na 16 16 |        |             |
  42:000 | DONE ins | na 16 16 | 005061 | 4c 00 50    |                 jmp 005000           don't use JSR, jump back to start
  43:000 | DONE lbl | na 16 16 | 005064 |             | start                                
  44:000 | DONE dir | na 16 16 |        |             |         .!native                     these should have been handled by hardware reset
  45:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  46:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  47:000 | DONE ins | na 16 16 | 005064 | 78          |                 sei                  
  48:000 | DONE wsp | na 16 16 |        |             |
  49:000 | DONE cmt | na 16 16 |        |             |                 ; Initialize the Return Stack (65816 stack)
  50:000 | DONE ins | na 16 16 | 005065 | a2 ff 01    |                 ldx.# 0001ff         01ff
  51:000 | DONE ins | na 16 16 | 005068 | 9a          |                 txs                  
  52:000 | DONE wsp | na 16 16 |        |             |
  53:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack. This is repeated in ABORT, but we have no
  54:000 | DONE cmt | na 16 16 |        |             |                 ; choice if we want to load high-level words via EVALUATE
  55:000 | DONE ins | na 16 16 | 005069 | a0 00 00    |                 ldy.# 0000           
  56:000 | DONE ins | na 16 16 | 00506c | a2 ff 00    |                 ldx.# 0000ff         
  57:000 | DONE wsp | na 16 16 |        |             |
  58:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  59:000 | DONE ins | na 16 16 | 00506f | a9 0a 00    |                 lda.# 000a           
  60:000 | DONE ins | na 16 16 | 005072 | 85 16       |                 sta.d 000016         
  61:000 | DONE wsp | na 16 16 |        |             |
  62:000 | DONE cmt | na 16 16 |        |             |                 ; We start out with smaller words with less than 20 bytes being
  63:000 | DONE cmt | na 16 16 |        |             |                 ; natively compiled, because this includes words like LSHIFT and MAX.
  64:000 | DONE ins | na 16 16 | 005074 | a9 14 00    |                 lda.# &0020          
  65:000 | DONE ins | na 16 16 | 005077 | 85 26       |                 sta.d 000026         
  66:000 | DONE wsp | na 16 16 |        |             |
  67:000 | DONE cmt | na 16 16 |        |             |                 ; set the OUTPUT vector to the default, which is always put_chr,
  68:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms
  69:000 | DONE ins | na 16 16 | 005079 | a9 34 50    |                 lda.# 005034         
  70:000 | DONE ins | na 16 16 | 00507c | 85 0e       |                 sta.d 00000e         
  71:000 | DONE wsp | na 16 16 |        |             |
  72:000 | DONE cmt | na 16 16 |        |             |                 ; set the INPUT vector to the default, which is always get_chr,
  73:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms
  74:000 | DONE ins | na 16 16 | 00507e | a9 45 50    |                 lda.# 005045         
  75:000 | DONE ins | na 16 16 | 005081 | 85 10       |                 sta.d 000010         
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; set the HAVE_KEY vector to the default, which is always
  78:000 | DONE cmt | na 16 16 |        |             |                 ; have_chr, but may have synonyms
  79:000 | DONE ins | na 16 16 | 005083 | a9 57 50    |                 lda.# 005057         
  80:000 | DONE ins | na 16 16 | 005086 | 85 12       |                 sta.d 000012         
  81:000 | DONE wsp | na 16 16 |        |             |
  82:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free byte
  83:000 | DONE cmt | na 16 16 |        |             |                 ; in the Dictionary
  84:000 | DONE ins | na 16 16 | 005088 | a9 00 03    |                 lda.# 000300         
  85:000 | DONE ins | na 16 16 | 00508b | 85 00       |                 sta.d 000000         
  86:000 | DONE wsp | na 16 16 |        |             |
  87:000 | DONE ins | na 16 16 | 00508d | a9 00 02    |                 lda.# 000200         
  88:000 | DONE ins | na 16 16 | 005090 | 85 08       |                 sta.d 000008         input buffer
  89:000 | DONE ins | na 16 16 | 005092 | 64 0a       |                 stz.d 00000a         input buffer starts empty
  90:000 | DONE ins | na 16 16 | 005094 | 64 06       |                 stz.d 000006         SOURCE-ID is zero
  91:000 | DONE ins | na 16 16 | 005096 | 64 14       |                 stz.d 000014         STATE is zero (interpret mode)
  92:000 | DONE wsp | na 16 16 |        |             |
  93:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  94:000 | DONE cmt | na 16 16 |        |             |                 ; new Dictionary, so we start off the Dictionary Pointer (DP)
  95:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  96:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  97:000 | DONE ins | na 16 16 | 005098 | a9 ae 69    |                 lda.# 0069ae         
  98:000 | DONE ins | na 16 16 | 00509b | 85 02       |                 sta.d 000002         
  99:000 | DONE wsp | na 16 16 |        |             |
 100:000 | DONE cmt | na 16 16 |        |             |                 ; Clear the screen, assumes vt100 terminal
 101:000 | DONE ins | na 16 16 | 00509d | 20 66 5c    |                 jsr 005c66           
 102:000 | DONE wsp | na 16 16 |        |             |
 103:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
 104:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
 105:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
 106:000 | DONE ins | na 16 16 | 0050a0 | ca          |                 dex                  
 107:000 | DONE ins | na 16 16 | 0050a1 | ca          |                 dex                  
 108:000 | DONE ins | na 16 16 | 0050a2 | ca          |                 dex                  
 109:000 | DONE ins | na 16 16 | 0050a3 | ca          |                 dex                  
 110:000 | DONE ins | na 16 16 | 0050a4 | a9 c3 6a    |                 lda.# 006ac3         
 111:000 | DONE ins | na 16 16 | 0050a7 | 95 00       |                 sta.dx 00            Start address goes in NOS
 112:000 | DONE ins | na 16 16 | 0050a9 | a0 ed 06    |                 ldy.# 0006ed         length goes in TOS
 113:000 | DONE wsp | na 16 16 |        |             |
 114:000 | DONE ins | na 16 16 | 0050ac | 20 17 59    |                 jsr 005917           
 115:000 | DONE wsp | na 16 16 |        |             |
 116:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
 117:000 | DONE wsp | na 16 16 |        |             |
 118:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 119:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
 120:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
 121:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 122:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 123:000 | DONE lbl | na 16 16 | 0050af |             | xt_abort                             
 124:000 | DONE ins | na 16 16 | 0050af | c2 20       |                 rep 20               
 124:001 | DONE ctl | na 16 16 |        |             |         .!a16
 125:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 126:000 | DONE ins | na 16 16 | 0050b1 | a0 00 00    |                 ldy.# 0000           
 127:000 | DONE ins | na 16 16 | 0050b4 | a2 ff 00    |                 ldx.# 0000ff         
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE wsp | na 16 16 |        |             |
 130:000 | DONE cmt | na 16 16 |        |             |                 ; drops through to QUIT, z_abort is the same as z_quit.
 131:000 | DONE wsp | na 16 16 |        |             |
 132:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 133:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 134:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 135:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 136:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 137:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output, this follows Gforth.
 138:000 | DONE lbl | na 16 16 | 0050b7 |             | xt_quit                              
 139:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 140:000 | DONE ins | na 16 16 | 0050b7 | a9 ff 01    |                 lda.# 0001ff         
 141:000 | DONE ins | na 16 16 | 0050ba | 1b          |                 tcs                  
 142:000 | DONE wsp | na 16 16 |        |             |
 143:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 144:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 145:000 | DONE ins | na 16 16 | 0050bb | 9c 46 59    |                 stz 005946           
 146:000 | DONE wsp | na 16 16 |        |             |
 147:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 148:000 | DONE ins | na 16 16 | 0050be | 64 06       |                 stz.d 000006         
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 151:000 | DONE ins | na 16 16 | 0050c0 | 64 14       |                 stz.d 000014         
 152:000 | DONE wsp | na 16 16 |        |             |
 153:000 | DONE lbl | na 16 16 | 0050c2 |             | quit_get_line                        
 154:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer
 155:000 | DONE ins | na 16 16 | 0050c2 | 64 0a       |                 stz.d 00000a         
 156:000 | DONE wsp | na 16 16 |        |             |
 157:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 158:000 | DONE ins | na 16 16 | 0050c4 | 20 57 5d    |                 jsr 005d57           ( -- f )
 159:000 | DONE wsp | na 16 16 |        |             |
 160:000 | DONE ins | na 16 16 | 0050c7 | 98          |                 tya                  force flag test
 161:000 | DONE ins | na 16 16 | 0050c8 | d0 06       |                 bne 0050d0           
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 164:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 165:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 166:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 167:000 | DONE ins | na 16 16 | 0050ca | a9 6a 72    |                 lda.# 00726a         
 168:000 | DONE ins | na 16 16 | 0050cd | 4c 70 6a    |                 jmp 006a70           
 169:000 | DONE wsp | na 16 16 |        |             |
 170:000 | DONE wsp | na 16 16 |        |             |
 171:000 | DONE lbl | na 16 16 | 0050d0 |             | quit_refill_successful               
 172:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 173:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address cib and length of input in ciblen. We
 174:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here still with the TRUE flag from REFILL as TOS (in Y)
 175:000 | DONE ins | na 16 16 | 0050d0 | b4 00       |                 ldy.dx 00            drop TOS
 176:000 | DONE ins | na 16 16 | 0050d2 | e8          |                 inx                  
 177:000 | DONE ins | na 16 16 | 0050d3 | e8          |                 inx                  
 178:000 | DONE wsp | na 16 16 |        |             |
 179:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 180:000 | DONE ins | na 16 16 | 0050d4 | 64 0c       |                 stz.d 00000c         
 181:000 | DONE wsp | na 16 16 |        |             |
 182:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine
 183:000 | DONE ins | na 16 16 | 0050d6 | 20 eb 69    |                 jsr 0069eb           
 184:000 | DONE wsp | na 16 16 |        |             |
 185:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 186:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow
 187:000 | DONE ins | na 16 16 | 0050d9 | e0 00 01    |                 cpx.# 000100         
 188:000 | DONE ins | na 16 16 | 0050dc | 90 06       |                 bcc 0050e4           DSP must always be smaller (!) than DSP0
 189:000 | DONE wsp | na 16 16 |        |             |
 190:000 | DONE ins | na 16 16 | 0050de | a9 d0 72    |                 lda.# 0072d0         
 191:000 | DONE ins | na 16 16 | 0050e1 | 4c 70 6a    |                 jmp 006a70           
 192:000 | DONE wsp | na 16 16 |        |             |
 193:000 | DONE lbl | na 16 16 | 0050e4 |             | quit_ok                              
 194:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 195:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 196:000 | DONE ins | na 16 16 | 0050e4 | a5 14       |                 lda.d 000014         
 197:000 | DONE ins | na 16 16 | 0050e6 | d0 05       |                 bne 0050ed           
 198:000 | DONE wsp | na 16 16 |        |             |
 199:000 | DONE ins | na 16 16 | 0050e8 | a9 b0 71    |                 lda.# 0071b0         
 200:000 | DONE ins | na 16 16 | 0050eb | 80 03       |                 bra 0050f0           
 201:000 | DONE lbl | na 16 16 | 0050ed |             | quit_compiled                        
 202:000 | DONE ins | na 16 16 | 0050ed | a9 b4 71    |                 lda.# 0071b4         fall through to quit_print
 203:000 | DONE lbl | na 16 16 | 0050f0 |             | quit_print                           
 204:000 | DONE ins | na 16 16 | 0050f0 | 20 76 6a    |                 jsr 006a76           
 205:000 | DONE wsp | na 16 16 |        |             |
 206:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody! Now get the next one
 207:000 | DONE ins | na 16 16 | 0050f3 | 4c c2 50    |                 jmp 0050c2           
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE lbl | na 16 16 | 0050f6 |             | z_cold                               
 210:000 | DONE lbl | na 16 16 | 0050f6 |             | z_abort                              
 211:000 | DONE lbl | na 16 16 | 0050f6 |             | z_quit                               ; empty, no RTS required
 212:000 | DONE wsp | na 16 16 |        |             |
 213:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 214:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 215:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 216:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 217:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 218:000 | DONE lbl | na 16 16 | 0050f6 |             | xt_less                              
 219:000 | DONE ins | na 16 16 | 0050f6 | 98          |                 tya                  
 220:000 | DONE ins | na 16 16 | 0050f7 | a0 00 00    |                 ldy.# 0000           default is false
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE ins | na 16 16 | 0050fa | 38          |                 sec                  
 223:000 | DONE ins | na 16 16 | 0050fb | f5 00       |                 sbc.dx 00            
 224:000 | DONE ins | na 16 16 | 0050fd | f0 08       |                 beq 005107           the same is not greater
 225:000 | DONE ins | na 16 16 | 0050ff | 50 03       |                 bvc 005104           no overflow, skip ahead
 226:000 | DONE wsp | na 16 16 |        |             |
 227:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 228:000 | DONE ins | na 16 16 | 005101 | 49 00 80    |                 eor.# 8000           compliment negative flag
 229:000 | DONE wsp | na 16 16 |        |             |
 230:000 | DONE lbl | na 16 16 | 005104 |             | less_no_ov                           
 231:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 232:000 | DONE ins | na 16 16 | 005104 | 30 01       |                 bmi 005107           
 233:000 | DONE ins | na 16 16 | 005106 | 88          |                 dey                  
 234:000 | DONE lbl | na 16 16 | 005107 |             | less_nip                             
 235:000 | DONE ins | na 16 16 | 005107 | e8          |                 inx                  
 236:000 | DONE ins | na 16 16 | 005108 | e8          |                 inx                  
 237:000 | DONE wsp | na 16 16 |        |             |
 238:000 | DONE lbl | na 16 16 | 005109 |             | z_less                               
 238:001 | DONE ins | na 16 16 | 005109 | 60          |                 rts                  
 239:000 | DONE wsp | na 16 16 |        |             |
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 242:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 243:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 244:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 245:000 | DONE lbl | na 16 16 | 00510a |             | xt_not-equal                         
 246:000 | DONE ins | na 16 16 | 00510a | 98          |                 tya                  
 247:000 | DONE ins | na 16 16 | 00510b | a0 00 00    |                 ldy.# 0000           default value is false
 248:000 | DONE wsp | na 16 16 |        |             |
 249:000 | DONE ins | na 16 16 | 00510e | d5 00       |                 cmp.dx 00            
 250:000 | DONE ins | na 16 16 | 005110 | f0 01       |                 beq 005113           
 251:000 | DONE ins | na 16 16 | 005112 | 88          |                 dey                  wraps to 0FFFF (true)
 252:000 | DONE wsp | na 16 16 |        |             |
 253:000 | DONE lbl | na 16 16 | 005113 |             | not-equal_equal                      ; yes, this is a silly name
 254:000 | DONE ins | na 16 16 | 005113 | e8          |                 inx                  
 255:000 | DONE ins | na 16 16 | 005114 | e8          |                 inx                  
 256:000 | DONE wsp | na 16 16 |        |             |
 257:000 | DONE lbl | na 16 16 | 005115 |             | z_not-equal                          
 257:001 | DONE ins | na 16 16 | 005115 | 60          |                 rts                  
 258:000 | DONE wsp | na 16 16 |        |             |
 259:000 | DONE wsp | na 16 16 |        |             |
 260:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 261:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 262:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 263:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 264:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 265:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 266:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 267:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 268:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 269:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 270:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 271:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 272:000 | DONE lbl | na 16 16 | 005116 |             | xt_lessnumber                        
 273:000 | DONE ins | na 16 16 | 005116 | 20 5a 5c    |                 jsr 005c5a           
 274:000 | DONE ins | na 16 16 | 005119 | 84 18       |                 sty.d 000018         
 275:000 | DONE wsp | na 16 16 |        |             |
 276:000 | DONE ins | na 16 16 | 00511b | b4 00       |                 ldy.dx 00            
 277:000 | DONE ins | na 16 16 | 00511d | e8          |                 inx                  
 278:000 | DONE ins | na 16 16 | 00511e | e8          |                 inx                  
 279:000 | DONE wsp | na 16 16 |        |             |
 280:000 | DONE lbl | na 16 16 | 00511f |             | z_lessnumber                         
 280:001 | DONE ins | na 16 16 | 00511f | 60          |                 rts                  
 281:000 | DONE wsp | na 16 16 |        |             |
 282:000 | DONE wsp | na 16 16 |        |             |
 283:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 284:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 285:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 286:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 287:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 288:000 | DONE lbl | na 16 16 | 005120 |             | xt_greater                           
 289:000 | DONE ins | na 16 16 | 005120 | 98          |                 tya                  
 290:000 | DONE ins | na 16 16 | 005121 | a0 00 00    |                 ldy.# 0000           default is false
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE ins | na 16 16 | 005124 | 38          |                 sec                  
 293:000 | DONE ins | na 16 16 | 005125 | f5 00       |                 sbc.dx 00            
 294:000 | DONE ins | na 16 16 | 005127 | f0 08       |                 beq 005131           the same is not greater
 295:000 | DONE ins | na 16 16 | 005129 | 50 03       |                 bvc 00512e           no overflow, skip ahead
 296:000 | DONE wsp | na 16 16 |        |             |
 297:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 298:000 | DONE ins | na 16 16 | 00512b | 49 00 80    |                 eor.# 8000           compliment negative flag
 299:000 | DONE wsp | na 16 16 |        |             |
 300:000 | DONE lbl | na 16 16 | 00512e |             | greater_no_ov                        
 301:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 302:000 | DONE ins | na 16 16 | 00512e | 10 01       |                 bpl 005131           
 303:000 | DONE ins | na 16 16 | 005130 | 88          |                 dey                  
 304:000 | DONE lbl | na 16 16 | 005131 |             | greater_nip                          
 305:000 | DONE ins | na 16 16 | 005131 | e8          |                 inx                  
 306:000 | DONE ins | na 16 16 | 005132 | e8          |                 inx                  
 307:000 | DONE wsp | na 16 16 |        |             |
 308:000 | DONE lbl | na 16 16 | 005133 |             | z_greater                            
 308:001 | DONE ins | na 16 16 | 005133 | 60          |                 rts                  
 309:000 | DONE wsp | na 16 16 |        |             |
 310:000 | DONE wsp | na 16 16 |        |             |
 311:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 312:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 313:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 314:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 315:000 | DONE cmt | na 16 16 |        |             | ; after CREATE. This is a difficult word for STC Forths, because most words
 316:000 | DONE cmt | na 16 16 |        |             | ; don't have a Code Field Area (CFA) to skip. We solve this by testing if the
 317:000 | DONE cmt | na 16 16 |        |             | ; first three bytes of the body (that starts at xt) are subroutine jumps to
 318:000 | DONE cmt | na 16 16 |        |             | ; DOVAR, DOCONST or DODOES
 319:000 | DONE lbl | na 16 16 | 005134 |             | xt_tobody                            
 320:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 321:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR
 322:000 | DONE ins | na 16 16 | 005134 | e2 20       |                 sep 20               
 322:001 | DONE ctl | na  8 16 |        |             |         .!a8
 323:000 | DONE ins | na  8 16 | 005136 | b9 00 00    |                 lda.y 0000           see if we have a JSR instruction
 324:000 | DONE ins | na  8 16 | 005139 | c9 20       |                 cmp.# 20             
 325:000 | DONE ins | na  8 16 | 00513b | c2 20       |                 rep 20               
 325:001 | DONE ctl | na 16 16 |        |             |         .!a16
 326:000 | DONE ins | na 16 16 | 00513d | d0 18       |                 bne 005157           
 327:000 | DONE wsp | na 16 16 |        |             |
 328:000 | DONE cmt | na 16 16 |        |             |                 ; Okay, so we found a JSR instruction. But is it one of the
 329:000 | DONE cmt | na 16 16 |        |             |                 ; right ones?
 330:000 | DONE ins | na 16 16 | 00513f | c8          |                 iny                  
 331:000 | DONE ins | na 16 16 | 005140 | b9 00 00    |                 lda.y 0000           
 332:000 | DONE wsp | na 16 16 |        |             |
 333:000 | DONE ins | na 16 16 | 005143 | c9 e4 69    |                 cmp.# 0069e4         
 334:000 | DONE ins | na 16 16 | 005146 | f0 0d       |                 beq 005155           
 335:000 | DONE ins | na 16 16 | 005148 | c9 ba 69    |                 cmp.# 0069ba         
 336:000 | DONE ins | na 16 16 | 00514b | f0 08       |                 beq 005155           
 337:000 | DONE ins | na 16 16 | 00514d | c9 d7 69    |                 cmp.# 0069d7         
 338:000 | DONE ins | na 16 16 | 005150 | f0 03       |                 beq 005155           
 339:000 | DONE wsp | na 16 16 |        |             |
 340:000 | DONE cmt | na 16 16 |        |             |                 ; This is some other jump, so we go back to beginning of word
 341:000 | DONE ins | na 16 16 | 005152 | 88          |                 dey                  restor original xt
 342:000 | DONE ins | na 16 16 | 005153 | 80 02       |                 bra 005157           
 343:000 | DONE wsp | na 16 16 |        |             |
 344:000 | DONE lbl | na 16 16 | 005155 |             | tobody_have_cfa                      
 345:000 | DONE cmt | na 16 16 |        |             |                 ; Got the right kind of jump. We've already increased the index
 346:000 | DONE cmt | na 16 16 |        |             |                 ; by one, so we just have to add two
 347:000 | DONE ins | na 16 16 | 005155 | c8          |                 iny                  
 348:000 | DONE ins | na 16 16 | 005156 | c8          |                 iny                  drops through to end
 349:000 | DONE wsp | na 16 16 |        |             |
 350:000 | DONE lbl | na 16 16 | 005157 |             | tobody_nojsr                         
 351:000 | DONE cmt | na 16 16 |        |             |                 ; If we don't have a jump instruction, the xt already points to
 352:000 | DONE cmt | na 16 16 |        |             |                 ; the PFA, because there is no CFA
 353:000 | DONE cmt | na 16 16 |        |             |                 ; body
 354:000 | DONE wsp | na 16 16 |        |             |
 355:000 | DONE lbl | na 16 16 | 005157 |             | z_tobody                             
 355:001 | DONE ins | na 16 16 | 005157 | 60          |                 rts                  
 356:000 | DONE wsp | na 16 16 |        |             |
 357:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 358:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 359:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 360:000 | DONE lbl | na 16 16 | 005158 |             | xt_to-in                             
 361:000 | DONE ins | na 16 16 | 005158 | ca          |                 dex                  
 362:000 | DONE ins | na 16 16 | 005159 | ca          |                 dex                  
 363:000 | DONE ins | na 16 16 | 00515a | 94 00       |                 sty.dx 00            
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE ins | na 16 16 | 00515c | a0 0c 00    |                 ldy.# 00000c         >IN
 366:000 | DONE lbl | na 16 16 | 00515f |             | z_to-in                              
 366:001 | DONE ins | na 16 16 | 00515f | 60          |                 rts                  
 367:000 | DONE wsp | na 16 16 |        |             |
 368:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 369:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 370:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 371:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 372:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the original
 373:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 374:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 375:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 376:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 377:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 378:000 | DONE lbl | na 16 16 | 005160 |             | xt_tonumber                          
 379:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 380:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 381:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 382:000 | DONE cmt | na 16 16 |        |             |                 ;
 383:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 384:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 385:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 386:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 387:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 388:000 | DONE wsp | na 16 16 |        |             |
 389:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 390:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 391:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 392:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 393:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 394:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 395:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 396:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 397:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 398:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 399:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 400:000 | DONE wsp | na 16 16 |        |             |
 401:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 402:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 403:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 404:000 | DONE ins | na 16 16 | 005160 | b5 04       |                 lda.dx 04            ud-lo
 405:000 | DONE ins | na 16 16 | 005162 | 85 28       |                 sta.d 000028         
 406:000 | DONE ins | na 16 16 | 005164 | b5 02       |                 lda.dx 02            ud-hi
 407:000 | DONE ins | na 16 16 | 005166 | 85 2a       |                 sta.d 00002a         
 408:000 | DONE wsp | na 16 16 |        |             |
 409:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 410:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 411:000 | DONE ins | na 16 16 | 005168 | ca          |                 dex                  
 412:000 | DONE ins | na 16 16 | 005169 | ca          |                 dex                  
 413:000 | DONE ins | na 16 16 | 00516a | 94 00       |                 sty.dx 00            
 414:000 | DONE wsp | na 16 16 |        |             |
 415:000 | DONE lbl | na 16 16 | 00516c |             | tonumber_loop                        
 416:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 417:000 | DONE ins | na 16 16 | 00516c | a1 02       |                 lda.dxi 02           
 418:000 | DONE ins | na 16 16 | 00516e | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 419:000 | DONE wsp | na 16 16 |        |             |
 420:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 421:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 422:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 423:000 | DONE ins | na 16 16 | 00516f | 20 ec 57    |                 jsr 0057ec           ( char -- n -1 | char 0 )
 424:000 | DONE wsp | na 16 16 |        |             |
 425:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 426:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 427:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 428:000 | DONE ins | na 16 16 | 005172 | 98          |                 tya                  
 429:000 | DONE ins | na 16 16 | 005173 | d0 06       |                 bne 00517b           
 430:000 | DONE wsp | na 16 16 |        |             |
 431:000 | DONE ins | na 16 16 | 005175 | b4 00       |                 ldy.dx 00            
 432:000 | DONE ins | na 16 16 | 005177 | e8          |                 inx                  
 433:000 | DONE ins | na 16 16 | 005178 | e8          |                 inx                  
 434:000 | DONE ins | na 16 16 | 005179 | 80 35       |                 bra 0051b0           
 435:000 | DONE wsp | na 16 16 |        |             |
 436:000 | DONE lbl | na 16 16 | 00517b |             | tonumber_ok                          
 437:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 438:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 439:000 | DONE wsp | na 16 16 |        |             |
 440:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 441:000 | DONE ins | na 16 16 | 00517b | b5 00       |                 lda.dx 00            
 442:000 | DONE ins | na 16 16 | 00517d | 85 2c       |                 sta.d 00002c         
 443:000 | DONE wsp | na 16 16 |        |             |
 444:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 445:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 446:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 447:000 | DONE ins | na 16 16 | 00517f | a5 2a       |                 lda.d 00002a         
 448:000 | DONE ins | na 16 16 | 005181 | 95 00       |                 sta.dx 00            
 449:000 | DONE ins | na 16 16 | 005183 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-hi base )
 450:000 | DONE wsp | na 16 16 |        |             |
 451:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 452:000 | DONE ins | na 16 16 | 005185 | 20 52 5f    |                 jsr 005f52           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 453:000 | DONE wsp | na 16 16 |        |             |
 454:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 455:000 | DONE ins | na 16 16 | 005188 | b5 00       |                 lda.dx 00            ud-hi-lo
 456:000 | DONE ins | na 16 16 | 00518a | 85 2e       |                 sta.d 00002e         
 457:000 | DONE wsp | na 16 16 |        |             |
 458:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 459:000 | DONE ins | na 16 16 | 00518c | a5 28       |                 lda.d 000028         
 460:000 | DONE ins | na 16 16 | 00518e | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 461:000 | DONE ins | na 16 16 | 005190 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-lo base )
 462:000 | DONE wsp | na 16 16 |        |             |
 463:000 | DONE ins | na 16 16 | 005192 | 20 52 5f    |                 jsr 005f52           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 464:000 | DONE ins | na 16 16 | 005195 | 84 2a       |                 sty.d 00002a         
 465:000 | DONE ins | na 16 16 | 005197 | b5 00       |                 lda.dx 00            
 466:000 | DONE ins | na 16 16 | 005199 | 85 28       |                 sta.d 000028         
 467:000 | DONE wsp | na 16 16 |        |             |
 468:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 469:000 | DONE ins | na 16 16 | 00519b | a5 28       |                 lda.d 000028         
 470:000 | DONE ins | na 16 16 | 00519d | 18          |                 clc                  
 471:000 | DONE ins | na 16 16 | 00519e | 65 2c       |                 adc.d 00002c         
 472:000 | DONE ins | na 16 16 | 0051a0 | 85 28       |                 sta.d 000028         this is the new ud-lo
 473:000 | DONE ins | na 16 16 | 0051a2 | a5 2a       |                 lda.d 00002a         
 474:000 | DONE ins | na 16 16 | 0051a4 | 65 2e       |                 adc.d 00002e         
 475:000 | DONE ins | na 16 16 | 0051a6 | 85 2a       |                 sta.d 00002a         this is the new ud-hi
 476:000 | DONE wsp | na 16 16 |        |             |
 477:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 478:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 479:000 | DONE ins | na 16 16 | 0051a8 | e8          |                 inx                  
 480:000 | DONE ins | na 16 16 | 0051a9 | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 481:000 | DONE wsp | na 16 16 |        |             |
 482:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 483:000 | DONE ins | na 16 16 | 0051aa | f6 02       |                 inc.dx 02            increase address
 484:000 | DONE ins | na 16 16 | 0051ac | d6 00       |                 dec.dx 00            decrease length
 485:000 | DONE wsp | na 16 16 |        |             |
 486:000 | DONE ins | na 16 16 | 0051ae | d0 bc       |                 bne 00516c           
 487:000 | DONE wsp | na 16 16 |        |             |
 488:000 | DONE lbl | na 16 16 | 0051b0 |             | tonumber_done                        
 489:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 490:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 491:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 492:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 493:000 | DONE ins | na 16 16 | 0051b0 | b4 00       |                 ldy.dx 00            
 494:000 | DONE ins | na 16 16 | 0051b2 | e8          |                 inx                  
 495:000 | DONE ins | na 16 16 | 0051b3 | e8          |                 inx                  ( ud-lo ud-hi addr u )
 496:000 | DONE wsp | na 16 16 |        |             |
 497:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 498:000 | DONE ins | na 16 16 | 0051b4 | a5 28       |                 lda.d 000028         new ud-lo
 499:000 | DONE ins | na 16 16 | 0051b6 | 95 04       |                 sta.dx 04            
 500:000 | DONE ins | na 16 16 | 0051b8 | a5 2a       |                 lda.d 00002a         
 501:000 | DONE ins | na 16 16 | 0051ba | 95 02       |                 sta.dx 02            new ud-hi
 502:000 | DONE wsp | na 16 16 |        |             |
 503:000 | DONE lbl | na 16 16 | 0051bc |             | z_tonumber                           
 503:001 | DONE ins | na 16 16 | 0051bc | 60          |                 rts                  
 504:000 | DONE wsp | na 16 16 |        |             |
 505:000 | DONE wsp | na 16 16 |        |             |
 506:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 507:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 508:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 509:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 510:000 | DONE lbl | na 16 16 | 0051bd |             | xt_tor                               
 511:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 512:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 513:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 514:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 515:000 | DONE ins | na 16 16 | 0051bd | 68          |                 pla                  
 516:000 | DONE cmt | na 16 16 |        |             |                 ; --- cut for native coding ---
 517:000 | DONE wsp | na 16 16 |        |             |
 518:000 | DONE ins | na 16 16 | 0051be | 5a          |                 phy                  the actual work
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE ins | na 16 16 | 0051bf | b4 00       |                 ldy.dx 00            DROP
 521:000 | DONE ins | na 16 16 | 0051c1 | e8          |                 inx                  
 522:000 | DONE ins | na 16 16 | 0051c2 | e8          |                 inx                  
 523:000 | DONE wsp | na 16 16 |        |             |
 524:000 | DONE cmt | na 16 16 |        |             |                 ; --- cut for native coding ---
 525:000 | DONE ins | na 16 16 | 0051c3 | 48          |                 pha                  put return address back in place
 526:000 | DONE wsp | na 16 16 |        |             |
 527:000 | DONE lbl | na 16 16 | 0051c4 |             | z_tor                                
 527:001 | DONE ins | na 16 16 | 0051c4 | 60          |                 rts                  
 528:000 | DONE wsp | na 16 16 |        |             |
 529:000 | DONE wsp | na 16 16 |        |             |
 530:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 531:000 | DONE cmt | na 16 16 |        |             | ; /STRING ( addr u n -- ) X bytes / X cycles
 532:000 | DONE cmt | na 16 16 |        |             | ; Remove characters from front of string. Uses tmp1
 533:000 | DONE cmt | na 16 16 |        |             | ; Forth version: ROT OVER + ROT ROT - ;
 534:000 | DONE cmt | na 16 16 |        |             | ; TODO check for negative strings so 1 /STRING TYPE won't try to print the whole
 535:000 | DONE cmt | na 16 16 |        |             | ; address space; follow Gforth in failing gracefully
 536:000 | DONE lbl | na 16 16 | 0051c5 |             | xt_slashstring                       
 537:000 | DONE ins | na 16 16 | 0051c5 | 84 1c       |                 sty.d 00001c         
 538:000 | DONE wsp | na 16 16 |        |             |
 539:000 | DONE ins | na 16 16 | 0051c7 | b5 00       |                 lda.dx 00            length
 540:000 | DONE ins | na 16 16 | 0051c9 | 38          |                 sec                  
 541:000 | DONE ins | na 16 16 | 0051ca | e5 1c       |                 sbc.d 00001c         
 542:000 | DONE ins | na 16 16 | 0051cc | a8          |                 tay                  
 543:000 | DONE wsp | na 16 16 |        |             |
 544:000 | DONE ins | na 16 16 | 0051cd | b5 02       |                 lda.dx 02            address
 545:000 | DONE ins | na 16 16 | 0051cf | 18          |                 clc                  
 546:000 | DONE ins | na 16 16 | 0051d0 | 65 1c       |                 adc.d 00001c         
 547:000 | DONE ins | na 16 16 | 0051d2 | 95 02       |                 sta.dx 02            
 548:000 | DONE wsp | na 16 16 |        |             |
 549:000 | DONE ins | na 16 16 | 0051d4 | e8          |                 inx                  
 550:000 | DONE ins | na 16 16 | 0051d5 | e8          |                 inx                  
 551:000 | DONE wsp | na 16 16 |        |             |
 552:000 | DONE lbl | na 16 16 | 0051d6 |             | z_slashstring                        
 552:001 | DONE ins | na 16 16 | 0051d6 | 60          |                 rts                  
 553:000 | DONE wsp | na 16 16 |        |             |
 554:000 | DONE wsp | na 16 16 |        |             |
 555:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 556:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 557:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 558:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE   Based on
 559:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth Since this is
 560:000 | DONE cmt | na 16 16 |        |             | ; used interactively, and humans are slow (just ask GlaDOS), we focus on size.
 561:000 | DONE lbl | na 16 16 | 0051d7 |             | xt_dot                               
 562:000 | DONE ins | na 16 16 | 0051d7 | 20 e7 58    |                 jsr 0058e7           ( n n )
 563:000 | DONE ins | na 16 16 | 0051da | 20 b1 54    |                 jsr 0054b1           ( n n )
 564:000 | DONE ins | na 16 16 | 0051dd | 20 98 53    |                 jsr 005398           ( n n 0 )
 565:000 | DONE ins | na 16 16 | 0051e0 | 20 16 51    |                 jsr 005116           ( n n 0 )
 566:000 | DONE ins | na 16 16 | 0051e3 | 20 b3 52    |                 jsr 0052b3           ( n ud )
 567:000 | DONE ins | na 16 16 | 0051e6 | 20 81 5d    |                 jsr 005d81           ( ud n )
 568:000 | DONE ins | na 16 16 | 0051e9 | 20 e4 5d    |                 jsr 005de4           ( ud )
 569:000 | DONE ins | na 16 16 | 0051ec | 20 a4 52    |                 jsr 0052a4           
 570:000 | DONE ins | na 16 16 | 0051ef | 20 0b 5f    |                 jsr 005f0b           
 571:000 | DONE ins | na 16 16 | 0051f2 | 20 c3 5e    |                 jsr 005ec3           
 572:000 | DONE wsp | na 16 16 |        |             |
 573:000 | DONE lbl | na 16 16 | 0051f5 |             | z_dot                                
 573:001 | DONE ins | na 16 16 | 0051f5 | 60          |                 rts                  
 574:000 | DONE wsp | na 16 16 |        |             |
 575:000 | DONE wsp | na 16 16 |        |             |
 576:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 577:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 578:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 579:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 580:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 581:000 | DONE lbl | na 16 16 | 0051f6 |             | xt_dotquote                          
 582:000 | DONE ins | na 16 16 | 0051f6 | ca          |                 dex                  
 583:000 | DONE ins | na 16 16 | 0051f7 | ca          |                 dex                  
 584:000 | DONE ins | na 16 16 | 0051f8 | 94 00       |                 sty.dx 00            
 585:000 | DONE ins | na 16 16 | 0051fa | a0 22 00    |                 ldy.# 0022           ASCII for "
 586:000 | DONE wsp | na 16 16 |        |             |
 587:000 | DONE ins | na 16 16 | 0051fd | 20 a7 5c    |                 jsr 005ca7           
 588:000 | DONE ins | na 16 16 | 005200 | 20 f4 5d    |                 jsr 005df4           
 589:000 | DONE wsp | na 16 16 |        |             |
 590:000 | DONE ins | na 16 16 | 005203 | f4 0b 5f    |                 phe.# 005f0b         
 591:000 | DONE ins | na 16 16 | 005206 | 20 4f 6a    |                 jsr 006a4f           don't JSR/RTS
 592:000 | DONE wsp | na 16 16 |        |             |
 593:000 | DONE lbl | na 16 16 | 005209 |             | z_dotquote                           
 593:001 | DONE ins | na 16 16 | 005209 | 60          |                 rts                  
 594:000 | DONE wsp | na 16 16 |        |             |
 595:000 | DONE wsp | na 16 16 |        |             |
 596:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 597:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 598:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 599:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 600:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 601:000 | DONE cmt | na 16 16 |        |             | ; content (if present). Uses tmp3
 602:000 | DONE lbl | na 16 16 | 00520a |             | xt_dots                              
 603:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 604:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 605:000 | DONE ins | na 16 16 | 00520a | 20 61 58    |                 jsr 005861           ( -- u)
 606:000 | DONE wsp | na 16 16 |        |             |
 607:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 608:000 | DONE ins | na 16 16 | 00520d | a9 3c 00    |                 lda.# 3c             
 609:000 | DONE ins | na 16 16 | 005210 | 20 f1 58    |                 jsr 0058f1           
 610:000 | DONE wsp | na 16 16 |        |             |
 611:000 | DONE cmt | na 16 16 |        |             |                 ; We keep a copy of the number of things on the stack to use as
 612:000 | DONE cmt | na 16 16 |        |             |                 ; a counter further down
 613:000 | DONE ins | na 16 16 | 005213 | ca          |                 dex                  DUP
 614:000 | DONE ins | na 16 16 | 005214 | ca          |                 dex                  
 615:000 | DONE ins | na 16 16 | 005215 | 94 00       |                 sty.dx 00            
 616:000 | DONE wsp | na 16 16 |        |             |
 617:000 | DONE ins | na 16 16 | 005217 | 20 8e 6a    |                 jsr 006a8e           print unsigned number
 618:000 | DONE wsp | na 16 16 |        |             |
 619:000 | DONE ins | na 16 16 | 00521a | a9 3e 00    |                 lda.# 3e             
 620:000 | DONE ins | na 16 16 | 00521d | 20 f1 58    |                 jsr 0058f1           
 621:000 | DONE ins | na 16 16 | 005220 | 20 c3 5e    |                 jsr 005ec3           
 622:000 | DONE wsp | na 16 16 |        |             |
 623:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 624:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 625:000 | DONE ins | na 16 16 | 005223 | 98          |                 tya                  force flag test
 626:000 | DONE ins | na 16 16 | 005224 | f0 18       |                 beq 00523e           
 627:000 | DONE wsp | na 16 16 |        |             |
 628:000 | DONE lbl | na 16 16 | 005226 |             | dots_not_empty                       
 629:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 630:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. The
 631:000 | DONE cmt | na 16 16 |        |             |                 ; depth of the Data Stack is in Y waiting to be used as
 632:000 | DONE cmt | na 16 16 |        |             |                 ; a counter. We use this to our advantage.
 633:000 | DONE ins | na 16 16 | 005226 | a9 fb 00    |                 lda.# 0000fb         skip two garbage entries on stack
 634:000 | DONE ins | na 16 16 | 005229 | 85 20       |                 sta.d 000020         use as pointer
 635:000 | DONE wsp | na 16 16 |        |             |
 636:000 | DONE lbl | na 16 16 | 00522b |             | dots_loop                            
 637:000 | DONE ins | na 16 16 | 00522b | b2 20       |                 lda.di 000020        LDA (TMP1)
 638:000 | DONE ins | na 16 16 | 00522d | 5a          |                 phy                  save our counter
 639:000 | DONE ins | na 16 16 | 00522e | a8          |                 tay                  
 640:000 | DONE ins | na 16 16 | 00522f | 20 d7 51    |                 jsr 0051d7           print one number, drops TOS
 641:000 | DONE wsp | na 16 16 |        |             |
 642:000 | DONE ins | na 16 16 | 005232 | ca          |                 dex                  restore counter
 643:000 | DONE ins | na 16 16 | 005233 | ca          |                 dex                  
 644:000 | DONE ins | na 16 16 | 005234 | 94 00       |                 sty.dx 00            
 645:000 | DONE ins | na 16 16 | 005236 | 7a          |                 ply                  
 646:000 | DONE wsp | na 16 16 |        |             |
 647:000 | DONE ins | na 16 16 | 005237 | c6 20       |                 dec.d 000020         next stack entry
 648:000 | DONE ins | na 16 16 | 005239 | c6 20       |                 dec.d 000020         
 649:000 | DONE wsp | na 16 16 |        |             |
 650:000 | DONE ins | na 16 16 | 00523b | 88          |                 dey                  
 651:000 | DONE ins | na 16 16 | 00523c | d0 ed       |                 bne 00522b           
 652:000 | DONE wsp | na 16 16 |        |             |
 653:000 | DONE lbl | na 16 16 | 00523e |             | dots_done                            
 654:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 655:000 | DONE ins | na 16 16 | 00523e | 20 e2 58    |                 jsr 0058e2           
 656:000 | DONE wsp | na 16 16 |        |             |
 657:000 | DONE lbl | na 16 16 | 005241 |             | z_dots                               
 657:001 | DONE ins | na 16 16 | 005241 | 60          |                 rts                  
 658:000 | DONE wsp | na 16 16 |        |             |
 659:000 | DONE wsp | na 16 16 |        |             |
 660:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 661:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 662:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 663:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 664:000 | DONE cmt | na 16 16 |        |             | ; aligned
 665:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 666:000 | DONE cmt | na 16 16 |        |             | ;               tya
 667:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 668:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 669:000 | DONE cmt | na 16 16 |        |             | ;               iny
 670:000 | DONE cmt | na 16 16 |        |             | ;               iny
 671:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 672:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 673:000 | DONE cmt | na 16 16 |        |             | ;               inx
 674:000 | DONE cmt | na 16 16 |        |             | ;               inx
 675:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 676:000 | DONE lbl | na 16 16 | 005242 |             | xt_comma                             
 677:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 678:000 | DONE ins | na 16 16 | 005242 | 98          |                 tya                  
 679:000 | DONE ins | na 16 16 | 005243 | 92 00       |                 sta.di 000000        STA (CP)
 680:000 | DONE ins | na 16 16 | 005245 | e6 00       |                 inc.d 000000         
 681:000 | DONE ins | na 16 16 | 005247 | e6 00       |                 inc.d 000000         
 682:000 | DONE wsp | na 16 16 |        |             |
 683:000 | DONE ins | na 16 16 | 005249 | b4 00       |                 ldy.dx 00            
 684:000 | DONE ins | na 16 16 | 00524b | e8          |                 inx                  
 685:000 | DONE ins | na 16 16 | 00524c | e8          |                 inx                  
 686:000 | DONE wsp | na 16 16 |        |             |
 687:000 | DONE lbl | na 16 16 | 00524d |             | z_comma                              
 687:001 | DONE ins | na 16 16 | 00524d | 60          |                 rts                  
 688:000 | DONE wsp | na 16 16 |        |             |
 689:000 | DONE wsp | na 16 16 |        |             |
 690:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 691:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 692:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 693:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 694:000 | DONE lbl | na 16 16 | 00524e |             | xt_colon                             
 695:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 696:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 697:000 | DONE ins | na 16 16 | 00524e | a5 14       |                 lda.d 000014         
 698:000 | DONE ins | na 16 16 | 005250 | f0 06       |                 beq 005258           
 699:000 | DONE wsp | na 16 16 |        |             |
 700:000 | DONE ins | na 16 16 | 005252 | a9 b8 72    |                 lda.# 0072b8         
 701:000 | DONE ins | na 16 16 | 005255 | 4c 70 6a    |                 jmp 006a70           
 702:000 | DONE lbl | na 16 16 | 005258 |             | @                                    
 703:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 704:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 705:000 | DONE ins | na 16 16 | 005258 | e6 14       |                 inc.d 000014         
 706:000 | DONE wsp | na 16 16 |        |             |
 707:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 708:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 709:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 710:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 711:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 712:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 713:000 | DONE ins | na 16 16 | 00525a | a5 02       |                 lda.d 000002         
 714:000 | DONE ins | na 16 16 | 00525c | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 715:000 | DONE wsp | na 16 16 |        |             |
 716:000 | DONE ins | na 16 16 | 00525d | 20 61 57    |                 jsr 005761           
 717:000 | DONE wsp | na 16 16 |        |             |
 718:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt (not the xt!) of the new word as described above.
 719:000 | DONE cmt | na 16 16 |        |             |                 ; Only COLON, SEMICOLON and RECURSE access WORKWORD
 720:000 | DONE ins | na 16 16 | 005260 | a5 02       |                 lda.d 000002         
 721:000 | DONE ins | na 16 16 | 005262 | 85 04       |                 sta.d 000004         
 722:000 | DONE ins | na 16 16 | 005264 | 68          |                 pla                  
 723:000 | DONE ins | na 16 16 | 005265 | 85 02       |                 sta.d 000002         
 724:000 | DONE wsp | na 16 16 |        |             |
 725:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 726:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 727:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 728:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 729:000 | DONE ins | na 16 16 | 005267 | a5 00       |                 lda.d 000000         
 730:000 | DONE ins | na 16 16 | 005269 | 38          |                 sec                  
 731:000 | DONE ins | na 16 16 | 00526a | e9 03 00    |                 sbc.# 0003           
 732:000 | DONE ins | na 16 16 | 00526d | 85 00       |                 sta.d 000000         
 733:000 | DONE wsp | na 16 16 |        |             |
 734:000 | DONE lbl | na 16 16 | 00526f |             | z_colon                              
 734:001 | DONE ins | na 16 16 | 00526f | 60          |                 rts                  
 735:000 | DONE wsp | na 16 16 |        |             |
 736:000 | DONE wsp | na 16 16 |        |             |
 737:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 738:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 739:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 740:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 741:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 742:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 743:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 744:000 | DONE lbl | na 16 16 | 005270 |             | xt_semicolon                         
 745:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 746:000 | DONE ins | na 16 16 | 005270 | 84 24       |                 sty.d 000024         
 747:000 | DONE wsp | na 16 16 |        |             |
 748:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 749:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 750:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 751:000 | DONE ins | na 16 16 | 005272 | a0 06 00    |                 ldy.# 0006           
 752:000 | DONE ins | na 16 16 | 005275 | a5 00       |                 lda.d 000000         
 753:000 | DONE ins | na 16 16 | 005277 | 91 04       |                 sta.diy 000004       STA (WORKWORD),Y
 754:000 | DONE wsp | na 16 16 |        |             |
 755:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 756:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 757:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 758:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 759:000 | DONE ins | na 16 16 | 005279 | a9 60 00    |                 lda.# 60             opcode for RTS
 760:000 | DONE ins | na 16 16 | 00527c | 92 00       |                 sta.di 000000        STA (CP)
 761:000 | DONE ins | na 16 16 | 00527e | e6 00       |                 inc.d 000000         MSB will be overwritten
 762:000 | DONE wsp | na 16 16 |        |             |
 763:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 764:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 765:000 | DONE ins | na 16 16 | 005280 | a5 04       |                 lda.d 000004         
 766:000 | DONE ins | na 16 16 | 005282 | 85 02       |                 sta.d 000002         
 767:000 | DONE wsp | na 16 16 |        |             |
 768:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 769:000 | DONE ins | na 16 16 | 005284 | a4 24       |                 ldy.d 000024         
 770:000 | DONE wsp | na 16 16 |        |             |
 771:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 772:000 | DONE ins | na 16 16 | 005286 | 64 14       |                 stz.d 000014         
 773:000 | DONE wsp | na 16 16 |        |             |
 774:000 | DONE lbl | na 16 16 | 005288 |             | z_semicolon                          
 774:001 | DONE ins | na 16 16 | 005288 | 60          |                 rts                  
 775:000 | DONE wsp | na 16 16 |        |             |
 776:000 | DONE wsp | na 16 16 |        |             |
 777:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 778:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 779:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 780:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 781:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 782:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 783:000 | DONE lbl | na 16 16 | 005289 |             | xt_hash                              
 784:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 785:000 | DONE ins | na 16 16 | 005289 | 20 bb 55    |                 jsr 0055bb           ( ud addr )
 786:000 | DONE ins | na 16 16 | 00528c | 20 d7 52    |                 jsr 0052d7           ( ud u )
 787:000 | DONE ins | na 16 16 | 00528f | 20 36 5f    |                 jsr 005f36           ( rem ud )
 788:000 | DONE ins | na 16 16 | 005292 | 20 81 5d    |                 jsr 005d81           ( ud rem )
 789:000 | DONE wsp | na 16 16 |        |             |
 790:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 791:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed. Use either abc_str_lower for
 792:000 | DONE cmt | na 16 16 |        |             |                 ; lower case or abc_str_upper for upper case (prefered)
 793:000 | DONE ins | na 16 16 | 005295 | e2 20       |                 sep 20               
 793:001 | DONE ctl | na  8 16 |        |             |         .!a8
 794:000 | DONE ins | na  8 16 | 005297 | b9 3d 73    |                 lda.y 00733d         
 795:000 | DONE ins | na  8 16 | 00529a | c2 20       |                 rep 20               
 795:001 | DONE ctl | na 16 16 |        |             |         .!a16
 796:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 797:000 | DONE ins | na 16 16 | 00529c | 29 ff 00    |                 and.# 00ff           
 798:000 | DONE ins | na 16 16 | 00529f | a8          |                 tay                  ( ud char )
 799:000 | DONE wsp | na 16 16 |        |             |
 800:000 | DONE ins | na 16 16 | 0052a0 | 20 a0 5a    |                 jsr 005aa0           
 801:000 | DONE wsp | na 16 16 |        |             |
 802:000 | DONE lbl | na 16 16 | 0052a3 |             | z_hash                               
 802:001 | DONE ins | na 16 16 | 0052a3 | 60          |                 rts                  
 803:000 | DONE wsp | na 16 16 |        |             |
 804:000 | DONE wsp | na 16 16 |        |             |
 805:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 806:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 807:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 808:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 809:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 810:000 | DONE lbl | na 16 16 | 0052a4 |             | xt_numbermore                        
 811:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 812:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 813:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 814:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 815:000 | DONE ins | na 16 16 | 0052a4 | a4 18       |                 ldy.d 000018         
 816:000 | DONE ins | na 16 16 | 0052a6 | 94 00       |                 sty.dx 00            ( addr addr )
 817:000 | DONE wsp | na 16 16 |        |             |
 818:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 819:000 | DONE ins | na 16 16 | 0052a8 | 20 5a 5c    |                 jsr 005c5a           ( addr addr pad )
 820:000 | DONE wsp | na 16 16 |        |             |
 821:000 | DONE ins | na 16 16 | 0052ab | 38          |                 sec                  
 822:000 | DONE ins | na 16 16 | 0052ac | 98          |                 tya                  
 823:000 | DONE ins | na 16 16 | 0052ad | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 824:000 | DONE ins | na 16 16 | 0052af | a8          |                 tay                  ( addr addr n )
 825:000 | DONE wsp | na 16 16 |        |             |
 826:000 | DONE ins | na 16 16 | 0052b0 | e8          |                 inx                  NIP
 827:000 | DONE ins | na 16 16 | 0052b1 | e8          |                 inx                  
 828:000 | DONE wsp | na 16 16 |        |             |
 829:000 | DONE lbl | na 16 16 | 0052b2 |             | z_numbermore                         
 829:001 | DONE ins | na 16 16 | 0052b2 | 60          |                 rts                  
 830:000 | DONE wsp | na 16 16 |        |             |
 831:000 | DONE wsp | na 16 16 |        |             |
 832:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 833:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 834:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 835:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 836:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 837:000 | DONE lbl | na 16 16 | 0052b3 |             | xt_hashs                             
 838:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 839:000 | DONE lbl | na 16 16 | 0052b3 |             | hashs_loop                           
 840:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 841:000 | DONE ins | na 16 16 | 0052b3 | 20 89 52    |                 jsr 005289           ( ud -- ud )
 842:000 | DONE wsp | na 16 16 |        |             |
 843:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 844:000 | DONE ins | na 16 16 | 0052b6 | 98          |                 tya                  
 845:000 | DONE ins | na 16 16 | 0052b7 | 15 00       |                 ora.dx 00            
 846:000 | DONE ins | na 16 16 | 0052b9 | d0 f8       |                 bne 0052b3           
 847:000 | DONE wsp | na 16 16 |        |             |
 848:000 | DONE lbl | na 16 16 | 0052bb |             | z_hashs                              
 848:001 | DONE ins | na 16 16 | 0052bb | 60          |                 rts                  
 849:000 | DONE wsp | na 16 16 |        |             |
 850:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 851:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 852:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 853:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 854:000 | DONE lbl | na 16 16 | 0052bc |             | xt_question                          
 855:000 | DONE ins | na 16 16 | 0052bc | 20 d7 52    |                 jsr 0052d7           
 856:000 | DONE ins | na 16 16 | 0052bf | 20 d7 51    |                 jsr 0051d7           
 857:000 | DONE wsp | na 16 16 |        |             |
 858:000 | DONE lbl | na 16 16 | 0052c2 |             | z_question                           
 858:001 | DONE ins | na 16 16 | 0052c2 | 60          |                 rts                  
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE wsp | na 16 16 |        |             |
 861:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 862:000 | DONE cmt | na 16 16 |        |             | ; QDUP ( n -- 0 | n n ) X bytes / X cycles
 863:000 | DONE cmt | na 16 16 |        |             | ; If top element on Data Stack is not zero, duplicate it
 864:000 | DONE lbl | na 16 16 | 0052c3 |             | xt_qdup                              
 865:000 | DONE ins | na 16 16 | 0052c3 | 98          |                 tya                  
 866:000 | DONE ins | na 16 16 | 0052c4 | f0 04       |                 beq 0052ca           
 867:000 | DONE wsp | na 16 16 |        |             |
 868:000 | DONE ins | na 16 16 | 0052c6 | ca          |                 dex                  
 869:000 | DONE ins | na 16 16 | 0052c7 | ca          |                 dex                  
 870:000 | DONE ins | na 16 16 | 0052c8 | 94 00       |                 sty.dx 00            
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE lbl | na 16 16 | 0052ca |             | z_qdup                               
 872:001 | DONE ins | na 16 16 | 0052ca | 60          |                 rts                  
 873:000 | DONE wsp | na 16 16 |        |             |
 874:000 | DONE wsp | na 16 16 |        |             |
 875:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 876:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 877:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 878:000 | DONE lbl | na 16 16 | 0052cb |             | xt_store                             
 879:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 880:000 | DONE ins | na 16 16 | 0052cb | b5 00       |                 lda.dx 00            NOS has value
 881:000 | DONE ins | na 16 16 | 0052cd | 99 00 00    |                 sta.y 0000           
 882:000 | DONE wsp | na 16 16 |        |             |
 883:000 | DONE ins | na 16 16 | 0052d0 | b4 02       |                 ldy.dx 02            
 884:000 | DONE ins | na 16 16 | 0052d2 | e8          |                 inx                  
 885:000 | DONE ins | na 16 16 | 0052d3 | e8          |                 inx                  
 886:000 | DONE ins | na 16 16 | 0052d4 | e8          |                 inx                  
 887:000 | DONE ins | na 16 16 | 0052d5 | e8          |                 inx                  
 888:000 | DONE wsp | na 16 16 |        |             |
 889:000 | DONE lbl | na 16 16 | 0052d6 |             | z_store                              
 889:001 | DONE ins | na 16 16 | 0052d6 | 60          |                 rts                  
 890:000 | DONE wsp | na 16 16 |        |             |
 891:000 | DONE wsp | na 16 16 |        |             |
 892:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 893:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 894:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 895:000 | DONE lbl | na 16 16 | 0052d7 |             | xt_fetch                             
 896:000 | DONE ins | na 16 16 | 0052d7 | b9 00 00    |                 lda.y 0000           
 897:000 | DONE ins | na 16 16 | 0052da | a8          |                 tay                  
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE lbl | na 16 16 | 0052db |             | z_fetch                              
 899:001 | DONE ins | na 16 16 | 0052db | 60          |                 rts                  
 900:000 | DONE wsp | na 16 16 |        |             |
 901:000 | DONE wsp | na 16 16 |        |             |
 902:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 903:000 | DONE cmt | na 16 16 |        |             | ; (+LOOP) "PARENS-PLUSLOOP" ( n -- ) X bytes / X cycles
 904:000 | DONE cmt | na 16 16 |        |             | ; Runtime compile for counted loop control. This is used for both +LOOP and
 905:000 | DONE cmt | na 16 16 |        |             | ; LOOP which are defined at high level. Note we use a fudge factor for loop
 906:000 | DONE cmt | na 16 16 |        |             | ; control so we can test with the Overflow Flag. See (DO) for details. This is
 907:000 | DONE cmt | na 16 16 |        |             | ; Native Compile. The step value is TOS in the loop
 908:000 | DONE lbl | na 16 16 | 0052dc |             | xt_pploop                            
 909:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 910:000 | DONE cmt | na 16 16 |        |             |                 ; add step to index
 911:000 | DONE ins | na 16 16 | 0052dc | 98          |                 tya                  step
 912:000 | DONE ins | na 16 16 | 0052dd | b8          |                 clv                  this is used for loop control
 913:000 | DONE ins | na 16 16 | 0052de | 18          |                 clc                  
 914:000 | DONE ins | na 16 16 | 0052df | 63 01       |                 adc.s 01             add index from top of R
 915:000 | DONE ins | na 16 16 | 0052e1 | 83 01       |                 sta.s 01             store it back on top of R
 916:000 | DONE wsp | na 16 16 |        |             |
 917:000 | DONE cmt | na 16 16 |        |             |                 ; dump step from TOS
 918:000 | DONE ins | na 16 16 | 0052e3 | b4 00       |                 ldy.dx 00            
 919:000 | DONE ins | na 16 16 | 0052e5 | e8          |                 inx                  
 920:000 | DONE ins | na 16 16 | 0052e6 | e8          |                 inx                  
 921:000 | DONE wsp | na 16 16 |        |             |
 922:000 | DONE cmt | na 16 16 |        |             |                 ; if the V flag is set, we're done looping and continue after
 923:000 | DONE cmt | na 16 16 |        |             |                 ; the +LOOP instruction
 924:000 | DONE ins | na 16 16 | 0052e7 | 70 03       |                 bvs 0052ec           
 925:000 | DONE wsp | na 16 16 |        |             |
 926:000 | DONE lbl | na 16 16 | 0052e9 |             | pploop_jmp                           
 927:000 | DONE cmt | na 16 16 |        |             |                 ; This is why this routine must be natively compiled: We compile
 928:000 | DONE cmt | na 16 16 |        |             |                 ; the opcode for jump here without an address to go to, which is
 929:000 | DONE cmt | na 16 16 |        |             |                 ; added by the next instruction of LOOP (or +LOOP) during
 930:000 | DONE cmt | na 16 16 |        |             |                 ; compile time
 931:000 | DONE dir | na 16 16 | 0052e9 | (1 bytes)   |         .byte 4C                     
 931:000 | DONE dir | na 16 16 |        |             |                 4c                       --  L
 932:000 | DONE wsp | na 16 16 |        |             |
 933:000 | DONE lbl | na 16 16 | 0052ea |             | z_pploop                             
 933:001 | DONE ins | na 16 16 | 0052ea | 60          |                 rts                  never reached (TODO remove)
 934:000 | DONE wsp | na 16 16 |        |             |
 935:000 | DONE wsp | na 16 16 |        |             |
 936:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 937:000 | DONE cmt | na 16 16 |        |             | ; (?DO) "PARENS-QUESTION-DO" ( -- ) X bytes / X cycles
 938:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for ?DO. This contains the parts required for the question
 939:000 | DONE cmt | na 16 16 |        |             | ; mark and then drops through to (DO). This must be native compile
 940:000 | DONE lbl | na 16 16 | 0052eb |             | xt_pqdo                              
 941:000 | DONE cmt | na 16 16 |        |             |                 ; See if TOS and NOS are equal
 942:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to assembler for speed
 943:000 | DONE ins | na 16 16 | 0052eb | 20 1d 54    |                 jsr 00541d           
 944:000 | DONE ins | na 16 16 | 0052ee | 20 8c 53    |                 jsr 00538c           now ( n1 n2 f )
 945:000 | DONE wsp | na 16 16 |        |             |
 946:000 | DONE ins | na 16 16 | 0052f1 | 98          |                 tya                  force flag check
 947:000 | DONE ins | na 16 16 | 0052f2 | f0 0a       |                 beq 0052fe           
 948:000 | DONE wsp | na 16 16 |        |             |
 949:000 | DONE cmt | na 16 16 |        |             |                 ; the two numbers are equal, so we get out of there
 950:000 | DONE cmt | na 16 16 |        |             |                 ; first, dump three entries off the Data Stack
 951:000 | DONE ins | na 16 16 | 0052f4 | b4 04       |                 ldy.dx 04            
 952:000 | DONE ins | na 16 16 | 0052f6 | 8a          |                 txa                  
 953:000 | DONE ins | na 16 16 | 0052f7 | 18          |                 clc                  
 954:000 | DONE ins | na 16 16 | 0052f8 | 69 06 00    |                 adc.# 0006           
 955:000 | DONE ins | na 16 16 | 0052fb | aa          |                 tax                  
 956:000 | DONE wsp | na 16 16 |        |             |
 957:000 | DONE cmt | na 16 16 |        |             |                 ; Abort the whole loop. Since the limit/start parameters are not
 958:000 | DONE cmt | na 16 16 |        |             |                 ; on the Return stack yet, we only have the address that points
 959:000 | DONE cmt | na 16 16 |        |             |                 ; to the end of the loop. Dump the RTS of ?DO and just use that
 960:000 | DONE cmt | na 16 16 |        |             |                 ; RTS
 961:000 | DONE ins | na 16 16 | 0052fc | 68          |                 pla                  
 962:000 | DONE ins | na 16 16 | 0052fd | 60          |                 rts                  
 963:000 | DONE wsp | na 16 16 |        |             |
 964:000 | DONE lbl | na 16 16 | 0052fe |             | pqdo_done                            
 965:000 | DONE cmt | na 16 16 |        |             |                 ; get ready to drop to (DO)
 966:000 | DONE ins | na 16 16 | 0052fe | b4 00       |                 ldy.dx 00            drop flag from EQUAL
 967:000 | DONE ins | na 16 16 | 005300 | e8          |                 inx                  
 968:000 | DONE ins | na 16 16 | 005301 | e8          |                 inx                  
 969:000 | DONE wsp | na 16 16 |        |             |
 970:000 | DONE wsp | na 16 16 |        |             |
 971:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 972:000 | DONE cmt | na 16 16 |        |             | ; (DO) "PARENS-DO" ( limit start -- ; R: -- limit start ) X bytes / X cycles
 973:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for DO loop. Note that ANSI loops quit when the boundry of
 974:000 | DONE cmt | na 16 16 |        |             | ; limit-1 and limit is reached, a different mechanism than the FIG Forth loop
 975:000 | DONE cmt | na 16 16 |        |             | ; (you can see which version you have by running a loop with start and limit as
 976:000 | DONE cmt | na 16 16 |        |             | ; the same value, for instance 0 0 DO -- these will walk through the complete
 977:000 | DONE cmt | na 16 16 |        |             | ; number space). This is why there is ?DO, which you should use. We use a "fudge
 978:000 | DONE cmt | na 16 16 |        |             | ; factor" for the limit that makes the Overflow Flag trip when it is reached;
 979:000 | DONE cmt | na 16 16 |        |             | ; see http://forum.6502.org/viewtopic.php?f=9&t=2> for further discussion of
 980:000 | DONE cmt | na 16 16 |        |             | ; this. The source given there for this idea is Laxen & Perry F83. This routine
 981:000 | DONE cmt | na 16 16 |        |             | ; must be native compile (and should be anyway for speed).
 982:000 | DONE lbl | na 16 16 | 005302 |             | xt_pdo                               
 983:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 984:000 | DONE cmt | na 16 16 |        |             |                 ; Create fudge factor (fufa) by subtracting the limit from
 985:000 | DONE cmt | na 16 16 |        |             |                 ; $8000, the number that will trip the overflow flag
 986:000 | DONE ins | na 16 16 | 005302 | 38          |                 sec                  
 987:000 | DONE ins | na 16 16 | 005303 | a9 00 80    |                 lda.# 8000           
 988:000 | DONE ins | na 16 16 | 005306 | f5 00       |                 sbc.dx 00            limit is NOS
 989:000 | DONE ins | na 16 16 | 005308 | 95 00       |                 sta.dx 00            save fufa for later use as NOS
 990:000 | DONE ins | na 16 16 | 00530a | 48          |                 pha                  we use fufa instead of limit on R
 991:000 | DONE wsp | na 16 16 |        |             |
 992:000 | DONE cmt | na 16 16 |        |             |                 ; Index is fufa plus original index
 993:000 | DONE ins | na 16 16 | 00530b | 18          |                 clc                  
 994:000 | DONE ins | na 16 16 | 00530c | 98          |                 tya                  index is TOS
 995:000 | DONE ins | na 16 16 | 00530d | 75 00       |                 adc.dx 00            add fufa
 996:000 | DONE ins | na 16 16 | 00530f | 48          |                 pha                  
 997:000 | DONE wsp | na 16 16 |        |             |
 998:000 | DONE cmt | na 16 16 |        |             |                 ; clean up
 999:000 | DONE ins | na 16 16 | 005310 | e8          |                 inx                  
1000:000 | DONE ins | na 16 16 | 005311 | e8          |                 inx                  
1001:000 | DONE ins | na 16 16 | 005312 | e8          |                 inx                  
1002:000 | DONE ins | na 16 16 | 005313 | e8          |                 inx                  
1003:000 | DONE wsp | na 16 16 |        |             |
1004:000 | DONE lbl | na 16 16 | 005314 |             | z_pqdo                               
1005:000 | DONE lbl | na 16 16 | 005314 |             | z_pdo                                
1005:001 | DONE ins | na 16 16 | 005314 | 60          |                 rts                  
1006:000 | DONE wsp | na 16 16 |        |             |
1007:000 | DONE wsp | na 16 16 |        |             |
1008:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1009:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
1010:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
1011:000 | DONE lbl | na 16 16 | 005315 |             | xt_brackettick                       
1012:000 | DONE ins | na 16 16 | 005315 | 20 78 54    |                 jsr 005478           
1013:000 | DONE ins | na 16 16 | 005318 | 20 d4 5a    |                 jsr 005ad4           
1014:000 | DONE wsp | na 16 16 |        |             |
1015:000 | DONE lbl | na 16 16 | 00531b |             | z_brackettick                        
1015:001 | DONE ins | na 16 16 | 00531b | 60          |                 rts                  
1016:000 | DONE wsp | na 16 16 |        |             |
1017:000 | DONE wsp | na 16 16 |        |             |
1018:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1019:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
1020:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
1021:000 | DONE lbl | na 16 16 | 00531c |             | xt_leftbracket                       
1022:000 | DONE ins | na 16 16 | 00531c | 64 14       |                 stz.d 000014         
1023:000 | DONE lbl | na 16 16 | 00531e |             | z_leftbracket                        
1023:001 | DONE ins | na 16 16 | 00531e | 60          |                 rts                  
1024:000 | DONE wsp | na 16 16 |        |             |
1025:000 | DONE wsp | na 16 16 |        |             |
1026:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1027:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
1028:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
1029:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
1030:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
1031:000 | DONE lbl | na 16 16 | 00531f |             | xt_rightbracket                      
1032:000 | DONE ins | na 16 16 | 00531f | a9 01 00    |                 lda.# 0001           
1033:000 | DONE ins | na 16 16 | 005322 | 85 14       |                 sta.d 000014         
1034:000 | DONE wsp | na 16 16 |        |             |
1035:000 | DONE lbl | na 16 16 | 005324 |             | z_rightbracket                       
1035:001 | DONE ins | na 16 16 | 005324 | 60          |                 rts                  
1036:000 | DONE wsp | na 16 16 |        |             |
1037:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1038:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
1039:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
1040:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
1041:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
1042:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
1043:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
1044:000 | DONE lbl | na 16 16 | 005325 |             | xt_bracketchar                       
1045:000 | DONE ins | na 16 16 | 005325 | 20 2a 56    |                 jsr 00562a           
1046:000 | DONE ins | na 16 16 | 005328 | 20 d4 5a    |                 jsr 005ad4           
1047:000 | DONE wsp | na 16 16 |        |             |
1048:000 | DONE lbl | na 16 16 | 00532b |             | z_bracketchar                        
1048:001 | DONE ins | na 16 16 | 00532b | 60          |                 rts                  
1049:000 | DONE wsp | na 16 16 |        |             |
1050:000 | DONE wsp | na 16 16 |        |             |
1051:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1052:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
1053:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
1054:000 | DONE lbl | na 16 16 | 00532c |             | xt_backslash                         
1055:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1056:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
1057:000 | DONE ins | na 16 16 | 00532c | a5 0a       |                 lda.d 00000a         
1058:000 | DONE ins | na 16 16 | 00532e | 85 0c       |                 sta.d 00000c         
1059:000 | DONE wsp | na 16 16 |        |             |
1060:000 | DONE lbl | na 16 16 | 005330 |             | z_backslash                          
1060:001 | DONE ins | na 16 16 | 005330 | 60          |                 rts                  
1061:000 | DONE wsp | na 16 16 |        |             |
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1064:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
1065:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
1066:000 | DONE lbl | na 16 16 | 005331 |             | xt_plus                              
1067:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1068:000 | DONE ins | na 16 16 | 005331 | 98          |                 tya                  
1069:000 | DONE ins | na 16 16 | 005332 | 18          |                 clc                  
1070:000 | DONE ins | na 16 16 | 005333 | 75 00       |                 adc.dx 00            
1071:000 | DONE ins | na 16 16 | 005335 | a8          |                 tay                  
1072:000 | DONE ins | na 16 16 | 005336 | e8          |                 inx                  
1073:000 | DONE ins | na 16 16 | 005337 | e8          |                 inx                  
1074:000 | DONE wsp | na 16 16 |        |             |
1075:000 | DONE lbl | na 16 16 | 005338 |             | z_plus                               
1075:001 | DONE ins | na 16 16 | 005338 | 60          |                 rts                  
1076:000 | DONE wsp | na 16 16 |        |             |
1077:000 | DONE wsp | na 16 16 |        |             |
1078:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1079:000 | DONE cmt | na 16 16 |        |             | ; LOOP ( -- ) X bytes / X cycles
1080:000 | DONE cmt | na 16 16 |        |             | ; Compile-time part of LOOP. This does nothing more but push
1081:000 | DONE cmt | na 16 16 |        |             | ; 01 on the stack and then call +LOOP. In Forth, this is
1082:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
1083:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY  Drops through to +LOOP
1084:000 | DONE lbl | na 16 16 | 005339 |             | xt_loop                              
1085:000 | DONE cmt | na 16 16 |        |             |                 ; have the finished word put 0001 on the Data Stack
1086:000 | DONE ins | na 16 16 | 005339 | f4 ed 53    |                 phe.# 0053ed         
1087:000 | DONE ins | na 16 16 | 00533c | 20 4f 6a    |                 jsr 006a4f           drops through to +LOOP
1088:000 | DONE wsp | na 16 16 |        |             |
1089:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1090:000 | DONE cmt | na 16 16 |        |             | ; +LOOP ( addr -- ) X bytes / X cycles
1091:000 | DONE cmt | na 16 16 |        |             | ; Compile-time part of +LOOP, also used for LOOP. is usually realized in Forth
1092:000 | DONE cmt | na 16 16 |        |             | ; as  : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE COMPILE-ONLY  Note
1093:000 | DONE cmt | na 16 16 |        |             | ; that LOOP uses this routine as well. We jump here with the address for looping
1094:000 | DONE cmt | na 16 16 |        |             | ; as TOS, and the address for aborting the loop (LEAVE) as the second
1095:000 | DONE cmt | na 16 16 |        |             | ; double-byte entry on the Return Stack (see DO and loops.txt for details).
1096:000 | DONE lbl | na 16 16 | 00533f |             | xt_ploop                             
1097:000 | DONE cmt | na 16 16 |        |             |                 ; compile (+LOOP) - use COMPILE, because this has to be natively
1098:000 | DONE cmt | na 16 16 |        |             |                 ; compiled
1099:000 | DONE ins | na 16 16 | 00533f | ca          |                 dex                  
1100:000 | DONE ins | na 16 16 | 005340 | ca          |                 dex                  
1101:000 | DONE ins | na 16 16 | 005341 | 94 00       |                 sty.dx 00            
1102:000 | DONE ins | na 16 16 | 005343 | a0 dc 52    |                 ldy.# 0052dc         
1103:000 | DONE ins | na 16 16 | 005346 | 20 89 56    |                 jsr 005689           
1104:000 | DONE wsp | na 16 16 |        |             |
1105:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need to loop back to is TOS
1106:000 | DONE ins | na 16 16 | 005349 | 20 42 52    |                 jsr 005242           
1107:000 | DONE wsp | na 16 16 |        |             |
1108:000 | DONE cmt | na 16 16 |        |             |                 ; Now compile an UNLOOP for when we're all done
1109:000 | DONE ins | na 16 16 | 00534c | ca          |                 dex                  
1110:000 | DONE ins | na 16 16 | 00534d | ca          |                 dex                  
1111:000 | DONE ins | na 16 16 | 00534e | 94 00       |                 sty.dx 00            
1112:000 | DONE ins | na 16 16 | 005350 | a0 02 60    |                 ldy.# 006002         
1113:000 | DONE ins | na 16 16 | 005353 | 20 89 56    |                 jsr 005689           
1114:000 | DONE wsp | na 16 16 |        |             |
1115:000 | DONE cmt | na 16 16 |        |             |                 ; Complete the compile of DO (or ?DO) by filling the hole they
1116:000 | DONE cmt | na 16 16 |        |             |                 ; left with the current address. This is TOS
1117:000 | DONE ins | na 16 16 | 005356 | a5 00       |                 lda.d 000000         we need CP-1 for RTS calculation
1118:000 | DONE ins | na 16 16 | 005358 | 3a          |                 dec.a                
1119:000 | DONE ins | na 16 16 | 005359 | 99 00 00    |                 sta.y 0000           
1120:000 | DONE wsp | na 16 16 |        |             |
1121:000 | DONE ins | na 16 16 | 00535c | b4 00       |                 ldy.dx 00            
1122:000 | DONE ins | na 16 16 | 00535e | e8          |                 inx                  
1123:000 | DONE ins | na 16 16 | 00535f | e8          |                 inx                  
1124:000 | DONE wsp | na 16 16 |        |             |
1125:000 | DONE lbl | na 16 16 | 005360 |             | z_loop                               
1126:000 | DONE lbl | na 16 16 | 005360 |             | z_ploop                              
1126:001 | DONE ins | na 16 16 | 005360 | 60          |                 rts                  
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE wsp | na 16 16 |        |             |
1129:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1130:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
1131:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
1132:000 | DONE lbl | na 16 16 | 005361 |             | xt_minus                             
1133:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1134:000 | DONE ins | na 16 16 | 005361 | 98          |                 tya                  
1135:000 | DONE ins | na 16 16 | 005362 | 49 ff ff    |                 eor.# 0ffff          
1136:000 | DONE wsp | na 16 16 |        |             |
1137:000 | DONE ins | na 16 16 | 005365 | 38          |                 sec                  not CLC
1138:000 | DONE ins | na 16 16 | 005366 | 75 00       |                 adc.dx 00            
1139:000 | DONE wsp | na 16 16 |        |             |
1140:000 | DONE ins | na 16 16 | 005368 | a8          |                 tay                  
1141:000 | DONE ins | na 16 16 | 005369 | e8          |                 inx                  
1142:000 | DONE ins | na 16 16 | 00536a | e8          |                 inx                  
1143:000 | DONE wsp | na 16 16 |        |             |
1144:000 | DONE lbl | na 16 16 | 00536b |             | z_minus                              
1144:001 | DONE ins | na 16 16 | 00536b | 60          |                 rts                  
1145:000 | DONE wsp | na 16 16 |        |             |
1146:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1147:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
1148:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
1149:000 | DONE lbl | na 16 16 | 00536c |             | xt_mrot                              
1150:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1151:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1152:000 | DONE ins | na 16 16 | 00536c | b5 02       |                 lda.dx 02            save a
1153:000 | DONE ins | na 16 16 | 00536e | 94 02       |                 sty.dx 02            move c to 3OS
1154:000 | DONE ins | na 16 16 | 005370 | b4 00       |                 ldy.dx 00            move b to TOS
1155:000 | DONE ins | na 16 16 | 005372 | 95 00       |                 sta.dx 00            save a as NOS
1156:000 | DONE wsp | na 16 16 |        |             |
1157:000 | DONE lbl | na 16 16 | 005374 |             | z_mrot                               
1157:001 | DONE ins | na 16 16 | 005374 | 60          |                 rts                  
1158:000 | DONE wsp | na 16 16 |        |             |
1159:000 | DONE wsp | na 16 16 |        |             |
1160:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1161:000 | DONE cmt | na 16 16 |        |             | ; -TRAILING ( addr u -- addr u ) X bytes / X cycles
1162:000 | DONE cmt | na 16 16 |        |             | ; Remove any trailing blanks. Uses tmp3
1163:000 | DONE lbl | na 16 16 | 005375 |             | xt_dtrailing                         
1164:000 | DONE cmt | na 16 16 |        |             |                 ; if u is zero, just return string
1165:000 | DONE ins | na 16 16 | 005375 | 98          |                 tya                  force flag check
1166:000 | DONE ins | na 16 16 | 005376 | f0 13       |                 beq 00538b           
1167:000 | DONE wsp | na 16 16 |        |             |
1168:000 | DONE ins | na 16 16 | 005378 | b5 00       |                 lda.dx 00            
1169:000 | DONE ins | na 16 16 | 00537a | 85 20       |                 sta.d 000020         
1170:000 | DONE ins | na 16 16 | 00537c | 88          |                 dey                  convert length to index
1171:000 | DONE ins | na 16 16 | 00537d | e2 20       |                 sep 20               
1171:001 | DONE ctl | na  8 16 |        |             |         .!a8
1172:000 | DONE wsp | na  8 16 |        |             |
1173:000 | DONE lbl | na  8 16 | 00537f |             | dtrailing_loop                       
1174:000 | DONE ins | na  8 16 | 00537f | b1 20       |                 lda.diy 000020       
1175:000 | DONE ins | na  8 16 | 005381 | c9 20       |                 cmp.# 20             
1176:000 | DONE ins | na  8 16 | 005383 | d0 03       |                 bne 005388           
1177:000 | DONE ins | na  8 16 | 005385 | 88          |                 dey                  
1178:000 | DONE ins | na  8 16 | 005386 | 10 f7       |                 bpl 00537f           fall through when done
1179:000 | DONE wsp | na  8 16 |        |             |
1180:000 | DONE lbl | na  8 16 | 005388 |             | dtrailing_done                       
1181:000 | DONE ins | na  8 16 | 005388 | c2 20       |                 rep 20               
1181:001 | DONE ctl | na 16 16 |        |             |         .!a16
1182:000 | DONE ins | na 16 16 | 00538a | c8          |                 iny                  convert index to length
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE lbl | na 16 16 | 00538b |             | z_dtrailing                          
1184:001 | DONE ins | na 16 16 | 00538b | 60          |                 rts                  
1185:000 | DONE wsp | na 16 16 |        |             |
1186:000 | DONE wsp | na 16 16 |        |             |
1187:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1188:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
1189:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
1190:000 | DONE lbl | na 16 16 | 00538c |             | xt_equal                             
1191:000 | DONE ins | na 16 16 | 00538c | 98          |                 tya                  
1192:000 | DONE ins | na 16 16 | 00538d | a0 00 00    |                 ldy.# 0000           default value is false
1193:000 | DONE wsp | na 16 16 |        |             |
1194:000 | DONE ins | na 16 16 | 005390 | d5 00       |                 cmp.dx 00            
1195:000 | DONE ins | na 16 16 | 005392 | d0 01       |                 bne 005395           
1196:000 | DONE ins | na 16 16 | 005394 | 88          |                 dey                  wraps to 0FFFF (true)
1197:000 | DONE wsp | na 16 16 |        |             |
1198:000 | DONE lbl | na 16 16 | 005395 |             | equal_not                            
1199:000 | DONE ins | na 16 16 | 005395 | e8          |                 inx                  
1200:000 | DONE ins | na 16 16 | 005396 | e8          |                 inx                  
1201:000 | DONE wsp | na 16 16 |        |             |
1202:000 | DONE lbl | na 16 16 | 005397 |             | z_equal                              
1202:001 | DONE ins | na 16 16 | 005397 | 60          |                 rts                  
1203:000 | DONE wsp | na 16 16 |        |             |
1204:000 | DONE wsp | na 16 16 |        |             |
1205:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1206:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
1207:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
1208:000 | DONE lbl | na 16 16 | 005398 |             | xt_zero                              
1209:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1210:000 | DONE ins | na 16 16 | 005398 | ca          |                 dex                  
1211:000 | DONE ins | na 16 16 | 005399 | ca          |                 dex                  
1212:000 | DONE ins | na 16 16 | 00539a | 94 00       |                 sty.dx 00            
1213:000 | DONE ins | na 16 16 | 00539c | a0 00 00    |                 ldy.# 0000           
1214:000 | DONE wsp | na 16 16 |        |             |
1215:000 | DONE lbl | na 16 16 | 00539f |             | z_zero                               
1215:001 | DONE ins | na 16 16 | 00539f | 60          |                 rts                  
1216:000 | DONE wsp | na 16 16 |        |             |
1217:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1218:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
1219:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
1220:000 | DONE lbl | na 16 16 | 0053a0 |             | xt_zero-equal                        
1221:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1222:000 | DONE ins | na 16 16 | 0053a0 | 98          |                 tya                  force flag check
1223:000 | DONE ins | na 16 16 | 0053a1 | d0 05       |                 bne 0053a8           
1224:000 | DONE wsp | na 16 16 |        |             |
1225:000 | DONE ins | na 16 16 | 0053a3 | a0 ff ff    |                 ldy.# 0ffff          
1226:000 | DONE ins | na 16 16 | 0053a6 | 80 03       |                 bra 0053ab           
1227:000 | DONE lbl | na 16 16 | 0053a8 |             | ze_not_zero                          
1228:000 | DONE ins | na 16 16 | 0053a8 | a0 00 00    |                 ldy.# 0000           
1229:000 | DONE wsp | na 16 16 |        |             |
1230:000 | DONE lbl | na 16 16 | 0053ab |             | z_zero-equal                         
1230:001 | DONE ins | na 16 16 | 0053ab | 60          |                 rts                  
1231:000 | DONE wsp | na 16 16 |        |             |
1232:000 | DONE wsp | na 16 16 |        |             |
1233:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1234:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1235:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1236:000 | DONE lbl | na 16 16 | 0053ac |             | xt_zero-less                         
1237:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1238:000 | DONE ins | na 16 16 | 0053ac | 98          |                 tya                  force flag check
1239:000 | DONE ins | na 16 16 | 0053ad | 30 05       |                 bmi 0053b4           
1240:000 | DONE wsp | na 16 16 |        |             |
1241:000 | DONE ins | na 16 16 | 0053af | a0 00 00    |                 ldy.# 0000           
1242:000 | DONE ins | na 16 16 | 0053b2 | 80 03       |                 bra 0053b7           
1243:000 | DONE wsp | na 16 16 |        |             |
1244:000 | DONE lbl | na 16 16 | 0053b4 |             | zero-less-is-less                    
1245:000 | DONE ins | na 16 16 | 0053b4 | a0 ff ff    |                 ldy.# 0ffff          
1246:000 | DONE wsp | na 16 16 |        |             |
1247:000 | DONE lbl | na 16 16 | 0053b7 |             | z_zero-less                          
1247:001 | DONE ins | na 16 16 | 0053b7 | 60          |                 rts                  
1248:000 | DONE wsp | na 16 16 |        |             |
1249:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1250:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1251:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1252:000 | DONE lbl | na 16 16 | 0053b8 |             | xt_zero-notequal                     
1253:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1254:000 | DONE ins | na 16 16 | 0053b8 | 98          |                 tya                  force flag check
1255:000 | DONE ins | na 16 16 | 0053b9 | f0 05       |                 beq 0053c0           
1256:000 | DONE ins | na 16 16 | 0053bb | a0 ff ff    |                 ldy.# 0ffff          
1257:000 | DONE ins | na 16 16 | 0053be | 80 03       |                 bra 0053c3           
1258:000 | DONE lbl | na 16 16 | 0053c0 |             | zne_is_zero                          
1259:000 | DONE ins | na 16 16 | 0053c0 | a0 00 00    |                 ldy.# 0000           
1260:000 | DONE lbl | na 16 16 | 0053c3 |             | z_zero-notequal                      
1261:000 | DONE ins | na 16 16 | 0053c3 | 60          |                 rts                  
1262:000 | DONE wsp | na 16 16 |        |             |
1263:000 | DONE wsp | na 16 16 |        |             |
1264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1265:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1266:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1267:000 | DONE lbl | na 16 16 | 0053c4 |             | xt_zero-more                         
1268:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1269:000 | DONE ins | na 16 16 | 0053c4 | a9 00 00    |                 lda.# 0000           default is false
1270:000 | DONE wsp | na 16 16 |        |             |
1271:000 | DONE ins | na 16 16 | 0053c7 | 88          |                 dey                  
1272:000 | DONE ins | na 16 16 | 0053c8 | 10 02       |                 bpl 0053cc           was at least 1
1273:000 | DONE wsp | na 16 16 |        |             |
1274:000 | DONE ins | na 16 16 | 0053ca | 80 01       |                 bra 0053cd           nope, stays false
1275:000 | DONE wsp | na 16 16 |        |             |
1276:000 | DONE lbl | na 16 16 | 0053cc |             | zero-more_true                       
1277:000 | DONE ins | na 16 16 | 0053cc | 3a          |                 dec.a                wraps to 0ffff, true
1278:000 | DONE lbl | na 16 16 | 0053cd |             | zero-more_done                       
1279:000 | DONE ins | na 16 16 | 0053cd | a8          |                 tay                  
1280:000 | DONE wsp | na 16 16 |        |             |
1281:000 | DONE lbl | na 16 16 | 0053ce |             | z_zero-more                          
1281:001 | DONE ins | na 16 16 | 0053ce | 60          |                 rts                  
1282:000 | DONE wsp | na 16 16 |        |             |
1283:000 | DONE wsp | na 16 16 |        |             |
1284:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1285:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1286:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1287:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1288:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1289:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmpbranch
1290:000 | DONE lbl | na 16 16 | 0053cf |             | xt_zbranch                           
1291:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1292:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1293:000 | DONE ins | na 16 16 | 0053cf | f4 d6 53    |                 phe.# 0053d6         
1294:000 | DONE ins | na 16 16 | 0053d2 | 20 4f 6a    |                 jsr 006a4f           
1295:000 | DONE wsp | na 16 16 |        |             |
1296:000 | DONE lbl | na 16 16 | 0053d5 |             | z_zbranch                            
1296:001 | DONE ins | na 16 16 | 0053d5 | 60          |                 rts                  
1297:000 | DONE wsp | na 16 16 |        |             |
1298:000 | DONE lbl | na 16 16 | 0053d6 |             | zbranch_rt                           
1299:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1300:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1301:000 | DONE ins | na 16 16 | 0053d6 | 98          |                 tya                  force flag check
1302:000 | DONE ins | na 16 16 | 0053d7 | f0 05       |                 beq 0053de           flag is false (zero), so we branch
1303:000 | DONE wsp | na 16 16 |        |             |
1304:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1305:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1306:000 | DONE ins | na 16 16 | 0053d9 | 68          |                 pla                  
1307:000 | DONE ins | na 16 16 | 0053da | 1a          |                 inc.a                
1308:000 | DONE ins | na 16 16 | 0053db | 1a          |                 inc.a                
1309:000 | DONE wsp | na 16 16 |        |             |
1310:000 | DONE ins | na 16 16 | 0053dc | 80 09       |                 bra 0053e7           
1311:000 | DONE wsp | na 16 16 |        |             |
1312:000 | DONE lbl | na 16 16 | 0053de |             | zb_zero                              
1313:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1314:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1315:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1316:000 | DONE ins | na 16 16 | 0053de | 68          |                 pla                  
1317:000 | DONE ins | na 16 16 | 0053df | 85 1a       |                 sta.d 00001a         
1318:000 | DONE ins | na 16 16 | 0053e1 | a0 01 00    |                 ldy.# 0001           
1319:000 | DONE ins | na 16 16 | 0053e4 | b1 1a       |                 lda.diy 00001a       
1320:000 | DONE wsp | na 16 16 |        |             |
1321:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1322:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1323:000 | DONE ins | na 16 16 | 0053e6 | 3a          |                 dec.a                
1324:000 | DONE wsp | na 16 16 |        |             |
1325:000 | DONE lbl | na 16 16 | 0053e7 |             | zb_done                              
1326:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1327:000 | DONE ins | na 16 16 | 0053e7 | 48          |                 pha                  
1328:000 | DONE wsp | na 16 16 |        |             |
1329:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1330:000 | DONE ins | na 16 16 | 0053e8 | b4 00       |                 ldy.dx 00            
1331:000 | DONE ins | na 16 16 | 0053ea | e8          |                 inx                  
1332:000 | DONE ins | na 16 16 | 0053eb | e8          |                 inx                  
1333:000 | DONE wsp | na 16 16 |        |             |
1334:000 | DONE ins | na 16 16 | 0053ec | 60          |                 rts                  
1335:000 | DONE wsp | na 16 16 |        |             |
1336:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1337:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1338:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1339:000 | DONE lbl | na 16 16 | 0053ed |             | xt_one                               
1340:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1341:000 | DONE ins | na 16 16 | 0053ed | ca          |                 dex                  
1342:000 | DONE ins | na 16 16 | 0053ee | ca          |                 dex                  
1343:000 | DONE ins | na 16 16 | 0053ef | 94 00       |                 sty.dx 00            
1344:000 | DONE ins | na 16 16 | 0053f1 | a0 01 00    |                 ldy.# 0001           
1345:000 | DONE wsp | na 16 16 |        |             |
1346:000 | DONE lbl | na 16 16 | 0053f4 |             | z_one                                
1346:001 | DONE ins | na 16 16 | 0053f4 | 60          |                 rts                  
1347:000 | DONE wsp | na 16 16 |        |             |
1348:000 | DONE wsp | na 16 16 |        |             |
1349:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1350:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1351:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1352:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1353:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1354:000 | DONE lbl | na 16 16 | 0053f5 |             | xt_one-minus                         
1355:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1356:000 | DONE ins | na 16 16 | 0053f5 | 88          |                 dey                  
1357:000 | DONE lbl | na 16 16 | 0053f6 |             | z_one-minus                          
1357:001 | DONE ins | na 16 16 | 0053f6 | 60          |                 rts                  
1358:000 | DONE wsp | na 16 16 |        |             |
1359:000 | DONE wsp | na 16 16 |        |             |
1360:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1361:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1362:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1363:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1364:000 | DONE lbl | na 16 16 | 0053f7 |             | xt_one-plus                          
1365:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1366:000 | DONE ins | na 16 16 | 0053f7 | c8          |                 iny                  
1367:000 | DONE lbl | na 16 16 | 0053f8 |             | z_one-plus                           
1367:001 | DONE ins | na 16 16 | 0053f8 | 60          |                 rts                  
1368:000 | DONE wsp | na 16 16 |        |             |
1369:000 | DONE wsp | na 16 16 |        |             |
1370:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1371:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1372:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1373:000 | DONE lbl | na 16 16 | 0053f9 |             | xt_two                               
1374:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1375:000 | DONE ins | na 16 16 | 0053f9 | ca          |                 dex                  
1376:000 | DONE ins | na 16 16 | 0053fa | ca          |                 dex                  
1377:000 | DONE ins | na 16 16 | 0053fb | 94 00       |                 sty.dx 00            
1378:000 | DONE ins | na 16 16 | 0053fd | a0 02 00    |                 ldy.# 0002           
1379:000 | DONE wsp | na 16 16 |        |             |
1380:000 | DONE lbl | na 16 16 | 005400 |             | z_two                                
1380:001 | DONE ins | na 16 16 | 005400 | 60          |                 rts                  
1381:000 | DONE wsp | na 16 16 |        |             |
1382:000 | DONE wsp | na 16 16 |        |             |
1383:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1384:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1385:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1386:000 | DONE lbl | na 16 16 | 005401 |             | xt_two-star                          
1387:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1388:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1389:000 | DONE ins | na 16 16 | 005401 | 98          |                 tya                  
1390:000 | DONE ins | na 16 16 | 005402 | 0a          |                 asl.a                
1391:000 | DONE ins | na 16 16 | 005403 | a8          |                 tay                  
1392:000 | DONE wsp | na 16 16 |        |             |
1393:000 | DONE lbl | na 16 16 | 005404 |             | z_two-star                           
1393:001 | DONE ins | na 16 16 | 005404 | 60          |                 rts                  
1394:000 | DONE wsp | na 16 16 |        |             |
1395:000 | DONE wsp | na 16 16 |        |             |
1396:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1397:000 | DONE cmt | na 16 16 |        |             | ; 2>R "TWOTOR" ( n1 n2 -- )(R: -- n1 n2)  X bytes / X cycles
1398:000 | DONE cmt | na 16 16 |        |             | ; Push top two entries to Return Stack. The same as SWAP >R >R except that if we
1399:000 | DONE cmt | na 16 16 |        |             | ; jumped here, the return address will be in the way. May not be natively
1400:000 | DONE cmt | na 16 16 |        |             | ; compiled
1401:000 | DONE lbl | na 16 16 | 005405 |             | xt_twotor                            
1402:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1403:000 | DONE ins | na 16 16 | 005405 | 68          |                 pla                  
1404:000 | DONE ins | na 16 16 | 005406 | 85 20       |                 sta.d 000020         
1405:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1406:000 | DONE wsp | na 16 16 |        |             |
1407:000 | DONE ins | na 16 16 | 005408 | b5 00       |                 lda.dx 00            NOS stays next on Return Stack
1408:000 | DONE ins | na 16 16 | 00540a | 48          |                 pha                  
1409:000 | DONE ins | na 16 16 | 00540b | 5a          |                 phy                  TOS stays on top
1410:000 | DONE wsp | na 16 16 |        |             |
1411:000 | DONE ins | na 16 16 | 00540c | b4 02       |                 ldy.dx 02            clean up data stack
1412:000 | DONE ins | na 16 16 | 00540e | e8          |                 inx                  
1413:000 | DONE ins | na 16 16 | 00540f | e8          |                 inx                  
1414:000 | DONE ins | na 16 16 | 005410 | e8          |                 inx                  
1415:000 | DONE ins | na 16 16 | 005411 | e8          |                 inx                  
1416:000 | DONE wsp | na 16 16 |        |             |
1417:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1418:000 | DONE ins | na 16 16 | 005412 | a5 20       |                 lda.d 000020         
1419:000 | DONE ins | na 16 16 | 005414 | 48          |                 pha                  
1420:000 | DONE wsp | na 16 16 |        |             |
1421:000 | DONE lbl | na 16 16 | 005415 |             | z_twotor                             
1421:001 | DONE ins | na 16 16 | 005415 | 60          |                 rts                  
1422:000 | DONE wsp | na 16 16 |        |             |
1423:000 | DONE wsp | na 16 16 |        |             |
1424:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1425:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1426:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1427:000 | DONE lbl | na 16 16 | 005416 |             | xt_2drop                             
1428:000 | DONE ins | na 16 16 | 005416 | b4 02       |                 ldy.dx 02            
1429:000 | DONE ins | na 16 16 | 005418 | e8          |                 inx                  
1430:000 | DONE ins | na 16 16 | 005419 | e8          |                 inx                  
1431:000 | DONE ins | na 16 16 | 00541a | e8          |                 inx                  
1432:000 | DONE ins | na 16 16 | 00541b | e8          |                 inx                  
1433:000 | DONE wsp | na 16 16 |        |             |
1434:000 | DONE lbl | na 16 16 | 00541c |             | z_2drop                              
1434:001 | DONE ins | na 16 16 | 00541c | 60          |                 rts                  
1435:000 | DONE wsp | na 16 16 |        |             |
1436:000 | DONE wsp | na 16 16 |        |             |
1437:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1438:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1439:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1440:000 | DONE wsp | na 16 16 |        |             |
1441:000 | DONE lbl | na 16 16 | 00541d |             | xt_2dup                              
1442:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1443:000 | DONE ins | na 16 16 | 00541d | ca          |                 dex                  
1444:000 | DONE ins | na 16 16 | 00541e | ca          |                 dex                  
1445:000 | DONE ins | na 16 16 | 00541f | ca          |                 dex                  
1446:000 | DONE ins | na 16 16 | 005420 | ca          |                 dex                  
1447:000 | DONE ins | na 16 16 | 005421 | 94 02       |                 sty.dx 02            
1448:000 | DONE ins | na 16 16 | 005423 | b5 04       |                 lda.dx 04            
1449:000 | DONE ins | na 16 16 | 005425 | 95 00       |                 sta.dx 00            
1450:000 | DONE wsp | na 16 16 |        |             |
1451:000 | DONE lbl | na 16 16 | 005427 |             | z_2dup                               
1451:001 | DONE ins | na 16 16 | 005427 | 60          |                 rts                  
1452:000 | DONE wsp | na 16 16 |        |             |
1453:000 | DONE wsp | na 16 16 |        |             |
1454:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1455:000 | DONE cmt | na 16 16 |        |             | ; 2OVER ( d1 d2 -- d1 d2 d1 ) X bytes / X cycles
1456:000 | DONE cmt | na 16 16 |        |             | ; Copy cell pair that is NOS to TOS
1457:000 | DONE lbl | na 16 16 | 005428 |             | xt_2over                             
1458:000 | DONE ins | na 16 16 | 005428 | ca          |                 dex                  
1459:000 | DONE ins | na 16 16 | 005429 | ca          |                 dex                  
1460:000 | DONE ins | na 16 16 | 00542a | ca          |                 dex                  
1461:000 | DONE ins | na 16 16 | 00542b | ca          |                 dex                  
1462:000 | DONE ins | na 16 16 | 00542c | 94 02       |                 sty.dx 02            
1463:000 | DONE ins | na 16 16 | 00542e | b4 06       |                 ldy.dx 06            
1464:000 | DONE ins | na 16 16 | 005430 | b5 08       |                 lda.dx 08            
1465:000 | DONE ins | na 16 16 | 005432 | 95 00       |                 sta.dx 00            
1466:000 | DONE wsp | na 16 16 |        |             |
1467:000 | DONE lbl | na 16 16 | 005434 |             | z_2over                              
1467:001 | DONE ins | na 16 16 | 005434 | 60          |                 rts                  
1468:000 | DONE wsp | na 16 16 |        |             |
1469:000 | DONE wsp | na 16 16 |        |             |
1470:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1471:000 | DONE cmt | na 16 16 |        |             | ; 2R> "TWOFROMR" ( -- n1 n2 ) ( R: n1 n2 ) X bytes / X cycles
1472:000 | DONE cmt | na 16 16 |        |             | ; Pull top two entries from Return Stack. Is the same as R> R> SWAP
1473:000 | DONE cmt | na 16 16 |        |             | ; As with R>, the problem with the is word is that the top value on the Return
1474:000 | DONE cmt | na 16 16 |        |             | ; Stack for a STC Forth is the return address, which we need to get out of the
1475:000 | DONE cmt | na 16 16 |        |             | ; way first. Uses tmp3
1476:000 | DONE lbl | na 16 16 | 005435 |             | xt_twofromr                          
1477:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1478:000 | DONE ins | na 16 16 | 005435 | 68          |                 pla                  
1479:000 | DONE ins | na 16 16 | 005436 | 85 20       |                 sta.d 000020         
1480:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1481:000 | DONE wsp | na 16 16 |        |             |
1482:000 | DONE ins | na 16 16 | 005438 | ca          |                 dex                  make room on Data Stack
1483:000 | DONE ins | na 16 16 | 005439 | ca          |                 dex                  
1484:000 | DONE ins | na 16 16 | 00543a | ca          |                 dex                  
1485:000 | DONE ins | na 16 16 | 00543b | ca          |                 dex                  
1486:000 | DONE ins | na 16 16 | 00543c | 94 02       |                 sty.dx 02            
1487:000 | DONE wsp | na 16 16 |        |             |
1488:000 | DONE ins | na 16 16 | 00543e | 7a          |                 ply                  top element stays on top
1489:000 | DONE ins | na 16 16 | 00543f | 68          |                 pla                  next element stays below
1490:000 | DONE ins | na 16 16 | 005440 | 95 00       |                 sta.dx 00            
1491:000 | DONE wsp | na 16 16 |        |             |
1492:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1493:000 | DONE cmt | na 16 16 |        |             |                 ; restore return address
1494:000 | DONE ins | na 16 16 | 005442 | a5 20       |                 lda.d 000020         
1495:000 | DONE ins | na 16 16 | 005444 | 48          |                 pha                  
1496:000 | DONE wsp | na 16 16 |        |             |
1497:000 | DONE lbl | na 16 16 | 005445 |             | z_twofromr                           
1497:001 | DONE ins | na 16 16 | 005445 | 60          |                 rts                  
1498:000 | DONE wsp | na 16 16 |        |             |
1499:000 | DONE wsp | na 16 16 |        |             |
1500:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1501:000 | DONE cmt | na 16 16 |        |             | ; 2R@ ( -- n1 n2 )(R: n1 n2 -- n1 n2 )  X bytes / X cycles
1502:000 | DONE cmt | na 16 16 |        |             | ; Copy two words off the Return Stack.  This is R> R> 2DUP >R >R SWAP but we
1503:000 | DONE cmt | na 16 16 |        |             | ; can do this a lot faster in assembler This routine may not be natively
1504:000 | DONE cmt | na 16 16 |        |             | ; compiled; because it accessed by a JSR, the first element on the Return Stack
1505:000 | DONE cmt | na 16 16 |        |             | ; (LDA.S 01) is the return address.
1506:000 | DONE lbl | na 16 16 | 005446 |             | xt_tworfetch                         
1507:000 | DONE cmt | na 16 16 |        |             |                 ; make room on the Data Stack
1508:000 | DONE ins | na 16 16 | 005446 | ca          |                 dex                  
1509:000 | DONE ins | na 16 16 | 005447 | ca          |                 dex                  
1510:000 | DONE ins | na 16 16 | 005448 | ca          |                 dex                  
1511:000 | DONE ins | na 16 16 | 005449 | ca          |                 dex                  
1512:000 | DONE ins | na 16 16 | 00544a | 94 02       |                 sty.dx 02            
1513:000 | DONE wsp | na 16 16 |        |             |
1514:000 | DONE ins | na 16 16 | 00544c | a3 03       |                 lda.s 03             get second element of Return Stack
1515:000 | DONE ins | na 16 16 | 00544e | a8          |                 tay                  
1516:000 | DONE ins | na 16 16 | 00544f | a3 05       |                 lda.s 05             get third element on Return Stack
1517:000 | DONE ins | na 16 16 | 005451 | 95 00       |                 sta.dx 00            
1518:000 | DONE wsp | na 16 16 |        |             |
1519:000 | DONE lbl | na 16 16 | 005453 |             | z_tworfetch                          
1519:001 | DONE ins | na 16 16 | 005453 | 60          |                 rts                  
1520:000 | DONE wsp | na 16 16 |        |             |
1521:000 | DONE wsp | na 16 16 |        |             |
1522:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1523:000 | DONE cmt | na 16 16 |        |             | ; 2SWAP ( d1 d2 -- d2 d1 ) X bytes / X cycles
1524:000 | DONE cmt | na 16 16 |        |             | ; Swap two double cell numbers on the Data Stack.
1525:000 | DONE lbl | na 16 16 | 005454 |             | xt_2swap                             
1526:000 | DONE ins | na 16 16 | 005454 | 5a          |                 phy                  hi word of TOS
1527:000 | DONE ins | na 16 16 | 005455 | b4 02       |                 ldy.dx 02            hi word of NOS
1528:000 | DONE ins | na 16 16 | 005457 | 68          |                 pla                  
1529:000 | DONE ins | na 16 16 | 005458 | 95 02       |                 sta.dx 02            
1530:000 | DONE wsp | na 16 16 |        |             |
1531:000 | DONE ins | na 16 16 | 00545a | b5 00       |                 lda.dx 00            lo word of TOS
1532:000 | DONE ins | na 16 16 | 00545c | 48          |                 pha                  
1533:000 | DONE ins | na 16 16 | 00545d | b5 04       |                 lda.dx 04            lo word of NOS
1534:000 | DONE ins | na 16 16 | 00545f | 95 00       |                 sta.dx 00            
1535:000 | DONE ins | na 16 16 | 005461 | 68          |                 pla                  
1536:000 | DONE ins | na 16 16 | 005462 | 95 04       |                 sta.dx 04            
1537:000 | DONE wsp | na 16 16 |        |             |
1538:000 | DONE lbl | na 16 16 | 005464 |             | z_2swap                              
1538:001 | DONE ins | na 16 16 | 005464 | 60          |                 rts                  
1539:000 | DONE wsp | na 16 16 |        |             |
1540:000 | DONE wsp | na 16 16 |        |             |
1541:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1542:000 | DONE cmt | na 16 16 |        |             | ; 2VARIABLE ( "name" -- ) X bytes / X cycles
1543:000 | DONE cmt | na 16 16 |        |             | ; Create a variable with space for a double celled word. This can be realized in
1544:000 | DONE cmt | na 16 16 |        |             | ; Forth as either CREATE 2 CELLS ALLOT or just CREATE 0 , 0 ,
1545:000 | DONE cmt | na 16 16 |        |             | ; We use the second variant, letting CREATE do the hard work
1546:000 | DONE cmt | na 16 16 |        |             | ; TODO see if it is faster to use Y as an index and increase by four
1547:000 | DONE lbl | na 16 16 | 005465 |             | xt_2variable                         
1548:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1549:000 | DONE ins | na 16 16 | 005465 | 20 61 57    |                 jsr 005761           
1550:000 | DONE wsp | na 16 16 |        |             |
1551:000 | DONE ins | na 16 16 | 005468 | a9 00 00    |                 lda.# 0000           
1552:000 | DONE ins | na 16 16 | 00546b | 92 00       |                 sta.di 000000        
1553:000 | DONE ins | na 16 16 | 00546d | e6 00       |                 inc.d 000000         
1554:000 | DONE ins | na 16 16 | 00546f | e6 00       |                 inc.d 000000         
1555:000 | DONE ins | na 16 16 | 005471 | 92 00       |                 sta.di 000000        
1556:000 | DONE ins | na 16 16 | 005473 | e6 00       |                 inc.d 000000         
1557:000 | DONE ins | na 16 16 | 005475 | e6 00       |                 inc.d 000000         
1558:000 | DONE wsp | na 16 16 |        |             |
1559:000 | DONE lbl | na 16 16 | 005477 |             | z_2variable                          
1559:001 | DONE ins | na 16 16 | 005477 | 60          |                 rts                  
1560:000 | DONE wsp | na 16 16 |        |             |
1561:000 | DONE wsp | na 16 16 |        |             |
1562:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1563:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1564:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1565:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1566:000 | DONE lbl | na 16 16 | 005478 |             | xt_tick                              
1567:000 | DONE ins | na 16 16 | 005478 | 20 73 5c    |                 jsr 005c73           ( -- addr u )
1568:000 | DONE wsp | na 16 16 |        |             |
1569:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1570:000 | DONE ins | na 16 16 | 00547b | 98          |                 tya                  force flag check
1571:000 | DONE ins | na 16 16 | 00547c | d0 06       |                 bne 005484           
1572:000 | DONE wsp | na 16 16 |        |             |
1573:000 | DONE ins | na 16 16 | 00547e | a9 43 72    |                 lda.# 007243         
1574:000 | DONE ins | na 16 16 | 005481 | 4c 70 6a    |                 jmp 006a70           
1575:000 | DONE wsp | na 16 16 |        |             |
1576:000 | DONE lbl | na 16 16 | 005484 |             | tick_have_word                       
1577:000 | DONE ins | na 16 16 | 005484 | 20 84 59    |                 jsr 005984           ( addr u -- nt)
1578:000 | DONE ins | na 16 16 | 005487 | 98          |                 tya                  force flag check
1579:000 | DONE wsp | na 16 16 |        |             |
1580:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1581:000 | DONE ins | na 16 16 | 005488 | d0 06       |                 bne 005490           
1582:000 | DONE wsp | na 16 16 |        |             |
1583:000 | DONE ins | na 16 16 | 00548a | a9 e0 72    |                 lda.# 0072e0         
1584:000 | DONE ins | na 16 16 | 00548d | 4c 70 6a    |                 jmp 006a70           
1585:000 | DONE wsp | na 16 16 |        |             |
1586:000 | DONE lbl | na 16 16 | 005490 |             | tick_have_nt                         
1587:000 | DONE ins | na 16 16 | 005490 | 20 8b 5b    |                 jsr 005b8b           ( nt -- xt )
1588:000 | DONE wsp | na 16 16 |        |             |
1589:000 | DONE lbl | na 16 16 | 005493 |             | z_tick                               
1589:001 | DONE ins | na 16 16 | 005493 | 60          |                 rts                  
1590:000 | DONE wsp | na 16 16 |        |             |
1591:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1592:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1593:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1594:000 | DONE lbl | na 16 16 | 005494 |             | xt_abortq                            
1595:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1596:000 | DONE ins | na 16 16 | 005494 | 20 9e 5d    |                 jsr 005d9e           save string
1597:000 | DONE wsp | na 16 16 |        |             |
1598:000 | DONE ins | na 16 16 | 005497 | f4 9e 54    |                 phe.# 00549e         compile run-time aspect
1599:000 | DONE ins | na 16 16 | 00549a | 20 4f 6a    |                 jsr 006a4f           
1600:000 | DONE wsp | na 16 16 |        |             |
1601:000 | DONE ins | na 16 16 | 00549d | 60          |                 rts                  
1602:000 | DONE wsp | na 16 16 |        |             |
1603:000 | DONE lbl | na 16 16 | 00549e |             | abortq_rt                            
1604:000 | DONE cmt | na 16 16 |        |             |                 ; we land here with ( f addr u )
1605:000 | DONE ins | na 16 16 | 00549e | b5 02       |                 lda.dx 02            get flag as 3OS
1606:000 | DONE ins | na 16 16 | 0054a0 | f0 06       |                 beq 0054a8           if FALSE, we're done
1607:000 | DONE wsp | na 16 16 |        |             |
1608:000 | DONE cmt | na 16 16 |        |             |                 ; if TRUE, we print string and ABORT
1609:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we want to inform user we're aborting
1610:000 | DONE ins | na 16 16 | 0054a2 | 20 0b 5f    |                 jsr 005f0b           
1611:000 | DONE ins | na 16 16 | 0054a5 | 4c af 50    |                 jmp 0050af           not JSR because we never come back
1612:000 | DONE wsp | na 16 16 |        |             |
1613:000 | DONE lbl | na 16 16 | 0054a8 |             | abortq_done                          
1614:000 | DONE cmt | na 16 16 |        |             |                 ; drop the three entries from the Data Stack
1615:000 | DONE ins | na 16 16 | 0054a8 | b4 04       |                 ldy.dx 04            fourth on the stack
1616:000 | DONE wsp | na 16 16 |        |             |
1617:000 | DONE cmt | na 16 16 |        |             |                 ; this is the same size, but three cycles faster than six INX
1618:000 | DONE cmt | na 16 16 |        |             |                 ; instructions
1619:000 | DONE ins | na 16 16 | 0054aa | 8a          |                 txa                  
1620:000 | DONE ins | na 16 16 | 0054ab | 18          |                 clc                  
1621:000 | DONE ins | na 16 16 | 0054ac | 69 06 00    |                 adc.# 0006           
1622:000 | DONE ins | na 16 16 | 0054af | aa          |                 tax                  
1623:000 | DONE wsp | na 16 16 |        |             |
1624:000 | DONE lbl | na 16 16 | 0054b0 |             | z_abortq                             
1624:001 | DONE ins | na 16 16 | 0054b0 | 60          |                 rts                  
1625:000 | DONE wsp | na 16 16 |        |             |
1626:000 | DONE wsp | na 16 16 |        |             |
1627:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1628:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1629:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1630:000 | DONE lbl | na 16 16 | 0054b1 |             | xt_abs                               
1631:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1632:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1633:000 | DONE ins | na 16 16 | 0054b1 | 98          |                 tya                  force flag test
1634:000 | DONE ins | na 16 16 | 0054b2 | 10 05       |                 bpl 0054b9           positive number is easy
1635:000 | DONE wsp | na 16 16 |        |             |
1636:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1637:000 | DONE ins | na 16 16 | 0054b4 | 49 ff ff    |                 eor.# 0ffff          
1638:000 | DONE ins | na 16 16 | 0054b7 | 1a          |                 inc.a                
1639:000 | DONE ins | na 16 16 | 0054b8 | a8          |                 tay                  
1640:000 | DONE wsp | na 16 16 |        |             |
1641:000 | DONE lbl | na 16 16 | 0054b9 |             | z_abs                                
1641:001 | DONE ins | na 16 16 | 0054b9 | 60          |                 rts                  
1642:000 | DONE wsp | na 16 16 |        |             |
1643:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1644:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1645:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1646:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1647:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1648:000 | DONE wsp | na 16 16 |        |             |
1649:000 | DONE cmt | na 16 16 |        |             | ; Though we're dealing with individual characters, all these actions are
1650:000 | DONE cmt | na 16 16 |        |             | ; performed with a 16 bit A register. The only place we switch is in the kernel
1651:000 | DONE cmt | na 16 16 |        |             | ; routines themselves
1652:000 | DONE lbl | na 16 16 | 0054ba |             | xt_accept                            
1653:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1654:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1655:000 | DONE ins | na 16 16 | 0054ba | 98          |                 tya                  force flag test
1656:000 | DONE ins | na 16 16 | 0054bb | d0 05       |                 bne 0054c2           
1657:000 | DONE wsp | na 16 16 |        |             |
1658:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1659:000 | DONE ins | na 16 16 | 0054bd | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1660:000 | DONE ins | na 16 16 | 0054be | e8          |                 inx                  
1661:000 | DONE wsp | na 16 16 |        |             |
1662:000 | DONE ins | na 16 16 | 0054bf | 4c 48 55    |                 jmp 005548           no RTS so we can native compile
1663:000 | DONE wsp | na 16 16 |        |             |
1664:000 | DONE lbl | na 16 16 | 0054c2 |             | accept_nonzero                       
1665:000 | DONE ins | na 16 16 | 0054c2 | b5 00       |                 lda.dx 00            address of buffer is NOS
1666:000 | DONE ins | na 16 16 | 0054c4 | 85 1c       |                 sta.d 00001c         
1667:000 | DONE ins | na 16 16 | 0054c6 | e8          |                 inx                  NIP
1668:000 | DONE ins | na 16 16 | 0054c7 | e8          |                 inx                  
1669:000 | DONE wsp | na 16 16 |        |             |
1670:000 | DONE ins | na 16 16 | 0054c8 | 84 1e       |                 sty.d 00001e         Save max number of chars in tmp2
1671:000 | DONE ins | na 16 16 | 0054ca | a0 00 00    |                 ldy.# 0000           Use Y as counter
1672:000 | DONE wsp | na 16 16 |        |             |
1673:000 | DONE lbl | na 16 16 | 0054cd |             | accept_loop                          
1674:000 | DONE cmt | na 16 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1675:000 | DONE cmt | na 16 16 |        |             |                 ; clears the screen automatically
1676:000 | DONE wsp | na 16 16 |        |             |
1677:000 | DONE cmt | na 16 16 |        |             |                 ; This is a rolled-out version of KEY so we don't spend time
1678:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around wit the stack
1679:000 | DONE ins | na 16 16 | 0054cd | 8e 22 00    |                 stx 000022           
1680:000 | DONE ins | na 16 16 | 0054d0 | a2 00 00    |                 ldx.# 0000           
1681:000 | DONE ins | na 16 16 | 0054d3 | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X)
1682:000 | DONE ins | na 16 16 | 0054d6 | a6 22       |                 ldx.d 000022         
1683:000 | DONE wsp | na 16 16 |        |             |
1684:000 | DONE cmt | na 16 16 |        |             |                 ; we quit on both line feed and carriage return
1685:000 | DONE ins | na 16 16 | 0054d8 | c9 0a 00    |                 cmp.# AscLF          
1686:000 | DONE ins | na 16 16 | 0054db | f0 43       |                 beq 005520           
1687:000 | DONE ins | na 16 16 | 0054dd | c9 0d 00    |                 cmp.# AscCR          
1688:000 | DONE ins | na 16 16 | 0054e0 | f0 3e       |                 beq 005520           
1689:000 | DONE wsp | na 16 16 |        |             |
1690:000 | DONE cmt | na 16 16 |        |             |                 ; BS and DEL do the same thing for the moment
1691:000 | DONE ins | na 16 16 | 0054e2 | c9 08 00    |                 cmp.# AscBS          
1692:000 | DONE ins | na 16 16 | 0054e5 | f0 40       |                 beq 005527           
1693:000 | DONE ins | na 16 16 | 0054e7 | c9 7f 00    |                 cmp.# AscDEL         
1694:000 | DONE ins | na 16 16 | 0054ea | f0 3b       |                 beq 005527           
1695:000 | DONE wsp | na 16 16 |        |             |
1696:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1697:000 | DONE ins | na 16 16 | 0054ec | c9 03 00    |                 cmp.# AscCC          
1698:000 | DONE ins | na 16 16 | 0054ef | d0 03       |                 bne 0054f4           
1699:000 | DONE ins | na 16 16 | 0054f1 | 4c af 50    |                 jmp 0050af           
1700:000 | DONE lbl | na 16 16 | 0054f4 |             | @                                    
1701:000 | DONE ins | na 16 16 | 0054f4 | c9 1b 00    |                 cmp.# AscESC         
1702:000 | DONE ins | na 16 16 | 0054f7 | d0 03       |                 bne 0054fc           
1703:000 | DONE ins | na 16 16 | 0054f9 | 4c af 50    |                 jmp 0050af           
1704:000 | DONE lbl | na 16 16 | 0054fc |             | @                                    
1705:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1706:000 | DONE ins | na 16 16 | 0054fc | c9 10 00    |                 cmp.# AscCP          
1707:000 | DONE ins | na 16 16 | 0054ff | d0 08       |                 bne 005509           
1708:000 | DONE wsp | na 16 16 |        |             |
1709:000 | DONE ins | na 16 16 | 005501 | a9 f8 72    |                 lda.# 0072f8         
1710:000 | DONE ins | na 16 16 | 005504 | 20 76 6a    |                 jsr 006a76           
1711:000 | DONE wsp | na 16 16 |        |             |
1712:000 | DONE ins | na 16 16 | 005507 | 80 c4       |                 bra 0054cd           
1713:000 | DONE lbl | na 16 16 | 005509 |             | @                                    
1714:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1715:000 | DONE ins | na 16 16 | 005509 | c9 0e 00    |                 cmp.# AscCN          
1716:000 | DONE ins | na 16 16 | 00550c | d0 08       |                 bne 005516           
1717:000 | DONE wsp | na 16 16 |        |             |
1718:000 | DONE ins | na 16 16 | 00550e | a9 0b 73    |                 lda.# 00730b         
1719:000 | DONE ins | na 16 16 | 005511 | 20 76 6a    |                 jsr 006a76           
1720:000 | DONE wsp | na 16 16 |        |             |
1721:000 | DONE ins | na 16 16 | 005514 | 80 b7       |                 bra 0054cd           
1722:000 | DONE wsp | na 16 16 |        |             |
1723:000 | DONE lbl | na 16 16 | 005516 |             | @                                    
1724:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough, echo character. EMIT_A sidesteps all the
1725:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around with the Data Stack
1726:000 | DONE ins | na 16 16 | 005516 | 20 f1 58    |                 jsr 0058f1           
1727:000 | DONE wsp | na 16 16 |        |             |
1728:000 | DONE ins | na 16 16 | 005519 | 91 08       |                 sta.diy 000008       STA (CIB),Y
1729:000 | DONE wsp | na 16 16 |        |             |
1730:000 | DONE ins | na 16 16 | 00551b | c8          |                 iny                  
1731:000 | DONE ins | na 16 16 | 00551c | c4 1e       |                 cpy.d 00001e         reached character limit?
1732:000 | DONE ins | na 16 16 | 00551e | d0 ad       |                 bne 0054cd           fall thru if buffer limit reached
1733:000 | DONE wsp | na 16 16 |        |             |
1734:000 | DONE lbl | na 16 16 | 005520 |             | accept_eol                           
1735:000 | DONE ins | na 16 16 | 005520 | 84 0a       |                 sty.d 00000a         Y contains number of chars accepted already
1736:000 | DONE wsp | na 16 16 |        |             |
1737:000 | DONE ins | na 16 16 | 005522 | 20 c3 5e    |                 jsr 005ec3           print final space
1738:000 | DONE ins | na 16 16 | 005525 | 80 21       |                 bra 005548           
1739:000 | DONE wsp | na 16 16 |        |             |
1740:000 | DONE lbl | na 16 16 | 005527 |             | accept_bs                            
1741:000 | DONE ins | na 16 16 | 005527 | c0 00 00    |                 cpy.# 0000           buffer empty?
1742:000 | DONE ins | na 16 16 | 00552a | d0 07       |                 bne 005533           
1743:000 | DONE wsp | na 16 16 |        |             |
1744:000 | DONE ins | na 16 16 | 00552c | a9 07 00    |                 lda.# AscBELL        complain and don't delete beyond the start of line
1745:000 | DONE ins | na 16 16 | 00552f | 20 f1 58    |                 jsr 0058f1           
1746:000 | DONE ins | na 16 16 | 005532 | c8          |                 iny                  
1747:000 | DONE lbl | na 16 16 | 005533 |             | @                                    
1748:000 | DONE ins | na 16 16 | 005533 | 88          |                 dey                  
1749:000 | DONE ins | na 16 16 | 005534 | a9 08 00    |                 lda.# AscBS          move back one
1750:000 | DONE ins | na 16 16 | 005537 | 20 f1 58    |                 jsr 0058f1           
1751:000 | DONE ins | na 16 16 | 00553a | a9 20 00    |                 lda.# AscSP          print a space (rubout)
1752:000 | DONE ins | na 16 16 | 00553d | 20 f1 58    |                 jsr 0058f1           
1753:000 | DONE ins | na 16 16 | 005540 | a9 08 00    |                 lda.# AscBS          move back over space
1754:000 | DONE ins | na 16 16 | 005543 | 20 f1 58    |                 jsr 0058f1           
1755:000 | DONE wsp | na 16 16 |        |             |
1756:000 | DONE ins | na 16 16 | 005546 | 80 85       |                 bra 0054cd           
1757:000 | DONE wsp | na 16 16 |        |             |
1758:000 | DONE lbl | na 16 16 | 005548 |             | z_accept                             
1758:001 | DONE ins | na 16 16 | 005548 | 60          |                 rts                  
1759:000 | DONE wsp | na 16 16 |        |             |
1760:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1761:000 | DONE cmt | na 16 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1762:000 | DONE cmt | na 16 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1763:000 | DONE cmt | na 16 16 |        |             | ; instead of BRA to make sure we have the range.
1764:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1765:000 | DONE lbl | na 16 16 | 005549 |             | xt_again                             
1766:000 | DONE wsp | na 16 16 |        |             |
1767:000 | DONE cmt | na 16 16 |        |             |                 ; Add the opcode for a JMP
1768:000 | DONE ins | na 16 16 | 005549 | e2 20       |                 sep 20               
1768:001 | DONE ctl | na  8 16 |        |             |         .!a8
1769:000 | DONE ins | na  8 16 | 00554b | a9 4c       |                 lda.# 4c             
1770:000 | DONE ins | na  8 16 | 00554d | 92 00       |                 sta.di 000000        STA (CP)
1771:000 | DONE ins | na  8 16 | 00554f | c2 20       |                 rep 20               
1771:001 | DONE ctl | na 16 16 |        |             |         .!a16
1772:000 | DONE ins | na 16 16 | 005551 | e6 00       |                 inc.d 000000         
1773:000 | DONE wsp | na 16 16 |        |             |
1774:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1775:000 | DONE ins | na 16 16 | 005553 | 98          |                 tya                  
1776:000 | DONE ins | na 16 16 | 005554 | 92 00       |                 sta.di 000000        
1777:000 | DONE ins | na 16 16 | 005556 | e6 00       |                 inc.d 000000         
1778:000 | DONE ins | na 16 16 | 005558 | e6 00       |                 inc.d 000000         
1779:000 | DONE wsp | na 16 16 |        |             |
1780:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1781:000 | DONE ins | na 16 16 | 00555a | b4 00       |                 ldy.dx 00            
1782:000 | DONE ins | na 16 16 | 00555c | e8          |                 inx                  
1783:000 | DONE ins | na 16 16 | 00555d | e8          |                 inx                  
1784:000 | DONE wsp | na 16 16 |        |             |
1785:000 | DONE lbl | na 16 16 | 00555e |             | z_again                              
1785:001 | DONE ins | na 16 16 | 00555e | 60          |                 rts                  
1786:000 | DONE wsp | na 16 16 |        |             |
1787:000 | DONE wsp | na 16 16 |        |             |
1788:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1789:000 | DONE cmt | na 16 16 |        |             | ; ALIGN ( -- ) 1 bytes / X cycles
1790:000 | DONE cmt | na 16 16 |        |             | ; Make sure CP is aligned. This does nothing on the 65816
1791:000 | DONE lbl | na 16 16 | 00555f |             | xt_align                             
1792:000 | DONE ins | na 16 16 | 00555f | ea          |                 nop                  removed during native compile
1793:000 | DONE lbl | na 16 16 | 005560 |             | z_align                              
1793:001 | DONE ins | na 16 16 | 005560 | 60          |                 rts                  
1794:000 | DONE wsp | na 16 16 |        |             |
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1797:000 | DONE cmt | na 16 16 |        |             | ; ALIGNED ( addr -- a-addr ) X bytes / X cycles
1798:000 | DONE cmt | na 16 16 |        |             | ; Return the next aligned address. With the 65816, this does nothing
1799:000 | DONE lbl | na 16 16 | 005561 |             | xt_aligned                           
1800:000 | DONE ins | na 16 16 | 005561 | ea          |                 nop                  removed during native compile
1801:000 | DONE lbl | na 16 16 | 005562 |             | z_aligned                            
1801:001 | DONE ins | na 16 16 | 005562 | 60          |                 rts                  
1802:000 | DONE wsp | na 16 16 |        |             |
1803:000 | DONE wsp | na 16 16 |        |             |
1804:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1805:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1806:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1807:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1808:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1809:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1810:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1811:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1812:000 | DONE lbl | na 16 16 | 005563 |             | xt_allot                             
1813:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1814:000 | DONE ins | na 16 16 | 005563 | 98          |                 tya                  force flag check
1815:000 | DONE ins | na 16 16 | 005564 | f0 21       |                 beq 005587           zero bytes, don't do anything
1816:000 | DONE ins | na 16 16 | 005566 | 30 12       |                 bmi 00557a           free memory instead of reserving it
1817:000 | DONE wsp | na 16 16 |        |             |
1818:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1819:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1820:000 | DONE ins | na 16 16 | 005568 | 18          |                 clc                  
1821:000 | DONE ins | na 16 16 | 005569 | 65 00       |                 adc.d 000000         create new CP
1822:000 | DONE ins | na 16 16 | 00556b | b0 07       |                 bcs 005574           oops, we've wrapped
1823:000 | DONE wsp | na 16 16 |        |             |
1824:000 | DONE ins | na 16 16 | 00556d | a8          |                 tay                  save copy of new CP
1825:000 | DONE wsp | na 16 16 |        |             |
1826:000 | DONE ins | na 16 16 | 00556e | 38          |                 sec                  
1827:000 | DONE ins | na 16 16 | 00556f | e9 ff 4f    |                 sbc.# 004fff         
1828:000 | DONE ins | na 16 16 | 005572 | 30 11       |                 bmi 005585           oops, fall thru if beyond max RAM
1829:000 | DONE wsp | na 16 16 |        |             |
1830:000 | DONE lbl | na 16 16 | 005574 |             | allot_error                          
1831:000 | DONE ins | na 16 16 | 005574 | a9 be 71    |                 lda.# 0071be         
1832:000 | DONE ins | na 16 16 | 005577 | 4c 70 6a    |                 jmp 006a70           
1833:000 | DONE wsp | na 16 16 |        |             |
1834:000 | DONE lbl | na 16 16 | 00557a |             | allot_minus                          
1835:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1836:000 | DONE ins | na 16 16 | 00557a | 38          |                 sec                  
1837:000 | DONE ins | na 16 16 | 00557b | e5 00       |                 sbc.d 000000         
1838:000 | DONE ins | na 16 16 | 00557d | 90 f5       |                 bcc 005574           oops, we've wrapped
1839:000 | DONE wsp | na 16 16 |        |             |
1840:000 | DONE ins | na 16 16 | 00557f | a8          |                 tay                  
1841:000 | DONE wsp | na 16 16 |        |             |
1842:000 | DONE ins | na 16 16 | 005580 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1843:000 | DONE ins | na 16 16 | 005583 | 30 ef       |                 bmi 005574           oops, gone too far back
1844:000 | DONE wsp | na 16 16 |        |             |
1845:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1846:000 | DONE lbl | na 16 16 | 005585 |             | allot_done                           
1847:000 | DONE ins | na 16 16 | 005585 | 84 00       |                 sty.d 000000         new compiler pointer
1848:000 | DONE lbl | na 16 16 | 005587 |             | allot_real_gone                      
1849:000 | DONE ins | na 16 16 | 005587 | b4 00       |                 ldy.dx 00            DROP
1850:000 | DONE ins | na 16 16 | 005589 | e8          |                 inx                  
1851:000 | DONE ins | na 16 16 | 00558a | e8          |                 inx                  
1852:000 | DONE wsp | na 16 16 |        |             |
1853:000 | DONE lbl | na 16 16 | 00558b |             | z_allot                              
1853:001 | DONE ins | na 16 16 | 00558b | 60          |                 rts                  
1854:000 | DONE wsp | na 16 16 |        |             |
1855:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1856:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1857:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1858:000 | DONE lbl | na 16 16 | 00558c |             | xt_and                               
1859:000 | DONE ins | na 16 16 | 00558c | 98          |                 tya                  
1860:000 | DONE ins | na 16 16 | 00558d | 35 00       |                 and.dx 00            
1861:000 | DONE ins | na 16 16 | 00558f | a8          |                 tay                  
1862:000 | DONE wsp | na 16 16 |        |             |
1863:000 | DONE ins | na 16 16 | 005590 | e8          |                 inx                  NIP
1864:000 | DONE ins | na 16 16 | 005591 | e8          |                 inx                  
1865:000 | DONE wsp | na 16 16 |        |             |
1866:000 | DONE lbl | na 16 16 | 005592 |             | z_and                                
1866:001 | DONE ins | na 16 16 | 005592 | 60          |                 rts                  
1867:000 | DONE wsp | na 16 16 |        |             |
1868:000 | DONE wsp | na 16 16 |        |             |
1869:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1870:000 | DONE cmt | na 16 16 |        |             | ; AT-XY ( nx ny -- ) X bytes / X cycles
1871:000 | DONE cmt | na 16 16 |        |             | ; Move cursor to coordinates given. ESC[<n>;<m>H Do not use U. to print the
1872:000 | DONE cmt | na 16 16 |        |             | ; numbers because the trailing space will not work with xterm (works fine with
1873:000 | DONE cmt | na 16 16 |        |             | ; Mac OS X Terminals, though)
1874:000 | DONE cmt | na 16 16 |        |             | ; TODO doesn't like hex values, need to get rid of byte_to_ascii
1875:000 | DONE cmt | na 16 16 |        |             | ; or call as word with 0 u.r and decimal
1876:000 | DONE lbl | na 16 16 | 005593 |             | xt_at-xy                             
1877:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1878:000 | DONE ins | na 16 16 | 005593 | a9 1b 00    |                 lda.# AscESC         ESC
1879:000 | DONE ins | na 16 16 | 005596 | 20 f1 58    |                 jsr 0058f1           
1880:000 | DONE ins | na 16 16 | 005599 | a9 5b 00    |                 lda.# 5b             [
1881:000 | DONE ins | na 16 16 | 00559c | 20 f1 58    |                 jsr 0058f1           
1882:000 | DONE ins | na 16 16 | 00559f | b5 00       |                 lda.dx 00            x
1883:000 | DONE ins | na 16 16 | 0055a1 | 20 a8 6a    |                 jsr 006aa8           
1884:000 | DONE ins | na 16 16 | 0055a4 | a9 3b 00    |                 lda.# 3b             semicolon
1885:000 | DONE ins | na 16 16 | 0055a7 | 20 f1 58    |                 jsr 0058f1           
1886:000 | DONE ins | na 16 16 | 0055aa | 98          |                 tya                  y
1887:000 | DONE ins | na 16 16 | 0055ab | 20 a8 6a    |                 jsr 006aa8           
1888:000 | DONE ins | na 16 16 | 0055ae | a9 48 00    |                 lda.# 48             H
1889:000 | DONE ins | na 16 16 | 0055b1 | 20 f1 58    |                 jsr 0058f1           
1890:000 | DONE wsp | na 16 16 |        |             |
1891:000 | DONE ins | na 16 16 | 0055b4 | b4 02       |                 ldy.dx 02            
1892:000 | DONE ins | na 16 16 | 0055b6 | e8          |                 inx                  
1893:000 | DONE ins | na 16 16 | 0055b7 | e8          |                 inx                  
1894:000 | DONE ins | na 16 16 | 0055b8 | e8          |                 inx                  
1895:000 | DONE ins | na 16 16 | 0055b9 | e8          |                 inx                  
1896:000 | DONE wsp | na 16 16 |        |             |
1897:000 | DONE lbl | na 16 16 | 0055ba |             | z_at-xy                              
1897:001 | DONE ins | na 16 16 | 0055ba | 60          |                 rts                  
1898:000 | DONE wsp | na 16 16 |        |             |
1899:000 | DONE wsp | na 16 16 |        |             |
1900:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1901:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1902:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1903:000 | DONE lbl | na 16 16 | 0055bb |             | xt_base                              
1904:000 | DONE ins | na 16 16 | 0055bb | ca          |                 dex                  
1905:000 | DONE ins | na 16 16 | 0055bc | ca          |                 dex                  
1906:000 | DONE ins | na 16 16 | 0055bd | 94 00       |                 sty.dx 00            
1907:000 | DONE wsp | na 16 16 |        |             |
1908:000 | DONE ins | na 16 16 | 0055bf | a0 16 00    |                 ldy.# 000016         
1909:000 | DONE wsp | na 16 16 |        |             |
1910:000 | DONE lbl | na 16 16 | 0055c2 |             | z_base                               
1910:001 | DONE ins | na 16 16 | 0055c2 | 60          |                 rts                  
1911:000 | DONE wsp | na 16 16 |        |             |
1912:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1913:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1914:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1915:000 | DONE lbl | na 16 16 | 0055c3 |             | xt_bell                              
1916:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1917:000 | DONE ins | na 16 16 | 0055c3 | a9 07 00    |                 lda.# AscBELL        
1918:000 | DONE ins | na 16 16 | 0055c6 | 20 f1 58    |                 jsr 0058f1           
1919:000 | DONE wsp | na 16 16 |        |             |
1920:000 | DONE lbl | na 16 16 | 0055c9 |             | z_bell                               
1920:001 | DONE ins | na 16 16 | 0055c9 | 60          |                 rts                  
1921:000 | DONE wsp | na 16 16 |        |             |
1922:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1923:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1924:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1925:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
1926:000 | DONE cmt | na 16 16 |        |             | ; but we code it here for speed
1927:000 | DONE lbl | na 16 16 | 0055ca |             | xt_begin                             
1928:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1929:000 | DONE ins | na 16 16 | 0055ca | ca          |                 dex                  
1930:000 | DONE ins | na 16 16 | 0055cb | ca          |                 dex                  
1931:000 | DONE ins | na 16 16 | 0055cc | 94 00       |                 sty.dx 00            
1932:000 | DONE wsp | na 16 16 |        |             |
1933:000 | DONE ins | na 16 16 | 0055ce | a4 00       |                 ldy.d 000000         
1934:000 | DONE wsp | na 16 16 |        |             |
1935:000 | DONE lbl | na 16 16 | 0055d0 |             | z_begin                              
1935:001 | DONE ins | na 16 16 | 0055d0 | 60          |                 rts                  
1936:000 | DONE wsp | na 16 16 |        |             |
1937:000 | DONE wsp | na 16 16 |        |             |
1938:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1939:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1940:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1941:000 | DONE lbl | na 16 16 | 0055d1 |             | xt_bl                                
1942:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1943:000 | DONE ins | na 16 16 | 0055d1 | ca          |                 dex                  
1944:000 | DONE ins | na 16 16 | 0055d2 | ca          |                 dex                  
1945:000 | DONE ins | na 16 16 | 0055d3 | 94 00       |                 sty.dx 00            
1946:000 | DONE ins | na 16 16 | 0055d5 | a0 20 00    |                 ldy.# AscSP          
1947:000 | DONE wsp | na 16 16 |        |             |
1948:000 | DONE lbl | na 16 16 | 0055d8 |             | z_bl                                 
1948:001 | DONE ins | na 16 16 | 0055d8 | 60          |                 rts                  
1949:000 | DONE wsp | na 16 16 |        |             |
1950:000 | DONE wsp | na 16 16 |        |             |
1951:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1952:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1953:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1954:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1955:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler
1956:000 | DONE lbl | na 16 16 | 0055d9 |             | xt_bounds                            
1957:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1958:000 | DONE ins | na 16 16 | 0055d9 | 98          |                 tya                  TOS
1959:000 | DONE ins | na 16 16 | 0055da | 18          |                 clc                  
1960:000 | DONE ins | na 16 16 | 0055db | 75 00       |                 adc.dx 00            NOS
1961:000 | DONE ins | na 16 16 | 0055dd | b4 00       |                 ldy.dx 00            
1962:000 | DONE ins | na 16 16 | 0055df | 95 00       |                 sta.dx 00            
1963:000 | DONE wsp | na 16 16 |        |             |
1964:000 | DONE lbl | na 16 16 | 0055e1 |             | z_bounds                             
1964:001 | DONE ins | na 16 16 | 0055e1 | 60          |                 rts                  
1965:000 | DONE wsp | na 16 16 |        |             |
1966:000 | DONE wsp | na 16 16 |        |             |
1967:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1968:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1969:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. This word was adapted from Tali Forth. It
1970:000 | DONE cmt | na 16 16 |        |             | ; uses tmpbranch
1971:000 | DONE lbl | na 16 16 | 0055e2 |             | xt_branch                            
1972:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1973:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1974:000 | DONE ins | na 16 16 | 0055e2 | f4 e9 55    |                 phe.# 0055e9         
1975:000 | DONE ins | na 16 16 | 0055e5 | 20 4f 6a    |                 jsr 006a4f           
1976:000 | DONE wsp | na 16 16 |        |             |
1977:000 | DONE lbl | na 16 16 | 0055e8 |             | z_branch                             
1977:001 | DONE ins | na 16 16 | 0055e8 | 60          |                 rts                  
1978:000 | DONE wsp | na 16 16 |        |             |
1979:000 | DONE lbl | na 16 16 | 0055e9 |             | branch_rt                            
1980:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1981:000 | DONE ins | na 16 16 | 0055e9 | 68          |                 pla                  
1982:000 | DONE ins | na 16 16 | 0055ea | 85 1a       |                 sta.d 00001a         
1983:000 | DONE wsp | na 16 16 |        |             |
1984:000 | DONE ins | na 16 16 | 0055ec | 5a          |                 phy                  avoid using temp variables
1985:000 | DONE ins | na 16 16 | 0055ed | a0 01 00    |                 ldy.# 0001           
1986:000 | DONE ins | na 16 16 | 0055f0 | b1 1a       |                 lda.diy 00001a       LDA (TMPBRANCH),Y
1987:000 | DONE ins | na 16 16 | 0055f2 | 7a          |                 ply                  
1988:000 | DONE wsp | na 16 16 |        |             |
1989:000 | DONE ins | na 16 16 | 0055f3 | 3a          |                 dec.a                
1990:000 | DONE ins | na 16 16 | 0055f4 | 48          |                 pha                  put target address back on Return Stack
1991:000 | DONE wsp | na 16 16 |        |             |
1992:000 | DONE ins | na 16 16 | 0055f5 | 60          |                 rts                  
1993:000 | DONE wsp | na 16 16 |        |             |
1994:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1995:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1996:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1997:000 | DONE lbl | na 16 16 | 0055f6 |             | xt_bye                               
1998:000 | DONE ins | na 16 16 | 0055f6 | 78          |                 sei                  
1999:000 | DONE ins | na 16 16 | 0055f7 | d8          |                 cld                  
2000:000 | DONE ins | na 16 16 | 0055f8 | 38          |                 sec                  
2000:001 | DONE ins | na 16 16 | 0055f9 | fb          |                 xce                  
2000:002 | DONE ctl | em  8  8 |        |             |         .!emulated
2000:003 | DONE ctl | em  8  8 |        |             |         .!a8
2000:004 | DONE ctl | em  8  8 |        |             |         .!xy8
2001:000 | DONE ins | em  8  8 | 0055fa | 6c fc ff    |                 jmp.i 0fffc          
2002:000 | DONE wsp | em  8  8 |        |             |
2003:000 | DONE lbl | em  8  8 | 0055fd |             | z_bye                                ; never reached
2004:000 | DONE wsp | em  8  8 |        |             |
2005:000 | DONE wsp | em  8  8 |        |             |
2006:000 | DONE cmt | em  8  8 |        |             | ; -------------------------------------------------------------------
2007:000 | DONE cmt | em  8  8 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
2008:000 | DONE cmt | em  8  8 |        |             | ; Store one character in the Dictionary
2009:000 | DONE lbl | em  8  8 | 0055fd |             | xt_c-comma                           
2010:000 | DONE ins | em  8  8 | 0055fd | 98          |                 tya                  
2011:000 | DONE ins | em  8  8 | 0055fe | e2 20       |                 sep 20               
2011:001 | DONE ctl | em  8  8 |        |             |         .!a8
2012:000 | DONE ins | em  8  8 | 005600 | 92 00       |                 sta.di 000000        STA (CP)
2013:000 | DONE ins | em  8  8 | 005602 | c2 20       |                 rep 20               
2013:001 | DONE ctl | em 16  8 |        |             |         .!a16
2014:000 | DONE ins | em 16  8 | 005604 | e6 00       |                 inc.d 000000         quick version of 1 ALLOT
2015:000 | DONE wsp | em 16  8 |        |             |
2016:000 | DONE ins | em 16  8 | 005606 | b4 00       |                 ldy.dx 00            
2017:000 | DONE ins | em 16  8 | 005608 | e8          |                 inx                  
2018:000 | DONE ins | em 16  8 | 005609 | e8          |                 inx                  
2019:000 | DONE wsp | em 16  8 |        |             |
2020:000 | DONE lbl | em 16  8 | 00560a |             | z_c-comma                            
2020:001 | DONE ins | em 16  8 | 00560a | 60          |                 rts                  
2021:000 | DONE wsp | em 16  8 |        |             |
2022:000 | DONE wsp | em 16  8 |        |             |
2023:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2024:000 | DONE cmt | em 16  8 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
2025:000 | DONE cmt | em 16  8 |        |             | ; Get a single byte from the given address
2026:000 | DONE lbl | em 16  8 | 00560b |             | xt_c-fetch                           
2027:000 | DONE ins | em 16  8 | 00560b | e2 20       |                 sep 20               
2027:001 | DONE ctl | em  8  8 |        |             |         .!a8
2028:000 | DONE ins | em  8  8 | 00560d | b9 00 00    |                 lda.y 0000           
2029:000 | DONE ins | em  8  8 | 005610 | c2 20       |                 rep 20               
2029:001 | DONE ctl | em 16  8 |        |             |         .!a16
2030:000 | DONE ins | em 16  8 | 005612 | 29 ff 00    |                 and.# 00ff           
2031:000 | DONE ins | em 16  8 | 005615 | a8          |                 tay                  
2032:000 | DONE wsp | em 16  8 |        |             |
2033:000 | DONE lbl | em 16  8 | 005616 |             | z_c-fetch                            
2033:001 | DONE ins | em 16  8 | 005616 | 60          |                 rts                  
2034:000 | DONE wsp | em 16  8 |        |             |
2035:000 | DONE wsp | em 16  8 |        |             |
2036:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2037:000 | DONE cmt | em 16  8 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
2038:000 | DONE cmt | em 16  8 |        |             | ; Store LSB of NOS at location given as TOS
2039:000 | DONE lbl | em 16  8 | 005617 |             | xt_c-store                           
2040:000 | DONE ins | em 16  8 | 005617 | b5 00       |                 lda.dx 00            
2041:000 | DONE ins | em 16  8 | 005619 | e2 20       |                 sep 20               
2041:001 | DONE ctl | em  8  8 |        |             |         .!a8
2042:000 | DONE ins | em  8  8 | 00561b | 99 00 00    |                 sta.y 0000           
2043:000 | DONE ins | em  8  8 | 00561e | c2 20       |                 rep 20               
2043:001 | DONE ctl | em 16  8 |        |             |         .!a16
2044:000 | DONE ins | em 16  8 | 005620 | b4 02       |                 ldy.dx 02            
2045:000 | DONE ins | em 16  8 | 005622 | e8          |                 inx                  
2046:000 | DONE ins | em 16  8 | 005623 | e8          |                 inx                  
2047:000 | DONE ins | em 16  8 | 005624 | e8          |                 inx                  
2048:000 | DONE ins | em 16  8 | 005625 | e8          |                 inx                  
2049:000 | DONE wsp | em 16  8 |        |             |
2050:000 | DONE lbl | em 16  8 | 005626 |             | z_c-store                            
2050:001 | DONE ins | em 16  8 | 005626 | 60          |                 rts                  
2051:000 | DONE wsp | em 16  8 |        |             |
2052:000 | DONE wsp | em 16  8 |        |             |
2053:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2054:000 | DONE cmt | em 16  8 |        |             | ; CELL+ ( u -- u+2 ) X bytes / X cycles
2055:000 | DONE cmt | em 16  8 |        |             | ; Add the size of one cell to the value on top of the stack. Since this is
2056:000 | DONE cmt | em 16  8 |        |             | ; a 16-bit cell size, we add two
2057:000 | DONE lbl | em 16  8 | 005627 |             | xt_cellplus                          
2058:000 | DONE ins | em 16  8 | 005627 | c8          |                 iny                  
2059:000 | DONE ins | em 16  8 | 005628 | c8          |                 iny                  
2060:000 | DONE wsp | em 16  8 |        |             |
2061:000 | DONE lbl | em 16  8 | 005629 |             | z_cellplus                           
2061:001 | DONE ins | em 16  8 | 005629 | 60          |                 rts                  
2062:000 | DONE wsp | em 16  8 |        |             |
2063:000 | DONE wsp | em 16  8 |        |             |
2064:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2065:000 | DONE cmt | em 16  8 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
2066:000 | DONE cmt | em 16  8 |        |             | ; Given a number of cells, return the number of bytes that they will require.
2067:000 | DONE cmt | em 16  8 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
2068:000 | DONE cmt | em 16  8 |        |             | ; returned by 2*, see there.
2069:000 | DONE wsp | em 16  8 |        |             |
2070:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2071:000 | DONE cmt | em 16  8 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
2072:000 | DONE cmt | em 16  8 |        |             | ; Convert a character to its ASCII value
2073:000 | DONE lbl | em 16  8 | 00562a |             | xt_char                              
2074:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2075:000 | DONE ins | em 16  8 | 00562a | 20 73 5c    |                 jsr 005c73           ( -- addr u )
2076:000 | DONE wsp | em 16  8 |        |             |
2077:000 | DONE cmt | em 16  8 |        |             |                 ; if we got back a zero, we have a problem
2078:000 | DONE ins | em 16  8 | 00562d | 98          |                 tya                  force flag check
2079:000 | DONE ins | em 16  8 | 00562e | d0 06       |                 bne 005636           
2080:000 | DONE wsp | em 16  8 |        |             |
2081:000 | DONE ins | em 16  8 | 005630 | a9 43 72    |                 lda.# 007243         
2082:000 | DONE ins | em 16  8 | 005633 | 4c 70 6a    |                 jmp 006a70           
2083:000 | DONE wsp | em 16  8 |        |             |
2084:000 | DONE lbl | em 16  8 | 005636 |             | char_got_char                        
2085:000 | DONE ins | em 16  8 | 005636 | b4 00       |                 ldy.dx 00            get addr from NOS
2086:000 | DONE ins | em 16  8 | 005638 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
2087:000 | DONE ins | em 16  8 | 00563b | 29 ff 00    |                 and.# 00ff           
2088:000 | DONE ins | em 16  8 | 00563e | a8          |                 tay                  
2089:000 | DONE wsp | em 16  8 |        |             |
2090:000 | DONE ins | em 16  8 | 00563f | e8          |                 inx                  
2091:000 | DONE ins | em 16  8 | 005640 | e8          |                 inx                  
2092:000 | DONE wsp | em 16  8 |        |             |
2093:000 | DONE lbl | em 16  8 | 005641 |             | z_char                               
2093:001 | DONE ins | em 16  8 | 005641 | 60          |                 rts                  
2094:000 | DONE wsp | em 16  8 |        |             |
2095:000 | DONE wsp | em 16  8 |        |             |
2096:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2097:000 | DONE cmt | em 16  8 |        |             | ; CHARPLUS ( u -- u+1 ) X bytes / X cycles
2098:000 | DONE cmt | em 16  8 |        |             | ; Adds the size of a character to the value on top of the stack. Since our
2099:000 | DONE cmt | em 16  8 |        |             | ; character size is one, this is the same code as 1+, see there
2100:000 | DONE wsp | em 16  8 |        |             |
2101:000 | DONE wsp | em 16  8 |        |             |
2102:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2103:000 | DONE cmt | em 16  8 |        |             | ; CHARS ( u -- u ) X bytes / X cycles
2104:000 | DONE cmt | em 16  8 |        |             | ; Return the size in bytes of the number of characters on the top of the stack.
2105:000 | DONE cmt | em 16  8 |        |             | ; In this case, does nothing
2106:000 | DONE lbl | em 16  8 | 005642 |             | xt_chars                             
2107:000 | DONE wsp | em 16  8 |        |             |
2108:000 | DONE ins | em 16  8 | 005642 | ea          |                 nop                  will be removed during native compile
2109:000 | DONE lbl | em 16  8 | 005643 |             | z_chars                              
2109:001 | DONE ins | em 16  8 | 005643 | 60          |                 rts                  
2110:000 | DONE wsp | em 16  8 |        |             |
2111:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2112:000 | DONE cmt | em 16  8 |        |             | ; CMOVE ( addr1 addr2 u -- ) X bytes / X cycles
2113:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a lower to a higher address. Because of the danger of
2114:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the end of the source string (addr1+u) and copy
2115:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the end of the destination address (addr2+u). This is what the
2116:000 | DONE cmt | em 16  8 |        |             | ; MVP instruction is for. Use MOVE if you are not sure what to do.
2117:000 | DONE cmt | em 16  8 |        |             | ;       =====* source
2118:000 | DONE cmt | em 16  8 |        |             | ;          ====* destination
2119:000 | DONE lbl | em 16  8 | 005644 |             | xt_cmove                             
2120:000 | DONE cmt | em 16  8 |        |             |                 ; We start at the end of the blocks, so we have to increase both
2121:000 | DONE cmt | em 16  8 |        |             |                 ; addr1 and addr2 by u
2122:000 | DONE ins | em 16  8 | 005644 | 98          |                 tya                  
2123:000 | DONE ins | em 16  8 | 005645 | 18          |                 clc                  
2124:000 | DONE ins | em 16  8 | 005646 | 75 02       |                 adc.dx 02            source, goes in X
2125:000 | DONE ins | em 16  8 | 005648 | 3a          |                 dec.a                convert length to index
2126:000 | DONE ins | em 16  8 | 005649 | 95 02       |                 sta.dx 02            
2127:000 | DONE wsp | em 16  8 |        |             |
2128:000 | DONE ins | em 16  8 | 00564b | 98          |                 tya                  
2129:000 | DONE ins | em 16  8 | 00564c | 18          |                 clc                  
2130:000 | DONE ins | em 16  8 | 00564d | 75 00       |                 adc.dx 00            destination, goes in Y
2131:000 | DONE ins | em 16  8 | 00564f | 3a          |                 dec.a                convert length to index
2132:000 | DONE wsp | em 16  8 |        |             |
2133:000 | DONE ins | em 16  8 | 005650 | 86 22       |                 stx.d 000022         keep DSP safe
2134:000 | DONE wsp | em 16  8 |        |             |
2135:000 | DONE ins | em 16  8 | 005652 | 88          |                 dey                  
2136:000 | DONE ins | em 16  8 | 005653 | 5a          |                 phy                  save number of bytes to transfer
2137:000 | DONE wsp | em 16  8 |        |             |
2138:000 | DONE ins | em 16  8 | 005654 | a8          |                 tay                  destination now in Y
2139:000 | DONE wsp | em 16  8 |        |             |
2140:000 | DONE ins | em 16  8 | 005655 | b5 02       |                 lda.dx 02            get source address
2141:000 | DONE ins | em 16  8 | 005657 | aa          |                 tax                  
2142:000 | DONE wsp | em 16  8 |        |             |
2143:000 | DONE ins | em 16  8 | 005658 | 68          |                 pla                  retrieve number of bytes to transfer
2144:000 | DONE ins | em 16  8 | 005659 | 44 00 00    |                 mvp 0                
2144:001 | DONE ctl | em 16  8 |        |             |            
2145:000 | DONE wsp | em 16  8 |        |             |
2146:000 | DONE ins | em 16  8 | 00565c | a6 22       |                 ldx.d 000022         
2147:000 | DONE ins | em 16  8 | 00565e | b4 04       |                 ldy.dx 04            
2148:000 | DONE wsp | em 16  8 |        |             |
2149:000 | DONE ins | em 16  8 | 005660 | 8a          |                 txa                  It's worth addition for three cells dropped
2150:000 | DONE ins | em 16  8 | 005661 | 18          |                 clc                  
2151:000 | DONE ins | em 16  8 | 005662 | 69 06 00    |                 adc.# 0006           
2152:000 | DONE ins | em 16  8 | 005665 | aa          |                 tax                  
2153:000 | DONE wsp | em 16  8 |        |             |
2154:000 | DONE lbl | em 16  8 | 005666 |             | z_cmove                              
2154:001 | DONE ins | em 16  8 | 005666 | 60          |                 rts                  
2155:000 | DONE wsp | em 16  8 |        |             |
2156:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2157:000 | DONE cmt | em 16  8 |        |             | ; CMOVE> ( addr1 addr 2 u -- ) X bytes / X cycles
2158:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a higher to a lower address. Because of the danger of
2159:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the beginning of the source (addr1) to copy it
2160:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the beginning of the destination (addr2). This is what the MVN
2161:000 | DONE cmt | em 16  8 |        |             | ; instruction is for. Use MOVE if you are not sure what to do.
2162:000 | DONE cmt | em 16  8 |        |             | ;          *==== source
2163:000 | DONE cmt | em 16  8 |        |             | ;       *===== destination
2164:000 | DONE lbl | em 16  8 | 005667 |             | xt_cmoveup                           
2165:000 | DONE ins | em 16  8 | 005667 | 86 22       |                 stx.d 000022         keep DSP safe
2166:000 | DONE wsp | em 16  8 |        |             |
2167:000 | DONE ins | em 16  8 | 005669 | 88          |                 dey                  
2168:000 | DONE ins | em 16  8 | 00566a | 5a          |                 phy                  save number of bytes to transfer
2169:000 | DONE wsp | em 16  8 |        |             |
2170:000 | DONE ins | em 16  8 | 00566b | b5 00       |                 lda.dx 00            get destination address
2171:000 | DONE ins | em 16  8 | 00566d | a8          |                 tay                  
2172:000 | DONE wsp | em 16  8 |        |             |
2173:000 | DONE ins | em 16  8 | 00566e | b5 02       |                 lda.dx 02            get source address
2174:000 | DONE ins | em 16  8 | 005670 | aa          |                 tax                  
2175:000 | DONE wsp | em 16  8 |        |             |
2176:000 | DONE ins | em 16  8 | 005671 | 68          |                 pla                  retrieve number of bytes to transfer
2177:000 | DONE ins | em 16  8 | 005672 | 54 00 00    |                 mvn 0                
2177:001 | DONE ctl | em 16  8 |        |             |            
2178:000 | DONE wsp | em 16  8 |        |             |
2179:000 | DONE ins | em 16  8 | 005675 | a6 22       |                 ldx.d 000022         
2180:000 | DONE ins | em 16  8 | 005677 | b4 04       |                 ldy.dx 04            
2181:000 | DONE wsp | em 16  8 |        |             |
2182:000 | DONE ins | em 16  8 | 005679 | 8a          |                 txa                  It's worth addition for three cells dropped
2183:000 | DONE ins | em 16  8 | 00567a | 18          |                 clc                  
2184:000 | DONE ins | em 16  8 | 00567b | 69 06 00    |                 adc.# 0006           
2185:000 | DONE ins | em 16  8 | 00567e | aa          |                 tax                  
2186:000 | DONE wsp | em 16  8 |        |             |
2187:000 | DONE lbl | em 16  8 | 00567f |             | z_cmoveup                            
2187:001 | DONE ins | em 16  8 | 00567f | 60          |                 rts                  
2188:000 | DONE wsp | em 16  8 |        |             |
2189:000 | DONE wsp | em 16  8 |        |             |
2190:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2191:000 | DONE cmt | em 16  8 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
2192:000 | DONE cmt | em 16  8 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
2193:000 | DONE cmt | em 16  8 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
2194:000 | DONE cmt | em 16  8 |        |             | ; we're in compile mode
2195:000 | DONE lbl | em 16  8 | 005680 |             | xt_compile-only                      
2196:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2197:000 | DONE ins | em 16  8 | 005680 | a9 01 00    |                 lda.# CO             
2198:000 | DONE ins | em 16  8 | 005683 | eb          |                 xba                  flags are MSB
2199:000 | DONE ins | em 16  8 | 005684 | 12 02       |                 ora.di 000002        ORA (DP)
2200:000 | DONE ins | em 16  8 | 005686 | 92 02       |                 sta.di 000002        
2201:000 | DONE wsp | em 16  8 |        |             |
2202:000 | DONE lbl | em 16  8 | 005688 |             | z_compile-only                       
2202:001 | DONE ins | em 16  8 | 005688 | 60          |                 rts                  
2203:000 | DONE wsp | em 16  8 |        |             |
2204:000 | DONE wsp | em 16  8 |        |             |
2205:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2206:000 | DONE cmt | em 16  8 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
2207:000 | DONE cmt | em 16  8 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
2208:000 | DONE cmt | em 16  8 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
2209:000 | DONE cmt | em 16  8 |        |             | ; use , (COMMA) to compile new words the traditional way. By default, native
2210:000 | DONE cmt | em 16  8 |        |             | ; compiled is allowed, unless there is a NN (Never Native) flag associated.
2211:000 | DONE cmt | em 16  8 |        |             | ; If not, we use the value NC_LIMIT (from definitions.tasm) to decide if the code
2212:000 | DONE cmt | em 16  8 |        |             | ; is too large to be natively coded: If the size is larger than NC_LIMIT, we silently
2213:000 | DONE cmt | em 16  8 |        |             | ; use subroutine coding. If the AN (Always Native) flag is set, the word is always
2214:000 | DONE cmt | em 16  8 |        |             | ; natively compiled
2215:000 | DONE lbl | em 16  8 | 005689 |             | xt_compilecomma                      
2216:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2217:000 | DONE cmt | em 16  8 |        |             |                 ; First, see if this is Always Native compile word by checking
2218:000 | DONE cmt | em 16  8 |        |             |                 ; the AN flag. We need the nt for this
2219:000 | DONE ins | em 16  8 | 005689 | 5a          |                 phy                  save copy of xt
2220:000 | DONE wsp | em 16  8 |        |             |
2221:000 | DONE ins | em 16  8 | 00568a | 20 69 5a    |                 jsr 005a69           ( xt -- nt )
2222:000 | DONE wsp | em 16  8 |        |             |
2223:000 | DONE ins | em 16  8 | 00568d | b9 00 00    |                 lda.y 0000           Get content of nt
2224:000 | DONE ins | em 16  8 | 005690 | eb          |                 xba                  flags are MSB
2225:000 | DONE ins | em 16  8 | 005691 | 29 02 00    |                 and.# AN             mask everything but Compile Only bit
2226:000 | DONE ins | em 16  8 | 005694 | f0 05       |                 beq 00569b           
2227:000 | DONE wsp | em 16  8 |        |             |
2228:000 | DONE cmt | em 16  8 |        |             |                 ; We're natively compiling no matter what. Get the length and
2229:000 | DONE cmt | em 16  8 |        |             |                 ; compile as code
2230:000 | DONE ins | em 16  8 | 005696 | 20 7f 60    |                 jsr 00607f           ( nt -- u )
2231:000 | DONE ins | em 16  8 | 005699 | 80 12       |                 bra 0056ad           
2232:000 | DONE wsp | em 16  8 |        |             |
2233:000 | DONE lbl | em 16  8 | 00569b |             | compile_check                        
2234:000 | DONE cmt | em 16  8 |        |             |                 ; Now see if native compile is even allowed by checking the NN
2235:000 | DONE cmt | em 16  8 |        |             |                 ; flag
2236:000 | DONE ins | em 16  8 | 00569b | b9 00 00    |                 lda.y 0000           
2237:000 | DONE ins | em 16  8 | 00569e | eb          |                 xba                  
2238:000 | DONE ins | em 16  8 | 00569f | 29 08 00    |                 and.# NN             
2239:000 | DONE ins | em 16  8 | 0056a2 | d0 62       |                 bne 005706           
2240:000 | DONE wsp | em 16  8 |        |             |
2241:000 | DONE cmt | em 16  8 |        |             |                 ; Native compile is legal, but we have to see what limit the
2242:000 | DONE cmt | em 16  8 |        |             |                 ; user set. WORDSIZE takes nt
2243:000 | DONE ins | em 16  8 | 0056a4 | 20 7f 60    |                 jsr 00607f           ( nt -- u )
2244:000 | DONE ins | em 16  8 | 0056a7 | 98          |                 tya                  
2245:000 | DONE ins | em 16  8 | 0056a8 | 18          |                 clc                  
2246:000 | DONE ins | em 16  8 | 0056a9 | c5 26       |                 cmp.d 000026         
2247:000 | DONE ins | em 16  8 | 0056ab | b0 59       |                 bcs 005706           if too large, compile as a jump
2248:000 | DONE wsp | em 16  8 |        |             |
2249:000 | DONE lbl | em 16  8 | 0056ad |             | compile_as_code                      
2250:000 | DONE cmt | em 16  8 |        |             |                 ; We arrive here with the length of the word TOS ( u ) and xt on
2251:000 | DONE cmt | em 16  8 |        |             |                 ; top of the return stack. MOVE will need ( xt cp u ) on the
2252:000 | DONE cmt | em 16  8 |        |             |                 ; Data Stack
2253:000 | DONE ins | em 16  8 | 0056ad | ca          |                 dex                  
2254:000 | DONE ins | em 16  8 | 0056ae | ca          |                 dex                  
2255:000 | DONE ins | em 16  8 | 0056af | 68          |                 pla                  
2256:000 | DONE ins | em 16  8 | 0056b0 | 95 00       |                 sta.dx 00            ( xt u )
2257:000 | DONE wsp | em 16  8 |        |             |
2258:000 | DONE ins | em 16  8 | 0056b2 | ca          |                 dex                  
2259:000 | DONE ins | em 16  8 | 0056b3 | ca          |                 dex                  
2260:000 | DONE ins | em 16  8 | 0056b4 | a5 00       |                 lda.d 000000         
2261:000 | DONE ins | em 16  8 | 0056b6 | 95 00       |                 sta.dx 00            ( xt cp u )
2262:000 | DONE wsp | em 16  8 |        |             |
2263:000 | DONE wsp | em 16  8 |        |             |
2264:000 | DONE cmt | em 16  8 |        |             |                 ; --- SPECIAL CASES ---
2265:000 | DONE wsp | em 16  8 |        |             |
2266:000 | DONE cmt | em 16  8 |        |             |                 ; 1. Don't compile NOP instructions: Length of code is 1, and
2267:000 | DONE cmt | em 16  8 |        |             |                 ; the instruction is $EA
2268:000 | DONE ins | em 16  8 | 0056b8 | 98          |                 tya                  
2269:000 | DONE ins | em 16  8 | 0056b9 | 3a          |                 dec.a                
2270:000 | DONE ins | em 16  8 | 0056ba | d0 14       |                 bne 0056d0           
2271:000 | DONE wsp | em 16  8 |        |             |
2272:000 | DONE ins | em 16  8 | 0056bc | a1 02       |                 lda.dxi 02           
2273:000 | DONE ins | em 16  8 | 0056be | 29 ff 00    |                 and.# 00ff           
2274:000 | DONE ins | em 16  8 | 0056c1 | c9 ea 00    |                 cmp.# 00ea           opcode for NOP
2275:000 | DONE ins | em 16  8 | 0056c4 | d0 0a       |                 bne 0056d0           
2276:000 | DONE wsp | em 16  8 |        |             |
2277:000 | DONE cmt | em 16  8 |        |             |                 ; It's a single NOP. Clear the data stack and return
2278:000 | DONE ins | em 16  8 | 0056c6 | b4 04       |                 ldy.dx 04            
2279:000 | DONE ins | em 16  8 | 0056c8 | 8a          |                 txa                  
2280:000 | DONE ins | em 16  8 | 0056c9 | 18          |                 clc                  
2281:000 | DONE ins | em 16  8 | 0056ca | 69 06 00    |                 adc.# 0006           
2282:000 | DONE ins | em 16  8 | 0056cd | aa          |                 tax                  
2283:000 | DONE wsp | em 16  8 |        |             |
2284:000 | DONE ins | em 16  8 | 0056ce | 80 4c       |                 bra 00571c           
2285:000 | DONE wsp | em 16  8 |        |             |
2286:000 | DONE lbl | em 16  8 | 0056d0 |             | compile_not_nop                      
2287:000 | DONE wsp | em 16  8 |        |             |
2288:000 | DONE cmt | em 16  8 |        |             |                 ; 2. Strip PLA/PHA off >R and R>
2289:000 | DONE ins | em 16  8 | 0056d0 | b5 02       |                 lda.dx 02            get xt
2290:000 | DONE ins | em 16  8 | 0056d2 | c9 bd 51    |                 cmp.# 0051bd         
2291:000 | DONE ins | em 16  8 | 0056d5 | f0 11       |                 beq 0056e8           
2292:000 | DONE ins | em 16  8 | 0056d7 | c9 35 5d    |                 cmp.# 005d35         
2293:000 | DONE ins | em 16  8 | 0056da | f0 0c       |                 beq 0056e8           
2294:000 | DONE wsp | em 16  8 |        |             |
2295:000 | DONE cmt | em 16  8 |        |             |                 ; 3. Strip off stuff from 2>R and 2R>
2296:000 | DONE ins | em 16  8 | 0056dc | c9 05 54    |                 cmp.# 005405         
2297:000 | DONE ins | em 16  8 | 0056df | f0 0d       |                 beq 0056ee           
2298:000 | DONE ins | em 16  8 | 0056e1 | c9 35 54    |                 cmp.# 005435         
2299:000 | DONE ins | em 16  8 | 0056e4 | f0 08       |                 beq 0056ee           
2300:000 | DONE wsp | em 16  8 |        |             |
2301:000 | DONE ins | em 16  8 | 0056e6 | 80 12       |                 bra 0056fa           not a special case
2302:000 | DONE wsp | em 16  8 |        |             |
2303:000 | DONE lbl | em 16  8 | 0056e8 |             | compile_r                            
2304:000 | DONE cmt | em 16  8 |        |             |                 ; We have either >R or R>. To simplify, drop the first and last
2305:000 | DONE cmt | em 16  8 |        |             |                 ; instruction (one byte).
2306:000 | DONE ins | em 16  8 | 0056e8 | f6 02       |                 inc.dx 02            start one byte later
2307:000 | DONE ins | em 16  8 | 0056ea | 88          |                 dey                  transfer two bytes less
2308:000 | DONE ins | em 16  8 | 0056eb | 88          |                 dey                  
2309:000 | DONE ins | em 16  8 | 0056ec | 80 0c       |                 bra 0056fa           
2310:000 | DONE wsp | em 16  8 |        |             |
2311:000 | DONE lbl | em 16  8 | 0056ee |             | compile_2r                           
2312:000 | DONE cmt | em 16  8 |        |             |                 ; We have either 2>R or 2R>. To simplify, drop the first and
2313:000 | DONE cmt | em 16  8 |        |             |                 ; last three bytes
2314:000 | DONE ins | em 16  8 | 0056ee | f6 02       |                 inc.dx 02            
2315:000 | DONE ins | em 16  8 | 0056f0 | f6 02       |                 inc.dx 02            
2316:000 | DONE ins | em 16  8 | 0056f2 | f6 02       |                 inc.dx 02            
2317:000 | DONE ins | em 16  8 | 0056f4 | 98          |                 tya                  
2318:000 | DONE ins | em 16  8 | 0056f5 | 38          |                 sec                  
2319:000 | DONE ins | em 16  8 | 0056f6 | e9 06 00    |                 sbc.# 0006           
2320:000 | DONE ins | em 16  8 | 0056f9 | a8          |                 tay                  fall through to compile_move
2321:000 | DONE wsp | em 16  8 |        |             |
2322:000 | DONE lbl | em 16  8 | 0056fa |             | compile_move                         
2323:000 | DONE cmt | em 16  8 |        |             |                 ; Enough of this, compile the word already
2324:000 | DONE wsp | em 16  8 |        |             |
2325:000 | DONE ins | em 16  8 | 0056fa | 5a          |                 phy                  we need a copy of length for the CP
2326:000 | DONE wsp | em 16  8 |        |             |
2327:000 | DONE ins | em 16  8 | 0056fb | 20 77 5b    |                 jsr 005b77           ( xt cp u -- )
2328:000 | DONE wsp | em 16  8 |        |             |
2329:000 | DONE ins | em 16  8 | 0056fe | 68          |                 pla                  
2330:000 | DONE ins | em 16  8 | 0056ff | 18          |                 clc                  update CP
2331:000 | DONE ins | em 16  8 | 005700 | 65 00       |                 adc.d 000000         
2332:000 | DONE ins | em 16  8 | 005702 | 85 00       |                 sta.d 000000         
2333:000 | DONE wsp | em 16  8 |        |             |
2334:000 | DONE ins | em 16  8 | 005704 | 80 16       |                 bra 00571c           
2335:000 | DONE wsp | em 16  8 |        |             |
2336:000 | DONE lbl | em 16  8 | 005706 |             | compile_as_jump                      
2337:000 | DONE cmt | em 16  8 |        |             |                 ; Compile xt as a subroutine jump.
2338:000 | DONE ins | em 16  8 | 005706 | 7a          |                 ply                  get xt back
2339:000 | DONE ins | em 16  8 | 005707 | e2 20       |                 sep 20               
2339:001 | DONE ctl | em  8  8 |        |             |         .!a8
2340:000 | DONE ins | em  8  8 | 005709 | a9 20       |                 lda.# 20             opcode for JSR
2341:000 | DONE ins | em  8  8 | 00570b | 92 00       |                 sta.di 000000        STA (CP)
2342:000 | DONE ins | em  8  8 | 00570d | c2 20       |                 rep 20               
2342:001 | DONE ctl | em 16  8 |        |             |         .!a16
2343:000 | DONE ins | em 16  8 | 00570f | e6 00       |                 inc.d 000000         
2344:000 | DONE wsp | em 16  8 |        |             |
2345:000 | DONE cmt | em 16  8 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
2346:000 | DONE cmt | em 16  8 |        |             |                 ; hard way
2347:000 | DONE ins | em 16  8 | 005711 | 98          |                 tya                  
2348:000 | DONE ins | em 16  8 | 005712 | 92 00       |                 sta.di 000000        
2349:000 | DONE ins | em 16  8 | 005714 | e6 00       |                 inc.d 000000         
2350:000 | DONE ins | em 16  8 | 005716 | e6 00       |                 inc.d 000000         
2351:000 | DONE wsp | em 16  8 |        |             |
2352:000 | DONE ins | em 16  8 | 005718 | b4 00       |                 ldy.dx 00            
2353:000 | DONE ins | em 16  8 | 00571a | e8          |                 inx                  
2354:000 | DONE ins | em 16  8 | 00571b | e8          |                 inx                  
2355:000 | DONE wsp | em 16  8 |        |             |
2356:000 | DONE lbl | em 16  8 | 00571c |             | z_compilecomma                       
2356:001 | DONE ins | em 16  8 | 00571c | 60          |                 rts                  
2357:000 | DONE wsp | em 16  8 |        |             |
2358:000 | DONE wsp | em 16  8 |        |             |
2359:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2360:000 | DONE cmt | em 16  8 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
2361:000 | DONE cmt | em 16  8 |        |             | ; Associate a fixed value with a word. This could be realized as
2362:000 | DONE cmt | em 16  8 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
2363:000 | DONE cmt | em 16  8 |        |             | ; lifting.
2364:000 | DONE cmt | em 16  8 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
2365:000 | DONE cmt | em 16  8 |        |             | ; this works in various Forths.
2366:000 | DONE lbl | em 16  8 | 00571d |             | xt_constant                          
2367:000 | DONE ins | em 16  8 | 00571d | 20 61 57    |                 jsr 005761           
2368:000 | DONE wsp | em 16  8 |        |             |
2369:000 | DONE cmt | em 16  8 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2370:000 | DONE cmt | em 16  8 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
2371:000 | DONE cmt | em 16  8 |        |             |                 ; the subroutine jump target
2372:000 | DONE ins | em 16  8 | 005720 | a5 00       |                 lda.d 000000         
2373:000 | DONE ins | em 16  8 | 005722 | 3a          |                 dec.a                
2374:000 | DONE ins | em 16  8 | 005723 | 3a          |                 dec.a                
2375:000 | DONE ins | em 16  8 | 005724 | 85 1c       |                 sta.d 00001c         
2376:000 | DONE wsp | em 16  8 |        |             |
2377:000 | DONE ins | em 16  8 | 005726 | a9 ba 69    |                 lda.# 0069ba         
2378:000 | DONE ins | em 16  8 | 005729 | 92 1c       |                 sta.di 00001c        STA (TMP1)
2379:000 | DONE wsp | em 16  8 |        |             |
2380:000 | DONE cmt | em 16  8 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
2381:000 | DONE ins | em 16  8 | 00572b | 98          |                 tya                  there is no "sty.di cp"
2382:000 | DONE ins | em 16  8 | 00572c | 92 00       |                 sta.di 000000        
2383:000 | DONE ins | em 16  8 | 00572e | e6 00       |                 inc.d 000000         
2384:000 | DONE ins | em 16  8 | 005730 | e6 00       |                 inc.d 000000         
2385:000 | DONE wsp | em 16  8 |        |             |
2386:000 | DONE ins | em 16  8 | 005732 | b4 00       |                 ldy.dx 00            DROP
2387:000 | DONE ins | em 16  8 | 005734 | e8          |                 inx                  
2388:000 | DONE ins | em 16  8 | 005735 | e8          |                 inx                  drop through to adjust_z
2389:000 | DONE wsp | em 16  8 |        |             |
2390:000 | DONE cmt | em 16  8 |        |             |                 ; Now the length of the complete word (z_word) has increased by
2391:000 | DONE cmt | em 16  8 |        |             |                 ; two. We need to update that number or else words such as SEE
2392:000 | DONE cmt | em 16  8 |        |             |                 ; will ignore the PFA. We use this same routine for VARIABLE,
2393:000 | DONE cmt | em 16  8 |        |             |                 ; VALUE and DEFER
2394:000 | DONE lbl | em 16  8 | 005736 |             | adjust_z                             
2395:000 | DONE ins | em 16  8 | 005736 | 20 b9 5a    |                 jsr 005ab9           gives us ( nt )
2396:000 | DONE wsp | em 16  8 |        |             |
2397:000 | DONE cmt | em 16  8 |        |             |                 ; z_word is kept six bytes further down
2398:000 | DONE ins | em 16  8 | 005739 | 98          |                 tya                  
2399:000 | DONE ins | em 16  8 | 00573a | 18          |                 clc                  
2400:000 | DONE ins | em 16  8 | 00573b | 69 06 00    |                 adc.# 0006           
2401:000 | DONE ins | em 16  8 | 00573e | a8          |                 tay                  
2402:000 | DONE wsp | em 16  8 |        |             |
2403:000 | DONE ins | em 16  8 | 00573f | b9 00 00    |                 lda.y 0000           LDA 0000,Y
2404:000 | DONE ins | em 16  8 | 005742 | 1a          |                 inc.a                
2405:000 | DONE ins | em 16  8 | 005743 | 1a          |                 inc.a                
2406:000 | DONE ins | em 16  8 | 005744 | 99 00 00    |                 sta.y 0000           
2407:000 | DONE wsp | em 16  8 |        |             |
2408:000 | DONE ins | em 16  8 | 005747 | b4 00       |                 ldy.dx 00            get rid of nt
2409:000 | DONE ins | em 16  8 | 005749 | e8          |                 inx                  
2410:000 | DONE ins | em 16  8 | 00574a | e8          |                 inx                  
2411:000 | DONE wsp | em 16  8 |        |             |
2412:000 | DONE lbl | em 16  8 | 00574b |             | z_constant                           
2412:001 | DONE ins | em 16  8 | 00574b | 60          |                 rts                  
2413:000 | DONE wsp | em 16  8 |        |             |
2414:000 | DONE wsp | em 16  8 |        |             |
2415:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2416:000 | DONE cmt | em 16  8 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
2417:000 | DONE cmt | em 16  8 |        |             | ; Convert old-style character string to address-length pair. Note that the
2418:000 | DONE cmt | em 16  8 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
2419:000 | DONE cmt | em 16  8 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
2420:000 | DONE cmt | em 16  8 |        |             | ; to step through a string character by character.
2421:000 | DONE lbl | em 16  8 | 00574c |             | xt_count                             
2422:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2423:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2424:000 | DONE ins | em 16 16 | 00574c | 98          |                 tya                  
2425:000 | DONE ins | em 16 16 | 00574d | 1a          |                 inc.a                String address starts one char later
2426:000 | DONE wsp | em 16 16 |        |             |
2427:000 | DONE ins | em 16 16 | 00574e | ca          |                 dex                  
2428:000 | DONE ins | em 16 16 | 00574f | ca          |                 dex                  
2429:000 | DONE ins | em 16 16 | 005750 | 95 00       |                 sta.dx 00            NOS
2430:000 | DONE wsp | em 16 16 |        |             |
2431:000 | DONE ins | em 16 16 | 005752 | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
2432:000 | DONE ins | em 16 16 | 005755 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
2433:000 | DONE ins | em 16 16 | 005758 | a8          |                 tay                  TOS
2434:000 | DONE wsp | em 16 16 |        |             |
2435:000 | DONE lbl | em 16 16 | 005759 |             | z_count                              
2435:001 | DONE ins | em 16 16 | 005759 | 60          |                 rts                  
2436:000 | DONE wsp | em 16 16 |        |             |
2437:000 | DONE wsp | em 16 16 |        |             |
2438:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2439:000 | DONE cmt | em 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
2440:000 | DONE cmt | em 16 16 |        |             | ; Cause following output to appear at beginning of next line
2441:000 | DONE lbl | em 16 16 | 00575a |             | xt_cr                                
2442:000 | DONE ins | em 16 16 | 00575a | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
2443:000 | DONE ins | em 16 16 | 00575d | 20 f1 58    |                 jsr 0058f1           
2444:000 | DONE wsp | em 16 16 |        |             |
2445:000 | DONE lbl | em 16 16 | 005760 |             | z_cr                                 
2445:001 | DONE ins | em 16 16 | 005760 | 60          |                 rts                  
2446:000 | DONE wsp | em 16 16 |        |             |
2447:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2448:000 | DONE cmt | em 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
2449:000 | DONE cmt | em 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
2450:000 | DONE cmt | em 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
2451:000 | DONE cmt | em 16 16 |        |             | ; address.
2452:000 | DONE lbl | em 16 16 | 005761 |             | xt_create                            
2453:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2454:000 | DONE ins | em 16 16 | 005761 | 20 73 5c    |                 jsr 005c73           ( -- addr u )
2455:000 | DONE ins | em 16 16 | 005764 | d0 06       |                 bne 00576c           
2456:000 | DONE wsp | em 16 16 |        |             |
2457:000 | DONE cmt | em 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
2458:000 | DONE ins | em 16 16 | 005766 | a9 43 72    |                 lda.# 007243         
2459:000 | DONE ins | em 16 16 | 005769 | 4c 70 6a    |                 jmp 006a70           
2460:000 | DONE wsp | em 16 16 |        |             |
2461:000 | DONE lbl | em 16 16 | 00576c |             | create_got_name                      
2462:000 | DONE cmt | em 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
2463:000 | DONE cmt | em 16 16 |        |             |                 ; word
2464:000 | DONE ins | em 16 16 | 00576c | a5 00       |                 lda.d 000000         
2465:000 | DONE ins | em 16 16 | 00576e | 85 1c       |                 sta.d 00001c         save start of new word
2466:000 | DONE wsp | em 16 16 |        |             |
2467:000 | DONE cmt | em 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
2468:000 | DONE cmt | em 16 16 |        |             |                 ; of the length of the given string. We arrive here with
2469:000 | DONE cmt | em 16 16 |        |             |                 ; ( addr u )
2470:000 | DONE ins | em 16 16 | 005770 | 98          |                 tya                  
2471:000 | DONE ins | em 16 16 | 005771 | 29 ff 00    |                 and.# 00ff           
2472:000 | DONE ins | em 16 16 | 005774 | 85 1e       |                 sta.d 00001e         save length of name string
2473:000 | DONE wsp | em 16 16 |        |             |
2474:000 | DONE cmt | em 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
2475:000 | DONE cmt | em 16 16 |        |             |                 ; header. This is also the offset for the start of the code
2476:000 | DONE cmt | em 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
2477:000 | DONE cmt | em 16 16 |        |             |                 ; could just allot the space afterwards.
2478:000 | DONE ins | em 16 16 | 005776 | 18          |                 clc                  
2479:000 | DONE ins | em 16 16 | 005777 | 69 08 00    |                 adc.# 0008           
2480:000 | DONE ins | em 16 16 | 00577a | 85 20       |                 sta.d 000020         total bytes required for header
2481:000 | DONE wsp | em 16 16 |        |             |
2482:000 | DONE cmt | em 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
2483:000 | DONE cmt | em 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
2484:000 | DONE cmt | em 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
2485:000 | DONE ins | em 16 16 | 00577c | 1a          |                 inc.a                
2486:000 | DONE ins | em 16 16 | 00577d | 1a          |                 inc.a                
2487:000 | DONE ins | em 16 16 | 00577e | 1a          |                 inc.a                
2488:000 | DONE wsp | em 16 16 |        |             |
2489:000 | DONE cmt | em 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
2490:000 | DONE cmt | em 16 16 |        |             |                 ; and so we don't have to fool around with the stack
2491:000 | DONE ins | em 16 16 | 00577f | 18          |                 clc                  
2492:000 | DONE ins | em 16 16 | 005780 | 65 00       |                 adc.d 000000         
2493:000 | DONE ins | em 16 16 | 005782 | 85 00       |                 sta.d 000000         
2494:000 | DONE wsp | em 16 16 |        |             |
2495:000 | DONE cmt | em 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
2496:000 | DONE cmt | em 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
2497:000 | DONE cmt | em 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
2498:000 | DONE cmt | em 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
2499:000 | DONE cmt | em 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
2500:000 | DONE ins | em 16 16 | 005784 | b5 00       |                 lda.dx 00            
2501:000 | DONE ins | em 16 16 | 005786 | 48          |                 pha                  
2502:000 | DONE wsp | em 16 16 |        |             |
2503:000 | DONE cmt | em 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
2504:000 | DONE ins | em 16 16 | 005787 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
2505:000 | DONE ins | em 16 16 | 00578a | a5 1e       |                 lda.d 00001e         get length byte
2506:000 | DONE ins | em 16 16 | 00578c | 91 1c       |                 sta.diy 00001c       STA (TMP1),Y
2507:000 | DONE ins | em 16 16 | 00578e | c8          |                 iny                  
2508:000 | DONE ins | em 16 16 | 00578f | c8          |                 iny                  
2509:000 | DONE wsp | em 16 16 |        |             |
2510:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
2511:000 | DONE cmt | em 16 16 |        |             |                 ; current Dictionary Pointer
2512:000 | DONE ins | em 16 16 | 005790 | a5 02       |                 lda.d 000002         
2513:000 | DONE ins | em 16 16 | 005792 | 91 1c       |                 sta.diy 00001c       
2514:000 | DONE ins | em 16 16 | 005794 | c8          |                 iny                  
2515:000 | DONE ins | em 16 16 | 005795 | c8          |                 iny                  
2516:000 | DONE wsp | em 16 16 |        |             |
2517:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
2518:000 | DONE cmt | em 16 16 |        |             |                 ; This begins after the header, so we take the length of the
2519:000 | DONE cmt | em 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
2520:000 | DONE cmt | em 16 16 |        |             |                 ; the address of the start of the word
2521:000 | DONE ins | em 16 16 | 005796 | a5 1c       |                 lda.d 00001c         can't use CP, because we've allotted space
2522:000 | DONE ins | em 16 16 | 005798 | 85 02       |                 sta.d 000002         while we've got it, make old CP the new DP
2523:000 | DONE wsp | em 16 16 |        |             |
2524:000 | DONE ins | em 16 16 | 00579a | 18          |                 clc                  
2525:000 | DONE ins | em 16 16 | 00579b | 65 20       |                 adc.d 000020         total header length
2526:000 | DONE ins | em 16 16 | 00579d | 91 1c       |                 sta.diy 00001c       
2527:000 | DONE ins | em 16 16 | 00579f | c8          |                 iny                  
2528:000 | DONE ins | em 16 16 | 0057a0 | c8          |                 iny                  
2529:000 | DONE wsp | em 16 16 |        |             |
2530:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
2531:000 | DONE cmt | em 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
2532:000 | DONE cmt | em 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
2533:000 | DONE cmt | em 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
2534:000 | DONE cmt | em 16 16 |        |             |                 ; compilation. The start of the code field is still in A
2535:000 | DONE ins | em 16 16 | 0057a1 | 1a          |                 inc.a                
2536:000 | DONE ins | em 16 16 | 0057a2 | 1a          |                 inc.a                
2537:000 | DONE ins | em 16 16 | 0057a3 | 1a          |                 inc.a                
2538:000 | DONE ins | em 16 16 | 0057a4 | 91 1c       |                 sta.diy 00001c       
2539:000 | DONE ins | em 16 16 | 0057a6 | c8          |                 iny                  
2540:000 | DONE ins | em 16 16 | 0057a7 | c8          |                 iny                  
2541:000 | DONE wsp | em 16 16 |        |             |
2542:000 | DONE cmt | em 16 16 |        |             |                 ; BYTE 8: Start of name string
2543:000 | DONE cmt | em 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
2544:000 | DONE cmt | em 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
2545:000 | DONE cmt | em 16 16 |        |             |                 ; so we can use the same loop index
2546:000 | DONE ins | em 16 16 | 0057a8 | 68          |                 pla                  get back string address
2547:000 | DONE ins | em 16 16 | 0057a9 | 38          |                 sec                  
2548:000 | DONE ins | em 16 16 | 0057aa | e9 08 00    |                 sbc.# 0008           
2549:000 | DONE ins | em 16 16 | 0057ad | 85 20       |                 sta.d 000020         
2550:000 | DONE ins | em 16 16 | 0057af | e2 20       |                 sep 20               
2550:001 | DONE ctl | em  8 16 |        |             |         .!a8
2551:000 | DONE lbl | em  8 16 | 0057b1 |             | @                                    
2552:000 | DONE ins | em  8 16 | 0057b1 | b1 20       |                 lda.diy 000020       
2553:000 | DONE ins | em  8 16 | 0057b3 | 91 1c       |                 sta.diy 00001c       
2554:000 | DONE ins | em  8 16 | 0057b5 | c8          |                 iny                  
2555:000 | DONE ins | em  8 16 | 0057b6 | c6 1e       |                 dec.d 00001e         
2556:000 | DONE ins | em  8 16 | 0057b8 | d0 f7       |                 bne 0057b1           
2557:000 | DONE wsp | em  8 16 |        |             |
2558:000 | DONE cmt | em  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
2559:000 | DONE cmt | em  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
2560:000 | DONE cmt | em  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
2561:000 | DONE cmt | em  8 16 |        |             |                 ; good
2562:000 | DONE ins | em  8 16 | 0057ba | a9 20       |                 lda.# 20             opcode of JSR
2563:000 | DONE ins | em  8 16 | 0057bc | 91 1c       |                 sta.diy 00001c       
2564:000 | DONE ins | em  8 16 | 0057be | c8          |                 iny                  single increase only because we have 8-bit A
2565:000 | DONE wsp | em  8 16 |        |             |
2566:000 | DONE ins | em  8 16 | 0057bf | a9 e4       |                 lda.# .lsb 0069e4    
2567:000 | DONE ins | em  8 16 | 0057c1 | 91 1c       |                 sta.diy 00001c       
2568:000 | DONE ins | em  8 16 | 0057c3 | c8          |                 iny                  
2569:000 | DONE wsp | em  8 16 |        |             |
2570:000 | DONE ins | em  8 16 | 0057c4 | a9 69       |                 lda.# .msb 0069e4    
2571:000 | DONE ins | em  8 16 | 0057c6 | 91 1c       |                 sta.diy 00001c       
2572:000 | DONE wsp | em  8 16 |        |             |
2573:000 | DONE ins | em  8 16 | 0057c8 | c2 20       |                 rep 20               
2573:001 | DONE ctl | em 16 16 |        |             |         .!a16
2574:000 | DONE cmt | em 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
2575:000 | DONE ins | em 16 16 | 0057ca | b4 02       |                 ldy.dx 02            
2576:000 | DONE ins | em 16 16 | 0057cc | e8          |                 inx                  
2577:000 | DONE ins | em 16 16 | 0057cd | e8          |                 inx                  
2578:000 | DONE ins | em 16 16 | 0057ce | e8          |                 inx                  
2579:000 | DONE ins | em 16 16 | 0057cf | e8          |                 inx                  
2580:000 | DONE wsp | em 16 16 |        |             |
2581:000 | DONE lbl | em 16 16 | 0057d0 |             | z_create                             
2581:001 | DONE ins | em 16 16 | 0057d0 | 60          |                 rts                  
2582:000 | DONE wsp | em 16 16 |        |             |
2583:000 | DONE wsp | em 16 16 |        |             |
2584:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2585:000 | DONE cmt | em 16 16 |        |             | ; DEFER ( "name" -- ) X bytes / X cycles
2586:000 | DONE cmt | em 16 16 |        |             | ; Reserve an name that can be linked to various xt by IS. The ANSI reference
2587:000 | DONE cmt | em 16 16 |        |             | ; implementation is CREATE ['] ABORT , DOES> @ EXECUTE ; but we use this as
2588:000 | DONE cmt | em 16 16 |        |             | ; a low-level word so we can set stuff up earlier and faster
2589:000 | DONE lbl | em 16 16 | 0057d1 |             | xt_defer                             
2590:000 | DONE ins | em 16 16 | 0057d1 | 20 61 57    |                 jsr 005761           
2591:000 | DONE wsp | em 16 16 |        |             |
2592:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2593:000 | DONE cmt | em 16 16 |        |             |                 ; actually want DODEFER this time. Go back two bytes and repace
2594:000 | DONE cmt | em 16 16 |        |             |                 ; the subroutine jump target
2595:000 | DONE ins | em 16 16 | 0057d4 | a5 00       |                 lda.d 000000         
2596:000 | DONE ins | em 16 16 | 0057d6 | 3a          |                 dec.a                
2597:000 | DONE ins | em 16 16 | 0057d7 | 3a          |                 dec.a                
2598:000 | DONE ins | em 16 16 | 0057d8 | 85 1c       |                 sta.d 00001c         
2599:000 | DONE wsp | em 16 16 |        |             |
2600:000 | DONE ins | em 16 16 | 0057da | a9 c8 69    |                 lda.# 0069c8         
2601:000 | DONE ins | em 16 16 | 0057dd | 92 1c       |                 sta.di 00001c        STA (TMP1)
2602:000 | DONE wsp | em 16 16 |        |             |
2603:000 | DONE cmt | em 16 16 |        |             |                 ; DODEFER executes the next address it finds after its call. As
2604:000 | DONE cmt | em 16 16 |        |             |                 ; a default, we include the error "Defer not defined"
2605:000 | DONE ins | em 16 16 | 0057df | a9 d1 69    |                 lda.# 0069d1         
2606:000 | DONE ins | em 16 16 | 0057e2 | 92 00       |                 sta.di 000000        
2607:000 | DONE ins | em 16 16 | 0057e4 | e6 00       |                 inc.d 000000         
2608:000 | DONE ins | em 16 16 | 0057e6 | e6 00       |                 inc.d 000000         
2609:000 | DONE wsp | em 16 16 |        |             |
2610:000 | DONE ins | em 16 16 | 0057e8 | 20 36 57    |                 jsr 005736           adjust the header to the correct length
2611:000 | DONE wsp | em 16 16 |        |             |
2612:000 | DONE lbl | em 16 16 | 0057eb |             | z_defer                              
2612:001 | DONE ins | em 16 16 | 0057eb | 60          |                 rts                  
2613:000 | DONE wsp | em 16 16 |        |             |
2614:000 | DONE wsp | em 16 16 |        |             |
2615:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2616:000 | DONE cmt | em 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
2617:000 | DONE cmt | em 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
2618:000 | DONE cmt | em 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
2619:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2620:000 | DONE cmt | em 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
2621:000 | DONE cmt | em 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
2622:000 | DONE cmt | em 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
2623:000 | DONE cmt | em 16 16 |        |             | ; following pForth and Gforth.
2624:000 | DONE lbl | em 16 16 | 0057ec |             | xt_digitq                            
2625:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2626:000 | DONE ins | em 16 16 | 0057ec | 98          |                 tya                  
2627:000 | DONE ins | em 16 16 | 0057ed | 29 ff 00    |                 and.# 00ff           paranoid
2628:000 | DONE wsp | em 16 16 |        |             |
2629:000 | DONE ins | em 16 16 | 0057f0 | e2 20       |                 sep 20               
2629:001 | DONE ctl | em  8 16 |        |             |         .!a8
2630:000 | DONE cmt | em  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
2631:000 | DONE ins | em  8 16 | 0057f2 | c9 30       |                 cmp.# 30             
2632:000 | DONE ins | em  8 16 | 0057f4 | 90 1d       |                 bcc 005813           
2633:000 | DONE wsp | em  8 16 |        |             |
2634:000 | DONE cmt | em  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
2635:000 | DONE cmt | em  8 16 |        |             |                 ; a normal number
2636:000 | DONE ins | em  8 16 | 0057f6 | c9 3a       |                 cmp.# 00003a         This is ':'
2637:000 | DONE ins | em  8 16 | 0057f8 | 90 12       |                 bcc 00580c           
2638:000 | DONE wsp | em  8 16 |        |             |
2639:000 | DONE cmt | em  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
2640:000 | DONE cmt | em  8 16 |        |             |                 ; we can treat the whole range as a number
2641:000 | DONE ins | em  8 16 | 0057fa | c9 40       |                 cmp.# 000040         This is '@'
2642:000 | DONE ins | em  8 16 | 0057fc | 90 15       |                 bcc 005813           
2643:000 | DONE wsp | em  8 16 |        |             |
2644:000 | DONE cmt | em  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
2645:000 | DONE ins | em  8 16 | 0057fe | c9 61       |                 cmp.# 61             
2646:000 | DONE ins | em  8 16 | 005800 | 90 07       |                 bcc 005809           not lower case, too low
2647:000 | DONE ins | em  8 16 | 005802 | c9 7b       |                 cmp.# 00007b         
2648:000 | DONE ins | em  8 16 | 005804 | b0 03       |                 bcs 005809           not lower case, too high
2649:000 | DONE wsp | em  8 16 |        |             |
2650:000 | DONE ins | em  8 16 | 005806 | 18          |                 clc                  just right
2651:000 | DONE ins | em  8 16 | 005807 | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
2652:000 | DONE wsp | em  8 16 |        |             |
2653:000 | DONE lbl | em  8 16 | 005809 |             | dq_case_done                         
2654:000 | DONE cmt | em  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
2655:000 | DONE cmt | em  8 16 |        |             |                 ; whole range as one number
2656:000 | DONE ins | em  8 16 | 005809 | 38          |                 sec                  
2657:000 | DONE ins | em  8 16 | 00580a | e9 07       |                 sbc.# 07             fall through to dq_checkbase
2658:000 | DONE wsp | em  8 16 |        |             |
2659:000 | DONE lbl | em  8 16 | 00580c |             | dq_checkbase                         
2660:000 | DONE cmt | em  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
2661:000 | DONE ins | em  8 16 | 00580c | 38          |                 sec                  
2662:000 | DONE ins | em  8 16 | 00580d | e9 30       |                 sbc.# 30             This is also the actual conversion step
2663:000 | DONE ins | em  8 16 | 00580f | c5 16       |                 cmp.d 000016         
2664:000 | DONE ins | em  8 16 | 005811 | 90 0b       |                 bcc 00581e           
2665:000 | DONE wsp | em  8 16 |        |             |
2666:000 | DONE lbl | em  8 16 | 005813 |             | dq_notdigit                          
2667:000 | DONE cmt | em  8 16 |        |             |                 ; not a digit, add a false flag
2668:000 | DONE ins | em  8 16 | 005813 | ca          |                 dex                  
2669:000 | DONE ins | em  8 16 | 005814 | ca          |                 dex                  
2670:000 | DONE ins | em  8 16 | 005815 | 94 00       |                 sty.dx 00            keep the offending character in NOS
2671:000 | DONE ins | em  8 16 | 005817 | a0 00 00    |                 ldy.# 0000           
2672:000 | DONE ins | em  8 16 | 00581a | c2 20       |                 rep 20               
2672:001 | DONE ctl | em 16 16 |        |             |         .!a16
2673:000 | DONE ins | em 16 16 | 00581c | 80 09       |                 bra 005827           
2674:000 | DONE wsp | em 16 16 |        |             |
2675:000 | DONE lbl | em 16 16 | 00581e |             | dq_success                           
2676:000 | DONE ins | em 16 16 | 00581e | ca          |                 dex                  
2677:000 | DONE ins | em 16 16 | 00581f | ca          |                 dex                  
2678:000 | DONE ins | em 16 16 | 005820 | c2 20       |                 rep 20               
2678:001 | DONE ctl | em 16 16 |        |             |         .!a16
2679:000 | DONE ins | em 16 16 | 005822 | 95 00       |                 sta.dx 00            put the number in NOS
2680:000 | DONE ins | em 16 16 | 005824 | a0 ff ff    |                 ldy.# 0ffff          
2681:000 | DONE wsp | em 16 16 |        |             |
2682:000 | DONE lbl | em 16 16 | 005827 |             | z_digitq                             
2682:001 | DONE ins | em 16 16 | 005827 | 60          |                 rts                  
2683:000 | DONE wsp | em 16 16 |        |             |
2684:000 | DONE wsp | em 16 16 |        |             |
2685:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2686:000 | DONE cmt | em 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
2687:000 | DONE cmt | em 16 16 |        |             | ; Add two double cell numbers
2688:000 | DONE lbl | em 16 16 | 005828 |             | xt_dplus                             
2689:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2690:000 | DONE ins | em 16 16 | 005828 | 5a          |                 phy                  save hi word of first number, frees Y
2691:000 | DONE ins | em 16 16 | 005829 | b5 00       |                 lda.dx 00            lo word of first number
2692:000 | DONE ins | em 16 16 | 00582b | 18          |                 clc                  
2693:000 | DONE ins | em 16 16 | 00582c | 75 04       |                 adc.dx 04            add lo word of second number
2694:000 | DONE ins | em 16 16 | 00582e | a8          |                 tay                  
2695:000 | DONE wsp | em 16 16 |        |             |
2696:000 | DONE ins | em 16 16 | 00582f | 68          |                 pla                  get hi word of first number
2697:000 | DONE ins | em 16 16 | 005830 | 75 02       |                 adc.dx 02            add hi word of second number
2698:000 | DONE wsp | em 16 16 |        |             |
2699:000 | DONE ins | em 16 16 | 005832 | e8          |                 inx                  
2700:000 | DONE ins | em 16 16 | 005833 | e8          |                 inx                  
2701:000 | DONE ins | em 16 16 | 005834 | e8          |                 inx                  
2702:000 | DONE ins | em 16 16 | 005835 | e8          |                 inx                  
2703:000 | DONE wsp | em 16 16 |        |             |
2704:000 | DONE ins | em 16 16 | 005836 | 94 00       |                 sty.dx 00            lo result goes NOS
2705:000 | DONE ins | em 16 16 | 005838 | a8          |                 tay                  to result goes TOS
2706:000 | DONE wsp | em 16 16 |        |             |
2707:000 | DONE lbl | em 16 16 | 005839 |             | z_dplus                              
2707:001 | DONE ins | em 16 16 | 005839 | 60          |                 rts                  
2708:000 | DONE wsp | em 16 16 |        |             |
2709:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2710:000 | DONE cmt | em 16 16 |        |             | ; DMINUS ( d d -- d ) X bytes / X cycles
2711:000 | DONE cmt | em 16 16 |        |             | ; Subtract two double cell numbers
2712:000 | DONE lbl | em 16 16 | 00583a |             | xt_dminus                            
2713:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2714:000 | DONE ins | em 16 16 | 00583a | b5 04       |                 lda.dx 04            lo word NOS
2715:000 | DONE ins | em 16 16 | 00583c | 38          |                 sec                  
2716:000 | DONE ins | em 16 16 | 00583d | f5 00       |                 sbc.dx 00            lo word TOS
2717:000 | DONE ins | em 16 16 | 00583f | 48          |                 pha                  
2718:000 | DONE wsp | em 16 16 |        |             |
2719:000 | DONE ins | em 16 16 | 005840 | 94 00       |                 sty.dx 00            use as temp storage for hi word TOS
2720:000 | DONE ins | em 16 16 | 005842 | b5 02       |                 lda.dx 02            hi word, NOS
2721:000 | DONE ins | em 16 16 | 005844 | f5 00       |                 sbc.dx 00            hi word, TOS
2722:000 | DONE ins | em 16 16 | 005846 | a8          |                 tay                  result hi word now TOS
2723:000 | DONE wsp | em 16 16 |        |             |
2724:000 | DONE ins | em 16 16 | 005847 | e8          |                 inx                  
2725:000 | DONE ins | em 16 16 | 005848 | e8          |                 inx                  
2726:000 | DONE ins | em 16 16 | 005849 | e8          |                 inx                  
2727:000 | DONE ins | em 16 16 | 00584a | e8          |                 inx                  
2728:000 | DONE wsp | em 16 16 |        |             |
2729:000 | DONE ins | em 16 16 | 00584b | 68          |                 pla                  
2730:000 | DONE ins | em 16 16 | 00584c | 95 00       |                 sta.dx 00            result lo word now NOS
2731:000 | DONE wsp | em 16 16 |        |             |
2732:000 | DONE lbl | em 16 16 | 00584e |             | z_dminus                             
2732:001 | DONE ins | em 16 16 | 00584e | 60          |                 rts                  
2733:000 | DONE wsp | em 16 16 |        |             |
2734:000 | DONE wsp | em 16 16 |        |             |
2735:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2736:000 | DONE cmt | em 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2737:000 | DONE cmt | em 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2738:000 | DONE cmt | em 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2739:000 | DONE cmt | em 16 16 |        |             | ; TODO make this work the way Gforth's does
2740:000 | DONE lbl | em 16 16 | 00584f |             | xt_dtos                              
2741:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2742:000 | DONE ins | em 16 16 | 00584f | b4 00       |                 ldy.dx 00            
2743:000 | DONE ins | em 16 16 | 005851 | e8          |                 inx                  
2744:000 | DONE ins | em 16 16 | 005852 | e8          |                 inx                  
2745:000 | DONE wsp | em 16 16 |        |             |
2746:000 | DONE lbl | em 16 16 | 005853 |             | z_dtos                               
2746:001 | DONE ins | em 16 16 | 005853 | 60          |                 rts                  
2747:000 | DONE wsp | em 16 16 |        |             |
2748:000 | DONE wsp | em 16 16 |        |             |
2749:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2750:000 | DONE cmt | em 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2751:000 | DONE cmt | em 16 16 |        |             | ; Return the absolute value of a double number
2752:000 | DONE cmt | em 16 16 |        |             | ; TODO recode in assembler
2753:000 | DONE lbl | em 16 16 | 005854 |             | xt_dabs                              
2754:000 | DONE cmt | em 16 16 |        |             |                 ; double cell is TOS
2755:000 | DONE ins | em 16 16 | 005854 | 98          |                 tya                  force flag test
2756:000 | DONE ins | em 16 16 | 005855 | f0 03       |                 beq 00585a           already positive, life is good
2757:000 | DONE wsp | em 16 16 |        |             |
2758:000 | DONE ins | em 16 16 | 005857 | 20 70 58    |                 jsr 005870           
2759:000 | DONE wsp | em 16 16 |        |             |
2760:000 | DONE lbl | em 16 16 | 00585a |             | z_dabs                               
2760:001 | DONE ins | em 16 16 | 00585a | 60          |                 rts                  
2761:000 | DONE wsp | em 16 16 |        |             |
2762:000 | DONE wsp | em 16 16 |        |             |
2763:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2764:000 | DONE cmt | em 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2765:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 10
2766:000 | DONE lbl | em 16 16 | 00585b |             | xt_decimal                           
2767:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2768:000 | DONE ins | em 16 16 | 00585b | a9 0a 00    |                 lda.# 000a           
2769:000 | DONE ins | em 16 16 | 00585e | 85 16       |                 sta.d 000016         
2770:000 | DONE wsp | em 16 16 |        |             |
2771:000 | DONE lbl | em 16 16 | 005860 |             | z_decimal                            
2771:001 | DONE ins | em 16 16 | 005860 | 60          |                 rts                  
2772:000 | DONE wsp | em 16 16 |        |             |
2773:000 | DONE wsp | em 16 16 |        |             |
2774:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2775:000 | DONE cmt | em 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2776:000 | DONE cmt | em 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2777:000 | DONE cmt | em 16 16 |        |             | ; Assumes X is valid as the DSP.
2778:000 | DONE lbl | em 16 16 | 005861 |             | xt_depth                             
2779:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2780:000 | DONE cmt | em 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2781:000 | DONE ins | em 16 16 | 005861 | 86 22       |                 stx.d 000022         
2782:000 | DONE ins | em 16 16 | 005863 | a9 ff 00    |                 lda.# 0000ff         
2783:000 | DONE ins | em 16 16 | 005866 | 38          |                 sec                  
2784:000 | DONE ins | em 16 16 | 005867 | e5 22       |                 sbc.d 000022         
2785:000 | DONE wsp | em 16 16 |        |             |
2786:000 | DONE cmt | em 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2787:000 | DONE ins | em 16 16 | 005869 | 4a          |                 lsr.a                
2788:000 | DONE wsp | em 16 16 |        |             |
2789:000 | DONE ins | em 16 16 | 00586a | ca          |                 dex                  
2790:000 | DONE ins | em 16 16 | 00586b | ca          |                 dex                  
2791:000 | DONE ins | em 16 16 | 00586c | 94 00       |                 sty.dx 00            
2792:000 | DONE wsp | em 16 16 |        |             |
2793:000 | DONE cmt | em 16 16 |        |             |                 ; push result to stack
2794:000 | DONE ins | em 16 16 | 00586e | a8          |                 tay                  
2795:000 | DONE wsp | em 16 16 |        |             |
2796:000 | DONE lbl | em 16 16 | 00586f |             | z_depth                              
2796:001 | DONE ins | em 16 16 | 00586f | 60          |                 rts                  
2797:000 | DONE wsp | em 16 16 |        |             |
2798:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2799:000 | DONE cmt | em 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2800:000 | DONE cmt | em 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2801:000 | DONE lbl | em 16 16 | 005870 |             | xt_dnegate                           
2802:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2803:000 | DONE cmt | em 16 16 |        |             |                 ; start off with LSW (in NOS)
2804:000 | DONE ins | em 16 16 | 005870 | b5 00       |                 lda.dx 00            
2805:000 | DONE ins | em 16 16 | 005872 | 49 ff ff    |                 eor.# 0ffff          
2806:000 | DONE wsp | em 16 16 |        |             |
2807:000 | DONE cmt | em 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2808:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
2809:000 | DONE ins | em 16 16 | 005875 | 18          |                 clc                  
2810:000 | DONE ins | em 16 16 | 005876 | 69 01 00    |                 adc.# 0001           
2811:000 | DONE ins | em 16 16 | 005879 | 95 00       |                 sta.dx 00            
2812:000 | DONE wsp | em 16 16 |        |             |
2813:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
2814:000 | DONE ins | em 16 16 | 00587b | 98          |                 tya                  
2815:000 | DONE ins | em 16 16 | 00587c | 49 ff ff    |                 eor.# 0ffff          
2816:000 | DONE ins | em 16 16 | 00587f | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2817:000 | DONE ins | em 16 16 | 005882 | a8          |                 tay                  
2818:000 | DONE wsp | em 16 16 |        |             |
2819:000 | DONE lbl | em 16 16 | 005883 |             | z_dnegate                            
2819:001 | DONE ins | em 16 16 | 005883 | 60          |                 rts                  
2820:000 | DONE wsp | em 16 16 |        |             |
2821:000 | DONE wsp | em 16 16 |        |             |
2822:000 | DONE wsp | em 16 16 |        |             |
2823:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2824:000 | DONE cmt | em 16 16 |        |             | ; ?DO ( limit start -- )  X bytes / X cycles
2825:000 | DONE cmt | em 16 16 |        |             | ; Compile-time part of ?DO. This may not be natively compiled.
2826:000 | DONE lbl | em 16 16 | 005884 |             | xt_qdo                               
2827:000 | DONE cmt | em 16 16 |        |             | 		; ?DO shares most of its code with DO. Use the tmp1 flag to
2828:000 | DONE cmt | em 16 16 |        |             |                 ; decide which is which
2829:000 | DONE ins | em 16 16 | 005884 | a9 ff ff    |                 lda.# 0ffff          
2830:000 | DONE ins | em 16 16 | 005887 | 85 1c       |                 sta.d 00001c         
2831:000 | DONE ins | em 16 16 | 005889 | 80 02       |                 bra 00588d           continue with do_common
2832:000 | DONE wsp | em 16 16 |        |             |
2833:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2834:000 | DONE cmt | em 16 16 |        |             | ; DO ( limit start -- )  X bytes / X cycles
2835:000 | DONE cmt | em 16 16 |        |             | ; Compile-time part of DO. ": DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY ;"
2836:000 | DONE cmt | em 16 16 |        |             | ; To work with LEAVE, we compile a routine that pushes the end address to the
2837:000 | DONE cmt | em 16 16 |        |             | ; Return Stack at run time. This is based on a suggestion by Garth Wilson, see
2838:000 | DONE cmt | em 16 16 |        |             | ; loops.txt for details. This may not be native compile.
2839:000 | DONE lbl | em 16 16 | 00588b |             | xt_do                                
2840:000 | DONE cmt | em 16 16 |        |             |                 ; DO and ?DO share most of their code, use tmp1 as a flag.
2841:000 | DONE ins | em 16 16 | 00588b | 64 1c       |                 stz.d 00001c         0 is DO, drop through to DO_COMMON
2842:000 | DONE wsp | em 16 16 |        |             |
2843:000 | DONE lbl | em 16 16 | 00588d |             | do_common                            
2844:000 | DONE cmt | em 16 16 |        |             |                 ; We start by compiling the opcode for LDA.# ($A9). Because
2845:000 | DONE cmt | em 16 16 |        |             |                 ; we're little endian, we don't have to switch registers sizes,
2846:000 | DONE cmt | em 16 16 |        |             |                 ; we just have to make sure the MSB will be overwritten
2847:000 | DONE ins | em 16 16 | 00588d | a9 a9 00    |                 lda.# 00a9           
2848:000 | DONE ins | em 16 16 | 005890 | 92 00       |                 sta.di 000000        
2849:000 | DONE ins | em 16 16 | 005892 | e6 00       |                 inc.d 000000         
2850:000 | DONE wsp | em 16 16 |        |             |
2851:000 | DONE cmt | em 16 16 |        |             |                 ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
2852:000 | DONE cmt | em 16 16 |        |             |                 ; compile the address we need to LDA.# at runtime
2853:000 | DONE ins | em 16 16 | 005894 | ca          |                 dex                  
2854:000 | DONE ins | em 16 16 | 005895 | ca          |                 dex                  
2855:000 | DONE ins | em 16 16 | 005896 | 94 00       |                 sty.dx 00            
2856:000 | DONE ins | em 16 16 | 005898 | a4 00       |                 ldy.d 000000         
2857:000 | DONE wsp | em 16 16 |        |             |
2858:000 | DONE cmt | em 16 16 |        |             |                 ; Reserve two bytes for the address
2859:000 | DONE ins | em 16 16 | 00589a | e6 00       |                 inc.d 000000         
2860:000 | DONE ins | em 16 16 | 00589c | e6 00       |                 inc.d 000000         
2861:000 | DONE wsp | em 16 16 |        |             |
2862:000 | DONE cmt | em 16 16 |        |             |                 ; Save the opcode for PHA ($48)
2863:000 | DONE ins | em 16 16 | 00589e | a9 48 00    |                 lda.# 0048           
2864:000 | DONE ins | em 16 16 | 0058a1 | 92 00       |                 sta.di 000000        
2865:000 | DONE ins | em 16 16 | 0058a3 | e6 00       |                 inc.d 000000         
2866:000 | DONE wsp | em 16 16 |        |             |
2867:000 | DONE cmt | em 16 16 |        |             |                 ; Make space to compile either (?DO) or (DO)
2868:000 | DONE ins | em 16 16 | 0058a5 | ca          |                 dex                  
2869:000 | DONE ins | em 16 16 | 0058a6 | ca          |                 dex                  
2870:000 | DONE ins | em 16 16 | 0058a7 | 94 00       |                 sty.dx 00            
2871:000 | DONE wsp | em 16 16 |        |             |
2872:000 | DONE cmt | em 16 16 |        |             |                 ; compile (?DO) or (DO)
2873:000 | DONE ins | em 16 16 | 0058a9 | a5 1c       |                 lda.d 00001c         
2874:000 | DONE ins | em 16 16 | 0058ab | f0 05       |                 beq 0058b2           childish, yes
2875:000 | DONE wsp | em 16 16 |        |             |
2876:000 | DONE ins | em 16 16 | 0058ad | a0 eb 52    |                 ldy.# 0052eb         
2877:000 | DONE ins | em 16 16 | 0058b0 | 80 03       |                 bra 0058b5           
2878:000 | DONE wsp | em 16 16 |        |             |
2879:000 | DONE lbl | em 16 16 | 0058b2 |             | do_do                                
2880:000 | DONE ins | em 16 16 | 0058b2 | a0 02 53    |                 ldy.# 005302         
2881:000 | DONE wsp | em 16 16 |        |             |
2882:000 | DONE lbl | em 16 16 | 0058b5 |             | do_compile                           
2883:000 | DONE ins | em 16 16 | 0058b5 | 20 89 56    |                 jsr 005689           
2884:000 | DONE wsp | em 16 16 |        |             |
2885:000 | DONE cmt | em 16 16 |        |             |                 ; HERE. We put this on the Data Stack for LOOP/+LOOP. Note this
2886:000 | DONE cmt | em 16 16 |        |             |                 ; has nothing to do with the HERE we've saved for LEAVE
2887:000 | DONE ins | em 16 16 | 0058b8 | ca          |                 dex                  
2888:000 | DONE ins | em 16 16 | 0058b9 | ca          |                 dex                  
2889:000 | DONE ins | em 16 16 | 0058ba | 94 00       |                 sty.dx 00            
2890:000 | DONE ins | em 16 16 | 0058bc | a4 00       |                 ldy.d 000000         
2891:000 | DONE wsp | em 16 16 |        |             |
2892:000 | DONE lbl | em 16 16 | 0058be |             | z_qdo                                
2893:000 | DONE lbl | em 16 16 | 0058be |             | z_do                                 
2894:000 | DONE ins | em 16 16 | 0058be | 60          |                 rts                  
2895:000 | DONE wsp | em 16 16 |        |             |
2896:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2897:000 | DONE cmt | em 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2898:000 | DONE cmt | em 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2899:000 | DONE cmt | em 16 16 |        |             | ; docs/create-does.txt and
2900:000 | DONE cmt | em 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2901:000 | DONE cmt | em 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2902:000 | DONE cmt | em 16 16 |        |             | ; TODO see if this creates a correct z_word address
2903:000 | DONE lbl | em 16 16 | 0058bf |             | xt_does                              
2904:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2905:000 | DONE ins | em 16 16 | 0058bf | f4 cc 58    |                 phe.# 0058cc         
2906:000 | DONE ins | em 16 16 | 0058c2 | 20 4f 6a    |                 jsr 006a4f           
2907:000 | DONE wsp | em 16 16 |        |             |
2908:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2909:000 | DONE cmt | em 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2910:000 | DONE ins | em 16 16 | 0058c5 | f4 d7 69    |                 phe.# 0069d7         
2911:000 | DONE ins | em 16 16 | 0058c8 | 20 4f 6a    |                 jsr 006a4f           
2912:000 | DONE wsp | em 16 16 |        |             |
2913:000 | DONE lbl | em 16 16 | 0058cb |             | z_does                               
2913:001 | DONE ins | em 16 16 | 0058cb | 60          |                 rts                  
2914:000 | DONE wsp | em 16 16 |        |             |
2915:000 | DONE lbl | em 16 16 | 0058cc |             | does_rt                              
2916:000 | DONE cmt | em 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2917:000 | DONE cmt | em 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2918:000 | DONE cmt | em 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2919:000 | DONE cmt | em 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2920:000 | DONE cmt | em 16 16 |        |             |                 ; the return addresses
2921:000 | DONE ins | em 16 16 | 0058cc | 68          |                 pla                  
2922:000 | DONE ins | em 16 16 | 0058cd | 1a          |                 inc.a                increase by one because of RTS mechanics
2923:000 | DONE ins | em 16 16 | 0058ce | 85 1c       |                 sta.d 00001c         
2924:000 | DONE wsp | em 16 16 |        |             |
2925:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2926:000 | DONE cmt | em 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2927:000 | DONE cmt | em 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2928:000 | DONE cmt | em 16 16 |        |             |                 ; now.
2929:000 | DONE ins | em 16 16 | 0058d0 | a5 02       |                 lda.d 000002         
2930:000 | DONE wsp | em 16 16 |        |             |
2931:000 | DONE cmt | em 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2932:000 | DONE cmt | em 16 16 |        |             |                 ; header.tasm for details).
2933:000 | DONE ins | em 16 16 | 0058d2 | 18          |                 clc                  
2934:000 | DONE ins | em 16 16 | 0058d3 | 69 04 00    |                 adc.# 0004           
2935:000 | DONE ins | em 16 16 | 0058d6 | 85 1e       |                 sta.d 00001e         
2936:000 | DONE wsp | em 16 16 |        |             |
2937:000 | DONE cmt | em 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2938:000 | DONE cmt | em 16 16 |        |             |                 ; opcode
2939:000 | DONE ins | em 16 16 | 0058d8 | b2 1e       |                 lda.di 00001e        LDA (TMP2)
2940:000 | DONE ins | em 16 16 | 0058da | 1a          |                 inc.a                
2941:000 | DONE ins | em 16 16 | 0058db | 85 1e       |                 sta.d 00001e         Points to address to be replaced
2942:000 | DONE wsp | em 16 16 |        |             |
2943:000 | DONE cmt | em 16 16 |        |             |                 ; Replace the DOVAR address
2944:000 | DONE ins | em 16 16 | 0058dd | a5 1c       |                 lda.d 00001c         
2945:000 | DONE ins | em 16 16 | 0058df | 92 1e       |                 sta.di 00001e        STA (TMP2)
2946:000 | DONE wsp | em 16 16 |        |             |
2947:000 | DONE cmt | em 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2948:000 | DONE cmt | em 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2949:000 | DONE cmt | em 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2950:000 | DONE ins | em 16 16 | 0058e1 | 60          |                 rts                  
2951:000 | DONE wsp | em 16 16 |        |             |
2952:000 | DONE wsp | em 16 16 |        |             |
2953:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2954:000 | DONE cmt | em 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2955:000 | DONE cmt | em 16 16 |        |             | ; Drop first entry on Data Stack
2956:000 | DONE wsp | em 16 16 |        |             |
2957:000 | DONE lbl | em 16 16 | 0058e2 |             | xt_drop                              
2958:000 | DONE ins | em 16 16 | 0058e2 | b4 00       |                 ldy.dx 00            
2959:000 | DONE ins | em 16 16 | 0058e4 | e8          |                 inx                  
2960:000 | DONE ins | em 16 16 | 0058e5 | e8          |                 inx                  
2961:000 | DONE wsp | em 16 16 |        |             |
2962:000 | DONE lbl | em 16 16 | 0058e6 |             | z_drop                               
2962:001 | DONE ins | em 16 16 | 0058e6 | 60          |                 rts                  
2963:000 | DONE wsp | em 16 16 |        |             |
2964:000 | DONE wsp | em 16 16 |        |             |
2965:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2966:000 | DONE cmt | em 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2967:000 | DONE cmt | em 16 16 |        |             | ; Duplicate first entry on Data Stack
2968:000 | DONE lbl | em 16 16 | 0058e7 |             | xt_dup                               
2969:000 | DONE ins | em 16 16 | 0058e7 | ca          |                 dex                  
2970:000 | DONE ins | em 16 16 | 0058e8 | ca          |                 dex                  
2971:000 | DONE ins | em 16 16 | 0058e9 | 94 00       |                 sty.dx 00            
2972:000 | DONE wsp | em 16 16 |        |             |
2973:000 | DONE lbl | em 16 16 | 0058eb |             | z_dup                                
2973:001 | DONE ins | em 16 16 | 0058eb | 60          |                 rts                  
2974:000 | DONE wsp | em 16 16 |        |             |
2975:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2976:000 | DONE cmt | em 16 16 |        |             | ; EMIT ( char -- ) X bytes / X cycles
2977:000 | DONE cmt | em 16 16 |        |             | ; Run-time default for EMIT. The user can revector this by changing the value of
2978:000 | DONE cmt | em 16 16 |        |             | ; the OUTPUT variable. We ignore the MSB completely, and do not check to see if
2979:000 | DONE cmt | em 16 16 |        |             | ; we have been given a valid ASCII character. Note that we keep the A register
2980:000 | DONE cmt | em 16 16 |        |             | ; in 16 bit mode all the time - it is up to the kernel routine stored at OUTPUT
2981:000 | DONE cmt | em 16 16 |        |             | ; to deal with that. Don't make this native compile
2982:000 | DONE lbl | em 16 16 | 0058ec |             | xt_emit                              
2983:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2984:000 | DONE cmt | em 16 16 |        |             |                 ; we put the value in A so we don't have to switch the XY
2985:000 | DONE cmt | em 16 16 |        |             |                 ; register size
2986:000 | DONE ins | em 16 16 | 0058ec | 98          |                 tya                  
2987:000 | DONE wsp | em 16 16 |        |             |
2988:000 | DONE cmt | em 16 16 |        |             |                 ; we DROP immediately so we can JMP.I to the output routine and
2989:000 | DONE cmt | em 16 16 |        |             |                 ; can use its RTS to take us back to the caller
2990:000 | DONE ins | em 16 16 | 0058ed | b4 00       |                 ldy.dx 00            
2991:000 | DONE ins | em 16 16 | 0058ef | e8          |                 inx                  
2992:000 | DONE ins | em 16 16 | 0058f0 | e8          |                 inx                  
2993:000 | DONE lbl | em 16 16 | 0058f1 |             | emit_a                               
2994:000 | DONE cmt | em 16 16 |        |             |                 ; Lots of times we want to print the character in A without
2995:000 | DONE cmt | em 16 16 |        |             |                 ; fooling around with the Data Stack. EMIT_A assumes a 16 bit
2996:000 | DONE cmt | em 16 16 |        |             |                 ; wide A register with the character in LSB and does not touch
2997:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack, but can still be vectored via OUTPUT. Call it
2998:000 | DONE cmt | em 16 16 |        |             |                 ; with JSR as you would XT_EMIT
2999:000 | DONE ins | em 16 16 | 0058f1 | 6c 0e 00    |                 jmp.i 00000e         call to kernel, JSR/RTS
3000:000 | DONE wsp | em 16 16 |        |             |
3001:000 | DONE lbl | em 16 16 | 0058f4 |             | z_emit                               ; never reached
3002:000 | DONE wsp | em 16 16 |        |             |
3003:000 | DONE wsp | em 16 16 |        |             |
3004:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3005:000 | DONE cmt | em 16 16 |        |             | ; ERASE ( addr u -- ) X bytes / X cycles
3006:000 | DONE cmt | em 16 16 |        |             | ; Set a region of memory to zero. Uses tmp2
3007:000 | DONE lbl | em 16 16 | 0058f4 |             | xt_erase                             
3008:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3009:000 | DONE ins | em 16 16 | 0058f4 | ca          |                 dex                  
3010:000 | DONE ins | em 16 16 | 0058f5 | ca          |                 dex                  
3011:000 | DONE ins | em 16 16 | 0058f6 | 94 00       |                 sty.dx 00            
3012:000 | DONE wsp | em 16 16 |        |             |
3013:000 | DONE ins | em 16 16 | 0058f8 | a0 00 00    |                 ldy.# 0000           falls through to FILL
3014:000 | DONE wsp | em 16 16 |        |             |
3015:000 | DONE wsp | em 16 16 |        |             |
3016:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3017:000 | DONE cmt | em 16 16 |        |             | ; EXIT ( -- ) X bytes / X cycles
3018:000 | DONE cmt | em 16 16 |        |             | ; Return control to the calling word immediately. If we're in a loop, we need to
3019:000 | DONE cmt | em 16 16 |        |             | ; unloop first, and get everything we we might have put on the Return Stack off
3020:000 | DONE cmt | em 16 16 |        |             | ; as well. This should be natively compiled
3021:000 | DONE lbl | em 16 16 | 0058fb |             | xt_exit                              
3022:000 | DONE ins | em 16 16 | 0058fb | 60          |                 rts                  
3023:000 | DONE lbl | em 16 16 | 0058fc |             | z_exit                               ; never reached
3024:000 | DONE wsp | em 16 16 |        |             |
3025:000 | DONE wsp | em 16 16 |        |             |
3026:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3027:000 | DONE cmt | em 16 16 |        |             | ; FILL ( addr u b -- ) X bytes / X cycles
3028:000 | DONE cmt | em 16 16 |        |             | ; Fill the given region of memory with the LSB of the TOS. Shares code with
3029:000 | DONE cmt | em 16 16 |        |             | ; ERASE
3030:000 | DONE lbl | em 16 16 | 0058fc |             | xt_fill                              
3031:000 | DONE ins | em 16 16 | 0058fc | b5 02       |                 lda.dx 02            address is 3OS
3032:000 | DONE ins | em 16 16 | 0058fe | 85 1e       |                 sta.d 00001e         
3033:000 | DONE wsp | em 16 16 |        |             |
3034:000 | DONE ins | em 16 16 | 005900 | 98          |                 tya                  
3035:000 | DONE ins | em 16 16 | 005901 | b4 00       |                 ldy.dx 00            don't bother with drop, to it later
3036:000 | DONE ins | em 16 16 | 005903 | e2 20       |                 sep 20               
3036:001 | DONE ctl | em  8 16 |        |             |         .!a8
3037:000 | DONE lbl | em  8 16 | 005905 |             | erase_loop                           
3038:000 | DONE ins | em  8 16 | 005905 | 88          |                 dey                  
3039:000 | DONE ins | em  8 16 | 005906 | 30 04       |                 bmi 00590c           
3040:000 | DONE wsp | em  8 16 |        |             |
3041:000 | DONE ins | em  8 16 | 005908 | 91 1e       |                 sta.diy 00001e       
3042:000 | DONE ins | em  8 16 | 00590a | 80 f9       |                 bra 005905           
3043:000 | DONE wsp | em  8 16 |        |             |
3044:000 | DONE lbl | em  8 16 | 00590c |             | erase_done                           
3045:000 | DONE ins | em  8 16 | 00590c | c2 20       |                 rep 20               
3045:001 | DONE ctl | em 16 16 |        |             |         .!a16
3046:000 | DONE ins | em 16 16 | 00590e | b4 02       |                 ldy.dx 02            dump three elements off the sack
3047:000 | DONE ins | em 16 16 | 005910 | 8a          |                 txa                  
3048:000 | DONE ins | em 16 16 | 005911 | 18          |                 clc                  
3049:000 | DONE ins | em 16 16 | 005912 | 69 06 00    |                 adc.# 0006           
3050:000 | DONE ins | em 16 16 | 005915 | aa          |                 tax                  
3051:000 | DONE lbl | em 16 16 | 005916 |             | z_fill                               
3052:000 | DONE lbl | em 16 16 | 005916 |             | z_erase                              
3052:001 | DONE ins | em 16 16 | 005916 | 60          |                 rts                  
3053:000 | DONE wsp | em 16 16 |        |             |
3054:000 | DONE wsp | em 16 16 |        |             |
3055:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3056:000 | DONE cmt | em 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
3057:000 | DONE cmt | em 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
3058:000 | DONE cmt | em 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
3059:000 | DONE lbl | em 16 16 | 005917 |             | xt_evaluate                          
3060:000 | DONE cmt | em 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
3061:000 | DONE cmt | em 16 16 |        |             |                 ; >IN to the Return Stack
3062:000 | DONE ins | em 16 16 | 005917 | a5 0c       |                 lda.d 00000c         >IN
3063:000 | DONE ins | em 16 16 | 005919 | 48          |                 pha                  
3064:000 | DONE ins | em 16 16 | 00591a | a5 06       |                 lda.d 000006         Input Source (SOURCE-ID)
3065:000 | DONE ins | em 16 16 | 00591c | 48          |                 pha                  
3066:000 | DONE ins | em 16 16 | 00591d | a5 08       |                 lda.d 000008         
3067:000 | DONE ins | em 16 16 | 00591f | 48          |                 pha                  
3068:000 | DONE ins | em 16 16 | 005920 | a5 0a       |                 lda.d 00000a         
3069:000 | DONE ins | em 16 16 | 005922 | 48          |                 pha                  
3070:000 | DONE wsp | em 16 16 |        |             |
3071:000 | DONE cmt | em 16 16 |        |             |                 ; set SOURCE-ID to -1
3072:000 | DONE ins | em 16 16 | 005923 | a9 ff ff    |                 lda.# 0ffff          
3073:000 | DONE ins | em 16 16 | 005926 | 85 06       |                 sta.d 000006         
3074:000 | DONE wsp | em 16 16 |        |             |
3075:000 | DONE cmt | em 16 16 |        |             |                 ; set >IN to zero
3076:000 | DONE ins | em 16 16 | 005928 | 64 0c       |                 stz.d 00000c         
3077:000 | DONE wsp | em 16 16 |        |             |
3078:000 | DONE cmt | em 16 16 |        |             |                 ; move TOS and NOS to input buffers
3079:000 | DONE ins | em 16 16 | 00592a | 84 0a       |                 sty.d 00000a         
3080:000 | DONE ins | em 16 16 | 00592c | b5 00       |                 lda.dx 00            
3081:000 | DONE ins | em 16 16 | 00592e | 85 08       |                 sta.d 000008         
3082:000 | DONE wsp | em 16 16 |        |             |
3083:000 | DONE cmt | em 16 16 |        |             |                 ; dump address string from stack
3084:000 | DONE ins | em 16 16 | 005930 | b4 02       |                 ldy.dx 02            
3085:000 | DONE ins | em 16 16 | 005932 | e8          |                 inx                  
3086:000 | DONE ins | em 16 16 | 005933 | e8          |                 inx                  
3087:000 | DONE ins | em 16 16 | 005934 | e8          |                 inx                  
3088:000 | DONE ins | em 16 16 | 005935 | e8          |                 inx                  
3089:000 | DONE wsp | em 16 16 |        |             |
3090:000 | DONE ins | em 16 16 | 005936 | 20 eb 69    |                 jsr 0069eb           
3091:000 | DONE wsp | em 16 16 |        |             |
3092:000 | DONE cmt | em 16 16 |        |             |                 ; restore state from before evaluate
3093:000 | DONE ins | em 16 16 | 005939 | 68          |                 pla                  
3094:000 | DONE ins | em 16 16 | 00593a | 85 0a       |                 sta.d 00000a         
3095:000 | DONE ins | em 16 16 | 00593c | 68          |                 pla                  
3096:000 | DONE ins | em 16 16 | 00593d | 85 08       |                 sta.d 000008         
3097:000 | DONE ins | em 16 16 | 00593f | 68          |                 pla                  
3098:000 | DONE ins | em 16 16 | 005940 | 85 06       |                 sta.d 000006         
3099:000 | DONE ins | em 16 16 | 005942 | 68          |                 pla                  
3100:000 | DONE ins | em 16 16 | 005943 | 85 0c       |                 sta.d 00000c         
3101:000 | DONE wsp | em 16 16 |        |             |
3102:000 | DONE lbl | em 16 16 | 005945 |             | z_evaluate                           
3102:001 | DONE ins | em 16 16 | 005945 | 60          |                 rts                  
3103:000 | DONE wsp | em 16 16 |        |             |
3104:000 | DONE wsp | em 16 16 |        |             |
3105:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3106:000 | DONE cmt | em 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
3107:000 | DONE cmt | em 16 16 |        |             | ; Run a word with help of its xt on the TOS
3108:000 | DONE wsp | em 16 16 |        |             |
3109:000 | DONE cmt | em 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
3110:000 | DONE cmt | em 16 16 |        |             | ; range
3111:000 | DONE cmt | em 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
3112:000 | DONE lbl | em 16 16 | 005946 |             | execute_ip                           
3112:001 | DONE dir | em 16 16 | 005946 | (3 bytes)   |         .byte 00, 00, 00             
3112:001 | DONE dir | em 16 16 |        |             |                 00 00 00                 --  . . .
3113:000 | DONE wsp | em 16 16 |        |             |
3114:000 | DONE lbl | em 16 16 | 005949 |             | xt_execute                           
3115:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3116:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3117:000 | DONE cmt | em 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
3118:000 | DONE ins | em 16 16 | 005949 | 8c 46 59    |                 sty 005946           
3119:000 | DONE ins | em 16 16 | 00594c | b4 00       |                 ldy.dx 00            
3120:000 | DONE ins | em 16 16 | 00594e | e8          |                 inx                  
3121:000 | DONE ins | em 16 16 | 00594f | e8          |                 inx                  
3122:000 | DONE wsp | em 16 16 |        |             |
3123:000 | DONE cmt | em 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
3124:000 | DONE cmt | em 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
3125:000 | DONE cmt | em 16 16 |        |             |                 ; the original caller of this routine without us having to muck
3126:000 | DONE cmt | em 16 16 |        |             |                 ; about with the Return Stack.
3127:000 | DONE ins | em 16 16 | 005950 | 6c 46 59    |                 jmp.i 005946         JMP (EXECUTE_IP)
3128:000 | DONE wsp | em 16 16 |        |             |
3129:000 | DONE lbl | em 16 16 | 005953 |             | z_execute                            ; empty, no RTS required
3130:000 | DONE wsp | em 16 16 |        |             |
3131:000 | DONE wsp | em 16 16 |        |             |
3132:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3133:000 | DONE cmt | em 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
3134:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
3135:000 | DONE cmt | em 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
3136:000 | DONE cmt | em 16 16 |        |             | ; xt_false/z_false
3137:000 | DONE wsp | em 16 16 |        |             |
3138:000 | DONE wsp | em 16 16 |        |             |
3139:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3140:000 | DONE cmt | em 16 16 |        |             | ; FIND ( cs-addr -- addr 0 | xt 1 | xt -1 ) X bytes / X cycles
3141:000 | DONE cmt | em 16 16 |        |             | ; Find word in Dictionary. Included for backwards compatibility, Liara Forth
3142:000 | DONE cmt | em 16 16 |        |             | ; follows Gforth by replacing this with FIND-NAME. Counted string either returns
3143:000 | DONE cmt | em 16 16 |        |             | ; address with a fail flag if not found in the Dictionary, or the xt with a flag
3144:000 | DONE cmt | em 16 16 |        |             | ; to indicate if this is immediate or not. FIND is a wrapper around FIND-NAME.
3145:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
3146:000 | DONE cmt | em 16 16 |        |             | ; and https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3147:000 | DONE cmt | em 16 16 |        |             | ; for better solutions.
3148:000 | DONE lbl | em 16 16 | 005953 |             | xt_find                              
3149:000 | DONE cmt | em 16 16 |        |             |                 ; Convert counted string address to modern format
3150:000 | DONE ins | em 16 16 | 005953 | 20 4c 57    |                 jsr 00574c           ( addr u )
3151:000 | DONE wsp | em 16 16 |        |             |
3152:000 | DONE cmt | em 16 16 |        |             |                 ; Save address in case the conversion fails
3153:000 | DONE ins | em 16 16 | 005956 | b5 00       |                 lda.dx 00            
3154:000 | DONE ins | em 16 16 | 005958 | 48          |                 pha                  
3155:000 | DONE wsp | em 16 16 |        |             |
3156:000 | DONE ins | em 16 16 | 005959 | 20 84 59    |                 jsr 005984           ( nt | 0 )
3157:000 | DONE wsp | em 16 16 |        |             |
3158:000 | DONE ins | em 16 16 | 00595c | 98          |                 tya                  force flag check
3159:000 | DONE ins | em 16 16 | 00595d | d0 0a       |                 bne 005969           
3160:000 | DONE wsp | em 16 16 |        |             |
3161:000 | DONE cmt | em 16 16 |        |             |                 ; No word found. Return the address of the string, leaving 0 as
3162:000 | DONE cmt | em 16 16 |        |             |                 ; a false flag TOS
3163:000 | DONE ins | em 16 16 | 00595f | ca          |                 dex                  ( <?> 0 )
3164:000 | DONE ins | em 16 16 | 005960 | ca          |                 dex                  
3165:000 | DONE ins | em 16 16 | 005961 | a0 00 00    |                 ldy.# 0000           
3166:000 | DONE ins | em 16 16 | 005964 | 68          |                 pla                  
3167:000 | DONE ins | em 16 16 | 005965 | 95 00       |                 sta.dx 00            ( addr 0 )
3168:000 | DONE ins | em 16 16 | 005967 | 80 1a       |                 bra 005983           
3169:000 | DONE wsp | em 16 16 |        |             |
3170:000 | DONE lbl | em 16 16 | 005969 |             | find_found                           
3171:000 | DONE cmt | em 16 16 |        |             |                 ; We have a nt. Now we have to convert it to the format that
3172:000 | DONE cmt | em 16 16 |        |             |                 ; FIND wants to return Arrive here with ( nt )
3173:000 | DONE ins | em 16 16 | 005969 | 68          |                 pla                  we won't need the address after all
3174:000 | DONE wsp | em 16 16 |        |             |
3175:000 | DONE cmt | em 16 16 |        |             |                 ; We will need the nt later
3176:000 | DONE ins | em 16 16 | 00596a | 5a          |                 phy                  
3177:000 | DONE wsp | em 16 16 |        |             |
3178:000 | DONE ins | em 16 16 | 00596b | 20 8b 5b    |                 jsr 005b8b           ( nt -- xt )
3179:000 | DONE ins | em 16 16 | 00596e | ca          |                 dex                  
3180:000 | DONE ins | em 16 16 | 00596f | ca          |                 dex                  
3181:000 | DONE ins | em 16 16 | 005970 | 94 00       |                 sty.dx 00            ( xt <?> )
3182:000 | DONE wsp | em 16 16 |        |             |
3183:000 | DONE cmt | em 16 16 |        |             |                 ; If immediate, return 1 (not: zero), else return -1
3184:000 | DONE ins | em 16 16 | 005972 | 7a          |                 ply                  get nt back
3185:000 | DONE ins | em 16 16 | 005973 | b9 00 00    |                 lda.y 0000           
3186:000 | DONE ins | em 16 16 | 005976 | a0 00 00    |                 ldy.# 0000           prepare flag
3187:000 | DONE wsp | em 16 16 |        |             |
3188:000 | DONE ins | em 16 16 | 005979 | eb          |                 xba                  flags are MSB
3189:000 | DONE ins | em 16 16 | 00597a | 29 04 00    |                 and.# IM             Mask all but IM bit
3190:000 | DONE wsp | em 16 16 |        |             |
3191:000 | DONE ins | em 16 16 | 00597d | d0 03       |                 bne 005982           IMMEDIATE word, return 1
3192:000 | DONE ins | em 16 16 | 00597f | 88          |                 dey                  not emmediate, return -1
3193:000 | DONE ins | em 16 16 | 005980 | 80 01       |                 bra 005983           
3194:000 | DONE wsp | em 16 16 |        |             |
3195:000 | DONE lbl | em 16 16 | 005982 |             | find_imm                             
3196:000 | DONE ins | em 16 16 | 005982 | c8          |                 iny                  
3197:000 | DONE wsp | em 16 16 |        |             |
3198:000 | DONE lbl | em 16 16 | 005983 |             | z_find                               
3198:001 | DONE ins | em 16 16 | 005983 | 60          |                 rts                  
3199:000 | DONE wsp | em 16 16 |        |             |
3200:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3201:000 | DONE cmt | em 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
3202:000 | DONE cmt | em 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
3203:000 | DONE cmt | em 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
3204:000 | DONE cmt | em 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
3205:000 | DONE cmt | em 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
3206:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3207:000 | DONE cmt | em 16 16 |        |             | ; FIND calls this word for the hard word
3208:000 | DONE lbl | em 16 16 | 005984 |             | xt_find-name                         
3209:000 | DONE cmt | em 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
3210:000 | DONE cmt | em 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
3211:000 | DONE cmt | em 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
3212:000 | DONE cmt | em 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
3213:000 | DONE cmt | em 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
3214:000 | DONE cmt | em 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
3215:000 | DONE cmt | em 16 16 |        |             |                 ;       tya                     ; force flag check
3216:000 | DONE cmt | em 16 16 |        |             |                 ;       beq find-name_failure
3217:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3218:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3219:000 | DONE cmt | em 16 16 |        |             |                 ; set up loop for the first time
3220:000 | DONE ins | em 16 16 | 005984 | 84 24       |                 sty.d 000024         length of mystery string in tmptos, Y now free
3221:000 | DONE wsp | em 16 16 |        |             |
3222:000 | DONE ins | em 16 16 | 005986 | a4 02       |                 ldy.d 000002         
3223:000 | DONE ins | em 16 16 | 005988 | 84 1c       |                 sty.d 00001c         nt of first Dictionary word
3224:000 | DONE wsp | em 16 16 |        |             |
3225:000 | DONE ins | em 16 16 | 00598a | b4 00       |                 ldy.dx 00            
3226:000 | DONE ins | em 16 16 | 00598c | 84 1e       |                 sty.d 00001e         address of mystery string, was NOS
3227:000 | DONE wsp | em 16 16 |        |             |
3228:000 | DONE lbl | em 16 16 | 00598e |             | find-name_loop                       
3229:000 | DONE cmt | em 16 16 |        |             |                 ; First quick test: Are strings the same length?
3230:000 | DONE ins | em 16 16 | 00598e | b2 1c       |                 lda.di 00001c        LSB in first header word is length
3231:000 | DONE ins | em 16 16 | 005990 | 29 ff 00    |                 and.# 00ff           
3232:000 | DONE ins | em 16 16 | 005993 | c5 24       |                 cmp.d 000024         we test LSB
3233:000 | DONE cmt | em 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
3234:000 | DONE cmt | em 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
3235:000 | DONE cmt | em 16 16 |        |             |                 ; same
3236:000 | DONE ins | em 16 16 | 005995 | f0 0c       |                 beq 0059a3           
3237:000 | DONE wsp | em 16 16 |        |             |
3238:000 | DONE lbl | em 16 16 | 005997 |             | find-name_next_entry                 
3239:000 | DONE cmt | em 16 16 |        |             |                 ; next header address is two bytes down
3240:000 | DONE ins | em 16 16 | 005997 | e6 1c       |                 inc.d 00001c         
3241:000 | DONE ins | em 16 16 | 005999 | e6 1c       |                 inc.d 00001c         
3242:000 | DONE ins | em 16 16 | 00599b | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3243:000 | DONE wsp | em 16 16 |        |             |
3244:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3245:000 | DONE ins | em 16 16 | 00599d | f0 36       |                 beq 0059d5           
3246:000 | DONE wsp | em 16 16 |        |             |
3247:000 | DONE ins | em 16 16 | 00599f | 85 1c       |                 sta.d 00001c         new header
3248:000 | DONE ins | em 16 16 | 0059a1 | 80 eb       |                 bra 00598e           
3249:000 | DONE wsp | em 16 16 |        |             |
3250:000 | DONE lbl | em 16 16 | 0059a3 |             | find-name_chars                      
3251:000 | DONE cmt | em 16 16 |        |             |                 ; Yes, same length, so we compare characters
3252:000 | DONE wsp | em 16 16 |        |             |
3253:000 | DONE cmt | em 16 16 |        |             |                 ; Switch A to 8 bit for this
3254:000 | DONE ins | em 16 16 | 0059a3 | e2 20       |                 sep 20               
3254:001 | DONE ctl | em  8 16 |        |             |         .!a8
3255:000 | DONE cmt | em  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
3256:000 | DONE cmt | em  8 16 |        |             |                 ; header
3257:000 | DONE ins | em  8 16 | 0059a5 | a0 08 00    |                 ldy.# 0008           
3258:000 | DONE ins | em  8 16 | 0059a8 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - first char of entry
3259:000 | DONE ins | em  8 16 | 0059aa | d2 1e       |                 cmp.di 00001e        CMP (TMP2) - first char of mystery string
3260:000 | DONE ins | em  8 16 | 0059ac | f0 04       |                 beq 0059b2           
3261:000 | DONE wsp | em  8 16 |        |             |
3262:000 | DONE lbl | em  8 16 | 0059ae |             | find-name_char_nomatcnt_8            
3263:000 | DONE cmt | em  8 16 |        |             |                 ; First char is not the same, next entry
3264:000 | DONE ins | em  8 16 | 0059ae | c2 20       |                 rep 20               
3264:001 | DONE ctl | em 16 16 |        |             |         .!a16
3265:000 | DONE ins | em 16 16 | 0059b0 | 80 e5       |                 bra 005997           
3266:000 | DONE wsp | em 16 16 |        |             |
3267:000 | DONE lbl | em 16 16 | 0059b2 |             | find-name_all_chars                  
3268:000 | DONE dir | em  8 16 |        |             |         .!a8                         
3269:000 | DONE cmt | em  8 16 |        |             |                 ; String length is the same, and the first character is the
3270:000 | DONE cmt | em  8 16 |        |             |                 ; same. If the word is only one character long, we're done
3271:000 | DONE ins | em  8 16 | 0059b2 | a4 24       |                 ldy.d 000024         
3272:000 | DONE ins | em  8 16 | 0059b4 | 88          |                 dey                  faster and shorter than CPY.# 01
3273:000 | DONE ins | em  8 16 | 0059b5 | f0 18       |                 beq 0059cf           
3274:000 | DONE wsp | em  8 16 |        |             |
3275:000 | DONE cmt | em  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
3276:000 | DONE cmt | em  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
3277:000 | DONE cmt | em  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
3278:000 | DONE cmt | em  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
3279:000 | DONE cmt | em  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
3280:000 | DONE cmt | em  8 16 |        |             |                 ; we've already compared the first char.
3281:000 | DONE wsp | em  8 16 |        |             |
3282:000 | DONE cmt | em  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
3283:000 | DONE cmt | em  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
3284:000 | DONE cmt | em  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
3285:000 | DONE cmt | em  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
3286:000 | DONE ins | em  8 16 | 0059b7 | c2 20       |                 rep 20               
3286:001 | DONE ctl | em 16 16 |        |             |         .!a16
3287:000 | DONE ins | em 16 16 | 0059b9 | a5 1c       |                 lda.d 00001c         address of Dictionary string
3288:000 | DONE ins | em 16 16 | 0059bb | 18          |                 clc                  
3289:000 | DONE ins | em 16 16 | 0059bc | 69 08 00    |                 adc.# 0008           
3290:000 | DONE ins | em 16 16 | 0059bf | 85 20       |                 sta.d 000020         
3291:000 | DONE ins | em 16 16 | 0059c1 | e2 20       |                 sep 20               
3291:001 | DONE ctl | em  8 16 |        |             |         .!a8
3292:000 | DONE ins | em  8 16 | 0059c3 | a4 24       |                 ldy.d 000024         get length of strings as loop index
3293:000 | DONE ins | em  8 16 | 0059c5 | 88          |                 dey                  first index is length minus 1
3294:000 | DONE wsp | em  8 16 |        |             |
3295:000 | DONE lbl | em  8 16 | 0059c6 |             | @                                    
3296:000 | DONE ins | em  8 16 | 0059c6 | b1 1e       |                 lda.diy 00001e       LDA (TMP2),Y - last char of mystery string
3297:000 | DONE ins | em  8 16 | 0059c8 | d1 20       |                 cmp.diy 000020       CMP (TMP1),Y - last char of DP string
3298:000 | DONE ins | em  8 16 | 0059ca | d0 e2       |                 bne 0059ae           
3299:000 | DONE ins | em  8 16 | 0059cc | 88          |                 dey                  start of string (Y=0) was already tested
3300:000 | DONE ins | em  8 16 | 0059cd | d0 f7       |                 bne 0059c6           
3301:000 | DONE wsp | em  8 16 |        |             |
3302:000 | DONE lbl | em  8 16 | 0059cf |             | find-name_success                    
3303:000 | DONE cmt | em  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
3304:000 | DONE cmt | em  8 16 |        |             |                 ; We get here with an 8 bit A
3305:000 | DONE ins | em  8 16 | 0059cf | c2 20       |                 rep 20               
3305:001 | DONE ctl | em 16 16 |        |             |         .!a16
3306:000 | DONE ins | em 16 16 | 0059d1 | a4 1c       |                 ldy.d 00001c         get the correct DP
3307:000 | DONE ins | em 16 16 | 0059d3 | 80 03       |                 bra 0059d8           
3308:000 | DONE wsp | em 16 16 |        |             |
3309:000 | DONE wsp | em 16 16 |        |             |
3310:000 | DONE lbl | em 16 16 | 0059d5 |             | find-name_failure_16                 
3311:000 | DONE cmt | em 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
3312:000 | DONE cmt | em 16 16 |        |             |                 ; bit
3313:000 | DONE ins | em 16 16 | 0059d5 | a0 00 00    |                 ldy.# 0000           fall thru
3314:000 | DONE wsp | em 16 16 |        |             |
3315:000 | DONE lbl | em 16 16 | 0059d8 |             | find-name_done                       
3316:000 | DONE ins | em 16 16 | 0059d8 | e8          |                 inx                  drop old address (NIP)
3317:000 | DONE ins | em 16 16 | 0059d9 | e8          |                 inx                  
3318:000 | DONE wsp | em 16 16 |        |             |
3319:000 | DONE lbl | em 16 16 | 0059da |             | z_find-name                          
3319:001 | DONE ins | em 16 16 | 0059da | 60          |                 rts                  
3320:000 | DONE wsp | em 16 16 |        |             |
3321:000 | DONE wsp | em 16 16 |        |             |
3322:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3323:000 | DONE cmt | em 16 16 |        |             | ; FM/MOD ( d n1 -- n2 n3 ) X bytes / X cycles
3324:000 | DONE cmt | em 16 16 |        |             | ; Floored division, compare with SM/REM. We define FM/MOD in terms of UM/MOD,
3325:000 | DONE cmt | em 16 16 |        |             | ; see http://git.savannah.gnu.org/cgit/gforth.git/tree/prim We prefer to use
3326:000 | DONE cmt | em 16 16 |        |             | ; SM/REM for further words. You could also define FM/MOD in Terms of SM/REM,
3327:000 | DONE cmt | em 16 16 |        |             | ; see http://www.figuk.plus.com/build/arith.htm
3328:000 | DONE cmt | em 16 16 |        |             | ; Original Forth: DUP >R DUP 0< IF NEGATE >R DNEGATE R> THEN >R DUP 0< R@ AND +
3329:000 | DONE cmt | em 16 16 |        |             | ; R> UM/MOD R> 0< IF SWAP NEGATE SWAP THEN ;
3330:000 | DONE cmt | em 16 16 |        |             | ; TODO this is just a 1:1 list of jumps, optimize once it is working
3331:000 | DONE lbl | em 16 16 | 0059db |             | xt_fmmod                             
3332:000 | DONE ins | em 16 16 | 0059db | 20 e7 58    |                 jsr 0058e7           
3333:000 | DONE ins | em 16 16 | 0059de | 20 bd 51    |                 jsr 0051bd           
3334:000 | DONE ins | em 16 16 | 0059e1 | 20 e7 58    |                 jsr 0058e7           
3335:000 | DONE wsp | em 16 16 |        |             |
3336:000 | DONE ins | em 16 16 | 0059e4 | 98          |                 tya                  0< IF
3337:000 | DONE ins | em 16 16 | 0059e5 | 10 12       |                 bpl 0059f9           
3338:000 | DONE wsp | em 16 16 |        |             |
3339:000 | DONE ins | em 16 16 | 0059e7 | b4 00       |                 ldy.dx 00            
3340:000 | DONE ins | em 16 16 | 0059e9 | e8          |                 inx                  
3341:000 | DONE ins | em 16 16 | 0059ea | e8          |                 inx                  
3342:000 | DONE wsp | em 16 16 |        |             |
3343:000 | DONE ins | em 16 16 | 0059eb | 20 ad 5b    |                 jsr 005bad           
3344:000 | DONE ins | em 16 16 | 0059ee | 20 bd 51    |                 jsr 0051bd           
3345:000 | DONE ins | em 16 16 | 0059f1 | 20 70 58    |                 jsr 005870           
3346:000 | DONE ins | em 16 16 | 0059f4 | 20 35 5d    |                 jsr 005d35           
3347:000 | DONE wsp | em 16 16 |        |             |
3348:000 | DONE ins | em 16 16 | 0059f7 | 80 04       |                 bra 0059fd           
3349:000 | DONE lbl | em 16 16 | 0059f9 |             | fmmod_1                              
3350:000 | DONE ins | em 16 16 | 0059f9 | b4 00       |                 ldy.dx 00            
3351:000 | DONE ins | em 16 16 | 0059fb | e8          |                 inx                  
3352:000 | DONE ins | em 16 16 | 0059fc | e8          |                 inx                  
3353:000 | DONE lbl | em 16 16 | 0059fd |             | fmmod_1_1                            
3354:000 | DONE ins | em 16 16 | 0059fd | 20 bd 51    |                 jsr 0051bd           
3355:000 | DONE ins | em 16 16 | 005a00 | 20 e7 58    |                 jsr 0058e7           
3356:000 | DONE ins | em 16 16 | 005a03 | 20 ac 53    |                 jsr 0053ac           
3357:000 | DONE ins | em 16 16 | 005a06 | 20 2c 5d    |                 jsr 005d2c           
3358:000 | DONE ins | em 16 16 | 005a09 | 20 8c 55    |                 jsr 00558c           
3359:000 | DONE ins | em 16 16 | 005a0c | 20 31 53    |                 jsr 005331           
3360:000 | DONE ins | em 16 16 | 005a0f | 20 35 5d    |                 jsr 005d35           
3361:000 | DONE ins | em 16 16 | 005a12 | 20 b1 5f    |                 jsr 005fb1           
3362:000 | DONE ins | em 16 16 | 005a15 | 20 35 5d    |                 jsr 005d35           
3363:000 | DONE wsp | em 16 16 |        |             |
3364:000 | DONE ins | em 16 16 | 005a18 | 98          |                 tya                  
3365:000 | DONE ins | em 16 16 | 005a19 | 10 0f       |                 bpl 005a2a           
3366:000 | DONE wsp | em 16 16 |        |             |
3367:000 | DONE ins | em 16 16 | 005a1b | b4 00       |                 ldy.dx 00            
3368:000 | DONE ins | em 16 16 | 005a1d | e8          |                 inx                  
3369:000 | DONE ins | em 16 16 | 005a1e | e8          |                 inx                  
3370:000 | DONE wsp | em 16 16 |        |             |
3371:000 | DONE ins | em 16 16 | 005a1f | 20 ea 5e    |                 jsr 005eea           
3372:000 | DONE ins | em 16 16 | 005a22 | 20 ad 5b    |                 jsr 005bad           
3373:000 | DONE ins | em 16 16 | 005a25 | 20 ea 5e    |                 jsr 005eea           
3374:000 | DONE wsp | em 16 16 |        |             |
3375:000 | DONE ins | em 16 16 | 005a28 | 80 04       |                 bra 005a2e           
3376:000 | DONE lbl | em 16 16 | 005a2a |             | fmmod_2                              
3377:000 | DONE wsp | em 16 16 |        |             |
3378:000 | DONE ins | em 16 16 | 005a2a | b4 00       |                 ldy.dx 00            
3379:000 | DONE ins | em 16 16 | 005a2c | e8          |                 inx                  
3380:000 | DONE ins | em 16 16 | 005a2d | e8          |                 inx                  
3381:000 | DONE wsp | em 16 16 |        |             |
3382:000 | DONE lbl | em 16 16 | 005a2e |             | fmmod_2_1                            
3383:000 | DONE wsp | em 16 16 |        |             |
3384:000 | DONE lbl | em 16 16 | 005a2e |             | z_fmmod                              
3384:001 | DONE ins | em 16 16 | 005a2e | 60          |                 rts                  
3385:000 | DONE wsp | em 16 16 |        |             |
3386:000 | DONE wsp | em 16 16 |        |             |
3387:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3388:000 | DONE cmt | em 16 16 |        |             | ; KEY ( -- char ) X bytes / X cycles
3389:000 | DONE cmt | em 16 16 |        |             | ; Get one character from the input, without echoing.
3390:000 | DONE lbl | em 16 16 | 005a2f |             | xt_key                               
3391:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3392:000 | DONE wsp | em 16 16 |        |             |
3393:000 | DONE ins | em 16 16 | 005a2f | ca          |                 dex                  make room on Data Stack
3394:000 | DONE ins | em 16 16 | 005a30 | ca          |                 dex                  
3395:000 | DONE ins | em 16 16 | 005a31 | b4 00       |                 ldy.dx 00            
3396:000 | DONE wsp | em 16 16 |        |             |
3397:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "jsr.i" instruction, so we have to do this the
3398:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3399:000 | DONE ins | em 16 16 | 005a33 | 86 22       |                 stx.d 000022         
3400:000 | DONE ins | em 16 16 | 005a35 | a2 00 00    |                 ldx.# 0000           
3401:000 | DONE ins | em 16 16 | 005a38 | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X) - returns char in A
3402:000 | DONE ins | em 16 16 | 005a3b | a6 22       |                 ldx.d 000022         
3403:000 | DONE wsp | em 16 16 |        |             |
3404:000 | DONE ins | em 16 16 | 005a3d | a8          |                 tay                  
3405:000 | DONE wsp | em 16 16 |        |             |
3406:000 | DONE lbl | em 16 16 | 005a3e |             | z_key                                
3406:001 | DONE ins | em 16 16 | 005a3e | 60          |                 rts                  
3407:000 | DONE wsp | em 16 16 |        |             |
3408:000 | DONE wsp | em 16 16 |        |             |
3409:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3410:000 | DONE cmt | em 16 16 |        |             | ; KEY? ( -- f ) X bytes / X cycles
3411:000 | DONE cmt | em 16 16 |        |             | ; See if there is a character waiting in the input buffer.
3412:000 | DONE lbl | em 16 16 | 005a3f |             | xt_keyq                              
3413:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3414:000 | DONE ins | em 16 16 | 005a3f | ca          |                 dex                  
3415:000 | DONE ins | em 16 16 | 005a40 | ca          |                 dex                  
3416:000 | DONE ins | em 16 16 | 005a41 | 94 00       |                 sty.dx 00            
3417:000 | DONE wsp | em 16 16 |        |             |
3418:000 | DONE ins | em 16 16 | 005a43 | a0 00 00    |                 ldy.# 0000           default FALSE
3419:000 | DONE wsp | em 16 16 |        |             |
3420:000 | DONE cmt | em 16 16 |        |             |                 ; have_chr sets the Carry Flag to 1 if there is a character
3421:000 | DONE cmt | em 16 16 |        |             |                 ; waiting, else to 0. A is destroyed
3422:000 | DONE ins | em 16 16 | 005a46 | 20 57 50    |                 jsr 005057           
3423:000 | DONE ins | em 16 16 | 005a49 | 90 01       |                 bcc 005a4c           
3424:000 | DONE wsp | em 16 16 |        |             |
3425:000 | DONE ins | em 16 16 | 005a4b | 88          |                 dey                  wrap for TRUE
3426:000 | DONE wsp | em 16 16 |        |             |
3427:000 | DONE lbl | em 16 16 | 005a4c |             | z_keyq                               
3427:001 | DONE ins | em 16 16 | 005a4c | 60          |                 rts                  
3428:000 | DONE wsp | em 16 16 |        |             |
3429:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3430:000 | DONE cmt | em 16 16 |        |             | ; I ( -- n )(R: n -- n )  X bytes / X cycles
3431:000 | DONE cmt | em 16 16 |        |             | ; Copy loop counter (top of Return Stack) to Data Stack. This is not the same as
3432:000 | DONE cmt | em 16 16 |        |             | ; R@ because we use a fudge factor for loop control; see (DO) for more details.
3433:000 | DONE cmt | em 16 16 |        |             | ; Native compile for speed.
3434:000 | DONE lbl | em 16 16 | 005a4d |             | xt_i                                 
3435:000 | DONE ins | em 16 16 | 005a4d | ca          |                 dex                  
3436:000 | DONE ins | em 16 16 | 005a4e | ca          |                 dex                  
3437:000 | DONE ins | em 16 16 | 005a4f | 94 00       |                 sty.dx 00            
3438:000 | DONE wsp | em 16 16 |        |             |
3439:000 | DONE cmt | em 16 16 |        |             |                 ; get the fudged value of the Return Stack
3440:000 | DONE ins | em 16 16 | 005a51 | 38          |                 sec                  
3441:000 | DONE ins | em 16 16 | 005a52 | a3 01       |                 lda.s 01             
3442:000 | DONE ins | em 16 16 | 005a54 | e3 03       |                 sbc.s 03             
3443:000 | DONE wsp | em 16 16 |        |             |
3444:000 | DONE ins | em 16 16 | 005a56 | a8          |                 tay                  
3445:000 | DONE wsp | em 16 16 |        |             |
3446:000 | DONE lbl | em 16 16 | 005a57 |             | z_i                                  
3446:001 | DONE ins | em 16 16 | 005a57 | 60          |                 rts                  
3447:000 | DONE wsp | em 16 16 |        |             |
3448:000 | DONE wsp | em 16 16 |        |             |
3449:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3450:000 | DONE cmt | em 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
3451:000 | DONE cmt | em 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
3452:000 | DONE cmt | em 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
3453:000 | DONE cmt | em 16 16 |        |             | ; will have no effect and will fail without an error message
3454:000 | DONE lbl | em 16 16 | 005a58 |             | xt_immediate                         
3455:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3456:000 | DONE ins | em 16 16 | 005a58 | a9 04 00    |                 lda.# IM             Immediate flag
3457:000 | DONE ins | em 16 16 | 005a5b | eb          |                 xba                  flags are MSB
3458:000 | DONE ins | em 16 16 | 005a5c | 12 02       |                 ora.di 000002        ORA (DP)
3459:000 | DONE ins | em 16 16 | 005a5e | 92 02       |                 sta.di 000002        
3460:000 | DONE wsp | em 16 16 |        |             |
3461:000 | DONE lbl | em 16 16 | 005a60 |             | z_immediate                          
3461:001 | DONE ins | em 16 16 | 005a60 | 60          |                 rts                  
3462:000 | DONE wsp | em 16 16 |        |             |
3463:000 | DONE wsp | em 16 16 |        |             |
3464:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3465:000 | DONE cmt | em 16 16 |        |             | ; INPUT ( -- addr ) X bytes / X cycles
3466:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump targeet for KEY is stored
3467:000 | DONE lbl | em 16 16 | 005a61 |             | xt_input                             
3468:000 | DONE ins | em 16 16 | 005a61 | ca          |                 dex                  
3469:000 | DONE ins | em 16 16 | 005a62 | ca          |                 dex                  
3470:000 | DONE ins | em 16 16 | 005a63 | 94 00       |                 sty.dx 00            
3471:000 | DONE wsp | em 16 16 |        |             |
3472:000 | DONE ins | em 16 16 | 005a65 | a0 10 00    |                 ldy.# 000010         
3473:000 | DONE wsp | em 16 16 |        |             |
3474:000 | DONE lbl | em 16 16 | 005a68 |             | z_input                              
3474:001 | DONE ins | em 16 16 | 005a68 | 60          |                 rts                  
3475:000 | DONE wsp | em 16 16 |        |             |
3476:000 | DONE wsp | em 16 16 |        |             |
3477:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3478:000 | DONE cmt | em 16 16 |        |             | ; INT>NAME ( xt -- nt ) X bytes / X cycles
3479:000 | DONE cmt | em 16 16 |        |             | ; Given an execution token (xt), return the name token (nt). This is called
3480:000 | DONE cmt | em 16 16 |        |             | ; >NAME in Gforth, but changed to INT>NAME for Liara to fit better with
3481:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT.
3482:000 | DONE lbl | em 16 16 | 005a69 |             | xt_int-name                          
3483:000 | DONE cmt | em 16 16 |        |             |                 ; Unfortunately, to find the header, we have to walk through the
3484:000 | DONE cmt | em 16 16 |        |             |                 ; dictionary
3485:000 | DONE ins | em 16 16 | 005a69 | a5 02       |                 lda.d 000002         nt of first Dictionary word
3486:000 | DONE ins | em 16 16 | 005a6b | 85 1c       |                 sta.d 00001c         
3487:000 | DONE wsp | em 16 16 |        |             |
3488:000 | DONE ins | em 16 16 | 005a6d | 84 24       |                 sty.d 000024         xt of mystery word
3489:000 | DONE ins | em 16 16 | 005a6f | a0 04 00    |                 ldy.# 0004           xt in header is two bytes down
3490:000 | DONE wsp | em 16 16 |        |             |
3491:000 | DONE lbl | em 16 16 | 005a72 |             | in_loop                              
3492:000 | DONE ins | em 16 16 | 005a72 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - get xt of current nt
3493:000 | DONE ins | em 16 16 | 005a74 | c5 24       |                 cmp.d 000024         
3494:000 | DONE ins | em 16 16 | 005a76 | f0 12       |                 beq 005a8a           
3495:000 | DONE wsp | em 16 16 |        |             |
3496:000 | DONE cmt | em 16 16 |        |             |                 ; no joy, next header address is two bytes down
3497:000 | DONE ins | em 16 16 | 005a78 | e6 1c       |                 inc.d 00001c         
3498:000 | DONE ins | em 16 16 | 005a7a | e6 1c       |                 inc.d 00001c         
3499:000 | DONE ins | em 16 16 | 005a7c | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3500:000 | DONE wsp | em 16 16 |        |             |
3501:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3502:000 | DONE ins | em 16 16 | 005a7e | f0 04       |                 beq 005a84           
3503:000 | DONE wsp | em 16 16 |        |             |
3504:000 | DONE ins | em 16 16 | 005a80 | 85 1c       |                 sta.d 00001c         new header
3505:000 | DONE ins | em 16 16 | 005a82 | 80 ee       |                 bra 005a72           
3506:000 | DONE wsp | em 16 16 |        |             |
3507:000 | DONE lbl | em 16 16 | 005a84 |             | in_notfound                          
3508:000 | DONE ins | em 16 16 | 005a84 | a9 e0 72    |                 lda.# 0072e0         
3509:000 | DONE ins | em 16 16 | 005a87 | 4c 70 6a    |                 jmp 006a70           
3510:000 | DONE wsp | em 16 16 |        |             |
3511:000 | DONE lbl | em 16 16 | 005a8a |             | in_found                             
3512:000 | DONE ins | em 16 16 | 005a8a | a4 1c       |                 ldy.d 00001c         replace xt by nt
3513:000 | DONE wsp | em 16 16 |        |             |
3514:000 | DONE lbl | em 16 16 | 005a8c |             | z_int-name                           
3514:001 | DONE ins | em 16 16 | 005a8c | 60          |                 rts                  
3515:000 | DONE wsp | em 16 16 |        |             |
3516:000 | DONE wsp | em 16 16 |        |             |
3517:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3518:000 | DONE cmt | em 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
3519:000 | DONE cmt | em 16 16 |        |             | ; Complement of TOS
3520:000 | DONE lbl | em 16 16 | 005a8d |             | xt_invert                            
3521:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3522:000 | DONE ins | em 16 16 | 005a8d | 98          |                 tya                  
3523:000 | DONE ins | em 16 16 | 005a8e | 49 ff ff    |                 eor.# 0ffff          
3524:000 | DONE ins | em 16 16 | 005a91 | a8          |                 tay                  
3525:000 | DONE wsp | em 16 16 |        |             |
3526:000 | DONE lbl | em 16 16 | 005a92 |             | z_invert                             
3526:001 | DONE ins | em 16 16 | 005a92 | 60          |                 rts                  
3527:000 | DONE wsp | em 16 16 |        |             |
3528:000 | DONE wsp | em 16 16 |        |             |
3529:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3530:000 | DONE cmt | em 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
3531:000 | DONE cmt | em 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
3532:000 | DONE lbl | em 16 16 | 005a93 |             | xt_here                              
3533:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3534:000 | DONE ins | em 16 16 | 005a93 | ca          |                 dex                  
3535:000 | DONE ins | em 16 16 | 005a94 | ca          |                 dex                  
3536:000 | DONE ins | em 16 16 | 005a95 | 94 00       |                 sty.dx 00            
3537:000 | DONE wsp | em 16 16 |        |             |
3538:000 | DONE ins | em 16 16 | 005a97 | a4 00       |                 ldy.d 000000         
3539:000 | DONE wsp | em 16 16 |        |             |
3540:000 | DONE lbl | em 16 16 | 005a99 |             | z_here                               
3540:001 | DONE ins | em 16 16 | 005a99 | 60          |                 rts                  
3541:000 | DONE wsp | em 16 16 |        |             |
3542:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3543:000 | DONE cmt | em 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
3544:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 16
3545:000 | DONE lbl | em 16 16 | 005a9a |             | xt_hex                               
3546:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3547:000 | DONE ins | em 16 16 | 005a9a | a9 10 00    |                 lda.# 0010           
3548:000 | DONE ins | em 16 16 | 005a9d | 85 16       |                 sta.d 000016         
3549:000 | DONE wsp | em 16 16 |        |             |
3550:000 | DONE lbl | em 16 16 | 005a9f |             | z_hex                                
3550:001 | DONE ins | em 16 16 | 005a9f | 60          |                 rts                  
3551:000 | DONE wsp | em 16 16 |        |             |
3552:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3553:000 | DONE cmt | em 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
3554:000 | DONE cmt | em 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
3555:000 | DONE cmt | em 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
3556:000 | DONE cmt | em 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
3557:000 | DONE cmt | em 16 16 |        |             | ; tohold instead of HLD.
3558:000 | DONE lbl | em 16 16 | 005aa0 |             | xt_hold                              
3559:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3560:000 | DONE ins | em 16 16 | 005aa0 | c6 18       |                 dec.d 000018         -1 HLD +!
3561:000 | DONE wsp | em 16 16 |        |             |
3562:000 | DONE ins | em 16 16 | 005aa2 | 98          |                 tya                  
3563:000 | DONE ins | em 16 16 | 005aa3 | e2 20       |                 sep 20               
3563:001 | DONE ctl | em  8 16 |        |             |         .!a8
3564:000 | DONE ins | em  8 16 | 005aa5 | 92 18       |                 sta.di 000018        STA (TOHOLD)
3565:000 | DONE ins | em  8 16 | 005aa7 | c2 20       |                 rep 20               
3565:001 | DONE ctl | em 16 16 |        |             |         .!a16
3566:000 | DONE ins | em 16 16 | 005aa9 | b4 00       |                 ldy.dx 00            
3567:000 | DONE ins | em 16 16 | 005aab | e8          |                 inx                  
3568:000 | DONE ins | em 16 16 | 005aac | e8          |                 inx                  
3569:000 | DONE wsp | em 16 16 |        |             |
3570:000 | DONE lbl | em 16 16 | 005aad |             | z_hold                               
3570:001 | DONE ins | em 16 16 | 005aad | 60          |                 rts                  
3571:000 | DONE wsp | em 16 16 |        |             |
3572:000 | DONE wsp | em 16 16 |        |             |
3573:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3574:000 | DONE cmt | em 16 16 |        |             | ; J ( -- n )(R: n -- n )  X bytes / X cycles
3575:000 | DONE cmt | em 16 16 |        |             | ; Copy loop counter (top of Return Stack) to Data Stack. This is not the same as
3576:000 | DONE cmt | em 16 16 |        |             | ; R@ because we use a fudge factor for loop control; see (DO) for more details.
3577:000 | DONE cmt | em 16 16 |        |             | ; Native compile for speed.
3578:000 | DONE lbl | em 16 16 | 005aae |             | xt_j                                 
3579:000 | DONE ins | em 16 16 | 005aae | ca          |                 dex                  
3580:000 | DONE ins | em 16 16 | 005aaf | ca          |                 dex                  
3581:000 | DONE ins | em 16 16 | 005ab0 | 94 00       |                 sty.dx 00            
3582:000 | DONE wsp | em 16 16 |        |             |
3583:000 | DONE cmt | em 16 16 |        |             |                 ; get the fudged value of the Return Stack
3584:000 | DONE ins | em 16 16 | 005ab2 | 38          |                 sec                  
3585:000 | DONE ins | em 16 16 | 005ab3 | a3 07       |                 lda.s 07             
3586:000 | DONE ins | em 16 16 | 005ab5 | e3 09       |                 sbc.s 09             
3587:000 | DONE wsp | em 16 16 |        |             |
3588:000 | DONE ins | em 16 16 | 005ab7 | a8          |                 tay                  
3589:000 | DONE wsp | em 16 16 |        |             |
3590:000 | DONE lbl | em 16 16 | 005ab8 |             | z_j                                  
3590:001 | DONE ins | em 16 16 | 005ab8 | 60          |                 rts                  
3591:000 | DONE wsp | em 16 16 |        |             |
3592:000 | DONE wsp | em 16 16 |        |             |
3593:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3594:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
3595:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
3596:000 | DONE cmt | em 16 16 |        |             | ; version of this word is called LATEST.
3597:000 | DONE lbl | em 16 16 | 005ab9 |             | xt_latestnt                          
3598:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3599:000 | DONE ins | em 16 16 | 005ab9 | ca          |                 dex                  make room on Data Stack
3600:000 | DONE ins | em 16 16 | 005aba | ca          |                 dex                  
3601:000 | DONE ins | em 16 16 | 005abb | 94 00       |                 sty.dx 00            
3602:000 | DONE wsp | em 16 16 |        |             |
3603:000 | DONE ins | em 16 16 | 005abd | a5 02       |                 lda.d 000002         
3604:000 | DONE ins | em 16 16 | 005abf | a8          |                 tay                  
3605:000 | DONE wsp | em 16 16 |        |             |
3606:000 | DONE lbl | em 16 16 | 005ac0 |             | z_latestnt                           
3606:001 | DONE ins | em 16 16 | 005ac0 | 60          |                 rts                  
3607:000 | DONE wsp | em 16 16 |        |             |
3608:000 | DONE wsp | em 16 16 |        |             |
3609:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3610:000 | DONE cmt | em 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
3611:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
3612:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
3613:000 | DONE lbl | em 16 16 | 005ac1 |             | xt_latestxt                          
3614:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3615:000 | DONE ins | em 16 16 | 005ac1 | ca          |                 dex                  make room on Data Stack
3616:000 | DONE ins | em 16 16 | 005ac2 | ca          |                 dex                  
3617:000 | DONE ins | em 16 16 | 005ac3 | 94 00       |                 sty.dx 00            
3618:000 | DONE wsp | em 16 16 |        |             |
3619:000 | DONE ins | em 16 16 | 005ac5 | a5 02       |                 lda.d 000002         
3620:000 | DONE wsp | em 16 16 |        |             |
3621:000 | DONE ins | em 16 16 | 005ac7 | 18          |                 clc                  xt is stored four bytes below nt in header
3622:000 | DONE ins | em 16 16 | 005ac8 | 69 04 00    |                 adc.# 0004           
3623:000 | DONE ins | em 16 16 | 005acb | a8          |                 tay                  
3624:000 | DONE wsp | em 16 16 |        |             |
3625:000 | DONE ins | em 16 16 | 005acc | b9 00 00    |                 lda.y 0000           FETCH
3626:000 | DONE ins | em 16 16 | 005acf | a8          |                 tay                  
3627:000 | DONE wsp | em 16 16 |        |             |
3628:000 | DONE lbl | em 16 16 | 005ad0 |             | z_latestxt                           
3628:001 | DONE ins | em 16 16 | 005ad0 | 60          |                 rts                  
3629:000 | DONE wsp | em 16 16 |        |             |
3630:000 | DONE wsp | em 16 16 |        |             |
3631:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3632:000 | DONE cmt | em 16 16 |        |             | ; LEAVE ( -- ) X bytes / X cycles
3633:000 | DONE cmt | em 16 16 |        |             | ; Leave DO/LOOP construct. Note that this does not work with anything but
3634:000 | DONE cmt | em 16 16 |        |             | ; a DO/LOOP in contrast to other versions such as discussed at
3635:000 | DONE cmt | em 16 16 |        |             | ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
3636:000 | DONE cmt | em 16 16 |        |             | ; ": LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY"
3637:000 | DONE cmt | em 16 16 |        |             | ; See loops.txt on details of how this works. This must be native compile and not
3638:000 | DONE cmt | em 16 16 |        |             | ; IMMEDIATE
3639:000 | DONE lbl | em 16 16 | 005ad1 |             | xt_leave                             
3640:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3641:000 | DONE cmt | em 16 16 |        |             |                 ; drop limit/start entries off the Return Stack
3642:000 | DONE ins | em 16 16 | 005ad1 | 68          |                 pla                  
3643:000 | DONE ins | em 16 16 | 005ad2 | 68          |                 pla                  
3644:000 | DONE wsp | em 16 16 |        |             |
3645:000 | DONE cmt | em 16 16 |        |             |                 ; We now have the LEAVE special return address on the top of the
3646:000 | DONE cmt | em 16 16 |        |             |                 ; Return Stack. This RTS must come before z_leave so native
3647:000 | DONE cmt | em 16 16 |        |             |                 ; compiling doesn't ignore it
3648:000 | DONE ins | em 16 16 | 005ad3 | 60          |                 rts                  
3649:000 | DONE wsp | em 16 16 |        |             |
3650:000 | DONE lbl | em 16 16 | 005ad4 |             | z_leave                              ; not reached
3651:000 | DONE wsp | em 16 16 |        |             |
3652:000 | DONE wsp | em 16 16 |        |             |
3653:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3654:000 | DONE cmt | em 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
3655:000 | DONE cmt | em 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
3656:000 | DONE cmt | em 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
3657:000 | DONE cmt | em 16 16 |        |             | ; for instance
3658:000 | DONE lbl | em 16 16 | 005ad4 |             | xt_literal                           
3659:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
3660:000 | DONE cmt | em 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
3661:000 | DONE ins | em 16 16 | 005ad4 | f4 e6 5a    |                 phe.# 005ae6         PEA LITERAL_RT
3662:000 | DONE ins | em 16 16 | 005ad7 | 20 4f 6a    |                 jsr 006a4f           
3663:000 | DONE wsp | em 16 16 |        |             |
3664:000 | DONE cmt | em 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
3665:000 | DONE cmt | em 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
3666:000 | DONE cmt | em 16 16 |        |             |                 ; way. This is basically , ("comma")
3667:000 | DONE ins | em 16 16 | 005ada | 98          |                 tya                  
3668:000 | DONE ins | em 16 16 | 005adb | 92 00       |                 sta.di 000000        
3669:000 | DONE ins | em 16 16 | 005add | e6 00       |                 inc.d 000000         
3670:000 | DONE ins | em 16 16 | 005adf | e6 00       |                 inc.d 000000         
3671:000 | DONE wsp | em 16 16 |        |             |
3672:000 | DONE ins | em 16 16 | 005ae1 | b4 00       |                 ldy.dx 00            DROP
3673:000 | DONE ins | em 16 16 | 005ae3 | e8          |                 inx                  
3674:000 | DONE ins | em 16 16 | 005ae4 | e8          |                 inx                  
3675:000 | DONE wsp | em 16 16 |        |             |
3676:000 | DONE lbl | em 16 16 | 005ae5 |             | z_literal                            
3676:001 | DONE ins | em 16 16 | 005ae5 | 60          |                 rts                  
3677:000 | DONE wsp | em 16 16 |        |             |
3678:000 | DONE lbl | em 16 16 | 005ae6 |             | literal_rt                           
3679:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we push the value following this word
3680:000 | DONE cmt | em 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
3681:000 | DONE cmt | em 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
3682:000 | DONE cmt | em 16 16 |        |             |                 ; points to the data we need to get
3683:000 | DONE wsp | em 16 16 |        |             |
3684:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
3685:000 | DONE ins | em 16 16 | 005ae6 | ca          |                 dex                  
3686:000 | DONE ins | em 16 16 | 005ae7 | ca          |                 dex                  
3687:000 | DONE ins | em 16 16 | 005ae8 | 94 00       |                 sty.dx 00            
3688:000 | DONE wsp | em 16 16 |        |             |
3689:000 | DONE cmt | em 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
3690:000 | DONE cmt | em 16 16 |        |             |                 ; so we have to manipulate the address
3691:000 | DONE ins | em 16 16 | 005aea | 7a          |                 ply                  
3692:000 | DONE ins | em 16 16 | 005aeb | c8          |                 iny                  
3693:000 | DONE ins | em 16 16 | 005aec | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
3694:000 | DONE wsp | em 16 16 |        |             |
3695:000 | DONE ins | em 16 16 | 005aef | c8          |                 iny                  move return address past data and restore
3696:000 | DONE ins | em 16 16 | 005af0 | 5a          |                 phy                  so we can get back home
3697:000 | DONE wsp | em 16 16 |        |             |
3698:000 | DONE ins | em 16 16 | 005af1 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
3699:000 | DONE wsp | em 16 16 |        |             |
3700:000 | DONE ins | em 16 16 | 005af2 | 60          |                 rts                  
3701:000 | DONE wsp | em 16 16 |        |             |
3702:000 | DONE wsp | em 16 16 |        |             |
3703:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3704:000 | DONE cmt | em 16 16 |        |             | ; LSHIFT ( n u -- n ) X bytes / X cycles
3705:000 | DONE cmt | em 16 16 |        |             | ; Logically shift TOS u times to the left, adding zeros to the right
3706:000 | DONE lbl | em 16 16 | 005af3 |             | xt_lshift                            
3707:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
3708:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
3709:000 | DONE ins | em 16 16 | 005af3 | 98          |                 tya                  
3710:000 | DONE ins | em 16 16 | 005af4 | 29 0f 00    |                 and.# 000f           
3711:000 | DONE ins | em 16 16 | 005af7 | f0 09       |                 beq 005b02           if zero shifts, we're done
3712:000 | DONE wsp | em 16 16 |        |             |
3713:000 | DONE ins | em 16 16 | 005af9 | a8          |                 tay                  number of shifts is TOS
3714:000 | DONE ins | em 16 16 | 005afa | b5 00       |                 lda.dx 00            number is in NOS
3715:000 | DONE lbl | em 16 16 | 005afc |             | lshift_loop                          
3716:000 | DONE ins | em 16 16 | 005afc | 0a          |                 asl.a                
3717:000 | DONE ins | em 16 16 | 005afd | 88          |                 dey                  
3718:000 | DONE ins | em 16 16 | 005afe | d0 fc       |                 bne 005afc           
3719:000 | DONE wsp | em 16 16 |        |             |
3720:000 | DONE ins | em 16 16 | 005b00 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
3721:000 | DONE wsp | em 16 16 |        |             |
3722:000 | DONE lbl | em 16 16 | 005b02 |             | lshift_done                          
3723:000 | DONE ins | em 16 16 | 005b02 | b4 00       |                 ldy.dx 00            
3724:000 | DONE ins | em 16 16 | 005b04 | e8          |                 inx                  
3725:000 | DONE ins | em 16 16 | 005b05 | e8          |                 inx                  
3726:000 | DONE wsp | em 16 16 |        |             |
3727:000 | DONE lbl | em 16 16 | 005b06 |             | z_lshift                             
3727:001 | DONE ins | em 16 16 | 005b06 | 60          |                 rts                  
3728:000 | DONE wsp | em 16 16 |        |             |
3729:000 | DONE wsp | em 16 16 |        |             |
3730:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3731:000 | DONE cmt | em 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
3732:000 | DONE cmt | em 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
3733:000 | DONE cmt | em 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
3734:000 | DONE cmt | em 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
3735:000 | DONE cmt | em 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
3736:000 | DONE cmt | em 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
3737:000 | DONE lbl | em 16 16 | 005b07 |             | xt_mstar                             
3738:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3739:000 | DONE cmt | em 16 16 |        |             |                 ; figure out the sign
3740:000 | DONE ins | em 16 16 | 005b07 | 98          |                 tya                  
3741:000 | DONE ins | em 16 16 | 005b08 | 55 00       |                 eor.dx 00            
3742:000 | DONE wsp | em 16 16 |        |             |
3743:000 | DONE cmt | em 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
3744:000 | DONE cmt | em 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
3745:000 | DONE ins | em 16 16 | 005b0a | 48          |                 pha                  
3746:000 | DONE wsp | em 16 16 |        |             |
3747:000 | DONE cmt | em 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
3748:000 | DONE cmt | em 16 16 |        |             |                 ; UM*, which does the real work
3749:000 | DONE ins | em 16 16 | 005b0b | 98          |                 tya                  
3750:000 | DONE ins | em 16 16 | 005b0c | 10 05       |                 bpl 005b13           
3751:000 | DONE wsp | em 16 16 |        |             |
3752:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is negative so we have to ABS it
3753:000 | DONE ins | em 16 16 | 005b0e | 49 ff ff    |                 eor.# 0ffff          
3754:000 | DONE ins | em 16 16 | 005b11 | 1a          |                 inc.a                
3755:000 | DONE ins | em 16 16 | 005b12 | a8          |                 tay                  
3756:000 | DONE wsp | em 16 16 |        |             |
3757:000 | DONE lbl | em 16 16 | 005b13 |             | mstar_abs_nos                        
3758:000 | DONE ins | em 16 16 | 005b13 | b5 00       |                 lda.dx 00            
3759:000 | DONE ins | em 16 16 | 005b15 | 10 06       |                 bpl 005b1d           
3760:000 | DONE wsp | em 16 16 |        |             |
3761:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is negative so we have to ABS it
3762:000 | DONE ins | em 16 16 | 005b17 | 49 ff ff    |                 eor.# 0ffff          
3763:000 | DONE ins | em 16 16 | 005b1a | 1a          |                 inc.a                
3764:000 | DONE ins | em 16 16 | 005b1b | 95 00       |                 sta.dx 00            
3765:000 | DONE wsp | em 16 16 |        |             |
3766:000 | DONE lbl | em 16 16 | 005b1d |             | mstar_umstar                         
3767:000 | DONE ins | em 16 16 | 005b1d | 20 52 5f    |                 jsr 005f52           now ( d ) on stack
3768:000 | DONE wsp | em 16 16 |        |             |
3769:000 | DONE cmt | em 16 16 |        |             |                 ; handle the sign
3770:000 | DONE ins | em 16 16 | 005b20 | 68          |                 pla                  
3771:000 | DONE wsp | em 16 16 |        |             |
3772:000 | DONE cmt | em 16 16 |        |             |                 ; postive, we don't have to care
3773:000 | DONE ins | em 16 16 | 005b21 | 10 03       |                 bpl 005b26           
3774:000 | DONE wsp | em 16 16 |        |             |
3775:000 | DONE ins | em 16 16 | 005b23 | 20 70 58    |                 jsr 005870           
3776:000 | DONE wsp | em 16 16 |        |             |
3777:000 | DONE lbl | em 16 16 | 005b26 |             | z_mstar                              
3777:001 | DONE ins | em 16 16 | 005b26 | 60          |                 rts                  
3778:000 | DONE wsp | em 16 16 |        |             |
3779:000 | DONE wsp | em 16 16 |        |             |
3780:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3781:000 | DONE cmt | em 16 16 |        |             | ; MARKER ( "name" -- ) X bytes / X cycles
3782:000 | DONE cmt | em 16 16 |        |             | ; Create a deletion boundry, restoring the Dictionary to an earlier state. This
3783:000 | DONE cmt | em 16 16 |        |             | ; replaces FORGET in earlier Forths. Old entries are not actually deleted, but
3784:000 | DONE cmt | em 16 16 |        |             | ; merely overwritten by restoring CP and DP.
3785:000 | DONE lbl | em 16 16 | 005b27 |             | xt_marker                            
3786:000 | DONE cmt | em 16 16 |        |             |                 ; This is a defining word
3787:000 | DONE ins | em 16 16 | 005b27 | 20 61 57    |                 jsr 005761           
3788:000 | DONE wsp | em 16 16 |        |             |
3789:000 | DONE cmt | em 16 16 |        |             |                 ; Add the current DP as a payload - the DP of the marker itself
3790:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if it doesn't make more sense to add nt_ of the previous
3791:000 | DONE cmt | em 16 16 |        |             |                 ; word
3792:000 | DONE ins | em 16 16 | 005b2a | a5 02       |                 lda.d 000002         
3793:000 | DONE ins | em 16 16 | 005b2c | 92 00       |                 sta.di 000000        STA (CP)
3794:000 | DONE ins | em 16 16 | 005b2e | e6 00       |                 inc.d 000000         
3795:000 | DONE ins | em 16 16 | 005b30 | e6 00       |                 inc.d 000000         
3796:000 | DONE wsp | em 16 16 |        |             |
3797:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> by hand: Add runtime behavior and DODOES routine
3798:000 | DONE ins | em 16 16 | 005b32 | 20 cc 58    |                 jsr 0058cc           
3799:000 | DONE ins | em 16 16 | 005b35 | 20 d7 69    |                 jsr 0069d7           
3800:000 | DONE wsp | em 16 16 |        |             |
3801:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> payload
3802:000 | DONE ins | em 16 16 | 005b38 | 20 d7 52    |                 jsr 0052d7           ( nt )
3803:000 | DONE wsp | em 16 16 |        |             |
3804:000 | DONE cmt | em 16 16 |        |             |                 ; We now have the DP of the marker itself on the stack, but we
3805:000 | DONE cmt | em 16 16 |        |             |                 ; need the DP of the previous word. That is two bytes down
3806:000 | DONE ins | em 16 16 | 005b3b | 84 20       |                 sty.d 000020         
3807:000 | DONE ins | em 16 16 | 005b3d | a0 02 00    |                 ldy.# 0002           overwrite TOS, won't be needing it
3808:000 | DONE ins | em 16 16 | 005b40 | b1 20       |                 lda.diy 000020       LDA (TMP3),Y
3809:000 | DONE ins | em 16 16 | 005b42 | 85 02       |                 sta.d 000002         
3810:000 | DONE wsp | em 16 16 |        |             |
3811:000 | DONE cmt | em 16 16 |        |             |                 ; Adjust the CP, which is one byte after the z_ address of the
3812:000 | DONE cmt | em 16 16 |        |             |                 ; word we just restored. That address is six bytes down
3813:000 | DONE ins | em 16 16 | 005b44 | a0 06 00    |                 ldy.# 0006           
3814:000 | DONE ins | em 16 16 | 005b47 | b1 02       |                 lda.diy 000002       LDA (DP),Y
3815:000 | DONE ins | em 16 16 | 005b49 | 1a          |                 inc.a                first free byte is one byte further down
3816:000 | DONE ins | em 16 16 | 005b4a | 85 00       |                 sta.d 000000         
3817:000 | DONE wsp | em 16 16 |        |             |
3818:000 | DONE cmt | em 16 16 |        |             |                 ; clean up stack
3819:000 | DONE ins | em 16 16 | 005b4c | b4 00       |                 ldy.dx 00            
3820:000 | DONE ins | em 16 16 | 005b4e | e8          |                 inx                  
3821:000 | DONE ins | em 16 16 | 005b4f | e8          |                 inx                  
3822:000 | DONE wsp | em 16 16 |        |             |
3823:000 | DONE lbl | em 16 16 | 005b50 |             | z_marker                             
3823:001 | DONE ins | em 16 16 | 005b50 | 60          |                 rts                  
3824:000 | DONE wsp | em 16 16 |        |             |
3825:000 | DONE wsp | em 16 16 |        |             |
3826:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3827:000 | DONE cmt | em 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
3828:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
3829:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3830:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3831:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3832:000 | DONE lbl | em 16 16 | 005b51 |             | xt_max                               
3833:000 | DONE ins | em 16 16 | 005b51 | 98          |                 tya                  
3834:000 | DONE ins | em 16 16 | 005b52 | d5 00       |                 cmp.dx 00            
3835:000 | DONE wsp | em 16 16 |        |             |
3836:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3837:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3838:000 | DONE ins | em 16 16 | 005b54 | f0 0b       |                 beq 005b61           Faster than DROP because TOS is in Y
3839:000 | DONE wsp | em 16 16 |        |             |
3840:000 | DONE ins | em 16 16 | 005b56 | f5 00       |                 sbc.dx 00            
3841:000 | DONE ins | em 16 16 | 005b58 | 50 03       |                 bvc 005b5d           no overflow, skip ahead
3842:000 | DONE wsp | em 16 16 |        |             |
3843:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3844:000 | DONE ins | em 16 16 | 005b5a | 49 00 80    |                 eor.# 8000           compliment negative flag
3845:000 | DONE wsp | em 16 16 |        |             |
3846:000 | DONE lbl | em 16 16 | 005b5d |             | max_no_ov                            
3847:000 | DONE ins | em 16 16 | 005b5d | 10 02       |                 bpl 005b61           keep TOS
3848:000 | DONE lbl | em 16 16 | 005b5f |             | max_drop                             
3849:000 | DONE ins | em 16 16 | 005b5f | b4 00       |                 ldy.dx 00            DROP so NOS is result
3850:000 | DONE lbl | em 16 16 | 005b61 |             | max_nip                              
3851:000 | DONE ins | em 16 16 | 005b61 | e8          |                 inx                  
3852:000 | DONE ins | em 16 16 | 005b62 | e8          |                 inx                  
3853:000 | DONE wsp | em 16 16 |        |             |
3854:000 | DONE lbl | em 16 16 | 005b63 |             | z_max                                
3854:001 | DONE ins | em 16 16 | 005b63 | 60          |                 rts                  
3855:000 | DONE wsp | em 16 16 |        |             |
3856:000 | DONE wsp | em 16 16 |        |             |
3857:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3858:000 | DONE cmt | em 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
3859:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
3860:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3861:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3862:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3863:000 | DONE lbl | em 16 16 | 005b64 |             | xt_min                               
3864:000 | DONE ins | em 16 16 | 005b64 | 98          |                 tya                  
3865:000 | DONE ins | em 16 16 | 005b65 | d5 00       |                 cmp.dx 00            
3866:000 | DONE wsp | em 16 16 |        |             |
3867:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3868:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3869:000 | DONE ins | em 16 16 | 005b67 | f0 0b       |                 beq 005b74           Faster than DROP because TOS is in Y
3870:000 | DONE wsp | em 16 16 |        |             |
3871:000 | DONE ins | em 16 16 | 005b69 | f5 00       |                 sbc.dx 00            
3872:000 | DONE ins | em 16 16 | 005b6b | 50 03       |                 bvc 005b70           no overflow, skip ahead
3873:000 | DONE wsp | em 16 16 |        |             |
3874:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3875:000 | DONE ins | em 16 16 | 005b6d | 49 00 80    |                 eor.# 8000           compliment negative flag
3876:000 | DONE wsp | em 16 16 |        |             |
3877:000 | DONE lbl | em 16 16 | 005b70 |             | min_no_ov                            
3878:000 | DONE ins | em 16 16 | 005b70 | 30 02       |                 bmi 005b74           keep TOS
3879:000 | DONE lbl | em 16 16 | 005b72 |             | min_drop                             
3880:000 | DONE ins | em 16 16 | 005b72 | b4 00       |                 ldy.dx 00            DROP so NOS is result
3881:000 | DONE lbl | em 16 16 | 005b74 |             | min_nip                              
3882:000 | DONE ins | em 16 16 | 005b74 | e8          |                 inx                  
3883:000 | DONE ins | em 16 16 | 005b75 | e8          |                 inx                  
3884:000 | DONE wsp | em 16 16 |        |             |
3885:000 | DONE lbl | em 16 16 | 005b76 |             | z_min                                
3885:001 | DONE ins | em 16 16 | 005b76 | 60          |                 rts                  
3886:000 | DONE wsp | em 16 16 |        |             |
3887:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3888:000 | DONE cmt | em 16 16 |        |             | ; MOVE ( addr1 addr2 u -- ) X bytes / X cycles
3889:000 | DONE cmt | em 16 16 |        |             | ; Move u bytes from addr1 to addr2, so that in the end, addr2 contains exactly
3890:000 | DONE cmt | em 16 16 |        |             | ; what was in addr1. This routine calls CMOVE or CMOVE>. Forth verison is
3891:000 | DONE cmt | em 16 16 |        |             | ; >R 2DUP U< IF R> CMOVE> ELSE  R> CMOVE THEN ; see
3892:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/-l2WlE7pEE0
3893:000 | DONE cmt | em 16 16 |        |             | ; Also see CMOVE> and CMOVE and http://forum.6502.org/viewtopic.php?f=2&t=1685
3894:000 | DONE lbl | em 16 16 | 005b77 |             | xt_move                              
3895:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3896:000 | DONE cmt | em 16 16 |        |             |                 ; if u is zero, we just skip all of this
3897:000 | DONE ins | em 16 16 | 005b77 | 98          |                 tya                  
3898:000 | DONE ins | em 16 16 | 005b78 | f0 10       |                 beq 005b8a           
3899:000 | DONE wsp | em 16 16 |        |             |
3900:000 | DONE cmt | em 16 16 |        |             |                 ; if source and destination are the same, that would be silly as
3901:000 | DONE cmt | em 16 16 |        |             |                 ; well
3902:000 | DONE ins | em 16 16 | 005b7a | b5 00       |                 lda.dx 00            addr2 (destination)
3903:000 | DONE ins | em 16 16 | 005b7c | d5 02       |                 cmp.dx 02            addr1 (source)
3904:000 | DONE ins | em 16 16 | 005b7e | f0 0a       |                 beq 005b8a           
3905:000 | DONE wsp | em 16 16 |        |             |
3906:000 | DONE cmt | em 16 16 |        |             |                 ; The destination is higher than the source, so use CMOVE, which
3907:000 | DONE cmt | em 16 16 |        |             |                 ; calls MVP
3908:000 | DONE ins | em 16 16 | 005b80 | 10 05       |                 bpl 005b87           
3909:000 | DONE wsp | em 16 16 |        |             |
3910:000 | DONE ins | em 16 16 | 005b82 | 20 44 56    |                 jsr 005644           
3911:000 | DONE ins | em 16 16 | 005b85 | 80 03       |                 bra 005b8a           don't RTS because we might be natively compiling
3912:000 | DONE wsp | em 16 16 |        |             |
3913:000 | DONE cmt | em 16 16 |        |             |                 ; The source is higher than the destination, use CMOVE>,
3914:000 | DONE cmt | em 16 16 |        |             |                 ; which calls MVN
3915:000 | DONE lbl | em 16 16 | 005b87 |             | move_cmoveup                         
3916:000 | DONE ins | em 16 16 | 005b87 | 20 67 56    |                 jsr 005667           
3917:000 | DONE wsp | em 16 16 |        |             |
3918:000 | DONE lbl | em 16 16 | 005b8a |             | z_move                               
3918:001 | DONE ins | em 16 16 | 005b8a | 60          |                 rts                  
3919:000 | DONE wsp | em 16 16 |        |             |
3920:000 | DONE wsp | em 16 16 |        |             |
3921:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3922:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
3923:000 | DONE cmt | em 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
3924:000 | DONE cmt | em 16 16 |        |             | ; TODO deal with compile-only words, see
3925:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3926:000 | DONE lbl | em 16 16 | 005b8b |             | xt_name-int                          
3927:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3928:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3929:000 | DONE cmt | em 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
3930:000 | DONE ins | em 16 16 | 005b8b | c8          |                 iny                  
3931:000 | DONE ins | em 16 16 | 005b8c | c8          |                 iny                  
3932:000 | DONE ins | em 16 16 | 005b8d | c8          |                 iny                  
3933:000 | DONE ins | em 16 16 | 005b8e | c8          |                 iny                  
3934:000 | DONE ins | em 16 16 | 005b8f | b9 00 00    |                 lda.y 0000           
3935:000 | DONE ins | em 16 16 | 005b92 | a8          |                 tay                  
3936:000 | DONE wsp | em 16 16 |        |             |
3937:000 | DONE lbl | em 16 16 | 005b93 |             | z_name-int                           
3937:001 | DONE ins | em 16 16 | 005b93 | 60          |                 rts                  
3938:000 | DONE wsp | em 16 16 |        |             |
3939:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3940:000 | DONE cmt | em 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
3941:000 | DONE cmt | em 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
3942:000 | DONE cmt | em 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
3943:000 | DONE cmt | em 16 16 |        |             | ; a valid name token. There is no "STRING>NAME" - this is handled by the
3944:000 | DONE cmt | em 16 16 |        |             | ; combination of PARSE-NAME and FIND-NAME
3945:000 | DONE lbl | em 16 16 | 005b94 |             | xt_name-string                       
3946:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3947:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3948:000 | DONE ins | em 16 16 | 005b94 | ca          |                 dex                  move NOS down one
3949:000 | DONE ins | em 16 16 | 005b95 | ca          |                 dex                  
3950:000 | DONE wsp | em 16 16 |        |             |
3951:000 | DONE cmt | em 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
3952:000 | DONE cmt | em 16 16 |        |             |                 ; which we have as TOS
3953:000 | DONE ins | em 16 16 | 005b96 | 98          |                 tya                  
3954:000 | DONE ins | em 16 16 | 005b97 | 18          |                 clc                  
3955:000 | DONE ins | em 16 16 | 005b98 | 69 08 00    |                 adc.# 0008           
3956:000 | DONE ins | em 16 16 | 005b9b | 95 00       |                 sta.dx 00            NOS
3957:000 | DONE wsp | em 16 16 |        |             |
3958:000 | DONE cmt | em 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
3959:000 | DONE cmt | em 16 16 |        |             |                 ; of the dictionary entry header (the name token)
3960:000 | DONE ins | em 16 16 | 005b9d | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3961:000 | DONE ins | em 16 16 | 005ba0 | 29 ff 00    |                 and.# 00ff           mask all but length byte
3962:000 | DONE ins | em 16 16 | 005ba3 | a8          |                 tay                  
3963:000 | DONE wsp | em 16 16 |        |             |
3964:000 | DONE lbl | em 16 16 | 005ba4 |             | z_name-string                        
3964:001 | DONE ins | em 16 16 | 005ba4 | 60          |                 rts                  
3965:000 | DONE wsp | em 16 16 |        |             |
3966:000 | DONE wsp | em 16 16 |        |             |
3967:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3968:000 | DONE cmt | em 16 16 |        |             | ; NC-LIMIT ( -- addr ) X bytes / X cycles
3969:000 | DONE cmt | em 16 16 |        |             | ; Address where the value of the Native Compile size limit is kept
3970:000 | DONE lbl | em 16 16 | 005ba5 |             | xt_nc-limit                          
3971:000 | DONE ins | em 16 16 | 005ba5 | ca          |                 dex                  
3972:000 | DONE ins | em 16 16 | 005ba6 | ca          |                 dex                  
3973:000 | DONE ins | em 16 16 | 005ba7 | 94 00       |                 sty.dx 00            
3974:000 | DONE ins | em 16 16 | 005ba9 | a0 26 00    |                 ldy.# 000026         
3975:000 | DONE wsp | em 16 16 |        |             |
3976:000 | DONE lbl | em 16 16 | 005bac |             | z_nc-limit                           
3976:001 | DONE ins | em 16 16 | 005bac | 60          |                 rts                  
3977:000 | DONE wsp | em 16 16 |        |             |
3978:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3979:000 | DONE cmt | em 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
3980:000 | DONE cmt | em 16 16 |        |             | ; Two's complement of TOS
3981:000 | DONE lbl | em 16 16 | 005bad |             | xt_negate                            
3982:000 | DONE ins | em 16 16 | 005bad | 98          |                 tya                  
3983:000 | DONE ins | em 16 16 | 005bae | 49 ff ff    |                 eor.# 0ffff          
3984:000 | DONE ins | em 16 16 | 005bb1 | 1a          |                 inc.a                
3985:000 | DONE ins | em 16 16 | 005bb2 | a8          |                 tay                  
3986:000 | DONE wsp | em 16 16 |        |             |
3987:000 | DONE lbl | em 16 16 | 005bb3 |             | z_negate                             
3987:001 | DONE ins | em 16 16 | 005bb3 | 60          |                 rts                  
3988:000 | DONE wsp | em 16 16 |        |             |
3989:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3990:000 | DONE cmt | em 16 16 |        |             | ; NEVER-COMPILE ( -- ) X bytes / X cycles
3991:000 | DONE cmt | em 16 16 |        |             | ; Forbid native compilation for last word in Dictionary
3992:000 | DONE lbl | em 16 16 | 005bb4 |             | xt_never-compile                     
3993:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3994:000 | DONE ins | em 16 16 | 005bb4 | a9 08 00    |                 lda.# NN             
3995:000 | DONE ins | em 16 16 | 005bb7 | eb          |                 xba                  flags are MSB
3996:000 | DONE ins | em 16 16 | 005bb8 | 12 02       |                 ora.di 000002        ORA (DP)
3997:000 | DONE ins | em 16 16 | 005bba | 92 02       |                 sta.di 000002        
3998:000 | DONE wsp | em 16 16 |        |             |
3999:000 | DONE lbl | em 16 16 | 005bbc |             | z_never-compile                      
3999:001 | DONE ins | em 16 16 | 005bbc | 60          |                 rts                  
4000:000 | DONE wsp | em 16 16 |        |             |
4001:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4002:000 | DONE cmt | em 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
4003:000 | DONE cmt | em 16 16 |        |             | ; Delete entry that is NOS
4004:000 | DONE lbl | em 16 16 | 005bbd |             | xt_nip                               
4005:000 | DONE ins | em 16 16 | 005bbd | e8          |                 inx                  
4006:000 | DONE ins | em 16 16 | 005bbe | e8          |                 inx                  
4007:000 | DONE wsp | em 16 16 |        |             |
4008:000 | DONE lbl | em 16 16 | 005bbf |             | z_nip                                
4008:001 | DONE ins | em 16 16 | 005bbf | 60          |                 rts                  
4009:000 | DONE wsp | em 16 16 |        |             |
4010:000 | DONE wsp | em 16 16 |        |             |
4011:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4012:000 | DONE cmt | em 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
4013:000 | DONE cmt | em 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
4014:000 | DONE cmt | em 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
4015:000 | DONE cmt | em 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
4016:000 | DONE cmt | em 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
4017:000 | DONE cmt | em 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
4018:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
4019:000 | DONE cmt | em 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
4020:000 | DONE cmt | em 16 16 |        |             | ; signal a double cell number is required to be the last character of the
4021:000 | DONE cmt | em 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
4022:000 | DONE cmt | em 16 16 |        |             | ; and tmp3, so we can't use them here, which is a pain.
4023:000 | DONE lbl | em 16 16 | 005bc0 |             | xt_number                            
4024:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4025:000 | DONE cmt | em 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
4026:000 | DONE cmt | em 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
4027:000 | DONE cmt | em 16 16 |        |             |                 ; for double
4028:000 | DONE ins | em 16 16 | 005bc0 | f4 00 00    |                 phe.# 0000           
4029:000 | DONE wsp | em 16 16 |        |             |
4030:000 | DONE ins | em 16 16 | 005bc3 | 84 24       |                 sty.d 000024         save length of string, freeing Y
4031:000 | DONE wsp | em 16 16 |        |             |
4032:000 | DONE cmt | em 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
4033:000 | DONE cmt | em 16 16 |        |             |                 ; a flag
4034:000 | DONE ins | em 16 16 | 005bc5 | e2 20       |                 sep 20               
4034:001 | DONE ctl | em  8 16 |        |             |         .!a8
4035:000 | DONE ins | em  8 16 | 005bc7 | a1 00       |                 lda.dxi 00           get first character
4036:000 | DONE ins | em  8 16 | 005bc9 | c9 2d       |                 cmp.# 2d             
4037:000 | DONE ins | em  8 16 | 005bcb | c2 20       |                 rep 20               
4037:001 | DONE ctl | em 16 16 |        |             |         .!a16
4038:000 | DONE ins | em 16 16 | 005bcd | d0 09       |                 bne 005bd8           
4039:000 | DONE wsp | em 16 16 |        |             |
4040:000 | DONE cmt | em 16 16 |        |             |                 ; We have a minus.
4041:000 | DONE ins | em 16 16 | 005bcf | 68          |                 pla                  
4042:000 | DONE ins | em 16 16 | 005bd0 | 09 00 ff    |                 ora.# 0ff00          MSB is minus
4043:000 | DONE ins | em 16 16 | 005bd3 | 48          |                 pha                  
4044:000 | DONE wsp | em 16 16 |        |             |
4045:000 | DONE ins | em 16 16 | 005bd4 | f6 00       |                 inc.dx 00            start one character later
4046:000 | DONE ins | em 16 16 | 005bd6 | c6 24       |                 dec.d 000024         reduce string length by one
4047:000 | DONE wsp | em 16 16 |        |             |
4048:000 | DONE lbl | em 16 16 | 005bd8 |             | number_dot                           
4049:000 | DONE cmt | em 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
4050:000 | DONE ins | em 16 16 | 005bd8 | a5 24       |                 lda.d 000024         get the string length
4051:000 | DONE ins | em 16 16 | 005bda | 3a          |                 dec.a                subtract one to convert length to index
4052:000 | DONE ins | em 16 16 | 005bdb | 18          |                 clc                  
4053:000 | DONE ins | em 16 16 | 005bdc | 75 00       |                 adc.dx 00            add length of string
4054:000 | DONE ins | em 16 16 | 005bde | a8          |                 tay                  
4055:000 | DONE ins | em 16 16 | 005bdf | e2 20       |                 sep 20               
4055:001 | DONE ctl | em  8 16 |        |             |         .!a8
4056:000 | DONE ins | em  8 16 | 005be1 | b9 00 00    |                 lda.y 0000           get last character
4057:000 | DONE ins | em  8 16 | 005be4 | c9 2e       |                 cmp.# 2e             
4058:000 | DONE ins | em  8 16 | 005be6 | c2 20       |                 rep 20               
4058:001 | DONE ctl | em 16 16 |        |             |         .!a16
4059:000 | DONE ins | em 16 16 | 005be8 | d0 07       |                 bne 005bf1           
4060:000 | DONE wsp | em 16 16 |        |             |
4061:000 | DONE cmt | em 16 16 |        |             |                 ; we have a dot
4062:000 | DONE ins | em 16 16 | 005bea | 68          |                 pla                  get the flag back
4063:000 | DONE ins | em 16 16 | 005beb | 09 ff 00    |                 ora.# 00ff           LSB is double
4064:000 | DONE ins | em 16 16 | 005bee | 48          |                 pha                  
4065:000 | DONE wsp | em 16 16 |        |             |
4066:000 | DONE ins | em 16 16 | 005bef | c6 24       |                 dec.d 000024         reduce string length by one
4067:000 | DONE wsp | em 16 16 |        |             |
4068:000 | DONE lbl | em 16 16 | 005bf1 |             | number_main                          
4069:000 | DONE cmt | em 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
4070:000 | DONE ins | em 16 16 | 005bf1 | b5 00       |                 lda.dx 00            get the string address to safety
4071:000 | DONE ins | em 16 16 | 005bf3 | 74 00       |                 stz.dx 00            NOS is now zero
4072:000 | DONE ins | em 16 16 | 005bf5 | ca          |                 dex                  
4073:000 | DONE ins | em 16 16 | 005bf6 | ca          |                 dex                  
4074:000 | DONE ins | em 16 16 | 005bf7 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
4075:000 | DONE ins | em 16 16 | 005bf9 | ca          |                 dex                  
4076:000 | DONE ins | em 16 16 | 005bfa | ca          |                 dex                  
4077:000 | DONE wsp | em 16 16 |        |             |
4078:000 | DONE ins | em 16 16 | 005bfb | 95 00       |                 sta.dx 00            address is back as NOS
4079:000 | DONE ins | em 16 16 | 005bfd | a4 24       |                 ldy.d 000024         length is back as TOS
4080:000 | DONE wsp | em 16 16 |        |             |
4081:000 | DONE lbl | em 16 16 | 005bff |             | number_loop                          
4082:000 | DONE ins | em 16 16 | 005bff | 20 60 51    |                 jsr 005160           ( ud addr u -- ud addr u )
4083:000 | DONE wsp | em 16 16 |        |             |
4084:000 | DONE ins | em 16 16 | 005c02 | 98          |                 tya                  test length of returned string, should be 0
4085:000 | DONE ins | em 16 16 | 005c03 | f0 06       |                 beq 005c0b           
4086:000 | DONE wsp | em 16 16 |        |             |
4087:000 | DONE cmt | em 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
4088:000 | DONE cmt | em 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
4089:000 | DONE cmt | em 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
4090:000 | DONE cmt | em 16 16 |        |             |                 ; trouble one way or another
4091:000 | DONE cmt | em 16 16 |        |             |                 ; TODO print offending string
4092:000 | DONE ins | em 16 16 | 005c05 | a9 e0 72    |                 lda.# 0072e0         
4093:000 | DONE ins | em 16 16 | 005c08 | 4c 70 6a    |                 jmp 006a70           
4094:000 | DONE wsp | em 16 16 |        |             |
4095:000 | DONE lbl | em 16 16 | 005c0b |             | number_ok                            
4096:000 | DONE cmt | em 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
4097:000 | DONE ins | em 16 16 | 005c0b | b4 02       |                 ldy.dx 02            
4098:000 | DONE ins | em 16 16 | 005c0d | e8          |                 inx                  
4099:000 | DONE ins | em 16 16 | 005c0e | e8          |                 inx                  
4100:000 | DONE ins | em 16 16 | 005c0f | e8          |                 inx                  
4101:000 | DONE ins | em 16 16 | 005c10 | e8          |                 inx                  
4102:000 | DONE wsp | em 16 16 |        |             |
4103:000 | DONE cmt | em 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
4104:000 | DONE cmt | em 16 16 |        |             |                 ; a minus and might actually be single-cell
4105:000 | DONE ins | em 16 16 | 005c11 | 68          |                 pla                  get copy of the flags
4106:000 | DONE ins | em 16 16 | 005c12 | 48          |                 pha                  
4107:000 | DONE ins | em 16 16 | 005c13 | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
4108:000 | DONE ins | em 16 16 | 005c16 | f0 1b       |                 beq 005c33           
4109:000 | DONE wsp | em 16 16 |        |             |
4110:000 | DONE cmt | em 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
4111:000 | DONE cmt | em 16 16 |        |             |                 ; negate it
4112:000 | DONE ins | em 16 16 | 005c18 | 68          |                 pla                  
4113:000 | DONE ins | em 16 16 | 005c19 | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
4114:000 | DONE ins | em 16 16 | 005c1c | f0 25       |                 beq 005c43           no minus, all done
4115:000 | DONE wsp | em 16 16 |        |             |
4116:000 | DONE ins | em 16 16 | 005c1e | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
4117:000 | DONE ins | em 16 16 | 005c20 | 49 ff ff    |                 eor.# 0ffff          
4118:000 | DONE wsp | em 16 16 |        |             |
4119:000 | DONE cmt | em 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
4120:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
4121:000 | DONE ins | em 16 16 | 005c23 | 18          |                 clc                  
4122:000 | DONE ins | em 16 16 | 005c24 | 69 01 00    |                 adc.# 0001           
4123:000 | DONE ins | em 16 16 | 005c27 | 95 00       |                 sta.dx 00            
4124:000 | DONE wsp | em 16 16 |        |             |
4125:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
4126:000 | DONE ins | em 16 16 | 005c29 | 98          |                 tya                  
4127:000 | DONE ins | em 16 16 | 005c2a | 49 ff ff    |                 eor.# 0ffff          
4128:000 | DONE ins | em 16 16 | 005c2d | 69 00 00    |                 adc.# 0000           we are only interested in the carry
4129:000 | DONE ins | em 16 16 | 005c30 | a8          |                 tay                  
4130:000 | DONE wsp | em 16 16 |        |             |
4131:000 | DONE ins | em 16 16 | 005c31 | 80 10       |                 bra 005c43           
4132:000 | DONE wsp | em 16 16 |        |             |
4133:000 | DONE lbl | em 16 16 | 005c33 |             | number_single                        
4134:000 | DONE cmt | em 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
4135:000 | DONE ins | em 16 16 | 005c33 | b4 00       |                 ldy.dx 00            
4136:000 | DONE ins | em 16 16 | 005c35 | e8          |                 inx                  
4137:000 | DONE ins | em 16 16 | 005c36 | e8          |                 inx                  
4138:000 | DONE wsp | em 16 16 |        |             |
4139:000 | DONE cmt | em 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
4140:000 | DONE cmt | em 16 16 |        |             |                 ; doubled for speed
4141:000 | DONE ins | em 16 16 | 005c37 | 68          |                 pla                  
4142:000 | DONE ins | em 16 16 | 005c38 | 29 00 ff    |                 and.# 0ff00          
4143:000 | DONE ins | em 16 16 | 005c3b | f0 06       |                 beq 005c43           no minus, all done
4144:000 | DONE wsp | em 16 16 |        |             |
4145:000 | DONE ins | em 16 16 | 005c3d | 98          |                 tya                  NEGATE
4146:000 | DONE ins | em 16 16 | 005c3e | 49 ff ff    |                 eor.# 0ffff          
4147:000 | DONE ins | em 16 16 | 005c41 | 1a          |                 inc.a                
4148:000 | DONE ins | em 16 16 | 005c42 | a8          |                 tay                  fall through to end
4149:000 | DONE wsp | em 16 16 |        |             |
4150:000 | DONE lbl | em 16 16 | 005c43 |             | z_number                             
4150:001 | DONE ins | em 16 16 | 005c43 | 60          |                 rts                  
4151:000 | DONE wsp | em 16 16 |        |             |
4152:000 | DONE wsp | em 16 16 |        |             |
4153:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4154:000 | DONE cmt | em 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
4155:000 | DONE cmt | em 16 16 |        |             | ; Logical OR
4156:000 | DONE lbl | em 16 16 | 005c44 |             | xt_or                                
4157:000 | DONE ins | em 16 16 | 005c44 | 98          |                 tya                  
4158:000 | DONE ins | em 16 16 | 005c45 | 15 00       |                 ora.dx 00            
4159:000 | DONE ins | em 16 16 | 005c47 | a8          |                 tay                  
4160:000 | DONE wsp | em 16 16 |        |             |
4161:000 | DONE ins | em 16 16 | 005c48 | e8          |                 inx                  
4162:000 | DONE ins | em 16 16 | 005c49 | e8          |                 inx                  
4163:000 | DONE wsp | em 16 16 |        |             |
4164:000 | DONE lbl | em 16 16 | 005c4a |             | z_or                                 
4164:001 | DONE ins | em 16 16 | 005c4a | 60          |                 rts                  
4165:000 | DONE wsp | em 16 16 |        |             |
4166:000 | DONE wsp | em 16 16 |        |             |
4167:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4168:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT ( -- addr ) X bytes / X cycles
4169:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump target for EMIT is stored. By default, this
4170:000 | DONE cmt | em 16 16 |        |             | ; will hold the value of put_chr from the kernel routine, but this can be
4171:000 | DONE cmt | em 16 16 |        |             | ; changed by the user
4172:000 | DONE lbl | em 16 16 | 005c4b |             | xt_output                            
4173:000 | DONE ins | em 16 16 | 005c4b | ca          |                 dex                  
4174:000 | DONE ins | em 16 16 | 005c4c | ca          |                 dex                  
4175:000 | DONE ins | em 16 16 | 005c4d | 94 00       |                 sty.dx 00            
4176:000 | DONE wsp | em 16 16 |        |             |
4177:000 | DONE ins | em 16 16 | 005c4f | a0 0e 00    |                 ldy.# 00000e         
4178:000 | DONE wsp | em 16 16 |        |             |
4179:000 | DONE lbl | em 16 16 | 005c52 |             | z_output                             
4179:001 | DONE ins | em 16 16 | 005c52 | 60          |                 rts                  
4180:000 | DONE wsp | em 16 16 |        |             |
4181:000 | DONE wsp | em 16 16 |        |             |
4182:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4183:000 | DONE cmt | em 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
4184:000 | DONE cmt | em 16 16 |        |             | ; Push NOS on Data Stack
4185:000 | DONE lbl | em 16 16 | 005c53 |             | xt_over                              
4186:000 | DONE ins | em 16 16 | 005c53 | ca          |                 dex                  
4187:000 | DONE ins | em 16 16 | 005c54 | ca          |                 dex                  
4188:000 | DONE ins | em 16 16 | 005c55 | 94 00       |                 sty.dx 00            
4189:000 | DONE ins | em 16 16 | 005c57 | b4 02       |                 ldy.dx 02            
4190:000 | DONE wsp | em 16 16 |        |             |
4191:000 | DONE lbl | em 16 16 | 005c59 |             | z_over                               
4191:001 | DONE ins | em 16 16 | 005c59 | 60          |                 rts                  
4192:000 | DONE wsp | em 16 16 |        |             |
4193:000 | DONE wsp | em 16 16 |        |             |
4194:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4195:000 | DONE cmt | em 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
4196:000 | DONE cmt | em 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
4197:000 | DONE cmt | em 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
4198:000 | DONE cmt | em 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
4199:000 | DONE cmt | em 16 16 |        |             | ; user and not used by the system
4200:000 | DONE lbl | em 16 16 | 005c5a |             | xt_pad                               
4201:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4202:000 | DONE ins | em 16 16 | 005c5a | ca          |                 dex                  
4203:000 | DONE ins | em 16 16 | 005c5b | ca          |                 dex                  
4204:000 | DONE ins | em 16 16 | 005c5c | 94 00       |                 sty.dx 00            
4205:000 | DONE wsp | em 16 16 |        |             |
4206:000 | DONE ins | em 16 16 | 005c5e | a5 00       |                 lda.d 000000         
4207:000 | DONE ins | em 16 16 | 005c60 | 18          |                 clc                  
4208:000 | DONE ins | em 16 16 | 005c61 | 69 ff 00    |                 adc.# 0000ff         
4209:000 | DONE ins | em 16 16 | 005c64 | a8          |                 tay                  
4210:000 | DONE wsp | em 16 16 |        |             |
4211:000 | DONE lbl | em 16 16 | 005c65 |             | z_pad                                
4211:001 | DONE ins | em 16 16 | 005c65 | 60          |                 rts                  
4212:000 | DONE wsp | em 16 16 |        |             |
4213:000 | DONE wsp | em 16 16 |        |             |
4214:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4215:000 | DONE cmt | em 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
4216:000 | DONE cmt | em 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
4217:000 | DONE cmt | em 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
4218:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite with EMIT
4219:000 | DONE lbl | em 16 16 | 005c66 |             | xt_page                              
4220:000 | DONE ins | em 16 16 | 005c66 | a9 ef 72    |                 lda.# 0072ef         
4221:000 | DONE ins | em 16 16 | 005c69 | 20 76 6a    |                 jsr 006a76           
4222:000 | DONE wsp | em 16 16 |        |             |
4223:000 | DONE cmt | em 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
4224:000 | DONE cmt | em 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
4225:000 | DONE cmt | em 16 16 |        |             |                 ; So we send "ESC[H" as well.
4226:000 | DONE ins | em 16 16 | 005c6c | a9 f4 72    |                 lda.# 0072f4         
4227:000 | DONE ins | em 16 16 | 005c6f | 20 76 6a    |                 jsr 006a76           
4228:000 | DONE wsp | em 16 16 |        |             |
4229:000 | DONE lbl | em 16 16 | 005c72 |             | z_page                               
4229:001 | DONE ins | em 16 16 | 005c72 | 60          |                 rts                  
4230:000 | DONE wsp | em 16 16 |        |             |
4231:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4232:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
4233:000 | DONE cmt | em 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
4234:000 | DONE cmt | em 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
4235:000 | DONE cmt | em 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
4236:000 | DONE cmt | em 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
4237:000 | DONE cmt | em 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
4238:000 | DONE lbl | em 16 16 | 005c73 |             | xt_parse-name                        
4239:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4240:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4241:000 | DONE cmt | em 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
4242:000 | DONE cmt | em 16 16 |        |             |                 ; character on data stack for PARSE
4243:000 | DONE ins | em 16 16 | 005c73 | 5a          |                 phy                  save TOS for later use
4244:000 | DONE ins | em 16 16 | 005c74 | a4 0c       |                 ldy.d 00000c         >IN
4245:000 | DONE ins | em 16 16 | 005c76 | e2 20       |                 sep 20               
4245:001 | DONE ctl | em  8 16 |        |             |         .!a8
4246:000 | DONE lbl | em  8 16 | 005c78 |             | parse-name_loop                      
4247:000 | DONE ins | em  8 16 | 005c78 | c4 0a       |                 cpy.d 00000a         end of line?
4248:000 | DONE ins | em  8 16 | 005c7a | f0 09       |                 beq 005c85           
4249:000 | DONE wsp | em  8 16 |        |             |
4250:000 | DONE ins | em  8 16 | 005c7c | b1 08       |                 lda.diy 000008       LDA (CIB),Y
4251:000 | DONE ins | em  8 16 | 005c7e | c9 20       |                 cmp.# AscSP          
4252:000 | DONE ins | em  8 16 | 005c80 | d0 19       |                 bne 005c9b           
4253:000 | DONE ins | em  8 16 | 005c82 | c8          |                 iny                  
4254:000 | DONE ins | em  8 16 | 005c83 | 80 f3       |                 bra 005c78           
4255:000 | DONE wsp | em  8 16 |        |             |
4256:000 | DONE lbl | em  8 16 | 005c85 |             | parse-name_empty_line                
4257:000 | DONE ins | em  8 16 | 005c85 | c2 20       |                 rep 20               
4257:001 | DONE ctl | em 16 16 |        |             |         .!a16
4258:000 | DONE cmt | em 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
4259:000 | DONE cmt | em 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
4260:000 | DONE cmt | em 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
4261:000 | DONE cmt | em 16 16 |        |             |                 ; show that it returns the address of the last space in the
4262:000 | DONE cmt | em 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
4263:000 | DONE ins | em 16 16 | 005c87 | ca          |                 dex                  
4264:000 | DONE ins | em 16 16 | 005c88 | ca          |                 dex                  
4265:000 | DONE ins | em 16 16 | 005c89 | ca          |                 dex                  
4266:000 | DONE ins | em 16 16 | 005c8a | ca          |                 dex                  
4267:000 | DONE wsp | em 16 16 |        |             |
4268:000 | DONE ins | em 16 16 | 005c8b | 7a          |                 ply                  restore old TOS as 3OS
4269:000 | DONE ins | em 16 16 | 005c8c | 94 02       |                 sty.dx 02            
4270:000 | DONE wsp | em 16 16 |        |             |
4271:000 | DONE ins | em 16 16 | 005c8e | a5 08       |                 lda.d 000008         
4272:000 | DONE ins | em 16 16 | 005c90 | 18          |                 clc                  
4273:000 | DONE ins | em 16 16 | 005c91 | 65 0a       |                 adc.d 00000a         
4274:000 | DONE ins | em 16 16 | 005c93 | 95 00       |                 sta.dx 00            Address as NOS
4275:000 | DONE wsp | em 16 16 |        |             |
4276:000 | DONE ins | em 16 16 | 005c95 | a0 00 00    |                 ldy.# 0000           TOS
4277:000 | DONE wsp | em 16 16 |        |             |
4278:000 | DONE ins | em 16 16 | 005c98 | 4c d9 5c    |                 jmp 005cd9           don't have to go through PARSE
4279:000 | DONE wsp | em 16 16 |        |             |
4280:000 | DONE lbl | em 16 16 | 005c9b |             | parse-name_found                     
4281:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4282:000 | DONE ins | em 16 16 | 005c9b | c2 20       |                 rep 20               
4282:001 | DONE ctl | em 16 16 |        |             |         .!a16
4283:000 | DONE ins | em 16 16 | 005c9d | 84 0c       |                 sty.d 00000c         new >IN
4284:000 | DONE wsp | em 16 16 |        |             |
4285:000 | DONE ins | em 16 16 | 005c9f | 7a          |                 ply                  recover TOS
4286:000 | DONE ins | em 16 16 | 005ca0 | ca          |                 dex                  
4287:000 | DONE ins | em 16 16 | 005ca1 | ca          |                 dex                  
4288:000 | DONE ins | em 16 16 | 005ca2 | 94 00       |                 sty.dx 00            
4289:000 | DONE wsp | em 16 16 |        |             |
4290:000 | DONE ins | em 16 16 | 005ca4 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
4291:000 | DONE wsp | em 16 16 |        |             |
4292:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to PARSE
4293:000 | DONE wsp | em 16 16 |        |             |
4294:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4295:000 | DONE cmt | em 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
4296:000 | DONE cmt | em 16 16 |        |             | ; Find word in input string delimited by character given. Do not skip leading
4297:000 | DONE cmt | em 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
4298:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
4299:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
4300:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME drops through to here
4301:000 | DONE cmt | em 16 16 |        |             | ;
4302:000 | DONE cmt | em 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
4303:000 | DONE cmt | em 16 16 |        |             | ;     v       v             v
4304:000 | DONE cmt | em 16 16 |        |             | ;     |#####################|              Length of found string:
4305:000 | DONE cmt | em 16 16 |        |             | ;                                          ciblen - toin
4306:000 | DONE cmt | em 16 16 |        |             | ;     +------>|  toin (>IN)
4307:000 | DONE cmt | em 16 16 |        |             | ;     +-------------------->|  ciblen
4308:000 | DONE cmt | em 16 16 |        |             | ;
4309:000 | DONE cmt | em 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
4310:000 | DONE cmt | em 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
4311:000 | DONE cmt | em 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
4312:000 | DONE cmt | em 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
4313:000 | DONE lbl | em 16 16 | 005ca7 |             | xt_parse                             
4314:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4315:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4316:000 | DONE ins | em 16 16 | 005ca7 | 84 1c       |                 sty.d 00001c         save delimiter, char is LSB
4317:000 | DONE wsp | em 16 16 |        |             |
4318:000 | DONE cmt | em 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
4319:000 | DONE cmt | em 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
4320:000 | DONE cmt | em 16 16 |        |             |                 ; return
4321:000 | DONE ins | em 16 16 | 005ca9 | a5 0c       |                 lda.d 00000c         
4322:000 | DONE ins | em 16 16 | 005cab | 85 20       |                 sta.d 000020         save >IN for later length calculation
4323:000 | DONE ins | em 16 16 | 005cad | 18          |                 clc                  
4324:000 | DONE ins | em 16 16 | 005cae | 65 08       |                 adc.d 000008         
4325:000 | DONE wsp | em 16 16 |        |             |
4326:000 | DONE ins | em 16 16 | 005cb0 | ca          |                 dex                  save addr as NOS
4327:000 | DONE ins | em 16 16 | 005cb1 | ca          |                 dex                  
4328:000 | DONE ins | em 16 16 | 005cb2 | 95 00       |                 sta.dx 00            
4329:000 | DONE wsp | em 16 16 |        |             |
4330:000 | DONE ins | em 16 16 | 005cb4 | 64 1e       |                 stz.d 00001e         offset for EOL/char found adjustment of >IN
4331:000 | DONE wsp | em 16 16 |        |             |
4332:000 | DONE cmt | em 16 16 |        |             |                 ; prepare loop using Y as index
4333:000 | DONE ins | em 16 16 | 005cb6 | a4 0c       |                 ldy.d 00000c         
4334:000 | DONE ins | em 16 16 | 005cb8 | e2 20       |                 sep 20               
4334:001 | DONE ctl | em  8 16 |        |             |         .!a8
4335:000 | DONE wsp | em  8 16 |        |             |
4336:000 | DONE lbl | em  8 16 | 005cba |             | parse_loop                           
4337:000 | DONE ins | em  8 16 | 005cba | c4 0a       |                 cpy.d 00000a         check for EOL first
4338:000 | DONE ins | em  8 16 | 005cbc | f0 0d       |                 beq 005ccb           
4339:000 | DONE wsp | em  8 16 |        |             |
4340:000 | DONE ins | em  8 16 | 005cbe | b1 08       |                 lda.diy 000008       LDA (CIB),Y
4341:000 | DONE ins | em  8 16 | 005cc0 | c5 1c       |                 cmp.d 00001c         found delimiter?
4342:000 | DONE ins | em  8 16 | 005cc2 | f0 03       |                 beq 005cc7           
4343:000 | DONE ins | em  8 16 | 005cc4 | c8          |                 iny                  
4344:000 | DONE ins | em  8 16 | 005cc5 | 80 f3       |                 bra 005cba           
4345:000 | DONE wsp | em  8 16 |        |             |
4346:000 | DONE lbl | em  8 16 | 005cc7 |             | parse_found_delimiter                
4347:000 | DONE cmt | em  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
4348:000 | DONE cmt | em  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
4349:000 | DONE cmt | em  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
4350:000 | DONE cmt | em  8 16 |        |             |                 ; offset is for
4351:000 | DONE ins | em  8 16 | 005cc7 | c2 20       |                 rep 20               
4351:001 | DONE ctl | em 16 16 |        |             |         .!a16
4352:000 | DONE ins | em 16 16 | 005cc9 | e6 1e       |                 inc.d 00001e         
4353:000 | DONE wsp | em 16 16 |        |             |
4354:000 | DONE lbl | em 16 16 | 005ccb |             | parse_reached_eol                    
4355:000 | DONE cmt | em 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
4356:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4357:000 | DONE ins | em 16 16 | 005ccb | c2 20       |                 rep 20               
4357:001 | DONE ctl | em 16 16 |        |             |         .!a16
4358:000 | DONE ins | em 16 16 | 005ccd | 98          |                 tya                  
4359:000 | DONE ins | em 16 16 | 005cce | 38          |                 sec                  
4360:000 | DONE ins | em 16 16 | 005ccf | e5 20       |                 sbc.d 000020         original value for >IN / index of first char
4361:000 | DONE ins | em 16 16 | 005cd1 | 48          |                 pha                  save so we can manipulate Y
4362:000 | DONE wsp | em 16 16 |        |             |
4363:000 | DONE cmt | em 16 16 |        |             |                 ; calculate new >IN
4364:000 | DONE ins | em 16 16 | 005cd2 | 98          |                 tya                  
4365:000 | DONE ins | em 16 16 | 005cd3 | 18          |                 clc                  
4366:000 | DONE ins | em 16 16 | 005cd4 | 65 1e       |                 adc.d 00001e         offset for EOL vs found delimiter
4367:000 | DONE ins | em 16 16 | 005cd6 | 85 0c       |                 sta.d 00000c         
4368:000 | DONE wsp | em 16 16 |        |             |
4369:000 | DONE ins | em 16 16 | 005cd8 | 7a          |                 ply                  length of string in TOS
4370:000 | DONE wsp | em 16 16 |        |             |
4371:000 | DONE lbl | em 16 16 | 005cd9 |             | z_parse-name                         
4372:000 | DONE lbl | em 16 16 | 005cd9 |             | z_parse                              
4372:001 | DONE ins | em 16 16 | 005cd9 | 60          |                 rts                  
4373:000 | DONE wsp | em 16 16 |        |             |
4374:000 | DONE wsp | em 16 16 |        |             |
4375:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4376:000 | DONE cmt | em 16 16 |        |             | ; PICK ( n n u -- n n n ) X bytes / X cycles
4377:000 | DONE cmt | em 16 16 |        |             | ; Take the u-th element out of the stack and put it on TOS, overwriting the
4378:000 | DONE cmt | em 16 16 |        |             | ; current TOS. 0 PICK is equivalent to DUP, 1 PICK to OVER. Note that using PICK
4379:000 | DONE cmt | em 16 16 |        |             | ; is considered poor coding form. Also note that FIG Forth has a different
4380:000 | DONE cmt | em 16 16 |        |             | ; behavior for PICK than ANS Forth.
4381:000 | DONE cmt | em 16 16 |        |             | ; TODO use DEPTH to check for underflow
4382:000 | DONE lbl | em 16 16 | 005cda |             | xt_pick                              
4383:000 | DONE ins | em 16 16 | 005cda | 86 22       |                 stx.d 000022         
4384:000 | DONE wsp | em 16 16 |        |             |
4385:000 | DONE ins | em 16 16 | 005cdc | 98          |                 tya                  Y is just an offset to the DSP
4386:000 | DONE ins | em 16 16 | 005cdd | 0a          |                 asl.a                double because of cell size two bytes
4387:000 | DONE wsp | em 16 16 |        |             |
4388:000 | DONE ins | em 16 16 | 005cde | 18          |                 clc                  
4389:000 | DONE ins | em 16 16 | 005cdf | 65 22       |                 adc.d 000022         
4390:000 | DONE wsp | em 16 16 |        |             |
4391:000 | DONE ins | em 16 16 | 005ce1 | aa          |                 tax                  
4392:000 | DONE ins | em 16 16 | 005ce2 | b5 00       |                 lda.dx 00            LDA $00,X
4393:000 | DONE ins | em 16 16 | 005ce4 | a8          |                 tay                  Is now TOS
4394:000 | DONE wsp | em 16 16 |        |             |
4395:000 | DONE ins | em 16 16 | 005ce5 | a6 22       |                 ldx.d 000022         
4396:000 | DONE wsp | em 16 16 |        |             |
4397:000 | DONE lbl | em 16 16 | 005ce7 |             | z_pick                               
4397:001 | DONE ins | em 16 16 | 005ce7 | 60          |                 rts                  
4398:000 | DONE wsp | em 16 16 |        |             |
4399:000 | DONE wsp | em 16 16 |        |             |
4400:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4401:000 | DONE cmt | em 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
4402:000 | DONE cmt | em 16 16 |        |             | ; Add NOS to address in TOS
4403:000 | DONE lbl | em 16 16 | 005ce8 |             | xt_plusstore                         
4404:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4405:000 | DONE ins | em 16 16 | 005ce8 | b9 00 00    |                 lda.y 0000           
4406:000 | DONE ins | em 16 16 | 005ceb | 18          |                 clc                  
4407:000 | DONE ins | em 16 16 | 005cec | 75 00       |                 adc.dx 00            
4408:000 | DONE ins | em 16 16 | 005cee | 99 00 00    |                 sta.y 0000           
4409:000 | DONE wsp | em 16 16 |        |             |
4410:000 | DONE ins | em 16 16 | 005cf1 | b4 02       |                 ldy.dx 02            
4411:000 | DONE ins | em 16 16 | 005cf3 | e8          |                 inx                  
4412:000 | DONE ins | em 16 16 | 005cf4 | e8          |                 inx                  
4413:000 | DONE ins | em 16 16 | 005cf5 | e8          |                 inx                  
4414:000 | DONE ins | em 16 16 | 005cf6 | e8          |                 inx                  
4415:000 | DONE wsp | em 16 16 |        |             |
4416:000 | DONE lbl | em 16 16 | 005cf7 |             | z_plusstore                          
4416:001 | DONE ins | em 16 16 | 005cf7 | 60          |                 rts                  
4417:000 | DONE wsp | em 16 16 |        |             |
4418:000 | DONE wsp | em 16 16 |        |             |
4419:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4420:000 | DONE cmt | em 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
4421:000 | DONE cmt | em 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
4422:000 | DONE cmt | em 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
4423:000 | DONE cmt | em 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
4424:000 | DONE cmt | em 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
4425:000 | DONE cmt | em 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
4426:000 | DONE cmt | em 16 16 |        |             | ; <word>" directly. This word uses tmp1
4427:000 | DONE lbl | em 16 16 | 005cf8 |             | xt_postpone                          
4428:000 | DONE cmt | em 16 16 |        |             |                 ; get name from string
4429:000 | DONE ins | em 16 16 | 005cf8 | 20 73 5c    |                 jsr 005c73           ( addr n )
4430:000 | DONE wsp | em 16 16 |        |             |
4431:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no word in stream, complain and abort
4432:000 | DONE ins | em 16 16 | 005cfb | d0 06       |                 bne 005d03           
4433:000 | DONE ins | em 16 16 | 005cfd | a9 43 72    |                 lda.# 007243         
4434:000 | DONE ins | em 16 16 | 005d00 | 4c 70 6a    |                 jmp 006a70           
4435:000 | DONE wsp | em 16 16 |        |             |
4436:000 | DONE lbl | em 16 16 | 005d03 |             | pp_got_word                          
4437:000 | DONE ins | em 16 16 | 005d03 | 20 84 59    |                 jsr 005984           ( nt | 0 )
4438:000 | DONE wsp | em 16 16 |        |             |
4439:000 | DONE cmt | em 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
4440:000 | DONE ins | em 16 16 | 005d06 | d0 03       |                 bne 005d0b           
4441:000 | DONE ins | em 16 16 | 005d08 | a9 e0 72    |                 lda.# 0072e0         
4442:000 | DONE wsp | em 16 16 |        |             |
4443:000 | DONE lbl | em 16 16 | 005d0b |             | pp_got_nt                            
4444:000 | DONE cmt | em 16 16 |        |             |                 ; Keep nt safe for later use
4445:000 | DONE ins | em 16 16 | 005d0b | 84 1c       |                 sty.d 00001c         
4446:000 | DONE wsp | em 16 16 |        |             |
4447:000 | DONE cmt | em 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
4448:000 | DONE ins | em 16 16 | 005d0d | 20 8b 5b    |                 jsr 005b8b           NAME>INT ( nt -- xt )
4449:000 | DONE wsp | em 16 16 |        |             |
4450:000 | DONE cmt | em 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
4451:000 | DONE cmt | em 16 16 |        |             |                 ; with xt
4452:000 | DONE ins | em 16 16 | 005d10 | b2 1c       |                 lda.di 00001c        LDA (TMP1) - get status byte of word
4453:000 | DONE ins | em 16 16 | 005d12 | eb          |                 xba                  flags are MSB
4454:000 | DONE ins | em 16 16 | 005d13 | 29 04 00    |                 and.# IM             mask everything but Immediate bit
4455:000 | DONE ins | em 16 16 | 005d16 | f0 04       |                 beq 005d1c           
4456:000 | DONE wsp | em 16 16 |        |             |
4457:000 | DONE cmt | em 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
4458:000 | DONE cmt | em 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
4459:000 | DONE cmt | em 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
4460:000 | DONE ins | em 16 16 | 005d18 | 20 89 56    |                 jsr 005689           
4461:000 | DONE ins | em 16 16 | 005d1b | 60          |                 rts                  
4462:000 | DONE wsp | em 16 16 |        |             |
4463:000 | DONE lbl | em 16 16 | 005d1c |             | pp_not_immediate                     
4464:000 | DONE cmt | em 16 16 |        |             |                 ; This is not an immediate word, so we enact "deferred
4465:000 | DONE cmt | em 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
4466:000 | DONE cmt | em 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
4467:000 | DONE cmt | em 16 16 |        |             |                 ; a subroutine jump to COMPILE,
4468:000 | DONE ins | em 16 16 | 005d1c | f4 e6 5a    |                 phe.# 005ae6         PEA LITERAL_RT
4469:000 | DONE ins | em 16 16 | 005d1f | 20 4f 6a    |                 jsr 006a4f           
4470:000 | DONE wsp | em 16 16 |        |             |
4471:000 | DONE cmt | em 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
4472:000 | DONE cmt | em 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
4473:000 | DONE cmt | em 16 16 |        |             |                 ; and ruin everything
4474:000 | DONE ins | em 16 16 | 005d22 | 20 42 52    |                 jsr 005242           
4475:000 | DONE wsp | em 16 16 |        |             |
4476:000 | DONE cmt | em 16 16 |        |             |                 ; compile COMPILE,
4477:000 | DONE ins | em 16 16 | 005d25 | f4 89 56    |                 phe.# 005689         
4478:000 | DONE ins | em 16 16 | 005d28 | 20 4f 6a    |                 jsr 006a4f           
4479:000 | DONE wsp | em 16 16 |        |             |
4480:000 | DONE lbl | em 16 16 | 005d2b |             | z_postpone                           
4480:001 | DONE ins | em 16 16 | 005d2b | 60          |                 rts                  
4481:000 | DONE wsp | em 16 16 |        |             |
4482:000 | DONE wsp | em 16 16 |        |             |
4483:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4484:000 | DONE cmt | em 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
4485:000 | DONE cmt | em 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
4486:000 | DONE cmt | em 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
4487:000 | DONE cmt | em 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
4488:000 | DONE cmt | em 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
4489:000 | DONE cmt | em 16 16 |        |             | ; actually short enough to make that reasonable
4490:000 | DONE cmt | em 16 16 |        |             | ; TODO consider special case in COMPILE, see there
4491:000 | DONE lbl | em 16 16 | 005d2c |             | xt_rfetch                            
4492:000 | DONE cmt | em 16 16 |        |             |                 ; get return address that is on top of the return stack
4493:000 | DONE ins | em 16 16 | 005d2c | 68          |                 pla                  
4494:000 | DONE wsp | em 16 16 |        |             |
4495:000 | DONE ins | em 16 16 | 005d2d | ca          |                 dex                  
4496:000 | DONE ins | em 16 16 | 005d2e | ca          |                 dex                  
4497:000 | DONE ins | em 16 16 | 005d2f | 94 00       |                 sty.dx 00            
4498:000 | DONE wsp | em 16 16 |        |             |
4499:000 | DONE ins | em 16 16 | 005d31 | 7a          |                 ply                  get top of return stack and push copy back again
4500:000 | DONE ins | em 16 16 | 005d32 | 5a          |                 phy                  
4501:000 | DONE wsp | em 16 16 |        |             |
4502:000 | DONE ins | em 16 16 | 005d33 | 48          |                 pha                  restore the return address
4503:000 | DONE wsp | em 16 16 |        |             |
4504:000 | DONE lbl | em 16 16 | 005d34 |             | z_rfetch                             
4504:001 | DONE ins | em 16 16 | 005d34 | 60          |                 rts                  
4505:000 | DONE wsp | em 16 16 |        |             |
4506:000 | DONE wsp | em 16 16 |        |             |
4507:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4508:000 | DONE cmt | em 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
4509:000 | DONE cmt | em 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
4510:000 | DONE cmt | em 16 16 |        |             | ; jump address out of the way first.
4511:000 | DONE cmt | em 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
4512:000 | DONE lbl | em 16 16 | 005d35 |             | xt_fromr                             
4513:000 | DONE cmt | em 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
4514:000 | DONE cmt | em 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
4515:000 | DONE cmt | em 16 16 |        |             |                 ; a waste of nine cycles
4516:000 | DONE ins | em 16 16 | 005d35 | 68          |                 pla                  
4517:000 | DONE cmt | em 16 16 |        |             |                 ; --- cut for native coding ---
4518:000 | DONE wsp | em 16 16 |        |             |
4519:000 | DONE ins | em 16 16 | 005d36 | ca          |                 dex                  
4520:000 | DONE ins | em 16 16 | 005d37 | ca          |                 dex                  
4521:000 | DONE ins | em 16 16 | 005d38 | 94 00       |                 sty.dx 00            
4522:000 | DONE wsp | em 16 16 |        |             |
4523:000 | DONE ins | em 16 16 | 005d3a | 7a          |                 ply                  the actual work
4524:000 | DONE wsp | em 16 16 |        |             |
4525:000 | DONE cmt | em 16 16 |        |             |                 ; --- cut for native coding ---
4526:000 | DONE ins | em 16 16 | 005d3b | 48          |                 pha                  get return address back
4527:000 | DONE wsp | em 16 16 |        |             |
4528:000 | DONE lbl | em 16 16 | 005d3c |             | z_fromr                              
4528:001 | DONE ins | em 16 16 | 005d3c | 60          |                 rts                  
4529:000 | DONE wsp | em 16 16 |        |             |
4530:000 | DONE wsp | em 16 16 |        |             |
4531:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4532:000 | DONE cmt | em 16 16 |        |             | ; RECURSE ( -- ) X bytes / X cycles
4533:000 | DONE cmt | em 16 16 |        |             | ; Get the current definition to call itself This may not be native compile. Test
4534:000 | DONE cmt | em 16 16 |        |             | ; with " : GCD ( a b -- gcd) ?DUP IF TUCK MOD RECURSE THEN ;" for instance with
4535:000 | DONE cmt | em 16 16 |        |             | ; "784 48 GCD ." --> 16 ; example from
4536:000 | DONE cmt | em 16 16 |        |             | ; http://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm
4537:000 | DONE lbl | em 16 16 | 005d3d |             | xt_recurse                           
4538:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4539:000 | DONE cmt | em 16 16 |        |             |                 ; save JSR instruction
4540:000 | DONE ins | em 16 16 | 005d3d | a9 20 00    |                 lda.# 0020           
4541:000 | DONE ins | em 16 16 | 005d40 | 92 00       |                 sta.di 000000        
4542:000 | DONE ins | em 16 16 | 005d42 | e6 00       |                 inc.d 000000         
4543:000 | DONE wsp | em 16 16 |        |             |
4544:000 | DONE cmt | em 16 16 |        |             |                 ; The temporary variable WORKWORD points to the nt of the word,
4545:000 | DONE cmt | em 16 16 |        |             |                 ; not it's xt, which is kept four bytes below
4546:000 | DONE ins | em 16 16 | 005d44 | a5 04       |                 lda.d 000004         
4547:000 | DONE ins | em 16 16 | 005d46 | 1a          |                 inc.a                
4548:000 | DONE ins | em 16 16 | 005d47 | 1a          |                 inc.a                
4549:000 | DONE ins | em 16 16 | 005d48 | 1a          |                 inc.a                
4550:000 | DONE ins | em 16 16 | 005d49 | 1a          |                 inc.a                
4551:000 | DONE wsp | em 16 16 |        |             |
4552:000 | DONE ins | em 16 16 | 005d4a | 5a          |                 phy                  
4553:000 | DONE ins | em 16 16 | 005d4b | a8          |                 tay                  
4554:000 | DONE ins | em 16 16 | 005d4c | b9 00 00    |                 lda.y 0000           
4555:000 | DONE ins | em 16 16 | 005d4f | 7a          |                 ply                  
4556:000 | DONE wsp | em 16 16 |        |             |
4557:000 | DONE ins | em 16 16 | 005d50 | 92 00       |                 sta.di 000000        
4558:000 | DONE ins | em 16 16 | 005d52 | e6 00       |                 inc.d 000000         
4559:000 | DONE ins | em 16 16 | 005d54 | e6 00       |                 inc.d 000000         
4560:000 | DONE wsp | em 16 16 |        |             |
4561:000 | DONE lbl | em 16 16 | 005d56 |             | z_recurse                            
4561:001 | DONE ins | em 16 16 | 005d56 | 60          |                 rts                  
4562:000 | DONE wsp | em 16 16 |        |             |
4563:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4564:000 | DONE cmt | em 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
4565:000 | DONE cmt | em 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
4566:000 | DONE cmt | em 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
4567:000 | DONE cmt | em 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
4568:000 | DONE cmt | em 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
4569:000 | DONE cmt | em 16 16 |        |             | ; containing no characters is considered successful. If there is no input
4570:000 | DONE cmt | em 16 16 |        |             | ; available from the current input source, return false. When the input source
4571:000 | DONE cmt | em 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
4572:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
4573:000 | DONE cmt | em 16 16 |        |             | ; and Conklin & Rather p. 156
4574:000 | DONE lbl | em 16 16 | 005d57 |             | xt_refill                            
4575:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4576:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4577:000 | DONE cmt | em 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
4578:000 | DONE cmt | em 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
4579:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
4580:000 | DONE ins | em 16 16 | 005d57 | a5 06       |                 lda.d 000006         
4581:000 | DONE ins | em 16 16 | 005d59 | d0 15       |                 bne 005d70           
4582:000 | DONE wsp | em 16 16 |        |             |
4583:000 | DONE cmt | em 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
4584:000 | DONE cmt | em 16 16 |        |             |                 ; with ACCEPT.
4585:000 | DONE ins | em 16 16 | 005d5b | ca          |                 dex                  
4586:000 | DONE ins | em 16 16 | 005d5c | ca          |                 dex                  
4587:000 | DONE ins | em 16 16 | 005d5d | ca          |                 dex                  
4588:000 | DONE ins | em 16 16 | 005d5e | ca          |                 dex                  
4589:000 | DONE ins | em 16 16 | 005d5f | 94 02       |                 sty.dx 02            
4590:000 | DONE wsp | em 16 16 |        |             |
4591:000 | DONE ins | em 16 16 | 005d61 | a5 08       |                 lda.d 000008         address of current input buffer NOS
4592:000 | DONE ins | em 16 16 | 005d63 | 95 00       |                 sta.dx 00            
4593:000 | DONE ins | em 16 16 | 005d65 | a0 80 00    |                 ldy.# 000080         max number of chars to accept TOS
4594:000 | DONE wsp | em 16 16 |        |             |
4595:000 | DONE ins | em 16 16 | 005d68 | 20 ba 54    |                 jsr 0054ba           ( addr n1 -- n2)
4596:000 | DONE wsp | em 16 16 |        |             |
4597:000 | DONE cmt | em 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
4598:000 | DONE cmt | em 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
4599:000 | DONE ins | em 16 16 | 005d6b | a0 ff ff    |                 ldy.# 0ffff          
4600:000 | DONE wsp | em 16 16 |        |             |
4601:000 | DONE ins | em 16 16 | 005d6e | 80 10       |                 bra 005d80           
4602:000 | DONE wsp | em 16 16 |        |             |
4603:000 | DONE lbl | em 16 16 | 005d70 |             | refill_src_not_kbd                   
4604:000 | DONE cmt | em 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
4605:000 | DONE cmt | em 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
4606:000 | DONE ins | em 16 16 | 005d70 | 1a          |                 inc.a                
4607:000 | DONE ins | em 16 16 | 005d71 | d0 07       |                 bne 005d7a           
4608:000 | DONE wsp | em 16 16 |        |             |
4609:000 | DONE cmt | em 16 16 |        |             |                 ; Simply return FALSE flag as per specification
4610:000 | DONE ins | em 16 16 | 005d73 | ca          |                 dex                  
4611:000 | DONE ins | em 16 16 | 005d74 | ca          |                 dex                  
4612:000 | DONE ins | em 16 16 | 005d75 | 94 00       |                 sty.dx 00            
4613:000 | DONE ins | em 16 16 | 005d77 | a8          |                 tay                  
4614:000 | DONE wsp | em 16 16 |        |             |
4615:000 | DONE ins | em 16 16 | 005d78 | 80 06       |                 bra 005d80           
4616:000 | DONE wsp | em 16 16 |        |             |
4617:000 | DONE lbl | em 16 16 | 005d7a |             | refill_source_is_not_string          
4618:000 | DONE cmt | em 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
4619:000 | DONE cmt | em 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
4620:000 | DONE cmt | em 16 16 |        |             |                 ; report an error and jump to ABORT.
4621:000 | DONE ins | em 16 16 | 005d7a | a9 98 72    |                 lda.# 007298         
4622:000 | DONE ins | em 16 16 | 005d7d | 4c 70 6a    |                 jmp 006a70           
4623:000 | DONE wsp | em 16 16 |        |             |
4624:000 | DONE lbl | em 16 16 | 005d80 |             | z_refill                             
4624:001 | DONE ins | em 16 16 | 005d80 | 60          |                 rts                  dummy for compiling
4625:000 | DONE wsp | em 16 16 |        |             |
4626:000 | DONE wsp | em 16 16 |        |             |
4627:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4628:000 | DONE cmt | em 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
4629:000 | DONE cmt | em 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
4630:000 | DONE cmt | em 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry comes up on top!
4631:000 | DONE lbl | em 16 16 | 005d81 |             | xt_rot                               
4632:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4633:000 | DONE ins | em 16 16 | 005d81 | b5 00       |                 lda.dx 00            save b
4634:000 | DONE ins | em 16 16 | 005d83 | 94 00       |                 sty.dx 00            move c to NOS
4635:000 | DONE ins | em 16 16 | 005d85 | b4 02       |                 ldy.dx 02            move a to TOS
4636:000 | DONE ins | em 16 16 | 005d87 | 95 02       |                 sta.dx 02            save b as 3OS
4637:000 | DONE wsp | em 16 16 |        |             |
4638:000 | DONE lbl | em 16 16 | 005d89 |             | z_rot                                
4638:001 | DONE ins | em 16 16 | 005d89 | 60          |                 rts                  
4639:000 | DONE wsp | em 16 16 |        |             |
4640:000 | DONE wsp | em 16 16 |        |             |
4641:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4642:000 | DONE cmt | em 16 16 |        |             | ; RSHIFT ( n u -- u ) X bytes / X cycles
4643:000 | DONE cmt | em 16 16 |        |             | ; Shift TOS right, filling vacant bits with zero
4644:000 | DONE lbl | em 16 16 | 005d8a |             | xt_rshift                            
4645:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
4646:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
4647:000 | DONE ins | em 16 16 | 005d8a | 98          |                 tya                  
4648:000 | DONE ins | em 16 16 | 005d8b | 29 0f 00    |                 and.# 000f           
4649:000 | DONE ins | em 16 16 | 005d8e | f0 09       |                 beq 005d99           if zero shifts, we're done
4650:000 | DONE wsp | em 16 16 |        |             |
4651:000 | DONE ins | em 16 16 | 005d90 | a8          |                 tay                  number of shifts is TOS
4652:000 | DONE ins | em 16 16 | 005d91 | b5 00       |                 lda.dx 00            number is in NOS
4653:000 | DONE lbl | em 16 16 | 005d93 |             | rshift_loop                          
4654:000 | DONE ins | em 16 16 | 005d93 | 4a          |                 lsr.a                
4655:000 | DONE ins | em 16 16 | 005d94 | 88          |                 dey                  
4656:000 | DONE ins | em 16 16 | 005d95 | d0 fc       |                 bne 005d93           
4657:000 | DONE wsp | em 16 16 |        |             |
4658:000 | DONE ins | em 16 16 | 005d97 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
4659:000 | DONE wsp | em 16 16 |        |             |
4660:000 | DONE lbl | em 16 16 | 005d99 |             | rshift_done                          
4661:000 | DONE ins | em 16 16 | 005d99 | b4 00       |                 ldy.dx 00            
4662:000 | DONE ins | em 16 16 | 005d9b | e8          |                 inx                  
4663:000 | DONE ins | em 16 16 | 005d9c | e8          |                 inx                  
4664:000 | DONE wsp | em 16 16 |        |             |
4665:000 | DONE lbl | em 16 16 | 005d9d |             | z_rshift                             
4665:001 | DONE ins | em 16 16 | 005d9d | 60          |                 rts                  
4666:000 | DONE wsp | em 16 16 |        |             |
4667:000 | DONE wsp | em 16 16 |        |             |
4668:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4669:000 | DONE cmt | em 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
4670:000 | DONE cmt | em 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
4671:000 | DONE cmt | em 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
4672:000 | DONE cmt | em 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
4673:000 | DONE cmt | em 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
4674:000 | DONE cmt | em 16 16 |        |             | ; want it in code
4675:000 | DONE lbl | em 16 16 | 005d9e |             | xt_squote                            
4676:000 | DONE cmt | em 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
4677:000 | DONE cmt | em 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
4678:000 | DONE ins | em 16 16 | 005d9e | ca          |                 dex                  
4679:000 | DONE ins | em 16 16 | 005d9f | ca          |                 dex                  
4680:000 | DONE ins | em 16 16 | 005da0 | 94 00       |                 sty.dx 00            
4681:000 | DONE wsp | em 16 16 |        |             |
4682:000 | DONE ins | em 16 16 | 005da2 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
4683:000 | DONE ins | em 16 16 | 005da5 | 20 a7 5c    |                 jsr 005ca7           Returns ( addr u ) of string
4684:000 | DONE wsp | em 16 16 |        |             |
4685:000 | DONE cmt | em 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
4686:000 | DONE cmt | em 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
4687:000 | DONE cmt | em 16 16 |        |             |                 ; we are interpreting, we're done
4688:000 | DONE ins | em 16 16 | 005da8 | a5 14       |                 lda.d 000014         
4689:000 | DONE ins | em 16 16 | 005daa | d0 24       |                 bne 005dd0           
4690:000 | DONE wsp | em 16 16 |        |             |
4691:000 | DONE cmt | em 16 16 |        |             | 		; We copy our string to someplace safe because it lives
4692:000 | DONE cmt | em 16 16 |        |             |                 ; dangerously if we leave it in the input buffer. This might
4693:000 | DONE cmt | em 16 16 |        |             |                 ; seem like a lot of effort for a few bytes, but MVN is so fast
4694:000 | DONE cmt | em 16 16 |        |             |                 ; - 7 cycles per byte - that it is worth it. See
4695:000 | DONE cmt | em 16 16 |        |             |                 ; http://forum.6502.org/viewtopic.php?f=2&t=1685&p=50975#p50975
4696:000 | DONE cmt | em 16 16 |        |             |                 ; and http://6502.org/tutorials/65c816opcodes.html#6.6
4697:000 | DONE ins | em 16 16 | 005dac | ca          |                 dex                  
4698:000 | DONE ins | em 16 16 | 005dad | ca          |                 dex                  
4699:000 | DONE ins | em 16 16 | 005dae | 94 00       |                 sty.dx 00            
4700:000 | DONE ins | em 16 16 | 005db0 | a4 00       |                 ldy.d 000000         HERE  ( addr-s u addr-d )
4701:000 | DONE wsp | em 16 16 |        |             |
4702:000 | DONE ins | em 16 16 | 005db2 | b5 00       |                 lda.dx 00            SWAP ( addr-s addr-d u )
4703:000 | DONE ins | em 16 16 | 005db4 | 94 00       |                 sty.dx 00            
4704:000 | DONE ins | em 16 16 | 005db6 | a8          |                 tay                  
4705:000 | DONE wsp | em 16 16 |        |             |
4706:000 | DONE ins | em 16 16 | 005db7 | 5a          |                 phy                  save copy of u
4707:000 | DONE ins | em 16 16 | 005db8 | b5 00       |                 lda.dx 00            save copy of addr-d
4708:000 | DONE ins | em 16 16 | 005dba | 48          |                 pha                  
4709:000 | DONE wsp | em 16 16 |        |             |
4710:000 | DONE ins | em 16 16 | 005dbb | 20 77 5b    |                 jsr 005b77           
4711:000 | DONE wsp | em 16 16 |        |             |
4712:000 | DONE ins | em 16 16 | 005dbe | ca          |                 dex                  
4713:000 | DONE ins | em 16 16 | 005dbf | ca          |                 dex                  
4714:000 | DONE ins | em 16 16 | 005dc0 | ca          |                 dex                  
4715:000 | DONE ins | em 16 16 | 005dc1 | ca          |                 dex                  
4716:000 | DONE ins | em 16 16 | 005dc2 | 94 02       |                 sty.dx 02            
4717:000 | DONE wsp | em 16 16 |        |             |
4718:000 | DONE ins | em 16 16 | 005dc4 | 68          |                 pla                  get addr-d back
4719:000 | DONE ins | em 16 16 | 005dc5 | 95 00       |                 sta.dx 00            put NOS
4720:000 | DONE ins | em 16 16 | 005dc7 | 68          |                 pla                  get u back, put TOS
4721:000 | DONE ins | em 16 16 | 005dc8 | a8          |                 tay                  
4722:000 | DONE wsp | em 16 16 |        |             |
4723:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4724:000 | DONE ins | em 16 16 | 005dc9 | 18          |                 clc                  
4725:000 | DONE ins | em 16 16 | 005dca | 65 00       |                 adc.d 000000         
4726:000 | DONE ins | em 16 16 | 005dcc | 85 00       |                 sta.d 000000         
4727:000 | DONE wsp | em 16 16 |        |             |
4728:000 | DONE ins | em 16 16 | 005dce | 80 03       |                 bra 005dd3           
4729:000 | DONE wsp | em 16 16 |        |             |
4730:000 | DONE lbl | em 16 16 | 005dd0 |             | squote_compile                       
4731:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so we need SLITERAL
4732:000 | DONE ins | em 16 16 | 005dd0 | 20 f4 5d    |                 jsr 005df4           
4733:000 | DONE wsp | em 16 16 |        |             |
4734:000 | DONE lbl | em 16 16 | 005dd3 |             | z_squote                             
4734:001 | DONE ins | em 16 16 | 005dd3 | 60          |                 rts                  
4735:000 | DONE wsp | em 16 16 |        |             |
4736:000 | DONE wsp | em 16 16 |        |             |
4737:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4738:000 | DONE cmt | em 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
4739:000 | DONE cmt | em 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
4740:000 | DONE lbl | em 16 16 | 005dd4 |             | xt_stod                              
4741:000 | DONE ins | em 16 16 | 005dd4 | ca          |                 dex                  make room on stack
4742:000 | DONE ins | em 16 16 | 005dd5 | ca          |                 dex                  
4743:000 | DONE ins | em 16 16 | 005dd6 | 94 00       |                 sty.dx 00            
4744:000 | DONE wsp | em 16 16 |        |             |
4745:000 | DONE ins | em 16 16 | 005dd8 | 98          |                 tya                  force flag check
4746:000 | DONE ins | em 16 16 | 005dd9 | 10 05       |                 bpl 005de0           
4747:000 | DONE wsp | em 16 16 |        |             |
4748:000 | DONE cmt | em 16 16 |        |             |                 ; negative number, extend sign
4749:000 | DONE ins | em 16 16 | 005ddb | a0 ff ff    |                 ldy.# 0ffff          
4750:000 | DONE ins | em 16 16 | 005dde | 80 03       |                 bra 005de3           
4751:000 | DONE wsp | em 16 16 |        |             |
4752:000 | DONE lbl | em 16 16 | 005de0 |             | stod_pos                             
4753:000 | DONE cmt | em 16 16 |        |             |                 ; positive number
4754:000 | DONE ins | em 16 16 | 005de0 | a0 00 00    |                 ldy.# 0000           fall through
4755:000 | DONE wsp | em 16 16 |        |             |
4756:000 | DONE lbl | em 16 16 | 005de3 |             | z_stod                               
4756:001 | DONE ins | em 16 16 | 005de3 | 60          |                 rts                  
4757:000 | DONE wsp | em 16 16 |        |             |
4758:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4759:000 | DONE cmt | em 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
4760:000 | DONE cmt | em 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
4761:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
4762:000 | DONE cmt | em 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
4763:000 | DONE lbl | em 16 16 | 005de4 |             | xt_sign                              
4764:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4765:000 | DONE cmt | em 16 16 |        |             |                 ; See if number is negative
4766:000 | DONE ins | em 16 16 | 005de4 | 98          |                 tya                  force flag check
4767:000 | DONE ins | em 16 16 | 005de5 | 10 08       |                 bpl 005def           
4768:000 | DONE wsp | em 16 16 |        |             |
4769:000 | DONE cmt | em 16 16 |        |             |                 ; We're negative, overwrite number TOS
4770:000 | DONE ins | em 16 16 | 005de7 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
4771:000 | DONE wsp | em 16 16 |        |             |
4772:000 | DONE ins | em 16 16 | 005dea | 20 a0 5a    |                 jsr 005aa0           
4773:000 | DONE ins | em 16 16 | 005ded | 80 04       |                 bra 005df3           
4774:000 | DONE wsp | em 16 16 |        |             |
4775:000 | DONE lbl | em 16 16 | 005def |             | sign_plus                            
4776:000 | DONE ins | em 16 16 | 005def | b4 00       |                 ldy.dx 00            get rid of number and leave
4777:000 | DONE ins | em 16 16 | 005df1 | e8          |                 inx                  
4778:000 | DONE ins | em 16 16 | 005df2 | e8          |                 inx                  
4779:000 | DONE wsp | em 16 16 |        |             |
4780:000 | DONE lbl | em 16 16 | 005df3 |             | z_sign                               
4780:001 | DONE ins | em 16 16 | 005df3 | 60          |                 rts                  
4781:000 | DONE wsp | em 16 16 |        |             |
4782:000 | DONE wsp | em 16 16 |        |             |
4783:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4784:000 | DONE cmt | em 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
4785:000 | DONE cmt | em 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
4786:000 | DONE cmt | em 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
4787:000 | DONE cmt | em 16 16 |        |             | ; tmp2
4788:000 | DONE lbl | em 16 16 | 005df4 |             | xt_sliteral                          
4789:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4790:000 | DONE cmt | em 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
4791:000 | DONE cmt | em 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
4792:000 | DONE cmt | em 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
4793:000 | DONE cmt | em 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
4794:000 | DONE cmt | em 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
4795:000 | DONE ins | em 16 16 | 005df4 | b5 00       |                 lda.dx 00            Address of string is NOS
4796:000 | DONE ins | em 16 16 | 005df6 | 85 1c       |                 sta.d 00001c         
4797:000 | DONE ins | em 16 16 | 005df8 | 84 1e       |                 sty.d 00001e         keep copy of string length
4798:000 | DONE wsp | em 16 16 |        |             |
4799:000 | DONE ins | em 16 16 | 005dfa | e2 20       |                 sep 20               
4799:001 | DONE ctl | em  8 16 |        |             |         .!a8
4800:000 | DONE ins | em  8 16 | 005dfc | a9 4c       |                 lda.# 04c            opcode for JMP
4801:000 | DONE ins | em  8 16 | 005dfe | 92 00       |                 sta.di 000000        STA (CP)
4802:000 | DONE ins | em  8 16 | 005e00 | c2 20       |                 rep 20               
4802:001 | DONE ctl | em 16 16 |        |             |         .!a16
4803:000 | DONE ins | em 16 16 | 005e02 | e6 00       |                 inc.d 000000         
4804:000 | DONE wsp | em 16 16 |        |             |
4805:000 | DONE cmt | em 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
4806:000 | DONE cmt | em 16 16 |        |             |                 ; instruction itself ) + the length of the string
4807:000 | DONE ins | em 16 16 | 005e04 | a5 1e       |                 lda.d 00001e         string length
4808:000 | DONE ins | em 16 16 | 005e06 | 1a          |                 inc.a                
4809:000 | DONE ins | em 16 16 | 005e07 | 1a          |                 inc.a                
4810:000 | DONE wsp | em 16 16 |        |             |
4811:000 | DONE ins | em 16 16 | 005e08 | 18          |                 clc                  
4812:000 | DONE ins | em 16 16 | 005e09 | 65 00       |                 adc.d 000000         current address
4813:000 | DONE ins | em 16 16 | 005e0b | 92 00       |                 sta.di 000000        store jump target
4814:000 | DONE wsp | em 16 16 |        |             |
4815:000 | DONE cmt | em 16 16 |        |             |                 ; update CP to move past JMP instruction
4816:000 | DONE ins | em 16 16 | 005e0d | e6 00       |                 inc.d 000000         
4817:000 | DONE ins | em 16 16 | 005e0f | e6 00       |                 inc.d 000000         
4818:000 | DONE wsp | em 16 16 |        |             |
4819:000 | DONE cmt | em 16 16 |        |             |                 ; now we can safely copy the code
4820:000 | DONE ins | em 16 16 | 005e11 | 88          |                 dey                  last offset is one less than length
4821:000 | DONE ins | em 16 16 | 005e12 | e2 20       |                 sep 20               
4821:001 | DONE ctl | em  8 16 |        |             |         .!a8
4822:000 | DONE lbl | em  8 16 | 005e14 |             | sl_loop                              
4823:000 | DONE ins | em  8 16 | 005e14 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4824:000 | DONE ins | em  8 16 | 005e16 | 91 00       |                 sta.diy 000000       STA (CP),Y
4825:000 | DONE ins | em  8 16 | 005e18 | 88          |                 dey                  
4826:000 | DONE ins | em  8 16 | 005e19 | 10 f9       |                 bpl 005e14           
4827:000 | DONE wsp | em  8 16 |        |             |
4828:000 | DONE ins | em  8 16 | 005e1b | c2 20       |                 rep 20               
4828:001 | DONE ctl | em 16 16 |        |             |         .!a16
4829:000 | DONE cmt | em 16 16 |        |             |                 ; keep old CP as new address of string
4830:000 | DONE ins | em 16 16 | 005e1d | a5 00       |                 lda.d 000000         
4831:000 | DONE ins | em 16 16 | 005e1f | 85 1c       |                 sta.d 00001c         overwrites original address
4832:000 | DONE wsp | em 16 16 |        |             |
4833:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4834:000 | DONE ins | em 16 16 | 005e21 | 18          |                 clc                  
4835:000 | DONE ins | em 16 16 | 005e22 | 65 1e       |                 adc.d 00001e         length of string
4836:000 | DONE ins | em 16 16 | 005e24 | 85 00       |                 sta.d 000000         
4837:000 | DONE wsp | em 16 16 |        |             |
4838:000 | DONE cmt | em 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
4839:000 | DONE cmt | em 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
4840:000 | DONE cmt | em 16 16 |        |             |                 ; done, the code will look like this:
4841:000 | DONE cmt | em 16 16 |        |             |                 ;
4842:000 | DONE cmt | em 16 16 |        |             |                 ; xt -->    jmp a
4843:000 | DONE cmt | em 16 16 |        |             |                 ;           <string data bytes>
4844:000 | DONE cmt | em 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
4845:000 | DONE cmt | em 16 16 |        |             |                 ;           <string address>
4846:000 | DONE cmt | em 16 16 |        |             |                 ;           <string length>
4847:000 | DONE cmt | em 16 16 |        |             |                 ; rts -->
4848:000 | DONE cmt | em 16 16 |        |             |                 ;
4849:000 | DONE cmt | em 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
4850:000 | DONE cmt | em 16 16 |        |             |                 ; cells, not just one
4851:000 | DONE ins | em 16 16 | 005e26 | f4 3f 5e    |                 phe.# 005e3f         
4852:000 | DONE ins | em 16 16 | 005e29 | 20 4f 6a    |                 jsr 006a4f           
4853:000 | DONE wsp | em 16 16 |        |             |
4854:000 | DONE cmt | em 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
4855:000 | DONE cmt | em 16 16 |        |             |                 ; so we store the address first
4856:000 | DONE ins | em 16 16 | 005e2c | a5 1c       |                 lda.d 00001c         new address of string
4857:000 | DONE ins | em 16 16 | 005e2e | 48          |                 pha                  
4858:000 | DONE ins | em 16 16 | 005e2f | 20 4a 6a    |                 jsr 006a4a           
4859:000 | DONE wsp | em 16 16 |        |             |
4860:000 | DONE ins | em 16 16 | 005e32 | a5 1e       |                 lda.d 00001e         
4861:000 | DONE ins | em 16 16 | 005e34 | 48          |                 pha                  
4862:000 | DONE ins | em 16 16 | 005e35 | 20 4a 6a    |                 jsr 006a4a           
4863:000 | DONE wsp | em 16 16 |        |             |
4864:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up and leave
4865:000 | DONE ins | em 16 16 | 005e38 | b4 02       |                 ldy.dx 02            2DROP
4866:000 | DONE ins | em 16 16 | 005e3a | e8          |                 inx                  
4867:000 | DONE ins | em 16 16 | 005e3b | e8          |                 inx                  
4868:000 | DONE ins | em 16 16 | 005e3c | e8          |                 inx                  
4869:000 | DONE ins | em 16 16 | 005e3d | e8          |                 inx                  
4870:000 | DONE wsp | em 16 16 |        |             |
4871:000 | DONE lbl | em 16 16 | 005e3e |             | z_sliteral                           
4871:001 | DONE ins | em 16 16 | 005e3e | 60          |                 rts                  
4872:000 | DONE wsp | em 16 16 |        |             |
4873:000 | DONE lbl | em 16 16 | 005e3f |             | sliteral_rt                          
4874:000 | DONE cmt | em 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
4875:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
4876:000 | DONE cmt | em 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
4877:000 | DONE wsp | em 16 16 |        |             |
4878:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
4879:000 | DONE ins | em 16 16 | 005e3f | ca          |                 dex                  
4880:000 | DONE ins | em 16 16 | 005e40 | ca          |                 dex                  
4881:000 | DONE ins | em 16 16 | 005e41 | ca          |                 dex                  
4882:000 | DONE ins | em 16 16 | 005e42 | ca          |                 dex                  
4883:000 | DONE ins | em 16 16 | 005e43 | 94 02       |                 sty.dx 02            
4884:000 | DONE wsp | em 16 16 |        |             |
4885:000 | DONE cmt | em 16 16 |        |             |                 ; Get the address of the string address off the stack and
4886:000 | DONE cmt | em 16 16 |        |             |                 ; increase by one because of the RTS mechanics
4887:000 | DONE ins | em 16 16 | 005e45 | 7a          |                 ply                  
4888:000 | DONE ins | em 16 16 | 005e46 | c8          |                 iny                  
4889:000 | DONE wsp | em 16 16 |        |             |
4890:000 | DONE ins | em 16 16 | 005e47 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4891:000 | DONE ins | em 16 16 | 005e4a | 95 00       |                 sta.dx 00            save string address as NOS
4892:000 | DONE ins | em 16 16 | 005e4c | c8          |                 iny                  
4893:000 | DONE ins | em 16 16 | 005e4d | c8          |                 iny                  
4894:000 | DONE ins | em 16 16 | 005e4e | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
4895:000 | DONE wsp | em 16 16 |        |             |
4896:000 | DONE ins | em 16 16 | 005e51 | c8          |                 iny                  ... first, though, repair return jump
4897:000 | DONE ins | em 16 16 | 005e52 | 5a          |                 phy                  
4898:000 | DONE wsp | em 16 16 |        |             |
4899:000 | DONE ins | em 16 16 | 005e53 | a8          |                 tay                  TOS is now length of string
4900:000 | DONE wsp | em 16 16 |        |             |
4901:000 | DONE ins | em 16 16 | 005e54 | 60          |                 rts                  
4902:000 | DONE wsp | em 16 16 |        |             |
4903:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4904:000 | DONE cmt | em 16 16 |        |             | ; SM/REM ( d n1 -- n2 n3) X bytes / X cycles
4905:000 | DONE cmt | em 16 16 |        |             | ; Symmetic signed division. Compare FM/MOD. Code from Gforth, see
4906:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4907:000 | DONE cmt | em 16 16 |        |             | ; and http://git.savannah.gnu.org/cgit/gforth.git/tree/prim ; see
4908:000 | DONE cmt | em 16 16 |        |             | ; http://www.figuk.plus.com/build/arith.htm for variants. Forth is
4909:000 | DONE cmt | em 16 16 |        |             | ; SM/REM OVER >R DUP >R ABS -ROT DABS ROT UM/MOD R>
4910:000 | DONE cmt | em 16 16 |        |             | ; R@ XOR 0< IF NEGATE THEN R> 0< IF SWAP NEGATE SWAP THEN ;
4911:000 | DONE cmt | em 16 16 |        |             | ; TODO optimize further in assembler
4912:000 | DONE lbl | em 16 16 | 005e55 |             | xt_smrem                             
4913:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4914:000 | DONE ins | em 16 16 | 005e55 | 20 53 5c    |                 jsr 005c53           
4915:000 | DONE wsp | em 16 16 |        |             |
4916:000 | DONE ins | em 16 16 | 005e58 | 5a          |                 phy                  >R
4917:000 | DONE ins | em 16 16 | 005e59 | b4 00       |                 ldy.dx 00            
4918:000 | DONE ins | em 16 16 | 005e5b | e8          |                 inx                  
4919:000 | DONE ins | em 16 16 | 005e5c | e8          |                 inx                  
4920:000 | DONE wsp | em 16 16 |        |             |
4921:000 | DONE ins | em 16 16 | 005e5d | ca          |                 dex                  DUP
4922:000 | DONE ins | em 16 16 | 005e5e | ca          |                 dex                  
4923:000 | DONE ins | em 16 16 | 005e5f | 94 00       |                 sty.dx 00            
4924:000 | DONE wsp | em 16 16 |        |             |
4925:000 | DONE ins | em 16 16 | 005e61 | 5a          |                 phy                  >R
4926:000 | DONE ins | em 16 16 | 005e62 | b4 00       |                 ldy.dx 00            
4927:000 | DONE ins | em 16 16 | 005e64 | e8          |                 inx                  
4928:000 | DONE ins | em 16 16 | 005e65 | e8          |                 inx                  
4929:000 | DONE wsp | em 16 16 |        |             |
4930:000 | DONE ins | em 16 16 | 005e66 | 20 b1 54    |                 jsr 0054b1           ABS
4931:000 | DONE ins | em 16 16 | 005e69 | 20 6c 53    |                 jsr 00536c           -ROT
4932:000 | DONE ins | em 16 16 | 005e6c | 20 54 58    |                 jsr 005854           DABS
4933:000 | DONE ins | em 16 16 | 005e6f | 20 81 5d    |                 jsr 005d81           ROT
4934:000 | DONE ins | em 16 16 | 005e72 | 20 b1 5f    |                 jsr 005fb1           UM/MOD
4935:000 | DONE wsp | em 16 16 |        |             |
4936:000 | DONE ins | em 16 16 | 005e75 | ca          |                 dex                  R>
4937:000 | DONE ins | em 16 16 | 005e76 | ca          |                 dex                  
4938:000 | DONE ins | em 16 16 | 005e77 | 94 00       |                 sty.dx 00            
4939:000 | DONE ins | em 16 16 | 005e79 | 7a          |                 ply                  
4940:000 | DONE wsp | em 16 16 |        |             |
4941:000 | DONE ins | em 16 16 | 005e7a | ca          |                 dex                  R@
4942:000 | DONE ins | em 16 16 | 005e7b | ca          |                 dex                  
4943:000 | DONE ins | em 16 16 | 005e7c | 94 00       |                 sty.dx 00            
4944:000 | DONE ins | em 16 16 | 005e7e | 7a          |                 ply                  
4945:000 | DONE ins | em 16 16 | 005e7f | 5a          |                 phy                  
4946:000 | DONE wsp | em 16 16 |        |             |
4947:000 | DONE ins | em 16 16 | 005e80 | 20 92 60    |                 jsr 006092           XOR
4948:000 | DONE wsp | em 16 16 |        |             |
4949:000 | DONE ins | em 16 16 | 005e83 | 98          |                 tya                  0< IF
4950:000 | DONE ins | em 16 16 | 005e84 | 10 09       |                 bpl 005e8f           
4951:000 | DONE wsp | em 16 16 |        |             |
4952:000 | DONE ins | em 16 16 | 005e86 | b4 00       |                 ldy.dx 00            from IF
4953:000 | DONE ins | em 16 16 | 005e88 | e8          |                 inx                  
4954:000 | DONE ins | em 16 16 | 005e89 | e8          |                 inx                  
4955:000 | DONE wsp | em 16 16 |        |             |
4956:000 | DONE ins | em 16 16 | 005e8a | 20 ad 5b    |                 jsr 005bad           NEGATE
4957:000 | DONE ins | em 16 16 | 005e8d | 80 04       |                 bra 005e93           
4958:000 | DONE lbl | em 16 16 | 005e8f |             | smrem_1                              
4959:000 | DONE ins | em 16 16 | 005e8f | b4 00       |                 ldy.dx 00            from IF
4960:000 | DONE ins | em 16 16 | 005e91 | e8          |                 inx                  
4961:000 | DONE ins | em 16 16 | 005e92 | e8          |                 inx                  
4962:000 | DONE wsp | em 16 16 |        |             |
4963:000 | DONE lbl | em 16 16 | 005e93 |             | smrem_1_1                            
4964:000 | DONE ins | em 16 16 | 005e93 | ca          |                 dex                  R>
4965:000 | DONE ins | em 16 16 | 005e94 | ca          |                 dex                  
4966:000 | DONE ins | em 16 16 | 005e95 | 94 00       |                 sty.dx 00            
4967:000 | DONE ins | em 16 16 | 005e97 | 7a          |                 ply                  
4968:000 | DONE wsp | em 16 16 |        |             |
4969:000 | DONE ins | em 16 16 | 005e98 | 98          |                 tya                  0< IF
4970:000 | DONE ins | em 16 16 | 005e99 | 10 0f       |                 bpl 005eaa           
4971:000 | DONE wsp | em 16 16 |        |             |
4972:000 | DONE ins | em 16 16 | 005e9b | b4 00       |                 ldy.dx 00            from IF
4973:000 | DONE ins | em 16 16 | 005e9d | e8          |                 inx                  
4974:000 | DONE ins | em 16 16 | 005e9e | e8          |                 inx                  
4975:000 | DONE wsp | em 16 16 |        |             |
4976:000 | DONE ins | em 16 16 | 005e9f | 20 ea 5e    |                 jsr 005eea           
4977:000 | DONE ins | em 16 16 | 005ea2 | 20 ad 5b    |                 jsr 005bad           
4978:000 | DONE ins | em 16 16 | 005ea5 | 20 ea 5e    |                 jsr 005eea           
4979:000 | DONE ins | em 16 16 | 005ea8 | 80 04       |                 bra 005eae           
4980:000 | DONE wsp | em 16 16 |        |             |
4981:000 | DONE lbl | em 16 16 | 005eaa |             | smrem_2                              
4982:000 | DONE ins | em 16 16 | 005eaa | b4 00       |                 ldy.dx 00            
4983:000 | DONE ins | em 16 16 | 005eac | e8          |                 inx                  
4984:000 | DONE ins | em 16 16 | 005ead | e8          |                 inx                  
4985:000 | DONE wsp | em 16 16 |        |             |
4986:000 | DONE wsp | em 16 16 |        |             |
4987:000 | DONE lbl | em 16 16 | 005eae |             | smrem_2_1                            
4988:000 | DONE wsp | em 16 16 |        |             |
4989:000 | DONE lbl | em 16 16 | 005eae |             | z_smrem                              
4989:001 | DONE ins | em 16 16 | 005eae | 60          |                 rts                  
4990:000 | DONE wsp | em 16 16 |        |             |
4991:000 | DONE wsp | em 16 16 |        |             |
4992:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4993:000 | DONE cmt | em 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
4994:000 | DONE cmt | em 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
4995:000 | DONE cmt | em 16 16 |        |             | ; ANSI Forth
4996:000 | DONE wsp | em 16 16 |        |             |
4997:000 | DONE lbl | em 16 16 | 005eaf |             | xt_source                            
4998:000 | DONE ins | em 16 16 | 005eaf | ca          |                 dex                  make room on Data Stack
4999:000 | DONE ins | em 16 16 | 005eb0 | ca          |                 dex                  
5000:000 | DONE ins | em 16 16 | 005eb1 | ca          |                 dex                  
5001:000 | DONE ins | em 16 16 | 005eb2 | ca          |                 dex                  
5002:000 | DONE ins | em 16 16 | 005eb3 | 94 02       |                 sty.dx 02            
5003:000 | DONE wsp | em 16 16 |        |             |
5004:000 | DONE ins | em 16 16 | 005eb5 | a5 08       |                 lda.d 000008         address of current input buffer as NOS
5005:000 | DONE ins | em 16 16 | 005eb7 | 95 00       |                 sta.dx 00            
5006:000 | DONE wsp | em 16 16 |        |             |
5007:000 | DONE ins | em 16 16 | 005eb9 | a4 0a       |                 ldy.d 00000a         length of current input buffer as TOS
5008:000 | DONE wsp | em 16 16 |        |             |
5009:000 | DONE lbl | em 16 16 | 005ebb |             | z_source                             
5009:001 | DONE ins | em 16 16 | 005ebb | 60          |                 rts                  
5010:000 | DONE wsp | em 16 16 |        |             |
5011:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5012:000 | DONE cmt | em 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
5013:000 | DONE cmt | em 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
5014:000 | DONE cmt | em 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
5015:000 | DONE cmt | em 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
5016:000 | DONE lbl | em 16 16 | 005ebc |             | xt_source-id                         
5017:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5018:000 | DONE ins | em 16 16 | 005ebc | ca          |                 dex                  
5019:000 | DONE ins | em 16 16 | 005ebd | ca          |                 dex                  
5020:000 | DONE ins | em 16 16 | 005ebe | 94 00       |                 sty.dx 00            
5021:000 | DONE ins | em 16 16 | 005ec0 | a4 06       |                 ldy.d 000006         
5022:000 | DONE wsp | em 16 16 |        |             |
5023:000 | DONE lbl | em 16 16 | 005ec2 |             | z_source-id                          
5023:001 | DONE ins | em 16 16 | 005ec2 | 60          |                 rts                  
5024:000 | DONE wsp | em 16 16 |        |             |
5025:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5026:000 | DONE cmt | em 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
5027:000 | DONE cmt | em 16 16 |        |             | ; Print one ASCII space character. We need to leave JSR EMIT_A as a subroutine
5028:000 | DONE cmt | em 16 16 |        |             | ; instead of JSR/RTS it to JMP to allow native compile
5029:000 | DONE cmt | em 16 16 |        |             | ; TODO add PAUSE for multitasking
5030:000 | DONE lbl | em 16 16 | 005ec3 |             | xt_space                             
5031:000 | DONE ins | em 16 16 | 005ec3 | a9 20 00    |                 lda.# AscSP          
5032:000 | DONE ins | em 16 16 | 005ec6 | 20 f1 58    |                 jsr 0058f1           
5033:000 | DONE wsp | em 16 16 |        |             |
5034:000 | DONE lbl | em 16 16 | 005ec9 |             | z_space                              
5034:001 | DONE ins | em 16 16 | 005ec9 | 60          |                 rts                  
5035:000 | DONE wsp | em 16 16 |        |             |
5036:000 | DONE wsp | em 16 16 |        |             |
5037:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5038:000 | DONE cmt | em 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
5039:000 | DONE cmt | em 16 16 |        |             | ; Print u spaces
5040:000 | DONE cmt | em 16 16 |        |             | ; TODO add PAUSE for multitasking
5041:000 | DONE lbl | em 16 16 | 005eca |             | xt_spaces                            
5042:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5043:000 | DONE wsp | em 16 16 |        |             |
5044:000 | DONE lbl | em 16 16 | 005eca |             | spaces_loop                          
5045:000 | DONE ins | em 16 16 | 005eca | 88          |                 dey                  this also handles case u=0
5046:000 | DONE ins | em 16 16 | 005ecb | 30 08       |                 bmi 005ed5           
5047:000 | DONE wsp | em 16 16 |        |             |
5048:000 | DONE ins | em 16 16 | 005ecd | a9 20 00    |                 lda.# 0020           
5049:000 | DONE ins | em 16 16 | 005ed0 | 20 f1 58    |                 jsr 0058f1           
5050:000 | DONE wsp | em 16 16 |        |             |
5051:000 | DONE ins | em 16 16 | 005ed3 | 80 f5       |                 bra 005eca           
5052:000 | DONE wsp | em 16 16 |        |             |
5053:000 | DONE lbl | em 16 16 | 005ed5 |             | spaces_done                          
5054:000 | DONE ins | em 16 16 | 005ed5 | b4 00       |                 ldy.dx 00            DROP
5055:000 | DONE ins | em 16 16 | 005ed7 | e8          |                 inx                  
5056:000 | DONE ins | em 16 16 | 005ed8 | e8          |                 inx                  
5057:000 | DONE wsp | em 16 16 |        |             |
5058:000 | DONE lbl | em 16 16 | 005ed9 |             | z_spaces                             
5058:001 | DONE ins | em 16 16 | 005ed9 | 60          |                 rts                  
5059:000 | DONE wsp | em 16 16 |        |             |
5060:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5061:000 | DONE cmt | em 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
5062:000 | DONE cmt | em 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
5063:000 | DONE cmt | em 16 16 |        |             | ; more than UM* DROP
5064:000 | DONE lbl | em 16 16 | 005eda |             | xt_star                              
5065:000 | DONE ins | em 16 16 | 005eda | 20 52 5f    |                 jsr 005f52           
5066:000 | DONE wsp | em 16 16 |        |             |
5067:000 | DONE ins | em 16 16 | 005edd | b4 00       |                 ldy.dx 00            DROP
5068:000 | DONE ins | em 16 16 | 005edf | e8          |                 inx                  
5069:000 | DONE ins | em 16 16 | 005ee0 | e8          |                 inx                  
5070:000 | DONE wsp | em 16 16 |        |             |
5071:000 | DONE lbl | em 16 16 | 005ee1 |             | z_star                               
5071:001 | DONE ins | em 16 16 | 005ee1 | 60          |                 rts                  
5072:000 | DONE wsp | em 16 16 |        |             |
5073:000 | DONE wsp | em 16 16 |        |             |
5074:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5075:000 | DONE cmt | em 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
5076:000 | DONE cmt | em 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
5077:000 | DONE cmt | em 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
5078:000 | DONE cmt | em 16 16 |        |             | ; changed directly by the user; see
5079:000 | DONE cmt | em 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
5080:000 | DONE lbl | em 16 16 | 005ee2 |             | xt_state                             
5081:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5082:000 | DONE ins | em 16 16 | 005ee2 | ca          |                 dex                  
5083:000 | DONE ins | em 16 16 | 005ee3 | ca          |                 dex                  
5084:000 | DONE ins | em 16 16 | 005ee4 | 94 00       |                 sty.dx 00            
5085:000 | DONE ins | em 16 16 | 005ee6 | a0 14 00    |                 ldy.# 000014         
5086:000 | DONE wsp | em 16 16 |        |             |
5087:000 | DONE lbl | em 16 16 | 005ee9 |             | z_state                              
5087:001 | DONE ins | em 16 16 | 005ee9 | 60          |                 rts                  
5088:000 | DONE wsp | em 16 16 |        |             |
5089:000 | DONE wsp | em 16 16 |        |             |
5090:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5091:000 | DONE cmt | em 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
5092:000 | DONE cmt | em 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
5093:000 | DONE cmt | em 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
5094:000 | DONE lbl | em 16 16 | 005eea |             | xt_swap                              
5095:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5096:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5097:000 | DONE ins | em 16 16 | 005eea | b5 00       |                 lda.dx 00            
5098:000 | DONE ins | em 16 16 | 005eec | 94 00       |                 sty.dx 00            
5099:000 | DONE ins | em 16 16 | 005eee | a8          |                 tay                  
5100:000 | DONE wsp | em 16 16 |        |             |
5101:000 | DONE lbl | em 16 16 | 005eef |             | z_swap                               
5101:001 | DONE ins | em 16 16 | 005eef | 60          |                 rts                  
5102:000 | DONE wsp | em 16 16 |        |             |
5103:000 | DONE wsp | em 16 16 |        |             |
5104:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5105:000 | DONE cmt | em 16 16 |        |             | ; TO ( n "name" -- ) X bytes / X cycles
5106:000 | DONE cmt | em 16 16 |        |             | ; Change the value of a VALUE. Note that in theory this would work with CONSTANT
5107:000 | DONE cmt | em 16 16 |        |             | ; as well, but we frown on this behavior. Note that while it is in violation of
5108:000 | DONE cmt | em 16 16 |        |             | ; ANS Forth, we can change the number in a VALUE with <number> ' <value> >BODY
5109:000 | DONE cmt | em 16 16 |        |             | ; +!  just as you can with Gforth
5110:000 | DONE cmt | em 16 16 |        |             | ; TODO unroll this to assembler
5111:000 | DONE lbl | em 16 16 | 005ef0 |             | xt_to                                
5112:000 | DONE ins | em 16 16 | 005ef0 | 20 78 54    |                 jsr 005478           '
5113:000 | DONE ins | em 16 16 | 005ef3 | 20 34 51    |                 jsr 005134           >BODY
5114:000 | DONE ins | em 16 16 | 005ef6 | 20 cb 52    |                 jsr 0052cb           !
5115:000 | DONE wsp | em 16 16 |        |             |
5116:000 | DONE lbl | em 16 16 | 005ef9 |             | z_to                                 
5116:001 | DONE ins | em 16 16 | 005ef9 | 60          |                 rts                  
5117:000 | DONE wsp | em 16 16 |        |             |
5118:000 | DONE wsp | em 16 16 |        |             |
5119:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5120:000 | DONE cmt | em 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
5121:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
5122:000 | DONE lbl | em 16 16 | 005efa |             | xt_true                              
5123:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5124:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5125:000 | DONE ins | em 16 16 | 005efa | ca          |                 dex                  
5126:000 | DONE ins | em 16 16 | 005efb | ca          |                 dex                  
5127:000 | DONE ins | em 16 16 | 005efc | 94 00       |                 sty.dx 00            
5128:000 | DONE ins | em 16 16 | 005efe | a0 ff ff    |                 ldy.# 0ffff          
5129:000 | DONE wsp | em 16 16 |        |             |
5130:000 | DONE lbl | em 16 16 | 005f01 |             | z_true                               
5130:001 | DONE ins | em 16 16 | 005f01 | 60          |                 rts                  
5131:000 | DONE wsp | em 16 16 |        |             |
5132:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5133:000 | DONE cmt | em 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
5134:000 | DONE cmt | em 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
5135:000 | DONE cmt | em 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
5136:000 | DONE lbl | em 16 16 | 005f02 |             | xt_tuck                              
5137:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5138:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5139:000 | DONE ins | em 16 16 | 005f02 | ca          |                 dex                  
5140:000 | DONE ins | em 16 16 | 005f03 | ca          |                 dex                  
5141:000 | DONE ins | em 16 16 | 005f04 | b5 02       |                 lda.dx 2             
5142:000 | DONE ins | em 16 16 | 005f06 | 95 00       |                 sta.dx 0             
5143:000 | DONE ins | em 16 16 | 005f08 | 94 02       |                 sty.dx 2             
5144:000 | DONE wsp | em 16 16 |        |             |
5145:000 | DONE lbl | em 16 16 | 005f0a |             | z_tuck                               
5145:001 | DONE ins | em 16 16 | 005f0a | 60          |                 rts                  
5146:000 | DONE wsp | em 16 16 |        |             |
5147:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5148:000 | DONE cmt | em 16 16 |        |             | ; TYPE  ( addr u -- ) 23+ bytes / X cycles
5149:000 | DONE cmt | em 16 16 |        |             | ; Print character string if u is not 0. Works though EMIT and is affect by the
5150:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT revectoring
5151:000 | DONE cmt | em 16 16 |        |             | ; TODO LATER add PAUSE here for multitasking
5152:000 | DONE lbl | em 16 16 | 005f0b |             | xt_type                              
5153:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5154:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5155:000 | DONE cmt | em 16 16 |        |             |                 ; just leave if u is zero (empty string)
5156:000 | DONE ins | em 16 16 | 005f0b | 98          |                 tya                  force flag check of TOS
5157:000 | DONE ins | em 16 16 | 005f0c | f0 17       |                 beq 005f25           
5158:000 | DONE wsp | em 16 16 |        |             |
5159:000 | DONE ins | em 16 16 | 005f0e | b5 00       |                 lda.dx 00            get address from NOS
5160:000 | DONE ins | em 16 16 | 005f10 | 85 1c       |                 sta.d 00001c         
5161:000 | DONE ins | em 16 16 | 005f12 | 84 1e       |                 sty.d 00001e         number of chars is TOS
5162:000 | DONE ins | em 16 16 | 005f14 | a0 00 00    |                 ldy.# 0000           
5163:000 | DONE ins | em 16 16 | 005f17 | e2 20       |                 sep 20               
5163:001 | DONE ctl | em  8 16 |        |             |         .!a8
5164:000 | DONE lbl | em  8 16 | 005f19 |             | type_loop                            
5165:000 | DONE ins | em  8 16 | 005f19 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
5166:000 | DONE ins | em  8 16 | 005f1b | 20 f1 58    |                 jsr 0058f1           
5167:000 | DONE ins | em  8 16 | 005f1e | c8          |                 iny                  
5168:000 | DONE ins | em  8 16 | 005f1f | c4 1e       |                 cpy.d 00001e         
5169:000 | DONE ins | em  8 16 | 005f21 | d0 f6       |                 bne 005f19           
5170:000 | DONE wsp | em  8 16 |        |             |
5171:000 | DONE ins | em  8 16 | 005f23 | c2 20       |                 rep 20               
5171:001 | DONE ctl | em 16 16 |        |             |         .!a16
5172:000 | DONE lbl | em 16 16 | 005f25 |             | type_done                            
5173:000 | DONE cmt | em 16 16 |        |             |                 ; clear stack
5174:000 | DONE ins | em 16 16 | 005f25 | b4 02       |                 ldy.dx 02            
5175:000 | DONE ins | em 16 16 | 005f27 | e8          |                 inx                  
5176:000 | DONE ins | em 16 16 | 005f28 | e8          |                 inx                  
5177:000 | DONE ins | em 16 16 | 005f29 | e8          |                 inx                  
5178:000 | DONE ins | em 16 16 | 005f2a | e8          |                 inx                  
5179:000 | DONE wsp | em 16 16 |        |             |
5180:000 | DONE lbl | em 16 16 | 005f2b |             | z_type                               
5180:001 | DONE ins | em 16 16 | 005f2b | 60          |                 rts                  
5181:000 | DONE wsp | em 16 16 |        |             |
5182:000 | DONE wsp | em 16 16 |        |             |
5183:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5184:000 | DONE cmt | em 16 16 |        |             | ; UDOT ( n -- ) X bytes / X cycles
5185:000 | DONE cmt | em 16 16 |        |             | ; Print unsigned number. This is based on the Forth word
5186:000 | DONE cmt | em 16 16 |        |             | ; 0 <# #S #> TYPE SPACE but uses the general print_u routine
5187:000 | DONE cmt | em 16 16 |        |             | ; that .S and DUMP use as well. We need to keep JSR EMIT_A instead of JSR/RTS it
5188:000 | DONE cmt | em 16 16 |        |             | ; to JMP to allow native compile
5189:000 | DONE lbl | em 16 16 | 005f2c |             | xt_udot                              
5190:000 | DONE ins | em 16 16 | 005f2c | 20 8e 6a    |                 jsr 006a8e           ( n -- )
5191:000 | DONE wsp | em 16 16 |        |             |
5192:000 | DONE ins | em 16 16 | 005f2f | a9 20 00    |                 lda.# 0020           SPACE
5193:000 | DONE ins | em 16 16 | 005f32 | 20 f1 58    |                 jsr 0058f1           
5194:000 | DONE wsp | em 16 16 |        |             |
5195:000 | DONE lbl | em 16 16 | 005f35 |             | z_udot                               
5195:001 | DONE ins | em 16 16 | 005f35 | 60          |                 rts                  
5196:000 | DONE wsp | em 16 16 |        |             |
5197:000 | DONE wsp | em 16 16 |        |             |
5198:000 | DONE wsp | em 16 16 |        |             |
5199:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5200:000 | DONE cmt | em 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
5201:000 | DONE cmt | em 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
5202:000 | DONE cmt | em 16 16 |        |             | ; result and a single-cell remainder. Based on
5203:000 | DONE cmt | em 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
5204:000 | DONE cmt | em 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
5205:000 | DONE cmt | em 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
5206:000 | DONE cmt | em 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
5207:000 | DONE cmt | em 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
5208:000 | DONE lbl | em 16 16 | 005f36 |             | xt_udmod                             
5209:000 | DONE ins | em 16 16 | 005f36 | 20 bd 51    |                 jsr 0051bd           
5210:000 | DONE ins | em 16 16 | 005f39 | 20 98 53    |                 jsr 005398           
5211:000 | DONE ins | em 16 16 | 005f3c | 20 2c 5d    |                 jsr 005d2c           
5212:000 | DONE ins | em 16 16 | 005f3f | 20 b1 5f    |                 jsr 005fb1           
5213:000 | DONE ins | em 16 16 | 005f42 | 20 81 5d    |                 jsr 005d81           
5214:000 | DONE ins | em 16 16 | 005f45 | 20 81 5d    |                 jsr 005d81           
5215:000 | DONE ins | em 16 16 | 005f48 | 20 35 5d    |                 jsr 005d35           
5216:000 | DONE ins | em 16 16 | 005f4b | 20 b1 5f    |                 jsr 005fb1           
5217:000 | DONE ins | em 16 16 | 005f4e | 20 81 5d    |                 jsr 005d81           
5218:000 | DONE lbl | em 16 16 | 005f51 |             | z_udmod                              
5218:001 | DONE ins | em 16 16 | 005f51 | 60          |                 rts                  
5219:000 | DONE wsp | em 16 16 |        |             |
5220:000 | DONE wsp | em 16 16 |        |             |
5221:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5222:000 | DONE cmt | em 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
5223:000 | DONE cmt | em 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
5224:000 | DONE cmt | em 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
5225:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
5226:000 | DONE cmt | em 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
5227:000 | DONE cmt | em 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
5228:000 | DONE cmt | em 16 16 |        |             | ; call this "U*"
5229:000 | DONE wsp | em 16 16 |        |             |
5230:000 | DONE cmt | em 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
5231:000 | DONE cmt | em 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
5232:000 | DONE cmt | em 16 16 |        |             | ; consider switching to a table-supported version based on
5233:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
5234:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
5235:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
5236:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
5237:000 | DONE cmt | em 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
5238:000 | DONE lbl | em 16 16 | 005f52 |             | xt_umstar                            
5239:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5240:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
5241:000 | DONE ins | em 16 16 | 005f52 | 98          |                 tya                  
5242:000 | DONE ins | em 16 16 | 005f53 | f0 3d       |                 beq 005f92           
5243:000 | DONE ins | em 16 16 | 005f55 | b5 00       |                 lda.dx 00            
5244:000 | DONE ins | em 16 16 | 005f57 | f0 39       |                 beq 005f92           
5245:000 | DONE wsp | em 16 16 |        |             |
5246:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
5247:000 | DONE cmt | em 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
5248:000 | DONE cmt | em 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
5249:000 | DONE cmt | em 16 16 |        |             |                 ; answer
5250:000 | DONE ins | em 16 16 | 005f59 | c0 01 00    |                 cpy.# 0001           non-distructively
5251:000 | DONE ins | em 16 16 | 005f5c | f0 3b       |                 beq 005f99           
5252:000 | DONE ins | em 16 16 | 005f5e | b5 00       |                 lda.dx 00            
5253:000 | DONE ins | em 16 16 | 005f60 | 3a          |                 dec.a                don't care about distruction
5254:000 | DONE ins | em 16 16 | 005f61 | f0 39       |                 beq 005f9c           
5255:000 | DONE wsp | em 16 16 |        |             |
5256:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
5257:000 | DONE ins | em 16 16 | 005f63 | c0 02 00    |                 cpy.# 0002           
5258:000 | DONE ins | em 16 16 | 005f66 | f0 3b       |                 beq 005fa3           
5259:000 | DONE wsp | em 16 16 |        |             |
5260:000 | DONE ins | em 16 16 | 005f68 | b5 00       |                 lda.dx 00            
5261:000 | DONE ins | em 16 16 | 005f6a | c9 02 00    |                 cmp.# 0002           
5262:000 | DONE ins | em 16 16 | 005f6d | f0 38       |                 beq 005fa7           
5263:000 | DONE wsp | em 16 16 |        |             |
5264:000 | DONE cmt | em 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
5265:000 | DONE ins | em 16 16 | 005f6f | 84 1c       |                 sty.d 00001c         TOS number  "40"
5266:000 | DONE ins | em 16 16 | 005f71 | 85 1e       |                 sta.d 00001e         NOS number  "41"
5267:000 | DONE ins | em 16 16 | 005f73 | a0 10 00    |                 ldy.# &16            loop counter
5268:000 | DONE wsp | em 16 16 |        |             |
5269:000 | DONE ins | em 16 16 | 005f76 | a9 00 00    |                 lda.# 0000           
5270:000 | DONE ins | em 16 16 | 005f79 | 85 20       |                 sta.d 000020         Most Significat Word (MSW) of result
5271:000 | DONE wsp | em 16 16 |        |             |
5272:000 | DONE lbl | em 16 16 | 005f7b |             | umstar_loop                          
5273:000 | DONE ins | em 16 16 | 005f7b | 0a          |                 asl.a                useless for first iteration
5274:000 | DONE ins | em 16 16 | 005f7c | 26 20       |                 rol.d 000020         move carry into MSB, useless first iteration
5275:000 | DONE ins | em 16 16 | 005f7e | 06 1e       |                 asl.d 00001e         move bit of NOS number into carry
5276:000 | DONE wsp | em 16 16 |        |             |
5277:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
5278:000 | DONE cmt | em 16 16 |        |             |                 ; the next bit
5279:000 | DONE ins | em 16 16 | 005f80 | 90 07       |                 bcc 005f89           
5280:000 | DONE wsp | em 16 16 |        |             |
5281:000 | DONE ins | em 16 16 | 005f82 | 18          |                 clc                  
5282:000 | DONE ins | em 16 16 | 005f83 | 65 1c       |                 adc.d 00001c         we have a set bit, so add TOS
5283:000 | DONE wsp | em 16 16 |        |             |
5284:000 | DONE cmt | em 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
5285:000 | DONE ins | em 16 16 | 005f85 | 90 02       |                 bcc 005f89           
5286:000 | DONE ins | em 16 16 | 005f87 | e6 20       |                 inc.d 000020         
5287:000 | DONE wsp | em 16 16 |        |             |
5288:000 | DONE lbl | em 16 16 | 005f89 |             | umstar_counter                       
5289:000 | DONE ins | em 16 16 | 005f89 | 88          |                 dey                  
5290:000 | DONE ins | em 16 16 | 005f8a | d0 ef       |                 bne 005f7b           
5291:000 | DONE wsp | em 16 16 |        |             |
5292:000 | DONE cmt | em 16 16 |        |             |                 ; We're all done, clean up and leave
5293:000 | DONE ins | em 16 16 | 005f8c | 95 00       |                 sta.dx 00            store lower cell of number in NOS
5294:000 | DONE ins | em 16 16 | 005f8e | a4 20       |                 ldy.d 000020         store MSB in TOS as double cell
5295:000 | DONE wsp | em 16 16 |        |             |
5296:000 | DONE ins | em 16 16 | 005f90 | 80 1e       |                 bra 005fb0           don't use RTS so we can natively compile
5297:000 | DONE wsp | em 16 16 |        |             |
5298:000 | DONE lbl | em 16 16 | 005f92 |             | umstar_zero                          
5299:000 | DONE cmt | em 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
5300:000 | DONE ins | em 16 16 | 005f92 | a0 00 00    |                 ldy.# 0000           
5301:000 | DONE ins | em 16 16 | 005f95 | 94 00       |                 sty.dx 00            
5302:000 | DONE ins | em 16 16 | 005f97 | 80 17       |                 bra 005fb0           
5303:000 | DONE wsp | em 16 16 |        |             |
5304:000 | DONE lbl | em 16 16 | 005f99 |             | umstar_one_tos                       
5305:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is one, life is easy
5306:000 | DONE ins | em 16 16 | 005f99 | 88          |                 dey                  NOS is LSW, TOS becomes zero
5307:000 | DONE ins | em 16 16 | 005f9a | 80 14       |                 bra 005fb0           
5308:000 | DONE lbl | em 16 16 | 005f9c |             | umstar_one_nos                       
5309:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is one, life is easy
5310:000 | DONE ins | em 16 16 | 005f9c | 94 00       |                 sty.dx 00            
5311:000 | DONE ins | em 16 16 | 005f9e | a0 00 00    |                 ldy.# 0000           
5312:000 | DONE ins | em 16 16 | 005fa1 | 80 0d       |                 bra 005fb0           
5313:000 | DONE wsp | em 16 16 |        |             |
5314:000 | DONE lbl | em 16 16 | 005fa3 |             | umstar_two_tos                       
5315:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is two, life is easy
5316:000 | DONE ins | em 16 16 | 005fa3 | b5 00       |                 lda.dx 00            
5317:000 | DONE ins | em 16 16 | 005fa5 | 80 01       |                 bra 005fa8           
5318:000 | DONE lbl | em 16 16 | 005fa7 |             | umstar_two_nos                       
5319:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is two, life is still easy
5320:000 | DONE ins | em 16 16 | 005fa7 | 98          |                 tya                  
5321:000 | DONE lbl | em 16 16 | 005fa8 |             | umstar_two_common                    
5322:000 | DONE ins | em 16 16 | 005fa8 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
5323:000 | DONE ins | em 16 16 | 005fa9 | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
5324:000 | DONE wsp | em 16 16 |        |             |
5325:000 | DONE ins | em 16 16 | 005fab | a9 00 00    |                 lda.# 0000           
5326:000 | DONE ins | em 16 16 | 005fae | 2a          |                 rol.a                Rotate any Carry Flag into MSW
5327:000 | DONE ins | em 16 16 | 005faf | a8          |                 tay                  
5328:000 | DONE wsp | em 16 16 |        |             |
5329:000 | DONE lbl | em 16 16 | 005fb0 |             | z_umstar                             
5329:001 | DONE ins | em 16 16 | 005fb0 | 60          |                 rts                  
5330:000 | DONE wsp | em 16 16 |        |             |
5331:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5332:000 | DONE cmt | em 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
5333:000 | DONE cmt | em 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
5334:000 | DONE cmt | em 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
5335:000 | DONE cmt | em 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
5336:000 | DONE cmt | em 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
5337:000 | DONE cmt | em 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
5338:000 | DONE lbl | em 16 16 | 005fb1 |             | xt_ummod                             
5339:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5340:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5341:000 | DONE cmt | em 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
5342:000 | DONE cmt | em 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
5343:000 | DONE cmt | em 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
5344:000 | DONE cmt | em 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look like
5345:000 | DONE cmt | em 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
5346:000 | DONE cmt | em 16 16 |        |             |                 ;
5347:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
5348:000 | DONE cmt | em 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
5349:000 | DONE cmt | em 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
5350:000 | DONE cmt | em 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
5351:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
5352:000 | DONE cmt | em 16 16 |        |             |                 ;
5353:000 | DONE cmt | em 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
5354:000 | DONE cmt | em 16 16 |        |             |                 ; and low cell in 3OS
5355:000 | DONE wsp | em 16 16 |        |             |
5356:000 | DONE cmt | em 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
5357:000 | DONE cmt | em 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
5358:000 | DONE cmt | em 16 16 |        |             |                 ; to appear like in Gforth
5359:000 | DONE ins | em 16 16 | 005fb1 | 98          |                 tya                  force flag test
5360:000 | DONE ins | em 16 16 | 005fb2 | d0 06       |                 bne 005fba           
5361:000 | DONE wsp | em 16 16 |        |             |
5362:000 | DONE ins | em 16 16 | 005fb4 | a9 10 72    |                 lda.# 007210         
5363:000 | DONE ins | em 16 16 | 005fb7 | 4c 70 6a    |                 jmp 006a70           
5364:000 | DONE wsp | em 16 16 |        |             |
5365:000 | DONE lbl | em 16 16 | 005fba |             | ummod_notzero                        
5366:000 | DONE ins | em 16 16 | 005fba | 84 28       |                 sty.d 000028         Y is now free
5367:000 | DONE ins | em 16 16 | 005fbc | b5 00       |                 lda.dx 00            high cell of dividend
5368:000 | DONE ins | em 16 16 | 005fbe | 85 2a       |                 sta.d 00002a         
5369:000 | DONE ins | em 16 16 | 005fc0 | b5 02       |                 lda.dx 02            low cell of dividend
5370:000 | DONE ins | em 16 16 | 005fc2 | 85 2c       |                 sta.d 00002c         
5371:000 | DONE wsp | em 16 16 |        |             |
5372:000 | DONE cmt | em 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
5373:000 | DONE cmt | em 16 16 |        |             |                 ; Pointer, freeing X for index duty
5374:000 | DONE ins | em 16 16 | 005fc4 | e8          |                 inx                  
5375:000 | DONE ins | em 16 16 | 005fc5 | e8          |                 inx                  
5376:000 | DONE ins | em 16 16 | 005fc6 | 86 22       |                 stx.d 000022         
5377:000 | DONE wsp | em 16 16 |        |             |
5378:000 | DONE cmt | em 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
5379:000 | DONE cmt | em 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
5380:000 | DONE cmt | em 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
5381:000 | DONE cmt | em 16 16 |        |             |                 ; we did that already in a separate step
5382:000 | DONE ins | em 16 16 | 005fc8 | 38          |                 sec                  
5383:000 | DONE ins | em 16 16 | 005fc9 | a5 2a       |                 lda.d 00002a         
5384:000 | DONE ins | em 16 16 | 005fcb | e5 28       |                 sbc.d 000028         
5385:000 | DONE ins | em 16 16 | 005fcd | b0 21       |                 bcs 005ff0           
5386:000 | DONE wsp | em 16 16 |        |             |
5387:000 | DONE cmt | em 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
5388:000 | DONE cmt | em 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
5389:000 | DONE cmt | em 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
5390:000 | DONE cmt | em 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
5391:000 | DONE cmt | em 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
5392:000 | DONE cmt | em 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
5393:000 | DONE ins | em 16 16 | 005fcf | a2 11 00    |                 ldx.# &17            
5394:000 | DONE wsp | em 16 16 |        |             |
5395:000 | DONE lbl | em 16 16 | 005fd2 |             | ummod_shift                          
5396:000 | DONE cmt | em 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
5397:000 | DONE cmt | em 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
5398:000 | DONE cmt | em 16 16 |        |             |                 ; pushed off the other end in the last rotation
5399:000 | DONE ins | em 16 16 | 005fd2 | 26 2c       |                 rol.d 00002c         
5400:000 | DONE wsp | em 16 16 |        |             |
5401:000 | DONE cmt | em 16 16 |        |             |                 ; loop control
5402:000 | DONE ins | em 16 16 | 005fd4 | ca          |                 dex                  
5403:000 | DONE ins | em 16 16 | 005fd5 | f0 22       |                 beq 005ff9           
5404:000 | DONE wsp | em 16 16 |        |             |
5405:000 | DONE cmt | em 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
5406:000 | DONE cmt | em 16 16 |        |             |                 ; next bit in from high bit of low cell
5407:000 | DONE ins | em 16 16 | 005fd7 | 26 2a       |                 rol.d 00002a         
5408:000 | DONE ins | em 16 16 | 005fd9 | a9 00 00    |                 lda.# 0000           
5409:000 | DONE ins | em 16 16 | 005fdc | 2a          |                 rol.a                
5410:000 | DONE ins | em 16 16 | 005fdd | 85 2e       |                 sta.d 00002e         store old high bit of dividend
5411:000 | DONE wsp | em 16 16 |        |             |
5412:000 | DONE cmt | em 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
5413:000 | DONE cmt | em 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
5414:000 | DONE cmt | em 16 16 |        |             |                 ; cleared, divisor did not fit
5415:000 | DONE ins | em 16 16 | 005fdf | 38          |                 sec                  
5416:000 | DONE ins | em 16 16 | 005fe0 | a5 2a       |                 lda.d 00002a         
5417:000 | DONE ins | em 16 16 | 005fe2 | e5 28       |                 sbc.d 000028         
5418:000 | DONE ins | em 16 16 | 005fe4 | a8          |                 tay                  save difference in Y until we know if we need it
5419:000 | DONE wsp | em 16 16 |        |             |
5420:000 | DONE cmt | em 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
5421:000 | DONE cmt | em 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
5422:000 | DONE cmt | em 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
5423:000 | DONE cmt | em 16 16 |        |             |                 ; remains set
5424:000 | DONE ins | em 16 16 | 005fe5 | a5 2e       |                 lda.d 00002e         
5425:000 | DONE ins | em 16 16 | 005fe7 | e9 00 00    |                 sbc.# 0000           
5426:000 | DONE ins | em 16 16 | 005fea | 90 e6       |                 bcc 005fd2           
5427:000 | DONE wsp | em 16 16 |        |             |
5428:000 | DONE cmt | em 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
5429:000 | DONE cmt | em 16 16 |        |             |                 ; cell to what it would be after subtraction
5430:000 | DONE ins | em 16 16 | 005fec | 84 2a       |                 sty.d 00002a         
5431:000 | DONE ins | em 16 16 | 005fee | 80 e2       |                 bra 005fd2           
5432:000 | DONE wsp | em 16 16 |        |             |
5433:000 | DONE lbl | em 16 16 | 005ff0 |             | ummod_overflow                       
5434:000 | DONE cmt | em 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
5435:000 | DONE cmt | em 16 16 |        |             |                 ; in both the quotient and remainder
5436:000 | DONE ins | em 16 16 | 005ff0 | a6 22       |                 ldx.d 000022         restore DSP
5437:000 | DONE ins | em 16 16 | 005ff2 | a0 ff ff    |                 ldy.# 0ffff          
5438:000 | DONE ins | em 16 16 | 005ff5 | 94 00       |                 sty.dx 00            
5439:000 | DONE ins | em 16 16 | 005ff7 | 80 08       |                 bra 006001           go to end to enable native coding
5440:000 | DONE wsp | em 16 16 |        |             |
5441:000 | DONE lbl | em 16 16 | 005ff9 |             | ummod_complete                       
5442:000 | DONE ins | em 16 16 | 005ff9 | a6 22       |                 ldx.d 000022         restore DSP
5443:000 | DONE ins | em 16 16 | 005ffb | a4 2c       |                 ldy.d 00002c         quotient is TOS
5444:000 | DONE ins | em 16 16 | 005ffd | a5 2a       |                 lda.d 00002a         remainder is NOS
5445:000 | DONE ins | em 16 16 | 005fff | 95 00       |                 sta.dx 00            
5446:000 | DONE wsp | em 16 16 |        |             |
5447:000 | DONE lbl | em 16 16 | 006001 |             | z_ummod                              
5447:001 | DONE ins | em 16 16 | 006001 | 60          |                 rts                  
5448:000 | DONE wsp | em 16 16 |        |             |
5449:000 | DONE wsp | em 16 16 |        |             |
5450:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5451:000 | DONE cmt | em 16 16 |        |             | ; UNLOOP ( -- ; R: n n n -- ) X bytes / X cycles
5452:000 | DONE cmt | em 16 16 |        |             | ; Drop loop control stuff from Return Stack.
5453:000 | DONE cmt | em 16 16 |        |             | ; TODO make this faster
5454:000 | DONE lbl | em 16 16 | 006002 |             | xt_unloop                            
5455:000 | DONE cmt | em 16 16 |        |             |                 ; drop fudge number (limit/start) from DO/?DO off the Return
5456:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5457:000 | DONE ins | em 16 16 | 006002 | 68          |                 pla                  
5458:000 | DONE ins | em 16 16 | 006003 | 68          |                 pla                  
5459:000 | DONE wsp | em 16 16 |        |             |
5460:000 | DONE cmt | em 16 16 |        |             |                 ; Drop the LEAVE address that was below them as well
5461:000 | DONE ins | em 16 16 | 006004 | 68          |                 pla                  
5462:000 | DONE wsp | em 16 16 |        |             |
5463:000 | DONE lbl | em 16 16 | 006005 |             | z_unloop                             
5463:001 | DONE ins | em 16 16 | 006005 | 60          |                 rts                  
5464:000 | DONE wsp | em 16 16 |        |             |
5465:000 | DONE wsp | em 16 16 |        |             |
5466:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5467:000 | DONE cmt | em 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
5468:000 | DONE cmt | em 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not exclude the
5469:000 | DONE cmt | em 16 16 |        |             | ; space for PAD.
5470:000 | DONE lbl | em 16 16 | 006006 |             | xt_unused                            
5471:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5472:000 | DONE ins | em 16 16 | 006006 | a9 ff 4f    |                 lda.# 004fff         
5473:000 | DONE ins | em 16 16 | 006009 | 38          |                 sec                  
5474:000 | DONE ins | em 16 16 | 00600a | e5 00       |                 sbc.d 000000         current compile pointer
5475:000 | DONE wsp | em 16 16 |        |             |
5476:000 | DONE ins | em 16 16 | 00600c | ca          |                 dex                  
5477:000 | DONE ins | em 16 16 | 00600d | ca          |                 dex                  
5478:000 | DONE ins | em 16 16 | 00600e | 94 00       |                 sty.dx 00            
5479:000 | DONE wsp | em 16 16 |        |             |
5480:000 | DONE ins | em 16 16 | 006010 | a8          |                 tay                  
5481:000 | DONE wsp | em 16 16 |        |             |
5482:000 | DONE lbl | em 16 16 | 006011 |             | z_unused                             
5482:001 | DONE ins | em 16 16 | 006011 | 60          |                 rts                  
5483:000 | DONE wsp | em 16 16 |        |             |
5484:000 | DONE wsp | em 16 16 |        |             |
5485:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5486:000 | DONE cmt | em 16 16 |        |             | ; VALUE ( n "name" -- ) X bytes / X cycles
5487:000 | DONE cmt | em 16 16 |        |             | ; Associate a name with a value (like a constant) that can be changed (like
5488:000 | DONE cmt | em 16 16 |        |             | ; a variable) with TO. We use the routines as CONSTANT, see there.
5489:000 | DONE wsp | em 16 16 |        |             |
5490:000 | DONE wsp | em 16 16 |        |             |
5491:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5492:000 | DONE cmt | em 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
5493:000 | DONE cmt | em 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
5494:000 | DONE cmt | em 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
5495:000 | DONE cmt | em 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
5496:000 | DONE lbl | em 16 16 | 006012 |             | xt_variable                          
5497:000 | DONE cmt | em 16 16 |        |             |                 ; We let CREATE do the heavy lifting
5498:000 | DONE ins | em 16 16 | 006012 | 20 61 57    |                 jsr 005761           
5499:000 | DONE wsp | em 16 16 |        |             |
5500:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
5501:000 | DONE cmt | em 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
5502:000 | DONE ins | em 16 16 | 006015 | a9 00 00    |                 lda.# 0000           
5503:000 | DONE ins | em 16 16 | 006018 | 92 00       |                 sta.di 000000        STA (CP)
5504:000 | DONE wsp | em 16 16 |        |             |
5505:000 | DONE ins | em 16 16 | 00601a | e6 00       |                 inc.d 000000         direct COMMA
5506:000 | DONE ins | em 16 16 | 00601c | e6 00       |                 inc.d 000000         
5507:000 | DONE wsp | em 16 16 |        |             |
5508:000 | DONE ins | em 16 16 | 00601e | 20 36 57    |                 jsr 005736           adjust the z_ value by adding 2 bytes
5509:000 | DONE wsp | em 16 16 |        |             |
5510:000 | DONE lbl | em 16 16 | 006021 |             | z_variable                           
5510:001 | DONE ins | em 16 16 | 006021 | 60          |                 rts                  
5511:000 | DONE wsp | em 16 16 |        |             |
5512:000 | DONE wsp | em 16 16 |        |             |
5513:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5514:000 | DONE cmt | em 16 16 |        |             | ; WORD ( char "name" -- c-addr ) X bytes / X cycles
5515:000 | DONE cmt | em 16 16 |        |             | ; Obsolete parsing word included for backwards compatibility. Do not use this,
5516:000 | DONE cmt | em 16 16 |        |             | ; use PARSE or PARSE-NAME. Skips leading delimiters and copies word to storage
5517:000 | DONE cmt | em 16 16 |        |             | ; area for a maximum size of 255 bytes. Returns the result as a counted string
5518:000 | DONE cmt | em 16 16 |        |             | ; (requires COUNT to convert to modern format), and inserts a space after the
5519:000 | DONE cmt | em 16 16 |        |             | ; string. See "Forth Programmer's Handbook" 3rd edition p.159 and
5520:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
5521:000 | DONE cmt | em 16 16 |        |             | ; for discussions of why you shouldn't be using WORD anymore. Forth would be
5522:000 | DONE cmt | em 16 16 |        |             | ; PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
5523:000 | DONE cmt | em 16 16 |        |             | ; TODO What about the space?
5524:000 | DONE lbl | em 16 16 | 006022 |             | xt_word                              
5525:000 | DONE cmt | em 16 16 |        |             |                 ; The real work is done by PARSE
5526:000 | DONE ins | em 16 16 | 006022 | 20 a7 5c    |                 jsr 005ca7           ( addr u )
5527:000 | DONE wsp | em 16 16 |        |             |
5528:000 | DONE cmt | em 16 16 |        |             |                 ; Now we have to convert the modern address to the old form
5529:000 | DONE ins | em 16 16 | 006025 | 8c 80 02    |                 sty 000280           overwrite MSB
5530:000 | DONE wsp | em 16 16 |        |             |
5531:000 | DONE ins | em 16 16 | 006028 | ca          |                 dex                  
5532:000 | DONE ins | em 16 16 | 006029 | ca          |                 dex                  ( addr <?> u )
5533:000 | DONE ins | em 16 16 | 00602a | a9 80 02    |                 lda.# 000280         
5534:000 | DONE ins | em 16 16 | 00602d | 1a          |                 inc.a                
5535:000 | DONE ins | em 16 16 | 00602e | 95 00       |                 sta.dx 00            ( addr buffer1+1 u )
5536:000 | DONE wsp | em 16 16 |        |             |
5537:000 | DONE ins | em 16 16 | 006030 | 20 77 5b    |                 jsr 005b77           
5538:000 | DONE wsp | em 16 16 |        |             |
5539:000 | DONE ins | em 16 16 | 006033 | ca          |                 dex                  
5540:000 | DONE ins | em 16 16 | 006034 | ca          |                 dex                  
5541:000 | DONE ins | em 16 16 | 006035 | 94 00       |                 sty.dx 00            
5542:000 | DONE wsp | em 16 16 |        |             |
5543:000 | DONE ins | em 16 16 | 006037 | a0 80 02    |                 ldy.# 000280         
5544:000 | DONE wsp | em 16 16 |        |             |
5545:000 | DONE lbl | em 16 16 | 00603a |             | z_word                               
5545:001 | DONE ins | em 16 16 | 00603a | 60          |                 rts                  
5546:000 | DONE wsp | em 16 16 |        |             |
5547:000 | DONE wsp | em 16 16 |        |             |
5548:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5549:000 | DONE cmt | em 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
5550:000 | DONE cmt | em 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
5551:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
5552:000 | DONE cmt | em 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
5553:000 | DONE lbl | em 16 16 | 00603b |             | xt_wordsnsizes                       
5554:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5555:000 | DONE ins | em 16 16 | 00603b | a9 ff ff    |                 lda.# 0ffff          
5556:000 | DONE ins | em 16 16 | 00603e | 85 20       |                 sta.d 000020         set flag that we want sizes, too
5557:000 | DONE wsp | em 16 16 |        |             |
5558:000 | DONE cmt | em 16 16 |        |             |                 ; continue with WORDS
5559:000 | DONE ins | em 16 16 | 006040 | 80 02       |                 bra 006044           
5560:000 | DONE wsp | em 16 16 |        |             |
5561:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5562:000 | DONE cmt | em 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
5563:000 | DONE cmt | em 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
5564:000 | DONE cmt | em 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
5565:000 | DONE cmt | em 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
5566:000 | DONE cmt | em 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
5567:000 | DONE lbl | em 16 16 | 006042 |             | xt_words                             
5568:000 | DONE ins | em 16 16 | 006042 | 64 20       |                 stz.d 000020         store flag that we don't want to print sizes
5569:000 | DONE wsp | em 16 16 |        |             |
5570:000 | DONE lbl | em 16 16 | 006044 |             | words_common                         
5571:000 | DONE cmt | em 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
5572:000 | DONE ins | em 16 16 | 006044 | 20 5a 57    |                 jsr 00575a           start on next line, this is a style choice
5573:000 | DONE wsp | em 16 16 |        |             |
5574:000 | DONE ins | em 16 16 | 006047 | a5 02       |                 lda.d 000002         nt of first entry in Dictionary (last added)
5575:000 | DONE ins | em 16 16 | 006049 | 48          |                 pha                  
5576:000 | DONE wsp | em 16 16 |        |             |
5577:000 | DONE ins | em 16 16 | 00604a | ca          |                 dex                  create room on TOS
5578:000 | DONE ins | em 16 16 | 00604b | ca          |                 dex                  
5579:000 | DONE ins | em 16 16 | 00604c | 94 00       |                 sty.dx 00            
5580:000 | DONE wsp | em 16 16 |        |             |
5581:000 | DONE lbl | em 16 16 | 00604e |             | words_loop                           
5582:000 | DONE ins | em 16 16 | 00604e | a8          |                 tay                  ( nt )
5583:000 | DONE ins | em 16 16 | 00604f | 20 94 5b    |                 jsr 005b94           ( nt -- addr u )
5584:000 | DONE ins | em 16 16 | 006052 | 20 0b 5f    |                 jsr 005f0b           
5585:000 | DONE ins | em 16 16 | 006055 | 20 c3 5e    |                 jsr 005ec3           
5586:000 | DONE wsp | em 16 16 |        |             |
5587:000 | DONE cmt | em 16 16 |        |             |                 ; If the user wants sizes as well, print them
5588:000 | DONE ins | em 16 16 | 006058 | a5 20       |                 lda.d 000020         
5589:000 | DONE ins | em 16 16 | 00605a | f0 0f       |                 beq 00606b           
5590:000 | DONE wsp | em 16 16 |        |             |
5591:000 | DONE cmt | em 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
5592:000 | DONE cmt | em 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
5593:000 | DONE ins | em 16 16 | 00605c | ca          |                 dex                  
5594:000 | DONE ins | em 16 16 | 00605d | ca          |                 dex                  
5595:000 | DONE ins | em 16 16 | 00605e | 94 00       |                 sty.dx 00            
5596:000 | DONE wsp | em 16 16 |        |             |
5597:000 | DONE ins | em 16 16 | 006060 | 7a          |                 ply                  get nt back again
5598:000 | DONE ins | em 16 16 | 006061 | 5a          |                 phy                  
5599:000 | DONE ins | em 16 16 | 006062 | 20 7f 60    |                 jsr 00607f           ( u )
5600:000 | DONE ins | em 16 16 | 006065 | 20 d7 51    |                 jsr 0051d7           
5601:000 | DONE ins | em 16 16 | 006068 | 20 c3 5e    |                 jsr 005ec3           
5602:000 | DONE wsp | em 16 16 |        |             |
5603:000 | DONE lbl | em 16 16 | 00606b |             | words_nosizes                        
5604:000 | DONE ins | em 16 16 | 00606b | 68          |                 pla                  get back first entry in Dictionary
5605:000 | DONE wsp | em 16 16 |        |             |
5606:000 | DONE cmt | em 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
5607:000 | DONE cmt | em 16 16 |        |             |                 ; the Dictionary header
5608:000 | DONE ins | em 16 16 | 00606c | 1a          |                 inc.a                
5609:000 | DONE ins | em 16 16 | 00606d | 1a          |                 inc.a                
5610:000 | DONE wsp | em 16 16 |        |             |
5611:000 | DONE ins | em 16 16 | 00606e | ca          |                 dex                  
5612:000 | DONE ins | em 16 16 | 00606f | ca          |                 dex                  
5613:000 | DONE ins | em 16 16 | 006070 | 94 00       |                 sty.dx 00            
5614:000 | DONE wsp | em 16 16 |        |             |
5615:000 | DONE ins | em 16 16 | 006072 | a8          |                 tay                  
5616:000 | DONE ins | em 16 16 | 006073 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5617:000 | DONE ins | em 16 16 | 006076 | 48          |                 pha                  
5618:000 | DONE ins | em 16 16 | 006077 | d0 d5       |                 bne 00604e           zero entry signals end of Dictionary
5619:000 | DONE wsp | em 16 16 |        |             |
5620:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up
5621:000 | DONE ins | em 16 16 | 006079 | 68          |                 pla                  balance MPU stack, value discarded
5622:000 | DONE wsp | em 16 16 |        |             |
5623:000 | DONE ins | em 16 16 | 00607a | b4 00       |                 ldy.dx 00            
5624:000 | DONE ins | em 16 16 | 00607c | e8          |                 inx                  
5625:000 | DONE ins | em 16 16 | 00607d | e8          |                 inx                  
5626:000 | DONE wsp | em 16 16 |        |             |
5627:000 | DONE lbl | em 16 16 | 00607e |             | z_words                              
5628:000 | DONE lbl | em 16 16 | 00607e |             | z_wordsnsizes                        
5628:001 | DONE ins | em 16 16 | 00607e | 60          |                 rts                  
5629:000 | DONE wsp | em 16 16 |        |             |
5630:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5631:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
5632:000 | DONE cmt | em 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
5633:000 | DONE cmt | em 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
5634:000 | DONE cmt | em 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
5635:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite so it takes xt and not nt
5636:000 | DONE lbl | em 16 16 | 00607f |             | xt_wordsize                          
5637:000 | DONE cmt | em 16 16 |        |             |                 ; We get the beginning address of the code from the word's
5638:000 | DONE cmt | em 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
5639:000 | DONE cmt | em 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
5640:000 | DONE ins | em 16 16 | 00607f | c8          |                 iny                  
5641:000 | DONE ins | em 16 16 | 006080 | c8          |                 iny                  
5642:000 | DONE ins | em 16 16 | 006081 | c8          |                 iny                  
5643:000 | DONE ins | em 16 16 | 006082 | c8          |                 iny                  nt+4, location of xt
5644:000 | DONE ins | em 16 16 | 006083 | b9 00 00    |                 lda.y 0000           get xt
5645:000 | DONE ins | em 16 16 | 006086 | 85 1e       |                 sta.d 00001e         
5646:000 | DONE wsp | em 16 16 |        |             |
5647:000 | DONE ins | em 16 16 | 006088 | c8          |                 iny                  
5648:000 | DONE ins | em 16 16 | 006089 | c8          |                 iny                  nt+6, location of z_word
5649:000 | DONE ins | em 16 16 | 00608a | b9 00 00    |                 lda.y 0000           
5650:000 | DONE wsp | em 16 16 |        |             |
5651:000 | DONE ins | em 16 16 | 00608d | 38          |                 sec                  (z_word - xt_word)
5652:000 | DONE ins | em 16 16 | 00608e | e5 1e       |                 sbc.d 00001e         
5653:000 | DONE ins | em 16 16 | 006090 | a8          |                 tay                  
5654:000 | DONE wsp | em 16 16 |        |             |
5655:000 | DONE lbl | em 16 16 | 006091 |             | z_wordsize                           
5655:001 | DONE ins | em 16 16 | 006091 | 60          |                 rts                  
5656:000 | DONE wsp | em 16 16 |        |             |
5657:000 | DONE wsp | em 16 16 |        |             |
5658:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5659:000 | DONE cmt | em 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
5660:000 | DONE cmt | em 16 16 |        |             | ; Logical XOR
5661:000 | DONE lbl | em 16 16 | 006092 |             | xt_xor                               
5662:000 | DONE ins | em 16 16 | 006092 | 98          |                 tya                  
5663:000 | DONE ins | em 16 16 | 006093 | 55 00       |                 eor.dx 00            
5664:000 | DONE ins | em 16 16 | 006095 | a8          |                 tay                  
5665:000 | DONE wsp | em 16 16 |        |             |
5666:000 | DONE ins | em 16 16 | 006096 | e8          |                 inx                  
5667:000 | DONE ins | em 16 16 | 006097 | e8          |                 inx                  
5668:000 | DONE wsp | em 16 16 |        |             |
5669:000 | DONE lbl | em 16 16 | 006098 |             | z_xor                                
5669:001 | DONE ins | em 16 16 | 006098 | 60          |                 rts                  
5670:000 | DONE wsp | em 16 16 |        |             |
5671:000 | DONE wsp | em 16 16 |        |             |
5672:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5673:000 | DONE cmt | em 16 16 |        |             | ; MIDDLE INCLUDES
5674:000 | DONE wsp | em 16 16 |        |             |
5675:000 | DONE cmt | em 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
5675:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5675:002 | DONE cmt | em 16 16 |        |             | ; First version: 05. Dec 2016
5675:003 | DONE cmt | em 16 16 |        |             | ; This version: 18. September 2017
5675:004 | DONE wsp | em 16 16 |        |             |
5675:005 | DONE cmt | em 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
5675:006 | DONE cmt | em 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
5675:007 | DONE cmt | em 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
5675:008 | DONE cmt | em 16 16 |        |             | ; uh, executed; the Name Token (nt) is a pointer to the beginning of the
5675:009 | DONE cmt | em 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
5675:010 | DONE cmt | em 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
5675:011 | DONE cmt | em 16 16 |        |             | ; itself, we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
5675:012 | DONE cmt | em 16 16 |        |             | ;
5675:013 | DONE cmt | em 16 16 |        |             | ; This gives us the following header structure:
5675:014 | DONE cmt | em 16 16 |        |             | ;
5675:015 | DONE cmt | em 16 16 |        |             | ;              8 bit     8 bit
5675:016 | DONE cmt | em 16 16 |        |             | ;               LSB       MSB
5675:017 | DONE cmt | em 16 16 |        |             | ; nt_word ->  +--------+--------+
5675:018 | DONE cmt | em 16 16 |        |             | ;             | Length | Status |
5675:019 | DONE cmt | em 16 16 |        |             | ;          +2 +--------+--------+
5675:020 | DONE cmt | em 16 16 |        |             | ;             | Next Header     | -> nt_next_word
5675:021 | DONE cmt | em 16 16 |        |             | ;          +4 +-----------------+
5675:022 | DONE cmt | em 16 16 |        |             | ;             | Start of Code   | -> xt_word
5675:023 | DONE cmt | em 16 16 |        |             | ;          +6 +-----------------+
5675:024 | DONE cmt | em 16 16 |        |             | ;             | End of Code     | -> z_word
5675:025 | DONE cmt | em 16 16 |        |             | ;          +8 +--------+--------+
5675:026 | DONE cmt | em 16 16 |        |             | ;             | Name   |        |
5675:027 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5675:028 | DONE cmt | em 16 16 |        |             | ;             |        |        |
5675:029 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5675:030 | DONE cmt | em 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
5675:031 | DONE cmt | em 16 16 |        |             | ;          +n +--------+--------+
5675:032 | DONE cmt | em 16 16 |        |             | ;
5675:033 | DONE cmt | em 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
5675:034 | DONE cmt | em 16 16 |        |             | ; definitions.tasm.
5675:035 | DONE cmt | em 16 16 |        |             | ;
5675:036 | DONE cmt | em 16 16 |        |             | ;       CO - Compile Only
5675:037 | DONE cmt | em 16 16 |        |             | ;       IM - Immediate Word
5675:038 | DONE cmt | em 16 16 |        |             | ;       NN - Never Native Compile
5675:039 | DONE cmt | em 16 16 |        |             | ;       AN - Always Native Compile (may not be called by JSR)
5675:040 | DONE wsp | em 16 16 |        |             |
5675:041 | DONE cmt | em 16 16 |        |             | ; Note there are currently four bits unused. By default, all words can be
5675:042 | DONE cmt | em 16 16 |        |             | ; natively compiled (compiled inline) or as a subroutine jump target; the system
5675:043 | DONE cmt | em 16 16 |        |             | ; decides which variant to use based on a threshold the user can set. The NN
5675:044 | DONE cmt | em 16 16 |        |             | ; flag forbids native compiling, the AN flag forces it.
5675:045 | DONE wsp | em 16 16 |        |             |
5675:046 | DONE cmt | em 16 16 |        |             | ; The last word (top word in code) is always BYE. It is marked as the last word
5675:047 | DONE cmt | em 16 16 |        |             | ; by its value of 0000 in its Next Header field. The words are sorted with the
5675:048 | DONE cmt | em 16 16 |        |             | ; more common ones first (further down in code) so they are found earlier.
5675:049 | DONE cmt | em 16 16 |        |             | ; Anything to do with output comes later (further up) because things will
5675:050 | DONE cmt | em 16 16 |        |             | ; always be slow if there is a human involved.
5675:051 | DONE wsp | em 16 16 |        |             |
5675:052 | DONE lbl | em 16 16 | 006099 |             | nt_bye                               
5675:053 | DONE dir | em 16 16 | 006099 | (1 bytes)   |         .byte 03                     length of word string
5675:053 | DONE dir | em 16 16 |        |             |                 03                       --  .
5675:054 | DONE dir | em 16 16 | 00609a | (1 bytes)   |         .byte 00                     status byte
5675:054 | DONE dir | em 16 16 |        |             |                 00                       --  .
5675:055 | DONE dir | em 16 16 | 00609b | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
5675:055 | DONE dir | em 16 16 |        |             |                 00 00                    --  . .
5675:056 | DONE dir | em 16 16 | 00609d | (2 bytes)   |         .word 0055f6                 start of code, the xt of this word
5675:056 | DONE dir | em 16 16 |        |             |                 f6 55                    --  . U
5675:057 | DONE dir | em 16 16 | 00609f | (2 bytes)   |         .word 0055fd                 end of code (points to RTS)
5675:057 | DONE dir | em 16 16 |        |             |                 fd 55                    --  . U
5675:058 | DONE dir | em 16 16 | 0060a1 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
5675:058 | DONE dir | em 16 16 |        |             |                 62 79 65                 --  b y e
5675:059 | DONE wsp | em 16 16 |        |             |
5675:060 | DONE lbl | em 16 16 | 0060a4 |             | nt_cold                              
5675:061 | DONE dir | em 16 16 | 0060a4 | (2 bytes)   |         .byte 4, 00                  
5675:061 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:062 | DONE dir | em 16 16 | 0060a6 | (6 bytes)   |         .word nt_bye, xt_cold, 0050f6 
5675:062 | DONE dir | em 16 16 |        |             |                 99 60 61 50 f6 50        --  . ` a P . P
5675:063 | DONE dir | em 16 16 | 0060ac | (4 bytes)   |         .byte 63, 6f, 6c, 64         
5675:063 | DONE dir | em 16 16 |        |             |                 63 6f 6c 64              --  c o l d
5675:064 | DONE wsp | em 16 16 |        |             |
5675:065 | DONE lbl | em 16 16 | 0060b0 |             | nt_word                              
5675:066 | DONE dir | em 16 16 | 0060b0 | (2 bytes)   |         .byte 4, 00                  
5675:066 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:067 | DONE dir | em 16 16 | 0060b2 | (6 bytes)   |         .word nt_cold, xt_word, 00603a 
5675:067 | DONE dir | em 16 16 |        |             |                 a4 60 22 60 3a 60        --  . ` " ` : `
5675:068 | DONE dir | em 16 16 | 0060b8 | (4 bytes)   |         .byte 77, 6f, 72, 64         
5675:068 | DONE dir | em 16 16 |        |             |                 77 6f 72 64              --  w o r d
5675:069 | DONE wsp | em 16 16 |        |             |
5675:070 | DONE lbl | em 16 16 | 0060bc |             | nt_find                              
5675:071 | DONE dir | em 16 16 | 0060bc | (2 bytes)   |         .byte 4, 00                  
5675:071 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:072 | DONE dir | em 16 16 | 0060be | (6 bytes)   |         .word nt_word, xt_find, 005983 
5675:072 | DONE dir | em 16 16 |        |             |                 b0 60 53 59 83 59        --  . ` S Y . Y
5675:073 | DONE dir | em 16 16 | 0060c4 | (4 bytes)   |         .byte 66, 69, 6e, 64         
5675:073 | DONE dir | em 16 16 |        |             |                 66 69 6e 64              --  f i n d
5675:074 | DONE wsp | em 16 16 |        |             |
5675:075 | DONE lbl | em 16 16 | 0060c8 |             | nt_aligned                           
5675:076 | DONE dir | em 16 16 | 0060c8 | (2 bytes)   |         .byte 7, 00                  
5675:076 | DONE dir | em 16 16 |        |             |                 07 00                    --  . .
5675:077 | DONE dir | em 16 16 | 0060ca | (6 bytes)   |         .word nt_find, xt_aligned, 005562 
5675:077 | DONE dir | em 16 16 |        |             |                 bc 60 61 55 62 55        --  . ` a U b U
5675:078 | DONE dir | em 16 16 | 0060d0 | (7 bytes)   |         .byte 61, 6c, 69, 67, 6e, 65, 64 
5675:078 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e 65 64     --  a l i g n e d
5675:079 | DONE wsp | em 16 16 |        |             |
5675:080 | DONE lbl | em 16 16 | 0060d7 |             | nt_align                             
5675:081 | DONE dir | em 16 16 | 0060d7 | (2 bytes)   |         .byte 5, 00                  
5675:081 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:082 | DONE dir | em 16 16 | 0060d9 | (6 bytes)   |         .word nt_aligned, xt_align, 005560 
5675:082 | DONE dir | em 16 16 |        |             |                 c8 60 5f 55 60 55        --  . ` _ U ` U
5675:083 | DONE dir | em 16 16 | 0060df | (5 bytes)   |         .byte 61, 6c, 69, 67, 6e     
5675:083 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e           --  a l i g n
5675:084 | DONE wsp | em 16 16 |        |             |
5675:085 | DONE lbl | em 16 16 | 0060e4 |             | nt_wordsnsizes                       
5675:086 | DONE dir | em 16 16 | 0060e4 | (2 bytes)   |         .byte 0b, 00                 
5675:086 | DONE dir | em 16 16 |        |             |                 0b 00                    --   .
5675:087 | DONE dir | em 16 16 | 0060e6 | (6 bytes)   |         .word nt_align, xt_wordsnsizes, 00607e 
5675:087 | DONE dir | em 16 16 |        |             |                 d7 60 3b 60 7e 60        --  . ` ; ` ~ `
5675:088 | DONE dir | em 16 16 | 0060ec | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
5675:088 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
5675:088 | DONE dir | em 16 16 |        |             |                 7a 65 73                 --  z e s
5675:089 | DONE wsp | em 16 16 |        |             |
5675:090 | DONE lbl | em 16 16 | 0060f7 |             | nt_words                             
5675:091 | DONE dir | em 16 16 | 0060f7 | (2 bytes)   |         .byte 5, 00                  
5675:091 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:092 | DONE dir | em 16 16 | 0060f9 | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 00607e 
5675:092 | DONE dir | em 16 16 |        |             |                 e4 60 42 60 7e 60        --  . ` B ` ~ `
5675:093 | DONE dir | em 16 16 | 0060ff | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
5675:093 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
5675:094 | DONE wsp | em 16 16 |        |             |
5675:095 | DONE lbl | em 16 16 | 006104 |             | nt_unloop                            
5675:096 | DONE dir | em 16 16 | 006104 | (2 bytes)   |         .byte 6, CO                  
5675:096 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5675:097 | DONE dir | em 16 16 | 006106 | (6 bytes)   |         .word nt_words, xt_unloop, 006005 
5675:097 | DONE dir | em 16 16 |        |             |                 f7 60 02 60 05 60        --  . ` . ` . `
5675:098 | DONE dir | em 16 16 | 00610c | (6 bytes)   |         .byte 75, 6e, 6c, 6f, 6f, 70 
5675:098 | DONE dir | em 16 16 |        |             |                 75 6e 6c 6f 6f 70        --  u n l o o p
5675:099 | DONE wsp | em 16 16 |        |             |
5675:100 | DONE lbl | em 16 16 | 006112 |             | nt_pploop                            
5675:101 | DONE dir | em 16 16 | 006112 | (2 bytes)   |         .byte 7, CO                  
5675:101 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5675:102 | DONE dir | em 16 16 | 006114 | (6 bytes)   |         .word nt_unloop, xt_pploop, 0052ea 
5675:102 | DONE dir | em 16 16 |        |             |                 04 61 dc 52 ea 52        --  . a . R . R
5675:103 | DONE dir | em 16 16 | 00611a | (7 bytes)   |         .byte 28, 2b, 6c, 6f, 6f, 70, 29 
5675:103 | DONE dir | em 16 16 |        |             |                 28 2b 6c 6f 6f 70 29     --  ( + l o o p )
5675:104 | DONE wsp | em 16 16 |        |             |
5675:105 | DONE lbl | em 16 16 | 006121 |             | nt_ploop                             
5675:106 | DONE dir | em 16 16 | 006121 | (2 bytes)   |         .byte 5, { IM + CO }         
5675:106 | DONE dir | em 16 16 |        |             |                 05 05                    --  . .
5675:107 | DONE dir | em 16 16 | 006123 | (6 bytes)   |         .word nt_pploop, xt_ploop, 005360 
5675:107 | DONE dir | em 16 16 |        |             |                 12 61 3f 53 60 53        --  . a ? S ` S
5675:108 | DONE dir | em 16 16 | 006129 | (5 bytes)   |         .byte 2b, 6c, 6f, 6f, 70     
5675:108 | DONE dir | em 16 16 |        |             |                 2b 6c 6f 6f 70           --  + l o o p
5675:109 | DONE wsp | em 16 16 |        |             |
5675:110 | DONE lbl | em 16 16 | 00612e |             | nt_loop                              
5675:111 | DONE dir | em 16 16 | 00612e | (2 bytes)   |         .byte 4, { IM + CO }         
5675:111 | DONE dir | em 16 16 |        |             |                 04 05                    --  . .
5675:112 | DONE dir | em 16 16 | 006130 | (6 bytes)   |         .word nt_ploop, xt_loop, 005360 
5675:112 | DONE dir | em 16 16 |        |             |                 21 61 39 53 60 53        --  ! a 9 S ` S
5675:113 | DONE dir | em 16 16 | 006136 | (4 bytes)   |         .byte 6c, 6f, 6f, 70         
5675:113 | DONE dir | em 16 16 |        |             |                 6c 6f 6f 70              --  l o o p
5675:114 | DONE wsp | em 16 16 |        |             |
5675:115 | DONE lbl | em 16 16 | 00613a |             | nt_leave                             
5675:116 | DONE dir | em 16 16 | 00613a | (2 bytes)   |         .byte 5, CO                  
5675:116 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5675:117 | DONE dir | em 16 16 | 00613c | (6 bytes)   |         .word nt_loop, xt_leave, 005ad4 
5675:117 | DONE dir | em 16 16 |        |             |                 2e 61 d1 5a d4 5a        --  . a . Z . Z
5675:118 | DONE dir | em 16 16 | 006142 | (5 bytes)   |         .byte 6c, 65, 61, 76, 65     
5675:118 | DONE dir | em 16 16 |        |             |                 6c 65 61 76 65           --  l e a v e
5675:119 | DONE wsp | em 16 16 |        |             |
5675:120 | DONE lbl | em 16 16 | 006147 |             | nt_exit                              
5675:121 | DONE dir | em 16 16 | 006147 | (2 bytes)   |         .byte 4, CO                  
5675:121 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5675:122 | DONE dir | em 16 16 | 006149 | (6 bytes)   |         .word nt_leave, xt_exit, 0058fc 
5675:122 | DONE dir | em 16 16 |        |             |                 3a 61 fb 58 fc 58        --  : a . X . X
5675:123 | DONE dir | em 16 16 | 00614f | (4 bytes)   |         .byte 65, 78, 69, 74         
5675:123 | DONE dir | em 16 16 |        |             |                 65 78 69 74              --  e x i t
5675:124 | DONE wsp | em 16 16 |        |             |
5675:125 | DONE lbl | em 16 16 | 006153 |             | nt_recurse                           
5675:126 | DONE dir | em 16 16 | 006153 | (2 bytes)   |         .byte 7, { IM + CO }         
5675:126 | DONE dir | em 16 16 |        |             |                 07 05                    --  . .
5675:127 | DONE dir | em 16 16 | 006155 | (6 bytes)   |         .word nt_exit, xt_recurse, 005d56 
5675:127 | DONE dir | em 16 16 |        |             |                 47 61 3d 5d 56 5d        --  G a = ] V ]
5675:128 | DONE dir | em 16 16 | 00615b | (7 bytes)   |         .byte 72, 65, 63, 75, 72, 73, 65 
5675:128 | DONE dir | em 16 16 |        |             |                 72 65 63 75 72 73 65     --  r e c u r s e
5675:129 | DONE wsp | em 16 16 |        |             |
5675:130 | DONE lbl | em 16 16 | 006162 |             | nt_j                                 
5675:131 | DONE dir | em 16 16 | 006162 | (2 bytes)   |         .byte 1, CO                  
5675:131 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5675:132 | DONE dir | em 16 16 | 006164 | (6 bytes)   |         .word nt_recurse, xt_j, 005ab8 
5675:132 | DONE dir | em 16 16 |        |             |                 53 61 ae 5a b8 5a        --  S a . Z . Z
5675:133 | DONE dir | em 16 16 | 00616a | (1 bytes)   |         .byte 6a                     
5675:133 | DONE dir | em 16 16 |        |             |                 6a                       --  j
5675:134 | DONE wsp | em 16 16 |        |             |
5675:135 | DONE lbl | em 16 16 | 00616b |             | nt_i                                 
5675:136 | DONE dir | em 16 16 | 00616b | (2 bytes)   |         .byte 1, CO                  
5675:136 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5675:137 | DONE dir | em 16 16 | 00616d | (6 bytes)   |         .word nt_j, xt_i, 005a57     
5675:137 | DONE dir | em 16 16 |        |             |                 62 61 4d 5a 57 5a        --  b a M Z W Z
5675:138 | DONE dir | em 16 16 | 006173 | (1 bytes)   |         .byte 69                     
5675:138 | DONE dir | em 16 16 |        |             |                 69                       --  i
5675:139 | DONE wsp | em 16 16 |        |             |
5675:140 | DONE lbl | em 16 16 | 006174 |             | nt_pqdo                              
5675:141 | DONE dir | em 16 16 | 006174 | (2 bytes)   |         .byte 5, { CO + AN }         
5675:141 | DONE dir | em 16 16 |        |             |                 05 03                    --  . .
5675:142 | DONE dir | em 16 16 | 006176 | (6 bytes)   |         .word nt_i, xt_pqdo, 005314  
5675:142 | DONE dir | em 16 16 |        |             |                 6b 61 eb 52 14 53        --  k a . R . S
5675:143 | DONE dir | em 16 16 | 00617c | (5 bytes)   |         .byte 28, 3f, 64, 6f, 29     
5675:143 | DONE dir | em 16 16 |        |             |                 28 3f 64 6f 29           --  ( ? d o )
5675:144 | DONE wsp | em 16 16 |        |             |
5675:145 | DONE lbl | em 16 16 | 006181 |             | nt_pdo                               
5675:146 | DONE dir | em 16 16 | 006181 | (2 bytes)   |         .byte 4, { CO + AN }         
5675:146 | DONE dir | em 16 16 |        |             |                 04 03                    --  . .
5675:147 | DONE dir | em 16 16 | 006183 | (6 bytes)   |         .word nt_pqdo, xt_pdo, 005314 
5675:147 | DONE dir | em 16 16 |        |             |                 74 61 02 53 14 53        --  t a . S . S
5675:148 | DONE dir | em 16 16 | 006189 | (4 bytes)   |         .byte 28, 64, 6f, 29         
5675:148 | DONE dir | em 16 16 |        |             |                 28 64 6f 29              --  ( d o )
5675:149 | DONE wsp | em 16 16 |        |             |
5675:150 | DONE lbl | em 16 16 | 00618d |             | nt_qdo                               
5675:151 | DONE dir | em 16 16 | 00618d | (2 bytes)   |         .byte 3, { IM + CO }         may not be Native Compile
5675:151 | DONE dir | em 16 16 |        |             |                 03 05                    --  . .
5675:152 | DONE dir | em 16 16 | 00618f | (6 bytes)   |         .word nt_pdo, xt_qdo, 0058be 
5675:152 | DONE dir | em 16 16 |        |             |                 81 61 84 58 be 58        --  . a . X . X
5675:153 | DONE dir | em 16 16 | 006195 | (3 bytes)   |         .byte 3f, 64, 6f             
5675:153 | DONE dir | em 16 16 |        |             |                 3f 64 6f                 --  ? d o
5675:154 | DONE wsp | em 16 16 |        |             |
5675:155 | DONE lbl | em 16 16 | 006198 |             | nt_do                                
5675:156 | DONE dir | em 16 16 | 006198 | (2 bytes)   |         .byte 2, { IM + CO }         may not be Native Compile
5675:156 | DONE dir | em 16 16 |        |             |                 02 05                    --  . .
5675:157 | DONE dir | em 16 16 | 00619a | (6 bytes)   |         .word nt_qdo, xt_do, 0058be  
5675:157 | DONE dir | em 16 16 |        |             |                 8d 61 8b 58 be 58        --  . a . X . X
5675:158 | DONE dir | em 16 16 | 0061a0 | (2 bytes)   |         .byte 64, 6f                 
5675:158 | DONE dir | em 16 16 |        |             |                 64 6f                    --  d o
5675:159 | DONE wsp | em 16 16 |        |             |
5675:160 | DONE lbl | em 16 16 | 0061a2 |             | nt_marker                            
5675:161 | DONE dir | em 16 16 | 0061a2 | (2 bytes)   |         .byte 6, IM                  
5675:161 | DONE dir | em 16 16 |        |             |                 06 04                    --  . .
5675:162 | DONE dir | em 16 16 | 0061a4 | (6 bytes)   |         .word nt_do, xt_marker, 005b50 
5675:162 | DONE dir | em 16 16 |        |             |                 98 61 27 5b 50 5b        --  . a ' [ P [
5675:163 | DONE dir | em 16 16 | 0061aa | (6 bytes)   |         .byte 6d, 61, 72, 6b, 65, 72 
5675:163 | DONE dir | em 16 16 |        |             |                 6d 61 72 6b 65 72        --  m a r k e r
5675:164 | DONE wsp | em 16 16 |        |             |
5675:165 | DONE lbl | em 16 16 | 0061b0 |             | nt_wordsize                          
5675:166 | DONE dir | em 16 16 | 0061b0 | (2 bytes)   |         .byte 8, 00                  
5675:166 | DONE dir | em 16 16 |        |             |                 08 00                    --  . .
5675:167 | DONE dir | em 16 16 | 0061b2 | (6 bytes)   |         .word nt_marker, xt_wordsize, 006091 
5675:167 | DONE dir | em 16 16 |        |             |                 a2 61 7f 60 91 60        --  . a . ` . `
5675:168 | DONE dir | em 16 16 | 0061b8 | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
5675:168 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
5675:168 | DONE dir | em 16 16 |        |             |                                          -- 
5675:169 | DONE wsp | em 16 16 |        |             |
5675:170 | DONE lbl | em 16 16 | 0061c0 |             | nt_pick                              
5675:171 | DONE dir | em 16 16 | 0061c0 | (2 bytes)   |         .byte 4, 00                  
5675:171 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:172 | DONE dir | em 16 16 | 0061c2 | (6 bytes)   |         .word nt_wordsize, xt_pick, 005ce7 
5675:172 | DONE dir | em 16 16 |        |             |                 b0 61 da 5c e7 5c        --  . a . \ . \
5675:173 | DONE dir | em 16 16 | 0061c8 | (4 bytes)   |         .byte 70, 69, 63, 6b         
5675:173 | DONE dir | em 16 16 |        |             |                 70 69 63 6b              --  p i c k
5675:174 | DONE wsp | em 16 16 |        |             |
5675:175 | DONE lbl | em 16 16 | 0061cc |             | nt_bell                              
5675:176 | DONE dir | em 16 16 | 0061cc | (2 bytes)   |         .byte 4, 00                  
5675:176 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:177 | DONE dir | em 16 16 | 0061ce | (6 bytes)   |         .word nt_pick, xt_bell, 0055c9 
5675:177 | DONE dir | em 16 16 |        |             |                 c0 61 c3 55 c9 55        --  . a . U . U
5675:178 | DONE dir | em 16 16 | 0061d4 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
5675:178 | DONE dir | em 16 16 |        |             |                 62 65 6c 6c              --  b e l l
5675:179 | DONE wsp | em 16 16 |        |             |
5675:180 | DONE lbl | em 16 16 | 0061d8 |             | nt_chars                             
5675:181 | DONE dir | em 16 16 | 0061d8 | (2 bytes)   |         .byte 5, 00                  
5675:181 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:182 | DONE dir | em 16 16 | 0061da | (6 bytes)   |         .word nt_bell, xt_chars, 005643 
5675:182 | DONE dir | em 16 16 |        |             |                 cc 61 42 56 43 56        --  . a B V C V
5675:183 | DONE dir | em 16 16 | 0061e0 | (5 bytes)   |         .byte 63, 68, 61, 72, 73     
5675:183 | DONE dir | em 16 16 |        |             |                 63 68 61 72 73           --  c h a r s
5675:184 | DONE wsp | em 16 16 |        |             |
5675:185 | DONE lbl | em 16 16 | 0061e5 |             | nt_cellplus                          
5675:186 | DONE dir | em 16 16 | 0061e5 | (2 bytes)   |         .byte 5, 00                  
5675:186 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:187 | DONE dir | em 16 16 | 0061e7 | (6 bytes)   |         .word nt_chars, xt_cellplus, 005629 
5675:187 | DONE dir | em 16 16 |        |             |                 d8 61 27 56 29 56        --  . a ' V ) V
5675:188 | DONE dir | em 16 16 | 0061ed | (5 bytes)   |         .byte 63, 65, 6c, 6c, 2b     
5675:188 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 2b           --  c e l l +
5675:189 | DONE wsp | em 16 16 |        |             |
5675:190 | DONE lbl | em 16 16 | 0061f2 |             | nt_charplus                          
5675:191 | DONE dir | em 16 16 | 0061f2 | (2 bytes)   |         .byte 5, 00                  uses code of 1+
5675:191 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:192 | DONE dir | em 16 16 | 0061f4 | (6 bytes)   |         .word nt_cellplus, xt_one-plus, 0053f8 
5675:192 | DONE dir | em 16 16 |        |             |                 e5 61 f7 53 f8 53        --  . a . S . S
5675:193 | DONE dir | em 16 16 | 0061fa | (5 bytes)   |         .byte 63, 68, 61, 72, 2b     
5675:193 | DONE dir | em 16 16 |        |             |                 63 68 61 72 2b           --  c h a r +
5675:194 | DONE wsp | em 16 16 |        |             |
5675:195 | DONE lbl | em 16 16 | 0061ff |             | nt_decimal                           
5675:196 | DONE dir | em 16 16 | 0061ff | (2 bytes)   |         .byte 7, 00                  
5675:196 | DONE dir | em 16 16 |        |             |                 07 00                    --  . .
5675:197 | DONE dir | em 16 16 | 006201 | (6 bytes)   |         .word nt_charplus, xt_decimal, 005860 
5675:197 | DONE dir | em 16 16 |        |             |                 f2 61 5b 58 60 58        --  . a [ X ` X
5675:198 | DONE dir | em 16 16 | 006207 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
5675:198 | DONE dir | em 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
5675:199 | DONE wsp | em 16 16 |        |             |
5675:200 | DONE lbl | em 16 16 | 00620e |             | nt_hex                               
5675:201 | DONE dir | em 16 16 | 00620e | (2 bytes)   |         .byte 3, 00                  
5675:201 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:202 | DONE dir | em 16 16 | 006210 | (6 bytes)   |         .word nt_decimal, xt_hex, 005a9f 
5675:202 | DONE dir | em 16 16 |        |             |                 ff 61 9a 5a 9f 5a        --  . a . Z . Z
5675:203 | DONE dir | em 16 16 | 006216 | (3 bytes)   |         .byte 68, 65, 78             
5675:203 | DONE dir | em 16 16 |        |             |                 68 65 78                 --  h e x
5675:204 | DONE wsp | em 16 16 |        |             |
5675:205 | DONE lbl | em 16 16 | 006219 |             | nt_unused                            
5675:206 | DONE dir | em 16 16 | 006219 | (2 bytes)   |         .byte 6, 00                  
5675:206 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:207 | DONE dir | em 16 16 | 00621b | (6 bytes)   |         .word nt_hex, xt_unused, 006011 
5675:207 | DONE dir | em 16 16 |        |             |                 0e 62 06 60 11 60        --  . b . ` . `
5675:208 | DONE dir | em 16 16 | 006221 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
5675:208 | DONE dir | em 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
5675:209 | DONE wsp | em 16 16 |        |             |
5675:210 | DONE lbl | em 16 16 | 006227 |             | nt_page                              
5675:211 | DONE dir | em 16 16 | 006227 | (2 bytes)   |         .byte 4, 00                  
5675:211 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:212 | DONE dir | em 16 16 | 006229 | (6 bytes)   |         .word nt_unused, xt_page, 005c72 
5675:212 | DONE dir | em 16 16 |        |             |                 19 62 66 5c 72 5c        --  . b f \ r \
5675:213 | DONE dir | em 16 16 | 00622f | (4 bytes)   |         .byte 70, 61, 67, 65         
5675:213 | DONE dir | em 16 16 |        |             |                 70 61 67 65              --  p a g e
5675:214 | DONE wsp | em 16 16 |        |             |
5675:215 | DONE lbl | em 16 16 | 006233 |             | nt_at-xy                             
5675:216 | DONE dir | em 16 16 | 006233 | (2 bytes)   |         .byte 5, 00                  
5675:216 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:217 | DONE dir | em 16 16 | 006235 | (6 bytes)   |         .word nt_page, xt_at-xy, 0055ba 
5675:217 | DONE dir | em 16 16 |        |             |                 27 62 93 55 ba 55        --  ' b . U . U
5675:218 | DONE dir | em 16 16 | 00623b | (5 bytes)   |         .byte 61, 74, 2d, 78, 79     
5675:218 | DONE dir | em 16 16 |        |             |                 61 74 2d 78 79           --  a t - x y
5675:219 | DONE wsp | em 16 16 |        |             |
5675:220 | DONE lbl | em 16 16 | 006240 |             | nt_tworfetch                         
5675:221 | DONE dir | em 16 16 | 006240 | (2 bytes)   |         .byte 3, NN                  not natively compiled (yet)
5675:221 | DONE dir | em 16 16 |        |             |                 03 08                    --  . .
5675:222 | DONE dir | em 16 16 | 006242 | (6 bytes)   |         .word nt_at-xy, xt_tworfetch, 005453 
5675:222 | DONE dir | em 16 16 |        |             |                 33 62 46 54 53 54        --  3 b F T S T
5675:223 | DONE dir | em 16 16 | 006248 | (3 bytes)   |         .byte 32, 72, 40             
5675:223 | DONE dir | em 16 16 |        |             |                 32 72 40                 --  2 r @
5675:224 | DONE wsp | em 16 16 |        |             |
5675:225 | DONE lbl | em 16 16 | 00624b |             | nt_2variable                         
5675:226 | DONE dir | em 16 16 | 00624b | (2 bytes)   |         .byte 9, 00                  
5675:226 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5675:227 | DONE dir | em 16 16 | 00624d | (6 bytes)   |         .word nt_tworfetch, xt_2variable, 005477 
5675:227 | DONE dir | em 16 16 |        |             |                 40 62 65 54 77 54        --  @ b e T w T
5675:228 | DONE dir | em 16 16 | 006253 | (9 bytes)   |         .byte 32, 76, 61, 72, 69, 61, 62, 6c, 65 
5675:228 | DONE dir | em 16 16 |        |             |                 32 76 61 72 69 61 62 6c  --  2 v a r i a b l
5675:228 | DONE dir | em 16 16 |        |             |                 65                       --  e
5675:229 | DONE wsp | em 16 16 |        |             |
5675:230 | DONE lbl | em 16 16 | 00625c |             | nt_dabs                              
5675:231 | DONE dir | em 16 16 | 00625c | (2 bytes)   |         .byte 4, 00                  
5675:231 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:232 | DONE dir | em 16 16 | 00625e | (6 bytes)   |         .word nt_2variable, xt_dabs, 00585a 
5675:232 | DONE dir | em 16 16 |        |             |                 4b 62 54 58 5a 58        --  K b T X Z X
5675:233 | DONE dir | em 16 16 | 006264 | (4 bytes)   |         .byte 64, 61, 62, 73         
5675:233 | DONE dir | em 16 16 |        |             |                 64 61 62 73              --  d a b s
5675:234 | DONE wsp | em 16 16 |        |             |
5675:235 | DONE lbl | em 16 16 | 006268 |             | nt_dnegate                           
5675:236 | DONE dir | em 16 16 | 006268 | (2 bytes)   |         .byte 7, 00                  
5675:236 | DONE dir | em 16 16 |        |             |                 07 00                    --  . .
5675:237 | DONE dir | em 16 16 | 00626a | (6 bytes)   |         .word nt_dabs, xt_dnegate, 005883 
5675:237 | DONE dir | em 16 16 |        |             |                 5c 62 70 58 83 58        --  \ b p X . X
5675:238 | DONE dir | em 16 16 | 006270 | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
5675:238 | DONE dir | em 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
5675:239 | DONE wsp | em 16 16 |        |             |
5675:240 | DONE lbl | em 16 16 | 006277 |             | nt_dtos                              
5675:241 | DONE dir | em 16 16 | 006277 | (2 bytes)   |         .byte 3, 00                  
5675:241 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:242 | DONE dir | em 16 16 | 006279 | (6 bytes)   |         .word nt_dnegate, xt_dtos, 005853 
5675:242 | DONE dir | em 16 16 |        |             |                 68 62 4f 58 53 58        --  h b O X S X
5675:243 | DONE dir | em 16 16 | 00627f | (3 bytes)   |         .byte 64, 3e, 73             
5675:243 | DONE dir | em 16 16 |        |             |                 64 3e 73                 --  d > s
5675:244 | DONE wsp | em 16 16 |        |             |
5675:245 | DONE lbl | em 16 16 | 006282 |             | nt_stod                              
5675:246 | DONE dir | em 16 16 | 006282 | (2 bytes)   |         .byte 3, 00                  
5675:246 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:247 | DONE dir | em 16 16 | 006284 | (6 bytes)   |         .word nt_dtos, xt_stod, 005de3 
5675:247 | DONE dir | em 16 16 |        |             |                 77 62 d4 5d e3 5d        --  w b . ] . ]
5675:248 | DONE dir | em 16 16 | 00628a | (3 bytes)   |         .byte 73, 3e, 64             
5675:248 | DONE dir | em 16 16 |        |             |                 73 3e 64                 --  s > d
5675:249 | DONE wsp | em 16 16 |        |             |
5675:250 | DONE lbl | em 16 16 | 00628d |             | nt_twofromr                          
5675:251 | DONE dir | em 16 16 | 00628d | (2 bytes)   |         .byte 3, CO                  NC is special case
5675:251 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5675:252 | DONE dir | em 16 16 | 00628f | (6 bytes)   |         .word nt_stod, xt_twofromr, 005445 
5675:252 | DONE dir | em 16 16 |        |             |                 82 62 35 54 45 54        --  . b 5 T E T
5675:253 | DONE dir | em 16 16 | 006295 | (3 bytes)   |         .byte 32, 72, 3e             
5675:253 | DONE dir | em 16 16 |        |             |                 32 72 3e                 --  2 r >
5675:254 | DONE wsp | em 16 16 |        |             |
5675:255 | DONE lbl | em 16 16 | 006298 |             | nt_twotor                            
5675:256 | DONE dir | em 16 16 | 006298 | (2 bytes)   |         .byte 3, CO                  NC is special case
5675:256 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5675:257 | DONE dir | em 16 16 | 00629a | (6 bytes)   |         .word nt_twofromr, xt_twotor, 005415 
5675:257 | DONE dir | em 16 16 |        |             |                 8d 62 05 54 15 54        --  . b . T . T
5675:258 | DONE dir | em 16 16 | 0062a0 | (3 bytes)   |         .byte 32, 3e, 72             
5675:258 | DONE dir | em 16 16 |        |             |                 32 3e 72                 --  2 > r
5675:259 | DONE wsp | em 16 16 |        |             |
5675:260 | DONE lbl | em 16 16 | 0062a3 |             | nt_dminus                            
5675:261 | DONE dir | em 16 16 | 0062a3 | (2 bytes)   |         .byte 2, 00                  
5675:261 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:262 | DONE dir | em 16 16 | 0062a5 | (6 bytes)   |         .word nt_twotor, xt_dminus, 00584e 
5675:262 | DONE dir | em 16 16 |        |             |                 98 62 3a 58 4e 58        --  . b : X N X
5675:263 | DONE dir | em 16 16 | 0062ab | (2 bytes)   |         .byte 64, 2d                 
5675:263 | DONE dir | em 16 16 |        |             |                 64 2d                    --  d -
5675:264 | DONE wsp | em 16 16 |        |             |
5675:265 | DONE lbl | em 16 16 | 0062ad |             | nt_dplus                             
5675:266 | DONE dir | em 16 16 | 0062ad | (2 bytes)   |         .byte 2, 00                  
5675:266 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:267 | DONE dir | em 16 16 | 0062af | (6 bytes)   |         .word nt_dminus, xt_dplus, 005839 
5675:267 | DONE dir | em 16 16 |        |             |                 a3 62 28 58 39 58        --  . b ( X 9 X
5675:268 | DONE dir | em 16 16 | 0062b5 | (2 bytes)   |         .byte 64, 2b                 
5675:268 | DONE dir | em 16 16 |        |             |                 64 2b                    --  d +
5675:269 | DONE wsp | em 16 16 |        |             |
5675:270 | DONE lbl | em 16 16 | 0062b7 |             | nt_fmmod                             
5675:271 | DONE dir | em 16 16 | 0062b7 | (2 bytes)   |         .byte 6, 00                  
5675:271 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:272 | DONE dir | em 16 16 | 0062b9 | (6 bytes)   |         .word nt_dplus, xt_fmmod, 005a2e 
5675:272 | DONE dir | em 16 16 |        |             |                 ad 62 db 59 2e 5a        --  . b . Y . Z
5675:273 | DONE dir | em 16 16 | 0062bf | (6 bytes)   |         .byte 66, 6d, 2f, 6d, 6f, 64 
5675:273 | DONE dir | em 16 16 |        |             |                 66 6d 2f 6d 6f 64        --  f m / m o d
5675:274 | DONE wsp | em 16 16 |        |             |
5675:275 | DONE lbl | em 16 16 | 0062c5 |             | nt_smrem                             
5675:276 | DONE dir | em 16 16 | 0062c5 | (2 bytes)   |         .byte 6, 00                  
5675:276 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:277 | DONE dir | em 16 16 | 0062c7 | (6 bytes)   |         .word nt_fmmod, xt_smrem, 005eae 
5675:277 | DONE dir | em 16 16 |        |             |                 b7 62 55 5e ae 5e        --  . b U ^ . ^
5675:278 | DONE dir | em 16 16 | 0062cd | (6 bytes)   |         .byte 73, 6d, 2f, 72, 65, 6d 
5675:278 | DONE dir | em 16 16 |        |             |                 73 6d 2f 72 65 6d        --  s m / r e m
5675:279 | DONE wsp | em 16 16 |        |             |
5675:280 | DONE lbl | em 16 16 | 0062d3 |             | nt_udmod                             
5675:281 | DONE dir | em 16 16 | 0062d3 | (2 bytes)   |         .byte 6, 00                  
5675:281 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:282 | DONE dir | em 16 16 | 0062d5 | (6 bytes)   |         .word nt_smrem, xt_udmod, 005f51 
5675:282 | DONE dir | em 16 16 |        |             |                 c5 62 36 5f 51 5f        --  . b 6 _ Q _
5675:283 | DONE dir | em 16 16 | 0062db | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
5675:283 | DONE dir | em 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
5675:284 | DONE wsp | em 16 16 |        |             |
5675:285 | DONE lbl | em 16 16 | 0062e1 |             | nt_ummod                             
5675:286 | DONE dir | em 16 16 | 0062e1 | (2 bytes)   |         .byte 6, 00                  
5675:286 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:287 | DONE dir | em 16 16 | 0062e3 | (6 bytes)   |         .word nt_udmod, xt_ummod, 006001 
5675:287 | DONE dir | em 16 16 |        |             |                 d3 62 b1 5f 01 60        --  . b . _ . `
5675:288 | DONE dir | em 16 16 | 0062e9 | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
5675:288 | DONE dir | em 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
5675:289 | DONE wsp | em 16 16 |        |             |
5675:290 | DONE lbl | em 16 16 | 0062ef |             | nt_star                              
5675:291 | DONE dir | em 16 16 | 0062ef | (2 bytes)   |         .byte 1, 00                  
5675:291 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:292 | DONE dir | em 16 16 | 0062f1 | (6 bytes)   |         .word nt_ummod, xt_star, 005ee1 
5675:292 | DONE dir | em 16 16 |        |             |                 e1 62 da 5e e1 5e        --  . b . ^ . ^
5675:293 | DONE dir | em 16 16 | 0062f7 | (1 bytes)   |         .byte 2a                     
5675:293 | DONE dir | em 16 16 |        |             |                 2a                       --  *
5675:294 | DONE wsp | em 16 16 |        |             |
5675:295 | DONE lbl | em 16 16 | 0062f8 |             | nt_mstar                             
5675:296 | DONE dir | em 16 16 | 0062f8 | (2 bytes)   |         .byte 2, 00                  
5675:296 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:297 | DONE dir | em 16 16 | 0062fa | (6 bytes)   |         .word nt_star, xt_mstar, 005b26 
5675:297 | DONE dir | em 16 16 |        |             |                 ef 62 07 5b 26 5b        --  . b . [ & [
5675:298 | DONE dir | em 16 16 | 006300 | (2 bytes)   |         .byte 6d, 2a                 
5675:298 | DONE dir | em 16 16 |        |             |                 6d 2a                    --  m *
5675:299 | DONE wsp | em 16 16 |        |             |
5675:300 | DONE lbl | em 16 16 | 006302 |             | nt_umstar                            
5675:301 | DONE dir | em 16 16 | 006302 | (2 bytes)   |         .byte 3, 00                  
5675:301 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:302 | DONE dir | em 16 16 | 006304 | (6 bytes)   |         .word nt_mstar, xt_umstar, 005fb0 
5675:302 | DONE dir | em 16 16 |        |             |                 f8 62 52 5f b0 5f        --  . b R _ . _
5675:303 | DONE dir | em 16 16 | 00630a | (3 bytes)   |         .byte 75, 6d, 2a             
5675:303 | DONE dir | em 16 16 |        |             |                 75 6d 2a                 --  u m *
5675:304 | DONE wsp | em 16 16 |        |             |
5675:305 | DONE lbl | em 16 16 | 00630d |             | nt_cmoveup                           
5675:306 | DONE dir | em 16 16 | 00630d | (2 bytes)   |         .byte 6, 00                  
5675:306 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:307 | DONE dir | em 16 16 | 00630f | (6 bytes)   |         .word nt_umstar, xt_cmoveup, 00567f 
5675:307 | DONE dir | em 16 16 |        |             |                 02 63 67 56 7f 56        --  . c g V . V
5675:308 | DONE dir | em 16 16 | 006315 | (6 bytes)   |         .byte 63, 6d, 6f, 76, 65, 3e 
5675:308 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65 3e        --  c m o v e >
5675:309 | DONE wsp | em 16 16 |        |             |
5675:310 | DONE lbl | em 16 16 | 00631b |             | nt_cmove                             
5675:311 | DONE dir | em 16 16 | 00631b | (2 bytes)   |         .byte 5, 00                  
5675:311 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:312 | DONE dir | em 16 16 | 00631d | (6 bytes)   |         .word nt_cmoveup, xt_cmove, 005666 
5675:312 | DONE dir | em 16 16 |        |             |                 0d 63 44 56 66 56        --   c D V f V
5675:313 | DONE dir | em 16 16 | 006323 | (5 bytes)   |         .byte 63, 6d, 6f, 76, 65     
5675:313 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65           --  c m o v e
5675:314 | DONE wsp | em 16 16 |        |             |
5675:315 | DONE lbl | em 16 16 | 006328 |             | nt_count                             
5675:316 | DONE dir | em 16 16 | 006328 | (2 bytes)   |         .byte 5, 00                  
5675:316 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:317 | DONE dir | em 16 16 | 00632a | (6 bytes)   |         .word nt_cmove, xt_count, 005759 
5675:317 | DONE dir | em 16 16 |        |             |                 1b 63 4c 57 59 57        --  . c L W Y W
5675:318 | DONE dir | em 16 16 | 006330 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
5675:318 | DONE dir | em 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
5675:319 | DONE wsp | em 16 16 |        |             |
5675:320 | DONE lbl | em 16 16 | 006335 |             | nt_abortq                            
5675:321 | DONE dir | em 16 16 | 006335 | (2 bytes)   |         .byte 6, { CO + IM }         
5675:321 | DONE dir | em 16 16 |        |             |                 06 05                    --  . .
5675:322 | DONE dir | em 16 16 | 006337 | (6 bytes)   |         .word nt_count, xt_abortq, 0054b0 
5675:322 | DONE dir | em 16 16 |        |             |                 28 63 94 54 b0 54        --  ( c . T . T
5675:323 | DONE dir | em 16 16 | 00633d | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
5675:323 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
5675:324 | DONE wsp | em 16 16 |        |             |
5675:325 | DONE lbl | em 16 16 | 006343 |             | nt_abort                             
5675:326 | DONE dir | em 16 16 | 006343 | (2 bytes)   |         .byte 5, NN                  TODO check flags - NC possible?
5675:326 | DONE dir | em 16 16 |        |             |                 05 08                    --  . .
5675:327 | DONE dir | em 16 16 | 006345 | (6 bytes)   |         .word nt_abortq, xt_abort, 0050f6 
5675:327 | DONE dir | em 16 16 |        |             |                 35 63 af 50 f6 50        --  5 c . P . P
5675:328 | DONE dir | em 16 16 | 00634b | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
5675:328 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
5675:329 | DONE wsp | em 16 16 |        |             |
5675:330 | DONE lbl | em 16 16 | 006350 |             | nt_parse                             
5675:331 | DONE dir | em 16 16 | 006350 | (2 bytes)   |         .byte 5, 00                  
5675:331 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:332 | DONE dir | em 16 16 | 006352 | (6 bytes)   |         .word nt_abort, xt_parse, 005cd9 
5675:332 | DONE dir | em 16 16 |        |             |                 43 63 a7 5c d9 5c        --  C c . \ . \
5675:333 | DONE dir | em 16 16 | 006358 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
5675:333 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
5675:334 | DONE wsp | em 16 16 |        |             |
5675:335 | DONE lbl | em 16 16 | 00635d |             | nt_quit                              
5675:336 | DONE dir | em 16 16 | 00635d | (2 bytes)   |         .byte 4, 00                  
5675:336 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:337 | DONE dir | em 16 16 | 00635f | (6 bytes)   |         .word nt_parse, xt_quit, 0050f6 
5675:337 | DONE dir | em 16 16 |        |             |                 50 63 b7 50 f6 50        --  P c . P . P
5675:338 | DONE dir | em 16 16 | 006365 | (4 bytes)   |         .byte 71, 75, 69, 74         
5675:338 | DONE dir | em 16 16 |        |             |                 71 75 69 74              --  q u i t
5675:339 | DONE wsp | em 16 16 |        |             |
5675:340 | DONE lbl | em 16 16 | 006369 |             | nt_question                          
5675:341 | DONE dir | em 16 16 | 006369 | (2 bytes)   |         .byte 1, 00                  
5675:341 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:342 | DONE dir | em 16 16 | 00636b | (6 bytes)   |         .word nt_quit, xt_question, 0052c2 
5675:342 | DONE dir | em 16 16 |        |             |                 5d 63 bc 52 c2 52        --  ] c . R . R
5675:343 | DONE dir | em 16 16 | 006371 | (1 bytes)   |         .byte 3f                     
5675:343 | DONE dir | em 16 16 |        |             |                 3f                       --  ?
5675:344 | DONE wsp | em 16 16 |        |             |
5675:345 | DONE lbl | em 16 16 | 006372 |             | nt_int-name                          
5675:346 | DONE dir | em 16 16 | 006372 | (2 bytes)   |         .byte 8, 00                  
5675:346 | DONE dir | em 16 16 |        |             |                 08 00                    --  . .
5675:347 | DONE dir | em 16 16 | 006374 | (6 bytes)   |         .word nt_question, xt_int-name, 005a8c 
5675:347 | DONE dir | em 16 16 |        |             |                 69 63 69 5a 8c 5a        --  i c i Z . Z
5675:348 | DONE dir | em 16 16 | 00637a | (8 bytes)   |         .byte 69, 6e, 74, 3e, 6e, 61, 6d, 65 
5675:348 | DONE dir | em 16 16 |        |             |                 69 6e 74 3e 6e 61 6d 65  --  i n t > n a m e
5675:348 | DONE dir | em 16 16 |        |             |                                          -- 
5675:349 | DONE wsp | em 16 16 |        |             |
5675:350 | DONE lbl | em 16 16 | 006382 |             | nt_name-int                          
5675:351 | DONE dir | em 16 16 | 006382 | (2 bytes)   |         .byte 8, 00                  
5675:351 | DONE dir | em 16 16 |        |             |                 08 00                    --  . .
5675:352 | DONE dir | em 16 16 | 006384 | (6 bytes)   |         .word nt_int-name, xt_name-int, 005b93 
5675:352 | DONE dir | em 16 16 |        |             |                 72 63 8b 5b 93 5b        --  r c . [ . [
5675:353 | DONE dir | em 16 16 | 00638a | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
5675:353 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
5675:353 | DONE dir | em 16 16 |        |             |                                          -- 
5675:354 | DONE wsp | em 16 16 |        |             |
5675:355 | DONE lbl | em 16 16 | 006392 |             | nt_cr                                
5675:356 | DONE dir | em 16 16 | 006392 | (2 bytes)   |         .byte 2, 00                  
5675:356 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:357 | DONE dir | em 16 16 | 006394 | (6 bytes)   |         .word nt_name-int, xt_cr, 005760 
5675:357 | DONE dir | em 16 16 |        |             |                 82 63 5a 57 60 57        --  . c Z W ` W
5675:358 | DONE dir | em 16 16 | 00639a | (2 bytes)   |         .byte 63, 72                 
5675:358 | DONE dir | em 16 16 |        |             |                 63 72                    --  c r
5675:359 | DONE wsp | em 16 16 |        |             |
5675:360 | DONE lbl | em 16 16 | 00639c |             | nt_fill                              
5675:361 | DONE dir | em 16 16 | 00639c | (2 bytes)   |         .byte 4, 00                  
5675:361 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:362 | DONE dir | em 16 16 | 00639e | (6 bytes)   |         .word nt_cr, xt_fill, 005916 
5675:362 | DONE dir | em 16 16 |        |             |                 92 63 fc 58 16 59        --  . c . X . Y
5675:363 | DONE dir | em 16 16 | 0063a4 | (4 bytes)   |         .byte 66, 69, 6c, 6c         
5675:363 | DONE dir | em 16 16 |        |             |                 66 69 6c 6c              --  f i l l
5675:364 | DONE wsp | em 16 16 |        |             |
5675:365 | DONE lbl | em 16 16 | 0063a8 |             | nt_erase                             
5675:366 | DONE dir | em 16 16 | 0063a8 | (2 bytes)   |         .byte 5, 00                  
5675:366 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:367 | DONE dir | em 16 16 | 0063aa | (6 bytes)   |         .word nt_fill, xt_erase, 005916 
5675:367 | DONE dir | em 16 16 |        |             |                 9c 63 f4 58 16 59        --  . c . X . Y
5675:368 | DONE dir | em 16 16 | 0063b0 | (5 bytes)   |         .byte 65, 72, 61, 73, 65     
5675:368 | DONE dir | em 16 16 |        |             |                 65 72 61 73 65           --  e r a s e
5675:369 | DONE wsp | em 16 16 |        |             |
5675:370 | DONE lbl | em 16 16 | 0063b5 |             | nt_numbermore                        
5675:371 | DONE dir | em 16 16 | 0063b5 | (2 bytes)   |         .byte 2, 00                  "quoth the rumben"
5675:371 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:372 | DONE dir | em 16 16 | 0063b7 | (6 bytes)   |         .word nt_erase, xt_numbermore, 0052b2 
5675:372 | DONE dir | em 16 16 |        |             |                 a8 63 a4 52 b2 52        --  . c . R . R
5675:373 | DONE dir | em 16 16 | 0063bd | (2 bytes)   |         .byte 23, 3e                 
5675:373 | DONE dir | em 16 16 |        |             |                 23 3e                    --  # >
5675:374 | DONE wsp | em 16 16 |        |             |
5675:375 | DONE lbl | em 16 16 | 0063bf |             | nt_hold                              
5675:376 | DONE dir | em 16 16 | 0063bf | (2 bytes)   |         .byte 4, 00                  
5675:376 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:377 | DONE dir | em 16 16 | 0063c1 | (6 bytes)   |         .word nt_numbermore, xt_hold, 005aad 
5675:377 | DONE dir | em 16 16 |        |             |                 b5 63 a0 5a ad 5a        --  . c . Z . Z
5675:378 | DONE dir | em 16 16 | 0063c7 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
5675:378 | DONE dir | em 16 16 |        |             |                 68 6f 6c 64              --  h o l d
5675:379 | DONE wsp | em 16 16 |        |             |
5675:380 | DONE lbl | em 16 16 | 0063cb |             | nt_hashs                             
5675:381 | DONE dir | em 16 16 | 0063cb | (2 bytes)   |         .byte 2, 00                  also known as "number-s"
5675:381 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:382 | DONE dir | em 16 16 | 0063cd | (6 bytes)   |         .word nt_hold, xt_hashs, 0052bb 
5675:382 | DONE dir | em 16 16 |        |             |                 bf 63 b3 52 bb 52        --  . c . R . R
5675:383 | DONE dir | em 16 16 | 0063d3 | (2 bytes)   |         .byte 23, 73                 
5675:383 | DONE dir | em 16 16 |        |             |                 23 73                    --  # s
5675:384 | DONE wsp | em 16 16 |        |             |
5675:385 | DONE lbl | em 16 16 | 0063d5 |             | nt_sign                              
5675:386 | DONE dir | em 16 16 | 0063d5 | (2 bytes)   |         .byte 4, 00                  
5675:386 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:387 | DONE dir | em 16 16 | 0063d7 | (6 bytes)   |         .word nt_hashs, xt_sign, 005df3 
5675:387 | DONE dir | em 16 16 |        |             |                 cb 63 e4 5d f3 5d        --  . c . ] . ]
5675:388 | DONE dir | em 16 16 | 0063dd | (4 bytes)   |         .byte 73, 69, 67, 6e         
5675:388 | DONE dir | em 16 16 |        |             |                 73 69 67 6e              --  s i g n
5675:389 | DONE wsp | em 16 16 |        |             |
5675:390 | DONE lbl | em 16 16 | 0063e1 |             | nt_hash                              
5675:391 | DONE dir | em 16 16 | 0063e1 | (2 bytes)   |         .byte 1, 00                  also known as "number-sign"
5675:391 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:392 | DONE dir | em 16 16 | 0063e3 | (6 bytes)   |         .word nt_sign, xt_hash, 0052a3 
5675:392 | DONE dir | em 16 16 |        |             |                 d5 63 89 52 a3 52        --  . c . R . R
5675:393 | DONE dir | em 16 16 | 0063e9 | (1 bytes)   |         .byte 23                     
5675:393 | DONE dir | em 16 16 |        |             |                 23                       --  #
5675:394 | DONE wsp | em 16 16 |        |             |
5675:395 | DONE lbl | em 16 16 | 0063ea |             | nt_lessnumber                        
5675:396 | DONE dir | em 16 16 | 0063ea | (2 bytes)   |         .byte 2, 00                  
5675:396 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:397 | DONE dir | em 16 16 | 0063ec | (6 bytes)   |         .word nt_hash, xt_lessnumber, 00511f 
5675:397 | DONE dir | em 16 16 |        |             |                 e1 63 16 51 1f 51        --  . c . Q . Q
5675:398 | DONE dir | em 16 16 | 0063f2 | (2 bytes)   |         .byte 3c, 23                 
5675:398 | DONE dir | em 16 16 |        |             |                 3c 23                    --  < #
5675:399 | DONE wsp | em 16 16 |        |             |
5675:400 | DONE lbl | em 16 16 | 0063f4 |             | nt_bl                                
5675:401 | DONE dir | em 16 16 | 0063f4 | (2 bytes)   |         .byte 2, 00                  
5675:401 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:402 | DONE dir | em 16 16 | 0063f6 | (6 bytes)   |         .word nt_lessnumber, xt_bl, 0055d8 
5675:402 | DONE dir | em 16 16 |        |             |                 ea 63 d1 55 d8 55        --  . c . U . U
5675:403 | DONE dir | em 16 16 | 0063fc | (2 bytes)   |         .byte 62, 6c                 
5675:403 | DONE dir | em 16 16 |        |             |                 62 6c                    --  b l
5675:404 | DONE wsp | em 16 16 |        |             |
5675:405 | DONE lbl | em 16 16 | 0063fe |             | nt_spaces                            
5675:406 | DONE dir | em 16 16 | 0063fe | (2 bytes)   |         .byte 6, 00                  
5675:406 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:407 | DONE dir | em 16 16 | 006400 | (6 bytes)   |         .word nt_bl, xt_spaces, 005ed9 
5675:407 | DONE dir | em 16 16 |        |             |                 f4 63 ca 5e d9 5e        --  . c . ^ . ^
5675:408 | DONE dir | em 16 16 | 006406 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
5675:408 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
5675:409 | DONE wsp | em 16 16 |        |             |
5675:410 | DONE lbl | em 16 16 | 00640c |             | nt_space                             
5675:411 | DONE dir | em 16 16 | 00640c | (2 bytes)   |         .byte 5, 00                  
5675:411 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:412 | DONE dir | em 16 16 | 00640e | (6 bytes)   |         .word nt_spaces, xt_space, 005ec9 
5675:412 | DONE dir | em 16 16 |        |             |                 fe 63 c3 5e c9 5e        --  . c . ^ . ^
5675:413 | DONE dir | em 16 16 | 006414 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
5675:413 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
5675:414 | DONE wsp | em 16 16 |        |             |
5675:415 | DONE lbl | em 16 16 | 006419 |             | nt_dots                              
5675:416 | DONE dir | em 16 16 | 006419 | (2 bytes)   |         .byte 2, 00                  
5675:416 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:417 | DONE dir | em 16 16 | 00641b | (6 bytes)   |         .word nt_space, xt_dots, 005241 
5675:417 | DONE dir | em 16 16 |        |             |                 0c 64 0a 52 41 52        --   d 
 R A R
5675:418 | DONE dir | em 16 16 | 006421 | (2 bytes)   |         .byte 2e, 73                 
5675:418 | DONE dir | em 16 16 |        |             |                 2e 73                    --  . s
5675:419 | DONE wsp | em 16 16 |        |             |
5675:420 | DONE lbl | em 16 16 | 006423 |             | nt_type                              
5675:421 | DONE dir | em 16 16 | 006423 | (2 bytes)   |         .byte 4, 00                  
5675:421 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:422 | DONE dir | em 16 16 | 006425 | (6 bytes)   |         .word nt_dots, xt_type, 005f2b 
5675:422 | DONE dir | em 16 16 |        |             |                 19 64 0b 5f 2b 5f        --  . d  _ + _
5675:423 | DONE dir | em 16 16 | 00642b | (4 bytes)   |         .byte 74, 79, 70, 65         
5675:423 | DONE dir | em 16 16 |        |             |                 74 79 70 65              --  t y p e
5675:424 | DONE wsp | em 16 16 |        |             |
5675:425 | DONE lbl | em 16 16 | 00642f |             | nt_udot                              
5675:426 | DONE dir | em 16 16 | 00642f | (2 bytes)   |         .byte 2, 00                  
5675:426 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:427 | DONE dir | em 16 16 | 006431 | (6 bytes)   |         .word nt_type, xt_udot, 005f35 
5675:427 | DONE dir | em 16 16 |        |             |                 23 64 2c 5f 35 5f        --  # d , _ 5 _
5675:428 | DONE dir | em 16 16 | 006437 | (2 bytes)   |         .byte 75, 2e                 
5675:428 | DONE dir | em 16 16 |        |             |                 75 2e                    --  u .
5675:429 | DONE wsp | em 16 16 |        |             |
5675:430 | DONE lbl | em 16 16 | 006439 |             | nt_emit                              
5675:431 | DONE dir | em 16 16 | 006439 | (2 bytes)   |         .byte 4, 0                   not native compile
5675:431 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:432 | DONE dir | em 16 16 | 00643b | (6 bytes)   |         .word nt_udot, xt_emit, 0058f4 
5675:432 | DONE dir | em 16 16 |        |             |                 2f 64 ec 58 f4 58        --  / d . X . X
5675:433 | DONE dir | em 16 16 | 006441 | (4 bytes)   |         .byte 65, 6d, 69, 74         
5675:433 | DONE dir | em 16 16 |        |             |                 65 6d 69 74              --  e m i t
5675:434 | DONE wsp | em 16 16 |        |             |
5675:435 | DONE lbl | em 16 16 | 006445 |             | nt_dot                               
5675:436 | DONE dir | em 16 16 | 006445 | (2 bytes)   |         .byte 1, 00                  
5675:436 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:437 | DONE dir | em 16 16 | 006447 | (6 bytes)   |         .word nt_emit, xt_dot, 0051f5 
5675:437 | DONE dir | em 16 16 |        |             |                 39 64 d7 51 f5 51        --  9 d . Q . Q
5675:438 | DONE dir | em 16 16 | 00644d | (1 bytes)   |         .byte 2e                     
5675:438 | DONE dir | em 16 16 |        |             |                 2e                       --  .
5675:439 | DONE wsp | em 16 16 |        |             |
5675:440 | DONE lbl | em 16 16 | 00644e |             | nt_pad                               
5675:441 | DONE dir | em 16 16 | 00644e | (2 bytes)   |         .byte 3, 00                  
5675:441 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:442 | DONE dir | em 16 16 | 006450 | (6 bytes)   |         .word nt_dot, xt_pad, 005c65 
5675:442 | DONE dir | em 16 16 |        |             |                 45 64 5a 5c 65 5c        --  E d Z \ e \
5675:443 | DONE dir | em 16 16 | 006456 | (3 bytes)   |         .byte 70, 61, 64             
5675:443 | DONE dir | em 16 16 |        |             |                 70 61 64                 --  p a d
5675:444 | DONE wsp | em 16 16 |        |             |
5675:445 | DONE lbl | em 16 16 | 006459 |             | nt_base                              
5675:446 | DONE dir | em 16 16 | 006459 | (2 bytes)   |         .byte 4, 00                  
5675:446 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:447 | DONE dir | em 16 16 | 00645b | (6 bytes)   |         .word nt_pad, xt_base, 0055c2 
5675:447 | DONE dir | em 16 16 |        |             |                 4e 64 bb 55 c2 55        --  N d . U . U
5675:448 | DONE dir | em 16 16 | 006461 | (4 bytes)   |         .byte 62, 61, 73, 65         
5675:448 | DONE dir | em 16 16 |        |             |                 62 61 73 65              --  b a s e
5675:449 | DONE wsp | em 16 16 |        |             |
5675:450 | DONE lbl | em 16 16 | 006465 |             | nt_nc-limit                          
5675:451 | DONE dir | em 16 16 | 006465 | (2 bytes)   |         .byte 8, 00                  
5675:451 | DONE dir | em 16 16 |        |             |                 08 00                    --  . .
5675:452 | DONE dir | em 16 16 | 006467 | (6 bytes)   |         .word nt_base, xt_nc-limit, 005bac 
5675:452 | DONE dir | em 16 16 |        |             |                 59 64 a5 5b ac 5b        --  Y d . [ . [
5675:453 | DONE dir | em 16 16 | 00646d | (8 bytes)   |         .byte 6e, 63, 2d, 6c, 69, 6d, 69, 74 
5675:453 | DONE dir | em 16 16 |        |             |                 6e 63 2d 6c 69 6d 69 74  --  n c - l i m i t
5675:453 | DONE dir | em 16 16 |        |             |                                          -- 
5675:454 | DONE wsp | em 16 16 |        |             |
5675:455 | DONE lbl | em 16 16 | 006475 |             | nt_input                             
5675:456 | DONE dir | em 16 16 | 006475 | (2 bytes)   |         .byte 5, 00                  
5675:456 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:457 | DONE dir | em 16 16 | 006477 | (6 bytes)   |         .word nt_nc-limit, xt_input, 005a68 
5675:457 | DONE dir | em 16 16 |        |             |                 65 64 61 5a 68 5a        --  e d a Z h Z
5675:458 | DONE dir | em 16 16 | 00647d | (5 bytes)   |         .byte 69, 6e, 70, 75, 74     
5675:458 | DONE dir | em 16 16 |        |             |                 69 6e 70 75 74           --  i n p u t
5675:459 | DONE wsp | em 16 16 |        |             |
5675:460 | DONE lbl | em 16 16 | 006482 |             | nt_output                            
5675:461 | DONE dir | em 16 16 | 006482 | (2 bytes)   |         .byte 6, 00                  
5675:461 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:462 | DONE dir | em 16 16 | 006484 | (6 bytes)   |         .word nt_input, xt_output, 005c52 
5675:462 | DONE dir | em 16 16 |        |             |                 75 64 4b 5c 52 5c        --  u d K \ R \
5675:463 | DONE dir | em 16 16 | 00648a | (6 bytes)   |         .byte 6f, 75, 74, 70, 75, 74 
5675:463 | DONE dir | em 16 16 |        |             |                 6f 75 74 70 75 74        --  o u t p u t
5675:464 | DONE wsp | em 16 16 |        |             |
5675:465 | DONE lbl | em 16 16 | 006490 |             | nt_evaluate                          
5675:466 | DONE dir | em 16 16 | 006490 | (2 bytes)   |         .byte 8, 00                  
5675:466 | DONE dir | em 16 16 |        |             |                 08 00                    --  . .
5675:467 | DONE dir | em 16 16 | 006492 | (6 bytes)   |         .word nt_output, xt_evaluate, 005945 
5675:467 | DONE dir | em 16 16 |        |             |                 82 64 17 59 45 59        --  . d . Y E Y
5675:468 | DONE dir | em 16 16 | 006498 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
5675:468 | DONE dir | em 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
5675:468 | DONE dir | em 16 16 |        |             |                                          -- 
5675:469 | DONE wsp | em 16 16 |        |             |
5675:470 | DONE lbl | em 16 16 | 0064a0 |             | nt_cells                             
5675:471 | DONE dir | em 16 16 | 0064a0 | (2 bytes)   |         .byte 5, 00                  2* because we have 16 bit stack
5675:471 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:472 | DONE dir | em 16 16 | 0064a2 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 005404 
5675:472 | DONE dir | em 16 16 |        |             |                 90 64 01 54 04 54        --  . d . T . T
5675:473 | DONE dir | em 16 16 | 0064a8 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
5675:473 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
5675:474 | DONE wsp | em 16 16 |        |             |
5675:475 | DONE lbl | em 16 16 | 0064ad |             | nt_dotquote                          
5675:476 | DONE dir | em 16 16 | 0064ad | (2 bytes)   |         .byte 2, { CO + IM }         
5675:476 | DONE dir | em 16 16 |        |             |                 02 05                    --  . .
5675:477 | DONE dir | em 16 16 | 0064af | (6 bytes)   |         .word nt_cells, xt_dotquote, 005209 
5675:477 | DONE dir | em 16 16 |        |             |                 a0 64 f6 51 09 52        --  . d . Q 	 R
5675:478 | DONE dir | em 16 16 | 0064b5 | (2 bytes)   |         .byte 2e, &34                
5675:478 | DONE dir | em 16 16 |        |             |                 2e 22                    --  . "
5675:479 | DONE wsp | em 16 16 |        |             |
5675:480 | DONE lbl | em 16 16 | 0064b7 |             | nt_squote                            
5675:481 | DONE dir | em 16 16 | 0064b7 | (2 bytes)   |         .byte 2, IM                  not CO, see source code
5675:481 | DONE dir | em 16 16 |        |             |                 02 04                    --  . .
5675:482 | DONE dir | em 16 16 | 0064b9 | (6 bytes)   |         .word nt_dotquote, xt_squote, 005dd3 
5675:482 | DONE dir | em 16 16 |        |             |                 ad 64 9e 5d d3 5d        --  . d . ] . ]
5675:483 | DONE dir | em 16 16 | 0064bf | (2 bytes)   |         .byte 73, &34                
5675:483 | DONE dir | em 16 16 |        |             |                 73 22                    --  s "
5675:484 | DONE wsp | em 16 16 |        |             |
5675:485 | DONE lbl | em 16 16 | 0064c1 |             | nt_sliteral                          
5675:486 | DONE dir | em 16 16 | 0064c1 | (2 bytes)   |         .byte 8, { IM + CO }         
5675:486 | DONE dir | em 16 16 |        |             |                 08 05                    --  . .
5675:487 | DONE dir | em 16 16 | 0064c3 | (6 bytes)   |         .word nt_squote, xt_sliteral, 005e3e 
5675:487 | DONE dir | em 16 16 |        |             |                 b7 64 f4 5d 3e 5e        --  . d . ] > ^
5675:488 | DONE dir | em 16 16 | 0064c9 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
5675:488 | DONE dir | em 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
5675:488 | DONE dir | em 16 16 |        |             |                                          -- 
5675:489 | DONE wsp | em 16 16 |        |             |
5675:490 | DONE lbl | em 16 16 | 0064d1 |             | nt_brackettick                       
5675:491 | DONE dir | em 16 16 | 0064d1 | (2 bytes)   |         .byte 3, { IM + CO }         
5675:491 | DONE dir | em 16 16 |        |             |                 03 05                    --  . .
5675:492 | DONE dir | em 16 16 | 0064d3 | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 00531b 
5675:492 | DONE dir | em 16 16 |        |             |                 c1 64 15 53 1b 53        --  . d . S . S
5675:493 | DONE dir | em 16 16 | 0064d9 | (3 bytes)   |         .byte 5b, 27, 5d             
5675:493 | DONE dir | em 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
5675:494 | DONE wsp | em 16 16 |        |             |
5675:495 | DONE lbl | em 16 16 | 0064dc |             | nt_bracketchar                       
5675:496 | DONE dir | em 16 16 | 0064dc | (2 bytes)   |         .byte 6, { IM + CO }         
5675:496 | DONE dir | em 16 16 |        |             |                 06 05                    --  . .
5675:497 | DONE dir | em 16 16 | 0064de | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 00532b 
5675:497 | DONE dir | em 16 16 |        |             |                 d1 64 25 53 2b 53        --  . d % S + S
5675:498 | DONE dir | em 16 16 | 0064e4 | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
5675:498 | DONE dir | em 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
5675:499 | DONE wsp | em 16 16 |        |             |
5675:500 | DONE lbl | em 16 16 | 0064ea |             | nt_literal                           
5675:501 | DONE dir | em 16 16 | 0064ea | (2 bytes)   |         .byte 7, { IM + CO }         
5675:501 | DONE dir | em 16 16 |        |             |                 07 05                    --  . .
5675:502 | DONE dir | em 16 16 | 0064ec | (6 bytes)   |         .word nt_bracketchar, xt_literal, 005ae5 
5675:502 | DONE dir | em 16 16 |        |             |                 dc 64 d4 5a e5 5a        --  . d . Z . Z
5675:503 | DONE dir | em 16 16 | 0064f2 | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
5675:503 | DONE dir | em 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
5675:504 | DONE wsp | em 16 16 |        |             |
5675:505 | DONE lbl | em 16 16 | 0064f9 |             | nt_never-compile                     
5675:506 | DONE dir | em 16 16 | 0064f9 | (2 bytes)   |         .byte 0d, 00                 
5675:506 | DONE dir | em 16 16 |        |             |                 0d 00                    --   .
5675:507 | DONE dir | em 16 16 | 0064fb | (6 bytes)   |         .word nt_literal, xt_never-compile, 005bbc 
5675:507 | DONE dir | em 16 16 |        |             |                 ea 64 b4 5b bc 5b        --  . d . [ . [
5675:508 | DONE dir | em 16 16 | 006501 | (13 bytes)  |         .byte 6e, 65, 76, 65, 72, 2d, 63, 6f, 6d, 70, 69, 6c, 65 
5675:508 | DONE dir | em 16 16 |        |             |                 6e 65 76 65 72 2d 63 6f  --  n e v e r - c o
5675:508 | DONE dir | em 16 16 |        |             |                 6d 70 69 6c 65           --  m p i l e
5675:509 | DONE wsp | em 16 16 |        |             |
5675:510 | DONE lbl | em 16 16 | 00650e |             | nt_compile-only                      
5675:511 | DONE dir | em 16 16 | 00650e | (2 bytes)   |         .byte 0c, 00                 
5675:511 | DONE dir | em 16 16 |        |             |                 0c 00                    --   .
5675:512 | DONE dir | em 16 16 | 006510 | (6 bytes)   |         .word nt_never-compile, xt_compile-only, 005688 
5675:512 | DONE dir | em 16 16 |        |             |                 f9 64 80 56 88 56        --  . d . V . V
5675:513 | DONE dir | em 16 16 | 006516 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
5675:513 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5675:513 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
5675:514 | DONE wsp | em 16 16 |        |             |
5675:515 | DONE lbl | em 16 16 | 006522 |             | nt_immediate                         
5675:516 | DONE dir | em 16 16 | 006522 | (2 bytes)   |         .byte 9, 00                  
5675:516 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5675:517 | DONE dir | em 16 16 | 006524 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 005a60 
5675:517 | DONE dir | em 16 16 |        |             |                 0e 65 58 5a 60 5a        --  . e X Z ` Z
5675:518 | DONE dir | em 16 16 | 00652a | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
5675:518 | DONE dir | em 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
5675:518 | DONE dir | em 16 16 |        |             |                 65                       --  e
5675:519 | DONE wsp | em 16 16 |        |             |
5675:520 | DONE lbl | em 16 16 | 006533 |             | nt_postpone                          
5675:521 | DONE dir | em 16 16 | 006533 | (2 bytes)   |         .byte 8, { IM + CO }         
5675:521 | DONE dir | em 16 16 |        |             |                 08 05                    --  . .
5675:522 | DONE dir | em 16 16 | 006535 | (6 bytes)   |         .word nt_immediate, xt_postpone, 005d2b 
5675:522 | DONE dir | em 16 16 |        |             |                 22 65 f8 5c 2b 5d        --  " e . \ + ]
5675:523 | DONE dir | em 16 16 | 00653b | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
5675:523 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5675:523 | DONE dir | em 16 16 |        |             |                                          -- 
5675:524 | DONE wsp | em 16 16 |        |             |
5675:525 | DONE lbl | em 16 16 | 006543 |             | nt_rightbracket                      
5675:526 | DONE dir | em 16 16 | 006543 | (2 bytes)   |         .byte 1, 00                  
5675:526 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:527 | DONE dir | em 16 16 | 006545 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 005324 
5675:527 | DONE dir | em 16 16 |        |             |                 33 65 1f 53 24 53        --  3 e . S $ S
5675:528 | DONE dir | em 16 16 | 00654b | (1 bytes)   |         .byte 5d                     
5675:528 | DONE dir | em 16 16 |        |             |                 5d                       --  ]
5675:529 | DONE wsp | em 16 16 |        |             |
5675:530 | DONE lbl | em 16 16 | 00654c |             | nt_leftbracket                       
5675:531 | DONE dir | em 16 16 | 00654c | (2 bytes)   |         .byte 1, { IM + CO }         
5675:531 | DONE dir | em 16 16 |        |             |                 01 05                    --  . .
5675:532 | DONE dir | em 16 16 | 00654e | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 00531e 
5675:532 | DONE dir | em 16 16 |        |             |                 43 65 1c 53 1e 53        --  C e . S . S
5675:533 | DONE dir | em 16 16 | 006554 | (1 bytes)   |         .byte 5b                     
5675:533 | DONE dir | em 16 16 |        |             |                 5b                       --  [
5675:534 | DONE wsp | em 16 16 |        |             |
5675:535 | DONE lbl | em 16 16 | 006555 |             | nt_latestnt                          
5675:536 | DONE dir | em 16 16 | 006555 | (2 bytes)   |         .byte 8, 00                  
5675:536 | DONE dir | em 16 16 |        |             |                 08 00                    --  . .
5675:537 | DONE dir | em 16 16 | 006557 | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 005ac0 
5675:537 | DONE dir | em 16 16 |        |             |                 4c 65 b9 5a c0 5a        --  L e . Z . Z
5675:538 | DONE dir | em 16 16 | 00655d | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
5675:538 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
5675:538 | DONE dir | em 16 16 |        |             |                                          -- 
5675:539 | DONE wsp | em 16 16 |        |             |
5675:540 | DONE lbl | em 16 16 | 006565 |             | nt_latestxt                          
5675:541 | DONE dir | em 16 16 | 006565 | (2 bytes)   |         .byte 8, 00                  
5675:541 | DONE dir | em 16 16 |        |             |                 08 00                    --  . .
5675:542 | DONE dir | em 16 16 | 006567 | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 005ad0 
5675:542 | DONE dir | em 16 16 |        |             |                 55 65 c1 5a d0 5a        --  U e . Z . Z
5675:543 | DONE dir | em 16 16 | 00656d | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
5675:543 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
5675:543 | DONE dir | em 16 16 |        |             |                                          -- 
5675:544 | DONE wsp | em 16 16 |        |             |
5675:545 | DONE lbl | em 16 16 | 006575 |             | nt_dtrailing                         
5675:546 | DONE dir | em 16 16 | 006575 | (2 bytes)   |         .byte 9, 00                  
5675:546 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5675:547 | DONE dir | em 16 16 | 006577 | (6 bytes)   |         .word nt_latestxt, xt_dtrailing, 00538b 
5675:547 | DONE dir | em 16 16 |        |             |                 65 65 75 53 8b 53        --  e e u S . S
5675:548 | DONE dir | em 16 16 | 00657d | (9 bytes)   |         .byte 2d, 74, 72, 61, 69, 6c, 69, 6e, 67 
5675:548 | DONE dir | em 16 16 |        |             |                 2d 74 72 61 69 6c 69 6e  --  - t r a i l i n
5675:548 | DONE dir | em 16 16 |        |             |                 67                       --  g
5675:549 | DONE wsp | em 16 16 |        |             |
5675:550 | DONE lbl | em 16 16 | 006586 |             | nt_slashstring                       
5675:551 | DONE dir | em 16 16 | 006586 | (2 bytes)   |         .byte 7, 00                  
5675:551 | DONE dir | em 16 16 |        |             |                 07 00                    --  . .
5675:552 | DONE dir | em 16 16 | 006588 | (6 bytes)   |         .word nt_dtrailing, xt_slashstring, 0051d6 
5675:552 | DONE dir | em 16 16 |        |             |                 75 65 c5 51 d6 51        --  u e . Q . Q
5675:553 | DONE dir | em 16 16 | 00658e | (7 bytes)   |         .byte 2f, 73, 74, 72, 69, 6e, 67 
5675:553 | DONE dir | em 16 16 |        |             |                 2f 73 74 72 69 6e 67     --  / s t r i n g
5675:554 | DONE wsp | em 16 16 |        |             |
5675:555 | DONE lbl | em 16 16 | 006595 |             | nt_zbranch                           
5675:556 | DONE dir | em 16 16 | 006595 | (2 bytes)   |         .byte 7, { IM + CO + NN }    
5675:556 | DONE dir | em 16 16 |        |             |                 07 0d                    --  . 
5675:557 | DONE dir | em 16 16 | 006597 | (6 bytes)   |         .word nt_slashstring, xt_zbranch, 0053d5 
5675:557 | DONE dir | em 16 16 |        |             |                 86 65 cf 53 d5 53        --  . e . S . S
5675:558 | DONE dir | em 16 16 | 00659d | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
5675:558 | DONE dir | em 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
5675:559 | DONE wsp | em 16 16 |        |             |
5675:560 | DONE lbl | em 16 16 | 0065a4 |             | nt_branch                            
5675:561 | DONE dir | em 16 16 | 0065a4 | (2 bytes)   |         .byte 6, { IM + CO + NN }    
5675:561 | DONE dir | em 16 16 |        |             |                 06 0d                    --  . 
5675:562 | DONE dir | em 16 16 | 0065a6 | (6 bytes)   |         .word nt_zbranch, xt_branch, 0055e8 
5675:562 | DONE dir | em 16 16 |        |             |                 95 65 e2 55 e8 55        --  . e . U . U
5675:563 | DONE dir | em 16 16 | 0065ac | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
5675:563 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
5675:564 | DONE wsp | em 16 16 |        |             |
5675:565 | DONE lbl | em 16 16 | 0065b2 |             | nt_again                             
5675:566 | DONE dir | em 16 16 | 0065b2 | (2 bytes)   |         .byte 5, { IM + CO }         
5675:566 | DONE dir | em 16 16 |        |             |                 05 05                    --  . .
5675:567 | DONE dir | em 16 16 | 0065b4 | (6 bytes)   |         .word nt_branch, xt_again, 00555e 
5675:567 | DONE dir | em 16 16 |        |             |                 a4 65 49 55 5e 55        --  . e I U ^ U
5675:568 | DONE dir | em 16 16 | 0065ba | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
5675:568 | DONE dir | em 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
5675:569 | DONE wsp | em 16 16 |        |             |
5675:570 | DONE lbl | em 16 16 | 0065bf |             | nt_begin                             
5675:571 | DONE dir | em 16 16 | 0065bf | (2 bytes)   |         .byte 5, { IM + CO }         
5675:571 | DONE dir | em 16 16 |        |             |                 05 05                    --  . .
5675:572 | DONE dir | em 16 16 | 0065c1 | (6 bytes)   |         .word nt_again, xt_begin, 0055d0 
5675:572 | DONE dir | em 16 16 |        |             |                 b2 65 ca 55 d0 55        --  . e . U . U
5675:573 | DONE dir | em 16 16 | 0065c7 | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
5675:573 | DONE dir | em 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
5675:574 | DONE wsp | em 16 16 |        |             |
5675:575 | DONE lbl | em 16 16 | 0065cc |             | nt_compilecomma                      
5675:576 | DONE dir | em 16 16 | 0065cc | (2 bytes)   |         .byte 08, { CO }             
5675:576 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5675:577 | DONE dir | em 16 16 | 0065ce | (6 bytes)   |         .word nt_begin, xt_compilecomma, 00571c 
5675:577 | DONE dir | em 16 16 |        |             |                 bf 65 89 56 1c 57        --  . e . V . W
5675:578 | DONE dir | em 16 16 | 0065d4 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
5675:578 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
5675:578 | DONE dir | em 16 16 |        |             |                                          -- 
5675:579 | DONE wsp | em 16 16 |        |             |
5675:580 | DONE lbl | em 16 16 | 0065dc |             | nt_semicolon                         
5675:581 | DONE dir | em 16 16 | 0065dc | (2 bytes)   |         .byte 1, { CO + IM }         
5675:581 | DONE dir | em 16 16 |        |             |                 01 05                    --  . .
5675:582 | DONE dir | em 16 16 | 0065de | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 005288 
5675:582 | DONE dir | em 16 16 |        |             |                 cc 65 70 52 88 52        --  . e p R . R
5675:583 | DONE dir | em 16 16 | 0065e4 | (1 bytes)   |         .byte 3b                     
5675:583 | DONE dir | em 16 16 |        |             |                 3b                       --  ;
5675:584 | DONE wsp | em 16 16 |        |             |
5675:585 | DONE lbl | em 16 16 | 0065e5 |             | nt_colon                             
5675:586 | DONE dir | em 16 16 | 0065e5 | (2 bytes)   |         .byte 1, 0                   
5675:586 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:587 | DONE dir | em 16 16 | 0065e7 | (6 bytes)   |         .word nt_semicolon, xt_colon, 00526f 
5675:587 | DONE dir | em 16 16 |        |             |                 dc 65 4e 52 6f 52        --  . e N R o R
5675:588 | DONE dir | em 16 16 | 0065ed | (1 bytes)   |         .byte 3a                     
5675:588 | DONE dir | em 16 16 |        |             |                 3a                       --  :
5675:589 | DONE wsp | em 16 16 |        |             |
5675:590 | DONE lbl | em 16 16 | 0065ee |             | nt_allot                             
5675:591 | DONE dir | em 16 16 | 0065ee | (2 bytes)   |         .byte 5, 00                  
5675:591 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:592 | DONE dir | em 16 16 | 0065f0 | (6 bytes)   |         .word nt_colon, xt_allot, 00558b 
5675:592 | DONE dir | em 16 16 |        |             |                 e5 65 63 55 8b 55        --  . e c U . U
5675:593 | DONE dir | em 16 16 | 0065f6 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
5675:593 | DONE dir | em 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
5675:594 | DONE wsp | em 16 16 |        |             |
5675:595 | DONE lbl | em 16 16 | 0065fb |             | nt_defer                             
5675:596 | DONE dir | em 16 16 | 0065fb | (2 bytes)   |         .byte 5, 00                  
5675:596 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:597 | DONE dir | em 16 16 | 0065fd | (6 bytes)   |         .word nt_allot, xt_defer, 0057eb 
5675:597 | DONE dir | em 16 16 |        |             |                 ee 65 d1 57 eb 57        --  . e . W . W
5675:598 | DONE dir | em 16 16 | 006603 | (5 bytes)   |         .byte 64, 65, 66, 65, 72     
5675:598 | DONE dir | em 16 16 |        |             |                 64 65 66 65 72           --  d e f e r
5675:599 | DONE wsp | em 16 16 |        |             |
5675:600 | DONE lbl | em 16 16 | 006608 |             | nt_tobody                            
5675:601 | DONE dir | em 16 16 | 006608 | (2 bytes)   |         .byte 5, 00                  
5675:601 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:602 | DONE dir | em 16 16 | 00660a | (6 bytes)   |         .word nt_defer, xt_tobody, 005157 
5675:602 | DONE dir | em 16 16 |        |             |                 fb 65 34 51 57 51        --  . e 4 Q W Q
5675:603 | DONE dir | em 16 16 | 006610 | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
5675:603 | DONE dir | em 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
5675:604 | DONE wsp | em 16 16 |        |             |
5675:605 | DONE lbl | em 16 16 | 006615 |             | nt_does                              
5675:606 | DONE dir | em 16 16 | 006615 | (2 bytes)   |         .byte 5, { IM + CO }         
5675:606 | DONE dir | em 16 16 |        |             |                 05 05                    --  . .
5675:607 | DONE dir | em 16 16 | 006617 | (6 bytes)   |         .word nt_tobody, xt_does, 0058cb 
5675:607 | DONE dir | em 16 16 |        |             |                 08 66 bf 58 cb 58        --  . f . X . X
5675:608 | DONE dir | em 16 16 | 00661d | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
5675:608 | DONE dir | em 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
5675:609 | DONE wsp | em 16 16 |        |             |
5675:610 | DONE lbl | em 16 16 | 006622 |             | nt_create                            
5675:611 | DONE dir | em 16 16 | 006622 | (2 bytes)   |         .byte 6, 0                   
5675:611 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:612 | DONE dir | em 16 16 | 006624 | (6 bytes)   |         .word nt_does, xt_create, 0057d0 
5675:612 | DONE dir | em 16 16 |        |             |                 15 66 61 57 d0 57        --  . f a W . W
5675:613 | DONE dir | em 16 16 | 00662a | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
5675:613 | DONE dir | em 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
5675:614 | DONE wsp | em 16 16 |        |             |
5675:615 | DONE lbl | em 16 16 | 006630 |             | nt_name-string                       
5675:616 | DONE dir | em 16 16 | 006630 | (2 bytes)   |         .byte 0b, 00                 
5675:616 | DONE dir | em 16 16 |        |             |                 0b 00                    --   .
5675:617 | DONE dir | em 16 16 | 006632 | (6 bytes)   |         .word nt_create, xt_name-string, 005ba4 
5675:617 | DONE dir | em 16 16 |        |             |                 22 66 94 5b a4 5b        --  " f . [ . [
5675:618 | DONE dir | em 16 16 | 006638 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
5675:618 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
5675:618 | DONE dir | em 16 16 |        |             |                 69 6e 67                 --  i n g
5675:619 | DONE wsp | em 16 16 |        |             |
5675:620 | DONE lbl | em 16 16 | 006643 |             | nt_2dup                              
5675:621 | DONE dir | em 16 16 | 006643 | (2 bytes)   |         .byte 4, 00                  
5675:621 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:622 | DONE dir | em 16 16 | 006645 | (6 bytes)   |         .word nt_name-string, xt_2dup, 005427 
5675:622 | DONE dir | em 16 16 |        |             |                 30 66 1d 54 27 54        --  0 f . T ' T
5675:623 | DONE dir | em 16 16 | 00664b | (4 bytes)   |         .byte 32, 64, 75, 70         
5675:623 | DONE dir | em 16 16 |        |             |                 32 64 75 70              --  2 d u p
5675:624 | DONE wsp | em 16 16 |        |             |
5675:625 | DONE lbl | em 16 16 | 00664f |             | nt_abs                               
5675:626 | DONE dir | em 16 16 | 00664f | (2 bytes)   |         .byte 3, 00                  
5675:626 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:627 | DONE dir | em 16 16 | 006651 | (6 bytes)   |         .word nt_2dup, xt_abs, 0054b9 
5675:627 | DONE dir | em 16 16 |        |             |                 43 66 b1 54 b9 54        --  C f . T . T
5675:628 | DONE dir | em 16 16 | 006657 | (3 bytes)   |         .byte 61, 62, 73             
5675:628 | DONE dir | em 16 16 |        |             |                 61 62 73                 --  a b s
5675:629 | DONE wsp | em 16 16 |        |             |
5675:630 | DONE lbl | em 16 16 | 00665a |             | nt_state                             
5675:631 | DONE dir | em 16 16 | 00665a | (2 bytes)   |         .byte 5, 00                  
5675:631 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:632 | DONE dir | em 16 16 | 00665c | (6 bytes)   |         .word nt_abs, xt_state, 005ee9 
5675:632 | DONE dir | em 16 16 |        |             |                 4f 66 e2 5e e9 5e        --  O f . ^ . ^
5675:633 | DONE dir | em 16 16 | 006662 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
5675:633 | DONE dir | em 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
5675:634 | DONE wsp | em 16 16 |        |             |
5675:635 | DONE lbl | em 16 16 | 006667 |             | nt_to-in                             
5675:636 | DONE dir | em 16 16 | 006667 | (2 bytes)   |         .byte 3, 00                  
5675:636 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:637 | DONE dir | em 16 16 | 006669 | (6 bytes)   |         .word nt_state, xt_to-in, 00515f 
5675:637 | DONE dir | em 16 16 |        |             |                 5a 66 58 51 5f 51        --  Z f X Q _ Q
5675:638 | DONE dir | em 16 16 | 00666f | (3 bytes)   |         .byte 3e, 69, 6e             
5675:638 | DONE dir | em 16 16 |        |             |                 3e 69 6e                 --  > i n
5675:639 | DONE wsp | em 16 16 |        |             |
5675:640 | DONE lbl | em 16 16 | 006672 |             | nt_source                            
5675:641 | DONE dir | em 16 16 | 006672 | (2 bytes)   |         .byte 6, 00                  
5675:641 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:642 | DONE dir | em 16 16 | 006674 | (6 bytes)   |         .word nt_to-in, xt_source, 005ebb 
5675:642 | DONE dir | em 16 16 |        |             |                 67 66 af 5e bb 5e        --  g f . ^ . ^
5675:643 | DONE dir | em 16 16 | 00667a | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
5675:643 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
5675:644 | DONE wsp | em 16 16 |        |             |
5675:645 | DONE lbl | em 16 16 | 006680 |             | nt_depth                             
5675:646 | DONE dir | em 16 16 | 006680 | (2 bytes)   |         .byte 5, 00                  
5675:646 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:647 | DONE dir | em 16 16 | 006682 | (6 bytes)   |         .word nt_source, xt_depth, 00586f 
5675:647 | DONE dir | em 16 16 |        |             |                 72 66 61 58 6f 58        --  r f a X o X
5675:648 | DONE dir | em 16 16 | 006688 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
5675:648 | DONE dir | em 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
5675:649 | DONE wsp | em 16 16 |        |             |
5675:650 | DONE lbl | em 16 16 | 00668d |             | nt_to                                
5675:651 | DONE dir | em 16 16 | 00668d | (2 bytes)   |         .byte 2, 00                  
5675:651 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:652 | DONE dir | em 16 16 | 00668f | (6 bytes)   |         .word nt_depth, xt_to, 005ef9 
5675:652 | DONE dir | em 16 16 |        |             |                 80 66 f0 5e f9 5e        --  . f . ^ . ^
5675:653 | DONE dir | em 16 16 | 006695 | (2 bytes)   |         .byte 74, 6f                 
5675:653 | DONE dir | em 16 16 |        |             |                 74 6f                    --  t o
5675:654 | DONE wsp | em 16 16 |        |             |
5675:655 | DONE lbl | em 16 16 | 006697 |             | nt_value                             
5675:656 | DONE dir | em 16 16 | 006697 | (2 bytes)   |         .byte 5, 00                  uses routines of CONSTANT
5675:656 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:657 | DONE dir | em 16 16 | 006699 | (6 bytes)   |         .word nt_to, xt_constant, 00574b 
5675:657 | DONE dir | em 16 16 |        |             |                 8d 66 1d 57 4b 57        --  . f . W K W
5675:658 | DONE dir | em 16 16 | 00669f | (5 bytes)   |         .byte 76, 61, 6c, 75, 65     
5675:658 | DONE dir | em 16 16 |        |             |                 76 61 6c 75 65           --  v a l u e
5675:659 | DONE wsp | em 16 16 |        |             |
5675:660 | DONE lbl | em 16 16 | 0066a4 |             | nt_constant                          
5675:661 | DONE dir | em 16 16 | 0066a4 | (2 bytes)   |         .byte 8, 00                  
5675:661 | DONE dir | em 16 16 |        |             |                 08 00                    --  . .
5675:662 | DONE dir | em 16 16 | 0066a6 | (6 bytes)   |         .word nt_value, xt_constant, 00574b 
5675:662 | DONE dir | em 16 16 |        |             |                 97 66 1d 57 4b 57        --  . f . W K W
5675:663 | DONE dir | em 16 16 | 0066ac | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
5675:663 | DONE dir | em 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
5675:663 | DONE dir | em 16 16 |        |             |                                          -- 
5675:664 | DONE wsp | em 16 16 |        |             |
5675:665 | DONE lbl | em 16 16 | 0066b4 |             | nt_variable                          
5675:666 | DONE dir | em 16 16 | 0066b4 | (2 bytes)   |         .byte 8, 00                  
5675:666 | DONE dir | em 16 16 |        |             |                 08 00                    --  . .
5675:667 | DONE dir | em 16 16 | 0066b6 | (6 bytes)   |         .word nt_constant, xt_variable, 006021 
5675:667 | DONE dir | em 16 16 |        |             |                 a4 66 12 60 21 60        --  . f . ` ! `
5675:668 | DONE dir | em 16 16 | 0066bc | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
5675:668 | DONE dir | em 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
5675:668 | DONE dir | em 16 16 |        |             |                                          -- 
5675:669 | DONE wsp | em 16 16 |        |             |
5675:670 | DONE lbl | em 16 16 | 0066c4 |             | nt_tick                              
5675:671 | DONE dir | em 16 16 | 0066c4 | (2 bytes)   |         .byte 1, 00                  
5675:671 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:672 | DONE dir | em 16 16 | 0066c6 | (6 bytes)   |         .word nt_variable, xt_tick, 005493 
5675:672 | DONE dir | em 16 16 |        |             |                 b4 66 78 54 93 54        --  . f x T . T
5675:673 | DONE dir | em 16 16 | 0066cc | (1 bytes)   |         .byte 27                     hex for "'"
5675:673 | DONE dir | em 16 16 |        |             |                 27                       --  '
5675:674 | DONE wsp | em 16 16 |        |             |
5675:675 | DONE lbl | em 16 16 | 0066cd |             | nt_move                              
5675:676 | DONE dir | em 16 16 | 0066cd | (2 bytes)   |         .byte 4, 00                  
5675:676 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:677 | DONE dir | em 16 16 | 0066cf | (6 bytes)   |         .word nt_tick, xt_move, 005b8a 
5675:677 | DONE dir | em 16 16 |        |             |                 c4 66 77 5b 8a 5b        --  . f w [ . [
5675:678 | DONE dir | em 16 16 | 0066d5 | (4 bytes)   |         .byte 6d, 6f, 76, 65         
5675:678 | DONE dir | em 16 16 |        |             |                 6d 6f 76 65              --  m o v e
5675:679 | DONE wsp | em 16 16 |        |             |
5675:680 | DONE lbl | em 16 16 | 0066d9 |             | nt_min                               
5675:681 | DONE dir | em 16 16 | 0066d9 | (2 bytes)   |         .byte 3, 00                  
5675:681 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:682 | DONE dir | em 16 16 | 0066db | (6 bytes)   |         .word nt_move, xt_min, 005b76 
5675:682 | DONE dir | em 16 16 |        |             |                 cd 66 64 5b 76 5b        --  . f d [ v [
5675:683 | DONE dir | em 16 16 | 0066e1 | (3 bytes)   |         .byte 6d, 69, 6e             
5675:683 | DONE dir | em 16 16 |        |             |                 6d 69 6e                 --  m i n
5675:684 | DONE wsp | em 16 16 |        |             |
5675:685 | DONE lbl | em 16 16 | 0066e4 |             | nt_max                               
5675:686 | DONE dir | em 16 16 | 0066e4 | (2 bytes)   |         .byte 3, 00                  
5675:686 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:687 | DONE dir | em 16 16 | 0066e6 | (6 bytes)   |         .word nt_min, xt_max, 005b63 
5675:687 | DONE dir | em 16 16 |        |             |                 d9 66 51 5b 63 5b        --  . f Q [ c [
5675:688 | DONE dir | em 16 16 | 0066ec | (3 bytes)   |         .byte 6d, 61, 78             
5675:688 | DONE dir | em 16 16 |        |             |                 6d 61 78                 --  m a x
5675:689 | DONE wsp | em 16 16 |        |             |
5675:690 | DONE lbl | em 16 16 | 0066ef |             | nt_negate                            
5675:691 | DONE dir | em 16 16 | 0066ef | (2 bytes)   |         .byte 6, 00                  
5675:691 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:692 | DONE dir | em 16 16 | 0066f1 | (6 bytes)   |         .word nt_max, xt_negate, 005bb3 
5675:692 | DONE dir | em 16 16 |        |             |                 e4 66 ad 5b b3 5b        --  . f . [ . [
5675:693 | DONE dir | em 16 16 | 0066f7 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
5675:693 | DONE dir | em 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
5675:694 | DONE wsp | em 16 16 |        |             |
5675:695 | DONE lbl | em 16 16 | 0066fd |             | nt_invert                            
5675:696 | DONE dir | em 16 16 | 0066fd | (2 bytes)   |         .byte 6, 00                  
5675:696 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:697 | DONE dir | em 16 16 | 0066ff | (6 bytes)   |         .word nt_negate, xt_invert, 005a92 
5675:697 | DONE dir | em 16 16 |        |             |                 ef 66 8d 5a 92 5a        --  . f . Z . Z
5675:698 | DONE dir | em 16 16 | 006705 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
5675:698 | DONE dir | em 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
5675:699 | DONE wsp | em 16 16 |        |             |
5675:700 | DONE lbl | em 16 16 | 00670b |             | nt_char                              
5675:701 | DONE dir | em 16 16 | 00670b | (2 bytes)   |         .byte 4, 00                  
5675:701 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:702 | DONE dir | em 16 16 | 00670d | (6 bytes)   |         .word nt_invert, xt_char, 005641 
5675:702 | DONE dir | em 16 16 |        |             |                 fd 66 2a 56 41 56        --  . f * V A V
5675:703 | DONE dir | em 16 16 | 006713 | (4 bytes)   |         .byte 63, 68, 61, 72         
5675:703 | DONE dir | em 16 16 |        |             |                 63 68 61 72              --  c h a r
5675:704 | DONE wsp | em 16 16 |        |             |
5675:705 | DONE lbl | em 16 16 | 006717 |             | nt_rshift                            
5675:706 | DONE dir | em 16 16 | 006717 | (2 bytes)   |         .byte 6, 00                  
5675:706 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:707 | DONE dir | em 16 16 | 006719 | (6 bytes)   |         .word nt_char, xt_rshift, 005d9d 
5675:707 | DONE dir | em 16 16 |        |             |                 0b 67 8a 5d 9d 5d        --   g . ] . ]
5675:708 | DONE dir | em 16 16 | 00671f | (6 bytes)   |         .byte 72, 73, 68, 69, 66, 74 
5675:708 | DONE dir | em 16 16 |        |             |                 72 73 68 69 66 74        --  r s h i f t
5675:709 | DONE wsp | em 16 16 |        |             |
5675:710 | DONE lbl | em 16 16 | 006725 |             | nt_xor                               
5675:711 | DONE dir | em 16 16 | 006725 | (2 bytes)   |         .byte 3, 00                  
5675:711 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:712 | DONE dir | em 16 16 | 006727 | (6 bytes)   |         .word nt_rshift, xt_xor, 006098 
5675:712 | DONE dir | em 16 16 |        |             |                 17 67 92 60 98 60        --  . g . ` . `
5675:713 | DONE dir | em 16 16 | 00672d | (3 bytes)   |         .byte 78, 6f, 72             
5675:713 | DONE dir | em 16 16 |        |             |                 78 6f 72                 --  x o r
5675:714 | DONE wsp | em 16 16 |        |             |
5675:715 | DONE lbl | em 16 16 | 006730 |             | nt_or                                
5675:716 | DONE dir | em 16 16 | 006730 | (2 bytes)   |         .byte 2, 00                  
5675:716 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:717 | DONE dir | em 16 16 | 006732 | (6 bytes)   |         .word nt_xor, xt_or, 005c4a  
5675:717 | DONE dir | em 16 16 |        |             |                 25 67 44 5c 4a 5c        --  % g D \ J \
5675:718 | DONE dir | em 16 16 | 006738 | (2 bytes)   |         .byte 6f, 72                 
5675:718 | DONE dir | em 16 16 |        |             |                 6f 72                    --  o r
5675:719 | DONE wsp | em 16 16 |        |             |
5675:720 | DONE lbl | em 16 16 | 00673a |             | nt_and                               
5675:721 | DONE dir | em 16 16 | 00673a | (2 bytes)   |         .byte 3, 00                  
5675:721 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:722 | DONE dir | em 16 16 | 00673c | (6 bytes)   |         .word nt_or, xt_and, 005592  
5675:722 | DONE dir | em 16 16 |        |             |                 30 67 8c 55 92 55        --  0 g . U . U
5675:723 | DONE dir | em 16 16 | 006742 | (3 bytes)   |         .byte 61, 6e, 64             
5675:723 | DONE dir | em 16 16 |        |             |                 61 6e 64                 --  a n d
5675:724 | DONE wsp | em 16 16 |        |             |
5675:725 | DONE lbl | em 16 16 | 006745 |             | nt_lshift                            
5675:726 | DONE dir | em 16 16 | 006745 | (2 bytes)   |         .byte 6, 00                  
5675:726 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:727 | DONE dir | em 16 16 | 006747 | (6 bytes)   |         .word nt_and, xt_lshift, 005b06 
5675:727 | DONE dir | em 16 16 |        |             |                 3a 67 f3 5a 06 5b        --  : g . Z . [
5675:728 | DONE dir | em 16 16 | 00674d | (6 bytes)   |         .byte 6c, 73, 68, 69, 66, 74 
5675:728 | DONE dir | em 16 16 |        |             |                 6c 73 68 69 66 74        --  l s h i f t
5675:729 | DONE wsp | em 16 16 |        |             |
5675:730 | DONE lbl | em 16 16 | 006753 |             | nt_plusstore                         
5675:731 | DONE dir | em 16 16 | 006753 | (2 bytes)   |         .byte 2, 00                  
5675:731 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:732 | DONE dir | em 16 16 | 006755 | (6 bytes)   |         .word nt_lshift, xt_plusstore, 005cf7 
5675:732 | DONE dir | em 16 16 |        |             |                 45 67 e8 5c f7 5c        --  E g . \ . \
5675:733 | DONE dir | em 16 16 | 00675b | (2 bytes)   |         .byte 2b, 21                 
5675:733 | DONE dir | em 16 16 |        |             |                 2b 21                    --  + !
5675:734 | DONE wsp | em 16 16 |        |             |
5675:735 | DONE lbl | em 16 16 | 00675d |             | nt_c-comma                           
5675:736 | DONE dir | em 16 16 | 00675d | (2 bytes)   |         .byte 2, 00                  
5675:736 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:737 | DONE dir | em 16 16 | 00675f | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 00560a 
5675:737 | DONE dir | em 16 16 |        |             |                 53 67 fd 55 0a 56        --  S g . U 
 V
5675:738 | DONE dir | em 16 16 | 006765 | (2 bytes)   |         .byte 63, 2c                 
5675:738 | DONE dir | em 16 16 |        |             |                 63 2c                    --  c ,
5675:739 | DONE wsp | em 16 16 |        |             |
5675:740 | DONE lbl | em 16 16 | 006767 |             | nt_c-fetch                           
5675:741 | DONE dir | em 16 16 | 006767 | (2 bytes)   |         .byte 2, 00                  
5675:741 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:742 | DONE dir | em 16 16 | 006769 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 005616 
5675:742 | DONE dir | em 16 16 |        |             |                 5d 67 0b 56 16 56        --  ] g  V . V
5675:743 | DONE dir | em 16 16 | 00676f | (2 bytes)   |         .byte 63, 40                 
5675:743 | DONE dir | em 16 16 |        |             |                 63 40                    --  c @
5675:744 | DONE wsp | em 16 16 |        |             |
5675:745 | DONE lbl | em 16 16 | 006771 |             | nt_c-store                           
5675:746 | DONE dir | em 16 16 | 006771 | (2 bytes)   |         .byte 2, 00                  
5675:746 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:747 | DONE dir | em 16 16 | 006773 | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 005626 
5675:747 | DONE dir | em 16 16 |        |             |                 67 67 17 56 26 56        --  g g . V & V
5675:748 | DONE dir | em 16 16 | 006779 | (2 bytes)   |         .byte 63, 21                 
5675:748 | DONE dir | em 16 16 |        |             |                 63 21                    --  c !
5675:749 | DONE wsp | em 16 16 |        |             |
5675:750 | DONE lbl | em 16 16 | 00677b |             | nt_two-star                          
5675:751 | DONE dir | em 16 16 | 00677b | (2 bytes)   |         .byte 2, 00                  
5675:751 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:752 | DONE dir | em 16 16 | 00677d | (6 bytes)   |         .word nt_c-store, xt_two-star, 005404 
5675:752 | DONE dir | em 16 16 |        |             |                 71 67 01 54 04 54        --  q g . T . T
5675:753 | DONE dir | em 16 16 | 006783 | (2 bytes)   |         .byte 32, 2a                 
5675:753 | DONE dir | em 16 16 |        |             |                 32 2a                    --  2 *
5675:754 | DONE wsp | em 16 16 |        |             |
5675:755 | DONE lbl | em 16 16 | 006785 |             | nt_minus                             
5675:756 | DONE dir | em 16 16 | 006785 | (2 bytes)   |         .byte 1, 00                  
5675:756 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:757 | DONE dir | em 16 16 | 006787 | (6 bytes)   |         .word nt_two-star, xt_minus, 00536b 
5675:757 | DONE dir | em 16 16 |        |             |                 7b 67 61 53 6b 53        --  { g a S k S
5675:758 | DONE dir | em 16 16 | 00678d | (1 bytes)   |         .byte 2d                     
5675:758 | DONE dir | em 16 16 |        |             |                 2d                       --  -
5675:759 | DONE wsp | em 16 16 |        |             |
5675:760 | DONE lbl | em 16 16 | 00678e |             | nt_plus                              
5675:761 | DONE dir | em 16 16 | 00678e | (2 bytes)   |         .byte 1, 00                  
5675:761 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:762 | DONE dir | em 16 16 | 006790 | (6 bytes)   |         .word nt_minus, xt_plus, 005338 
5675:762 | DONE dir | em 16 16 |        |             |                 85 67 31 53 38 53        --  . g 1 S 8 S
5675:763 | DONE dir | em 16 16 | 006796 | (1 bytes)   |         .byte 2b                     
5675:763 | DONE dir | em 16 16 |        |             |                 2b                       --  +
5675:764 | DONE wsp | em 16 16 |        |             |
5675:765 | DONE lbl | em 16 16 | 006797 |             | nt_one-minus                         
5675:766 | DONE dir | em 16 16 | 006797 | (2 bytes)   |         .byte 2, 00                  
5675:766 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:767 | DONE dir | em 16 16 | 006799 | (6 bytes)   |         .word nt_plus, xt_one-minus, 0053f6 
5675:767 | DONE dir | em 16 16 |        |             |                 8e 67 f5 53 f6 53        --  . g . S . S
5675:768 | DONE dir | em 16 16 | 00679f | (2 bytes)   |         .byte 31, 2d                 
5675:768 | DONE dir | em 16 16 |        |             |                 31 2d                    --  1 -
5675:769 | DONE wsp | em 16 16 |        |             |
5675:770 | DONE lbl | em 16 16 | 0067a1 |             | nt_one-plus                          
5675:771 | DONE dir | em 16 16 | 0067a1 | (2 bytes)   |         .byte 2, 00                  
5675:771 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:772 | DONE dir | em 16 16 | 0067a3 | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 0053f8 
5675:772 | DONE dir | em 16 16 |        |             |                 97 67 f7 53 f8 53        --  . g . S . S
5675:773 | DONE dir | em 16 16 | 0067a9 | (2 bytes)   |         .byte 31, 2b                 
5675:773 | DONE dir | em 16 16 |        |             |                 31 2b                    --  1 +
5675:774 | DONE wsp | em 16 16 |        |             |
5675:775 | DONE lbl | em 16 16 | 0067ab |             | nt_zero-notequal                     
5675:776 | DONE dir | em 16 16 | 0067ab | (2 bytes)   |         .byte 3, 00                  
5675:776 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:777 | DONE dir | em 16 16 | 0067ad | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 0053c3 
5675:777 | DONE dir | em 16 16 |        |             |                 a1 67 b8 53 c3 53        --  . g . S . S
5675:778 | DONE dir | em 16 16 | 0067b3 | (3 bytes)   |         .byte 30, 3c, 3e             
5675:778 | DONE dir | em 16 16 |        |             |                 30 3c 3e                 --  0 < >
5675:779 | DONE wsp | em 16 16 |        |             |
5675:780 | DONE lbl | em 16 16 | 0067b6 |             | nt_zero-more                         
5675:781 | DONE dir | em 16 16 | 0067b6 | (2 bytes)   |         .byte 2, 00                  
5675:781 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:782 | DONE dir | em 16 16 | 0067b8 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 0053ce 
5675:782 | DONE dir | em 16 16 |        |             |                 ab 67 c4 53 ce 53        --  . g . S . S
5675:783 | DONE dir | em 16 16 | 0067be | (2 bytes)   |         .byte 30, 3e                 
5675:783 | DONE dir | em 16 16 |        |             |                 30 3e                    --  0 >
5675:784 | DONE wsp | em 16 16 |        |             |
5675:785 | DONE lbl | em 16 16 | 0067c0 |             | nt_zero-less                         
5675:786 | DONE dir | em 16 16 | 0067c0 | (2 bytes)   |         .byte 2, 00                  
5675:786 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:787 | DONE dir | em 16 16 | 0067c2 | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 0053b7 
5675:787 | DONE dir | em 16 16 |        |             |                 b6 67 ac 53 b7 53        --  . g . S . S
5675:788 | DONE dir | em 16 16 | 0067c8 | (2 bytes)   |         .byte 30, 3c                 
5675:788 | DONE dir | em 16 16 |        |             |                 30 3c                    --  0 <
5675:789 | DONE wsp | em 16 16 |        |             |
5675:790 | DONE lbl | em 16 16 | 0067ca |             | nt_greater                           
5675:791 | DONE dir | em 16 16 | 0067ca | (2 bytes)   |         .byte 1, 00                  
5675:791 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:792 | DONE dir | em 16 16 | 0067cc | (6 bytes)   |         .word nt_zero-less, xt_greater, 005133 
5675:792 | DONE dir | em 16 16 |        |             |                 c0 67 20 51 33 51        --  . g   Q 3 Q
5675:793 | DONE dir | em 16 16 | 0067d2 | (1 bytes)   |         .byte 3e                     
5675:793 | DONE dir | em 16 16 |        |             |                 3e                       --  >
5675:794 | DONE wsp | em 16 16 |        |             |
5675:795 | DONE lbl | em 16 16 | 0067d3 |             | nt_less                              
5675:796 | DONE dir | em 16 16 | 0067d3 | (2 bytes)   |         .byte 1, 00                  
5675:796 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:797 | DONE dir | em 16 16 | 0067d5 | (6 bytes)   |         .word nt_greater, xt_less, 005109 
5675:797 | DONE dir | em 16 16 |        |             |                 ca 67 f6 50 09 51        --  . g . P 	 Q
5675:798 | DONE dir | em 16 16 | 0067db | (1 bytes)   |         .byte 3c                     
5675:798 | DONE dir | em 16 16 |        |             |                 3c                       --  <
5675:799 | DONE wsp | em 16 16 |        |             |
5675:800 | DONE lbl | em 16 16 | 0067dc |             | nt_zero-equal                        
5675:801 | DONE dir | em 16 16 | 0067dc | (2 bytes)   |         .byte 2, 00                  
5675:801 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:802 | DONE dir | em 16 16 | 0067de | (6 bytes)   |         .word nt_less, xt_zero-equal, 0053ab 
5675:802 | DONE dir | em 16 16 |        |             |                 d3 67 a0 53 ab 53        --  . g . S . S
5675:803 | DONE dir | em 16 16 | 0067e4 | (2 bytes)   |         .byte 30, 3d                 
5675:803 | DONE dir | em 16 16 |        |             |                 30 3d                    --  0 =
5675:804 | DONE wsp | em 16 16 |        |             |
5675:805 | DONE lbl | em 16 16 | 0067e6 |             | nt_not-equal                         
5675:806 | DONE dir | em 16 16 | 0067e6 | (2 bytes)   |         .byte 2, 00                  
5675:806 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:807 | DONE dir | em 16 16 | 0067e8 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 005115 
5675:807 | DONE dir | em 16 16 |        |             |                 dc 67 0a 51 15 51        --  . g 
 Q . Q
5675:808 | DONE dir | em 16 16 | 0067ee | (2 bytes)   |         .byte 3c, 3e                 
5675:808 | DONE dir | em 16 16 |        |             |                 3c 3e                    --  < >
5675:809 | DONE wsp | em 16 16 |        |             |
5675:810 | DONE lbl | em 16 16 | 0067f0 |             | nt_equal                             
5675:811 | DONE dir | em 16 16 | 0067f0 | (2 bytes)   |         .byte 1, 00                  
5675:811 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:812 | DONE dir | em 16 16 | 0067f2 | (6 bytes)   |         .word nt_not-equal, xt_equal, 005397 
5675:812 | DONE dir | em 16 16 |        |             |                 e6 67 8c 53 97 53        --  . g . S . S
5675:813 | DONE dir | em 16 16 | 0067f8 | (1 bytes)   |         .byte 3d                     
5675:813 | DONE dir | em 16 16 |        |             |                 3d                       --  =
5675:814 | DONE wsp | em 16 16 |        |             |
5675:815 | DONE lbl | em 16 16 | 0067f9 |             | nt_false                             
5675:816 | DONE dir | em 16 16 | 0067f9 | (2 bytes)   |         .byte 5, 00                  
5675:816 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:817 | DONE dir | em 16 16 | 0067fb | (6 bytes)   |         .word nt_equal, xt_zero, 00539f 
5675:817 | DONE dir | em 16 16 |        |             |                 f0 67 98 53 9f 53        --  . g . S . S
5675:818 | DONE dir | em 16 16 | 006801 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
5675:818 | DONE dir | em 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
5675:819 | DONE wsp | em 16 16 |        |             |
5675:820 | DONE lbl | em 16 16 | 006806 |             | nt_true                              
5675:821 | DONE dir | em 16 16 | 006806 | (2 bytes)   |         .byte 4, 00                  
5675:821 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:822 | DONE dir | em 16 16 | 006808 | (6 bytes)   |         .word nt_false, xt_true, 005f01 
5675:822 | DONE dir | em 16 16 |        |             |                 f9 67 fa 5e 01 5f        --  . g . ^ . _
5675:823 | DONE dir | em 16 16 | 00680e | (4 bytes)   |         .byte 74, 72, 75, 65         
5675:823 | DONE dir | em 16 16 |        |             |                 74 72 75 65              --  t r u e
5675:824 | DONE wsp | em 16 16 |        |             |
5675:825 | DONE lbl | em 16 16 | 006812 |             | nt_tonumber                          
5675:826 | DONE dir | em 16 16 | 006812 | (2 bytes)   |         .byte 7, 00                  see if actually NC
5675:826 | DONE dir | em 16 16 |        |             |                 07 00                    --  . .
5675:827 | DONE dir | em 16 16 | 006814 | (6 bytes)   |         .word nt_true, xt_tonumber, 0051bc 
5675:827 | DONE dir | em 16 16 |        |             |                 06 68 60 51 bc 51        --  . h ` Q . Q
5675:828 | DONE dir | em 16 16 | 00681a | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
5675:828 | DONE dir | em 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
5675:829 | DONE wsp | em 16 16 |        |             |
5675:830 | DONE lbl | em 16 16 | 006821 |             | nt_number                            
5675:831 | DONE dir | em 16 16 | 006821 | (2 bytes)   |         .byte 6, 00                  see if actually NC
5675:831 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:832 | DONE dir | em 16 16 | 006823 | (6 bytes)   |         .word nt_tonumber, xt_number, 005c43 
5675:832 | DONE dir | em 16 16 |        |             |                 12 68 c0 5b 43 5c        --  . h . [ C \
5675:833 | DONE dir | em 16 16 | 006829 | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
5675:833 | DONE dir | em 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
5675:834 | DONE wsp | em 16 16 |        |             |
5675:835 | DONE lbl | em 16 16 | 00682f |             | nt_two                               
5675:836 | DONE dir | em 16 16 | 00682f | (2 bytes)   |         .byte 1, 00                  
5675:836 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:837 | DONE dir | em 16 16 | 006831 | (6 bytes)   |         .word nt_number, xt_two, 005400 
5675:837 | DONE dir | em 16 16 |        |             |                 21 68 f9 53 00 54        --  ! h . S . T
5675:838 | DONE dir | em 16 16 | 006837 | (1 bytes)   |         .byte 32                     
5675:838 | DONE dir | em 16 16 |        |             |                 32                       --  2
5675:839 | DONE wsp | em 16 16 |        |             |
5675:840 | DONE lbl | em 16 16 | 006838 |             | nt_one                               
5675:841 | DONE dir | em 16 16 | 006838 | (2 bytes)   |         .byte 1, 00                  
5675:841 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:842 | DONE dir | em 16 16 | 00683a | (6 bytes)   |         .word nt_two, xt_one, 0053f4 
5675:842 | DONE dir | em 16 16 |        |             |                 2f 68 ed 53 f4 53        --  / h . S . S
5675:843 | DONE dir | em 16 16 | 006840 | (1 bytes)   |         .byte 31                     
5675:843 | DONE dir | em 16 16 |        |             |                 31                       --  1
5675:844 | DONE wsp | em 16 16 |        |             |
5675:845 | DONE lbl | em 16 16 | 006841 |             | nt_zero                              
5675:846 | DONE dir | em 16 16 | 006841 | (2 bytes)   |         .byte 1, 00                  
5675:846 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:847 | DONE dir | em 16 16 | 006843 | (6 bytes)   |         .word nt_one, xt_zero, 00539f 
5675:847 | DONE dir | em 16 16 |        |             |                 38 68 98 53 9f 53        --  8 h . S . S
5675:848 | DONE dir | em 16 16 | 006849 | (1 bytes)   |         .byte 30                     
5675:848 | DONE dir | em 16 16 |        |             |                 30                       --  0
5675:849 | DONE wsp | em 16 16 |        |             |
5675:850 | DONE lbl | em 16 16 | 00684a |             | nt_find-name                         
5675:851 | DONE dir | em 16 16 | 00684a | (2 bytes)   |         .byte 9, 0                   
5675:851 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5675:852 | DONE dir | em 16 16 | 00684c | (6 bytes)   |         .word nt_zero, xt_find-name, 0059da 
5675:852 | DONE dir | em 16 16 |        |             |                 41 68 84 59 da 59        --  A h . Y . Y
5675:853 | DONE dir | em 16 16 | 006852 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
5675:853 | DONE dir | em 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
5675:853 | DONE dir | em 16 16 |        |             |                 65                       --  e
5675:854 | DONE wsp | em 16 16 |        |             |
5675:855 | DONE lbl | em 16 16 | 00685b |             | nt_refill                            
5675:856 | DONE dir | em 16 16 | 00685b | (2 bytes)   |         .byte 6, 0                   TODO check flags
5675:856 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:857 | DONE dir | em 16 16 | 00685d | (6 bytes)   |         .word nt_find-name, xt_refill, 005d80 
5675:857 | DONE dir | em 16 16 |        |             |                 4a 68 57 5d 80 5d        --  J h W ] . ]
5675:858 | DONE dir | em 16 16 | 006863 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
5675:858 | DONE dir | em 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
5675:859 | DONE wsp | em 16 16 |        |             |
5675:860 | DONE lbl | em 16 16 | 006869 |             | nt_parse-name                        
5675:861 | DONE dir | em 16 16 | 006869 | (2 bytes)   |         .byte &10, 0                 
5675:861 | DONE dir | em 16 16 |        |             |                 0a 00                    --  
 .
5675:862 | DONE dir | em 16 16 | 00686b | (6 bytes)   |         .word nt_refill, xt_parse-name, 005cd9 
5675:862 | DONE dir | em 16 16 |        |             |                 5b 68 73 5c d9 5c        --  [ h s \ . \
5675:863 | DONE dir | em 16 16 | 006871 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
5675:863 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
5675:863 | DONE dir | em 16 16 |        |             |                 6d 65                    --  m e
5675:864 | DONE wsp | em 16 16 |        |             |
5675:865 | DONE lbl | em 16 16 | 00687b |             | nt_source-id                         
5675:866 | DONE dir | em 16 16 | 00687b | (2 bytes)   |         .byte 9, 00                  
5675:866 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5675:867 | DONE dir | em 16 16 | 00687d | (6 bytes)   |         .word nt_parse-name, xt_source-id, 005ec2 
5675:867 | DONE dir | em 16 16 |        |             |                 69 68 bc 5e c2 5e        --  i h . ^ . ^
5675:868 | DONE dir | em 16 16 | 006883 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
5675:868 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
5675:868 | DONE dir | em 16 16 |        |             |                 64                       --  d
5675:869 | DONE wsp | em 16 16 |        |             |
5675:870 | DONE lbl | em 16 16 | 00688c |             | nt_comma                             
5675:871 | DONE dir | em 16 16 | 00688c | (2 bytes)   |         .byte 1, 00                  
5675:871 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:872 | DONE dir | em 16 16 | 00688e | (6 bytes)   |         .word nt_source-id, xt_comma, 00524d 
5675:872 | DONE dir | em 16 16 |        |             |                 7b 68 42 52 4d 52        --  { h B R M R
5675:873 | DONE dir | em 16 16 | 006894 | (1 bytes)   |         .byte 2c                     
5675:873 | DONE dir | em 16 16 |        |             |                 2c                       --  ,
5675:874 | DONE wsp | em 16 16 |        |             |
5675:875 | DONE lbl | em 16 16 | 006895 |             | nt_accept                            
5675:876 | DONE dir | em 16 16 | 006895 | (2 bytes)   |         .byte 6, 00                  TODO check flags
5675:876 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:877 | DONE dir | em 16 16 | 006897 | (6 bytes)   |         .word nt_comma, xt_accept, 005548 
5675:877 | DONE dir | em 16 16 |        |             |                 8c 68 ba 54 48 55        --  . h . T H U
5675:878 | DONE dir | em 16 16 | 00689d | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
5675:878 | DONE dir | em 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
5675:879 | DONE wsp | em 16 16 |        |             |
5675:880 | DONE lbl | em 16 16 | 0068a3 |             | nt_keyq                              
5675:881 | DONE dir | em 16 16 | 0068a3 | (2 bytes)   |         .byte 4, 00                  
5675:881 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:882 | DONE dir | em 16 16 | 0068a5 | (6 bytes)   |         .word nt_accept, xt_keyq, 005a4c 
5675:882 | DONE dir | em 16 16 |        |             |                 95 68 3f 5a 4c 5a        --  . h ? Z L Z
5675:883 | DONE dir | em 16 16 | 0068ab | (4 bytes)   |         .byte 6b, 65, 79, 3f         
5675:883 | DONE dir | em 16 16 |        |             |                 6b 65 79 3f              --  k e y ?
5675:884 | DONE wsp | em 16 16 |        |             |
5675:885 | DONE lbl | em 16 16 | 0068af |             | nt_key                               
5675:886 | DONE dir | em 16 16 | 0068af | (2 bytes)   |         .byte 3, 00                  
5675:886 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:887 | DONE dir | em 16 16 | 0068b1 | (6 bytes)   |         .word nt_keyq, xt_key, 005a3e 
5675:887 | DONE dir | em 16 16 |        |             |                 a3 68 2f 5a 3e 5a        --  . h / Z > Z
5675:888 | DONE dir | em 16 16 | 0068b7 | (3 bytes)   |         .byte 6b, 65, 79             
5675:888 | DONE dir | em 16 16 |        |             |                 6b 65 79                 --  k e y
5675:889 | DONE wsp | em 16 16 |        |             |
5675:890 | DONE lbl | em 16 16 | 0068ba |             | nt_backslash                         
5675:891 | DONE dir | em 16 16 | 0068ba | (2 bytes)   |         .byte 1, 00                  
5675:891 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:892 | DONE dir | em 16 16 | 0068bc | (6 bytes)   |         .word nt_key, xt_backslash, 005330 
5675:892 | DONE dir | em 16 16 |        |             |                 af 68 2c 53 30 53        --  . h , S 0 S
5675:893 | DONE dir | em 16 16 | 0068c2 | (1 bytes)   |         .byte 5c                     
5675:893 | DONE dir | em 16 16 |        |             |                 5c                       --  \
5675:894 | DONE wsp | em 16 16 |        |             |
5675:895 | DONE lbl | em 16 16 | 0068c3 |             | nt_qdup                              
5675:896 | DONE dir | em 16 16 | 0068c3 | (2 bytes)   |         .byte 4, 00                  
5675:896 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:897 | DONE dir | em 16 16 | 0068c5 | (6 bytes)   |         .word nt_backslash, xt_qdup, 0052ca 
5675:897 | DONE dir | em 16 16 |        |             |                 ba 68 c3 52 ca 52        --  . h . R . R
5675:898 | DONE dir | em 16 16 | 0068cb | (4 bytes)   |         .byte 3f, 64, 75, 70         
5675:898 | DONE dir | em 16 16 |        |             |                 3f 64 75 70              --  ? d u p
5675:899 | DONE wsp | em 16 16 |        |             |
5675:900 | DONE lbl | em 16 16 | 0068cf |             | nt_tuck                              
5675:901 | DONE dir | em 16 16 | 0068cf | (2 bytes)   |         .byte 4, 00                  
5675:901 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:902 | DONE dir | em 16 16 | 0068d1 | (6 bytes)   |         .word nt_qdup, xt_tuck, 005f0a 
5675:902 | DONE dir | em 16 16 |        |             |                 c3 68 02 5f 0a 5f        --  . h . _ 
 _
5675:903 | DONE dir | em 16 16 | 0068d7 | (4 bytes)   |         .byte 74, 75, 63, 6b         
5675:903 | DONE dir | em 16 16 |        |             |                 74 75 63 6b              --  t u c k
5675:904 | DONE wsp | em 16 16 |        |             |
5675:905 | DONE lbl | em 16 16 | 0068db |             | nt_nip                               
5675:906 | DONE dir | em 16 16 | 0068db | (2 bytes)   |         .byte 3, 00                  
5675:906 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:907 | DONE dir | em 16 16 | 0068dd | (6 bytes)   |         .word nt_tuck, xt_nip, 005bbf 
5675:907 | DONE dir | em 16 16 |        |             |                 cf 68 bd 5b bf 5b        --  . h . [ . [
5675:908 | DONE dir | em 16 16 | 0068e3 | (3 bytes)   |         .byte 6e, 69, 70             
5675:908 | DONE dir | em 16 16 |        |             |                 6e 69 70                 --  n i p
5675:909 | DONE wsp | em 16 16 |        |             |
5675:910 | DONE lbl | em 16 16 | 0068e6 |             | nt_mrot                              
5675:911 | DONE dir | em 16 16 | 0068e6 | (2 bytes)   |         .byte 4, 00                  
5675:911 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:912 | DONE dir | em 16 16 | 0068e8 | (6 bytes)   |         .word nt_nip, xt_mrot, 005374 
5675:912 | DONE dir | em 16 16 |        |             |                 db 68 6c 53 74 53        --  . h l S t S
5675:913 | DONE dir | em 16 16 | 0068ee | (4 bytes)   |         .byte 2d, 72, 6f, 74         
5675:913 | DONE dir | em 16 16 |        |             |                 2d 72 6f 74              --  - r o t
5675:914 | DONE wsp | em 16 16 |        |             |
5675:915 | DONE lbl | em 16 16 | 0068f2 |             | nt_rot                               
5675:916 | DONE dir | em 16 16 | 0068f2 | (2 bytes)   |         .byte 3, 00                  
5675:916 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:917 | DONE dir | em 16 16 | 0068f4 | (6 bytes)   |         .word nt_mrot, xt_rot, 005d89 
5675:917 | DONE dir | em 16 16 |        |             |                 e6 68 81 5d 89 5d        --  . h . ] . ]
5675:918 | DONE dir | em 16 16 | 0068fa | (3 bytes)   |         .byte 72, 6f, 74             
5675:918 | DONE dir | em 16 16 |        |             |                 72 6f 74                 --  r o t
5675:919 | DONE wsp | em 16 16 |        |             |
5675:920 | DONE lbl | em 16 16 | 0068fd |             | nt_2over                             
5675:921 | DONE dir | em 16 16 | 0068fd | (2 bytes)   |         .byte 5, 00                  
5675:921 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:922 | DONE dir | em 16 16 | 0068ff | (6 bytes)   |         .word nt_rot, xt_2over, 005434 
5675:922 | DONE dir | em 16 16 |        |             |                 f2 68 28 54 34 54        --  . h ( T 4 T
5675:923 | DONE dir | em 16 16 | 006905 | (5 bytes)   |         .byte 32, 6f, 76, 65, 72     
5675:923 | DONE dir | em 16 16 |        |             |                 32 6f 76 65 72           --  2 o v e r
5675:924 | DONE wsp | em 16 16 |        |             |
5675:925 | DONE lbl | em 16 16 | 00690a |             | nt_2swap                             
5675:926 | DONE dir | em 16 16 | 00690a | (2 bytes)   |         .byte 5, 00                  
5675:926 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:927 | DONE dir | em 16 16 | 00690c | (6 bytes)   |         .word nt_2over, xt_2swap, 005464 
5675:927 | DONE dir | em 16 16 |        |             |                 fd 68 54 54 64 54        --  . h T T d T
5675:928 | DONE dir | em 16 16 | 006912 | (5 bytes)   |         .byte 32, 73, 77, 61, 70     
5675:928 | DONE dir | em 16 16 |        |             |                 32 73 77 61 70           --  2 s w a p
5675:929 | DONE wsp | em 16 16 |        |             |
5675:930 | DONE lbl | em 16 16 | 006917 |             | nt_execute                           
5675:931 | DONE dir | em 16 16 | 006917 | (2 bytes)   |         .byte 7, 00                  
5675:931 | DONE dir | em 16 16 |        |             |                 07 00                    --  . .
5675:932 | DONE dir | em 16 16 | 006919 | (6 bytes)   |         .word nt_2swap, xt_execute, 005953 
5675:932 | DONE dir | em 16 16 |        |             |                 0a 69 49 59 53 59        --  
 i I Y S Y
5675:933 | DONE dir | em 16 16 | 00691f | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
5675:933 | DONE dir | em 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
5675:934 | DONE wsp | em 16 16 |        |             |
5675:935 | DONE lbl | em 16 16 | 006926 |             | nt_here                              
5675:936 | DONE dir | em 16 16 | 006926 | (2 bytes)   |         .byte 4, 00                  
5675:936 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:937 | DONE dir | em 16 16 | 006928 | (6 bytes)   |         .word nt_execute, xt_here, 005a99 
5675:937 | DONE dir | em 16 16 |        |             |                 17 69 93 5a 99 5a        --  . i . Z . Z
5675:938 | DONE dir | em 16 16 | 00692e | (4 bytes)   |         .byte 68, 65, 72, 65         
5675:938 | DONE dir | em 16 16 |        |             |                 68 65 72 65              --  h e r e
5675:939 | DONE wsp | em 16 16 |        |             |
5675:940 | DONE lbl | em 16 16 | 006932 |             | nt_2drop                             
5675:941 | DONE dir | em 16 16 | 006932 | (2 bytes)   |         .byte 5, 00                  
5675:941 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5675:942 | DONE dir | em 16 16 | 006934 | (6 bytes)   |         .word nt_here, xt_2drop, 00541c 
5675:942 | DONE dir | em 16 16 |        |             |                 26 69 16 54 1c 54        --  & i . T . T
5675:943 | DONE dir | em 16 16 | 00693a | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
5675:943 | DONE dir | em 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
5675:944 | DONE wsp | em 16 16 |        |             |
5675:945 | DONE lbl | em 16 16 | 00693f |             | nt_rfetch                            
5675:946 | DONE dir | em 16 16 | 00693f | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
5675:946 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5675:947 | DONE dir | em 16 16 | 006941 | (6 bytes)   |         .word nt_2drop, xt_rfetch, 005d34 
5675:947 | DONE dir | em 16 16 |        |             |                 32 69 2c 5d 34 5d        --  2 i , ] 4 ]
5675:948 | DONE dir | em 16 16 | 006947 | (2 bytes)   |         .byte 72, 40                 
5675:948 | DONE dir | em 16 16 |        |             |                 72 40                    --  r @
5675:949 | DONE wsp | em 16 16 |        |             |
5675:950 | DONE lbl | em 16 16 | 006949 |             | nt_fromr                             
5675:951 | DONE dir | em 16 16 | 006949 | (2 bytes)   |         .byte 2, CO                  NC is special case
5675:951 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5675:952 | DONE dir | em 16 16 | 00694b | (6 bytes)   |         .word nt_rfetch, xt_fromr, 005d3c 
5675:952 | DONE dir | em 16 16 |        |             |                 3f 69 35 5d 3c 5d        --  ? i 5 ] < ]
5675:953 | DONE dir | em 16 16 | 006951 | (2 bytes)   |         .byte 72, 3e                 
5675:953 | DONE dir | em 16 16 |        |             |                 72 3e                    --  r >
5675:954 | DONE wsp | em 16 16 |        |             |
5675:955 | DONE lbl | em 16 16 | 006953 |             | nt_tor                               
5675:956 | DONE dir | em 16 16 | 006953 | (2 bytes)   |         .byte 2, CO                  NC is special case
5675:956 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5675:957 | DONE dir | em 16 16 | 006955 | (6 bytes)   |         .word nt_fromr, xt_tor, 0051c4 
5675:957 | DONE dir | em 16 16 |        |             |                 49 69 bd 51 c4 51        --  I i . Q . Q
5675:958 | DONE dir | em 16 16 | 00695b | (2 bytes)   |         .byte 3e, 72                 
5675:958 | DONE dir | em 16 16 |        |             |                 3e 72                    --  > r
5675:959 | DONE wsp | em 16 16 |        |             |
5675:960 | DONE lbl | em 16 16 | 00695d |             | nt_digitq                            
5675:961 | DONE dir | em 16 16 | 00695d | (2 bytes)   |         .byte 6, 00                  
5675:961 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:962 | DONE dir | em 16 16 | 00695f | (6 bytes)   |         .word nt_tor, xt_digitq, 005827 
5675:962 | DONE dir | em 16 16 |        |             |                 53 69 ec 57 27 58        --  S i . W ' X
5675:963 | DONE dir | em 16 16 | 006965 | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
5675:963 | DONE dir | em 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
5675:964 | DONE wsp | em 16 16 |        |             |
5675:965 | DONE lbl | em 16 16 | 00696b |             | nt_bounds                            
5675:966 | DONE dir | em 16 16 | 00696b | (2 bytes)   |         .byte 6, 00                  
5675:966 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5675:967 | DONE dir | em 16 16 | 00696d | (6 bytes)   |         .word nt_digitq, xt_bounds, 0055e1 
5675:967 | DONE dir | em 16 16 |        |             |                 5d 69 d9 55 e1 55        --  ] i . U . U
5675:968 | DONE dir | em 16 16 | 006973 | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
5675:968 | DONE dir | em 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
5675:969 | DONE wsp | em 16 16 |        |             |
5675:970 | DONE lbl | em 16 16 | 006979 |             | nt_over                              
5675:971 | DONE dir | em 16 16 | 006979 | (2 bytes)   |         .byte 4, 00                  
5675:971 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:972 | DONE dir | em 16 16 | 00697b | (6 bytes)   |         .word nt_bounds, xt_over, 005c59 
5675:972 | DONE dir | em 16 16 |        |             |                 6b 69 53 5c 59 5c        --  k i S \ Y \
5675:973 | DONE dir | em 16 16 | 006981 | (4 bytes)   |         .byte 6f, 76, 65, 72         
5675:973 | DONE dir | em 16 16 |        |             |                 6f 76 65 72              --  o v e r
5675:974 | DONE wsp | em 16 16 |        |             |
5675:975 | DONE lbl | em 16 16 | 006985 |             | nt_fetch                             
5675:976 | DONE dir | em 16 16 | 006985 | (2 bytes)   |         .byte 1, 00                  
5675:976 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:977 | DONE dir | em 16 16 | 006987 | (6 bytes)   |         .word nt_over, xt_fetch, 0052db 
5675:977 | DONE dir | em 16 16 |        |             |                 79 69 d7 52 db 52        --  y i . R . R
5675:978 | DONE dir | em 16 16 | 00698d | (1 bytes)   |         .byte 40                     
5675:978 | DONE dir | em 16 16 |        |             |                 40                       --  @
5675:979 | DONE wsp | em 16 16 |        |             |
5675:980 | DONE lbl | em 16 16 | 00698e |             | nt_store                             
5675:981 | DONE dir | em 16 16 | 00698e | (2 bytes)   |         .byte 1, 00                  
5675:981 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5675:982 | DONE dir | em 16 16 | 006990 | (6 bytes)   |         .word nt_fetch, xt_store, 0052d6 
5675:982 | DONE dir | em 16 16 |        |             |                 85 69 cb 52 d6 52        --  . i . R . R
5675:983 | DONE dir | em 16 16 | 006996 | (1 bytes)   |         .byte 21                     
5675:983 | DONE dir | em 16 16 |        |             |                 21                       --  !
5675:984 | DONE wsp | em 16 16 |        |             |
5675:985 | DONE lbl | em 16 16 | 006997 |             | nt_swap                              
5675:986 | DONE dir | em 16 16 | 006997 | (2 bytes)   |         .byte 4, 00                  
5675:986 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:987 | DONE dir | em 16 16 | 006999 | (6 bytes)   |         .word nt_store, xt_swap, 005eef 
5675:987 | DONE dir | em 16 16 |        |             |                 8e 69 ea 5e ef 5e        --  . i . ^ . ^
5675:988 | DONE dir | em 16 16 | 00699f | (4 bytes)   |         .byte 73, 77, 61, 70         
5675:988 | DONE dir | em 16 16 |        |             |                 73 77 61 70              --  s w a p
5675:989 | DONE wsp | em 16 16 |        |             |
5675:990 | DONE lbl | em 16 16 | 0069a3 |             | nt_dup                               
5675:991 | DONE dir | em 16 16 | 0069a3 | (2 bytes)   |         .byte 3, 00                  
5675:991 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5675:992 | DONE dir | em 16 16 | 0069a5 | (6 bytes)   |         .word nt_swap, xt_dup, 0058eb 
5675:992 | DONE dir | em 16 16 |        |             |                 97 69 e7 58 eb 58        --  . i . X . X
5675:993 | DONE dir | em 16 16 | 0069ab | (3 bytes)   |         .byte 64, 75, 70             
5675:993 | DONE dir | em 16 16 |        |             |                 64 75 70                 --  d u p
5675:994 | DONE wsp | em 16 16 |        |             |
5675:995 | DONE cmt | em 16 16 |        |             | ; DROP is always the first entry in dictionary
5675:996 | DONE lbl | em 16 16 | 0069ae |             | nt_drop                              
5675:997 | DONE dir | em 16 16 | 0069ae | (2 bytes)   |         .byte 4, 00                  
5675:997 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5675:998 | DONE dir | em 16 16 | 0069b0 | (6 bytes)   |         .word nt_dup, xt_drop, 0058e6 
5675:998 | DONE dir | em 16 16 |        |             |                 a3 69 e2 58 e6 58        --  . i . X . X
5675:999 | DONE dir | em 16 16 | 0069b6 | (4 bytes)   |         .byte 64, 72, 6f, 70         
5675:999 | DONE dir | em 16 16 |        |             |                 64 72 6f 70              --  d r o p
5675:1000 | DONE wsp | em 16 16 |        |             |
5675:1001 | DONE cmt | em 16 16 |        |             | ; END
5676:000 | DONE wsp | em 16 16 |        |             |
5677:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5678:000 | DONE cmt | em 16 16 |        |             | ; CODE FIELD ROUTINES
5679:000 | DONE wsp | em 16 16 |        |             |
5680:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5681:000 | DONE cmt | em 16 16 |        |             | ; DOCONST
5682:000 | DONE cmt | em 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
5683:000 | DONE cmt | em 16 16 |        |             | ; the stack
5684:000 | DONE lbl | em 16 16 | 0069ba |             | doconst                              
5685:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5686:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5687:000 | DONE ins | em 16 16 | 0069ba | ca          |                 dex                  make room on Data Stack
5688:000 | DONE ins | em 16 16 | 0069bb | ca          |                 dex                  
5689:000 | DONE ins | em 16 16 | 0069bc | 94 00       |                 sty.dx 00            
5690:000 | DONE wsp | em 16 16 |        |             |
5691:000 | DONE cmt | em 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
5692:000 | DONE cmt | em 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
5693:000 | DONE ins | em 16 16 | 0069be | 68          |                 pla                  get the return address
5694:000 | DONE ins | em 16 16 | 0069bf | 85 1c       |                 sta.d 00001c         
5695:000 | DONE wsp | em 16 16 |        |             |
5696:000 | DONE cmt | em 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
5697:000 | DONE cmt | em 16 16 |        |             |                 ; address handling
5698:000 | DONE ins | em 16 16 | 0069c1 | a0 01 00    |                 ldy.# 0001           
5699:000 | DONE ins | em 16 16 | 0069c4 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
5700:000 | DONE ins | em 16 16 | 0069c6 | a8          |                 tay                  
5701:000 | DONE wsp | em 16 16 |        |             |
5702:000 | DONE ins | em 16 16 | 0069c7 | 60          |                 rts                  takes us to original caller
5703:000 | DONE wsp | em 16 16 |        |             |
5704:000 | DONE wsp | em 16 16 |        |             |
5705:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5706:000 | DONE cmt | em 16 16 |        |             | ; DODEFER
5707:000 | DONE cmt | em 16 16 |        |             | ; Execute a DEFER statement at runtime: Execute the address we find after the
5708:000 | DONE cmt | em 16 16 |        |             | ; caller in the Data Field
5709:000 | DONE lbl | em 16 16 | 0069c8 |             | dodefer                              
5710:000 | DONE cmt | em 16 16 |        |             |                 ; the xt we need is stored in the two bytes after the JSR return
5711:000 | DONE cmt | em 16 16 |        |             |                 ; address, which is what is on top of the Retun Stack. So all we
5712:000 | DONE cmt | em 16 16 |        |             |                 ; have to do is replace our return jump with what we find there
5713:000 | DONE ins | em 16 16 | 0069c8 | 68          |                 pla                  this is the address where we find the xt ...
5714:000 | DONE ins | em 16 16 | 0069c9 | 1a          |                 inc.a                ... except one byte later
5715:000 | DONE ins | em 16 16 | 0069ca | 85 1c       |                 sta.d 00001c         
5716:000 | DONE ins | em 16 16 | 0069cc | b2 1c       |                 lda.di 00001c        LDA (TMP1)
5717:000 | DONE ins | em 16 16 | 0069ce | 3a          |                 dec.a                Now we need to move one byte back
5718:000 | DONE ins | em 16 16 | 0069cf | 48          |                 pha                  Return new address
5719:000 | DONE wsp | em 16 16 |        |             |
5720:000 | DONE ins | em 16 16 | 0069d0 | 60          |                 rts                  This is actually a jump to the new target
5721:000 | DONE wsp | em 16 16 |        |             |
5722:000 | DONE lbl | em 16 16 | 0069d1 |             | defer_error                          
5723:000 | DONE cmt | em 16 16 |        |             |                 ; if the defer has not been defined with an IS word, we land
5724:000 | DONE cmt | em 16 16 |        |             |                 ; here by default
5725:000 | DONE ins | em 16 16 | 0069d1 | a9 f3 71    |                 lda.# 0071f3         
5726:000 | DONE ins | em 16 16 | 0069d4 | 4c 70 6a    |                 jmp 006a70           
5727:000 | DONE wsp | em 16 16 |        |             |
5728:000 | DONE wsp | em 16 16 |        |             |
5729:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5730:000 | DONE cmt | em 16 16 |        |             | ; DODOES
5731:000 | DONE cmt | em 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
5732:000 | DONE cmt | em 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
5733:000 | DONE lbl | em 16 16 | 0069d7 |             | dodoes                               
5734:000 | DONE cmt | em 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
5735:000 | DONE cmt | em 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
5736:000 | DONE cmt | em 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
5737:000 | DONE cmt | em 16 16 |        |             |                 ; works
5738:000 | DONE ins | em 16 16 | 0069d7 | 68          |                 pla                  
5739:000 | DONE ins | em 16 16 | 0069d8 | 1a          |                 inc.a                
5740:000 | DONE ins | em 16 16 | 0069d9 | 85 20       |                 sta.d 000020         
5741:000 | DONE wsp | em 16 16 |        |             |
5742:000 | DONE cmt | em 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
5743:000 | DONE cmt | em 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
5744:000 | DONE cmt | em 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
5745:000 | DONE ins | em 16 16 | 0069db | ca          |                 dex                  
5746:000 | DONE ins | em 16 16 | 0069dc | ca          |                 dex                  
5747:000 | DONE ins | em 16 16 | 0069dd | 94 00       |                 sty.dx 00            
5748:000 | DONE wsp | em 16 16 |        |             |
5749:000 | DONE ins | em 16 16 | 0069df | 7a          |                 ply                  
5750:000 | DONE ins | em 16 16 | 0069e0 | c8          |                 iny                  
5751:000 | DONE wsp | em 16 16 |        |             |
5752:000 | DONE cmt | em 16 16 |        |             |                 ; This leaves the return address from the original main routine
5753:000 | DONE cmt | em 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
5754:000 | DONE cmt | em 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
5755:000 | DONE cmt | em 16 16 |        |             |                 ; will take us back to the main routine
5756:000 | DONE ins | em 16 16 | 0069e1 | 6c 20 00    |                 jmp.i 000020         JMP (TMP3)
5757:000 | DONE wsp | em 16 16 |        |             |
5758:000 | DONE wsp | em 16 16 |        |             |
5759:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5760:000 | DONE cmt | em 16 16 |        |             | ; DOVAR
5761:000 | DONE cmt | em 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
5762:000 | DONE cmt | em 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
5763:000 | DONE cmt | em 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
5764:000 | DONE cmt | em 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
5765:000 | DONE cmt | em 16 16 |        |             | ; routine installed with CREATE
5766:000 | DONE lbl | em 16 16 | 0069e4 |             | dovar                                
5767:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5768:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5769:000 | DONE ins | em 16 16 | 0069e4 | ca          |                 dex                  make room on Data Stack
5770:000 | DONE ins | em 16 16 | 0069e5 | ca          |                 dex                  
5771:000 | DONE ins | em 16 16 | 0069e6 | 94 00       |                 sty.dx 00            
5772:000 | DONE wsp | em 16 16 |        |             |
5773:000 | DONE cmt | em 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
5774:000 | DONE cmt | em 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
5775:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5776:000 | DONE ins | em 16 16 | 0069e8 | 7a          |                 ply                  value is now TOS
5777:000 | DONE ins | em 16 16 | 0069e9 | c8          |                 iny                  add one because of 65816's address handling
5778:000 | DONE wsp | em 16 16 |        |             |
5779:000 | DONE ins | em 16 16 | 0069ea | 60          |                 rts                  takes us to original caller
5780:000 | DONE wsp | em 16 16 |        |             |
5781:000 | DONE wsp | em 16 16 |        |             |
5782:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5783:000 | DONE cmt | em 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
5784:000 | DONE wsp | em 16 16 |        |             |
5785:000 | DONE wsp | em 16 16 |        |             |
5786:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5787:000 | DONE cmt | em 16 16 |        |             | ; INTERPRET
5788:000 | DONE cmt | em 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
5789:000 | DONE cmt | em 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
5790:000 | DONE cmt | em 16 16 |        |             | ; string is in ciblen
5791:000 | DONE lbl | em 16 16 | 0069eb |             | interpret                            
5792:000 | DONE lbl | em 16 16 | 0069eb |             | interpret_loop                       
5793:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5794:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5795:000 | DONE cmt | em 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
5796:000 | DONE cmt | em 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
5797:000 | DONE cmt | em 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
5798:000 | DONE cmt | em 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
5799:000 | DONE cmt | em 16 16 |        |             |                 ; PARSE doesn't
5800:000 | DONE ins | em 16 16 | 0069eb | 20 73 5c    |                 jsr 005c73           ( "string" -- addr u )
5801:000 | DONE wsp | em 16 16 |        |             |
5802:000 | DONE cmt | em 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
5803:000 | DONE cmt | em 16 16 |        |             |                 ; in the line and we need to go get a new line
5804:000 | DONE ins | em 16 16 | 0069ee | 98          |                 tya                  force flag check
5805:000 | DONE ins | em 16 16 | 0069ef | f0 52       |                 beq 006a43           
5806:000 | DONE wsp | em 16 16 |        |             |
5807:000 | DONE cmt | em 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
5808:000 | DONE cmt | em 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
5809:000 | DONE cmt | em 16 16 |        |             |                 ; we have to go see if it is a number
5810:000 | DONE ins | em 16 16 | 0069f1 | 20 1d 54    |                 jsr 00541d           TODO convert this to assembler
5811:000 | DONE ins | em 16 16 | 0069f4 | 20 84 59    |                 jsr 005984           ( addr u -- nt | 0 )
5812:000 | DONE wsp | em 16 16 |        |             |
5813:000 | DONE cmt | em 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
5814:000 | DONE ins | em 16 16 | 0069f7 | 98          |                 tya                  
5815:000 | DONE ins | em 16 16 | 0069f8 | d0 15       |                 bne 006a0f           
5816:000 | DONE wsp | em 16 16 |        |             |
5817:000 | DONE cmt | em 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
5818:000 | DONE cmt | em 16 16 |        |             |                 ; a number.
5819:000 | DONE ins | em 16 16 | 0069fa | 20 e2 58    |                 jsr 0058e2           TODO convert this to assembler
5820:000 | DONE wsp | em 16 16 |        |             |
5821:000 | DONE cmt | em 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
5822:000 | DONE cmt | em 16 16 |        |             |                 ; complaining for us
5823:000 | DONE ins | em 16 16 | 0069fd | 20 c0 5b    |                 jsr 005bc0           ( addr u -- u | d )
5824:000 | DONE wsp | em 16 16 |        |             |
5825:000 | DONE cmt | em 16 16 |        |             |                 ; If we're interpreting, we're done
5826:000 | DONE ins | em 16 16 | 006a00 | a5 14       |                 lda.d 000014         
5827:000 | DONE ins | em 16 16 | 006a02 | f0 e7       |                 beq 0069eb           
5828:000 | DONE wsp | em 16 16 |        |             |
5829:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so there is a bit more work. Note this
5830:000 | DONE cmt | em 16 16 |        |             |                 ; doesn't work with double-cell numbers, only single-cell
5831:000 | DONE ins | em 16 16 | 006a04 | f4 e6 5a    |                 phe.# 005ae6         LITERAL runtime
5832:000 | DONE ins | em 16 16 | 006a07 | 20 4f 6a    |                 jsr 006a4f           
5833:000 | DONE wsp | em 16 16 |        |             |
5834:000 | DONE cmt | em 16 16 |        |             |                 ; compile our number
5835:000 | DONE cmt | em 16 16 |        |             |                 ; TODO convert this to assembler
5836:000 | DONE ins | em 16 16 | 006a0a | 20 42 52    |                 jsr 005242           
5837:000 | DONE wsp | em 16 16 |        |             |
5838:000 | DONE cmt | em 16 16 |        |             |                 ; That was so much fun, let's do it again!
5839:000 | DONE ins | em 16 16 | 006a0d | 80 dc       |                 bra 0069eb           
5840:000 | DONE wsp | em 16 16 |        |             |
5841:000 | DONE lbl | em 16 16 | 006a0f |             | interpret_got_name_token             
5842:000 | DONE cmt | em 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
5843:000 | DONE cmt | em 16 16 |        |             |                 ; though, which is four bytes father down.
5844:000 | DONE wsp | em 16 16 |        |             |
5845:000 | DONE cmt | em 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
5846:000 | DONE cmt | em 16 16 |        |             |                 ; really fast if Y is TOS
5847:000 | DONE ins | em 16 16 | 006a0f | e8          |                 inx                  
5848:000 | DONE ins | em 16 16 | 006a10 | e8          |                 inx                  
5849:000 | DONE ins | em 16 16 | 006a11 | e8          |                 inx                  
5850:000 | DONE ins | em 16 16 | 006a12 | e8          |                 inx                  
5851:000 | DONE wsp | em 16 16 |        |             |
5852:000 | DONE cmt | em 16 16 |        |             |                 ; This is a quicker
5853:000 | DONE cmt | em 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
5854:000 | DONE cmt | em 16 16 |        |             |                 ; error handling and compilation stuff.
5855:000 | DONE ins | em 16 16 | 006a13 | 84 1a       |                 sty.d 00001a         
5856:000 | DONE ins | em 16 16 | 006a15 | c8          |                 iny                  
5857:000 | DONE ins | em 16 16 | 006a16 | c8          |                 iny                  
5858:000 | DONE ins | em 16 16 | 006a17 | c8          |                 iny                  
5859:000 | DONE ins | em 16 16 | 006a18 | c8          |                 iny                  
5860:000 | DONE ins | em 16 16 | 006a19 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5861:000 | DONE ins | em 16 16 | 006a1c | a8          |                 tay                  xt is TOS
5862:000 | DONE wsp | em 16 16 |        |             |
5863:000 | DONE cmt | em 16 16 |        |             |                 ; See if we are in interpret or compile mode
5864:000 | DONE ins | em 16 16 | 006a1d | a5 14       |                 lda.d 000014         
5865:000 | DONE ins | em 16 16 | 006a1f | d0 14       |                 bne 006a35           
5866:000 | DONE wsp | em 16 16 |        |             |
5867:000 | DONE cmt | em 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
5868:000 | DONE cmt | em 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
5869:000 | DONE cmt | em 16 16 |        |             |                 ; illegal.
5870:000 | DONE ins | em 16 16 | 006a21 | b2 1a       |                 lda.di 00001a        
5871:000 | DONE ins | em 16 16 | 006a23 | eb          |                 xba                  flags are MSB
5872:000 | DONE ins | em 16 16 | 006a24 | 29 01 00    |                 and.# CO             mask everything but Compile Only bit
5873:000 | DONE ins | em 16 16 | 006a27 | f0 06       |                 beq 006a2f           
5874:000 | DONE wsp | em 16 16 |        |             |
5875:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if we can print offending word first
5876:000 | DONE ins | em 16 16 | 006a29 | a9 d2 71    |                 lda.# 0071d2         
5877:000 | DONE ins | em 16 16 | 006a2c | 4c 70 6a    |                 jmp 006a70           
5878:000 | DONE wsp | em 16 16 |        |             |
5879:000 | DONE lbl | em 16 16 | 006a2f |             | interpret_interpret                  
5880:000 | DONE cmt | em 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
5881:000 | DONE cmt | em 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
5882:000 | DONE cmt | em 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
5883:000 | DONE cmt | em 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
5884:000 | DONE cmt | em 16 16 |        |             |                 ; instead, which is actually slightly slower
5885:000 | DONE ins | em 16 16 | 006a2f | 20 49 59    |                 jsr 005949           
5886:000 | DONE wsp | em 16 16 |        |             |
5887:000 | DONE cmt | em 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
5888:000 | DONE ins | em 16 16 | 006a32 | 4c eb 69    |                 jmp 0069eb           
5889:000 | DONE wsp | em 16 16 |        |             |
5890:000 | DONE lbl | em 16 16 | 006a35 |             | interpret_compile                    
5891:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
5892:000 | DONE cmt | em 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
5893:000 | DONE cmt | em 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
5894:000 | DONE cmt | em 16 16 |        |             |                 ; is easier
5895:000 | DONE ins | em 16 16 | 006a35 | b2 1a       |                 lda.di 00001a        
5896:000 | DONE ins | em 16 16 | 006a37 | eb          |                 xba                  flags are MSB
5897:000 | DONE ins | em 16 16 | 006a38 | 29 04 00    |                 and.# IM             Mask all but IM bit
5898:000 | DONE ins | em 16 16 | 006a3b | d0 f2       |                 bne 006a2f           IMMEDIATE word, execute right now
5899:000 | DONE wsp | em 16 16 |        |             |
5900:000 | DONE cmt | em 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
5901:000 | DONE ins | em 16 16 | 006a3d | 20 89 56    |                 jsr 005689           
5902:000 | DONE ins | em 16 16 | 006a40 | 4c eb 69    |                 jmp 0069eb           
5903:000 | DONE wsp | em 16 16 |        |             |
5904:000 | DONE lbl | em 16 16 | 006a43 |             | interpret_line_done                  
5905:000 | DONE cmt | em 16 16 |        |             |                 ; drop stuff from PARSE_NAME
5906:000 | DONE ins | em 16 16 | 006a43 | b4 02       |                 ldy.dx 02            
5907:000 | DONE ins | em 16 16 | 006a45 | e8          |                 inx                  
5908:000 | DONE ins | em 16 16 | 006a46 | e8          |                 inx                  
5909:000 | DONE ins | em 16 16 | 006a47 | e8          |                 inx                  
5910:000 | DONE ins | em 16 16 | 006a48 | e8          |                 inx                  
5911:000 | DONE wsp | em 16 16 |        |             |
5912:000 | DONE ins | em 16 16 | 006a49 | 60          |                 rts                  
5913:000 | DONE wsp | em 16 16 |        |             |
5914:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5915:000 | DONE cmt | em 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
5916:000 | DONE cmt | em 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
5917:000 | DONE cmt | em 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
5918:000 | DONE cmt | em 16 16 |        |             | ; address to be compiled on the Return Stack with
5919:000 | DONE cmt | em 16 16 |        |             | ;
5920:000 | DONE cmt | em 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
5921:000 | DONE cmt | em 16 16 |        |             | ;
5922:000 | DONE cmt | em 16 16 |        |             | ; Followed by a jump to whichever versions we need. Words that use this routine
5923:000 | DONE cmt | em 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
5924:000 | DONE cmt | em 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
5925:000 | DONE cmt | em 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
5926:000 | DONE cmt | em 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
5927:000 | DONE wsp | em 16 16 |        |             |
5928:000 | DONE dir | em 16 16 |        |             |         .!a16                        paranoid
5929:000 | DONE lbl | em 16 16 | 006a4a |             | cmpl_word                            
5930:000 | DONE ins | em 16 16 | 006a4a | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
5931:000 | DONE ins | em 16 16 | 006a4d | 80 08       |                 bra 006a57           
5932:000 | DONE lbl | em 16 16 | 006a4f |             | cmpl_subroutine                      
5933:000 | DONE ins | em 16 16 | 006a4f | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
5934:000 | DONE ins | em 16 16 | 006a52 | 80 03       |                 bra 006a57           
5935:000 | DONE lbl | em 16 16 | 006a54 |             | cmpl_jump                            
5936:000 | DONE ins | em 16 16 | 006a54 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
5937:000 | DONE lbl | em 16 16 | 006a57 |             | cmpl_common                          
5938:000 | DONE cmt | em 16 16 |        |             |                 ; we're going to need the Y register to get anything done
5939:000 | DONE ins | em 16 16 | 006a57 | 84 24       |                 sty.d 000024         
5940:000 | DONE wsp | em 16 16 |        |             |
5941:000 | DONE ins | em 16 16 | 006a59 | a8          |                 tay                  force flag check
5942:000 | DONE ins | em 16 16 | 006a5a | f0 08       |                 beq 006a64           came in through cmpl_word, just compile body
5943:000 | DONE wsp | em 16 16 |        |             |
5944:000 | DONE cmt | em 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
5945:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of C, ("c-comma")
5946:000 | DONE ins | em 16 16 | 006a5c | e2 20       |                 sep 20               
5946:001 | DONE ctl | em  8 16 |        |             |         .!a8
5947:000 | DONE ins | em  8 16 | 006a5e | 92 00       |                 sta.di 000000        STA (CP)
5948:000 | DONE ins | em  8 16 | 006a60 | c2 20       |                 rep 20               
5948:001 | DONE ctl | em 16 16 |        |             |         .!a16
5949:000 | DONE ins | em 16 16 | 006a62 | e6 00       |                 inc.d 000000         fall through to cmpl_body
5950:000 | DONE lbl | em 16 16 | 006a64 |             | cmpl_body                            
5951:000 | DONE ins | em 16 16 | 006a64 | 7a          |                 ply                  the return address we'll need later
5952:000 | DONE wsp | em 16 16 |        |             |
5953:000 | DONE ins | em 16 16 | 006a65 | 68          |                 pla                  next value on stack is the word to compile
5954:000 | DONE ins | em 16 16 | 006a66 | 92 00       |                 sta.di 000000        this is a quicker version of , ("comma")
5955:000 | DONE ins | em 16 16 | 006a68 | e6 00       |                 inc.d 000000         
5956:000 | DONE ins | em 16 16 | 006a6a | e6 00       |                 inc.d 000000         
5957:000 | DONE wsp | em 16 16 |        |             |
5958:000 | DONE ins | em 16 16 | 006a6c | 5a          |                 phy                  make sure we can get back home
5959:000 | DONE wsp | em 16 16 |        |             |
5960:000 | DONE ins | em 16 16 | 006a6d | a4 24       |                 ldy.d 000024         restore Data Stack
5961:000 | DONE wsp | em 16 16 |        |             |
5962:000 | DONE ins | em 16 16 | 006a6f | 60          |                 rts                  
5963:000 | DONE wsp | em 16 16 |        |             |
5964:000 | DONE wsp | em 16 16 |        |             |
5965:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5966:000 | DONE cmt | em 16 16 |        |             | ; FATAL ERROR
5967:000 | DONE cmt | em 16 16 |        |             | ; Take address of error string from A, print it and then call abort
5968:000 | DONE lbl | em 16 16 | 006a70 |             | error                                
5969:000 | DONE ins | em 16 16 | 006a70 | 20 76 6a    |                 jsr 006a76           
5970:000 | DONE ins | em 16 16 | 006a73 | 4c af 50    |                 jmp 0050af           
5971:000 | DONE wsp | em 16 16 |        |             |
5972:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5973:000 | DONE cmt | em 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
5974:000 | DONE cmt | em 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
5975:000 | DONE cmt | em 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
5976:000 | DONE cmt | em 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
5977:000 | DONE lbl | em 16 16 | 006a76 |             | print_string                         
5978:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5979:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5980:000 | DONE cmt | em 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
5981:000 | DONE cmt | em 16 16 |        |             |                 ; used it for something already
5982:000 | DONE ins | em 16 16 | 006a76 | da          |                 phx                  
5983:000 | DONE ins | em 16 16 | 006a77 | aa          |                 tax                  x16 contains address of string
5984:000 | DONE lbl | em 16 16 | 006a78 |             | @                                    
5985:000 | DONE ins | em 16 16 | 006a78 | e2 20       |                 sep 20               
5985:001 | DONE ctl | em  8 16 |        |             |         .!a8
5986:000 | DONE ins | em  8 16 | 006a7a | bd 00 00    |                 lda.x 0000           LDA $0000,X
5987:000 | DONE ins | em  8 16 | 006a7d | f0 06       |                 beq 006a85           
5988:000 | DONE ins | em  8 16 | 006a7f | 20 f1 58    |                 jsr 0058f1           
5989:000 | DONE ins | em  8 16 | 006a82 | e8          |                 inx                  
5990:000 | DONE ins | em  8 16 | 006a83 | 80 f3       |                 bra 006a78           
5991:000 | DONE wsp | em  8 16 |        |             |
5992:000 | DONE lbl | em  8 16 | 006a85 |             | print_string_done                    
5993:000 | DONE ins | em  8 16 | 006a85 | a9 0a       |                 lda.# AscLF          should be CR on some systems
5994:000 | DONE ins | em  8 16 | 006a87 | 20 f1 58    |                 jsr 0058f1           
5995:000 | DONE ins | em  8 16 | 006a8a | c2 20       |                 rep 20               
5995:001 | DONE ctl | em 16 16 |        |             |         .!a16
5996:000 | DONE ins | em 16 16 | 006a8c | fa          |                 plx                  
5997:000 | DONE wsp | em 16 16 |        |             |
5998:000 | DONE ins | em 16 16 | 006a8d | 60          |                 rts                  
5999:000 | DONE wsp | em 16 16 |        |             |
6000:000 | DONE wsp | em 16 16 |        |             |
6001:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
6002:000 | DONE cmt | em 16 16 |        |             | ; PRINT UNSIGNED NUMBER
6003:000 | DONE cmt | em 16 16 |        |             | ; Is the equivalent to Forth's 0 <# S# #> TYPE or U. without the SPACE at the
6004:000 | DONE cmt | em 16 16 |        |             | ; end. TODO convert this to more assembler for speed
6005:000 | DONE lbl | em 16 16 | 006a8e |             | print_u                              
6006:000 | DONE ins | em 16 16 | 006a8e | ca          |                 dex                  0
6007:000 | DONE ins | em 16 16 | 006a8f | ca          |                 dex                  
6008:000 | DONE ins | em 16 16 | 006a90 | 94 00       |                 sty.dx 00            
6009:000 | DONE ins | em 16 16 | 006a92 | a0 00 00    |                 ldy.# 0000           
6010:000 | DONE wsp | em 16 16 |        |             |
6011:000 | DONE ins | em 16 16 | 006a95 | 20 5a 5c    |                 jsr 005c5a           <#
6012:000 | DONE ins | em 16 16 | 006a98 | 84 18       |                 sty.d 000018         
6013:000 | DONE ins | em 16 16 | 006a9a | b4 00       |                 ldy.dx 00            
6014:000 | DONE ins | em 16 16 | 006a9c | e8          |                 inx                  
6015:000 | DONE ins | em 16 16 | 006a9d | e8          |                 inx                  
6016:000 | DONE wsp | em 16 16 |        |             |
6017:000 | DONE ins | em 16 16 | 006a9e | 20 b3 52    |                 jsr 0052b3           #S
6018:000 | DONE ins | em 16 16 | 006aa1 | 20 a4 52    |                 jsr 0052a4           #>
6019:000 | DONE ins | em 16 16 | 006aa4 | 20 0b 5f    |                 jsr 005f0b           
6020:000 | DONE wsp | em 16 16 |        |             |
6021:000 | DONE ins | em 16 16 | 006aa7 | 60          |                 rts                  
6022:000 | DONE wsp | em 16 16 |        |             |
6023:000 | DONE wsp | em 16 16 |        |             |
6024:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
6025:000 | DONE cmt | em 16 16 |        |             | ; CONVERT BYTE TO ASCII
6026:000 | DONE cmt | em 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
6027:000 | DONE cmt | em 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
6028:000 | DONE lbl | em 16 16 | 006aa8 |             | byte_to_ascii                        
6029:000 | DONE dir | em 16 16 |        |             |         .!a16                        
6030:000 | DONE ins | em 16 16 | 006aa8 | 48          |                 pha                  
6031:000 | DONE cmt | em 16 16 |        |             |                 ; convert high nibble first
6032:000 | DONE ins | em 16 16 | 006aa9 | 4a          |                 lsr.a                
6033:000 | DONE ins | em 16 16 | 006aaa | 4a          |                 lsr.a                
6034:000 | DONE ins | em 16 16 | 006aab | 4a          |                 lsr.a                
6035:000 | DONE ins | em 16 16 | 006aac | 4a          |                 lsr.a                
6036:000 | DONE ins | em 16 16 | 006aad | 20 b1 6a    |                 jsr 006ab1           
6037:000 | DONE wsp | em 16 16 |        |             |
6038:000 | DONE ins | em 16 16 | 006ab0 | 68          |                 pla                  
6039:000 | DONE wsp | em 16 16 |        |             |
6040:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to nibble_to_ascii
6041:000 | DONE wsp | em 16 16 |        |             |
6042:000 | DONE wsp | em 16 16 |        |             |
6043:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
6044:000 | DONE cmt | em 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
6045:000 | DONE cmt | em 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
6046:000 | DONE cmt | em 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
6047:000 | DONE lbl | em 16 16 | 006ab1 |             | nibble_to_ascii                      
6048:000 | DONE dir | em 16 16 |        |             |         .!a16                        
6049:000 | DONE ins | em 16 16 | 006ab1 | 29 0f 00    |                 and.# 000f           
6050:000 | DONE ins | em 16 16 | 006ab4 | 09 30 00    |                 ora.# 30             
6051:000 | DONE ins | em 16 16 | 006ab7 | c9 3a 00    |                 cmp.# 003a           '9' + 1
6052:000 | DONE ins | em 16 16 | 006aba | 90 03       |                 bcc 006abf           
6053:000 | DONE ins | em 16 16 | 006abc | 69 06 00    |                 adc.# 0006           
6054:000 | DONE lbl | em 16 16 | 006abf |             | @                                    
6055:000 | DONE ins | em 16 16 | 006abf | 20 f1 58    |                 jsr 0058f1           
6056:000 | DONE wsp | em 16 16 |        |             |
6057:000 | DONE ins | em 16 16 | 006ac2 | 60          |                 rts                  
6058:000 | DONE wsp | em 16 16 |        |             |
6059:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6060:000 | DONE cmt | em 16 16 |        |             | ; HIGH-LEVEL WORDS
6061:000 | DONE wsp | em 16 16 |        |             |
6062:000 | DONE cmt | em 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
6063:000 | DONE cmt | em 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
6064:000 | DONE cmt | em 16 16 |        |             | ; or CR/LF is required
6065:000 | DONE lbl | em 16 16 | 006ac3 |             | hi-start                             
6066:000 | DONE cmt | em 16 16 |        |             |         ; Output and comment words
6067:000 | DONE dir | em 16 16 | 006ac3 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) 
6067:000 | DONE dir | em 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
6067:000 | DONE dir | em 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
6067:000 | DONE dir | em 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
6067:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
6067:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
6068:000 | DONE dir | em 16 16 | 006ae8 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) 
6068:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
6068:000 | DONE dir | em 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
6068:000 | DONE dir | em 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
6068:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
6068:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
6069:000 | DONE wsp | em 16 16 |        |             |
6070:000 | DONE cmt | em 16 16 |        |             |         ; High flow control. Some of these could be realized with CS-ROLL and
6071:000 | DONE cmt | em 16 16 |        |             |         ; CS-PICK instead
6072:000 | DONE dir | em 16 16 | 006b0d | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) 
6072:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
6072:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
6072:000 | DONE dir | em 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
6072:000 | DONE dir | em 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
6072:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
6072:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
6072:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
6072:000 | DONE dir | em 16 16 |        |             |                                          -- 
6073:000 | DONE dir | em 16 16 | 006b45 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) 
6073:000 | DONE dir | em 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
6073:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
6073:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
6073:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
6073:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
6073:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
6074:000 | DONE dir | em 16 16 | 006b71 | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) 
6074:000 | DONE dir | em 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
6074:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
6074:000 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
6074:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
6074:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
6074:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
6074:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
6074:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
6074:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
6075:000 | DONE dir | em 16 16 | 006bb5 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) 
6075:000 | DONE dir | em 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
6075:000 | DONE dir | em 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
6075:000 | DONE dir | em 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
6075:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
6075:000 | DONE dir | em 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
6075:000 | DONE dir | em 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
6075:000 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
6075:000 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
6076:000 | DONE dir | em 16 16 | 006bf2 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) 
6076:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
6076:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
6076:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
6076:000 | DONE dir | em 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
6076:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
6076:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
6076:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
6077:000 | DONE dir | em 16 16 | 006c26 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) 
6077:000 | DONE dir | em 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
6077:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
6077:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
6077:000 | DONE dir | em 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
6077:000 | DONE dir | em 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
6077:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
6077:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
6077:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
6077:000 | DONE dir | em 16 16 |        |             |                                          -- 
6078:000 | DONE wsp | em 16 16 |        |             |
6079:000 | DONE cmt | em 16 16 |        |             |         ; DEFER's friends. Code taken from ANSI Forth specifications. Many of
6080:000 | DONE cmt | em 16 16 |        |             |         ; these will be moved to assembler code in due course
6081:000 | DONE dir | em 16 16 | 006c66 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 21, 20, 3e, 62, 6f, 64, (...) 
6081:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 21  --  :   d e f e r !
6081:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 21  --    > b o d y   !
6081:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
6082:000 | DONE dir | em 16 16 | 006c79 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 40, 20, 3e, 62, 6f, 64, (...) 
6082:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 40  --  :   d e f e r @
6082:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 40  --    > b o d y   @
6082:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
6083:000 | DONE dir | em 16 16 | 006c8c | (76 bytes)  |         .byte 3a, 20, 69, 73, 20, 73, 74, 61, 74, 65, 20, 40, 20, (...) 
6083:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 73 20 73 74 61  --  :   i s   s t a
6083:000 | DONE dir | em 16 16 |        |             |                 74 65 20 40 20 69 66 20  --  t e   @   i f  
6083:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
6083:000 | DONE dir | em 16 16 |        |             |                 20 5b 27 5d 20 70 6f 73  --    [ ' ]   p o s
6083:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 64 65  --  t p o n e   d e
6083:000 | DONE dir | em 16 16 |        |             |                 66 65 72 21 20 65 6c 73  --  f e r !   e l s
6083:000 | DONE dir | em 16 16 |        |             |                 65 20 27 20 64 65 66 65  --  e   '   d e f e
6083:000 | DONE dir | em 16 16 |        |             |                 72 21 20 74 68 65 6e 20  --  r !   t h e n  
6083:000 | DONE dir | em 16 16 |        |             |                 3b 20 69 6d 6d 65 64 69  --  ;   i m m e d i
6083:000 | DONE dir | em 16 16 |        |             |                 61 74 65 20              --  a t e  
6084:000 | DONE dir | em 16 16 | 006cd8 | (83 bytes)  |         .byte 3a, 20, 61, 63, 74, 69, 6f, 6e, 2d, 6f, 66, 20, 73, (...) 
6084:000 | DONE dir | em 16 16 |        |             |                 3a 20 61 63 74 69 6f 6e  --  :   a c t i o n
6084:000 | DONE dir | em 16 16 |        |             |                 2d 6f 66 20 73 74 61 74  --  - o f   s t a t
6084:000 | DONE dir | em 16 16 |        |             |                 65 20 40 20 69 66 20 70  --  e   @   i f   p
6084:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
6084:000 | DONE dir | em 16 16 |        |             |                 5b 27 5d 20 70 6f 73 74  --  [ ' ]   p o s t
6084:000 | DONE dir | em 16 16 |        |             |                 70 6f 6e 65 20 64 65 66  --  p o n e   d e f
6084:000 | DONE dir | em 16 16 |        |             |                 65 72 40 20 65 6c 73 65  --  e r @   e l s e
6084:000 | DONE dir | em 16 16 |        |             |                 20 27 20 64 65 66 65 72  --    '   d e f e r
6084:000 | DONE dir | em 16 16 |        |             |                 40 20 74 68 65 6e 20 3b  --  @   t h e n   ;
6084:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
6084:000 | DONE dir | em 16 16 |        |             |                 74 65 20                 --  t e  
6085:000 | DONE wsp | em 16 16 |        |             |
6086:000 | DONE cmt | em 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
6087:000 | DONE cmt | em 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
6088:000 | DONE cmt | em 16 16 |        |             |         ; stuff
6089:000 | DONE dir | em 16 16 | 006d2b | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
6089:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
6089:000 | DONE dir | em 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
6089:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
6089:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
6089:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6090:000 | DONE dir | em 16 16 | 006d4c | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
6090:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
6090:000 | DONE dir | em 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
6090:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
6090:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
6091:000 | DONE dir | em 16 16 | 006d66 | (18 bytes)  |         .byte 3a, 20, 6d, 6f, 64, 20, 2f, 6d, 6f, 64, 20, 64, 72, (...) 
6091:000 | DONE dir | em 16 16 |        |             |                 3a 20 6d 6f 64 20 2f 6d  --  :   m o d   / m
6091:000 | DONE dir | em 16 16 |        |             |                 6f 64 20 64 72 6f 70 20  --  o d   d r o p  
6091:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
6092:000 | DONE dir | em 16 16 | 006d78 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
6092:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
6092:000 | DONE dir | em 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
6092:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
6092:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
6092:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6093:000 | DONE dir | em 16 16 | 006d99 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
6093:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
6093:000 | DONE dir | em 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
6093:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
6093:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
6094:000 | DONE wsp | em 16 16 |        |             |
6095:000 | DONE cmt | em 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
6096:000 | DONE cmt | em 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
6097:000 | DONE cmt | em 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
6098:000 | DONE cmt | em 16 16 |        |             |         ; . (DOT) and U. are hard-coded because there are used by other words
6099:000 | DONE dir | em 16 16 | 006db3 | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
6099:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
6099:000 | DONE dir | em 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
6099:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
6099:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
6099:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
6099:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
6100:000 | DONE dir | em 16 16 | 006ddf | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
6100:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
6100:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
6100:000 | DONE dir | em 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
6100:000 | DONE dir | em 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
6100:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
6100:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
6100:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
6100:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
6101:000 | DONE dir | em 16 16 | 006e1b | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
6101:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
6101:000 | DONE dir | em 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
6101:000 | DONE dir | em 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
6101:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
6102:000 | DONE dir | em 16 16 | 006e37 | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
6102:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
6102:000 | DONE dir | em 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
6102:000 | DONE dir | em 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
6102:000 | DONE dir | em 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
6102:000 | DONE dir | em 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
6102:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
6103:000 | DONE dir | em 16 16 | 006e62 | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
6103:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
6103:000 | DONE dir | em 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
6103:000 | DONE dir | em 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
6103:000 | DONE dir | em 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
6103:000 | DONE dir | em 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
6103:000 | DONE dir | em 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
6104:000 | DONE dir | em 16 16 | 006e90 | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
6104:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
6104:000 | DONE dir | em 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
6104:000 | DONE dir | em 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
6104:000 | DONE dir | em 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
6104:000 | DONE dir | em 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
6104:000 | DONE dir | em 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
6104:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
6104:000 | DONE dir | em 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
6105:000 | DONE wsp | em 16 16 |        |             |
6106:000 | DONE cmt | em 16 16 |        |             |         ; Various words. Convert these to assembler
6107:000 | DONE dir | em 16 16 | 006ecd | (58 bytes)  |         .byte 3a, 20, 77, 69, 74, 68, 69, 6e, 20, 28, 20, 6e, 31, (...) 
6107:000 | DONE dir | em 16 16 |        |             |                 3a 20 77 69 74 68 69 6e  --  :   w i t h i n
6107:000 | DONE dir | em 16 16 |        |             |                 20 28 20 6e 31 20 6e 32  --    (   n 1   n 2
6107:000 | DONE dir | em 16 16 |        |             |                 20 6e 33 20 2d 2d 20 66  --    n 3   - -   f
6107:000 | DONE dir | em 16 16 |        |             |                 20 29 20 72 6f 74 20 74  --    )   r o t   t
6107:000 | DONE dir | em 16 16 |        |             |                 75 63 6b 20 3e 20 2d 72  --  u c k   >   - r
6107:000 | DONE dir | em 16 16 |        |             |                 6f 74 20 3e 20 69 6e 76  --  o t   >   i n v
6107:000 | DONE dir | em 16 16 |        |             |                 65 72 74 20 61 6e 64 20  --  e r t   a n d  
6107:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
6108:000 | DONE wsp | em 16 16 |        |             |
6109:000 | DONE cmt | em 16 16 |        |             |         ; DUMP is a longish word we'll want to modify for a while until we are
6110:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
6111:000 | DONE dir | em 16 16 | 006f07 | (49 bytes)  |         .byte 3a, 20, 64, 75, 6d, 70, 20, 28, 20, 61, 64, 64, 72, (...) 
6111:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 75 6d 70 20 28  --  :   d u m p   (
6111:000 | DONE dir | em 16 16 |        |             |                 20 61 64 64 72 20 75 20  --    a d d r   u  
6111:000 | DONE dir | em 16 16 |        |             |                 2d 2d 20 29 20 62 6f 75  --  - -   )   b o u
6111:000 | DONE dir | em 16 16 |        |             |                 6e 64 73 20 3f 64 6f 20  --  n d s   ? d o  
6111:000 | DONE dir | em 16 16 |        |             |                 63 72 20 69 20 34 20 75  --  c r   i   4   u
6111:000 | DONE dir | em 16 16 |        |             |                 2e 72 20 73 70 61 63 65  --  . r   s p a c e
6111:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6112:000 | DONE dir | em 16 16 | 006f38 | (57 bytes)  |         .byte 31, 36, 20, 30, 20, 64, 6f, 20, 69, 20, 6a, 20, 2b, (...) 
6112:000 | DONE dir | em 16 16 |        |             |                 31 36 20 30 20 64 6f 20  --  1 6   0   d o  
6112:000 | DONE dir | em 16 16 |        |             |                 69 20 6a 20 2b 20 63 40  --  i   j   +   c @
6112:000 | DONE dir | em 16 16 |        |             |                 20 30 20 3c 23 20 23 20  --    0   < #   #  
6112:000 | DONE dir | em 16 16 |        |             |                 23 73 20 23 3e 20 74 79  --  # s   # >   t y
6112:000 | DONE dir | em 16 16 |        |             |                 70 65 20 73 70 61 63 65  --  p e   s p a c e
6112:000 | DONE dir | em 16 16 |        |             |                 20 6c 6f 6f 70 20 31 36  --    l o o p   1 6
6112:000 | DONE dir | em 16 16 |        |             |                 20 2b 6c 6f 6f 70 20 3b  --    + l o o p   ;
6112:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6113:000 | DONE wsp | em 16 16 |        |             |
6114:000 | DONE cmt | em 16 16 |        |             |         ; SEE is a longish word we'll want to modify for a while until we are
6115:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
6116:000 | DONE cmt | em 16 16 |        |             |         ; TODO replace by code, this is far too long
6117:000 | DONE dir | em 16 16 | 006f71 | (55 bytes)  |         .byte 3a, 20, 73, 65, 65, 20, 70, 61, 72, 73, 65, 2d, 6e, (...) 
6117:000 | DONE dir | em 16 16 |        |             |                 3a 20 73 65 65 20 70 61  --  :   s e e   p a
6117:000 | DONE dir | em 16 16 |        |             |                 72 73 65 2d 6e 61 6d 65  --  r s e - n a m e
6117:000 | DONE dir | em 16 16 |        |             |                 20 66 69 6e 64 2d 6e 61  --    f i n d - n a
6117:000 | DONE dir | em 16 16 |        |             |                 6d 65 20 64 75 70 20 30  --  m e   d u p   0
6117:000 | DONE dir | em 16 16 |        |             |                 3d 20 61 62 6f 72 74 22  --  =   a b o r t "
6117:000 | DONE dir | em 16 16 |        |             |                 20 4e 6f 20 73 75 63 68  --    N o   s u c h
6117:000 | DONE dir | em 16 16 |        |             |                 20 6e 61 6d 65 22 20     --    n a m e "  
6118:000 | DONE dir | em 16 16 | 006fa8 | (38 bytes)  |         .byte 62, 61, 73, 65, 20, 40, 20, 3e, 72, 20, 68, 65, 78, (...) 
6118:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 40 20 3e  --  b a s e   @   >
6118:000 | DONE dir | em 16 16 |        |             |                 72 20 68 65 78 20 64 75  --  r   h e x   d u
6118:000 | DONE dir | em 16 16 |        |             |                 70 20 63 72 20 73 70 61  --  p   c r   s p a
6118:000 | DONE dir | em 16 16 |        |             |                 63 65 20 2e 22 20 6e 74  --  c e   . "   n t
6118:000 | DONE dir | em 16 16 |        |             |                 3a 20 22 20 2e 20        --  :   "   .  
6119:000 | DONE dir | em 16 16 | 006fce | (27 bytes)  |         .byte 64, 75, 70, 20, 34, 20, 2b, 20, 40, 20, 73, 70, 61, (...) 
6119:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 34 20 2b 20  --  d u p   4   +  
6119:000 | DONE dir | em 16 16 |        |             |                 40 20 73 70 61 63 65 20  --  @   s p a c e  
6119:000 | DONE dir | em 16 16 |        |             |                 2e 22 20 78 74 3a 20 22  --  . "   x t :   "
6119:000 | DONE dir | em 16 16 |        |             |                 20 2e 20                 --    .  
6120:000 | DONE dir | em 16 16 | 006fe9 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 31, 20, 61, (...) 
6120:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
6120:000 | DONE dir | em 16 16 |        |             |                 40 20 31 20 61 6e 64 20  --  @   1   a n d  
6120:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
6120:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 43 4f 22 20  --    . "   C O "  
6120:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
6121:000 | DONE dir | em 16 16 | 00700e | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 32, 20, 61, (...) 
6121:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
6121:000 | DONE dir | em 16 16 |        |             |                 40 20 32 20 61 6e 64 20  --  @   2   a n d  
6121:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
6121:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 41 4e 22 20  --    . "   A N "  
6121:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
6122:000 | DONE dir | em 16 16 | 007033 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 34, 20, 61, (...) 
6122:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
6122:000 | DONE dir | em 16 16 |        |             |                 40 20 34 20 61 6e 64 20  --  @   4   a n d  
6122:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
6122:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 49 4d 22 20  --    . "   I M "  
6122:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
6123:000 | DONE dir | em 16 16 | 007058 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 38, 20, 61, (...) 
6123:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
6123:000 | DONE dir | em 16 16 |        |             |                 40 20 38 20 61 6e 64 20  --  @   8   a n d  
6123:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
6123:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 4e 4e 22 20  --    . "   N N "  
6123:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
6124:000 | DONE dir | em 16 16 | 00707d | (57 bytes)  |         .byte 64, 75, 70, 20, 63, 72, 20, 73, 70, 61, 63, 65, 20, (...) 
6124:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 63 72 20 73  --  d u p   c r   s
6124:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 20 2e 22 20  --  p a c e   . "  
6124:000 | DONE dir | em 16 16 |        |             |                 73 69 7a 65 20 28 64 65  --  s i z e   ( d e
6124:000 | DONE dir | em 16 16 |        |             |                 63 69 6d 61 6c 29 3a 20  --  c i m a l ) :  
6124:000 | DONE dir | em 16 16 |        |             |                 22 20 64 65 63 69 6d 61  --  "   d e c i m a
6124:000 | DONE dir | em 16 16 |        |             |                 6c 20 77 6f 72 64 73 69  --  l   w o r d s i
6124:000 | DONE dir | em 16 16 |        |             |                 7a 65 20 64 75 70 20 2e  --  z e   d u p   .
6124:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6125:000 | DONE dir | em 16 16 | 0070b6 | (49 bytes)  |         .byte 73, 77, 61, 70, 20, 6e, 61, 6d, 65, 3e, 69, 6e, 74, (...) 
6125:000 | DONE dir | em 16 16 |        |             |                 73 77 61 70 20 6e 61 6d  --  s w a p   n a m
6125:000 | DONE dir | em 16 16 |        |             |                 65 3e 69 6e 74 20 73 77  --  e > i n t   s w
6125:000 | DONE dir | em 16 16 |        |             |                 61 70 20 68 65 78 20 63  --  a p   h e x   c
6125:000 | DONE dir | em 16 16 |        |             |                 72 20 73 70 61 63 65 20  --  r   s p a c e  
6125:000 | DONE dir | em 16 16 |        |             |                 64 75 6d 70 20 72 3e 20  --  d u m p   r >  
6125:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 21 20 3b  --  b a s e   !   ;
6125:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6126:000 | DONE wsp | em 16 16 |        |             |
6127:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6128:000 | DONE cmt | em 16 16 |        |             | ; USER INCLUDES
6129:000 | DONE wsp | em 16 16 |        |             |
6130:000 | DONE cmt | em 16 16 |        |             | ; Include any Forth words defined by the user in USER.TASM
6131:000 | DONE wsp | em 16 16 |        |             |
6133:000 | DONE wsp | em 16 16 |        |             |
6134:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6135:000 | DONE wsp | em 16 16 |        |             |
6136:000 | DONE cmt | em 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
6137:000 | DONE cmt | em 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
6138:000 | DONE cmt | em 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
6139:000 | DONE dir | em 16 16 | 0070e7 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
6139:000 | DONE dir | em 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
6139:000 | DONE dir | em 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
6139:000 | DONE dir | em 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
6139:000 | DONE dir | em 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
6139:000 | DONE dir | em 16 16 |        |             |                 42 20 29                 --  B   )
6140:000 | DONE dir | em 16 16 | 00710a | (35 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
6140:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
6140:000 | DONE dir | em 16 16 |        |             |                 72 73 69 6f 6e 20 41 4c  --  r s i o n   A L
6140:000 | DONE dir | em 16 16 |        |             |                 50 48 41 20 31 39 2e 20  --  P H A   1 9 .  
6140:000 | DONE dir | em 16 16 |        |             |                 4d 61 72 63 68 20 32 30  --  M a r c h   2 0
6140:000 | DONE dir | em 16 16 |        |             |                 31 37 29                 --  1 7 )
6141:000 | DONE dir | em 16 16 | 00712d | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
6141:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
6141:000 | DONE dir | em 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
6141:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
6141:000 | DONE dir | em 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
6141:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
6141:000 | DONE dir | em 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
6141:000 | DONE dir | em 16 16 |        |             |                 6d 3e 29                 --  m > )
6142:000 | DONE dir | em 16 16 | 007160 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
6142:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
6142:000 | DONE dir | em 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
6142:000 | DONE dir | em 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
6142:000 | DONE dir | em 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
6142:000 | DONE dir | em 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
6142:000 | DONE dir | em 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
6142:000 | DONE dir | em 16 16 |        |             |                 4e 54 59 29              --  N T Y )
6143:000 | DONE dir | em 16 16 | 007194 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
6143:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
6143:000 | DONE dir | em 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
6143:000 | DONE dir | em 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
6143:000 | DONE dir | em 16 16 |        |             |                 29 20 63 72              --  )   c r
6144:000 | DONE lbl | em 16 16 | 0071b0 |             | hi-end                               
6145:000 | DONE wsp | em 16 16 |        |             |
6146:000 | DONE wsp | em 16 16 |        |             |
6147:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6148:000 | DONE cmt | em 16 16 |        |             | ; BOTTOM INCLUDES
6149:000 | DONE wsp | em 16 16 |        |             |
6150:000 | DONE cmt | em 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
6150:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
6150:002 | DONE cmt | em 16 16 |        |             | ; First version: 01. Apr 2016
6150:003 | DONE cmt | em 16 16 |        |             | ; This version:  11. Mar 2017
6150:004 | DONE wsp | em 16 16 |        |             |
6150:005 | DONE cmt | em 16 16 |        |             | ; This file is included by liaraforth.tasm
6150:006 | DONE wsp | em 16 16 |        |             |
6150:007 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6150:008 | DONE cmt | em 16 16 |        |             | ; GENERAL
6150:009 | DONE wsp | em 16 16 |        |             |
6150:010 | DONE cmt | em 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
6150:011 | DONE wsp | em 16 16 |        |             |
6150:012 | DONE lbl | em 16 16 | 0071b0 |             | s_ok                                 
6150:013 | DONE dir | em 16 16 | 0071b0 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
6150:013 | DONE dir | em 16 16 |        |             |                 20 6f 6b 00              --    o k .
6150:014 | DONE lbl | em 16 16 | 0071b4 |             | s_compiled                           
6150:015 | DONE dir | em 16 16 | 0071b4 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
6150:015 | DONE dir | em 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
6150:015 | DONE dir | em 16 16 |        |             |                 64 00                    --  d .
6150:016 | DONE wsp | em 16 16 |        |             |
6150:017 | DONE wsp | em 16 16 |        |             |
6150:018 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6150:019 | DONE cmt | em 16 16 |        |             | ; ERROR STRINGS
6150:020 | DONE wsp | em 16 16 |        |             |
6150:021 | DONE cmt | em 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
6150:022 | DONE wsp | em 16 16 |        |             |
6150:023 | DONE lbl | em 16 16 | 0071be |             | es_allot                             
6150:024 | DONE dir | em 16 16 | 0071be | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
6150:024 | DONE dir | em 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
6150:024 | DONE dir | em 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
6150:024 | DONE dir | em 16 16 |        |             |                 6e 64 73 00              --  n d s .
6150:025 | DONE lbl | em 16 16 | 0071d2 |             | es_componly                          
6150:026 | DONE dir | em 16 16 | 0071d2 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
6150:026 | DONE dir | em 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
6150:026 | DONE dir | em 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
6150:026 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
6150:026 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
6150:026 | DONE dir | em 16 16 |        |             |                 00                       --  .
6150:027 | DONE lbl | em 16 16 | 0071f3 |             | es_defer                             
6150:028 | DONE dir | em 16 16 | 0071f3 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
6150:028 | DONE dir | em 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
6150:028 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
6150:028 | DONE dir | em 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
6150:028 | DONE dir | em 16 16 |        |             |                 20 79 65 74 00           --    y e t .
6150:029 | DONE lbl | em 16 16 | 007210 |             | es_divzero                           
6150:030 | DONE dir | em 16 16 | 007210 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
6150:030 | DONE dir | em 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
6150:030 | DONE dir | em 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
6150:030 | DONE dir | em 16 16 |        |             |                 00                       --  .
6150:031 | DONE lbl | em 16 16 | 007221 |             | es_error                             
6150:032 | DONE dir | em 16 16 | 007221 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
6150:032 | DONE dir | em 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
6150:032 | DONE dir | em 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
6150:033 | DONE lbl | em 16 16 | 00722d |             | es_intonly                           
6150:034 | DONE dir | em 16 16 | 00722d | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
6150:034 | DONE dir | em 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
6150:034 | DONE dir | em 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
6150:034 | DONE dir | em 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
6150:035 | DONE lbl | em 16 16 | 007243 |             | es_noname                            
6150:036 | DONE dir | em 16 16 | 007243 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
6150:036 | DONE dir | em 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
6150:036 | DONE dir | em 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
6150:036 | DONE dir | em 16 16 |        |             |                                          -- 
6150:037 | DONE lbl | em 16 16 | 007253 |             | es_radix                             
6150:038 | DONE dir | em 16 16 | 007253 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
6150:038 | DONE dir | em 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
6150:038 | DONE dir | em 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
6150:038 | DONE dir | em 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
6150:039 | DONE lbl | em 16 16 | 00726a |             | es_refill1                           
6150:040 | DONE dir | em 16 16 | 00726a | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
6150:040 | DONE dir | em 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
6150:040 | DONE dir | em 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
6150:040 | DONE dir | em 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
6150:040 | DONE dir | em 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
6150:040 | DONE dir | em 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
6150:040 | DONE dir | em 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
6150:041 | DONE lbl | em 16 16 | 007298 |             | es_refill2                           
6150:042 | DONE dir | em 16 16 | 007298 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
6150:042 | DONE dir | em 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
6150:042 | DONE dir | em 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
6150:042 | DONE dir | em 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
6150:042 | DONE dir | em 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
6150:042 | DONE dir | em 16 16 |        |             |                                          -- 
6150:043 | DONE lbl | em 16 16 | 0072b8 |             | es_state                             
6150:044 | DONE dir | em 16 16 | 0072b8 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
6150:044 | DONE dir | em 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
6150:044 | DONE dir | em 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
6150:044 | DONE dir | em 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
6150:044 | DONE dir | em 16 16 |        |             |                                          -- 
6150:045 | DONE lbl | em 16 16 | 0072d0 |             | es_underflow                         
6150:046 | DONE dir | em 16 16 | 0072d0 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
6150:046 | DONE dir | em 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
6150:046 | DONE dir | em 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
6150:046 | DONE dir | em 16 16 |        |             |                                          -- 
6150:047 | DONE lbl | em 16 16 | 0072e0 |             | es_syntax                            
6150:048 | DONE dir | em 16 16 | 0072e0 | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
6150:048 | DONE dir | em 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
6150:048 | DONE dir | em 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
6150:049 | DONE wsp | em 16 16 |        |             |
6150:050 | DONE wsp | em 16 16 |        |             |
6150:051 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6150:052 | DONE cmt | em 16 16 |        |             | ; ANSI VT-100 SEQUENCES
6150:053 | DONE wsp | em 16 16 |        |             |
6150:054 | DONE lbl | em 16 16 | 0072ef |             | vt100_page                           
6150:055 | DONE dir | em 16 16 | 0072ef | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
6150:055 | DONE dir | em 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
6150:056 | DONE lbl | em 16 16 | 0072f4 |             | vt100_home                           
6150:057 | DONE dir | em 16 16 | 0072f4 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
6150:057 | DONE dir | em 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
6150:058 | DONE wsp | em 16 16 |        |             |
6150:059 | DONE wsp | em 16 16 |        |             |
6150:060 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6150:061 | DONE cmt | em 16 16 |        |             | ; TESTING STRINGS
6150:062 | DONE wsp | em 16 16 |        |             |
6150:063 | DONE cmt | em 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
6150:064 | DONE cmt | em 16 16 |        |             | ; developed. All start with "tests_"
6150:065 | DONE wsp | em 16 16 |        |             |
6150:066 | DONE lbl | em 16 16 | 0072f8 |             | tests_prev_cmd                       
6150:067 | DONE dir | em 16 16 | 0072f8 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
6150:067 | DONE dir | em 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
6150:067 | DONE dir | em 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
6150:067 | DONE dir | em 16 16 |        |             |                 64 29 00                 --  d ) .
6150:068 | DONE lbl | em 16 16 | 00730b |             | tests_next_cmd                       
6150:069 | DONE dir | em 16 16 | 00730b | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
6150:069 | DONE dir | em 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
6150:069 | DONE dir | em 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
6150:070 | DONE wsp | em 16 16 |        |             |
6150:071 | DONE wsp | em 16 16 |        |             |
6150:072 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6150:073 | DONE cmt | em 16 16 |        |             | ; ALPHABET STRINGS
6150:074 | DONE wsp | em 16 16 |        |             |
6150:075 | DONE cmt | em 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
6150:076 | DONE cmt | em 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
6150:077 | DONE cmt | em 16 16 |        |             | ; TODO see if we need lower
6150:078 | DONE wsp | em 16 16 |        |             |
6150:079 | DONE lbl | em 16 16 | 00731a |             | abc_str_lower                        
6150:080 | DONE dir | em 16 16 | 00731a | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
6150:080 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
6150:080 | DONE dir | em 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
6150:080 | DONE dir | em 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
6150:080 | DONE dir | em 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
6150:080 | DONE dir | em 16 16 |        |             |                 77 79 7a                 --  w y z
6150:081 | DONE lbl | em 16 16 | 00733d |             | abc_str_upper                        
6150:082 | DONE dir | em 16 16 | 00733d | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, (...) 
6150:082 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
6150:082 | DONE dir | em 16 16 |        |             |                 38 39 41 42 43 44 45 46  --  8 9 A B C D E F
6150:082 | DONE dir | em 16 16 |        |             |                 47 48 49 4a 4b 4c 4d 4e  --  G H I J K L M N
6150:082 | DONE dir | em 16 16 |        |             |                 4f 50 51 52 53 54 55 56  --  O P Q R S T U V
6150:082 | DONE dir | em 16 16 |        |             |                 57 59 5a                 --  W Y Z
6150:083 | DONE wsp | em 16 16 |        |             |
6151:000 | DONE wsp | em 16 16 |        |             |
6152:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6153:000 | DONE cmt | em 16 16 |        |             | ; END
6154:000 | DONE dir | em 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abc_str_lower               : 00731a
- abc_str_upper               : 00733d
- abortq_done                 : 0054a8
- abortq_rt                   : 00549e
- accept_bs                   : 005527
- accept_eol                  : 005520
- accept_loop                 : 0054cd
- accept_nonzero              : 0054c2
- adjust_z                    : 005736
- allot_done                  : 005585
- allot_error                 : 005574
- allot_minus                 : 00557a
- allot_real_gone             : 005587
- an                          : 000002
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 000016
- branch_rt                   : 0055e9
- brg_value                   : 00000b
- bsize                       : 000080
- buffer0                     : 000200
- buffer1                     : 000280
- byte_to_ascii               : 006aa8
- char_got_char               : 005636
- cib                         : 000008
- ciblen                      : 00000a
- cmpl_body                   : 006a64
- cmpl_common                 : 006a57
- cmpl_jump                   : 006a54
- cmpl_subroutine             : 006a4f
- cmpl_word                   : 006a4a
- co                          : 000001
- code0                       : 005000
- compile_2r                  : 0056ee
- compile_as_code             : 0056ad
- compile_as_jump             : 005706
- compile_check               : 00569b
- compile_move                : 0056fa
- compile_not_nop             : 0056d0
- compile_r                   : 0056e8
- cp                          : 000000
- cp-end                      : 004fff
- cp0                         : 000300
- create_got_name             : 00576c
- defer_error                 : 0069d1
- do_common                   : 00588d
- do_compile                  : 0058b5
- do_do                       : 0058b2
- doconst                     : 0069ba
- dodefer                     : 0069c8
- dodoes                      : 0069d7
- does_rt                     : 0058cc
- dots_done                   : 00523e
- dots_loop                   : 00522b
- dots_not_empty              : 005226
- dovar                       : 0069e4
- dp                          : 000002
- dpage                       : 000000
- dq_case_done                : 005809
- dq_checkbase                : 00580c
- dq_notdigit                 : 005813
- dq_success                  : 00581e
- dsp0                        : 0000ff
- dtrailing_done              : 005388
- dtrailing_loop              : 00537f
- emit_a                      : 0058f1
- equal_not                   : 005395
- erase_done                  : 00590c
- erase_loop                  : 005905
- error                       : 006a70
- es_allot                    : 0071be
- es_componly                 : 0071d2
- es_defer                    : 0071f3
- es_divzero                  : 007210
- es_error                    : 007221
- es_intonly                  : 00722d
- es_noname                   : 007243
- es_radix                    : 007253
- es_refill1                  : 00726a
- es_refill2                  : 007298
- es_state                    : 0072b8
- es_syntax                   : 0072e0
- es_underflow                : 0072d0
- execute_ip                  : 005946
- find-name_all_chars         : 0059b2
- find-name_char_nomatcnt_8   : 0059ae
- find-name_chars             : 0059a3
- find-name_done              : 0059d8
- find-name_failure_16        : 0059d5
- find-name_loop              : 00598e
- find-name_next_entry        : 005997
- find-name_success           : 0059cf
- find_found                  : 005969
- find_imm                    : 005982
- fmmod_1                     : 0059f9
- fmmod_1_1                   : 0059fd
- fmmod_2                     : 005a2a
- fmmod_2_1                   : 005a2e
- get_chr                     : 005045
- get_chr_wait                : 005049
- greater_nip                 : 005131
- greater_no_ov               : 00512e
- hashs_loop                  : 0052b3
- have_chr                    : 005057
- havekey                     : 000012
- hi-end                      : 0071b0
- hi-start                    : 006ac3
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- im                          : 000004
- in_found                    : 005a8a
- in_loop                     : 005a72
- in_notfound                 : 005a84
- input                       : 000010
- insrc                       : 000006
- interpret                   : 0069eb
- interpret_compile           : 006a35
- interpret_got_name_token    : 006a0f
- interpret_interpret         : 006a2f
- interpret_line_done         : 006a43
- interpret_loop              : 0069eb
- less_nip                    : 005107
- less_no_ov                  : 005104
- literal_rt                  : 005ae6
- lshift_done                 : 005b02
- lshift_loop                 : 005afc
- max_drop                    : 005b5f
- max_nip                     : 005b61
- max_no_ov                   : 005b5d
- min_drop                    : 005b72
- min_nip                     : 005b74
- min_no_ov                   : 005b70
- move_cmoveup                : 005b87
- mstar_abs_nos               : 005b13
- mstar_umstar                : 005b1d
- nc_limit                    : 000026
- nibble_to_ascii             : 006ab1
- nn                          : 000008
- not-equal_equal             : 005113
- nt_2drop                    : 006932
- nt_2dup                     : 006643
- nt_2over                    : 0068fd
- nt_2swap                    : 00690a
- nt_2variable                : 00624b
- nt_abort                    : 006343
- nt_abortq                   : 006335
- nt_abs                      : 00664f
- nt_accept                   : 006895
- nt_again                    : 0065b2
- nt_align                    : 0060d7
- nt_aligned                  : 0060c8
- nt_allot                    : 0065ee
- nt_and                      : 00673a
- nt_at-xy                    : 006233
- nt_backslash                : 0068ba
- nt_base                     : 006459
- nt_begin                    : 0065bf
- nt_bell                     : 0061cc
- nt_bl                       : 0063f4
- nt_bounds                   : 00696b
- nt_bracketchar              : 0064dc
- nt_brackettick              : 0064d1
- nt_branch                   : 0065a4
- nt_bye                      : 006099
- nt_c-comma                  : 00675d
- nt_c-fetch                  : 006767
- nt_c-store                  : 006771
- nt_cellplus                 : 0061e5
- nt_cells                    : 0064a0
- nt_char                     : 00670b
- nt_charplus                 : 0061f2
- nt_chars                    : 0061d8
- nt_cmove                    : 00631b
- nt_cmoveup                  : 00630d
- nt_cold                     : 0060a4
- nt_colon                    : 0065e5
- nt_comma                    : 00688c
- nt_compile-only             : 00650e
- nt_compilecomma             : 0065cc
- nt_constant                 : 0066a4
- nt_count                    : 006328
- nt_cr                       : 006392
- nt_create                   : 006622
- nt_dabs                     : 00625c
- nt_decimal                  : 0061ff
- nt_defer                    : 0065fb
- nt_depth                    : 006680
- nt_digitq                   : 00695d
- nt_dminus                   : 0062a3
- nt_dnegate                  : 006268
- nt_do                       : 006198
- nt_does                     : 006615
- nt_dot                      : 006445
- nt_dotquote                 : 0064ad
- nt_dots                     : 006419
- nt_dplus                    : 0062ad
- nt_drop                     : 0069ae
- nt_dtos                     : 006277
- nt_dtrailing                : 006575
- nt_dup                      : 0069a3
- nt_emit                     : 006439
- nt_equal                    : 0067f0
- nt_erase                    : 0063a8
- nt_evaluate                 : 006490
- nt_execute                  : 006917
- nt_exit                     : 006147
- nt_false                    : 0067f9
- nt_fetch                    : 006985
- nt_fill                     : 00639c
- nt_find                     : 0060bc
- nt_find-name                : 00684a
- nt_fmmod                    : 0062b7
- nt_fromr                    : 006949
- nt_greater                  : 0067ca
- nt_hash                     : 0063e1
- nt_hashs                    : 0063cb
- nt_here                     : 006926
- nt_hex                      : 00620e
- nt_hold                     : 0063bf
- nt_i                        : 00616b
- nt_immediate                : 006522
- nt_input                    : 006475
- nt_int-name                 : 006372
- nt_invert                   : 0066fd
- nt_j                        : 006162
- nt_key                      : 0068af
- nt_keyq                     : 0068a3
- nt_latestnt                 : 006555
- nt_latestxt                 : 006565
- nt_leave                    : 00613a
- nt_leftbracket              : 00654c
- nt_less                     : 0067d3
- nt_lessnumber               : 0063ea
- nt_literal                  : 0064ea
- nt_loop                     : 00612e
- nt_lshift                   : 006745
- nt_marker                   : 0061a2
- nt_max                      : 0066e4
- nt_min                      : 0066d9
- nt_minus                    : 006785
- nt_move                     : 0066cd
- nt_mrot                     : 0068e6
- nt_mstar                    : 0062f8
- nt_name-int                 : 006382
- nt_name-string              : 006630
- nt_nc-limit                 : 006465
- nt_negate                   : 0066ef
- nt_never-compile            : 0064f9
- nt_nip                      : 0068db
- nt_not-equal                : 0067e6
- nt_number                   : 006821
- nt_numbermore               : 0063b5
- nt_one                      : 006838
- nt_one-minus                : 006797
- nt_one-plus                 : 0067a1
- nt_or                       : 006730
- nt_output                   : 006482
- nt_over                     : 006979
- nt_pad                      : 00644e
- nt_page                     : 006227
- nt_parse                    : 006350
- nt_parse-name               : 006869
- nt_pdo                      : 006181
- nt_pick                     : 0061c0
- nt_ploop                    : 006121
- nt_plus                     : 00678e
- nt_plusstore                : 006753
- nt_postpone                 : 006533
- nt_pploop                   : 006112
- nt_pqdo                     : 006174
- nt_qdo                      : 00618d
- nt_qdup                     : 0068c3
- nt_question                 : 006369
- nt_quit                     : 00635d
- nt_recurse                  : 006153
- nt_refill                   : 00685b
- nt_rfetch                   : 00693f
- nt_rightbracket             : 006543
- nt_rot                      : 0068f2
- nt_rshift                   : 006717
- nt_semicolon                : 0065dc
- nt_sign                     : 0063d5
- nt_slashstring              : 006586
- nt_sliteral                 : 0064c1
- nt_smrem                    : 0062c5
- nt_source                   : 006672
- nt_source-id                : 00687b
- nt_space                    : 00640c
- nt_spaces                   : 0063fe
- nt_squote                   : 0064b7
- nt_star                     : 0062ef
- nt_state                    : 00665a
- nt_stod                     : 006282
- nt_store                    : 00698e
- nt_swap                     : 006997
- nt_tick                     : 0066c4
- nt_to                       : 00668d
- nt_to-in                    : 006667
- nt_tobody                   : 006608
- nt_tonumber                 : 006812
- nt_tor                      : 006953
- nt_true                     : 006806
- nt_tuck                     : 0068cf
- nt_two                      : 00682f
- nt_two-star                 : 00677b
- nt_twofromr                 : 00628d
- nt_tworfetch                : 006240
- nt_twotor                   : 006298
- nt_type                     : 006423
- nt_udmod                    : 0062d3
- nt_udot                     : 00642f
- nt_ummod                    : 0062e1
- nt_umstar                   : 006302
- nt_unloop                   : 006104
- nt_unused                   : 006219
- nt_value                    : 006697
- nt_variable                 : 0066b4
- nt_word                     : 0060b0
- nt_words                    : 0060f7
- nt_wordsize                 : 0061b0
- nt_wordsnsizes              : 0060e4
- nt_xor                      : 006725
- nt_zbranch                  : 006595
- nt_zero                     : 006841
- nt_zero-equal               : 0067dc
- nt_zero-less                : 0067c0
- nt_zero-more                : 0067b6
- nt_zero-notequal            : 0067ab
- number_dot                  : 005bd8
- number_loop                 : 005bff
- number_main                 : 005bf1
- number_ok                   : 005c0b
- number_single               : 005c33
- output                      : 00000e
- padoffset                   : 0000ff
- parse-name_empty_line       : 005c85
- parse-name_found            : 005c9b
- parse-name_loop             : 005c78
- parse_found_delimiter       : 005cc7
- parse_loop                  : 005cba
- parse_reached_eol           : 005ccb
- pp_got_nt                   : 005d0b
- pp_got_word                 : 005d03
- pp_not_immediate            : 005d1c
- pploop_jmp                  : 0052e9
- pqdo_done                   : 0052fe
- print_string                : 006a76
- print_string_done           : 006a85
- print_u                     : 006a8e
- put_chr                     : 005034
- put_chr_wait                : 005039
- quit_compiled               : 0050ed
- quit_get_line               : 0050c2
- quit_ok                     : 0050e4
- quit_print                  : 0050f0
- quit_refill_successful      : 0050d0
- ram-end                     : 007fff
- ram-start                   : 000000
- refill_source_is_not_string : 005d7a
- refill_src_not_kbd          : 005d70
- reset_hardware              : 005000
- rshift_done                 : 005d99
- rshift_loop                 : 005d93
- s_compiled                  : 0071b4
- s_ok                        : 0071b0
- scratch                     : 000028
- sign_plus                   : 005def
- sl_loop                     : 005e14
- sliteral_rt                 : 005e3f
- smrem_1                     : 005e8f
- smrem_1_1                   : 005e93
- smrem_2                     : 005eaa
- smrem_2_1                   : 005eae
- spaces_done                 : 005ed5
- spaces_loop                 : 005eca
- squote_compile              : 005dd0
- stack                       : 000100
- stack0                      : 0001ff
- start                       : 005064
- state                       : 000014
- stod_pos                    : 005de0
- tests_next_cmd              : 00730b
- tests_prev_cmd              : 0072f8
- tick_have_nt                : 005490
- tick_have_word              : 005484
- tmp1                        : 00001c
- tmp2                        : 00001e
- tmp3                        : 000020
- tmpbranch                   : 00001a
- tmpdsp                      : 000022
- tmptos                      : 000024
- tobody_have_cfa             : 005155
- tobody_nojsr                : 005157
- tohold                      : 000018
- toin                        : 00000c
- tonumber_done               : 0051b0
- tonumber_loop               : 00516c
- tonumber_ok                 : 00517b
- type_done                   : 005f25
- type_loop                   : 005f19
- ummod_complete              : 005ff9
- ummod_notzero               : 005fba
- ummod_overflow              : 005ff0
- ummod_shift                 : 005fd2
- umstar_counter              : 005f89
- umstar_loop                 : 005f7b
- umstar_one_nos              : 005f9c
- umstar_one_tos              : 005f99
- umstar_two_common           : 005fa8
- umstar_two_nos              : 005fa7
- umstar_two_tos              : 005fa3
- umstar_zero                 : 005f92
- user0                       : 000000
- vt100_home                  : 0072f4
- vt100_page                  : 0072ef
- words_common                : 006044
- words_loop                  : 00604e
- words_nosizes               : 00606b
- workword                    : 000004
- xt_2drop                    : 005416
- xt_2dup                     : 00541d
- xt_2over                    : 005428
- xt_2swap                    : 005454
- xt_2variable                : 005465
- xt_abort                    : 0050af
- xt_abortq                   : 005494
- xt_abs                      : 0054b1
- xt_accept                   : 0054ba
- xt_again                    : 005549
- xt_align                    : 00555f
- xt_aligned                  : 005561
- xt_allot                    : 005563
- xt_and                      : 00558c
- xt_at-xy                    : 005593
- xt_backslash                : 00532c
- xt_base                     : 0055bb
- xt_begin                    : 0055ca
- xt_bell                     : 0055c3
- xt_bl                       : 0055d1
- xt_bounds                   : 0055d9
- xt_bracketchar              : 005325
- xt_brackettick              : 005315
- xt_branch                   : 0055e2
- xt_bye                      : 0055f6
- xt_c-comma                  : 0055fd
- xt_c-fetch                  : 00560b
- xt_c-store                  : 005617
- xt_cellplus                 : 005627
- xt_char                     : 00562a
- xt_chars                    : 005642
- xt_cmove                    : 005644
- xt_cmoveup                  : 005667
- xt_cold                     : 005061
- xt_colon                    : 00524e
- xt_comma                    : 005242
- xt_compile-only             : 005680
- xt_compilecomma             : 005689
- xt_constant                 : 00571d
- xt_count                    : 00574c
- xt_cr                       : 00575a
- xt_create                   : 005761
- xt_dabs                     : 005854
- xt_decimal                  : 00585b
- xt_defer                    : 0057d1
- xt_depth                    : 005861
- xt_digitq                   : 0057ec
- xt_dminus                   : 00583a
- xt_dnegate                  : 005870
- xt_do                       : 00588b
- xt_does                     : 0058bf
- xt_dot                      : 0051d7
- xt_dotquote                 : 0051f6
- xt_dots                     : 00520a
- xt_dplus                    : 005828
- xt_drop                     : 0058e2
- xt_dtos                     : 00584f
- xt_dtrailing                : 005375
- xt_dup                      : 0058e7
- xt_emit                     : 0058ec
- xt_equal                    : 00538c
- xt_erase                    : 0058f4
- xt_evaluate                 : 005917
- xt_execute                  : 005949
- xt_exit                     : 0058fb
- xt_fetch                    : 0052d7
- xt_fill                     : 0058fc
- xt_find                     : 005953
- xt_find-name                : 005984
- xt_fmmod                    : 0059db
- xt_fromr                    : 005d35
- xt_greater                  : 005120
- xt_hash                     : 005289
- xt_hashs                    : 0052b3
- xt_here                     : 005a93
- xt_hex                      : 005a9a
- xt_hold                     : 005aa0
- xt_i                        : 005a4d
- xt_immediate                : 005a58
- xt_input                    : 005a61
- xt_int-name                 : 005a69
- xt_invert                   : 005a8d
- xt_j                        : 005aae
- xt_key                      : 005a2f
- xt_keyq                     : 005a3f
- xt_latestnt                 : 005ab9
- xt_latestxt                 : 005ac1
- xt_leave                    : 005ad1
- xt_leftbracket              : 00531c
- xt_less                     : 0050f6
- xt_lessnumber               : 005116
- xt_literal                  : 005ad4
- xt_loop                     : 005339
- xt_lshift                   : 005af3
- xt_marker                   : 005b27
- xt_max                      : 005b51
- xt_min                      : 005b64
- xt_minus                    : 005361
- xt_move                     : 005b77
- xt_mrot                     : 00536c
- xt_mstar                    : 005b07
- xt_name-int                 : 005b8b
- xt_name-string              : 005b94
- xt_nc-limit                 : 005ba5
- xt_negate                   : 005bad
- xt_never-compile            : 005bb4
- xt_nip                      : 005bbd
- xt_not-equal                : 00510a
- xt_number                   : 005bc0
- xt_numbermore               : 0052a4
- xt_one                      : 0053ed
- xt_one-minus                : 0053f5
- xt_one-plus                 : 0053f7
- xt_or                       : 005c44
- xt_output                   : 005c4b
- xt_over                     : 005c53
- xt_pad                      : 005c5a
- xt_page                     : 005c66
- xt_parse                    : 005ca7
- xt_parse-name               : 005c73
- xt_pdo                      : 005302
- xt_pick                     : 005cda
- xt_ploop                    : 00533f
- xt_plus                     : 005331
- xt_plusstore                : 005ce8
- xt_postpone                 : 005cf8
- xt_pploop                   : 0052dc
- xt_pqdo                     : 0052eb
- xt_qdo                      : 005884
- xt_qdup                     : 0052c3
- xt_question                 : 0052bc
- xt_quit                     : 0050b7
- xt_recurse                  : 005d3d
- xt_refill                   : 005d57
- xt_rfetch                   : 005d2c
- xt_rightbracket             : 00531f
- xt_rot                      : 005d81
- xt_rshift                   : 005d8a
- xt_semicolon                : 005270
- xt_sign                     : 005de4
- xt_slashstring              : 0051c5
- xt_sliteral                 : 005df4
- xt_smrem                    : 005e55
- xt_source                   : 005eaf
- xt_source-id                : 005ebc
- xt_space                    : 005ec3
- xt_spaces                   : 005eca
- xt_squote                   : 005d9e
- xt_star                     : 005eda
- xt_state                    : 005ee2
- xt_stod                     : 005dd4
- xt_store                    : 0052cb
- xt_swap                     : 005eea
- xt_tick                     : 005478
- xt_to                       : 005ef0
- xt_to-in                    : 005158
- xt_tobody                   : 005134
- xt_tonumber                 : 005160
- xt_tor                      : 0051bd
- xt_true                     : 005efa
- xt_tuck                     : 005f02
- xt_two                      : 0053f9
- xt_two-star                 : 005401
- xt_twofromr                 : 005435
- xt_tworfetch                : 005446
- xt_twotor                   : 005405
- xt_type                     : 005f0b
- xt_udmod                    : 005f36
- xt_udot                     : 005f2c
- xt_ummod                    : 005fb1
- xt_umstar                   : 005f52
- xt_unloop                   : 006002
- xt_unused                   : 006006
- xt_variable                 : 006012
- xt_word                     : 006022
- xt_words                    : 006042
- xt_wordsize                 : 00607f
- xt_wordsnsizes              : 00603b
- xt_xor                      : 006092
- xt_zbranch                  : 0053cf
- xt_zero                     : 005398
- xt_zero-equal               : 0053a0
- xt_zero-less                : 0053ac
- xt_zero-more                : 0053c4
- xt_zero-notequal            : 0053b8
- z_2drop                     : 00541c
- z_2dup                      : 005427
- z_2over                     : 005434
- z_2swap                     : 005464
- z_2variable                 : 005477
- z_abort                     : 0050f6
- z_abortq                    : 0054b0
- z_abs                       : 0054b9
- z_accept                    : 005548
- z_again                     : 00555e
- z_align                     : 005560
- z_aligned                   : 005562
- z_allot                     : 00558b
- z_and                       : 005592
- z_at-xy                     : 0055ba
- z_backslash                 : 005330
- z_base                      : 0055c2
- z_begin                     : 0055d0
- z_bell                      : 0055c9
- z_bl                        : 0055d8
- z_bounds                    : 0055e1
- z_bracketchar               : 00532b
- z_brackettick               : 00531b
- z_branch                    : 0055e8
- z_bye                       : 0055fd
- z_c-comma                   : 00560a
- z_c-fetch                   : 005616
- z_c-store                   : 005626
- z_cellplus                  : 005629
- z_char                      : 005641
- z_chars                     : 005643
- z_cmove                     : 005666
- z_cmoveup                   : 00567f
- z_cold                      : 0050f6
- z_colon                     : 00526f
- z_comma                     : 00524d
- z_compile-only              : 005688
- z_compilecomma              : 00571c
- z_constant                  : 00574b
- z_count                     : 005759
- z_cr                        : 005760
- z_create                    : 0057d0
- z_dabs                      : 00585a
- z_decimal                   : 005860
- z_defer                     : 0057eb
- z_depth                     : 00586f
- z_digitq                    : 005827
- z_dminus                    : 00584e
- z_dnegate                   : 005883
- z_do                        : 0058be
- z_does                      : 0058cb
- z_dot                       : 0051f5
- z_dotquote                  : 005209
- z_dots                      : 005241
- z_dplus                     : 005839
- z_drop                      : 0058e6
- z_dtos                      : 005853
- z_dtrailing                 : 00538b
- z_dup                       : 0058eb
- z_emit                      : 0058f4
- z_equal                     : 005397
- z_erase                     : 005916
- z_evaluate                  : 005945
- z_execute                   : 005953
- z_exit                      : 0058fc
- z_fetch                     : 0052db
- z_fill                      : 005916
- z_find                      : 005983
- z_find-name                 : 0059da
- z_fmmod                     : 005a2e
- z_fromr                     : 005d3c
- z_greater                   : 005133
- z_hash                      : 0052a3
- z_hashs                     : 0052bb
- z_here                      : 005a99
- z_hex                       : 005a9f
- z_hold                      : 005aad
- z_i                         : 005a57
- z_immediate                 : 005a60
- z_input                     : 005a68
- z_int-name                  : 005a8c
- z_invert                    : 005a92
- z_j                         : 005ab8
- z_key                       : 005a3e
- z_keyq                      : 005a4c
- z_latestnt                  : 005ac0
- z_latestxt                  : 005ad0
- z_leave                     : 005ad4
- z_leftbracket               : 00531e
- z_less                      : 005109
- z_lessnumber                : 00511f
- z_literal                   : 005ae5
- z_loop                      : 005360
- z_lshift                    : 005b06
- z_marker                    : 005b50
- z_max                       : 005b63
- z_min                       : 005b76
- z_minus                     : 00536b
- z_move                      : 005b8a
- z_mrot                      : 005374
- z_mstar                     : 005b26
- z_name-int                  : 005b93
- z_name-string               : 005ba4
- z_nc-limit                  : 005bac
- z_negate                    : 005bb3
- z_never-compile             : 005bbc
- z_nip                       : 005bbf
- z_not-equal                 : 005115
- z_number                    : 005c43
- z_numbermore                : 0052b2
- z_one                       : 0053f4
- z_one-minus                 : 0053f6
- z_one-plus                  : 0053f8
- z_or                        : 005c4a
- z_output                    : 005c52
- z_over                      : 005c59
- z_pad                       : 005c65
- z_page                      : 005c72
- z_parse                     : 005cd9
- z_parse-name                : 005cd9
- z_pdo                       : 005314
- z_pick                      : 005ce7
- z_ploop                     : 005360
- z_plus                      : 005338
- z_plusstore                 : 005cf7
- z_postpone                  : 005d2b
- z_pploop                    : 0052ea
- z_pqdo                      : 005314
- z_qdo                       : 0058be
- z_qdup                      : 0052ca
- z_question                  : 0052c2
- z_quit                      : 0050f6
- z_recurse                   : 005d56
- z_refill                    : 005d80
- z_rfetch                    : 005d34
- z_rightbracket              : 005324
- z_rot                       : 005d89
- z_rshift                    : 005d9d
- z_semicolon                 : 005288
- z_sign                      : 005df3
- z_slashstring               : 0051d6
- z_sliteral                  : 005e3e
- z_smrem                     : 005eae
- z_source                    : 005ebb
- z_source-id                 : 005ec2
- z_space                     : 005ec9
- z_spaces                    : 005ed9
- z_squote                    : 005dd3
- z_star                      : 005ee1
- z_state                     : 005ee9
- z_stod                      : 005de3
- z_store                     : 0052d6
- z_swap                      : 005eef
- z_tick                      : 005493
- z_to                        : 005ef9
- z_to-in                     : 00515f
- z_tobody                    : 005157
- z_tonumber                  : 0051bc
- z_tor                       : 0051c4
- z_true                      : 005f01
- z_tuck                      : 005f0a
- z_two                       : 005400
- z_two-star                  : 005404
- z_twofromr                  : 005445
- z_tworfetch                 : 005453
- z_twotor                    : 005415
- z_type                      : 005f2b
- z_udmod                     : 005f51
- z_udot                      : 005f35
- z_ummod                     : 006001
- z_umstar                    : 005fb0
- z_unloop                    : 006005
- z_unused                    : 006011
- z_variable                  : 006021
- z_word                      : 00603a
- z_words                     : 00607e
- z_wordsize                  : 006091
- z_wordsnsizes               : 00607e
- z_xor                       : 006098
- z_zbranch                   : 0053d5
- z_zero                      : 00539f
- z_zero-equal                : 0053ab
- z_zero-less                 : 0053b7
- z_zero-more                 : 0053ce
- z_zero-notequal             : 0053c3
- zb_done                     : 0053e7
- zb_zero                     : 0053de
- zbranch_rt                  : 0053d6
- ze_not_zero                 : 0053a8
- zero-less-is-less           : 0053b4
- zero-more_done              : 0053cd
- zero-more_true              : 0053cc
- zne_is_zero                 : 0053c0
