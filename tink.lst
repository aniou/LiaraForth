A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Wed Feb 22 01:24:09 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.15262 seconds
Code origin: 006000
Bytes of machine code: 6382

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 21. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 19. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: -1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE dir | em  8  8 |        |             |         .equ scratch { 000200 + &32 } 8 byte scratchpad (see UM/MOD)
  16:074 | DONE dir | em  8  8 |        |             |         .equ tohold { 000200 + &40 } Pointer for formatted output
  16:075 | DONE wsp | em  8  8 |        |             |
  16:076 | DONE wsp | em  8  8 |        |             |
  16:077 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:078 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:079 | DONE wsp | em  8  8 |        |             |
  16:080 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:089 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:090 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:091 | DONE wsp | em  8  8 |        |             |
  16:092 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:093 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:094 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:095 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  16:096 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 ea 65    |                 jsr 0065ea           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  57:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  58:000 | DONE ins | na 16 16 | 00606a | a9 63 71    |                 lda.# 007163         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  70:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  71:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  72:000 | DONE wsp | na 16 16 |        |             |
  73:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  74:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  75:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  78:000 | DONE ins | na 16 16 | 006085 | 20 4c 68    |                 jsr 00684c           
  79:000 | DONE wsp | na 16 16 |        |             |
  80:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  81:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  82:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  83:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  84:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608c | a9 46 72    |                 lda.# 007246         
  88:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  89:000 | DONE ins | na 16 16 | 006091 | a0 01 05    |                 ldy.# 000501         length goes in TOS
  90:000 | DONE wsp | na 16 16 |        |             |
  91:000 | DONE ins | na 16 16 | 006094 | 20 67 66    |                 jsr 006667           
  92:000 | DONE wsp | na 16 16 |        |             |
  93:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  96:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  97:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  98:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  99:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 100:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 101:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 102:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 102:001 | DONE ctl | na 16 16 |        |             |         .!a16
 103:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 104:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 105:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 106:000 | DONE wsp | na 16 16 |        |             |
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 109:000 | DONE wsp | na 16 16 |        |             |
 110:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 111:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 112:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 113:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 114:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 115:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 116:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 117:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 118:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 119:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 120:000 | DONE wsp | na 16 16 |        |             |
 121:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 122:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 123:000 | DONE ins | na 16 16 | 0060a3 | 9c 96 66    |                 stz 006696           
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 126:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 129:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 130:000 | DONE wsp | na 16 16 |        |             |
 131:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 132:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 133:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 134:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 137:000 | DONE ins | na 16 16 | 0060ac | 20 14 69    |                 jsr 006914           ( -- f )
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 140:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 143:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 145:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 146:000 | DONE ins | na 16 16 | 0060b2 | a9 1b 78    |                 lda.# 00781b         
 147:000 | DONE ins | na 16 16 | 0060b5 | 4c 0c 72    |                 jmp 00720c           
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 151:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 152:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 153:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 154:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 155:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 156:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 157:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 160:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 163:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 164:000 | DONE ins | na 16 16 | 0060be | 20 91 71    |                 jsr 007191           
 165:000 | DONE wsp | na 16 16 |        |             |
 166:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 167:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 168:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 169:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 170:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE ins | na 16 16 | 0060c6 | a9 81 78    |                 lda.# 007881         
 173:000 | DONE ins | na 16 16 | 0060c9 | 4c 0c 72    |                 jmp 00720c           
 174:000 | DONE wsp | na 16 16 |        |             |
 175:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 176:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 177:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 178:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 179:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE ins | na 16 16 | 0060d0 | a9 47 77    |                 lda.# 007747         
 182:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 183:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 184:000 | DONE ins | na 16 16 | 0060d5 | a9 4b 77    |                 lda.# 00774b         fall through to quit_print
 185:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 186:000 | DONE ins | na 16 16 | 0060d8 | 20 12 72    |                 jsr 007212           
 187:000 | DONE wsp | na 16 16 |        |             |
 188:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 189:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 193:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 194:000 | DONE wsp | na 16 16 |        |             |
 195:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 196:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 197:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 198:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 199:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 200:000 | DONE lbl | na 16 16 | 0060df |             | xt_less                              
 201:000 | DONE ins | na 16 16 | 0060df | 98          |                 tya                  
 202:000 | DONE ins | na 16 16 | 0060e0 | a0 00 00    |                 ldy.# 0000           default is false
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | 38          |                 sec                  
 205:000 | DONE ins | na 16 16 | 0060e4 | f5 00       |                 sbc.dx 00            
 206:000 | DONE ins | na 16 16 | 0060e6 | f0 08       |                 beq 0060f0           the same is not greater
 207:000 | DONE ins | na 16 16 | 0060e8 | 50 03       |                 bvc 0060ed           no overflow, skip ahead
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 210:000 | DONE ins | na 16 16 | 0060ea | 49 00 80    |                 eor.# 8000           compliment negative flag
 211:000 | DONE wsp | na 16 16 |        |             |
 212:000 | DONE lbl | na 16 16 | 0060ed |             | xt_less_no_ov                        
 213:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 214:000 | DONE ins | na 16 16 | 0060ed | 30 01       |                 bmi 0060f0           
 215:000 | DONE ins | na 16 16 | 0060ef | 88          |                 dey                  
 216:000 | DONE lbl | na 16 16 | 0060f0 |             | xt_less_nip                          
 217:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 218:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 219:000 | DONE wsp | na 16 16 |        |             |
 220:000 | DONE lbl | na 16 16 | 0060f2 |             | z_less                               
 220:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 224:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 225:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 226:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 227:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_not-equal                         
 228:000 | DONE ins | na 16 16 | 0060f3 | 98          |                 tya                  
 229:000 | DONE ins | na 16 16 | 0060f4 | a0 00 00    |                 ldy.# 0000           default value is false
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE ins | na 16 16 | 0060f7 | d5 00       |                 cmp.dx 00            
 232:000 | DONE ins | na 16 16 | 0060f9 | f0 01       |                 beq 0060fc           
 233:000 | DONE ins | na 16 16 | 0060fb | 88          |                 dey                  wraps to 0FFFF (true)
 234:000 | DONE wsp | na 16 16 |        |             |
 235:000 | DONE lbl | na 16 16 | 0060fc |             | not-equal_equal                      ; yes, this is a silly name
 236:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 237:000 | DONE ins | na 16 16 | 0060fd | e8          |                 inx                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 0060fe |             | z_not-equal                          
 239:001 | DONE ins | na 16 16 | 0060fe | 60          |                 rts                  
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 243:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 244:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 245:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 246:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 247:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 248:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 249:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 250:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 251:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 252:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 253:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 254:000 | DONE lbl | na 16 16 | 0060ff |             | xt_lessnumber                        
 255:000 | DONE ins | na 16 16 | 0060ff | 20 40 68    |                 jsr 006840           
 256:000 | DONE ins | na 16 16 | 006102 | 84 28       |                 sty.d 000228         
 257:000 | DONE ins | na 16 16 | 006104 | b4 00       |                 ldy.dx 00            
 258:000 | DONE ins | na 16 16 | 006106 | e8          |                 inx                  
 259:000 | DONE ins | na 16 16 | 006107 | e8          |                 inx                  
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE lbl | na 16 16 | 006108 |             | z_lessnumber                         
 261:001 | DONE ins | na 16 16 | 006108 | 60          |                 rts                  
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE wsp | na 16 16 |        |             |
 264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 265:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 266:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 267:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 268:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 269:000 | DONE lbl | na 16 16 | 006109 |             | xt_greater                           
 270:000 | DONE ins | na 16 16 | 006109 | 98          |                 tya                  
 271:000 | DONE ins | na 16 16 | 00610a | a0 00 00    |                 ldy.# 0000           default is false
 272:000 | DONE wsp | na 16 16 |        |             |
 273:000 | DONE ins | na 16 16 | 00610d | 38          |                 sec                  
 274:000 | DONE ins | na 16 16 | 00610e | f5 00       |                 sbc.dx 00            
 275:000 | DONE ins | na 16 16 | 006110 | f0 08       |                 beq 00611a           the same is not greater
 276:000 | DONE ins | na 16 16 | 006112 | 50 03       |                 bvc 006117           no overflow, skip ahead
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 279:000 | DONE ins | na 16 16 | 006114 | 49 00 80    |                 eor.# 8000           compliment negative flag
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE lbl | na 16 16 | 006117 |             | xt_greater_no_ov                     
 282:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 283:000 | DONE ins | na 16 16 | 006117 | 10 01       |                 bpl 00611a           
 284:000 | DONE ins | na 16 16 | 006119 | 88          |                 dey                  
 285:000 | DONE lbl | na 16 16 | 00611a |             | xt_greater_nip                       
 286:000 | DONE ins | na 16 16 | 00611a | e8          |                 inx                  
 287:000 | DONE ins | na 16 16 | 00611b | e8          |                 inx                  
 288:000 | DONE wsp | na 16 16 |        |             |
 289:000 | DONE lbl | na 16 16 | 00611c |             | z_greater                            
 289:001 | DONE ins | na 16 16 | 00611c | 60          |                 rts                  
 290:000 | DONE wsp | na 16 16 |        |             |
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 293:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 294:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 295:000 | DONE lbl | na 16 16 | 00611d |             | xt_to-in                             
 296:000 | DONE ins | na 16 16 | 00611d | ca          |                 dex                  
 297:000 | DONE ins | na 16 16 | 00611e | ca          |                 dex                  
 298:000 | DONE ins | na 16 16 | 00611f | 94 00       |                 sty.dx 00            
 299:000 | DONE wsp | na 16 16 |        |             |
 300:000 | DONE ins | na 16 16 | 006121 | a0 12 02    |                 ldy.# 000212         >IN
 301:000 | DONE lbl | na 16 16 | 006124 |             | z_to-in                              
 301:001 | DONE ins | na 16 16 | 006124 | 60          |                 rts                  
 302:000 | DONE wsp | na 16 16 |        |             |
 303:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 304:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 305:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 306:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 307:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the origional
 308:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 309:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 310:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 311:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 312:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 313:000 | DONE lbl | na 16 16 | 006125 |             | xt_gtnumber                          
 314:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 315:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 316:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 317:000 | DONE cmt | na 16 16 |        |             |                 ;
 318:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 319:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 320:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 321:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 322:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 323:000 | DONE wsp | na 16 16 |        |             |
 324:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 325:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via CHAR>NUMBER and storing it in S+4 for
 326:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 327:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 328:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 329:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 330:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 331:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 332:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 333:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 334:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 335:000 | DONE wsp | na 16 16 |        |             |
 336:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 337:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 338:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 339:000 | DONE ins | na 16 16 | 006125 | b5 04       |                 lda.dx 04            ud-lo
 340:000 | DONE ins | na 16 16 | 006127 | 85 20       |                 sta.d 000220         
 341:000 | DONE ins | na 16 16 | 006129 | b5 02       |                 lda.dx 02            ud-hi
 342:000 | DONE ins | na 16 16 | 00612b | 85 22       |                 sta.d 000222         
 343:000 | DONE wsp | na 16 16 |        |             |
 344:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 345:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 346:000 | DONE ins | na 16 16 | 00612d | ca          |                 dex                  
 347:000 | DONE ins | na 16 16 | 00612e | ca          |                 dex                  
 348:000 | DONE ins | na 16 16 | 00612f | 94 00       |                 sty.dx 00            
 349:000 | DONE wsp | na 16 16 |        |             |
 350:000 | DONE lbl | na 16 16 | 006131 |             | gtnumber_loop                        
 351:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 352:000 | DONE ins | na 16 16 | 006131 | a1 02       |                 lda.dxi 02           
 353:000 | DONE ins | na 16 16 | 006133 | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 354:000 | DONE wsp | na 16 16 |        |             |
 355:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. CHAR>NUMBER takes care of the correct
 356:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 357:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 358:000 | DONE ins | na 16 16 | 006134 | 20 d1 64    |                 jsr 0064d1           ( char -- n -1 | char 0 )
 359:000 | DONE wsp | na 16 16 |        |             |
 360:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 361:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 362:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 363:000 | DONE ins | na 16 16 | 006137 | 98          |                 tya                  
 364:000 | DONE ins | na 16 16 | 006138 | d0 06       |                 bne 006140           
 365:000 | DONE wsp | na 16 16 |        |             |
 366:000 | DONE ins | na 16 16 | 00613a | b4 00       |                 ldy.dx 00            
 367:000 | DONE ins | na 16 16 | 00613c | e8          |                 inx                  
 368:000 | DONE ins | na 16 16 | 00613d | e8          |                 inx                  
 369:000 | DONE ins | na 16 16 | 00613e | 80 35       |                 bra 006175           
 370:000 | DONE wsp | na 16 16 |        |             |
 371:000 | DONE lbl | na 16 16 | 006140 |             | gtnumber_ok                          
 372:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 373:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 374:000 | DONE wsp | na 16 16 |        |             |
 375:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 376:000 | DONE ins | na 16 16 | 006140 | b5 00       |                 lda.dx 00            
 377:000 | DONE ins | na 16 16 | 006142 | 85 24       |                 sta.d 000224         
 378:000 | DONE wsp | na 16 16 |        |             |
 379:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 380:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 381:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 382:000 | DONE ins | na 16 16 | 006144 | a5 22       |                 lda.d 000222         
 383:000 | DONE ins | na 16 16 | 006146 | 95 00       |                 sta.dx 00            
 384:000 | DONE ins | na 16 16 | 006148 | a4 1c       |                 ldy.d 00021c         ( ud-lo ud-hi addr u ud-hi base )
 385:000 | DONE wsp | na 16 16 |        |             |
 386:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 387:000 | DONE ins | na 16 16 | 00614a | 20 6c 6a    |                 jsr 006a6c           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 388:000 | DONE wsp | na 16 16 |        |             |
 389:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 390:000 | DONE ins | na 16 16 | 00614d | b5 00       |                 lda.dx 00            ud-hi-lo
 391:000 | DONE ins | na 16 16 | 00614f | 85 26       |                 sta.d 000226         
 392:000 | DONE wsp | na 16 16 |        |             |
 393:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 394:000 | DONE ins | na 16 16 | 006151 | a5 20       |                 lda.d 000220         
 395:000 | DONE ins | na 16 16 | 006153 | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 396:000 | DONE ins | na 16 16 | 006155 | a4 1c       |                 ldy.d 00021c         ( ud-lo ud-hi addr u ud-lo base )
 397:000 | DONE wsp | na 16 16 |        |             |
 398:000 | DONE ins | na 16 16 | 006157 | 20 6c 6a    |                 jsr 006a6c           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 399:000 | DONE ins | na 16 16 | 00615a | 84 22       |                 sty.d 000222         
 400:000 | DONE ins | na 16 16 | 00615c | b5 00       |                 lda.dx 00            
 401:000 | DONE ins | na 16 16 | 00615e | 85 20       |                 sta.d 000220         
 402:000 | DONE wsp | na 16 16 |        |             |
 403:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 404:000 | DONE ins | na 16 16 | 006160 | a5 20       |                 lda.d 000220         
 405:000 | DONE ins | na 16 16 | 006162 | 18          |                 clc                  
 406:000 | DONE ins | na 16 16 | 006163 | 65 24       |                 adc.d 000224         
 407:000 | DONE ins | na 16 16 | 006165 | 85 20       |                 sta.d 000220         this is the new ud-lo
 408:000 | DONE ins | na 16 16 | 006167 | a5 22       |                 lda.d 000222         
 409:000 | DONE ins | na 16 16 | 006169 | 65 26       |                 adc.d 000226         
 410:000 | DONE ins | na 16 16 | 00616b | 85 22       |                 sta.d 000222         this is the new ud-hi
 411:000 | DONE wsp | na 16 16 |        |             |
 412:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 413:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 414:000 | DONE ins | na 16 16 | 00616d | e8          |                 inx                  
 415:000 | DONE ins | na 16 16 | 00616e | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 416:000 | DONE wsp | na 16 16 |        |             |
 417:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 418:000 | DONE ins | na 16 16 | 00616f | f6 02       |                 inc.dx 02            increase address
 419:000 | DONE ins | na 16 16 | 006171 | d6 00       |                 dec.dx 00            decrease length
 420:000 | DONE wsp | na 16 16 |        |             |
 421:000 | DONE ins | na 16 16 | 006173 | d0 bc       |                 bne 006131           
 422:000 | DONE wsp | na 16 16 |        |             |
 423:000 | DONE lbl | na 16 16 | 006175 |             | gtnumber_done                        
 424:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 425:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 426:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 427:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 428:000 | DONE ins | na 16 16 | 006175 | b4 00       |                 ldy.dx 00            
 429:000 | DONE ins | na 16 16 | 006177 | e8          |                 inx                  
 430:000 | DONE ins | na 16 16 | 006178 | e8          |                 inx                  ( ud-lo ud-hi addr u )
 431:000 | DONE wsp | na 16 16 |        |             |
 432:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 433:000 | DONE ins | na 16 16 | 006179 | a5 20       |                 lda.d 000220         new ud-lo
 434:000 | DONE ins | na 16 16 | 00617b | 95 04       |                 sta.dx 04            
 435:000 | DONE ins | na 16 16 | 00617d | a5 22       |                 lda.d 000222         
 436:000 | DONE ins | na 16 16 | 00617f | 95 02       |                 sta.dx 02            new ud-hi
 437:000 | DONE wsp | na 16 16 |        |             |
 438:000 | DONE lbl | na 16 16 | 006181 |             | z_gtnumber                           
 438:001 | DONE ins | na 16 16 | 006181 | 60          |                 rts                  
 439:000 | DONE wsp | na 16 16 |        |             |
 440:000 | DONE wsp | na 16 16 |        |             |
 441:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 442:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 443:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 444:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 445:000 | DONE lbl | na 16 16 | 006182 |             | xt_tor                               
 446:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 447:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 448:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 449:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 450:000 | DONE ins | na 16 16 | 006182 | 68          |                 pla                  
 451:000 | DONE wsp | na 16 16 |        |             |
 452:000 | DONE ins | na 16 16 | 006183 | 5a          |                 phy                  the actual work
 453:000 | DONE wsp | na 16 16 |        |             |
 454:000 | DONE ins | na 16 16 | 006184 | b4 00       |                 ldy.dx 00            DROP
 455:000 | DONE ins | na 16 16 | 006186 | e8          |                 inx                  
 456:000 | DONE ins | na 16 16 | 006187 | e8          |                 inx                  
 457:000 | DONE wsp | na 16 16 |        |             |
 458:000 | DONE ins | na 16 16 | 006188 | 48          |                 pha                  put return address back in place
 459:000 | DONE wsp | na 16 16 |        |             |
 460:000 | DONE lbl | na 16 16 | 006189 |             | z_tor                                
 460:001 | DONE ins | na 16 16 | 006189 | 60          |                 rts                  
 461:000 | DONE wsp | na 16 16 |        |             |
 462:000 | DONE wsp | na 16 16 |        |             |
 463:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 464:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 465:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 466:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE  Based on
 467:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 468:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 469:000 | DONE cmt | na 16 16 |        |             | ; focus on size.
 470:000 | DONE cmt | na 16 16 |        |             | ; TODO Once we know this works, move to assembler
 471:000 | DONE lbl | na 16 16 | 00618a |             | xt_dot                               
 472:000 | DONE ins | na 16 16 | 00618a | 20 62 66    |                 jsr 006662           ( n n )
 473:000 | DONE ins | na 16 16 | 00618d | 20 84 63    |                 jsr 006384           ( n n )
 474:000 | DONE ins | na 16 16 | 006190 | 20 e8 62    |                 jsr 0062e8           ( n n 0 )
 475:000 | DONE ins | na 16 16 | 006193 | 20 ff 60    |                 jsr 0060ff           ( n n 0 )
 476:000 | DONE ins | na 16 16 | 006196 | 20 84 62    |                 jsr 006284           ( n ud )
 477:000 | DONE ins | na 16 16 | 006199 | 20 47 69    |                 jsr 006947           ( ud n )
 478:000 | DONE ins | na 16 16 | 00619c | 20 72 69    |                 jsr 006972           ( ud )
 479:000 | DONE ins | na 16 16 | 00619f | 20 75 62    |                 jsr 006275           
 480:000 | DONE ins | na 16 16 | 0061a2 | 20 30 6a    |                 jsr 006a30           
 481:000 | DONE ins | na 16 16 | 0061a5 | 20 f5 69    |                 jsr 0069f5           
 482:000 | DONE wsp | na 16 16 |        |             |
 483:000 | DONE lbl | na 16 16 | 0061a8 |             | z_dot                                
 483:001 | DONE ins | na 16 16 | 0061a8 | 60          |                 rts                  
 484:000 | DONE wsp | na 16 16 |        |             |
 485:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 486:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 487:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 488:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 489:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 490:000 | DONE lbl | na 16 16 | 0061a9 |             | xt_dotparen                          
 491:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 492:000 | DONE ins | na 16 16 | 0061a9 | ca          |                 dex                  
 493:000 | DONE ins | na 16 16 | 0061aa | ca          |                 dex                  
 494:000 | DONE ins | na 16 16 | 0061ab | 94 00       |                 sty.dx 00            
 495:000 | DONE ins | na 16 16 | 0061ad | a0 29 00    |                 ldy.# 29             
 496:000 | DONE wsp | na 16 16 |        |             |
 497:000 | DONE ins | na 16 16 | 0061b0 | 20 8b 68    |                 jsr 00688b           ( -- addr u)
 498:000 | DONE ins | na 16 16 | 0061b3 | 20 30 6a    |                 jsr 006a30           
 499:000 | DONE wsp | na 16 16 |        |             |
 500:000 | DONE lbl | na 16 16 | 0061b6 |             | z_dotparen                           
 500:001 | DONE ins | na 16 16 | 0061b6 | 60          |                 rts                  
 501:000 | DONE wsp | na 16 16 |        |             |
 502:000 | DONE wsp | na 16 16 |        |             |
 503:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 504:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 505:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 506:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 507:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 508:000 | DONE lbl | na 16 16 | 0061b7 |             | xt_dotquote                          
 509:000 | DONE ins | na 16 16 | 0061b7 | ca          |                 dex                  
 510:000 | DONE ins | na 16 16 | 0061b8 | ca          |                 dex                  
 511:000 | DONE ins | na 16 16 | 0061b9 | 94 00       |                 sty.dx 00            
 512:000 | DONE ins | na 16 16 | 0061bb | a0 22 00    |                 ldy.# 0022           ASCII for "
 513:000 | DONE wsp | na 16 16 |        |             |
 514:000 | DONE ins | na 16 16 | 0061be | 20 8b 68    |                 jsr 00688b           
 515:000 | DONE ins | na 16 16 | 0061c1 | 20 80 69    |                 jsr 006980           
 516:000 | DONE wsp | na 16 16 |        |             |
 517:000 | DONE ins | na 16 16 | 0061c4 | f4 30 6a    |                 phe.# 006a30         
 518:000 | DONE ins | na 16 16 | 0061c7 | 20 eb 71    |                 jsr 0071eb           
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE ins | na 16 16 | 0061ca | 60          |                 rts                  
 521:000 | DONE lbl | na 16 16 | 0061cb |             | z_dotquote                           
 522:000 | DONE wsp | na 16 16 |        |             |
 523:000 | DONE wsp | na 16 16 |        |             |
 524:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 525:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 526:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 527:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 528:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 529:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 530:000 | DONE lbl | na 16 16 | 0061cb |             | xt_dots                              
 531:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 532:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 533:000 | DONE ins | na 16 16 | 0061cb | 20 f0 65    |                 jsr 0065f0           ( -- u)
 534:000 | DONE wsp | na 16 16 |        |             |
 535:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 536:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 537:000 | DONE ins | na 16 16 | 0061ce | a9 3c 00    |                 lda.# 3c             
 538:000 | DONE ins | na 16 16 | 0061d1 | 20 36 60    |                 jsr 006036           
 539:000 | DONE wsp | na 16 16 |        |             |
 540:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 541:000 | DONE ins | na 16 16 | 0061d4 | 98          |                 tya                  
 542:000 | DONE ins | na 16 16 | 0061d5 | 29 00 ff    |                 and.# 0ff00          
 543:000 | DONE ins | na 16 16 | 0061d8 | eb          |                 xba                  
 544:000 | DONE ins | na 16 16 | 0061d9 | 20 2a 72    |                 jsr 00722a           
 545:000 | DONE ins | na 16 16 | 0061dc | 98          |                 tya                  
 546:000 | DONE ins | na 16 16 | 0061dd | 29 ff 00    |                 and.# 00ff           
 547:000 | DONE ins | na 16 16 | 0061e0 | 20 2a 72    |                 jsr 00722a           
 548:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 551:000 | DONE ins | na 16 16 | 0061e3 | a9 3e 00    |                 lda.# 3e             
 552:000 | DONE ins | na 16 16 | 0061e6 | 20 36 60    |                 jsr 006036           
 553:000 | DONE ins | na 16 16 | 0061e9 | 20 f5 69    |                 jsr 0069f5           
 554:000 | DONE wsp | na 16 16 |        |             |
 555:000 | DONE wsp | na 16 16 |        |             |
 556:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 557:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 558:000 | DONE ins | na 16 16 | 0061ec | 98          |                 tya                  force flag test
 559:000 | DONE ins | na 16 16 | 0061ed | f0 20       |                 beq 00620f           
 560:000 | DONE wsp | na 16 16 |        |             |
 561:000 | DONE lbl | na 16 16 | 0061ef |             | dots_not_empty                       
 562:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 563:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 564:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 565:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 566:000 | DONE wsp | na 16 16 |        |             |
 567:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 568:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 569:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 570:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 571:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles), and we save the two bytes.
 572:000 | DONE ins | na 16 16 | 0061ef | da          |                 phx                  
 573:000 | DONE wsp | na 16 16 |        |             |
 574:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 575:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped.
 576:000 | DONE cmt | na 16 16 |        |             |                 ; See docs/INTERNALS.md for details
 577:000 | DONE ins | na 16 16 | 0061f0 | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
 578:000 | DONE ins | na 16 16 | 0061f3 | ca          |                 dex                  
 579:000 | DONE ins | na 16 16 | 0061f4 | ca          |                 dex                  points to dsp0-2, which is also garbage
 580:000 | DONE wsp | na 16 16 |        |             |
 581:000 | DONE lbl | na 16 16 | 0061f5 |             | dots_loop                            
 582:000 | DONE ins | na 16 16 | 0061f5 | ca          |                 dex                  get next element on DS, initially dsp0-4
 583:000 | DONE ins | na 16 16 | 0061f6 | ca          |                 dex                  
 584:000 | DONE wsp | na 16 16 |        |             |
 585:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 586:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 587:000 | DONE ins | na 16 16 | 0061f7 | b5 00       |                 lda.dx 00            
 588:000 | DONE ins | na 16 16 | 0061f9 | 29 00 ff    |                 and.# 0ff00          
 589:000 | DONE ins | na 16 16 | 0061fc | eb          |                 xba                  
 590:000 | DONE ins | na 16 16 | 0061fd | 20 2a 72    |                 jsr 00722a           
 591:000 | DONE ins | na 16 16 | 006200 | b5 00       |                 lda.dx 00            
 592:000 | DONE ins | na 16 16 | 006202 | 29 ff 00    |                 and.# 00ff           
 593:000 | DONE ins | na 16 16 | 006205 | 20 2a 72    |                 jsr 00722a           
 594:000 | DONE ins | na 16 16 | 006208 | 20 f5 69    |                 jsr 0069f5           
 595:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 596:000 | DONE wsp | na 16 16 |        |             |
 597:000 | DONE ins | na 16 16 | 00620b | 88          |                 dey                  
 598:000 | DONE ins | na 16 16 | 00620c | d0 e7       |                 bne 0061f5           
 599:000 | DONE wsp | na 16 16 |        |             |
 600:000 | DONE ins | na 16 16 | 00620e | fa          |                 plx                  restore original DSP
 601:000 | DONE wsp | na 16 16 |        |             |
 602:000 | DONE lbl | na 16 16 | 00620f |             | dots_done                            
 603:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 604:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 605:000 | DONE ins | na 16 16 | 00620f | 20 36 66    |                 jsr 006636           
 606:000 | DONE wsp | na 16 16 |        |             |
 607:000 | DONE lbl | na 16 16 | 006212 |             | z_dots                               
 607:001 | DONE ins | na 16 16 | 006212 | 60          |                 rts                  
 608:000 | DONE wsp | na 16 16 |        |             |
 609:000 | DONE wsp | na 16 16 |        |             |
 610:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 611:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 612:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 613:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 614:000 | DONE cmt | na 16 16 |        |             | ; aligned
 615:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 616:000 | DONE cmt | na 16 16 |        |             | ;               tya
 617:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 618:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 619:000 | DONE cmt | na 16 16 |        |             | ;               iny
 620:000 | DONE cmt | na 16 16 |        |             | ;               iny
 621:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 622:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 623:000 | DONE cmt | na 16 16 |        |             | ;               inx
 624:000 | DONE cmt | na 16 16 |        |             | ;               inx
 625:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 626:000 | DONE lbl | na 16 16 | 006213 |             | xt_comma                             
 627:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 628:000 | DONE ins | na 16 16 | 006213 | 98          |                 tya                  
 629:000 | DONE ins | na 16 16 | 006214 | 92 00       |                 sta.di 000200        STA (CP)
 630:000 | DONE ins | na 16 16 | 006216 | e6 00       |                 inc.d 000200         
 631:000 | DONE ins | na 16 16 | 006218 | e6 00       |                 inc.d 000200         
 632:000 | DONE wsp | na 16 16 |        |             |
 633:000 | DONE ins | na 16 16 | 00621a | b4 00       |                 ldy.dx 00            
 634:000 | DONE ins | na 16 16 | 00621c | e8          |                 inx                  
 635:000 | DONE ins | na 16 16 | 00621d | e8          |                 inx                  
 636:000 | DONE wsp | na 16 16 |        |             |
 637:000 | DONE lbl | na 16 16 | 00621e |             | z_comma                              
 637:001 | DONE ins | na 16 16 | 00621e | 60          |                 rts                  
 638:000 | DONE wsp | na 16 16 |        |             |
 639:000 | DONE wsp | na 16 16 |        |             |
 640:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 641:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 642:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 643:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 644:000 | DONE lbl | na 16 16 | 00621f |             | xt_colon                             
 645:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 646:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 647:000 | DONE ins | na 16 16 | 00621f | a5 14       |                 lda.d 000214         
 648:000 | DONE ins | na 16 16 | 006221 | f0 06       |                 beq 006229           
 649:000 | DONE wsp | na 16 16 |        |             |
 650:000 | DONE ins | na 16 16 | 006223 | a9 69 78    |                 lda.# 007869         
 651:000 | DONE ins | na 16 16 | 006226 | 4c 0c 72    |                 jmp 00720c           
 652:000 | DONE lbl | na 16 16 | 006229 |             | @                                    
 653:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 654:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 655:000 | DONE ins | na 16 16 | 006229 | e6 14       |                 inc.d 000214         
 656:000 | DONE wsp | na 16 16 |        |             |
 657:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 658:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 659:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 660:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 661:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 662:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 663:000 | DONE ins | na 16 16 | 00622b | a5 02       |                 lda.d 000202         
 664:000 | DONE ins | na 16 16 | 00622d | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 665:000 | DONE wsp | na 16 16 |        |             |
 666:000 | DONE ins | na 16 16 | 00622e | 20 59 65    |                 jsr 006559           
 667:000 | DONE wsp | na 16 16 |        |             |
 668:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 669:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 670:000 | DONE ins | na 16 16 | 006231 | a5 02       |                 lda.d 000202         
 671:000 | DONE ins | na 16 16 | 006233 | 85 1e       |                 sta.d 00021e         
 672:000 | DONE ins | na 16 16 | 006235 | 68          |                 pla                  
 673:000 | DONE ins | na 16 16 | 006236 | 85 02       |                 sta.d 000202         
 674:000 | DONE wsp | na 16 16 |        |             |
 675:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 676:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 677:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 678:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 679:000 | DONE ins | na 16 16 | 006238 | a5 00       |                 lda.d 000200         
 680:000 | DONE ins | na 16 16 | 00623a | 38          |                 sec                  
 681:000 | DONE ins | na 16 16 | 00623b | e9 03 00    |                 sbc.# 0003           
 682:000 | DONE ins | na 16 16 | 00623e | 85 00       |                 sta.d 000200         
 683:000 | DONE wsp | na 16 16 |        |             |
 684:000 | DONE lbl | na 16 16 | 006240 |             | z_colon                              
 684:001 | DONE ins | na 16 16 | 006240 | 60          |                 rts                  
 685:000 | DONE wsp | na 16 16 |        |             |
 686:000 | DONE wsp | na 16 16 |        |             |
 687:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 688:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 689:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 690:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 691:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 692:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 693:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 694:000 | DONE lbl | na 16 16 | 006241 |             | xt_semicolon                         
 695:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 696:000 | DONE ins | na 16 16 | 006241 | 84 06       |                 sty.d 000206         
 697:000 | DONE wsp | na 16 16 |        |             |
 698:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 699:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 700:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 701:000 | DONE ins | na 16 16 | 006243 | a0 06 00    |                 ldy.# 0006           
 702:000 | DONE ins | na 16 16 | 006246 | a5 00       |                 lda.d 000200         
 703:000 | DONE ins | na 16 16 | 006248 | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 704:000 | DONE wsp | na 16 16 |        |             |
 705:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 706:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 707:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 708:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 709:000 | DONE ins | na 16 16 | 00624a | a9 60 00    |                 lda.# 60             opcode for RTS
 710:000 | DONE ins | na 16 16 | 00624d | 92 00       |                 sta.di 000200        STA (CP)
 711:000 | DONE ins | na 16 16 | 00624f | e6 00       |                 inc.d 000200         MSB will be overwritten
 712:000 | DONE wsp | na 16 16 |        |             |
 713:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 714:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 715:000 | DONE ins | na 16 16 | 006251 | a5 1e       |                 lda.d 00021e         
 716:000 | DONE ins | na 16 16 | 006253 | 85 02       |                 sta.d 000202         
 717:000 | DONE wsp | na 16 16 |        |             |
 718:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 719:000 | DONE ins | na 16 16 | 006255 | a4 06       |                 ldy.d 000206         
 720:000 | DONE wsp | na 16 16 |        |             |
 721:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 722:000 | DONE ins | na 16 16 | 006257 | 64 14       |                 stz.d 000214         
 723:000 | DONE wsp | na 16 16 |        |             |
 724:000 | DONE lbl | na 16 16 | 006259 |             | z_semicolon                          
 724:001 | DONE ins | na 16 16 | 006259 | 60          |                 rts                  
 725:000 | DONE wsp | na 16 16 |        |             |
 726:000 | DONE wsp | na 16 16 |        |             |
 727:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 728:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 729:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 730:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 731:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 732:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 733:000 | DONE lbl | na 16 16 | 00625a |             | xt_hash                              
 734:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 735:000 | DONE ins | na 16 16 | 00625a | 20 57 64    |                 jsr 006457           ( ud addr )
 736:000 | DONE ins | na 16 16 | 00625d | 20 a0 62    |                 jsr 0062a0           ( ud u )
 737:000 | DONE ins | na 16 16 | 006260 | 20 51 6a    |                 jsr 006a51           ( rem ud )
 738:000 | DONE ins | na 16 16 | 006263 | 20 47 69    |                 jsr 006947           ( ud rem )
 739:000 | DONE wsp | na 16 16 |        |             |
 740:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 741:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed
 742:000 | DONE ins | na 16 16 | 006266 | e2 20       |                 sep 20               
 742:001 | DONE ctl | na  8 16 |        |             |         .!a8
 743:000 | DONE ins | na  8 16 | 006268 | b9 cb 78    |                 lda.y 0078cb         
 744:000 | DONE ins | na  8 16 | 00626b | c2 20       |                 rep 20               
 744:001 | DONE ctl | na 16 16 |        |             |         .!a16
 745:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 746:000 | DONE ins | na 16 16 | 00626d | 29 ff 00    |                 and.# 00ff           
 747:000 | DONE ins | na 16 16 | 006270 | a8          |                 tay                  ( ud char )
 748:000 | DONE wsp | na 16 16 |        |             |
 749:000 | DONE ins | na 16 16 | 006271 | 20 17 67    |                 jsr 006717           JSR/RTS
 750:000 | DONE wsp | na 16 16 |        |             |
 751:000 | DONE lbl | na 16 16 | 006274 |             | z_hash                               
 751:001 | DONE ins | na 16 16 | 006274 | 60          |                 rts                  
 752:000 | DONE wsp | na 16 16 |        |             |
 753:000 | DONE wsp | na 16 16 |        |             |
 754:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 755:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 756:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 757:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 758:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 759:000 | DONE lbl | na 16 16 | 006275 |             | xt_numbermore                        
 760:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 761:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 762:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 763:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 764:000 | DONE ins | na 16 16 | 006275 | a4 28       |                 ldy.d 000228         
 765:000 | DONE ins | na 16 16 | 006277 | 94 00       |                 sty.dx 00            ( addr addr )
 766:000 | DONE wsp | na 16 16 |        |             |
 767:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 768:000 | DONE ins | na 16 16 | 006279 | 20 40 68    |                 jsr 006840           ( addr addr pad )
 769:000 | DONE wsp | na 16 16 |        |             |
 770:000 | DONE ins | na 16 16 | 00627c | 38          |                 sec                  
 771:000 | DONE ins | na 16 16 | 00627d | 98          |                 tya                  
 772:000 | DONE ins | na 16 16 | 00627e | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 773:000 | DONE ins | na 16 16 | 006280 | a8          |                 tay                  ( addr addr n )
 774:000 | DONE wsp | na 16 16 |        |             |
 775:000 | DONE ins | na 16 16 | 006281 | e8          |                 inx                  NIP
 776:000 | DONE ins | na 16 16 | 006282 | e8          |                 inx                  
 777:000 | DONE wsp | na 16 16 |        |             |
 778:000 | DONE lbl | na 16 16 | 006283 |             | z_numbermore                         
 778:001 | DONE ins | na 16 16 | 006283 | 60          |                 rts                  
 779:000 | DONE wsp | na 16 16 |        |             |
 780:000 | DONE wsp | na 16 16 |        |             |
 781:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 782:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 783:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 784:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 785:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 786:000 | DONE lbl | na 16 16 | 006284 |             | xt_hashs                             
 787:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 788:000 | DONE lbl | na 16 16 | 006284 |             | hashs_loop                           
 789:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 790:000 | DONE ins | na 16 16 | 006284 | 20 5a 62    |                 jsr 00625a           ( ud -- ud )
 791:000 | DONE wsp | na 16 16 |        |             |
 792:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 793:000 | DONE ins | na 16 16 | 006287 | 98          |                 tya                  
 794:000 | DONE ins | na 16 16 | 006288 | 15 00       |                 ora.dx 00            
 795:000 | DONE ins | na 16 16 | 00628a | d0 f8       |                 bne 006284           
 796:000 | DONE wsp | na 16 16 |        |             |
 797:000 | DONE lbl | na 16 16 | 00628c |             | z_hashs                              
 797:001 | DONE ins | na 16 16 | 00628c | 60          |                 rts                  
 798:000 | DONE wsp | na 16 16 |        |             |
 799:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 800:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 801:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 802:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 803:000 | DONE lbl | na 16 16 | 00628d |             | xt_question                          
 804:000 | DONE ins | na 16 16 | 00628d | 20 a0 62    |                 jsr 0062a0           
 805:000 | DONE ins | na 16 16 | 006290 | 20 8a 61    |                 jsr 00618a           
 806:000 | DONE wsp | na 16 16 |        |             |
 807:000 | DONE lbl | na 16 16 | 006293 |             | z_question                           
 807:001 | DONE ins | na 16 16 | 006293 | 60          |                 rts                  
 808:000 | DONE wsp | na 16 16 |        |             |
 809:000 | DONE wsp | na 16 16 |        |             |
 810:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 811:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 812:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 813:000 | DONE lbl | na 16 16 | 006294 |             | xt_store                             
 814:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 815:000 | DONE ins | na 16 16 | 006294 | b5 00       |                 lda.dx 00            NOS has value
 816:000 | DONE ins | na 16 16 | 006296 | 99 00 00    |                 sta.y 0000           
 817:000 | DONE wsp | na 16 16 |        |             |
 818:000 | DONE ins | na 16 16 | 006299 | b4 02       |                 ldy.dx 02            
 819:000 | DONE ins | na 16 16 | 00629b | e8          |                 inx                  
 820:000 | DONE ins | na 16 16 | 00629c | e8          |                 inx                  
 821:000 | DONE ins | na 16 16 | 00629d | e8          |                 inx                  
 822:000 | DONE ins | na 16 16 | 00629e | e8          |                 inx                  
 823:000 | DONE wsp | na 16 16 |        |             |
 824:000 | DONE lbl | na 16 16 | 00629f |             | z_store                              
 824:001 | DONE ins | na 16 16 | 00629f | 60          |                 rts                  
 825:000 | DONE wsp | na 16 16 |        |             |
 826:000 | DONE wsp | na 16 16 |        |             |
 827:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 828:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 829:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 830:000 | DONE lbl | na 16 16 | 0062a0 |             | xt_fetch                             
 831:000 | DONE ins | na 16 16 | 0062a0 | b9 00 00    |                 lda.y 0000           
 832:000 | DONE ins | na 16 16 | 0062a3 | a8          |                 tay                  
 833:000 | DONE wsp | na 16 16 |        |             |
 834:000 | DONE lbl | na 16 16 | 0062a4 |             | z_fetch                              
 834:001 | DONE ins | na 16 16 | 0062a4 | 60          |                 rts                  
 835:000 | DONE wsp | na 16 16 |        |             |
 836:000 | DONE wsp | na 16 16 |        |             |
 837:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 838:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 839:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 840:000 | DONE lbl | na 16 16 | 0062a5 |             | xt_brackettick                       
 841:000 | DONE ins | na 16 16 | 0062a5 | 20 68 63    |                 jsr 006368           
 842:000 | DONE ins | na 16 16 | 0062a8 | 4c 25 67    |                 jmp 006725           JSR/RTS
 843:000 | DONE lbl | na 16 16 | 0062ab |             | z_brackettick                        
 844:000 | DONE wsp | na 16 16 |        |             |
 845:000 | DONE wsp | na 16 16 |        |             |
 846:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 847:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 848:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 849:000 | DONE lbl | na 16 16 | 0062ab |             | xt_leftbracket                       
 850:000 | DONE ins | na 16 16 | 0062ab | 64 14       |                 stz.d 000214         
 851:000 | DONE lbl | na 16 16 | 0062ad |             | z_leftbracket                        
 851:001 | DONE ins | na 16 16 | 0062ad | 60          |                 rts                  
 852:000 | DONE wsp | na 16 16 |        |             |
 853:000 | DONE wsp | na 16 16 |        |             |
 854:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 855:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 856:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 857:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 858:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 859:000 | DONE lbl | na 16 16 | 0062ae |             | xt_rightbracket                      
 860:000 | DONE ins | na 16 16 | 0062ae | a9 01 00    |                 lda.# 0001           
 861:000 | DONE ins | na 16 16 | 0062b1 | 85 14       |                 sta.d 000214         
 862:000 | DONE wsp | na 16 16 |        |             |
 863:000 | DONE lbl | na 16 16 | 0062b3 |             | z_rightbracket                       
 863:001 | DONE ins | na 16 16 | 0062b3 | 60          |                 rts                  
 864:000 | DONE wsp | na 16 16 |        |             |
 865:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 866:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
 867:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 868:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
 869:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
 870:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
 871:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 872:000 | DONE lbl | na 16 16 | 0062b4 |             | xt_bracketchar                       
 873:000 | DONE ins | na 16 16 | 0062b4 | 20 b9 64    |                 jsr 0064b9           
 874:000 | DONE ins | na 16 16 | 0062b7 | 20 25 67    |                 jsr 006725           
 875:000 | DONE wsp | na 16 16 |        |             |
 876:000 | DONE lbl | na 16 16 | 0062ba |             | z_bracketchar                        
 876:001 | DONE ins | na 16 16 | 0062ba | 60          |                 rts                  
 877:000 | DONE wsp | na 16 16 |        |             |
 878:000 | DONE wsp | na 16 16 |        |             |
 879:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 880:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
 881:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
 882:000 | DONE lbl | na 16 16 | 0062bb |             | xt_backslash                         
 883:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 884:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
 885:000 | DONE ins | na 16 16 | 0062bb | a5 0e       |                 lda.d 00020e         
 886:000 | DONE ins | na 16 16 | 0062bd | 85 12       |                 sta.d 000212         
 887:000 | DONE wsp | na 16 16 |        |             |
 888:000 | DONE lbl | na 16 16 | 0062bf |             | z_backslash                          
 888:001 | DONE ins | na 16 16 | 0062bf | 60          |                 rts                  
 889:000 | DONE wsp | na 16 16 |        |             |
 890:000 | DONE wsp | na 16 16 |        |             |
 891:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 892:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 893:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 894:000 | DONE lbl | na 16 16 | 0062c0 |             | xt_plus                              
 895:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 896:000 | DONE ins | na 16 16 | 0062c0 | 98          |                 tya                  
 897:000 | DONE ins | na 16 16 | 0062c1 | 18          |                 clc                  
 898:000 | DONE ins | na 16 16 | 0062c2 | 75 00       |                 adc.dx 00            
 899:000 | DONE ins | na 16 16 | 0062c4 | a8          |                 tay                  
 900:000 | DONE ins | na 16 16 | 0062c5 | e8          |                 inx                  
 901:000 | DONE ins | na 16 16 | 0062c6 | e8          |                 inx                  
 902:000 | DONE wsp | na 16 16 |        |             |
 903:000 | DONE lbl | na 16 16 | 0062c7 |             | z_plus                               
 903:001 | DONE ins | na 16 16 | 0062c7 | 60          |                 rts                  
 904:000 | DONE wsp | na 16 16 |        |             |
 905:000 | DONE wsp | na 16 16 |        |             |
 906:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 907:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 908:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 909:000 | DONE lbl | na 16 16 | 0062c8 |             | xt_minus                             
 910:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 911:000 | DONE ins | na 16 16 | 0062c8 | 98          |                 tya                  
 912:000 | DONE ins | na 16 16 | 0062c9 | 49 ff ff    |                 eor.# 0ffff          
 913:000 | DONE wsp | na 16 16 |        |             |
 914:000 | DONE ins | na 16 16 | 0062cc | 38          |                 sec                  not CLC
 915:000 | DONE ins | na 16 16 | 0062cd | 75 00       |                 adc.dx 00            
 916:000 | DONE wsp | na 16 16 |        |             |
 917:000 | DONE ins | na 16 16 | 0062cf | a8          |                 tay                  
 918:000 | DONE ins | na 16 16 | 0062d0 | e8          |                 inx                  
 919:000 | DONE ins | na 16 16 | 0062d1 | e8          |                 inx                  
 920:000 | DONE wsp | na 16 16 |        |             |
 921:000 | DONE lbl | na 16 16 | 0062d2 |             | z_minus                              
 921:001 | DONE ins | na 16 16 | 0062d2 | 60          |                 rts                  
 922:000 | DONE wsp | na 16 16 |        |             |
 923:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 924:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
 925:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
 926:000 | DONE lbl | na 16 16 | 0062d3 |             | xt_mrot                              
 927:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 928:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 929:000 | DONE ins | na 16 16 | 0062d3 | b5 02       |                 lda.dx 02            save a
 930:000 | DONE ins | na 16 16 | 0062d5 | 94 02       |                 sty.dx 02            move c to 3OS
 931:000 | DONE ins | na 16 16 | 0062d7 | b4 00       |                 ldy.dx 00            move b to TOS
 932:000 | DONE ins | na 16 16 | 0062d9 | 95 00       |                 sta.dx 00            save a as NOS
 933:000 | DONE wsp | na 16 16 |        |             |
 934:000 | DONE lbl | na 16 16 | 0062db |             | z_mrot                               
 934:001 | DONE ins | na 16 16 | 0062db | 60          |                 rts                  
 935:000 | DONE wsp | na 16 16 |        |             |
 936:000 | DONE wsp | na 16 16 |        |             |
 937:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 938:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
 939:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
 940:000 | DONE lbl | na 16 16 | 0062dc |             | xt_equal                             
 941:000 | DONE ins | na 16 16 | 0062dc | 98          |                 tya                  
 942:000 | DONE ins | na 16 16 | 0062dd | a0 00 00    |                 ldy.# 0000           default value is false
 943:000 | DONE wsp | na 16 16 |        |             |
 944:000 | DONE ins | na 16 16 | 0062e0 | d5 00       |                 cmp.dx 00            
 945:000 | DONE ins | na 16 16 | 0062e2 | d0 01       |                 bne 0062e5           
 946:000 | DONE ins | na 16 16 | 0062e4 | 88          |                 dey                  wraps to 0FFFF (true)
 947:000 | DONE wsp | na 16 16 |        |             |
 948:000 | DONE lbl | na 16 16 | 0062e5 |             | equal_not                            
 949:000 | DONE ins | na 16 16 | 0062e5 | e8          |                 inx                  
 950:000 | DONE ins | na 16 16 | 0062e6 | e8          |                 inx                  
 951:000 | DONE wsp | na 16 16 |        |             |
 952:000 | DONE lbl | na 16 16 | 0062e7 |             | z_equal                              
 952:001 | DONE ins | na 16 16 | 0062e7 | 60          |                 rts                  
 953:000 | DONE wsp | na 16 16 |        |             |
 954:000 | DONE wsp | na 16 16 |        |             |
 955:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 956:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 957:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 958:000 | DONE lbl | na 16 16 | 0062e8 |             | xt_zero                              
 959:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 960:000 | DONE ins | na 16 16 | 0062e8 | ca          |                 dex                  
 961:000 | DONE ins | na 16 16 | 0062e9 | ca          |                 dex                  
 962:000 | DONE ins | na 16 16 | 0062ea | 94 00       |                 sty.dx 00            
 963:000 | DONE ins | na 16 16 | 0062ec | a0 00 00    |                 ldy.# 0000           
 964:000 | DONE wsp | na 16 16 |        |             |
 965:000 | DONE lbl | na 16 16 | 0062ef |             | z_zero                               
 965:001 | DONE ins | na 16 16 | 0062ef | 60          |                 rts                  
 966:000 | DONE wsp | na 16 16 |        |             |
 967:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 968:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
 969:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
 970:000 | DONE lbl | na 16 16 | 0062f0 |             | xt_zero-equal                        
 971:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 972:000 | DONE ins | na 16 16 | 0062f0 | 98          |                 tya                  force flag check
 973:000 | DONE ins | na 16 16 | 0062f1 | d0 05       |                 bne 0062f8           
 974:000 | DONE wsp | na 16 16 |        |             |
 975:000 | DONE ins | na 16 16 | 0062f3 | a0 ff 0f    |                 ldy.# 0fff           
 976:000 | DONE ins | na 16 16 | 0062f6 | 80 03       |                 bra 0062fb           
 977:000 | DONE lbl | na 16 16 | 0062f8 |             | ze_not_zero                          
 978:000 | DONE ins | na 16 16 | 0062f8 | a0 00 00    |                 ldy.# 0000           
 979:000 | DONE wsp | na 16 16 |        |             |
 980:000 | DONE lbl | na 16 16 | 0062fb |             | z_zero-equal                         
 980:001 | DONE ins | na 16 16 | 0062fb | 60          |                 rts                  
 981:000 | DONE wsp | na 16 16 |        |             |
 982:000 | DONE wsp | na 16 16 |        |             |
 983:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 984:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
 985:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
 986:000 | DONE lbl | na 16 16 | 0062fc |             | xt_zero-less                         
 987:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 988:000 | DONE ins | na 16 16 | 0062fc | 98          |                 tya                  force flag check
 989:000 | DONE ins | na 16 16 | 0062fd | 30 05       |                 bmi 006304           
 990:000 | DONE wsp | na 16 16 |        |             |
 991:000 | DONE ins | na 16 16 | 0062ff | a0 00 00    |                 ldy.# 0000           
 992:000 | DONE ins | na 16 16 | 006302 | 80 03       |                 bra 006307           
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE lbl | na 16 16 | 006304 |             | zero-less-is-less                    
 995:000 | DONE ins | na 16 16 | 006304 | a0 ff ff    |                 ldy.# 0ffff          
 996:000 | DONE wsp | na 16 16 |        |             |
 997:000 | DONE lbl | na 16 16 | 006307 |             | z_zero-less                          
 997:001 | DONE ins | na 16 16 | 006307 | 60          |                 rts                  
 998:000 | DONE wsp | na 16 16 |        |             |
 999:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1000:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1001:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1002:000 | DONE lbl | na 16 16 | 006308 |             | xt_zero-notequal                     
1003:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1004:000 | DONE ins | na 16 16 | 006308 | 98          |                 tya                  force flag check
1005:000 | DONE ins | na 16 16 | 006309 | f0 05       |                 beq 006310           
1006:000 | DONE ins | na 16 16 | 00630b | a0 ff ff    |                 ldy.# 0ffff          
1007:000 | DONE ins | na 16 16 | 00630e | 80 03       |                 bra 006313           
1008:000 | DONE lbl | na 16 16 | 006310 |             | zne_is_zero                          
1009:000 | DONE ins | na 16 16 | 006310 | a0 00 00    |                 ldy.# 0000           
1010:000 | DONE lbl | na 16 16 | 006313 |             | z_zero-notequal                      
1011:000 | DONE ins | na 16 16 | 006313 | 60          |                 rts                  
1012:000 | DONE wsp | na 16 16 |        |             |
1013:000 | DONE wsp | na 16 16 |        |             |
1014:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1015:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1016:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1017:000 | DONE lbl | na 16 16 | 006314 |             | xt_zero-more                         
1018:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1019:000 | DONE ins | na 16 16 | 006314 | a9 00 00    |                 lda.# 0000           default is false
1020:000 | DONE wsp | na 16 16 |        |             |
1021:000 | DONE ins | na 16 16 | 006317 | 88          |                 dey                  
1022:000 | DONE ins | na 16 16 | 006318 | 10 02       |                 bpl 00631c           was at least 1
1023:000 | DONE wsp | na 16 16 |        |             |
1024:000 | DONE ins | na 16 16 | 00631a | 80 01       |                 bra 00631d           nope, stays false
1025:000 | DONE wsp | na 16 16 |        |             |
1026:000 | DONE lbl | na 16 16 | 00631c |             | zero-more_true                       
1027:000 | DONE ins | na 16 16 | 00631c | 3a          |                 dec.a                wraps to 0ffff, true
1028:000 | DONE lbl | na 16 16 | 00631d |             | zero-more_done                       
1029:000 | DONE ins | na 16 16 | 00631d | a8          |                 tay                  
1030:000 | DONE wsp | na 16 16 |        |             |
1031:000 | DONE lbl | na 16 16 | 00631e |             | z_zero-more                          
1031:001 | DONE ins | na 16 16 | 00631e | 60          |                 rts                  
1032:000 | DONE wsp | na 16 16 |        |             |
1033:000 | DONE wsp | na 16 16 |        |             |
1034:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1035:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1036:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1037:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1038:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1039:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmp1
1040:000 | DONE lbl | na 16 16 | 00631f |             | xt_zbranch                           
1041:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1042:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1043:000 | DONE ins | na 16 16 | 00631f | f4 26 63    |                 phe.# 006326         
1044:000 | DONE ins | na 16 16 | 006322 | 20 eb 71    |                 jsr 0071eb           
1045:000 | DONE wsp | na 16 16 |        |             |
1046:000 | DONE lbl | na 16 16 | 006325 |             | z_zbranch                            
1046:001 | DONE ins | na 16 16 | 006325 | 60          |                 rts                  
1047:000 | DONE wsp | na 16 16 |        |             |
1048:000 | DONE lbl | na 16 16 | 006326 |             | zbranch_rt                           
1049:000 | DONE cmt | na 16 16 |        |             |                 ; Compiled component. Use the address on the Return Stack to
1050:000 | DONE cmt | na 16 16 |        |             |                 ; decide where we want to return to
1051:000 | DONE ins | na 16 16 | 006326 | 68          |                 pla                  
1052:000 | DONE ins | na 16 16 | 006327 | 85 16       |                 sta.d 000216         
1053:000 | DONE wsp | na 16 16 |        |             |
1054:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1055:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1056:000 | DONE ins | na 16 16 | 006329 | 98          |                 tya                  force flag check
1057:000 | DONE ins | na 16 16 | 00632a | f0 06       |                 beq 006332           flag is false (zero), so we branch
1058:000 | DONE wsp | na 16 16 |        |             |
1059:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1060:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1061:000 | DONE ins | na 16 16 | 00632c | a5 16       |                 lda.d 000216         
1062:000 | DONE ins | na 16 16 | 00632e | 1a          |                 inc.a                
1063:000 | DONE ins | na 16 16 | 00632f | 1a          |                 inc.a                
1064:000 | DONE wsp | na 16 16 |        |             |
1065:000 | DONE ins | na 16 16 | 006330 | 80 06       |                 bra 006338           
1066:000 | DONE wsp | na 16 16 |        |             |
1067:000 | DONE lbl | na 16 16 | 006332 |             | zb_zero                              
1068:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1069:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1070:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1071:000 | DONE ins | na 16 16 | 006332 | a0 01 00    |                 ldy.# 0001           
1072:000 | DONE ins | na 16 16 | 006335 | b1 16       |                 lda.diy 000216       
1073:000 | DONE wsp | na 16 16 |        |             |
1074:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1075:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1076:000 | DONE ins | na 16 16 | 006337 | 3a          |                 dec.a                
1077:000 | DONE wsp | na 16 16 |        |             |
1078:000 | DONE lbl | na 16 16 | 006338 |             | zb_done                              
1079:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1080:000 | DONE ins | na 16 16 | 006338 | 48          |                 pha                  
1081:000 | DONE wsp | na 16 16 |        |             |
1082:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1083:000 | DONE ins | na 16 16 | 006339 | b4 00       |                 ldy.dx 00            
1084:000 | DONE ins | na 16 16 | 00633b | e8          |                 inx                  
1085:000 | DONE ins | na 16 16 | 00633c | e8          |                 inx                  
1086:000 | DONE wsp | na 16 16 |        |             |
1087:000 | DONE ins | na 16 16 | 00633d | 60          |                 rts                  
1088:000 | DONE wsp | na 16 16 |        |             |
1089:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1090:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1091:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1092:000 | DONE lbl | na 16 16 | 00633e |             | xt_one                               
1093:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1094:000 | DONE ins | na 16 16 | 00633e | ca          |                 dex                  
1095:000 | DONE ins | na 16 16 | 00633f | ca          |                 dex                  
1096:000 | DONE ins | na 16 16 | 006340 | 94 00       |                 sty.dx 00            
1097:000 | DONE ins | na 16 16 | 006342 | a0 01 00    |                 ldy.# 0001           
1098:000 | DONE wsp | na 16 16 |        |             |
1099:000 | DONE lbl | na 16 16 | 006345 |             | z_one                                
1099:001 | DONE ins | na 16 16 | 006345 | 60          |                 rts                  
1100:000 | DONE wsp | na 16 16 |        |             |
1101:000 | DONE wsp | na 16 16 |        |             |
1102:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1103:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1104:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1105:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1106:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1107:000 | DONE lbl | na 16 16 | 006346 |             | xt_one-minus                         
1108:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1109:000 | DONE ins | na 16 16 | 006346 | 88          |                 dey                  
1110:000 | DONE lbl | na 16 16 | 006347 |             | z_one-minus                          
1110:001 | DONE ins | na 16 16 | 006347 | 60          |                 rts                  
1111:000 | DONE wsp | na 16 16 |        |             |
1112:000 | DONE wsp | na 16 16 |        |             |
1113:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1114:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1115:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1116:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1117:000 | DONE lbl | na 16 16 | 006348 |             | xt_one-plus                          
1118:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1119:000 | DONE ins | na 16 16 | 006348 | c8          |                 iny                  
1120:000 | DONE lbl | na 16 16 | 006349 |             | z_one-plus                           
1120:001 | DONE ins | na 16 16 | 006349 | 60          |                 rts                  
1121:000 | DONE wsp | na 16 16 |        |             |
1122:000 | DONE wsp | na 16 16 |        |             |
1123:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1124:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1125:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1126:000 | DONE lbl | na 16 16 | 00634a |             | xt_two                               
1127:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1128:000 | DONE ins | na 16 16 | 00634a | ca          |                 dex                  
1129:000 | DONE ins | na 16 16 | 00634b | ca          |                 dex                  
1130:000 | DONE ins | na 16 16 | 00634c | 94 00       |                 sty.dx 00            
1131:000 | DONE ins | na 16 16 | 00634e | a0 02 00    |                 ldy.# 0002           
1132:000 | DONE wsp | na 16 16 |        |             |
1133:000 | DONE lbl | na 16 16 | 006351 |             | z_two                                
1133:001 | DONE ins | na 16 16 | 006351 | 60          |                 rts                  
1134:000 | DONE wsp | na 16 16 |        |             |
1135:000 | DONE wsp | na 16 16 |        |             |
1136:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1137:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1138:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1139:000 | DONE lbl | na 16 16 | 006352 |             | xt_two-star                          
1140:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1141:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1142:000 | DONE ins | na 16 16 | 006352 | 98          |                 tya                  
1143:000 | DONE ins | na 16 16 | 006353 | 0a          |                 asl.a                
1144:000 | DONE ins | na 16 16 | 006354 | a8          |                 tay                  
1145:000 | DONE wsp | na 16 16 |        |             |
1146:000 | DONE lbl | na 16 16 | 006355 |             | z_two-star                           
1146:001 | DONE ins | na 16 16 | 006355 | 60          |                 rts                  
1147:000 | DONE wsp | na 16 16 |        |             |
1148:000 | DONE wsp | na 16 16 |        |             |
1149:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1150:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1151:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1152:000 | DONE lbl | na 16 16 | 006356 |             | xt_2drop                             
1153:000 | DONE ins | na 16 16 | 006356 | b4 02       |                 ldy.dx 02            
1154:000 | DONE ins | na 16 16 | 006358 | e8          |                 inx                  
1155:000 | DONE ins | na 16 16 | 006359 | e8          |                 inx                  
1156:000 | DONE ins | na 16 16 | 00635a | e8          |                 inx                  
1157:000 | DONE ins | na 16 16 | 00635b | e8          |                 inx                  
1158:000 | DONE wsp | na 16 16 |        |             |
1159:000 | DONE lbl | na 16 16 | 00635c |             | z_2drop                              
1159:001 | DONE ins | na 16 16 | 00635c | 60          |                 rts                  
1160:000 | DONE wsp | na 16 16 |        |             |
1161:000 | DONE wsp | na 16 16 |        |             |
1162:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1163:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1164:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1165:000 | DONE wsp | na 16 16 |        |             |
1166:000 | DONE lbl | na 16 16 | 00635d |             | xt_2dup                              
1167:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1168:000 | DONE ins | na 16 16 | 00635d | ca          |                 dex                  
1169:000 | DONE ins | na 16 16 | 00635e | ca          |                 dex                  
1170:000 | DONE ins | na 16 16 | 00635f | ca          |                 dex                  
1171:000 | DONE ins | na 16 16 | 006360 | ca          |                 dex                  
1172:000 | DONE ins | na 16 16 | 006361 | 94 02       |                 sty.dx 02            
1173:000 | DONE ins | na 16 16 | 006363 | b5 04       |                 lda.dx 04            
1174:000 | DONE ins | na 16 16 | 006365 | 95 00       |                 sta.dx 00            
1175:000 | DONE wsp | na 16 16 |        |             |
1176:000 | DONE lbl | na 16 16 | 006367 |             | z_2dup                               
1176:001 | DONE ins | na 16 16 | 006367 | 60          |                 rts                  
1177:000 | DONE wsp | na 16 16 |        |             |
1178:000 | DONE wsp | na 16 16 |        |             |
1179:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1180:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1181:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1182:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1183:000 | DONE lbl | na 16 16 | 006368 |             | xt_tick                              
1184:000 | DONE ins | na 16 16 | 006368 | 20 59 68    |                 jsr 006859           ( -- addr u )
1185:000 | DONE wsp | na 16 16 |        |             |
1186:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1187:000 | DONE ins | na 16 16 | 00636b | 98          |                 tya                  force flag check
1188:000 | DONE ins | na 16 16 | 00636c | d0 06       |                 bne 006374           
1189:000 | DONE wsp | na 16 16 |        |             |
1190:000 | DONE ins | na 16 16 | 00636e | a9 f4 77    |                 lda.# 0077f4         
1191:000 | DONE ins | na 16 16 | 006371 | 4c 0c 72    |                 jmp 00720c           
1192:000 | DONE wsp | na 16 16 |        |             |
1193:000 | DONE lbl | na 16 16 | 006374 |             | tick_have_word                       
1194:000 | DONE ins | na 16 16 | 006374 | 20 a4 66    |                 jsr 0066a4           ( addr u -- nt)
1195:000 | DONE ins | na 16 16 | 006377 | 98          |                 tya                  force flag check
1196:000 | DONE wsp | na 16 16 |        |             |
1197:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1198:000 | DONE ins | na 16 16 | 006378 | d0 06       |                 bne 006380           
1199:000 | DONE wsp | na 16 16 |        |             |
1200:000 | DONE ins | na 16 16 | 00637a | a9 91 78    |                 lda.# 007891         
1201:000 | DONE ins | na 16 16 | 00637d | 4c 0c 72    |                 jmp 00720c           
1202:000 | DONE wsp | na 16 16 |        |             |
1203:000 | DONE lbl | na 16 16 | 006380 |             | tick_have_nt                         
1204:000 | DONE ins | na 16 16 | 006380 | 20 8a 67    |                 jsr 00678a           ( nt -- xt )
1205:000 | DONE wsp | na 16 16 |        |             |
1206:000 | DONE lbl | na 16 16 | 006383 |             | z_tick                               
1206:001 | DONE ins | na 16 16 | 006383 | 60          |                 rts                  
1207:000 | DONE wsp | na 16 16 |        |             |
1208:000 | DONE wsp | na 16 16 |        |             |
1209:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1210:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1211:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1212:000 | DONE lbl | na 16 16 | 006384 |             | xt_abs                               
1213:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1214:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1215:000 | DONE ins | na 16 16 | 006384 | 98          |                 tya                  force flag test
1216:000 | DONE ins | na 16 16 | 006385 | 10 05       |                 bpl 00638c           positive number is easy
1217:000 | DONE wsp | na 16 16 |        |             |
1218:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1219:000 | DONE ins | na 16 16 | 006387 | 49 ff ff    |                 eor.# 0ffff          
1220:000 | DONE ins | na 16 16 | 00638a | 1a          |                 inc.a                
1221:000 | DONE ins | na 16 16 | 00638b | a8          |                 tay                  
1222:000 | DONE wsp | na 16 16 |        |             |
1223:000 | DONE lbl | na 16 16 | 00638c |             | z_abs                                
1223:001 | DONE ins | na 16 16 | 00638c | 60          |                 rts                  
1224:000 | DONE wsp | na 16 16 |        |             |
1225:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1226:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1227:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1228:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1229:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1230:000 | DONE lbl | na 16 16 | 00638d |             | xt_accept                            
1231:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1232:000 | DONE ins | na 16 16 | 00638d | 98          |                 tya                  force flag test
1233:000 | DONE ins | na 16 16 | 00638e | d0 03       |                 bne 006393           
1234:000 | DONE wsp | na 16 16 |        |             |
1235:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1236:000 | DONE ins | na 16 16 | 006390 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1237:000 | DONE ins | na 16 16 | 006391 | e8          |                 inx                  
1238:000 | DONE wsp | na 16 16 |        |             |
1239:000 | DONE ins | na 16 16 | 006392 | 60          |                 rts                  
1240:000 | DONE wsp | na 16 16 |        |             |
1241:000 | DONE lbl | na 16 16 | 006393 |             | accept_nonzero                       
1242:000 | DONE ins | na 16 16 | 006393 | b5 00       |                 lda.dx 00            address of buffer is NOS
1243:000 | DONE ins | na 16 16 | 006395 | 85 16       |                 sta.d 000216         
1244:000 | DONE ins | na 16 16 | 006397 | e8          |                 inx                  NIP
1245:000 | DONE ins | na 16 16 | 006398 | e8          |                 inx                  
1246:000 | DONE wsp | na 16 16 |        |             |
1247:000 | DONE ins | na 16 16 | 006399 | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
1248:000 | DONE ins | na 16 16 | 00639b | a0 00 00    |                 ldy.# 0000           Use Y as counter
1249:000 | DONE ins | na 16 16 | 00639e | e2 20       |                 sep 20               
1249:001 | DONE ctl | na  8 16 |        |             |         .!a8
1250:000 | DONE wsp | na  8 16 |        |             |
1251:000 | DONE lbl | na  8 16 | 0063a0 |             | accept_loop                          
1252:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
1253:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1254:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
1255:000 | DONE ins | na  8 16 | 0063a0 | 20 47 60    |                 jsr 006047           
1256:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1257:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
1258:000 | DONE ins | na  8 16 | 0063a3 | c9 0a       |                 cmp.# AscLF          
1259:000 | DONE ins | na  8 16 | 0063a5 | f0 44       |                 beq 0063eb           
1260:000 | DONE ins | na  8 16 | 0063a7 | c9 0d       |                 cmp.# AscCR          
1261:000 | DONE ins | na  8 16 | 0063a9 | f0 40       |                 beq 0063eb           
1262:000 | DONE wsp | na  8 16 |        |             |
1263:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
1264:000 | DONE ins | na  8 16 | 0063ab | c9 08       |                 cmp.# AscBS          
1265:000 | DONE ins | na  8 16 | 0063ad | f0 44       |                 beq 0063f3           
1266:000 | DONE ins | na  8 16 | 0063af | c9 7f       |                 cmp.# AscDEL         
1267:000 | DONE ins | na  8 16 | 0063b1 | f0 40       |                 beq 0063f3           
1268:000 | DONE wsp | na  8 16 |        |             |
1269:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1270:000 | DONE ins | na  8 16 | 0063b3 | c9 03       |                 cmp.# AscCC          
1271:000 | DONE ins | na  8 16 | 0063b5 | d0 03       |                 bne 0063ba           
1272:000 | DONE ins | na  8 16 | 0063b7 | 4c 97 60    |                 jmp 006097           
1273:000 | DONE lbl | na  8 16 | 0063ba |             | @                                    
1274:000 | DONE ins | na  8 16 | 0063ba | c9 1b       |                 cmp.# AscESC         
1275:000 | DONE ins | na  8 16 | 0063bc | d0 03       |                 bne 0063c1           
1276:000 | DONE ins | na  8 16 | 0063be | 4c 97 60    |                 jmp 006097           
1277:000 | DONE lbl | na  8 16 | 0063c1 |             | @                                    
1278:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1279:000 | DONE ins | na  8 16 | 0063c1 | c9 10       |                 cmp.# AscCP          
1280:000 | DONE ins | na  8 16 | 0063c3 | d0 0c       |                 bne 0063d1           
1281:000 | DONE ins | na  8 16 | 0063c5 | c2 20       |                 rep 20               
1281:001 | DONE ctl | na 16 16 |        |             |         .!a16
1282:000 | DONE ins | na 16 16 | 0063c7 | a9 a9 78    |                 lda.# 0078a9         
1283:000 | DONE ins | na 16 16 | 0063ca | 20 12 72    |                 jsr 007212           
1284:000 | DONE ins | na 16 16 | 0063cd | e2 20       |                 sep 20               
1284:001 | DONE ctl | na  8 16 |        |             |         .!a8
1285:000 | DONE ins | na  8 16 | 0063cf | 80 cf       |                 bra 0063a0           
1286:000 | DONE lbl | na  8 16 | 0063d1 |             | @                                    
1287:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1288:000 | DONE ins | na  8 16 | 0063d1 | c9 0e       |                 cmp.# AscCN          
1289:000 | DONE ins | na  8 16 | 0063d3 | d0 0c       |                 bne 0063e1           
1290:000 | DONE ins | na  8 16 | 0063d5 | c2 20       |                 rep 20               
1290:001 | DONE ctl | na 16 16 |        |             |         .!a16
1291:000 | DONE ins | na 16 16 | 0063d7 | a9 bc 78    |                 lda.# 0078bc         
1292:000 | DONE ins | na 16 16 | 0063da | 20 12 72    |                 jsr 007212           
1293:000 | DONE ins | na 16 16 | 0063dd | e2 20       |                 sep 20               
1293:001 | DONE ctl | na  8 16 |        |             |         .!a8
1294:000 | DONE ins | na  8 16 | 0063df | 80 bf       |                 bra 0063a0           
1295:000 | DONE wsp | na  8 16 |        |             |
1296:000 | DONE lbl | na  8 16 | 0063e1 |             | @                                    
1297:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
1298:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
1299:000 | DONE ins | na  8 16 | 0063e1 | 20 36 60    |                 jsr 006036           echo character
1300:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1301:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
1302:000 | DONE wsp | na  8 16 |        |             |
1303:000 | DONE ins | na  8 16 | 0063e4 | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
1304:000 | DONE ins | na  8 16 | 0063e6 | c8          |                 iny                  
1305:000 | DONE ins | na  8 16 | 0063e7 | c4 18       |                 cpy.d 000218         reached character limit?
1306:000 | DONE ins | na  8 16 | 0063e9 | d0 b5       |                 bne 0063a0           fall thru if buffer limit reached
1307:000 | DONE wsp | na  8 16 |        |             |
1308:000 | DONE lbl | na  8 16 | 0063eb |             | accept_eol                           
1309:000 | DONE ins | na  8 16 | 0063eb | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
1310:000 | DONE ins | na  8 16 | 0063ed | c2 20       |                 rep 20               
1310:001 | DONE ctl | na 16 16 |        |             |         .!a16
1311:000 | DONE ins | na 16 16 | 0063ef | 20 f5 69    |                 jsr 0069f5           print final space
1312:000 | DONE ins | na 16 16 | 0063f2 | 60          |                 rts                  this is the actual return of the routine
1313:000 | DONE wsp | na 16 16 |        |             |
1314:000 | DONE lbl | na 16 16 | 0063f3 |             | accept_bs                            
1315:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1316:000 | DONE ins | na  8 16 | 0063f3 | c0 00 00    |                 cpy.# 0000           buffer empty?
1317:000 | DONE ins | na  8 16 | 0063f6 | d0 06       |                 bne 0063fe           
1318:000 | DONE wsp | na  8 16 |        |             |
1319:000 | DONE ins | na  8 16 | 0063f8 | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
1320:000 | DONE ins | na  8 16 | 0063fa | 20 36 60    |                 jsr 006036           
1321:000 | DONE ins | na  8 16 | 0063fd | c8          |                 iny                  
1322:000 | DONE lbl | na  8 16 | 0063fe |             | @                                    
1323:000 | DONE ins | na  8 16 | 0063fe | 88          |                 dey                  
1324:000 | DONE ins | na  8 16 | 0063ff | a9 08       |                 lda.# AscBS          move back one
1325:000 | DONE ins | na  8 16 | 006401 | 20 36 60    |                 jsr 006036           
1326:000 | DONE ins | na  8 16 | 006404 | a9 20       |                 lda.# AscSP          print a space (rubout)
1327:000 | DONE ins | na  8 16 | 006406 | 20 36 60    |                 jsr 006036           
1328:000 | DONE ins | na  8 16 | 006409 | a9 08       |                 lda.# AscBS          move back over space
1329:000 | DONE ins | na  8 16 | 00640b | 20 36 60    |                 jsr 006036           
1330:000 | DONE wsp | na  8 16 |        |             |
1331:000 | DONE ins | na  8 16 | 00640e | 80 90       |                 bra 0063a0           
1332:000 | DONE wsp | na  8 16 |        |             |
1333:000 | DONE lbl | na  8 16 | 006410 |             | z_accept                             
1333:001 | DONE ins | na  8 16 | 006410 | 60          |                 rts                  
1334:000 | DONE wsp | na  8 16 |        |             |
1335:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1336:000 | DONE cmt | na  8 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1337:000 | DONE cmt | na  8 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1338:000 | DONE cmt | na  8 16 |        |             | ; instead of BRA to make sure we have the range.
1339:000 | DONE cmt | na  8 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1340:000 | DONE lbl | na  8 16 | 006411 |             | xt_again                             
1341:000 | DONE wsp | na  8 16 |        |             |
1342:000 | DONE cmt | na  8 16 |        |             |                 ; Add the opcode for a JMP
1343:000 | DONE ins | na  8 16 | 006411 | e2 20       |                 sep 20               
1343:001 | DONE ctl | na  8 16 |        |             |         .!a8
1344:000 | DONE ins | na  8 16 | 006413 | a9 4c       |                 lda.# 4c             
1345:000 | DONE ins | na  8 16 | 006415 | 92 00       |                 sta.di 000200        STA (CP)
1346:000 | DONE ins | na  8 16 | 006417 | c2 20       |                 rep 20               
1346:001 | DONE ctl | na 16 16 |        |             |         .!a16
1347:000 | DONE ins | na 16 16 | 006419 | e6 00       |                 inc.d 000200         
1348:000 | DONE wsp | na 16 16 |        |             |
1349:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1350:000 | DONE ins | na 16 16 | 00641b | 98          |                 tya                  
1351:000 | DONE ins | na 16 16 | 00641c | 92 00       |                 sta.di 000200        
1352:000 | DONE ins | na 16 16 | 00641e | e6 00       |                 inc.d 000200         
1353:000 | DONE ins | na 16 16 | 006420 | e6 00       |                 inc.d 000200         
1354:000 | DONE wsp | na 16 16 |        |             |
1355:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1356:000 | DONE ins | na 16 16 | 006422 | b4 00       |                 ldy.dx 00            
1357:000 | DONE ins | na 16 16 | 006424 | e8          |                 inx                  
1358:000 | DONE ins | na 16 16 | 006425 | e8          |                 inx                  
1359:000 | DONE wsp | na 16 16 |        |             |
1360:000 | DONE lbl | na 16 16 | 006426 |             | z_again                              
1360:001 | DONE ins | na 16 16 | 006426 | 60          |                 rts                  
1361:000 | DONE wsp | na 16 16 |        |             |
1362:000 | DONE wsp | na 16 16 |        |             |
1363:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1364:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1365:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1366:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1367:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1368:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1369:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1370:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1371:000 | DONE lbl | na 16 16 | 006427 |             | xt_allot                             
1372:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1373:000 | DONE ins | na 16 16 | 006427 | 98          |                 tya                  force flag check
1374:000 | DONE ins | na 16 16 | 006428 | f0 21       |                 beq 00644b           zero bytes, don't do anything
1375:000 | DONE ins | na 16 16 | 00642a | 30 12       |                 bmi 00643e           free memory instead of reserving it
1376:000 | DONE wsp | na 16 16 |        |             |
1377:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1378:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1379:000 | DONE ins | na 16 16 | 00642c | 18          |                 clc                  
1380:000 | DONE ins | na 16 16 | 00642d | 65 00       |                 adc.d 000200         create new CP
1381:000 | DONE ins | na 16 16 | 00642f | b0 07       |                 bcs 006438           oops, we've wrapped
1382:000 | DONE wsp | na 16 16 |        |             |
1383:000 | DONE ins | na 16 16 | 006431 | a8          |                 tay                  save copy of new CP
1384:000 | DONE wsp | na 16 16 |        |             |
1385:000 | DONE ins | na 16 16 | 006432 | 38          |                 sec                  
1386:000 | DONE ins | na 16 16 | 006433 | e9 ff 7b    |                 sbc.# 007bff         
1387:000 | DONE ins | na 16 16 | 006436 | 30 11       |                 bmi 006449           oops, fall thru if beyond max RAM
1388:000 | DONE wsp | na 16 16 |        |             |
1389:000 | DONE lbl | na 16 16 | 006438 |             | allot_error                          
1390:000 | DONE ins | na 16 16 | 006438 | a9 55 77    |                 lda.# 007755         
1391:000 | DONE ins | na 16 16 | 00643b | 4c 0c 72    |                 jmp 00720c           
1392:000 | DONE wsp | na 16 16 |        |             |
1393:000 | DONE lbl | na 16 16 | 00643e |             | allot_minus                          
1394:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1395:000 | DONE ins | na 16 16 | 00643e | 38          |                 sec                  
1396:000 | DONE ins | na 16 16 | 00643f | e5 00       |                 sbc.d 000200         
1397:000 | DONE ins | na 16 16 | 006441 | 90 f5       |                 bcc 006438           oops, we've wrapped
1398:000 | DONE wsp | na 16 16 |        |             |
1399:000 | DONE ins | na 16 16 | 006443 | a8          |                 tay                  
1400:000 | DONE wsp | na 16 16 |        |             |
1401:000 | DONE ins | na 16 16 | 006444 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1402:000 | DONE ins | na 16 16 | 006447 | 30 ef       |                 bmi 006438           oops, gone too far back
1403:000 | DONE wsp | na 16 16 |        |             |
1404:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1405:000 | DONE lbl | na 16 16 | 006449 |             | allot_done                           
1406:000 | DONE ins | na 16 16 | 006449 | 84 00       |                 sty.d 000200         new compiler pointer
1407:000 | DONE lbl | na 16 16 | 00644b |             | allot_real_gone                      
1408:000 | DONE ins | na 16 16 | 00644b | b4 00       |                 ldy.dx 00            DROP
1409:000 | DONE ins | na 16 16 | 00644d | e8          |                 inx                  
1410:000 | DONE ins | na 16 16 | 00644e | e8          |                 inx                  
1411:000 | DONE wsp | na 16 16 |        |             |
1412:000 | DONE lbl | na 16 16 | 00644f |             | z_allot                              
1412:001 | DONE ins | na 16 16 | 00644f | 60          |                 rts                  
1413:000 | DONE wsp | na 16 16 |        |             |
1414:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1415:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1416:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1417:000 | DONE lbl | na 16 16 | 006450 |             | xt_and                               
1418:000 | DONE ins | na 16 16 | 006450 | 98          |                 tya                  
1419:000 | DONE ins | na 16 16 | 006451 | 35 00       |                 and.dx 00            
1420:000 | DONE ins | na 16 16 | 006453 | a8          |                 tay                  
1421:000 | DONE wsp | na 16 16 |        |             |
1422:000 | DONE ins | na 16 16 | 006454 | e8          |                 inx                  NIP
1423:000 | DONE ins | na 16 16 | 006455 | e8          |                 inx                  
1424:000 | DONE wsp | na 16 16 |        |             |
1425:000 | DONE lbl | na 16 16 | 006456 |             | z_and                                
1425:001 | DONE ins | na 16 16 | 006456 | 60          |                 rts                  
1426:000 | DONE wsp | na 16 16 |        |             |
1427:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1428:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1429:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1430:000 | DONE lbl | na 16 16 | 006457 |             | xt_base                              
1431:000 | DONE ins | na 16 16 | 006457 | ca          |                 dex                  
1432:000 | DONE ins | na 16 16 | 006458 | ca          |                 dex                  
1433:000 | DONE ins | na 16 16 | 006459 | 94 00       |                 sty.dx 00            
1434:000 | DONE wsp | na 16 16 |        |             |
1435:000 | DONE ins | na 16 16 | 00645b | a0 1c 02    |                 ldy.# 00021c         
1436:000 | DONE wsp | na 16 16 |        |             |
1437:000 | DONE lbl | na 16 16 | 00645e |             | z_base                               
1437:001 | DONE ins | na 16 16 | 00645e | 60          |                 rts                  
1438:000 | DONE wsp | na 16 16 |        |             |
1439:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1440:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1441:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1442:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1443:000 | DONE lbl | na 16 16 | 00645f |             | xt_bell                              
1444:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1445:000 | DONE ins | na 16 16 | 00645f | a9 07 00    |                 lda.# AscBELL        
1446:000 | DONE ins | na 16 16 | 006462 | 20 36 60    |                 jsr 006036           
1447:000 | DONE wsp | na 16 16 |        |             |
1448:000 | DONE lbl | na 16 16 | 006465 |             | z_bell                               
1448:001 | DONE ins | na 16 16 | 006465 | 60          |                 rts                  
1449:000 | DONE wsp | na 16 16 |        |             |
1450:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1451:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1452:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1453:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1454:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1455:000 | DONE lbl | na 16 16 | 006466 |             | xt_begin                             
1456:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1457:000 | DONE ins | na 16 16 | 006466 | ca          |                 dex                  
1458:000 | DONE ins | na 16 16 | 006467 | ca          |                 dex                  
1459:000 | DONE ins | na 16 16 | 006468 | 94 00       |                 sty.dx 00            
1460:000 | DONE wsp | na 16 16 |        |             |
1461:000 | DONE ins | na 16 16 | 00646a | a4 00       |                 ldy.d 000200         
1462:000 | DONE wsp | na 16 16 |        |             |
1463:000 | DONE lbl | na 16 16 | 00646c |             | z_begin                              
1463:001 | DONE ins | na 16 16 | 00646c | 60          |                 rts                  
1464:000 | DONE wsp | na 16 16 |        |             |
1465:000 | DONE wsp | na 16 16 |        |             |
1466:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1467:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1468:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1469:000 | DONE lbl | na 16 16 | 00646d |             | xt_bl                                
1470:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1471:000 | DONE ins | na 16 16 | 00646d | ca          |                 dex                  
1472:000 | DONE ins | na 16 16 | 00646e | ca          |                 dex                  
1473:000 | DONE ins | na 16 16 | 00646f | 94 00       |                 sty.dx 00            
1474:000 | DONE ins | na 16 16 | 006471 | a0 20 00    |                 ldy.# AscSP          
1475:000 | DONE wsp | na 16 16 |        |             |
1476:000 | DONE lbl | na 16 16 | 006474 |             | z_bl                                 
1476:001 | DONE ins | na 16 16 | 006474 | 60          |                 rts                  
1477:000 | DONE wsp | na 16 16 |        |             |
1478:000 | DONE wsp | na 16 16 |        |             |
1479:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1480:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1481:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. Uses tmp3 and tmptos
1482:000 | DONE lbl | na 16 16 | 006475 |             | xt_branch                            
1483:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1484:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1485:000 | DONE ins | na 16 16 | 006475 | f4 7c 64    |                 phe.# 00647c         
1486:000 | DONE ins | na 16 16 | 006478 | 20 eb 71    |                 jsr 0071eb           
1487:000 | DONE wsp | na 16 16 |        |             |
1488:000 | DONE lbl | na 16 16 | 00647b |             | z_branch                             
1488:001 | DONE ins | na 16 16 | 00647b | 60          |                 rts                  
1489:000 | DONE wsp | na 16 16 |        |             |
1490:000 | DONE lbl | na 16 16 | 00647c |             | branch_rt                            
1491:000 | DONE ins | na 16 16 | 00647c | 84 06       |                 sty.d 000206         
1492:000 | DONE wsp | na 16 16 |        |             |
1493:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1494:000 | DONE ins | na 16 16 | 00647e | 68          |                 pla                  
1495:000 | DONE ins | na 16 16 | 00647f | 85 1a       |                 sta.d 00021a         
1496:000 | DONE ins | na 16 16 | 006481 | a0 01 00    |                 ldy.# 0001           
1497:000 | DONE ins | na 16 16 | 006484 | b1 1a       |                 lda.diy 00021a       LDA (TMP1),Y ; get address we're pointing to
1498:000 | DONE ins | na 16 16 | 006486 | 3a          |                 dec.a                
1499:000 | DONE ins | na 16 16 | 006487 | 48          |                 pha                  put target address back on Return Stack
1500:000 | DONE wsp | na 16 16 |        |             |
1501:000 | DONE ins | na 16 16 | 006488 | a4 06       |                 ldy.d 000206         
1502:000 | DONE wsp | na 16 16 |        |             |
1503:000 | DONE ins | na 16 16 | 00648a | 60          |                 rts                  
1504:000 | DONE wsp | na 16 16 |        |             |
1505:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1506:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1507:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1508:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
1509:000 | DONE lbl | na 16 16 | 00648b |             | xt_bye                               
1510:000 | DONE ins | na 16 16 | 00648b | 58          |                 cli                  
1511:000 | DONE ins | na 16 16 | 00648c | 00 00       |                 brk 00               status byte 00 required for assembler
1512:000 | DONE wsp | na 16 16 |        |             |
1513:000 | DONE lbl | na 16 16 | 00648e |             | z_bye                                
1513:001 | DONE ins | na 16 16 | 00648e | 60          |                 rts                  dummy for compiling, never reached
1514:000 | DONE wsp | na 16 16 |        |             |
1515:000 | DONE wsp | na 16 16 |        |             |
1516:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1517:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1518:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
1519:000 | DONE lbl | na 16 16 | 00648f |             | xt_c-comma                           
1520:000 | DONE ins | na 16 16 | 00648f | 98          |                 tya                  
1521:000 | DONE ins | na 16 16 | 006490 | e2 20       |                 sep 20               
1521:001 | DONE ctl | na  8 16 |        |             |         .!a8
1522:000 | DONE ins | na  8 16 | 006492 | 92 00       |                 sta.di 000200        STA (CP)
1523:000 | DONE ins | na  8 16 | 006494 | c2 20       |                 rep 20               
1523:001 | DONE ctl | na 16 16 |        |             |         .!a16
1524:000 | DONE ins | na 16 16 | 006496 | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
1525:000 | DONE wsp | na 16 16 |        |             |
1526:000 | DONE ins | na 16 16 | 006498 | b4 00       |                 ldy.dx 00            
1527:000 | DONE ins | na 16 16 | 00649a | e8          |                 inx                  
1528:000 | DONE ins | na 16 16 | 00649b | e8          |                 inx                  
1529:000 | DONE wsp | na 16 16 |        |             |
1530:000 | DONE lbl | na 16 16 | 00649c |             | z_c-comma                            
1530:001 | DONE ins | na 16 16 | 00649c | 60          |                 rts                  
1531:000 | DONE wsp | na 16 16 |        |             |
1532:000 | DONE wsp | na 16 16 |        |             |
1533:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1534:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1535:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
1536:000 | DONE lbl | na 16 16 | 00649d |             | xt_c-fetch                           
1537:000 | DONE ins | na 16 16 | 00649d | e2 20       |                 sep 20               
1537:001 | DONE ctl | na  8 16 |        |             |         .!a8
1538:000 | DONE ins | na  8 16 | 00649f | b9 00 00    |                 lda.y 0000           
1539:000 | DONE ins | na  8 16 | 0064a2 | c2 20       |                 rep 20               
1539:001 | DONE ctl | na 16 16 |        |             |         .!a16
1540:000 | DONE ins | na 16 16 | 0064a4 | 29 ff 00    |                 and.# 00ff           
1541:000 | DONE ins | na 16 16 | 0064a7 | a8          |                 tay                  
1542:000 | DONE wsp | na 16 16 |        |             |
1543:000 | DONE lbl | na 16 16 | 0064a8 |             | z_c-fetch                            
1543:001 | DONE ins | na 16 16 | 0064a8 | 60          |                 rts                  
1544:000 | DONE wsp | na 16 16 |        |             |
1545:000 | DONE wsp | na 16 16 |        |             |
1546:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1547:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1548:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
1549:000 | DONE lbl | na 16 16 | 0064a9 |             | xt_c-store                           
1550:000 | DONE ins | na 16 16 | 0064a9 | b5 00       |                 lda.dx 00            
1551:000 | DONE ins | na 16 16 | 0064ab | e2 20       |                 sep 20               
1551:001 | DONE ctl | na  8 16 |        |             |         .!a8
1552:000 | DONE ins | na  8 16 | 0064ad | 99 00 00    |                 sta.y 0000           
1553:000 | DONE ins | na  8 16 | 0064b0 | c2 20       |                 rep 20               
1553:001 | DONE ctl | na 16 16 |        |             |         .!a16
1554:000 | DONE ins | na 16 16 | 0064b2 | b4 02       |                 ldy.dx 02            
1555:000 | DONE ins | na 16 16 | 0064b4 | e8          |                 inx                  
1556:000 | DONE ins | na 16 16 | 0064b5 | e8          |                 inx                  
1557:000 | DONE ins | na 16 16 | 0064b6 | e8          |                 inx                  
1558:000 | DONE ins | na 16 16 | 0064b7 | e8          |                 inx                  
1559:000 | DONE wsp | na 16 16 |        |             |
1560:000 | DONE lbl | na 16 16 | 0064b8 |             | z_c-store                            
1560:001 | DONE ins | na 16 16 | 0064b8 | 60          |                 rts                  
1561:000 | DONE wsp | na 16 16 |        |             |
1562:000 | DONE wsp | na 16 16 |        |             |
1563:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1564:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1565:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1566:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1567:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
1568:000 | DONE wsp | na 16 16 |        |             |
1569:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1570:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1571:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
1572:000 | DONE lbl | na 16 16 | 0064b9 |             | xt_char                              
1573:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1574:000 | DONE ins | na 16 16 | 0064b9 | 20 59 68    |                 jsr 006859           ( -- addr u )
1575:000 | DONE wsp | na 16 16 |        |             |
1576:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
1577:000 | DONE ins | na 16 16 | 0064bc | 98          |                 tya                  force flag check
1578:000 | DONE ins | na 16 16 | 0064bd | d0 06       |                 bne 0064c5           
1579:000 | DONE wsp | na 16 16 |        |             |
1580:000 | DONE ins | na 16 16 | 0064bf | a9 f4 77    |                 lda.# 0077f4         
1581:000 | DONE ins | na 16 16 | 0064c2 | 4c 0c 72    |                 jmp 00720c           
1582:000 | DONE wsp | na 16 16 |        |             |
1583:000 | DONE lbl | na 16 16 | 0064c5 |             | char_got_char                        
1584:000 | DONE ins | na 16 16 | 0064c5 | b4 00       |                 ldy.dx 00            get addr from NOS
1585:000 | DONE ins | na 16 16 | 0064c7 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1586:000 | DONE ins | na 16 16 | 0064ca | 29 ff 00    |                 and.# 00ff           
1587:000 | DONE ins | na 16 16 | 0064cd | a8          |                 tay                  
1588:000 | DONE wsp | na 16 16 |        |             |
1589:000 | DONE ins | na 16 16 | 0064ce | e8          |                 inx                  
1590:000 | DONE ins | na 16 16 | 0064cf | e8          |                 inx                  
1591:000 | DONE wsp | na 16 16 |        |             |
1592:000 | DONE lbl | na 16 16 | 0064d0 |             | z_char                               
1592:001 | DONE ins | na 16 16 | 0064d0 | 60          |                 rts                  
1593:000 | DONE wsp | na 16 16 |        |             |
1594:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1595:000 | DONE cmt | na 16 16 |        |             | ; CHAR>NUMBER ( char -- u f | char f )  X bytes / X cycles
1596:000 | DONE cmt | na 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
1597:000 | DONE cmt | na 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
1598:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
1599:000 | DONE cmt | na 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
1600:000 | DONE cmt | na 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it
1601:000 | DONE lbl | na 16 16 | 0064d1 |             | xt_char-num                          
1602:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1603:000 | DONE ins | na 16 16 | 0064d1 | 98          |                 tya                  
1604:000 | DONE ins | na 16 16 | 0064d2 | 29 ff 00    |                 and.# 00ff           paranoid
1605:000 | DONE wsp | na 16 16 |        |             |
1606:000 | DONE ins | na 16 16 | 0064d5 | e2 20       |                 sep 20               
1606:001 | DONE ctl | na  8 16 |        |             |         .!a8
1607:000 | DONE cmt | na  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
1608:000 | DONE ins | na  8 16 | 0064d7 | c9 30       |                 cmp.# 30             
1609:000 | DONE ins | na  8 16 | 0064d9 | 90 1d       |                 bcc 0064f8           
1610:000 | DONE wsp | na  8 16 |        |             |
1611:000 | DONE cmt | na  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
1612:000 | DONE cmt | na  8 16 |        |             |                 ; a normal number
1613:000 | DONE ins | na  8 16 | 0064db | c9 3a       |                 cmp.# 00003a         This is ':'
1614:000 | DONE ins | na  8 16 | 0064dd | 90 12       |                 bcc 0064f1           
1615:000 | DONE wsp | na  8 16 |        |             |
1616:000 | DONE cmt | na  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
1617:000 | DONE cmt | na  8 16 |        |             |                 ; we can treat the whole range as a number
1618:000 | DONE ins | na  8 16 | 0064df | c9 40       |                 cmp.# 000040         This is '@'
1619:000 | DONE ins | na  8 16 | 0064e1 | 90 15       |                 bcc 0064f8           
1620:000 | DONE wsp | na  8 16 |        |             |
1621:000 | DONE cmt | na  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
1622:000 | DONE ins | na  8 16 | 0064e3 | c9 61       |                 cmp.# 61             
1623:000 | DONE ins | na  8 16 | 0064e5 | 90 07       |                 bcc 0064ee           not lower case, too low
1624:000 | DONE ins | na  8 16 | 0064e7 | c9 7b       |                 cmp.# 00007b         
1625:000 | DONE ins | na  8 16 | 0064e9 | b0 03       |                 bcs 0064ee           not lower case, too high
1626:000 | DONE wsp | na  8 16 |        |             |
1627:000 | DONE ins | na  8 16 | 0064eb | 18          |                 clc                  just right
1628:000 | DONE ins | na  8 16 | 0064ec | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
1629:000 | DONE wsp | na  8 16 |        |             |
1630:000 | DONE lbl | na  8 16 | 0064ee |             | cn_case_done                         
1631:000 | DONE cmt | na  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
1632:000 | DONE cmt | na  8 16 |        |             |                 ; whole range as one number
1633:000 | DONE ins | na  8 16 | 0064ee | 38          |                 sec                  
1634:000 | DONE ins | na  8 16 | 0064ef | e9 07       |                 sbc.# 07             fall through to cn_checkbase
1635:000 | DONE wsp | na  8 16 |        |             |
1636:000 | DONE lbl | na  8 16 | 0064f1 |             | cn_checkbase                         
1637:000 | DONE cmt | na  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
1638:000 | DONE ins | na  8 16 | 0064f1 | 38          |                 sec                  
1639:000 | DONE ins | na  8 16 | 0064f2 | e9 30       |                 sbc.# 30             This is also the actual conversion step
1640:000 | DONE ins | na  8 16 | 0064f4 | c5 1c       |                 cmp.d 00021c         
1641:000 | DONE ins | na  8 16 | 0064f6 | 90 0b       |                 bcc 006503           
1642:000 | DONE wsp | na  8 16 |        |             |
1643:000 | DONE lbl | na  8 16 | 0064f8 |             | cn_notdigit                          
1644:000 | DONE cmt | na  8 16 |        |             |                 ; not a digit, add a false flag
1645:000 | DONE ins | na  8 16 | 0064f8 | ca          |                 dex                  
1646:000 | DONE ins | na  8 16 | 0064f9 | ca          |                 dex                  
1647:000 | DONE ins | na  8 16 | 0064fa | 94 00       |                 sty.dx 00            keep the offending character in NOS
1648:000 | DONE ins | na  8 16 | 0064fc | a0 00 00    |                 ldy.# 0000           
1649:000 | DONE ins | na  8 16 | 0064ff | c2 20       |                 rep 20               
1649:001 | DONE ctl | na 16 16 |        |             |         .!a16
1650:000 | DONE ins | na 16 16 | 006501 | 80 09       |                 bra 00650c           
1651:000 | DONE wsp | na 16 16 |        |             |
1652:000 | DONE lbl | na 16 16 | 006503 |             | cn_success                           
1653:000 | DONE ins | na 16 16 | 006503 | ca          |                 dex                  
1654:000 | DONE ins | na 16 16 | 006504 | ca          |                 dex                  
1655:000 | DONE ins | na 16 16 | 006505 | c2 20       |                 rep 20               
1655:001 | DONE ctl | na 16 16 |        |             |         .!a16
1656:000 | DONE ins | na 16 16 | 006507 | 95 00       |                 sta.dx 00            put the number in NOS
1657:000 | DONE ins | na 16 16 | 006509 | a0 ff ff    |                 ldy.# 0ffff          
1658:000 | DONE wsp | na 16 16 |        |             |
1659:000 | DONE lbl | na 16 16 | 00650c |             | z_char-num                           
1659:001 | DONE ins | na 16 16 | 00650c | 60          |                 rts                  
1660:000 | DONE wsp | na 16 16 |        |             |
1661:000 | DONE wsp | na 16 16 |        |             |
1662:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1663:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1664:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1665:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1666:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1667:000 | DONE lbl | na 16 16 | 00650d |             | xt_compile-only                      
1668:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1669:000 | DONE ins | na 16 16 | 00650d | a9 04 00    |                 lda.# CO             
1670:000 | DONE ins | na 16 16 | 006510 | eb          |                 xba                  flags are MSB
1671:000 | DONE ins | na 16 16 | 006511 | 12 02       |                 ora.di 000202        ORA (DP)
1672:000 | DONE ins | na 16 16 | 006513 | 92 02       |                 sta.di 000202        
1673:000 | DONE wsp | na 16 16 |        |             |
1674:000 | DONE lbl | na 16 16 | 006515 |             | z_compile-only                       
1674:001 | DONE ins | na 16 16 | 006515 | 60          |                 rts                  
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE wsp | na 16 16 |        |             |
1677:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1678:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1679:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1680:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1681:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1682:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1683:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1684:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1685:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1686:000 | DONE cmt | na 16 16 |        |             | ; TODO currently just compiles subroutine jumps
1687:000 | DONE lbl | na 16 16 | 006516 |             | xt_compilecomma                      
1688:000 | DONE wsp | na 16 16 |        |             |
1689:000 | DONE lbl | na 16 16 | 006516 |             | compile_as_code                      
1690:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1691:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1692:000 | DONE cmt | na 16 16 |        |             |                 ; TODO consider special cases:
1693:000 | DONE cmt | na 16 16 |        |             |                 ;  - >R R> R@ should strip PLA/PHA if native compiled
1694:000 | DONE cmt | na 16 16 |        |             |                 ;  - Don't compile comments
1695:000 | DONE wsp | na 16 16 |        |             |
1696:000 | DONE lbl | na 16 16 | 006516 |             | compile_as_jump                      
1697:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
1698:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
1699:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
1700:000 | DONE cmt | na 16 16 |        |             |                 ; win!
1701:000 | DONE ins | na 16 16 | 006516 | a9 20 00    |                 lda.# 20             opcode for JSR
1702:000 | DONE ins | na 16 16 | 006519 | 92 00       |                 sta.di 000200        STA (CP)
1703:000 | DONE ins | na 16 16 | 00651b | e6 00       |                 inc.d 000200         
1704:000 | DONE wsp | na 16 16 |        |             |
1705:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1706:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1707:000 | DONE ins | na 16 16 | 00651d | 98          |                 tya                  
1708:000 | DONE ins | na 16 16 | 00651e | 92 00       |                 sta.di 000200        
1709:000 | DONE ins | na 16 16 | 006520 | e6 00       |                 inc.d 000200         
1710:000 | DONE ins | na 16 16 | 006522 | e6 00       |                 inc.d 000200         
1711:000 | DONE wsp | na 16 16 |        |             |
1712:000 | DONE ins | na 16 16 | 006524 | b4 00       |                 ldy.dx 00            
1713:000 | DONE ins | na 16 16 | 006526 | e8          |                 inx                  
1714:000 | DONE ins | na 16 16 | 006527 | e8          |                 inx                  
1715:000 | DONE wsp | na 16 16 |        |             |
1716:000 | DONE lbl | na 16 16 | 006528 |             | z_compilecomma                       
1716:001 | DONE ins | na 16 16 | 006528 | 60          |                 rts                  
1717:000 | DONE wsp | na 16 16 |        |             |
1718:000 | DONE wsp | na 16 16 |        |             |
1719:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1720:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1721:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1722:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1723:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1724:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1725:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1726:000 | DONE lbl | na 16 16 | 006529 |             | xt_constant                          
1727:000 | DONE ins | na 16 16 | 006529 | 20 59 65    |                 jsr 006559           
1728:000 | DONE wsp | na 16 16 |        |             |
1729:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1730:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1731:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1732:000 | DONE ins | na 16 16 | 00652c | a5 00       |                 lda.d 000200         
1733:000 | DONE ins | na 16 16 | 00652e | 3a          |                 dec.a                
1734:000 | DONE ins | na 16 16 | 00652f | 3a          |                 dec.a                
1735:000 | DONE ins | na 16 16 | 006530 | 85 16       |                 sta.d 000216         
1736:000 | DONE wsp | na 16 16 |        |             |
1737:000 | DONE ins | na 16 16 | 006532 | a9 6f 71    |                 lda.# 00716f         
1738:000 | DONE ins | na 16 16 | 006535 | 92 16       |                 sta.di 000216        STA (TMP1)
1739:000 | DONE wsp | na 16 16 |        |             |
1740:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1741:000 | DONE ins | na 16 16 | 006537 | 98          |                 tya                  there is no "sty.di cp"
1742:000 | DONE ins | na 16 16 | 006538 | 92 00       |                 sta.di 000200        
1743:000 | DONE ins | na 16 16 | 00653a | e6 00       |                 inc.d 000200         
1744:000 | DONE ins | na 16 16 | 00653c | e6 00       |                 inc.d 000200         
1745:000 | DONE wsp | na 16 16 |        |             |
1746:000 | DONE ins | na 16 16 | 00653e | b4 00       |                 ldy.dx 00            DROP
1747:000 | DONE ins | na 16 16 | 006540 | e8          |                 inx                  
1748:000 | DONE ins | na 16 16 | 006541 | e8          |                 inx                  
1749:000 | DONE wsp | na 16 16 |        |             |
1750:000 | DONE lbl | na 16 16 | 006542 |             | z_constant                           
1750:001 | DONE ins | na 16 16 | 006542 | 60          |                 rts                  
1751:000 | DONE wsp | na 16 16 |        |             |
1752:000 | DONE wsp | na 16 16 |        |             |
1753:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1754:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1755:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1756:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
1757:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
1758:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
1759:000 | DONE lbl | na 16 16 | 006543 |             | xt_count                             
1760:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1761:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1762:000 | DONE ins | na 16 16 | 006543 | 98          |                 tya                  
1763:000 | DONE ins | na 16 16 | 006544 | 1a          |                 inc.a                String address starts one char later
1764:000 | DONE wsp | na 16 16 |        |             |
1765:000 | DONE ins | na 16 16 | 006545 | ca          |                 dex                  
1766:000 | DONE ins | na 16 16 | 006546 | ca          |                 dex                  
1767:000 | DONE ins | na 16 16 | 006547 | 95 00       |                 sta.dx 00            NOS
1768:000 | DONE wsp | na 16 16 |        |             |
1769:000 | DONE ins | na 16 16 | 006549 | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
1770:000 | DONE ins | na 16 16 | 00654c | eb          |                 xba                  move length to LSB
1771:000 | DONE ins | na 16 16 | 00654d | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
1772:000 | DONE ins | na 16 16 | 006550 | a8          |                 tay                  TOS
1773:000 | DONE wsp | na 16 16 |        |             |
1774:000 | DONE lbl | na 16 16 | 006551 |             | z_count                              
1774:001 | DONE ins | na 16 16 | 006551 | 60          |                 rts                  
1775:000 | DONE wsp | na 16 16 |        |             |
1776:000 | DONE wsp | na 16 16 |        |             |
1777:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1778:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
1779:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
1780:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1781:000 | DONE lbl | na 16 16 | 006552 |             | xt_cr                                
1782:000 | DONE ins | na 16 16 | 006552 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
1783:000 | DONE ins | na 16 16 | 006555 | 20 36 60    |                 jsr 006036           
1784:000 | DONE wsp | na 16 16 |        |             |
1785:000 | DONE lbl | na 16 16 | 006558 |             | z_cr                                 
1785:001 | DONE ins | na 16 16 | 006558 | 60          |                 rts                  
1786:000 | DONE wsp | na 16 16 |        |             |
1787:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1788:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
1789:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
1790:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
1791:000 | DONE cmt | na 16 16 |        |             | ; address.
1792:000 | DONE lbl | na 16 16 | 006559 |             | xt_create                            
1793:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1794:000 | DONE ins | na 16 16 | 006559 | 20 59 68    |                 jsr 006859           ( -- addr u )
1795:000 | DONE ins | na 16 16 | 00655c | d0 06       |                 bne 006564           
1796:000 | DONE wsp | na 16 16 |        |             |
1797:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1798:000 | DONE ins | na 16 16 | 00655e | a9 f4 77    |                 lda.# 0077f4         
1799:000 | DONE ins | na 16 16 | 006561 | 4c 0c 72    |                 jmp 00720c           
1800:000 | DONE wsp | na 16 16 |        |             |
1801:000 | DONE lbl | na 16 16 | 006564 |             | create_got_name                      
1802:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1803:000 | DONE ins | na 16 16 | 006564 | 20 45 72    |                 jsr 007245           
1804:000 | DONE wsp | na 16 16 |        |             |
1805:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1806:000 | DONE cmt | na 16 16 |        |             |                 ; word
1807:000 | DONE ins | na 16 16 | 006567 | a5 00       |                 lda.d 000200         
1808:000 | DONE ins | na 16 16 | 006569 | 85 16       |                 sta.d 000216         save start of new word
1809:000 | DONE wsp | na 16 16 |        |             |
1810:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1811:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1812:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1813:000 | DONE ins | na 16 16 | 00656b | 98          |                 tya                  
1814:000 | DONE ins | na 16 16 | 00656c | 29 ff 00    |                 and.# 00ff           
1815:000 | DONE ins | na 16 16 | 00656f | 85 18       |                 sta.d 000218         save length of name string
1816:000 | DONE wsp | na 16 16 |        |             |
1817:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1818:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1819:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1820:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1821:000 | DONE ins | na 16 16 | 006571 | 18          |                 clc                  
1822:000 | DONE ins | na 16 16 | 006572 | 69 08 00    |                 adc.# 0008           
1823:000 | DONE ins | na 16 16 | 006575 | 85 1a       |                 sta.d 00021a         total bytes required for header
1824:000 | DONE wsp | na 16 16 |        |             |
1825:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1826:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1827:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1828:000 | DONE ins | na 16 16 | 006577 | 1a          |                 inc.a                
1829:000 | DONE ins | na 16 16 | 006578 | 1a          |                 inc.a                
1830:000 | DONE ins | na 16 16 | 006579 | 1a          |                 inc.a                
1831:000 | DONE wsp | na 16 16 |        |             |
1832:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1833:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1834:000 | DONE ins | na 16 16 | 00657a | 18          |                 clc                  
1835:000 | DONE ins | na 16 16 | 00657b | 65 00       |                 adc.d 000200         
1836:000 | DONE ins | na 16 16 | 00657d | 85 00       |                 sta.d 000200         
1837:000 | DONE wsp | na 16 16 |        |             |
1838:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1839:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1840:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1841:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1842:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1843:000 | DONE ins | na 16 16 | 00657f | b5 00       |                 lda.dx 00            
1844:000 | DONE ins | na 16 16 | 006581 | 48          |                 pha                  
1845:000 | DONE wsp | na 16 16 |        |             |
1846:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1847:000 | DONE ins | na 16 16 | 006582 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1848:000 | DONE ins | na 16 16 | 006585 | a5 18       |                 lda.d 000218         get length byte
1849:000 | DONE ins | na 16 16 | 006587 | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1850:000 | DONE ins | na 16 16 | 006589 | c8          |                 iny                  
1851:000 | DONE ins | na 16 16 | 00658a | c8          |                 iny                  
1852:000 | DONE wsp | na 16 16 |        |             |
1853:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1854:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1855:000 | DONE ins | na 16 16 | 00658b | a5 02       |                 lda.d 000202         
1856:000 | DONE ins | na 16 16 | 00658d | 91 16       |                 sta.diy 000216       
1857:000 | DONE ins | na 16 16 | 00658f | c8          |                 iny                  
1858:000 | DONE ins | na 16 16 | 006590 | c8          |                 iny                  
1859:000 | DONE wsp | na 16 16 |        |             |
1860:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1861:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1862:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1863:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1864:000 | DONE ins | na 16 16 | 006591 | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1865:000 | DONE ins | na 16 16 | 006593 | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1866:000 | DONE wsp | na 16 16 |        |             |
1867:000 | DONE ins | na 16 16 | 006595 | 18          |                 clc                  
1868:000 | DONE ins | na 16 16 | 006596 | 65 1a       |                 adc.d 00021a         total header length
1869:000 | DONE ins | na 16 16 | 006598 | 91 16       |                 sta.diy 000216       
1870:000 | DONE ins | na 16 16 | 00659a | c8          |                 iny                  
1871:000 | DONE ins | na 16 16 | 00659b | c8          |                 iny                  
1872:000 | DONE wsp | na 16 16 |        |             |
1873:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1874:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1875:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1876:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1877:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1878:000 | DONE ins | na 16 16 | 00659c | 1a          |                 inc.a                
1879:000 | DONE ins | na 16 16 | 00659d | 1a          |                 inc.a                
1880:000 | DONE ins | na 16 16 | 00659e | 1a          |                 inc.a                
1881:000 | DONE ins | na 16 16 | 00659f | 91 16       |                 sta.diy 000216       
1882:000 | DONE ins | na 16 16 | 0065a1 | c8          |                 iny                  
1883:000 | DONE ins | na 16 16 | 0065a2 | c8          |                 iny                  
1884:000 | DONE wsp | na 16 16 |        |             |
1885:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1886:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1887:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1888:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1889:000 | DONE ins | na 16 16 | 0065a3 | 68          |                 pla                  get back string address
1890:000 | DONE ins | na 16 16 | 0065a4 | 38          |                 sec                  
1891:000 | DONE ins | na 16 16 | 0065a5 | e9 08 00    |                 sbc.# 0008           
1892:000 | DONE ins | na 16 16 | 0065a8 | 85 1a       |                 sta.d 00021a         
1893:000 | DONE ins | na 16 16 | 0065aa | e2 20       |                 sep 20               
1893:001 | DONE ctl | na  8 16 |        |             |         .!a8
1894:000 | DONE lbl | na  8 16 | 0065ac |             | @                                    
1895:000 | DONE ins | na  8 16 | 0065ac | b1 1a       |                 lda.diy 00021a       
1896:000 | DONE ins | na  8 16 | 0065ae | 91 16       |                 sta.diy 000216       
1897:000 | DONE ins | na  8 16 | 0065b0 | c8          |                 iny                  
1898:000 | DONE ins | na  8 16 | 0065b1 | c6 18       |                 dec.d 000218         
1899:000 | DONE ins | na  8 16 | 0065b3 | d0 f7       |                 bne 0065ac           
1900:000 | DONE wsp | na  8 16 |        |             |
1901:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1902:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1903:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1904:000 | DONE cmt | na  8 16 |        |             |                 ; good
1905:000 | DONE ins | na  8 16 | 0065b5 | a9 20       |                 lda.# 20             opcode of JSR
1906:000 | DONE ins | na  8 16 | 0065b7 | 91 16       |                 sta.diy 000216       
1907:000 | DONE ins | na  8 16 | 0065b9 | c8          |                 iny                  single increase only because we have 8-bit A
1908:000 | DONE wsp | na  8 16 |        |             |
1909:000 | DONE ins | na  8 16 | 0065ba | a9 8a       |                 lda.# .lsb 00718a    
1910:000 | DONE ins | na  8 16 | 0065bc | 91 16       |                 sta.diy 000216       
1911:000 | DONE ins | na  8 16 | 0065be | c8          |                 iny                  
1912:000 | DONE wsp | na  8 16 |        |             |
1913:000 | DONE ins | na  8 16 | 0065bf | a9 71       |                 lda.# .msb 00718a    
1914:000 | DONE ins | na  8 16 | 0065c1 | 91 16       |                 sta.diy 000216       
1915:000 | DONE wsp | na  8 16 |        |             |
1916:000 | DONE ins | na  8 16 | 0065c3 | c2 20       |                 rep 20               
1916:001 | DONE ctl | na 16 16 |        |             |         .!a16
1917:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1918:000 | DONE ins | na 16 16 | 0065c5 | b4 02       |                 ldy.dx 02            
1919:000 | DONE ins | na 16 16 | 0065c7 | e8          |                 inx                  
1920:000 | DONE ins | na 16 16 | 0065c8 | e8          |                 inx                  
1921:000 | DONE ins | na 16 16 | 0065c9 | e8          |                 inx                  
1922:000 | DONE ins | na 16 16 | 0065ca | e8          |                 inx                  
1923:000 | DONE wsp | na 16 16 |        |             |
1924:000 | DONE lbl | na 16 16 | 0065cb |             | z_create                             
1924:001 | DONE ins | na 16 16 | 0065cb | 60          |                 rts                  
1925:000 | DONE wsp | na 16 16 |        |             |
1926:000 | DONE wsp | na 16 16 |        |             |
1927:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1928:000 | DONE cmt | na 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
1929:000 | DONE cmt | na 16 16 |        |             | ; Add two double cell numbers.
1930:000 | DONE lbl | na 16 16 | 0065cc |             | xt_dplus                             
1931:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1932:000 | DONE ins | na 16 16 | 0065cc | 5a          |                 phy                  save hi word of first number, frees Y
1933:000 | DONE ins | na 16 16 | 0065cd | b5 00       |                 lda.dx 00            lo word of first number
1934:000 | DONE ins | na 16 16 | 0065cf | 18          |                 clc                  
1935:000 | DONE ins | na 16 16 | 0065d0 | 75 04       |                 adc.dx 04            add lo word of second number
1936:000 | DONE ins | na 16 16 | 0065d2 | a8          |                 tay                  
1937:000 | DONE wsp | na 16 16 |        |             |
1938:000 | DONE ins | na 16 16 | 0065d3 | 68          |                 pla                  get hi word of first number
1939:000 | DONE ins | na 16 16 | 0065d4 | 75 02       |                 adc.dx 02            add hi word of second number
1940:000 | DONE wsp | na 16 16 |        |             |
1941:000 | DONE ins | na 16 16 | 0065d6 | e8          |                 inx                  
1942:000 | DONE ins | na 16 16 | 0065d7 | e8          |                 inx                  
1943:000 | DONE ins | na 16 16 | 0065d8 | e8          |                 inx                  
1944:000 | DONE ins | na 16 16 | 0065d9 | e8          |                 inx                  
1945:000 | DONE wsp | na 16 16 |        |             |
1946:000 | DONE ins | na 16 16 | 0065da | 94 00       |                 sty.dx 00            lo result goes NOS
1947:000 | DONE ins | na 16 16 | 0065dc | a8          |                 tay                  to result goes TOS
1948:000 | DONE wsp | na 16 16 |        |             |
1949:000 | DONE lbl | na 16 16 | 0065dd |             | z_dplus                              
1949:001 | DONE ins | na 16 16 | 0065dd | 60          |                 rts                  
1950:000 | DONE wsp | na 16 16 |        |             |
1951:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1952:000 | DONE cmt | na 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
1953:000 | DONE cmt | na 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
1954:000 | DONE cmt | na 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
1955:000 | DONE cmt | na 16 16 |        |             | ; TODO make this work the way Gforth's does
1956:000 | DONE lbl | na 16 16 | 0065de |             | xt_dtos                              
1957:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1958:000 | DONE ins | na 16 16 | 0065de | b4 00       |                 ldy.dx 00            
1959:000 | DONE ins | na 16 16 | 0065e0 | e8          |                 inx                  
1960:000 | DONE ins | na 16 16 | 0065e1 | e8          |                 inx                  
1961:000 | DONE wsp | na 16 16 |        |             |
1962:000 | DONE lbl | na 16 16 | 0065e2 |             | z_dtos                               
1962:001 | DONE ins | na 16 16 | 0065e2 | 60          |                 rts                  
1963:000 | DONE wsp | na 16 16 |        |             |
1964:000 | DONE wsp | na 16 16 |        |             |
1965:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1966:000 | DONE cmt | na 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
1967:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a double number
1968:000 | DONE cmt | na 16 16 |        |             | ; TODO recode in assembler
1969:000 | DONE lbl | na 16 16 | 0065e3 |             | xt_dabs                              
1970:000 | DONE cmt | na 16 16 |        |             |                 ; double cell is TOS
1971:000 | DONE ins | na 16 16 | 0065e3 | 98          |                 tya                  force flag test
1972:000 | DONE ins | na 16 16 | 0065e4 | f0 03       |                 beq 0065e9           already positive, life is good
1973:000 | DONE wsp | na 16 16 |        |             |
1974:000 | DONE ins | na 16 16 | 0065e6 | 20 ff 65    |                 jsr 0065ff           
1975:000 | DONE wsp | na 16 16 |        |             |
1976:000 | DONE lbl | na 16 16 | 0065e9 |             | z_dabs                               
1976:001 | DONE ins | na 16 16 | 0065e9 | 60          |                 rts                  
1977:000 | DONE wsp | na 16 16 |        |             |
1978:000 | DONE wsp | na 16 16 |        |             |
1979:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1980:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1981:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1982:000 | DONE lbl | na 16 16 | 0065ea |             | xt_decimal                           
1983:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1984:000 | DONE ins | na 16 16 | 0065ea | a9 0a 00    |                 lda.# 000a           
1985:000 | DONE ins | na 16 16 | 0065ed | 85 1c       |                 sta.d 00021c         
1986:000 | DONE wsp | na 16 16 |        |             |
1987:000 | DONE lbl | na 16 16 | 0065ef |             | z_decimal                            
1987:001 | DONE ins | na 16 16 | 0065ef | 60          |                 rts                  
1988:000 | DONE wsp | na 16 16 |        |             |
1989:000 | DONE wsp | na 16 16 |        |             |
1990:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1991:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1992:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1993:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1994:000 | DONE lbl | na 16 16 | 0065f0 |             | xt_depth                             
1995:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1996:000 | DONE cmt | na 16 16 |        |             |                 ; We've got zero entries when X is dsp0
1997:000 | DONE ins | na 16 16 | 0065f0 | 86 04       |                 stx.d 000204         
1998:000 | DONE ins | na 16 16 | 0065f2 | a9 f8 02    |                 lda.# 0002f8         
1999:000 | DONE ins | na 16 16 | 0065f5 | 38          |                 sec                  
2000:000 | DONE ins | na 16 16 | 0065f6 | e5 04       |                 sbc.d 000204         
2001:000 | DONE wsp | na 16 16 |        |             |
2002:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2003:000 | DONE ins | na 16 16 | 0065f8 | 4a          |                 lsr.a                
2004:000 | DONE wsp | na 16 16 |        |             |
2005:000 | DONE ins | na 16 16 | 0065f9 | ca          |                 dex                  
2006:000 | DONE ins | na 16 16 | 0065fa | ca          |                 dex                  
2007:000 | DONE ins | na 16 16 | 0065fb | 94 00       |                 sty.dx 00            
2008:000 | DONE wsp | na 16 16 |        |             |
2009:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
2010:000 | DONE ins | na 16 16 | 0065fd | a8          |                 tay                  
2011:000 | DONE wsp | na 16 16 |        |             |
2012:000 | DONE lbl | na 16 16 | 0065fe |             | z_depth                              
2012:001 | DONE ins | na 16 16 | 0065fe | 60          |                 rts                  
2013:000 | DONE wsp | na 16 16 |        |             |
2014:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2015:000 | DONE cmt | na 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2016:000 | DONE cmt | na 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2017:000 | DONE lbl | na 16 16 | 0065ff |             | xt_dnegate                           
2018:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2019:000 | DONE cmt | na 16 16 |        |             |                 ; start off with LSW (in NOS)
2020:000 | DONE ins | na 16 16 | 0065ff | b5 00       |                 lda.dx 00            
2021:000 | DONE ins | na 16 16 | 006601 | 49 ff ff    |                 eor.# 0ffff          
2022:000 | DONE wsp | na 16 16 |        |             |
2023:000 | DONE cmt | na 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2024:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
2025:000 | DONE ins | na 16 16 | 006604 | 18          |                 clc                  
2026:000 | DONE ins | na 16 16 | 006605 | 69 01 00    |                 adc.# 0001           
2027:000 | DONE ins | na 16 16 | 006608 | 95 00       |                 sta.dx 00            
2028:000 | DONE wsp | na 16 16 |        |             |
2029:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
2030:000 | DONE ins | na 16 16 | 00660a | 98          |                 tya                  
2031:000 | DONE ins | na 16 16 | 00660b | 49 ff ff    |                 eor.# 0ffff          
2032:000 | DONE ins | na 16 16 | 00660e | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2033:000 | DONE ins | na 16 16 | 006611 | a8          |                 tay                  
2034:000 | DONE wsp | na 16 16 |        |             |
2035:000 | DONE lbl | na 16 16 | 006612 |             | z_dnegate                            
2035:001 | DONE ins | na 16 16 | 006612 | 60          |                 rts                  
2036:000 | DONE wsp | na 16 16 |        |             |
2037:000 | DONE wsp | na 16 16 |        |             |
2038:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2039:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2040:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2041:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
2042:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2043:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2044:000 | DONE lbl | na 16 16 | 006613 |             | xt_does                              
2045:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2046:000 | DONE ins | na 16 16 | 006613 | f4 20 66    |                 phe.# 006620         
2047:000 | DONE ins | na 16 16 | 006616 | 20 eb 71    |                 jsr 0071eb           
2048:000 | DONE wsp | na 16 16 |        |             |
2049:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2050:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2051:000 | DONE ins | na 16 16 | 006619 | f4 7d 71    |                 phe.# 00717d         
2052:000 | DONE ins | na 16 16 | 00661c | 20 eb 71    |                 jsr 0071eb           
2053:000 | DONE wsp | na 16 16 |        |             |
2054:000 | DONE lbl | na 16 16 | 00661f |             | z_does                               
2054:001 | DONE ins | na 16 16 | 00661f | 60          |                 rts                  
2055:000 | DONE wsp | na 16 16 |        |             |
2056:000 | DONE lbl | na 16 16 | 006620 |             | does_rt                              
2057:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2058:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2059:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2060:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2061:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
2062:000 | DONE ins | na 16 16 | 006620 | 68          |                 pla                  
2063:000 | DONE ins | na 16 16 | 006621 | 1a          |                 inc.a                increase by one because of RTS mechanics
2064:000 | DONE ins | na 16 16 | 006622 | 85 16       |                 sta.d 000216         
2065:000 | DONE wsp | na 16 16 |        |             |
2066:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2067:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2068:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2069:000 | DONE cmt | na 16 16 |        |             |                 ; now.
2070:000 | DONE ins | na 16 16 | 006624 | a5 02       |                 lda.d 000202         
2071:000 | DONE wsp | na 16 16 |        |             |
2072:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2073:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
2074:000 | DONE ins | na 16 16 | 006626 | 18          |                 clc                  
2075:000 | DONE ins | na 16 16 | 006627 | 69 04 00    |                 adc.# 0004           
2076:000 | DONE ins | na 16 16 | 00662a | 85 18       |                 sta.d 000218         
2077:000 | DONE wsp | na 16 16 |        |             |
2078:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2079:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
2080:000 | DONE ins | na 16 16 | 00662c | b2 18       |                 lda.di 000218        LDA (TMP2)
2081:000 | DONE ins | na 16 16 | 00662e | 1a          |                 inc.a                
2082:000 | DONE ins | na 16 16 | 00662f | 85 18       |                 sta.d 000218         Points to address to be replaced
2083:000 | DONE wsp | na 16 16 |        |             |
2084:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
2085:000 | DONE ins | na 16 16 | 006631 | a5 16       |                 lda.d 000216         
2086:000 | DONE ins | na 16 16 | 006633 | 92 18       |                 sta.di 000218        STA (TMP2)
2087:000 | DONE wsp | na 16 16 |        |             |
2088:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2089:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2090:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2091:000 | DONE ins | na 16 16 | 006635 | 60          |                 rts                  
2092:000 | DONE wsp | na 16 16 |        |             |
2093:000 | DONE wsp | na 16 16 |        |             |
2094:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2095:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2096:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
2097:000 | DONE wsp | na 16 16 |        |             |
2098:000 | DONE lbl | na 16 16 | 006636 |             | xt_drop                              
2099:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2100:000 | DONE ins | na 16 16 | 006636 | b4 00       |                 ldy.dx 00            
2101:000 | DONE ins | na 16 16 | 006638 | e8          |                 inx                  
2102:000 | DONE ins | na 16 16 | 006639 | e8          |                 inx                  
2103:000 | DONE wsp | na 16 16 |        |             |
2104:000 | DONE lbl | na 16 16 | 00663a |             | z_drop                               
2104:001 | DONE ins | na 16 16 | 00663a | 60          |                 rts                  
2105:000 | DONE wsp | na 16 16 |        |             |
2106:000 | DONE wsp | na 16 16 |        |             |
2107:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2108:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2109:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
2110:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
2111:000 | DONE lbl | na 16 16 | 00663b |             | xt_dump                              
2112:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
2113:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
2114:000 | DONE ins | na 16 16 | 00663b | 84 16       |                 sty.d 000216         
2115:000 | DONE wsp | na 16 16 |        |             |
2116:000 | DONE lbl | na 16 16 | 00663d |             | dump_line_loop                       
2117:000 | DONE ins | na 16 16 | 00663d | 20 52 65    |                 jsr 006552           
2118:000 | DONE wsp | na 16 16 |        |             |
2119:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
2120:000 | DONE ins | na 16 16 | 006640 | a0 10 00    |                 ldy.# 0010           
2121:000 | DONE lbl | na 16 16 | 006643 |             | dump_byte_loop                       
2122:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
2123:000 | DONE ins | na 16 16 | 006643 | a5 16       |                 lda.d 000216         
2124:000 | DONE ins | na 16 16 | 006645 | f0 11       |                 beq 006658           
2125:000 | DONE wsp | na 16 16 |        |             |
2126:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
2127:000 | DONE ins | na 16 16 | 006647 | a1 00       |                 lda.dxi 00           
2128:000 | DONE ins | na 16 16 | 006649 | 20 2a 72    |                 jsr 00722a           TODO replace by EMIT
2129:000 | DONE ins | na 16 16 | 00664c | 20 f5 69    |                 jsr 0069f5           
2130:000 | DONE wsp | na 16 16 |        |             |
2131:000 | DONE cmt | na 16 16 |        |             |                 ; next character
2132:000 | DONE ins | na 16 16 | 00664f | f6 00       |                 inc.dx 00            
2133:000 | DONE wsp | na 16 16 |        |             |
2134:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
2135:000 | DONE ins | na 16 16 | 006651 | c6 16       |                 dec.d 000216         
2136:000 | DONE ins | na 16 16 | 006653 | 88          |                 dey                  
2137:000 | DONE ins | na 16 16 | 006654 | d0 ed       |                 bne 006643           
2138:000 | DONE ins | na 16 16 | 006656 | 80 e5       |                 bra 00663d           
2139:000 | DONE wsp | na 16 16 |        |             |
2140:000 | DONE lbl | na 16 16 | 006658 |             | dump_done                            
2141:000 | DONE ins | na 16 16 | 006658 | 20 52 65    |                 jsr 006552           
2142:000 | DONE wsp | na 16 16 |        |             |
2143:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
2144:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
2145:000 | DONE ins | na 16 16 | 00665b | b4 02       |                 ldy.dx 02            
2146:000 | DONE ins | na 16 16 | 00665d | e8          |                 inx                  
2147:000 | DONE ins | na 16 16 | 00665e | e8          |                 inx                  
2148:000 | DONE ins | na 16 16 | 00665f | e8          |                 inx                  
2149:000 | DONE ins | na 16 16 | 006660 | e8          |                 inx                  
2150:000 | DONE wsp | na 16 16 |        |             |
2151:000 | DONE lbl | na 16 16 | 006661 |             | z_dump                               
2151:001 | DONE ins | na 16 16 | 006661 | 60          |                 rts                  
2152:000 | DONE wsp | na 16 16 |        |             |
2153:000 | DONE wsp | na 16 16 |        |             |
2154:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2155:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2156:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
2157:000 | DONE wsp | na 16 16 |        |             |
2158:000 | DONE lbl | na 16 16 | 006662 |             | xt_dup                               
2159:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2160:000 | DONE ins | na 16 16 | 006662 | ca          |                 dex                  
2161:000 | DONE ins | na 16 16 | 006663 | ca          |                 dex                  
2162:000 | DONE ins | na 16 16 | 006664 | 94 00       |                 sty.dx 00            
2163:000 | DONE wsp | na 16 16 |        |             |
2164:000 | DONE lbl | na 16 16 | 006666 |             | z_dup                                
2164:001 | DONE ins | na 16 16 | 006666 | 60          |                 rts                  
2165:000 | DONE wsp | na 16 16 |        |             |
2166:000 | DONE wsp | na 16 16 |        |             |
2167:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2168:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
2169:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
2170:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
2171:000 | DONE lbl | na 16 16 | 006667 |             | xt_evaluate                          
2172:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
2173:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
2174:000 | DONE ins | na 16 16 | 006667 | a5 12       |                 lda.d 000212         >IN
2175:000 | DONE ins | na 16 16 | 006669 | 48          |                 pha                  
2176:000 | DONE ins | na 16 16 | 00666a | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
2177:000 | DONE ins | na 16 16 | 00666c | 48          |                 pha                  
2178:000 | DONE ins | na 16 16 | 00666d | a5 0c       |                 lda.d 00020c         
2179:000 | DONE ins | na 16 16 | 00666f | 48          |                 pha                  
2180:000 | DONE ins | na 16 16 | 006670 | a5 0e       |                 lda.d 00020e         
2181:000 | DONE ins | na 16 16 | 006672 | 48          |                 pha                  
2182:000 | DONE wsp | na 16 16 |        |             |
2183:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
2184:000 | DONE ins | na 16 16 | 006673 | a9 ff ff    |                 lda.# 0ffff          
2185:000 | DONE ins | na 16 16 | 006676 | 85 0a       |                 sta.d 00020a         
2186:000 | DONE wsp | na 16 16 |        |             |
2187:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
2188:000 | DONE ins | na 16 16 | 006678 | 64 12       |                 stz.d 000212         
2189:000 | DONE wsp | na 16 16 |        |             |
2190:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
2191:000 | DONE ins | na 16 16 | 00667a | 84 0e       |                 sty.d 00020e         
2192:000 | DONE ins | na 16 16 | 00667c | b5 00       |                 lda.dx 00            
2193:000 | DONE ins | na 16 16 | 00667e | 85 0c       |                 sta.d 00020c         
2194:000 | DONE wsp | na 16 16 |        |             |
2195:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
2196:000 | DONE ins | na 16 16 | 006680 | b4 02       |                 ldy.dx 02            
2197:000 | DONE ins | na 16 16 | 006682 | e8          |                 inx                  
2198:000 | DONE ins | na 16 16 | 006683 | e8          |                 inx                  
2199:000 | DONE ins | na 16 16 | 006684 | e8          |                 inx                  
2200:000 | DONE ins | na 16 16 | 006685 | e8          |                 inx                  
2201:000 | DONE wsp | na 16 16 |        |             |
2202:000 | DONE ins | na 16 16 | 006686 | 20 91 71    |                 jsr 007191           
2203:000 | DONE wsp | na 16 16 |        |             |
2204:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
2205:000 | DONE ins | na 16 16 | 006689 | 68          |                 pla                  
2206:000 | DONE ins | na 16 16 | 00668a | 85 0e       |                 sta.d 00020e         
2207:000 | DONE ins | na 16 16 | 00668c | 68          |                 pla                  
2208:000 | DONE ins | na 16 16 | 00668d | 85 0c       |                 sta.d 00020c         
2209:000 | DONE ins | na 16 16 | 00668f | 68          |                 pla                  
2210:000 | DONE ins | na 16 16 | 006690 | 85 0a       |                 sta.d 00020a         
2211:000 | DONE ins | na 16 16 | 006692 | 68          |                 pla                  
2212:000 | DONE ins | na 16 16 | 006693 | 85 12       |                 sta.d 000212         
2213:000 | DONE wsp | na 16 16 |        |             |
2214:000 | DONE lbl | na 16 16 | 006695 |             | z_evaluate                           
2214:001 | DONE ins | na 16 16 | 006695 | 60          |                 rts                  
2215:000 | DONE wsp | na 16 16 |        |             |
2216:000 | DONE wsp | na 16 16 |        |             |
2217:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2218:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2219:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
2220:000 | DONE wsp | na 16 16 |        |             |
2221:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2222:000 | DONE cmt | na 16 16 |        |             | ; range
2223:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2224:000 | DONE lbl | na 16 16 | 006696 |             | execute_ip                           
2224:001 | DONE dir | na 16 16 | 006696 | (3 bytes)   |         .byte 00, 00, 00             
2224:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
2225:000 | DONE wsp | na 16 16 |        |             |
2226:000 | DONE lbl | na 16 16 | 006699 |             | xt_execute                           
2227:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2228:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2229:000 | DONE cmt | na 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
2230:000 | DONE ins | na 16 16 | 006699 | 8c 96 66    |                 sty 006696           
2231:000 | DONE ins | na 16 16 | 00669c | b4 00       |                 ldy.dx 00            
2232:000 | DONE ins | na 16 16 | 00669e | e8          |                 inx                  
2233:000 | DONE ins | na 16 16 | 00669f | e8          |                 inx                  
2234:000 | DONE wsp | na 16 16 |        |             |
2235:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
2236:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
2237:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
2238:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
2239:000 | DONE ins | na 16 16 | 0066a0 | 6c 96 66    |                 jmp.i 006696         JMP (EXECUTE_IP)
2240:000 | DONE wsp | na 16 16 |        |             |
2241:000 | DONE lbl | na 16 16 | 0066a3 |             | z_execute                            
2241:001 | DONE ins | na 16 16 | 0066a3 | ea          |                 nop                  Never reached, see if we need the NOP
2242:000 | DONE wsp | na 16 16 |        |             |
2243:000 | DONE wsp | na 16 16 |        |             |
2244:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2245:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
2246:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
2247:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
2248:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
2249:000 | DONE wsp | na 16 16 |        |             |
2250:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2251:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
2252:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
2253:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
2254:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
2255:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
2256:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2257:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
2258:000 | DONE lbl | na 16 16 | 0066a4 |             | xt_find-name                         
2259:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
2260:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
2261:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
2262:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
2263:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
2264:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
2265:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
2266:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
2267:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2268:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2269:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
2270:000 | DONE ins | na 16 16 | 0066a4 | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
2271:000 | DONE wsp | na 16 16 |        |             |
2272:000 | DONE ins | na 16 16 | 0066a6 | a4 02       |                 ldy.d 000202         
2273:000 | DONE ins | na 16 16 | 0066a8 | 84 16       |                 sty.d 000216         nt of first Dictionary word
2274:000 | DONE wsp | na 16 16 |        |             |
2275:000 | DONE ins | na 16 16 | 0066aa | b4 00       |                 ldy.dx 00            
2276:000 | DONE ins | na 16 16 | 0066ac | 84 18       |                 sty.d 000218         address of mystery string, was NOS
2277:000 | DONE wsp | na 16 16 |        |             |
2278:000 | DONE lbl | na 16 16 | 0066ae |             | find-name_loop                       
2279:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
2280:000 | DONE ins | na 16 16 | 0066ae | b2 16       |                 lda.di 000216        LSB in first header word is length
2281:000 | DONE ins | na 16 16 | 0066b0 | 29 ff 00    |                 and.# 00ff           
2282:000 | DONE ins | na 16 16 | 0066b3 | c5 06       |                 cmp.d 000206         we test LSB
2283:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
2284:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
2285:000 | DONE cmt | na 16 16 |        |             |                 ; same
2286:000 | DONE ins | na 16 16 | 0066b5 | f0 0c       |                 beq 0066c3           
2287:000 | DONE wsp | na 16 16 |        |             |
2288:000 | DONE lbl | na 16 16 | 0066b7 |             | find-name_next_entry                 
2289:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
2290:000 | DONE ins | na 16 16 | 0066b7 | e6 16       |                 inc.d 000216         
2291:000 | DONE ins | na 16 16 | 0066b9 | e6 16       |                 inc.d 000216         
2292:000 | DONE ins | na 16 16 | 0066bb | b2 16       |                 lda.di 000216        LDA (TMP1)
2293:000 | DONE wsp | na 16 16 |        |             |
2294:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
2295:000 | DONE ins | na 16 16 | 0066bd | f0 36       |                 beq 0066f5           
2296:000 | DONE wsp | na 16 16 |        |             |
2297:000 | DONE ins | na 16 16 | 0066bf | 85 16       |                 sta.d 000216         new header
2298:000 | DONE ins | na 16 16 | 0066c1 | 80 eb       |                 bra 0066ae           
2299:000 | DONE wsp | na 16 16 |        |             |
2300:000 | DONE lbl | na 16 16 | 0066c3 |             | find-name_chars                      
2301:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
2302:000 | DONE wsp | na 16 16 |        |             |
2303:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
2304:000 | DONE ins | na 16 16 | 0066c3 | e2 20       |                 sep 20               
2304:001 | DONE ctl | na  8 16 |        |             |         .!a8
2305:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
2306:000 | DONE cmt | na  8 16 |        |             |                 ; header
2307:000 | DONE ins | na  8 16 | 0066c5 | a0 08 00    |                 ldy.# 0008           
2308:000 | DONE ins | na  8 16 | 0066c8 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
2309:000 | DONE ins | na  8 16 | 0066ca | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
2310:000 | DONE ins | na  8 16 | 0066cc | f0 04       |                 beq 0066d2           
2311:000 | DONE wsp | na  8 16 |        |             |
2312:000 | DONE lbl | na  8 16 | 0066ce |             | find-name_char_nomatcnt_8            
2313:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
2314:000 | DONE ins | na  8 16 | 0066ce | c2 20       |                 rep 20               
2314:001 | DONE ctl | na 16 16 |        |             |         .!a16
2315:000 | DONE ins | na 16 16 | 0066d0 | 80 e5       |                 bra 0066b7           
2316:000 | DONE wsp | na 16 16 |        |             |
2317:000 | DONE lbl | na 16 16 | 0066d2 |             | find-name_all_chars                  
2318:000 | DONE dir | na  8 16 |        |             |         .!a8                         
2319:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
2320:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
2321:000 | DONE ins | na  8 16 | 0066d2 | a4 06       |                 ldy.d 000206         
2322:000 | DONE ins | na  8 16 | 0066d4 | 88          |                 dey                  faster and shorter than CPY.# 01
2323:000 | DONE ins | na  8 16 | 0066d5 | f0 18       |                 beq 0066ef           
2324:000 | DONE wsp | na  8 16 |        |             |
2325:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
2326:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
2327:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
2328:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
2329:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
2330:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
2331:000 | DONE wsp | na  8 16 |        |             |
2332:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
2333:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
2334:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
2335:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
2336:000 | DONE ins | na  8 16 | 0066d7 | c2 20       |                 rep 20               
2336:001 | DONE ctl | na 16 16 |        |             |         .!a16
2337:000 | DONE ins | na 16 16 | 0066d9 | a5 16       |                 lda.d 000216         address of Dictionary string
2338:000 | DONE ins | na 16 16 | 0066db | 18          |                 clc                  
2339:000 | DONE ins | na 16 16 | 0066dc | 69 08 00    |                 adc.# 0008           
2340:000 | DONE ins | na 16 16 | 0066df | 85 1a       |                 sta.d 00021a         
2341:000 | DONE ins | na 16 16 | 0066e1 | e2 20       |                 sep 20               
2341:001 | DONE ctl | na  8 16 |        |             |         .!a8
2342:000 | DONE ins | na  8 16 | 0066e3 | a4 06       |                 ldy.d 000206         get length of strings as loop index
2343:000 | DONE ins | na  8 16 | 0066e5 | 88          |                 dey                  first index is length minus 1
2344:000 | DONE wsp | na  8 16 |        |             |
2345:000 | DONE lbl | na  8 16 | 0066e6 |             | @                                    
2346:000 | DONE ins | na  8 16 | 0066e6 | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
2347:000 | DONE ins | na  8 16 | 0066e8 | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
2348:000 | DONE ins | na  8 16 | 0066ea | d0 e2       |                 bne 0066ce           
2349:000 | DONE ins | na  8 16 | 0066ec | 88          |                 dey                  start of string (Y=0) was already tested
2350:000 | DONE ins | na  8 16 | 0066ed | d0 f7       |                 bne 0066e6           
2351:000 | DONE wsp | na  8 16 |        |             |
2352:000 | DONE lbl | na  8 16 | 0066ef |             | find-name_success                    
2353:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
2354:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
2355:000 | DONE ins | na  8 16 | 0066ef | c2 20       |                 rep 20               
2355:001 | DONE ctl | na 16 16 |        |             |         .!a16
2356:000 | DONE ins | na 16 16 | 0066f1 | a4 16       |                 ldy.d 000216         get the correct DP
2357:000 | DONE ins | na 16 16 | 0066f3 | 80 03       |                 bra 0066f8           
2358:000 | DONE wsp | na 16 16 |        |             |
2359:000 | DONE wsp | na 16 16 |        |             |
2360:000 | DONE lbl | na 16 16 | 0066f5 |             | find-name_failure_16                 
2361:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
2362:000 | DONE cmt | na 16 16 |        |             |                 ; bit
2363:000 | DONE ins | na 16 16 | 0066f5 | a0 00 00    |                 ldy.# 0000           fall thru
2364:000 | DONE wsp | na 16 16 |        |             |
2365:000 | DONE lbl | na 16 16 | 0066f8 |             | find-name_done                       
2366:000 | DONE ins | na 16 16 | 0066f8 | e8          |                 inx                  drop old address (NIP)
2367:000 | DONE ins | na 16 16 | 0066f9 | e8          |                 inx                  
2368:000 | DONE wsp | na 16 16 |        |             |
2369:000 | DONE lbl | na 16 16 | 0066fa |             | z_find-name                          
2369:001 | DONE ins | na 16 16 | 0066fa | 60          |                 rts                  
2370:000 | DONE wsp | na 16 16 |        |             |
2371:000 | DONE wsp | na 16 16 |        |             |
2372:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2373:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
2374:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
2375:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
2376:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
2377:000 | DONE lbl | na 16 16 | 0066fb |             | xt_immediate                         
2378:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2379:000 | DONE ins | na 16 16 | 0066fb | a9 02 00    |                 lda.# IM             Immediate flag
2380:000 | DONE ins | na 16 16 | 0066fe | eb          |                 xba                  flags are MSB
2381:000 | DONE ins | na 16 16 | 0066ff | 12 02       |                 ora.di 000202        ORA (DP)
2382:000 | DONE ins | na 16 16 | 006701 | 92 02       |                 sta.di 000202        
2383:000 | DONE wsp | na 16 16 |        |             |
2384:000 | DONE lbl | na 16 16 | 006703 |             | z_immediate                          
2384:001 | DONE ins | na 16 16 | 006703 | 60          |                 rts                  
2385:000 | DONE wsp | na 16 16 |        |             |
2386:000 | DONE wsp | na 16 16 |        |             |
2387:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2388:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
2389:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
2390:000 | DONE lbl | na 16 16 | 006704 |             | xt_invert                            
2391:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2392:000 | DONE ins | na 16 16 | 006704 | 98          |                 tya                  
2393:000 | DONE ins | na 16 16 | 006705 | 49 ff ff    |                 eor.# 0ffff          
2394:000 | DONE ins | na 16 16 | 006708 | a8          |                 tay                  
2395:000 | DONE wsp | na 16 16 |        |             |
2396:000 | DONE lbl | na 16 16 | 006709 |             | z_invert                             
2396:001 | DONE ins | na 16 16 | 006709 | 60          |                 rts                  
2397:000 | DONE wsp | na 16 16 |        |             |
2398:000 | DONE wsp | na 16 16 |        |             |
2399:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2400:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
2401:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
2402:000 | DONE lbl | na 16 16 | 00670a |             | xt_here                              
2403:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2404:000 | DONE ins | na 16 16 | 00670a | ca          |                 dex                  
2405:000 | DONE ins | na 16 16 | 00670b | ca          |                 dex                  
2406:000 | DONE ins | na 16 16 | 00670c | 94 00       |                 sty.dx 00            
2407:000 | DONE wsp | na 16 16 |        |             |
2408:000 | DONE ins | na 16 16 | 00670e | a4 00       |                 ldy.d 000200         
2409:000 | DONE wsp | na 16 16 |        |             |
2410:000 | DONE lbl | na 16 16 | 006710 |             | z_here                               
2410:001 | DONE ins | na 16 16 | 006710 | 60          |                 rts                  
2411:000 | DONE wsp | na 16 16 |        |             |
2412:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2413:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
2414:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
2415:000 | DONE lbl | na 16 16 | 006711 |             | xt_hex                               
2416:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2417:000 | DONE ins | na 16 16 | 006711 | a9 10 00    |                 lda.# 0010           
2418:000 | DONE ins | na 16 16 | 006714 | 85 1c       |                 sta.d 00021c         
2419:000 | DONE wsp | na 16 16 |        |             |
2420:000 | DONE lbl | na 16 16 | 006716 |             | z_hex                                
2420:001 | DONE ins | na 16 16 | 006716 | 60          |                 rts                  
2421:000 | DONE wsp | na 16 16 |        |             |
2422:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2423:000 | DONE cmt | na 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
2424:000 | DONE cmt | na 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
2425:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2426:000 | DONE cmt | na 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
2427:000 | DONE cmt | na 16 16 |        |             | ; tohold instead of HLD.
2428:000 | DONE lbl | na 16 16 | 006717 |             | xt_hold                              
2429:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2430:000 | DONE ins | na 16 16 | 006717 | c6 28       |                 dec.d 000228         -1 HLD +!
2431:000 | DONE wsp | na 16 16 |        |             |
2432:000 | DONE ins | na 16 16 | 006719 | 98          |                 tya                  
2433:000 | DONE ins | na 16 16 | 00671a | e2 20       |                 sep 20               
2433:001 | DONE ctl | na  8 16 |        |             |         .!a8
2434:000 | DONE ins | na  8 16 | 00671c | 92 28       |                 sta.di 000228        STA (TOHOLD)
2435:000 | DONE ins | na  8 16 | 00671e | c2 20       |                 rep 20               
2435:001 | DONE ctl | na 16 16 |        |             |         .!a16
2436:000 | DONE ins | na 16 16 | 006720 | b4 00       |                 ldy.dx 00            
2437:000 | DONE ins | na 16 16 | 006722 | e8          |                 inx                  
2438:000 | DONE ins | na 16 16 | 006723 | e8          |                 inx                  
2439:000 | DONE wsp | na 16 16 |        |             |
2440:000 | DONE lbl | na 16 16 | 006724 |             | z_hold                               
2440:001 | DONE ins | na 16 16 | 006724 | 60          |                 rts                  
2441:000 | DONE wsp | na 16 16 |        |             |
2442:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2443:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
2444:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
2445:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
2446:000 | DONE cmt | na 16 16 |        |             | ; for instance
2447:000 | DONE lbl | na 16 16 | 006725 |             | xt_literal                           
2448:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
2449:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
2450:000 | DONE ins | na 16 16 | 006725 | f4 37 67    |                 phe.# 006737         PEA LITERAL_RT
2451:000 | DONE ins | na 16 16 | 006728 | 20 eb 71    |                 jsr 0071eb           
2452:000 | DONE wsp | na 16 16 |        |             |
2453:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
2454:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
2455:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
2456:000 | DONE ins | na 16 16 | 00672b | 98          |                 tya                  
2457:000 | DONE ins | na 16 16 | 00672c | 92 00       |                 sta.di 000200        
2458:000 | DONE ins | na 16 16 | 00672e | e6 00       |                 inc.d 000200         
2459:000 | DONE ins | na 16 16 | 006730 | e6 00       |                 inc.d 000200         
2460:000 | DONE wsp | na 16 16 |        |             |
2461:000 | DONE ins | na 16 16 | 006732 | b4 00       |                 ldy.dx 00            DROP
2462:000 | DONE ins | na 16 16 | 006734 | e8          |                 inx                  
2463:000 | DONE ins | na 16 16 | 006735 | e8          |                 inx                  
2464:000 | DONE wsp | na 16 16 |        |             |
2465:000 | DONE lbl | na 16 16 | 006736 |             | z_literal                            
2465:001 | DONE ins | na 16 16 | 006736 | 60          |                 rts                  
2466:000 | DONE wsp | na 16 16 |        |             |
2467:000 | DONE lbl | na 16 16 | 006737 |             | literal_rt                           
2468:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
2469:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
2470:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
2471:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
2472:000 | DONE wsp | na 16 16 |        |             |
2473:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
2474:000 | DONE ins | na 16 16 | 006737 | ca          |                 dex                  
2475:000 | DONE ins | na 16 16 | 006738 | ca          |                 dex                  
2476:000 | DONE ins | na 16 16 | 006739 | 94 00       |                 sty.dx 00            
2477:000 | DONE wsp | na 16 16 |        |             |
2478:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
2479:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
2480:000 | DONE ins | na 16 16 | 00673b | 7a          |                 ply                  
2481:000 | DONE ins | na 16 16 | 00673c | c8          |                 iny                  
2482:000 | DONE ins | na 16 16 | 00673d | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
2483:000 | DONE wsp | na 16 16 |        |             |
2484:000 | DONE ins | na 16 16 | 006740 | c8          |                 iny                  move return address past data and restore
2485:000 | DONE ins | na 16 16 | 006741 | 5a          |                 phy                  so we can get back home
2486:000 | DONE wsp | na 16 16 |        |             |
2487:000 | DONE ins | na 16 16 | 006742 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
2488:000 | DONE wsp | na 16 16 |        |             |
2489:000 | DONE ins | na 16 16 | 006743 | 60          |                 rts                  
2490:000 | DONE wsp | na 16 16 |        |             |
2491:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2492:000 | DONE cmt | na 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
2493:000 | DONE cmt | na 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
2494:000 | DONE cmt | na 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
2495:000 | DONE cmt | na 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
2496:000 | DONE cmt | na 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
2497:000 | DONE cmt | na 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
2498:000 | DONE lbl | na 16 16 | 006744 |             | xt_mstar                             
2499:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2500:000 | DONE cmt | na 16 16 |        |             |                 ; figure out the sign
2501:000 | DONE ins | na 16 16 | 006744 | 98          |                 tya                  
2502:000 | DONE ins | na 16 16 | 006745 | 55 00       |                 eor.dx 00            
2503:000 | DONE wsp | na 16 16 |        |             |
2504:000 | DONE cmt | na 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
2505:000 | DONE cmt | na 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
2506:000 | DONE ins | na 16 16 | 006747 | 48          |                 pha                  
2507:000 | DONE wsp | na 16 16 |        |             |
2508:000 | DONE cmt | na 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
2509:000 | DONE cmt | na 16 16 |        |             |                 ; UM*, which does the real work
2510:000 | DONE ins | na 16 16 | 006748 | 98          |                 tya                  
2511:000 | DONE ins | na 16 16 | 006749 | 10 05       |                 bpl 006750           
2512:000 | DONE wsp | na 16 16 |        |             |
2513:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is negative so we have to ABS it
2514:000 | DONE ins | na 16 16 | 00674b | 49 ff ff    |                 eor.# 0ffff          
2515:000 | DONE ins | na 16 16 | 00674e | 1a          |                 inc.a                
2516:000 | DONE ins | na 16 16 | 00674f | a8          |                 tay                  
2517:000 | DONE wsp | na 16 16 |        |             |
2518:000 | DONE lbl | na 16 16 | 006750 |             | mstar_abs_nos                        
2519:000 | DONE ins | na 16 16 | 006750 | b5 00       |                 lda.dx 00            
2520:000 | DONE ins | na 16 16 | 006752 | 10 06       |                 bpl 00675a           
2521:000 | DONE wsp | na 16 16 |        |             |
2522:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is negative so we have to ABS it
2523:000 | DONE ins | na 16 16 | 006754 | 49 ff ff    |                 eor.# 0ffff          
2524:000 | DONE ins | na 16 16 | 006757 | 1a          |                 inc.a                
2525:000 | DONE ins | na 16 16 | 006758 | 95 00       |                 sta.dx 00            
2526:000 | DONE wsp | na 16 16 |        |             |
2527:000 | DONE lbl | na 16 16 | 00675a |             | mstar_umstar                         
2528:000 | DONE ins | na 16 16 | 00675a | 20 6c 6a    |                 jsr 006a6c           now ( d ) on stack
2529:000 | DONE wsp | na 16 16 |        |             |
2530:000 | DONE cmt | na 16 16 |        |             |                 ; handle the sign
2531:000 | DONE ins | na 16 16 | 00675d | 68          |                 pla                  
2532:000 | DONE wsp | na 16 16 |        |             |
2533:000 | DONE cmt | na 16 16 |        |             |                 ; postive, we don't have to care
2534:000 | DONE ins | na 16 16 | 00675e | 10 03       |                 bpl 006763           
2535:000 | DONE wsp | na 16 16 |        |             |
2536:000 | DONE ins | na 16 16 | 006760 | 20 ff 65    |                 jsr 0065ff           
2537:000 | DONE wsp | na 16 16 |        |             |
2538:000 | DONE lbl | na 16 16 | 006763 |             | z_mstar                              
2538:001 | DONE ins | na 16 16 | 006763 | 60          |                 rts                  
2539:000 | DONE wsp | na 16 16 |        |             |
2540:000 | DONE wsp | na 16 16 |        |             |
2541:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2542:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
2543:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
2544:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2545:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2546:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2547:000 | DONE lbl | na 16 16 | 006764 |             | xt_max                               
2548:000 | DONE ins | na 16 16 | 006764 | 98          |                 tya                  
2549:000 | DONE ins | na 16 16 | 006765 | d5 00       |                 cmp.dx 00            
2550:000 | DONE wsp | na 16 16 |        |             |
2551:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2552:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2553:000 | DONE ins | na 16 16 | 006767 | f0 0b       |                 beq 006774           Faster than DROP because TOS is in Y
2554:000 | DONE wsp | na 16 16 |        |             |
2555:000 | DONE ins | na 16 16 | 006769 | f5 00       |                 sbc.dx 00            
2556:000 | DONE ins | na 16 16 | 00676b | 50 03       |                 bvc 006770           no overflow, skip ahead
2557:000 | DONE wsp | na 16 16 |        |             |
2558:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2559:000 | DONE ins | na 16 16 | 00676d | 49 00 80    |                 eor.# 8000           compliment negative flag
2560:000 | DONE wsp | na 16 16 |        |             |
2561:000 | DONE lbl | na 16 16 | 006770 |             | max_no_ov                            
2562:000 | DONE ins | na 16 16 | 006770 | 10 02       |                 bpl 006774           keep TOS
2563:000 | DONE lbl | na 16 16 | 006772 |             | max_drop                             
2564:000 | DONE ins | na 16 16 | 006772 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2565:000 | DONE lbl | na 16 16 | 006774 |             | max_nip                              
2566:000 | DONE ins | na 16 16 | 006774 | e8          |                 inx                  
2567:000 | DONE ins | na 16 16 | 006775 | e8          |                 inx                  
2568:000 | DONE wsp | na 16 16 |        |             |
2569:000 | DONE lbl | na 16 16 | 006776 |             | z_max                                
2569:001 | DONE ins | na 16 16 | 006776 | 60          |                 rts                  
2570:000 | DONE wsp | na 16 16 |        |             |
2571:000 | DONE wsp | na 16 16 |        |             |
2572:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2573:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
2574:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
2575:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2576:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2577:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2578:000 | DONE lbl | na 16 16 | 006777 |             | xt_min                               
2579:000 | DONE ins | na 16 16 | 006777 | 98          |                 tya                  
2580:000 | DONE ins | na 16 16 | 006778 | d5 00       |                 cmp.dx 00            
2581:000 | DONE wsp | na 16 16 |        |             |
2582:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2583:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2584:000 | DONE ins | na 16 16 | 00677a | f0 0b       |                 beq 006787           Faster than DROP because TOS is in Y
2585:000 | DONE wsp | na 16 16 |        |             |
2586:000 | DONE ins | na 16 16 | 00677c | f5 00       |                 sbc.dx 00            
2587:000 | DONE ins | na 16 16 | 00677e | 50 03       |                 bvc 006783           no overflow, skip ahead
2588:000 | DONE wsp | na 16 16 |        |             |
2589:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2590:000 | DONE ins | na 16 16 | 006780 | 49 00 80    |                 eor.# 8000           compliment negative flag
2591:000 | DONE wsp | na 16 16 |        |             |
2592:000 | DONE lbl | na 16 16 | 006783 |             | min_no_ov                            
2593:000 | DONE ins | na 16 16 | 006783 | 30 02       |                 bmi 006787           keep TOS
2594:000 | DONE lbl | na 16 16 | 006785 |             | min_drop                             
2595:000 | DONE ins | na 16 16 | 006785 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2596:000 | DONE lbl | na 16 16 | 006787 |             | min_nip                              
2597:000 | DONE ins | na 16 16 | 006787 | e8          |                 inx                  
2598:000 | DONE ins | na 16 16 | 006788 | e8          |                 inx                  
2599:000 | DONE wsp | na 16 16 |        |             |
2600:000 | DONE lbl | na 16 16 | 006789 |             | z_min                                
2600:001 | DONE ins | na 16 16 | 006789 | 60          |                 rts                  
2601:000 | DONE wsp | na 16 16 |        |             |
2602:000 | DONE wsp | na 16 16 |        |             |
2603:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2604:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
2605:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
2606:000 | DONE lbl | na 16 16 | 00678a |             | xt_name-int                          
2607:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2608:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2609:000 | DONE cmt | na 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
2610:000 | DONE ins | na 16 16 | 00678a | c8          |                 iny                  
2611:000 | DONE ins | na 16 16 | 00678b | c8          |                 iny                  
2612:000 | DONE ins | na 16 16 | 00678c | c8          |                 iny                  
2613:000 | DONE ins | na 16 16 | 00678d | c8          |                 iny                  
2614:000 | DONE ins | na 16 16 | 00678e | b9 00 00    |                 lda.y 0000           
2615:000 | DONE ins | na 16 16 | 006791 | a8          |                 tay                  
2616:000 | DONE wsp | na 16 16 |        |             |
2617:000 | DONE lbl | na 16 16 | 006792 |             | z_name-int                           
2617:001 | DONE ins | na 16 16 | 006792 | 60          |                 rts                  
2618:000 | DONE wsp | na 16 16 |        |             |
2619:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2620:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
2621:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
2622:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
2623:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
2624:000 | DONE lbl | na 16 16 | 006793 |             | xt_name-string                       
2625:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2626:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2627:000 | DONE ins | na 16 16 | 006793 | ca          |                 dex                  move NOS down one
2628:000 | DONE ins | na 16 16 | 006794 | ca          |                 dex                  
2629:000 | DONE wsp | na 16 16 |        |             |
2630:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
2631:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
2632:000 | DONE ins | na 16 16 | 006795 | 98          |                 tya                  
2633:000 | DONE ins | na 16 16 | 006796 | 18          |                 clc                  
2634:000 | DONE ins | na 16 16 | 006797 | 69 08 00    |                 adc.# 0008           
2635:000 | DONE ins | na 16 16 | 00679a | 95 00       |                 sta.dx 00            NOS
2636:000 | DONE wsp | na 16 16 |        |             |
2637:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
2638:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
2639:000 | DONE ins | na 16 16 | 00679c | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2640:000 | DONE ins | na 16 16 | 00679f | 29 ff 00    |                 and.# 00ff           mask all but length byte
2641:000 | DONE ins | na 16 16 | 0067a2 | a8          |                 tay                  
2642:000 | DONE wsp | na 16 16 |        |             |
2643:000 | DONE lbl | na 16 16 | 0067a3 |             | z_name-string                        
2643:001 | DONE ins | na 16 16 | 0067a3 | 60          |                 rts                  
2644:000 | DONE wsp | na 16 16 |        |             |
2645:000 | DONE wsp | na 16 16 |        |             |
2646:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2647:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
2648:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
2649:000 | DONE lbl | na 16 16 | 0067a4 |             | xt_negate                            
2650:000 | DONE ins | na 16 16 | 0067a4 | 98          |                 tya                  
2651:000 | DONE ins | na 16 16 | 0067a5 | 49 ff ff    |                 eor.# 0ffff          
2652:000 | DONE ins | na 16 16 | 0067a8 | 1a          |                 inc.a                
2653:000 | DONE ins | na 16 16 | 0067a9 | a8          |                 tay                  
2654:000 | DONE wsp | na 16 16 |        |             |
2655:000 | DONE lbl | na 16 16 | 0067aa |             | z_negate                             
2655:001 | DONE ins | na 16 16 | 0067aa | 60          |                 rts                  
2656:000 | DONE wsp | na 16 16 |        |             |
2657:000 | DONE wsp | na 16 16 |        |             |
2658:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2659:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
2660:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
2661:000 | DONE lbl | na 16 16 | 0067ab |             | xt_nip                               
2662:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2663:000 | DONE ins | na 16 16 | 0067ab | e8          |                 inx                  
2664:000 | DONE ins | na 16 16 | 0067ac | e8          |                 inx                  
2665:000 | DONE lbl | na 16 16 | 0067ad |             | z_nip                                
2665:001 | DONE ins | na 16 16 | 0067ad | 60          |                 rts                  
2666:000 | DONE wsp | na 16 16 |        |             |
2667:000 | DONE wsp | na 16 16 |        |             |
2668:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2669:000 | DONE cmt | na 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
2670:000 | DONE cmt | na 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
2671:000 | DONE cmt | na 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
2672:000 | DONE cmt | na 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
2673:000 | DONE cmt | na 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
2674:000 | DONE cmt | na 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
2675:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
2676:000 | DONE cmt | na 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
2677:000 | DONE cmt | na 16 16 |        |             | ; signal a double cell number is required to be the last character of the
2678:000 | DONE cmt | na 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
2679:000 | DONE cmt | na 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
2680:000 | DONE lbl | na 16 16 | 0067ae |             | xt_number                            
2681:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2682:000 | DONE cmt | na 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
2683:000 | DONE cmt | na 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
2684:000 | DONE cmt | na 16 16 |        |             |                 ; for double
2685:000 | DONE ins | na 16 16 | 0067ae | f4 00 00    |                 phe.# 0000           
2686:000 | DONE wsp | na 16 16 |        |             |
2687:000 | DONE ins | na 16 16 | 0067b1 | 84 06       |                 sty.d 000206         save length of string, freeing Y
2688:000 | DONE wsp | na 16 16 |        |             |
2689:000 | DONE cmt | na 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
2690:000 | DONE cmt | na 16 16 |        |             |                 ; a flag
2691:000 | DONE ins | na 16 16 | 0067b3 | e2 20       |                 sep 20               
2691:001 | DONE ctl | na  8 16 |        |             |         .!a8
2692:000 | DONE ins | na  8 16 | 0067b5 | a1 00       |                 lda.dxi 00           get first character
2693:000 | DONE ins | na  8 16 | 0067b7 | c9 2d       |                 cmp.# 2d             
2694:000 | DONE ins | na  8 16 | 0067b9 | c2 20       |                 rep 20               
2694:001 | DONE ctl | na 16 16 |        |             |         .!a16
2695:000 | DONE ins | na 16 16 | 0067bb | d0 09       |                 bne 0067c6           
2696:000 | DONE wsp | na 16 16 |        |             |
2697:000 | DONE cmt | na 16 16 |        |             |                 ; We have a minus.
2698:000 | DONE ins | na 16 16 | 0067bd | 68          |                 pla                  
2699:000 | DONE ins | na 16 16 | 0067be | 09 00 ff    |                 ora.# 0ff00          MSB is minus
2700:000 | DONE ins | na 16 16 | 0067c1 | 48          |                 pha                  
2701:000 | DONE wsp | na 16 16 |        |             |
2702:000 | DONE ins | na 16 16 | 0067c2 | f6 00       |                 inc.dx 00            start one character later
2703:000 | DONE ins | na 16 16 | 0067c4 | c6 06       |                 dec.d 000206         reduce string length by one
2704:000 | DONE wsp | na 16 16 |        |             |
2705:000 | DONE lbl | na 16 16 | 0067c6 |             | number_dot                           
2706:000 | DONE cmt | na 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
2707:000 | DONE ins | na 16 16 | 0067c6 | a5 06       |                 lda.d 000206         get the string length
2708:000 | DONE ins | na 16 16 | 0067c8 | 3a          |                 dec.a                subtract one to convert length to index
2709:000 | DONE ins | na 16 16 | 0067c9 | 18          |                 clc                  
2710:000 | DONE ins | na 16 16 | 0067ca | 75 00       |                 adc.dx 00            add length of string
2711:000 | DONE ins | na 16 16 | 0067cc | a8          |                 tay                  
2712:000 | DONE ins | na 16 16 | 0067cd | e2 20       |                 sep 20               
2712:001 | DONE ctl | na  8 16 |        |             |         .!a8
2713:000 | DONE ins | na  8 16 | 0067cf | b9 00 00    |                 lda.y 0000           get last character
2714:000 | DONE ins | na  8 16 | 0067d2 | c9 2e       |                 cmp.# 2e             
2715:000 | DONE ins | na  8 16 | 0067d4 | c2 20       |                 rep 20               
2715:001 | DONE ctl | na 16 16 |        |             |         .!a16
2716:000 | DONE ins | na 16 16 | 0067d6 | d0 07       |                 bne 0067df           
2717:000 | DONE wsp | na 16 16 |        |             |
2718:000 | DONE cmt | na 16 16 |        |             |                 ; we have a dot
2719:000 | DONE ins | na 16 16 | 0067d8 | 68          |                 pla                  get the flag back
2720:000 | DONE ins | na 16 16 | 0067d9 | 09 ff 00    |                 ora.# 00ff           LSB is double
2721:000 | DONE ins | na 16 16 | 0067dc | 48          |                 pha                  
2722:000 | DONE wsp | na 16 16 |        |             |
2723:000 | DONE ins | na 16 16 | 0067dd | c6 06       |                 dec.d 000206         reduce string length by one
2724:000 | DONE wsp | na 16 16 |        |             |
2725:000 | DONE lbl | na 16 16 | 0067df |             | number_main                          
2726:000 | DONE cmt | na 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
2727:000 | DONE ins | na 16 16 | 0067df | b5 00       |                 lda.dx 00            get the string address to safety
2728:000 | DONE ins | na 16 16 | 0067e1 | 74 00       |                 stz.dx 00            NOS is now zero
2729:000 | DONE ins | na 16 16 | 0067e3 | ca          |                 dex                  
2730:000 | DONE ins | na 16 16 | 0067e4 | ca          |                 dex                  
2731:000 | DONE ins | na 16 16 | 0067e5 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
2732:000 | DONE ins | na 16 16 | 0067e7 | ca          |                 dex                  
2733:000 | DONE ins | na 16 16 | 0067e8 | ca          |                 dex                  
2734:000 | DONE wsp | na 16 16 |        |             |
2735:000 | DONE ins | na 16 16 | 0067e9 | 95 00       |                 sta.dx 00            address is back as NOS
2736:000 | DONE ins | na 16 16 | 0067eb | a4 06       |                 ldy.d 000206         length is back as TOS
2737:000 | DONE wsp | na 16 16 |        |             |
2738:000 | DONE lbl | na 16 16 | 0067ed |             | number_loop                          
2739:000 | DONE ins | na 16 16 | 0067ed | 20 25 61    |                 jsr 006125           ( ud addr u -- ud addr u )
2740:000 | DONE wsp | na 16 16 |        |             |
2741:000 | DONE ins | na 16 16 | 0067f0 | 98          |                 tya                  test length of returned string, should be 0
2742:000 | DONE ins | na 16 16 | 0067f1 | f0 06       |                 beq 0067f9           
2743:000 | DONE wsp | na 16 16 |        |             |
2744:000 | DONE cmt | na 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
2745:000 | DONE cmt | na 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
2746:000 | DONE cmt | na 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
2747:000 | DONE cmt | na 16 16 |        |             |                 ; trouble one way or another
2748:000 | DONE cmt | na 16 16 |        |             |                 ; TODO print offending string
2749:000 | DONE ins | na 16 16 | 0067f3 | a9 91 78    |                 lda.# 007891         
2750:000 | DONE ins | na 16 16 | 0067f6 | 4c 0c 72    |                 jmp 00720c           
2751:000 | DONE wsp | na 16 16 |        |             |
2752:000 | DONE lbl | na 16 16 | 0067f9 |             | number_ok                            
2753:000 | DONE cmt | na 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
2754:000 | DONE ins | na 16 16 | 0067f9 | b4 02       |                 ldy.dx 02            
2755:000 | DONE ins | na 16 16 | 0067fb | e8          |                 inx                  
2756:000 | DONE ins | na 16 16 | 0067fc | e8          |                 inx                  
2757:000 | DONE ins | na 16 16 | 0067fd | e8          |                 inx                  
2758:000 | DONE ins | na 16 16 | 0067fe | e8          |                 inx                  
2759:000 | DONE wsp | na 16 16 |        |             |
2760:000 | DONE cmt | na 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
2761:000 | DONE cmt | na 16 16 |        |             |                 ; a minus and might actually be single-cell
2762:000 | DONE ins | na 16 16 | 0067ff | 68          |                 pla                  get copy of the flags
2763:000 | DONE ins | na 16 16 | 006800 | 48          |                 pha                  
2764:000 | DONE ins | na 16 16 | 006801 | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
2765:000 | DONE ins | na 16 16 | 006804 | f0 1b       |                 beq 006821           
2766:000 | DONE wsp | na 16 16 |        |             |
2767:000 | DONE cmt | na 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
2768:000 | DONE cmt | na 16 16 |        |             |                 ; negate it
2769:000 | DONE ins | na 16 16 | 006806 | 68          |                 pla                  
2770:000 | DONE ins | na 16 16 | 006807 | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
2771:000 | DONE ins | na 16 16 | 00680a | f0 25       |                 beq 006831           no minus, all done
2772:000 | DONE wsp | na 16 16 |        |             |
2773:000 | DONE ins | na 16 16 | 00680c | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
2774:000 | DONE ins | na 16 16 | 00680e | 49 ff ff    |                 eor.# 0ffff          
2775:000 | DONE wsp | na 16 16 |        |             |
2776:000 | DONE cmt | na 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
2777:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
2778:000 | DONE ins | na 16 16 | 006811 | 18          |                 clc                  
2779:000 | DONE ins | na 16 16 | 006812 | 69 01 00    |                 adc.# 0001           
2780:000 | DONE ins | na 16 16 | 006815 | 95 00       |                 sta.dx 00            
2781:000 | DONE wsp | na 16 16 |        |             |
2782:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
2783:000 | DONE ins | na 16 16 | 006817 | 98          |                 tya                  
2784:000 | DONE ins | na 16 16 | 006818 | 49 ff ff    |                 eor.# 0ffff          
2785:000 | DONE ins | na 16 16 | 00681b | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2786:000 | DONE ins | na 16 16 | 00681e | a8          |                 tay                  
2787:000 | DONE wsp | na 16 16 |        |             |
2788:000 | DONE ins | na 16 16 | 00681f | 80 10       |                 bra 006831           
2789:000 | DONE wsp | na 16 16 |        |             |
2790:000 | DONE lbl | na 16 16 | 006821 |             | number_single                        
2791:000 | DONE cmt | na 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
2792:000 | DONE ins | na 16 16 | 006821 | b4 00       |                 ldy.dx 00            
2793:000 | DONE ins | na 16 16 | 006823 | e8          |                 inx                  
2794:000 | DONE ins | na 16 16 | 006824 | e8          |                 inx                  
2795:000 | DONE wsp | na 16 16 |        |             |
2796:000 | DONE cmt | na 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
2797:000 | DONE cmt | na 16 16 |        |             |                 ; doubled for speed
2798:000 | DONE ins | na 16 16 | 006825 | 68          |                 pla                  
2799:000 | DONE ins | na 16 16 | 006826 | 29 00 ff    |                 and.# 0ff00          
2800:000 | DONE ins | na 16 16 | 006829 | f0 06       |                 beq 006831           no minus, all done
2801:000 | DONE wsp | na 16 16 |        |             |
2802:000 | DONE ins | na 16 16 | 00682b | 98          |                 tya                  NEGATE
2803:000 | DONE ins | na 16 16 | 00682c | 49 ff ff    |                 eor.# 0ffff          
2804:000 | DONE ins | na 16 16 | 00682f | 1a          |                 inc.a                
2805:000 | DONE ins | na 16 16 | 006830 | a8          |                 tay                  fall through to end
2806:000 | DONE wsp | na 16 16 |        |             |
2807:000 | DONE lbl | na 16 16 | 006831 |             | z_number                             
2807:001 | DONE ins | na 16 16 | 006831 | 60          |                 rts                  
2808:000 | DONE wsp | na 16 16 |        |             |
2809:000 | DONE wsp | na 16 16 |        |             |
2810:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2811:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
2812:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
2813:000 | DONE lbl | na 16 16 | 006832 |             | xt_or                                
2814:000 | DONE ins | na 16 16 | 006832 | 98          |                 tya                  
2815:000 | DONE ins | na 16 16 | 006833 | 15 00       |                 ora.dx 00            
2816:000 | DONE ins | na 16 16 | 006835 | a8          |                 tay                  
2817:000 | DONE wsp | na 16 16 |        |             |
2818:000 | DONE ins | na 16 16 | 006836 | e8          |                 inx                  
2819:000 | DONE ins | na 16 16 | 006837 | e8          |                 inx                  
2820:000 | DONE wsp | na 16 16 |        |             |
2821:000 | DONE lbl | na 16 16 | 006838 |             | z_or                                 
2821:001 | DONE ins | na 16 16 | 006838 | 60          |                 rts                  
2822:000 | DONE wsp | na 16 16 |        |             |
2823:000 | DONE wsp | na 16 16 |        |             |
2824:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2825:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
2826:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
2827:000 | DONE lbl | na 16 16 | 006839 |             | xt_over                              
2828:000 | DONE ins | na 16 16 | 006839 | ca          |                 dex                  
2829:000 | DONE ins | na 16 16 | 00683a | ca          |                 dex                  
2830:000 | DONE ins | na 16 16 | 00683b | 94 00       |                 sty.dx 00            
2831:000 | DONE ins | na 16 16 | 00683d | b4 02       |                 ldy.dx 02            
2832:000 | DONE wsp | na 16 16 |        |             |
2833:000 | DONE lbl | na 16 16 | 00683f |             | z_over                               
2833:001 | DONE ins | na 16 16 | 00683f | 60          |                 rts                  
2834:000 | DONE wsp | na 16 16 |        |             |
2835:000 | DONE wsp | na 16 16 |        |             |
2836:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2837:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
2838:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
2839:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
2840:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
2841:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
2842:000 | DONE lbl | na 16 16 | 006840 |             | xt_pad                               
2843:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2844:000 | DONE ins | na 16 16 | 006840 | ca          |                 dex                  
2845:000 | DONE ins | na 16 16 | 006841 | ca          |                 dex                  
2846:000 | DONE ins | na 16 16 | 006842 | 94 00       |                 sty.dx 00            
2847:000 | DONE wsp | na 16 16 |        |             |
2848:000 | DONE ins | na 16 16 | 006844 | a5 00       |                 lda.d 000200         
2849:000 | DONE ins | na 16 16 | 006846 | 18          |                 clc                  
2850:000 | DONE ins | na 16 16 | 006847 | 69 7f 00    |                 adc.# 00007f         
2851:000 | DONE ins | na 16 16 | 00684a | a8          |                 tay                  
2852:000 | DONE wsp | na 16 16 |        |             |
2853:000 | DONE lbl | na 16 16 | 00684b |             | z_pad                                
2853:001 | DONE ins | na 16 16 | 00684b | 60          |                 rts                  
2854:000 | DONE wsp | na 16 16 |        |             |
2855:000 | DONE wsp | na 16 16 |        |             |
2856:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2857:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
2858:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
2859:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
2860:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
2861:000 | DONE lbl | na 16 16 | 00684c |             | xt_page                              
2862:000 | DONE ins | na 16 16 | 00684c | a9 a0 78    |                 lda.# 0078a0         
2863:000 | DONE ins | na 16 16 | 00684f | 20 12 72    |                 jsr 007212           
2864:000 | DONE wsp | na 16 16 |        |             |
2865:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
2866:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
2867:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
2868:000 | DONE ins | na 16 16 | 006852 | a9 a5 78    |                 lda.# 0078a5         
2869:000 | DONE ins | na 16 16 | 006855 | 20 12 72    |                 jsr 007212           
2870:000 | DONE wsp | na 16 16 |        |             |
2871:000 | DONE lbl | na 16 16 | 006858 |             | z_page                               
2871:001 | DONE ins | na 16 16 | 006858 | 60          |                 rts                  
2872:000 | DONE wsp | na 16 16 |        |             |
2873:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2874:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
2875:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
2876:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
2877:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
2878:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
2879:000 | DONE cmt | na 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
2880:000 | DONE lbl | na 16 16 | 006859 |             | xt_parse-name                        
2881:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2882:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2883:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
2884:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
2885:000 | DONE ins | na 16 16 | 006859 | 5a          |                 phy                  save TOS for later use
2886:000 | DONE ins | na 16 16 | 00685a | a4 12       |                 ldy.d 000212         >IN
2887:000 | DONE ins | na 16 16 | 00685c | e2 20       |                 sep 20               
2887:001 | DONE ctl | na  8 16 |        |             |         .!a8
2888:000 | DONE lbl | na  8 16 | 00685e |             | parse-name_loop                      
2889:000 | DONE ins | na  8 16 | 00685e | c4 0e       |                 cpy.d 00020e         end of line?
2890:000 | DONE ins | na  8 16 | 006860 | f0 09       |                 beq 00686b           
2891:000 | DONE wsp | na  8 16 |        |             |
2892:000 | DONE ins | na  8 16 | 006862 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2893:000 | DONE ins | na  8 16 | 006864 | c9 20       |                 cmp.# AscSP          
2894:000 | DONE ins | na  8 16 | 006866 | d0 17       |                 bne 00687f           
2895:000 | DONE ins | na  8 16 | 006868 | c8          |                 iny                  
2896:000 | DONE ins | na  8 16 | 006869 | 80 f3       |                 bra 00685e           
2897:000 | DONE wsp | na  8 16 |        |             |
2898:000 | DONE lbl | na  8 16 | 00686b |             | parse-name_empty_line                
2899:000 | DONE ins | na  8 16 | 00686b | c2 20       |                 rep 20               
2899:001 | DONE ctl | na 16 16 |        |             |         .!a16
2900:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
2901:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
2902:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
2903:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
2904:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
2905:000 | DONE ins | na 16 16 | 00686d | ca          |                 dex                  
2906:000 | DONE ins | na 16 16 | 00686e | ca          |                 dex                  
2907:000 | DONE ins | na 16 16 | 00686f | ca          |                 dex                  
2908:000 | DONE ins | na 16 16 | 006870 | ca          |                 dex                  
2909:000 | DONE wsp | na 16 16 |        |             |
2910:000 | DONE ins | na 16 16 | 006871 | 7a          |                 ply                  restore old TOS as 3OS
2911:000 | DONE ins | na 16 16 | 006872 | 94 02       |                 sty.dx 02            
2912:000 | DONE wsp | na 16 16 |        |             |
2913:000 | DONE ins | na 16 16 | 006874 | a5 0c       |                 lda.d 00020c         
2914:000 | DONE ins | na 16 16 | 006876 | 18          |                 clc                  
2915:000 | DONE ins | na 16 16 | 006877 | 65 0e       |                 adc.d 00020e         
2916:000 | DONE ins | na 16 16 | 006879 | 95 00       |                 sta.dx 00            Address as NOS
2917:000 | DONE wsp | na 16 16 |        |             |
2918:000 | DONE ins | na 16 16 | 00687b | a0 00 00    |                 ldy.# 0000           TOS
2919:000 | DONE wsp | na 16 16 |        |             |
2920:000 | DONE ins | na 16 16 | 00687e | 60          |                 rts                  don't have to go through PARSE
2921:000 | DONE wsp | na 16 16 |        |             |
2922:000 | DONE lbl | na 16 16 | 00687f |             | parse-name_found                     
2923:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2924:000 | DONE ins | na 16 16 | 00687f | c2 20       |                 rep 20               
2924:001 | DONE ctl | na 16 16 |        |             |         .!a16
2925:000 | DONE ins | na 16 16 | 006881 | 84 12       |                 sty.d 000212         new >IN
2926:000 | DONE wsp | na 16 16 |        |             |
2927:000 | DONE ins | na 16 16 | 006883 | 7a          |                 ply                  recover TOS
2928:000 | DONE ins | na 16 16 | 006884 | ca          |                 dex                  
2929:000 | DONE ins | na 16 16 | 006885 | ca          |                 dex                  
2930:000 | DONE ins | na 16 16 | 006886 | 94 00       |                 sty.dx 00            
2931:000 | DONE wsp | na 16 16 |        |             |
2932:000 | DONE ins | na 16 16 | 006888 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
2933:000 | DONE wsp | na 16 16 |        |             |
2934:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
2935:000 | DONE wsp | na 16 16 |        |             |
2936:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2937:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
2938:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
2939:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
2940:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
2941:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
2942:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
2943:000 | DONE cmt | na 16 16 |        |             | ;
2944:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
2945:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
2946:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
2947:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
2948:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
2949:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
2950:000 | DONE cmt | na 16 16 |        |             | ;
2951:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
2952:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
2953:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
2954:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
2955:000 | DONE lbl | na 16 16 | 00688b |             | xt_parse                             
2956:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2957:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2958:000 | DONE ins | na 16 16 | 00688b | 84 16       |                 sty.d 000216         save delimiter, char is LSB
2959:000 | DONE wsp | na 16 16 |        |             |
2960:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
2961:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
2962:000 | DONE cmt | na 16 16 |        |             |                 ; return
2963:000 | DONE ins | na 16 16 | 00688d | a5 12       |                 lda.d 000212         
2964:000 | DONE ins | na 16 16 | 00688f | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
2965:000 | DONE ins | na 16 16 | 006891 | 18          |                 clc                  
2966:000 | DONE ins | na 16 16 | 006892 | 65 0c       |                 adc.d 00020c         
2967:000 | DONE wsp | na 16 16 |        |             |
2968:000 | DONE ins | na 16 16 | 006894 | ca          |                 dex                  save addr as NOS
2969:000 | DONE ins | na 16 16 | 006895 | ca          |                 dex                  
2970:000 | DONE ins | na 16 16 | 006896 | 95 00       |                 sta.dx 00            
2971:000 | DONE wsp | na 16 16 |        |             |
2972:000 | DONE ins | na 16 16 | 006898 | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
2973:000 | DONE wsp | na 16 16 |        |             |
2974:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
2975:000 | DONE ins | na 16 16 | 00689a | a4 12       |                 ldy.d 000212         
2976:000 | DONE ins | na 16 16 | 00689c | e2 20       |                 sep 20               
2976:001 | DONE ctl | na  8 16 |        |             |         .!a8
2977:000 | DONE wsp | na  8 16 |        |             |
2978:000 | DONE lbl | na  8 16 | 00689e |             | parse_loop                           
2979:000 | DONE ins | na  8 16 | 00689e | c4 0e       |                 cpy.d 00020e         check for EOL first
2980:000 | DONE ins | na  8 16 | 0068a0 | f0 0d       |                 beq 0068af           
2981:000 | DONE wsp | na  8 16 |        |             |
2982:000 | DONE ins | na  8 16 | 0068a2 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2983:000 | DONE ins | na  8 16 | 0068a4 | c5 16       |                 cmp.d 000216         found delimiter?
2984:000 | DONE ins | na  8 16 | 0068a6 | f0 03       |                 beq 0068ab           
2985:000 | DONE ins | na  8 16 | 0068a8 | c8          |                 iny                  
2986:000 | DONE ins | na  8 16 | 0068a9 | 80 f3       |                 bra 00689e           
2987:000 | DONE wsp | na  8 16 |        |             |
2988:000 | DONE lbl | na  8 16 | 0068ab |             | parse_found_delimiter                
2989:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
2990:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
2991:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
2992:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
2993:000 | DONE ins | na  8 16 | 0068ab | c2 20       |                 rep 20               
2993:001 | DONE ctl | na 16 16 |        |             |         .!a16
2994:000 | DONE ins | na 16 16 | 0068ad | e6 18       |                 inc.d 000218         
2995:000 | DONE wsp | na 16 16 |        |             |
2996:000 | DONE lbl | na 16 16 | 0068af |             | parse_reached_eol                    
2997:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
2998:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2999:000 | DONE ins | na 16 16 | 0068af | c2 20       |                 rep 20               
2999:001 | DONE ctl | na 16 16 |        |             |         .!a16
3000:000 | DONE ins | na 16 16 | 0068b1 | 98          |                 tya                  
3001:000 | DONE ins | na 16 16 | 0068b2 | 38          |                 sec                  
3002:000 | DONE ins | na 16 16 | 0068b3 | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
3003:000 | DONE ins | na 16 16 | 0068b5 | 48          |                 pha                  save so we can manipulate Y
3004:000 | DONE wsp | na 16 16 |        |             |
3005:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
3006:000 | DONE ins | na 16 16 | 0068b6 | 98          |                 tya                  
3007:000 | DONE ins | na 16 16 | 0068b7 | 18          |                 clc                  
3008:000 | DONE ins | na 16 16 | 0068b8 | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
3009:000 | DONE ins | na 16 16 | 0068ba | 85 12       |                 sta.d 000212         
3010:000 | DONE wsp | na 16 16 |        |             |
3011:000 | DONE ins | na 16 16 | 0068bc | 7a          |                 ply                  length of string in TOS
3012:000 | DONE wsp | na 16 16 |        |             |
3013:000 | DONE lbl | na 16 16 | 0068bd |             | z_parse-name                         
3014:000 | DONE lbl | na 16 16 | 0068bd |             | z_parse                              
3014:001 | DONE ins | na 16 16 | 0068bd | 60          |                 rts                  
3015:000 | DONE wsp | na 16 16 |        |             |
3016:000 | DONE wsp | na 16 16 |        |             |
3017:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3018:000 | DONE cmt | na 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
3019:000 | DONE cmt | na 16 16 |        |             | ; Add NOS to address in TOS
3020:000 | DONE lbl | na 16 16 | 0068be |             | xt_plusstore                         
3021:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3022:000 | DONE ins | na 16 16 | 0068be | b9 00 00    |                 lda.y 0000           
3023:000 | DONE ins | na 16 16 | 0068c1 | 18          |                 clc                  
3024:000 | DONE ins | na 16 16 | 0068c2 | 75 00       |                 adc.dx 00            
3025:000 | DONE ins | na 16 16 | 0068c4 | 99 00 00    |                 sta.y 0000           
3026:000 | DONE wsp | na 16 16 |        |             |
3027:000 | DONE ins | na 16 16 | 0068c7 | b4 02       |                 ldy.dx 02            
3028:000 | DONE ins | na 16 16 | 0068c9 | e8          |                 inx                  
3029:000 | DONE ins | na 16 16 | 0068ca | e8          |                 inx                  
3030:000 | DONE ins | na 16 16 | 0068cb | e8          |                 inx                  
3031:000 | DONE ins | na 16 16 | 0068cc | e8          |                 inx                  
3032:000 | DONE wsp | na 16 16 |        |             |
3033:000 | DONE lbl | na 16 16 | 0068cd |             | z_plusstore                          
3033:001 | DONE ins | na 16 16 | 0068cd | 60          |                 rts                  
3034:000 | DONE wsp | na 16 16 |        |             |
3035:000 | DONE wsp | na 16 16 |        |             |
3036:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3037:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
3038:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
3039:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
3040:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
3041:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
3042:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
3043:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
3044:000 | DONE lbl | na 16 16 | 0068ce |             | xt_postpone                          
3045:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
3046:000 | DONE ins | na 16 16 | 0068ce | 20 59 68    |                 jsr 006859           ( addr n )
3047:000 | DONE wsp | na 16 16 |        |             |
3048:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
3049:000 | DONE ins | na 16 16 | 0068d1 | d0 06       |                 bne 0068d9           
3050:000 | DONE ins | na 16 16 | 0068d3 | a9 f4 77    |                 lda.# 0077f4         
3051:000 | DONE ins | na 16 16 | 0068d6 | 4c 0c 72    |                 jmp 00720c           
3052:000 | DONE wsp | na 16 16 |        |             |
3053:000 | DONE lbl | na 16 16 | 0068d9 |             | pp_got_word                          
3054:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
3055:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
3056:000 | DONE ins | na 16 16 | 0068d9 | 20 45 72    |                 jsr 007245           
3057:000 | DONE wsp | na 16 16 |        |             |
3058:000 | DONE ins | na 16 16 | 0068dc | 20 a4 66    |                 jsr 0066a4           ( nt | 0 )
3059:000 | DONE wsp | na 16 16 |        |             |
3060:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
3061:000 | DONE ins | na 16 16 | 0068df | d0 03       |                 bne 0068e4           
3062:000 | DONE ins | na 16 16 | 0068e1 | a9 91 78    |                 lda.# 007891         
3063:000 | DONE wsp | na 16 16 |        |             |
3064:000 | DONE lbl | na 16 16 | 0068e4 |             | pp_got_nt                            
3065:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
3066:000 | DONE ins | na 16 16 | 0068e4 | 84 16       |                 sty.d 000216         
3067:000 | DONE wsp | na 16 16 |        |             |
3068:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
3069:000 | DONE ins | na 16 16 | 0068e6 | 20 8a 67    |                 jsr 00678a           ( xt )
3070:000 | DONE wsp | na 16 16 |        |             |
3071:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
3072:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
3073:000 | DONE ins | na 16 16 | 0068e9 | b2 16       |                 lda.di 000216        LDA (TMP1) - get status byte of word
3074:000 | DONE ins | na 16 16 | 0068eb | eb          |                 xba                  flags are MSB
3075:000 | DONE ins | na 16 16 | 0068ec | 29 02 00    |                 and.# IM             mask everything but Immediate bit
3076:000 | DONE ins | na 16 16 | 0068ef | f0 03       |                 beq 0068f4           
3077:000 | DONE wsp | na 16 16 |        |             |
3078:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
3079:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
3080:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
3081:000 | DONE ins | na 16 16 | 0068f1 | 4c 16 65    |                 jmp 006516           JSR/RTS
3082:000 | DONE wsp | na 16 16 |        |             |
3083:000 | DONE lbl | na 16 16 | 0068f4 |             | pp_not_immediate                     
3084:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deffered
3085:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
3086:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
3087:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
3088:000 | DONE ins | na 16 16 | 0068f4 | f4 37 67    |                 phe.# 006737         PEA LITERAL_RT
3089:000 | DONE ins | na 16 16 | 0068f7 | 20 eb 71    |                 jsr 0071eb           
3090:000 | DONE wsp | na 16 16 |        |             |
3091:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
3092:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
3093:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
3094:000 | DONE ins | na 16 16 | 0068fa | 20 13 62    |                 jsr 006213           
3095:000 | DONE wsp | na 16 16 |        |             |
3096:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
3097:000 | DONE ins | na 16 16 | 0068fd | f4 16 65    |                 phe.# 006516         
3098:000 | DONE ins | na 16 16 | 006900 | 4c eb 71    |                 jmp 0071eb           JSR/RTS
3099:000 | DONE wsp | na 16 16 |        |             |
3100:000 | DONE lbl | na 16 16 | 006903 |             | z_postpone                           ; never reached
3101:000 | DONE wsp | na 16 16 |        |             |
3102:000 | DONE wsp | na 16 16 |        |             |
3103:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3104:000 | DONE cmt | na 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
3105:000 | DONE cmt | na 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
3106:000 | DONE cmt | na 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
3107:000 | DONE cmt | na 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
3108:000 | DONE cmt | na 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
3109:000 | DONE cmt | na 16 16 |        |             | ; actually short enough to make that reasonable
3110:000 | DONE cmt | na 16 16 |        |             | ; TODO consider special case in COMPILE, see there
3111:000 | DONE lbl | na 16 16 | 006903 |             | xt_rfetch                            
3112:000 | DONE cmt | na 16 16 |        |             |                 ; get return address that is on top of the return stack
3113:000 | DONE ins | na 16 16 | 006903 | 68          |                 pla                  
3114:000 | DONE wsp | na 16 16 |        |             |
3115:000 | DONE ins | na 16 16 | 006904 | ca          |                 dex                  
3116:000 | DONE ins | na 16 16 | 006905 | ca          |                 dex                  
3117:000 | DONE ins | na 16 16 | 006906 | 94 00       |                 sty.dx 00            
3118:000 | DONE wsp | na 16 16 |        |             |
3119:000 | DONE ins | na 16 16 | 006908 | 7a          |                 ply                  get top of return stack and push copy back again
3120:000 | DONE ins | na 16 16 | 006909 | 5a          |                 phy                  
3121:000 | DONE wsp | na 16 16 |        |             |
3122:000 | DONE ins | na 16 16 | 00690a | 48          |                 pha                  restore the return address
3123:000 | DONE wsp | na 16 16 |        |             |
3124:000 | DONE lbl | na 16 16 | 00690b |             | z_rfetch                             
3124:001 | DONE ins | na 16 16 | 00690b | 60          |                 rts                  
3125:000 | DONE wsp | na 16 16 |        |             |
3126:000 | DONE wsp | na 16 16 |        |             |
3127:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3128:000 | DONE cmt | na 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
3129:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
3130:000 | DONE cmt | na 16 16 |        |             | ; jump address out of the way first.
3131:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
3132:000 | DONE lbl | na 16 16 | 00690c |             | xt_fromr                             
3133:000 | DONE cmt | na 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
3134:000 | DONE cmt | na 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
3135:000 | DONE cmt | na 16 16 |        |             |                 ; a waste of nine cycles
3136:000 | DONE ins | na 16 16 | 00690c | 68          |                 pla                  
3137:000 | DONE wsp | na 16 16 |        |             |
3138:000 | DONE ins | na 16 16 | 00690d | ca          |                 dex                  
3139:000 | DONE ins | na 16 16 | 00690e | ca          |                 dex                  
3140:000 | DONE ins | na 16 16 | 00690f | 94 00       |                 sty.dx 00            
3141:000 | DONE wsp | na 16 16 |        |             |
3142:000 | DONE ins | na 16 16 | 006911 | 7a          |                 ply                  the actual work
3143:000 | DONE wsp | na 16 16 |        |             |
3144:000 | DONE ins | na 16 16 | 006912 | 48          |                 pha                  get return address back
3145:000 | DONE wsp | na 16 16 |        |             |
3146:000 | DONE lbl | na 16 16 | 006913 |             | z_fromr                              
3146:001 | DONE ins | na 16 16 | 006913 | 60          |                 rts                  
3147:000 | DONE wsp | na 16 16 |        |             |
3148:000 | DONE wsp | na 16 16 |        |             |
3149:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3150:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
3151:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
3152:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
3153:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
3154:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
3155:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
3156:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
3157:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
3158:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
3159:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
3160:000 | DONE lbl | na 16 16 | 006914 |             | xt_refill                            
3161:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3162:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3163:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
3164:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
3165:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
3166:000 | DONE ins | na 16 16 | 006914 | a5 0c       |                 lda.d 00020c         
3167:000 | DONE ins | na 16 16 | 006916 | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
3168:000 | DONE ins | na 16 16 | 006919 | 85 0c       |                 sta.d 00020c         
3169:000 | DONE wsp | na 16 16 |        |             |
3170:000 | DONE ins | na 16 16 | 00691b | a5 0e       |                 lda.d 00020e         current length is now previous length
3171:000 | DONE ins | na 16 16 | 00691d | 85 10       |                 sta.d 000210         
3172:000 | DONE wsp | na 16 16 |        |             |
3173:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
3174:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
3175:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
3176:000 | DONE ins | na 16 16 | 00691f | a5 0a       |                 lda.d 00020a         
3177:000 | DONE ins | na 16 16 | 006921 | d0 14       |                 bne 006937           
3178:000 | DONE wsp | na 16 16 |        |             |
3179:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
3180:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
3181:000 | DONE ins | na 16 16 | 006923 | ca          |                 dex                  push Data Stack down twice
3182:000 | DONE ins | na 16 16 | 006924 | ca          |                 dex                  
3183:000 | DONE ins | na 16 16 | 006925 | 94 00       |                 sty.dx 00            
3184:000 | DONE wsp | na 16 16 |        |             |
3185:000 | DONE ins | na 16 16 | 006927 | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
3186:000 | DONE ins | na 16 16 | 006929 | ca          |                 dex                  
3187:000 | DONE ins | na 16 16 | 00692a | ca          |                 dex                  
3188:000 | DONE ins | na 16 16 | 00692b | 95 00       |                 sta.dx 00            
3189:000 | DONE wsp | na 16 16 |        |             |
3190:000 | DONE ins | na 16 16 | 00692d | a0 ff 00    |                 ldy.# 0000ff         
3191:000 | DONE wsp | na 16 16 |        |             |
3192:000 | DONE ins | na 16 16 | 006930 | 20 8d 63    |                 jsr 00638d           ( addr n1 -- n2)
3193:000 | DONE wsp | na 16 16 |        |             |
3194:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
3195:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
3196:000 | DONE ins | na 16 16 | 006933 | a0 ff ff    |                 ldy.# 0ffff          
3197:000 | DONE wsp | na 16 16 |        |             |
3198:000 | DONE ins | na 16 16 | 006936 | 60          |                 rts                  
3199:000 | DONE wsp | na 16 16 |        |             |
3200:000 | DONE lbl | na 16 16 | 006937 |             | refill_src_not_kbd                   
3201:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
3202:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
3203:000 | DONE ins | na 16 16 | 006937 | 1a          |                 inc.a                
3204:000 | DONE ins | na 16 16 | 006938 | d0 06       |                 bne 006940           
3205:000 | DONE wsp | na 16 16 |        |             |
3206:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
3207:000 | DONE ins | na 16 16 | 00693a | ca          |                 dex                  
3208:000 | DONE ins | na 16 16 | 00693b | ca          |                 dex                  
3209:000 | DONE ins | na 16 16 | 00693c | 94 00       |                 sty.dx 00            
3210:000 | DONE ins | na 16 16 | 00693e | a8          |                 tay                  
3211:000 | DONE wsp | na 16 16 |        |             |
3212:000 | DONE ins | na 16 16 | 00693f | 60          |                 rts                  
3213:000 | DONE wsp | na 16 16 |        |             |
3214:000 | DONE lbl | na 16 16 | 006940 |             | refill_source_is_not_string          
3215:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
3216:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
3217:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
3218:000 | DONE ins | na 16 16 | 006940 | a9 49 78    |                 lda.# 007849         
3219:000 | DONE ins | na 16 16 | 006943 | 4c 0c 72    |                 jmp 00720c           
3220:000 | DONE wsp | na 16 16 |        |             |
3221:000 | DONE lbl | na 16 16 | 006946 |             | z_refill                             
3221:001 | DONE ins | na 16 16 | 006946 | 60          |                 rts                  dummy for compiling
3222:000 | DONE wsp | na 16 16 |        |             |
3223:000 | DONE wsp | na 16 16 |        |             |
3224:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3225:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
3226:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
3227:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
3228:000 | DONE lbl | na 16 16 | 006947 |             | xt_rot                               
3229:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3230:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3231:000 | DONE ins | na 16 16 | 006947 | b5 00       |                 lda.dx 00            save b
3232:000 | DONE ins | na 16 16 | 006949 | 94 00       |                 sty.dx 00            move c to NOS
3233:000 | DONE ins | na 16 16 | 00694b | b4 02       |                 ldy.dx 02            move a to TOS
3234:000 | DONE ins | na 16 16 | 00694d | 95 02       |                 sta.dx 02            save b as 3OS
3235:000 | DONE wsp | na 16 16 |        |             |
3236:000 | DONE lbl | na 16 16 | 00694f |             | z_rot                                
3236:001 | DONE ins | na 16 16 | 00694f | 60          |                 rts                  
3237:000 | DONE wsp | na 16 16 |        |             |
3238:000 | DONE wsp | na 16 16 |        |             |
3239:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3240:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
3241:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
3242:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
3243:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
3244:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
3245:000 | DONE cmt | na 16 16 |        |             | ; want it in code
3246:000 | DONE lbl | na 16 16 | 006950 |             | xt_squote                            
3247:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
3248:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
3249:000 | DONE ins | na 16 16 | 006950 | ca          |                 dex                  
3250:000 | DONE ins | na 16 16 | 006951 | ca          |                 dex                  
3251:000 | DONE ins | na 16 16 | 006952 | 94 00       |                 sty.dx 00            
3252:000 | DONE wsp | na 16 16 |        |             |
3253:000 | DONE ins | na 16 16 | 006954 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
3254:000 | DONE ins | na 16 16 | 006957 | 20 8b 68    |                 jsr 00688b           Returns ( addr u ) of string
3255:000 | DONE wsp | na 16 16 |        |             |
3256:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
3257:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
3258:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
3259:000 | DONE ins | na 16 16 | 00695a | a5 14       |                 lda.d 000214         
3260:000 | DONE ins | na 16 16 | 00695c | f0 03       |                 beq 006961           if we're interpreting, we're done
3261:000 | DONE wsp | na 16 16 |        |             |
3262:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
3263:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
3264:000 | DONE ins | na 16 16 | 00695e | 4c 80 69    |                 jmp 006980           JSR/RTS
3265:000 | DONE wsp | na 16 16 |        |             |
3266:000 | DONE lbl | na 16 16 | 006961 |             | z_squote                             
3266:001 | DONE ins | na 16 16 | 006961 | 60          |                 rts                  
3267:000 | DONE wsp | na 16 16 |        |             |
3268:000 | DONE wsp | na 16 16 |        |             |
3269:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3270:000 | DONE cmt | na 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
3271:000 | DONE cmt | na 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
3272:000 | DONE lbl | na 16 16 | 006962 |             | xt_stod                              
3273:000 | DONE ins | na 16 16 | 006962 | ca          |                 dex                  make room on stack
3274:000 | DONE ins | na 16 16 | 006963 | ca          |                 dex                  
3275:000 | DONE ins | na 16 16 | 006964 | 94 00       |                 sty.dx 00            
3276:000 | DONE wsp | na 16 16 |        |             |
3277:000 | DONE ins | na 16 16 | 006966 | 98          |                 tya                  force flag check
3278:000 | DONE ins | na 16 16 | 006967 | 10 05       |                 bpl 00696e           
3279:000 | DONE wsp | na 16 16 |        |             |
3280:000 | DONE cmt | na 16 16 |        |             |                 ; negative number, extend sign
3281:000 | DONE ins | na 16 16 | 006969 | a0 ff ff    |                 ldy.# 0ffff          
3282:000 | DONE ins | na 16 16 | 00696c | 80 03       |                 bra 006971           
3283:000 | DONE wsp | na 16 16 |        |             |
3284:000 | DONE lbl | na 16 16 | 00696e |             | stod_pos                             
3285:000 | DONE cmt | na 16 16 |        |             |                 ; positive number
3286:000 | DONE ins | na 16 16 | 00696e | a0 00 00    |                 ldy.# 0000           fall through
3287:000 | DONE wsp | na 16 16 |        |             |
3288:000 | DONE lbl | na 16 16 | 006971 |             | z_stod                               
3288:001 | DONE ins | na 16 16 | 006971 | 60          |                 rts                  
3289:000 | DONE wsp | na 16 16 |        |             |
3290:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3291:000 | DONE cmt | na 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
3292:000 | DONE cmt | na 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
3293:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
3294:000 | DONE cmt | na 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
3295:000 | DONE lbl | na 16 16 | 006972 |             | xt_sign                              
3296:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3297:000 | DONE cmt | na 16 16 |        |             |                 ; See if number is negative
3298:000 | DONE ins | na 16 16 | 006972 | 98          |                 tya                  force flag check
3299:000 | DONE ins | na 16 16 | 006973 | 10 06       |                 bpl 00697b           
3300:000 | DONE wsp | na 16 16 |        |             |
3301:000 | DONE cmt | na 16 16 |        |             |                 ; We're negative, overwrite number TOS
3302:000 | DONE ins | na 16 16 | 006975 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
3303:000 | DONE wsp | na 16 16 |        |             |
3304:000 | DONE ins | na 16 16 | 006978 | 4c 17 67    |                 jmp 006717           JSR/RTS, does not fall through
3305:000 | DONE wsp | na 16 16 |        |             |
3306:000 | DONE lbl | na 16 16 | 00697b |             | sign_plus                            
3307:000 | DONE ins | na 16 16 | 00697b | b4 00       |                 ldy.dx 00            get rid of number and leave
3308:000 | DONE ins | na 16 16 | 00697d | e8          |                 inx                  
3309:000 | DONE ins | na 16 16 | 00697e | e8          |                 inx                  
3310:000 | DONE wsp | na 16 16 |        |             |
3311:000 | DONE lbl | na 16 16 | 00697f |             | z_sign                               
3311:001 | DONE ins | na 16 16 | 00697f | 60          |                 rts                  
3312:000 | DONE wsp | na 16 16 |        |             |
3313:000 | DONE wsp | na 16 16 |        |             |
3314:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3315:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
3316:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
3317:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
3318:000 | DONE cmt | na 16 16 |        |             | ; tmp2
3319:000 | DONE lbl | na 16 16 | 006980 |             | xt_sliteral                          
3320:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3321:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
3322:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
3323:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
3324:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
3325:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
3326:000 | DONE ins | na 16 16 | 006980 | b5 00       |                 lda.dx 00            Address of string is NOS
3327:000 | DONE ins | na 16 16 | 006982 | 85 16       |                 sta.d 000216         
3328:000 | DONE ins | na 16 16 | 006984 | 84 18       |                 sty.d 000218         keep copy of string length
3329:000 | DONE wsp | na 16 16 |        |             |
3330:000 | DONE ins | na 16 16 | 006986 | e2 20       |                 sep 20               
3330:001 | DONE ctl | na  8 16 |        |             |         .!a8
3331:000 | DONE ins | na  8 16 | 006988 | a9 4c       |                 lda.# 04c            opcode for JMP
3332:000 | DONE ins | na  8 16 | 00698a | 92 00       |                 sta.di 000200        STA (CP)
3333:000 | DONE ins | na  8 16 | 00698c | c2 20       |                 rep 20               
3333:001 | DONE ctl | na 16 16 |        |             |         .!a16
3334:000 | DONE ins | na 16 16 | 00698e | e6 00       |                 inc.d 000200         
3335:000 | DONE wsp | na 16 16 |        |             |
3336:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
3337:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
3338:000 | DONE ins | na 16 16 | 006990 | a5 18       |                 lda.d 000218         string length
3339:000 | DONE ins | na 16 16 | 006992 | 1a          |                 inc.a                
3340:000 | DONE ins | na 16 16 | 006993 | 1a          |                 inc.a                
3341:000 | DONE wsp | na 16 16 |        |             |
3342:000 | DONE ins | na 16 16 | 006994 | 18          |                 clc                  
3343:000 | DONE ins | na 16 16 | 006995 | 65 00       |                 adc.d 000200         current address
3344:000 | DONE ins | na 16 16 | 006997 | 92 00       |                 sta.di 000200        store jump target
3345:000 | DONE wsp | na 16 16 |        |             |
3346:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
3347:000 | DONE ins | na 16 16 | 006999 | e6 00       |                 inc.d 000200         
3348:000 | DONE ins | na 16 16 | 00699b | e6 00       |                 inc.d 000200         
3349:000 | DONE wsp | na 16 16 |        |             |
3350:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
3351:000 | DONE ins | na 16 16 | 00699d | 88          |                 dey                  last offset is one less than length
3352:000 | DONE ins | na 16 16 | 00699e | e2 20       |                 sep 20               
3352:001 | DONE ctl | na  8 16 |        |             |         .!a8
3353:000 | DONE lbl | na  8 16 | 0069a0 |             | sl_loop                              
3354:000 | DONE ins | na  8 16 | 0069a0 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3355:000 | DONE ins | na  8 16 | 0069a2 | 91 00       |                 sta.diy 000200       STA (CP),Y
3356:000 | DONE ins | na  8 16 | 0069a4 | 88          |                 dey                  
3357:000 | DONE ins | na  8 16 | 0069a5 | 10 f9       |                 bpl 0069a0           
3358:000 | DONE wsp | na  8 16 |        |             |
3359:000 | DONE ins | na  8 16 | 0069a7 | c2 20       |                 rep 20               
3359:001 | DONE ctl | na 16 16 |        |             |         .!a16
3360:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
3361:000 | DONE ins | na 16 16 | 0069a9 | a5 00       |                 lda.d 000200         
3362:000 | DONE ins | na 16 16 | 0069ab | 85 16       |                 sta.d 000216         overwrites original address
3363:000 | DONE wsp | na 16 16 |        |             |
3364:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
3365:000 | DONE ins | na 16 16 | 0069ad | 18          |                 clc                  
3366:000 | DONE ins | na 16 16 | 0069ae | 65 18       |                 adc.d 000218         length of string
3367:000 | DONE ins | na 16 16 | 0069b0 | 85 00       |                 sta.d 000200         
3368:000 | DONE wsp | na 16 16 |        |             |
3369:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
3370:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
3371:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
3372:000 | DONE cmt | na 16 16 |        |             |                 ;
3373:000 | DONE cmt | na 16 16 |        |             |                 ; xt -->    jmp a
3374:000 | DONE cmt | na 16 16 |        |             |                 ;           <string data bytes>
3375:000 | DONE cmt | na 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
3376:000 | DONE cmt | na 16 16 |        |             |                 ;           <string address>
3377:000 | DONE cmt | na 16 16 |        |             |                 ;           <string length>
3378:000 | DONE cmt | na 16 16 |        |             |                 ; rts -->
3379:000 | DONE cmt | na 16 16 |        |             |                 ;
3380:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
3381:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
3382:000 | DONE ins | na 16 16 | 0069b2 | f4 cb 69    |                 phe.# 0069cb         
3383:000 | DONE ins | na 16 16 | 0069b5 | 20 eb 71    |                 jsr 0071eb           
3384:000 | DONE wsp | na 16 16 |        |             |
3385:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
3386:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
3387:000 | DONE ins | na 16 16 | 0069b8 | a5 16       |                 lda.d 000216         new address of string
3388:000 | DONE ins | na 16 16 | 0069ba | 48          |                 pha                  
3389:000 | DONE ins | na 16 16 | 0069bb | 20 e6 71    |                 jsr 0071e6           
3390:000 | DONE wsp | na 16 16 |        |             |
3391:000 | DONE ins | na 16 16 | 0069be | a5 18       |                 lda.d 000218         
3392:000 | DONE ins | na 16 16 | 0069c0 | 48          |                 pha                  
3393:000 | DONE ins | na 16 16 | 0069c1 | 20 e6 71    |                 jsr 0071e6           
3394:000 | DONE wsp | na 16 16 |        |             |
3395:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
3396:000 | DONE ins | na 16 16 | 0069c4 | b4 02       |                 ldy.dx 02            2DROP
3397:000 | DONE ins | na 16 16 | 0069c6 | e8          |                 inx                  
3398:000 | DONE ins | na 16 16 | 0069c7 | e8          |                 inx                  
3399:000 | DONE ins | na 16 16 | 0069c8 | e8          |                 inx                  
3400:000 | DONE ins | na 16 16 | 0069c9 | e8          |                 inx                  
3401:000 | DONE wsp | na 16 16 |        |             |
3402:000 | DONE lbl | na 16 16 | 0069ca |             | z_sliteral                           
3402:001 | DONE ins | na 16 16 | 0069ca | 60          |                 rts                  
3403:000 | DONE wsp | na 16 16 |        |             |
3404:000 | DONE lbl | na 16 16 | 0069cb |             | sliteral_rt                          
3405:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
3406:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
3407:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
3408:000 | DONE wsp | na 16 16 |        |             |
3409:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
3410:000 | DONE ins | na 16 16 | 0069cb | ca          |                 dex                  
3411:000 | DONE ins | na 16 16 | 0069cc | ca          |                 dex                  
3412:000 | DONE ins | na 16 16 | 0069cd | ca          |                 dex                  
3413:000 | DONE ins | na 16 16 | 0069ce | ca          |                 dex                  
3414:000 | DONE ins | na 16 16 | 0069cf | 94 02       |                 sty.dx 02            
3415:000 | DONE wsp | na 16 16 |        |             |
3416:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
3417:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
3418:000 | DONE ins | na 16 16 | 0069d1 | 7a          |                 ply                  
3419:000 | DONE ins | na 16 16 | 0069d2 | c8          |                 iny                  
3420:000 | DONE wsp | na 16 16 |        |             |
3421:000 | DONE ins | na 16 16 | 0069d3 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3422:000 | DONE ins | na 16 16 | 0069d6 | 95 00       |                 sta.dx 00            save string address as NOS
3423:000 | DONE ins | na 16 16 | 0069d8 | c8          |                 iny                  
3424:000 | DONE ins | na 16 16 | 0069d9 | c8          |                 iny                  
3425:000 | DONE ins | na 16 16 | 0069da | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
3426:000 | DONE wsp | na 16 16 |        |             |
3427:000 | DONE ins | na 16 16 | 0069dd | c8          |                 iny                  ... first, though, repair return jump
3428:000 | DONE ins | na 16 16 | 0069de | 5a          |                 phy                  
3429:000 | DONE wsp | na 16 16 |        |             |
3430:000 | DONE ins | na 16 16 | 0069df | a8          |                 tay                  TOS is now length of string
3431:000 | DONE wsp | na 16 16 |        |             |
3432:000 | DONE ins | na 16 16 | 0069e0 | 60          |                 rts                  
3433:000 | DONE wsp | na 16 16 |        |             |
3434:000 | DONE wsp | na 16 16 |        |             |
3435:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3436:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
3437:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
3438:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
3439:000 | DONE wsp | na 16 16 |        |             |
3440:000 | DONE lbl | na 16 16 | 0069e1 |             | xt_source                            
3441:000 | DONE ins | na 16 16 | 0069e1 | ca          |                 dex                  make room on Data Stack
3442:000 | DONE ins | na 16 16 | 0069e2 | ca          |                 dex                  
3443:000 | DONE ins | na 16 16 | 0069e3 | ca          |                 dex                  
3444:000 | DONE ins | na 16 16 | 0069e4 | ca          |                 dex                  
3445:000 | DONE ins | na 16 16 | 0069e5 | 94 02       |                 sty.dx 02            
3446:000 | DONE wsp | na 16 16 |        |             |
3447:000 | DONE ins | na 16 16 | 0069e7 | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
3448:000 | DONE ins | na 16 16 | 0069e9 | 95 00       |                 sta.dx 00            
3449:000 | DONE wsp | na 16 16 |        |             |
3450:000 | DONE ins | na 16 16 | 0069eb | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
3451:000 | DONE wsp | na 16 16 |        |             |
3452:000 | DONE lbl | na 16 16 | 0069ed |             | z_source                             
3452:001 | DONE ins | na 16 16 | 0069ed | 60          |                 rts                  
3453:000 | DONE wsp | na 16 16 |        |             |
3454:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3455:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
3456:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
3457:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
3458:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
3459:000 | DONE lbl | na 16 16 | 0069ee |             | xt_source-id                         
3460:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3461:000 | DONE ins | na 16 16 | 0069ee | ca          |                 dex                  
3462:000 | DONE ins | na 16 16 | 0069ef | ca          |                 dex                  
3463:000 | DONE ins | na 16 16 | 0069f0 | 94 00       |                 sty.dx 00            
3464:000 | DONE ins | na 16 16 | 0069f2 | a4 0a       |                 ldy.d 00020a         
3465:000 | DONE wsp | na 16 16 |        |             |
3466:000 | DONE lbl | na 16 16 | 0069f4 |             | z_source-id                          
3466:001 | DONE ins | na 16 16 | 0069f4 | 60          |                 rts                  
3467:000 | DONE wsp | na 16 16 |        |             |
3468:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3469:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
3470:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
3471:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
3472:000 | DONE lbl | na 16 16 | 0069f5 |             | xt_space                             
3473:000 | DONE ins | na 16 16 | 0069f5 | a9 20 00    |                 lda.# AscSP          
3474:000 | DONE ins | na 16 16 | 0069f8 | 20 36 60    |                 jsr 006036           
3475:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3476:000 | DONE wsp | na 16 16 |        |             |
3477:000 | DONE lbl | na 16 16 | 0069fb |             | z_space                              
3477:001 | DONE ins | na 16 16 | 0069fb | 60          |                 rts                  
3478:000 | DONE wsp | na 16 16 |        |             |
3479:000 | DONE wsp | na 16 16 |        |             |
3480:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3481:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
3482:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
3483:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
3484:000 | DONE lbl | na 16 16 | 0069fc |             | xt_spaces                            
3485:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3486:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3487:000 | DONE lbl | na 16 16 | 0069fc |             | @                                    
3488:000 | DONE ins | na 16 16 | 0069fc | 88          |                 dey                  this also handles case u=0
3489:000 | DONE ins | na 16 16 | 0069fd | 30 05       |                 bmi 006a04           
3490:000 | DONE wsp | na 16 16 |        |             |
3491:000 | DONE ins | na 16 16 | 0069ff | 20 f5 69    |                 jsr 0069f5           
3492:000 | DONE ins | na 16 16 | 006a02 | 80 f8       |                 bra 0069fc           
3493:000 | DONE wsp | na 16 16 |        |             |
3494:000 | DONE lbl | na 16 16 | 006a04 |             | spaces_done                          
3495:000 | DONE ins | na 16 16 | 006a04 | b4 00       |                 ldy.dx 00            DROP
3496:000 | DONE ins | na 16 16 | 006a06 | e8          |                 inx                  
3497:000 | DONE ins | na 16 16 | 006a07 | e8          |                 inx                  
3498:000 | DONE wsp | na 16 16 |        |             |
3499:000 | DONE lbl | na 16 16 | 006a08 |             | z_spaces                             
3499:001 | DONE ins | na 16 16 | 006a08 | 60          |                 rts                  
3500:000 | DONE wsp | na 16 16 |        |             |
3501:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3502:000 | DONE cmt | na 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
3503:000 | DONE cmt | na 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
3504:000 | DONE cmt | na 16 16 |        |             | ; more than UM* DROP
3505:000 | DONE lbl | na 16 16 | 006a09 |             | xt_star                              
3506:000 | DONE ins | na 16 16 | 006a09 | 20 6c 6a    |                 jsr 006a6c           
3507:000 | DONE ins | na 16 16 | 006a0c | b4 00       |                 ldy.dx 00            DROP
3508:000 | DONE ins | na 16 16 | 006a0e | e8          |                 inx                  
3509:000 | DONE ins | na 16 16 | 006a0f | e8          |                 inx                  
3510:000 | DONE wsp | na 16 16 |        |             |
3511:000 | DONE lbl | na 16 16 | 006a10 |             | z_star                               
3511:001 | DONE ins | na 16 16 | 006a10 | 60          |                 rts                  
3512:000 | DONE wsp | na 16 16 |        |             |
3513:000 | DONE wsp | na 16 16 |        |             |
3514:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3515:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
3516:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
3517:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
3518:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
3519:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
3520:000 | DONE lbl | na 16 16 | 006a11 |             | xt_state                             
3521:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3522:000 | DONE ins | na 16 16 | 006a11 | ca          |                 dex                  
3523:000 | DONE ins | na 16 16 | 006a12 | ca          |                 dex                  
3524:000 | DONE ins | na 16 16 | 006a13 | 94 00       |                 sty.dx 00            
3525:000 | DONE ins | na 16 16 | 006a15 | a0 14 02    |                 ldy.# 000214         
3526:000 | DONE wsp | na 16 16 |        |             |
3527:000 | DONE lbl | na 16 16 | 006a18 |             | z_state                              
3527:001 | DONE ins | na 16 16 | 006a18 | 60          |                 rts                  
3528:000 | DONE wsp | na 16 16 |        |             |
3529:000 | DONE wsp | na 16 16 |        |             |
3530:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3531:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
3532:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
3533:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
3534:000 | DONE lbl | na 16 16 | 006a19 |             | xt_swap                              
3535:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3536:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3537:000 | DONE ins | na 16 16 | 006a19 | b5 00       |                 lda.dx 00            
3538:000 | DONE ins | na 16 16 | 006a1b | 94 00       |                 sty.dx 00            
3539:000 | DONE ins | na 16 16 | 006a1d | a8          |                 tay                  
3540:000 | DONE wsp | na 16 16 |        |             |
3541:000 | DONE lbl | na 16 16 | 006a1e |             | z_swap                               
3541:001 | DONE ins | na 16 16 | 006a1e | 60          |                 rts                  
3542:000 | DONE wsp | na 16 16 |        |             |
3543:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3544:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
3545:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
3546:000 | DONE lbl | na 16 16 | 006a1f |             | xt_true                              
3547:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3548:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3549:000 | DONE ins | na 16 16 | 006a1f | ca          |                 dex                  
3550:000 | DONE ins | na 16 16 | 006a20 | ca          |                 dex                  
3551:000 | DONE ins | na 16 16 | 006a21 | 94 00       |                 sty.dx 00            
3552:000 | DONE ins | na 16 16 | 006a23 | a0 ff ff    |                 ldy.# 0ffff          
3553:000 | DONE wsp | na 16 16 |        |             |
3554:000 | DONE lbl | na 16 16 | 006a26 |             | z_true                               
3554:001 | DONE ins | na 16 16 | 006a26 | 60          |                 rts                  
3555:000 | DONE wsp | na 16 16 |        |             |
3556:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3557:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
3558:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
3559:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
3560:000 | DONE lbl | na 16 16 | 006a27 |             | xt_tuck                              
3561:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3562:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3563:000 | DONE ins | na 16 16 | 006a27 | ca          |                 dex                  
3564:000 | DONE ins | na 16 16 | 006a28 | ca          |                 dex                  
3565:000 | DONE ins | na 16 16 | 006a29 | b5 02       |                 lda.dx 2             
3566:000 | DONE ins | na 16 16 | 006a2b | 95 00       |                 sta.dx 0             
3567:000 | DONE ins | na 16 16 | 006a2d | 94 02       |                 sty.dx 2             
3568:000 | DONE wsp | na 16 16 |        |             |
3569:000 | DONE lbl | na 16 16 | 006a2f |             | z_tuck                               
3569:001 | DONE ins | na 16 16 | 006a2f | 60          |                 rts                  
3570:000 | DONE wsp | na 16 16 |        |             |
3571:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3572:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
3573:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
3574:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
3575:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
3576:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
3577:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
3578:000 | DONE cmt | na 16 16 |        |             | ; running.
3579:000 | DONE lbl | na 16 16 | 006a30 |             | xt_type                              
3580:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3581:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3582:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
3583:000 | DONE ins | na 16 16 | 006a30 | 98          |                 tya                  force flag check of TOS
3584:000 | DONE ins | na 16 16 | 006a31 | f0 17       |                 beq 006a4a           
3585:000 | DONE wsp | na 16 16 |        |             |
3586:000 | DONE ins | na 16 16 | 006a33 | b5 00       |                 lda.dx 00            get address from NOS
3587:000 | DONE ins | na 16 16 | 006a35 | 85 16       |                 sta.d 000216         
3588:000 | DONE ins | na 16 16 | 006a37 | 84 18       |                 sty.d 000218         number of chars is TOS
3589:000 | DONE ins | na 16 16 | 006a39 | a0 00 00    |                 ldy.# 0000           
3590:000 | DONE ins | na 16 16 | 006a3c | e2 20       |                 sep 20               
3590:001 | DONE ctl | na  8 16 |        |             |         .!a8
3591:000 | DONE lbl | na  8 16 | 006a3e |             | type_loop                            
3592:000 | DONE ins | na  8 16 | 006a3e | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3593:000 | DONE ins | na  8 16 | 006a40 | 20 36 60    |                 jsr 006036           
3594:000 | DONE ins | na  8 16 | 006a43 | c8          |                 iny                  
3595:000 | DONE ins | na  8 16 | 006a44 | c4 18       |                 cpy.d 000218         
3596:000 | DONE ins | na  8 16 | 006a46 | d0 f6       |                 bne 006a3e           
3597:000 | DONE wsp | na  8 16 |        |             |
3598:000 | DONE ins | na  8 16 | 006a48 | c2 20       |                 rep 20               
3598:001 | DONE ctl | na 16 16 |        |             |         .!a16
3599:000 | DONE lbl | na 16 16 | 006a4a |             | type_done                            
3600:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
3601:000 | DONE ins | na 16 16 | 006a4a | b4 02       |                 ldy.dx 02            
3602:000 | DONE ins | na 16 16 | 006a4c | e8          |                 inx                  
3603:000 | DONE ins | na 16 16 | 006a4d | e8          |                 inx                  
3604:000 | DONE ins | na 16 16 | 006a4e | e8          |                 inx                  
3605:000 | DONE ins | na 16 16 | 006a4f | e8          |                 inx                  
3606:000 | DONE wsp | na 16 16 |        |             |
3607:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
3608:000 | DONE wsp | na 16 16 |        |             |
3609:000 | DONE lbl | na 16 16 | 006a50 |             | z_type                               
3609:001 | DONE ins | na 16 16 | 006a50 | 60          |                 rts                  
3610:000 | DONE wsp | na 16 16 |        |             |
3611:000 | DONE wsp | na 16 16 |        |             |
3612:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3613:000 | DONE cmt | na 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
3614:000 | DONE cmt | na 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
3615:000 | DONE cmt | na 16 16 |        |             | ; result and a single-cell remainder. Based on
3616:000 | DONE cmt | na 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
3617:000 | DONE cmt | na 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
3618:000 | DONE cmt | na 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
3619:000 | DONE cmt | na 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
3620:000 | DONE cmt | na 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
3621:000 | DONE lbl | na 16 16 | 006a51 |             | xt_udmod                             
3622:000 | DONE ins | na 16 16 | 006a51 | 20 82 61    |                 jsr 006182           
3623:000 | DONE ins | na 16 16 | 006a54 | 20 e8 62    |                 jsr 0062e8           
3624:000 | DONE ins | na 16 16 | 006a57 | 20 03 69    |                 jsr 006903           
3625:000 | DONE ins | na 16 16 | 006a5a | 20 cb 6a    |                 jsr 006acb           
3626:000 | DONE ins | na 16 16 | 006a5d | 20 47 69    |                 jsr 006947           
3627:000 | DONE ins | na 16 16 | 006a60 | 20 47 69    |                 jsr 006947           
3628:000 | DONE ins | na 16 16 | 006a63 | 20 0c 69    |                 jsr 00690c           
3629:000 | DONE ins | na 16 16 | 006a66 | 20 cb 6a    |                 jsr 006acb           
3630:000 | DONE ins | na 16 16 | 006a69 | 4c 47 69    |                 jmp 006947           JSR/RTS
3631:000 | DONE lbl | na 16 16 | 006a6c |             | z_udmod                              
3632:000 | DONE wsp | na 16 16 |        |             |
3633:000 | DONE wsp | na 16 16 |        |             |
3634:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3635:000 | DONE cmt | na 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
3636:000 | DONE cmt | na 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
3637:000 | DONE cmt | na 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
3638:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
3639:000 | DONE cmt | na 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
3640:000 | DONE cmt | na 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
3641:000 | DONE cmt | na 16 16 |        |             | ; call this "U*"
3642:000 | DONE wsp | na 16 16 |        |             |
3643:000 | DONE cmt | na 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
3644:000 | DONE cmt | na 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
3645:000 | DONE cmt | na 16 16 |        |             | ; consider switching to a table-supported version based on
3646:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
3647:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
3648:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
3649:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
3650:000 | DONE cmt | na 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
3651:000 | DONE lbl | na 16 16 | 006a6c |             | xt_umstar                            
3652:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3653:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
3654:000 | DONE ins | na 16 16 | 006a6c | 98          |                 tya                  
3655:000 | DONE ins | na 16 16 | 006a6d | f0 3d       |                 beq 006aac           
3656:000 | DONE ins | na 16 16 | 006a6f | b5 00       |                 lda.dx 00            
3657:000 | DONE ins | na 16 16 | 006a71 | f0 39       |                 beq 006aac           
3658:000 | DONE wsp | na 16 16 |        |             |
3659:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
3660:000 | DONE cmt | na 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
3661:000 | DONE cmt | na 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
3662:000 | DONE cmt | na 16 16 |        |             |                 ; answer
3663:000 | DONE ins | na 16 16 | 006a73 | c0 01 00    |                 cpy.# 0001           non-distructively
3664:000 | DONE ins | na 16 16 | 006a76 | f0 3b       |                 beq 006ab3           
3665:000 | DONE ins | na 16 16 | 006a78 | b5 00       |                 lda.dx 00            
3666:000 | DONE ins | na 16 16 | 006a7a | 3a          |                 dec.a                don't care about distruction
3667:000 | DONE ins | na 16 16 | 006a7b | f0 39       |                 beq 006ab6           
3668:000 | DONE wsp | na 16 16 |        |             |
3669:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
3670:000 | DONE ins | na 16 16 | 006a7d | c0 02 00    |                 cpy.# 0002           
3671:000 | DONE ins | na 16 16 | 006a80 | f0 3b       |                 beq 006abd           
3672:000 | DONE wsp | na 16 16 |        |             |
3673:000 | DONE ins | na 16 16 | 006a82 | b5 00       |                 lda.dx 00            
3674:000 | DONE ins | na 16 16 | 006a84 | c9 02 00    |                 cmp.# 0002           
3675:000 | DONE ins | na 16 16 | 006a87 | f0 38       |                 beq 006ac1           
3676:000 | DONE wsp | na 16 16 |        |             |
3677:000 | DONE cmt | na 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
3678:000 | DONE ins | na 16 16 | 006a89 | 84 16       |                 sty.d 000216         TOS number  "40"
3679:000 | DONE ins | na 16 16 | 006a8b | 85 18       |                 sta.d 000218         NOS number  "41"
3680:000 | DONE ins | na 16 16 | 006a8d | a0 10 00    |                 ldy.# &16            loop counter
3681:000 | DONE wsp | na 16 16 |        |             |
3682:000 | DONE ins | na 16 16 | 006a90 | a9 00 00    |                 lda.# 0000           
3683:000 | DONE ins | na 16 16 | 006a93 | 85 1a       |                 sta.d 00021a         Most Significat Word (MSW) of result
3684:000 | DONE wsp | na 16 16 |        |             |
3685:000 | DONE lbl | na 16 16 | 006a95 |             | umstar_loop                          
3686:000 | DONE ins | na 16 16 | 006a95 | 0a          |                 asl.a                useless for first iteration
3687:000 | DONE ins | na 16 16 | 006a96 | 26 1a       |                 rol.d 00021a         move carry into MSB, useless first iteration
3688:000 | DONE ins | na 16 16 | 006a98 | 06 18       |                 asl.d 000218         move bit of NOS number into carry
3689:000 | DONE wsp | na 16 16 |        |             |
3690:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
3691:000 | DONE cmt | na 16 16 |        |             |                 ; the next bit
3692:000 | DONE ins | na 16 16 | 006a9a | 90 07       |                 bcc 006aa3           
3693:000 | DONE wsp | na 16 16 |        |             |
3694:000 | DONE ins | na 16 16 | 006a9c | 18          |                 clc                  
3695:000 | DONE ins | na 16 16 | 006a9d | 65 16       |                 adc.d 000216         we have a set bit, so add TOS
3696:000 | DONE wsp | na 16 16 |        |             |
3697:000 | DONE cmt | na 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
3698:000 | DONE ins | na 16 16 | 006a9f | 90 02       |                 bcc 006aa3           
3699:000 | DONE ins | na 16 16 | 006aa1 | e6 1a       |                 inc.d 00021a         
3700:000 | DONE wsp | na 16 16 |        |             |
3701:000 | DONE lbl | na 16 16 | 006aa3 |             | umstar_counter                       
3702:000 | DONE ins | na 16 16 | 006aa3 | 88          |                 dey                  
3703:000 | DONE ins | na 16 16 | 006aa4 | d0 ef       |                 bne 006a95           
3704:000 | DONE wsp | na 16 16 |        |             |
3705:000 | DONE cmt | na 16 16 |        |             |                 ; We're all done, clean up and leave
3706:000 | DONE ins | na 16 16 | 006aa6 | 95 00       |                 sta.dx 00            store lower cell of number in NOS
3707:000 | DONE ins | na 16 16 | 006aa8 | a4 1a       |                 ldy.d 00021a         store MSB in TOS as double cell
3708:000 | DONE wsp | na 16 16 |        |             |
3709:000 | DONE ins | na 16 16 | 006aaa | 80 1e       |                 bra 006aca           don't use RTS so we can natively compile
3710:000 | DONE wsp | na 16 16 |        |             |
3711:000 | DONE lbl | na 16 16 | 006aac |             | umstar_zero                          
3712:000 | DONE cmt | na 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
3713:000 | DONE ins | na 16 16 | 006aac | a0 00 00    |                 ldy.# 0000           
3714:000 | DONE ins | na 16 16 | 006aaf | 94 00       |                 sty.dx 00            
3715:000 | DONE ins | na 16 16 | 006ab1 | 80 17       |                 bra 006aca           
3716:000 | DONE wsp | na 16 16 |        |             |
3717:000 | DONE lbl | na 16 16 | 006ab3 |             | umstar_one_tos                       
3718:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is one, life is easy
3719:000 | DONE ins | na 16 16 | 006ab3 | 88          |                 dey                  NOS is LSW, TOS becomes zero
3720:000 | DONE ins | na 16 16 | 006ab4 | 80 14       |                 bra 006aca           
3721:000 | DONE lbl | na 16 16 | 006ab6 |             | umstar_one_nos                       
3722:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is one, life is easy
3723:000 | DONE ins | na 16 16 | 006ab6 | 94 00       |                 sty.dx 00            
3724:000 | DONE ins | na 16 16 | 006ab8 | a0 00 00    |                 ldy.# 0000           
3725:000 | DONE ins | na 16 16 | 006abb | 80 0d       |                 bra 006aca           
3726:000 | DONE wsp | na 16 16 |        |             |
3727:000 | DONE lbl | na 16 16 | 006abd |             | umstar_two_tos                       
3728:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is two, life is easy
3729:000 | DONE ins | na 16 16 | 006abd | b5 00       |                 lda.dx 00            
3730:000 | DONE ins | na 16 16 | 006abf | 80 01       |                 bra 006ac2           
3731:000 | DONE lbl | na 16 16 | 006ac1 |             | umstar_two_nos                       
3732:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is two, life is still easy
3733:000 | DONE ins | na 16 16 | 006ac1 | 98          |                 tya                  
3734:000 | DONE lbl | na 16 16 | 006ac2 |             | umstar_two_common                    
3735:000 | DONE ins | na 16 16 | 006ac2 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
3736:000 | DONE ins | na 16 16 | 006ac3 | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
3737:000 | DONE wsp | na 16 16 |        |             |
3738:000 | DONE ins | na 16 16 | 006ac5 | a9 00 00    |                 lda.# 0000           
3739:000 | DONE ins | na 16 16 | 006ac8 | 2a          |                 rol.a                Rotate any Carry Flag into MSW
3740:000 | DONE ins | na 16 16 | 006ac9 | a8          |                 tay                  
3741:000 | DONE wsp | na 16 16 |        |             |
3742:000 | DONE lbl | na 16 16 | 006aca |             | z_umstar                             
3742:001 | DONE ins | na 16 16 | 006aca | 60          |                 rts                  
3743:000 | DONE wsp | na 16 16 |        |             |
3744:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3745:000 | DONE cmt | na 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
3746:000 | DONE cmt | na 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
3747:000 | DONE cmt | na 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
3748:000 | DONE cmt | na 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
3749:000 | DONE cmt | na 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
3750:000 | DONE cmt | na 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
3751:000 | DONE lbl | na 16 16 | 006acb |             | xt_ummod                             
3752:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3753:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3754:000 | DONE cmt | na 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
3755:000 | DONE cmt | na 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
3756:000 | DONE cmt | na 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
3757:000 | DONE cmt | na 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
3758:000 | DONE cmt | na 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
3759:000 | DONE cmt | na 16 16 |        |             |                 ;
3760:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3761:000 | DONE cmt | na 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
3762:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
3763:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
3764:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3765:000 | DONE cmt | na 16 16 |        |             |                 ;
3766:000 | DONE cmt | na 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
3767:000 | DONE cmt | na 16 16 |        |             |                 ; and low cell in 3OS
3768:000 | DONE wsp | na 16 16 |        |             |
3769:000 | DONE cmt | na 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
3770:000 | DONE cmt | na 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
3771:000 | DONE cmt | na 16 16 |        |             |                 ; to appear like in Gforth
3772:000 | DONE ins | na 16 16 | 006acb | 98          |                 tya                  force flag test
3773:000 | DONE ins | na 16 16 | 006acc | d0 06       |                 bne 006ad4           
3774:000 | DONE wsp | na 16 16 |        |             |
3775:000 | DONE ins | na 16 16 | 006ace | a9 c1 77    |                 lda.# 0077c1         
3776:000 | DONE ins | na 16 16 | 006ad1 | 4c 0c 72    |                 jmp 00720c           
3777:000 | DONE wsp | na 16 16 |        |             |
3778:000 | DONE lbl | na 16 16 | 006ad4 |             | ummod_notzero                        
3779:000 | DONE ins | na 16 16 | 006ad4 | 84 20       |                 sty.d 000220         Y is now free
3780:000 | DONE ins | na 16 16 | 006ad6 | b5 00       |                 lda.dx 00            high cell of dividend
3781:000 | DONE ins | na 16 16 | 006ad8 | 85 22       |                 sta.d 000222         
3782:000 | DONE ins | na 16 16 | 006ada | b5 02       |                 lda.dx 02            low cell of dividend
3783:000 | DONE ins | na 16 16 | 006adc | 85 24       |                 sta.d 000224         
3784:000 | DONE wsp | na 16 16 |        |             |
3785:000 | DONE cmt | na 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
3786:000 | DONE cmt | na 16 16 |        |             |                 ; Pointer, freeing X for index duty
3787:000 | DONE ins | na 16 16 | 006ade | e8          |                 inx                  
3788:000 | DONE ins | na 16 16 | 006adf | e8          |                 inx                  
3789:000 | DONE ins | na 16 16 | 006ae0 | 86 04       |                 stx.d 000204         
3790:000 | DONE wsp | na 16 16 |        |             |
3791:000 | DONE cmt | na 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
3792:000 | DONE cmt | na 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
3793:000 | DONE cmt | na 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
3794:000 | DONE cmt | na 16 16 |        |             |                 ; we did that already in a separate step
3795:000 | DONE ins | na 16 16 | 006ae2 | 38          |                 sec                  
3796:000 | DONE ins | na 16 16 | 006ae3 | a5 22       |                 lda.d 000222         
3797:000 | DONE ins | na 16 16 | 006ae5 | e5 20       |                 sbc.d 000220         
3798:000 | DONE ins | na 16 16 | 006ae7 | b0 21       |                 bcs 006b0a           
3799:000 | DONE wsp | na 16 16 |        |             |
3800:000 | DONE cmt | na 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
3801:000 | DONE cmt | na 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
3802:000 | DONE cmt | na 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
3803:000 | DONE cmt | na 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
3804:000 | DONE cmt | na 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
3805:000 | DONE cmt | na 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
3806:000 | DONE ins | na 16 16 | 006ae9 | a2 11 00    |                 ldx.# &17            
3807:000 | DONE wsp | na 16 16 |        |             |
3808:000 | DONE lbl | na 16 16 | 006aec |             | ummod_shift                          
3809:000 | DONE cmt | na 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
3810:000 | DONE cmt | na 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
3811:000 | DONE cmt | na 16 16 |        |             |                 ; pushed off the other end in the last rotation
3812:000 | DONE ins | na 16 16 | 006aec | 26 24       |                 rol.d 000224         
3813:000 | DONE wsp | na 16 16 |        |             |
3814:000 | DONE cmt | na 16 16 |        |             |                 ; loop control
3815:000 | DONE ins | na 16 16 | 006aee | ca          |                 dex                  
3816:000 | DONE ins | na 16 16 | 006aef | f0 22       |                 beq 006b13           
3817:000 | DONE wsp | na 16 16 |        |             |
3818:000 | DONE cmt | na 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
3819:000 | DONE cmt | na 16 16 |        |             |                 ; next bit in from high bit of low cell
3820:000 | DONE ins | na 16 16 | 006af1 | 26 22       |                 rol.d 000222         
3821:000 | DONE ins | na 16 16 | 006af3 | a9 00 00    |                 lda.# 0000           
3822:000 | DONE ins | na 16 16 | 006af6 | 2a          |                 rol.a                
3823:000 | DONE ins | na 16 16 | 006af7 | 85 26       |                 sta.d 000226         store old high bit of dividend
3824:000 | DONE wsp | na 16 16 |        |             |
3825:000 | DONE cmt | na 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
3826:000 | DONE cmt | na 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
3827:000 | DONE cmt | na 16 16 |        |             |                 ; cleared, divisor did not fit
3828:000 | DONE ins | na 16 16 | 006af9 | 38          |                 sec                  
3829:000 | DONE ins | na 16 16 | 006afa | a5 22       |                 lda.d 000222         
3830:000 | DONE ins | na 16 16 | 006afc | e5 20       |                 sbc.d 000220         
3831:000 | DONE ins | na 16 16 | 006afe | a8          |                 tay                  save difference in Y until we know if we need it
3832:000 | DONE wsp | na 16 16 |        |             |
3833:000 | DONE cmt | na 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
3834:000 | DONE cmt | na 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
3835:000 | DONE cmt | na 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
3836:000 | DONE cmt | na 16 16 |        |             |                 ; remains set
3837:000 | DONE ins | na 16 16 | 006aff | a5 26       |                 lda.d 000226         
3838:000 | DONE ins | na 16 16 | 006b01 | e9 00 00    |                 sbc.# 0000           
3839:000 | DONE ins | na 16 16 | 006b04 | 90 e6       |                 bcc 006aec           
3840:000 | DONE wsp | na 16 16 |        |             |
3841:000 | DONE cmt | na 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
3842:000 | DONE cmt | na 16 16 |        |             |                 ; cell to what it would be after subtraction
3843:000 | DONE ins | na 16 16 | 006b06 | 84 22       |                 sty.d 000222         
3844:000 | DONE ins | na 16 16 | 006b08 | 80 e2       |                 bra 006aec           
3845:000 | DONE wsp | na 16 16 |        |             |
3846:000 | DONE lbl | na 16 16 | 006b0a |             | ummod_overflow                       
3847:000 | DONE cmt | na 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
3848:000 | DONE cmt | na 16 16 |        |             |                 ; in both the quotient and remainder
3849:000 | DONE ins | na 16 16 | 006b0a | a6 04       |                 ldx.d 000204         restore DSP
3850:000 | DONE ins | na 16 16 | 006b0c | a0 ff ff    |                 ldy.# 0ffff          
3851:000 | DONE ins | na 16 16 | 006b0f | 94 00       |                 sty.dx 00            
3852:000 | DONE ins | na 16 16 | 006b11 | 80 08       |                 bra 006b1b           go to end to enable native coding
3853:000 | DONE wsp | na 16 16 |        |             |
3854:000 | DONE lbl | na 16 16 | 006b13 |             | ummod_complete                       
3855:000 | DONE ins | na 16 16 | 006b13 | a6 04       |                 ldx.d 000204         restore DSP
3856:000 | DONE ins | na 16 16 | 006b15 | a4 24       |                 ldy.d 000224         quotient is TOS
3857:000 | DONE ins | na 16 16 | 006b17 | a5 22       |                 lda.d 000222         remainder is NOS
3858:000 | DONE ins | na 16 16 | 006b19 | 95 00       |                 sta.dx 00            
3859:000 | DONE wsp | na 16 16 |        |             |
3860:000 | DONE lbl | na 16 16 | 006b1b |             | z_ummod                              
3860:001 | DONE ins | na 16 16 | 006b1b | 60          |                 rts                  
3861:000 | DONE wsp | na 16 16 |        |             |
3862:000 | DONE wsp | na 16 16 |        |             |
3863:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3864:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
3865:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
3866:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
3867:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
3868:000 | DONE lbl | na 16 16 | 006b1c |             | xt_unused                            
3869:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3870:000 | DONE ins | na 16 16 | 006b1c | a9 ff 7b    |                 lda.# 007bff         
3871:000 | DONE ins | na 16 16 | 006b1f | 38          |                 sec                  
3872:000 | DONE ins | na 16 16 | 006b20 | e5 00       |                 sbc.d 000200         current compile pointer
3873:000 | DONE wsp | na 16 16 |        |             |
3874:000 | DONE ins | na 16 16 | 006b22 | ca          |                 dex                  
3875:000 | DONE ins | na 16 16 | 006b23 | ca          |                 dex                  
3876:000 | DONE ins | na 16 16 | 006b24 | 94 00       |                 sty.dx 00            
3877:000 | DONE wsp | na 16 16 |        |             |
3878:000 | DONE ins | na 16 16 | 006b26 | a8          |                 tay                  
3879:000 | DONE wsp | na 16 16 |        |             |
3880:000 | DONE lbl | na 16 16 | 006b27 |             | z_unused                             
3880:001 | DONE ins | na 16 16 | 006b27 | 60          |                 rts                  
3881:000 | DONE wsp | na 16 16 |        |             |
3882:000 | DONE wsp | na 16 16 |        |             |
3883:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3884:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
3885:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
3886:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
3887:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
3888:000 | DONE lbl | na 16 16 | 006b28 |             | xt_variable                          
3889:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
3890:000 | DONE ins | na 16 16 | 006b28 | 20 59 65    |                 jsr 006559           
3891:000 | DONE wsp | na 16 16 |        |             |
3892:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
3893:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
3894:000 | DONE ins | na 16 16 | 006b2b | a9 00 00    |                 lda.# 0000           
3895:000 | DONE ins | na 16 16 | 006b2e | 92 00       |                 sta.di 000200        STA (CP)
3896:000 | DONE wsp | na 16 16 |        |             |
3897:000 | DONE ins | na 16 16 | 006b30 | e6 00       |                 inc.d 000200         direct COMMA
3898:000 | DONE ins | na 16 16 | 006b32 | e6 00       |                 inc.d 000200         
3899:000 | DONE wsp | na 16 16 |        |             |
3900:000 | DONE lbl | na 16 16 | 006b34 |             | z_variable                           
3900:001 | DONE ins | na 16 16 | 006b34 | 60          |                 rts                  
3901:000 | DONE wsp | na 16 16 |        |             |
3902:000 | DONE wsp | na 16 16 |        |             |
3903:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3904:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
3905:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
3906:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
3907:000 | DONE lbl | na 16 16 | 006b35 |             | xt_words                             
3908:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3909:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3910:000 | DONE ins | na 16 16 | 006b35 | 20 52 65    |                 jsr 006552           start on next line, this is a style choice
3911:000 | DONE wsp | na 16 16 |        |             |
3912:000 | DONE ins | na 16 16 | 006b38 | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
3913:000 | DONE ins | na 16 16 | 006b3a | 48          |                 pha                  
3914:000 | DONE wsp | na 16 16 |        |             |
3915:000 | DONE ins | na 16 16 | 006b3b | ca          |                 dex                  create room on TOS
3916:000 | DONE ins | na 16 16 | 006b3c | ca          |                 dex                  
3917:000 | DONE ins | na 16 16 | 006b3d | 94 00       |                 sty.dx 00            
3918:000 | DONE wsp | na 16 16 |        |             |
3919:000 | DONE lbl | na 16 16 | 006b3f |             | words_loop                           
3920:000 | DONE ins | na 16 16 | 006b3f | a8          |                 tay                  ( nt )
3921:000 | DONE ins | na 16 16 | 006b40 | 20 93 67    |                 jsr 006793           ( nt -- addr u )
3922:000 | DONE ins | na 16 16 | 006b43 | 20 30 6a    |                 jsr 006a30           ( addr u -- )
3923:000 | DONE ins | na 16 16 | 006b46 | 20 f5 69    |                 jsr 0069f5           
3924:000 | DONE wsp | na 16 16 |        |             |
3925:000 | DONE ins | na 16 16 | 006b49 | 68          |                 pla                  get back first entry in Dictionary
3926:000 | DONE wsp | na 16 16 |        |             |
3927:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
3928:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
3929:000 | DONE ins | na 16 16 | 006b4a | 1a          |                 inc.a                
3930:000 | DONE ins | na 16 16 | 006b4b | 1a          |                 inc.a                
3931:000 | DONE wsp | na 16 16 |        |             |
3932:000 | DONE ins | na 16 16 | 006b4c | ca          |                 dex                  
3933:000 | DONE ins | na 16 16 | 006b4d | ca          |                 dex                  
3934:000 | DONE ins | na 16 16 | 006b4e | 94 00       |                 sty.dx 00            
3935:000 | DONE wsp | na 16 16 |        |             |
3936:000 | DONE ins | na 16 16 | 006b50 | a8          |                 tay                  
3937:000 | DONE ins | na 16 16 | 006b51 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3938:000 | DONE ins | na 16 16 | 006b54 | 48          |                 pha                  
3939:000 | DONE ins | na 16 16 | 006b55 | d0 e8       |                 bne 006b3f           zero entry signals end of Dictionary
3940:000 | DONE wsp | na 16 16 |        |             |
3941:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
3942:000 | DONE ins | na 16 16 | 006b57 | 68          |                 pla                  balance MPU stack, value discarded
3943:000 | DONE wsp | na 16 16 |        |             |
3944:000 | DONE ins | na 16 16 | 006b58 | b4 00       |                 ldy.dx 00            
3945:000 | DONE ins | na 16 16 | 006b5a | e8          |                 inx                  
3946:000 | DONE ins | na 16 16 | 006b5b | e8          |                 inx                  
3947:000 | DONE wsp | na 16 16 |        |             |
3948:000 | DONE lbl | na 16 16 | 006b5c |             | z_words                              
3948:001 | DONE ins | na 16 16 | 006b5c | 60          |                 rts                  
3949:000 | DONE wsp | na 16 16 |        |             |
3950:000 | DONE wsp | na 16 16 |        |             |
3951:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3952:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
3953:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
3954:000 | DONE lbl | na 16 16 | 006b5d |             | xt_xor                               
3955:000 | DONE ins | na 16 16 | 006b5d | 98          |                 tya                  
3956:000 | DONE ins | na 16 16 | 006b5e | 55 00       |                 eor.dx 00            
3957:000 | DONE ins | na 16 16 | 006b60 | a8          |                 tay                  
3958:000 | DONE wsp | na 16 16 |        |             |
3959:000 | DONE ins | na 16 16 | 006b61 | e8          |                 inx                  
3960:000 | DONE ins | na 16 16 | 006b62 | e8          |                 inx                  
3961:000 | DONE wsp | na 16 16 |        |             |
3962:000 | DONE lbl | na 16 16 | 006b63 |             | z_xor                                
3962:001 | DONE ins | na 16 16 | 006b63 | 60          |                 rts                  
3963:000 | DONE wsp | na 16 16 |        |             |
3964:000 | DONE wsp | na 16 16 |        |             |
3965:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3966:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
3967:000 | DONE wsp | na 16 16 |        |             |
3968:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
3968:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
3968:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
3968:003 | DONE cmt | na 16 16 |        |             | ; This version: 21. Feb 2017
3968:004 | DONE wsp | na 16 16 |        |             |
3968:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
3968:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
3968:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
3968:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
3968:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
3968:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
3968:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
3968:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
3968:013 | DONE cmt | na 16 16 |        |             | ;
3968:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
3968:015 | DONE cmt | na 16 16 |        |             | ;
3968:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
3968:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
3968:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
3968:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
3968:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
3968:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
3968:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
3968:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
3968:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
3968:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
3968:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
3968:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
3968:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
3968:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
3968:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
3968:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
3968:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
3968:033 | DONE cmt | na 16 16 |        |             | ;
3968:034 | DONE cmt | na 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
3968:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
3968:036 | DONE cmt | na 16 16 |        |             | ;
3968:037 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
3968:038 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
3968:039 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
3968:040 | DONE wsp | na 16 16 |        |             |
3968:041 | DONE cmt | na 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
3968:042 | DONE cmt | na 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
3968:043 | DONE cmt | na 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
3968:044 | DONE cmt | na 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
3968:045 | DONE cmt | na 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
3968:046 | DONE cmt | na 16 16 |        |             | ; involved.
3968:047 | DONE wsp | na 16 16 |        |             |
3968:048 | DONE lbl | na 16 16 | 006b64 |             | nt_bye                               
3968:049 | DONE dir | na 16 16 | 006b64 | (1 bytes)   |         .byte 03                     length of word string
3968:049 | DONE dir | na 16 16 |        |             |                 03                       --  .
3968:050 | DONE dir | na 16 16 | 006b65 | (1 bytes)   |         .byte { NC }                 status byte
3968:050 | DONE dir | na 16 16 |        |             |                 01                       --  .
3968:051 | DONE dir | na 16 16 | 006b66 | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
3968:051 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
3968:052 | DONE dir | na 16 16 | 006b68 | (2 bytes)   |         .word 00648b                 start of code, the xt of this word
3968:052 | DONE dir | na 16 16 |        |             |                 8b 64                    --  . d
3968:053 | DONE dir | na 16 16 | 006b6a | (2 bytes)   |         .word 00648e                 end of code (points to RTS)
3968:053 | DONE dir | na 16 16 |        |             |                 8e 64                    --  . d
3968:054 | DONE dir | na 16 16 | 006b6c | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
3968:054 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
3968:055 | DONE wsp | na 16 16 |        |             |
3968:056 | DONE lbl | na 16 16 | 006b6f |             | nt_cold                              
3968:057 | DONE dir | na 16 16 | 006b6f | (2 bytes)   |         .byte 4, 00                  
3968:057 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3968:058 | DONE dir | na 16 16 | 006b71 | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
3968:058 | DONE dir | na 16 16 |        |             |                 64 6b 63 60 de 60        --  d k c ` . `
3968:059 | DONE dir | na 16 16 | 006b77 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
3968:059 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
3968:060 | DONE wsp | na 16 16 |        |             |
3968:061 | DONE lbl | na 16 16 | 006b7b |             | nt_words                             
3968:062 | DONE dir | na 16 16 | 006b7b | (2 bytes)   |         .byte 5, { NC }              
3968:062 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3968:063 | DONE dir | na 16 16 | 006b7d | (6 bytes)   |         .word nt_cold, xt_words, 006b5c 
3968:063 | DONE dir | na 16 16 |        |             |                 6f 6b 35 6b 5c 6b        --  o k 5 k \ k
3968:064 | DONE dir | na 16 16 | 006b83 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
3968:064 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
3968:065 | DONE wsp | na 16 16 |        |             |
3968:066 | DONE lbl | na 16 16 | 006b88 |             | nt_dump                              
3968:067 | DONE dir | na 16 16 | 006b88 | (2 bytes)   |         .byte 4, { NC }              
3968:067 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:068 | DONE dir | na 16 16 | 006b8a | (6 bytes)   |         .word nt_words, xt_dump, 006661 
3968:068 | DONE dir | na 16 16 |        |             |                 7b 6b 3b 66 61 66        --  { k ; f a f
3968:069 | DONE dir | na 16 16 | 006b90 | (4 bytes)   |         .byte 64, 75, 6d, 70         
3968:069 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
3968:070 | DONE wsp | na 16 16 |        |             |
3968:071 | DONE lbl | na 16 16 | 006b94 |             | nt_bell                              
3968:072 | DONE dir | na 16 16 | 006b94 | (2 bytes)   |         .byte 4, { NC }              
3968:072 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:073 | DONE dir | na 16 16 | 006b96 | (6 bytes)   |         .word nt_dump, xt_bell, 006465 
3968:073 | DONE dir | na 16 16 |        |             |                 88 6b 5f 64 65 64        --  . k _ d e d
3968:074 | DONE dir | na 16 16 | 006b9c | (4 bytes)   |         .byte 62, 65, 6c, 6c         
3968:074 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
3968:075 | DONE wsp | na 16 16 |        |             |
3968:076 | DONE lbl | na 16 16 | 006ba0 |             | nt_decimal                           
3968:077 | DONE dir | na 16 16 | 006ba0 | (2 bytes)   |         .byte 7, { NC }              
3968:077 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3968:078 | DONE dir | na 16 16 | 006ba2 | (6 bytes)   |         .word nt_bell, xt_decimal, 0065ef 
3968:078 | DONE dir | na 16 16 |        |             |                 94 6b ea 65 ef 65        --  . k . e . e
3968:079 | DONE dir | na 16 16 | 006ba8 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
3968:079 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
3968:080 | DONE wsp | na 16 16 |        |             |
3968:081 | DONE lbl | na 16 16 | 006baf |             | nt_hex                               
3968:082 | DONE dir | na 16 16 | 006baf | (2 bytes)   |         .byte 3, { NC }              
3968:082 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:083 | DONE dir | na 16 16 | 006bb1 | (6 bytes)   |         .word nt_decimal, xt_hex, 006716 
3968:083 | DONE dir | na 16 16 |        |             |                 a0 6b 11 67 16 67        --  . k . g . g
3968:084 | DONE dir | na 16 16 | 006bb7 | (3 bytes)   |         .byte 68, 65, 78             
3968:084 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
3968:085 | DONE wsp | na 16 16 |        |             |
3968:086 | DONE lbl | na 16 16 | 006bba |             | nt_unused                            
3968:087 | DONE dir | na 16 16 | 006bba | (2 bytes)   |         .byte 6, { NC }              
3968:087 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3968:088 | DONE dir | na 16 16 | 006bbc | (6 bytes)   |         .word nt_hex, xt_unused, 006b27 
3968:088 | DONE dir | na 16 16 |        |             |                 af 6b 1c 6b 27 6b        --  . k . k ' k
3968:089 | DONE dir | na 16 16 | 006bc2 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
3968:089 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
3968:090 | DONE wsp | na 16 16 |        |             |
3968:091 | DONE lbl | na 16 16 | 006bc8 |             | nt_page                              
3968:092 | DONE dir | na 16 16 | 006bc8 | (2 bytes)   |         .byte 4, { NC }              
3968:092 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:093 | DONE dir | na 16 16 | 006bca | (6 bytes)   |         .word nt_unused, xt_page, 006858 
3968:093 | DONE dir | na 16 16 |        |             |                 ba 6b 4c 68 58 68        --  . k L h X h
3968:094 | DONE dir | na 16 16 | 006bd0 | (4 bytes)   |         .byte 70, 61, 67, 65         
3968:094 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
3968:095 | DONE wsp | na 16 16 |        |             |
3968:096 | DONE lbl | na 16 16 | 006bd4 |             | nt_dabs                              
3968:097 | DONE dir | na 16 16 | 006bd4 | (2 bytes)   |         .byte 4, { NC }              
3968:097 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:098 | DONE dir | na 16 16 | 006bd6 | (6 bytes)   |         .word nt_page, xt_dabs, 0065e9 
3968:098 | DONE dir | na 16 16 |        |             |                 c8 6b e3 65 e9 65        --  . k . e . e
3968:099 | DONE dir | na 16 16 | 006bdc | (4 bytes)   |         .byte 64, 61, 62, 73         
3968:099 | DONE dir | na 16 16 |        |             |                 64 61 62 73              --  d a b s
3968:100 | DONE wsp | na 16 16 |        |             |
3968:101 | DONE lbl | na 16 16 | 006be0 |             | nt_dnegate                           
3968:102 | DONE dir | na 16 16 | 006be0 | (2 bytes)   |         .byte 7, { NC }              
3968:102 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3968:103 | DONE dir | na 16 16 | 006be2 | (6 bytes)   |         .word nt_dabs, xt_dnegate, 006612 
3968:103 | DONE dir | na 16 16 |        |             |                 d4 6b ff 65 12 66        --  . k . e . f
3968:104 | DONE dir | na 16 16 | 006be8 | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
3968:104 | DONE dir | na 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
3968:105 | DONE wsp | na 16 16 |        |             |
3968:106 | DONE lbl | na 16 16 | 006bef |             | nt_dtos                              
3968:107 | DONE dir | na 16 16 | 006bef | (2 bytes)   |         .byte 3, { NC }              
3968:107 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:108 | DONE dir | na 16 16 | 006bf1 | (6 bytes)   |         .word nt_dnegate, xt_dtos, 0065e2 
3968:108 | DONE dir | na 16 16 |        |             |                 e0 6b de 65 e2 65        --  . k . e . e
3968:109 | DONE dir | na 16 16 | 006bf7 | (3 bytes)   |         .byte 64, 3e, 73             
3968:109 | DONE dir | na 16 16 |        |             |                 64 3e 73                 --  d > s
3968:110 | DONE wsp | na 16 16 |        |             |
3968:111 | DONE lbl | na 16 16 | 006bfa |             | nt_stod                              
3968:112 | DONE dir | na 16 16 | 006bfa | (2 bytes)   |         .byte 3, { NC }              
3968:112 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:113 | DONE dir | na 16 16 | 006bfc | (6 bytes)   |         .word nt_dtos, xt_stod, 006971 
3968:113 | DONE dir | na 16 16 |        |             |                 ef 6b 62 69 71 69        --  . k b i q i
3968:114 | DONE dir | na 16 16 | 006c02 | (3 bytes)   |         .byte 73, 3e, 64             
3968:114 | DONE dir | na 16 16 |        |             |                 73 3e 64                 --  s > d
3968:115 | DONE wsp | na 16 16 |        |             |
3968:116 | DONE lbl | na 16 16 | 006c05 |             | nt_dplus                             
3968:117 | DONE dir | na 16 16 | 006c05 | (2 bytes)   |         .byte 2, { NC }              
3968:117 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:118 | DONE dir | na 16 16 | 006c07 | (6 bytes)   |         .word nt_stod, xt_dplus, 0065dd 
3968:118 | DONE dir | na 16 16 |        |             |                 fa 6b cc 65 dd 65        --  . k . e . e
3968:119 | DONE dir | na 16 16 | 006c0d | (2 bytes)   |         .byte 64, 2b                 
3968:119 | DONE dir | na 16 16 |        |             |                 64 2b                    --  d +
3968:120 | DONE wsp | na 16 16 |        |             |
3968:121 | DONE lbl | na 16 16 | 006c0f |             | nt_udmod                             
3968:122 | DONE dir | na 16 16 | 006c0f | (2 bytes)   |         .byte 6, { NC }              
3968:122 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3968:123 | DONE dir | na 16 16 | 006c11 | (6 bytes)   |         .word nt_dplus, xt_udmod, 006a6c 
3968:123 | DONE dir | na 16 16 |        |             |                 05 6c 51 6a 6c 6a        --  . l Q j l j
3968:124 | DONE dir | na 16 16 | 006c17 | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
3968:124 | DONE dir | na 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
3968:125 | DONE wsp | na 16 16 |        |             |
3968:126 | DONE lbl | na 16 16 | 006c1d |             | nt_ummod                             
3968:127 | DONE dir | na 16 16 | 006c1d | (2 bytes)   |         .byte 6, { NC }              
3968:127 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3968:128 | DONE dir | na 16 16 | 006c1f | (6 bytes)   |         .word nt_udmod, xt_ummod, 006b1b 
3968:128 | DONE dir | na 16 16 |        |             |                 0f 6c cb 6a 1b 6b        --  . l . j . k
3968:129 | DONE dir | na 16 16 | 006c25 | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
3968:129 | DONE dir | na 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
3968:130 | DONE wsp | na 16 16 |        |             |
3968:131 | DONE lbl | na 16 16 | 006c2b |             | nt_star                              
3968:132 | DONE dir | na 16 16 | 006c2b | (2 bytes)   |         .byte 1, { NC }              
3968:132 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:133 | DONE dir | na 16 16 | 006c2d | (6 bytes)   |         .word nt_ummod, xt_star, 006a10 
3968:133 | DONE dir | na 16 16 |        |             |                 1d 6c 09 6a 10 6a        --  . l 	 j . j
3968:134 | DONE dir | na 16 16 | 006c33 | (1 bytes)   |         .byte 2a                     
3968:134 | DONE dir | na 16 16 |        |             |                 2a                       --  *
3968:135 | DONE wsp | na 16 16 |        |             |
3968:136 | DONE lbl | na 16 16 | 006c34 |             | nt_mstar                             
3968:137 | DONE dir | na 16 16 | 006c34 | (2 bytes)   |         .byte 2, { NC }              
3968:137 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:138 | DONE dir | na 16 16 | 006c36 | (6 bytes)   |         .word nt_star, xt_mstar, 006763 
3968:138 | DONE dir | na 16 16 |        |             |                 2b 6c 44 67 63 67        --  + l D g c g
3968:139 | DONE dir | na 16 16 | 006c3c | (2 bytes)   |         .byte 6d, 2a                 
3968:139 | DONE dir | na 16 16 |        |             |                 6d 2a                    --  m *
3968:140 | DONE wsp | na 16 16 |        |             |
3968:141 | DONE lbl | na 16 16 | 006c3e |             | nt_umstar                            
3968:142 | DONE dir | na 16 16 | 006c3e | (2 bytes)   |         .byte 3, { NC }              
3968:142 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:143 | DONE dir | na 16 16 | 006c40 | (6 bytes)   |         .word nt_mstar, xt_umstar, 006aca 
3968:143 | DONE dir | na 16 16 |        |             |                 34 6c 6c 6a ca 6a        --  4 l l j . j
3968:144 | DONE dir | na 16 16 | 006c46 | (3 bytes)   |         .byte 75, 6d, 2a             
3968:144 | DONE dir | na 16 16 |        |             |                 75 6d 2a                 --  u m *
3968:145 | DONE wsp | na 16 16 |        |             |
3968:146 | DONE lbl | na 16 16 | 006c49 |             | nt_count                             
3968:147 | DONE dir | na 16 16 | 006c49 | (2 bytes)   |         .byte 5, { NC }              
3968:147 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3968:148 | DONE dir | na 16 16 | 006c4b | (6 bytes)   |         .word nt_umstar, xt_count, 006551 
3968:148 | DONE dir | na 16 16 |        |             |                 3e 6c 43 65 51 65        --  > l C e Q e
3968:149 | DONE dir | na 16 16 | 006c51 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
3968:149 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
3968:150 | DONE wsp | na 16 16 |        |             |
3968:151 | DONE lbl | na 16 16 | 006c56 |             | nt_abort                             
3968:152 | DONE dir | na 16 16 | 006c56 | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
3968:152 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
3968:153 | DONE dir | na 16 16 | 006c58 | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
3968:153 | DONE dir | na 16 16 |        |             |                 49 6c 97 60 de 60        --  I l . ` . `
3968:154 | DONE dir | na 16 16 | 006c5e | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
3968:154 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
3968:155 | DONE wsp | na 16 16 |        |             |
3968:156 | DONE lbl | na 16 16 | 006c63 |             | nt_parse                             
3968:157 | DONE dir | na 16 16 | 006c63 | (2 bytes)   |         .byte 5, 00                  
3968:157 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
3968:158 | DONE dir | na 16 16 | 006c65 | (6 bytes)   |         .word nt_abort, xt_parse, 0068bd 
3968:158 | DONE dir | na 16 16 |        |             |                 56 6c 8b 68 bd 68        --  V l . h . h
3968:159 | DONE dir | na 16 16 | 006c6b | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
3968:159 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
3968:160 | DONE wsp | na 16 16 |        |             |
3968:161 | DONE lbl | na 16 16 | 006c70 |             | nt_quit                              
3968:162 | DONE dir | na 16 16 | 006c70 | (2 bytes)   |         .byte 4, 00                  
3968:162 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3968:163 | DONE dir | na 16 16 | 006c72 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
3968:163 | DONE dir | na 16 16 |        |             |                 63 6c 9f 60 de 60        --  c l . ` . `
3968:164 | DONE dir | na 16 16 | 006c78 | (4 bytes)   |         .byte 71, 75, 69, 74         
3968:164 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
3968:165 | DONE wsp | na 16 16 |        |             |
3968:166 | DONE lbl | na 16 16 | 006c7c |             | nt_question                          
3968:167 | DONE dir | na 16 16 | 006c7c | (2 bytes)   |         .byte 1, { NC }              
3968:167 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:168 | DONE dir | na 16 16 | 006c7e | (6 bytes)   |         .word nt_quit, xt_question, 006293 
3968:168 | DONE dir | na 16 16 |        |             |                 70 6c 8d 62 93 62        --  p l . b . b
3968:169 | DONE dir | na 16 16 | 006c84 | (1 bytes)   |         .byte 3f                     
3968:169 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
3968:170 | DONE wsp | na 16 16 |        |             |
3968:171 | DONE lbl | na 16 16 | 006c85 |             | nt_name-int                          
3968:172 | DONE dir | na 16 16 | 006c85 | (2 bytes)   |         .byte 8, { NC }              
3968:172 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3968:173 | DONE dir | na 16 16 | 006c87 | (6 bytes)   |         .word nt_question, xt_name-int, 006792 
3968:173 | DONE dir | na 16 16 |        |             |                 7c 6c 8a 67 92 67        --  | l . g . g
3968:174 | DONE dir | na 16 16 | 006c8d | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
3968:174 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
3968:174 | DONE dir | na 16 16 |        |             |                                          -- 
3968:175 | DONE wsp | na 16 16 |        |             |
3968:176 | DONE lbl | na 16 16 | 006c95 |             | nt_cr                                
3968:177 | DONE dir | na 16 16 | 006c95 | (2 bytes)   |         .byte 2, { NC }              
3968:177 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:178 | DONE dir | na 16 16 | 006c97 | (6 bytes)   |         .word nt_name-int, xt_cr, 006558 
3968:178 | DONE dir | na 16 16 |        |             |                 85 6c 52 65 58 65        --  . l R e X e
3968:179 | DONE dir | na 16 16 | 006c9d | (2 bytes)   |         .byte 63, 72                 
3968:179 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
3968:180 | DONE wsp | na 16 16 |        |             |
3968:181 | DONE lbl | na 16 16 | 006c9f |             | nt_numbermore                        
3968:182 | DONE dir | na 16 16 | 006c9f | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
3968:182 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:183 | DONE dir | na 16 16 | 006ca1 | (6 bytes)   |         .word nt_cr, xt_numbermore, 006283 
3968:183 | DONE dir | na 16 16 |        |             |                 95 6c 75 62 83 62        --  . l u b . b
3968:184 | DONE dir | na 16 16 | 006ca7 | (2 bytes)   |         .byte 23, 3e                 
3968:184 | DONE dir | na 16 16 |        |             |                 23 3e                    --  # >
3968:185 | DONE wsp | na 16 16 |        |             |
3968:186 | DONE lbl | na 16 16 | 006ca9 |             | nt_hold                              
3968:187 | DONE dir | na 16 16 | 006ca9 | (2 bytes)   |         .byte 4, { NC }              
3968:187 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:188 | DONE dir | na 16 16 | 006cab | (6 bytes)   |         .word nt_numbermore, xt_hold, 006724 
3968:188 | DONE dir | na 16 16 |        |             |                 9f 6c 17 67 24 67        --  . l . g $ g
3968:189 | DONE dir | na 16 16 | 006cb1 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
3968:189 | DONE dir | na 16 16 |        |             |                 68 6f 6c 64              --  h o l d
3968:190 | DONE wsp | na 16 16 |        |             |
3968:191 | DONE lbl | na 16 16 | 006cb5 |             | nt_hashs                             
3968:192 | DONE dir | na 16 16 | 006cb5 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
3968:192 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:193 | DONE dir | na 16 16 | 006cb7 | (6 bytes)   |         .word nt_hold, xt_hashs, 00628c 
3968:193 | DONE dir | na 16 16 |        |             |                 a9 6c 84 62 8c 62        --  . l . b . b
3968:194 | DONE dir | na 16 16 | 006cbd | (2 bytes)   |         .byte 23, 73                 
3968:194 | DONE dir | na 16 16 |        |             |                 23 73                    --  # s
3968:195 | DONE wsp | na 16 16 |        |             |
3968:196 | DONE lbl | na 16 16 | 006cbf |             | nt_sign                              
3968:197 | DONE dir | na 16 16 | 006cbf | (2 bytes)   |         .byte 4, { NC }              
3968:197 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:198 | DONE dir | na 16 16 | 006cc1 | (6 bytes)   |         .word nt_hashs, xt_sign, 00697f 
3968:198 | DONE dir | na 16 16 |        |             |                 b5 6c 72 69 7f 69        --  . l r i . i
3968:199 | DONE dir | na 16 16 | 006cc7 | (4 bytes)   |         .byte 73, 69, 67, 6e         
3968:199 | DONE dir | na 16 16 |        |             |                 73 69 67 6e              --  s i g n
3968:200 | DONE wsp | na 16 16 |        |             |
3968:201 | DONE lbl | na 16 16 | 006ccb |             | nt_hash                              
3968:202 | DONE dir | na 16 16 | 006ccb | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
3968:202 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:203 | DONE dir | na 16 16 | 006ccd | (6 bytes)   |         .word nt_sign, xt_hash, 006274 
3968:203 | DONE dir | na 16 16 |        |             |                 bf 6c 5a 62 74 62        --  . l Z b t b
3968:204 | DONE dir | na 16 16 | 006cd3 | (1 bytes)   |         .byte 23                     
3968:204 | DONE dir | na 16 16 |        |             |                 23                       --  #
3968:205 | DONE wsp | na 16 16 |        |             |
3968:206 | DONE lbl | na 16 16 | 006cd4 |             | nt_lessnumber                        
3968:207 | DONE dir | na 16 16 | 006cd4 | (2 bytes)   |         .byte 2, { NC }              
3968:207 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:208 | DONE dir | na 16 16 | 006cd6 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 006108 
3968:208 | DONE dir | na 16 16 |        |             |                 cb 6c ff 60 08 61        --  . l . ` . a
3968:209 | DONE dir | na 16 16 | 006cdc | (2 bytes)   |         .byte 3c, 23                 
3968:209 | DONE dir | na 16 16 |        |             |                 3c 23                    --  < #
3968:210 | DONE wsp | na 16 16 |        |             |
3968:211 | DONE lbl | na 16 16 | 006cde |             | nt_bl                                
3968:212 | DONE dir | na 16 16 | 006cde | (2 bytes)   |         .byte 2, { NC }              
3968:212 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:213 | DONE dir | na 16 16 | 006ce0 | (6 bytes)   |         .word nt_lessnumber, xt_bl, 006474 
3968:213 | DONE dir | na 16 16 |        |             |                 d4 6c 6d 64 74 64        --  . l m d t d
3968:214 | DONE dir | na 16 16 | 006ce6 | (2 bytes)   |         .byte 62, 6c                 
3968:214 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
3968:215 | DONE wsp | na 16 16 |        |             |
3968:216 | DONE lbl | na 16 16 | 006ce8 |             | nt_spaces                            
3968:217 | DONE dir | na 16 16 | 006ce8 | (2 bytes)   |         .byte 6, { NC }              
3968:217 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3968:218 | DONE dir | na 16 16 | 006cea | (6 bytes)   |         .word nt_bl, xt_spaces, 006a08 
3968:218 | DONE dir | na 16 16 |        |             |                 de 6c fc 69 08 6a        --  . l . i . j
3968:219 | DONE dir | na 16 16 | 006cf0 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
3968:219 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
3968:220 | DONE wsp | na 16 16 |        |             |
3968:221 | DONE lbl | na 16 16 | 006cf6 |             | nt_space                             
3968:222 | DONE dir | na 16 16 | 006cf6 | (2 bytes)   |         .byte 5, { NC }              
3968:222 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3968:223 | DONE dir | na 16 16 | 006cf8 | (6 bytes)   |         .word nt_spaces, xt_space, 0069fb 
3968:223 | DONE dir | na 16 16 |        |             |                 e8 6c f5 69 fb 69        --  . l . i . i
3968:224 | DONE dir | na 16 16 | 006cfe | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
3968:224 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
3968:225 | DONE wsp | na 16 16 |        |             |
3968:226 | DONE lbl | na 16 16 | 006d03 |             | nt_dots                              
3968:227 | DONE dir | na 16 16 | 006d03 | (2 bytes)   |         .byte 2, { NC }              
3968:227 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:228 | DONE dir | na 16 16 | 006d05 | (6 bytes)   |         .word nt_space, xt_dots, 006212 
3968:228 | DONE dir | na 16 16 |        |             |                 f6 6c cb 61 12 62        --  . l . a . b
3968:229 | DONE dir | na 16 16 | 006d0b | (2 bytes)   |         .byte 2e, 73                 
3968:229 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
3968:230 | DONE wsp | na 16 16 |        |             |
3968:231 | DONE lbl | na 16 16 | 006d0d |             | nt_type                              
3968:232 | DONE dir | na 16 16 | 006d0d | (2 bytes)   |         .byte 4, 0                   
3968:232 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3968:233 | DONE dir | na 16 16 | 006d0f | (6 bytes)   |         .word nt_dots, xt_type, 006a50 
3968:233 | DONE dir | na 16 16 |        |             |                 03 6d 30 6a 50 6a        --  . m 0 j P j
3968:234 | DONE dir | na 16 16 | 006d15 | (4 bytes)   |         .byte 74, 79, 70, 65         
3968:234 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
3968:235 | DONE wsp | na 16 16 |        |             |
3968:236 | DONE lbl | na 16 16 | 006d19 |             | nt_dot                               
3968:237 | DONE dir | na 16 16 | 006d19 | (2 bytes)   |         .byte 1, { NC }              
3968:237 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:238 | DONE dir | na 16 16 | 006d1b | (6 bytes)   |         .word nt_type, xt_dot, 0061a8 
3968:238 | DONE dir | na 16 16 |        |             |                 0d 6d 8a 61 a8 61        --   m . a . a
3968:239 | DONE dir | na 16 16 | 006d21 | (1 bytes)   |         .byte 2e                     
3968:239 | DONE dir | na 16 16 |        |             |                 2e                       --  .
3968:240 | DONE wsp | na 16 16 |        |             |
3968:241 | DONE lbl | na 16 16 | 006d22 |             | nt_pad                               
3968:242 | DONE dir | na 16 16 | 006d22 | (2 bytes)   |         .byte 3, { NC }              
3968:242 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:243 | DONE dir | na 16 16 | 006d24 | (6 bytes)   |         .word nt_dot, xt_pad, 00684b 
3968:243 | DONE dir | na 16 16 |        |             |                 19 6d 40 68 4b 68        --  . m @ h K h
3968:244 | DONE dir | na 16 16 | 006d2a | (3 bytes)   |         .byte 70, 61, 64             
3968:244 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
3968:245 | DONE wsp | na 16 16 |        |             |
3968:246 | DONE lbl | na 16 16 | 006d2d |             | nt_base                              
3968:247 | DONE dir | na 16 16 | 006d2d | (2 bytes)   |         .byte 4, { NC }              
3968:247 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:248 | DONE dir | na 16 16 | 006d2f | (6 bytes)   |         .word nt_pad, xt_base, 00645e 
3968:248 | DONE dir | na 16 16 |        |             |                 22 6d 57 64 5e 64        --  " m W d ^ d
3968:249 | DONE dir | na 16 16 | 006d35 | (4 bytes)   |         .byte 62, 61, 73, 65         
3968:249 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
3968:250 | DONE wsp | na 16 16 |        |             |
3968:251 | DONE lbl | na 16 16 | 006d39 |             | nt_evaluate                          
3968:252 | DONE dir | na 16 16 | 006d39 | (2 bytes)   |         .byte 8, { NC }              
3968:252 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3968:253 | DONE dir | na 16 16 | 006d3b | (6 bytes)   |         .word nt_base, xt_evaluate, 006695 
3968:253 | DONE dir | na 16 16 |        |             |                 2d 6d 67 66 95 66        --  - m g f . f
3968:254 | DONE dir | na 16 16 | 006d41 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
3968:254 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
3968:254 | DONE dir | na 16 16 |        |             |                                          -- 
3968:255 | DONE wsp | na 16 16 |        |             |
3968:256 | DONE lbl | na 16 16 | 006d49 |             | nt_cells                             
3968:257 | DONE dir | na 16 16 | 006d49 | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
3968:257 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3968:258 | DONE dir | na 16 16 | 006d4b | (6 bytes)   |         .word nt_evaluate, xt_two-star, 006355 
3968:258 | DONE dir | na 16 16 |        |             |                 39 6d 52 63 55 63        --  9 m R c U c
3968:259 | DONE dir | na 16 16 | 006d51 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
3968:259 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
3968:260 | DONE wsp | na 16 16 |        |             |
3968:261 | DONE lbl | na 16 16 | 006d56 |             | nt_dotquote                          
3968:262 | DONE dir | na 16 16 | 006d56 | (2 bytes)   |         .byte 2, { CO + NC + IM }    
3968:262 | DONE dir | na 16 16 |        |             |                 02 07                    --  . .
3968:263 | DONE dir | na 16 16 | 006d58 | (6 bytes)   |         .word nt_cells, xt_dotquote, 0061cb 
3968:263 | DONE dir | na 16 16 |        |             |                 49 6d b7 61 cb 61        --  I m . a . a
3968:264 | DONE dir | na 16 16 | 006d5e | (2 bytes)   |         .byte 2e, &34                
3968:264 | DONE dir | na 16 16 |        |             |                 2e 22                    --  . "
3968:265 | DONE wsp | na 16 16 |        |             |
3968:266 | DONE lbl | na 16 16 | 006d60 |             | nt_squote                            
3968:267 | DONE dir | na 16 16 | 006d60 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
3968:267 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
3968:268 | DONE dir | na 16 16 | 006d62 | (6 bytes)   |         .word nt_dotquote, xt_squote, 006961 
3968:268 | DONE dir | na 16 16 |        |             |                 56 6d 50 69 61 69        --  V m P i a i
3968:269 | DONE dir | na 16 16 | 006d68 | (2 bytes)   |         .byte 73, &34                
3968:269 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
3968:270 | DONE wsp | na 16 16 |        |             |
3968:271 | DONE lbl | na 16 16 | 006d6a |             | nt_sliteral                          
3968:272 | DONE dir | na 16 16 | 006d6a | (2 bytes)   |         .byte 8, { IM + CO }         
3968:272 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
3968:273 | DONE dir | na 16 16 | 006d6c | (6 bytes)   |         .word nt_squote, xt_sliteral, 0069ca 
3968:273 | DONE dir | na 16 16 |        |             |                 60 6d 80 69 ca 69        --  ` m . i . i
3968:274 | DONE dir | na 16 16 | 006d72 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
3968:274 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
3968:274 | DONE dir | na 16 16 |        |             |                                          -- 
3968:275 | DONE wsp | na 16 16 |        |             |
3968:276 | DONE lbl | na 16 16 | 006d7a |             | nt_brackettick                       
3968:277 | DONE dir | na 16 16 | 006d7a | (2 bytes)   |         .byte 3, { IM + CO }         
3968:277 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
3968:278 | DONE dir | na 16 16 | 006d7c | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 0062ab 
3968:278 | DONE dir | na 16 16 |        |             |                 6a 6d a5 62 ab 62        --  j m . b . b
3968:279 | DONE dir | na 16 16 | 006d82 | (3 bytes)   |         .byte 5b, 27, 5d             
3968:279 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
3968:280 | DONE wsp | na 16 16 |        |             |
3968:281 | DONE lbl | na 16 16 | 006d85 |             | nt_bracketchar                       
3968:282 | DONE dir | na 16 16 | 006d85 | (2 bytes)   |         .byte 6, { IM + CO }         
3968:282 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
3968:283 | DONE dir | na 16 16 | 006d87 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 0062ba 
3968:283 | DONE dir | na 16 16 |        |             |                 7a 6d b4 62 ba 62        --  z m . b . b
3968:284 | DONE dir | na 16 16 | 006d8d | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
3968:284 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
3968:285 | DONE wsp | na 16 16 |        |             |
3968:286 | DONE lbl | na 16 16 | 006d93 |             | nt_literal                           
3968:287 | DONE dir | na 16 16 | 006d93 | (2 bytes)   |         .byte 7, { IM + CO }         
3968:287 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
3968:288 | DONE dir | na 16 16 | 006d95 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 006736 
3968:288 | DONE dir | na 16 16 |        |             |                 85 6d 25 67 36 67        --  . m % g 6 g
3968:289 | DONE dir | na 16 16 | 006d9b | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
3968:289 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
3968:290 | DONE wsp | na 16 16 |        |             |
3968:291 | DONE lbl | na 16 16 | 006da2 |             | nt_compile-only                      
3968:292 | DONE dir | na 16 16 | 006da2 | (2 bytes)   |         .byte 0c, { NC }             
3968:292 | DONE dir | na 16 16 |        |             |                 0c 01                    --   .
3968:293 | DONE dir | na 16 16 | 006da4 | (6 bytes)   |         .word nt_literal, xt_compile-only, 006515 
3968:293 | DONE dir | na 16 16 |        |             |                 93 6d 0d 65 15 65        --  . m  e . e
3968:294 | DONE dir | na 16 16 | 006daa | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
3968:294 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
3968:294 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
3968:295 | DONE wsp | na 16 16 |        |             |
3968:296 | DONE lbl | na 16 16 | 006db6 |             | nt_immediate                         
3968:297 | DONE dir | na 16 16 | 006db6 | (2 bytes)   |         .byte 9, { NC }              
3968:297 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
3968:298 | DONE dir | na 16 16 | 006db8 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 006703 
3968:298 | DONE dir | na 16 16 |        |             |                 a2 6d fb 66 03 67        --  . m . f . g
3968:299 | DONE dir | na 16 16 | 006dbe | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
3968:299 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
3968:299 | DONE dir | na 16 16 |        |             |                 65                       --  e
3968:300 | DONE wsp | na 16 16 |        |             |
3968:301 | DONE lbl | na 16 16 | 006dc7 |             | nt_postpone                          
3968:302 | DONE dir | na 16 16 | 006dc7 | (2 bytes)   |         .byte 8, { IM + CO }         
3968:302 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
3968:303 | DONE dir | na 16 16 | 006dc9 | (6 bytes)   |         .word nt_immediate, xt_postpone, 006903 
3968:303 | DONE dir | na 16 16 |        |             |                 b6 6d ce 68 03 69        --  . m . h . i
3968:304 | DONE dir | na 16 16 | 006dcf | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
3968:304 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3968:304 | DONE dir | na 16 16 |        |             |                                          -- 
3968:305 | DONE wsp | na 16 16 |        |             |
3968:306 | DONE lbl | na 16 16 | 006dd7 |             | nt_rightbracket                      
3968:307 | DONE dir | na 16 16 | 006dd7 | (2 bytes)   |         .byte 1, { NC }              
3968:307 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:308 | DONE dir | na 16 16 | 006dd9 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 0062b3 
3968:308 | DONE dir | na 16 16 |        |             |                 c7 6d ae 62 b3 62        --  . m . b . b
3968:309 | DONE dir | na 16 16 | 006ddf | (1 bytes)   |         .byte 5d                     
3968:309 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
3968:310 | DONE wsp | na 16 16 |        |             |
3968:311 | DONE lbl | na 16 16 | 006de0 |             | nt_leftbracket                       
3968:312 | DONE dir | na 16 16 | 006de0 | (2 bytes)   |         .byte 1, { IM + CO }         
3968:312 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
3968:313 | DONE dir | na 16 16 | 006de2 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 0062ad 
3968:313 | DONE dir | na 16 16 |        |             |                 d7 6d ab 62 ad 62        --  . m . b . b
3968:314 | DONE dir | na 16 16 | 006de8 | (1 bytes)   |         .byte 5b                     
3968:314 | DONE dir | na 16 16 |        |             |                 5b                       --  [
3968:315 | DONE wsp | na 16 16 |        |             |
3968:316 | DONE lbl | na 16 16 | 006de9 |             | nt_zbranch                           
3968:317 | DONE dir | na 16 16 | 006de9 | (2 bytes)   |         .byte 7, { IM + CO }         
3968:317 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
3968:318 | DONE dir | na 16 16 | 006deb | (6 bytes)   |         .word nt_leftbracket, xt_zbranch, 006325 
3968:318 | DONE dir | na 16 16 |        |             |                 e0 6d 1f 63 25 63        --  . m . c % c
3968:319 | DONE dir | na 16 16 | 006df1 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
3968:319 | DONE dir | na 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
3968:320 | DONE wsp | na 16 16 |        |             |
3968:321 | DONE lbl | na 16 16 | 006df8 |             | nt_branch                            
3968:322 | DONE dir | na 16 16 | 006df8 | (2 bytes)   |         .byte 6, { IM + CO }         
3968:322 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
3968:323 | DONE dir | na 16 16 | 006dfa | (6 bytes)   |         .word nt_zbranch, xt_branch, 00647b 
3968:323 | DONE dir | na 16 16 |        |             |                 e9 6d 75 64 7b 64        --  . m u d { d
3968:324 | DONE dir | na 16 16 | 006e00 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
3968:324 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
3968:325 | DONE wsp | na 16 16 |        |             |
3968:326 | DONE lbl | na 16 16 | 006e06 |             | nt_again                             
3968:327 | DONE dir | na 16 16 | 006e06 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
3968:327 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
3968:328 | DONE dir | na 16 16 | 006e08 | (6 bytes)   |         .word nt_branch, xt_again, 006426 
3968:328 | DONE dir | na 16 16 |        |             |                 f8 6d 11 64 26 64        --  . m . d & d
3968:329 | DONE dir | na 16 16 | 006e0e | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
3968:329 | DONE dir | na 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
3968:330 | DONE wsp | na 16 16 |        |             |
3968:331 | DONE lbl | na 16 16 | 006e13 |             | nt_begin                             
3968:332 | DONE dir | na 16 16 | 006e13 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
3968:332 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
3968:333 | DONE dir | na 16 16 | 006e15 | (6 bytes)   |         .word nt_again, xt_begin, 00646c 
3968:333 | DONE dir | na 16 16 |        |             |                 06 6e 66 64 6c 64        --  . n f d l d
3968:334 | DONE dir | na 16 16 | 006e1b | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
3968:334 | DONE dir | na 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
3968:335 | DONE wsp | na 16 16 |        |             |
3968:336 | DONE lbl | na 16 16 | 006e20 |             | nt_compilecomma                      
3968:337 | DONE dir | na 16 16 | 006e20 | (2 bytes)   |         .byte 08, { CO }             
3968:337 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
3968:338 | DONE dir | na 16 16 | 006e22 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 006528 
3968:338 | DONE dir | na 16 16 |        |             |                 13 6e 16 65 28 65        --  . n . e ( e
3968:339 | DONE dir | na 16 16 | 006e28 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
3968:339 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
3968:339 | DONE dir | na 16 16 |        |             |                                          -- 
3968:340 | DONE wsp | na 16 16 |        |             |
3968:341 | DONE lbl | na 16 16 | 006e30 |             | nt_semicolon                         
3968:342 | DONE dir | na 16 16 | 006e30 | (2 bytes)   |         .byte 1, { CO + IM }         
3968:342 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
3968:343 | DONE dir | na 16 16 | 006e32 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 006259 
3968:343 | DONE dir | na 16 16 |        |             |                 20 6e 41 62 59 62        --    n A b Y b
3968:344 | DONE dir | na 16 16 | 006e38 | (1 bytes)   |         .byte 3b                     
3968:344 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
3968:345 | DONE wsp | na 16 16 |        |             |
3968:346 | DONE lbl | na 16 16 | 006e39 |             | nt_colon                             
3968:347 | DONE dir | na 16 16 | 006e39 | (2 bytes)   |         .byte 1, { NC }              
3968:347 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:348 | DONE dir | na 16 16 | 006e3b | (6 bytes)   |         .word nt_semicolon, xt_colon, 006240 
3968:348 | DONE dir | na 16 16 |        |             |                 30 6e 1f 62 40 62        --  0 n . b @ b
3968:349 | DONE dir | na 16 16 | 006e41 | (1 bytes)   |         .byte 3a                     
3968:349 | DONE dir | na 16 16 |        |             |                 3a                       --  :
3968:350 | DONE wsp | na 16 16 |        |             |
3968:351 | DONE lbl | na 16 16 | 006e42 |             | nt_allot                             
3968:352 | DONE dir | na 16 16 | 006e42 | (2 bytes)   |         .byte 5, { NC }              
3968:352 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3968:353 | DONE dir | na 16 16 | 006e44 | (6 bytes)   |         .word nt_colon, xt_allot, 00644f 
3968:353 | DONE dir | na 16 16 |        |             |                 39 6e 27 64 4f 64        --  9 n ' d O d
3968:354 | DONE dir | na 16 16 | 006e4a | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
3968:354 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
3968:355 | DONE wsp | na 16 16 |        |             |
3968:356 | DONE lbl | na 16 16 | 006e4f |             | nt_does                              
3968:357 | DONE dir | na 16 16 | 006e4f | (2 bytes)   |         .byte 5, { IM + CO }         
3968:357 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
3968:358 | DONE dir | na 16 16 | 006e51 | (6 bytes)   |         .word nt_allot, xt_does, 00661f 
3968:358 | DONE dir | na 16 16 |        |             |                 42 6e 13 66 1f 66        --  B n . f . f
3968:359 | DONE dir | na 16 16 | 006e57 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
3968:359 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
3968:360 | DONE wsp | na 16 16 |        |             |
3968:361 | DONE lbl | na 16 16 | 006e5c |             | nt_create                            
3968:362 | DONE dir | na 16 16 | 006e5c | (2 bytes)   |         .byte 6, { NC }              
3968:362 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3968:363 | DONE dir | na 16 16 | 006e5e | (6 bytes)   |         .word nt_does, xt_create, 0065cb 
3968:363 | DONE dir | na 16 16 |        |             |                 4f 6e 59 65 cb 65        --  O n Y e . e
3968:364 | DONE dir | na 16 16 | 006e64 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
3968:364 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
3968:365 | DONE wsp | na 16 16 |        |             |
3968:366 | DONE lbl | na 16 16 | 006e6a |             | nt_name-string                       
3968:367 | DONE dir | na 16 16 | 006e6a | (2 bytes)   |         .byte 0b, { NC }             
3968:367 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
3968:368 | DONE dir | na 16 16 | 006e6c | (6 bytes)   |         .word nt_create, xt_name-string, 0067a3 
3968:368 | DONE dir | na 16 16 |        |             |                 5c 6e 93 67 a3 67        --  \ n . g . g
3968:369 | DONE dir | na 16 16 | 006e72 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
3968:369 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
3968:369 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
3968:370 | DONE wsp | na 16 16 |        |             |
3968:371 | DONE lbl | na 16 16 | 006e7d |             | nt_2dup                              
3968:372 | DONE dir | na 16 16 | 006e7d | (2 bytes)   |         .byte 4, { NC }              
3968:372 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:373 | DONE dir | na 16 16 | 006e7f | (6 bytes)   |         .word nt_name-string, xt_2dup, 006367 
3968:373 | DONE dir | na 16 16 |        |             |                 6a 6e 5d 63 67 63        --  j n ] c g c
3968:374 | DONE dir | na 16 16 | 006e85 | (4 bytes)   |         .byte 32, 64, 75, 70         
3968:374 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
3968:375 | DONE wsp | na 16 16 |        |             |
3968:376 | DONE lbl | na 16 16 | 006e89 |             | nt_abs                               
3968:377 | DONE dir | na 16 16 | 006e89 | (2 bytes)   |         .byte 3, { NC }              
3968:377 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:378 | DONE dir | na 16 16 | 006e8b | (6 bytes)   |         .word nt_2dup, xt_abs, 00638c 
3968:378 | DONE dir | na 16 16 |        |             |                 7d 6e 84 63 8c 63        --  } n . c . c
3968:379 | DONE dir | na 16 16 | 006e91 | (3 bytes)   |         .byte 61, 62, 73             
3968:379 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
3968:380 | DONE wsp | na 16 16 |        |             |
3968:381 | DONE lbl | na 16 16 | 006e94 |             | nt_state                             
3968:382 | DONE dir | na 16 16 | 006e94 | (2 bytes)   |         .byte 5, { NC }              
3968:382 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3968:383 | DONE dir | na 16 16 | 006e96 | (6 bytes)   |         .word nt_abs, xt_state, 006a18 
3968:383 | DONE dir | na 16 16 |        |             |                 89 6e 11 6a 18 6a        --  . n . j . j
3968:384 | DONE dir | na 16 16 | 006e9c | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
3968:384 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
3968:385 | DONE wsp | na 16 16 |        |             |
3968:386 | DONE lbl | na 16 16 | 006ea1 |             | nt_to-in                             
3968:387 | DONE dir | na 16 16 | 006ea1 | (2 bytes)   |         .byte 3, { NC }              
3968:387 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:388 | DONE dir | na 16 16 | 006ea3 | (6 bytes)   |         .word nt_state, xt_to-in, 006124 
3968:388 | DONE dir | na 16 16 |        |             |                 94 6e 1d 61 24 61        --  . n . a $ a
3968:389 | DONE dir | na 16 16 | 006ea9 | (3 bytes)   |         .byte 3e, 69, 6e             
3968:389 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
3968:390 | DONE wsp | na 16 16 |        |             |
3968:391 | DONE lbl | na 16 16 | 006eac |             | nt_source                            
3968:392 | DONE dir | na 16 16 | 006eac | (2 bytes)   |         .byte 6, { NC }              
3968:392 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3968:393 | DONE dir | na 16 16 | 006eae | (6 bytes)   |         .word nt_to-in, xt_source, 0069ed 
3968:393 | DONE dir | na 16 16 |        |             |                 a1 6e e1 69 ed 69        --  . n . i . i
3968:394 | DONE dir | na 16 16 | 006eb4 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
3968:394 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
3968:395 | DONE wsp | na 16 16 |        |             |
3968:396 | DONE lbl | na 16 16 | 006eba |             | nt_depth                             
3968:397 | DONE dir | na 16 16 | 006eba | (2 bytes)   |         .byte 5, { NC }              
3968:397 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3968:398 | DONE dir | na 16 16 | 006ebc | (6 bytes)   |         .word nt_source, xt_depth, 0065fe 
3968:398 | DONE dir | na 16 16 |        |             |                 ac 6e f0 65 fe 65        --  . n . e . e
3968:399 | DONE dir | na 16 16 | 006ec2 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
3968:399 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
3968:400 | DONE wsp | na 16 16 |        |             |
3968:401 | DONE lbl | na 16 16 | 006ec7 |             | nt_constant                          
3968:402 | DONE dir | na 16 16 | 006ec7 | (2 bytes)   |         .byte 8, { NC }              
3968:402 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3968:403 | DONE dir | na 16 16 | 006ec9 | (6 bytes)   |         .word nt_depth, xt_constant, 006542 
3968:403 | DONE dir | na 16 16 |        |             |                 ba 6e 29 65 42 65        --  . n ) e B e
3968:404 | DONE dir | na 16 16 | 006ecf | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
3968:404 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
3968:404 | DONE dir | na 16 16 |        |             |                                          -- 
3968:405 | DONE wsp | na 16 16 |        |             |
3968:406 | DONE lbl | na 16 16 | 006ed7 |             | nt_variable                          
3968:407 | DONE dir | na 16 16 | 006ed7 | (2 bytes)   |         .byte 8, { NC }              
3968:407 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3968:408 | DONE dir | na 16 16 | 006ed9 | (6 bytes)   |         .word nt_constant, xt_variable, 006b34 
3968:408 | DONE dir | na 16 16 |        |             |                 c7 6e 28 6b 34 6b        --  . n ( k 4 k
3968:409 | DONE dir | na 16 16 | 006edf | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
3968:409 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
3968:409 | DONE dir | na 16 16 |        |             |                                          -- 
3968:410 | DONE wsp | na 16 16 |        |             |
3968:411 | DONE lbl | na 16 16 | 006ee7 |             | nt_tick                              
3968:412 | DONE dir | na 16 16 | 006ee7 | (2 bytes)   |         .byte 1, { NC }              
3968:412 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:413 | DONE dir | na 16 16 | 006ee9 | (6 bytes)   |         .word nt_variable, xt_tick, 006383 
3968:413 | DONE dir | na 16 16 |        |             |                 d7 6e 68 63 83 63        --  . n h c . c
3968:414 | DONE dir | na 16 16 | 006eef | (1 bytes)   |         .byte 27                     hex for "'"
3968:414 | DONE dir | na 16 16 |        |             |                 27                       --  '
3968:415 | DONE wsp | na 16 16 |        |             |
3968:416 | DONE lbl | na 16 16 | 006ef0 |             | nt_min                               
3968:417 | DONE dir | na 16 16 | 006ef0 | (2 bytes)   |         .byte 3, { NC }              
3968:417 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:418 | DONE dir | na 16 16 | 006ef2 | (6 bytes)   |         .word nt_tick, xt_min, 006789 
3968:418 | DONE dir | na 16 16 |        |             |                 e7 6e 77 67 89 67        --  . n w g . g
3968:419 | DONE dir | na 16 16 | 006ef8 | (3 bytes)   |         .byte 6d, 69, 6e             
3968:419 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
3968:420 | DONE wsp | na 16 16 |        |             |
3968:421 | DONE lbl | na 16 16 | 006efb |             | nt_max                               
3968:422 | DONE dir | na 16 16 | 006efb | (2 bytes)   |         .byte 3, { NC }              
3968:422 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:423 | DONE dir | na 16 16 | 006efd | (6 bytes)   |         .word nt_min, xt_max, 006776 
3968:423 | DONE dir | na 16 16 |        |             |                 f0 6e 64 67 76 67        --  . n d g v g
3968:424 | DONE dir | na 16 16 | 006f03 | (3 bytes)   |         .byte 6d, 61, 78             
3968:424 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
3968:425 | DONE wsp | na 16 16 |        |             |
3968:426 | DONE lbl | na 16 16 | 006f06 |             | nt_negate                            
3968:427 | DONE dir | na 16 16 | 006f06 | (2 bytes)   |         .byte 6, { NC }              
3968:427 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3968:428 | DONE dir | na 16 16 | 006f08 | (6 bytes)   |         .word nt_max, xt_negate, 0067aa 
3968:428 | DONE dir | na 16 16 |        |             |                 fb 6e a4 67 aa 67        --  . n . g . g
3968:429 | DONE dir | na 16 16 | 006f0e | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
3968:429 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
3968:430 | DONE wsp | na 16 16 |        |             |
3968:431 | DONE lbl | na 16 16 | 006f14 |             | nt_invert                            
3968:432 | DONE dir | na 16 16 | 006f14 | (2 bytes)   |         .byte 6, { NC }              
3968:432 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3968:433 | DONE dir | na 16 16 | 006f16 | (6 bytes)   |         .word nt_negate, xt_invert, 006709 
3968:433 | DONE dir | na 16 16 |        |             |                 06 6f 04 67 09 67        --  . o . g 	 g
3968:434 | DONE dir | na 16 16 | 006f1c | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
3968:434 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
3968:435 | DONE wsp | na 16 16 |        |             |
3968:436 | DONE lbl | na 16 16 | 006f22 |             | nt_char                              
3968:437 | DONE dir | na 16 16 | 006f22 | (2 bytes)   |         .byte 4, { NC }              
3968:437 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:438 | DONE dir | na 16 16 | 006f24 | (6 bytes)   |         .word nt_invert, xt_char, 0064d0 
3968:438 | DONE dir | na 16 16 |        |             |                 14 6f b9 64 d0 64        --  . o . d . d
3968:439 | DONE dir | na 16 16 | 006f2a | (4 bytes)   |         .byte 63, 68, 61, 72         
3968:439 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
3968:440 | DONE wsp | na 16 16 |        |             |
3968:441 | DONE lbl | na 16 16 | 006f2e |             | nt_xor                               
3968:442 | DONE dir | na 16 16 | 006f2e | (2 bytes)   |         .byte 3, { NC }              
3968:442 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:443 | DONE dir | na 16 16 | 006f30 | (6 bytes)   |         .word nt_char, xt_xor, 006b63 
3968:443 | DONE dir | na 16 16 |        |             |                 22 6f 5d 6b 63 6b        --  " o ] k c k
3968:444 | DONE dir | na 16 16 | 006f36 | (3 bytes)   |         .byte 78, 6f, 72             
3968:444 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
3968:445 | DONE wsp | na 16 16 |        |             |
3968:446 | DONE lbl | na 16 16 | 006f39 |             | nt_or                                
3968:447 | DONE dir | na 16 16 | 006f39 | (2 bytes)   |         .byte 2, { NC }              
3968:447 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:448 | DONE dir | na 16 16 | 006f3b | (6 bytes)   |         .word nt_xor, xt_or, 006838  
3968:448 | DONE dir | na 16 16 |        |             |                 2e 6f 32 68 38 68        --  . o 2 h 8 h
3968:449 | DONE dir | na 16 16 | 006f41 | (2 bytes)   |         .byte 6f, 72                 
3968:449 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
3968:450 | DONE wsp | na 16 16 |        |             |
3968:451 | DONE lbl | na 16 16 | 006f43 |             | nt_and                               
3968:452 | DONE dir | na 16 16 | 006f43 | (2 bytes)   |         .byte 3, { NC }              
3968:452 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:453 | DONE dir | na 16 16 | 006f45 | (6 bytes)   |         .word nt_or, xt_and, 006456  
3968:453 | DONE dir | na 16 16 |        |             |                 39 6f 50 64 56 64        --  9 o P d V d
3968:454 | DONE dir | na 16 16 | 006f4b | (3 bytes)   |         .byte 61, 6e, 64             
3968:454 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
3968:455 | DONE wsp | na 16 16 |        |             |
3968:456 | DONE lbl | na 16 16 | 006f4e |             | nt_plusstore                         
3968:457 | DONE dir | na 16 16 | 006f4e | (2 bytes)   |         .byte 2, { NC }              
3968:457 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:458 | DONE dir | na 16 16 | 006f50 | (6 bytes)   |         .word nt_and, xt_plusstore, 0068cd 
3968:458 | DONE dir | na 16 16 |        |             |                 43 6f be 68 cd 68        --  C o . h . h
3968:459 | DONE dir | na 16 16 | 006f56 | (2 bytes)   |         .byte 2b, 21                 
3968:459 | DONE dir | na 16 16 |        |             |                 2b 21                    --  + !
3968:460 | DONE wsp | na 16 16 |        |             |
3968:461 | DONE lbl | na 16 16 | 006f58 |             | nt_c-comma                           
3968:462 | DONE dir | na 16 16 | 006f58 | (2 bytes)   |         .byte 2, { NC }              
3968:462 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:463 | DONE dir | na 16 16 | 006f5a | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 00649c 
3968:463 | DONE dir | na 16 16 |        |             |                 4e 6f 8f 64 9c 64        --  N o . d . d
3968:464 | DONE dir | na 16 16 | 006f60 | (2 bytes)   |         .byte 63, 2c                 
3968:464 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
3968:465 | DONE wsp | na 16 16 |        |             |
3968:466 | DONE lbl | na 16 16 | 006f62 |             | nt_c-fetch                           
3968:467 | DONE dir | na 16 16 | 006f62 | (2 bytes)   |         .byte 2, { NC }              
3968:467 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:468 | DONE dir | na 16 16 | 006f64 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 0064a8 
3968:468 | DONE dir | na 16 16 |        |             |                 58 6f 9d 64 a8 64        --  X o . d . d
3968:469 | DONE dir | na 16 16 | 006f6a | (2 bytes)   |         .byte 63, 40                 
3968:469 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
3968:470 | DONE wsp | na 16 16 |        |             |
3968:471 | DONE lbl | na 16 16 | 006f6c |             | nt_c-store                           
3968:472 | DONE dir | na 16 16 | 006f6c | (2 bytes)   |         .byte 2, { NC }              
3968:472 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:473 | DONE dir | na 16 16 | 006f6e | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0064b8 
3968:473 | DONE dir | na 16 16 |        |             |                 62 6f a9 64 b8 64        --  b o . d . d
3968:474 | DONE dir | na 16 16 | 006f74 | (2 bytes)   |         .byte 63, 21                 
3968:474 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
3968:475 | DONE wsp | na 16 16 |        |             |
3968:476 | DONE lbl | na 16 16 | 006f76 |             | nt_two-star                          
3968:477 | DONE dir | na 16 16 | 006f76 | (2 bytes)   |         .byte 2, { NC }              
3968:477 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:478 | DONE dir | na 16 16 | 006f78 | (6 bytes)   |         .word nt_c-store, xt_two-star, 006355 
3968:478 | DONE dir | na 16 16 |        |             |                 6c 6f 52 63 55 63        --  l o R c U c
3968:479 | DONE dir | na 16 16 | 006f7e | (2 bytes)   |         .byte 32, 2a                 
3968:479 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
3968:480 | DONE wsp | na 16 16 |        |             |
3968:481 | DONE lbl | na 16 16 | 006f80 |             | nt_minus                             
3968:482 | DONE dir | na 16 16 | 006f80 | (2 bytes)   |         .byte 1, { NC }              
3968:482 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:483 | DONE dir | na 16 16 | 006f82 | (6 bytes)   |         .word nt_two-star, xt_minus, 0062d2 
3968:483 | DONE dir | na 16 16 |        |             |                 76 6f c8 62 d2 62        --  v o . b . b
3968:484 | DONE dir | na 16 16 | 006f88 | (1 bytes)   |         .byte 2d                     
3968:484 | DONE dir | na 16 16 |        |             |                 2d                       --  -
3968:485 | DONE wsp | na 16 16 |        |             |
3968:486 | DONE lbl | na 16 16 | 006f89 |             | nt_plus                              
3968:487 | DONE dir | na 16 16 | 006f89 | (2 bytes)   |         .byte 1, { NC }              
3968:487 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:488 | DONE dir | na 16 16 | 006f8b | (6 bytes)   |         .word nt_minus, xt_plus, 0062c7 
3968:488 | DONE dir | na 16 16 |        |             |                 80 6f c0 62 c7 62        --  . o . b . b
3968:489 | DONE dir | na 16 16 | 006f91 | (1 bytes)   |         .byte 2b                     
3968:489 | DONE dir | na 16 16 |        |             |                 2b                       --  +
3968:490 | DONE wsp | na 16 16 |        |             |
3968:491 | DONE lbl | na 16 16 | 006f92 |             | nt_one-minus                         
3968:492 | DONE dir | na 16 16 | 006f92 | (2 bytes)   |         .byte 2, { NC }              
3968:492 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:493 | DONE dir | na 16 16 | 006f94 | (6 bytes)   |         .word nt_plus, xt_one-minus, 006347 
3968:493 | DONE dir | na 16 16 |        |             |                 89 6f 46 63 47 63        --  . o F c G c
3968:494 | DONE dir | na 16 16 | 006f9a | (2 bytes)   |         .byte 31, 2d                 
3968:494 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
3968:495 | DONE wsp | na 16 16 |        |             |
3968:496 | DONE lbl | na 16 16 | 006f9c |             | nt_one-plus                          
3968:497 | DONE dir | na 16 16 | 006f9c | (2 bytes)   |         .byte 2, { NC }              
3968:497 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:498 | DONE dir | na 16 16 | 006f9e | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 006349 
3968:498 | DONE dir | na 16 16 |        |             |                 92 6f 48 63 49 63        --  . o H c I c
3968:499 | DONE dir | na 16 16 | 006fa4 | (2 bytes)   |         .byte 31, 2b                 
3968:499 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
3968:500 | DONE wsp | na 16 16 |        |             |
3968:501 | DONE lbl | na 16 16 | 006fa6 |             | nt_zero-notequal                     
3968:502 | DONE dir | na 16 16 | 006fa6 | (2 bytes)   |         .byte 3, { NC }              
3968:502 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:503 | DONE dir | na 16 16 | 006fa8 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 006313 
3968:503 | DONE dir | na 16 16 |        |             |                 9c 6f 08 63 13 63        --  . o . c . c
3968:504 | DONE dir | na 16 16 | 006fae | (3 bytes)   |         .byte 30, 3c, 3e             
3968:504 | DONE dir | na 16 16 |        |             |                 30 3c 3e                 --  0 < >
3968:505 | DONE wsp | na 16 16 |        |             |
3968:506 | DONE lbl | na 16 16 | 006fb1 |             | nt_zero-more                         
3968:507 | DONE dir | na 16 16 | 006fb1 | (2 bytes)   |         .byte 2, { NC }              
3968:507 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:508 | DONE dir | na 16 16 | 006fb3 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 00631e 
3968:508 | DONE dir | na 16 16 |        |             |                 a6 6f 14 63 1e 63        --  . o . c . c
3968:509 | DONE dir | na 16 16 | 006fb9 | (2 bytes)   |         .byte 30, 3e                 
3968:509 | DONE dir | na 16 16 |        |             |                 30 3e                    --  0 >
3968:510 | DONE wsp | na 16 16 |        |             |
3968:511 | DONE lbl | na 16 16 | 006fbb |             | nt_zero-less                         
3968:512 | DONE dir | na 16 16 | 006fbb | (2 bytes)   |         .byte 2, { NC }              
3968:512 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:513 | DONE dir | na 16 16 | 006fbd | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 006307 
3968:513 | DONE dir | na 16 16 |        |             |                 b1 6f fc 62 07 63        --  . o . b . c
3968:514 | DONE dir | na 16 16 | 006fc3 | (2 bytes)   |         .byte 30, 3c                 
3968:514 | DONE dir | na 16 16 |        |             |                 30 3c                    --  0 <
3968:515 | DONE wsp | na 16 16 |        |             |
3968:516 | DONE lbl | na 16 16 | 006fc5 |             | nt_greater                           
3968:517 | DONE dir | na 16 16 | 006fc5 | (2 bytes)   |         .byte 1, { NC }              
3968:517 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:518 | DONE dir | na 16 16 | 006fc7 | (6 bytes)   |         .word nt_zero-less, xt_greater, 00611c 
3968:518 | DONE dir | na 16 16 |        |             |                 bb 6f 09 61 1c 61        --  . o 	 a . a
3968:519 | DONE dir | na 16 16 | 006fcd | (1 bytes)   |         .byte 3e                     
3968:519 | DONE dir | na 16 16 |        |             |                 3e                       --  >
3968:520 | DONE wsp | na 16 16 |        |             |
3968:521 | DONE lbl | na 16 16 | 006fce |             | nt_less                              
3968:522 | DONE dir | na 16 16 | 006fce | (2 bytes)   |         .byte 1, { NC }              
3968:522 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:523 | DONE dir | na 16 16 | 006fd0 | (6 bytes)   |         .word nt_greater, xt_less, 0060f2 
3968:523 | DONE dir | na 16 16 |        |             |                 c5 6f df 60 f2 60        --  . o . ` . `
3968:524 | DONE dir | na 16 16 | 006fd6 | (1 bytes)   |         .byte 3c                     
3968:524 | DONE dir | na 16 16 |        |             |                 3c                       --  <
3968:525 | DONE wsp | na 16 16 |        |             |
3968:526 | DONE lbl | na 16 16 | 006fd7 |             | nt_zero-equal                        
3968:527 | DONE dir | na 16 16 | 006fd7 | (2 bytes)   |         .byte 2, { NC }              
3968:527 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:528 | DONE dir | na 16 16 | 006fd9 | (6 bytes)   |         .word nt_less, xt_zero-equal, 0062fb 
3968:528 | DONE dir | na 16 16 |        |             |                 ce 6f f0 62 fb 62        --  . o . b . b
3968:529 | DONE dir | na 16 16 | 006fdf | (2 bytes)   |         .byte 30, 3d                 
3968:529 | DONE dir | na 16 16 |        |             |                 30 3d                    --  0 =
3968:530 | DONE wsp | na 16 16 |        |             |
3968:531 | DONE lbl | na 16 16 | 006fe1 |             | nt_not-equal                         
3968:532 | DONE dir | na 16 16 | 006fe1 | (2 bytes)   |         .byte 2, { NC }              
3968:532 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3968:533 | DONE dir | na 16 16 | 006fe3 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 0060fe 
3968:533 | DONE dir | na 16 16 |        |             |                 d7 6f f3 60 fe 60        --  . o . ` . `
3968:534 | DONE dir | na 16 16 | 006fe9 | (2 bytes)   |         .byte 3c, 3e                 
3968:534 | DONE dir | na 16 16 |        |             |                 3c 3e                    --  < >
3968:535 | DONE wsp | na 16 16 |        |             |
3968:536 | DONE lbl | na 16 16 | 006feb |             | nt_equal                             
3968:537 | DONE dir | na 16 16 | 006feb | (2 bytes)   |         .byte 1, { NC }              
3968:537 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:538 | DONE dir | na 16 16 | 006fed | (6 bytes)   |         .word nt_not-equal, xt_equal, 0062e7 
3968:538 | DONE dir | na 16 16 |        |             |                 e1 6f dc 62 e7 62        --  . o . b . b
3968:539 | DONE dir | na 16 16 | 006ff3 | (1 bytes)   |         .byte 3d                     
3968:539 | DONE dir | na 16 16 |        |             |                 3d                       --  =
3968:540 | DONE wsp | na 16 16 |        |             |
3968:541 | DONE lbl | na 16 16 | 006ff4 |             | nt_false                             
3968:542 | DONE dir | na 16 16 | 006ff4 | (2 bytes)   |         .byte 5, { NC }              
3968:542 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3968:543 | DONE dir | na 16 16 | 006ff6 | (6 bytes)   |         .word nt_equal, xt_zero, 0062ef 
3968:543 | DONE dir | na 16 16 |        |             |                 eb 6f e8 62 ef 62        --  . o . b . b
3968:544 | DONE dir | na 16 16 | 006ffc | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
3968:544 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
3968:545 | DONE wsp | na 16 16 |        |             |
3968:546 | DONE lbl | na 16 16 | 007001 |             | nt_true                              
3968:547 | DONE dir | na 16 16 | 007001 | (2 bytes)   |         .byte 4, { NC }              
3968:547 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:548 | DONE dir | na 16 16 | 007003 | (6 bytes)   |         .word nt_false, xt_true, 006a26 
3968:548 | DONE dir | na 16 16 |        |             |                 f4 6f 1f 6a 26 6a        --  . o . j & j
3968:549 | DONE dir | na 16 16 | 007009 | (4 bytes)   |         .byte 74, 72, 75, 65         
3968:549 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
3968:550 | DONE wsp | na 16 16 |        |             |
3968:551 | DONE lbl | na 16 16 | 00700d |             | nt_gtnumber                          
3968:552 | DONE dir | na 16 16 | 00700d | (2 bytes)   |         .byte 7, { NC }              see if actually NC
3968:552 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3968:553 | DONE dir | na 16 16 | 00700f | (6 bytes)   |         .word nt_true, xt_gtnumber, 006181 
3968:553 | DONE dir | na 16 16 |        |             |                 01 70 25 61 81 61        --  . p % a . a
3968:554 | DONE dir | na 16 16 | 007015 | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
3968:554 | DONE dir | na 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
3968:555 | DONE wsp | na 16 16 |        |             |
3968:556 | DONE lbl | na 16 16 | 00701c |             | nt_number                            
3968:557 | DONE dir | na 16 16 | 00701c | (2 bytes)   |         .byte 6, { NC }              see if actually NC
3968:557 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3968:558 | DONE dir | na 16 16 | 00701e | (6 bytes)   |         .word nt_gtnumber, xt_number, 006831 
3968:558 | DONE dir | na 16 16 |        |             |                 0d 70 ae 67 31 68        --   p . g 1 h
3968:559 | DONE dir | na 16 16 | 007024 | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
3968:559 | DONE dir | na 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
3968:560 | DONE wsp | na 16 16 |        |             |
3968:561 | DONE lbl | na 16 16 | 00702a |             | nt_two                               
3968:562 | DONE dir | na 16 16 | 00702a | (2 bytes)   |         .byte 1, { NC }              
3968:562 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:563 | DONE dir | na 16 16 | 00702c | (6 bytes)   |         .word nt_number, xt_two, 006351 
3968:563 | DONE dir | na 16 16 |        |             |                 1c 70 4a 63 51 63        --  . p J c Q c
3968:564 | DONE dir | na 16 16 | 007032 | (1 bytes)   |         .byte 32                     
3968:564 | DONE dir | na 16 16 |        |             |                 32                       --  2
3968:565 | DONE wsp | na 16 16 |        |             |
3968:566 | DONE lbl | na 16 16 | 007033 |             | nt_one                               
3968:567 | DONE dir | na 16 16 | 007033 | (2 bytes)   |         .byte 1, { NC }              
3968:567 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:568 | DONE dir | na 16 16 | 007035 | (6 bytes)   |         .word nt_two, xt_one, 006345 
3968:568 | DONE dir | na 16 16 |        |             |                 2a 70 3e 63 45 63        --  * p > c E c
3968:569 | DONE dir | na 16 16 | 00703b | (1 bytes)   |         .byte 31                     
3968:569 | DONE dir | na 16 16 |        |             |                 31                       --  1
3968:570 | DONE wsp | na 16 16 |        |             |
3968:571 | DONE lbl | na 16 16 | 00703c |             | nt_zero                              
3968:572 | DONE dir | na 16 16 | 00703c | (2 bytes)   |         .byte 1, { NC }              
3968:572 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:573 | DONE dir | na 16 16 | 00703e | (6 bytes)   |         .word nt_one, xt_zero, 0062ef 
3968:573 | DONE dir | na 16 16 |        |             |                 33 70 e8 62 ef 62        --  3 p . b . b
3968:574 | DONE dir | na 16 16 | 007044 | (1 bytes)   |         .byte 30                     
3968:574 | DONE dir | na 16 16 |        |             |                 30                       --  0
3968:575 | DONE wsp | na 16 16 |        |             |
3968:576 | DONE lbl | na 16 16 | 007045 |             | nt_find-name                         
3968:577 | DONE dir | na 16 16 | 007045 | (2 bytes)   |         .byte 9, 0                   
3968:577 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
3968:578 | DONE dir | na 16 16 | 007047 | (6 bytes)   |         .word nt_zero, xt_find-name, 0066fa 
3968:578 | DONE dir | na 16 16 |        |             |                 3c 70 a4 66 fa 66        --  < p . f . f
3968:579 | DONE dir | na 16 16 | 00704d | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
3968:579 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
3968:579 | DONE dir | na 16 16 |        |             |                 65                       --  e
3968:580 | DONE wsp | na 16 16 |        |             |
3968:581 | DONE lbl | na 16 16 | 007056 |             | nt_refill                            
3968:582 | DONE dir | na 16 16 | 007056 | (2 bytes)   |         .byte 6, 0                   TODO check flags
3968:582 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
3968:583 | DONE dir | na 16 16 | 007058 | (6 bytes)   |         .word nt_find-name, xt_refill, 006946 
3968:583 | DONE dir | na 16 16 |        |             |                 45 70 14 69 46 69        --  E p . i F i
3968:584 | DONE dir | na 16 16 | 00705e | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
3968:584 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
3968:585 | DONE wsp | na 16 16 |        |             |
3968:586 | DONE lbl | na 16 16 | 007064 |             | nt_parse-name                        
3968:587 | DONE dir | na 16 16 | 007064 | (2 bytes)   |         .byte &10, 0                 
3968:587 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
3968:588 | DONE dir | na 16 16 | 007066 | (6 bytes)   |         .word nt_refill, xt_parse-name, 0068bd 
3968:588 | DONE dir | na 16 16 |        |             |                 56 70 59 68 bd 68        --  V p Y h . h
3968:589 | DONE dir | na 16 16 | 00706c | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
3968:589 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
3968:589 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
3968:590 | DONE wsp | na 16 16 |        |             |
3968:591 | DONE lbl | na 16 16 | 007076 |             | nt_source-id                         
3968:592 | DONE dir | na 16 16 | 007076 | (2 bytes)   |         .byte 9, { NC }              
3968:592 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
3968:593 | DONE dir | na 16 16 | 007078 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 0069f4 
3968:593 | DONE dir | na 16 16 |        |             |                 64 70 ee 69 f4 69        --  d p . i . i
3968:594 | DONE dir | na 16 16 | 00707e | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
3968:594 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
3968:594 | DONE dir | na 16 16 |        |             |                 64                       --  d
3968:595 | DONE wsp | na 16 16 |        |             |
3968:596 | DONE lbl | na 16 16 | 007087 |             | nt_comma                             
3968:597 | DONE dir | na 16 16 | 007087 | (2 bytes)   |         .byte 1, { NC }              
3968:597 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:598 | DONE dir | na 16 16 | 007089 | (6 bytes)   |         .word nt_source-id, xt_comma, 00621e 
3968:598 | DONE dir | na 16 16 |        |             |                 76 70 13 62 1e 62        --  v p . b . b
3968:599 | DONE dir | na 16 16 | 00708f | (1 bytes)   |         .byte 2c                     
3968:599 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
3968:600 | DONE wsp | na 16 16 |        |             |
3968:601 | DONE lbl | na 16 16 | 007090 |             | nt_accept                            
3968:602 | DONE dir | na 16 16 | 007090 | (2 bytes)   |         .byte 6, 00                  TODO check flags
3968:602 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
3968:603 | DONE dir | na 16 16 | 007092 | (6 bytes)   |         .word nt_comma, xt_accept, 006410 
3968:603 | DONE dir | na 16 16 |        |             |                 87 70 8d 63 10 64        --  . p . c . d
3968:604 | DONE dir | na 16 16 | 007098 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
3968:604 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
3968:605 | DONE wsp | na 16 16 |        |             |
3968:606 | DONE lbl | na 16 16 | 00709e |             | nt_backslash                         
3968:607 | DONE dir | na 16 16 | 00709e | (2 bytes)   |         .byte 1, { NC }              
3968:607 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:608 | DONE dir | na 16 16 | 0070a0 | (6 bytes)   |         .word nt_accept, xt_backslash, 0062bf 
3968:608 | DONE dir | na 16 16 |        |             |                 90 70 bb 62 bf 62        --  . p . b . b
3968:609 | DONE dir | na 16 16 | 0070a6 | (1 bytes)   |         .byte 5c                     
3968:609 | DONE dir | na 16 16 |        |             |                 5c                       --  \
3968:610 | DONE wsp | na 16 16 |        |             |
3968:611 | DONE lbl | na 16 16 | 0070a7 |             | nt_tuck                              
3968:612 | DONE dir | na 16 16 | 0070a7 | (2 bytes)   |         .byte 4, { NC }              
3968:612 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:613 | DONE dir | na 16 16 | 0070a9 | (6 bytes)   |         .word nt_backslash, xt_tuck, 006a2f 
3968:613 | DONE dir | na 16 16 |        |             |                 9e 70 27 6a 2f 6a        --  . p ' j / j
3968:614 | DONE dir | na 16 16 | 0070af | (4 bytes)   |         .byte 74, 75, 63, 6b         
3968:614 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
3968:615 | DONE wsp | na 16 16 |        |             |
3968:616 | DONE lbl | na 16 16 | 0070b3 |             | nt_nip                               
3968:617 | DONE dir | na 16 16 | 0070b3 | (2 bytes)   |         .byte 3, { NC }              
3968:617 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:618 | DONE dir | na 16 16 | 0070b5 | (6 bytes)   |         .word nt_tuck, xt_nip, 0067ad 
3968:618 | DONE dir | na 16 16 |        |             |                 a7 70 ab 67 ad 67        --  . p . g . g
3968:619 | DONE dir | na 16 16 | 0070bb | (3 bytes)   |         .byte 6e, 69, 70             
3968:619 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
3968:620 | DONE wsp | na 16 16 |        |             |
3968:621 | DONE lbl | na 16 16 | 0070be |             | nt_mrot                              
3968:622 | DONE dir | na 16 16 | 0070be | (2 bytes)   |         .byte 4, { NC }              
3968:622 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:623 | DONE dir | na 16 16 | 0070c0 | (6 bytes)   |         .word nt_nip, xt_mrot, 0062db 
3968:623 | DONE dir | na 16 16 |        |             |                 b3 70 d3 62 db 62        --  . p . b . b
3968:624 | DONE dir | na 16 16 | 0070c6 | (4 bytes)   |         .byte 2d, 72, 6f, 74         
3968:624 | DONE dir | na 16 16 |        |             |                 2d 72 6f 74              --  - r o t
3968:625 | DONE wsp | na 16 16 |        |             |
3968:626 | DONE lbl | na 16 16 | 0070ca |             | nt_rot                               
3968:627 | DONE dir | na 16 16 | 0070ca | (2 bytes)   |         .byte 3, { NC }              
3968:627 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:628 | DONE dir | na 16 16 | 0070cc | (6 bytes)   |         .word nt_mrot, xt_rot, 00694f 
3968:628 | DONE dir | na 16 16 |        |             |                 be 70 47 69 4f 69        --  . p G i O i
3968:629 | DONE dir | na 16 16 | 0070d2 | (3 bytes)   |         .byte 72, 6f, 74             
3968:629 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
3968:630 | DONE wsp | na 16 16 |        |             |
3968:631 | DONE lbl | na 16 16 | 0070d5 |             | nt_execute                           
3968:632 | DONE dir | na 16 16 | 0070d5 | (2 bytes)   |         .byte 7, { NC }              
3968:632 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3968:633 | DONE dir | na 16 16 | 0070d7 | (6 bytes)   |         .word nt_rot, xt_execute, 0066a3 
3968:633 | DONE dir | na 16 16 |        |             |                 ca 70 99 66 a3 66        --  . p . f . f
3968:634 | DONE dir | na 16 16 | 0070dd | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
3968:634 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
3968:635 | DONE wsp | na 16 16 |        |             |
3968:636 | DONE lbl | na 16 16 | 0070e4 |             | nt_here                              
3968:637 | DONE dir | na 16 16 | 0070e4 | (2 bytes)   |         .byte 4, { NC }              
3968:637 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:638 | DONE dir | na 16 16 | 0070e6 | (6 bytes)   |         .word nt_execute, xt_here, 006710 
3968:638 | DONE dir | na 16 16 |        |             |                 d5 70 0a 67 10 67        --  . p 
 g . g
3968:639 | DONE dir | na 16 16 | 0070ec | (4 bytes)   |         .byte 68, 65, 72, 65         
3968:639 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
3968:640 | DONE wsp | na 16 16 |        |             |
3968:641 | DONE lbl | na 16 16 | 0070f0 |             | nt_2drop                             
3968:642 | DONE dir | na 16 16 | 0070f0 | (2 bytes)   |         .byte 5, { NC }              
3968:642 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3968:643 | DONE dir | na 16 16 | 0070f2 | (6 bytes)   |         .word nt_here, xt_2drop, 00635c 
3968:643 | DONE dir | na 16 16 |        |             |                 e4 70 56 63 5c 63        --  . p V c \ c
3968:644 | DONE dir | na 16 16 | 0070f8 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
3968:644 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
3968:645 | DONE wsp | na 16 16 |        |             |
3968:646 | DONE lbl | na 16 16 | 0070fd |             | nt_rfetch                            
3968:647 | DONE dir | na 16 16 | 0070fd | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
3968:647 | DONE dir | na 16 16 |        |             |                 02 00                    --  . .
3968:648 | DONE dir | na 16 16 | 0070ff | (6 bytes)   |         .word nt_2drop, xt_rfetch, 00690b 
3968:648 | DONE dir | na 16 16 |        |             |                 f0 70 03 69 0b 69        --  . p . i  i
3968:649 | DONE dir | na 16 16 | 007105 | (2 bytes)   |         .byte 72, 40                 
3968:649 | DONE dir | na 16 16 |        |             |                 72 40                    --  r @
3968:650 | DONE wsp | na 16 16 |        |             |
3968:651 | DONE lbl | na 16 16 | 007107 |             | nt_fromr                             
3968:652 | DONE dir | na 16 16 | 007107 | (2 bytes)   |         .byte 2, { CO }              
3968:652 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
3968:653 | DONE dir | na 16 16 | 007109 | (6 bytes)   |         .word nt_rfetch, xt_fromr, 006913 
3968:653 | DONE dir | na 16 16 |        |             |                 fd 70 0c 69 13 69        --  . p  i . i
3968:654 | DONE dir | na 16 16 | 00710f | (2 bytes)   |         .byte 72, 3e                 
3968:654 | DONE dir | na 16 16 |        |             |                 72 3e                    --  r >
3968:655 | DONE wsp | na 16 16 |        |             |
3968:656 | DONE lbl | na 16 16 | 007111 |             | nt_tor                               
3968:657 | DONE dir | na 16 16 | 007111 | (2 bytes)   |         .byte 2, { CO }              
3968:657 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
3968:658 | DONE dir | na 16 16 | 007113 | (6 bytes)   |         .word nt_fromr, xt_tor, 006189 
3968:658 | DONE dir | na 16 16 |        |             |                 07 71 82 61 89 61        --  . q . a . a
3968:659 | DONE dir | na 16 16 | 007119 | (2 bytes)   |         .byte 3e, 72                 
3968:659 | DONE dir | na 16 16 |        |             |                 3e 72                    --  > r
3968:660 | DONE wsp | na 16 16 |        |             |
3968:661 | DONE lbl | na 16 16 | 00711b |             | nt_char-num                          
3968:662 | DONE dir | na 16 16 | 00711b | (2 bytes)   |         .byte &11, { NC }            
3968:662 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
3968:663 | DONE dir | na 16 16 | 00711d | (6 bytes)   |         .word nt_tor, xt_char-num, 00650c 
3968:663 | DONE dir | na 16 16 |        |             |                 11 71 d1 64 0c 65        --  . q . d  e
3968:664 | DONE dir | na 16 16 | 007123 | (11 bytes)  |         .byte 63, 68, 61, 72, 3e, 6e, 75, 6d, 62, 65, 72 
3968:664 | DONE dir | na 16 16 |        |             |                 63 68 61 72 3e 6e 75 6d  --  c h a r > n u m
3968:664 | DONE dir | na 16 16 |        |             |                 62 65 72                 --  b e r
3968:665 | DONE wsp | na 16 16 |        |             |
3968:666 | DONE lbl | na 16 16 | 00712e |             | nt_over                              
3968:667 | DONE dir | na 16 16 | 00712e | (2 bytes)   |         .byte 4, { NC }              
3968:667 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:668 | DONE dir | na 16 16 | 007130 | (6 bytes)   |         .word nt_char-num, xt_over, 00683f 
3968:668 | DONE dir | na 16 16 |        |             |                 1b 71 39 68 3f 68        --  . q 9 h ? h
3968:669 | DONE dir | na 16 16 | 007136 | (4 bytes)   |         .byte 6f, 76, 65, 72         
3968:669 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
3968:670 | DONE wsp | na 16 16 |        |             |
3968:671 | DONE lbl | na 16 16 | 00713a |             | nt_fetch                             
3968:672 | DONE dir | na 16 16 | 00713a | (2 bytes)   |         .byte 1, { NC }              
3968:672 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:673 | DONE dir | na 16 16 | 00713c | (6 bytes)   |         .word nt_over, xt_fetch, 0062a4 
3968:673 | DONE dir | na 16 16 |        |             |                 2e 71 a0 62 a4 62        --  . q . b . b
3968:674 | DONE dir | na 16 16 | 007142 | (1 bytes)   |         .byte 40                     
3968:674 | DONE dir | na 16 16 |        |             |                 40                       --  @
3968:675 | DONE wsp | na 16 16 |        |             |
3968:676 | DONE lbl | na 16 16 | 007143 |             | nt_store                             
3968:677 | DONE dir | na 16 16 | 007143 | (2 bytes)   |         .byte 1, { NC }              
3968:677 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3968:678 | DONE dir | na 16 16 | 007145 | (6 bytes)   |         .word nt_fetch, xt_store, 00629f 
3968:678 | DONE dir | na 16 16 |        |             |                 3a 71 94 62 9f 62        --  : q . b . b
3968:679 | DONE dir | na 16 16 | 00714b | (1 bytes)   |         .byte 21                     
3968:679 | DONE dir | na 16 16 |        |             |                 21                       --  !
3968:680 | DONE wsp | na 16 16 |        |             |
3968:681 | DONE lbl | na 16 16 | 00714c |             | nt_swap                              
3968:682 | DONE dir | na 16 16 | 00714c | (2 bytes)   |         .byte 4, { NC }              
3968:682 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:683 | DONE dir | na 16 16 | 00714e | (6 bytes)   |         .word nt_store, xt_swap, 006a1e 
3968:683 | DONE dir | na 16 16 |        |             |                 43 71 19 6a 1e 6a        --  C q . j . j
3968:684 | DONE dir | na 16 16 | 007154 | (4 bytes)   |         .byte 73, 77, 61, 70         
3968:684 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
3968:685 | DONE wsp | na 16 16 |        |             |
3968:686 | DONE lbl | na 16 16 | 007158 |             | nt_dup                               
3968:687 | DONE dir | na 16 16 | 007158 | (2 bytes)   |         .byte 3, { NC }              
3968:687 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3968:688 | DONE dir | na 16 16 | 00715a | (6 bytes)   |         .word nt_swap, xt_dup, 006666 
3968:688 | DONE dir | na 16 16 |        |             |                 4c 71 62 66 66 66        --  L q b f f f
3968:689 | DONE dir | na 16 16 | 007160 | (3 bytes)   |         .byte 64, 75, 70             
3968:689 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
3968:690 | DONE wsp | na 16 16 |        |             |
3968:691 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
3968:692 | DONE lbl | na 16 16 | 007163 |             | nt_drop                              
3968:693 | DONE dir | na 16 16 | 007163 | (2 bytes)   |         .byte 4, { NC }              
3968:693 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3968:694 | DONE dir | na 16 16 | 007165 | (6 bytes)   |         .word nt_dup, xt_drop, 00663a 
3968:694 | DONE dir | na 16 16 |        |             |                 58 71 36 66 3a 66        --  X q 6 f : f
3968:695 | DONE dir | na 16 16 | 00716b | (4 bytes)   |         .byte 64, 72, 6f, 70         
3968:695 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
3968:696 | DONE wsp | na 16 16 |        |             |
3968:697 | DONE cmt | na 16 16 |        |             | ; END
3969:000 | DONE wsp | na 16 16 |        |             |
3970:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3971:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
3972:000 | DONE wsp | na 16 16 |        |             |
3973:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3974:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
3975:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
3976:000 | DONE cmt | na 16 16 |        |             | ; the stack
3977:000 | DONE lbl | na 16 16 | 00716f |             | doconst                              
3978:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3979:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3980:000 | DONE ins | na 16 16 | 00716f | ca          |                 dex                  make room on Data Stack
3981:000 | DONE ins | na 16 16 | 007170 | ca          |                 dex                  
3982:000 | DONE ins | na 16 16 | 007171 | 94 00       |                 sty.dx 00            
3983:000 | DONE wsp | na 16 16 |        |             |
3984:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
3985:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
3986:000 | DONE ins | na 16 16 | 007173 | 68          |                 pla                  get the return address
3987:000 | DONE ins | na 16 16 | 007174 | 85 16       |                 sta.d 000216         
3988:000 | DONE wsp | na 16 16 |        |             |
3989:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
3990:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
3991:000 | DONE ins | na 16 16 | 007176 | a0 01 00    |                 ldy.# 0001           
3992:000 | DONE ins | na 16 16 | 007179 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3993:000 | DONE ins | na 16 16 | 00717b | a8          |                 tay                  
3994:000 | DONE wsp | na 16 16 |        |             |
3995:000 | DONE ins | na 16 16 | 00717c | 60          |                 rts                  takes us to original caller
3996:000 | DONE wsp | na 16 16 |        |             |
3997:000 | DONE wsp | na 16 16 |        |             |
3998:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3999:000 | DONE cmt | na 16 16 |        |             | ; DODOES
4000:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
4001:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
4002:000 | DONE lbl | na 16 16 | 00717d |             | dodoes                               
4003:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
4004:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
4005:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
4006:000 | DONE cmt | na 16 16 |        |             |                 ; works
4007:000 | DONE ins | na 16 16 | 00717d | 68          |                 pla                  
4008:000 | DONE ins | na 16 16 | 00717e | 1a          |                 inc.a                
4009:000 | DONE ins | na 16 16 | 00717f | 85 1a       |                 sta.d 00021a         
4010:000 | DONE wsp | na 16 16 |        |             |
4011:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
4012:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
4013:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
4014:000 | DONE ins | na 16 16 | 007181 | ca          |                 dex                  
4015:000 | DONE ins | na 16 16 | 007182 | ca          |                 dex                  
4016:000 | DONE ins | na 16 16 | 007183 | 94 00       |                 sty.dx 00            
4017:000 | DONE wsp | na 16 16 |        |             |
4018:000 | DONE ins | na 16 16 | 007185 | 7a          |                 ply                  
4019:000 | DONE ins | na 16 16 | 007186 | c8          |                 iny                  
4020:000 | DONE wsp | na 16 16 |        |             |
4021:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
4022:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
4023:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
4024:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
4025:000 | DONE ins | na 16 16 | 007187 | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
4026:000 | DONE wsp | na 16 16 |        |             |
4027:000 | DONE wsp | na 16 16 |        |             |
4028:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4029:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
4030:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
4031:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
4032:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
4033:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
4034:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
4035:000 | DONE lbl | na 16 16 | 00718a |             | dovar                                
4036:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4037:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4038:000 | DONE ins | na 16 16 | 00718a | ca          |                 dex                  make room on Data Stack
4039:000 | DONE ins | na 16 16 | 00718b | ca          |                 dex                  
4040:000 | DONE ins | na 16 16 | 00718c | 94 00       |                 sty.dx 00            
4041:000 | DONE wsp | na 16 16 |        |             |
4042:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
4043:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
4044:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
4045:000 | DONE ins | na 16 16 | 00718e | 7a          |                 ply                  value is now TOS
4046:000 | DONE ins | na 16 16 | 00718f | c8          |                 iny                  add one because of 65816's address handling
4047:000 | DONE wsp | na 16 16 |        |             |
4048:000 | DONE ins | na 16 16 | 007190 | 60          |                 rts                  takes us to original caller
4049:000 | DONE wsp | na 16 16 |        |             |
4050:000 | DONE wsp | na 16 16 |        |             |
4051:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4052:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
4053:000 | DONE wsp | na 16 16 |        |             |
4054:000 | DONE wsp | na 16 16 |        |             |
4055:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4056:000 | DONE cmt | na 16 16 |        |             | ; INTERPRET
4057:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
4058:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
4059:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
4060:000 | DONE lbl | na 16 16 | 007191 |             | interpret                            
4061:000 | DONE lbl | na 16 16 | 007191 |             | interpret_loop                       
4062:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4063:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4064:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
4065:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
4066:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
4067:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
4068:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
4069:000 | DONE ins | na 16 16 | 007191 | 20 59 68    |                 jsr 006859           ( "string" -- addr u )
4070:000 | DONE wsp | na 16 16 |        |             |
4071:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
4072:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
4073:000 | DONE ins | na 16 16 | 007194 | 98          |                 tya                  force flag check
4074:000 | DONE ins | na 16 16 | 007195 | f0 48       |                 beq 0071df           
4075:000 | DONE wsp | na 16 16 |        |             |
4076:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
4077:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
4078:000 | DONE ins | na 16 16 | 007197 | 20 45 72    |                 jsr 007245           
4079:000 | DONE wsp | na 16 16 |        |             |
4080:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
4081:000 | DONE cmt | na 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
4082:000 | DONE cmt | na 16 16 |        |             |                 ; we have to go see if it is a number
4083:000 | DONE ins | na 16 16 | 00719a | 20 5d 63    |                 jsr 00635d           TODO convert this to assembler
4084:000 | DONE ins | na 16 16 | 00719d | 20 a4 66    |                 jsr 0066a4           ( addr u -- nt | 0 )
4085:000 | DONE wsp | na 16 16 |        |             |
4086:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
4087:000 | DONE ins | na 16 16 | 0071a0 | 98          |                 tya                  
4088:000 | DONE ins | na 16 16 | 0071a1 | d0 08       |                 bne 0071ab           
4089:000 | DONE wsp | na 16 16 |        |             |
4090:000 | DONE cmt | na 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
4091:000 | DONE cmt | na 16 16 |        |             |                 ; a number.
4092:000 | DONE ins | na 16 16 | 0071a3 | 20 36 66    |                 jsr 006636           TODO convert this to assembler
4093:000 | DONE wsp | na 16 16 |        |             |
4094:000 | DONE wsp | na 16 16 |        |             |
4095:000 | DONE cmt | na 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
4096:000 | DONE cmt | na 16 16 |        |             |                 ; complaining for us
4097:000 | DONE ins | na 16 16 | 0071a6 | 20 ae 67    |                 jsr 0067ae           ( addr u -- u | d )
4098:000 | DONE wsp | na 16 16 |        |             |
4099:000 | DONE cmt | na 16 16 |        |             |                 ; That was so much fun we should do it again!
4100:000 | DONE ins | na 16 16 | 0071a9 | 80 e6       |                 bra 007191           
4101:000 | DONE wsp | na 16 16 |        |             |
4102:000 | DONE lbl | na 16 16 | 0071ab |             | interpret_got_name_token             
4103:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
4104:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down.
4105:000 | DONE wsp | na 16 16 |        |             |
4106:000 | DONE cmt | na 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
4107:000 | DONE cmt | na 16 16 |        |             |                 ; really fast if Y is TOS
4108:000 | DONE ins | na 16 16 | 0071ab | e8          |                 inx                  
4109:000 | DONE ins | na 16 16 | 0071ac | e8          |                 inx                  
4110:000 | DONE ins | na 16 16 | 0071ad | e8          |                 inx                  
4111:000 | DONE ins | na 16 16 | 0071ae | e8          |                 inx                  
4112:000 | DONE wsp | na 16 16 |        |             |
4113:000 | DONE cmt | na 16 16 |        |             |                 ; This is a quicker
4114:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
4115:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
4116:000 | DONE ins | na 16 16 | 0071af | 84 16       |                 sty.d 000216         
4117:000 | DONE ins | na 16 16 | 0071b1 | c8          |                 iny                  
4118:000 | DONE ins | na 16 16 | 0071b2 | c8          |                 iny                  
4119:000 | DONE ins | na 16 16 | 0071b3 | c8          |                 iny                  
4120:000 | DONE ins | na 16 16 | 0071b4 | c8          |                 iny                  
4121:000 | DONE ins | na 16 16 | 0071b5 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4122:000 | DONE ins | na 16 16 | 0071b8 | a8          |                 tay                  xt is TOS
4123:000 | DONE wsp | na 16 16 |        |             |
4124:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
4125:000 | DONE ins | na 16 16 | 0071b9 | a5 14       |                 lda.d 000214         
4126:000 | DONE ins | na 16 16 | 0071bb | d0 14       |                 bne 0071d1           
4127:000 | DONE wsp | na 16 16 |        |             |
4128:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
4129:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
4130:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
4131:000 | DONE ins | na 16 16 | 0071bd | b2 16       |                 lda.di 000216        
4132:000 | DONE ins | na 16 16 | 0071bf | eb          |                 xba                  flags are MSB
4133:000 | DONE ins | na 16 16 | 0071c0 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
4134:000 | DONE ins | na 16 16 | 0071c3 | f0 06       |                 beq 0071cb           
4135:000 | DONE wsp | na 16 16 |        |             |
4136:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
4137:000 | DONE ins | na 16 16 | 0071c5 | a9 83 77    |                 lda.# 007783         
4138:000 | DONE ins | na 16 16 | 0071c8 | 4c 0c 72    |                 jmp 00720c           
4139:000 | DONE wsp | na 16 16 |        |             |
4140:000 | DONE lbl | na 16 16 | 0071cb |             | interpret_interpret                  
4141:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
4142:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
4143:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
4144:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
4145:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
4146:000 | DONE ins | na 16 16 | 0071cb | 20 99 66    |                 jsr 006699           
4147:000 | DONE wsp | na 16 16 |        |             |
4148:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
4149:000 | DONE ins | na 16 16 | 0071ce | 4c 91 71    |                 jmp 007191           
4150:000 | DONE wsp | na 16 16 |        |             |
4151:000 | DONE lbl | na 16 16 | 0071d1 |             | interpret_compile                    
4152:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
4153:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
4154:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
4155:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
4156:000 | DONE ins | na 16 16 | 0071d1 | b2 16       |                 lda.di 000216        
4157:000 | DONE ins | na 16 16 | 0071d3 | eb          |                 xba                  flags are MSB
4158:000 | DONE ins | na 16 16 | 0071d4 | 29 02 00    |                 and.# IM             Mask all but IM bit
4159:000 | DONE ins | na 16 16 | 0071d7 | d0 f2       |                 bne 0071cb           IMMEDIATE word, execute right now
4160:000 | DONE wsp | na 16 16 |        |             |
4161:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
4162:000 | DONE ins | na 16 16 | 0071d9 | 20 16 65    |                 jsr 006516           
4163:000 | DONE wsp | na 16 16 |        |             |
4164:000 | DONE ins | na 16 16 | 0071dc | 4c 91 71    |                 jmp 007191           
4165:000 | DONE wsp | na 16 16 |        |             |
4166:000 | DONE lbl | na 16 16 | 0071df |             | interpret_line_done                  
4167:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
4168:000 | DONE ins | na 16 16 | 0071df | b4 02       |                 ldy.dx 02            
4169:000 | DONE ins | na 16 16 | 0071e1 | e8          |                 inx                  
4170:000 | DONE ins | na 16 16 | 0071e2 | e8          |                 inx                  
4171:000 | DONE ins | na 16 16 | 0071e3 | e8          |                 inx                  
4172:000 | DONE ins | na 16 16 | 0071e4 | e8          |                 inx                  
4173:000 | DONE wsp | na 16 16 |        |             |
4174:000 | DONE ins | na 16 16 | 0071e5 | 60          |                 rts                  
4175:000 | DONE wsp | na 16 16 |        |             |
4176:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4177:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
4178:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
4179:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
4180:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
4181:000 | DONE cmt | na 16 16 |        |             | ;
4182:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
4183:000 | DONE cmt | na 16 16 |        |             | ;
4184:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
4185:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
4186:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
4187:000 | DONE cmt | na 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
4188:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
4189:000 | DONE wsp | na 16 16 |        |             |
4190:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
4191:000 | DONE lbl | na 16 16 | 0071e6 |             | cmpl_word                            
4192:000 | DONE ins | na 16 16 | 0071e6 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
4193:000 | DONE ins | na 16 16 | 0071e9 | 80 08       |                 bra 0071f3           
4194:000 | DONE lbl | na 16 16 | 0071eb |             | cmpl_subroutine                      
4195:000 | DONE ins | na 16 16 | 0071eb | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
4196:000 | DONE ins | na 16 16 | 0071ee | 80 03       |                 bra 0071f3           
4197:000 | DONE lbl | na 16 16 | 0071f0 |             | cmpl_jump                            
4198:000 | DONE ins | na 16 16 | 0071f0 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
4199:000 | DONE lbl | na 16 16 | 0071f3 |             | cmpl_common                          
4200:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
4201:000 | DONE ins | na 16 16 | 0071f3 | 84 06       |                 sty.d 000206         
4202:000 | DONE wsp | na 16 16 |        |             |
4203:000 | DONE ins | na 16 16 | 0071f5 | a8          |                 tay                  force flag check
4204:000 | DONE ins | na 16 16 | 0071f6 | f0 08       |                 beq 007200           came in through cmpl_word, just compile body
4205:000 | DONE wsp | na 16 16 |        |             |
4206:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
4207:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
4208:000 | DONE ins | na 16 16 | 0071f8 | e2 20       |                 sep 20               
4208:001 | DONE ctl | na  8 16 |        |             |         .!a8
4209:000 | DONE ins | na  8 16 | 0071fa | 92 00       |                 sta.di 000200        STA (CP)
4210:000 | DONE ins | na  8 16 | 0071fc | c2 20       |                 rep 20               
4210:001 | DONE ctl | na 16 16 |        |             |         .!a16
4211:000 | DONE ins | na 16 16 | 0071fe | e6 00       |                 inc.d 000200         fall through to cmpl_body
4212:000 | DONE lbl | na 16 16 | 007200 |             | cmpl_body                            
4213:000 | DONE ins | na 16 16 | 007200 | 7a          |                 ply                  the return address we'll need later
4214:000 | DONE wsp | na 16 16 |        |             |
4215:000 | DONE ins | na 16 16 | 007201 | 68          |                 pla                  next value on stack is the word to compile
4216:000 | DONE ins | na 16 16 | 007202 | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
4217:000 | DONE ins | na 16 16 | 007204 | e6 00       |                 inc.d 000200         
4218:000 | DONE ins | na 16 16 | 007206 | e6 00       |                 inc.d 000200         
4219:000 | DONE wsp | na 16 16 |        |             |
4220:000 | DONE ins | na 16 16 | 007208 | 5a          |                 phy                  make sure we can get back home
4221:000 | DONE wsp | na 16 16 |        |             |
4222:000 | DONE ins | na 16 16 | 007209 | a4 06       |                 ldy.d 000206         restore Data Stack
4223:000 | DONE wsp | na 16 16 |        |             |
4224:000 | DONE ins | na 16 16 | 00720b | 60          |                 rts                  
4225:000 | DONE wsp | na 16 16 |        |             |
4226:000 | DONE wsp | na 16 16 |        |             |
4227:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4228:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
4229:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
4230:000 | DONE lbl | na 16 16 | 00720c |             | error                                
4231:000 | DONE ins | na 16 16 | 00720c | 20 12 72    |                 jsr 007212           
4232:000 | DONE ins | na 16 16 | 00720f | 4c 97 60    |                 jmp 006097           
4233:000 | DONE wsp | na 16 16 |        |             |
4234:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4235:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
4236:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
4237:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
4238:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
4239:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
4240:000 | DONE lbl | na 16 16 | 007212 |             | print_string                         
4241:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4242:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4243:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
4244:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
4245:000 | DONE ins | na 16 16 | 007212 | da          |                 phx                  
4246:000 | DONE ins | na 16 16 | 007213 | aa          |                 tax                  x16 contains address of string
4247:000 | DONE lbl | na 16 16 | 007214 |             | @                                    
4248:000 | DONE ins | na 16 16 | 007214 | e2 20       |                 sep 20               
4248:001 | DONE ctl | na  8 16 |        |             |         .!a8
4249:000 | DONE ins | na  8 16 | 007216 | bd 00 00    |                 lda.x 0000           LDA $0000,X
4250:000 | DONE ins | na  8 16 | 007219 | f0 06       |                 beq 007221           
4251:000 | DONE ins | na  8 16 | 00721b | 20 36 60    |                 jsr 006036           
4252:000 | DONE ins | na  8 16 | 00721e | e8          |                 inx                  
4253:000 | DONE ins | na  8 16 | 00721f | 80 f3       |                 bra 007214           
4254:000 | DONE wsp | na  8 16 |        |             |
4255:000 | DONE lbl | na  8 16 | 007221 |             | print_string_done                    
4256:000 | DONE ins | na  8 16 | 007221 | a9 0a       |                 lda.# AscLF          should be CR on some systems
4257:000 | DONE ins | na  8 16 | 007223 | 20 36 60    |                 jsr 006036           
4258:000 | DONE ins | na  8 16 | 007226 | c2 20       |                 rep 20               
4258:001 | DONE ctl | na 16 16 |        |             |         .!a16
4259:000 | DONE ins | na 16 16 | 007228 | fa          |                 plx                  
4260:000 | DONE ins | na 16 16 | 007229 | 60          |                 rts                  
4261:000 | DONE wsp | na 16 16 |        |             |
4262:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4263:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
4264:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
4265:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
4266:000 | DONE lbl | na 16 16 | 00722a |             | byte_to_ascii                        
4267:000 | DONE ins | na 16 16 | 00722a | 48          |                 pha                  
4268:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
4269:000 | DONE ins | na 16 16 | 00722b | 4a          |                 lsr.a                
4270:000 | DONE ins | na 16 16 | 00722c | 4a          |                 lsr.a                
4271:000 | DONE ins | na 16 16 | 00722d | 4a          |                 lsr.a                
4272:000 | DONE ins | na 16 16 | 00722e | 4a          |                 lsr.a                
4273:000 | DONE ins | na 16 16 | 00722f | 20 33 72    |                 jsr 007233           
4274:000 | DONE wsp | na 16 16 |        |             |
4275:000 | DONE ins | na 16 16 | 007232 | 68          |                 pla                  
4276:000 | DONE wsp | na 16 16 |        |             |
4277:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
4278:000 | DONE wsp | na 16 16 |        |             |
4279:000 | DONE wsp | na 16 16 |        |             |
4280:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4281:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
4282:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
4283:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
4284:000 | DONE lbl | na 16 16 | 007233 |             | nibble_to_ascii                      
4285:000 | DONE ins | na 16 16 | 007233 | 29 0f 00    |                 and.# 000f           
4286:000 | DONE ins | na 16 16 | 007236 | 09 30 00    |                 ora.# 30             
4287:000 | DONE ins | na 16 16 | 007239 | c9 3a 00    |                 cmp.# 003a           '9' + 1
4288:000 | DONE ins | na 16 16 | 00723c | 90 03       |                 bcc 007241           
4289:000 | DONE ins | na 16 16 | 00723e | 69 06 00    |                 adc.# 0006           
4290:000 | DONE lbl | na 16 16 | 007241 |             | @                                    
4291:000 | DONE ins | na 16 16 | 007241 | 20 36 60    |                 jsr 006036           
4292:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4293:000 | DONE ins | na 16 16 | 007244 | 60          |                 rts                  
4294:000 | DONE wsp | na 16 16 |        |             |
4295:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4296:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
4297:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
4298:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
4299:000 | DONE lbl | na 16 16 | 007245 |             | string_to_lowercase                  
4300:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
4301:000 | DONE ins | na 16 16 | 007245 | 60          |                 rts                  
4302:000 | DONE wsp | na 16 16 |        |             |
4303:000 | DONE wsp | na 16 16 |        |             |
4304:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4305:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
4306:000 | DONE wsp | na 16 16 |        |             |
4307:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
4308:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
4309:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
4310:000 | DONE lbl | na 16 16 | 007246 |             | hi-start                             
4311:000 | DONE cmt | na 16 16 |        |             |         ; High level definitions
4312:000 | DONE dir | na 16 16 | 007246 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) ( "parens"
4312:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
4312:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
4312:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
4312:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
4312:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
4313:000 | DONE dir | na 16 16 | 00726b | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) .( "dotparens"
4313:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
4313:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
4313:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
4313:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
4313:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
4314:000 | DONE dir | na 16 16 | 007290 | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) IF
4314:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
4314:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
4314:000 | DONE dir | na 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
4314:000 | DONE dir | na 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
4314:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
4314:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
4314:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
4314:000 | DONE dir | na 16 16 |        |             |                                          -- 
4315:000 | DONE dir | na 16 16 | 0072c8 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) THEN
4315:000 | DONE dir | na 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
4315:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
4315:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
4315:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4315:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4315:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4316:000 | DONE dir | na 16 16 | 0072f4 | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) ELSE
4316:000 | DONE dir | na 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
4316:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
4316:000 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
4316:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
4316:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
4316:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
4316:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4316:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4316:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4317:000 | DONE dir | na 16 16 | 007338 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) REPEAT
4317:000 | DONE dir | na 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
4317:000 | DONE dir | na 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
4317:000 | DONE dir | na 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
4317:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
4317:000 | DONE dir | na 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
4317:000 | DONE dir | na 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
4317:000 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
4317:000 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
4318:000 | DONE dir | na 16 16 | 007375 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) UNTIL
4318:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
4318:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4318:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
4318:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
4318:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4318:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4318:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4319:000 | DONE dir | na 16 16 | 0073a9 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) WHILE
4319:000 | DONE dir | na 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
4319:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4319:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
4319:000 | DONE dir | na 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
4319:000 | DONE dir | na 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
4319:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
4319:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
4319:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
4319:000 | DONE dir | na 16 16 |        |             |                                          -- 
4320:000 | DONE wsp | na 16 16 |        |             |
4321:000 | DONE cmt | na 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
4322:000 | DONE cmt | na 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
4323:000 | DONE cmt | na 16 16 |        |             |         ; stuff anyway. Definitions for SM/REM and FM/MOD taken von Gforth
4324:000 | DONE cmt | na 16 16 |        |             |         ; sources, see
4325:000 | DONE cmt | na 16 16 |        |             |         ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4326:000 | DONE dir | na 16 16 | 0073e9 | (59 bytes)  |         .byte 3a, 20, 73, 6d, 2f, 72, 65, 6d, 20, 6f, 76, 65, 72, (...) 
4326:000 | DONE dir | na 16 16 |        |             |                 3a 20 73 6d 2f 72 65 6d  --  :   s m / r e m
4326:000 | DONE dir | na 16 16 |        |             |                 20 6f 76 65 72 20 3e 72  --    o v e r   > r
4326:000 | DONE dir | na 16 16 |        |             |                 20 64 75 70 20 3e 72 20  --    d u p   > r  
4326:000 | DONE dir | na 16 16 |        |             |                 61 62 73 20 2d 72 6f 74  --  a b s   - r o t
4326:000 | DONE dir | na 16 16 |        |             |                 20 64 61 62 73 20 72 6f  --    d a b s   r o
4326:000 | DONE dir | na 16 16 |        |             |                 74 20 75 6d 2f 6d 6f 64  --  t   u m / m o d
4326:000 | DONE dir | na 16 16 |        |             |                 20 72 3e 20 72 40 20 78  --    r >   r @   x
4326:000 | DONE dir | na 16 16 |        |             |                 6f 72 20                 --  o r  
4327:000 | DONE dir | na 16 16 | 007424 | (51 bytes)  |         .byte 30, 3c, 20, 69, 66, 20, 6e, 65, 67, 61, 74, 65, 20, (...) 
4327:000 | DONE dir | na 16 16 |        |             |                 30 3c 20 69 66 20 6e 65  --  0 <   i f   n e
4327:000 | DONE dir | na 16 16 |        |             |                 67 61 74 65 20 74 68 65  --  g a t e   t h e
4327:000 | DONE dir | na 16 16 |        |             |                 6e 20 72 3e 20 30 3c 20  --  n   r >   0 <  
4327:000 | DONE dir | na 16 16 |        |             |                 69 66 20 73 77 61 70 20  --  i f   s w a p  
4327:000 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65 20 73  --  n e g a t e   s
4327:000 | DONE dir | na 16 16 |        |             |                 77 61 70 20 74 68 65 6e  --  w a p   t h e n
4327:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
4328:000 | DONE dir | na 16 16 | 007457 | (57 bytes)  |         .byte 3a, 20, 66, 6d, 2f, 6d, 6f, 64, 20, 64, 75, 70, 20, (...) 
4328:000 | DONE dir | na 16 16 |        |             |                 3a 20 66 6d 2f 6d 6f 64  --  :   f m / m o d
4328:000 | DONE dir | na 16 16 |        |             |                 20 64 75 70 20 3e 72 20  --    d u p   > r  
4328:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 30 3c 20 69  --  d u p   0 <   i
4328:000 | DONE dir | na 16 16 |        |             |                 66 20 6e 65 67 61 74 65  --  f   n e g a t e
4328:000 | DONE dir | na 16 16 |        |             |                 20 3e 72 20 64 6e 65 67  --    > r   d n e g
4328:000 | DONE dir | na 16 16 |        |             |                 61 74 65 20 72 3e 20 74  --  a t e   r >   t
4328:000 | DONE dir | na 16 16 |        |             |                 68 65 6e 20 6f 76 65 72  --  h e n   o v e r
4328:000 | DONE dir | na 16 16 |        |             |                 20                       --   
4329:000 | DONE dir | na 16 16 | 007490 | (63 bytes)  |         .byte 30, 3c, 20, 69, 66, 20, 74, 75, 63, 6b, 20, 2b, 20, (...) 
4329:000 | DONE dir | na 16 16 |        |             |                 30 3c 20 69 66 20 74 75  --  0 <   i f   t u
4329:000 | DONE dir | na 16 16 |        |             |                 63 6b 20 2b 20 73 77 61  --  c k   +   s w a
4329:000 | DONE dir | na 16 16 |        |             |                 70 20 74 68 65 6e 20 75  --  p   t h e n   u
4329:000 | DONE dir | na 16 16 |        |             |                 6d 2f 6d 6f 64 20 72 3e  --  m / m o d   r >
4329:000 | DONE dir | na 16 16 |        |             |                 20 30 3c 20 69 66 20 73  --    0 <   i f   s
4329:000 | DONE dir | na 16 16 |        |             |                 77 61 70 20 6e 65 67 61  --  w a p   n e g a
4329:000 | DONE dir | na 16 16 |        |             |                 74 65 20 73 77 61 70 20  --  t e   s w a p  
4329:000 | DONE dir | na 16 16 |        |             |                 74 68 65 6e 20 3b 20     --  t h e n   ;  
4330:000 | DONE dir | na 16 16 | 0074cf | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
4330:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
4330:000 | DONE dir | na 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
4330:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
4330:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
4330:000 | DONE dir | na 16 16 |        |             |                 20                       --   
4331:000 | DONE dir | na 16 16 | 0074f0 | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
4331:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
4331:000 | DONE dir | na 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
4331:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
4331:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
4332:000 | DONE dir | na 16 16 | 00750a | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
4332:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
4332:000 | DONE dir | na 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
4332:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
4332:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
4332:000 | DONE dir | na 16 16 |        |             |                 20                       --   
4333:000 | DONE dir | na 16 16 | 00752b | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
4333:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
4333:000 | DONE dir | na 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
4333:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
4333:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
4334:000 | DONE wsp | na 16 16 |        |             |
4335:000 | DONE cmt | na 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
4336:000 | DONE cmt | na 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
4337:000 | DONE cmt | na 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
4338:000 | DONE dir | na 16 16 | 007545 | (29 bytes)  |         .byte 3a, 20, 75, 2e, 20, 30, 20, 3c, 23, 20, 23, 73, 20, (...) 
4338:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 20 30 20 3c  --  :   u .   0   <
4338:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 23 3e 20  --  #   # s   # >  
4338:000 | DONE dir | na 16 16 |        |             |                 74 79 70 65 20 73 70 61  --  t y p e   s p a
4338:000 | DONE dir | na 16 16 |        |             |                 63 65 20 3b 20           --  c e   ;  
4339:000 | DONE dir | na 16 16 | 007562 | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
4339:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
4339:000 | DONE dir | na 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
4339:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
4339:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
4339:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
4339:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4340:000 | DONE dir | na 16 16 | 00758e | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
4340:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
4340:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
4340:000 | DONE dir | na 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
4340:000 | DONE dir | na 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
4340:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
4340:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
4340:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
4340:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4341:000 | DONE dir | na 16 16 | 0075ca | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
4341:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
4341:000 | DONE dir | na 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
4341:000 | DONE dir | na 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
4341:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4342:000 | DONE dir | na 16 16 | 0075e6 | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
4342:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
4342:000 | DONE dir | na 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
4342:000 | DONE dir | na 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
4342:000 | DONE dir | na 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
4342:000 | DONE dir | na 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
4342:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
4343:000 | DONE dir | na 16 16 | 007611 | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
4343:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
4343:000 | DONE dir | na 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
4343:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
4343:000 | DONE dir | na 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
4343:000 | DONE dir | na 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
4343:000 | DONE dir | na 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
4344:000 | DONE dir | na 16 16 | 00763f | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
4344:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
4344:000 | DONE dir | na 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
4344:000 | DONE dir | na 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
4344:000 | DONE dir | na 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
4344:000 | DONE dir | na 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
4344:000 | DONE dir | na 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
4344:000 | DONE dir | na 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
4344:000 | DONE dir | na 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
4345:000 | DONE cmt | na 16 16 |        |             | ;       .byte ": . dup abs 0 <# #s rot sign #> type space ; "
4346:000 | DONE wsp | na 16 16 |        |             |
4347:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
4348:000 | DONE cmt | na 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
4349:000 | DONE cmt | na 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
4350:000 | DONE dir | na 16 16 | 00767c | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
4350:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
4350:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
4350:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
4350:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
4350:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
4351:000 | DONE dir | na 16 16 | 00769f | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
4351:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
4351:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
4351:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
4351:000 | DONE dir | na 16 16 |        |             |                 32 31 2e 20 46 65 62 20  --  2 1 .   F e b  
4351:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
4352:000 | DONE dir | na 16 16 | 0076c4 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
4352:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
4352:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
4352:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
4352:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
4352:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
4352:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
4352:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
4353:000 | DONE dir | na 16 16 | 0076f7 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
4353:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
4353:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
4353:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
4353:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
4353:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
4353:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
4353:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
4354:000 | DONE dir | na 16 16 | 00772b | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
4354:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
4354:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
4354:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
4354:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
4355:000 | DONE lbl | na 16 16 | 007747 |             | hi-end                               
4356:000 | DONE wsp | na 16 16 |        |             |
4357:000 | DONE wsp | na 16 16 |        |             |
4358:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4359:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
4360:000 | DONE wsp | na 16 16 |        |             |
4361:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
4361:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
4361:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
4361:003 | DONE cmt | na 16 16 |        |             | ; This version:  21. Feb 2017
4361:004 | DONE wsp | na 16 16 |        |             |
4361:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
4361:006 | DONE wsp | na 16 16 |        |             |
4361:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4361:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
4361:009 | DONE wsp | na 16 16 |        |             |
4361:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
4361:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
4361:012 | DONE cmt | na 16 16 |        |             | ; character
4361:013 | DONE wsp | na 16 16 |        |             |
4361:014 | DONE lbl | na 16 16 | 007747 |             | s_ok                                 
4361:015 | DONE dir | na 16 16 | 007747 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
4361:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
4361:016 | DONE lbl | na 16 16 | 00774b |             | s_compiled                           
4361:017 | DONE dir | na 16 16 | 00774b | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
4361:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
4361:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
4361:018 | DONE wsp | na 16 16 |        |             |
4361:019 | DONE wsp | na 16 16 |        |             |
4361:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4361:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
4361:022 | DONE wsp | na 16 16 |        |             |
4361:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
4361:024 | DONE wsp | na 16 16 |        |             |
4361:025 | DONE lbl | na 16 16 | 007755 |             | es_allot                             
4361:026 | DONE dir | na 16 16 | 007755 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
4361:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
4361:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
4361:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
4361:027 | DONE lbl | na 16 16 | 007769 |             | es_channel                           
4361:028 | DONE dir | na 16 16 | 007769 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
4361:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
4361:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
4361:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
4361:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
4361:029 | DONE lbl | na 16 16 | 007783 |             | es_componly                          
4361:030 | DONE dir | na 16 16 | 007783 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
4361:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
4361:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
4361:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4361:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
4361:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
4361:031 | DONE lbl | na 16 16 | 0077a4 |             | es_defer                             
4361:032 | DONE dir | na 16 16 | 0077a4 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
4361:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
4361:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
4361:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
4361:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
4361:033 | DONE lbl | na 16 16 | 0077c1 |             | es_divzero                           
4361:034 | DONE dir | na 16 16 | 0077c1 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
4361:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
4361:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
4361:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
4361:035 | DONE lbl | na 16 16 | 0077d2 |             | es_error                             
4361:036 | DONE dir | na 16 16 | 0077d2 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
4361:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
4361:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
4361:037 | DONE lbl | na 16 16 | 0077de |             | es_intonly                           
4361:038 | DONE dir | na 16 16 | 0077de | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
4361:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
4361:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
4361:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
4361:039 | DONE lbl | na 16 16 | 0077f4 |             | es_noname                            
4361:040 | DONE dir | na 16 16 | 0077f4 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
4361:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
4361:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
4361:040 | DONE dir | na 16 16 |        |             |                                          -- 
4361:041 | DONE lbl | na 16 16 | 007804 |             | es_radix                             
4361:042 | DONE dir | na 16 16 | 007804 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
4361:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
4361:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
4361:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
4361:043 | DONE lbl | na 16 16 | 00781b |             | es_refill1                           
4361:044 | DONE dir | na 16 16 | 00781b | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
4361:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
4361:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
4361:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
4361:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
4361:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
4361:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
4361:045 | DONE lbl | na 16 16 | 007849 |             | es_refill2                           
4361:046 | DONE dir | na 16 16 | 007849 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
4361:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
4361:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
4361:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
4361:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
4361:046 | DONE dir | na 16 16 |        |             |                                          -- 
4361:047 | DONE lbl | na 16 16 | 007869 |             | es_state                             
4361:048 | DONE dir | na 16 16 | 007869 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
4361:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
4361:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
4361:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
4361:048 | DONE dir | na 16 16 |        |             |                                          -- 
4361:049 | DONE lbl | na 16 16 | 007881 |             | es_underflow                         
4361:050 | DONE dir | na 16 16 | 007881 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
4361:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
4361:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
4361:050 | DONE dir | na 16 16 |        |             |                                          -- 
4361:051 | DONE lbl | na 16 16 | 007891 |             | es_syntax                            
4361:052 | DONE dir | na 16 16 | 007891 | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
4361:052 | DONE dir | na 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
4361:052 | DONE dir | na 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
4361:053 | DONE wsp | na 16 16 |        |             |
4361:054 | DONE wsp | na 16 16 |        |             |
4361:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4361:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
4361:057 | DONE wsp | na 16 16 |        |             |
4361:058 | DONE lbl | na 16 16 | 0078a0 |             | vt100_page                           
4361:059 | DONE dir | na 16 16 | 0078a0 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
4361:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
4361:060 | DONE lbl | na 16 16 | 0078a5 |             | vt100_home                           
4361:061 | DONE dir | na 16 16 | 0078a5 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
4361:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
4361:062 | DONE wsp | na 16 16 |        |             |
4361:063 | DONE wsp | na 16 16 |        |             |
4361:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4361:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
4361:066 | DONE wsp | na 16 16 |        |             |
4361:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
4361:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
4361:069 | DONE wsp | na 16 16 |        |             |
4361:070 | DONE lbl | na 16 16 | 0078a9 |             | tests_prev_cmd                       
4361:071 | DONE dir | na 16 16 | 0078a9 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
4361:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
4361:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
4361:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
4361:072 | DONE lbl | na 16 16 | 0078bc |             | tests_next_cmd                       
4361:073 | DONE dir | na 16 16 | 0078bc | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
4361:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
4361:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
4361:074 | DONE wsp | na 16 16 |        |             |
4361:075 | DONE wsp | na 16 16 |        |             |
4361:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4361:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
4361:078 | DONE wsp | na 16 16 |        |             |
4361:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
4361:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
4361:081 | DONE wsp | na 16 16 |        |             |
4361:082 | DONE lbl | na 16 16 | 0078cb |             | alphastring                          
4361:083 | DONE dir | na 16 16 | 0078cb | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
4361:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
4361:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
4361:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
4361:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
4361:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
4362:000 | DONE wsp | na 16 16 |        |             |
4363:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4364:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
4365:000 | DONE wsp | na 16 16 |        |             |
4366:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
4367:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
4368:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
4369:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
4370:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
4371:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
4372:000 | DONE wsp | na 16 16 |        |             |
4373:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
4374:000 | DONE cmt | na 16 16 |        |             |                 ; tya
4375:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
4376:000 | DONE cmt | na 16 16 |        |             |                 ; xba
4377:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
4378:000 | DONE cmt | na 16 16 |        |             |                 ; tya
4379:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
4380:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
4381:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
4382:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
4383:000 | DONE wsp | na 16 16 |        |             |
4384:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
4385:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
4386:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
4387:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
4388:000 | DONE wsp | na 16 16 |        |             |
4389:000 | DONE wsp | na 16 16 |        |             |
4390:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4391:000 | DONE cmt | na 16 16 |        |             | ; END
4392:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 0063f3
- accept_eol                  : 0063eb
- accept_loop                 : 0063a0
- accept_nonzero              : 006393
- allot_done                  : 006449
- allot_error                 : 006438
- allot_minus                 : 00643e
- allot_real_gone             : 00644b
- alphastring                 : 0078cb
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- branch_rt                   : 00647c
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 00722a
- char_got_char               : 0064c5
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 007200
- cmpl_common                 : 0071f3
- cmpl_jump                   : 0071f0
- cmpl_subroutine             : 0071eb
- cmpl_word                   : 0071e6
- cn_case_done                : 0064ee
- cn_checkbase                : 0064f1
- cn_notdigit                 : 0064f8
- cn_success                  : 006503
- co                          : 000004
- compile_as_code             : 006516
- compile_as_jump             : 006516
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006564
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 00716f
- dodoes                      : 00717d
- does_rt                     : 006620
- dots_done                   : 00620f
- dots_loop                   : 0061f5
- dots_not_empty              : 0061ef
- dovar                       : 00718a
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 006643
- dump_done                   : 006658
- dump_line_loop              : 00663d
- equal_not                   : 0062e5
- error                       : 00720c
- es_allot                    : 007755
- es_channel                  : 007769
- es_componly                 : 007783
- es_defer                    : 0077a4
- es_divzero                  : 0077c1
- es_error                    : 0077d2
- es_intonly                  : 0077de
- es_noname                   : 0077f4
- es_radix                    : 007804
- es_refill1                  : 00781b
- es_refill2                  : 007849
- es_state                    : 007869
- es_syntax                   : 007891
- es_underflow                : 007881
- execute_ip                  : 006696
- find-name_all_chars         : 0066d2
- find-name_char_nomatcnt_8   : 0066ce
- find-name_chars             : 0066c3
- find-name_done              : 0066f8
- find-name_failure_16        : 0066f5
- find-name_loop              : 0066ae
- find-name_next_entry        : 0066b7
- find-name_success           : 0066ef
- get_chr                     : 006047
- get_chr_wait                : 00604c
- gtnumber_done               : 006175
- gtnumber_loop               : 006131
- gtnumber_ok                 : 006140
- hashs_loop                  : 006284
- have_chr?                   : 006056
- hi-end                      : 007747
- hi-start                    : 007246
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- interpret                   : 007191
- interpret_compile           : 0071d1
- interpret_got_name_token    : 0071ab
- interpret_interpret         : 0071cb
- interpret_line_done         : 0071df
- interpret_loop              : 007191
- literal_rt                  : 006737
- max_drop                    : 006772
- max_nip                     : 006774
- max_no_ov                   : 006770
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 006785
- min_nip                     : 006787
- min_no_ov                   : 006783
- mstar_abs_nos               : 006750
- mstar_umstar                : 00675a
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 007233
- not-equal_equal             : 0060fc
- nt_2drop                    : 0070f0
- nt_2dup                     : 006e7d
- nt_abort                    : 006c56
- nt_abs                      : 006e89
- nt_accept                   : 007090
- nt_again                    : 006e06
- nt_allot                    : 006e42
- nt_and                      : 006f43
- nt_backslash                : 00709e
- nt_base                     : 006d2d
- nt_begin                    : 006e13
- nt_bell                     : 006b94
- nt_bl                       : 006cde
- nt_bracketchar              : 006d85
- nt_brackettick              : 006d7a
- nt_branch                   : 006df8
- nt_bye                      : 006b64
- nt_c-comma                  : 006f58
- nt_c-fetch                  : 006f62
- nt_c-store                  : 006f6c
- nt_cells                    : 006d49
- nt_char                     : 006f22
- nt_char-num                 : 00711b
- nt_cold                     : 006b6f
- nt_colon                    : 006e39
- nt_comma                    : 007087
- nt_compile-only             : 006da2
- nt_compilecomma             : 006e20
- nt_constant                 : 006ec7
- nt_count                    : 006c49
- nt_cr                       : 006c95
- nt_create                   : 006e5c
- nt_dabs                     : 006bd4
- nt_decimal                  : 006ba0
- nt_depth                    : 006eba
- nt_dnegate                  : 006be0
- nt_does                     : 006e4f
- nt_dot                      : 006d19
- nt_dotquote                 : 006d56
- nt_dots                     : 006d03
- nt_dplus                    : 006c05
- nt_drop                     : 007163
- nt_dtos                     : 006bef
- nt_dump                     : 006b88
- nt_dup                      : 007158
- nt_equal                    : 006feb
- nt_evaluate                 : 006d39
- nt_execute                  : 0070d5
- nt_false                    : 006ff4
- nt_fetch                    : 00713a
- nt_find-name                : 007045
- nt_fromr                    : 007107
- nt_greater                  : 006fc5
- nt_gtnumber                 : 00700d
- nt_hash                     : 006ccb
- nt_hashs                    : 006cb5
- nt_here                     : 0070e4
- nt_hex                      : 006baf
- nt_hold                     : 006ca9
- nt_immediate                : 006db6
- nt_invert                   : 006f14
- nt_leftbracket              : 006de0
- nt_less                     : 006fce
- nt_lessnumber               : 006cd4
- nt_literal                  : 006d93
- nt_max                      : 006efb
- nt_min                      : 006ef0
- nt_minus                    : 006f80
- nt_mrot                     : 0070be
- nt_mstar                    : 006c34
- nt_name-int                 : 006c85
- nt_name-string              : 006e6a
- nt_negate                   : 006f06
- nt_nip                      : 0070b3
- nt_not-equal                : 006fe1
- nt_number                   : 00701c
- nt_numbermore               : 006c9f
- nt_one                      : 007033
- nt_one-minus                : 006f92
- nt_one-plus                 : 006f9c
- nt_or                       : 006f39
- nt_over                     : 00712e
- nt_pad                      : 006d22
- nt_page                     : 006bc8
- nt_parse                    : 006c63
- nt_parse-name               : 007064
- nt_plus                     : 006f89
- nt_plusstore                : 006f4e
- nt_postpone                 : 006dc7
- nt_question                 : 006c7c
- nt_quit                     : 006c70
- nt_refill                   : 007056
- nt_rfetch                   : 0070fd
- nt_rightbracket             : 006dd7
- nt_rot                      : 0070ca
- nt_semicolon                : 006e30
- nt_sign                     : 006cbf
- nt_sliteral                 : 006d6a
- nt_source                   : 006eac
- nt_source-id                : 007076
- nt_space                    : 006cf6
- nt_spaces                   : 006ce8
- nt_squote                   : 006d60
- nt_star                     : 006c2b
- nt_state                    : 006e94
- nt_stod                     : 006bfa
- nt_store                    : 007143
- nt_swap                     : 00714c
- nt_tick                     : 006ee7
- nt_to-in                    : 006ea1
- nt_tor                      : 007111
- nt_true                     : 007001
- nt_tuck                     : 0070a7
- nt_two                      : 00702a
- nt_two-star                 : 006f76
- nt_type                     : 006d0d
- nt_udmod                    : 006c0f
- nt_ummod                    : 006c1d
- nt_umstar                   : 006c3e
- nt_unused                   : 006bba
- nt_variable                 : 006ed7
- nt_words                    : 006b7b
- nt_xor                      : 006f2e
- nt_zbranch                  : 006de9
- nt_zero                     : 00703c
- nt_zero-equal               : 006fd7
- nt_zero-less                : 006fbb
- nt_zero-more                : 006fb1
- nt_zero-notequal            : 006fa6
- number_dot                  : 0067c6
- number_loop                 : 0067ed
- number_main                 : 0067df
- number_ok                   : 0067f9
- number_single               : 006821
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 00686b
- parse-name_found            : 00687f
- parse-name_loop             : 00685e
- parse_found_delimiter       : 0068ab
- parse_loop                  : 00689e
- parse_reached_eol           : 0068af
- physicalram                 : 007fff
- piblen                      : 000210
- pp_got_nt                   : 0068e4
- pp_got_word                 : 0068d9
- pp_not_immediate            : 0068f4
- print_string                : 007212
- print_string_done           : 007221
- put_chr                     : 006036
- put_chr_wait                : 00603c
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 006940
- refill_src_not_kbd          : 006937
- reset_hardware              : 006000
- s_compiled                  : 00774b
- s_ok                        : 007747
- scratch                     : 000220
- sign_plus                   : 00697b
- sl_loop                     : 0069a0
- sliteral_rt                 : 0069cb
- spaces_done                 : 006a04
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- stod_pos                    : 00696e
- string_to_lowercase         : 007245
- tests_next_cmd              : 0078bc
- tests_prev_cmd              : 0078a9
- tick_have_nt                : 006380
- tick_have_word              : 006374
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- tohold                      : 000228
- toin                        : 000212
- type_done                   : 006a4a
- type_loop                   : 006a3e
- ummod_complete              : 006b13
- ummod_notzero               : 006ad4
- ummod_overflow              : 006b0a
- ummod_shift                 : 006aec
- umstar_counter              : 006aa3
- umstar_loop                 : 006a95
- umstar_one_nos              : 006ab6
- umstar_one_tos              : 006ab3
- umstar_two_common           : 006ac2
- umstar_two_nos              : 006ac1
- umstar_two_tos              : 006abd
- umstar_zero                 : 006aac
- vt100_home                  : 0078a5
- vt100_page                  : 0078a0
- words_loop                  : 006b3f
- workword                    : 00021e
- xt_2drop                    : 006356
- xt_2dup                     : 00635d
- xt_abort                    : 006097
- xt_abs                      : 006384
- xt_accept                   : 00638d
- xt_again                    : 006411
- xt_allot                    : 006427
- xt_and                      : 006450
- xt_backslash                : 0062bb
- xt_base                     : 006457
- xt_begin                    : 006466
- xt_bell                     : 00645f
- xt_bl                       : 00646d
- xt_bracketchar              : 0062b4
- xt_brackettick              : 0062a5
- xt_branch                   : 006475
- xt_bye                      : 00648b
- xt_c-comma                  : 00648f
- xt_c-fetch                  : 00649d
- xt_c-store                  : 0064a9
- xt_char                     : 0064b9
- xt_char-num                 : 0064d1
- xt_cold                     : 006063
- xt_colon                    : 00621f
- xt_comma                    : 006213
- xt_compile-only             : 00650d
- xt_compilecomma             : 006516
- xt_constant                 : 006529
- xt_count                    : 006543
- xt_cr                       : 006552
- xt_create                   : 006559
- xt_dabs                     : 0065e3
- xt_decimal                  : 0065ea
- xt_depth                    : 0065f0
- xt_dnegate                  : 0065ff
- xt_does                     : 006613
- xt_dot                      : 00618a
- xt_dotparen                 : 0061a9
- xt_dotquote                 : 0061b7
- xt_dots                     : 0061cb
- xt_dplus                    : 0065cc
- xt_drop                     : 006636
- xt_dtos                     : 0065de
- xt_dump                     : 00663b
- xt_dup                      : 006662
- xt_equal                    : 0062dc
- xt_evaluate                 : 006667
- xt_execute                  : 006699
- xt_fetch                    : 0062a0
- xt_find-name                : 0066a4
- xt_fromr                    : 00690c
- xt_greater                  : 006109
- xt_greater_nip              : 00611a
- xt_greater_no_ov            : 006117
- xt_gtnumber                 : 006125
- xt_hash                     : 00625a
- xt_hashs                    : 006284
- xt_here                     : 00670a
- xt_hex                      : 006711
- xt_hold                     : 006717
- xt_immediate                : 0066fb
- xt_invert                   : 006704
- xt_leftbracket              : 0062ab
- xt_less                     : 0060df
- xt_less_nip                 : 0060f0
- xt_less_no_ov               : 0060ed
- xt_lessnumber               : 0060ff
- xt_literal                  : 006725
- xt_max                      : 006764
- xt_min                      : 006777
- xt_minus                    : 0062c8
- xt_mrot                     : 0062d3
- xt_mstar                    : 006744
- xt_name-int                 : 00678a
- xt_name-string              : 006793
- xt_negate                   : 0067a4
- xt_nip                      : 0067ab
- xt_not-equal                : 0060f3
- xt_number                   : 0067ae
- xt_numbermore               : 006275
- xt_one                      : 00633e
- xt_one-minus                : 006346
- xt_one-plus                 : 006348
- xt_or                       : 006832
- xt_over                     : 006839
- xt_pad                      : 006840
- xt_page                     : 00684c
- xt_parse                    : 00688b
- xt_parse-name               : 006859
- xt_plus                     : 0062c0
- xt_plusstore                : 0068be
- xt_postpone                 : 0068ce
- xt_question                 : 00628d
- xt_quit                     : 00609f
- xt_refill                   : 006914
- xt_rfetch                   : 006903
- xt_rightbracket             : 0062ae
- xt_rot                      : 006947
- xt_semicolon                : 006241
- xt_sign                     : 006972
- xt_sliteral                 : 006980
- xt_source                   : 0069e1
- xt_source-id                : 0069ee
- xt_space                    : 0069f5
- xt_spaces                   : 0069fc
- xt_squote                   : 006950
- xt_star                     : 006a09
- xt_state                    : 006a11
- xt_stod                     : 006962
- xt_store                    : 006294
- xt_swap                     : 006a19
- xt_tick                     : 006368
- xt_to-in                    : 00611d
- xt_tor                      : 006182
- xt_true                     : 006a1f
- xt_tuck                     : 006a27
- xt_two                      : 00634a
- xt_two-star                 : 006352
- xt_type                     : 006a30
- xt_udmod                    : 006a51
- xt_ummod                    : 006acb
- xt_umstar                   : 006a6c
- xt_unused                   : 006b1c
- xt_variable                 : 006b28
- xt_words                    : 006b35
- xt_xor                      : 006b5d
- xt_zbranch                  : 00631f
- xt_zero                     : 0062e8
- xt_zero-equal               : 0062f0
- xt_zero-less                : 0062fc
- xt_zero-more                : 006314
- xt_zero-notequal            : 006308
- z_2drop                     : 00635c
- z_2dup                      : 006367
- z_abort                     : 0060de
- z_abs                       : 00638c
- z_accept                    : 006410
- z_again                     : 006426
- z_allot                     : 00644f
- z_and                       : 006456
- z_backslash                 : 0062bf
- z_base                      : 00645e
- z_begin                     : 00646c
- z_bell                      : 006465
- z_bl                        : 006474
- z_bracketchar               : 0062ba
- z_brackettick               : 0062ab
- z_branch                    : 00647b
- z_bye                       : 00648e
- z_c-comma                   : 00649c
- z_c-fetch                   : 0064a8
- z_c-store                   : 0064b8
- z_char                      : 0064d0
- z_char-num                  : 00650c
- z_cold                      : 0060de
- z_colon                     : 006240
- z_comma                     : 00621e
- z_compile-only              : 006515
- z_compilecomma              : 006528
- z_constant                  : 006542
- z_count                     : 006551
- z_cr                        : 006558
- z_create                    : 0065cb
- z_dabs                      : 0065e9
- z_decimal                   : 0065ef
- z_depth                     : 0065fe
- z_dnegate                   : 006612
- z_does                      : 00661f
- z_dot                       : 0061a8
- z_dotparen                  : 0061b6
- z_dotquote                  : 0061cb
- z_dots                      : 006212
- z_dplus                     : 0065dd
- z_drop                      : 00663a
- z_dtos                      : 0065e2
- z_dump                      : 006661
- z_dup                       : 006666
- z_equal                     : 0062e7
- z_evaluate                  : 006695
- z_execute                   : 0066a3
- z_fetch                     : 0062a4
- z_find-name                 : 0066fa
- z_fromr                     : 006913
- z_greater                   : 00611c
- z_gtnumber                  : 006181
- z_hash                      : 006274
- z_hashs                     : 00628c
- z_here                      : 006710
- z_hex                       : 006716
- z_hold                      : 006724
- z_immediate                 : 006703
- z_invert                    : 006709
- z_leftbracket               : 0062ad
- z_less                      : 0060f2
- z_lessnumber                : 006108
- z_literal                   : 006736
- z_max                       : 006776
- z_min                       : 006789
- z_minus                     : 0062d2
- z_mrot                      : 0062db
- z_mstar                     : 006763
- z_name-int                  : 006792
- z_name-string               : 0067a3
- z_negate                    : 0067aa
- z_nip                       : 0067ad
- z_not-equal                 : 0060fe
- z_number                    : 006831
- z_numbermore                : 006283
- z_one                       : 006345
- z_one-minus                 : 006347
- z_one-plus                  : 006349
- z_or                        : 006838
- z_over                      : 00683f
- z_pad                       : 00684b
- z_page                      : 006858
- z_parse                     : 0068bd
- z_parse-name                : 0068bd
- z_plus                      : 0062c7
- z_plusstore                 : 0068cd
- z_postpone                  : 006903
- z_question                  : 006293
- z_quit                      : 0060de
- z_refill                    : 006946
- z_rfetch                    : 00690b
- z_rightbracket              : 0062b3
- z_rot                       : 00694f
- z_semicolon                 : 006259
- z_sign                      : 00697f
- z_sliteral                  : 0069ca
- z_source                    : 0069ed
- z_source-id                 : 0069f4
- z_space                     : 0069fb
- z_spaces                    : 006a08
- z_squote                    : 006961
- z_star                      : 006a10
- z_state                     : 006a18
- z_stod                      : 006971
- z_store                     : 00629f
- z_swap                      : 006a1e
- z_tick                      : 006383
- z_to-in                     : 006124
- z_tor                       : 006189
- z_true                      : 006a26
- z_tuck                      : 006a2f
- z_two                       : 006351
- z_two-star                  : 006355
- z_type                      : 006a50
- z_udmod                     : 006a6c
- z_ummod                     : 006b1b
- z_umstar                    : 006aca
- z_unused                    : 006b27
- z_variable                  : 006b34
- z_words                     : 006b5c
- z_xor                       : 006b63
- z_zbranch                   : 006325
- z_zero                      : 0062ef
- z_zero-equal                : 0062fb
- z_zero-less                 : 006307
- z_zero-more                 : 00631e
- z_zero-notequal             : 006313
- zb_done                     : 006338
- zb_zero                     : 006332
- zbranch_rt                  : 006326
- ze_not_zero                 : 0062f8
- zero-less-is-less           : 006304
- zero-more_done              : 00631d
- zero-more_true              : 00631c
- zne_is_zero                 : 006310
