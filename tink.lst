A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sun Feb 19 14:44:31 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.14158 seconds
Code origin: 006000
Bytes of machine code: 4974

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 19. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 19. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: -1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE dir | em  8  8 |        |             |         .equ scratch { 000200 + &32 } 8 byte scratchpad (see UM/MOD)
  16:074 | DONE cmt | em  8  8 |        |             | ;       .equ UNUSED   { directpage + &40 } ;
  16:075 | DONE wsp | em  8  8 |        |             |
  16:076 | DONE wsp | em  8  8 |        |             |
  16:077 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:078 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:079 | DONE wsp | em  8  8 |        |             |
  16:080 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:089 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:090 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:091 | DONE wsp | em  8  8 |        |             |
  16:092 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:093 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:094 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:095 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  16:096 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 d7 64    |                 jsr 0064d7           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  57:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  58:000 | DONE ins | na 16 16 | 00606a | a9 7e 6e    |                 lda.# 006e7e         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  70:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  71:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  72:000 | DONE wsp | na 16 16 |        |             |
  73:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  74:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  75:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  78:000 | DONE ins | na 16 16 | 006085 | 20 a7 66    |                 jsr 0066a7           
  79:000 | DONE wsp | na 16 16 |        |             |
  80:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  81:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  82:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  83:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  84:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608c | a9 58 6f    |                 lda.# 006f58         
  88:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  89:000 | DONE ins | na 16 16 | 006091 | a0 6e 02    |                 ldy.# 00026e         length goes in TOS
  90:000 | DONE wsp | na 16 16 |        |             |
  91:000 | DONE ins | na 16 16 | 006094 | 20 54 65    |                 jsr 006554           
  92:000 | DONE wsp | na 16 16 |        |             |
  93:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  96:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  97:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  98:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  99:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 100:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 101:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 102:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 102:001 | DONE ctl | na 16 16 |        |             |         .!a16
 103:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 104:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 105:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 106:000 | DONE wsp | na 16 16 |        |             |
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 109:000 | DONE wsp | na 16 16 |        |             |
 110:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 111:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 112:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 113:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 114:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 115:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 116:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 117:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 118:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 119:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 120:000 | DONE wsp | na 16 16 |        |             |
 121:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 122:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 123:000 | DONE ins | na 16 16 | 0060a3 | 9c 83 65    |                 stz 006583           
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 126:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 129:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 130:000 | DONE wsp | na 16 16 |        |             |
 131:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 132:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 133:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 134:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 137:000 | DONE ins | na 16 16 | 0060ac | 20 4e 67    |                 jsr 00674e           ( -- f )
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 140:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 143:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 145:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 146:000 | DONE ins | na 16 16 | 0060b2 | a9 9a 72    |                 lda.# 00729a         
 147:000 | DONE ins | na 16 16 | 0060b5 | 4c 1e 6f    |                 jmp 006f1e           
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 151:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 152:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 153:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 154:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 155:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 156:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 157:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 160:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 163:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 164:000 | DONE ins | na 16 16 | 0060be | 20 ac 6e    |                 jsr 006eac           
 165:000 | DONE wsp | na 16 16 |        |             |
 166:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 167:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 168:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 169:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 170:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE ins | na 16 16 | 0060c6 | a9 00 73    |                 lda.# 007300         
 173:000 | DONE ins | na 16 16 | 0060c9 | 4c 1e 6f    |                 jmp 006f1e           
 174:000 | DONE wsp | na 16 16 |        |             |
 175:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 176:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 177:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 178:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 179:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE ins | na 16 16 | 0060d0 | a9 c6 71    |                 lda.# 0071c6         
 182:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 183:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 184:000 | DONE ins | na 16 16 | 0060d5 | a9 ca 71    |                 lda.# 0071ca         fall through to quit_print
 185:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 186:000 | DONE ins | na 16 16 | 0060d8 | 20 24 6f    |                 jsr 006f24           
 187:000 | DONE wsp | na 16 16 |        |             |
 188:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 189:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 193:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 194:000 | DONE wsp | na 16 16 |        |             |
 195:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 196:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 197:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 198:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 199:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 200:000 | DONE lbl | na 16 16 | 0060df |             | xt_less                              
 201:000 | DONE ins | na 16 16 | 0060df | 98          |                 tya                  
 202:000 | DONE ins | na 16 16 | 0060e0 | a0 00 00    |                 ldy.# 0000           default is false
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | 38          |                 sec                  
 205:000 | DONE ins | na 16 16 | 0060e4 | f5 00       |                 sbc.dx 00            
 206:000 | DONE ins | na 16 16 | 0060e6 | f0 08       |                 beq 0060f0           the same is not greater
 207:000 | DONE ins | na 16 16 | 0060e8 | 50 03       |                 bvc 0060ed           no overflow, skip ahead
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 210:000 | DONE ins | na 16 16 | 0060ea | 49 00 80    |                 eor.# 8000           compliment negative flag
 211:000 | DONE wsp | na 16 16 |        |             |
 212:000 | DONE lbl | na 16 16 | 0060ed |             | xt_less_no_ov                        
 213:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 214:000 | DONE ins | na 16 16 | 0060ed | 30 01       |                 bmi 0060f0           
 215:000 | DONE ins | na 16 16 | 0060ef | 88          |                 dey                  
 216:000 | DONE lbl | na 16 16 | 0060f0 |             | xt_less_nip                          
 217:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 218:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 219:000 | DONE wsp | na 16 16 |        |             |
 220:000 | DONE lbl | na 16 16 | 0060f2 |             | z_less                               
 220:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 224:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 225:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 226:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 227:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_not-equal                         
 228:000 | DONE ins | na 16 16 | 0060f3 | 98          |                 tya                  
 229:000 | DONE ins | na 16 16 | 0060f4 | a0 00 00    |                 ldy.# 0000           default value is false
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE ins | na 16 16 | 0060f7 | d5 00       |                 cmp.dx 00            
 232:000 | DONE ins | na 16 16 | 0060f9 | f0 01       |                 beq 0060fc           
 233:000 | DONE ins | na 16 16 | 0060fb | 88          |                 dey                  wraps to 0FFFF (true)
 234:000 | DONE wsp | na 16 16 |        |             |
 235:000 | DONE lbl | na 16 16 | 0060fc |             | not-equal_equal                      ; yes, this is a silly name
 236:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 237:000 | DONE ins | na 16 16 | 0060fd | e8          |                 inx                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 0060fe |             | z_not-equal                          
 239:001 | DONE ins | na 16 16 | 0060fe | 60          |                 rts                  
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 243:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 244:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 245:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 246:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 247:000 | DONE lbl | na 16 16 | 0060ff |             | xt_greater                           
 248:000 | DONE ins | na 16 16 | 0060ff | 98          |                 tya                  
 249:000 | DONE ins | na 16 16 | 006100 | a0 00 00    |                 ldy.# 0000           default is false
 250:000 | DONE wsp | na 16 16 |        |             |
 251:000 | DONE ins | na 16 16 | 006103 | 38          |                 sec                  
 252:000 | DONE ins | na 16 16 | 006104 | f5 00       |                 sbc.dx 00            
 253:000 | DONE ins | na 16 16 | 006106 | f0 08       |                 beq 006110           the same is not greater
 254:000 | DONE ins | na 16 16 | 006108 | 50 03       |                 bvc 00610d           no overflow, skip ahead
 255:000 | DONE wsp | na 16 16 |        |             |
 256:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 257:000 | DONE ins | na 16 16 | 00610a | 49 00 80    |                 eor.# 8000           compliment negative flag
 258:000 | DONE wsp | na 16 16 |        |             |
 259:000 | DONE lbl | na 16 16 | 00610d |             | xt_greater_no_ov                     
 260:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 261:000 | DONE ins | na 16 16 | 00610d | 10 01       |                 bpl 006110           
 262:000 | DONE ins | na 16 16 | 00610f | 88          |                 dey                  
 263:000 | DONE lbl | na 16 16 | 006110 |             | xt_greater_nip                       
 264:000 | DONE ins | na 16 16 | 006110 | e8          |                 inx                  
 265:000 | DONE ins | na 16 16 | 006111 | e8          |                 inx                  
 266:000 | DONE wsp | na 16 16 |        |             |
 267:000 | DONE lbl | na 16 16 | 006112 |             | z_greater                            
 267:001 | DONE ins | na 16 16 | 006112 | 60          |                 rts                  
 268:000 | DONE wsp | na 16 16 |        |             |
 269:000 | DONE wsp | na 16 16 |        |             |
 270:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 271:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 272:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 273:000 | DONE lbl | na 16 16 | 006113 |             | xt_to-in                             
 274:000 | DONE ins | na 16 16 | 006113 | ca          |                 dex                  
 275:000 | DONE ins | na 16 16 | 006114 | ca          |                 dex                  
 276:000 | DONE ins | na 16 16 | 006115 | 94 00       |                 sty.dx 00            
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE ins | na 16 16 | 006117 | a0 12 02    |                 ldy.# 000212         >IN
 279:000 | DONE lbl | na 16 16 | 00611a |             | z_to-in                              
 279:001 | DONE ins | na 16 16 | 00611a | 60          |                 rts                  
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE wsp | na 16 16 |        |             |
 282:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 283:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 284:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
 285:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
 286:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 287:000 | DONE cmt | na 16 16 |        |             | ; focus on size
 288:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
 289:000 | DONE lbl | na 16 16 | 00611b |             | xt_dot                               
 290:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 291:000 | DONE ins | na 16 16 | 00611b | 98          |                 tya                  
 292:000 | DONE ins | na 16 16 | 00611c | 29 00 ff    |                 and.# 0ff00          
 293:000 | DONE ins | na 16 16 | 00611f | eb          |                 xba                  
 294:000 | DONE ins | na 16 16 | 006120 | 20 3c 6f    |                 jsr 006f3c           
 295:000 | DONE ins | na 16 16 | 006123 | 98          |                 tya                  
 296:000 | DONE ins | na 16 16 | 006124 | 29 ff 00    |                 and.# 00ff           
 297:000 | DONE ins | na 16 16 | 006127 | 20 3c 6f    |                 jsr 006f3c           
 298:000 | DONE ins | na 16 16 | 00612a | 20 11 68    |                 jsr 006811           
 299:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 300:000 | DONE wsp | na 16 16 |        |             |
 301:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
 302:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
 303:000 | DONE ins | na 16 16 | 00612d | 20 23 65    |                 jsr 006523           
 304:000 | DONE wsp | na 16 16 |        |             |
 305:000 | DONE lbl | na 16 16 | 006130 |             | z_dot                                
 305:001 | DONE ins | na 16 16 | 006130 | 60          |                 rts                  
 306:000 | DONE wsp | na 16 16 |        |             |
 307:000 | DONE wsp | na 16 16 |        |             |
 308:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 309:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 310:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 311:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 312:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 313:000 | DONE lbl | na 16 16 | 006131 |             | xt_dotparen                          
 314:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 315:000 | DONE ins | na 16 16 | 006131 | ca          |                 dex                  
 316:000 | DONE ins | na 16 16 | 006132 | ca          |                 dex                  
 317:000 | DONE ins | na 16 16 | 006133 | 94 00       |                 sty.dx 00            
 318:000 | DONE ins | na 16 16 | 006135 | a0 29 00    |                 ldy.# 29             
 319:000 | DONE wsp | na 16 16 |        |             |
 320:000 | DONE ins | na 16 16 | 006138 | 20 e6 66    |                 jsr 0066e6           ( -- addr u)
 321:000 | DONE ins | na 16 16 | 00613b | 20 4c 68    |                 jsr 00684c           
 322:000 | DONE wsp | na 16 16 |        |             |
 323:000 | DONE lbl | na 16 16 | 00613e |             | z_dotparen                           
 323:001 | DONE ins | na 16 16 | 00613e | 60          |                 rts                  
 324:000 | DONE wsp | na 16 16 |        |             |
 325:000 | DONE wsp | na 16 16 |        |             |
 326:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 327:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 328:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 329:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 330:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 331:000 | DONE lbl | na 16 16 | 00613f |             | xt_dotquote                          
 332:000 | DONE ins | na 16 16 | 00613f | ca          |                 dex                  
 333:000 | DONE ins | na 16 16 | 006140 | ca          |                 dex                  
 334:000 | DONE ins | na 16 16 | 006141 | 94 00       |                 sty.dx 00            
 335:000 | DONE ins | na 16 16 | 006143 | a0 22 00    |                 ldy.# 0022           ASCII for "
 336:000 | DONE wsp | na 16 16 |        |             |
 337:000 | DONE ins | na 16 16 | 006146 | 20 e6 66    |                 jsr 0066e6           
 338:000 | DONE ins | na 16 16 | 006149 | 20 9c 67    |                 jsr 00679c           
 339:000 | DONE wsp | na 16 16 |        |             |
 340:000 | DONE ins | na 16 16 | 00614c | f4 4c 68    |                 phe.# 00684c         
 341:000 | DONE ins | na 16 16 | 00614f | 20 fd 6e    |                 jsr 006efd           
 342:000 | DONE wsp | na 16 16 |        |             |
 343:000 | DONE ins | na 16 16 | 006152 | 60          |                 rts                  
 344:000 | DONE lbl | na 16 16 | 006153 |             | z_dotquote                           
 345:000 | DONE wsp | na 16 16 |        |             |
 346:000 | DONE wsp | na 16 16 |        |             |
 347:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 348:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 349:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 350:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 351:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 352:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 353:000 | DONE lbl | na 16 16 | 006153 |             | xt_dots                              
 354:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 355:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 356:000 | DONE ins | na 16 16 | 006153 | 20 dd 64    |                 jsr 0064dd           ( -- u)
 357:000 | DONE wsp | na 16 16 |        |             |
 358:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 359:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 360:000 | DONE ins | na 16 16 | 006156 | a9 3c 00    |                 lda.# 3c             
 361:000 | DONE ins | na 16 16 | 006159 | 20 36 60    |                 jsr 006036           
 362:000 | DONE wsp | na 16 16 |        |             |
 363:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 364:000 | DONE ins | na 16 16 | 00615c | 98          |                 tya                  
 365:000 | DONE ins | na 16 16 | 00615d | 29 00 ff    |                 and.# 0ff00          
 366:000 | DONE ins | na 16 16 | 006160 | eb          |                 xba                  
 367:000 | DONE ins | na 16 16 | 006161 | 20 3c 6f    |                 jsr 006f3c           
 368:000 | DONE ins | na 16 16 | 006164 | 98          |                 tya                  
 369:000 | DONE ins | na 16 16 | 006165 | 29 ff 00    |                 and.# 00ff           
 370:000 | DONE ins | na 16 16 | 006168 | 20 3c 6f    |                 jsr 006f3c           
 371:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 372:000 | DONE wsp | na 16 16 |        |             |
 373:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 374:000 | DONE ins | na 16 16 | 00616b | a9 3e 00    |                 lda.# 3e             
 375:000 | DONE ins | na 16 16 | 00616e | 20 36 60    |                 jsr 006036           
 376:000 | DONE ins | na 16 16 | 006171 | 20 11 68    |                 jsr 006811           
 377:000 | DONE wsp | na 16 16 |        |             |
 378:000 | DONE wsp | na 16 16 |        |             |
 379:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 380:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 381:000 | DONE ins | na 16 16 | 006174 | 98          |                 tya                  force flag test
 382:000 | DONE ins | na 16 16 | 006175 | f0 20       |                 beq 006197           
 383:000 | DONE wsp | na 16 16 |        |             |
 384:000 | DONE lbl | na 16 16 | 006177 |             | dots_not_empty                       
 385:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 386:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 387:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 388:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 389:000 | DONE wsp | na 16 16 |        |             |
 390:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 391:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 392:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 393:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 394:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles), and we save the two bytes.
 395:000 | DONE ins | na 16 16 | 006177 | da          |                 phx                  
 396:000 | DONE wsp | na 16 16 |        |             |
 397:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 398:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped.
 399:000 | DONE cmt | na 16 16 |        |             |                 ; See docs/INTERNALS.md for details
 400:000 | DONE ins | na 16 16 | 006178 | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
 401:000 | DONE ins | na 16 16 | 00617b | ca          |                 dex                  
 402:000 | DONE ins | na 16 16 | 00617c | ca          |                 dex                  points to dsp0-2, which is also garbage
 403:000 | DONE wsp | na 16 16 |        |             |
 404:000 | DONE lbl | na 16 16 | 00617d |             | dots_loop                            
 405:000 | DONE ins | na 16 16 | 00617d | ca          |                 dex                  get next element on DS, initially dsp0-4
 406:000 | DONE ins | na 16 16 | 00617e | ca          |                 dex                  
 407:000 | DONE wsp | na 16 16 |        |             |
 408:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 409:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 410:000 | DONE ins | na 16 16 | 00617f | b5 00       |                 lda.dx 00            
 411:000 | DONE ins | na 16 16 | 006181 | 29 00 ff    |                 and.# 0ff00          
 412:000 | DONE ins | na 16 16 | 006184 | eb          |                 xba                  
 413:000 | DONE ins | na 16 16 | 006185 | 20 3c 6f    |                 jsr 006f3c           
 414:000 | DONE ins | na 16 16 | 006188 | b5 00       |                 lda.dx 00            
 415:000 | DONE ins | na 16 16 | 00618a | 29 ff 00    |                 and.# 00ff           
 416:000 | DONE ins | na 16 16 | 00618d | 20 3c 6f    |                 jsr 006f3c           
 417:000 | DONE ins | na 16 16 | 006190 | 20 11 68    |                 jsr 006811           
 418:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 419:000 | DONE wsp | na 16 16 |        |             |
 420:000 | DONE ins | na 16 16 | 006193 | 88          |                 dey                  
 421:000 | DONE ins | na 16 16 | 006194 | d0 e7       |                 bne 00617d           
 422:000 | DONE wsp | na 16 16 |        |             |
 423:000 | DONE ins | na 16 16 | 006196 | fa          |                 plx                  restore original DSP
 424:000 | DONE wsp | na 16 16 |        |             |
 425:000 | DONE lbl | na 16 16 | 006197 |             | dots_done                            
 426:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 427:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 428:000 | DONE ins | na 16 16 | 006197 | 20 23 65    |                 jsr 006523           
 429:000 | DONE wsp | na 16 16 |        |             |
 430:000 | DONE lbl | na 16 16 | 00619a |             | z_dots                               
 430:001 | DONE ins | na 16 16 | 00619a | 60          |                 rts                  
 431:000 | DONE wsp | na 16 16 |        |             |
 432:000 | DONE wsp | na 16 16 |        |             |
 433:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 434:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 435:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 436:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 437:000 | DONE cmt | na 16 16 |        |             | ; aligned
 438:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 439:000 | DONE cmt | na 16 16 |        |             | ;               tya
 440:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 441:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 442:000 | DONE cmt | na 16 16 |        |             | ;               iny
 443:000 | DONE cmt | na 16 16 |        |             | ;               iny
 444:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 445:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 446:000 | DONE cmt | na 16 16 |        |             | ;               inx
 447:000 | DONE cmt | na 16 16 |        |             | ;               inx
 448:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 449:000 | DONE lbl | na 16 16 | 00619b |             | xt_comma                             
 450:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 451:000 | DONE ins | na 16 16 | 00619b | 98          |                 tya                  
 452:000 | DONE ins | na 16 16 | 00619c | 92 00       |                 sta.di 000200        STA (CP)
 453:000 | DONE ins | na 16 16 | 00619e | e6 00       |                 inc.d 000200         
 454:000 | DONE ins | na 16 16 | 0061a0 | e6 00       |                 inc.d 000200         
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE ins | na 16 16 | 0061a2 | b4 00       |                 ldy.dx 00            
 457:000 | DONE ins | na 16 16 | 0061a4 | e8          |                 inx                  
 458:000 | DONE ins | na 16 16 | 0061a5 | e8          |                 inx                  
 459:000 | DONE wsp | na 16 16 |        |             |
 460:000 | DONE lbl | na 16 16 | 0061a6 |             | z_comma                              
 460:001 | DONE ins | na 16 16 | 0061a6 | 60          |                 rts                  
 461:000 | DONE wsp | na 16 16 |        |             |
 462:000 | DONE wsp | na 16 16 |        |             |
 463:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 464:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 465:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 466:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 467:000 | DONE lbl | na 16 16 | 0061a7 |             | xt_colon                             
 468:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 469:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 470:000 | DONE ins | na 16 16 | 0061a7 | a5 14       |                 lda.d 000214         
 471:000 | DONE ins | na 16 16 | 0061a9 | f0 06       |                 beq 0061b1           
 472:000 | DONE wsp | na 16 16 |        |             |
 473:000 | DONE ins | na 16 16 | 0061ab | a9 e8 72    |                 lda.# 0072e8         
 474:000 | DONE ins | na 16 16 | 0061ae | 4c 1e 6f    |                 jmp 006f1e           
 475:000 | DONE lbl | na 16 16 | 0061b1 |             | @                                    
 476:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 477:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 478:000 | DONE ins | na 16 16 | 0061b1 | e6 14       |                 inc.d 000214         
 479:000 | DONE wsp | na 16 16 |        |             |
 480:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 481:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 482:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 483:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 484:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 485:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 486:000 | DONE ins | na 16 16 | 0061b3 | a5 02       |                 lda.d 000202         
 487:000 | DONE ins | na 16 16 | 0061b5 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 488:000 | DONE wsp | na 16 16 |        |             |
 489:000 | DONE ins | na 16 16 | 0061b6 | 20 64 64    |                 jsr 006464           
 490:000 | DONE wsp | na 16 16 |        |             |
 491:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 492:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 493:000 | DONE ins | na 16 16 | 0061b9 | a5 02       |                 lda.d 000202         
 494:000 | DONE ins | na 16 16 | 0061bb | 85 1e       |                 sta.d 00021e         
 495:000 | DONE ins | na 16 16 | 0061bd | 68          |                 pla                  
 496:000 | DONE ins | na 16 16 | 0061be | 85 02       |                 sta.d 000202         
 497:000 | DONE wsp | na 16 16 |        |             |
 498:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 499:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 500:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 501:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 502:000 | DONE ins | na 16 16 | 0061c0 | a5 00       |                 lda.d 000200         
 503:000 | DONE ins | na 16 16 | 0061c2 | 38          |                 sec                  
 504:000 | DONE ins | na 16 16 | 0061c3 | e9 03 00    |                 sbc.# 0003           
 505:000 | DONE ins | na 16 16 | 0061c6 | 85 00       |                 sta.d 000200         
 506:000 | DONE wsp | na 16 16 |        |             |
 507:000 | DONE lbl | na 16 16 | 0061c8 |             | z_colon                              
 507:001 | DONE ins | na 16 16 | 0061c8 | 60          |                 rts                  
 508:000 | DONE wsp | na 16 16 |        |             |
 509:000 | DONE wsp | na 16 16 |        |             |
 510:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 511:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 512:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 513:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 514:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 515:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 516:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 517:000 | DONE lbl | na 16 16 | 0061c9 |             | xt_semicolon                         
 518:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 519:000 | DONE ins | na 16 16 | 0061c9 | 84 06       |                 sty.d 000206         
 520:000 | DONE wsp | na 16 16 |        |             |
 521:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 522:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 523:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 524:000 | DONE ins | na 16 16 | 0061cb | a0 06 00    |                 ldy.# 0006           
 525:000 | DONE ins | na 16 16 | 0061ce | a5 00       |                 lda.d 000200         
 526:000 | DONE ins | na 16 16 | 0061d0 | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 527:000 | DONE wsp | na 16 16 |        |             |
 528:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 529:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 530:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 531:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 532:000 | DONE ins | na 16 16 | 0061d2 | a9 60 00    |                 lda.# 60             opcode for RTS
 533:000 | DONE ins | na 16 16 | 0061d5 | 92 00       |                 sta.di 000200        STA (CP)
 534:000 | DONE ins | na 16 16 | 0061d7 | e6 00       |                 inc.d 000200         MSB will be overwritten
 535:000 | DONE wsp | na 16 16 |        |             |
 536:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 537:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 538:000 | DONE ins | na 16 16 | 0061d9 | a5 1e       |                 lda.d 00021e         
 539:000 | DONE ins | na 16 16 | 0061db | 85 02       |                 sta.d 000202         
 540:000 | DONE wsp | na 16 16 |        |             |
 541:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 542:000 | DONE ins | na 16 16 | 0061dd | a4 06       |                 ldy.d 000206         
 543:000 | DONE wsp | na 16 16 |        |             |
 544:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 545:000 | DONE ins | na 16 16 | 0061df | 64 14       |                 stz.d 000214         
 546:000 | DONE wsp | na 16 16 |        |             |
 547:000 | DONE lbl | na 16 16 | 0061e1 |             | z_semicolon                          
 547:001 | DONE ins | na 16 16 | 0061e1 | 60          |                 rts                  
 548:000 | DONE wsp | na 16 16 |        |             |
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 551:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 552:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 553:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 554:000 | DONE lbl | na 16 16 | 0061e2 |             | xt_question                          
 555:000 | DONE ins | na 16 16 | 0061e2 | 20 f5 61    |                 jsr 0061f5           
 556:000 | DONE ins | na 16 16 | 0061e5 | 20 1b 61    |                 jsr 00611b           
 557:000 | DONE wsp | na 16 16 |        |             |
 558:000 | DONE lbl | na 16 16 | 0061e8 |             | z_question                           
 558:001 | DONE ins | na 16 16 | 0061e8 | 60          |                 rts                  
 559:000 | DONE wsp | na 16 16 |        |             |
 560:000 | DONE wsp | na 16 16 |        |             |
 561:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 562:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 563:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 564:000 | DONE lbl | na 16 16 | 0061e9 |             | xt_store                             
 565:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 566:000 | DONE ins | na 16 16 | 0061e9 | b5 00       |                 lda.dx 00            NOS has value
 567:000 | DONE ins | na 16 16 | 0061eb | 99 00 00    |                 sta.y 0000           
 568:000 | DONE wsp | na 16 16 |        |             |
 569:000 | DONE ins | na 16 16 | 0061ee | b4 02       |                 ldy.dx 02            
 570:000 | DONE ins | na 16 16 | 0061f0 | e8          |                 inx                  
 571:000 | DONE ins | na 16 16 | 0061f1 | e8          |                 inx                  
 572:000 | DONE ins | na 16 16 | 0061f2 | e8          |                 inx                  
 573:000 | DONE ins | na 16 16 | 0061f3 | e8          |                 inx                  
 574:000 | DONE wsp | na 16 16 |        |             |
 575:000 | DONE lbl | na 16 16 | 0061f4 |             | z_store                              
 575:001 | DONE ins | na 16 16 | 0061f4 | 60          |                 rts                  
 576:000 | DONE wsp | na 16 16 |        |             |
 577:000 | DONE wsp | na 16 16 |        |             |
 578:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 579:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 580:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 581:000 | DONE lbl | na 16 16 | 0061f5 |             | xt_fetch                             
 582:000 | DONE ins | na 16 16 | 0061f5 | b9 00 00    |                 lda.y 0000           
 583:000 | DONE ins | na 16 16 | 0061f8 | a8          |                 tay                  
 584:000 | DONE wsp | na 16 16 |        |             |
 585:000 | DONE lbl | na 16 16 | 0061f9 |             | z_fetch                              
 585:001 | DONE ins | na 16 16 | 0061f9 | 60          |                 rts                  
 586:000 | DONE wsp | na 16 16 |        |             |
 587:000 | DONE wsp | na 16 16 |        |             |
 588:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 589:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 590:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 591:000 | DONE lbl | na 16 16 | 0061fa |             | xt_brackettick                       
 592:000 | DONE ins | na 16 16 | 0061fa | 20 af 62    |                 jsr 0062af           
 593:000 | DONE ins | na 16 16 | 0061fd | 4c 04 66    |                 jmp 006604           JSR/RTS
 594:000 | DONE lbl | na 16 16 | 006200 |             | z_brackettick                        
 595:000 | DONE wsp | na 16 16 |        |             |
 596:000 | DONE wsp | na 16 16 |        |             |
 597:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 598:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 599:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 600:000 | DONE lbl | na 16 16 | 006200 |             | xt_leftbracket                       
 601:000 | DONE ins | na 16 16 | 006200 | 64 14       |                 stz.d 000214         
 602:000 | DONE lbl | na 16 16 | 006202 |             | z_leftbracket                        
 602:001 | DONE ins | na 16 16 | 006202 | 60          |                 rts                  
 603:000 | DONE wsp | na 16 16 |        |             |
 604:000 | DONE wsp | na 16 16 |        |             |
 605:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 606:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 607:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 608:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 609:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 610:000 | DONE lbl | na 16 16 | 006203 |             | xt_rightbracket                      
 611:000 | DONE ins | na 16 16 | 006203 | a9 01 00    |                 lda.# 0001           
 612:000 | DONE ins | na 16 16 | 006206 | 85 14       |                 sta.d 000214         
 613:000 | DONE wsp | na 16 16 |        |             |
 614:000 | DONE lbl | na 16 16 | 006208 |             | z_rightbracket                       
 614:001 | DONE ins | na 16 16 | 006208 | 60          |                 rts                  
 615:000 | DONE wsp | na 16 16 |        |             |
 616:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 617:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( -- ) X bytes / X cycles
 618:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 619:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word
 620:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 621:000 | DONE lbl | na 16 16 | 006209 |             | xt_bracketchar                       
 622:000 | DONE ins | na 16 16 | 006209 | 20 00 64    |                 jsr 006400           
 623:000 | DONE ins | na 16 16 | 00620c | 20 04 66    |                 jsr 006604           
 624:000 | DONE wsp | na 16 16 |        |             |
 625:000 | DONE lbl | na 16 16 | 00620f |             | z_bracketchar                        
 625:001 | DONE ins | na 16 16 | 00620f | 60          |                 rts                  
 626:000 | DONE wsp | na 16 16 |        |             |
 627:000 | DONE wsp | na 16 16 |        |             |
 628:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 629:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 630:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 631:000 | DONE lbl | na 16 16 | 006210 |             | xt_plus                              
 632:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 633:000 | DONE ins | na 16 16 | 006210 | 98          |                 tya                  
 634:000 | DONE ins | na 16 16 | 006211 | 18          |                 clc                  
 635:000 | DONE ins | na 16 16 | 006212 | 75 00       |                 adc.dx 00            
 636:000 | DONE ins | na 16 16 | 006214 | a8          |                 tay                  
 637:000 | DONE ins | na 16 16 | 006215 | e8          |                 inx                  
 638:000 | DONE ins | na 16 16 | 006216 | e8          |                 inx                  
 639:000 | DONE wsp | na 16 16 |        |             |
 640:000 | DONE lbl | na 16 16 | 006217 |             | z_plus                               
 640:001 | DONE ins | na 16 16 | 006217 | 60          |                 rts                  
 641:000 | DONE wsp | na 16 16 |        |             |
 642:000 | DONE wsp | na 16 16 |        |             |
 643:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 644:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 645:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 646:000 | DONE lbl | na 16 16 | 006218 |             | xt_minus                             
 647:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 648:000 | DONE ins | na 16 16 | 006218 | 98          |                 tya                  
 649:000 | DONE ins | na 16 16 | 006219 | 49 ff ff    |                 eor.# 0ffff          
 650:000 | DONE wsp | na 16 16 |        |             |
 651:000 | DONE ins | na 16 16 | 00621c | 38          |                 sec                  not CLC
 652:000 | DONE ins | na 16 16 | 00621d | 75 00       |                 adc.dx 00            
 653:000 | DONE wsp | na 16 16 |        |             |
 654:000 | DONE ins | na 16 16 | 00621f | a8          |                 tay                  
 655:000 | DONE ins | na 16 16 | 006220 | e8          |                 inx                  
 656:000 | DONE ins | na 16 16 | 006221 | e8          |                 inx                  
 657:000 | DONE wsp | na 16 16 |        |             |
 658:000 | DONE lbl | na 16 16 | 006222 |             | z_minus                              
 658:001 | DONE ins | na 16 16 | 006222 | 60          |                 rts                  
 659:000 | DONE wsp | na 16 16 |        |             |
 660:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 661:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
 662:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
 663:000 | DONE lbl | na 16 16 | 006223 |             | xt_equal                             
 664:000 | DONE ins | na 16 16 | 006223 | 98          |                 tya                  
 665:000 | DONE ins | na 16 16 | 006224 | a0 00 00    |                 ldy.# 0000           default value is false
 666:000 | DONE wsp | na 16 16 |        |             |
 667:000 | DONE ins | na 16 16 | 006227 | d5 00       |                 cmp.dx 00            
 668:000 | DONE ins | na 16 16 | 006229 | d0 01       |                 bne 00622c           
 669:000 | DONE ins | na 16 16 | 00622b | 88          |                 dey                  wraps to 0FFFF (true)
 670:000 | DONE wsp | na 16 16 |        |             |
 671:000 | DONE lbl | na 16 16 | 00622c |             | equal_not                            
 672:000 | DONE ins | na 16 16 | 00622c | e8          |                 inx                  
 673:000 | DONE ins | na 16 16 | 00622d | e8          |                 inx                  
 674:000 | DONE wsp | na 16 16 |        |             |
 675:000 | DONE lbl | na 16 16 | 00622e |             | z_equal                              
 675:001 | DONE ins | na 16 16 | 00622e | 60          |                 rts                  
 676:000 | DONE wsp | na 16 16 |        |             |
 677:000 | DONE wsp | na 16 16 |        |             |
 678:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 679:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 680:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 681:000 | DONE lbl | na 16 16 | 00622f |             | xt_zero                              
 682:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 683:000 | DONE ins | na 16 16 | 00622f | ca          |                 dex                  
 684:000 | DONE ins | na 16 16 | 006230 | ca          |                 dex                  
 685:000 | DONE ins | na 16 16 | 006231 | 94 00       |                 sty.dx 00            
 686:000 | DONE ins | na 16 16 | 006233 | a0 00 00    |                 ldy.# 0000           
 687:000 | DONE wsp | na 16 16 |        |             |
 688:000 | DONE lbl | na 16 16 | 006236 |             | z_zero                               
 688:001 | DONE ins | na 16 16 | 006236 | 60          |                 rts                  
 689:000 | DONE wsp | na 16 16 |        |             |
 690:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 691:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
 692:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
 693:000 | DONE lbl | na 16 16 | 006237 |             | xt_zero-equal                        
 694:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 695:000 | DONE ins | na 16 16 | 006237 | 98          |                 tya                  force flag check
 696:000 | DONE ins | na 16 16 | 006238 | d0 05       |                 bne 00623f           
 697:000 | DONE wsp | na 16 16 |        |             |
 698:000 | DONE ins | na 16 16 | 00623a | a0 ff 0f    |                 ldy.# 0fff           
 699:000 | DONE ins | na 16 16 | 00623d | 80 03       |                 bra 006242           
 700:000 | DONE lbl | na 16 16 | 00623f |             | ze_not_zero                          
 701:000 | DONE ins | na 16 16 | 00623f | a0 00 00    |                 ldy.# 0000           
 702:000 | DONE wsp | na 16 16 |        |             |
 703:000 | DONE lbl | na 16 16 | 006242 |             | z_zero-equal                         
 703:001 | DONE ins | na 16 16 | 006242 | 60          |                 rts                  
 704:000 | DONE wsp | na 16 16 |        |             |
 705:000 | DONE wsp | na 16 16 |        |             |
 706:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 707:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
 708:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
 709:000 | DONE lbl | na 16 16 | 006243 |             | xt_zero-less                         
 710:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 711:000 | DONE ins | na 16 16 | 006243 | 98          |                 tya                  force flag check
 712:000 | DONE ins | na 16 16 | 006244 | 30 05       |                 bmi 00624b           
 713:000 | DONE wsp | na 16 16 |        |             |
 714:000 | DONE ins | na 16 16 | 006246 | a0 00 00    |                 ldy.# 0000           
 715:000 | DONE ins | na 16 16 | 006249 | 80 03       |                 bra 00624e           
 716:000 | DONE wsp | na 16 16 |        |             |
 717:000 | DONE lbl | na 16 16 | 00624b |             | zero-less-is-less                    
 718:000 | DONE ins | na 16 16 | 00624b | a0 ff ff    |                 ldy.# 0ffff          
 719:000 | DONE wsp | na 16 16 |        |             |
 720:000 | DONE lbl | na 16 16 | 00624e |             | z_zero-less                          
 720:001 | DONE ins | na 16 16 | 00624e | 60          |                 rts                  
 721:000 | DONE wsp | na 16 16 |        |             |
 722:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 723:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
 724:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
 725:000 | DONE lbl | na 16 16 | 00624f |             | xt_zero-notequal                     
 726:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 727:000 | DONE ins | na 16 16 | 00624f | 98          |                 tya                  force flag check
 728:000 | DONE ins | na 16 16 | 006250 | f0 05       |                 beq 006257           
 729:000 | DONE ins | na 16 16 | 006252 | a0 ff ff    |                 ldy.# 0ffff          
 730:000 | DONE ins | na 16 16 | 006255 | 80 03       |                 bra 00625a           
 731:000 | DONE lbl | na 16 16 | 006257 |             | zne_is_zero                          
 732:000 | DONE ins | na 16 16 | 006257 | a0 00 00    |                 ldy.# 0000           
 733:000 | DONE lbl | na 16 16 | 00625a |             | z_zero-notequal                      
 734:000 | DONE ins | na 16 16 | 00625a | 60          |                 rts                  
 735:000 | DONE wsp | na 16 16 |        |             |
 736:000 | DONE wsp | na 16 16 |        |             |
 737:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 738:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
 739:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
 740:000 | DONE lbl | na 16 16 | 00625b |             | xt_zero-more                         
 741:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 742:000 | DONE ins | na 16 16 | 00625b | a9 00 00    |                 lda.# 0000           default is false
 743:000 | DONE wsp | na 16 16 |        |             |
 744:000 | DONE ins | na 16 16 | 00625e | 88          |                 dey                  
 745:000 | DONE ins | na 16 16 | 00625f | 10 02       |                 bpl 006263           was at least 1
 746:000 | DONE wsp | na 16 16 |        |             |
 747:000 | DONE ins | na 16 16 | 006261 | 80 01       |                 bra 006264           nope, stays false
 748:000 | DONE wsp | na 16 16 |        |             |
 749:000 | DONE lbl | na 16 16 | 006263 |             | zero-more_true                       
 750:000 | DONE ins | na 16 16 | 006263 | 3a          |                 dec.a                wraps to 0ffff, true
 751:000 | DONE lbl | na 16 16 | 006264 |             | zero-more_done                       
 752:000 | DONE ins | na 16 16 | 006264 | a8          |                 tay                  
 753:000 | DONE wsp | na 16 16 |        |             |
 754:000 | DONE lbl | na 16 16 | 006265 |             | z_zero-more                          
 754:001 | DONE ins | na 16 16 | 006265 | 60          |                 rts                  
 755:000 | DONE wsp | na 16 16 |        |             |
 756:000 | DONE wsp | na 16 16 |        |             |
 757:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 758:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
 759:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
 760:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
 761:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
 762:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmp1
 763:000 | DONE lbl | na 16 16 | 006266 |             | xt_zbranch                           
 764:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 765:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
 766:000 | DONE ins | na 16 16 | 006266 | f4 6d 62    |                 phe.# 00626d         
 767:000 | DONE ins | na 16 16 | 006269 | 20 fd 6e    |                 jsr 006efd           
 768:000 | DONE wsp | na 16 16 |        |             |
 769:000 | DONE lbl | na 16 16 | 00626c |             | z_zbranch                            
 769:001 | DONE ins | na 16 16 | 00626c | 60          |                 rts                  
 770:000 | DONE wsp | na 16 16 |        |             |
 771:000 | DONE lbl | na 16 16 | 00626d |             | zbranch_rt                           
 772:000 | DONE cmt | na 16 16 |        |             |                 ; Compiled component. Use the address on the Return Stack to
 773:000 | DONE cmt | na 16 16 |        |             |                 ; decide where we want to return to
 774:000 | DONE ins | na 16 16 | 00626d | 68          |                 pla                  
 775:000 | DONE ins | na 16 16 | 00626e | 85 16       |                 sta.d 000216         
 776:000 | DONE wsp | na 16 16 |        |             |
 777:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
 778:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
 779:000 | DONE ins | na 16 16 | 006270 | 98          |                 tya                  force flag check
 780:000 | DONE ins | na 16 16 | 006271 | f0 06       |                 beq 006279           flag is false (zero), so we branch
 781:000 | DONE wsp | na 16 16 |        |             |
 782:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
 783:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
 784:000 | DONE ins | na 16 16 | 006273 | a5 16       |                 lda.d 000216         
 785:000 | DONE ins | na 16 16 | 006275 | 1a          |                 inc.a                
 786:000 | DONE ins | na 16 16 | 006276 | 1a          |                 inc.a                
 787:000 | DONE wsp | na 16 16 |        |             |
 788:000 | DONE ins | na 16 16 | 006277 | 80 06       |                 bra 00627f           
 789:000 | DONE wsp | na 16 16 |        |             |
 790:000 | DONE lbl | na 16 16 | 006279 |             | zb_zero                              
 791:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
 792:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
 793:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
 794:000 | DONE ins | na 16 16 | 006279 | a0 01 00    |                 ldy.# 0001           
 795:000 | DONE ins | na 16 16 | 00627c | b1 16       |                 lda.diy 000216       
 796:000 | DONE wsp | na 16 16 |        |             |
 797:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
 798:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
 799:000 | DONE ins | na 16 16 | 00627e | 3a          |                 dec.a                
 800:000 | DONE wsp | na 16 16 |        |             |
 801:000 | DONE lbl | na 16 16 | 00627f |             | zb_done                              
 802:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
 803:000 | DONE ins | na 16 16 | 00627f | 48          |                 pha                  
 804:000 | DONE wsp | na 16 16 |        |             |
 805:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
 806:000 | DONE ins | na 16 16 | 006280 | b4 00       |                 ldy.dx 00            
 807:000 | DONE ins | na 16 16 | 006282 | e8          |                 inx                  
 808:000 | DONE ins | na 16 16 | 006283 | e8          |                 inx                  
 809:000 | DONE wsp | na 16 16 |        |             |
 810:000 | DONE ins | na 16 16 | 006284 | 60          |                 rts                  
 811:000 | DONE wsp | na 16 16 |        |             |
 812:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 813:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 814:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 815:000 | DONE lbl | na 16 16 | 006285 |             | xt_one                               
 816:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 817:000 | DONE ins | na 16 16 | 006285 | ca          |                 dex                  
 818:000 | DONE ins | na 16 16 | 006286 | ca          |                 dex                  
 819:000 | DONE ins | na 16 16 | 006287 | 94 00       |                 sty.dx 00            
 820:000 | DONE ins | na 16 16 | 006289 | a0 01 00    |                 ldy.# 0001           
 821:000 | DONE wsp | na 16 16 |        |             |
 822:000 | DONE lbl | na 16 16 | 00628c |             | z_one                                
 822:001 | DONE ins | na 16 16 | 00628c | 60          |                 rts                  
 823:000 | DONE wsp | na 16 16 |        |             |
 824:000 | DONE wsp | na 16 16 |        |             |
 825:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 826:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 827:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 828:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 829:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 830:000 | DONE lbl | na 16 16 | 00628d |             | xt_one-minus                         
 831:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 832:000 | DONE ins | na 16 16 | 00628d | 88          |                 dey                  
 833:000 | DONE lbl | na 16 16 | 00628e |             | z_one-minus                          
 833:001 | DONE ins | na 16 16 | 00628e | 60          |                 rts                  
 834:000 | DONE wsp | na 16 16 |        |             |
 835:000 | DONE wsp | na 16 16 |        |             |
 836:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 837:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 838:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 839:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 840:000 | DONE lbl | na 16 16 | 00628f |             | xt_one-plus                          
 841:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 842:000 | DONE ins | na 16 16 | 00628f | c8          |                 iny                  
 843:000 | DONE lbl | na 16 16 | 006290 |             | z_one-plus                           
 843:001 | DONE ins | na 16 16 | 006290 | 60          |                 rts                  
 844:000 | DONE wsp | na 16 16 |        |             |
 845:000 | DONE wsp | na 16 16 |        |             |
 846:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 847:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 848:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 849:000 | DONE lbl | na 16 16 | 006291 |             | xt_two                               
 850:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 851:000 | DONE ins | na 16 16 | 006291 | ca          |                 dex                  
 852:000 | DONE ins | na 16 16 | 006292 | ca          |                 dex                  
 853:000 | DONE ins | na 16 16 | 006293 | 94 00       |                 sty.dx 00            
 854:000 | DONE ins | na 16 16 | 006295 | a0 02 00    |                 ldy.# 0002           
 855:000 | DONE wsp | na 16 16 |        |             |
 856:000 | DONE lbl | na 16 16 | 006298 |             | z_two                                
 856:001 | DONE ins | na 16 16 | 006298 | 60          |                 rts                  
 857:000 | DONE wsp | na 16 16 |        |             |
 858:000 | DONE wsp | na 16 16 |        |             |
 859:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 860:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 861:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 862:000 | DONE lbl | na 16 16 | 006299 |             | xt_two-star                          
 863:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 864:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 865:000 | DONE ins | na 16 16 | 006299 | 98          |                 tya                  
 866:000 | DONE ins | na 16 16 | 00629a | 0a          |                 asl.a                
 867:000 | DONE ins | na 16 16 | 00629b | a8          |                 tay                  
 868:000 | DONE wsp | na 16 16 |        |             |
 869:000 | DONE lbl | na 16 16 | 00629c |             | z_two-star                           
 869:001 | DONE ins | na 16 16 | 00629c | 60          |                 rts                  
 870:000 | DONE wsp | na 16 16 |        |             |
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 873:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
 874:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
 875:000 | DONE lbl | na 16 16 | 00629d |             | xt_2drop                             
 876:000 | DONE ins | na 16 16 | 00629d | b4 02       |                 ldy.dx 02            
 877:000 | DONE ins | na 16 16 | 00629f | e8          |                 inx                  
 878:000 | DONE ins | na 16 16 | 0062a0 | e8          |                 inx                  
 879:000 | DONE ins | na 16 16 | 0062a1 | e8          |                 inx                  
 880:000 | DONE ins | na 16 16 | 0062a2 | e8          |                 inx                  
 881:000 | DONE wsp | na 16 16 |        |             |
 882:000 | DONE lbl | na 16 16 | 0062a3 |             | z_2drop                              
 882:001 | DONE ins | na 16 16 | 0062a3 | 60          |                 rts                  
 883:000 | DONE wsp | na 16 16 |        |             |
 884:000 | DONE wsp | na 16 16 |        |             |
 885:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 886:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 887:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 888:000 | DONE wsp | na 16 16 |        |             |
 889:000 | DONE lbl | na 16 16 | 0062a4 |             | xt_2dup                              
 890:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 891:000 | DONE ins | na 16 16 | 0062a4 | ca          |                 dex                  
 892:000 | DONE ins | na 16 16 | 0062a5 | ca          |                 dex                  
 893:000 | DONE ins | na 16 16 | 0062a6 | ca          |                 dex                  
 894:000 | DONE ins | na 16 16 | 0062a7 | ca          |                 dex                  
 895:000 | DONE ins | na 16 16 | 0062a8 | 94 02       |                 sty.dx 02            
 896:000 | DONE ins | na 16 16 | 0062aa | b5 04       |                 lda.dx 04            
 897:000 | DONE ins | na 16 16 | 0062ac | 95 00       |                 sta.dx 00            
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE lbl | na 16 16 | 0062ae |             | z_2dup                               
 899:001 | DONE ins | na 16 16 | 0062ae | 60          |                 rts                  
 900:000 | DONE wsp | na 16 16 |        |             |
 901:000 | DONE wsp | na 16 16 |        |             |
 902:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 903:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 904:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 905:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 906:000 | DONE lbl | na 16 16 | 0062af |             | xt_tick                              
 907:000 | DONE ins | na 16 16 | 0062af | 20 b4 66    |                 jsr 0066b4           ( -- addr u )
 908:000 | DONE wsp | na 16 16 |        |             |
 909:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
 910:000 | DONE ins | na 16 16 | 0062b2 | 98          |                 tya                  force flag check
 911:000 | DONE ins | na 16 16 | 0062b3 | d0 06       |                 bne 0062bb           
 912:000 | DONE wsp | na 16 16 |        |             |
 913:000 | DONE ins | na 16 16 | 0062b5 | a9 73 72    |                 lda.# 007273         
 914:000 | DONE ins | na 16 16 | 0062b8 | 4c 1e 6f    |                 jmp 006f1e           
 915:000 | DONE wsp | na 16 16 |        |             |
 916:000 | DONE lbl | na 16 16 | 0062bb |             | tick_have_word                       
 917:000 | DONE ins | na 16 16 | 0062bb | 20 91 65    |                 jsr 006591           ( addr u -- nt)
 918:000 | DONE ins | na 16 16 | 0062be | 98          |                 tya                  force flag check
 919:000 | DONE wsp | na 16 16 |        |             |
 920:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 921:000 | DONE ins | na 16 16 | 0062bf | d0 06       |                 bne 0062c7           
 922:000 | DONE wsp | na 16 16 |        |             |
 923:000 | DONE ins | na 16 16 | 0062c1 | a9 10 73    |                 lda.# 007310         
 924:000 | DONE ins | na 16 16 | 0062c4 | 4c 1e 6f    |                 jmp 006f1e           
 925:000 | DONE wsp | na 16 16 |        |             |
 926:000 | DONE lbl | na 16 16 | 0062c7 |             | tick_have_nt                         
 927:000 | DONE ins | na 16 16 | 0062c7 | 20 69 66    |                 jsr 006669           ( nt -- xt )
 928:000 | DONE wsp | na 16 16 |        |             |
 929:000 | DONE lbl | na 16 16 | 0062ca |             | z_tick                               
 929:001 | DONE ins | na 16 16 | 0062ca | 60          |                 rts                  
 930:000 | DONE wsp | na 16 16 |        |             |
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 933:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 934:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 935:000 | DONE lbl | na 16 16 | 0062cb |             | xt_abs                               
 936:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 937:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 938:000 | DONE ins | na 16 16 | 0062cb | 98          |                 tya                  force flag test
 939:000 | DONE ins | na 16 16 | 0062cc | 10 05       |                 bpl 0062d3           positive number is easy
 940:000 | DONE wsp | na 16 16 |        |             |
 941:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 942:000 | DONE ins | na 16 16 | 0062ce | 49 ff ff    |                 eor.# 0ffff          
 943:000 | DONE ins | na 16 16 | 0062d1 | 1a          |                 inc.a                
 944:000 | DONE ins | na 16 16 | 0062d2 | a8          |                 tay                  
 945:000 | DONE wsp | na 16 16 |        |             |
 946:000 | DONE lbl | na 16 16 | 0062d3 |             | z_abs                                
 946:001 | DONE ins | na 16 16 | 0062d3 | 60          |                 rts                  
 947:000 | DONE wsp | na 16 16 |        |             |
 948:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 949:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 950:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 951:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 952:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 953:000 | DONE lbl | na 16 16 | 0062d4 |             | xt_accept                            
 954:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 955:000 | DONE ins | na 16 16 | 0062d4 | 98          |                 tya                  force flag test
 956:000 | DONE ins | na 16 16 | 0062d5 | d0 03       |                 bne 0062da           
 957:000 | DONE wsp | na 16 16 |        |             |
 958:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 959:000 | DONE ins | na 16 16 | 0062d7 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
 960:000 | DONE ins | na 16 16 | 0062d8 | e8          |                 inx                  
 961:000 | DONE wsp | na 16 16 |        |             |
 962:000 | DONE ins | na 16 16 | 0062d9 | 60          |                 rts                  
 963:000 | DONE wsp | na 16 16 |        |             |
 964:000 | DONE lbl | na 16 16 | 0062da |             | accept_nonzero                       
 965:000 | DONE ins | na 16 16 | 0062da | b5 00       |                 lda.dx 00            address of buffer is NOS
 966:000 | DONE ins | na 16 16 | 0062dc | 85 16       |                 sta.d 000216         
 967:000 | DONE ins | na 16 16 | 0062de | e8          |                 inx                  NIP
 968:000 | DONE ins | na 16 16 | 0062df | e8          |                 inx                  
 969:000 | DONE wsp | na 16 16 |        |             |
 970:000 | DONE ins | na 16 16 | 0062e0 | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
 971:000 | DONE ins | na 16 16 | 0062e2 | a0 00 00    |                 ldy.# 0000           Use Y as counter
 972:000 | DONE ins | na 16 16 | 0062e5 | e2 20       |                 sep 20               
 972:001 | DONE ctl | na  8 16 |        |             |         .!a8
 973:000 | DONE wsp | na  8 16 |        |             |
 974:000 | DONE lbl | na  8 16 | 0062e7 |             | accept_loop                          
 975:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 976:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
 977:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 978:000 | DONE ins | na  8 16 | 0062e7 | 20 47 60    |                 jsr 006047           
 979:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 980:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
 981:000 | DONE ins | na  8 16 | 0062ea | c9 0a       |                 cmp.# AscLF          
 982:000 | DONE ins | na  8 16 | 0062ec | f0 44       |                 beq 006332           
 983:000 | DONE ins | na  8 16 | 0062ee | c9 0d       |                 cmp.# AscCR          
 984:000 | DONE ins | na  8 16 | 0062f0 | f0 40       |                 beq 006332           
 985:000 | DONE wsp | na  8 16 |        |             |
 986:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
 987:000 | DONE ins | na  8 16 | 0062f2 | c9 08       |                 cmp.# AscBS          
 988:000 | DONE ins | na  8 16 | 0062f4 | f0 44       |                 beq 00633a           
 989:000 | DONE ins | na  8 16 | 0062f6 | c9 7f       |                 cmp.# AscDEL         
 990:000 | DONE ins | na  8 16 | 0062f8 | f0 40       |                 beq 00633a           
 991:000 | DONE wsp | na  8 16 |        |             |
 992:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
 993:000 | DONE ins | na  8 16 | 0062fa | c9 03       |                 cmp.# AscCC          
 994:000 | DONE ins | na  8 16 | 0062fc | d0 03       |                 bne 006301           
 995:000 | DONE ins | na  8 16 | 0062fe | 4c 97 60    |                 jmp 006097           
 996:000 | DONE lbl | na  8 16 | 006301 |             | @                                    
 997:000 | DONE ins | na  8 16 | 006301 | c9 1b       |                 cmp.# AscESC         
 998:000 | DONE ins | na  8 16 | 006303 | d0 03       |                 bne 006308           
 999:000 | DONE ins | na  8 16 | 006305 | 4c 97 60    |                 jmp 006097           
1000:000 | DONE lbl | na  8 16 | 006308 |             | @                                    
1001:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1002:000 | DONE ins | na  8 16 | 006308 | c9 10       |                 cmp.# AscCP          
1003:000 | DONE ins | na  8 16 | 00630a | d0 0c       |                 bne 006318           
1004:000 | DONE ins | na  8 16 | 00630c | c2 20       |                 rep 20               
1004:001 | DONE ctl | na 16 16 |        |             |         .!a16
1005:000 | DONE ins | na 16 16 | 00630e | a9 29 73    |                 lda.# 007329         
1006:000 | DONE ins | na 16 16 | 006311 | 20 24 6f    |                 jsr 006f24           
1007:000 | DONE ins | na 16 16 | 006314 | e2 20       |                 sep 20               
1007:001 | DONE ctl | na  8 16 |        |             |         .!a8
1008:000 | DONE ins | na  8 16 | 006316 | 80 cf       |                 bra 0062e7           
1009:000 | DONE lbl | na  8 16 | 006318 |             | @                                    
1010:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1011:000 | DONE ins | na  8 16 | 006318 | c9 0e       |                 cmp.# AscCN          
1012:000 | DONE ins | na  8 16 | 00631a | d0 0c       |                 bne 006328           
1013:000 | DONE ins | na  8 16 | 00631c | c2 20       |                 rep 20               
1013:001 | DONE ctl | na 16 16 |        |             |         .!a16
1014:000 | DONE ins | na 16 16 | 00631e | a9 3c 73    |                 lda.# 00733c         
1015:000 | DONE ins | na 16 16 | 006321 | 20 24 6f    |                 jsr 006f24           
1016:000 | DONE ins | na 16 16 | 006324 | e2 20       |                 sep 20               
1016:001 | DONE ctl | na  8 16 |        |             |         .!a8
1017:000 | DONE ins | na  8 16 | 006326 | 80 bf       |                 bra 0062e7           
1018:000 | DONE wsp | na  8 16 |        |             |
1019:000 | DONE lbl | na  8 16 | 006328 |             | @                                    
1020:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
1021:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
1022:000 | DONE ins | na  8 16 | 006328 | 20 36 60    |                 jsr 006036           echo character
1023:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1024:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
1025:000 | DONE wsp | na  8 16 |        |             |
1026:000 | DONE ins | na  8 16 | 00632b | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
1027:000 | DONE ins | na  8 16 | 00632d | c8          |                 iny                  
1028:000 | DONE ins | na  8 16 | 00632e | c4 18       |                 cpy.d 000218         reached character limit?
1029:000 | DONE ins | na  8 16 | 006330 | d0 b5       |                 bne 0062e7           fall thru if buffer limit reached
1030:000 | DONE wsp | na  8 16 |        |             |
1031:000 | DONE lbl | na  8 16 | 006332 |             | accept_eol                           
1032:000 | DONE ins | na  8 16 | 006332 | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
1033:000 | DONE ins | na  8 16 | 006334 | c2 20       |                 rep 20               
1033:001 | DONE ctl | na 16 16 |        |             |         .!a16
1034:000 | DONE ins | na 16 16 | 006336 | 20 11 68    |                 jsr 006811           print final space
1035:000 | DONE ins | na 16 16 | 006339 | 60          |                 rts                  this is the actual return of the routine
1036:000 | DONE wsp | na 16 16 |        |             |
1037:000 | DONE lbl | na 16 16 | 00633a |             | accept_bs                            
1038:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1039:000 | DONE ins | na  8 16 | 00633a | c0 00 00    |                 cpy.# 0000           buffer empty?
1040:000 | DONE ins | na  8 16 | 00633d | d0 06       |                 bne 006345           
1041:000 | DONE wsp | na  8 16 |        |             |
1042:000 | DONE ins | na  8 16 | 00633f | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
1043:000 | DONE ins | na  8 16 | 006341 | 20 36 60    |                 jsr 006036           
1044:000 | DONE ins | na  8 16 | 006344 | c8          |                 iny                  
1045:000 | DONE lbl | na  8 16 | 006345 |             | @                                    
1046:000 | DONE ins | na  8 16 | 006345 | 88          |                 dey                  
1047:000 | DONE ins | na  8 16 | 006346 | a9 08       |                 lda.# AscBS          move back one
1048:000 | DONE ins | na  8 16 | 006348 | 20 36 60    |                 jsr 006036           
1049:000 | DONE ins | na  8 16 | 00634b | a9 20       |                 lda.# AscSP          print a space (rubout)
1050:000 | DONE ins | na  8 16 | 00634d | 20 36 60    |                 jsr 006036           
1051:000 | DONE ins | na  8 16 | 006350 | a9 08       |                 lda.# AscBS          move back over space
1052:000 | DONE ins | na  8 16 | 006352 | 20 36 60    |                 jsr 006036           
1053:000 | DONE wsp | na  8 16 |        |             |
1054:000 | DONE ins | na  8 16 | 006355 | 80 90       |                 bra 0062e7           
1055:000 | DONE wsp | na  8 16 |        |             |
1056:000 | DONE lbl | na  8 16 | 006357 |             | z_accept                             
1056:001 | DONE ins | na  8 16 | 006357 | 60          |                 rts                  
1057:000 | DONE wsp | na  8 16 |        |             |
1058:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1059:000 | DONE cmt | na  8 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1060:000 | DONE cmt | na  8 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1061:000 | DONE cmt | na  8 16 |        |             | ; instead of BRA to make sure we have the range.
1062:000 | DONE cmt | na  8 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1063:000 | DONE lbl | na  8 16 | 006358 |             | xt_again                             
1064:000 | DONE wsp | na  8 16 |        |             |
1065:000 | DONE cmt | na  8 16 |        |             |                 ; Add the opcode for a JMP
1066:000 | DONE ins | na  8 16 | 006358 | e2 20       |                 sep 20               
1066:001 | DONE ctl | na  8 16 |        |             |         .!a8
1067:000 | DONE ins | na  8 16 | 00635a | a9 4c       |                 lda.# 4c             
1068:000 | DONE ins | na  8 16 | 00635c | 92 00       |                 sta.di 000200        STA (CP)
1069:000 | DONE ins | na  8 16 | 00635e | c2 20       |                 rep 20               
1069:001 | DONE ctl | na 16 16 |        |             |         .!a16
1070:000 | DONE ins | na 16 16 | 006360 | e6 00       |                 inc.d 000200         
1071:000 | DONE wsp | na 16 16 |        |             |
1072:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1073:000 | DONE ins | na 16 16 | 006362 | 98          |                 tya                  
1074:000 | DONE ins | na 16 16 | 006363 | 92 00       |                 sta.di 000200        
1075:000 | DONE ins | na 16 16 | 006365 | e6 00       |                 inc.d 000200         
1076:000 | DONE ins | na 16 16 | 006367 | e6 00       |                 inc.d 000200         
1077:000 | DONE wsp | na 16 16 |        |             |
1078:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1079:000 | DONE ins | na 16 16 | 006369 | b4 00       |                 ldy.dx 00            
1080:000 | DONE ins | na 16 16 | 00636b | e8          |                 inx                  
1081:000 | DONE ins | na 16 16 | 00636c | e8          |                 inx                  
1082:000 | DONE wsp | na 16 16 |        |             |
1083:000 | DONE lbl | na 16 16 | 00636d |             | z_again                              
1083:001 | DONE ins | na 16 16 | 00636d | 60          |                 rts                  
1084:000 | DONE wsp | na 16 16 |        |             |
1085:000 | DONE wsp | na 16 16 |        |             |
1086:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1087:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1088:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1089:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1090:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1091:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1092:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1093:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1094:000 | DONE lbl | na 16 16 | 00636e |             | xt_allot                             
1095:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1096:000 | DONE ins | na 16 16 | 00636e | 98          |                 tya                  force flag check
1097:000 | DONE ins | na 16 16 | 00636f | f0 21       |                 beq 006392           zero bytes, don't do anything
1098:000 | DONE ins | na 16 16 | 006371 | 30 12       |                 bmi 006385           free memory instead of reserving it
1099:000 | DONE wsp | na 16 16 |        |             |
1100:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1101:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1102:000 | DONE ins | na 16 16 | 006373 | 18          |                 clc                  
1103:000 | DONE ins | na 16 16 | 006374 | 65 00       |                 adc.d 000200         create new CP
1104:000 | DONE ins | na 16 16 | 006376 | b0 07       |                 bcs 00637f           oops, we've wrapped
1105:000 | DONE wsp | na 16 16 |        |             |
1106:000 | DONE ins | na 16 16 | 006378 | a8          |                 tay                  save copy of new CP
1107:000 | DONE wsp | na 16 16 |        |             |
1108:000 | DONE ins | na 16 16 | 006379 | 38          |                 sec                  
1109:000 | DONE ins | na 16 16 | 00637a | e9 ff 7b    |                 sbc.# 007bff         
1110:000 | DONE ins | na 16 16 | 00637d | 30 11       |                 bmi 006390           oops, fall thru if beyond max RAM
1111:000 | DONE wsp | na 16 16 |        |             |
1112:000 | DONE lbl | na 16 16 | 00637f |             | allot_error                          
1113:000 | DONE ins | na 16 16 | 00637f | a9 d4 71    |                 lda.# 0071d4         
1114:000 | DONE ins | na 16 16 | 006382 | 4c 1e 6f    |                 jmp 006f1e           
1115:000 | DONE wsp | na 16 16 |        |             |
1116:000 | DONE lbl | na 16 16 | 006385 |             | allot_minus                          
1117:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1118:000 | DONE ins | na 16 16 | 006385 | 38          |                 sec                  
1119:000 | DONE ins | na 16 16 | 006386 | e5 00       |                 sbc.d 000200         
1120:000 | DONE ins | na 16 16 | 006388 | 90 f5       |                 bcc 00637f           oops, we've wrapped
1121:000 | DONE wsp | na 16 16 |        |             |
1122:000 | DONE ins | na 16 16 | 00638a | a8          |                 tay                  
1123:000 | DONE wsp | na 16 16 |        |             |
1124:000 | DONE ins | na 16 16 | 00638b | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1125:000 | DONE ins | na 16 16 | 00638e | 30 ef       |                 bmi 00637f           oops, gone too far back
1126:000 | DONE wsp | na 16 16 |        |             |
1127:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1128:000 | DONE lbl | na 16 16 | 006390 |             | allot_done                           
1129:000 | DONE ins | na 16 16 | 006390 | 84 00       |                 sty.d 000200         new compiler pointer
1130:000 | DONE lbl | na 16 16 | 006392 |             | allot_real_gone                      
1131:000 | DONE ins | na 16 16 | 006392 | b4 00       |                 ldy.dx 00            DROP
1132:000 | DONE ins | na 16 16 | 006394 | e8          |                 inx                  
1133:000 | DONE ins | na 16 16 | 006395 | e8          |                 inx                  
1134:000 | DONE wsp | na 16 16 |        |             |
1135:000 | DONE lbl | na 16 16 | 006396 |             | z_allot                              
1135:001 | DONE ins | na 16 16 | 006396 | 60          |                 rts                  
1136:000 | DONE wsp | na 16 16 |        |             |
1137:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1138:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1139:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1140:000 | DONE lbl | na 16 16 | 006397 |             | xt_and                               
1141:000 | DONE ins | na 16 16 | 006397 | 98          |                 tya                  
1142:000 | DONE ins | na 16 16 | 006398 | 35 00       |                 and.dx 00            
1143:000 | DONE ins | na 16 16 | 00639a | a8          |                 tay                  
1144:000 | DONE wsp | na 16 16 |        |             |
1145:000 | DONE ins | na 16 16 | 00639b | e8          |                 inx                  NIP
1146:000 | DONE ins | na 16 16 | 00639c | e8          |                 inx                  
1147:000 | DONE wsp | na 16 16 |        |             |
1148:000 | DONE lbl | na 16 16 | 00639d |             | z_and                                
1148:001 | DONE ins | na 16 16 | 00639d | 60          |                 rts                  
1149:000 | DONE wsp | na 16 16 |        |             |
1150:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1151:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1152:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1153:000 | DONE lbl | na 16 16 | 00639e |             | xt_base                              
1154:000 | DONE ins | na 16 16 | 00639e | ca          |                 dex                  
1155:000 | DONE ins | na 16 16 | 00639f | ca          |                 dex                  
1156:000 | DONE ins | na 16 16 | 0063a0 | 94 00       |                 sty.dx 00            
1157:000 | DONE wsp | na 16 16 |        |             |
1158:000 | DONE ins | na 16 16 | 0063a2 | a0 1c 02    |                 ldy.# 00021c         
1159:000 | DONE wsp | na 16 16 |        |             |
1160:000 | DONE lbl | na 16 16 | 0063a5 |             | z_base                               
1160:001 | DONE ins | na 16 16 | 0063a5 | 60          |                 rts                  
1161:000 | DONE wsp | na 16 16 |        |             |
1162:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1163:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1164:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1165:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1166:000 | DONE lbl | na 16 16 | 0063a6 |             | xt_bell                              
1167:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1168:000 | DONE ins | na 16 16 | 0063a6 | a9 07 00    |                 lda.# AscBELL        
1169:000 | DONE ins | na 16 16 | 0063a9 | 20 36 60    |                 jsr 006036           
1170:000 | DONE wsp | na 16 16 |        |             |
1171:000 | DONE lbl | na 16 16 | 0063ac |             | z_bell                               
1171:001 | DONE ins | na 16 16 | 0063ac | 60          |                 rts                  
1172:000 | DONE wsp | na 16 16 |        |             |
1173:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1174:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1175:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1176:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1177:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1178:000 | DONE lbl | na 16 16 | 0063ad |             | xt_begin                             
1179:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1180:000 | DONE ins | na 16 16 | 0063ad | ca          |                 dex                  
1181:000 | DONE ins | na 16 16 | 0063ae | ca          |                 dex                  
1182:000 | DONE ins | na 16 16 | 0063af | 94 00       |                 sty.dx 00            
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE ins | na 16 16 | 0063b1 | a4 00       |                 ldy.d 000200         
1185:000 | DONE wsp | na 16 16 |        |             |
1186:000 | DONE lbl | na 16 16 | 0063b3 |             | z_begin                              
1186:001 | DONE ins | na 16 16 | 0063b3 | 60          |                 rts                  
1187:000 | DONE wsp | na 16 16 |        |             |
1188:000 | DONE wsp | na 16 16 |        |             |
1189:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1190:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1191:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1192:000 | DONE lbl | na 16 16 | 0063b4 |             | xt_bl                                
1193:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1194:000 | DONE ins | na 16 16 | 0063b4 | ca          |                 dex                  
1195:000 | DONE ins | na 16 16 | 0063b5 | ca          |                 dex                  
1196:000 | DONE ins | na 16 16 | 0063b6 | 94 00       |                 sty.dx 00            
1197:000 | DONE ins | na 16 16 | 0063b8 | a0 20 00    |                 ldy.# AscSP          
1198:000 | DONE wsp | na 16 16 |        |             |
1199:000 | DONE lbl | na 16 16 | 0063bb |             | z_bl                                 
1199:001 | DONE ins | na 16 16 | 0063bb | 60          |                 rts                  
1200:000 | DONE wsp | na 16 16 |        |             |
1201:000 | DONE wsp | na 16 16 |        |             |
1202:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1203:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1204:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. Uses tmp3 and tmptos
1205:000 | DONE lbl | na 16 16 | 0063bc |             | xt_branch                            
1206:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1207:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1208:000 | DONE ins | na 16 16 | 0063bc | f4 c3 63    |                 phe.# 0063c3         
1209:000 | DONE ins | na 16 16 | 0063bf | 20 fd 6e    |                 jsr 006efd           
1210:000 | DONE wsp | na 16 16 |        |             |
1211:000 | DONE lbl | na 16 16 | 0063c2 |             | z_branch                             
1211:001 | DONE ins | na 16 16 | 0063c2 | 60          |                 rts                  
1212:000 | DONE wsp | na 16 16 |        |             |
1213:000 | DONE lbl | na 16 16 | 0063c3 |             | branch_rt                            
1214:000 | DONE ins | na 16 16 | 0063c3 | 84 06       |                 sty.d 000206         
1215:000 | DONE wsp | na 16 16 |        |             |
1216:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1217:000 | DONE ins | na 16 16 | 0063c5 | 68          |                 pla                  
1218:000 | DONE ins | na 16 16 | 0063c6 | 85 1a       |                 sta.d 00021a         
1219:000 | DONE ins | na 16 16 | 0063c8 | a0 01 00    |                 ldy.# 0001           
1220:000 | DONE ins | na 16 16 | 0063cb | b1 1a       |                 lda.diy 00021a       LDA (TMP1),Y ; get address we're pointing to
1221:000 | DONE ins | na 16 16 | 0063cd | 3a          |                 dec.a                
1222:000 | DONE ins | na 16 16 | 0063ce | 48          |                 pha                  put target address back on Return Stack
1223:000 | DONE wsp | na 16 16 |        |             |
1224:000 | DONE ins | na 16 16 | 0063cf | a4 06       |                 ldy.d 000206         
1225:000 | DONE wsp | na 16 16 |        |             |
1226:000 | DONE ins | na 16 16 | 0063d1 | 60          |                 rts                  
1227:000 | DONE wsp | na 16 16 |        |             |
1228:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1229:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1230:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1231:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
1232:000 | DONE lbl | na 16 16 | 0063d2 |             | xt_bye                               
1233:000 | DONE ins | na 16 16 | 0063d2 | 58          |                 cli                  
1234:000 | DONE ins | na 16 16 | 0063d3 | 00 00       |                 brk 00               status byte 00 required for assembler
1235:000 | DONE wsp | na 16 16 |        |             |
1236:000 | DONE lbl | na 16 16 | 0063d5 |             | z_bye                                
1236:001 | DONE ins | na 16 16 | 0063d5 | 60          |                 rts                  dummy for compiling, never reached
1237:000 | DONE wsp | na 16 16 |        |             |
1238:000 | DONE wsp | na 16 16 |        |             |
1239:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1240:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1241:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
1242:000 | DONE lbl | na 16 16 | 0063d6 |             | xt_c-comma                           
1243:000 | DONE ins | na 16 16 | 0063d6 | 98          |                 tya                  
1244:000 | DONE ins | na 16 16 | 0063d7 | e2 20       |                 sep 20               
1244:001 | DONE ctl | na  8 16 |        |             |         .!a8
1245:000 | DONE ins | na  8 16 | 0063d9 | 92 00       |                 sta.di 000200        STA (CP)
1246:000 | DONE ins | na  8 16 | 0063db | c2 20       |                 rep 20               
1246:001 | DONE ctl | na 16 16 |        |             |         .!a16
1247:000 | DONE ins | na 16 16 | 0063dd | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
1248:000 | DONE wsp | na 16 16 |        |             |
1249:000 | DONE ins | na 16 16 | 0063df | b4 00       |                 ldy.dx 00            
1250:000 | DONE ins | na 16 16 | 0063e1 | e8          |                 inx                  
1251:000 | DONE ins | na 16 16 | 0063e2 | e8          |                 inx                  
1252:000 | DONE wsp | na 16 16 |        |             |
1253:000 | DONE lbl | na 16 16 | 0063e3 |             | z_c-comma                            
1253:001 | DONE ins | na 16 16 | 0063e3 | 60          |                 rts                  
1254:000 | DONE wsp | na 16 16 |        |             |
1255:000 | DONE wsp | na 16 16 |        |             |
1256:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1257:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1258:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
1259:000 | DONE lbl | na 16 16 | 0063e4 |             | xt_c-fetch                           
1260:000 | DONE ins | na 16 16 | 0063e4 | e2 20       |                 sep 20               
1260:001 | DONE ctl | na  8 16 |        |             |         .!a8
1261:000 | DONE ins | na  8 16 | 0063e6 | b9 00 00    |                 lda.y 0000           
1262:000 | DONE ins | na  8 16 | 0063e9 | c2 20       |                 rep 20               
1262:001 | DONE ctl | na 16 16 |        |             |         .!a16
1263:000 | DONE ins | na 16 16 | 0063eb | 29 ff 00    |                 and.# 00ff           
1264:000 | DONE ins | na 16 16 | 0063ee | a8          |                 tay                  
1265:000 | DONE wsp | na 16 16 |        |             |
1266:000 | DONE lbl | na 16 16 | 0063ef |             | z_c-fetch                            
1266:001 | DONE ins | na 16 16 | 0063ef | 60          |                 rts                  
1267:000 | DONE wsp | na 16 16 |        |             |
1268:000 | DONE wsp | na 16 16 |        |             |
1269:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1270:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1271:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
1272:000 | DONE lbl | na 16 16 | 0063f0 |             | xt_c-store                           
1273:000 | DONE ins | na 16 16 | 0063f0 | b5 00       |                 lda.dx 00            
1274:000 | DONE ins | na 16 16 | 0063f2 | e2 20       |                 sep 20               
1274:001 | DONE ctl | na  8 16 |        |             |         .!a8
1275:000 | DONE ins | na  8 16 | 0063f4 | 99 00 00    |                 sta.y 0000           
1276:000 | DONE ins | na  8 16 | 0063f7 | c2 20       |                 rep 20               
1276:001 | DONE ctl | na 16 16 |        |             |         .!a16
1277:000 | DONE ins | na 16 16 | 0063f9 | b4 02       |                 ldy.dx 02            
1278:000 | DONE ins | na 16 16 | 0063fb | e8          |                 inx                  
1279:000 | DONE ins | na 16 16 | 0063fc | e8          |                 inx                  
1280:000 | DONE ins | na 16 16 | 0063fd | e8          |                 inx                  
1281:000 | DONE ins | na 16 16 | 0063fe | e8          |                 inx                  
1282:000 | DONE wsp | na 16 16 |        |             |
1283:000 | DONE lbl | na 16 16 | 0063ff |             | z_c-store                            
1283:001 | DONE ins | na 16 16 | 0063ff | 60          |                 rts                  
1284:000 | DONE wsp | na 16 16 |        |             |
1285:000 | DONE wsp | na 16 16 |        |             |
1286:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1287:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1288:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1289:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1290:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
1291:000 | DONE wsp | na 16 16 |        |             |
1292:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1293:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1294:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
1295:000 | DONE lbl | na 16 16 | 006400 |             | xt_char                              
1296:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1297:000 | DONE ins | na 16 16 | 006400 | 20 b4 66    |                 jsr 0066b4           ( -- addr u )
1298:000 | DONE wsp | na 16 16 |        |             |
1299:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
1300:000 | DONE ins | na 16 16 | 006403 | 98          |                 tya                  force flag check
1301:000 | DONE ins | na 16 16 | 006404 | d0 06       |                 bne 00640c           
1302:000 | DONE wsp | na 16 16 |        |             |
1303:000 | DONE ins | na 16 16 | 006406 | a9 73 72    |                 lda.# 007273         
1304:000 | DONE ins | na 16 16 | 006409 | 4c 1e 6f    |                 jmp 006f1e           
1305:000 | DONE wsp | na 16 16 |        |             |
1306:000 | DONE lbl | na 16 16 | 00640c |             | char_got_char                        
1307:000 | DONE ins | na 16 16 | 00640c | b4 00       |                 ldy.dx 00            get addr from NOS
1308:000 | DONE ins | na 16 16 | 00640e | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1309:000 | DONE ins | na 16 16 | 006411 | 29 ff 00    |                 and.# 00ff           
1310:000 | DONE ins | na 16 16 | 006414 | a8          |                 tay                  
1311:000 | DONE wsp | na 16 16 |        |             |
1312:000 | DONE ins | na 16 16 | 006415 | e8          |                 inx                  
1313:000 | DONE ins | na 16 16 | 006416 | e8          |                 inx                  
1314:000 | DONE wsp | na 16 16 |        |             |
1315:000 | DONE lbl | na 16 16 | 006417 |             | z_char                               
1315:001 | DONE ins | na 16 16 | 006417 | 60          |                 rts                  
1316:000 | DONE wsp | na 16 16 |        |             |
1317:000 | DONE wsp | na 16 16 |        |             |
1318:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1319:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1320:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1321:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1322:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1323:000 | DONE lbl | na 16 16 | 006418 |             | xt_compile-only                      
1324:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1325:000 | DONE ins | na 16 16 | 006418 | a9 04 00    |                 lda.# CO             
1326:000 | DONE ins | na 16 16 | 00641b | eb          |                 xba                  flags are MSB
1327:000 | DONE ins | na 16 16 | 00641c | 12 02       |                 ora.di 000202        ORA (DP)
1328:000 | DONE ins | na 16 16 | 00641e | 92 02       |                 sta.di 000202        
1329:000 | DONE wsp | na 16 16 |        |             |
1330:000 | DONE lbl | na 16 16 | 006420 |             | z_compile-only                       
1330:001 | DONE ins | na 16 16 | 006420 | 60          |                 rts                  
1331:000 | DONE wsp | na 16 16 |        |             |
1332:000 | DONE wsp | na 16 16 |        |             |
1333:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1334:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1335:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1336:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1337:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1338:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1339:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1340:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1341:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1342:000 | DONE lbl | na 16 16 | 006421 |             | xt_compilecomma                      
1343:000 | DONE wsp | na 16 16 |        |             |
1344:000 | DONE lbl | na 16 16 | 006421 |             | compile_as_code                      
1345:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1346:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1347:000 | DONE cmt | na 16 16 |        |             |                 ; TODO currently just compiles subroutine jumps
1348:000 | DONE wsp | na 16 16 |        |             |
1349:000 | DONE lbl | na 16 16 | 006421 |             | compile_as_jump                      
1350:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
1351:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
1352:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
1353:000 | DONE cmt | na 16 16 |        |             |                 ; win!
1354:000 | DONE ins | na 16 16 | 006421 | a9 20 00    |                 lda.# 20             opcode for JSR
1355:000 | DONE ins | na 16 16 | 006424 | 92 00       |                 sta.di 000200        STA (CP)
1356:000 | DONE ins | na 16 16 | 006426 | e6 00       |                 inc.d 000200         
1357:000 | DONE wsp | na 16 16 |        |             |
1358:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1359:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1360:000 | DONE ins | na 16 16 | 006428 | 98          |                 tya                  
1361:000 | DONE ins | na 16 16 | 006429 | 92 00       |                 sta.di 000200        
1362:000 | DONE ins | na 16 16 | 00642b | e6 00       |                 inc.d 000200         
1363:000 | DONE ins | na 16 16 | 00642d | e6 00       |                 inc.d 000200         
1364:000 | DONE wsp | na 16 16 |        |             |
1365:000 | DONE ins | na 16 16 | 00642f | b4 00       |                 ldy.dx 00            
1366:000 | DONE ins | na 16 16 | 006431 | e8          |                 inx                  
1367:000 | DONE ins | na 16 16 | 006432 | e8          |                 inx                  
1368:000 | DONE wsp | na 16 16 |        |             |
1369:000 | DONE lbl | na 16 16 | 006433 |             | z_compilecomma                       
1369:001 | DONE ins | na 16 16 | 006433 | 60          |                 rts                  
1370:000 | DONE wsp | na 16 16 |        |             |
1371:000 | DONE wsp | na 16 16 |        |             |
1372:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1373:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1374:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1375:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1376:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1377:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1378:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1379:000 | DONE lbl | na 16 16 | 006434 |             | xt_constant                          
1380:000 | DONE ins | na 16 16 | 006434 | 20 64 64    |                 jsr 006464           
1381:000 | DONE wsp | na 16 16 |        |             |
1382:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1383:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1384:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1385:000 | DONE ins | na 16 16 | 006437 | a5 00       |                 lda.d 000200         
1386:000 | DONE ins | na 16 16 | 006439 | 3a          |                 dec.a                
1387:000 | DONE ins | na 16 16 | 00643a | 3a          |                 dec.a                
1388:000 | DONE ins | na 16 16 | 00643b | 85 16       |                 sta.d 000216         
1389:000 | DONE wsp | na 16 16 |        |             |
1390:000 | DONE ins | na 16 16 | 00643d | a9 8a 6e    |                 lda.# 006e8a         
1391:000 | DONE ins | na 16 16 | 006440 | 92 16       |                 sta.di 000216        STA (TMP1)
1392:000 | DONE wsp | na 16 16 |        |             |
1393:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1394:000 | DONE ins | na 16 16 | 006442 | 98          |                 tya                  there is no "sty.di cp"
1395:000 | DONE ins | na 16 16 | 006443 | 92 00       |                 sta.di 000200        
1396:000 | DONE ins | na 16 16 | 006445 | e6 00       |                 inc.d 000200         
1397:000 | DONE ins | na 16 16 | 006447 | e6 00       |                 inc.d 000200         
1398:000 | DONE wsp | na 16 16 |        |             |
1399:000 | DONE ins | na 16 16 | 006449 | b4 00       |                 ldy.dx 00            DROP
1400:000 | DONE ins | na 16 16 | 00644b | e8          |                 inx                  
1401:000 | DONE ins | na 16 16 | 00644c | e8          |                 inx                  
1402:000 | DONE wsp | na 16 16 |        |             |
1403:000 | DONE lbl | na 16 16 | 00644d |             | z_constant                           
1403:001 | DONE ins | na 16 16 | 00644d | 60          |                 rts                  
1404:000 | DONE wsp | na 16 16 |        |             |
1405:000 | DONE wsp | na 16 16 |        |             |
1406:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1407:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1408:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1409:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
1410:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
1411:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
1412:000 | DONE lbl | na 16 16 | 00644e |             | xt_count                             
1413:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1414:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1415:000 | DONE ins | na 16 16 | 00644e | 98          |                 tya                  
1416:000 | DONE ins | na 16 16 | 00644f | 1a          |                 inc.a                String address starts one char later
1417:000 | DONE wsp | na 16 16 |        |             |
1418:000 | DONE ins | na 16 16 | 006450 | ca          |                 dex                  
1419:000 | DONE ins | na 16 16 | 006451 | ca          |                 dex                  
1420:000 | DONE ins | na 16 16 | 006452 | 95 00       |                 sta.dx 00            NOS
1421:000 | DONE wsp | na 16 16 |        |             |
1422:000 | DONE ins | na 16 16 | 006454 | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
1423:000 | DONE ins | na 16 16 | 006457 | eb          |                 xba                  move length to LSB
1424:000 | DONE ins | na 16 16 | 006458 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
1425:000 | DONE ins | na 16 16 | 00645b | a8          |                 tay                  TOS
1426:000 | DONE wsp | na 16 16 |        |             |
1427:000 | DONE lbl | na 16 16 | 00645c |             | z_count                              
1427:001 | DONE ins | na 16 16 | 00645c | 60          |                 rts                  
1428:000 | DONE wsp | na 16 16 |        |             |
1429:000 | DONE wsp | na 16 16 |        |             |
1430:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1431:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
1432:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
1433:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1434:000 | DONE lbl | na 16 16 | 00645d |             | xt_cr                                
1435:000 | DONE ins | na 16 16 | 00645d | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
1436:000 | DONE ins | na 16 16 | 006460 | 20 36 60    |                 jsr 006036           
1437:000 | DONE wsp | na 16 16 |        |             |
1438:000 | DONE lbl | na 16 16 | 006463 |             | z_cr                                 
1438:001 | DONE ins | na 16 16 | 006463 | 60          |                 rts                  
1439:000 | DONE wsp | na 16 16 |        |             |
1440:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1441:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
1442:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
1443:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
1444:000 | DONE cmt | na 16 16 |        |             | ; address.
1445:000 | DONE lbl | na 16 16 | 006464 |             | xt_create                            
1446:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1447:000 | DONE ins | na 16 16 | 006464 | 20 b4 66    |                 jsr 0066b4           ( -- addr u )
1448:000 | DONE ins | na 16 16 | 006467 | d0 06       |                 bne 00646f           
1449:000 | DONE wsp | na 16 16 |        |             |
1450:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1451:000 | DONE ins | na 16 16 | 006469 | a9 73 72    |                 lda.# 007273         
1452:000 | DONE ins | na 16 16 | 00646c | 4c 1e 6f    |                 jmp 006f1e           
1453:000 | DONE wsp | na 16 16 |        |             |
1454:000 | DONE lbl | na 16 16 | 00646f |             | create_got_name                      
1455:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1456:000 | DONE ins | na 16 16 | 00646f | 20 57 6f    |                 jsr 006f57           
1457:000 | DONE wsp | na 16 16 |        |             |
1458:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1459:000 | DONE cmt | na 16 16 |        |             |                 ; word
1460:000 | DONE ins | na 16 16 | 006472 | a5 00       |                 lda.d 000200         
1461:000 | DONE ins | na 16 16 | 006474 | 85 16       |                 sta.d 000216         save start of new word
1462:000 | DONE wsp | na 16 16 |        |             |
1463:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1464:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1465:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1466:000 | DONE ins | na 16 16 | 006476 | 98          |                 tya                  
1467:000 | DONE ins | na 16 16 | 006477 | 29 ff 00    |                 and.# 00ff           
1468:000 | DONE ins | na 16 16 | 00647a | 85 18       |                 sta.d 000218         save length of name string
1469:000 | DONE wsp | na 16 16 |        |             |
1470:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1471:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1472:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1473:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1474:000 | DONE ins | na 16 16 | 00647c | 18          |                 clc                  
1475:000 | DONE ins | na 16 16 | 00647d | 69 08 00    |                 adc.# 0008           
1476:000 | DONE ins | na 16 16 | 006480 | 85 1a       |                 sta.d 00021a         total bytes required for header
1477:000 | DONE wsp | na 16 16 |        |             |
1478:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1479:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1480:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1481:000 | DONE ins | na 16 16 | 006482 | 1a          |                 inc.a                
1482:000 | DONE ins | na 16 16 | 006483 | 1a          |                 inc.a                
1483:000 | DONE ins | na 16 16 | 006484 | 1a          |                 inc.a                
1484:000 | DONE wsp | na 16 16 |        |             |
1485:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1486:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1487:000 | DONE ins | na 16 16 | 006485 | 18          |                 clc                  
1488:000 | DONE ins | na 16 16 | 006486 | 65 00       |                 adc.d 000200         
1489:000 | DONE ins | na 16 16 | 006488 | 85 00       |                 sta.d 000200         
1490:000 | DONE wsp | na 16 16 |        |             |
1491:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1492:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1493:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1494:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1495:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1496:000 | DONE ins | na 16 16 | 00648a | b5 00       |                 lda.dx 00            
1497:000 | DONE ins | na 16 16 | 00648c | 48          |                 pha                  
1498:000 | DONE wsp | na 16 16 |        |             |
1499:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1500:000 | DONE ins | na 16 16 | 00648d | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1501:000 | DONE ins | na 16 16 | 006490 | a5 18       |                 lda.d 000218         get length byte
1502:000 | DONE ins | na 16 16 | 006492 | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1503:000 | DONE ins | na 16 16 | 006494 | c8          |                 iny                  
1504:000 | DONE ins | na 16 16 | 006495 | c8          |                 iny                  
1505:000 | DONE wsp | na 16 16 |        |             |
1506:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1507:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1508:000 | DONE ins | na 16 16 | 006496 | a5 02       |                 lda.d 000202         
1509:000 | DONE ins | na 16 16 | 006498 | 91 16       |                 sta.diy 000216       
1510:000 | DONE ins | na 16 16 | 00649a | c8          |                 iny                  
1511:000 | DONE ins | na 16 16 | 00649b | c8          |                 iny                  
1512:000 | DONE wsp | na 16 16 |        |             |
1513:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1514:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1515:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1516:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1517:000 | DONE ins | na 16 16 | 00649c | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1518:000 | DONE ins | na 16 16 | 00649e | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1519:000 | DONE wsp | na 16 16 |        |             |
1520:000 | DONE ins | na 16 16 | 0064a0 | 18          |                 clc                  
1521:000 | DONE ins | na 16 16 | 0064a1 | 65 1a       |                 adc.d 00021a         total header length
1522:000 | DONE ins | na 16 16 | 0064a3 | 91 16       |                 sta.diy 000216       
1523:000 | DONE ins | na 16 16 | 0064a5 | c8          |                 iny                  
1524:000 | DONE ins | na 16 16 | 0064a6 | c8          |                 iny                  
1525:000 | DONE wsp | na 16 16 |        |             |
1526:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1527:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1528:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1529:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1530:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1531:000 | DONE ins | na 16 16 | 0064a7 | 1a          |                 inc.a                
1532:000 | DONE ins | na 16 16 | 0064a8 | 1a          |                 inc.a                
1533:000 | DONE ins | na 16 16 | 0064a9 | 1a          |                 inc.a                
1534:000 | DONE ins | na 16 16 | 0064aa | 91 16       |                 sta.diy 000216       
1535:000 | DONE ins | na 16 16 | 0064ac | c8          |                 iny                  
1536:000 | DONE ins | na 16 16 | 0064ad | c8          |                 iny                  
1537:000 | DONE wsp | na 16 16 |        |             |
1538:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1539:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1540:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1541:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1542:000 | DONE ins | na 16 16 | 0064ae | 68          |                 pla                  get back string address
1543:000 | DONE ins | na 16 16 | 0064af | 38          |                 sec                  
1544:000 | DONE ins | na 16 16 | 0064b0 | e9 08 00    |                 sbc.# 0008           
1545:000 | DONE ins | na 16 16 | 0064b3 | 85 1a       |                 sta.d 00021a         
1546:000 | DONE ins | na 16 16 | 0064b5 | e2 20       |                 sep 20               
1546:001 | DONE ctl | na  8 16 |        |             |         .!a8
1547:000 | DONE lbl | na  8 16 | 0064b7 |             | @                                    
1548:000 | DONE ins | na  8 16 | 0064b7 | b1 1a       |                 lda.diy 00021a       
1549:000 | DONE ins | na  8 16 | 0064b9 | 91 16       |                 sta.diy 000216       
1550:000 | DONE ins | na  8 16 | 0064bb | c8          |                 iny                  
1551:000 | DONE ins | na  8 16 | 0064bc | c6 18       |                 dec.d 000218         
1552:000 | DONE ins | na  8 16 | 0064be | d0 f7       |                 bne 0064b7           
1553:000 | DONE wsp | na  8 16 |        |             |
1554:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1555:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1556:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1557:000 | DONE cmt | na  8 16 |        |             |                 ; good
1558:000 | DONE ins | na  8 16 | 0064c0 | a9 20       |                 lda.# 20             opcode of JSR
1559:000 | DONE ins | na  8 16 | 0064c2 | 91 16       |                 sta.diy 000216       
1560:000 | DONE ins | na  8 16 | 0064c4 | c8          |                 iny                  single increase only because we have 8-bit A
1561:000 | DONE wsp | na  8 16 |        |             |
1562:000 | DONE ins | na  8 16 | 0064c5 | a9 a5       |                 lda.# .lsb 006ea5    
1563:000 | DONE ins | na  8 16 | 0064c7 | 91 16       |                 sta.diy 000216       
1564:000 | DONE ins | na  8 16 | 0064c9 | c8          |                 iny                  
1565:000 | DONE wsp | na  8 16 |        |             |
1566:000 | DONE ins | na  8 16 | 0064ca | a9 6e       |                 lda.# .msb 006ea5    
1567:000 | DONE ins | na  8 16 | 0064cc | 91 16       |                 sta.diy 000216       
1568:000 | DONE wsp | na  8 16 |        |             |
1569:000 | DONE ins | na  8 16 | 0064ce | c2 20       |                 rep 20               
1569:001 | DONE ctl | na 16 16 |        |             |         .!a16
1570:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1571:000 | DONE ins | na 16 16 | 0064d0 | b4 02       |                 ldy.dx 02            
1572:000 | DONE ins | na 16 16 | 0064d2 | e8          |                 inx                  
1573:000 | DONE ins | na 16 16 | 0064d3 | e8          |                 inx                  
1574:000 | DONE ins | na 16 16 | 0064d4 | e8          |                 inx                  
1575:000 | DONE ins | na 16 16 | 0064d5 | e8          |                 inx                  
1576:000 | DONE wsp | na 16 16 |        |             |
1577:000 | DONE lbl | na 16 16 | 0064d6 |             | z_create                             
1577:001 | DONE ins | na 16 16 | 0064d6 | 60          |                 rts                  
1578:000 | DONE wsp | na 16 16 |        |             |
1579:000 | DONE wsp | na 16 16 |        |             |
1580:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1581:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1582:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1583:000 | DONE lbl | na 16 16 | 0064d7 |             | xt_decimal                           
1584:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1585:000 | DONE ins | na 16 16 | 0064d7 | a9 0a 00    |                 lda.# 000a           
1586:000 | DONE ins | na 16 16 | 0064da | 85 1c       |                 sta.d 00021c         
1587:000 | DONE wsp | na 16 16 |        |             |
1588:000 | DONE lbl | na 16 16 | 0064dc |             | z_decimal                            
1588:001 | DONE ins | na 16 16 | 0064dc | 60          |                 rts                  
1589:000 | DONE wsp | na 16 16 |        |             |
1590:000 | DONE wsp | na 16 16 |        |             |
1591:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1592:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1593:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1594:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1595:000 | DONE lbl | na 16 16 | 0064dd |             | xt_depth                             
1596:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1597:000 | DONE cmt | na 16 16 |        |             |                 ; We've got zero entries when X is dsp0
1598:000 | DONE ins | na 16 16 | 0064dd | 86 04       |                 stx.d 000204         
1599:000 | DONE ins | na 16 16 | 0064df | a9 f8 02    |                 lda.# 0002f8         
1600:000 | DONE ins | na 16 16 | 0064e2 | 38          |                 sec                  
1601:000 | DONE ins | na 16 16 | 0064e3 | e5 04       |                 sbc.d 000204         
1602:000 | DONE wsp | na 16 16 |        |             |
1603:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
1604:000 | DONE ins | na 16 16 | 0064e5 | 4a          |                 lsr.a                
1605:000 | DONE wsp | na 16 16 |        |             |
1606:000 | DONE ins | na 16 16 | 0064e6 | ca          |                 dex                  
1607:000 | DONE ins | na 16 16 | 0064e7 | ca          |                 dex                  
1608:000 | DONE ins | na 16 16 | 0064e8 | 94 00       |                 sty.dx 00            
1609:000 | DONE wsp | na 16 16 |        |             |
1610:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
1611:000 | DONE ins | na 16 16 | 0064ea | a8          |                 tay                  
1612:000 | DONE wsp | na 16 16 |        |             |
1613:000 | DONE lbl | na 16 16 | 0064eb |             | z_depth                              
1613:001 | DONE ins | na 16 16 | 0064eb | 60          |                 rts                  
1614:000 | DONE wsp | na 16 16 |        |             |
1615:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1616:000 | DONE cmt | na 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
1617:000 | DONE cmt | na 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
1618:000 | DONE lbl | na 16 16 | 0064ec |             | xt_dnegate                           
1619:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1620:000 | DONE cmt | na 16 16 |        |             |                 ; start off with LSW (in NOS)
1621:000 | DONE ins | na 16 16 | 0064ec | b5 00       |                 lda.dx 00            
1622:000 | DONE ins | na 16 16 | 0064ee | 49 ff ff    |                 eor.# 0ffff          
1623:000 | DONE wsp | na 16 16 |        |             |
1624:000 | DONE cmt | na 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
1625:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1626:000 | DONE ins | na 16 16 | 0064f1 | 18          |                 clc                  
1627:000 | DONE ins | na 16 16 | 0064f2 | 69 01 00    |                 adc.# 0001           
1628:000 | DONE ins | na 16 16 | 0064f5 | 95 00       |                 sta.dx 00            
1629:000 | DONE wsp | na 16 16 |        |             |
1630:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
1631:000 | DONE ins | na 16 16 | 0064f7 | 98          |                 tya                  
1632:000 | DONE ins | na 16 16 | 0064f8 | 49 ff ff    |                 eor.# 0ffff          
1633:000 | DONE ins | na 16 16 | 0064fb | 69 00 00    |                 adc.# 0000           we are only interested in the carry
1634:000 | DONE ins | na 16 16 | 0064fe | a8          |                 tay                  
1635:000 | DONE wsp | na 16 16 |        |             |
1636:000 | DONE lbl | na 16 16 | 0064ff |             | z_dnegate                            
1636:001 | DONE ins | na 16 16 | 0064ff | 60          |                 rts                  
1637:000 | DONE wsp | na 16 16 |        |             |
1638:000 | DONE wsp | na 16 16 |        |             |
1639:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1640:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
1641:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
1642:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
1643:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
1644:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
1645:000 | DONE lbl | na 16 16 | 006500 |             | xt_does                              
1646:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
1647:000 | DONE ins | na 16 16 | 006500 | f4 0d 65    |                 phe.# 00650d         
1648:000 | DONE ins | na 16 16 | 006503 | 20 fd 6e    |                 jsr 006efd           
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
1651:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
1652:000 | DONE ins | na 16 16 | 006506 | f4 98 6e    |                 phe.# 006e98         
1653:000 | DONE ins | na 16 16 | 006509 | 20 fd 6e    |                 jsr 006efd           
1654:000 | DONE wsp | na 16 16 |        |             |
1655:000 | DONE lbl | na 16 16 | 00650c |             | z_does                               
1655:001 | DONE ins | na 16 16 | 00650c | 60          |                 rts                  
1656:000 | DONE wsp | na 16 16 |        |             |
1657:000 | DONE lbl | na 16 16 | 00650d |             | does_rt                              
1658:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
1659:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
1660:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
1661:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
1662:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
1663:000 | DONE ins | na 16 16 | 00650d | 68          |                 pla                  
1664:000 | DONE ins | na 16 16 | 00650e | 1a          |                 inc.a                increase by one because of RTS mechanics
1665:000 | DONE ins | na 16 16 | 00650f | 85 16       |                 sta.d 000216         
1666:000 | DONE wsp | na 16 16 |        |             |
1667:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
1668:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
1669:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
1670:000 | DONE cmt | na 16 16 |        |             |                 ; now.
1671:000 | DONE ins | na 16 16 | 006511 | a5 02       |                 lda.d 000202         
1672:000 | DONE wsp | na 16 16 |        |             |
1673:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
1674:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
1675:000 | DONE ins | na 16 16 | 006513 | 18          |                 clc                  
1676:000 | DONE ins | na 16 16 | 006514 | 69 04 00    |                 adc.# 0004           
1677:000 | DONE ins | na 16 16 | 006517 | 85 18       |                 sta.d 000218         
1678:000 | DONE wsp | na 16 16 |        |             |
1679:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
1680:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
1681:000 | DONE ins | na 16 16 | 006519 | b2 18       |                 lda.di 000218        LDA (TMP2)
1682:000 | DONE ins | na 16 16 | 00651b | 1a          |                 inc.a                
1683:000 | DONE ins | na 16 16 | 00651c | 85 18       |                 sta.d 000218         Points to address to be replaced
1684:000 | DONE wsp | na 16 16 |        |             |
1685:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
1686:000 | DONE ins | na 16 16 | 00651e | a5 16       |                 lda.d 000216         
1687:000 | DONE ins | na 16 16 | 006520 | 92 18       |                 sta.di 000218        STA (TMP2)
1688:000 | DONE wsp | na 16 16 |        |             |
1689:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
1690:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
1691:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
1692:000 | DONE ins | na 16 16 | 006522 | 60          |                 rts                  
1693:000 | DONE wsp | na 16 16 |        |             |
1694:000 | DONE wsp | na 16 16 |        |             |
1695:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1696:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1697:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1698:000 | DONE wsp | na 16 16 |        |             |
1699:000 | DONE lbl | na 16 16 | 006523 |             | xt_drop                              
1700:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1701:000 | DONE ins | na 16 16 | 006523 | b4 00       |                 ldy.dx 00            
1702:000 | DONE ins | na 16 16 | 006525 | e8          |                 inx                  
1703:000 | DONE ins | na 16 16 | 006526 | e8          |                 inx                  
1704:000 | DONE wsp | na 16 16 |        |             |
1705:000 | DONE lbl | na 16 16 | 006527 |             | z_drop                               
1705:001 | DONE ins | na 16 16 | 006527 | 60          |                 rts                  
1706:000 | DONE wsp | na 16 16 |        |             |
1707:000 | DONE wsp | na 16 16 |        |             |
1708:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1709:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1710:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1711:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1712:000 | DONE lbl | na 16 16 | 006528 |             | xt_dump                              
1713:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1714:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1715:000 | DONE ins | na 16 16 | 006528 | 84 16       |                 sty.d 000216         
1716:000 | DONE wsp | na 16 16 |        |             |
1717:000 | DONE lbl | na 16 16 | 00652a |             | dump_line_loop                       
1718:000 | DONE ins | na 16 16 | 00652a | 20 5d 64    |                 jsr 00645d           
1719:000 | DONE wsp | na 16 16 |        |             |
1720:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1721:000 | DONE ins | na 16 16 | 00652d | a0 10 00    |                 ldy.# 0010           
1722:000 | DONE lbl | na 16 16 | 006530 |             | dump_byte_loop                       
1723:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1724:000 | DONE ins | na 16 16 | 006530 | a5 16       |                 lda.d 000216         
1725:000 | DONE ins | na 16 16 | 006532 | f0 11       |                 beq 006545           
1726:000 | DONE wsp | na 16 16 |        |             |
1727:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1728:000 | DONE ins | na 16 16 | 006534 | a1 00       |                 lda.dxi 00           
1729:000 | DONE ins | na 16 16 | 006536 | 20 3c 6f    |                 jsr 006f3c           TODO replace by EMIT
1730:000 | DONE ins | na 16 16 | 006539 | 20 11 68    |                 jsr 006811           
1731:000 | DONE wsp | na 16 16 |        |             |
1732:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1733:000 | DONE ins | na 16 16 | 00653c | f6 00       |                 inc.dx 00            
1734:000 | DONE wsp | na 16 16 |        |             |
1735:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1736:000 | DONE ins | na 16 16 | 00653e | c6 16       |                 dec.d 000216         
1737:000 | DONE ins | na 16 16 | 006540 | 88          |                 dey                  
1738:000 | DONE ins | na 16 16 | 006541 | d0 ed       |                 bne 006530           
1739:000 | DONE ins | na 16 16 | 006543 | 80 e5       |                 bra 00652a           
1740:000 | DONE wsp | na 16 16 |        |             |
1741:000 | DONE lbl | na 16 16 | 006545 |             | dump_done                            
1742:000 | DONE ins | na 16 16 | 006545 | 20 5d 64    |                 jsr 00645d           
1743:000 | DONE wsp | na 16 16 |        |             |
1744:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1745:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1746:000 | DONE ins | na 16 16 | 006548 | b4 02       |                 ldy.dx 02            
1747:000 | DONE ins | na 16 16 | 00654a | e8          |                 inx                  
1748:000 | DONE ins | na 16 16 | 00654b | e8          |                 inx                  
1749:000 | DONE ins | na 16 16 | 00654c | e8          |                 inx                  
1750:000 | DONE ins | na 16 16 | 00654d | e8          |                 inx                  
1751:000 | DONE wsp | na 16 16 |        |             |
1752:000 | DONE lbl | na 16 16 | 00654e |             | z_dump                               
1752:001 | DONE ins | na 16 16 | 00654e | 60          |                 rts                  
1753:000 | DONE wsp | na 16 16 |        |             |
1754:000 | DONE wsp | na 16 16 |        |             |
1755:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1756:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1757:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1758:000 | DONE wsp | na 16 16 |        |             |
1759:000 | DONE lbl | na 16 16 | 00654f |             | xt_dup                               
1760:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1761:000 | DONE ins | na 16 16 | 00654f | ca          |                 dex                  
1762:000 | DONE ins | na 16 16 | 006550 | ca          |                 dex                  
1763:000 | DONE ins | na 16 16 | 006551 | 94 00       |                 sty.dx 00            
1764:000 | DONE wsp | na 16 16 |        |             |
1765:000 | DONE lbl | na 16 16 | 006553 |             | z_dup                                
1765:001 | DONE ins | na 16 16 | 006553 | 60          |                 rts                  
1766:000 | DONE wsp | na 16 16 |        |             |
1767:000 | DONE wsp | na 16 16 |        |             |
1768:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1769:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1770:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1771:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1772:000 | DONE lbl | na 16 16 | 006554 |             | xt_evaluate                          
1773:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1774:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1775:000 | DONE ins | na 16 16 | 006554 | a5 12       |                 lda.d 000212         >IN
1776:000 | DONE ins | na 16 16 | 006556 | 48          |                 pha                  
1777:000 | DONE ins | na 16 16 | 006557 | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
1778:000 | DONE ins | na 16 16 | 006559 | 48          |                 pha                  
1779:000 | DONE ins | na 16 16 | 00655a | a5 0c       |                 lda.d 00020c         
1780:000 | DONE ins | na 16 16 | 00655c | 48          |                 pha                  
1781:000 | DONE ins | na 16 16 | 00655d | a5 0e       |                 lda.d 00020e         
1782:000 | DONE ins | na 16 16 | 00655f | 48          |                 pha                  
1783:000 | DONE wsp | na 16 16 |        |             |
1784:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
1785:000 | DONE ins | na 16 16 | 006560 | a9 ff ff    |                 lda.# 0ffff          
1786:000 | DONE ins | na 16 16 | 006563 | 85 0a       |                 sta.d 00020a         
1787:000 | DONE wsp | na 16 16 |        |             |
1788:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
1789:000 | DONE ins | na 16 16 | 006565 | 64 12       |                 stz.d 000212         
1790:000 | DONE wsp | na 16 16 |        |             |
1791:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
1792:000 | DONE ins | na 16 16 | 006567 | 84 0e       |                 sty.d 00020e         
1793:000 | DONE ins | na 16 16 | 006569 | b5 00       |                 lda.dx 00            
1794:000 | DONE ins | na 16 16 | 00656b | 85 0c       |                 sta.d 00020c         
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1797:000 | DONE ins | na 16 16 | 00656d | b4 02       |                 ldy.dx 02            
1798:000 | DONE ins | na 16 16 | 00656f | e8          |                 inx                  
1799:000 | DONE ins | na 16 16 | 006570 | e8          |                 inx                  
1800:000 | DONE ins | na 16 16 | 006571 | e8          |                 inx                  
1801:000 | DONE ins | na 16 16 | 006572 | e8          |                 inx                  
1802:000 | DONE wsp | na 16 16 |        |             |
1803:000 | DONE ins | na 16 16 | 006573 | 20 ac 6e    |                 jsr 006eac           
1804:000 | DONE wsp | na 16 16 |        |             |
1805:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1806:000 | DONE ins | na 16 16 | 006576 | 68          |                 pla                  
1807:000 | DONE ins | na 16 16 | 006577 | 85 0e       |                 sta.d 00020e         
1808:000 | DONE ins | na 16 16 | 006579 | 68          |                 pla                  
1809:000 | DONE ins | na 16 16 | 00657a | 85 0c       |                 sta.d 00020c         
1810:000 | DONE ins | na 16 16 | 00657c | 68          |                 pla                  
1811:000 | DONE ins | na 16 16 | 00657d | 85 0a       |                 sta.d 00020a         
1812:000 | DONE ins | na 16 16 | 00657f | 68          |                 pla                  
1813:000 | DONE ins | na 16 16 | 006580 | 85 12       |                 sta.d 000212         
1814:000 | DONE wsp | na 16 16 |        |             |
1815:000 | DONE lbl | na 16 16 | 006582 |             | z_evaluate                           
1815:001 | DONE ins | na 16 16 | 006582 | 60          |                 rts                  
1816:000 | DONE wsp | na 16 16 |        |             |
1817:000 | DONE wsp | na 16 16 |        |             |
1818:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1819:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1820:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1821:000 | DONE wsp | na 16 16 |        |             |
1822:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1823:000 | DONE cmt | na 16 16 |        |             | ; range
1824:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1825:000 | DONE lbl | na 16 16 | 006583 |             | execute_ip                           
1825:001 | DONE dir | na 16 16 | 006583 | (3 bytes)   |         .byte 00, 00, 00             
1825:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1826:000 | DONE wsp | na 16 16 |        |             |
1827:000 | DONE lbl | na 16 16 | 006586 |             | xt_execute                           
1828:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1829:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1830:000 | DONE cmt | na 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
1831:000 | DONE ins | na 16 16 | 006586 | 8c 83 65    |                 sty 006583           
1832:000 | DONE ins | na 16 16 | 006589 | b4 00       |                 ldy.dx 00            
1833:000 | DONE ins | na 16 16 | 00658b | e8          |                 inx                  
1834:000 | DONE ins | na 16 16 | 00658c | e8          |                 inx                  
1835:000 | DONE wsp | na 16 16 |        |             |
1836:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
1837:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
1838:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
1839:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
1840:000 | DONE ins | na 16 16 | 00658d | 6c 83 65    |                 jmp.i 006583         JMP (EXECUTE_IP)
1841:000 | DONE wsp | na 16 16 |        |             |
1842:000 | DONE lbl | na 16 16 | 006590 |             | z_execute                            
1842:001 | DONE ins | na 16 16 | 006590 | ea          |                 nop                  Never reached, see if we need the NOP
1843:000 | DONE wsp | na 16 16 |        |             |
1844:000 | DONE wsp | na 16 16 |        |             |
1845:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1846:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1847:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1848:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
1849:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
1850:000 | DONE wsp | na 16 16 |        |             |
1851:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1852:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1853:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1854:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1855:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1856:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1857:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1858:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1859:000 | DONE lbl | na 16 16 | 006591 |             | xt_find-name                         
1860:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1861:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1862:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1863:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1864:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1865:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1866:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1867:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1868:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1869:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1870:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1871:000 | DONE ins | na 16 16 | 006591 | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
1872:000 | DONE wsp | na 16 16 |        |             |
1873:000 | DONE ins | na 16 16 | 006593 | a4 02       |                 ldy.d 000202         
1874:000 | DONE ins | na 16 16 | 006595 | 84 16       |                 sty.d 000216         nt of first Dictionary word
1875:000 | DONE wsp | na 16 16 |        |             |
1876:000 | DONE ins | na 16 16 | 006597 | b4 00       |                 ldy.dx 00            
1877:000 | DONE ins | na 16 16 | 006599 | 84 18       |                 sty.d 000218         address of mystery string, was NOS
1878:000 | DONE wsp | na 16 16 |        |             |
1879:000 | DONE lbl | na 16 16 | 00659b |             | find-name_loop                       
1880:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1881:000 | DONE ins | na 16 16 | 00659b | b2 16       |                 lda.di 000216        LSB in first header word is length
1882:000 | DONE ins | na 16 16 | 00659d | 29 ff 00    |                 and.# 00ff           
1883:000 | DONE ins | na 16 16 | 0065a0 | c5 06       |                 cmp.d 000206         we test LSB
1884:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1885:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1886:000 | DONE cmt | na 16 16 |        |             |                 ; same
1887:000 | DONE ins | na 16 16 | 0065a2 | f0 0c       |                 beq 0065b0           
1888:000 | DONE wsp | na 16 16 |        |             |
1889:000 | DONE lbl | na 16 16 | 0065a4 |             | find-name_next_entry                 
1890:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1891:000 | DONE ins | na 16 16 | 0065a4 | e6 16       |                 inc.d 000216         
1892:000 | DONE ins | na 16 16 | 0065a6 | e6 16       |                 inc.d 000216         
1893:000 | DONE ins | na 16 16 | 0065a8 | b2 16       |                 lda.di 000216        LDA (TMP1)
1894:000 | DONE wsp | na 16 16 |        |             |
1895:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1896:000 | DONE ins | na 16 16 | 0065aa | f0 36       |                 beq 0065e2           
1897:000 | DONE wsp | na 16 16 |        |             |
1898:000 | DONE ins | na 16 16 | 0065ac | 85 16       |                 sta.d 000216         new header
1899:000 | DONE ins | na 16 16 | 0065ae | 80 eb       |                 bra 00659b           
1900:000 | DONE wsp | na 16 16 |        |             |
1901:000 | DONE lbl | na 16 16 | 0065b0 |             | find-name_chars                      
1902:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1903:000 | DONE wsp | na 16 16 |        |             |
1904:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1905:000 | DONE ins | na 16 16 | 0065b0 | e2 20       |                 sep 20               
1905:001 | DONE ctl | na  8 16 |        |             |         .!a8
1906:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1907:000 | DONE cmt | na  8 16 |        |             |                 ; header
1908:000 | DONE ins | na  8 16 | 0065b2 | a0 08 00    |                 ldy.# 0008           
1909:000 | DONE ins | na  8 16 | 0065b5 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
1910:000 | DONE ins | na  8 16 | 0065b7 | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
1911:000 | DONE ins | na  8 16 | 0065b9 | f0 04       |                 beq 0065bf           
1912:000 | DONE wsp | na  8 16 |        |             |
1913:000 | DONE lbl | na  8 16 | 0065bb |             | find-name_char_nomatcnt_8            
1914:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1915:000 | DONE ins | na  8 16 | 0065bb | c2 20       |                 rep 20               
1915:001 | DONE ctl | na 16 16 |        |             |         .!a16
1916:000 | DONE ins | na 16 16 | 0065bd | 80 e5       |                 bra 0065a4           
1917:000 | DONE wsp | na 16 16 |        |             |
1918:000 | DONE lbl | na 16 16 | 0065bf |             | find-name_all_chars                  
1919:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1920:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1921:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1922:000 | DONE ins | na  8 16 | 0065bf | a4 06       |                 ldy.d 000206         
1923:000 | DONE ins | na  8 16 | 0065c1 | 88          |                 dey                  faster and shorter than CPY.# 01
1924:000 | DONE ins | na  8 16 | 0065c2 | f0 18       |                 beq 0065dc           
1925:000 | DONE wsp | na  8 16 |        |             |
1926:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1927:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1928:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1929:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1930:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1931:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1932:000 | DONE wsp | na  8 16 |        |             |
1933:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1934:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1935:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1936:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1937:000 | DONE ins | na  8 16 | 0065c4 | c2 20       |                 rep 20               
1937:001 | DONE ctl | na 16 16 |        |             |         .!a16
1938:000 | DONE ins | na 16 16 | 0065c6 | a5 16       |                 lda.d 000216         address of Dictionary string
1939:000 | DONE ins | na 16 16 | 0065c8 | 18          |                 clc                  
1940:000 | DONE ins | na 16 16 | 0065c9 | 69 08 00    |                 adc.# 0008           
1941:000 | DONE ins | na 16 16 | 0065cc | 85 1a       |                 sta.d 00021a         
1942:000 | DONE ins | na 16 16 | 0065ce | e2 20       |                 sep 20               
1942:001 | DONE ctl | na  8 16 |        |             |         .!a8
1943:000 | DONE ins | na  8 16 | 0065d0 | a4 06       |                 ldy.d 000206         get length of strings as loop index
1944:000 | DONE ins | na  8 16 | 0065d2 | 88          |                 dey                  first index is length minus 1
1945:000 | DONE wsp | na  8 16 |        |             |
1946:000 | DONE lbl | na  8 16 | 0065d3 |             | @                                    
1947:000 | DONE ins | na  8 16 | 0065d3 | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
1948:000 | DONE ins | na  8 16 | 0065d5 | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
1949:000 | DONE ins | na  8 16 | 0065d7 | d0 e2       |                 bne 0065bb           
1950:000 | DONE ins | na  8 16 | 0065d9 | 88          |                 dey                  start of string (Y=0) was already tested
1951:000 | DONE ins | na  8 16 | 0065da | d0 f7       |                 bne 0065d3           
1952:000 | DONE wsp | na  8 16 |        |             |
1953:000 | DONE lbl | na  8 16 | 0065dc |             | find-name_success                    
1954:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1955:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1956:000 | DONE ins | na  8 16 | 0065dc | c2 20       |                 rep 20               
1956:001 | DONE ctl | na 16 16 |        |             |         .!a16
1957:000 | DONE ins | na 16 16 | 0065de | a4 16       |                 ldy.d 000216         get the correct DP
1958:000 | DONE ins | na 16 16 | 0065e0 | 80 03       |                 bra 0065e5           
1959:000 | DONE wsp | na 16 16 |        |             |
1960:000 | DONE wsp | na 16 16 |        |             |
1961:000 | DONE lbl | na 16 16 | 0065e2 |             | find-name_failure_16                 
1962:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1963:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1964:000 | DONE ins | na 16 16 | 0065e2 | a0 00 00    |                 ldy.# 0000           fall thru
1965:000 | DONE wsp | na 16 16 |        |             |
1966:000 | DONE lbl | na 16 16 | 0065e5 |             | find-name_done                       
1967:000 | DONE ins | na 16 16 | 0065e5 | e8          |                 inx                  drop old address (NIP)
1968:000 | DONE ins | na 16 16 | 0065e6 | e8          |                 inx                  
1969:000 | DONE wsp | na 16 16 |        |             |
1970:000 | DONE lbl | na 16 16 | 0065e7 |             | z_find-name                          
1970:001 | DONE ins | na 16 16 | 0065e7 | 60          |                 rts                  
1971:000 | DONE wsp | na 16 16 |        |             |
1972:000 | DONE wsp | na 16 16 |        |             |
1973:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1974:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
1975:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
1976:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
1977:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
1978:000 | DONE lbl | na 16 16 | 0065e8 |             | xt_immediate                         
1979:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1980:000 | DONE ins | na 16 16 | 0065e8 | a9 02 00    |                 lda.# IM             Immediate flag
1981:000 | DONE ins | na 16 16 | 0065eb | eb          |                 xba                  flags are MSB
1982:000 | DONE ins | na 16 16 | 0065ec | 12 02       |                 ora.di 000202        ORA (DP)
1983:000 | DONE ins | na 16 16 | 0065ee | 92 02       |                 sta.di 000202        
1984:000 | DONE wsp | na 16 16 |        |             |
1985:000 | DONE lbl | na 16 16 | 0065f0 |             | z_immediate                          
1985:001 | DONE ins | na 16 16 | 0065f0 | 60          |                 rts                  
1986:000 | DONE wsp | na 16 16 |        |             |
1987:000 | DONE wsp | na 16 16 |        |             |
1988:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1989:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
1990:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
1991:000 | DONE lbl | na 16 16 | 0065f1 |             | xt_invert                            
1992:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1993:000 | DONE ins | na 16 16 | 0065f1 | 98          |                 tya                  
1994:000 | DONE ins | na 16 16 | 0065f2 | 49 ff ff    |                 eor.# 0ffff          
1995:000 | DONE ins | na 16 16 | 0065f5 | a8          |                 tay                  
1996:000 | DONE wsp | na 16 16 |        |             |
1997:000 | DONE lbl | na 16 16 | 0065f6 |             | z_invert                             
1997:001 | DONE ins | na 16 16 | 0065f6 | 60          |                 rts                  
1998:000 | DONE wsp | na 16 16 |        |             |
1999:000 | DONE wsp | na 16 16 |        |             |
2000:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2001:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
2002:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
2003:000 | DONE lbl | na 16 16 | 0065f7 |             | xt_here                              
2004:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2005:000 | DONE ins | na 16 16 | 0065f7 | ca          |                 dex                  
2006:000 | DONE ins | na 16 16 | 0065f8 | ca          |                 dex                  
2007:000 | DONE ins | na 16 16 | 0065f9 | 94 00       |                 sty.dx 00            
2008:000 | DONE wsp | na 16 16 |        |             |
2009:000 | DONE ins | na 16 16 | 0065fb | a4 00       |                 ldy.d 000200         
2010:000 | DONE wsp | na 16 16 |        |             |
2011:000 | DONE lbl | na 16 16 | 0065fd |             | z_here                               
2011:001 | DONE ins | na 16 16 | 0065fd | 60          |                 rts                  
2012:000 | DONE wsp | na 16 16 |        |             |
2013:000 | DONE wsp | na 16 16 |        |             |
2014:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2015:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
2016:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
2017:000 | DONE lbl | na 16 16 | 0065fe |             | xt_hex                               
2018:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2019:000 | DONE ins | na 16 16 | 0065fe | a9 10 00    |                 lda.# 0010           
2020:000 | DONE ins | na 16 16 | 006601 | 85 1c       |                 sta.d 00021c         
2021:000 | DONE wsp | na 16 16 |        |             |
2022:000 | DONE lbl | na 16 16 | 006603 |             | z_hex                                
2022:001 | DONE ins | na 16 16 | 006603 | 60          |                 rts                  
2023:000 | DONE wsp | na 16 16 |        |             |
2024:000 | DONE wsp | na 16 16 |        |             |
2025:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2026:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
2027:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
2028:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
2029:000 | DONE cmt | na 16 16 |        |             | ; for instance
2030:000 | DONE lbl | na 16 16 | 006604 |             | xt_literal                           
2031:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
2032:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
2033:000 | DONE ins | na 16 16 | 006604 | f4 16 66    |                 phe.# 006616         PEA LITERAL_RT
2034:000 | DONE ins | na 16 16 | 006607 | 20 fd 6e    |                 jsr 006efd           
2035:000 | DONE wsp | na 16 16 |        |             |
2036:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
2037:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
2038:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
2039:000 | DONE ins | na 16 16 | 00660a | 98          |                 tya                  
2040:000 | DONE ins | na 16 16 | 00660b | 92 00       |                 sta.di 000200        
2041:000 | DONE ins | na 16 16 | 00660d | e6 00       |                 inc.d 000200         
2042:000 | DONE ins | na 16 16 | 00660f | e6 00       |                 inc.d 000200         
2043:000 | DONE wsp | na 16 16 |        |             |
2044:000 | DONE ins | na 16 16 | 006611 | b4 00       |                 ldy.dx 00            DROP
2045:000 | DONE ins | na 16 16 | 006613 | e8          |                 inx                  
2046:000 | DONE ins | na 16 16 | 006614 | e8          |                 inx                  
2047:000 | DONE wsp | na 16 16 |        |             |
2048:000 | DONE lbl | na 16 16 | 006615 |             | z_literal                            
2048:001 | DONE ins | na 16 16 | 006615 | 60          |                 rts                  
2049:000 | DONE wsp | na 16 16 |        |             |
2050:000 | DONE lbl | na 16 16 | 006616 |             | literal_rt                           
2051:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
2052:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
2053:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
2054:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
2055:000 | DONE wsp | na 16 16 |        |             |
2056:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
2057:000 | DONE ins | na 16 16 | 006616 | ca          |                 dex                  
2058:000 | DONE ins | na 16 16 | 006617 | ca          |                 dex                  
2059:000 | DONE ins | na 16 16 | 006618 | 94 00       |                 sty.dx 00            
2060:000 | DONE wsp | na 16 16 |        |             |
2061:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
2062:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
2063:000 | DONE ins | na 16 16 | 00661a | 7a          |                 ply                  
2064:000 | DONE ins | na 16 16 | 00661b | c8          |                 iny                  
2065:000 | DONE ins | na 16 16 | 00661c | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
2066:000 | DONE wsp | na 16 16 |        |             |
2067:000 | DONE ins | na 16 16 | 00661f | c8          |                 iny                  move return address past data and restore
2068:000 | DONE ins | na 16 16 | 006620 | 5a          |                 phy                  so we can get back home
2069:000 | DONE wsp | na 16 16 |        |             |
2070:000 | DONE ins | na 16 16 | 006621 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
2071:000 | DONE wsp | na 16 16 |        |             |
2072:000 | DONE ins | na 16 16 | 006622 | 60          |                 rts                  
2073:000 | DONE wsp | na 16 16 |        |             |
2074:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2075:000 | DONE cmt | na 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
2076:000 | DONE cmt | na 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
2077:000 | DONE cmt | na 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
2078:000 | DONE cmt | na 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
2079:000 | DONE cmt | na 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
2080:000 | DONE cmt | na 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
2081:000 | DONE lbl | na 16 16 | 006623 |             | xt_mstar                             
2082:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2083:000 | DONE cmt | na 16 16 |        |             |                 ; figure out the sign
2084:000 | DONE ins | na 16 16 | 006623 | 98          |                 tya                  
2085:000 | DONE ins | na 16 16 | 006624 | 55 00       |                 eor.dx 00            
2086:000 | DONE wsp | na 16 16 |        |             |
2087:000 | DONE cmt | na 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
2088:000 | DONE cmt | na 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
2089:000 | DONE ins | na 16 16 | 006626 | 48          |                 pha                  
2090:000 | DONE wsp | na 16 16 |        |             |
2091:000 | DONE cmt | na 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
2092:000 | DONE cmt | na 16 16 |        |             |                 ; UM*, which does the real work
2093:000 | DONE ins | na 16 16 | 006627 | 98          |                 tya                  
2094:000 | DONE ins | na 16 16 | 006628 | 10 05       |                 bpl 00662f           
2095:000 | DONE wsp | na 16 16 |        |             |
2096:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is negative so we have to ABS it
2097:000 | DONE ins | na 16 16 | 00662a | 49 ff ff    |                 eor.# 0ffff          
2098:000 | DONE ins | na 16 16 | 00662d | 1a          |                 inc.a                
2099:000 | DONE ins | na 16 16 | 00662e | a8          |                 tay                  
2100:000 | DONE wsp | na 16 16 |        |             |
2101:000 | DONE lbl | na 16 16 | 00662f |             | mstar_abs_nos                        
2102:000 | DONE ins | na 16 16 | 00662f | b5 00       |                 lda.dx 00            
2103:000 | DONE ins | na 16 16 | 006631 | 10 06       |                 bpl 006639           
2104:000 | DONE wsp | na 16 16 |        |             |
2105:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is negative so we have to ABS it
2106:000 | DONE ins | na 16 16 | 006633 | 49 ff ff    |                 eor.# 0ffff          
2107:000 | DONE ins | na 16 16 | 006636 | 1a          |                 inc.a                
2108:000 | DONE ins | na 16 16 | 006637 | 95 00       |                 sta.dx 00            
2109:000 | DONE wsp | na 16 16 |        |             |
2110:000 | DONE lbl | na 16 16 | 006639 |             | mstar_umstar                         
2111:000 | DONE ins | na 16 16 | 006639 | 20 6d 68    |                 jsr 00686d           now ( d ) on stack
2112:000 | DONE wsp | na 16 16 |        |             |
2113:000 | DONE cmt | na 16 16 |        |             |                 ; handle the sign
2114:000 | DONE ins | na 16 16 | 00663c | 68          |                 pla                  
2115:000 | DONE wsp | na 16 16 |        |             |
2116:000 | DONE cmt | na 16 16 |        |             |                 ; postive, we don't have to care
2117:000 | DONE ins | na 16 16 | 00663d | 10 03       |                 bpl 006642           
2118:000 | DONE wsp | na 16 16 |        |             |
2119:000 | DONE ins | na 16 16 | 00663f | 20 ec 64    |                 jsr 0064ec           
2120:000 | DONE wsp | na 16 16 |        |             |
2121:000 | DONE lbl | na 16 16 | 006642 |             | z_mstar                              
2121:001 | DONE ins | na 16 16 | 006642 | 60          |                 rts                  
2122:000 | DONE wsp | na 16 16 |        |             |
2123:000 | DONE wsp | na 16 16 |        |             |
2124:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2125:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
2126:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
2127:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2128:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2129:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2130:000 | DONE lbl | na 16 16 | 006643 |             | xt_max                               
2131:000 | DONE ins | na 16 16 | 006643 | 98          |                 tya                  
2132:000 | DONE ins | na 16 16 | 006644 | d5 00       |                 cmp.dx 00            
2133:000 | DONE wsp | na 16 16 |        |             |
2134:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2135:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2136:000 | DONE ins | na 16 16 | 006646 | f0 0b       |                 beq 006653           Faster than DROP because TOS is in Y
2137:000 | DONE wsp | na 16 16 |        |             |
2138:000 | DONE ins | na 16 16 | 006648 | f5 00       |                 sbc.dx 00            
2139:000 | DONE ins | na 16 16 | 00664a | 50 03       |                 bvc 00664f           no overflow, skip ahead
2140:000 | DONE wsp | na 16 16 |        |             |
2141:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2142:000 | DONE ins | na 16 16 | 00664c | 49 00 80    |                 eor.# 8000           compliment negative flag
2143:000 | DONE wsp | na 16 16 |        |             |
2144:000 | DONE lbl | na 16 16 | 00664f |             | max_no_ov                            
2145:000 | DONE ins | na 16 16 | 00664f | 10 02       |                 bpl 006653           keep TOS
2146:000 | DONE lbl | na 16 16 | 006651 |             | max_drop                             
2147:000 | DONE ins | na 16 16 | 006651 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2148:000 | DONE lbl | na 16 16 | 006653 |             | max_nip                              
2149:000 | DONE ins | na 16 16 | 006653 | e8          |                 inx                  
2150:000 | DONE ins | na 16 16 | 006654 | e8          |                 inx                  
2151:000 | DONE wsp | na 16 16 |        |             |
2152:000 | DONE lbl | na 16 16 | 006655 |             | z_max                                
2152:001 | DONE ins | na 16 16 | 006655 | 60          |                 rts                  
2153:000 | DONE wsp | na 16 16 |        |             |
2154:000 | DONE wsp | na 16 16 |        |             |
2155:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2156:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
2157:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
2158:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2159:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2160:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2161:000 | DONE lbl | na 16 16 | 006656 |             | xt_min                               
2162:000 | DONE ins | na 16 16 | 006656 | 98          |                 tya                  
2163:000 | DONE ins | na 16 16 | 006657 | d5 00       |                 cmp.dx 00            
2164:000 | DONE wsp | na 16 16 |        |             |
2165:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2166:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2167:000 | DONE ins | na 16 16 | 006659 | f0 0b       |                 beq 006666           Faster than DROP because TOS is in Y
2168:000 | DONE wsp | na 16 16 |        |             |
2169:000 | DONE ins | na 16 16 | 00665b | f5 00       |                 sbc.dx 00            
2170:000 | DONE ins | na 16 16 | 00665d | 50 03       |                 bvc 006662           no overflow, skip ahead
2171:000 | DONE wsp | na 16 16 |        |             |
2172:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2173:000 | DONE ins | na 16 16 | 00665f | 49 00 80    |                 eor.# 8000           compliment negative flag
2174:000 | DONE wsp | na 16 16 |        |             |
2175:000 | DONE lbl | na 16 16 | 006662 |             | min_no_ov                            
2176:000 | DONE ins | na 16 16 | 006662 | 30 02       |                 bmi 006666           keep TOS
2177:000 | DONE lbl | na 16 16 | 006664 |             | min_drop                             
2178:000 | DONE ins | na 16 16 | 006664 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2179:000 | DONE lbl | na 16 16 | 006666 |             | min_nip                              
2180:000 | DONE ins | na 16 16 | 006666 | e8          |                 inx                  
2181:000 | DONE ins | na 16 16 | 006667 | e8          |                 inx                  
2182:000 | DONE wsp | na 16 16 |        |             |
2183:000 | DONE lbl | na 16 16 | 006668 |             | z_min                                
2183:001 | DONE ins | na 16 16 | 006668 | 60          |                 rts                  
2184:000 | DONE wsp | na 16 16 |        |             |
2185:000 | DONE wsp | na 16 16 |        |             |
2186:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2187:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
2188:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
2189:000 | DONE lbl | na 16 16 | 006669 |             | xt_name-int                          
2190:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2191:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2192:000 | DONE cmt | na 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
2193:000 | DONE ins | na 16 16 | 006669 | c8          |                 iny                  
2194:000 | DONE ins | na 16 16 | 00666a | c8          |                 iny                  
2195:000 | DONE ins | na 16 16 | 00666b | c8          |                 iny                  
2196:000 | DONE ins | na 16 16 | 00666c | c8          |                 iny                  
2197:000 | DONE ins | na 16 16 | 00666d | b9 00 00    |                 lda.y 0000           
2198:000 | DONE ins | na 16 16 | 006670 | a8          |                 tay                  
2199:000 | DONE wsp | na 16 16 |        |             |
2200:000 | DONE lbl | na 16 16 | 006671 |             | z_name-int                           
2200:001 | DONE ins | na 16 16 | 006671 | 60          |                 rts                  
2201:000 | DONE wsp | na 16 16 |        |             |
2202:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2203:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
2204:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
2205:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
2206:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
2207:000 | DONE lbl | na 16 16 | 006672 |             | xt_name-string                       
2208:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2209:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2210:000 | DONE ins | na 16 16 | 006672 | ca          |                 dex                  move NOS down one
2211:000 | DONE ins | na 16 16 | 006673 | ca          |                 dex                  
2212:000 | DONE wsp | na 16 16 |        |             |
2213:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
2214:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
2215:000 | DONE ins | na 16 16 | 006674 | 98          |                 tya                  
2216:000 | DONE ins | na 16 16 | 006675 | 18          |                 clc                  
2217:000 | DONE ins | na 16 16 | 006676 | 69 08 00    |                 adc.# 0008           
2218:000 | DONE ins | na 16 16 | 006679 | 95 00       |                 sta.dx 00            NOS
2219:000 | DONE wsp | na 16 16 |        |             |
2220:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
2221:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
2222:000 | DONE ins | na 16 16 | 00667b | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2223:000 | DONE ins | na 16 16 | 00667e | 29 ff 00    |                 and.# 00ff           mask all but length byte
2224:000 | DONE ins | na 16 16 | 006681 | a8          |                 tay                  
2225:000 | DONE wsp | na 16 16 |        |             |
2226:000 | DONE lbl | na 16 16 | 006682 |             | z_name-string                        
2226:001 | DONE ins | na 16 16 | 006682 | 60          |                 rts                  
2227:000 | DONE wsp | na 16 16 |        |             |
2228:000 | DONE wsp | na 16 16 |        |             |
2229:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2230:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
2231:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
2232:000 | DONE lbl | na 16 16 | 006683 |             | xt_negate                            
2233:000 | DONE ins | na 16 16 | 006683 | 98          |                 tya                  
2234:000 | DONE ins | na 16 16 | 006684 | 49 ff ff    |                 eor.# 0ffff          
2235:000 | DONE ins | na 16 16 | 006687 | 1a          |                 inc.a                
2236:000 | DONE ins | na 16 16 | 006688 | a8          |                 tay                  
2237:000 | DONE wsp | na 16 16 |        |             |
2238:000 | DONE lbl | na 16 16 | 006689 |             | z_negate                             
2238:001 | DONE ins | na 16 16 | 006689 | 60          |                 rts                  
2239:000 | DONE wsp | na 16 16 |        |             |
2240:000 | DONE wsp | na 16 16 |        |             |
2241:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2242:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
2243:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
2244:000 | DONE lbl | na 16 16 | 00668a |             | xt_nip                               
2245:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2246:000 | DONE ins | na 16 16 | 00668a | e8          |                 inx                  
2247:000 | DONE ins | na 16 16 | 00668b | e8          |                 inx                  
2248:000 | DONE lbl | na 16 16 | 00668c |             | z_nip                                
2248:001 | DONE ins | na 16 16 | 00668c | 60          |                 rts                  
2249:000 | DONE wsp | na 16 16 |        |             |
2250:000 | DONE wsp | na 16 16 |        |             |
2251:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2252:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
2253:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
2254:000 | DONE lbl | na 16 16 | 00668d |             | xt_or                                
2255:000 | DONE ins | na 16 16 | 00668d | 98          |                 tya                  
2256:000 | DONE ins | na 16 16 | 00668e | 15 00       |                 ora.dx 00            
2257:000 | DONE ins | na 16 16 | 006690 | a8          |                 tay                  
2258:000 | DONE wsp | na 16 16 |        |             |
2259:000 | DONE ins | na 16 16 | 006691 | e8          |                 inx                  
2260:000 | DONE ins | na 16 16 | 006692 | e8          |                 inx                  
2261:000 | DONE wsp | na 16 16 |        |             |
2262:000 | DONE lbl | na 16 16 | 006693 |             | z_or                                 
2262:001 | DONE ins | na 16 16 | 006693 | 60          |                 rts                  
2263:000 | DONE wsp | na 16 16 |        |             |
2264:000 | DONE wsp | na 16 16 |        |             |
2265:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2266:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
2267:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
2268:000 | DONE lbl | na 16 16 | 006694 |             | xt_over                              
2269:000 | DONE ins | na 16 16 | 006694 | ca          |                 dex                  
2270:000 | DONE ins | na 16 16 | 006695 | ca          |                 dex                  
2271:000 | DONE ins | na 16 16 | 006696 | 94 00       |                 sty.dx 00            
2272:000 | DONE ins | na 16 16 | 006698 | b4 02       |                 ldy.dx 02            
2273:000 | DONE wsp | na 16 16 |        |             |
2274:000 | DONE lbl | na 16 16 | 00669a |             | z_over                               
2274:001 | DONE ins | na 16 16 | 00669a | 60          |                 rts                  
2275:000 | DONE wsp | na 16 16 |        |             |
2276:000 | DONE wsp | na 16 16 |        |             |
2277:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2278:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
2279:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
2280:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
2281:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
2282:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
2283:000 | DONE lbl | na 16 16 | 00669b |             | xt_pad                               
2284:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2285:000 | DONE ins | na 16 16 | 00669b | ca          |                 dex                  
2286:000 | DONE ins | na 16 16 | 00669c | ca          |                 dex                  
2287:000 | DONE ins | na 16 16 | 00669d | 94 00       |                 sty.dx 00            
2288:000 | DONE wsp | na 16 16 |        |             |
2289:000 | DONE ins | na 16 16 | 00669f | a5 00       |                 lda.d 000200         
2290:000 | DONE ins | na 16 16 | 0066a1 | 18          |                 clc                  
2291:000 | DONE ins | na 16 16 | 0066a2 | 69 7f 00    |                 adc.# 00007f         
2292:000 | DONE ins | na 16 16 | 0066a5 | a8          |                 tay                  
2293:000 | DONE wsp | na 16 16 |        |             |
2294:000 | DONE lbl | na 16 16 | 0066a6 |             | z_pad                                
2294:001 | DONE ins | na 16 16 | 0066a6 | 60          |                 rts                  
2295:000 | DONE wsp | na 16 16 |        |             |
2296:000 | DONE wsp | na 16 16 |        |             |
2297:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2298:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
2299:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
2300:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
2301:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
2302:000 | DONE lbl | na 16 16 | 0066a7 |             | xt_page                              
2303:000 | DONE ins | na 16 16 | 0066a7 | a9 20 73    |                 lda.# 007320         
2304:000 | DONE ins | na 16 16 | 0066aa | 20 24 6f    |                 jsr 006f24           
2305:000 | DONE wsp | na 16 16 |        |             |
2306:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
2307:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
2308:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
2309:000 | DONE ins | na 16 16 | 0066ad | a9 25 73    |                 lda.# 007325         
2310:000 | DONE ins | na 16 16 | 0066b0 | 20 24 6f    |                 jsr 006f24           
2311:000 | DONE wsp | na 16 16 |        |             |
2312:000 | DONE lbl | na 16 16 | 0066b3 |             | z_page                               
2312:001 | DONE ins | na 16 16 | 0066b3 | 60          |                 rts                  
2313:000 | DONE wsp | na 16 16 |        |             |
2314:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2315:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
2316:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
2317:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
2318:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
2319:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
2320:000 | DONE lbl | na 16 16 | 0066b4 |             | xt_parse-name                        
2321:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2322:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2323:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
2324:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
2325:000 | DONE ins | na 16 16 | 0066b4 | 5a          |                 phy                  save TOS for later use
2326:000 | DONE ins | na 16 16 | 0066b5 | a4 12       |                 ldy.d 000212         >IN
2327:000 | DONE ins | na 16 16 | 0066b7 | e2 20       |                 sep 20               
2327:001 | DONE ctl | na  8 16 |        |             |         .!a8
2328:000 | DONE lbl | na  8 16 | 0066b9 |             | parse-name_loop                      
2329:000 | DONE ins | na  8 16 | 0066b9 | c4 0e       |                 cpy.d 00020e         end of line?
2330:000 | DONE ins | na  8 16 | 0066bb | f0 09       |                 beq 0066c6           
2331:000 | DONE wsp | na  8 16 |        |             |
2332:000 | DONE ins | na  8 16 | 0066bd | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2333:000 | DONE ins | na  8 16 | 0066bf | c9 20       |                 cmp.# AscSP          
2334:000 | DONE ins | na  8 16 | 0066c1 | d0 17       |                 bne 0066da           
2335:000 | DONE ins | na  8 16 | 0066c3 | c8          |                 iny                  
2336:000 | DONE ins | na  8 16 | 0066c4 | 80 f3       |                 bra 0066b9           
2337:000 | DONE wsp | na  8 16 |        |             |
2338:000 | DONE lbl | na  8 16 | 0066c6 |             | parse-name_empty_line                
2339:000 | DONE ins | na  8 16 | 0066c6 | c2 20       |                 rep 20               
2339:001 | DONE ctl | na 16 16 |        |             |         .!a16
2340:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
2341:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
2342:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
2343:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
2344:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
2345:000 | DONE ins | na 16 16 | 0066c8 | ca          |                 dex                  
2346:000 | DONE ins | na 16 16 | 0066c9 | ca          |                 dex                  
2347:000 | DONE ins | na 16 16 | 0066ca | ca          |                 dex                  
2348:000 | DONE ins | na 16 16 | 0066cb | ca          |                 dex                  
2349:000 | DONE wsp | na 16 16 |        |             |
2350:000 | DONE ins | na 16 16 | 0066cc | 7a          |                 ply                  restore old TOS as 3OS
2351:000 | DONE ins | na 16 16 | 0066cd | 94 02       |                 sty.dx 02            
2352:000 | DONE wsp | na 16 16 |        |             |
2353:000 | DONE ins | na 16 16 | 0066cf | a5 0c       |                 lda.d 00020c         
2354:000 | DONE ins | na 16 16 | 0066d1 | 18          |                 clc                  
2355:000 | DONE ins | na 16 16 | 0066d2 | 65 0e       |                 adc.d 00020e         
2356:000 | DONE ins | na 16 16 | 0066d4 | 95 00       |                 sta.dx 00            Address as NOS
2357:000 | DONE wsp | na 16 16 |        |             |
2358:000 | DONE ins | na 16 16 | 0066d6 | a0 00 00    |                 ldy.# 0000           TOS
2359:000 | DONE wsp | na 16 16 |        |             |
2360:000 | DONE ins | na 16 16 | 0066d9 | 60          |                 rts                  don't have to go through PARSE
2361:000 | DONE wsp | na 16 16 |        |             |
2362:000 | DONE lbl | na 16 16 | 0066da |             | parse-name_found                     
2363:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2364:000 | DONE ins | na 16 16 | 0066da | c2 20       |                 rep 20               
2364:001 | DONE ctl | na 16 16 |        |             |         .!a16
2365:000 | DONE ins | na 16 16 | 0066dc | 84 12       |                 sty.d 000212         new >IN
2366:000 | DONE wsp | na 16 16 |        |             |
2367:000 | DONE ins | na 16 16 | 0066de | 7a          |                 ply                  recover TOS
2368:000 | DONE ins | na 16 16 | 0066df | ca          |                 dex                  
2369:000 | DONE ins | na 16 16 | 0066e0 | ca          |                 dex                  
2370:000 | DONE ins | na 16 16 | 0066e1 | 94 00       |                 sty.dx 00            
2371:000 | DONE wsp | na 16 16 |        |             |
2372:000 | DONE ins | na 16 16 | 0066e3 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
2373:000 | DONE wsp | na 16 16 |        |             |
2374:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
2375:000 | DONE wsp | na 16 16 |        |             |
2376:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2377:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
2378:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
2379:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
2380:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
2381:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
2382:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
2383:000 | DONE cmt | na 16 16 |        |             | ;
2384:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
2385:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
2386:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
2387:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
2388:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
2389:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
2390:000 | DONE cmt | na 16 16 |        |             | ;
2391:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
2392:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
2393:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
2394:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
2395:000 | DONE lbl | na 16 16 | 0066e6 |             | xt_parse                             
2396:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2397:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2398:000 | DONE ins | na 16 16 | 0066e6 | 84 16       |                 sty.d 000216         save delimiter, char is LSB
2399:000 | DONE wsp | na 16 16 |        |             |
2400:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
2401:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
2402:000 | DONE cmt | na 16 16 |        |             |                 ; return
2403:000 | DONE ins | na 16 16 | 0066e8 | a5 12       |                 lda.d 000212         
2404:000 | DONE ins | na 16 16 | 0066ea | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
2405:000 | DONE ins | na 16 16 | 0066ec | 18          |                 clc                  
2406:000 | DONE ins | na 16 16 | 0066ed | 65 0c       |                 adc.d 00020c         
2407:000 | DONE wsp | na 16 16 |        |             |
2408:000 | DONE ins | na 16 16 | 0066ef | ca          |                 dex                  save addr as NOS
2409:000 | DONE ins | na 16 16 | 0066f0 | ca          |                 dex                  
2410:000 | DONE ins | na 16 16 | 0066f1 | 95 00       |                 sta.dx 00            
2411:000 | DONE wsp | na 16 16 |        |             |
2412:000 | DONE ins | na 16 16 | 0066f3 | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
2413:000 | DONE wsp | na 16 16 |        |             |
2414:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
2415:000 | DONE ins | na 16 16 | 0066f5 | a4 12       |                 ldy.d 000212         
2416:000 | DONE ins | na 16 16 | 0066f7 | e2 20       |                 sep 20               
2416:001 | DONE ctl | na  8 16 |        |             |         .!a8
2417:000 | DONE wsp | na  8 16 |        |             |
2418:000 | DONE lbl | na  8 16 | 0066f9 |             | parse_loop                           
2419:000 | DONE ins | na  8 16 | 0066f9 | c4 0e       |                 cpy.d 00020e         check for EOL first
2420:000 | DONE ins | na  8 16 | 0066fb | f0 0d       |                 beq 00670a           
2421:000 | DONE wsp | na  8 16 |        |             |
2422:000 | DONE ins | na  8 16 | 0066fd | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2423:000 | DONE ins | na  8 16 | 0066ff | c5 16       |                 cmp.d 000216         found delimiter?
2424:000 | DONE ins | na  8 16 | 006701 | f0 03       |                 beq 006706           
2425:000 | DONE ins | na  8 16 | 006703 | c8          |                 iny                  
2426:000 | DONE ins | na  8 16 | 006704 | 80 f3       |                 bra 0066f9           
2427:000 | DONE wsp | na  8 16 |        |             |
2428:000 | DONE lbl | na  8 16 | 006706 |             | parse_found_delimiter                
2429:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
2430:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
2431:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
2432:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
2433:000 | DONE ins | na  8 16 | 006706 | c2 20       |                 rep 20               
2433:001 | DONE ctl | na 16 16 |        |             |         .!a16
2434:000 | DONE ins | na 16 16 | 006708 | e6 18       |                 inc.d 000218         
2435:000 | DONE wsp | na 16 16 |        |             |
2436:000 | DONE lbl | na 16 16 | 00670a |             | parse_reached_eol                    
2437:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
2438:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2439:000 | DONE ins | na 16 16 | 00670a | c2 20       |                 rep 20               
2439:001 | DONE ctl | na 16 16 |        |             |         .!a16
2440:000 | DONE ins | na 16 16 | 00670c | 98          |                 tya                  
2441:000 | DONE ins | na 16 16 | 00670d | 38          |                 sec                  
2442:000 | DONE ins | na 16 16 | 00670e | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
2443:000 | DONE ins | na 16 16 | 006710 | 48          |                 pha                  save so we can manipulate Y
2444:000 | DONE wsp | na 16 16 |        |             |
2445:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
2446:000 | DONE ins | na 16 16 | 006711 | 98          |                 tya                  
2447:000 | DONE ins | na 16 16 | 006712 | 18          |                 clc                  
2448:000 | DONE ins | na 16 16 | 006713 | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
2449:000 | DONE ins | na 16 16 | 006715 | 85 12       |                 sta.d 000212         
2450:000 | DONE wsp | na 16 16 |        |             |
2451:000 | DONE ins | na 16 16 | 006717 | 7a          |                 ply                  length of string in TOS
2452:000 | DONE wsp | na 16 16 |        |             |
2453:000 | DONE lbl | na 16 16 | 006718 |             | z_parse-name                         
2454:000 | DONE lbl | na 16 16 | 006718 |             | z_parse                              
2454:001 | DONE ins | na 16 16 | 006718 | 60          |                 rts                  
2455:000 | DONE wsp | na 16 16 |        |             |
2456:000 | DONE wsp | na 16 16 |        |             |
2457:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2458:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
2459:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
2460:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
2461:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
2462:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
2463:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
2464:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
2465:000 | DONE lbl | na 16 16 | 006719 |             | xt_postpone                          
2466:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
2467:000 | DONE ins | na 16 16 | 006719 | 20 b4 66    |                 jsr 0066b4           ( addr n )
2468:000 | DONE wsp | na 16 16 |        |             |
2469:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
2470:000 | DONE ins | na 16 16 | 00671c | d0 06       |                 bne 006724           
2471:000 | DONE ins | na 16 16 | 00671e | a9 73 72    |                 lda.# 007273         
2472:000 | DONE ins | na 16 16 | 006721 | 4c 1e 6f    |                 jmp 006f1e           
2473:000 | DONE wsp | na 16 16 |        |             |
2474:000 | DONE lbl | na 16 16 | 006724 |             | pp_got_word                          
2475:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
2476:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
2477:000 | DONE ins | na 16 16 | 006724 | 20 57 6f    |                 jsr 006f57           
2478:000 | DONE wsp | na 16 16 |        |             |
2479:000 | DONE ins | na 16 16 | 006727 | 20 91 65    |                 jsr 006591           ( nt | 0 )
2480:000 | DONE wsp | na 16 16 |        |             |
2481:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
2482:000 | DONE ins | na 16 16 | 00672a | d0 03       |                 bne 00672f           
2483:000 | DONE ins | na 16 16 | 00672c | a9 10 73    |                 lda.# 007310         
2484:000 | DONE wsp | na 16 16 |        |             |
2485:000 | DONE lbl | na 16 16 | 00672f |             | pp_got_nt                            
2486:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
2487:000 | DONE ins | na 16 16 | 00672f | 84 16       |                 sty.d 000216         
2488:000 | DONE wsp | na 16 16 |        |             |
2489:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
2490:000 | DONE ins | na 16 16 | 006731 | 20 69 66    |                 jsr 006669           ( xt )
2491:000 | DONE wsp | na 16 16 |        |             |
2492:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
2493:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
2494:000 | DONE ins | na 16 16 | 006734 | b2 16       |                 lda.di 000216        LDA (TMP1) - get status byte of word
2495:000 | DONE ins | na 16 16 | 006736 | eb          |                 xba                  flags are MSB
2496:000 | DONE ins | na 16 16 | 006737 | 29 02 00    |                 and.# IM             mask everything but Immediate bit
2497:000 | DONE ins | na 16 16 | 00673a | f0 03       |                 beq 00673f           
2498:000 | DONE wsp | na 16 16 |        |             |
2499:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
2500:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
2501:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
2502:000 | DONE ins | na 16 16 | 00673c | 4c 21 64    |                 jmp 006421           JSR/RTS
2503:000 | DONE wsp | na 16 16 |        |             |
2504:000 | DONE lbl | na 16 16 | 00673f |             | pp_not_immediate                     
2505:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deffered
2506:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
2507:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
2508:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
2509:000 | DONE ins | na 16 16 | 00673f | f4 16 66    |                 phe.# 006616         PEA LITERAL_RT
2510:000 | DONE ins | na 16 16 | 006742 | 20 fd 6e    |                 jsr 006efd           
2511:000 | DONE wsp | na 16 16 |        |             |
2512:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
2513:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
2514:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
2515:000 | DONE ins | na 16 16 | 006745 | 20 9b 61    |                 jsr 00619b           
2516:000 | DONE wsp | na 16 16 |        |             |
2517:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
2518:000 | DONE ins | na 16 16 | 006748 | f4 21 64    |                 phe.# 006421         
2519:000 | DONE ins | na 16 16 | 00674b | 4c fd 6e    |                 jmp 006efd           JSR/RTS
2520:000 | DONE wsp | na 16 16 |        |             |
2521:000 | DONE lbl | na 16 16 | 00674e |             | z_postpone                           ; never reached
2522:000 | DONE wsp | na 16 16 |        |             |
2523:000 | DONE wsp | na 16 16 |        |             |
2524:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2525:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
2526:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
2527:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
2528:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
2529:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
2530:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
2531:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
2532:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
2533:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
2534:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
2535:000 | DONE lbl | na 16 16 | 00674e |             | xt_refill                            
2536:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2537:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2538:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
2539:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
2540:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
2541:000 | DONE ins | na 16 16 | 00674e | a5 0c       |                 lda.d 00020c         
2542:000 | DONE ins | na 16 16 | 006750 | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
2543:000 | DONE ins | na 16 16 | 006753 | 85 0c       |                 sta.d 00020c         
2544:000 | DONE wsp | na 16 16 |        |             |
2545:000 | DONE ins | na 16 16 | 006755 | a5 0e       |                 lda.d 00020e         current length is now previous length
2546:000 | DONE ins | na 16 16 | 006757 | 85 10       |                 sta.d 000210         
2547:000 | DONE wsp | na 16 16 |        |             |
2548:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
2549:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
2550:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
2551:000 | DONE ins | na 16 16 | 006759 | a5 0a       |                 lda.d 00020a         
2552:000 | DONE ins | na 16 16 | 00675b | d0 14       |                 bne 006771           
2553:000 | DONE wsp | na 16 16 |        |             |
2554:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
2555:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
2556:000 | DONE ins | na 16 16 | 00675d | ca          |                 dex                  push Data Stack down twice
2557:000 | DONE ins | na 16 16 | 00675e | ca          |                 dex                  
2558:000 | DONE ins | na 16 16 | 00675f | 94 00       |                 sty.dx 00            
2559:000 | DONE wsp | na 16 16 |        |             |
2560:000 | DONE ins | na 16 16 | 006761 | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
2561:000 | DONE ins | na 16 16 | 006763 | ca          |                 dex                  
2562:000 | DONE ins | na 16 16 | 006764 | ca          |                 dex                  
2563:000 | DONE ins | na 16 16 | 006765 | 95 00       |                 sta.dx 00            
2564:000 | DONE wsp | na 16 16 |        |             |
2565:000 | DONE ins | na 16 16 | 006767 | a0 ff 00    |                 ldy.# 0000ff         
2566:000 | DONE wsp | na 16 16 |        |             |
2567:000 | DONE ins | na 16 16 | 00676a | 20 d4 62    |                 jsr 0062d4           ( addr n1 -- n2)
2568:000 | DONE wsp | na 16 16 |        |             |
2569:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
2570:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
2571:000 | DONE ins | na 16 16 | 00676d | a0 ff ff    |                 ldy.# 0ffff          
2572:000 | DONE wsp | na 16 16 |        |             |
2573:000 | DONE ins | na 16 16 | 006770 | 60          |                 rts                  
2574:000 | DONE wsp | na 16 16 |        |             |
2575:000 | DONE lbl | na 16 16 | 006771 |             | refill_src_not_kbd                   
2576:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
2577:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
2578:000 | DONE ins | na 16 16 | 006771 | 1a          |                 inc.a                
2579:000 | DONE ins | na 16 16 | 006772 | d0 06       |                 bne 00677a           
2580:000 | DONE wsp | na 16 16 |        |             |
2581:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
2582:000 | DONE ins | na 16 16 | 006774 | ca          |                 dex                  
2583:000 | DONE ins | na 16 16 | 006775 | ca          |                 dex                  
2584:000 | DONE ins | na 16 16 | 006776 | 94 00       |                 sty.dx 00            
2585:000 | DONE ins | na 16 16 | 006778 | a8          |                 tay                  
2586:000 | DONE wsp | na 16 16 |        |             |
2587:000 | DONE ins | na 16 16 | 006779 | 60          |                 rts                  
2588:000 | DONE wsp | na 16 16 |        |             |
2589:000 | DONE lbl | na 16 16 | 00677a |             | refill_source_is_not_string          
2590:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
2591:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
2592:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
2593:000 | DONE ins | na 16 16 | 00677a | a9 c8 72    |                 lda.# 0072c8         
2594:000 | DONE ins | na 16 16 | 00677d | 4c 1e 6f    |                 jmp 006f1e           
2595:000 | DONE wsp | na 16 16 |        |             |
2596:000 | DONE lbl | na 16 16 | 006780 |             | z_refill                             
2596:001 | DONE ins | na 16 16 | 006780 | 60          |                 rts                  dummy for compiling
2597:000 | DONE wsp | na 16 16 |        |             |
2598:000 | DONE wsp | na 16 16 |        |             |
2599:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2600:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
2601:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
2602:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
2603:000 | DONE lbl | na 16 16 | 006781 |             | xt_rot                               
2604:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2605:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2606:000 | DONE ins | na 16 16 | 006781 | b5 00       |                 lda.dx 00            save b
2607:000 | DONE ins | na 16 16 | 006783 | 94 00       |                 sty.dx 00            move c to NOS
2608:000 | DONE ins | na 16 16 | 006785 | b4 02       |                 ldy.dx 02            move a to TOS
2609:000 | DONE ins | na 16 16 | 006787 | 95 02       |                 sta.dx 02            save b as 3OS
2610:000 | DONE wsp | na 16 16 |        |             |
2611:000 | DONE lbl | na 16 16 | 006789 |             | z_rot                                
2611:001 | DONE ins | na 16 16 | 006789 | 60          |                 rts                  
2612:000 | DONE wsp | na 16 16 |        |             |
2613:000 | DONE wsp | na 16 16 |        |             |
2614:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2615:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
2616:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
2617:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
2618:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
2619:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
2620:000 | DONE cmt | na 16 16 |        |             | ; want it in code
2621:000 | DONE lbl | na 16 16 | 00678a |             | xt_squote                            
2622:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
2623:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
2624:000 | DONE ins | na 16 16 | 00678a | ca          |                 dex                  
2625:000 | DONE ins | na 16 16 | 00678b | ca          |                 dex                  
2626:000 | DONE ins | na 16 16 | 00678c | 94 00       |                 sty.dx 00            
2627:000 | DONE wsp | na 16 16 |        |             |
2628:000 | DONE ins | na 16 16 | 00678e | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
2629:000 | DONE ins | na 16 16 | 006791 | 20 e6 66    |                 jsr 0066e6           Returns ( addr u ) of string
2630:000 | DONE wsp | na 16 16 |        |             |
2631:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
2632:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
2633:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
2634:000 | DONE ins | na 16 16 | 006794 | a5 14       |                 lda.d 000214         
2635:000 | DONE ins | na 16 16 | 006796 | f0 03       |                 beq 00679b           if we're interpreting, we're done
2636:000 | DONE wsp | na 16 16 |        |             |
2637:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
2638:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
2639:000 | DONE ins | na 16 16 | 006798 | 4c 9c 67    |                 jmp 00679c           JSR/RTS
2640:000 | DONE wsp | na 16 16 |        |             |
2641:000 | DONE lbl | na 16 16 | 00679b |             | z_squote                             
2641:001 | DONE ins | na 16 16 | 00679b | 60          |                 rts                  
2642:000 | DONE wsp | na 16 16 |        |             |
2643:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2644:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
2645:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
2646:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
2647:000 | DONE cmt | na 16 16 |        |             | ; tmp2
2648:000 | DONE lbl | na 16 16 | 00679c |             | xt_sliteral                          
2649:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2650:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
2651:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
2652:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
2653:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
2654:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
2655:000 | DONE ins | na 16 16 | 00679c | b5 00       |                 lda.dx 00            Address of string is NOS
2656:000 | DONE ins | na 16 16 | 00679e | 85 16       |                 sta.d 000216         
2657:000 | DONE ins | na 16 16 | 0067a0 | 84 18       |                 sty.d 000218         keep copy of string length
2658:000 | DONE wsp | na 16 16 |        |             |
2659:000 | DONE ins | na 16 16 | 0067a2 | e2 20       |                 sep 20               
2659:001 | DONE ctl | na  8 16 |        |             |         .!a8
2660:000 | DONE ins | na  8 16 | 0067a4 | a9 4c       |                 lda.# 04c            opcode for JMP
2661:000 | DONE ins | na  8 16 | 0067a6 | 92 00       |                 sta.di 000200        STA (CP)
2662:000 | DONE ins | na  8 16 | 0067a8 | c2 20       |                 rep 20               
2662:001 | DONE ctl | na 16 16 |        |             |         .!a16
2663:000 | DONE ins | na 16 16 | 0067aa | e6 00       |                 inc.d 000200         
2664:000 | DONE wsp | na 16 16 |        |             |
2665:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
2666:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
2667:000 | DONE ins | na 16 16 | 0067ac | a5 18       |                 lda.d 000218         string length
2668:000 | DONE ins | na 16 16 | 0067ae | 1a          |                 inc.a                
2669:000 | DONE ins | na 16 16 | 0067af | 1a          |                 inc.a                
2670:000 | DONE wsp | na 16 16 |        |             |
2671:000 | DONE ins | na 16 16 | 0067b0 | 18          |                 clc                  
2672:000 | DONE ins | na 16 16 | 0067b1 | 65 00       |                 adc.d 000200         current address
2673:000 | DONE ins | na 16 16 | 0067b3 | 92 00       |                 sta.di 000200        store jump target
2674:000 | DONE wsp | na 16 16 |        |             |
2675:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
2676:000 | DONE ins | na 16 16 | 0067b5 | e6 00       |                 inc.d 000200         
2677:000 | DONE ins | na 16 16 | 0067b7 | e6 00       |                 inc.d 000200         
2678:000 | DONE wsp | na 16 16 |        |             |
2679:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
2680:000 | DONE ins | na 16 16 | 0067b9 | 88          |                 dey                  last offset is one less than length
2681:000 | DONE ins | na 16 16 | 0067ba | e2 20       |                 sep 20               
2681:001 | DONE ctl | na  8 16 |        |             |         .!a8
2682:000 | DONE lbl | na  8 16 | 0067bc |             | sl_loop                              
2683:000 | DONE ins | na  8 16 | 0067bc | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2684:000 | DONE ins | na  8 16 | 0067be | 91 00       |                 sta.diy 000200       STA (CP),Y
2685:000 | DONE ins | na  8 16 | 0067c0 | 88          |                 dey                  
2686:000 | DONE ins | na  8 16 | 0067c1 | 10 f9       |                 bpl 0067bc           
2687:000 | DONE wsp | na  8 16 |        |             |
2688:000 | DONE ins | na  8 16 | 0067c3 | c2 20       |                 rep 20               
2688:001 | DONE ctl | na 16 16 |        |             |         .!a16
2689:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
2690:000 | DONE ins | na 16 16 | 0067c5 | a5 00       |                 lda.d 000200         
2691:000 | DONE ins | na 16 16 | 0067c7 | 85 16       |                 sta.d 000216         overwrites original address
2692:000 | DONE wsp | na 16 16 |        |             |
2693:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
2694:000 | DONE ins | na 16 16 | 0067c9 | 18          |                 clc                  
2695:000 | DONE ins | na 16 16 | 0067ca | 65 18       |                 adc.d 000218         length of string
2696:000 | DONE ins | na 16 16 | 0067cc | 85 00       |                 sta.d 000200         
2697:000 | DONE wsp | na 16 16 |        |             |
2698:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
2699:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
2700:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
2701:000 | DONE cmt | na 16 16 |        |             |                 ;
2702:000 | DONE cmt | na 16 16 |        |             |                 ; xt -->    jmp a
2703:000 | DONE cmt | na 16 16 |        |             |                 ;           <string data bytes>
2704:000 | DONE cmt | na 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
2705:000 | DONE cmt | na 16 16 |        |             |                 ;           <string address>
2706:000 | DONE cmt | na 16 16 |        |             |                 ;           <string length>
2707:000 | DONE cmt | na 16 16 |        |             |                 ; rts -->
2708:000 | DONE cmt | na 16 16 |        |             |                 ;
2709:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
2710:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
2711:000 | DONE ins | na 16 16 | 0067ce | f4 e7 67    |                 phe.# 0067e7         
2712:000 | DONE ins | na 16 16 | 0067d1 | 20 fd 6e    |                 jsr 006efd           
2713:000 | DONE wsp | na 16 16 |        |             |
2714:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
2715:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
2716:000 | DONE ins | na 16 16 | 0067d4 | a5 16       |                 lda.d 000216         new address of string
2717:000 | DONE ins | na 16 16 | 0067d6 | 48          |                 pha                  
2718:000 | DONE ins | na 16 16 | 0067d7 | 20 f8 6e    |                 jsr 006ef8           
2719:000 | DONE wsp | na 16 16 |        |             |
2720:000 | DONE ins | na 16 16 | 0067da | a5 18       |                 lda.d 000218         
2721:000 | DONE ins | na 16 16 | 0067dc | 48          |                 pha                  
2722:000 | DONE ins | na 16 16 | 0067dd | 20 f8 6e    |                 jsr 006ef8           
2723:000 | DONE wsp | na 16 16 |        |             |
2724:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
2725:000 | DONE ins | na 16 16 | 0067e0 | b4 02       |                 ldy.dx 02            2DROP
2726:000 | DONE ins | na 16 16 | 0067e2 | e8          |                 inx                  
2727:000 | DONE ins | na 16 16 | 0067e3 | e8          |                 inx                  
2728:000 | DONE ins | na 16 16 | 0067e4 | e8          |                 inx                  
2729:000 | DONE ins | na 16 16 | 0067e5 | e8          |                 inx                  
2730:000 | DONE wsp | na 16 16 |        |             |
2731:000 | DONE lbl | na 16 16 | 0067e6 |             | z_sliteral                           
2731:001 | DONE ins | na 16 16 | 0067e6 | 60          |                 rts                  
2732:000 | DONE wsp | na 16 16 |        |             |
2733:000 | DONE lbl | na 16 16 | 0067e7 |             | sliteral_rt                          
2734:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
2735:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
2736:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
2737:000 | DONE wsp | na 16 16 |        |             |
2738:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
2739:000 | DONE ins | na 16 16 | 0067e7 | ca          |                 dex                  
2740:000 | DONE ins | na 16 16 | 0067e8 | ca          |                 dex                  
2741:000 | DONE ins | na 16 16 | 0067e9 | ca          |                 dex                  
2742:000 | DONE ins | na 16 16 | 0067ea | ca          |                 dex                  
2743:000 | DONE ins | na 16 16 | 0067eb | 94 02       |                 sty.dx 02            
2744:000 | DONE wsp | na 16 16 |        |             |
2745:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
2746:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
2747:000 | DONE ins | na 16 16 | 0067ed | 7a          |                 ply                  
2748:000 | DONE ins | na 16 16 | 0067ee | c8          |                 iny                  
2749:000 | DONE wsp | na 16 16 |        |             |
2750:000 | DONE ins | na 16 16 | 0067ef | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2751:000 | DONE ins | na 16 16 | 0067f2 | 95 00       |                 sta.dx 00            save string address as NOS
2752:000 | DONE ins | na 16 16 | 0067f4 | c8          |                 iny                  
2753:000 | DONE ins | na 16 16 | 0067f5 | c8          |                 iny                  
2754:000 | DONE ins | na 16 16 | 0067f6 | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
2755:000 | DONE wsp | na 16 16 |        |             |
2756:000 | DONE ins | na 16 16 | 0067f9 | c8          |                 iny                  ... first, though, repair return jump
2757:000 | DONE ins | na 16 16 | 0067fa | 5a          |                 phy                  
2758:000 | DONE wsp | na 16 16 |        |             |
2759:000 | DONE ins | na 16 16 | 0067fb | a8          |                 tay                  TOS is now length of string
2760:000 | DONE wsp | na 16 16 |        |             |
2761:000 | DONE ins | na 16 16 | 0067fc | 60          |                 rts                  
2762:000 | DONE wsp | na 16 16 |        |             |
2763:000 | DONE wsp | na 16 16 |        |             |
2764:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2765:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
2766:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
2767:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
2768:000 | DONE wsp | na 16 16 |        |             |
2769:000 | DONE lbl | na 16 16 | 0067fd |             | xt_source                            
2770:000 | DONE ins | na 16 16 | 0067fd | ca          |                 dex                  make room on Data Stack
2771:000 | DONE ins | na 16 16 | 0067fe | ca          |                 dex                  
2772:000 | DONE ins | na 16 16 | 0067ff | ca          |                 dex                  
2773:000 | DONE ins | na 16 16 | 006800 | ca          |                 dex                  
2774:000 | DONE ins | na 16 16 | 006801 | 94 02       |                 sty.dx 02            
2775:000 | DONE wsp | na 16 16 |        |             |
2776:000 | DONE ins | na 16 16 | 006803 | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
2777:000 | DONE ins | na 16 16 | 006805 | 95 00       |                 sta.dx 00            
2778:000 | DONE wsp | na 16 16 |        |             |
2779:000 | DONE ins | na 16 16 | 006807 | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
2780:000 | DONE wsp | na 16 16 |        |             |
2781:000 | DONE lbl | na 16 16 | 006809 |             | z_source                             
2781:001 | DONE ins | na 16 16 | 006809 | 60          |                 rts                  
2782:000 | DONE wsp | na 16 16 |        |             |
2783:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2784:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
2785:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
2786:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
2787:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
2788:000 | DONE lbl | na 16 16 | 00680a |             | xt_source-id                         
2789:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2790:000 | DONE ins | na 16 16 | 00680a | ca          |                 dex                  
2791:000 | DONE ins | na 16 16 | 00680b | ca          |                 dex                  
2792:000 | DONE ins | na 16 16 | 00680c | 94 00       |                 sty.dx 00            
2793:000 | DONE ins | na 16 16 | 00680e | a4 0a       |                 ldy.d 00020a         
2794:000 | DONE wsp | na 16 16 |        |             |
2795:000 | DONE lbl | na 16 16 | 006810 |             | z_source-id                          
2795:001 | DONE ins | na 16 16 | 006810 | 60          |                 rts                  
2796:000 | DONE wsp | na 16 16 |        |             |
2797:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2798:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
2799:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
2800:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
2801:000 | DONE lbl | na 16 16 | 006811 |             | xt_space                             
2802:000 | DONE ins | na 16 16 | 006811 | a9 20 00    |                 lda.# AscSP          
2803:000 | DONE ins | na 16 16 | 006814 | 20 36 60    |                 jsr 006036           
2804:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2805:000 | DONE wsp | na 16 16 |        |             |
2806:000 | DONE lbl | na 16 16 | 006817 |             | z_space                              
2806:001 | DONE ins | na 16 16 | 006817 | 60          |                 rts                  
2807:000 | DONE wsp | na 16 16 |        |             |
2808:000 | DONE wsp | na 16 16 |        |             |
2809:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2810:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
2811:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
2812:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
2813:000 | DONE lbl | na 16 16 | 006818 |             | xt_spaces                            
2814:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2815:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2816:000 | DONE lbl | na 16 16 | 006818 |             | @                                    
2817:000 | DONE ins | na 16 16 | 006818 | 88          |                 dey                  this also handles case u=0
2818:000 | DONE ins | na 16 16 | 006819 | 30 05       |                 bmi 006820           
2819:000 | DONE wsp | na 16 16 |        |             |
2820:000 | DONE ins | na 16 16 | 00681b | 20 11 68    |                 jsr 006811           
2821:000 | DONE ins | na 16 16 | 00681e | 80 f8       |                 bra 006818           
2822:000 | DONE wsp | na 16 16 |        |             |
2823:000 | DONE lbl | na 16 16 | 006820 |             | spaces_done                          
2824:000 | DONE ins | na 16 16 | 006820 | b4 00       |                 ldy.dx 00            DROP
2825:000 | DONE ins | na 16 16 | 006822 | e8          |                 inx                  
2826:000 | DONE ins | na 16 16 | 006823 | e8          |                 inx                  
2827:000 | DONE wsp | na 16 16 |        |             |
2828:000 | DONE lbl | na 16 16 | 006824 |             | z_spaces                             
2828:001 | DONE ins | na 16 16 | 006824 | 60          |                 rts                  
2829:000 | DONE wsp | na 16 16 |        |             |
2830:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2831:000 | DONE cmt | na 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
2832:000 | DONE cmt | na 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
2833:000 | DONE cmt | na 16 16 |        |             | ; more than UM* DROP
2834:000 | DONE lbl | na 16 16 | 006825 |             | xt_star                              
2835:000 | DONE ins | na 16 16 | 006825 | 20 6d 68    |                 jsr 00686d           
2836:000 | DONE ins | na 16 16 | 006828 | b4 00       |                 ldy.dx 00            DROP
2837:000 | DONE ins | na 16 16 | 00682a | e8          |                 inx                  
2838:000 | DONE ins | na 16 16 | 00682b | e8          |                 inx                  
2839:000 | DONE wsp | na 16 16 |        |             |
2840:000 | DONE lbl | na 16 16 | 00682c |             | z_star                               
2840:001 | DONE ins | na 16 16 | 00682c | 60          |                 rts                  
2841:000 | DONE wsp | na 16 16 |        |             |
2842:000 | DONE wsp | na 16 16 |        |             |
2843:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2844:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
2845:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
2846:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
2847:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
2848:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
2849:000 | DONE lbl | na 16 16 | 00682d |             | xt_state                             
2850:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2851:000 | DONE ins | na 16 16 | 00682d | ca          |                 dex                  
2852:000 | DONE ins | na 16 16 | 00682e | ca          |                 dex                  
2853:000 | DONE ins | na 16 16 | 00682f | 94 00       |                 sty.dx 00            
2854:000 | DONE ins | na 16 16 | 006831 | a0 14 02    |                 ldy.# 000214         
2855:000 | DONE wsp | na 16 16 |        |             |
2856:000 | DONE lbl | na 16 16 | 006834 |             | z_state                              
2856:001 | DONE ins | na 16 16 | 006834 | 60          |                 rts                  
2857:000 | DONE wsp | na 16 16 |        |             |
2858:000 | DONE wsp | na 16 16 |        |             |
2859:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2860:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
2861:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
2862:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
2863:000 | DONE lbl | na 16 16 | 006835 |             | xt_swap                              
2864:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2865:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2866:000 | DONE ins | na 16 16 | 006835 | b5 00       |                 lda.dx 00            
2867:000 | DONE ins | na 16 16 | 006837 | 94 00       |                 sty.dx 00            
2868:000 | DONE ins | na 16 16 | 006839 | a8          |                 tay                  
2869:000 | DONE wsp | na 16 16 |        |             |
2870:000 | DONE lbl | na 16 16 | 00683a |             | z_swap                               
2870:001 | DONE ins | na 16 16 | 00683a | 60          |                 rts                  
2871:000 | DONE wsp | na 16 16 |        |             |
2872:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2873:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
2874:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
2875:000 | DONE lbl | na 16 16 | 00683b |             | xt_true                              
2876:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2877:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2878:000 | DONE ins | na 16 16 | 00683b | ca          |                 dex                  
2879:000 | DONE ins | na 16 16 | 00683c | ca          |                 dex                  
2880:000 | DONE ins | na 16 16 | 00683d | 94 00       |                 sty.dx 00            
2881:000 | DONE ins | na 16 16 | 00683f | a0 ff ff    |                 ldy.# 0ffff          
2882:000 | DONE wsp | na 16 16 |        |             |
2883:000 | DONE lbl | na 16 16 | 006842 |             | z_true                               
2883:001 | DONE ins | na 16 16 | 006842 | 60          |                 rts                  
2884:000 | DONE wsp | na 16 16 |        |             |
2885:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2886:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
2887:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
2888:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
2889:000 | DONE lbl | na 16 16 | 006843 |             | xt_tuck                              
2890:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2891:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2892:000 | DONE ins | na 16 16 | 006843 | ca          |                 dex                  
2893:000 | DONE ins | na 16 16 | 006844 | ca          |                 dex                  
2894:000 | DONE ins | na 16 16 | 006845 | b5 02       |                 lda.dx 2             
2895:000 | DONE ins | na 16 16 | 006847 | 95 00       |                 sta.dx 0             
2896:000 | DONE ins | na 16 16 | 006849 | 94 02       |                 sty.dx 2             
2897:000 | DONE wsp | na 16 16 |        |             |
2898:000 | DONE lbl | na 16 16 | 00684b |             | z_tuck                               
2898:001 | DONE ins | na 16 16 | 00684b | 60          |                 rts                  
2899:000 | DONE wsp | na 16 16 |        |             |
2900:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2901:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
2902:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
2903:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
2904:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
2905:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
2906:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
2907:000 | DONE cmt | na 16 16 |        |             | ; running.
2908:000 | DONE lbl | na 16 16 | 00684c |             | xt_type                              
2909:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2910:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2911:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
2912:000 | DONE ins | na 16 16 | 00684c | 98          |                 tya                  force flag check of TOS
2913:000 | DONE ins | na 16 16 | 00684d | f0 17       |                 beq 006866           
2914:000 | DONE wsp | na 16 16 |        |             |
2915:000 | DONE ins | na 16 16 | 00684f | b5 00       |                 lda.dx 00            get address from NOS
2916:000 | DONE ins | na 16 16 | 006851 | 85 16       |                 sta.d 000216         
2917:000 | DONE ins | na 16 16 | 006853 | 84 18       |                 sty.d 000218         number of chars is TOS
2918:000 | DONE ins | na 16 16 | 006855 | a0 00 00    |                 ldy.# 0000           
2919:000 | DONE ins | na 16 16 | 006858 | e2 20       |                 sep 20               
2919:001 | DONE ctl | na  8 16 |        |             |         .!a8
2920:000 | DONE lbl | na  8 16 | 00685a |             | type_loop                            
2921:000 | DONE ins | na  8 16 | 00685a | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2922:000 | DONE ins | na  8 16 | 00685c | 20 36 60    |                 jsr 006036           
2923:000 | DONE ins | na  8 16 | 00685f | c8          |                 iny                  
2924:000 | DONE ins | na  8 16 | 006860 | c4 18       |                 cpy.d 000218         
2925:000 | DONE ins | na  8 16 | 006862 | d0 f6       |                 bne 00685a           
2926:000 | DONE wsp | na  8 16 |        |             |
2927:000 | DONE ins | na  8 16 | 006864 | c2 20       |                 rep 20               
2927:001 | DONE ctl | na 16 16 |        |             |         .!a16
2928:000 | DONE lbl | na 16 16 | 006866 |             | type_done                            
2929:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
2930:000 | DONE ins | na 16 16 | 006866 | b4 02       |                 ldy.dx 02            
2931:000 | DONE ins | na 16 16 | 006868 | e8          |                 inx                  
2932:000 | DONE ins | na 16 16 | 006869 | e8          |                 inx                  
2933:000 | DONE ins | na 16 16 | 00686a | e8          |                 inx                  
2934:000 | DONE ins | na 16 16 | 00686b | e8          |                 inx                  
2935:000 | DONE wsp | na 16 16 |        |             |
2936:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
2937:000 | DONE wsp | na 16 16 |        |             |
2938:000 | DONE lbl | na 16 16 | 00686c |             | z_type                               
2938:001 | DONE ins | na 16 16 | 00686c | 60          |                 rts                  
2939:000 | DONE wsp | na 16 16 |        |             |
2940:000 | DONE wsp | na 16 16 |        |             |
2941:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2942:000 | DONE cmt | na 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
2943:000 | DONE cmt | na 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
2944:000 | DONE cmt | na 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
2945:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
2946:000 | DONE cmt | na 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
2947:000 | DONE cmt | na 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
2948:000 | DONE cmt | na 16 16 |        |             | ; call this "U*"
2949:000 | DONE wsp | na 16 16 |        |             |
2950:000 | DONE cmt | na 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
2951:000 | DONE cmt | na 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
2952:000 | DONE cmt | na 16 16 |        |             | ; consider switching to a table-supported version based on
2953:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
2954:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
2955:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
2956:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
2957:000 | DONE cmt | na 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
2958:000 | DONE wsp | na 16 16 |        |             |
2959:000 | DONE lbl | na 16 16 | 00686d |             | xt_umstar                            
2960:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2961:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
2962:000 | DONE ins | na 16 16 | 00686d | 98          |                 tya                  
2963:000 | DONE ins | na 16 16 | 00686e | f0 3d       |                 beq 0068ad           
2964:000 | DONE ins | na 16 16 | 006870 | b5 00       |                 lda.dx 00            
2965:000 | DONE ins | na 16 16 | 006872 | f0 39       |                 beq 0068ad           
2966:000 | DONE wsp | na 16 16 |        |             |
2967:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
2968:000 | DONE cmt | na 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
2969:000 | DONE cmt | na 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
2970:000 | DONE cmt | na 16 16 |        |             |                 ; answer
2971:000 | DONE ins | na 16 16 | 006874 | c0 01 00    |                 cpy.# 0001           non-distructively
2972:000 | DONE ins | na 16 16 | 006877 | f0 3b       |                 beq 0068b4           
2973:000 | DONE ins | na 16 16 | 006879 | b5 00       |                 lda.dx 00            
2974:000 | DONE ins | na 16 16 | 00687b | 3a          |                 dec.a                don't care about distruction
2975:000 | DONE ins | na 16 16 | 00687c | f0 39       |                 beq 0068b7           
2976:000 | DONE wsp | na 16 16 |        |             |
2977:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
2978:000 | DONE ins | na 16 16 | 00687e | c0 02 00    |                 cpy.# 0002           
2979:000 | DONE ins | na 16 16 | 006881 | f0 3b       |                 beq 0068be           
2980:000 | DONE wsp | na 16 16 |        |             |
2981:000 | DONE ins | na 16 16 | 006883 | b5 00       |                 lda.dx 00            
2982:000 | DONE ins | na 16 16 | 006885 | c9 02 00    |                 cmp.# 0002           
2983:000 | DONE ins | na 16 16 | 006888 | f0 38       |                 beq 0068c2           
2984:000 | DONE wsp | na 16 16 |        |             |
2985:000 | DONE cmt | na 16 16 |        |             |                 ; NO SPECIAL CASE ("THE HARD WAY")
2986:000 | DONE ins | na 16 16 | 00688a | 84 16       |                 sty.d 000216         TOS number  "40"
2987:000 | DONE ins | na 16 16 | 00688c | 85 18       |                 sta.d 000218         NOS number  "41"
2988:000 | DONE ins | na 16 16 | 00688e | a0 10 00    |                 ldy.# &16            loop counter
2989:000 | DONE wsp | na 16 16 |        |             |
2990:000 | DONE ins | na 16 16 | 006891 | a9 00 00    |                 lda.# 0000           
2991:000 | DONE ins | na 16 16 | 006894 | 85 1a       |                 sta.d 00021a         Most Significat Word (MSW) of result
2992:000 | DONE wsp | na 16 16 |        |             |
2993:000 | DONE lbl | na 16 16 | 006896 |             | umstar_loop                          
2994:000 | DONE ins | na 16 16 | 006896 | 0a          |                 asl.a                useless for first iteration
2995:000 | DONE ins | na 16 16 | 006897 | 26 1a       |                 rol.d 00021a         move carry into MSB, useless first iteration
2996:000 | DONE ins | na 16 16 | 006899 | 06 18       |                 asl.d 000218         move bit of NOS number into carry
2997:000 | DONE wsp | na 16 16 |        |             |
2998:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
2999:000 | DONE cmt | na 16 16 |        |             |                 ; the next bit
3000:000 | DONE ins | na 16 16 | 00689b | 90 07       |                 bcc 0068a4           
3001:000 | DONE wsp | na 16 16 |        |             |
3002:000 | DONE ins | na 16 16 | 00689d | 18          |                 clc                  
3003:000 | DONE ins | na 16 16 | 00689e | 65 16       |                 adc.d 000216         we have a set bit, so add TOS
3004:000 | DONE wsp | na 16 16 |        |             |
3005:000 | DONE cmt | na 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
3006:000 | DONE ins | na 16 16 | 0068a0 | 90 02       |                 bcc 0068a4           
3007:000 | DONE ins | na 16 16 | 0068a2 | e6 1a       |                 inc.d 00021a         
3008:000 | DONE wsp | na 16 16 |        |             |
3009:000 | DONE lbl | na 16 16 | 0068a4 |             | umstar_counter                       
3010:000 | DONE ins | na 16 16 | 0068a4 | 88          |                 dey                  
3011:000 | DONE ins | na 16 16 | 0068a5 | d0 ef       |                 bne 006896           
3012:000 | DONE wsp | na 16 16 |        |             |
3013:000 | DONE cmt | na 16 16 |        |             |                 ; We're all done, clean up and leave
3014:000 | DONE ins | na 16 16 | 0068a7 | 95 00       |                 sta.dx 00            store lower cell of number in NOS
3015:000 | DONE ins | na 16 16 | 0068a9 | a4 1a       |                 ldy.d 00021a         store MSB in TOS as double cell
3016:000 | DONE wsp | na 16 16 |        |             |
3017:000 | DONE ins | na 16 16 | 0068ab | 80 1e       |                 bra 0068cb           don't use RTS so we can natively compile
3018:000 | DONE wsp | na 16 16 |        |             |
3019:000 | DONE lbl | na 16 16 | 0068ad |             | umstar_zero                          
3020:000 | DONE cmt | na 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
3021:000 | DONE ins | na 16 16 | 0068ad | a0 00 00    |                 ldy.# 0000           
3022:000 | DONE ins | na 16 16 | 0068b0 | 94 00       |                 sty.dx 00            
3023:000 | DONE ins | na 16 16 | 0068b2 | 80 17       |                 bra 0068cb           
3024:000 | DONE wsp | na 16 16 |        |             |
3025:000 | DONE lbl | na 16 16 | 0068b4 |             | umstar_one_tos                       
3026:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is one, life is easy
3027:000 | DONE ins | na 16 16 | 0068b4 | 88          |                 dey                  NOS is LSW, TOS becomes zero
3028:000 | DONE ins | na 16 16 | 0068b5 | 80 14       |                 bra 0068cb           
3029:000 | DONE lbl | na 16 16 | 0068b7 |             | umstar_one_nos                       
3030:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is one, life is easy
3031:000 | DONE ins | na 16 16 | 0068b7 | 94 00       |                 sty.dx 00            
3032:000 | DONE ins | na 16 16 | 0068b9 | a0 00 00    |                 ldy.# 0000           
3033:000 | DONE ins | na 16 16 | 0068bc | 80 0d       |                 bra 0068cb           
3034:000 | DONE wsp | na 16 16 |        |             |
3035:000 | DONE lbl | na 16 16 | 0068be |             | umstar_two_tos                       
3036:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is two, life is easy
3037:000 | DONE ins | na 16 16 | 0068be | b5 00       |                 lda.dx 00            
3038:000 | DONE ins | na 16 16 | 0068c0 | 80 01       |                 bra 0068c3           
3039:000 | DONE lbl | na 16 16 | 0068c2 |             | umstar_two_nos                       
3040:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is two, life is still easy
3041:000 | DONE ins | na 16 16 | 0068c2 | 98          |                 tya                  
3042:000 | DONE lbl | na 16 16 | 0068c3 |             | umstar_two_common                    
3043:000 | DONE ins | na 16 16 | 0068c3 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
3044:000 | DONE ins | na 16 16 | 0068c4 | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
3045:000 | DONE wsp | na 16 16 |        |             |
3046:000 | DONE ins | na 16 16 | 0068c6 | a9 00 00    |                 lda.# 0000           
3047:000 | DONE ins | na 16 16 | 0068c9 | 2a          |                 rol.a                Rotate any Carry Flag into MSW
3048:000 | DONE ins | na 16 16 | 0068ca | a8          |                 tay                  
3049:000 | DONE wsp | na 16 16 |        |             |
3050:000 | DONE lbl | na 16 16 | 0068cb |             | z_umstar                             
3050:001 | DONE ins | na 16 16 | 0068cb | 60          |                 rts                  
3051:000 | DONE wsp | na 16 16 |        |             |
3052:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3053:000 | DONE cmt | na 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
3054:000 | DONE cmt | na 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
3055:000 | DONE cmt | na 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
3056:000 | DONE cmt | na 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
3057:000 | DONE cmt | na 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
3058:000 | DONE cmt | na 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
3059:000 | DONE lbl | na 16 16 | 0068cc |             | xt_ummod                             
3060:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3061:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3062:000 | DONE cmt | na 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
3063:000 | DONE cmt | na 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
3064:000 | DONE cmt | na 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
3065:000 | DONE cmt | na 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
3066:000 | DONE cmt | na 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
3067:000 | DONE cmt | na 16 16 |        |             |                 ;
3068:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3069:000 | DONE cmt | na 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
3070:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
3071:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
3072:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3073:000 | DONE cmt | na 16 16 |        |             |                 ;
3074:000 | DONE cmt | na 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
3075:000 | DONE cmt | na 16 16 |        |             |                 ; and low cell in 3OS
3076:000 | DONE wsp | na 16 16 |        |             |
3077:000 | DONE cmt | na 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
3078:000 | DONE cmt | na 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
3079:000 | DONE cmt | na 16 16 |        |             |                 ; to appear like in Gforth
3080:000 | DONE ins | na 16 16 | 0068cc | 98          |                 tya                  force flag test
3081:000 | DONE ins | na 16 16 | 0068cd | d0 06       |                 bne 0068d5           
3082:000 | DONE wsp | na 16 16 |        |             |
3083:000 | DONE ins | na 16 16 | 0068cf | a9 40 72    |                 lda.# 007240         
3084:000 | DONE ins | na 16 16 | 0068d2 | 4c 1e 6f    |                 jmp 006f1e           
3085:000 | DONE wsp | na 16 16 |        |             |
3086:000 | DONE lbl | na 16 16 | 0068d5 |             | ummod_notzero                        
3087:000 | DONE ins | na 16 16 | 0068d5 | 84 20       |                 sty.d 000220         Y is now free
3088:000 | DONE ins | na 16 16 | 0068d7 | b5 00       |                 lda.dx 00            high cell of dividend
3089:000 | DONE ins | na 16 16 | 0068d9 | 85 22       |                 sta.d 000222         
3090:000 | DONE ins | na 16 16 | 0068db | b5 02       |                 lda.dx 02            low cell of dividend
3091:000 | DONE ins | na 16 16 | 0068dd | 85 24       |                 sta.d 000224         
3092:000 | DONE wsp | na 16 16 |        |             |
3093:000 | DONE cmt | na 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
3094:000 | DONE cmt | na 16 16 |        |             |                 ; Pointer, freeing X for index duty
3095:000 | DONE ins | na 16 16 | 0068df | e8          |                 inx                  
3096:000 | DONE ins | na 16 16 | 0068e0 | e8          |                 inx                  
3097:000 | DONE ins | na 16 16 | 0068e1 | 86 04       |                 stx.d 000204         
3098:000 | DONE wsp | na 16 16 |        |             |
3099:000 | DONE cmt | na 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
3100:000 | DONE cmt | na 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
3101:000 | DONE cmt | na 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
3102:000 | DONE cmt | na 16 16 |        |             |                 ; we did that already in a separate step
3103:000 | DONE ins | na 16 16 | 0068e3 | 38          |                 sec                  
3104:000 | DONE ins | na 16 16 | 0068e4 | a5 22       |                 lda.d 000222         
3105:000 | DONE ins | na 16 16 | 0068e6 | e5 20       |                 sbc.d 000220         
3106:000 | DONE ins | na 16 16 | 0068e8 | b0 21       |                 bcs 00690b           
3107:000 | DONE wsp | na 16 16 |        |             |
3108:000 | DONE cmt | na 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
3109:000 | DONE cmt | na 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
3110:000 | DONE cmt | na 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
3111:000 | DONE cmt | na 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
3112:000 | DONE cmt | na 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
3113:000 | DONE cmt | na 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
3114:000 | DONE ins | na 16 16 | 0068ea | a2 11 00    |                 ldx.# &17            
3115:000 | DONE wsp | na 16 16 |        |             |
3116:000 | DONE lbl | na 16 16 | 0068ed |             | ummod_shift                          
3117:000 | DONE cmt | na 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
3118:000 | DONE cmt | na 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
3119:000 | DONE cmt | na 16 16 |        |             |                 ; pushed off the other end in the last rotation
3120:000 | DONE ins | na 16 16 | 0068ed | 26 24       |                 rol.d 000224         
3121:000 | DONE wsp | na 16 16 |        |             |
3122:000 | DONE cmt | na 16 16 |        |             |                 ; loop control
3123:000 | DONE ins | na 16 16 | 0068ef | ca          |                 dex                  
3124:000 | DONE ins | na 16 16 | 0068f0 | f0 22       |                 beq 006914           
3125:000 | DONE wsp | na 16 16 |        |             |
3126:000 | DONE cmt | na 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
3127:000 | DONE cmt | na 16 16 |        |             |                 ; next bit in from high bit of low cell
3128:000 | DONE ins | na 16 16 | 0068f2 | 26 22       |                 rol.d 000222         
3129:000 | DONE ins | na 16 16 | 0068f4 | a9 00 00    |                 lda.# 0000           
3130:000 | DONE ins | na 16 16 | 0068f7 | 2a          |                 rol.a                
3131:000 | DONE ins | na 16 16 | 0068f8 | 85 26       |                 sta.d 000226         store old high bit of dividend
3132:000 | DONE wsp | na 16 16 |        |             |
3133:000 | DONE cmt | na 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
3134:000 | DONE cmt | na 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
3135:000 | DONE cmt | na 16 16 |        |             |                 ; cleared, divisor did not fit
3136:000 | DONE ins | na 16 16 | 0068fa | 38          |                 sec                  
3137:000 | DONE ins | na 16 16 | 0068fb | a5 22       |                 lda.d 000222         
3138:000 | DONE ins | na 16 16 | 0068fd | e5 20       |                 sbc.d 000220         
3139:000 | DONE ins | na 16 16 | 0068ff | a8          |                 tay                  save difference in Y until we know if we need it
3140:000 | DONE wsp | na 16 16 |        |             |
3141:000 | DONE cmt | na 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
3142:000 | DONE cmt | na 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
3143:000 | DONE cmt | na 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
3144:000 | DONE cmt | na 16 16 |        |             |                 ; remains set
3145:000 | DONE ins | na 16 16 | 006900 | a5 26       |                 lda.d 000226         
3146:000 | DONE ins | na 16 16 | 006902 | e9 00 00    |                 sbc.# 0000           
3147:000 | DONE ins | na 16 16 | 006905 | 90 e6       |                 bcc 0068ed           
3148:000 | DONE wsp | na 16 16 |        |             |
3149:000 | DONE cmt | na 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
3150:000 | DONE cmt | na 16 16 |        |             |                 ; cell to what it would be after subtraction
3151:000 | DONE ins | na 16 16 | 006907 | 84 22       |                 sty.d 000222         
3152:000 | DONE ins | na 16 16 | 006909 | 80 e2       |                 bra 0068ed           
3153:000 | DONE wsp | na 16 16 |        |             |
3154:000 | DONE lbl | na 16 16 | 00690b |             | ummod_overflow                       
3155:000 | DONE cmt | na 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
3156:000 | DONE cmt | na 16 16 |        |             |                 ; in both the quotient and remainder
3157:000 | DONE ins | na 16 16 | 00690b | a6 04       |                 ldx.d 000204         restore DSP
3158:000 | DONE ins | na 16 16 | 00690d | a0 ff ff    |                 ldy.# 0ffff          
3159:000 | DONE ins | na 16 16 | 006910 | 94 00       |                 sty.dx 00            
3160:000 | DONE ins | na 16 16 | 006912 | 80 08       |                 bra 00691c           go to end to enable native coding
3161:000 | DONE wsp | na 16 16 |        |             |
3162:000 | DONE lbl | na 16 16 | 006914 |             | ummod_complete                       
3163:000 | DONE ins | na 16 16 | 006914 | a6 04       |                 ldx.d 000204         restore DSP
3164:000 | DONE ins | na 16 16 | 006916 | a4 24       |                 ldy.d 000224         quotient is TOS
3165:000 | DONE ins | na 16 16 | 006918 | a5 22       |                 lda.d 000222         remainder is NOS
3166:000 | DONE ins | na 16 16 | 00691a | 95 00       |                 sta.dx 00            
3167:000 | DONE wsp | na 16 16 |        |             |
3168:000 | DONE lbl | na 16 16 | 00691c |             | z_ummod                              
3168:001 | DONE ins | na 16 16 | 00691c | 60          |                 rts                  
3169:000 | DONE wsp | na 16 16 |        |             |
3170:000 | DONE wsp | na 16 16 |        |             |
3171:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3172:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
3173:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
3174:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
3175:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
3176:000 | DONE lbl | na 16 16 | 00691d |             | xt_unused                            
3177:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3178:000 | DONE ins | na 16 16 | 00691d | a9 ff 7b    |                 lda.# 007bff         
3179:000 | DONE ins | na 16 16 | 006920 | 38          |                 sec                  
3180:000 | DONE ins | na 16 16 | 006921 | e5 00       |                 sbc.d 000200         current compile pointer
3181:000 | DONE wsp | na 16 16 |        |             |
3182:000 | DONE ins | na 16 16 | 006923 | ca          |                 dex                  
3183:000 | DONE ins | na 16 16 | 006924 | ca          |                 dex                  
3184:000 | DONE ins | na 16 16 | 006925 | 94 00       |                 sty.dx 00            
3185:000 | DONE wsp | na 16 16 |        |             |
3186:000 | DONE ins | na 16 16 | 006927 | a8          |                 tay                  
3187:000 | DONE wsp | na 16 16 |        |             |
3188:000 | DONE lbl | na 16 16 | 006928 |             | z_unused                             
3188:001 | DONE ins | na 16 16 | 006928 | 60          |                 rts                  
3189:000 | DONE wsp | na 16 16 |        |             |
3190:000 | DONE wsp | na 16 16 |        |             |
3191:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3192:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
3193:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
3194:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
3195:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
3196:000 | DONE lbl | na 16 16 | 006929 |             | xt_variable                          
3197:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
3198:000 | DONE ins | na 16 16 | 006929 | 20 64 64    |                 jsr 006464           
3199:000 | DONE wsp | na 16 16 |        |             |
3200:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
3201:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
3202:000 | DONE ins | na 16 16 | 00692c | a9 00 00    |                 lda.# 0000           
3203:000 | DONE ins | na 16 16 | 00692f | 92 00       |                 sta.di 000200        STA (CP)
3204:000 | DONE wsp | na 16 16 |        |             |
3205:000 | DONE ins | na 16 16 | 006931 | e6 00       |                 inc.d 000200         direct COMMA
3206:000 | DONE ins | na 16 16 | 006933 | e6 00       |                 inc.d 000200         
3207:000 | DONE wsp | na 16 16 |        |             |
3208:000 | DONE lbl | na 16 16 | 006935 |             | z_variable                           
3208:001 | DONE ins | na 16 16 | 006935 | 60          |                 rts                  
3209:000 | DONE wsp | na 16 16 |        |             |
3210:000 | DONE wsp | na 16 16 |        |             |
3211:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3212:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
3213:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
3214:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
3215:000 | DONE lbl | na 16 16 | 006936 |             | xt_words                             
3216:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3217:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3218:000 | DONE ins | na 16 16 | 006936 | 20 5d 64    |                 jsr 00645d           start on next line, this is a style choice
3219:000 | DONE wsp | na 16 16 |        |             |
3220:000 | DONE ins | na 16 16 | 006939 | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
3221:000 | DONE ins | na 16 16 | 00693b | 48          |                 pha                  
3222:000 | DONE wsp | na 16 16 |        |             |
3223:000 | DONE ins | na 16 16 | 00693c | ca          |                 dex                  create room on TOS
3224:000 | DONE ins | na 16 16 | 00693d | ca          |                 dex                  
3225:000 | DONE ins | na 16 16 | 00693e | 94 00       |                 sty.dx 00            
3226:000 | DONE wsp | na 16 16 |        |             |
3227:000 | DONE lbl | na 16 16 | 006940 |             | words_loop                           
3228:000 | DONE ins | na 16 16 | 006940 | a8          |                 tay                  ( nt )
3229:000 | DONE ins | na 16 16 | 006941 | 20 72 66    |                 jsr 006672           ( nt -- addr u )
3230:000 | DONE ins | na 16 16 | 006944 | 20 4c 68    |                 jsr 00684c           ( addr u -- )
3231:000 | DONE ins | na 16 16 | 006947 | 20 11 68    |                 jsr 006811           
3232:000 | DONE wsp | na 16 16 |        |             |
3233:000 | DONE ins | na 16 16 | 00694a | 68          |                 pla                  get back first entry in Dictionary
3234:000 | DONE wsp | na 16 16 |        |             |
3235:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
3236:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
3237:000 | DONE ins | na 16 16 | 00694b | 1a          |                 inc.a                
3238:000 | DONE ins | na 16 16 | 00694c | 1a          |                 inc.a                
3239:000 | DONE wsp | na 16 16 |        |             |
3240:000 | DONE ins | na 16 16 | 00694d | ca          |                 dex                  
3241:000 | DONE ins | na 16 16 | 00694e | ca          |                 dex                  
3242:000 | DONE ins | na 16 16 | 00694f | 94 00       |                 sty.dx 00            
3243:000 | DONE wsp | na 16 16 |        |             |
3244:000 | DONE ins | na 16 16 | 006951 | a8          |                 tay                  
3245:000 | DONE ins | na 16 16 | 006952 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3246:000 | DONE ins | na 16 16 | 006955 | 48          |                 pha                  
3247:000 | DONE ins | na 16 16 | 006956 | d0 e8       |                 bne 006940           zero entry signals end of Dictionary
3248:000 | DONE wsp | na 16 16 |        |             |
3249:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
3250:000 | DONE ins | na 16 16 | 006958 | 68          |                 pla                  balance MPU stack, value discarded
3251:000 | DONE wsp | na 16 16 |        |             |
3252:000 | DONE ins | na 16 16 | 006959 | b4 00       |                 ldy.dx 00            
3253:000 | DONE ins | na 16 16 | 00695b | e8          |                 inx                  
3254:000 | DONE ins | na 16 16 | 00695c | e8          |                 inx                  
3255:000 | DONE wsp | na 16 16 |        |             |
3256:000 | DONE lbl | na 16 16 | 00695d |             | z_words                              
3256:001 | DONE ins | na 16 16 | 00695d | 60          |                 rts                  
3257:000 | DONE wsp | na 16 16 |        |             |
3258:000 | DONE wsp | na 16 16 |        |             |
3259:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3260:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
3261:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
3262:000 | DONE lbl | na 16 16 | 00695e |             | xt_xor                               
3263:000 | DONE ins | na 16 16 | 00695e | 98          |                 tya                  
3264:000 | DONE ins | na 16 16 | 00695f | 55 00       |                 eor.dx 00            
3265:000 | DONE ins | na 16 16 | 006961 | a8          |                 tay                  
3266:000 | DONE wsp | na 16 16 |        |             |
3267:000 | DONE ins | na 16 16 | 006962 | e8          |                 inx                  
3268:000 | DONE ins | na 16 16 | 006963 | e8          |                 inx                  
3269:000 | DONE wsp | na 16 16 |        |             |
3270:000 | DONE lbl | na 16 16 | 006964 |             | z_xor                                
3270:001 | DONE ins | na 16 16 | 006964 | 60          |                 rts                  
3271:000 | DONE wsp | na 16 16 |        |             |
3272:000 | DONE wsp | na 16 16 |        |             |
3273:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3274:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
3275:000 | DONE wsp | na 16 16 |        |             |
3276:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
3276:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
3276:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
3276:003 | DONE cmt | na 16 16 |        |             | ; This version: 19. Feb 2017
3276:004 | DONE wsp | na 16 16 |        |             |
3276:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
3276:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
3276:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
3276:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
3276:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
3276:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
3276:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
3276:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
3276:013 | DONE cmt | na 16 16 |        |             | ;
3276:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
3276:015 | DONE cmt | na 16 16 |        |             | ;
3276:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
3276:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
3276:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
3276:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
3276:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
3276:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
3276:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
3276:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
3276:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
3276:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
3276:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
3276:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
3276:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
3276:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
3276:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
3276:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
3276:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
3276:033 | DONE cmt | na 16 16 |        |             | ;
3276:034 | DONE cmt | na 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
3276:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
3276:036 | DONE cmt | na 16 16 |        |             | ;
3276:037 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
3276:038 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
3276:039 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
3276:040 | DONE wsp | na 16 16 |        |             |
3276:041 | DONE cmt | na 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
3276:042 | DONE cmt | na 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
3276:043 | DONE cmt | na 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
3276:044 | DONE cmt | na 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
3276:045 | DONE cmt | na 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
3276:046 | DONE cmt | na 16 16 |        |             | ; involved.
3276:047 | DONE wsp | na 16 16 |        |             |
3276:048 | DONE lbl | na 16 16 | 006965 |             | nt_bye                               
3276:049 | DONE dir | na 16 16 | 006965 | (1 bytes)   |         .byte 03                     length of word string
3276:049 | DONE dir | na 16 16 |        |             |                 03                       --  .
3276:050 | DONE dir | na 16 16 | 006966 | (1 bytes)   |         .byte { NC }                 status byte
3276:050 | DONE dir | na 16 16 |        |             |                 01                       --  .
3276:051 | DONE dir | na 16 16 | 006967 | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
3276:051 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
3276:052 | DONE dir | na 16 16 | 006969 | (2 bytes)   |         .word 0063d2                 start of code, the xt of this word
3276:052 | DONE dir | na 16 16 |        |             |                 d2 63                    --  . c
3276:053 | DONE dir | na 16 16 | 00696b | (2 bytes)   |         .word 0063d5                 end of code (points to RTS)
3276:053 | DONE dir | na 16 16 |        |             |                 d5 63                    --  . c
3276:054 | DONE dir | na 16 16 | 00696d | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
3276:054 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
3276:055 | DONE wsp | na 16 16 |        |             |
3276:056 | DONE lbl | na 16 16 | 006970 |             | nt_cold                              
3276:057 | DONE dir | na 16 16 | 006970 | (2 bytes)   |         .byte 4, 00                  
3276:057 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3276:058 | DONE dir | na 16 16 | 006972 | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
3276:058 | DONE dir | na 16 16 |        |             |                 65 69 63 60 de 60        --  e i c ` . `
3276:059 | DONE dir | na 16 16 | 006978 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
3276:059 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
3276:060 | DONE wsp | na 16 16 |        |             |
3276:061 | DONE lbl | na 16 16 | 00697c |             | nt_words                             
3276:062 | DONE dir | na 16 16 | 00697c | (2 bytes)   |         .byte 5, { NC }              
3276:062 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3276:063 | DONE dir | na 16 16 | 00697e | (6 bytes)   |         .word nt_cold, xt_words, 00695d 
3276:063 | DONE dir | na 16 16 |        |             |                 70 69 36 69 5d 69        --  p i 6 i ] i
3276:064 | DONE dir | na 16 16 | 006984 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
3276:064 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
3276:065 | DONE wsp | na 16 16 |        |             |
3276:066 | DONE lbl | na 16 16 | 006989 |             | nt_dump                              
3276:067 | DONE dir | na 16 16 | 006989 | (2 bytes)   |         .byte 4, { NC }              
3276:067 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:068 | DONE dir | na 16 16 | 00698b | (6 bytes)   |         .word nt_words, xt_dump, 00654e 
3276:068 | DONE dir | na 16 16 |        |             |                 7c 69 28 65 4e 65        --  | i ( e N e
3276:069 | DONE dir | na 16 16 | 006991 | (4 bytes)   |         .byte 64, 75, 6d, 70         
3276:069 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
3276:070 | DONE wsp | na 16 16 |        |             |
3276:071 | DONE lbl | na 16 16 | 006995 |             | nt_bell                              
3276:072 | DONE dir | na 16 16 | 006995 | (2 bytes)   |         .byte 4, { NC }              
3276:072 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:073 | DONE dir | na 16 16 | 006997 | (6 bytes)   |         .word nt_dump, xt_bell, 0063ac 
3276:073 | DONE dir | na 16 16 |        |             |                 89 69 a6 63 ac 63        --  . i . c . c
3276:074 | DONE dir | na 16 16 | 00699d | (4 bytes)   |         .byte 62, 65, 6c, 6c         
3276:074 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
3276:075 | DONE wsp | na 16 16 |        |             |
3276:076 | DONE lbl | na 16 16 | 0069a1 |             | nt_decimal                           
3276:077 | DONE dir | na 16 16 | 0069a1 | (2 bytes)   |         .byte 7, { NC }              
3276:077 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3276:078 | DONE dir | na 16 16 | 0069a3 | (6 bytes)   |         .word nt_bell, xt_decimal, 0064dc 
3276:078 | DONE dir | na 16 16 |        |             |                 95 69 d7 64 dc 64        --  . i . d . d
3276:079 | DONE dir | na 16 16 | 0069a9 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
3276:079 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
3276:080 | DONE wsp | na 16 16 |        |             |
3276:081 | DONE lbl | na 16 16 | 0069b0 |             | nt_hex                               
3276:082 | DONE dir | na 16 16 | 0069b0 | (2 bytes)   |         .byte 3, { NC }              
3276:082 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:083 | DONE dir | na 16 16 | 0069b2 | (6 bytes)   |         .word nt_decimal, xt_hex, 006603 
3276:083 | DONE dir | na 16 16 |        |             |                 a1 69 fe 65 03 66        --  . i . e . f
3276:084 | DONE dir | na 16 16 | 0069b8 | (3 bytes)   |         .byte 68, 65, 78             
3276:084 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
3276:085 | DONE wsp | na 16 16 |        |             |
3276:086 | DONE lbl | na 16 16 | 0069bb |             | nt_unused                            
3276:087 | DONE dir | na 16 16 | 0069bb | (2 bytes)   |         .byte 6, { NC }              
3276:087 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3276:088 | DONE dir | na 16 16 | 0069bd | (6 bytes)   |         .word nt_hex, xt_unused, 006928 
3276:088 | DONE dir | na 16 16 |        |             |                 b0 69 1d 69 28 69        --  . i . i ( i
3276:089 | DONE dir | na 16 16 | 0069c3 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
3276:089 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
3276:090 | DONE wsp | na 16 16 |        |             |
3276:091 | DONE lbl | na 16 16 | 0069c9 |             | nt_page                              
3276:092 | DONE dir | na 16 16 | 0069c9 | (2 bytes)   |         .byte 4, { NC }              
3276:092 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:093 | DONE dir | na 16 16 | 0069cb | (6 bytes)   |         .word nt_unused, xt_page, 0066b3 
3276:093 | DONE dir | na 16 16 |        |             |                 bb 69 a7 66 b3 66        --  . i . f . f
3276:094 | DONE dir | na 16 16 | 0069d1 | (4 bytes)   |         .byte 70, 61, 67, 65         
3276:094 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
3276:095 | DONE wsp | na 16 16 |        |             |
3276:096 | DONE lbl | na 16 16 | 0069d5 |             | nt_dnegate                           
3276:097 | DONE dir | na 16 16 | 0069d5 | (2 bytes)   |         .byte 7, { NC }              
3276:097 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3276:098 | DONE dir | na 16 16 | 0069d7 | (6 bytes)   |         .word nt_page, xt_dnegate, 0064ff 
3276:098 | DONE dir | na 16 16 |        |             |                 c9 69 ec 64 ff 64        --  . i . d . d
3276:099 | DONE dir | na 16 16 | 0069dd | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
3276:099 | DONE dir | na 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
3276:100 | DONE wsp | na 16 16 |        |             |
3276:101 | DONE lbl | na 16 16 | 0069e4 |             | nt_ummod                             
3276:102 | DONE dir | na 16 16 | 0069e4 | (2 bytes)   |         .byte 6, { NC }              
3276:102 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3276:103 | DONE dir | na 16 16 | 0069e6 | (6 bytes)   |         .word nt_dnegate, xt_ummod, 00691c 
3276:103 | DONE dir | na 16 16 |        |             |                 d5 69 cc 68 1c 69        --  . i . h . i
3276:104 | DONE dir | na 16 16 | 0069ec | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
3276:104 | DONE dir | na 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
3276:105 | DONE wsp | na 16 16 |        |             |
3276:106 | DONE lbl | na 16 16 | 0069f2 |             | nt_star                              
3276:107 | DONE dir | na 16 16 | 0069f2 | (2 bytes)   |         .byte 1, { NC }              
3276:107 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:108 | DONE dir | na 16 16 | 0069f4 | (6 bytes)   |         .word nt_ummod, xt_star, 00682c 
3276:108 | DONE dir | na 16 16 |        |             |                 e4 69 25 68 2c 68        --  . i % h , h
3276:109 | DONE dir | na 16 16 | 0069fa | (1 bytes)   |         .byte 2a                     
3276:109 | DONE dir | na 16 16 |        |             |                 2a                       --  *
3276:110 | DONE wsp | na 16 16 |        |             |
3276:111 | DONE lbl | na 16 16 | 0069fb |             | nt_mstar                             
3276:112 | DONE dir | na 16 16 | 0069fb | (2 bytes)   |         .byte 2, { NC }              
3276:112 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:113 | DONE dir | na 16 16 | 0069fd | (6 bytes)   |         .word nt_star, xt_mstar, 006642 
3276:113 | DONE dir | na 16 16 |        |             |                 f2 69 23 66 42 66        --  . i # f B f
3276:114 | DONE dir | na 16 16 | 006a03 | (2 bytes)   |         .byte 6d, 2a                 
3276:114 | DONE dir | na 16 16 |        |             |                 6d 2a                    --  m *
3276:115 | DONE wsp | na 16 16 |        |             |
3276:116 | DONE lbl | na 16 16 | 006a05 |             | nt_umstar                            
3276:117 | DONE dir | na 16 16 | 006a05 | (2 bytes)   |         .byte 3, { NC }              
3276:117 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:118 | DONE dir | na 16 16 | 006a07 | (6 bytes)   |         .word nt_mstar, xt_umstar, 0068cb 
3276:118 | DONE dir | na 16 16 |        |             |                 fb 69 6d 68 cb 68        --  . i m h . h
3276:119 | DONE dir | na 16 16 | 006a0d | (3 bytes)   |         .byte 75, 6d, 2a             
3276:119 | DONE dir | na 16 16 |        |             |                 75 6d 2a                 --  u m *
3276:120 | DONE wsp | na 16 16 |        |             |
3276:121 | DONE lbl | na 16 16 | 006a10 |             | nt_count                             
3276:122 | DONE dir | na 16 16 | 006a10 | (2 bytes)   |         .byte 5, { NC }              
3276:122 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3276:123 | DONE dir | na 16 16 | 006a12 | (6 bytes)   |         .word nt_umstar, xt_count, 00645c 
3276:123 | DONE dir | na 16 16 |        |             |                 05 6a 4e 64 5c 64        --  . j N d \ d
3276:124 | DONE dir | na 16 16 | 006a18 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
3276:124 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
3276:125 | DONE wsp | na 16 16 |        |             |
3276:126 | DONE lbl | na 16 16 | 006a1d |             | nt_abort                             
3276:127 | DONE dir | na 16 16 | 006a1d | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
3276:127 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
3276:128 | DONE dir | na 16 16 | 006a1f | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
3276:128 | DONE dir | na 16 16 |        |             |                 10 6a 97 60 de 60        --  . j . ` . `
3276:129 | DONE dir | na 16 16 | 006a25 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
3276:129 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
3276:130 | DONE wsp | na 16 16 |        |             |
3276:131 | DONE lbl | na 16 16 | 006a2a |             | nt_parse                             
3276:132 | DONE dir | na 16 16 | 006a2a | (2 bytes)   |         .byte 5, 00                  
3276:132 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
3276:133 | DONE dir | na 16 16 | 006a2c | (6 bytes)   |         .word nt_abort, xt_parse, 006718 
3276:133 | DONE dir | na 16 16 |        |             |                 1d 6a e6 66 18 67        --  . j . f . g
3276:134 | DONE dir | na 16 16 | 006a32 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
3276:134 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
3276:135 | DONE wsp | na 16 16 |        |             |
3276:136 | DONE lbl | na 16 16 | 006a37 |             | nt_quit                              
3276:137 | DONE dir | na 16 16 | 006a37 | (2 bytes)   |         .byte 4, 00                  
3276:137 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3276:138 | DONE dir | na 16 16 | 006a39 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
3276:138 | DONE dir | na 16 16 |        |             |                 2a 6a 9f 60 de 60        --  * j . ` . `
3276:139 | DONE dir | na 16 16 | 006a3f | (4 bytes)   |         .byte 71, 75, 69, 74         
3276:139 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
3276:140 | DONE wsp | na 16 16 |        |             |
3276:141 | DONE lbl | na 16 16 | 006a43 |             | nt_question                          
3276:142 | DONE dir | na 16 16 | 006a43 | (2 bytes)   |         .byte 1, { NC }              
3276:142 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:143 | DONE dir | na 16 16 | 006a45 | (6 bytes)   |         .word nt_quit, xt_question, 0061e8 
3276:143 | DONE dir | na 16 16 |        |             |                 37 6a e2 61 e8 61        --  7 j . a . a
3276:144 | DONE dir | na 16 16 | 006a4b | (1 bytes)   |         .byte 3f                     
3276:144 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
3276:145 | DONE wsp | na 16 16 |        |             |
3276:146 | DONE lbl | na 16 16 | 006a4c |             | nt_name-int                          
3276:147 | DONE dir | na 16 16 | 006a4c | (2 bytes)   |         .byte 8, { NC }              
3276:147 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3276:148 | DONE dir | na 16 16 | 006a4e | (6 bytes)   |         .word nt_question, xt_name-int, 006671 
3276:148 | DONE dir | na 16 16 |        |             |                 43 6a 69 66 71 66        --  C j i f q f
3276:149 | DONE dir | na 16 16 | 006a54 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
3276:149 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
3276:149 | DONE dir | na 16 16 |        |             |                                          -- 
3276:150 | DONE wsp | na 16 16 |        |             |
3276:151 | DONE lbl | na 16 16 | 006a5c |             | nt_cr                                
3276:152 | DONE dir | na 16 16 | 006a5c | (2 bytes)   |         .byte 2, { NC }              
3276:152 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:153 | DONE dir | na 16 16 | 006a5e | (6 bytes)   |         .word nt_name-int, xt_cr, 006463 
3276:153 | DONE dir | na 16 16 |        |             |                 4c 6a 5d 64 63 64        --  L j ] d c d
3276:154 | DONE dir | na 16 16 | 006a64 | (2 bytes)   |         .byte 63, 72                 
3276:154 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
3276:155 | DONE wsp | na 16 16 |        |             |
3276:156 | DONE lbl | na 16 16 | 006a66 |             | nt_bl                                
3276:157 | DONE dir | na 16 16 | 006a66 | (2 bytes)   |         .byte 2, { NC }              
3276:157 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:158 | DONE dir | na 16 16 | 006a68 | (6 bytes)   |         .word nt_cr, xt_bl, 0063bb   
3276:158 | DONE dir | na 16 16 |        |             |                 5c 6a b4 63 bb 63        --  \ j . c . c
3276:159 | DONE dir | na 16 16 | 006a6e | (2 bytes)   |         .byte 62, 6c                 
3276:159 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
3276:160 | DONE wsp | na 16 16 |        |             |
3276:161 | DONE lbl | na 16 16 | 006a70 |             | nt_spaces                            
3276:162 | DONE dir | na 16 16 | 006a70 | (2 bytes)   |         .byte 6, { NC }              
3276:162 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3276:163 | DONE dir | na 16 16 | 006a72 | (6 bytes)   |         .word nt_bl, xt_spaces, 006824 
3276:163 | DONE dir | na 16 16 |        |             |                 66 6a 18 68 24 68        --  f j . h $ h
3276:164 | DONE dir | na 16 16 | 006a78 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
3276:164 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
3276:165 | DONE wsp | na 16 16 |        |             |
3276:166 | DONE lbl | na 16 16 | 006a7e |             | nt_space                             
3276:167 | DONE dir | na 16 16 | 006a7e | (2 bytes)   |         .byte 5, { NC }              
3276:167 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3276:168 | DONE dir | na 16 16 | 006a80 | (6 bytes)   |         .word nt_spaces, xt_space, 006817 
3276:168 | DONE dir | na 16 16 |        |             |                 70 6a 11 68 17 68        --  p j . h . h
3276:169 | DONE dir | na 16 16 | 006a86 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
3276:169 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
3276:170 | DONE wsp | na 16 16 |        |             |
3276:171 | DONE lbl | na 16 16 | 006a8b |             | nt_dots                              
3276:172 | DONE dir | na 16 16 | 006a8b | (2 bytes)   |         .byte 2, { NC }              
3276:172 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:173 | DONE dir | na 16 16 | 006a8d | (6 bytes)   |         .word nt_space, xt_dots, 00619a 
3276:173 | DONE dir | na 16 16 |        |             |                 7e 6a 53 61 9a 61        --  ~ j S a . a
3276:174 | DONE dir | na 16 16 | 006a93 | (2 bytes)   |         .byte 2e, 73                 
3276:174 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
3276:175 | DONE wsp | na 16 16 |        |             |
3276:176 | DONE lbl | na 16 16 | 006a95 |             | nt_type                              
3276:177 | DONE dir | na 16 16 | 006a95 | (2 bytes)   |         .byte 4, 0                   
3276:177 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3276:178 | DONE dir | na 16 16 | 006a97 | (6 bytes)   |         .word nt_dots, xt_type, 00686c 
3276:178 | DONE dir | na 16 16 |        |             |                 8b 6a 4c 68 6c 68        --  . j L h l h
3276:179 | DONE dir | na 16 16 | 006a9d | (4 bytes)   |         .byte 74, 79, 70, 65         
3276:179 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
3276:180 | DONE wsp | na 16 16 |        |             |
3276:181 | DONE lbl | na 16 16 | 006aa1 |             | nt_dot                               
3276:182 | DONE dir | na 16 16 | 006aa1 | (2 bytes)   |         .byte 1, { NC }              
3276:182 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:183 | DONE dir | na 16 16 | 006aa3 | (6 bytes)   |         .word nt_type, xt_dot, 006130 
3276:183 | DONE dir | na 16 16 |        |             |                 95 6a 1b 61 30 61        --  . j . a 0 a
3276:184 | DONE dir | na 16 16 | 006aa9 | (1 bytes)   |         .byte 2e                     
3276:184 | DONE dir | na 16 16 |        |             |                 2e                       --  .
3276:185 | DONE wsp | na 16 16 |        |             |
3276:186 | DONE lbl | na 16 16 | 006aaa |             | nt_pad                               
3276:187 | DONE dir | na 16 16 | 006aaa | (2 bytes)   |         .byte 3, { NC }              
3276:187 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:188 | DONE dir | na 16 16 | 006aac | (6 bytes)   |         .word nt_dot, xt_pad, 0066a6 
3276:188 | DONE dir | na 16 16 |        |             |                 a1 6a 9b 66 a6 66        --  . j . f . f
3276:189 | DONE dir | na 16 16 | 006ab2 | (3 bytes)   |         .byte 70, 61, 64             
3276:189 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
3276:190 | DONE wsp | na 16 16 |        |             |
3276:191 | DONE lbl | na 16 16 | 006ab5 |             | nt_base                              
3276:192 | DONE dir | na 16 16 | 006ab5 | (2 bytes)   |         .byte 4, { NC }              
3276:192 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:193 | DONE dir | na 16 16 | 006ab7 | (6 bytes)   |         .word nt_pad, xt_base, 0063a5 
3276:193 | DONE dir | na 16 16 |        |             |                 aa 6a 9e 63 a5 63        --  . j . c . c
3276:194 | DONE dir | na 16 16 | 006abd | (4 bytes)   |         .byte 62, 61, 73, 65         
3276:194 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
3276:195 | DONE wsp | na 16 16 |        |             |
3276:196 | DONE lbl | na 16 16 | 006ac1 |             | nt_evaluate                          
3276:197 | DONE dir | na 16 16 | 006ac1 | (2 bytes)   |         .byte 8, { NC }              
3276:197 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3276:198 | DONE dir | na 16 16 | 006ac3 | (6 bytes)   |         .word nt_base, xt_evaluate, 006582 
3276:198 | DONE dir | na 16 16 |        |             |                 b5 6a 54 65 82 65        --  . j T e . e
3276:199 | DONE dir | na 16 16 | 006ac9 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
3276:199 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
3276:199 | DONE dir | na 16 16 |        |             |                                          -- 
3276:200 | DONE wsp | na 16 16 |        |             |
3276:201 | DONE lbl | na 16 16 | 006ad1 |             | nt_cells                             
3276:202 | DONE dir | na 16 16 | 006ad1 | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
3276:202 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3276:203 | DONE dir | na 16 16 | 006ad3 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 00629c 
3276:203 | DONE dir | na 16 16 |        |             |                 c1 6a 99 62 9c 62        --  . j . b . b
3276:204 | DONE dir | na 16 16 | 006ad9 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
3276:204 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
3276:205 | DONE wsp | na 16 16 |        |             |
3276:206 | DONE lbl | na 16 16 | 006ade |             | nt_dotquote                          
3276:207 | DONE dir | na 16 16 | 006ade | (2 bytes)   |         .byte 2, { CO + NC + IM }    
3276:207 | DONE dir | na 16 16 |        |             |                 02 07                    --  . .
3276:208 | DONE dir | na 16 16 | 006ae0 | (6 bytes)   |         .word nt_cells, xt_dotquote, 006153 
3276:208 | DONE dir | na 16 16 |        |             |                 d1 6a 3f 61 53 61        --  . j ? a S a
3276:209 | DONE dir | na 16 16 | 006ae6 | (2 bytes)   |         .byte 2e, &34                
3276:209 | DONE dir | na 16 16 |        |             |                 2e 22                    --  . "
3276:210 | DONE wsp | na 16 16 |        |             |
3276:211 | DONE lbl | na 16 16 | 006ae8 |             | nt_squote                            
3276:212 | DONE dir | na 16 16 | 006ae8 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
3276:212 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
3276:213 | DONE dir | na 16 16 | 006aea | (6 bytes)   |         .word nt_dotquote, xt_squote, 00679b 
3276:213 | DONE dir | na 16 16 |        |             |                 de 6a 8a 67 9b 67        --  . j . g . g
3276:214 | DONE dir | na 16 16 | 006af0 | (2 bytes)   |         .byte 73, &34                
3276:214 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
3276:215 | DONE wsp | na 16 16 |        |             |
3276:216 | DONE lbl | na 16 16 | 006af2 |             | nt_sliteral                          
3276:217 | DONE dir | na 16 16 | 006af2 | (2 bytes)   |         .byte 8, { IM + CO }         
3276:217 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
3276:218 | DONE dir | na 16 16 | 006af4 | (6 bytes)   |         .word nt_squote, xt_sliteral, 0067e6 
3276:218 | DONE dir | na 16 16 |        |             |                 e8 6a 9c 67 e6 67        --  . j . g . g
3276:219 | DONE dir | na 16 16 | 006afa | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
3276:219 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
3276:219 | DONE dir | na 16 16 |        |             |                                          -- 
3276:220 | DONE wsp | na 16 16 |        |             |
3276:221 | DONE lbl | na 16 16 | 006b02 |             | nt_brackettick                       
3276:222 | DONE dir | na 16 16 | 006b02 | (2 bytes)   |         .byte 3, { IM + CO }         
3276:222 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
3276:223 | DONE dir | na 16 16 | 006b04 | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 006200 
3276:223 | DONE dir | na 16 16 |        |             |                 f2 6a fa 61 00 62        --  . j . a . b
3276:224 | DONE dir | na 16 16 | 006b0a | (3 bytes)   |         .byte 5b, 27, 5d             
3276:224 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
3276:225 | DONE wsp | na 16 16 |        |             |
3276:226 | DONE lbl | na 16 16 | 006b0d |             | nt_bracketchar                       
3276:227 | DONE dir | na 16 16 | 006b0d | (2 bytes)   |         .byte 6, { IM + CO }         
3276:227 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
3276:228 | DONE dir | na 16 16 | 006b0f | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 00620f 
3276:228 | DONE dir | na 16 16 |        |             |                 02 6b 09 62 0f 62        --  . k 	 b . b
3276:229 | DONE dir | na 16 16 | 006b15 | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
3276:229 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
3276:230 | DONE wsp | na 16 16 |        |             |
3276:231 | DONE lbl | na 16 16 | 006b1b |             | nt_literal                           
3276:232 | DONE dir | na 16 16 | 006b1b | (2 bytes)   |         .byte 7, { IM + CO }         
3276:232 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
3276:233 | DONE dir | na 16 16 | 006b1d | (6 bytes)   |         .word nt_bracketchar, xt_literal, 006615 
3276:233 | DONE dir | na 16 16 |        |             |                 0d 6b 04 66 15 66        --   k . f . f
3276:234 | DONE dir | na 16 16 | 006b23 | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
3276:234 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
3276:235 | DONE wsp | na 16 16 |        |             |
3276:236 | DONE lbl | na 16 16 | 006b2a |             | nt_compile-only                      
3276:237 | DONE dir | na 16 16 | 006b2a | (2 bytes)   |         .byte 0c, { NC }             
3276:237 | DONE dir | na 16 16 |        |             |                 0c 01                    --   .
3276:238 | DONE dir | na 16 16 | 006b2c | (6 bytes)   |         .word nt_literal, xt_compile-only, 006420 
3276:238 | DONE dir | na 16 16 |        |             |                 1b 6b 18 64 20 64        --  . k . d   d
3276:239 | DONE dir | na 16 16 | 006b32 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
3276:239 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
3276:239 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
3276:240 | DONE wsp | na 16 16 |        |             |
3276:241 | DONE lbl | na 16 16 | 006b3e |             | nt_immediate                         
3276:242 | DONE dir | na 16 16 | 006b3e | (2 bytes)   |         .byte 9, { NC }              
3276:242 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
3276:243 | DONE dir | na 16 16 | 006b40 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 0065f0 
3276:243 | DONE dir | na 16 16 |        |             |                 2a 6b e8 65 f0 65        --  * k . e . e
3276:244 | DONE dir | na 16 16 | 006b46 | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
3276:244 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
3276:244 | DONE dir | na 16 16 |        |             |                 65                       --  e
3276:245 | DONE wsp | na 16 16 |        |             |
3276:246 | DONE lbl | na 16 16 | 006b4f |             | nt_postpone                          
3276:247 | DONE dir | na 16 16 | 006b4f | (2 bytes)   |         .byte 8, { IM + CO }         
3276:247 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
3276:248 | DONE dir | na 16 16 | 006b51 | (6 bytes)   |         .word nt_immediate, xt_postpone, 00674e 
3276:248 | DONE dir | na 16 16 |        |             |                 3e 6b 19 67 4e 67        --  > k . g N g
3276:249 | DONE dir | na 16 16 | 006b57 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
3276:249 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3276:249 | DONE dir | na 16 16 |        |             |                                          -- 
3276:250 | DONE wsp | na 16 16 |        |             |
3276:251 | DONE lbl | na 16 16 | 006b5f |             | nt_rightbracket                      
3276:252 | DONE dir | na 16 16 | 006b5f | (2 bytes)   |         .byte 1, { NC }              
3276:252 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:253 | DONE dir | na 16 16 | 006b61 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 006208 
3276:253 | DONE dir | na 16 16 |        |             |                 4f 6b 03 62 08 62        --  O k . b . b
3276:254 | DONE dir | na 16 16 | 006b67 | (1 bytes)   |         .byte 5d                     
3276:254 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
3276:255 | DONE wsp | na 16 16 |        |             |
3276:256 | DONE lbl | na 16 16 | 006b68 |             | nt_leftbracket                       
3276:257 | DONE dir | na 16 16 | 006b68 | (2 bytes)   |         .byte 1, { IM + CO }         
3276:257 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
3276:258 | DONE dir | na 16 16 | 006b6a | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 006202 
3276:258 | DONE dir | na 16 16 |        |             |                 5f 6b 00 62 02 62        --  _ k . b . b
3276:259 | DONE dir | na 16 16 | 006b70 | (1 bytes)   |         .byte 5b                     
3276:259 | DONE dir | na 16 16 |        |             |                 5b                       --  [
3276:260 | DONE wsp | na 16 16 |        |             |
3276:261 | DONE lbl | na 16 16 | 006b71 |             | nt_zbranch                           
3276:262 | DONE dir | na 16 16 | 006b71 | (2 bytes)   |         .byte 7, { IM + CO }         
3276:262 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
3276:263 | DONE dir | na 16 16 | 006b73 | (6 bytes)   |         .word nt_leftbracket, xt_zbranch, 00626c 
3276:263 | DONE dir | na 16 16 |        |             |                 68 6b 66 62 6c 62        --  h k f b l b
3276:264 | DONE dir | na 16 16 | 006b79 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
3276:264 | DONE dir | na 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
3276:265 | DONE wsp | na 16 16 |        |             |
3276:266 | DONE lbl | na 16 16 | 006b80 |             | nt_branch                            
3276:267 | DONE dir | na 16 16 | 006b80 | (2 bytes)   |         .byte 6, { IM + CO }         
3276:267 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
3276:268 | DONE dir | na 16 16 | 006b82 | (6 bytes)   |         .word nt_zbranch, xt_branch, 0063c2 
3276:268 | DONE dir | na 16 16 |        |             |                 71 6b bc 63 c2 63        --  q k . c . c
3276:269 | DONE dir | na 16 16 | 006b88 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
3276:269 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
3276:270 | DONE wsp | na 16 16 |        |             |
3276:271 | DONE lbl | na 16 16 | 006b8e |             | nt_again                             
3276:272 | DONE dir | na 16 16 | 006b8e | (2 bytes)   |         .byte 5, { IM + NC + CO }    
3276:272 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
3276:273 | DONE dir | na 16 16 | 006b90 | (6 bytes)   |         .word nt_branch, xt_again, 00636d 
3276:273 | DONE dir | na 16 16 |        |             |                 80 6b 58 63 6d 63        --  . k X c m c
3276:274 | DONE dir | na 16 16 | 006b96 | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
3276:274 | DONE dir | na 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
3276:275 | DONE wsp | na 16 16 |        |             |
3276:276 | DONE lbl | na 16 16 | 006b9b |             | nt_begin                             
3276:277 | DONE dir | na 16 16 | 006b9b | (2 bytes)   |         .byte 5, { IM + NC + CO }    
3276:277 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
3276:278 | DONE dir | na 16 16 | 006b9d | (6 bytes)   |         .word nt_again, xt_begin, 0063b3 
3276:278 | DONE dir | na 16 16 |        |             |                 8e 6b ad 63 b3 63        --  . k . c . c
3276:279 | DONE dir | na 16 16 | 006ba3 | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
3276:279 | DONE dir | na 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
3276:280 | DONE wsp | na 16 16 |        |             |
3276:281 | DONE lbl | na 16 16 | 006ba8 |             | nt_compilecomma                      
3276:282 | DONE dir | na 16 16 | 006ba8 | (2 bytes)   |         .byte 08, { CO }             
3276:282 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
3276:283 | DONE dir | na 16 16 | 006baa | (6 bytes)   |         .word nt_begin, xt_compilecomma, 006433 
3276:283 | DONE dir | na 16 16 |        |             |                 9b 6b 21 64 33 64        --  . k ! d 3 d
3276:284 | DONE dir | na 16 16 | 006bb0 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
3276:284 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
3276:284 | DONE dir | na 16 16 |        |             |                                          -- 
3276:285 | DONE wsp | na 16 16 |        |             |
3276:286 | DONE lbl | na 16 16 | 006bb8 |             | nt_semicolon                         
3276:287 | DONE dir | na 16 16 | 006bb8 | (2 bytes)   |         .byte 1, { CO + IM }         
3276:287 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
3276:288 | DONE dir | na 16 16 | 006bba | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 0061e1 
3276:288 | DONE dir | na 16 16 |        |             |                 a8 6b c9 61 e1 61        --  . k . a . a
3276:289 | DONE dir | na 16 16 | 006bc0 | (1 bytes)   |         .byte 3b                     
3276:289 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
3276:290 | DONE wsp | na 16 16 |        |             |
3276:291 | DONE lbl | na 16 16 | 006bc1 |             | nt_colon                             
3276:292 | DONE dir | na 16 16 | 006bc1 | (2 bytes)   |         .byte 1, { NC }              
3276:292 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:293 | DONE dir | na 16 16 | 006bc3 | (6 bytes)   |         .word nt_semicolon, xt_colon, 0061c8 
3276:293 | DONE dir | na 16 16 |        |             |                 b8 6b a7 61 c8 61        --  . k . a . a
3276:294 | DONE dir | na 16 16 | 006bc9 | (1 bytes)   |         .byte 3a                     
3276:294 | DONE dir | na 16 16 |        |             |                 3a                       --  :
3276:295 | DONE wsp | na 16 16 |        |             |
3276:296 | DONE lbl | na 16 16 | 006bca |             | nt_allot                             
3276:297 | DONE dir | na 16 16 | 006bca | (2 bytes)   |         .byte 5, { NC }              
3276:297 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3276:298 | DONE dir | na 16 16 | 006bcc | (6 bytes)   |         .word nt_colon, xt_allot, 006396 
3276:298 | DONE dir | na 16 16 |        |             |                 c1 6b 6e 63 96 63        --  . k n c . c
3276:299 | DONE dir | na 16 16 | 006bd2 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
3276:299 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
3276:300 | DONE wsp | na 16 16 |        |             |
3276:301 | DONE lbl | na 16 16 | 006bd7 |             | nt_does                              
3276:302 | DONE dir | na 16 16 | 006bd7 | (2 bytes)   |         .byte 5, { IM + CO }         
3276:302 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
3276:303 | DONE dir | na 16 16 | 006bd9 | (6 bytes)   |         .word nt_allot, xt_does, 00650c 
3276:303 | DONE dir | na 16 16 |        |             |                 ca 6b 00 65 0c 65        --  . k . e  e
3276:304 | DONE dir | na 16 16 | 006bdf | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
3276:304 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
3276:305 | DONE wsp | na 16 16 |        |             |
3276:306 | DONE lbl | na 16 16 | 006be4 |             | nt_create                            
3276:307 | DONE dir | na 16 16 | 006be4 | (2 bytes)   |         .byte 6, { NC }              
3276:307 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3276:308 | DONE dir | na 16 16 | 006be6 | (6 bytes)   |         .word nt_does, xt_create, 0064d6 
3276:308 | DONE dir | na 16 16 |        |             |                 d7 6b 64 64 d6 64        --  . k d d . d
3276:309 | DONE dir | na 16 16 | 006bec | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
3276:309 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
3276:310 | DONE wsp | na 16 16 |        |             |
3276:311 | DONE lbl | na 16 16 | 006bf2 |             | nt_name-string                       
3276:312 | DONE dir | na 16 16 | 006bf2 | (2 bytes)   |         .byte 0b, { NC }             
3276:312 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
3276:313 | DONE dir | na 16 16 | 006bf4 | (6 bytes)   |         .word nt_create, xt_name-string, 006682 
3276:313 | DONE dir | na 16 16 |        |             |                 e4 6b 72 66 82 66        --  . k r f . f
3276:314 | DONE dir | na 16 16 | 006bfa | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
3276:314 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
3276:314 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
3276:315 | DONE wsp | na 16 16 |        |             |
3276:316 | DONE lbl | na 16 16 | 006c05 |             | nt_2dup                              
3276:317 | DONE dir | na 16 16 | 006c05 | (2 bytes)   |         .byte 4, { NC }              
3276:317 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:318 | DONE dir | na 16 16 | 006c07 | (6 bytes)   |         .word nt_name-string, xt_2dup, 0062ae 
3276:318 | DONE dir | na 16 16 |        |             |                 f2 6b a4 62 ae 62        --  . k . b . b
3276:319 | DONE dir | na 16 16 | 006c0d | (4 bytes)   |         .byte 32, 64, 75, 70         
3276:319 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
3276:320 | DONE wsp | na 16 16 |        |             |
3276:321 | DONE lbl | na 16 16 | 006c11 |             | nt_abs                               
3276:322 | DONE dir | na 16 16 | 006c11 | (2 bytes)   |         .byte 3, { NC }              
3276:322 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:323 | DONE dir | na 16 16 | 006c13 | (6 bytes)   |         .word nt_2dup, xt_abs, 0062d3 
3276:323 | DONE dir | na 16 16 |        |             |                 05 6c cb 62 d3 62        --  . l . b . b
3276:324 | DONE dir | na 16 16 | 006c19 | (3 bytes)   |         .byte 61, 62, 73             
3276:324 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
3276:325 | DONE wsp | na 16 16 |        |             |
3276:326 | DONE lbl | na 16 16 | 006c1c |             | nt_state                             
3276:327 | DONE dir | na 16 16 | 006c1c | (2 bytes)   |         .byte 5, { NC }              
3276:327 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3276:328 | DONE dir | na 16 16 | 006c1e | (6 bytes)   |         .word nt_abs, xt_state, 006834 
3276:328 | DONE dir | na 16 16 |        |             |                 11 6c 2d 68 34 68        --  . l - h 4 h
3276:329 | DONE dir | na 16 16 | 006c24 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
3276:329 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
3276:330 | DONE wsp | na 16 16 |        |             |
3276:331 | DONE lbl | na 16 16 | 006c29 |             | nt_to-in                             
3276:332 | DONE dir | na 16 16 | 006c29 | (2 bytes)   |         .byte 3, { NC }              
3276:332 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:333 | DONE dir | na 16 16 | 006c2b | (6 bytes)   |         .word nt_state, xt_to-in, 00611a 
3276:333 | DONE dir | na 16 16 |        |             |                 1c 6c 13 61 1a 61        --  . l . a . a
3276:334 | DONE dir | na 16 16 | 006c31 | (3 bytes)   |         .byte 3e, 69, 6e             
3276:334 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
3276:335 | DONE wsp | na 16 16 |        |             |
3276:336 | DONE lbl | na 16 16 | 006c34 |             | nt_source                            
3276:337 | DONE dir | na 16 16 | 006c34 | (2 bytes)   |         .byte 6, { NC }              
3276:337 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3276:338 | DONE dir | na 16 16 | 006c36 | (6 bytes)   |         .word nt_to-in, xt_source, 006809 
3276:338 | DONE dir | na 16 16 |        |             |                 29 6c fd 67 09 68        --  ) l . g 	 h
3276:339 | DONE dir | na 16 16 | 006c3c | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
3276:339 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
3276:340 | DONE wsp | na 16 16 |        |             |
3276:341 | DONE lbl | na 16 16 | 006c42 |             | nt_depth                             
3276:342 | DONE dir | na 16 16 | 006c42 | (2 bytes)   |         .byte 5, { NC }              
3276:342 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3276:343 | DONE dir | na 16 16 | 006c44 | (6 bytes)   |         .word nt_source, xt_depth, 0064eb 
3276:343 | DONE dir | na 16 16 |        |             |                 34 6c dd 64 eb 64        --  4 l . d . d
3276:344 | DONE dir | na 16 16 | 006c4a | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
3276:344 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
3276:345 | DONE wsp | na 16 16 |        |             |
3276:346 | DONE lbl | na 16 16 | 006c4f |             | nt_constant                          
3276:347 | DONE dir | na 16 16 | 006c4f | (2 bytes)   |         .byte 8, { NC }              
3276:347 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3276:348 | DONE dir | na 16 16 | 006c51 | (6 bytes)   |         .word nt_depth, xt_constant, 00644d 
3276:348 | DONE dir | na 16 16 |        |             |                 42 6c 34 64 4d 64        --  B l 4 d M d
3276:349 | DONE dir | na 16 16 | 006c57 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
3276:349 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
3276:349 | DONE dir | na 16 16 |        |             |                                          -- 
3276:350 | DONE wsp | na 16 16 |        |             |
3276:351 | DONE lbl | na 16 16 | 006c5f |             | nt_variable                          
3276:352 | DONE dir | na 16 16 | 006c5f | (2 bytes)   |         .byte 8, { NC }              
3276:352 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3276:353 | DONE dir | na 16 16 | 006c61 | (6 bytes)   |         .word nt_constant, xt_variable, 006935 
3276:353 | DONE dir | na 16 16 |        |             |                 4f 6c 29 69 35 69        --  O l ) i 5 i
3276:354 | DONE dir | na 16 16 | 006c67 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
3276:354 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
3276:354 | DONE dir | na 16 16 |        |             |                                          -- 
3276:355 | DONE wsp | na 16 16 |        |             |
3276:356 | DONE lbl | na 16 16 | 006c6f |             | nt_tick                              
3276:357 | DONE dir | na 16 16 | 006c6f | (2 bytes)   |         .byte 1, { NC }              
3276:357 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:358 | DONE dir | na 16 16 | 006c71 | (6 bytes)   |         .word nt_variable, xt_tick, 0062ca 
3276:358 | DONE dir | na 16 16 |        |             |                 5f 6c af 62 ca 62        --  _ l . b . b
3276:359 | DONE dir | na 16 16 | 006c77 | (1 bytes)   |         .byte 27                     hex for "'"
3276:359 | DONE dir | na 16 16 |        |             |                 27                       --  '
3276:360 | DONE wsp | na 16 16 |        |             |
3276:361 | DONE lbl | na 16 16 | 006c78 |             | nt_min                               
3276:362 | DONE dir | na 16 16 | 006c78 | (2 bytes)   |         .byte 3, { NC }              
3276:362 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:363 | DONE dir | na 16 16 | 006c7a | (6 bytes)   |         .word nt_tick, xt_min, 006668 
3276:363 | DONE dir | na 16 16 |        |             |                 6f 6c 56 66 68 66        --  o l V f h f
3276:364 | DONE dir | na 16 16 | 006c80 | (3 bytes)   |         .byte 6d, 69, 6e             
3276:364 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
3276:365 | DONE wsp | na 16 16 |        |             |
3276:366 | DONE lbl | na 16 16 | 006c83 |             | nt_max                               
3276:367 | DONE dir | na 16 16 | 006c83 | (2 bytes)   |         .byte 3, { NC }              
3276:367 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:368 | DONE dir | na 16 16 | 006c85 | (6 bytes)   |         .word nt_min, xt_max, 006655 
3276:368 | DONE dir | na 16 16 |        |             |                 78 6c 43 66 55 66        --  x l C f U f
3276:369 | DONE dir | na 16 16 | 006c8b | (3 bytes)   |         .byte 6d, 61, 78             
3276:369 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
3276:370 | DONE wsp | na 16 16 |        |             |
3276:371 | DONE lbl | na 16 16 | 006c8e |             | nt_negate                            
3276:372 | DONE dir | na 16 16 | 006c8e | (2 bytes)   |         .byte 6, { NC }              
3276:372 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3276:373 | DONE dir | na 16 16 | 006c90 | (6 bytes)   |         .word nt_max, xt_negate, 006689 
3276:373 | DONE dir | na 16 16 |        |             |                 83 6c 83 66 89 66        --  . l . f . f
3276:374 | DONE dir | na 16 16 | 006c96 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
3276:374 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
3276:375 | DONE wsp | na 16 16 |        |             |
3276:376 | DONE lbl | na 16 16 | 006c9c |             | nt_invert                            
3276:377 | DONE dir | na 16 16 | 006c9c | (2 bytes)   |         .byte 6, { NC }              
3276:377 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3276:378 | DONE dir | na 16 16 | 006c9e | (6 bytes)   |         .word nt_negate, xt_invert, 0065f6 
3276:378 | DONE dir | na 16 16 |        |             |                 8e 6c f1 65 f6 65        --  . l . e . e
3276:379 | DONE dir | na 16 16 | 006ca4 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
3276:379 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
3276:380 | DONE wsp | na 16 16 |        |             |
3276:381 | DONE lbl | na 16 16 | 006caa |             | nt_char                              
3276:382 | DONE dir | na 16 16 | 006caa | (2 bytes)   |         .byte 4, { NC }              
3276:382 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:383 | DONE dir | na 16 16 | 006cac | (6 bytes)   |         .word nt_invert, xt_char, 006417 
3276:383 | DONE dir | na 16 16 |        |             |                 9c 6c 00 64 17 64        --  . l . d . d
3276:384 | DONE dir | na 16 16 | 006cb2 | (4 bytes)   |         .byte 63, 68, 61, 72         
3276:384 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
3276:385 | DONE wsp | na 16 16 |        |             |
3276:386 | DONE lbl | na 16 16 | 006cb6 |             | nt_xor                               
3276:387 | DONE dir | na 16 16 | 006cb6 | (2 bytes)   |         .byte 3, { NC }              
3276:387 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:388 | DONE dir | na 16 16 | 006cb8 | (6 bytes)   |         .word nt_char, xt_xor, 006964 
3276:388 | DONE dir | na 16 16 |        |             |                 aa 6c 5e 69 64 69        --  . l ^ i d i
3276:389 | DONE dir | na 16 16 | 006cbe | (3 bytes)   |         .byte 78, 6f, 72             
3276:389 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
3276:390 | DONE wsp | na 16 16 |        |             |
3276:391 | DONE lbl | na 16 16 | 006cc1 |             | nt_or                                
3276:392 | DONE dir | na 16 16 | 006cc1 | (2 bytes)   |         .byte 2, { NC }              
3276:392 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:393 | DONE dir | na 16 16 | 006cc3 | (6 bytes)   |         .word nt_xor, xt_or, 006693  
3276:393 | DONE dir | na 16 16 |        |             |                 b6 6c 8d 66 93 66        --  . l . f . f
3276:394 | DONE dir | na 16 16 | 006cc9 | (2 bytes)   |         .byte 6f, 72                 
3276:394 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
3276:395 | DONE wsp | na 16 16 |        |             |
3276:396 | DONE lbl | na 16 16 | 006ccb |             | nt_and                               
3276:397 | DONE dir | na 16 16 | 006ccb | (2 bytes)   |         .byte 3, { NC }              
3276:397 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:398 | DONE dir | na 16 16 | 006ccd | (6 bytes)   |         .word nt_or, xt_and, 00639d  
3276:398 | DONE dir | na 16 16 |        |             |                 c1 6c 97 63 9d 63        --  . l . c . c
3276:399 | DONE dir | na 16 16 | 006cd3 | (3 bytes)   |         .byte 61, 6e, 64             
3276:399 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
3276:400 | DONE wsp | na 16 16 |        |             |
3276:401 | DONE lbl | na 16 16 | 006cd6 |             | nt_c-comma                           
3276:402 | DONE dir | na 16 16 | 006cd6 | (2 bytes)   |         .byte 2, { NC }              
3276:402 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:403 | DONE dir | na 16 16 | 006cd8 | (6 bytes)   |         .word nt_and, xt_c-comma, 0063e3 
3276:403 | DONE dir | na 16 16 |        |             |                 cb 6c d6 63 e3 63        --  . l . c . c
3276:404 | DONE dir | na 16 16 | 006cde | (2 bytes)   |         .byte 63, 2c                 
3276:404 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
3276:405 | DONE wsp | na 16 16 |        |             |
3276:406 | DONE lbl | na 16 16 | 006ce0 |             | nt_c-fetch                           
3276:407 | DONE dir | na 16 16 | 006ce0 | (2 bytes)   |         .byte 2, { NC }              
3276:407 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:408 | DONE dir | na 16 16 | 006ce2 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 0063ef 
3276:408 | DONE dir | na 16 16 |        |             |                 d6 6c e4 63 ef 63        --  . l . c . c
3276:409 | DONE dir | na 16 16 | 006ce8 | (2 bytes)   |         .byte 63, 40                 
3276:409 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
3276:410 | DONE wsp | na 16 16 |        |             |
3276:411 | DONE lbl | na 16 16 | 006cea |             | nt_c-store                           
3276:412 | DONE dir | na 16 16 | 006cea | (2 bytes)   |         .byte 2, { NC }              
3276:412 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:413 | DONE dir | na 16 16 | 006cec | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0063ff 
3276:413 | DONE dir | na 16 16 |        |             |                 e0 6c f0 63 ff 63        --  . l . c . c
3276:414 | DONE dir | na 16 16 | 006cf2 | (2 bytes)   |         .byte 63, 21                 
3276:414 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
3276:415 | DONE wsp | na 16 16 |        |             |
3276:416 | DONE lbl | na 16 16 | 006cf4 |             | nt_two-star                          
3276:417 | DONE dir | na 16 16 | 006cf4 | (2 bytes)   |         .byte 2, { NC }              
3276:417 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:418 | DONE dir | na 16 16 | 006cf6 | (6 bytes)   |         .word nt_c-store, xt_two-star, 00629c 
3276:418 | DONE dir | na 16 16 |        |             |                 ea 6c 99 62 9c 62        --  . l . b . b
3276:419 | DONE dir | na 16 16 | 006cfc | (2 bytes)   |         .byte 32, 2a                 
3276:419 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
3276:420 | DONE wsp | na 16 16 |        |             |
3276:421 | DONE lbl | na 16 16 | 006cfe |             | nt_minus                             
3276:422 | DONE dir | na 16 16 | 006cfe | (2 bytes)   |         .byte 1, { NC }              
3276:422 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:423 | DONE dir | na 16 16 | 006d00 | (6 bytes)   |         .word nt_two-star, xt_minus, 006222 
3276:423 | DONE dir | na 16 16 |        |             |                 f4 6c 18 62 22 62        --  . l . b " b
3276:424 | DONE dir | na 16 16 | 006d06 | (1 bytes)   |         .byte 2d                     
3276:424 | DONE dir | na 16 16 |        |             |                 2d                       --  -
3276:425 | DONE wsp | na 16 16 |        |             |
3276:426 | DONE lbl | na 16 16 | 006d07 |             | nt_plus                              
3276:427 | DONE dir | na 16 16 | 006d07 | (2 bytes)   |         .byte 1, { NC }              
3276:427 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:428 | DONE dir | na 16 16 | 006d09 | (6 bytes)   |         .word nt_minus, xt_plus, 006217 
3276:428 | DONE dir | na 16 16 |        |             |                 fe 6c 10 62 17 62        --  . l . b . b
3276:429 | DONE dir | na 16 16 | 006d0f | (1 bytes)   |         .byte 2b                     
3276:429 | DONE dir | na 16 16 |        |             |                 2b                       --  +
3276:430 | DONE wsp | na 16 16 |        |             |
3276:431 | DONE lbl | na 16 16 | 006d10 |             | nt_one-minus                         
3276:432 | DONE dir | na 16 16 | 006d10 | (2 bytes)   |         .byte 2, { NC }              
3276:432 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:433 | DONE dir | na 16 16 | 006d12 | (6 bytes)   |         .word nt_plus, xt_one-minus, 00628e 
3276:433 | DONE dir | na 16 16 |        |             |                 07 6d 8d 62 8e 62        --  . m . b . b
3276:434 | DONE dir | na 16 16 | 006d18 | (2 bytes)   |         .byte 31, 2d                 
3276:434 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
3276:435 | DONE wsp | na 16 16 |        |             |
3276:436 | DONE lbl | na 16 16 | 006d1a |             | nt_one-plus                          
3276:437 | DONE dir | na 16 16 | 006d1a | (2 bytes)   |         .byte 2, { NC }              
3276:437 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:438 | DONE dir | na 16 16 | 006d1c | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 006290 
3276:438 | DONE dir | na 16 16 |        |             |                 10 6d 8f 62 90 62        --  . m . b . b
3276:439 | DONE dir | na 16 16 | 006d22 | (2 bytes)   |         .byte 31, 2b                 
3276:439 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
3276:440 | DONE wsp | na 16 16 |        |             |
3276:441 | DONE lbl | na 16 16 | 006d24 |             | nt_zero-notequal                     
3276:442 | DONE dir | na 16 16 | 006d24 | (2 bytes)   |         .byte 3, { NC }              
3276:442 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:443 | DONE dir | na 16 16 | 006d26 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 00625a 
3276:443 | DONE dir | na 16 16 |        |             |                 1a 6d 4f 62 5a 62        --  . m O b Z b
3276:444 | DONE dir | na 16 16 | 006d2c | (3 bytes)   |         .byte 30, 3c, 3e             
3276:444 | DONE dir | na 16 16 |        |             |                 30 3c 3e                 --  0 < >
3276:445 | DONE wsp | na 16 16 |        |             |
3276:446 | DONE lbl | na 16 16 | 006d2f |             | nt_zero-more                         
3276:447 | DONE dir | na 16 16 | 006d2f | (2 bytes)   |         .byte 2, { NC }              
3276:447 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:448 | DONE dir | na 16 16 | 006d31 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 006265 
3276:448 | DONE dir | na 16 16 |        |             |                 24 6d 5b 62 65 62        --  $ m [ b e b
3276:449 | DONE dir | na 16 16 | 006d37 | (2 bytes)   |         .byte 30, 3e                 
3276:449 | DONE dir | na 16 16 |        |             |                 30 3e                    --  0 >
3276:450 | DONE wsp | na 16 16 |        |             |
3276:451 | DONE lbl | na 16 16 | 006d39 |             | nt_zero-less                         
3276:452 | DONE dir | na 16 16 | 006d39 | (2 bytes)   |         .byte 2, { NC }              
3276:452 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:453 | DONE dir | na 16 16 | 006d3b | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 00624e 
3276:453 | DONE dir | na 16 16 |        |             |                 2f 6d 43 62 4e 62        --  / m C b N b
3276:454 | DONE dir | na 16 16 | 006d41 | (2 bytes)   |         .byte 30, 3c                 
3276:454 | DONE dir | na 16 16 |        |             |                 30 3c                    --  0 <
3276:455 | DONE wsp | na 16 16 |        |             |
3276:456 | DONE lbl | na 16 16 | 006d43 |             | nt_greater                           
3276:457 | DONE dir | na 16 16 | 006d43 | (2 bytes)   |         .byte 1, { NC }              
3276:457 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:458 | DONE dir | na 16 16 | 006d45 | (6 bytes)   |         .word nt_zero-less, xt_greater, 006112 
3276:458 | DONE dir | na 16 16 |        |             |                 39 6d ff 60 12 61        --  9 m . ` . a
3276:459 | DONE dir | na 16 16 | 006d4b | (1 bytes)   |         .byte 3e                     
3276:459 | DONE dir | na 16 16 |        |             |                 3e                       --  >
3276:460 | DONE wsp | na 16 16 |        |             |
3276:461 | DONE lbl | na 16 16 | 006d4c |             | nt_less                              
3276:462 | DONE dir | na 16 16 | 006d4c | (2 bytes)   |         .byte 1, { NC }              
3276:462 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:463 | DONE dir | na 16 16 | 006d4e | (6 bytes)   |         .word nt_greater, xt_less, 0060f2 
3276:463 | DONE dir | na 16 16 |        |             |                 43 6d df 60 f2 60        --  C m . ` . `
3276:464 | DONE dir | na 16 16 | 006d54 | (1 bytes)   |         .byte 3c                     
3276:464 | DONE dir | na 16 16 |        |             |                 3c                       --  <
3276:465 | DONE wsp | na 16 16 |        |             |
3276:466 | DONE lbl | na 16 16 | 006d55 |             | nt_zero-equal                        
3276:467 | DONE dir | na 16 16 | 006d55 | (2 bytes)   |         .byte 2, { NC }              
3276:467 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:468 | DONE dir | na 16 16 | 006d57 | (6 bytes)   |         .word nt_less, xt_zero-equal, 006242 
3276:468 | DONE dir | na 16 16 |        |             |                 4c 6d 37 62 42 62        --  L m 7 b B b
3276:469 | DONE dir | na 16 16 | 006d5d | (2 bytes)   |         .byte 30, 3d                 
3276:469 | DONE dir | na 16 16 |        |             |                 30 3d                    --  0 =
3276:470 | DONE wsp | na 16 16 |        |             |
3276:471 | DONE lbl | na 16 16 | 006d5f |             | nt_not-equal                         
3276:472 | DONE dir | na 16 16 | 006d5f | (2 bytes)   |         .byte 2, { NC }              
3276:472 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3276:473 | DONE dir | na 16 16 | 006d61 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 0060fe 
3276:473 | DONE dir | na 16 16 |        |             |                 55 6d f3 60 fe 60        --  U m . ` . `
3276:474 | DONE dir | na 16 16 | 006d67 | (2 bytes)   |         .byte 3c, 3e                 
3276:474 | DONE dir | na 16 16 |        |             |                 3c 3e                    --  < >
3276:475 | DONE wsp | na 16 16 |        |             |
3276:476 | DONE lbl | na 16 16 | 006d69 |             | nt_equal                             
3276:477 | DONE dir | na 16 16 | 006d69 | (2 bytes)   |         .byte 1, { NC }              
3276:477 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:478 | DONE dir | na 16 16 | 006d6b | (6 bytes)   |         .word nt_not-equal, xt_equal, 00622e 
3276:478 | DONE dir | na 16 16 |        |             |                 5f 6d 23 62 2e 62        --  _ m # b . b
3276:479 | DONE dir | na 16 16 | 006d71 | (1 bytes)   |         .byte 3d                     
3276:479 | DONE dir | na 16 16 |        |             |                 3d                       --  =
3276:480 | DONE wsp | na 16 16 |        |             |
3276:481 | DONE lbl | na 16 16 | 006d72 |             | nt_false                             
3276:482 | DONE dir | na 16 16 | 006d72 | (2 bytes)   |         .byte 5, { NC }              
3276:482 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3276:483 | DONE dir | na 16 16 | 006d74 | (6 bytes)   |         .word nt_equal, xt_zero, 006236 
3276:483 | DONE dir | na 16 16 |        |             |                 69 6d 2f 62 36 62        --  i m / b 6 b
3276:484 | DONE dir | na 16 16 | 006d7a | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
3276:484 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
3276:485 | DONE wsp | na 16 16 |        |             |
3276:486 | DONE lbl | na 16 16 | 006d7f |             | nt_true                              
3276:487 | DONE dir | na 16 16 | 006d7f | (2 bytes)   |         .byte 4, { NC }              
3276:487 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:488 | DONE dir | na 16 16 | 006d81 | (6 bytes)   |         .word nt_false, xt_true, 006842 
3276:488 | DONE dir | na 16 16 |        |             |                 72 6d 3b 68 42 68        --  r m ; h B h
3276:489 | DONE dir | na 16 16 | 006d87 | (4 bytes)   |         .byte 74, 72, 75, 65         
3276:489 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
3276:490 | DONE wsp | na 16 16 |        |             |
3276:491 | DONE lbl | na 16 16 | 006d8b |             | nt_two                               
3276:492 | DONE dir | na 16 16 | 006d8b | (2 bytes)   |         .byte 1, { NC }              
3276:492 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:493 | DONE dir | na 16 16 | 006d8d | (6 bytes)   |         .word nt_true, xt_two, 006298 
3276:493 | DONE dir | na 16 16 |        |             |                 7f 6d 91 62 98 62        --  . m . b . b
3276:494 | DONE dir | na 16 16 | 006d93 | (1 bytes)   |         .byte 32                     
3276:494 | DONE dir | na 16 16 |        |             |                 32                       --  2
3276:495 | DONE wsp | na 16 16 |        |             |
3276:496 | DONE lbl | na 16 16 | 006d94 |             | nt_one                               
3276:497 | DONE dir | na 16 16 | 006d94 | (2 bytes)   |         .byte 1, { NC }              
3276:497 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:498 | DONE dir | na 16 16 | 006d96 | (6 bytes)   |         .word nt_two, xt_one, 00628c 
3276:498 | DONE dir | na 16 16 |        |             |                 8b 6d 85 62 8c 62        --  . m . b . b
3276:499 | DONE dir | na 16 16 | 006d9c | (1 bytes)   |         .byte 31                     
3276:499 | DONE dir | na 16 16 |        |             |                 31                       --  1
3276:500 | DONE wsp | na 16 16 |        |             |
3276:501 | DONE lbl | na 16 16 | 006d9d |             | nt_zero                              
3276:502 | DONE dir | na 16 16 | 006d9d | (2 bytes)   |         .byte 1, { NC }              
3276:502 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:503 | DONE dir | na 16 16 | 006d9f | (6 bytes)   |         .word nt_one, xt_zero, 006236 
3276:503 | DONE dir | na 16 16 |        |             |                 94 6d 2f 62 36 62        --  . m / b 6 b
3276:504 | DONE dir | na 16 16 | 006da5 | (1 bytes)   |         .byte 30                     
3276:504 | DONE dir | na 16 16 |        |             |                 30                       --  0
3276:505 | DONE wsp | na 16 16 |        |             |
3276:506 | DONE lbl | na 16 16 | 006da6 |             | nt_find-name                         
3276:507 | DONE dir | na 16 16 | 006da6 | (2 bytes)   |         .byte 9, 0                   
3276:507 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
3276:508 | DONE dir | na 16 16 | 006da8 | (6 bytes)   |         .word nt_zero, xt_find-name, 0065e7 
3276:508 | DONE dir | na 16 16 |        |             |                 9d 6d 91 65 e7 65        --  . m . e . e
3276:509 | DONE dir | na 16 16 | 006dae | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
3276:509 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
3276:509 | DONE dir | na 16 16 |        |             |                 65                       --  e
3276:510 | DONE wsp | na 16 16 |        |             |
3276:511 | DONE lbl | na 16 16 | 006db7 |             | nt_refill                            
3276:512 | DONE dir | na 16 16 | 006db7 | (2 bytes)   |         .byte 6, 0                   TODO check flags
3276:512 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
3276:513 | DONE dir | na 16 16 | 006db9 | (6 bytes)   |         .word nt_find-name, xt_refill, 006780 
3276:513 | DONE dir | na 16 16 |        |             |                 a6 6d 4e 67 80 67        --  . m N g . g
3276:514 | DONE dir | na 16 16 | 006dbf | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
3276:514 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
3276:515 | DONE wsp | na 16 16 |        |             |
3276:516 | DONE lbl | na 16 16 | 006dc5 |             | nt_parse-name                        
3276:517 | DONE dir | na 16 16 | 006dc5 | (2 bytes)   |         .byte &10, 0                 
3276:517 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
3276:518 | DONE dir | na 16 16 | 006dc7 | (6 bytes)   |         .word nt_refill, xt_parse-name, 006718 
3276:518 | DONE dir | na 16 16 |        |             |                 b7 6d b4 66 18 67        --  . m . f . g
3276:519 | DONE dir | na 16 16 | 006dcd | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
3276:519 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
3276:519 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
3276:520 | DONE wsp | na 16 16 |        |             |
3276:521 | DONE lbl | na 16 16 | 006dd7 |             | nt_source-id                         
3276:522 | DONE dir | na 16 16 | 006dd7 | (2 bytes)   |         .byte 9, { NC }              
3276:522 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
3276:523 | DONE dir | na 16 16 | 006dd9 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 006810 
3276:523 | DONE dir | na 16 16 |        |             |                 c5 6d 0a 68 10 68        --  . m 
 h . h
3276:524 | DONE dir | na 16 16 | 006ddf | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
3276:524 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
3276:524 | DONE dir | na 16 16 |        |             |                 64                       --  d
3276:525 | DONE wsp | na 16 16 |        |             |
3276:526 | DONE lbl | na 16 16 | 006de8 |             | nt_comma                             
3276:527 | DONE dir | na 16 16 | 006de8 | (2 bytes)   |         .byte 1, { NC }              
3276:527 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:528 | DONE dir | na 16 16 | 006dea | (6 bytes)   |         .word nt_source-id, xt_comma, 0061a6 
3276:528 | DONE dir | na 16 16 |        |             |                 d7 6d 9b 61 a6 61        --  . m . a . a
3276:529 | DONE dir | na 16 16 | 006df0 | (1 bytes)   |         .byte 2c                     
3276:529 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
3276:530 | DONE wsp | na 16 16 |        |             |
3276:531 | DONE lbl | na 16 16 | 006df1 |             | nt_accept                            
3276:532 | DONE dir | na 16 16 | 006df1 | (2 bytes)   |         .byte 6, 00                  TODO check flags
3276:532 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
3276:533 | DONE dir | na 16 16 | 006df3 | (6 bytes)   |         .word nt_comma, xt_accept, 006357 
3276:533 | DONE dir | na 16 16 |        |             |                 e8 6d d4 62 57 63        --  . m . b W c
3276:534 | DONE dir | na 16 16 | 006df9 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
3276:534 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
3276:535 | DONE wsp | na 16 16 |        |             |
3276:536 | DONE lbl | na 16 16 | 006dff |             | nt_tuck                              
3276:537 | DONE dir | na 16 16 | 006dff | (2 bytes)   |         .byte 4, { NC }              
3276:537 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:538 | DONE dir | na 16 16 | 006e01 | (6 bytes)   |         .word nt_accept, xt_tuck, 00684b 
3276:538 | DONE dir | na 16 16 |        |             |                 f1 6d 43 68 4b 68        --  . m C h K h
3276:539 | DONE dir | na 16 16 | 006e07 | (4 bytes)   |         .byte 74, 75, 63, 6b         
3276:539 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
3276:540 | DONE wsp | na 16 16 |        |             |
3276:541 | DONE lbl | na 16 16 | 006e0b |             | nt_nip                               
3276:542 | DONE dir | na 16 16 | 006e0b | (2 bytes)   |         .byte 3, { NC }              
3276:542 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:543 | DONE dir | na 16 16 | 006e0d | (6 bytes)   |         .word nt_tuck, xt_nip, 00668c 
3276:543 | DONE dir | na 16 16 |        |             |                 ff 6d 8a 66 8c 66        --  . m . f . f
3276:544 | DONE dir | na 16 16 | 006e13 | (3 bytes)   |         .byte 6e, 69, 70             
3276:544 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
3276:545 | DONE wsp | na 16 16 |        |             |
3276:546 | DONE lbl | na 16 16 | 006e16 |             | nt_rot                               
3276:547 | DONE dir | na 16 16 | 006e16 | (2 bytes)   |         .byte 3, { NC }              
3276:547 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:548 | DONE dir | na 16 16 | 006e18 | (6 bytes)   |         .word nt_nip, xt_rot, 006789 
3276:548 | DONE dir | na 16 16 |        |             |                 0b 6e 81 67 89 67        --   n . g . g
3276:549 | DONE dir | na 16 16 | 006e1e | (3 bytes)   |         .byte 72, 6f, 74             
3276:549 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
3276:550 | DONE wsp | na 16 16 |        |             |
3276:551 | DONE lbl | na 16 16 | 006e21 |             | nt_execute                           
3276:552 | DONE dir | na 16 16 | 006e21 | (2 bytes)   |         .byte 7, { NC }              
3276:552 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3276:553 | DONE dir | na 16 16 | 006e23 | (6 bytes)   |         .word nt_rot, xt_execute, 006590 
3276:553 | DONE dir | na 16 16 |        |             |                 16 6e 86 65 90 65        --  . n . e . e
3276:554 | DONE dir | na 16 16 | 006e29 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
3276:554 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
3276:555 | DONE wsp | na 16 16 |        |             |
3276:556 | DONE lbl | na 16 16 | 006e30 |             | nt_here                              
3276:557 | DONE dir | na 16 16 | 006e30 | (2 bytes)   |         .byte 4, { NC }              
3276:557 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:558 | DONE dir | na 16 16 | 006e32 | (6 bytes)   |         .word nt_execute, xt_here, 0065fd 
3276:558 | DONE dir | na 16 16 |        |             |                 21 6e f7 65 fd 65        --  ! n . e . e
3276:559 | DONE dir | na 16 16 | 006e38 | (4 bytes)   |         .byte 68, 65, 72, 65         
3276:559 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
3276:560 | DONE wsp | na 16 16 |        |             |
3276:561 | DONE lbl | na 16 16 | 006e3c |             | nt_2drop                             
3276:562 | DONE dir | na 16 16 | 006e3c | (2 bytes)   |         .byte 5, { NC }              
3276:562 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3276:563 | DONE dir | na 16 16 | 006e3e | (6 bytes)   |         .word nt_here, xt_2drop, 0062a3 
3276:563 | DONE dir | na 16 16 |        |             |                 30 6e 9d 62 a3 62        --  0 n . b . b
3276:564 | DONE dir | na 16 16 | 006e44 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
3276:564 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
3276:565 | DONE wsp | na 16 16 |        |             |
3276:566 | DONE lbl | na 16 16 | 006e49 |             | nt_over                              
3276:567 | DONE dir | na 16 16 | 006e49 | (2 bytes)   |         .byte 4, { NC }              
3276:567 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:568 | DONE dir | na 16 16 | 006e4b | (6 bytes)   |         .word nt_2drop, xt_over, 00669a 
3276:568 | DONE dir | na 16 16 |        |             |                 3c 6e 94 66 9a 66        --  < n . f . f
3276:569 | DONE dir | na 16 16 | 006e51 | (4 bytes)   |         .byte 6f, 76, 65, 72         
3276:569 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
3276:570 | DONE wsp | na 16 16 |        |             |
3276:571 | DONE lbl | na 16 16 | 006e55 |             | nt_fetch                             
3276:572 | DONE dir | na 16 16 | 006e55 | (2 bytes)   |         .byte 1, { NC }              
3276:572 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:573 | DONE dir | na 16 16 | 006e57 | (6 bytes)   |         .word nt_over, xt_fetch, 0061f9 
3276:573 | DONE dir | na 16 16 |        |             |                 49 6e f5 61 f9 61        --  I n . a . a
3276:574 | DONE dir | na 16 16 | 006e5d | (1 bytes)   |         .byte 40                     
3276:574 | DONE dir | na 16 16 |        |             |                 40                       --  @
3276:575 | DONE wsp | na 16 16 |        |             |
3276:576 | DONE lbl | na 16 16 | 006e5e |             | nt_store                             
3276:577 | DONE dir | na 16 16 | 006e5e | (2 bytes)   |         .byte 1, { NC }              
3276:577 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3276:578 | DONE dir | na 16 16 | 006e60 | (6 bytes)   |         .word nt_fetch, xt_store, 0061f4 
3276:578 | DONE dir | na 16 16 |        |             |                 55 6e e9 61 f4 61        --  U n . a . a
3276:579 | DONE dir | na 16 16 | 006e66 | (1 bytes)   |         .byte 21                     
3276:579 | DONE dir | na 16 16 |        |             |                 21                       --  !
3276:580 | DONE wsp | na 16 16 |        |             |
3276:581 | DONE lbl | na 16 16 | 006e67 |             | nt_swap                              
3276:582 | DONE dir | na 16 16 | 006e67 | (2 bytes)   |         .byte 4, { NC }              
3276:582 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:583 | DONE dir | na 16 16 | 006e69 | (6 bytes)   |         .word nt_store, xt_swap, 00683a 
3276:583 | DONE dir | na 16 16 |        |             |                 5e 6e 35 68 3a 68        --  ^ n 5 h : h
3276:584 | DONE dir | na 16 16 | 006e6f | (4 bytes)   |         .byte 73, 77, 61, 70         
3276:584 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
3276:585 | DONE wsp | na 16 16 |        |             |
3276:586 | DONE lbl | na 16 16 | 006e73 |             | nt_dup                               
3276:587 | DONE dir | na 16 16 | 006e73 | (2 bytes)   |         .byte 3, { NC }              
3276:587 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3276:588 | DONE dir | na 16 16 | 006e75 | (6 bytes)   |         .word nt_swap, xt_dup, 006553 
3276:588 | DONE dir | na 16 16 |        |             |                 67 6e 4f 65 53 65        --  g n O e S e
3276:589 | DONE dir | na 16 16 | 006e7b | (3 bytes)   |         .byte 64, 75, 70             
3276:589 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
3276:590 | DONE wsp | na 16 16 |        |             |
3276:591 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
3276:592 | DONE lbl | na 16 16 | 006e7e |             | nt_drop                              
3276:593 | DONE dir | na 16 16 | 006e7e | (2 bytes)   |         .byte 4, { NC }              
3276:593 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3276:594 | DONE dir | na 16 16 | 006e80 | (6 bytes)   |         .word nt_dup, xt_drop, 006527 
3276:594 | DONE dir | na 16 16 |        |             |                 73 6e 23 65 27 65        --  s n # e ' e
3276:595 | DONE dir | na 16 16 | 006e86 | (4 bytes)   |         .byte 64, 72, 6f, 70         
3276:595 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
3276:596 | DONE wsp | na 16 16 |        |             |
3276:597 | DONE cmt | na 16 16 |        |             | ; END
3277:000 | DONE wsp | na 16 16 |        |             |
3278:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3279:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
3280:000 | DONE wsp | na 16 16 |        |             |
3281:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3282:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
3283:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
3284:000 | DONE cmt | na 16 16 |        |             | ; the stack
3285:000 | DONE lbl | na 16 16 | 006e8a |             | doconst                              
3286:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3287:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3288:000 | DONE ins | na 16 16 | 006e8a | ca          |                 dex                  make room on Data Stack
3289:000 | DONE ins | na 16 16 | 006e8b | ca          |                 dex                  
3290:000 | DONE ins | na 16 16 | 006e8c | 94 00       |                 sty.dx 00            
3291:000 | DONE wsp | na 16 16 |        |             |
3292:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
3293:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
3294:000 | DONE ins | na 16 16 | 006e8e | 68          |                 pla                  get the return address
3295:000 | DONE ins | na 16 16 | 006e8f | 85 16       |                 sta.d 000216         
3296:000 | DONE wsp | na 16 16 |        |             |
3297:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
3298:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
3299:000 | DONE ins | na 16 16 | 006e91 | a0 01 00    |                 ldy.# 0001           
3300:000 | DONE ins | na 16 16 | 006e94 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3301:000 | DONE ins | na 16 16 | 006e96 | a8          |                 tay                  
3302:000 | DONE wsp | na 16 16 |        |             |
3303:000 | DONE ins | na 16 16 | 006e97 | 60          |                 rts                  takes us to original caller
3304:000 | DONE wsp | na 16 16 |        |             |
3305:000 | DONE wsp | na 16 16 |        |             |
3306:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3307:000 | DONE cmt | na 16 16 |        |             | ; DODOES
3308:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
3309:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
3310:000 | DONE lbl | na 16 16 | 006e98 |             | dodoes                               
3311:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
3312:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
3313:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
3314:000 | DONE cmt | na 16 16 |        |             |                 ; works
3315:000 | DONE ins | na 16 16 | 006e98 | 68          |                 pla                  
3316:000 | DONE ins | na 16 16 | 006e99 | 1a          |                 inc.a                
3317:000 | DONE ins | na 16 16 | 006e9a | 85 1a       |                 sta.d 00021a         
3318:000 | DONE wsp | na 16 16 |        |             |
3319:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
3320:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
3321:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
3322:000 | DONE ins | na 16 16 | 006e9c | ca          |                 dex                  
3323:000 | DONE ins | na 16 16 | 006e9d | ca          |                 dex                  
3324:000 | DONE ins | na 16 16 | 006e9e | 94 00       |                 sty.dx 00            
3325:000 | DONE wsp | na 16 16 |        |             |
3326:000 | DONE ins | na 16 16 | 006ea0 | 7a          |                 ply                  
3327:000 | DONE ins | na 16 16 | 006ea1 | c8          |                 iny                  
3328:000 | DONE wsp | na 16 16 |        |             |
3329:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
3330:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
3331:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
3332:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
3333:000 | DONE ins | na 16 16 | 006ea2 | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
3334:000 | DONE wsp | na 16 16 |        |             |
3335:000 | DONE wsp | na 16 16 |        |             |
3336:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3337:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
3338:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
3339:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
3340:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
3341:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
3342:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
3343:000 | DONE lbl | na 16 16 | 006ea5 |             | dovar                                
3344:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3345:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3346:000 | DONE ins | na 16 16 | 006ea5 | ca          |                 dex                  make room on Data Stack
3347:000 | DONE ins | na 16 16 | 006ea6 | ca          |                 dex                  
3348:000 | DONE ins | na 16 16 | 006ea7 | 94 00       |                 sty.dx 00            
3349:000 | DONE wsp | na 16 16 |        |             |
3350:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
3351:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
3352:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
3353:000 | DONE ins | na 16 16 | 006ea9 | 7a          |                 ply                  value is now TOS
3354:000 | DONE ins | na 16 16 | 006eaa | c8          |                 iny                  add one because of 65816's address handling
3355:000 | DONE wsp | na 16 16 |        |             |
3356:000 | DONE ins | na 16 16 | 006eab | 60          |                 rts                  takes us to original caller
3357:000 | DONE wsp | na 16 16 |        |             |
3358:000 | DONE wsp | na 16 16 |        |             |
3359:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3360:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
3361:000 | DONE wsp | na 16 16 |        |             |
3362:000 | DONE wsp | na 16 16 |        |             |
3363:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3364:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (AKA INTERPRET)
3365:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
3366:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
3367:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
3368:000 | DONE lbl | na 16 16 | 006eac |             | compex                               
3369:000 | DONE lbl | na 16 16 | 006eac |             | compex_loop                          
3370:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3371:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3372:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
3373:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
3374:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
3375:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
3376:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
3377:000 | DONE ins | na 16 16 | 006eac | 20 b4 66    |                 jsr 0066b4           ( "string" -- addr u )
3378:000 | DONE wsp | na 16 16 |        |             |
3379:000 | DONE cmt | na 16 16 |        |             |                 ; TODO decide if we want to make a copy of the string here so
3380:000 | DONE cmt | na 16 16 |        |             |                 ; that we can provide a better error message
3381:000 | DONE wsp | na 16 16 |        |             |
3382:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
3383:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
3384:000 | DONE ins | na 16 16 | 006eaf | 98          |                 tya                  force flag check
3385:000 | DONE ins | na 16 16 | 006eb0 | f0 3f       |                 beq 006ef1           
3386:000 | DONE wsp | na 16 16 |        |             |
3387:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
3388:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
3389:000 | DONE ins | na 16 16 | 006eb2 | 20 57 6f    |                 jsr 006f57           
3390:000 | DONE wsp | na 16 16 |        |             |
3391:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know
3392:000 | DONE ins | na 16 16 | 006eb5 | 20 91 65    |                 jsr 006591           ( addr u -- nt | 0 )
3393:000 | DONE wsp | na 16 16 |        |             |
3394:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
3395:000 | DONE ins | na 16 16 | 006eb8 | 98          |                 tya                  
3396:000 | DONE ins | na 16 16 | 006eb9 | d0 06       |                 bne 006ec1           
3397:000 | DONE wsp | na 16 16 |        |             |
3398:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
3399:000 | DONE wsp | na 16 16 |        |             |
3400:000 | DONE cmt | na 16 16 |        |             |                 ; Number conversion has failed, which means the user screwed up,
3401:000 | DONE cmt | na 16 16 |        |             |                 ; so complain and abort
3402:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print the offending string first
3403:000 | DONE ins | na 16 16 | 006ebb | a9 10 73    |                 lda.# 007310         "Unknown word"
3404:000 | DONE ins | na 16 16 | 006ebe | 4c 1e 6f    |                 jmp 006f1e           
3405:000 | DONE wsp | na 16 16 |        |             |
3406:000 | DONE lbl | na 16 16 | 006ec1 |             | compex_got_name_token                
3407:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
3408:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down. This is a quicker
3409:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
3410:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
3411:000 | DONE ins | na 16 16 | 006ec1 | 84 16       |                 sty.d 000216         
3412:000 | DONE ins | na 16 16 | 006ec3 | c8          |                 iny                  
3413:000 | DONE ins | na 16 16 | 006ec4 | c8          |                 iny                  
3414:000 | DONE ins | na 16 16 | 006ec5 | c8          |                 iny                  
3415:000 | DONE ins | na 16 16 | 006ec6 | c8          |                 iny                  
3416:000 | DONE ins | na 16 16 | 006ec7 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3417:000 | DONE ins | na 16 16 | 006eca | a8          |                 tay                  xt is TOS
3418:000 | DONE wsp | na 16 16 |        |             |
3419:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
3420:000 | DONE ins | na 16 16 | 006ecb | a5 14       |                 lda.d 000214         
3421:000 | DONE ins | na 16 16 | 006ecd | d0 14       |                 bne 006ee3           
3422:000 | DONE wsp | na 16 16 |        |             |
3423:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
3424:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
3425:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
3426:000 | DONE ins | na 16 16 | 006ecf | b2 16       |                 lda.di 000216        
3427:000 | DONE ins | na 16 16 | 006ed1 | eb          |                 xba                  flags are MSB
3428:000 | DONE ins | na 16 16 | 006ed2 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
3429:000 | DONE ins | na 16 16 | 006ed5 | f0 06       |                 beq 006edd           
3430:000 | DONE wsp | na 16 16 |        |             |
3431:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
3432:000 | DONE ins | na 16 16 | 006ed7 | a9 02 72    |                 lda.# 007202         
3433:000 | DONE ins | na 16 16 | 006eda | 4c 1e 6f    |                 jmp 006f1e           
3434:000 | DONE wsp | na 16 16 |        |             |
3435:000 | DONE lbl | na 16 16 | 006edd |             | compex_interpret                     
3436:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
3437:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
3438:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
3439:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
3440:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
3441:000 | DONE ins | na 16 16 | 006edd | 20 86 65    |                 jsr 006586           
3442:000 | DONE wsp | na 16 16 |        |             |
3443:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
3444:000 | DONE ins | na 16 16 | 006ee0 | 4c ac 6e    |                 jmp 006eac           
3445:000 | DONE wsp | na 16 16 |        |             |
3446:000 | DONE lbl | na 16 16 | 006ee3 |             | compex_compile                       
3447:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
3448:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
3449:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
3450:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
3451:000 | DONE ins | na 16 16 | 006ee3 | b2 16       |                 lda.di 000216        
3452:000 | DONE ins | na 16 16 | 006ee5 | eb          |                 xba                  flags are MSB
3453:000 | DONE ins | na 16 16 | 006ee6 | 29 02 00    |                 and.# IM             Mask all but IM bit
3454:000 | DONE ins | na 16 16 | 006ee9 | d0 f2       |                 bne 006edd           IMMEDIATE word, execute right now
3455:000 | DONE wsp | na 16 16 |        |             |
3456:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
3457:000 | DONE ins | na 16 16 | 006eeb | 20 21 64    |                 jsr 006421           
3458:000 | DONE wsp | na 16 16 |        |             |
3459:000 | DONE ins | na 16 16 | 006eee | 4c ac 6e    |                 jmp 006eac           
3460:000 | DONE wsp | na 16 16 |        |             |
3461:000 | DONE lbl | na 16 16 | 006ef1 |             | compex_line_done                     
3462:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
3463:000 | DONE ins | na 16 16 | 006ef1 | b4 02       |                 ldy.dx 02            
3464:000 | DONE ins | na 16 16 | 006ef3 | e8          |                 inx                  
3465:000 | DONE ins | na 16 16 | 006ef4 | e8          |                 inx                  
3466:000 | DONE ins | na 16 16 | 006ef5 | e8          |                 inx                  
3467:000 | DONE ins | na 16 16 | 006ef6 | e8          |                 inx                  
3468:000 | DONE wsp | na 16 16 |        |             |
3469:000 | DONE ins | na 16 16 | 006ef7 | 60          |                 rts                  
3470:000 | DONE wsp | na 16 16 |        |             |
3471:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3472:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
3473:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
3474:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
3475:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
3476:000 | DONE cmt | na 16 16 |        |             | ;
3477:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
3478:000 | DONE cmt | na 16 16 |        |             | ;
3479:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
3480:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
3481:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
3482:000 | DONE cmt | na 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
3483:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
3484:000 | DONE wsp | na 16 16 |        |             |
3485:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
3486:000 | DONE lbl | na 16 16 | 006ef8 |             | cmpl_word                            
3487:000 | DONE ins | na 16 16 | 006ef8 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
3488:000 | DONE ins | na 16 16 | 006efb | 80 08       |                 bra 006f05           
3489:000 | DONE lbl | na 16 16 | 006efd |             | cmpl_subroutine                      
3490:000 | DONE ins | na 16 16 | 006efd | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
3491:000 | DONE ins | na 16 16 | 006f00 | 80 03       |                 bra 006f05           
3492:000 | DONE lbl | na 16 16 | 006f02 |             | cmpl_jump                            
3493:000 | DONE ins | na 16 16 | 006f02 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
3494:000 | DONE lbl | na 16 16 | 006f05 |             | cmpl_common                          
3495:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
3496:000 | DONE ins | na 16 16 | 006f05 | 84 06       |                 sty.d 000206         
3497:000 | DONE wsp | na 16 16 |        |             |
3498:000 | DONE ins | na 16 16 | 006f07 | a8          |                 tay                  force flag check
3499:000 | DONE ins | na 16 16 | 006f08 | f0 08       |                 beq 006f12           came in through cmpl_word, just compile body
3500:000 | DONE wsp | na 16 16 |        |             |
3501:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
3502:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
3503:000 | DONE ins | na 16 16 | 006f0a | e2 20       |                 sep 20               
3503:001 | DONE ctl | na  8 16 |        |             |         .!a8
3504:000 | DONE ins | na  8 16 | 006f0c | 92 00       |                 sta.di 000200        STA (CP)
3505:000 | DONE ins | na  8 16 | 006f0e | c2 20       |                 rep 20               
3505:001 | DONE ctl | na 16 16 |        |             |         .!a16
3506:000 | DONE ins | na 16 16 | 006f10 | e6 00       |                 inc.d 000200         fall through to cmpl_body
3507:000 | DONE lbl | na 16 16 | 006f12 |             | cmpl_body                            
3508:000 | DONE ins | na 16 16 | 006f12 | 7a          |                 ply                  the return address we'll need later
3509:000 | DONE wsp | na 16 16 |        |             |
3510:000 | DONE ins | na 16 16 | 006f13 | 68          |                 pla                  next value on stack is the word to compile
3511:000 | DONE ins | na 16 16 | 006f14 | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
3512:000 | DONE ins | na 16 16 | 006f16 | e6 00       |                 inc.d 000200         
3513:000 | DONE ins | na 16 16 | 006f18 | e6 00       |                 inc.d 000200         
3514:000 | DONE wsp | na 16 16 |        |             |
3515:000 | DONE ins | na 16 16 | 006f1a | 5a          |                 phy                  make sure we can get back home
3516:000 | DONE wsp | na 16 16 |        |             |
3517:000 | DONE ins | na 16 16 | 006f1b | a4 06       |                 ldy.d 000206         restore Data Stack
3518:000 | DONE wsp | na 16 16 |        |             |
3519:000 | DONE ins | na 16 16 | 006f1d | 60          |                 rts                  
3520:000 | DONE wsp | na 16 16 |        |             |
3521:000 | DONE wsp | na 16 16 |        |             |
3522:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3523:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
3524:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
3525:000 | DONE lbl | na 16 16 | 006f1e |             | error                                
3526:000 | DONE ins | na 16 16 | 006f1e | 20 24 6f    |                 jsr 006f24           
3527:000 | DONE ins | na 16 16 | 006f21 | 4c 97 60    |                 jmp 006097           
3528:000 | DONE wsp | na 16 16 |        |             |
3529:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3530:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
3531:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
3532:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
3533:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
3534:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
3535:000 | DONE lbl | na 16 16 | 006f24 |             | print_string                         
3536:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3537:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3538:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
3539:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
3540:000 | DONE ins | na 16 16 | 006f24 | da          |                 phx                  
3541:000 | DONE ins | na 16 16 | 006f25 | aa          |                 tax                  x16 contains address of string
3542:000 | DONE lbl | na 16 16 | 006f26 |             | @                                    
3543:000 | DONE ins | na 16 16 | 006f26 | e2 20       |                 sep 20               
3543:001 | DONE ctl | na  8 16 |        |             |         .!a8
3544:000 | DONE ins | na  8 16 | 006f28 | bd 00 00    |                 lda.x 0000           LDA $0000,X
3545:000 | DONE ins | na  8 16 | 006f2b | f0 06       |                 beq 006f33           
3546:000 | DONE ins | na  8 16 | 006f2d | 20 36 60    |                 jsr 006036           
3547:000 | DONE ins | na  8 16 | 006f30 | e8          |                 inx                  
3548:000 | DONE ins | na  8 16 | 006f31 | 80 f3       |                 bra 006f26           
3549:000 | DONE wsp | na  8 16 |        |             |
3550:000 | DONE lbl | na  8 16 | 006f33 |             | print_string_done                    
3551:000 | DONE ins | na  8 16 | 006f33 | a9 0a       |                 lda.# AscLF          should be CR on some systems
3552:000 | DONE ins | na  8 16 | 006f35 | 20 36 60    |                 jsr 006036           
3553:000 | DONE ins | na  8 16 | 006f38 | c2 20       |                 rep 20               
3553:001 | DONE ctl | na 16 16 |        |             |         .!a16
3554:000 | DONE ins | na 16 16 | 006f3a | fa          |                 plx                  
3555:000 | DONE ins | na 16 16 | 006f3b | 60          |                 rts                  
3556:000 | DONE wsp | na 16 16 |        |             |
3557:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3558:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
3559:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
3560:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
3561:000 | DONE lbl | na 16 16 | 006f3c |             | byte_to_ascii                        
3562:000 | DONE ins | na 16 16 | 006f3c | 48          |                 pha                  
3563:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
3564:000 | DONE ins | na 16 16 | 006f3d | 4a          |                 lsr.a                
3565:000 | DONE ins | na 16 16 | 006f3e | 4a          |                 lsr.a                
3566:000 | DONE ins | na 16 16 | 006f3f | 4a          |                 lsr.a                
3567:000 | DONE ins | na 16 16 | 006f40 | 4a          |                 lsr.a                
3568:000 | DONE ins | na 16 16 | 006f41 | 20 45 6f    |                 jsr 006f45           
3569:000 | DONE wsp | na 16 16 |        |             |
3570:000 | DONE ins | na 16 16 | 006f44 | 68          |                 pla                  
3571:000 | DONE wsp | na 16 16 |        |             |
3572:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
3573:000 | DONE wsp | na 16 16 |        |             |
3574:000 | DONE wsp | na 16 16 |        |             |
3575:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3576:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
3577:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
3578:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
3579:000 | DONE lbl | na 16 16 | 006f45 |             | nibble_to_ascii                      
3580:000 | DONE ins | na 16 16 | 006f45 | 29 0f 00    |                 and.# 000f           
3581:000 | DONE ins | na 16 16 | 006f48 | 09 30 00    |                 ora.# 30             
3582:000 | DONE ins | na 16 16 | 006f4b | c9 3a 00    |                 cmp.# 003a           '9' + 1
3583:000 | DONE ins | na 16 16 | 006f4e | 90 03       |                 bcc 006f53           
3584:000 | DONE ins | na 16 16 | 006f50 | 69 06 00    |                 adc.# 0006           
3585:000 | DONE lbl | na 16 16 | 006f53 |             | @                                    
3586:000 | DONE ins | na 16 16 | 006f53 | 20 36 60    |                 jsr 006036           
3587:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3588:000 | DONE ins | na 16 16 | 006f56 | 60          |                 rts                  
3589:000 | DONE wsp | na 16 16 |        |             |
3590:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3591:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
3592:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
3593:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
3594:000 | DONE lbl | na 16 16 | 006f57 |             | string_to_lowercase                  
3595:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
3596:000 | DONE ins | na 16 16 | 006f57 | 60          |                 rts                  
3597:000 | DONE wsp | na 16 16 |        |             |
3598:000 | DONE wsp | na 16 16 |        |             |
3599:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3600:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
3601:000 | DONE wsp | na 16 16 |        |             |
3602:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
3603:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
3604:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
3605:000 | DONE lbl | na 16 16 | 006f58 |             | hi-start                             
3606:000 | DONE cmt | na 16 16 |        |             |         ; High level definitions
3607:000 | DONE dir | na 16 16 | 006f58 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) ( "parens"
3607:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
3607:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
3607:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
3607:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
3607:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
3608:000 | DONE dir | na 16 16 | 006f7d | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) .( "dotparens"
3608:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
3608:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
3608:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
3608:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
3608:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
3609:000 | DONE dir | na 16 16 | 006fa2 | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) IF
3609:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
3609:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
3609:000 | DONE dir | na 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
3609:000 | DONE dir | na 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
3609:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
3609:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
3609:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
3609:000 | DONE dir | na 16 16 |        |             |                                          -- 
3610:000 | DONE dir | na 16 16 | 006fda | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) THEN
3610:000 | DONE dir | na 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
3610:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
3610:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
3610:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3610:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3610:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3611:000 | DONE dir | na 16 16 | 007006 | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) ELSE
3611:000 | DONE dir | na 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
3611:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
3611:000 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
3611:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
3611:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
3611:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
3611:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3611:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3611:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3612:000 | DONE dir | na 16 16 | 00704a | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) REPEAT
3612:000 | DONE dir | na 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
3612:000 | DONE dir | na 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
3612:000 | DONE dir | na 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
3612:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
3612:000 | DONE dir | na 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
3612:000 | DONE dir | na 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
3612:000 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
3612:000 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
3613:000 | DONE dir | na 16 16 | 007087 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) UNTIL
3613:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
3613:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3613:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
3613:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
3613:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3613:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3613:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3614:000 | DONE dir | na 16 16 | 0070bb | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) WHILE
3614:000 | DONE dir | na 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
3614:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3614:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
3614:000 | DONE dir | na 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
3614:000 | DONE dir | na 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
3614:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
3614:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
3614:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
3614:000 | DONE dir | na 16 16 |        |             |                                          -- 
3615:000 | DONE wsp | na 16 16 |        |             |
3616:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings
3617:000 | DONE dir | na 16 16 | 0070fb | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
3617:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
3617:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
3617:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
3617:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
3617:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
3618:000 | DONE dir | na 16 16 | 00711e | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
3618:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
3618:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
3618:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
3618:000 | DONE dir | na 16 16 |        |             |                 31 39 2e 20 46 65 62 20  --  1 9 .   F e b  
3618:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
3619:000 | DONE dir | na 16 16 | 007143 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
3619:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
3619:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
3619:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
3619:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
3619:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
3619:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
3619:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
3620:000 | DONE dir | na 16 16 | 007176 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
3620:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
3620:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
3620:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
3620:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
3620:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
3620:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
3620:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
3621:000 | DONE dir | na 16 16 | 0071aa | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
3621:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
3621:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
3621:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
3621:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
3622:000 | DONE lbl | na 16 16 | 0071c6 |             | hi-end                               
3623:000 | DONE wsp | na 16 16 |        |             |
3624:000 | DONE wsp | na 16 16 |        |             |
3625:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3626:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
3627:000 | DONE wsp | na 16 16 |        |             |
3628:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
3628:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
3628:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
3628:003 | DONE cmt | na 16 16 |        |             | ; This version:  15. Feb 2017
3628:004 | DONE wsp | na 16 16 |        |             |
3628:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
3628:006 | DONE wsp | na 16 16 |        |             |
3628:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3628:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
3628:009 | DONE wsp | na 16 16 |        |             |
3628:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
3628:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
3628:012 | DONE cmt | na 16 16 |        |             | ; character
3628:013 | DONE wsp | na 16 16 |        |             |
3628:014 | DONE lbl | na 16 16 | 0071c6 |             | s_ok                                 
3628:015 | DONE dir | na 16 16 | 0071c6 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
3628:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
3628:016 | DONE lbl | na 16 16 | 0071ca |             | s_compiled                           
3628:017 | DONE dir | na 16 16 | 0071ca | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
3628:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
3628:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
3628:018 | DONE wsp | na 16 16 |        |             |
3628:019 | DONE wsp | na 16 16 |        |             |
3628:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3628:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
3628:022 | DONE wsp | na 16 16 |        |             |
3628:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
3628:024 | DONE wsp | na 16 16 |        |             |
3628:025 | DONE lbl | na 16 16 | 0071d4 |             | es_allot                             
3628:026 | DONE dir | na 16 16 | 0071d4 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
3628:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
3628:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
3628:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
3628:027 | DONE lbl | na 16 16 | 0071e8 |             | es_channel                           
3628:028 | DONE dir | na 16 16 | 0071e8 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
3628:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
3628:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
3628:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
3628:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
3628:029 | DONE lbl | na 16 16 | 007202 |             | es_componly                          
3628:030 | DONE dir | na 16 16 | 007202 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
3628:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
3628:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
3628:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3628:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
3628:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
3628:031 | DONE lbl | na 16 16 | 007223 |             | es_defer                             
3628:032 | DONE dir | na 16 16 | 007223 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
3628:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
3628:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
3628:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
3628:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
3628:033 | DONE lbl | na 16 16 | 007240 |             | es_divzero                           
3628:034 | DONE dir | na 16 16 | 007240 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
3628:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
3628:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
3628:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
3628:035 | DONE lbl | na 16 16 | 007251 |             | es_error                             
3628:036 | DONE dir | na 16 16 | 007251 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
3628:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
3628:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
3628:037 | DONE lbl | na 16 16 | 00725d |             | es_intonly                           
3628:038 | DONE dir | na 16 16 | 00725d | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
3628:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
3628:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
3628:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
3628:039 | DONE lbl | na 16 16 | 007273 |             | es_noname                            
3628:040 | DONE dir | na 16 16 | 007273 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
3628:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
3628:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
3628:040 | DONE dir | na 16 16 |        |             |                                          -- 
3628:041 | DONE lbl | na 16 16 | 007283 |             | es_radix                             
3628:042 | DONE dir | na 16 16 | 007283 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
3628:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
3628:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
3628:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
3628:043 | DONE lbl | na 16 16 | 00729a |             | es_refill1                           
3628:044 | DONE dir | na 16 16 | 00729a | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
3628:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
3628:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
3628:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
3628:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
3628:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
3628:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
3628:045 | DONE lbl | na 16 16 | 0072c8 |             | es_refill2                           
3628:046 | DONE dir | na 16 16 | 0072c8 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
3628:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
3628:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
3628:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
3628:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
3628:046 | DONE dir | na 16 16 |        |             |                                          -- 
3628:047 | DONE lbl | na 16 16 | 0072e8 |             | es_state                             
3628:048 | DONE dir | na 16 16 | 0072e8 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
3628:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
3628:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
3628:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
3628:048 | DONE dir | na 16 16 |        |             |                                          -- 
3628:049 | DONE lbl | na 16 16 | 007300 |             | es_underflow                         
3628:050 | DONE dir | na 16 16 | 007300 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
3628:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
3628:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
3628:050 | DONE dir | na 16 16 |        |             |                                          -- 
3628:051 | DONE lbl | na 16 16 | 007310 |             | es_syntax                            
3628:052 | DONE dir | na 16 16 | 007310 | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
3628:052 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
3628:052 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
3628:052 | DONE dir | na 16 16 |        |             |                                          -- 
3628:053 | DONE wsp | na 16 16 |        |             |
3628:054 | DONE wsp | na 16 16 |        |             |
3628:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3628:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
3628:057 | DONE wsp | na 16 16 |        |             |
3628:058 | DONE lbl | na 16 16 | 007320 |             | vt100_page                           
3628:059 | DONE dir | na 16 16 | 007320 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
3628:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
3628:060 | DONE lbl | na 16 16 | 007325 |             | vt100_home                           
3628:061 | DONE dir | na 16 16 | 007325 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
3628:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
3628:062 | DONE wsp | na 16 16 |        |             |
3628:063 | DONE wsp | na 16 16 |        |             |
3628:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3628:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
3628:066 | DONE wsp | na 16 16 |        |             |
3628:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
3628:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
3628:069 | DONE wsp | na 16 16 |        |             |
3628:070 | DONE lbl | na 16 16 | 007329 |             | tests_prev_cmd                       
3628:071 | DONE dir | na 16 16 | 007329 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
3628:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
3628:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
3628:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
3628:072 | DONE lbl | na 16 16 | 00733c |             | tests_next_cmd                       
3628:073 | DONE dir | na 16 16 | 00733c | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
3628:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
3628:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
3628:074 | DONE wsp | na 16 16 |        |             |
3628:075 | DONE wsp | na 16 16 |        |             |
3628:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3628:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
3628:078 | DONE wsp | na 16 16 |        |             |
3628:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
3628:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
3628:081 | DONE wsp | na 16 16 |        |             |
3628:082 | DONE lbl | na 16 16 | 00734b |             | alphastr                             
3628:083 | DONE dir | na 16 16 | 00734b | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
3628:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
3628:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
3628:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
3628:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
3628:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
3629:000 | DONE wsp | na 16 16 |        |             |
3630:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3631:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
3632:000 | DONE wsp | na 16 16 |        |             |
3633:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
3634:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
3635:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
3636:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
3637:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
3638:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
3639:000 | DONE wsp | na 16 16 |        |             |
3640:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
3641:000 | DONE cmt | na 16 16 |        |             |                 ; tya
3642:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
3643:000 | DONE cmt | na 16 16 |        |             |                 ; xba
3644:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
3645:000 | DONE cmt | na 16 16 |        |             |                 ; tya
3646:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
3647:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
3648:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
3649:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
3650:000 | DONE wsp | na 16 16 |        |             |
3651:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
3652:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
3653:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
3654:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
3655:000 | DONE wsp | na 16 16 |        |             |
3656:000 | DONE wsp | na 16 16 |        |             |
3657:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3658:000 | DONE cmt | na 16 16 |        |             | ; END
3659:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 00633a
- accept_eol                  : 006332
- accept_loop                 : 0062e7
- accept_nonzero              : 0062da
- allot_done                  : 006390
- allot_error                 : 00637f
- allot_minus                 : 006385
- allot_real_gone             : 006392
- alphastr                    : 00734b
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- branch_rt                   : 0063c3
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006f3c
- char_got_char               : 00640c
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 006f12
- cmpl_common                 : 006f05
- cmpl_jump                   : 006f02
- cmpl_subroutine             : 006efd
- cmpl_word                   : 006ef8
- co                          : 000004
- compex                      : 006eac
- compex_compile              : 006ee3
- compex_got_name_token       : 006ec1
- compex_interpret            : 006edd
- compex_line_done            : 006ef1
- compex_loop                 : 006eac
- compile_as_code             : 006421
- compile_as_jump             : 006421
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 00646f
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 006e8a
- dodoes                      : 006e98
- does_rt                     : 00650d
- dots_done                   : 006197
- dots_loop                   : 00617d
- dots_not_empty              : 006177
- dovar                       : 006ea5
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 006530
- dump_done                   : 006545
- dump_line_loop              : 00652a
- equal_not                   : 00622c
- error                       : 006f1e
- es_allot                    : 0071d4
- es_channel                  : 0071e8
- es_componly                 : 007202
- es_defer                    : 007223
- es_divzero                  : 007240
- es_error                    : 007251
- es_intonly                  : 00725d
- es_noname                   : 007273
- es_radix                    : 007283
- es_refill1                  : 00729a
- es_refill2                  : 0072c8
- es_state                    : 0072e8
- es_syntax                   : 007310
- es_underflow                : 007300
- execute_ip                  : 006583
- find-name_all_chars         : 0065bf
- find-name_char_nomatcnt_8   : 0065bb
- find-name_chars             : 0065b0
- find-name_done              : 0065e5
- find-name_failure_16        : 0065e2
- find-name_loop              : 00659b
- find-name_next_entry        : 0065a4
- find-name_success           : 0065dc
- get_chr                     : 006047
- get_chr_wait                : 00604c
- have_chr?                   : 006056
- hi-end                      : 0071c6
- hi-start                    : 006f58
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- literal_rt                  : 006616
- max_drop                    : 006651
- max_nip                     : 006653
- max_no_ov                   : 00664f
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 006664
- min_nip                     : 006666
- min_no_ov                   : 006662
- mstar_abs_nos               : 00662f
- mstar_umstar                : 006639
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 006f45
- not-equal_equal             : 0060fc
- nt_2drop                    : 006e3c
- nt_2dup                     : 006c05
- nt_abort                    : 006a1d
- nt_abs                      : 006c11
- nt_accept                   : 006df1
- nt_again                    : 006b8e
- nt_allot                    : 006bca
- nt_and                      : 006ccb
- nt_base                     : 006ab5
- nt_begin                    : 006b9b
- nt_bell                     : 006995
- nt_bl                       : 006a66
- nt_bracketchar              : 006b0d
- nt_brackettick              : 006b02
- nt_branch                   : 006b80
- nt_bye                      : 006965
- nt_c-comma                  : 006cd6
- nt_c-fetch                  : 006ce0
- nt_c-store                  : 006cea
- nt_cells                    : 006ad1
- nt_char                     : 006caa
- nt_cold                     : 006970
- nt_colon                    : 006bc1
- nt_comma                    : 006de8
- nt_compile-only             : 006b2a
- nt_compilecomma             : 006ba8
- nt_constant                 : 006c4f
- nt_count                    : 006a10
- nt_cr                       : 006a5c
- nt_create                   : 006be4
- nt_decimal                  : 0069a1
- nt_depth                    : 006c42
- nt_dnegate                  : 0069d5
- nt_does                     : 006bd7
- nt_dot                      : 006aa1
- nt_dotquote                 : 006ade
- nt_dots                     : 006a8b
- nt_drop                     : 006e7e
- nt_dump                     : 006989
- nt_dup                      : 006e73
- nt_equal                    : 006d69
- nt_evaluate                 : 006ac1
- nt_execute                  : 006e21
- nt_false                    : 006d72
- nt_fetch                    : 006e55
- nt_find-name                : 006da6
- nt_greater                  : 006d43
- nt_here                     : 006e30
- nt_hex                      : 0069b0
- nt_immediate                : 006b3e
- nt_invert                   : 006c9c
- nt_leftbracket              : 006b68
- nt_less                     : 006d4c
- nt_literal                  : 006b1b
- nt_max                      : 006c83
- nt_min                      : 006c78
- nt_minus                    : 006cfe
- nt_mstar                    : 0069fb
- nt_name-int                 : 006a4c
- nt_name-string              : 006bf2
- nt_negate                   : 006c8e
- nt_nip                      : 006e0b
- nt_not-equal                : 006d5f
- nt_one                      : 006d94
- nt_one-minus                : 006d10
- nt_one-plus                 : 006d1a
- nt_or                       : 006cc1
- nt_over                     : 006e49
- nt_pad                      : 006aaa
- nt_page                     : 0069c9
- nt_parse                    : 006a2a
- nt_parse-name               : 006dc5
- nt_plus                     : 006d07
- nt_postpone                 : 006b4f
- nt_question                 : 006a43
- nt_quit                     : 006a37
- nt_refill                   : 006db7
- nt_rightbracket             : 006b5f
- nt_rot                      : 006e16
- nt_semicolon                : 006bb8
- nt_sliteral                 : 006af2
- nt_source                   : 006c34
- nt_source-id                : 006dd7
- nt_space                    : 006a7e
- nt_spaces                   : 006a70
- nt_squote                   : 006ae8
- nt_star                     : 0069f2
- nt_state                    : 006c1c
- nt_store                    : 006e5e
- nt_swap                     : 006e67
- nt_tick                     : 006c6f
- nt_to-in                    : 006c29
- nt_true                     : 006d7f
- nt_tuck                     : 006dff
- nt_two                      : 006d8b
- nt_two-star                 : 006cf4
- nt_type                     : 006a95
- nt_ummod                    : 0069e4
- nt_umstar                   : 006a05
- nt_unused                   : 0069bb
- nt_variable                 : 006c5f
- nt_words                    : 00697c
- nt_xor                      : 006cb6
- nt_zbranch                  : 006b71
- nt_zero                     : 006d9d
- nt_zero-equal               : 006d55
- nt_zero-less                : 006d39
- nt_zero-more                : 006d2f
- nt_zero-notequal            : 006d24
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 0066c6
- parse-name_found            : 0066da
- parse-name_loop             : 0066b9
- parse_found_delimiter       : 006706
- parse_loop                  : 0066f9
- parse_reached_eol           : 00670a
- physicalram                 : 007fff
- piblen                      : 000210
- pp_got_nt                   : 00672f
- pp_got_word                 : 006724
- pp_not_immediate            : 00673f
- print_string                : 006f24
- print_string_done           : 006f33
- put_chr                     : 006036
- put_chr_wait                : 00603c
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 00677a
- refill_src_not_kbd          : 006771
- reset_hardware              : 006000
- s_compiled                  : 0071ca
- s_ok                        : 0071c6
- scratch                     : 000220
- sl_loop                     : 0067bc
- sliteral_rt                 : 0067e7
- spaces_done                 : 006820
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- string_to_lowercase         : 006f57
- tests_next_cmd              : 00733c
- tests_prev_cmd              : 007329
- tick_have_nt                : 0062c7
- tick_have_word              : 0062bb
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 006866
- type_loop                   : 00685a
- ummod_complete              : 006914
- ummod_notzero               : 0068d5
- ummod_overflow              : 00690b
- ummod_shift                 : 0068ed
- umstar_counter              : 0068a4
- umstar_loop                 : 006896
- umstar_one_nos              : 0068b7
- umstar_one_tos              : 0068b4
- umstar_two_common           : 0068c3
- umstar_two_nos              : 0068c2
- umstar_two_tos              : 0068be
- umstar_zero                 : 0068ad
- vt100_home                  : 007325
- vt100_page                  : 007320
- words_loop                  : 006940
- workword                    : 00021e
- xt_2drop                    : 00629d
- xt_2dup                     : 0062a4
- xt_abort                    : 006097
- xt_abs                      : 0062cb
- xt_accept                   : 0062d4
- xt_again                    : 006358
- xt_allot                    : 00636e
- xt_and                      : 006397
- xt_base                     : 00639e
- xt_begin                    : 0063ad
- xt_bell                     : 0063a6
- xt_bl                       : 0063b4
- xt_bracketchar              : 006209
- xt_brackettick              : 0061fa
- xt_branch                   : 0063bc
- xt_bye                      : 0063d2
- xt_c-comma                  : 0063d6
- xt_c-fetch                  : 0063e4
- xt_c-store                  : 0063f0
- xt_char                     : 006400
- xt_cold                     : 006063
- xt_colon                    : 0061a7
- xt_comma                    : 00619b
- xt_compile-only             : 006418
- xt_compilecomma             : 006421
- xt_constant                 : 006434
- xt_count                    : 00644e
- xt_cr                       : 00645d
- xt_create                   : 006464
- xt_decimal                  : 0064d7
- xt_depth                    : 0064dd
- xt_dnegate                  : 0064ec
- xt_does                     : 006500
- xt_dot                      : 00611b
- xt_dotparen                 : 006131
- xt_dotquote                 : 00613f
- xt_dots                     : 006153
- xt_drop                     : 006523
- xt_dump                     : 006528
- xt_dup                      : 00654f
- xt_equal                    : 006223
- xt_evaluate                 : 006554
- xt_execute                  : 006586
- xt_fetch                    : 0061f5
- xt_find-name                : 006591
- xt_greater                  : 0060ff
- xt_greater_nip              : 006110
- xt_greater_no_ov            : 00610d
- xt_here                     : 0065f7
- xt_hex                      : 0065fe
- xt_immediate                : 0065e8
- xt_invert                   : 0065f1
- xt_leftbracket              : 006200
- xt_less                     : 0060df
- xt_less_nip                 : 0060f0
- xt_less_no_ov               : 0060ed
- xt_literal                  : 006604
- xt_max                      : 006643
- xt_min                      : 006656
- xt_minus                    : 006218
- xt_mstar                    : 006623
- xt_name-int                 : 006669
- xt_name-string              : 006672
- xt_negate                   : 006683
- xt_nip                      : 00668a
- xt_not-equal                : 0060f3
- xt_one                      : 006285
- xt_one-minus                : 00628d
- xt_one-plus                 : 00628f
- xt_or                       : 00668d
- xt_over                     : 006694
- xt_pad                      : 00669b
- xt_page                     : 0066a7
- xt_parse                    : 0066e6
- xt_parse-name               : 0066b4
- xt_plus                     : 006210
- xt_postpone                 : 006719
- xt_question                 : 0061e2
- xt_quit                     : 00609f
- xt_refill                   : 00674e
- xt_rightbracket             : 006203
- xt_rot                      : 006781
- xt_semicolon                : 0061c9
- xt_sliteral                 : 00679c
- xt_source                   : 0067fd
- xt_source-id                : 00680a
- xt_space                    : 006811
- xt_spaces                   : 006818
- xt_squote                   : 00678a
- xt_star                     : 006825
- xt_state                    : 00682d
- xt_store                    : 0061e9
- xt_swap                     : 006835
- xt_tick                     : 0062af
- xt_to-in                    : 006113
- xt_true                     : 00683b
- xt_tuck                     : 006843
- xt_two                      : 006291
- xt_two-star                 : 006299
- xt_type                     : 00684c
- xt_ummod                    : 0068cc
- xt_umstar                   : 00686d
- xt_unused                   : 00691d
- xt_variable                 : 006929
- xt_words                    : 006936
- xt_xor                      : 00695e
- xt_zbranch                  : 006266
- xt_zero                     : 00622f
- xt_zero-equal               : 006237
- xt_zero-less                : 006243
- xt_zero-more                : 00625b
- xt_zero-notequal            : 00624f
- z_2drop                     : 0062a3
- z_2dup                      : 0062ae
- z_abort                     : 0060de
- z_abs                       : 0062d3
- z_accept                    : 006357
- z_again                     : 00636d
- z_allot                     : 006396
- z_and                       : 00639d
- z_base                      : 0063a5
- z_begin                     : 0063b3
- z_bell                      : 0063ac
- z_bl                        : 0063bb
- z_bracketchar               : 00620f
- z_brackettick               : 006200
- z_branch                    : 0063c2
- z_bye                       : 0063d5
- z_c-comma                   : 0063e3
- z_c-fetch                   : 0063ef
- z_c-store                   : 0063ff
- z_char                      : 006417
- z_cold                      : 0060de
- z_colon                     : 0061c8
- z_comma                     : 0061a6
- z_compile-only              : 006420
- z_compilecomma              : 006433
- z_constant                  : 00644d
- z_count                     : 00645c
- z_cr                        : 006463
- z_create                    : 0064d6
- z_decimal                   : 0064dc
- z_depth                     : 0064eb
- z_dnegate                   : 0064ff
- z_does                      : 00650c
- z_dot                       : 006130
- z_dotparen                  : 00613e
- z_dotquote                  : 006153
- z_dots                      : 00619a
- z_drop                      : 006527
- z_dump                      : 00654e
- z_dup                       : 006553
- z_equal                     : 00622e
- z_evaluate                  : 006582
- z_execute                   : 006590
- z_fetch                     : 0061f9
- z_find-name                 : 0065e7
- z_greater                   : 006112
- z_here                      : 0065fd
- z_hex                       : 006603
- z_immediate                 : 0065f0
- z_invert                    : 0065f6
- z_leftbracket               : 006202
- z_less                      : 0060f2
- z_literal                   : 006615
- z_max                       : 006655
- z_min                       : 006668
- z_minus                     : 006222
- z_mstar                     : 006642
- z_name-int                  : 006671
- z_name-string               : 006682
- z_negate                    : 006689
- z_nip                       : 00668c
- z_not-equal                 : 0060fe
- z_one                       : 00628c
- z_one-minus                 : 00628e
- z_one-plus                  : 006290
- z_or                        : 006693
- z_over                      : 00669a
- z_pad                       : 0066a6
- z_page                      : 0066b3
- z_parse                     : 006718
- z_parse-name                : 006718
- z_plus                      : 006217
- z_postpone                  : 00674e
- z_question                  : 0061e8
- z_quit                      : 0060de
- z_refill                    : 006780
- z_rightbracket              : 006208
- z_rot                       : 006789
- z_semicolon                 : 0061e1
- z_sliteral                  : 0067e6
- z_source                    : 006809
- z_source-id                 : 006810
- z_space                     : 006817
- z_spaces                    : 006824
- z_squote                    : 00679b
- z_star                      : 00682c
- z_state                     : 006834
- z_store                     : 0061f4
- z_swap                      : 00683a
- z_tick                      : 0062ca
- z_to-in                     : 00611a
- z_true                      : 006842
- z_tuck                      : 00684b
- z_two                       : 006298
- z_two-star                  : 00629c
- z_type                      : 00686c
- z_ummod                     : 00691c
- z_umstar                    : 0068cb
- z_unused                    : 006928
- z_variable                  : 006935
- z_words                     : 00695d
- z_xor                       : 006964
- z_zbranch                   : 00626c
- z_zero                      : 006236
- z_zero-equal                : 006242
- z_zero-less                 : 00624e
- z_zero-more                 : 006265
- z_zero-notequal             : 00625a
- zb_done                     : 00627f
- zb_zero                     : 006279
- zbranch_rt                  : 00626d
- ze_not_zero                 : 00623f
- zero-less-is-less           : 00624b
- zero-more_done              : 006264
- zero-more_true              : 006263
- zne_is_zero                 : 006257
