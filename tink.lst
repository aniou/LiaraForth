A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sun Mar 19 16:54:12 2017
Target MPU: 65816
External files loaded: 5
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.34091 seconds
Code origin: 005000
Bytes of machine code: 8961

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 19. Mar 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE dir | em  8  8 |        |             |         .origin 5000                 start of code to save to built-in RAM
  11:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE lbl | em  8  8 | 005000 |             | code0                                ; used to calculate UNUSED
  14:000 | DONE wsp | em  8  8 |        |             |
  15:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  18:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  18:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  18:003 | DONE cmt | em  8  8 |        |             | ; This version: 19. Mar 2017
  18:004 | DONE wsp | em  8  8 |        |             |
  18:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  18:006 | DONE wsp | em  8  8 |        |             |
  18:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  18:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  18:009 | DONE wsp | em  8  8 |        |             |
  18:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  18:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  18:012 | DONE wsp | em  8  8 |        |             |
  18:013 | DONE wsp | em  8  8 |        |             |
  18:014 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  18:015 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP
  18:016 | DONE cmt | em  8  8 |        |             | ; We reuse the memory that the Mensch Monitor had been using
  18:017 | DONE wsp | em  8  8 |        |             |
  18:018 | DONE cmt | em  8  8 |        |             |         ; TODO add any extra RAM in other banks
  18:019 | DONE cmt | em  8  8 |        |             |         ; TODO add stuff for multitasking
  18:020 | DONE wsp | em  8  8 |        |             |
  18:021 | DONE cmt | em  8  8 |        |             |         ;  00:0000  +-------------------+  ram-start, dpage, user0
  18:022 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:023 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Data Stack    |  <-- dsp
  18:024 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  18:025 | DONE cmt | em  8  8 |        |             |         ;  00:0100  +-------------------+  dsp0, stack
  18:026 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:027 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Return Stack  |  <-- rsp
  18:028 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  18:029 | DONE cmt | em  8  8 |        |             |         ;  00:0200  +-------------------+  rsp0, buffer, buffer0
  18:030 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  18:031 | DONE cmt | em  8  8 |        |             |         ;           |  v  Input Buffer  |
  18:032 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:033 | DONE cmt | em  8  8 |        |             |         ;  00:0300  +-------------------+  cp0
  18:034 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  18:035 | DONE cmt | em  8  8 |        |             |         ;           |  v  Dictionary    |  <-- cp
  18:036 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:037 | DONE cmt | em  8  8 |        |             |         ;   (...)   ~~~~~~~~~~~~~~~~~~~~~
  18:038 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:039 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  18:040 | DONE cmt | em  8  8 |        |             |         ;  00:7fff  +-------------------+  ram-end
  18:041 | DONE wsp | em  8  8 |        |             |
  18:042 | DONE cmt | em  8  8 |        |             |         ; Hard physical addresses
  18:043 | DONE dir | em  8  8 |        |             |         .equ ram-start  0000         start of installed RAM
  18:044 | DONE dir | em  8  8 |        |             |         .equ ram-end { 8000 - 1 }    end of 32k installed RAM
  18:045 | DONE wsp | em  8  8 |        |             |
  18:046 | DONE cmt | em  8  8 |        |             |         ; Soft physical addresses
  18:047 | DONE dir | em  8  8 |        |             |         .equ dpage      ram-start    direct page:       0000 - 00ff
  18:048 | DONE dir | em  8  8 |        |             |         .equ stack { 000000 + 0100 } return stack area: 0100 - 01ff
  18:049 | DONE dir | em  8  8 |        |             |         .equ buffer0 { stack + 0100 } buffer areas:      0200 - 02ff
  18:050 | DONE wsp | em  8  8 |        |             |
  18:051 | DONE cmt | em  8  8 |        |             |         ; Defined locations
  18:052 | DONE dir | em  8  8 |        |             |         .equ user0      dpage        user and system variables
  18:053 | DONE dir | em  8  8 |        |             |         .equ dsp0 { stack - 1 }      initial Data Stack Pointer:   00ff
  18:054 | DONE dir | em  8  8 |        |             |         .equ stack0 { buffer0 - 1 }  initial Return Stack Pointer: 01ff
  18:055 | DONE wsp | em  8  8 |        |             |
  18:056 | DONE cmt | em  8  8 |        |             |         ; Buffers
  18:057 | DONE dir | em  8  8 |        |             |         .equ bsize      0080         size of input/output buffers
  18:058 | DONE dir | em  8  8 |        |             |         .equ buffer1 { buffer0 + 000080 } output buffer 0280 (UNUSED)
  18:059 | DONE wsp | em  8  8 |        |             |
  18:060 | DONE cmt | em  8  8 |        |             |         ; Dictionary RAM
  18:061 | DONE dir | em  8  8 |        |             |         .equ cp0 { buffer1 + 000080 } Dictionary starts after last buffer
  18:062 | DONE dir | em  8  8 |        |             |         .equ cp-end { code0 - 1 }    Last RAM byte available
  18:063 | DONE wsp | em  8  8 |        |             |
  18:064 | DONE cmt | em  8  8 |        |             |         ; Other locations
  18:065 | DONE dir | em  8  8 |        |             |         .equ padoffset  0ff          offset from CP to PAD (holds number strings)
  18:066 | DONE wsp | em  8  8 |        |             |
  18:067 | DONE wsp | em  8  8 |        |             |
  18:068 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  18:069 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  18:070 | DONE wsp | em  8  8 |        |             |
  18:071 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  18:072 | DONE cmt | em  8  8 |        |             | ; TODO rewrite with USER variables
  18:073 | DONE dir | em  8  8 |        |             |         .equ cp { 000000 + &00 }     Compiler Pointer, 2 bytes
  18:074 | DONE dir | em  8  8 |        |             |         .equ dp { 000000 + &02 }     Dictionary Pointer, 2 bytes
  18:075 | DONE dir | em  8  8 |        |             |         .equ workword { 000000 + &04 } nt (not xt) of word being compiled
  18:076 | DONE dir | em  8  8 |        |             |         .equ insrc { 000000 + &06 }  Input Source for SOURCE-ID
  18:077 | DONE dir | em  8  8 |        |             |         .equ cib { 000000 + &08 }    Address of current input buffer
  18:078 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000000 + &10 } Length of current input buffer
  18:079 | DONE dir | em  8  8 |        |             |         .equ toin { 000000 + &12 }   Pointer to CIB (>IN in Forth)
  18:080 | DONE dir | em  8  8 |        |             |         .equ output { 000000 + &14 } Jump target for EMIT
  18:081 | DONE dir | em  8  8 |        |             |         .equ input { 000000 + &16 }  Jump target for KEY
  18:082 | DONE dir | em  8  8 |        |             |         .equ havekey { 000000 + &18 } Jump target for KEY?
  18:083 | DONE dir | em  8  8 |        |             |         .equ state { 000000 + &20 }  STATE: -1 compile, 0 interpret
  18:084 | DONE dir | em  8  8 |        |             |         .equ base { 000000 + &22 }   Radix for number conversion
  18:085 | DONE dir | em  8  8 |        |             |         .equ tohold { 000000 + &24 } Pointer for formatted output
  18:086 | DONE dir | em  8  8 |        |             |         .equ tmpbranch { 000000 + &26 } temp storage for 0BRANCH, BRANCH only
  18:087 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000000 + &28 }   Temporary storage
  18:088 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000000 + &30 }   Temporary storage
  18:089 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000000 + &32 }   Temporary storage
  18:090 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000000 + &34 } Temporary DSP (X) storage, 2 bytes
  18:091 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000000 + &36 } Temporary TOS (Y) storage, 2 bytes
  18:092 | DONE dir | em  8  8 |        |             |         .equ nc_limit { 000000 + &38 } Holds limit for Native Compile size
  18:093 | DONE dir | em  8  8 |        |             |         .equ scratch { 000000 + &40 } 8 byte scratchpad (see UM/MOD)
  18:094 | DONE wsp | em  8  8 |        |             |
  18:095 | DONE wsp | em  8  8 |        |             |
  18:096 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  18:097 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  18:098 | DONE wsp | em  8  8 |        |             |
  18:099 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  18:100 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  18:101 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  18:102 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  18:103 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  18:104 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  18:105 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  18:106 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  18:107 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  18:108 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  18:109 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  18:110 | DONE wsp | em  8  8 |        |             |
  18:111 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four bits are currently unused
  18:112 | DONE dir | em  8  8 |        |             |         .equ FN 0008                 Force Native compile
  18:113 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  18:114 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  18:115 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  18:116 | DONE wsp | em  8  8 |        |             |
  19:000 | DONE wsp | em  8  8 |        |             |
  20:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  21:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One (very ALPHA) for the crude65816 emulator,
  22:000 | DONE cmt | em  8  8 |        |             | ; and one for the 265sxb board. Only use one. Which ever kernel file is used, it
  23:000 | DONE cmt | em  8  8 |        |             | ; must contain at least the routines put_chr, get_chr and have_chr, which work
  24:000 | DONE cmt | em  8  8 |        |             | ; on the A register
  25:000 | DONE wsp | em  8  8 |        |             |
  26:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  26:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  26:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  26:003 | DONE cmt | em  8  8 |        |             | ; This version: 19. Mar 2017
  26:004 | DONE wsp | em  8  8 |        |             |
  26:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing at the
  26:006 | DONE cmt | em  8  8 |        |             | ; very least the the PUT_CHR, GET_CHR and HAVE_CHR routines that Liara Forth
  26:007 | DONE cmt | em  8  8 |        |             | ; uses. These MUST BE PRESENT. It is in its own section to make porting Forth
  26:008 | DONE cmt | em  8  8 |        |             | ; to other machines easier.
  26:009 | DONE wsp | em  8  8 |        |             |
  26:010 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  26:011 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  26:012 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  26:013 | DONE cmt | em  8  8 |        |             | ; following license:
  26:014 | DONE cmt | em  8  8 |        |             | ;
  26:015 | DONE cmt | em  8  8 |        |             | ;     This work is made available under the terms of the Creative Commons
  26:016 | DONE cmt | em  8  8 |        |             | ;     Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  26:017 | DONE cmt | em  8  8 |        |             | ;     following URL to see the details.
  26:018 | DONE cmt | em  8  8 |        |             | ;     http://creativecommons.org/licenses/by-nc-sa/4.0/
  26:019 | DONE wsp | em  8  8 |        |             |
  26:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  26:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  26:022 | DONE wsp | em  8  8 |        |             |
  26:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  26:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  26:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  26:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  26:027 | DONE wsp | em  8  8 |        |             |
  26:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  26:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  26:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  26:031 | DONE cmt | em  8  8 |        |             | ;
  26:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  26:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  26:034 | DONE wsp | em  8  8 |        |             |
  26:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  26:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  26:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  26:038 | DONE wsp | em  8  8 |        |             |
  26:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  26:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  26:041 | DONE wsp | em  8  8 |        |             |
  26:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  26:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  26:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  26:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  26:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  26:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  26:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  26:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  26:050 | DONE wsp | em  8  8 |        |             |
  26:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  26:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  26:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  26:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  26:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  26:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  26:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  26:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  26:059 | DONE wsp | em  8  8 |        |             |
  26:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  26:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  26:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  26:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  26:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  26:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  26:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  26:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  26:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  26:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  26:070 | DONE wsp | em  8  8 |        |             |
  26:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  26:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  26:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  26:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  26:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  26:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  26:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  26:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  26:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  26:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  26:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  26:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  26:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  26:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  26:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  26:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  26:087 | DONE wsp | em  8  8 |        |             |
  26:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  26:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  26:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  26:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  26:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  26:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  26:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  26:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  26:096 | DONE wsp | em  8  8 |        |             |
  26:097 | DONE wsp | em  8  8 |        |             |
  26:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  26:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  26:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting.
  26:101 | DONE cmt | em  8  8 |        |             | ; Note this does not reset the MPU, which is done by the main Forth code
  26:102 | DONE lbl | em  8  8 | 005000 |             | reset_hardware                       
  26:103 | DONE ins | em  8  8 | 005000 | 78          |                 sei                  
  26:104 | DONE ins | em  8  8 | 005001 | 18          |                 clc                  
  26:105 | DONE ins | em  8  8 | 005002 | fb          |                 xce                  
  26:106 | DONE ctl | na  8  8 |        |             |         .!native
  26:107 | DONE ins | na  8  8 | 005003 | c2 10       |                 rep 10               
  26:108 | DONE ctl | na  8 16 |        |             |         .!xy16
  26:109 | DONE ins | na  8 16 | 005005 | e2 20       |                 sep 20               
  26:110 | DONE ctl | na  8 16 |        |             |         .!a8
  26:111 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  26:112 | DONE ins | na  8 16 | 005007 | a2 ff 01    |                 ldx.# 01ff           
  26:113 | DONE ins | na  8 16 | 00500a | 9a          |                 txs                  
  26:114 | DONE wsp | na  8 16 |        |             |
  26:115 | DONE ins | na  8 16 | 00500b | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  26:116 | DONE wsp | na  8 16 |        |             |
  26:117 | DONE ins | na  8 16 | 00500e | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  26:118 | DONE ins | na  8 16 | 005010 | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  26:119 | DONE ins | na  8 16 | 005013 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  26:120 | DONE wsp | na  8 16 |        |             |
  26:121 | DONE ins | na  8 16 | 005016 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  26:122 | DONE ins | na  8 16 | 005018 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  26:123 | DONE ins | na  8 16 | 00501b | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  26:124 | DONE ins | na  8 16 | 00501d | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  26:125 | DONE ins | na  8 16 | 005020 | a9 00       |                 lda.# .msb 00000b    
  26:126 | DONE ins | na  8 16 | 005022 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  26:127 | DONE ins | na  8 16 | 005025 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  26:128 | DONE ins | na  8 16 | 005027 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  26:129 | DONE wsp | na  8 16 |        |             |
  26:130 | DONE ins | na  8 16 | 00502a | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  26:131 | DONE ins | na  8 16 | 00502c | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  26:132 | DONE wsp | na  8 16 |        |             |
  26:133 | DONE ins | na  8 16 | 00502f | c2 20       |                 rep 20               
  26:134 | DONE ctl | na 16 16 |        |             |         .!a16
  26:135 | DONE ins | na 16 16 | 005031 | 4c 64 50    |                 jmp 005064           we return with A as 8 bits
  26:136 | DONE wsp | na 16 16 |        |             |
  26:137 | DONE wsp | na 16 16 |        |             |
  26:138 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  26:139 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  26:140 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  26:141 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. This handles all the register size stuff, and does not need to be
  26:142 | DONE cmt | na 16 16 |        |             | ; called with a 8-bit Y register as TOS. This is only called directly by EMIT
  26:143 | DONE cmt | na 16 16 |        |             | ; through the OUTPUT variable. In Forth, this is refered to as UART0
  26:144 | DONE lbl | na 16 16 | 005034 |             | put_chr                              
  26:145 | DONE ins | na 16 16 | 005034 | e2 20       |                 sep 20               
  26:146 | DONE ctl | na  8 16 |        |             |         .!a8
  26:147 | DONE ins | na  8 16 | 005036 | 48          |                 pha                  
  26:148 | DONE ins | na  8 16 | 005037 | a9 02       |                 lda.# 02             (1<<1)
  26:149 | DONE wsp | na  8 16 |        |             |
  26:150 | DONE lbl | na  8 16 | 005039 |             | put_chr_wait                         
  26:151 | DONE ins | na  8 16 | 005039 | 2c 48 df    |                 bit 00df48           timer finished?
  26:152 | DONE ins | na  8 16 | 00503c | f0 fb       |                 beq 005039           
  26:153 | DONE wsp | na  8 16 |        |             |
  26:154 | DONE ins | na  8 16 | 00503e | 68          |                 pla                  
  26:155 | DONE ins | na  8 16 | 00503f | 8d 71 df    |                 sta 00df71           transmit char
  26:156 | DONE ins | na  8 16 | 005042 | c2 20       |                 rep 20               
  26:157 | DONE ctl | na 16 16 |        |             |         .!a16
  26:158 | DONE wsp | na 16 16 |        |             |
  26:159 | DONE ins | na 16 16 | 005044 | 60          |                 rts                  
  26:160 | DONE wsp | na 16 16 |        |             |
  26:161 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  26:162 | DONE cmt | na 16 16 |        |             | ; GET_CHR
  26:163 | DONE cmt | na 16 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  26:164 | DONE cmt | na 16 16 |        |             | ; if the buffer is empty. This is handled by KEY through the INPUT variable
  26:165 | DONE cmt | na 16 16 |        |             | ; Note the routine returns its value through A - getting it TOS is the caller's
  26:166 | DONE cmt | na 16 16 |        |             | ; problem
  26:167 | DONE lbl | na 16 16 | 005045 |             | get_chr                              
  26:168 | DONE ins | na 16 16 | 005045 | e2 20       |                 sep 20               
  26:169 | DONE ctl | na  8 16 |        |             |         .!a8
  26:170 | DONE ins | na  8 16 | 005047 | a9 01       |                 lda.# 01             (1<<0)
  26:171 | DONE wsp | na  8 16 |        |             |
  26:172 | DONE lbl | na  8 16 | 005049 |             | get_chr_wait                         
  26:173 | DONE ins | na  8 16 | 005049 | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  26:174 | DONE ins | na  8 16 | 00504c | f0 fb       |                 beq 005049           No, keep waiting
  26:175 | DONE ins | na  8 16 | 00504e | ad 71 df    |                 lda 00df71           Yes, read it
  26:176 | DONE ins | na  8 16 | 005051 | c2 20       |                 rep 20               
  26:177 | DONE ctl | na 16 16 |        |             |         .!a16
  26:178 | DONE ins | na 16 16 | 005053 | 29 ff 00    |                 and.# 00ff           paranoid
  26:179 | DONE wsp | na 16 16 |        |             |
  26:180 | DONE ins | na 16 16 | 005056 | 60          |                 rts                  
  26:181 | DONE wsp | na 16 16 |        |             |
  26:182 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  26:183 | DONE cmt | na 16 16 |        |             | ; HAVE_CHR
  26:184 | DONE cmt | na 16 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  26:185 | DONE cmt | na 16 16 |        |             | ; some. This should be handled by KEY? through the HAVEKEY variable
  26:186 | DONE lbl | na 16 16 | 005057 |             | have_chr                             
  26:187 | DONE ins | na 16 16 | 005057 | 18          |                 clc                  
  26:188 | DONE ins | na 16 16 | 005058 | e2 20       |                 sep 20               
  26:189 | DONE ctl | na  8 16 |        |             |         .!a8
  26:190 | DONE ins | na  8 16 | 00505a | ad 48 df    |                 lda 00df48           read the status register
  26:191 | DONE ins | na  8 16 | 00505d | 6a          |                 ror.a                shift hw_uart0r bit into carry
  26:192 | DONE ins | na  8 16 | 00505e | c2 20       |                 rep 20               
  26:193 | DONE ctl | na 16 16 |        |             |         .!a16
  26:194 | DONE wsp | na 16 16 |        |             |
  26:195 | DONE ins | na 16 16 | 005060 | 60          |                 rts                  
  26:196 | DONE wsp | na 16 16 |        |             |
  26:197 | DONE cmt | na 16 16 |        |             | ; END
  27:000 | DONE cmt | na 16 16 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE wsp | na 16 16 |        |             |
  30:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  31:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  34:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  35:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  36:000 | DONE wsp | na 16 16 |        |             |
  37:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  38:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  39:000 | DONE cmt | na 16 16 |        |             | ; Reset the Forth system. Use BYE to return to the Mensch Monitor.
  40:000 | DONE lbl | na 16 16 | 005061 |             | xt_cold                              
  41:000 | DONE wsp | na 16 16 |        |             |
  42:000 | DONE ins | na 16 16 | 005061 | 4c 00 50    |                 jmp 005000           don't use JSR, jump back to start
  43:000 | DONE lbl | na 16 16 | 005064 |             | start                                
  44:000 | DONE dir | na 16 16 |        |             |         .!native                     these should have been handled by hardware reset
  45:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  46:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  47:000 | DONE ins | na 16 16 | 005064 | 78          |                 sei                  
  48:000 | DONE wsp | na 16 16 |        |             |
  49:000 | DONE cmt | na 16 16 |        |             |                 ; Initialize the Return Stack (65816 stack)
  50:000 | DONE ins | na 16 16 | 005065 | a2 ff 01    |                 ldx.# 0001ff         01ff
  51:000 | DONE ins | na 16 16 | 005068 | 9a          |                 txs                  
  52:000 | DONE wsp | na 16 16 |        |             |
  53:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack. This is repeated in ABORT, but we have no
  54:000 | DONE cmt | na 16 16 |        |             |                 ; choice if we want to load high-level words via EVALUATE
  55:000 | DONE ins | na 16 16 | 005069 | a0 00 00    |                 ldy.# 0000           
  56:000 | DONE ins | na 16 16 | 00506c | a2 ff 00    |                 ldx.# 0000ff         
  57:000 | DONE wsp | na 16 16 |        |             |
  58:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  59:000 | DONE ins | na 16 16 | 00506f | a9 0a 00    |                 lda.# 000a           
  60:000 | DONE ins | na 16 16 | 005072 | 85 16       |                 sta.d 000016         
  61:000 | DONE wsp | na 16 16 |        |             |
  62:000 | DONE cmt | na 16 16 |        |             |                 ; We start out with smaller words with less than 20 bytes being
  63:000 | DONE cmt | na 16 16 |        |             |                 ; natively compiled, because this includes words like LSHIFT and MAX.
  64:000 | DONE ins | na 16 16 | 005074 | a9 14 00    |                 lda.# &0020          
  65:000 | DONE ins | na 16 16 | 005077 | 85 26       |                 sta.d 000026         
  66:000 | DONE wsp | na 16 16 |        |             |
  67:000 | DONE cmt | na 16 16 |        |             |                 ; set the OUTPUT vector to the default, which is always put_chr,
  68:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms
  69:000 | DONE ins | na 16 16 | 005079 | a9 34 50    |                 lda.# 005034         
  70:000 | DONE ins | na 16 16 | 00507c | 85 0e       |                 sta.d 00000e         
  71:000 | DONE wsp | na 16 16 |        |             |
  72:000 | DONE cmt | na 16 16 |        |             |                 ; set the INPUT vector to the default, which is always get_chr,
  73:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms
  74:000 | DONE ins | na 16 16 | 00507e | a9 45 50    |                 lda.# 005045         
  75:000 | DONE ins | na 16 16 | 005081 | 85 10       |                 sta.d 000010         
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; set the HAVE_KEY vector to the default, which is always
  78:000 | DONE cmt | na 16 16 |        |             |                 ; have_chr, but may have synonyms
  79:000 | DONE ins | na 16 16 | 005083 | a9 57 50    |                 lda.# 005057         
  80:000 | DONE ins | na 16 16 | 005086 | 85 12       |                 sta.d 000012         
  81:000 | DONE wsp | na 16 16 |        |             |
  82:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free byte
  83:000 | DONE cmt | na 16 16 |        |             |                 ; in the Dictionary
  84:000 | DONE ins | na 16 16 | 005088 | a9 00 03    |                 lda.# 000300         
  85:000 | DONE ins | na 16 16 | 00508b | 85 00       |                 sta.d 000000         
  86:000 | DONE wsp | na 16 16 |        |             |
  87:000 | DONE ins | na 16 16 | 00508d | a9 00 02    |                 lda.# 000200         
  88:000 | DONE ins | na 16 16 | 005090 | 85 08       |                 sta.d 000008         input buffer
  89:000 | DONE ins | na 16 16 | 005092 | 64 0a       |                 stz.d 00000a         input buffer starts empty
  90:000 | DONE ins | na 16 16 | 005094 | 64 06       |                 stz.d 000006         SOURCE-ID is zero
  91:000 | DONE ins | na 16 16 | 005096 | 64 14       |                 stz.d 000014         STATE is zero (interpret mode)
  92:000 | DONE wsp | na 16 16 |        |             |
  93:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  94:000 | DONE cmt | na 16 16 |        |             |                 ; new Dictionary, so we start off the Dictionary Pointer (DP)
  95:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  96:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  97:000 | DONE ins | na 16 16 | 005098 | a9 da 69    |                 lda.# 0069da         
  98:000 | DONE ins | na 16 16 | 00509b | 85 02       |                 sta.d 000002         
  99:000 | DONE wsp | na 16 16 |        |             |
 100:000 | DONE cmt | na 16 16 |        |             |                 ; Clear the screen, assumes vt100 terminal
 101:000 | DONE ins | na 16 16 | 00509d | 20 85 5c    |                 jsr 005c85           
 102:000 | DONE wsp | na 16 16 |        |             |
 103:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
 104:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
 105:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
 106:000 | DONE ins | na 16 16 | 0050a0 | ca          |                 dex                  
 107:000 | DONE ins | na 16 16 | 0050a1 | ca          |                 dex                  
 108:000 | DONE ins | na 16 16 | 0050a2 | ca          |                 dex                  
 109:000 | DONE ins | na 16 16 | 0050a3 | ca          |                 dex                  
 110:000 | DONE ins | na 16 16 | 0050a4 | a9 ef 6a    |                 lda.# 006aef         
 111:000 | DONE ins | na 16 16 | 0050a7 | 95 00       |                 sta.dx 00            Start address goes in NOS
 112:000 | DONE ins | na 16 16 | 0050a9 | a0 62 06    |                 ldy.# 000662         length goes in TOS
 113:000 | DONE wsp | na 16 16 |        |             |
 114:000 | DONE ins | na 16 16 | 0050ac | 20 36 59    |                 jsr 005936           
 115:000 | DONE wsp | na 16 16 |        |             |
 116:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
 117:000 | DONE wsp | na 16 16 |        |             |
 118:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 119:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
 120:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
 121:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 122:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 123:000 | DONE lbl | na 16 16 | 0050af |             | xt_abort                             
 124:000 | DONE ins | na 16 16 | 0050af | c2 20       |                 rep 20               
 124:001 | DONE ctl | na 16 16 |        |             |         .!a16
 125:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 126:000 | DONE ins | na 16 16 | 0050b1 | a0 00 00    |                 ldy.# 0000           
 127:000 | DONE ins | na 16 16 | 0050b4 | a2 ff 00    |                 ldx.# 0000ff         
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE wsp | na 16 16 |        |             |
 130:000 | DONE cmt | na 16 16 |        |             |                 ; drops through to QUIT, z_abort is the same as z_quit.
 131:000 | DONE wsp | na 16 16 |        |             |
 132:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 133:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 134:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 135:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 136:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 137:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output, this follows Gforth.
 138:000 | DONE lbl | na 16 16 | 0050b7 |             | xt_quit                              
 139:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 140:000 | DONE ins | na 16 16 | 0050b7 | a9 ff 01    |                 lda.# 0001ff         
 141:000 | DONE ins | na 16 16 | 0050ba | 1b          |                 tcs                  
 142:000 | DONE wsp | na 16 16 |        |             |
 143:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 144:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 145:000 | DONE ins | na 16 16 | 0050bb | 9c 65 59    |                 stz 005965           
 146:000 | DONE wsp | na 16 16 |        |             |
 147:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 148:000 | DONE ins | na 16 16 | 0050be | 64 06       |                 stz.d 000006         
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 151:000 | DONE ins | na 16 16 | 0050c0 | 64 14       |                 stz.d 000014         
 152:000 | DONE wsp | na 16 16 |        |             |
 153:000 | DONE lbl | na 16 16 | 0050c2 |             | quit_get_line                        
 154:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer
 155:000 | DONE ins | na 16 16 | 0050c2 | 64 0a       |                 stz.d 00000a         
 156:000 | DONE wsp | na 16 16 |        |             |
 157:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 158:000 | DONE ins | na 16 16 | 0050c4 | 20 76 5d    |                 jsr 005d76           ( -- f )
 159:000 | DONE wsp | na 16 16 |        |             |
 160:000 | DONE ins | na 16 16 | 0050c7 | 98          |                 tya                  force flag test
 161:000 | DONE ins | na 16 16 | 0050c8 | d0 06       |                 bne 0050d0           
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 164:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 165:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 166:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 167:000 | DONE ins | na 16 16 | 0050ca | a9 0b 72    |                 lda.# 00720b         
 168:000 | DONE ins | na 16 16 | 0050cd | 4c 9c 6a    |                 jmp 006a9c           
 169:000 | DONE wsp | na 16 16 |        |             |
 170:000 | DONE wsp | na 16 16 |        |             |
 171:000 | DONE lbl | na 16 16 | 0050d0 |             | quit_refill_successful               
 172:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 173:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address cib and length of input in ciblen. We
 174:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here still with the TRUE flag from REFILL as TOS (in Y)
 175:000 | DONE ins | na 16 16 | 0050d0 | b4 00       |                 ldy.dx 00            drop TOS
 176:000 | DONE ins | na 16 16 | 0050d2 | e8          |                 inx                  
 177:000 | DONE ins | na 16 16 | 0050d3 | e8          |                 inx                  
 178:000 | DONE wsp | na 16 16 |        |             |
 179:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 180:000 | DONE ins | na 16 16 | 0050d4 | 64 0c       |                 stz.d 00000c         
 181:000 | DONE wsp | na 16 16 |        |             |
 182:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine
 183:000 | DONE ins | na 16 16 | 0050d6 | 20 17 6a    |                 jsr 006a17           
 184:000 | DONE wsp | na 16 16 |        |             |
 185:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 186:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow
 187:000 | DONE ins | na 16 16 | 0050d9 | e0 00 01    |                 cpx.# 000100         
 188:000 | DONE ins | na 16 16 | 0050dc | 90 06       |                 bcc 0050e4           DSP must always be smaller (!) than DSP0
 189:000 | DONE wsp | na 16 16 |        |             |
 190:000 | DONE ins | na 16 16 | 0050de | a9 71 72    |                 lda.# 007271         
 191:000 | DONE ins | na 16 16 | 0050e1 | 4c 9c 6a    |                 jmp 006a9c           
 192:000 | DONE wsp | na 16 16 |        |             |
 193:000 | DONE lbl | na 16 16 | 0050e4 |             | quit_ok                              
 194:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 195:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 196:000 | DONE ins | na 16 16 | 0050e4 | a5 14       |                 lda.d 000014         
 197:000 | DONE ins | na 16 16 | 0050e6 | d0 05       |                 bne 0050ed           
 198:000 | DONE wsp | na 16 16 |        |             |
 199:000 | DONE ins | na 16 16 | 0050e8 | a9 51 71    |                 lda.# 007151         
 200:000 | DONE ins | na 16 16 | 0050eb | 80 03       |                 bra 0050f0           
 201:000 | DONE lbl | na 16 16 | 0050ed |             | quit_compiled                        
 202:000 | DONE ins | na 16 16 | 0050ed | a9 55 71    |                 lda.# 007155         fall through to quit_print
 203:000 | DONE lbl | na 16 16 | 0050f0 |             | quit_print                           
 204:000 | DONE ins | na 16 16 | 0050f0 | 20 a2 6a    |                 jsr 006aa2           
 205:000 | DONE wsp | na 16 16 |        |             |
 206:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody! Now get the next one
 207:000 | DONE ins | na 16 16 | 0050f3 | 4c c2 50    |                 jmp 0050c2           
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE lbl | na 16 16 | 0050f6 |             | z_cold                               
 210:000 | DONE lbl | na 16 16 | 0050f6 |             | z_abort                              
 211:000 | DONE lbl | na 16 16 | 0050f6 |             | z_quit                               ; empty, no RTS required
 212:000 | DONE wsp | na 16 16 |        |             |
 213:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 214:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 215:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 216:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 217:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 218:000 | DONE lbl | na 16 16 | 0050f6 |             | xt_less                              
 219:000 | DONE ins | na 16 16 | 0050f6 | 98          |                 tya                  
 220:000 | DONE ins | na 16 16 | 0050f7 | a0 00 00    |                 ldy.# 0000           default is false
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE ins | na 16 16 | 0050fa | 38          |                 sec                  
 223:000 | DONE ins | na 16 16 | 0050fb | f5 00       |                 sbc.dx 00            
 224:000 | DONE ins | na 16 16 | 0050fd | f0 08       |                 beq 005107           the same is not greater
 225:000 | DONE ins | na 16 16 | 0050ff | 50 03       |                 bvc 005104           no overflow, skip ahead
 226:000 | DONE wsp | na 16 16 |        |             |
 227:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 228:000 | DONE ins | na 16 16 | 005101 | 49 00 80    |                 eor.# 8000           compliment negative flag
 229:000 | DONE wsp | na 16 16 |        |             |
 230:000 | DONE lbl | na 16 16 | 005104 |             | less_no_ov                           
 231:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 232:000 | DONE ins | na 16 16 | 005104 | 30 01       |                 bmi 005107           
 233:000 | DONE ins | na 16 16 | 005106 | 88          |                 dey                  
 234:000 | DONE lbl | na 16 16 | 005107 |             | less_nip                             
 235:000 | DONE ins | na 16 16 | 005107 | e8          |                 inx                  
 236:000 | DONE ins | na 16 16 | 005108 | e8          |                 inx                  
 237:000 | DONE wsp | na 16 16 |        |             |
 238:000 | DONE lbl | na 16 16 | 005109 |             | z_less                               
 238:001 | DONE ins | na 16 16 | 005109 | 60          |                 rts                  
 239:000 | DONE wsp | na 16 16 |        |             |
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 242:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 243:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 244:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 245:000 | DONE lbl | na 16 16 | 00510a |             | xt_not-equal                         
 246:000 | DONE ins | na 16 16 | 00510a | 98          |                 tya                  
 247:000 | DONE ins | na 16 16 | 00510b | a0 00 00    |                 ldy.# 0000           default value is false
 248:000 | DONE wsp | na 16 16 |        |             |
 249:000 | DONE ins | na 16 16 | 00510e | d5 00       |                 cmp.dx 00            
 250:000 | DONE ins | na 16 16 | 005110 | f0 01       |                 beq 005113           
 251:000 | DONE ins | na 16 16 | 005112 | 88          |                 dey                  wraps to 0FFFF (true)
 252:000 | DONE wsp | na 16 16 |        |             |
 253:000 | DONE lbl | na 16 16 | 005113 |             | not-equal_equal                      ; yes, this is a silly name
 254:000 | DONE ins | na 16 16 | 005113 | e8          |                 inx                  
 255:000 | DONE ins | na 16 16 | 005114 | e8          |                 inx                  
 256:000 | DONE wsp | na 16 16 |        |             |
 257:000 | DONE lbl | na 16 16 | 005115 |             | z_not-equal                          
 257:001 | DONE ins | na 16 16 | 005115 | 60          |                 rts                  
 258:000 | DONE wsp | na 16 16 |        |             |
 259:000 | DONE wsp | na 16 16 |        |             |
 260:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 261:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 262:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 263:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 264:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 265:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 266:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 267:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 268:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 269:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 270:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 271:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 272:000 | DONE lbl | na 16 16 | 005116 |             | xt_lessnumber                        
 273:000 | DONE ins | na 16 16 | 005116 | 20 79 5c    |                 jsr 005c79           
 274:000 | DONE ins | na 16 16 | 005119 | 84 18       |                 sty.d 000018         
 275:000 | DONE wsp | na 16 16 |        |             |
 276:000 | DONE ins | na 16 16 | 00511b | b4 00       |                 ldy.dx 00            
 277:000 | DONE ins | na 16 16 | 00511d | e8          |                 inx                  
 278:000 | DONE ins | na 16 16 | 00511e | e8          |                 inx                  
 279:000 | DONE wsp | na 16 16 |        |             |
 280:000 | DONE lbl | na 16 16 | 00511f |             | z_lessnumber                         
 280:001 | DONE ins | na 16 16 | 00511f | 60          |                 rts                  
 281:000 | DONE wsp | na 16 16 |        |             |
 282:000 | DONE wsp | na 16 16 |        |             |
 283:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 284:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 285:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 286:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 287:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 288:000 | DONE lbl | na 16 16 | 005120 |             | xt_greater                           
 289:000 | DONE ins | na 16 16 | 005120 | 98          |                 tya                  
 290:000 | DONE ins | na 16 16 | 005121 | a0 00 00    |                 ldy.# 0000           default is false
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE ins | na 16 16 | 005124 | 38          |                 sec                  
 293:000 | DONE ins | na 16 16 | 005125 | f5 00       |                 sbc.dx 00            
 294:000 | DONE ins | na 16 16 | 005127 | f0 08       |                 beq 005131           the same is not greater
 295:000 | DONE ins | na 16 16 | 005129 | 50 03       |                 bvc 00512e           no overflow, skip ahead
 296:000 | DONE wsp | na 16 16 |        |             |
 297:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 298:000 | DONE ins | na 16 16 | 00512b | 49 00 80    |                 eor.# 8000           compliment negative flag
 299:000 | DONE wsp | na 16 16 |        |             |
 300:000 | DONE lbl | na 16 16 | 00512e |             | greater_no_ov                        
 301:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 302:000 | DONE ins | na 16 16 | 00512e | 10 01       |                 bpl 005131           
 303:000 | DONE ins | na 16 16 | 005130 | 88          |                 dey                  
 304:000 | DONE lbl | na 16 16 | 005131 |             | greater_nip                          
 305:000 | DONE ins | na 16 16 | 005131 | e8          |                 inx                  
 306:000 | DONE ins | na 16 16 | 005132 | e8          |                 inx                  
 307:000 | DONE wsp | na 16 16 |        |             |
 308:000 | DONE lbl | na 16 16 | 005133 |             | z_greater                            
 308:001 | DONE ins | na 16 16 | 005133 | 60          |                 rts                  
 309:000 | DONE wsp | na 16 16 |        |             |
 310:000 | DONE wsp | na 16 16 |        |             |
 311:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 312:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 313:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 314:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 315:000 | DONE cmt | na 16 16 |        |             | ; after CREATE. This is a difficult word for STC Forths, because most words
 316:000 | DONE cmt | na 16 16 |        |             | ; don't have a Code Field Area (CFA) to skip. We solve this by testing if the
 317:000 | DONE cmt | na 16 16 |        |             | ; first three bytes of the body (that starts at xt) are subroutine jumps to
 318:000 | DONE cmt | na 16 16 |        |             | ; DOVAR, DOCONST or DODOES
 319:000 | DONE lbl | na 16 16 | 005134 |             | xt_tobody                            
 320:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 321:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR
 322:000 | DONE ins | na 16 16 | 005134 | e2 20       |                 sep 20               
 322:001 | DONE ctl | na  8 16 |        |             |         .!a8
 323:000 | DONE ins | na  8 16 | 005136 | b9 00 00    |                 lda.y 0000           see if we have a JSR instruction
 324:000 | DONE ins | na  8 16 | 005139 | c9 20       |                 cmp.# 20             
 325:000 | DONE ins | na  8 16 | 00513b | c2 20       |                 rep 20               
 325:001 | DONE ctl | na 16 16 |        |             |         .!a16
 326:000 | DONE ins | na 16 16 | 00513d | d0 18       |                 bne 005157           
 327:000 | DONE wsp | na 16 16 |        |             |
 328:000 | DONE cmt | na 16 16 |        |             |                 ; Okay, so we found a JSR instruction. But is it one of the
 329:000 | DONE cmt | na 16 16 |        |             |                 ; right ones?
 330:000 | DONE ins | na 16 16 | 00513f | c8          |                 iny                  
 331:000 | DONE ins | na 16 16 | 005140 | b9 00 00    |                 lda.y 0000           
 332:000 | DONE wsp | na 16 16 |        |             |
 333:000 | DONE ins | na 16 16 | 005143 | c9 10 6a    |                 cmp.# 006a10         
 334:000 | DONE ins | na 16 16 | 005146 | f0 0d       |                 beq 005155           
 335:000 | DONE ins | na 16 16 | 005148 | c9 e6 69    |                 cmp.# 0069e6         
 336:000 | DONE ins | na 16 16 | 00514b | f0 08       |                 beq 005155           
 337:000 | DONE ins | na 16 16 | 00514d | c9 03 6a    |                 cmp.# 006a03         
 338:000 | DONE ins | na 16 16 | 005150 | f0 03       |                 beq 005155           
 339:000 | DONE wsp | na 16 16 |        |             |
 340:000 | DONE cmt | na 16 16 |        |             |                 ; This is some other jump, so we go back to beginning of word
 341:000 | DONE ins | na 16 16 | 005152 | 88          |                 dey                  restor original xt
 342:000 | DONE ins | na 16 16 | 005153 | 80 02       |                 bra 005157           
 343:000 | DONE wsp | na 16 16 |        |             |
 344:000 | DONE lbl | na 16 16 | 005155 |             | tobody_have_cfa                      
 345:000 | DONE cmt | na 16 16 |        |             |                 ; Got the right kind of jump. We've already increased the index
 346:000 | DONE cmt | na 16 16 |        |             |                 ; by one, so we just have to add two
 347:000 | DONE ins | na 16 16 | 005155 | c8          |                 iny                  
 348:000 | DONE ins | na 16 16 | 005156 | c8          |                 iny                  drops through to end
 349:000 | DONE wsp | na 16 16 |        |             |
 350:000 | DONE lbl | na 16 16 | 005157 |             | tobody_nojsr                         
 351:000 | DONE cmt | na 16 16 |        |             |                 ; If we don't have a jump instruction, the xt already points to
 352:000 | DONE cmt | na 16 16 |        |             |                 ; the PFA, because there is no CFA
 353:000 | DONE cmt | na 16 16 |        |             |                 ; body
 354:000 | DONE wsp | na 16 16 |        |             |
 355:000 | DONE lbl | na 16 16 | 005157 |             | z_tobody                             
 355:001 | DONE ins | na 16 16 | 005157 | 60          |                 rts                  
 356:000 | DONE wsp | na 16 16 |        |             |
 357:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 358:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 359:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 360:000 | DONE lbl | na 16 16 | 005158 |             | xt_to-in                             
 361:000 | DONE ins | na 16 16 | 005158 | ca          |                 dex                  
 362:000 | DONE ins | na 16 16 | 005159 | ca          |                 dex                  
 363:000 | DONE ins | na 16 16 | 00515a | 94 00       |                 sty.dx 00            
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE ins | na 16 16 | 00515c | a0 0c 00    |                 ldy.# 00000c         >IN
 366:000 | DONE lbl | na 16 16 | 00515f |             | z_to-in                              
 366:001 | DONE ins | na 16 16 | 00515f | 60          |                 rts                  
 367:000 | DONE wsp | na 16 16 |        |             |
 368:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 369:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 370:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 371:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 372:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the original
 373:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 374:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 375:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 376:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 377:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 378:000 | DONE lbl | na 16 16 | 005160 |             | xt_tonumber                          
 379:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 380:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 381:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 382:000 | DONE cmt | na 16 16 |        |             |                 ;
 383:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 384:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 385:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 386:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 387:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 388:000 | DONE wsp | na 16 16 |        |             |
 389:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 390:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 391:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 392:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 393:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 394:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 395:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 396:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 397:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 398:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 399:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 400:000 | DONE wsp | na 16 16 |        |             |
 401:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 402:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 403:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 404:000 | DONE ins | na 16 16 | 005160 | b5 04       |                 lda.dx 04            ud-lo
 405:000 | DONE ins | na 16 16 | 005162 | 85 28       |                 sta.d 000028         
 406:000 | DONE ins | na 16 16 | 005164 | b5 02       |                 lda.dx 02            ud-hi
 407:000 | DONE ins | na 16 16 | 005166 | 85 2a       |                 sta.d 00002a         
 408:000 | DONE wsp | na 16 16 |        |             |
 409:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 410:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 411:000 | DONE ins | na 16 16 | 005168 | ca          |                 dex                  
 412:000 | DONE ins | na 16 16 | 005169 | ca          |                 dex                  
 413:000 | DONE ins | na 16 16 | 00516a | 94 00       |                 sty.dx 00            
 414:000 | DONE wsp | na 16 16 |        |             |
 415:000 | DONE lbl | na 16 16 | 00516c |             | tonumber_loop                        
 416:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 417:000 | DONE ins | na 16 16 | 00516c | a1 02       |                 lda.dxi 02           
 418:000 | DONE ins | na 16 16 | 00516e | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 419:000 | DONE wsp | na 16 16 |        |             |
 420:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 421:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 422:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 423:000 | DONE ins | na 16 16 | 00516f | 20 ed 57    |                 jsr 0057ed           ( char -- n -1 | char 0 )
 424:000 | DONE wsp | na 16 16 |        |             |
 425:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 426:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 427:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 428:000 | DONE ins | na 16 16 | 005172 | 98          |                 tya                  
 429:000 | DONE ins | na 16 16 | 005173 | d0 06       |                 bne 00517b           
 430:000 | DONE wsp | na 16 16 |        |             |
 431:000 | DONE ins | na 16 16 | 005175 | b4 00       |                 ldy.dx 00            
 432:000 | DONE ins | na 16 16 | 005177 | e8          |                 inx                  
 433:000 | DONE ins | na 16 16 | 005178 | e8          |                 inx                  
 434:000 | DONE ins | na 16 16 | 005179 | 80 35       |                 bra 0051b0           
 435:000 | DONE wsp | na 16 16 |        |             |
 436:000 | DONE lbl | na 16 16 | 00517b |             | tonumber_ok                          
 437:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 438:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 439:000 | DONE wsp | na 16 16 |        |             |
 440:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 441:000 | DONE ins | na 16 16 | 00517b | b5 00       |                 lda.dx 00            
 442:000 | DONE ins | na 16 16 | 00517d | 85 2c       |                 sta.d 00002c         
 443:000 | DONE wsp | na 16 16 |        |             |
 444:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 445:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 446:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 447:000 | DONE ins | na 16 16 | 00517f | a5 2a       |                 lda.d 00002a         
 448:000 | DONE ins | na 16 16 | 005181 | 95 00       |                 sta.dx 00            
 449:000 | DONE ins | na 16 16 | 005183 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-hi base )
 450:000 | DONE wsp | na 16 16 |        |             |
 451:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 452:000 | DONE ins | na 16 16 | 005185 | 20 71 5f    |                 jsr 005f71           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 453:000 | DONE wsp | na 16 16 |        |             |
 454:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 455:000 | DONE ins | na 16 16 | 005188 | b5 00       |                 lda.dx 00            ud-hi-lo
 456:000 | DONE ins | na 16 16 | 00518a | 85 2e       |                 sta.d 00002e         
 457:000 | DONE wsp | na 16 16 |        |             |
 458:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 459:000 | DONE ins | na 16 16 | 00518c | a5 28       |                 lda.d 000028         
 460:000 | DONE ins | na 16 16 | 00518e | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 461:000 | DONE ins | na 16 16 | 005190 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-lo base )
 462:000 | DONE wsp | na 16 16 |        |             |
 463:000 | DONE ins | na 16 16 | 005192 | 20 71 5f    |                 jsr 005f71           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 464:000 | DONE ins | na 16 16 | 005195 | 84 2a       |                 sty.d 00002a         
 465:000 | DONE ins | na 16 16 | 005197 | b5 00       |                 lda.dx 00            
 466:000 | DONE ins | na 16 16 | 005199 | 85 28       |                 sta.d 000028         
 467:000 | DONE wsp | na 16 16 |        |             |
 468:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 469:000 | DONE ins | na 16 16 | 00519b | a5 28       |                 lda.d 000028         
 470:000 | DONE ins | na 16 16 | 00519d | 18          |                 clc                  
 471:000 | DONE ins | na 16 16 | 00519e | 65 2c       |                 adc.d 00002c         
 472:000 | DONE ins | na 16 16 | 0051a0 | 85 28       |                 sta.d 000028         this is the new ud-lo
 473:000 | DONE ins | na 16 16 | 0051a2 | a5 2a       |                 lda.d 00002a         
 474:000 | DONE ins | na 16 16 | 0051a4 | 65 2e       |                 adc.d 00002e         
 475:000 | DONE ins | na 16 16 | 0051a6 | 85 2a       |                 sta.d 00002a         this is the new ud-hi
 476:000 | DONE wsp | na 16 16 |        |             |
 477:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 478:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 479:000 | DONE ins | na 16 16 | 0051a8 | e8          |                 inx                  
 480:000 | DONE ins | na 16 16 | 0051a9 | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 481:000 | DONE wsp | na 16 16 |        |             |
 482:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 483:000 | DONE ins | na 16 16 | 0051aa | f6 02       |                 inc.dx 02            increase address
 484:000 | DONE ins | na 16 16 | 0051ac | d6 00       |                 dec.dx 00            decrease length
 485:000 | DONE wsp | na 16 16 |        |             |
 486:000 | DONE ins | na 16 16 | 0051ae | d0 bc       |                 bne 00516c           
 487:000 | DONE wsp | na 16 16 |        |             |
 488:000 | DONE lbl | na 16 16 | 0051b0 |             | tonumber_done                        
 489:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 490:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 491:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 492:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 493:000 | DONE ins | na 16 16 | 0051b0 | b4 00       |                 ldy.dx 00            
 494:000 | DONE ins | na 16 16 | 0051b2 | e8          |                 inx                  
 495:000 | DONE ins | na 16 16 | 0051b3 | e8          |                 inx                  ( ud-lo ud-hi addr u )
 496:000 | DONE wsp | na 16 16 |        |             |
 497:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 498:000 | DONE ins | na 16 16 | 0051b4 | a5 28       |                 lda.d 000028         new ud-lo
 499:000 | DONE ins | na 16 16 | 0051b6 | 95 04       |                 sta.dx 04            
 500:000 | DONE ins | na 16 16 | 0051b8 | a5 2a       |                 lda.d 00002a         
 501:000 | DONE ins | na 16 16 | 0051ba | 95 02       |                 sta.dx 02            new ud-hi
 502:000 | DONE wsp | na 16 16 |        |             |
 503:000 | DONE lbl | na 16 16 | 0051bc |             | z_tonumber                           
 503:001 | DONE ins | na 16 16 | 0051bc | 60          |                 rts                  
 504:000 | DONE wsp | na 16 16 |        |             |
 505:000 | DONE wsp | na 16 16 |        |             |
 506:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 507:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 508:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 509:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 510:000 | DONE lbl | na 16 16 | 0051bd |             | xt_tor                               
 511:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 512:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 513:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 514:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 515:000 | DONE ins | na 16 16 | 0051bd | 68          |                 pla                  
 516:000 | DONE cmt | na 16 16 |        |             |                 ; --- cut for native coding ---
 517:000 | DONE wsp | na 16 16 |        |             |
 518:000 | DONE ins | na 16 16 | 0051be | 5a          |                 phy                  the actual work
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE ins | na 16 16 | 0051bf | b4 00       |                 ldy.dx 00            DROP
 521:000 | DONE ins | na 16 16 | 0051c1 | e8          |                 inx                  
 522:000 | DONE ins | na 16 16 | 0051c2 | e8          |                 inx                  
 523:000 | DONE wsp | na 16 16 |        |             |
 524:000 | DONE cmt | na 16 16 |        |             |                 ; --- cut for native coding ---
 525:000 | DONE ins | na 16 16 | 0051c3 | 48          |                 pha                  put return address back in place
 526:000 | DONE wsp | na 16 16 |        |             |
 527:000 | DONE lbl | na 16 16 | 0051c4 |             | z_tor                                
 527:001 | DONE ins | na 16 16 | 0051c4 | 60          |                 rts                  
 528:000 | DONE wsp | na 16 16 |        |             |
 529:000 | DONE wsp | na 16 16 |        |             |
 530:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 531:000 | DONE cmt | na 16 16 |        |             | ; /STRING ( addr u n -- ) X bytes / X cycles
 532:000 | DONE cmt | na 16 16 |        |             | ; Remove characters from front of string. Uses tmp1
 533:000 | DONE cmt | na 16 16 |        |             | ; Forth version: ROT OVER + ROT ROT - ;
 534:000 | DONE cmt | na 16 16 |        |             | ; TODO check for negative strings so 1 /STRING TYPE won't try to print the whole
 535:000 | DONE cmt | na 16 16 |        |             | ; address space; follow Gforth in failing gracefully
 536:000 | DONE lbl | na 16 16 | 0051c5 |             | xt_slashstring                       
 537:000 | DONE ins | na 16 16 | 0051c5 | 84 1c       |                 sty.d 00001c         
 538:000 | DONE wsp | na 16 16 |        |             |
 539:000 | DONE ins | na 16 16 | 0051c7 | b5 00       |                 lda.dx 00            length
 540:000 | DONE ins | na 16 16 | 0051c9 | 38          |                 sec                  
 541:000 | DONE ins | na 16 16 | 0051ca | e5 1c       |                 sbc.d 00001c         
 542:000 | DONE ins | na 16 16 | 0051cc | a8          |                 tay                  
 543:000 | DONE wsp | na 16 16 |        |             |
 544:000 | DONE ins | na 16 16 | 0051cd | b5 02       |                 lda.dx 02            address
 545:000 | DONE ins | na 16 16 | 0051cf | 18          |                 clc                  
 546:000 | DONE ins | na 16 16 | 0051d0 | 65 1c       |                 adc.d 00001c         
 547:000 | DONE ins | na 16 16 | 0051d2 | 95 02       |                 sta.dx 02            
 548:000 | DONE wsp | na 16 16 |        |             |
 549:000 | DONE ins | na 16 16 | 0051d4 | e8          |                 inx                  
 550:000 | DONE ins | na 16 16 | 0051d5 | e8          |                 inx                  
 551:000 | DONE wsp | na 16 16 |        |             |
 552:000 | DONE lbl | na 16 16 | 0051d6 |             | z_slashstring                        
 552:001 | DONE ins | na 16 16 | 0051d6 | 60          |                 rts                  
 553:000 | DONE wsp | na 16 16 |        |             |
 554:000 | DONE wsp | na 16 16 |        |             |
 555:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 556:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 557:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 558:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE   Based on
 559:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth Since this is
 560:000 | DONE cmt | na 16 16 |        |             | ; used interactively, and humans are slow (just ask GlaDOS), we focus on size.
 561:000 | DONE lbl | na 16 16 | 0051d7 |             | xt_dot                               
 562:000 | DONE ins | na 16 16 | 0051d7 | 20 06 59    |                 jsr 005906           ( n n )
 563:000 | DONE ins | na 16 16 | 0051da | 20 b1 54    |                 jsr 0054b1           ( n n )
 564:000 | DONE ins | na 16 16 | 0051dd | 20 98 53    |                 jsr 005398           ( n n 0 )
 565:000 | DONE ins | na 16 16 | 0051e0 | 20 16 51    |                 jsr 005116           ( n n 0 )
 566:000 | DONE ins | na 16 16 | 0051e3 | 20 b3 52    |                 jsr 0052b3           ( n ud )
 567:000 | DONE ins | na 16 16 | 0051e6 | 20 a0 5d    |                 jsr 005da0           ( ud n )
 568:000 | DONE ins | na 16 16 | 0051e9 | 20 03 5e    |                 jsr 005e03           ( ud )
 569:000 | DONE ins | na 16 16 | 0051ec | 20 a4 52    |                 jsr 0052a4           
 570:000 | DONE ins | na 16 16 | 0051ef | 20 2a 5f    |                 jsr 005f2a           
 571:000 | DONE ins | na 16 16 | 0051f2 | 20 e2 5e    |                 jsr 005ee2           
 572:000 | DONE wsp | na 16 16 |        |             |
 573:000 | DONE lbl | na 16 16 | 0051f5 |             | z_dot                                
 573:001 | DONE ins | na 16 16 | 0051f5 | 60          |                 rts                  
 574:000 | DONE wsp | na 16 16 |        |             |
 575:000 | DONE wsp | na 16 16 |        |             |
 576:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 577:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 578:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 579:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 580:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 581:000 | DONE lbl | na 16 16 | 0051f6 |             | xt_dotquote                          
 582:000 | DONE ins | na 16 16 | 0051f6 | ca          |                 dex                  
 583:000 | DONE ins | na 16 16 | 0051f7 | ca          |                 dex                  
 584:000 | DONE ins | na 16 16 | 0051f8 | 94 00       |                 sty.dx 00            
 585:000 | DONE ins | na 16 16 | 0051fa | a0 22 00    |                 ldy.# 0022           ASCII for "
 586:000 | DONE wsp | na 16 16 |        |             |
 587:000 | DONE ins | na 16 16 | 0051fd | 20 c6 5c    |                 jsr 005cc6           
 588:000 | DONE ins | na 16 16 | 005200 | 20 13 5e    |                 jsr 005e13           
 589:000 | DONE wsp | na 16 16 |        |             |
 590:000 | DONE ins | na 16 16 | 005203 | f4 2a 5f    |                 phe.# 005f2a         
 591:000 | DONE ins | na 16 16 | 005206 | 20 7b 6a    |                 jsr 006a7b           don't JSR/RTS
 592:000 | DONE wsp | na 16 16 |        |             |
 593:000 | DONE lbl | na 16 16 | 005209 |             | z_dotquote                           
 593:001 | DONE ins | na 16 16 | 005209 | 60          |                 rts                  
 594:000 | DONE wsp | na 16 16 |        |             |
 595:000 | DONE wsp | na 16 16 |        |             |
 596:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 597:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 598:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 599:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 600:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 601:000 | DONE cmt | na 16 16 |        |             | ; content (if present). Uses tmp3
 602:000 | DONE lbl | na 16 16 | 00520a |             | xt_dots                              
 603:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 604:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 605:000 | DONE ins | na 16 16 | 00520a | 20 62 58    |                 jsr 005862           ( -- u)
 606:000 | DONE wsp | na 16 16 |        |             |
 607:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 608:000 | DONE ins | na 16 16 | 00520d | a9 3c 00    |                 lda.# 3c             
 609:000 | DONE ins | na 16 16 | 005210 | 20 10 59    |                 jsr 005910           
 610:000 | DONE wsp | na 16 16 |        |             |
 611:000 | DONE cmt | na 16 16 |        |             |                 ; We keep a copy of the number of things on the stack to use as
 612:000 | DONE cmt | na 16 16 |        |             |                 ; a counter further down
 613:000 | DONE ins | na 16 16 | 005213 | ca          |                 dex                  DUP
 614:000 | DONE ins | na 16 16 | 005214 | ca          |                 dex                  
 615:000 | DONE ins | na 16 16 | 005215 | 94 00       |                 sty.dx 00            
 616:000 | DONE wsp | na 16 16 |        |             |
 617:000 | DONE ins | na 16 16 | 005217 | 20 ba 6a    |                 jsr 006aba           print unsigned number
 618:000 | DONE wsp | na 16 16 |        |             |
 619:000 | DONE ins | na 16 16 | 00521a | a9 3e 00    |                 lda.# 3e             
 620:000 | DONE ins | na 16 16 | 00521d | 20 10 59    |                 jsr 005910           
 621:000 | DONE ins | na 16 16 | 005220 | 20 e2 5e    |                 jsr 005ee2           
 622:000 | DONE wsp | na 16 16 |        |             |
 623:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 624:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 625:000 | DONE ins | na 16 16 | 005223 | 98          |                 tya                  force flag test
 626:000 | DONE ins | na 16 16 | 005224 | f0 18       |                 beq 00523e           
 627:000 | DONE wsp | na 16 16 |        |             |
 628:000 | DONE lbl | na 16 16 | 005226 |             | dots_not_empty                       
 629:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 630:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. The
 631:000 | DONE cmt | na 16 16 |        |             |                 ; depth of the Data Stack is in Y waiting to be used as
 632:000 | DONE cmt | na 16 16 |        |             |                 ; a counter. We use this to our advantage.
 633:000 | DONE ins | na 16 16 | 005226 | a9 fb 00    |                 lda.# 0000fb         skip two garbage entries on stack
 634:000 | DONE ins | na 16 16 | 005229 | 85 20       |                 sta.d 000020         use as pointer
 635:000 | DONE wsp | na 16 16 |        |             |
 636:000 | DONE lbl | na 16 16 | 00522b |             | dots_loop                            
 637:000 | DONE ins | na 16 16 | 00522b | b2 20       |                 lda.di 000020        LDA (TMP1)
 638:000 | DONE ins | na 16 16 | 00522d | 5a          |                 phy                  save our counter
 639:000 | DONE ins | na 16 16 | 00522e | a8          |                 tay                  
 640:000 | DONE ins | na 16 16 | 00522f | 20 d7 51    |                 jsr 0051d7           print one number, drops TOS
 641:000 | DONE wsp | na 16 16 |        |             |
 642:000 | DONE ins | na 16 16 | 005232 | ca          |                 dex                  restore counter
 643:000 | DONE ins | na 16 16 | 005233 | ca          |                 dex                  
 644:000 | DONE ins | na 16 16 | 005234 | 94 00       |                 sty.dx 00            
 645:000 | DONE ins | na 16 16 | 005236 | 7a          |                 ply                  
 646:000 | DONE wsp | na 16 16 |        |             |
 647:000 | DONE ins | na 16 16 | 005237 | c6 20       |                 dec.d 000020         next stack entry
 648:000 | DONE ins | na 16 16 | 005239 | c6 20       |                 dec.d 000020         
 649:000 | DONE wsp | na 16 16 |        |             |
 650:000 | DONE ins | na 16 16 | 00523b | 88          |                 dey                  
 651:000 | DONE ins | na 16 16 | 00523c | d0 ed       |                 bne 00522b           
 652:000 | DONE wsp | na 16 16 |        |             |
 653:000 | DONE lbl | na 16 16 | 00523e |             | dots_done                            
 654:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 655:000 | DONE ins | na 16 16 | 00523e | 20 e3 58    |                 jsr 0058e3           
 656:000 | DONE wsp | na 16 16 |        |             |
 657:000 | DONE lbl | na 16 16 | 005241 |             | z_dots                               
 657:001 | DONE ins | na 16 16 | 005241 | 60          |                 rts                  
 658:000 | DONE wsp | na 16 16 |        |             |
 659:000 | DONE wsp | na 16 16 |        |             |
 660:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 661:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 662:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 663:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 664:000 | DONE cmt | na 16 16 |        |             | ; aligned
 665:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 666:000 | DONE cmt | na 16 16 |        |             | ;               tya
 667:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 668:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 669:000 | DONE cmt | na 16 16 |        |             | ;               iny
 670:000 | DONE cmt | na 16 16 |        |             | ;               iny
 671:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 672:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 673:000 | DONE cmt | na 16 16 |        |             | ;               inx
 674:000 | DONE cmt | na 16 16 |        |             | ;               inx
 675:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 676:000 | DONE lbl | na 16 16 | 005242 |             | xt_comma                             
 677:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 678:000 | DONE ins | na 16 16 | 005242 | 98          |                 tya                  
 679:000 | DONE ins | na 16 16 | 005243 | 92 00       |                 sta.di 000000        STA (CP)
 680:000 | DONE ins | na 16 16 | 005245 | e6 00       |                 inc.d 000000         
 681:000 | DONE ins | na 16 16 | 005247 | e6 00       |                 inc.d 000000         
 682:000 | DONE wsp | na 16 16 |        |             |
 683:000 | DONE ins | na 16 16 | 005249 | b4 00       |                 ldy.dx 00            
 684:000 | DONE ins | na 16 16 | 00524b | e8          |                 inx                  
 685:000 | DONE ins | na 16 16 | 00524c | e8          |                 inx                  
 686:000 | DONE wsp | na 16 16 |        |             |
 687:000 | DONE lbl | na 16 16 | 00524d |             | z_comma                              
 687:001 | DONE ins | na 16 16 | 00524d | 60          |                 rts                  
 688:000 | DONE wsp | na 16 16 |        |             |
 689:000 | DONE wsp | na 16 16 |        |             |
 690:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 691:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 692:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 693:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 694:000 | DONE lbl | na 16 16 | 00524e |             | xt_colon                             
 695:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 696:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 697:000 | DONE ins | na 16 16 | 00524e | a5 14       |                 lda.d 000014         
 698:000 | DONE ins | na 16 16 | 005250 | f0 06       |                 beq 005258           
 699:000 | DONE wsp | na 16 16 |        |             |
 700:000 | DONE ins | na 16 16 | 005252 | a9 59 72    |                 lda.# 007259         
 701:000 | DONE ins | na 16 16 | 005255 | 4c 9c 6a    |                 jmp 006a9c           
 702:000 | DONE lbl | na 16 16 | 005258 |             | @                                    
 703:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 704:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 705:000 | DONE ins | na 16 16 | 005258 | e6 14       |                 inc.d 000014         
 706:000 | DONE wsp | na 16 16 |        |             |
 707:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 708:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 709:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 710:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 711:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 712:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 713:000 | DONE ins | na 16 16 | 00525a | a5 02       |                 lda.d 000002         
 714:000 | DONE ins | na 16 16 | 00525c | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 715:000 | DONE wsp | na 16 16 |        |             |
 716:000 | DONE ins | na 16 16 | 00525d | 20 62 57    |                 jsr 005762           
 717:000 | DONE wsp | na 16 16 |        |             |
 718:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt (not the xt!) of the new word as described above.
 719:000 | DONE cmt | na 16 16 |        |             |                 ; Only COLON, SEMICOLON and RECURSE access WORKWORD
 720:000 | DONE ins | na 16 16 | 005260 | a5 02       |                 lda.d 000002         
 721:000 | DONE ins | na 16 16 | 005262 | 85 04       |                 sta.d 000004         
 722:000 | DONE ins | na 16 16 | 005264 | 68          |                 pla                  
 723:000 | DONE ins | na 16 16 | 005265 | 85 02       |                 sta.d 000002         
 724:000 | DONE wsp | na 16 16 |        |             |
 725:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 726:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 727:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 728:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 729:000 | DONE ins | na 16 16 | 005267 | a5 00       |                 lda.d 000000         
 730:000 | DONE ins | na 16 16 | 005269 | 38          |                 sec                  
 731:000 | DONE ins | na 16 16 | 00526a | e9 03 00    |                 sbc.# 0003           
 732:000 | DONE ins | na 16 16 | 00526d | 85 00       |                 sta.d 000000         
 733:000 | DONE wsp | na 16 16 |        |             |
 734:000 | DONE lbl | na 16 16 | 00526f |             | z_colon                              
 734:001 | DONE ins | na 16 16 | 00526f | 60          |                 rts                  
 735:000 | DONE wsp | na 16 16 |        |             |
 736:000 | DONE wsp | na 16 16 |        |             |
 737:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 738:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 739:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 740:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 741:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 742:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 743:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 744:000 | DONE lbl | na 16 16 | 005270 |             | xt_semicolon                         
 745:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 746:000 | DONE ins | na 16 16 | 005270 | 84 24       |                 sty.d 000024         
 747:000 | DONE wsp | na 16 16 |        |             |
 748:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 749:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 750:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 751:000 | DONE ins | na 16 16 | 005272 | a0 06 00    |                 ldy.# 0006           
 752:000 | DONE ins | na 16 16 | 005275 | a5 00       |                 lda.d 000000         
 753:000 | DONE ins | na 16 16 | 005277 | 91 04       |                 sta.diy 000004       STA (WORKWORD),Y
 754:000 | DONE wsp | na 16 16 |        |             |
 755:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 756:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 757:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 758:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 759:000 | DONE ins | na 16 16 | 005279 | a9 60 00    |                 lda.# 60             opcode for RTS
 760:000 | DONE ins | na 16 16 | 00527c | 92 00       |                 sta.di 000000        STA (CP)
 761:000 | DONE ins | na 16 16 | 00527e | e6 00       |                 inc.d 000000         MSB will be overwritten
 762:000 | DONE wsp | na 16 16 |        |             |
 763:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 764:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 765:000 | DONE ins | na 16 16 | 005280 | a5 04       |                 lda.d 000004         
 766:000 | DONE ins | na 16 16 | 005282 | 85 02       |                 sta.d 000002         
 767:000 | DONE wsp | na 16 16 |        |             |
 768:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 769:000 | DONE ins | na 16 16 | 005284 | a4 24       |                 ldy.d 000024         
 770:000 | DONE wsp | na 16 16 |        |             |
 771:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 772:000 | DONE ins | na 16 16 | 005286 | 64 14       |                 stz.d 000014         
 773:000 | DONE wsp | na 16 16 |        |             |
 774:000 | DONE lbl | na 16 16 | 005288 |             | z_semicolon                          
 774:001 | DONE ins | na 16 16 | 005288 | 60          |                 rts                  
 775:000 | DONE wsp | na 16 16 |        |             |
 776:000 | DONE wsp | na 16 16 |        |             |
 777:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 778:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 779:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 780:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 781:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 782:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 783:000 | DONE lbl | na 16 16 | 005289 |             | xt_hash                              
 784:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 785:000 | DONE ins | na 16 16 | 005289 | 20 bb 55    |                 jsr 0055bb           ( ud addr )
 786:000 | DONE ins | na 16 16 | 00528c | 20 d7 52    |                 jsr 0052d7           ( ud u )
 787:000 | DONE ins | na 16 16 | 00528f | 20 55 5f    |                 jsr 005f55           ( rem ud )
 788:000 | DONE ins | na 16 16 | 005292 | 20 a0 5d    |                 jsr 005da0           ( ud rem )
 789:000 | DONE wsp | na 16 16 |        |             |
 790:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 791:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed. Use either abc_str_lower for
 792:000 | DONE cmt | na 16 16 |        |             |                 ; lower case or abc_str_upper for upper case (prefered)
 793:000 | DONE ins | na 16 16 | 005295 | e2 20       |                 sep 20               
 793:001 | DONE ctl | na  8 16 |        |             |         .!a8
 794:000 | DONE ins | na  8 16 | 005297 | b9 de 72    |                 lda.y 0072de         
 795:000 | DONE ins | na  8 16 | 00529a | c2 20       |                 rep 20               
 795:001 | DONE ctl | na 16 16 |        |             |         .!a16
 796:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 797:000 | DONE ins | na 16 16 | 00529c | 29 ff 00    |                 and.# 00ff           
 798:000 | DONE ins | na 16 16 | 00529f | a8          |                 tay                  ( ud char )
 799:000 | DONE wsp | na 16 16 |        |             |
 800:000 | DONE ins | na 16 16 | 0052a0 | 20 bf 5a    |                 jsr 005abf           
 801:000 | DONE wsp | na 16 16 |        |             |
 802:000 | DONE lbl | na 16 16 | 0052a3 |             | z_hash                               
 802:001 | DONE ins | na 16 16 | 0052a3 | 60          |                 rts                  
 803:000 | DONE wsp | na 16 16 |        |             |
 804:000 | DONE wsp | na 16 16 |        |             |
 805:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 806:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 807:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 808:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 809:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 810:000 | DONE lbl | na 16 16 | 0052a4 |             | xt_numbermore                        
 811:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 812:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 813:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 814:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 815:000 | DONE ins | na 16 16 | 0052a4 | a4 18       |                 ldy.d 000018         
 816:000 | DONE ins | na 16 16 | 0052a6 | 94 00       |                 sty.dx 00            ( addr addr )
 817:000 | DONE wsp | na 16 16 |        |             |
 818:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 819:000 | DONE ins | na 16 16 | 0052a8 | 20 79 5c    |                 jsr 005c79           ( addr addr pad )
 820:000 | DONE wsp | na 16 16 |        |             |
 821:000 | DONE ins | na 16 16 | 0052ab | 38          |                 sec                  
 822:000 | DONE ins | na 16 16 | 0052ac | 98          |                 tya                  
 823:000 | DONE ins | na 16 16 | 0052ad | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 824:000 | DONE ins | na 16 16 | 0052af | a8          |                 tay                  ( addr addr n )
 825:000 | DONE wsp | na 16 16 |        |             |
 826:000 | DONE ins | na 16 16 | 0052b0 | e8          |                 inx                  NIP
 827:000 | DONE ins | na 16 16 | 0052b1 | e8          |                 inx                  
 828:000 | DONE wsp | na 16 16 |        |             |
 829:000 | DONE lbl | na 16 16 | 0052b2 |             | z_numbermore                         
 829:001 | DONE ins | na 16 16 | 0052b2 | 60          |                 rts                  
 830:000 | DONE wsp | na 16 16 |        |             |
 831:000 | DONE wsp | na 16 16 |        |             |
 832:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 833:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 834:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 835:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 836:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 837:000 | DONE lbl | na 16 16 | 0052b3 |             | xt_hashs                             
 838:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 839:000 | DONE lbl | na 16 16 | 0052b3 |             | hashs_loop                           
 840:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 841:000 | DONE ins | na 16 16 | 0052b3 | 20 89 52    |                 jsr 005289           ( ud -- ud )
 842:000 | DONE wsp | na 16 16 |        |             |
 843:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 844:000 | DONE ins | na 16 16 | 0052b6 | 98          |                 tya                  
 845:000 | DONE ins | na 16 16 | 0052b7 | 15 00       |                 ora.dx 00            
 846:000 | DONE ins | na 16 16 | 0052b9 | d0 f8       |                 bne 0052b3           
 847:000 | DONE wsp | na 16 16 |        |             |
 848:000 | DONE lbl | na 16 16 | 0052bb |             | z_hashs                              
 848:001 | DONE ins | na 16 16 | 0052bb | 60          |                 rts                  
 849:000 | DONE wsp | na 16 16 |        |             |
 850:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 851:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 852:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 853:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 854:000 | DONE lbl | na 16 16 | 0052bc |             | xt_question                          
 855:000 | DONE ins | na 16 16 | 0052bc | 20 d7 52    |                 jsr 0052d7           
 856:000 | DONE ins | na 16 16 | 0052bf | 20 d7 51    |                 jsr 0051d7           
 857:000 | DONE wsp | na 16 16 |        |             |
 858:000 | DONE lbl | na 16 16 | 0052c2 |             | z_question                           
 858:001 | DONE ins | na 16 16 | 0052c2 | 60          |                 rts                  
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE wsp | na 16 16 |        |             |
 861:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 862:000 | DONE cmt | na 16 16 |        |             | ; QDUP ( n -- 0 | n n ) X bytes / X cycles
 863:000 | DONE cmt | na 16 16 |        |             | ; If top element on Data Stack is not zero, duplicate it
 864:000 | DONE lbl | na 16 16 | 0052c3 |             | xt_qdup                              
 865:000 | DONE ins | na 16 16 | 0052c3 | 98          |                 tya                  
 866:000 | DONE ins | na 16 16 | 0052c4 | f0 04       |                 beq 0052ca           
 867:000 | DONE wsp | na 16 16 |        |             |
 868:000 | DONE ins | na 16 16 | 0052c6 | ca          |                 dex                  
 869:000 | DONE ins | na 16 16 | 0052c7 | ca          |                 dex                  
 870:000 | DONE ins | na 16 16 | 0052c8 | 94 00       |                 sty.dx 00            
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE lbl | na 16 16 | 0052ca |             | z_qdup                               
 872:001 | DONE ins | na 16 16 | 0052ca | 60          |                 rts                  
 873:000 | DONE wsp | na 16 16 |        |             |
 874:000 | DONE wsp | na 16 16 |        |             |
 875:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 876:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 877:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 878:000 | DONE lbl | na 16 16 | 0052cb |             | xt_store                             
 879:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 880:000 | DONE ins | na 16 16 | 0052cb | b5 00       |                 lda.dx 00            NOS has value
 881:000 | DONE ins | na 16 16 | 0052cd | 99 00 00    |                 sta.y 0000           
 882:000 | DONE wsp | na 16 16 |        |             |
 883:000 | DONE ins | na 16 16 | 0052d0 | b4 02       |                 ldy.dx 02            
 884:000 | DONE ins | na 16 16 | 0052d2 | e8          |                 inx                  
 885:000 | DONE ins | na 16 16 | 0052d3 | e8          |                 inx                  
 886:000 | DONE ins | na 16 16 | 0052d4 | e8          |                 inx                  
 887:000 | DONE ins | na 16 16 | 0052d5 | e8          |                 inx                  
 888:000 | DONE wsp | na 16 16 |        |             |
 889:000 | DONE lbl | na 16 16 | 0052d6 |             | z_store                              
 889:001 | DONE ins | na 16 16 | 0052d6 | 60          |                 rts                  
 890:000 | DONE wsp | na 16 16 |        |             |
 891:000 | DONE wsp | na 16 16 |        |             |
 892:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 893:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 894:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 895:000 | DONE lbl | na 16 16 | 0052d7 |             | xt_fetch                             
 896:000 | DONE ins | na 16 16 | 0052d7 | b9 00 00    |                 lda.y 0000           
 897:000 | DONE ins | na 16 16 | 0052da | a8          |                 tay                  
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE lbl | na 16 16 | 0052db |             | z_fetch                              
 899:001 | DONE ins | na 16 16 | 0052db | 60          |                 rts                  
 900:000 | DONE wsp | na 16 16 |        |             |
 901:000 | DONE wsp | na 16 16 |        |             |
 902:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 903:000 | DONE cmt | na 16 16 |        |             | ; (+LOOP) "PARENS-PLUSLOOP" ( n -- ) X bytes / X cycles
 904:000 | DONE cmt | na 16 16 |        |             | ; Runtime compile for counted loop control. This is used for both +LOOP and
 905:000 | DONE cmt | na 16 16 |        |             | ; LOOP which are defined at high level. Note we use a fudge factor for loop
 906:000 | DONE cmt | na 16 16 |        |             | ; control so we can test with the Overflow Flag. See (DO) for details. This is
 907:000 | DONE cmt | na 16 16 |        |             | ; Native Compile. The step value is TOS in the loop
 908:000 | DONE lbl | na 16 16 | 0052dc |             | xt_pploop                            
 909:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 910:000 | DONE cmt | na 16 16 |        |             |                 ; add step to index
 911:000 | DONE ins | na 16 16 | 0052dc | 98          |                 tya                  step
 912:000 | DONE ins | na 16 16 | 0052dd | b8          |                 clv                  this is used for loop control
 913:000 | DONE ins | na 16 16 | 0052de | 18          |                 clc                  
 914:000 | DONE ins | na 16 16 | 0052df | 63 01       |                 adc.s 01             add index from top of R
 915:000 | DONE ins | na 16 16 | 0052e1 | 83 01       |                 sta.s 01             store it back on top of R
 916:000 | DONE wsp | na 16 16 |        |             |
 917:000 | DONE cmt | na 16 16 |        |             |         ; dump step from TOS
 918:000 | DONE ins | na 16 16 | 0052e3 | b4 00       |                 ldy.dx 00            
 919:000 | DONE ins | na 16 16 | 0052e5 | e8          |                 inx                  
 920:000 | DONE ins | na 16 16 | 0052e6 | e8          |                 inx                  
 921:000 | DONE wsp | na 16 16 |        |             |
 922:000 | DONE cmt | na 16 16 |        |             |         ; if the V flag is set, we're done looping and continue after
 923:000 | DONE cmt | na 16 16 |        |             |         ; the +LOOP instruction
 924:000 | DONE ins | na 16 16 | 0052e7 | 70 03       |                 bvs 0052ec           
 925:000 | DONE wsp | na 16 16 |        |             |
 926:000 | DONE lbl | na 16 16 | 0052e9 |             | pploop_jmp                           
 927:000 | DONE cmt | na 16 16 |        |             |         ; This is why this routine must be natively compiled: We compile
 928:000 | DONE cmt | na 16 16 |        |             |         ; the opcode for jump here without an address to go to, which is
 929:000 | DONE cmt | na 16 16 |        |             |         ; added by the next instruction of LOOP (or +LOOP) during
 930:000 | DONE cmt | na 16 16 |        |             |         ; compile time
 931:000 | DONE dir | na 16 16 | 0052e9 | (1 bytes)   |         .byte 4C                     
 931:000 | DONE dir | na 16 16 |        |             |                 4c                       --  L
 932:000 | DONE wsp | na 16 16 |        |             |
 933:000 | DONE lbl | na 16 16 | 0052ea |             | z_pploop                             
 933:001 | DONE ins | na 16 16 | 0052ea | 60          |                 rts                  never reached (TODO remove)
 934:000 | DONE wsp | na 16 16 |        |             |
 935:000 | DONE wsp | na 16 16 |        |             |
 936:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 937:000 | DONE cmt | na 16 16 |        |             | ; (?DO) "PARENS-QUESTION-DO" ( -- ) X bytes / X cycles
 938:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for ?DO. This contains the parts required for the question
 939:000 | DONE cmt | na 16 16 |        |             | ; mark and then drops through to (DO). This must be native compile
 940:000 | DONE lbl | na 16 16 | 0052eb |             | xt_pqdo                              
 941:000 | DONE cmt | na 16 16 |        |             |         ; See if TOS and NOS are equal
 942:000 | DONE cmt | na 16 16 |        |             |         ; TODO move this to assembler for speed
 943:000 | DONE ins | na 16 16 | 0052eb | 20 1d 54    |                 jsr 00541d           
 944:000 | DONE ins | na 16 16 | 0052ee | 20 8c 53    |                 jsr 00538c           now ( n1 n2 f )
 945:000 | DONE wsp | na 16 16 |        |             |
 946:000 | DONE ins | na 16 16 | 0052f1 | a8          |                 tay                  force flag check
 947:000 | DONE ins | na 16 16 | 0052f2 | f0 0a       |                 beq 0052fe           
 948:000 | DONE wsp | na 16 16 |        |             |
 949:000 | DONE cmt | na 16 16 |        |             |         ; the two numbers are equal, so we get out of there
 950:000 | DONE cmt | na 16 16 |        |             |         ; first, dump three entries off the Data Stack
 951:000 | DONE ins | na 16 16 | 0052f4 | b4 04       |                 ldy.dx 04            
 952:000 | DONE ins | na 16 16 | 0052f6 | 8a          |                 txa                  
 953:000 | DONE ins | na 16 16 | 0052f7 | 18          |                 clc                  
 954:000 | DONE ins | na 16 16 | 0052f8 | 69 06 00    |                 adc.# 0006           
 955:000 | DONE ins | na 16 16 | 0052fb | aa          |                 tax                  
 956:000 | DONE wsp | na 16 16 |        |             |
 957:000 | DONE cmt | na 16 16 |        |             |         ; Abort the whole loop. Since the limit/start parameters are not
 958:000 | DONE cmt | na 16 16 |        |             |         ; on the Return stack yet, we only have the address that points
 959:000 | DONE cmt | na 16 16 |        |             |         ; to the end of the loop. Dump the RTS of ?DO and just use that
 960:000 | DONE cmt | na 16 16 |        |             |         ; RTS
 961:000 | DONE ins | na 16 16 | 0052fc | 68          |                 pla                  
 962:000 | DONE ins | na 16 16 | 0052fd | 60          |                 rts                  
 963:000 | DONE wsp | na 16 16 |        |             |
 964:000 | DONE lbl | na 16 16 | 0052fe |             | pqdo_done                            
 965:000 | DONE cmt | na 16 16 |        |             |         ; get ready to drop to (DO)
 966:000 | DONE ins | na 16 16 | 0052fe | b4 00       |                 ldy.dx 00            drop flag from EQUAL
 967:000 | DONE ins | na 16 16 | 005300 | e8          |                 inx                  
 968:000 | DONE ins | na 16 16 | 005301 | e8          |                 inx                  
 969:000 | DONE wsp | na 16 16 |        |             |
 970:000 | DONE wsp | na 16 16 |        |             |
 971:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 972:000 | DONE cmt | na 16 16 |        |             | ; (DO) "PARENS-DO" ( limit start -- ; R: -- limit start ) X bytes / X cycles
 973:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for DO loop. Note that ANSI loops quit when the boundry of
 974:000 | DONE cmt | na 16 16 |        |             | ; limit-1 and limit is reached, a different mechanism than the FIG Forth loop
 975:000 | DONE cmt | na 16 16 |        |             | ; (you can see which version you have by running a loop with start and limit as
 976:000 | DONE cmt | na 16 16 |        |             | ; the same value, for instance 0 0 DO -- these will walk through the complete
 977:000 | DONE cmt | na 16 16 |        |             | ; number space). This is why there is ?DO, which you should use. We use a "fudge
 978:000 | DONE cmt | na 16 16 |        |             | ; factor" for the limit that makes the Overflow Flag trip when it is reached;
 979:000 | DONE cmt | na 16 16 |        |             | ; see http://forum.6502.org/viewtopic.php?f=9&t=2> for further discussion of
 980:000 | DONE cmt | na 16 16 |        |             | ; this. The source given there for this idea is Laxen & Perry F83. This routine
 981:000 | DONE cmt | na 16 16 |        |             | ; must be native compile (and should be anyway for speed).
 982:000 | DONE lbl | na 16 16 | 005302 |             | xt_pdo                               
 983:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 984:000 | DONE cmt | na 16 16 |        |             |         ; Create fudge factor (fufa) by subtracting the limit from
 985:000 | DONE cmt | na 16 16 |        |             |         ; $8000, the number that will trip the overflow flag
 986:000 | DONE ins | na 16 16 | 005302 | 38          |                 sec                  
 987:000 | DONE ins | na 16 16 | 005303 | a9 00 80    |                 lda.# 8000           
 988:000 | DONE ins | na 16 16 | 005306 | f5 00       |                 sbc.dx 00            limit is NOS
 989:000 | DONE ins | na 16 16 | 005308 | 95 00       |                 sta.dx 00            save fufa for later use as NOS
 990:000 | DONE ins | na 16 16 | 00530a | 48          |                 pha                  we use fufa instead of limit on R
 991:000 | DONE wsp | na 16 16 |        |             |
 992:000 | DONE cmt | na 16 16 |        |             |         ; Index is fufa plus original index
 993:000 | DONE ins | na 16 16 | 00530b | 18          |                 clc                  
 994:000 | DONE ins | na 16 16 | 00530c | 98          |                 tya                  index is TOS
 995:000 | DONE ins | na 16 16 | 00530d | 75 00       |                 adc.dx 00            add fufa
 996:000 | DONE ins | na 16 16 | 00530f | 48          |                 pha                  
 997:000 | DONE wsp | na 16 16 |        |             |
 998:000 | DONE cmt | na 16 16 |        |             |         ; clean up
 999:000 | DONE ins | na 16 16 | 005310 | e8          |                 inx                  
1000:000 | DONE ins | na 16 16 | 005311 | e8          |                 inx                  
1001:000 | DONE ins | na 16 16 | 005312 | e8          |                 inx                  
1002:000 | DONE ins | na 16 16 | 005313 | e8          |                 inx                  
1003:000 | DONE wsp | na 16 16 |        |             |
1004:000 | DONE lbl | na 16 16 | 005314 |             | z_pqdo                               
1005:000 | DONE lbl | na 16 16 | 005314 |             | z_pdo                                
1005:001 | DONE ins | na 16 16 | 005314 | 60          |                 rts                  
1006:000 | DONE wsp | na 16 16 |        |             |
1007:000 | DONE wsp | na 16 16 |        |             |
1008:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1009:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
1010:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
1011:000 | DONE lbl | na 16 16 | 005315 |             | xt_brackettick                       
1012:000 | DONE ins | na 16 16 | 005315 | 20 78 54    |                 jsr 005478           
1013:000 | DONE ins | na 16 16 | 005318 | 20 f3 5a    |                 jsr 005af3           
1014:000 | DONE wsp | na 16 16 |        |             |
1015:000 | DONE lbl | na 16 16 | 00531b |             | z_brackettick                        
1015:001 | DONE ins | na 16 16 | 00531b | 60          |                 rts                  
1016:000 | DONE wsp | na 16 16 |        |             |
1017:000 | DONE wsp | na 16 16 |        |             |
1018:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1019:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
1020:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
1021:000 | DONE lbl | na 16 16 | 00531c |             | xt_leftbracket                       
1022:000 | DONE ins | na 16 16 | 00531c | 64 14       |                 stz.d 000014         
1023:000 | DONE lbl | na 16 16 | 00531e |             | z_leftbracket                        
1023:001 | DONE ins | na 16 16 | 00531e | 60          |                 rts                  
1024:000 | DONE wsp | na 16 16 |        |             |
1025:000 | DONE wsp | na 16 16 |        |             |
1026:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1027:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
1028:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
1029:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
1030:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
1031:000 | DONE lbl | na 16 16 | 00531f |             | xt_rightbracket                      
1032:000 | DONE ins | na 16 16 | 00531f | a9 01 00    |                 lda.# 0001           
1033:000 | DONE ins | na 16 16 | 005322 | 85 14       |                 sta.d 000014         
1034:000 | DONE wsp | na 16 16 |        |             |
1035:000 | DONE lbl | na 16 16 | 005324 |             | z_rightbracket                       
1035:001 | DONE ins | na 16 16 | 005324 | 60          |                 rts                  
1036:000 | DONE wsp | na 16 16 |        |             |
1037:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1038:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
1039:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
1040:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
1041:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
1042:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
1043:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
1044:000 | DONE lbl | na 16 16 | 005325 |             | xt_bracketchar                       
1045:000 | DONE ins | na 16 16 | 005325 | 20 2b 56    |                 jsr 00562b           
1046:000 | DONE ins | na 16 16 | 005328 | 20 f3 5a    |                 jsr 005af3           
1047:000 | DONE wsp | na 16 16 |        |             |
1048:000 | DONE lbl | na 16 16 | 00532b |             | z_bracketchar                        
1048:001 | DONE ins | na 16 16 | 00532b | 60          |                 rts                  
1049:000 | DONE wsp | na 16 16 |        |             |
1050:000 | DONE wsp | na 16 16 |        |             |
1051:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1052:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
1053:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
1054:000 | DONE lbl | na 16 16 | 00532c |             | xt_backslash                         
1055:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1056:000 | DONE cmt | na 16 16 |        |             |         ; Advance >IN to end of the line
1057:000 | DONE ins | na 16 16 | 00532c | a5 0a       |                 lda.d 00000a         
1058:000 | DONE ins | na 16 16 | 00532e | 85 0c       |                 sta.d 00000c         
1059:000 | DONE wsp | na 16 16 |        |             |
1060:000 | DONE lbl | na 16 16 | 005330 |             | z_backslash                          
1060:001 | DONE ins | na 16 16 | 005330 | 60          |                 rts                  
1061:000 | DONE wsp | na 16 16 |        |             |
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1064:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
1065:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
1066:000 | DONE lbl | na 16 16 | 005331 |             | xt_plus                              
1067:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1068:000 | DONE ins | na 16 16 | 005331 | 98          |                 tya                  
1069:000 | DONE ins | na 16 16 | 005332 | 18          |                 clc                  
1070:000 | DONE ins | na 16 16 | 005333 | 75 00       |                 adc.dx 00            
1071:000 | DONE ins | na 16 16 | 005335 | a8          |                 tay                  
1072:000 | DONE ins | na 16 16 | 005336 | e8          |                 inx                  
1073:000 | DONE ins | na 16 16 | 005337 | e8          |                 inx                  
1074:000 | DONE wsp | na 16 16 |        |             |
1075:000 | DONE lbl | na 16 16 | 005338 |             | z_plus                               
1075:001 | DONE ins | na 16 16 | 005338 | 60          |                 rts                  
1076:000 | DONE wsp | na 16 16 |        |             |
1077:000 | DONE wsp | na 16 16 |        |             |
1078:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1079:000 | DONE cmt | na 16 16 |        |             | ; LOOP ( -- ) X bytes / X cycles
1080:000 | DONE cmt | na 16 16 |        |             | ; Compile-time part of LOOP. This does nothing more but push
1081:000 | DONE cmt | na 16 16 |        |             | ; 01 on the stack and then call +LOOP. In Forth, this is
1082:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
1083:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY  Drops through to +LOOP
1084:000 | DONE lbl | na 16 16 | 005339 |             | xt_loop                              
1085:000 | DONE cmt | na 16 16 |        |             |         ; have the finished word put 0001 on the Data Stack
1086:000 | DONE ins | na 16 16 | 005339 | f4 ed 53    |                 phe.# 0053ed         
1087:000 | DONE ins | na 16 16 | 00533c | 20 7b 6a    |                 jsr 006a7b           drops through to +LOOP
1088:000 | DONE wsp | na 16 16 |        |             |
1089:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1090:000 | DONE cmt | na 16 16 |        |             | ; +LOOP ( addr -- ) X bytes / X cycles
1091:000 | DONE cmt | na 16 16 |        |             | ; Compile-time part of +LOOP, also used for LOOP. is usually realized in Forth
1092:000 | DONE cmt | na 16 16 |        |             | ; as  : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE COMPILE-ONLY  Note
1093:000 | DONE cmt | na 16 16 |        |             | ; that LOOP uses this routine as well. We jump here with the address for looping
1094:000 | DONE cmt | na 16 16 |        |             | ; as TOS, and the address for aborting the loop (LEAVE) as the second
1095:000 | DONE cmt | na 16 16 |        |             | ; double-byte entry on the Return Stack (see DO and loops.txt for details).
1096:000 | DONE lbl | na 16 16 | 00533f |             | xt_ploop                             
1097:000 | DONE cmt | na 16 16 |        |             |         ; compile (+LOOP) - use COMPILE, because this has to be natively
1098:000 | DONE cmt | na 16 16 |        |             |         ; compiled
1099:000 | DONE ins | na 16 16 | 00533f | ca          |                 dex                  
1100:000 | DONE ins | na 16 16 | 005340 | ca          |                 dex                  
1101:000 | DONE ins | na 16 16 | 005341 | 94 00       |                 sty.dx 00            
1102:000 | DONE ins | na 16 16 | 005343 | a0 dc 52    |                 ldy.# 0052dc         
1103:000 | DONE ins | na 16 16 | 005346 | 20 8a 56    |                 jsr 00568a           
1104:000 | DONE wsp | na 16 16 |        |             |
1105:000 | DONE cmt | na 16 16 |        |             |         ; The address we need to loop back to is TOS
1106:000 | DONE ins | na 16 16 | 005349 | 20 42 52    |                 jsr 005242           
1107:000 | DONE wsp | na 16 16 |        |             |
1108:000 | DONE cmt | na 16 16 |        |             |         ; Now compile an UNLOOP for when we're all done
1109:000 | DONE ins | na 16 16 | 00534c | ca          |                 dex                  
1110:000 | DONE ins | na 16 16 | 00534d | ca          |                 dex                  
1111:000 | DONE ins | na 16 16 | 00534e | 94 00       |                 sty.dx 00            
1112:000 | DONE ins | na 16 16 | 005350 | a0 21 60    |                 ldy.# 006021         
1113:000 | DONE ins | na 16 16 | 005353 | 20 8a 56    |                 jsr 00568a           
1114:000 | DONE wsp | na 16 16 |        |             |
1115:000 | DONE cmt | na 16 16 |        |             |         ; Complete the compile of DO (or ?DO) by filling the hole they
1116:000 | DONE cmt | na 16 16 |        |             |         ; left with the current address. This is TOS
1117:000 | DONE ins | na 16 16 | 005356 | a5 00       |                 lda.d 000000         we need CP-1 for RTS calculation
1118:000 | DONE ins | na 16 16 | 005358 | 3a          |                 dec.a                
1119:000 | DONE ins | na 16 16 | 005359 | 99 00 00    |                 sta.y 0000           
1120:000 | DONE wsp | na 16 16 |        |             |
1121:000 | DONE ins | na 16 16 | 00535c | b4 00       |                 ldy.dx 00            
1122:000 | DONE ins | na 16 16 | 00535e | e8          |                 inx                  
1123:000 | DONE ins | na 16 16 | 00535f | e8          |                 inx                  
1124:000 | DONE wsp | na 16 16 |        |             |
1125:000 | DONE lbl | na 16 16 | 005360 |             | z_loop                               
1126:000 | DONE lbl | na 16 16 | 005360 |             | z_ploop                              
1126:001 | DONE ins | na 16 16 | 005360 | 60          |                 rts                  
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE wsp | na 16 16 |        |             |
1129:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1130:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
1131:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
1132:000 | DONE lbl | na 16 16 | 005361 |             | xt_minus                             
1133:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1134:000 | DONE ins | na 16 16 | 005361 | 98          |                 tya                  
1135:000 | DONE ins | na 16 16 | 005362 | 49 ff ff    |                 eor.# 0ffff          
1136:000 | DONE wsp | na 16 16 |        |             |
1137:000 | DONE ins | na 16 16 | 005365 | 38          |                 sec                  not CLC
1138:000 | DONE ins | na 16 16 | 005366 | 75 00       |                 adc.dx 00            
1139:000 | DONE wsp | na 16 16 |        |             |
1140:000 | DONE ins | na 16 16 | 005368 | a8          |                 tay                  
1141:000 | DONE ins | na 16 16 | 005369 | e8          |                 inx                  
1142:000 | DONE ins | na 16 16 | 00536a | e8          |                 inx                  
1143:000 | DONE wsp | na 16 16 |        |             |
1144:000 | DONE lbl | na 16 16 | 00536b |             | z_minus                              
1144:001 | DONE ins | na 16 16 | 00536b | 60          |                 rts                  
1145:000 | DONE wsp | na 16 16 |        |             |
1146:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1147:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
1148:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
1149:000 | DONE lbl | na 16 16 | 00536c |             | xt_mrot                              
1150:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1151:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1152:000 | DONE ins | na 16 16 | 00536c | b5 02       |                 lda.dx 02            save a
1153:000 | DONE ins | na 16 16 | 00536e | 94 02       |                 sty.dx 02            move c to 3OS
1154:000 | DONE ins | na 16 16 | 005370 | b4 00       |                 ldy.dx 00            move b to TOS
1155:000 | DONE ins | na 16 16 | 005372 | 95 00       |                 sta.dx 00            save a as NOS
1156:000 | DONE wsp | na 16 16 |        |             |
1157:000 | DONE lbl | na 16 16 | 005374 |             | z_mrot                               
1157:001 | DONE ins | na 16 16 | 005374 | 60          |                 rts                  
1158:000 | DONE wsp | na 16 16 |        |             |
1159:000 | DONE wsp | na 16 16 |        |             |
1160:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1161:000 | DONE cmt | na 16 16 |        |             | ; -TRAILING ( addr u -- addr u ) X bytes / X cycles
1162:000 | DONE cmt | na 16 16 |        |             | ; Remove any trailing blanks. Uses tmp3
1163:000 | DONE lbl | na 16 16 | 005375 |             | xt_dtrailing                         
1164:000 | DONE cmt | na 16 16 |        |             |         ; if u is zero, just return string
1165:000 | DONE ins | na 16 16 | 005375 | 98          |                 tya                  force flag check
1166:000 | DONE ins | na 16 16 | 005376 | f0 13       |                 beq 00538b           
1167:000 | DONE wsp | na 16 16 |        |             |
1168:000 | DONE ins | na 16 16 | 005378 | b5 00       |                 lda.dx 00            
1169:000 | DONE ins | na 16 16 | 00537a | 85 20       |                 sta.d 000020         
1170:000 | DONE ins | na 16 16 | 00537c | 88          |                 dey                  convert length to index
1171:000 | DONE ins | na 16 16 | 00537d | e2 20       |                 sep 20               
1171:001 | DONE ctl | na  8 16 |        |             |         .!a8
1172:000 | DONE wsp | na  8 16 |        |             |
1173:000 | DONE lbl | na  8 16 | 00537f |             | dtrailing_loop                       
1174:000 | DONE ins | na  8 16 | 00537f | b1 20       |                 lda.diy 000020       
1175:000 | DONE ins | na  8 16 | 005381 | c9 20       |                 cmp.# 20             
1176:000 | DONE ins | na  8 16 | 005383 | d0 03       |                 bne 005388           
1177:000 | DONE ins | na  8 16 | 005385 | 88          |                 dey                  
1178:000 | DONE ins | na  8 16 | 005386 | 10 f7       |                 bpl 00537f           fall through when done
1179:000 | DONE wsp | na  8 16 |        |             |
1180:000 | DONE lbl | na  8 16 | 005388 |             | dtrailing_done                       
1181:000 | DONE ins | na  8 16 | 005388 | c2 20       |                 rep 20               
1181:001 | DONE ctl | na 16 16 |        |             |         .!a16
1182:000 | DONE ins | na 16 16 | 00538a | c8          |                 iny                  convert index to length
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE lbl | na 16 16 | 00538b |             | z_dtrailing                          
1184:001 | DONE ins | na 16 16 | 00538b | 60          |                 rts                  
1185:000 | DONE wsp | na 16 16 |        |             |
1186:000 | DONE wsp | na 16 16 |        |             |
1187:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1188:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
1189:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
1190:000 | DONE lbl | na 16 16 | 00538c |             | xt_equal                             
1191:000 | DONE ins | na 16 16 | 00538c | 98          |                 tya                  
1192:000 | DONE ins | na 16 16 | 00538d | a0 00 00    |                 ldy.# 0000           default value is false
1193:000 | DONE wsp | na 16 16 |        |             |
1194:000 | DONE ins | na 16 16 | 005390 | d5 00       |                 cmp.dx 00            
1195:000 | DONE ins | na 16 16 | 005392 | d0 01       |                 bne 005395           
1196:000 | DONE ins | na 16 16 | 005394 | 88          |                 dey                  wraps to 0FFFF (true)
1197:000 | DONE wsp | na 16 16 |        |             |
1198:000 | DONE lbl | na 16 16 | 005395 |             | equal_not                            
1199:000 | DONE ins | na 16 16 | 005395 | e8          |                 inx                  
1200:000 | DONE ins | na 16 16 | 005396 | e8          |                 inx                  
1201:000 | DONE wsp | na 16 16 |        |             |
1202:000 | DONE lbl | na 16 16 | 005397 |             | z_equal                              
1202:001 | DONE ins | na 16 16 | 005397 | 60          |                 rts                  
1203:000 | DONE wsp | na 16 16 |        |             |
1204:000 | DONE wsp | na 16 16 |        |             |
1205:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1206:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
1207:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
1208:000 | DONE lbl | na 16 16 | 005398 |             | xt_zero                              
1209:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1210:000 | DONE ins | na 16 16 | 005398 | ca          |                 dex                  
1211:000 | DONE ins | na 16 16 | 005399 | ca          |                 dex                  
1212:000 | DONE ins | na 16 16 | 00539a | 94 00       |                 sty.dx 00            
1213:000 | DONE ins | na 16 16 | 00539c | a0 00 00    |                 ldy.# 0000           
1214:000 | DONE wsp | na 16 16 |        |             |
1215:000 | DONE lbl | na 16 16 | 00539f |             | z_zero                               
1215:001 | DONE ins | na 16 16 | 00539f | 60          |                 rts                  
1216:000 | DONE wsp | na 16 16 |        |             |
1217:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1218:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
1219:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
1220:000 | DONE lbl | na 16 16 | 0053a0 |             | xt_zero-equal                        
1221:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1222:000 | DONE ins | na 16 16 | 0053a0 | 98          |                 tya                  force flag check
1223:000 | DONE ins | na 16 16 | 0053a1 | d0 05       |                 bne 0053a8           
1224:000 | DONE wsp | na 16 16 |        |             |
1225:000 | DONE ins | na 16 16 | 0053a3 | a0 ff ff    |                 ldy.# 0ffff          
1226:000 | DONE ins | na 16 16 | 0053a6 | 80 03       |                 bra 0053ab           
1227:000 | DONE lbl | na 16 16 | 0053a8 |             | ze_not_zero                          
1228:000 | DONE ins | na 16 16 | 0053a8 | a0 00 00    |                 ldy.# 0000           
1229:000 | DONE wsp | na 16 16 |        |             |
1230:000 | DONE lbl | na 16 16 | 0053ab |             | z_zero-equal                         
1230:001 | DONE ins | na 16 16 | 0053ab | 60          |                 rts                  
1231:000 | DONE wsp | na 16 16 |        |             |
1232:000 | DONE wsp | na 16 16 |        |             |
1233:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1234:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1235:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1236:000 | DONE lbl | na 16 16 | 0053ac |             | xt_zero-less                         
1237:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1238:000 | DONE ins | na 16 16 | 0053ac | 98          |                 tya                  force flag check
1239:000 | DONE ins | na 16 16 | 0053ad | 30 05       |                 bmi 0053b4           
1240:000 | DONE wsp | na 16 16 |        |             |
1241:000 | DONE ins | na 16 16 | 0053af | a0 00 00    |                 ldy.# 0000           
1242:000 | DONE ins | na 16 16 | 0053b2 | 80 03       |                 bra 0053b7           
1243:000 | DONE wsp | na 16 16 |        |             |
1244:000 | DONE lbl | na 16 16 | 0053b4 |             | zero-less-is-less                    
1245:000 | DONE ins | na 16 16 | 0053b4 | a0 ff ff    |                 ldy.# 0ffff          
1246:000 | DONE wsp | na 16 16 |        |             |
1247:000 | DONE lbl | na 16 16 | 0053b7 |             | z_zero-less                          
1247:001 | DONE ins | na 16 16 | 0053b7 | 60          |                 rts                  
1248:000 | DONE wsp | na 16 16 |        |             |
1249:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1250:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1251:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1252:000 | DONE lbl | na 16 16 | 0053b8 |             | xt_zero-notequal                     
1253:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1254:000 | DONE ins | na 16 16 | 0053b8 | 98          |                 tya                  force flag check
1255:000 | DONE ins | na 16 16 | 0053b9 | f0 05       |                 beq 0053c0           
1256:000 | DONE ins | na 16 16 | 0053bb | a0 ff ff    |                 ldy.# 0ffff          
1257:000 | DONE ins | na 16 16 | 0053be | 80 03       |                 bra 0053c3           
1258:000 | DONE lbl | na 16 16 | 0053c0 |             | zne_is_zero                          
1259:000 | DONE ins | na 16 16 | 0053c0 | a0 00 00    |                 ldy.# 0000           
1260:000 | DONE lbl | na 16 16 | 0053c3 |             | z_zero-notequal                      
1261:000 | DONE ins | na 16 16 | 0053c3 | 60          |                 rts                  
1262:000 | DONE wsp | na 16 16 |        |             |
1263:000 | DONE wsp | na 16 16 |        |             |
1264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1265:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1266:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1267:000 | DONE lbl | na 16 16 | 0053c4 |             | xt_zero-more                         
1268:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1269:000 | DONE ins | na 16 16 | 0053c4 | a9 00 00    |                 lda.# 0000           default is false
1270:000 | DONE wsp | na 16 16 |        |             |
1271:000 | DONE ins | na 16 16 | 0053c7 | 88          |                 dey                  
1272:000 | DONE ins | na 16 16 | 0053c8 | 10 02       |                 bpl 0053cc           was at least 1
1273:000 | DONE wsp | na 16 16 |        |             |
1274:000 | DONE ins | na 16 16 | 0053ca | 80 01       |                 bra 0053cd           nope, stays false
1275:000 | DONE wsp | na 16 16 |        |             |
1276:000 | DONE lbl | na 16 16 | 0053cc |             | zero-more_true                       
1277:000 | DONE ins | na 16 16 | 0053cc | 3a          |                 dec.a                wraps to 0ffff, true
1278:000 | DONE lbl | na 16 16 | 0053cd |             | zero-more_done                       
1279:000 | DONE ins | na 16 16 | 0053cd | a8          |                 tay                  
1280:000 | DONE wsp | na 16 16 |        |             |
1281:000 | DONE lbl | na 16 16 | 0053ce |             | z_zero-more                          
1281:001 | DONE ins | na 16 16 | 0053ce | 60          |                 rts                  
1282:000 | DONE wsp | na 16 16 |        |             |
1283:000 | DONE wsp | na 16 16 |        |             |
1284:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1285:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1286:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1287:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1288:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1289:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmpbranch
1290:000 | DONE lbl | na 16 16 | 0053cf |             | xt_zbranch                           
1291:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1292:000 | DONE cmt | na 16 16 |        |             |         ; encode subroutine jump to run time code
1293:000 | DONE ins | na 16 16 | 0053cf | f4 d6 53    |                 phe.# 0053d6         
1294:000 | DONE ins | na 16 16 | 0053d2 | 20 7b 6a    |                 jsr 006a7b           
1295:000 | DONE wsp | na 16 16 |        |             |
1296:000 | DONE lbl | na 16 16 | 0053d5 |             | z_zbranch                            
1296:001 | DONE ins | na 16 16 | 0053d5 | 60          |                 rts                  
1297:000 | DONE wsp | na 16 16 |        |             |
1298:000 | DONE lbl | na 16 16 | 0053d6 |             | zbranch_rt                           
1299:000 | DONE cmt | na 16 16 |        |             |         ; See if the flag is zero, which is the whole purpose of this
1300:000 | DONE cmt | na 16 16 |        |             |         ; operation after all
1301:000 | DONE ins | na 16 16 | 0053d6 | 98          |                 tya                  force flag check
1302:000 | DONE ins | na 16 16 | 0053d7 | f0 05       |                 beq 0053de           flag is false (zero), so we branch
1303:000 | DONE wsp | na 16 16 |        |             |
1304:000 | DONE cmt | na 16 16 |        |             |         ; Flag is TRUE, so we skip over the next two bytes. Put
1305:000 | DONE cmt | na 16 16 |        |             |         ; differently, this is the part between IF and THEN
1306:000 | DONE ins | na 16 16 | 0053d9 | 68          |                 pla                  
1307:000 | DONE ins | na 16 16 | 0053da | 1a          |                 inc.a                
1308:000 | DONE ins | na 16 16 | 0053db | 1a          |                 inc.a                
1309:000 | DONE wsp | na 16 16 |        |             |
1310:000 | DONE ins | na 16 16 | 0053dc | 80 09       |                 bra 0053e7           
1311:000 | DONE wsp | na 16 16 |        |             |
1312:000 | DONE lbl | na 16 16 | 0053de |             | zb_zero                              
1313:000 | DONE cmt | na 16 16 |        |             |         ; Flag is FALSE, so we take the dump to the address given in the
1314:000 | DONE cmt | na 16 16 |        |             |         ; next two bytes. We don't need Y anymore, so we can use it for
1315:000 | DONE cmt | na 16 16 |        |             |         ; indexing
1316:000 | DONE ins | na 16 16 | 0053de | 68          |                 pla                  
1317:000 | DONE ins | na 16 16 | 0053df | 85 1a       |                 sta.d 00001a         
1318:000 | DONE ins | na 16 16 | 0053e1 | a0 01 00    |                 ldy.# 0001           
1319:000 | DONE ins | na 16 16 | 0053e4 | b1 1a       |                 lda.diy 00001a       
1320:000 | DONE wsp | na 16 16 |        |             |
1321:000 | DONE cmt | na 16 16 |        |             |         ; Subtract one from the address given becasue of the RTS
1322:000 | DONE cmt | na 16 16 |        |             |         ; mechanics
1323:000 | DONE ins | na 16 16 | 0053e6 | 3a          |                 dec.a                
1324:000 | DONE wsp | na 16 16 |        |             |
1325:000 | DONE lbl | na 16 16 | 0053e7 |             | zb_done                              
1326:000 | DONE cmt | na 16 16 |        |             |         ; One we or another, this is where we're going to jump to
1327:000 | DONE ins | na 16 16 | 0053e7 | 48          |                 pha                  
1328:000 | DONE wsp | na 16 16 |        |             |
1329:000 | DONE cmt | na 16 16 |        |             |         ; Clean up the Data Stack and jump
1330:000 | DONE ins | na 16 16 | 0053e8 | b4 00       |                 ldy.dx 00            
1331:000 | DONE ins | na 16 16 | 0053ea | e8          |                 inx                  
1332:000 | DONE ins | na 16 16 | 0053eb | e8          |                 inx                  
1333:000 | DONE wsp | na 16 16 |        |             |
1334:000 | DONE ins | na 16 16 | 0053ec | 60          |                 rts                  
1335:000 | DONE wsp | na 16 16 |        |             |
1336:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1337:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1338:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1339:000 | DONE lbl | na 16 16 | 0053ed |             | xt_one                               
1340:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1341:000 | DONE ins | na 16 16 | 0053ed | ca          |                 dex                  
1342:000 | DONE ins | na 16 16 | 0053ee | ca          |                 dex                  
1343:000 | DONE ins | na 16 16 | 0053ef | 94 00       |                 sty.dx 00            
1344:000 | DONE ins | na 16 16 | 0053f1 | a0 01 00    |                 ldy.# 0001           
1345:000 | DONE wsp | na 16 16 |        |             |
1346:000 | DONE lbl | na 16 16 | 0053f4 |             | z_one                                
1346:001 | DONE ins | na 16 16 | 0053f4 | 60          |                 rts                  
1347:000 | DONE wsp | na 16 16 |        |             |
1348:000 | DONE wsp | na 16 16 |        |             |
1349:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1350:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1351:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1352:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1353:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1354:000 | DONE lbl | na 16 16 | 0053f5 |             | xt_one-minus                         
1355:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1356:000 | DONE ins | na 16 16 | 0053f5 | 88          |                 dey                  
1357:000 | DONE lbl | na 16 16 | 0053f6 |             | z_one-minus                          
1357:001 | DONE ins | na 16 16 | 0053f6 | 60          |                 rts                  
1358:000 | DONE wsp | na 16 16 |        |             |
1359:000 | DONE wsp | na 16 16 |        |             |
1360:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1361:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1362:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1363:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1364:000 | DONE lbl | na 16 16 | 0053f7 |             | xt_one-plus                          
1365:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1366:000 | DONE ins | na 16 16 | 0053f7 | c8          |                 iny                  
1367:000 | DONE lbl | na 16 16 | 0053f8 |             | z_one-plus                           
1367:001 | DONE ins | na 16 16 | 0053f8 | 60          |                 rts                  
1368:000 | DONE wsp | na 16 16 |        |             |
1369:000 | DONE wsp | na 16 16 |        |             |
1370:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1371:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1372:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1373:000 | DONE lbl | na 16 16 | 0053f9 |             | xt_two                               
1374:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1375:000 | DONE ins | na 16 16 | 0053f9 | ca          |                 dex                  
1376:000 | DONE ins | na 16 16 | 0053fa | ca          |                 dex                  
1377:000 | DONE ins | na 16 16 | 0053fb | 94 00       |                 sty.dx 00            
1378:000 | DONE ins | na 16 16 | 0053fd | a0 02 00    |                 ldy.# 0002           
1379:000 | DONE wsp | na 16 16 |        |             |
1380:000 | DONE lbl | na 16 16 | 005400 |             | z_two                                
1380:001 | DONE ins | na 16 16 | 005400 | 60          |                 rts                  
1381:000 | DONE wsp | na 16 16 |        |             |
1382:000 | DONE wsp | na 16 16 |        |             |
1383:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1384:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1385:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1386:000 | DONE lbl | na 16 16 | 005401 |             | xt_two-star                          
1387:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1388:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1389:000 | DONE ins | na 16 16 | 005401 | 98          |                 tya                  
1390:000 | DONE ins | na 16 16 | 005402 | 0a          |                 asl.a                
1391:000 | DONE ins | na 16 16 | 005403 | a8          |                 tay                  
1392:000 | DONE wsp | na 16 16 |        |             |
1393:000 | DONE lbl | na 16 16 | 005404 |             | z_two-star                           
1393:001 | DONE ins | na 16 16 | 005404 | 60          |                 rts                  
1394:000 | DONE wsp | na 16 16 |        |             |
1395:000 | DONE wsp | na 16 16 |        |             |
1396:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1397:000 | DONE cmt | na 16 16 |        |             | ; 2>R "TWOTOR" ( n1 n2 -- )(R: -- n1 n2)  X bytes / X cycles
1398:000 | DONE cmt | na 16 16 |        |             | ; Push top two entries to Return Stack. The same as SWAP >R >R except that if we
1399:000 | DONE cmt | na 16 16 |        |             | ; jumped here, the return address will be in the way. May not be natively
1400:000 | DONE cmt | na 16 16 |        |             | ; compiled
1401:000 | DONE cmt | na 16 16 |        |             | ; TODO not coded
1402:000 | DONE lbl | na 16 16 | 005405 |             | xt_twotor                            
1403:000 | DONE cmt | na 16 16 |        |             |         ; get the return address out of the way
1404:000 | DONE ins | na 16 16 | 005405 | 68          |                 pla                  
1405:000 | DONE ins | na 16 16 | 005406 | 85 20       |                 sta.d 000020         
1406:000 | DONE cmt | na 16 16 |        |             |         ; --- CUT HERE for native compile ---
1407:000 | DONE wsp | na 16 16 |        |             |
1408:000 | DONE ins | na 16 16 | 005408 | b5 00       |                 lda.dx 00            NOS stays next on Return Stack
1409:000 | DONE ins | na 16 16 | 00540a | 48          |                 pha                  
1410:000 | DONE ins | na 16 16 | 00540b | 5a          |                 phy                  TOS stays on top
1411:000 | DONE wsp | na 16 16 |        |             |
1412:000 | DONE ins | na 16 16 | 00540c | b4 02       |                 ldy.dx 02            clean up data stack
1413:000 | DONE ins | na 16 16 | 00540e | e8          |                 inx                  
1414:000 | DONE ins | na 16 16 | 00540f | e8          |                 inx                  
1415:000 | DONE ins | na 16 16 | 005410 | e8          |                 inx                  
1416:000 | DONE ins | na 16 16 | 005411 | e8          |                 inx                  
1417:000 | DONE wsp | na 16 16 |        |             |
1418:000 | DONE cmt | na 16 16 |        |             |         ; --- CUT HERE for native compile ---
1419:000 | DONE ins | na 16 16 | 005412 | a5 20       |                 lda.d 000020         
1420:000 | DONE ins | na 16 16 | 005414 | 48          |                 pha                  
1421:000 | DONE wsp | na 16 16 |        |             |
1422:000 | DONE lbl | na 16 16 | 005415 |             | z_twotor                             
1422:001 | DONE ins | na 16 16 | 005415 | 60          |                 rts                  
1423:000 | DONE wsp | na 16 16 |        |             |
1424:000 | DONE wsp | na 16 16 |        |             |
1425:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1426:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1427:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1428:000 | DONE lbl | na 16 16 | 005416 |             | xt_2drop                             
1429:000 | DONE ins | na 16 16 | 005416 | b4 02       |                 ldy.dx 02            
1430:000 | DONE ins | na 16 16 | 005418 | e8          |                 inx                  
1431:000 | DONE ins | na 16 16 | 005419 | e8          |                 inx                  
1432:000 | DONE ins | na 16 16 | 00541a | e8          |                 inx                  
1433:000 | DONE ins | na 16 16 | 00541b | e8          |                 inx                  
1434:000 | DONE wsp | na 16 16 |        |             |
1435:000 | DONE lbl | na 16 16 | 00541c |             | z_2drop                              
1435:001 | DONE ins | na 16 16 | 00541c | 60          |                 rts                  
1436:000 | DONE wsp | na 16 16 |        |             |
1437:000 | DONE wsp | na 16 16 |        |             |
1438:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1439:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1440:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1441:000 | DONE wsp | na 16 16 |        |             |
1442:000 | DONE lbl | na 16 16 | 00541d |             | xt_2dup                              
1443:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1444:000 | DONE ins | na 16 16 | 00541d | ca          |                 dex                  
1445:000 | DONE ins | na 16 16 | 00541e | ca          |                 dex                  
1446:000 | DONE ins | na 16 16 | 00541f | ca          |                 dex                  
1447:000 | DONE ins | na 16 16 | 005420 | ca          |                 dex                  
1448:000 | DONE ins | na 16 16 | 005421 | 94 02       |                 sty.dx 02            
1449:000 | DONE ins | na 16 16 | 005423 | b5 04       |                 lda.dx 04            
1450:000 | DONE ins | na 16 16 | 005425 | 95 00       |                 sta.dx 00            
1451:000 | DONE wsp | na 16 16 |        |             |
1452:000 | DONE lbl | na 16 16 | 005427 |             | z_2dup                               
1452:001 | DONE ins | na 16 16 | 005427 | 60          |                 rts                  
1453:000 | DONE wsp | na 16 16 |        |             |
1454:000 | DONE wsp | na 16 16 |        |             |
1455:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1456:000 | DONE cmt | na 16 16 |        |             | ; 2OVER ( d1 d2 -- d1 d2 d1 ) X bytes / X cycles
1457:000 | DONE cmt | na 16 16 |        |             | ; Copy cell pair that is NOS to TOS
1458:000 | DONE lbl | na 16 16 | 005428 |             | xt_2over                             
1459:000 | DONE ins | na 16 16 | 005428 | ca          |                 dex                  
1460:000 | DONE ins | na 16 16 | 005429 | ca          |                 dex                  
1461:000 | DONE ins | na 16 16 | 00542a | ca          |                 dex                  
1462:000 | DONE ins | na 16 16 | 00542b | ca          |                 dex                  
1463:000 | DONE ins | na 16 16 | 00542c | 94 02       |                 sty.dx 02            
1464:000 | DONE ins | na 16 16 | 00542e | b4 06       |                 ldy.dx 06            
1465:000 | DONE ins | na 16 16 | 005430 | b5 08       |                 lda.dx 08            
1466:000 | DONE ins | na 16 16 | 005432 | 95 00       |                 sta.dx 00            
1467:000 | DONE wsp | na 16 16 |        |             |
1468:000 | DONE lbl | na 16 16 | 005434 |             | z_2over                              
1468:001 | DONE ins | na 16 16 | 005434 | 60          |                 rts                  
1469:000 | DONE wsp | na 16 16 |        |             |
1470:000 | DONE wsp | na 16 16 |        |             |
1471:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1472:000 | DONE cmt | na 16 16 |        |             | ; 2R> "TWOFROMR" ( -- n1 n2 ) ( R: n1 n2 ) X bytes / X cycles
1473:000 | DONE cmt | na 16 16 |        |             | ; Pull top two entries from Return Stack. Is the same as R> R> SWAP
1474:000 | DONE cmt | na 16 16 |        |             | ; As with R>, the problem with the is word is that the top value on the Return
1475:000 | DONE cmt | na 16 16 |        |             | ; Stack for a STC Forth is the return address, which we need to get out of the
1476:000 | DONE cmt | na 16 16 |        |             | ; way first. Uses tmp3
1477:000 | DONE lbl | na 16 16 | 005435 |             | xt_twofromr                          
1478:000 | DONE cmt | na 16 16 |        |             |         ; get the return address out of the way
1479:000 | DONE ins | na 16 16 | 005435 | 68          |                 pla                  
1480:000 | DONE ins | na 16 16 | 005436 | 85 20       |                 sta.d 000020         
1481:000 | DONE cmt | na 16 16 |        |             |         ; --- CUT HERE for native compile ---
1482:000 | DONE wsp | na 16 16 |        |             |
1483:000 | DONE ins | na 16 16 | 005438 | ca          |                 dex                  make room on Data Stack
1484:000 | DONE ins | na 16 16 | 005439 | ca          |                 dex                  
1485:000 | DONE ins | na 16 16 | 00543a | ca          |                 dex                  
1486:000 | DONE ins | na 16 16 | 00543b | ca          |                 dex                  
1487:000 | DONE ins | na 16 16 | 00543c | 94 02       |                 sty.dx 02            
1488:000 | DONE wsp | na 16 16 |        |             |
1489:000 | DONE ins | na 16 16 | 00543e | 7a          |                 ply                  top element stays on top
1490:000 | DONE ins | na 16 16 | 00543f | 68          |                 pla                  next element stays below
1491:000 | DONE ins | na 16 16 | 005440 | 95 00       |                 sta.dx 00            
1492:000 | DONE wsp | na 16 16 |        |             |
1493:000 | DONE cmt | na 16 16 |        |             |         ; --- CUT HERE for native compile ---
1494:000 | DONE cmt | na 16 16 |        |             |         ; restore return address
1495:000 | DONE ins | na 16 16 | 005442 | a5 20       |                 lda.d 000020         
1496:000 | DONE ins | na 16 16 | 005444 | 48          |                 pha                  
1497:000 | DONE wsp | na 16 16 |        |             |
1498:000 | DONE lbl | na 16 16 | 005445 |             | z_twofromr                           
1498:001 | DONE ins | na 16 16 | 005445 | 60          |                 rts                  
1499:000 | DONE wsp | na 16 16 |        |             |
1500:000 | DONE wsp | na 16 16 |        |             |
1501:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1502:000 | DONE cmt | na 16 16 |        |             | ; 2R@ ( -- n1 n2 )(R: n1 n2 -- n1 n2 )  X bytes / X cycles
1503:000 | DONE cmt | na 16 16 |        |             | ; Copy two words off the Return Stack.  This is R> R> 2DUP >R >R SWAP but we
1504:000 | DONE cmt | na 16 16 |        |             | ; can do this a lot faster in assembler This routine may not be natively
1505:000 | DONE cmt | na 16 16 |        |             | ; compiled; because it accessed by a JSR, the first element on the Return Stack
1506:000 | DONE cmt | na 16 16 |        |             | ; (LDA.S 01) is the return address.
1507:000 | DONE lbl | na 16 16 | 005446 |             | xt_tworfetch                         
1508:000 | DONE cmt | na 16 16 |        |             |         ; make room on the Data Stack
1509:000 | DONE ins | na 16 16 | 005446 | ca          |                 dex                  
1510:000 | DONE ins | na 16 16 | 005447 | ca          |                 dex                  
1511:000 | DONE ins | na 16 16 | 005448 | ca          |                 dex                  
1512:000 | DONE ins | na 16 16 | 005449 | ca          |                 dex                  
1513:000 | DONE ins | na 16 16 | 00544a | 94 02       |                 sty.dx 02            
1514:000 | DONE wsp | na 16 16 |        |             |
1515:000 | DONE ins | na 16 16 | 00544c | a3 03       |                 lda.s 03             get second element of Return Stack
1516:000 | DONE ins | na 16 16 | 00544e | a8          |                 tay                  
1517:000 | DONE ins | na 16 16 | 00544f | a3 05       |                 lda.s 05             get third element on Return Stack
1518:000 | DONE ins | na 16 16 | 005451 | 95 00       |                 sta.dx 00            
1519:000 | DONE wsp | na 16 16 |        |             |
1520:000 | DONE lbl | na 16 16 | 005453 |             | z_tworfetch                          
1520:001 | DONE ins | na 16 16 | 005453 | 60          |                 rts                  
1521:000 | DONE wsp | na 16 16 |        |             |
1522:000 | DONE wsp | na 16 16 |        |             |
1523:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1524:000 | DONE cmt | na 16 16 |        |             | ; 2SWAP ( d1 d2 -- d2 d1 ) X bytes / X cycles
1525:000 | DONE cmt | na 16 16 |        |             | ; Swap two double cell numbers on the Data Stack.
1526:000 | DONE lbl | na 16 16 | 005454 |             | xt_2swap                             
1527:000 | DONE ins | na 16 16 | 005454 | 5a          |                 phy                  hi word of TOS
1528:000 | DONE ins | na 16 16 | 005455 | b4 02       |                 ldy.dx 02            hi word of NOS
1529:000 | DONE ins | na 16 16 | 005457 | 68          |                 pla                  
1530:000 | DONE ins | na 16 16 | 005458 | 95 02       |                 sta.dx 02            
1531:000 | DONE wsp | na 16 16 |        |             |
1532:000 | DONE ins | na 16 16 | 00545a | b5 00       |                 lda.dx 00            lo word of TOS
1533:000 | DONE ins | na 16 16 | 00545c | 48          |                 pha                  
1534:000 | DONE ins | na 16 16 | 00545d | b5 04       |                 lda.dx 04            lo word of NOS
1535:000 | DONE ins | na 16 16 | 00545f | 95 00       |                 sta.dx 00            
1536:000 | DONE ins | na 16 16 | 005461 | 68          |                 pla                  
1537:000 | DONE ins | na 16 16 | 005462 | 95 04       |                 sta.dx 04            
1538:000 | DONE wsp | na 16 16 |        |             |
1539:000 | DONE lbl | na 16 16 | 005464 |             | z_2swap                              
1539:001 | DONE ins | na 16 16 | 005464 | 60          |                 rts                  
1540:000 | DONE wsp | na 16 16 |        |             |
1541:000 | DONE wsp | na 16 16 |        |             |
1542:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1543:000 | DONE cmt | na 16 16 |        |             | ; 2VARIABLE ( "name" -- ) X bytes / X cycles
1544:000 | DONE cmt | na 16 16 |        |             | ; Create a variable with space for a double celled word. This can be realized in
1545:000 | DONE cmt | na 16 16 |        |             | ; Forth as either CREATE 2 CELLS ALLOT or just CREATE 0 , 0 ,
1546:000 | DONE cmt | na 16 16 |        |             | ; We use the second variant, letting CREATE do the hard work
1547:000 | DONE cmt | na 16 16 |        |             | ; TODO see if it is faster to use Y as an index and increase by four
1548:000 | DONE lbl | na 16 16 | 005465 |             | xt_2variable                         
1549:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1550:000 | DONE ins | na 16 16 | 005465 | 20 62 57    |                 jsr 005762           
1551:000 | DONE wsp | na 16 16 |        |             |
1552:000 | DONE ins | na 16 16 | 005468 | a9 00 00    |                 lda.# 0000           
1553:000 | DONE ins | na 16 16 | 00546b | 92 00       |                 sta.di 000000        
1554:000 | DONE ins | na 16 16 | 00546d | e6 00       |                 inc.d 000000         
1555:000 | DONE ins | na 16 16 | 00546f | e6 00       |                 inc.d 000000         
1556:000 | DONE ins | na 16 16 | 005471 | 92 00       |                 sta.di 000000        
1557:000 | DONE ins | na 16 16 | 005473 | e6 00       |                 inc.d 000000         
1558:000 | DONE ins | na 16 16 | 005475 | e6 00       |                 inc.d 000000         
1559:000 | DONE wsp | na 16 16 |        |             |
1560:000 | DONE lbl | na 16 16 | 005477 |             | z_2variable                          
1560:001 | DONE ins | na 16 16 | 005477 | 60          |                 rts                  
1561:000 | DONE wsp | na 16 16 |        |             |
1562:000 | DONE wsp | na 16 16 |        |             |
1563:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1564:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1565:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1566:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1567:000 | DONE lbl | na 16 16 | 005478 |             | xt_tick                              
1568:000 | DONE ins | na 16 16 | 005478 | 20 92 5c    |                 jsr 005c92           ( -- addr u )
1569:000 | DONE wsp | na 16 16 |        |             |
1570:000 | DONE cmt | na 16 16 |        |             |         ; if we got a zero, complain and abort
1571:000 | DONE ins | na 16 16 | 00547b | 98          |                 tya                  force flag check
1572:000 | DONE ins | na 16 16 | 00547c | d0 06       |                 bne 005484           
1573:000 | DONE wsp | na 16 16 |        |             |
1574:000 | DONE ins | na 16 16 | 00547e | a9 e4 71    |                 lda.# 0071e4         
1575:000 | DONE ins | na 16 16 | 005481 | 4c 9c 6a    |                 jmp 006a9c           
1576:000 | DONE wsp | na 16 16 |        |             |
1577:000 | DONE lbl | na 16 16 | 005484 |             | tick_have_word                       
1578:000 | DONE ins | na 16 16 | 005484 | 20 a3 59    |                 jsr 0059a3           ( addr u -- nt)
1579:000 | DONE ins | na 16 16 | 005487 | 98          |                 tya                  force flag check
1580:000 | DONE wsp | na 16 16 |        |             |
1581:000 | DONE cmt | na 16 16 |        |             |         ; if we didn't find string in the dictionary, complain and abort
1582:000 | DONE ins | na 16 16 | 005488 | d0 06       |                 bne 005490           
1583:000 | DONE wsp | na 16 16 |        |             |
1584:000 | DONE ins | na 16 16 | 00548a | a9 81 72    |                 lda.# 007281         
1585:000 | DONE ins | na 16 16 | 00548d | 4c 9c 6a    |                 jmp 006a9c           
1586:000 | DONE wsp | na 16 16 |        |             |
1587:000 | DONE lbl | na 16 16 | 005490 |             | tick_have_nt                         
1588:000 | DONE ins | na 16 16 | 005490 | 20 aa 5b    |                 jsr 005baa           ( nt -- xt )
1589:000 | DONE wsp | na 16 16 |        |             |
1590:000 | DONE lbl | na 16 16 | 005493 |             | z_tick                               
1590:001 | DONE ins | na 16 16 | 005493 | 60          |                 rts                  
1591:000 | DONE wsp | na 16 16 |        |             |
1592:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1593:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1594:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1595:000 | DONE lbl | na 16 16 | 005494 |             | xt_abortq                            
1596:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1597:000 | DONE ins | na 16 16 | 005494 | 20 bd 5d    |                 jsr 005dbd           save string
1598:000 | DONE wsp | na 16 16 |        |             |
1599:000 | DONE ins | na 16 16 | 005497 | f4 9e 54    |                 phe.# 00549e         compile run-time aspect
1600:000 | DONE ins | na 16 16 | 00549a | 20 7b 6a    |                 jsr 006a7b           
1601:000 | DONE wsp | na 16 16 |        |             |
1602:000 | DONE ins | na 16 16 | 00549d | 60          |                 rts                  
1603:000 | DONE wsp | na 16 16 |        |             |
1604:000 | DONE lbl | na 16 16 | 00549e |             | abortq_rt                            
1605:000 | DONE cmt | na 16 16 |        |             |         ; we land here with ( f addr u )
1606:000 | DONE ins | na 16 16 | 00549e | b5 02       |                 lda.dx 02            get flag as 3OS
1607:000 | DONE ins | na 16 16 | 0054a0 | f0 06       |                 beq 0054a8           if FALSE, we're done
1608:000 | DONE wsp | na 16 16 |        |             |
1609:000 | DONE cmt | na 16 16 |        |             |         ; if TRUE, we print string and ABORT
1610:000 | DONE cmt | na 16 16 |        |             |         ; TODO see if we want to inform user we're aborting
1611:000 | DONE ins | na 16 16 | 0054a2 | 20 2a 5f    |                 jsr 005f2a           
1612:000 | DONE ins | na 16 16 | 0054a5 | 4c af 50    |                 jmp 0050af           not JSR because we never come back
1613:000 | DONE wsp | na 16 16 |        |             |
1614:000 | DONE lbl | na 16 16 | 0054a8 |             | abortq_done                          
1615:000 | DONE cmt | na 16 16 |        |             |         ; drop the three entries from the Data Stack
1616:000 | DONE ins | na 16 16 | 0054a8 | b4 04       |                 ldy.dx 04            fourth on the stack
1617:000 | DONE wsp | na 16 16 |        |             |
1618:000 | DONE cmt | na 16 16 |        |             |         ; this is the same size, but three cycles faster than six INX
1619:000 | DONE cmt | na 16 16 |        |             |         ; instructions
1620:000 | DONE ins | na 16 16 | 0054aa | 8a          |                 txa                  
1621:000 | DONE ins | na 16 16 | 0054ab | 18          |                 clc                  
1622:000 | DONE ins | na 16 16 | 0054ac | 69 06 00    |                 adc.# 0006           
1623:000 | DONE ins | na 16 16 | 0054af | aa          |                 tax                  
1624:000 | DONE wsp | na 16 16 |        |             |
1625:000 | DONE lbl | na 16 16 | 0054b0 |             | z_abortq                             
1625:001 | DONE ins | na 16 16 | 0054b0 | 60          |                 rts                  
1626:000 | DONE wsp | na 16 16 |        |             |
1627:000 | DONE wsp | na 16 16 |        |             |
1628:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1629:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1630:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1631:000 | DONE lbl | na 16 16 | 0054b1 |             | xt_abs                               
1632:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1633:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1634:000 | DONE ins | na 16 16 | 0054b1 | 98          |                 tya                  force flag test
1635:000 | DONE ins | na 16 16 | 0054b2 | 10 05       |                 bpl 0054b9           positive number is easy
1636:000 | DONE wsp | na 16 16 |        |             |
1637:000 | DONE cmt | na 16 16 |        |             |         ; negative: Calculate 0-n
1638:000 | DONE ins | na 16 16 | 0054b4 | 49 ff ff    |                 eor.# 0ffff          
1639:000 | DONE ins | na 16 16 | 0054b7 | 1a          |                 inc.a                
1640:000 | DONE ins | na 16 16 | 0054b8 | a8          |                 tay                  
1641:000 | DONE wsp | na 16 16 |        |             |
1642:000 | DONE lbl | na 16 16 | 0054b9 |             | z_abs                                
1642:001 | DONE ins | na 16 16 | 0054b9 | 60          |                 rts                  
1643:000 | DONE wsp | na 16 16 |        |             |
1644:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1645:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1646:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1647:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1648:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE cmt | na 16 16 |        |             | ; Though we're dealing with individual characters, all these actions are
1651:000 | DONE cmt | na 16 16 |        |             | ; performed with a 16 bit A register. The only place we switch is in the kernel
1652:000 | DONE cmt | na 16 16 |        |             | ; routines themselves
1653:000 | DONE lbl | na 16 16 | 0054ba |             | xt_accept                            
1654:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1655:000 | DONE cmt | na 16 16 |        |             |         ; Set up loop
1656:000 | DONE ins | na 16 16 | 0054ba | 98          |                 tya                  force flag test
1657:000 | DONE ins | na 16 16 | 0054bb | d0 05       |                 bne 0054c2           
1658:000 | DONE wsp | na 16 16 |        |             |
1659:000 | DONE cmt | na 16 16 |        |             |         ; if we were told to get zero chars, just quit
1660:000 | DONE ins | na 16 16 | 0054bd | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1661:000 | DONE ins | na 16 16 | 0054be | e8          |                 inx                  
1662:000 | DONE wsp | na 16 16 |        |             |
1663:000 | DONE ins | na 16 16 | 0054bf | 4c 48 55    |                 jmp 005548           no RTS so we can native compile
1664:000 | DONE wsp | na 16 16 |        |             |
1665:000 | DONE lbl | na 16 16 | 0054c2 |             | accept_nonzero                       
1666:000 | DONE ins | na 16 16 | 0054c2 | b5 00       |                 lda.dx 00            address of buffer is NOS
1667:000 | DONE ins | na 16 16 | 0054c4 | 85 1c       |                 sta.d 00001c         
1668:000 | DONE ins | na 16 16 | 0054c6 | e8          |                 inx                  NIP
1669:000 | DONE ins | na 16 16 | 0054c7 | e8          |                 inx                  
1670:000 | DONE wsp | na 16 16 |        |             |
1671:000 | DONE ins | na 16 16 | 0054c8 | 84 1e       |                 sty.d 00001e         Save max number of chars in tmp2
1672:000 | DONE ins | na 16 16 | 0054ca | a0 00 00    |                 ldy.# 0000           Use Y as counter
1673:000 | DONE wsp | na 16 16 |        |             |
1674:000 | DONE lbl | na 16 16 | 0054cd |             | accept_loop                          
1675:000 | DONE cmt | na 16 16 |        |             |         ; We don't need to check for CTRL-l, because a vt100 terminal
1676:000 | DONE cmt | na 16 16 |        |             |         ; clears the screen automatically
1677:000 | DONE wsp | na 16 16 |        |             |
1678:000 | DONE cmt | na 16 16 |        |             |         ; This is a rolled-out version of KEY so we don't spend time
1679:000 | DONE cmt | na 16 16 |        |             |         ; fooling around wit the stack
1680:000 | DONE ins | na 16 16 | 0054cd | 8e 22 00    |                 stx 000022           
1681:000 | DONE ins | na 16 16 | 0054d0 | a2 00 00    |                 ldx.# 0000           
1682:000 | DONE ins | na 16 16 | 0054d3 | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X)
1683:000 | DONE ins | na 16 16 | 0054d6 | a6 22       |                 ldx.d 000022         
1684:000 | DONE wsp | na 16 16 |        |             |
1685:000 | DONE cmt | na 16 16 |        |             |         ; we quit on both line feed and carriage return
1686:000 | DONE ins | na 16 16 | 0054d8 | c9 0a 00    |                 cmp.# AscLF          
1687:000 | DONE ins | na 16 16 | 0054db | f0 43       |                 beq 005520           
1688:000 | DONE ins | na 16 16 | 0054dd | c9 0d 00    |                 cmp.# AscCR          
1689:000 | DONE ins | na 16 16 | 0054e0 | f0 3e       |                 beq 005520           
1690:000 | DONE wsp | na 16 16 |        |             |
1691:000 | DONE cmt | na 16 16 |        |             |         ; BS and DEL do the same thing for the moment
1692:000 | DONE ins | na 16 16 | 0054e2 | c9 08 00    |                 cmp.# AscBS          
1693:000 | DONE ins | na 16 16 | 0054e5 | f0 40       |                 beq 005527           
1694:000 | DONE ins | na 16 16 | 0054e7 | c9 7f 00    |                 cmp.# AscDEL         
1695:000 | DONE ins | na 16 16 | 0054ea | f0 3b       |                 beq 005527           
1696:000 | DONE wsp | na 16 16 |        |             |
1697:000 | DONE cmt | na 16 16 |        |             |         ; CTRL-c and ESC abort (see if this is too harsh)
1698:000 | DONE ins | na 16 16 | 0054ec | c9 03 00    |                 cmp.# AscCC          
1699:000 | DONE ins | na 16 16 | 0054ef | d0 03       |                 bne 0054f4           
1700:000 | DONE ins | na 16 16 | 0054f1 | 4c af 50    |                 jmp 0050af           
1701:000 | DONE lbl | na 16 16 | 0054f4 |             | @                                    
1702:000 | DONE ins | na 16 16 | 0054f4 | c9 1b 00    |                 cmp.# AscESC         
1703:000 | DONE ins | na 16 16 | 0054f7 | d0 03       |                 bne 0054fc           
1704:000 | DONE ins | na 16 16 | 0054f9 | 4c af 50    |                 jmp 0050af           
1705:000 | DONE lbl | na 16 16 | 0054fc |             | @                                    
1706:000 | DONE cmt | na 16 16 |        |             |         ; CTRL-p will be used for "previous cmd", TODO
1707:000 | DONE ins | na 16 16 | 0054fc | c9 10 00    |                 cmp.# AscCP          
1708:000 | DONE ins | na 16 16 | 0054ff | d0 08       |                 bne 005509           
1709:000 | DONE wsp | na 16 16 |        |             |
1710:000 | DONE ins | na 16 16 | 005501 | a9 99 72    |                 lda.# 007299         
1711:000 | DONE ins | na 16 16 | 005504 | 20 a2 6a    |                 jsr 006aa2           
1712:000 | DONE wsp | na 16 16 |        |             |
1713:000 | DONE ins | na 16 16 | 005507 | 80 c4       |                 bra 0054cd           
1714:000 | DONE lbl | na 16 16 | 005509 |             | @                                    
1715:000 | DONE cmt | na 16 16 |        |             |         ; CTRL-n will be used for "next cmd", TODO
1716:000 | DONE ins | na 16 16 | 005509 | c9 0e 00    |                 cmp.# AscCN          
1717:000 | DONE ins | na 16 16 | 00550c | d0 08       |                 bne 005516           
1718:000 | DONE wsp | na 16 16 |        |             |
1719:000 | DONE ins | na 16 16 | 00550e | a9 ac 72    |                 lda.# 0072ac         
1720:000 | DONE ins | na 16 16 | 005511 | 20 a2 6a    |                 jsr 006aa2           
1721:000 | DONE wsp | na 16 16 |        |             |
1722:000 | DONE ins | na 16 16 | 005514 | 80 b7       |                 bra 0054cd           
1723:000 | DONE wsp | na 16 16 |        |             |
1724:000 | DONE lbl | na 16 16 | 005516 |             | @                                    
1725:000 | DONE cmt | na 16 16 |        |             |         ; That's quite enough, echo character. EMIT_A sidesteps all the
1726:000 | DONE cmt | na 16 16 |        |             |         ; fooling around with the Data Stack
1727:000 | DONE ins | na 16 16 | 005516 | 20 10 59    |                 jsr 005910           
1728:000 | DONE wsp | na 16 16 |        |             |
1729:000 | DONE ins | na 16 16 | 005519 | 91 08       |                 sta.diy 000008       STA (CIB),Y
1730:000 | DONE wsp | na 16 16 |        |             |
1731:000 | DONE ins | na 16 16 | 00551b | c8          |                 iny                  
1732:000 | DONE ins | na 16 16 | 00551c | c4 1e       |                 cpy.d 00001e         reached character limit?
1733:000 | DONE ins | na 16 16 | 00551e | d0 ad       |                 bne 0054cd           fall thru if buffer limit reached
1734:000 | DONE wsp | na 16 16 |        |             |
1735:000 | DONE lbl | na 16 16 | 005520 |             | accept_eol                           
1736:000 | DONE ins | na 16 16 | 005520 | 84 0a       |                 sty.d 00000a         Y contains number of chars accepted already
1737:000 | DONE wsp | na 16 16 |        |             |
1738:000 | DONE ins | na 16 16 | 005522 | 20 e2 5e    |                 jsr 005ee2           print final space
1739:000 | DONE ins | na 16 16 | 005525 | 80 21       |                 bra 005548           
1740:000 | DONE wsp | na 16 16 |        |             |
1741:000 | DONE lbl | na 16 16 | 005527 |             | accept_bs                            
1742:000 | DONE ins | na 16 16 | 005527 | c0 00 00    |                 cpy.# 0000           buffer empty?
1743:000 | DONE ins | na 16 16 | 00552a | d0 07       |                 bne 005533           
1744:000 | DONE wsp | na 16 16 |        |             |
1745:000 | DONE ins | na 16 16 | 00552c | a9 07 00    |                 lda.# AscBELL        complain and don't delete beyond the start of line
1746:000 | DONE ins | na 16 16 | 00552f | 20 10 59    |                 jsr 005910           
1747:000 | DONE ins | na 16 16 | 005532 | c8          |                 iny                  
1748:000 | DONE lbl | na 16 16 | 005533 |             | @                                    
1749:000 | DONE ins | na 16 16 | 005533 | 88          |                 dey                  
1750:000 | DONE ins | na 16 16 | 005534 | a9 08 00    |                 lda.# AscBS          move back one
1751:000 | DONE ins | na 16 16 | 005537 | 20 10 59    |                 jsr 005910           
1752:000 | DONE ins | na 16 16 | 00553a | a9 20 00    |                 lda.# AscSP          print a space (rubout)
1753:000 | DONE ins | na 16 16 | 00553d | 20 10 59    |                 jsr 005910           
1754:000 | DONE ins | na 16 16 | 005540 | a9 08 00    |                 lda.# AscBS          move back over space
1755:000 | DONE ins | na 16 16 | 005543 | 20 10 59    |                 jsr 005910           
1756:000 | DONE wsp | na 16 16 |        |             |
1757:000 | DONE ins | na 16 16 | 005546 | 80 85       |                 bra 0054cd           
1758:000 | DONE wsp | na 16 16 |        |             |
1759:000 | DONE lbl | na 16 16 | 005548 |             | z_accept                             
1759:001 | DONE ins | na 16 16 | 005548 | 60          |                 rts                  
1760:000 | DONE wsp | na 16 16 |        |             |
1761:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1762:000 | DONE cmt | na 16 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1763:000 | DONE cmt | na 16 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1764:000 | DONE cmt | na 16 16 |        |             | ; instead of BRA to make sure we have the range.
1765:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1766:000 | DONE lbl | na 16 16 | 005549 |             | xt_again                             
1767:000 | DONE wsp | na 16 16 |        |             |
1768:000 | DONE cmt | na 16 16 |        |             |         ; Add the opcode for a JMP
1769:000 | DONE ins | na 16 16 | 005549 | e2 20       |                 sep 20               
1769:001 | DONE ctl | na  8 16 |        |             |         .!a8
1770:000 | DONE ins | na  8 16 | 00554b | a9 4c       |                 lda.# 4c             
1771:000 | DONE ins | na  8 16 | 00554d | 92 00       |                 sta.di 000000        STA (CP)
1772:000 | DONE ins | na  8 16 | 00554f | c2 20       |                 rep 20               
1772:001 | DONE ctl | na 16 16 |        |             |         .!a16
1773:000 | DONE ins | na 16 16 | 005551 | e6 00       |                 inc.d 000000         
1774:000 | DONE wsp | na 16 16 |        |             |
1775:000 | DONE cmt | na 16 16 |        |             |         ; Add the address which should be TOS
1776:000 | DONE ins | na 16 16 | 005553 | 98          |                 tya                  
1777:000 | DONE ins | na 16 16 | 005554 | 92 00       |                 sta.di 000000        
1778:000 | DONE ins | na 16 16 | 005556 | e6 00       |                 inc.d 000000         
1779:000 | DONE ins | na 16 16 | 005558 | e6 00       |                 inc.d 000000         
1780:000 | DONE wsp | na 16 16 |        |             |
1781:000 | DONE cmt | na 16 16 |        |             |         ; drop the address
1782:000 | DONE ins | na 16 16 | 00555a | b4 00       |                 ldy.dx 00            
1783:000 | DONE ins | na 16 16 | 00555c | e8          |                 inx                  
1784:000 | DONE ins | na 16 16 | 00555d | e8          |                 inx                  
1785:000 | DONE wsp | na 16 16 |        |             |
1786:000 | DONE lbl | na 16 16 | 00555e |             | z_again                              
1786:001 | DONE ins | na 16 16 | 00555e | 60          |                 rts                  
1787:000 | DONE wsp | na 16 16 |        |             |
1788:000 | DONE wsp | na 16 16 |        |             |
1789:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1790:000 | DONE cmt | na 16 16 |        |             | ; ALIGN ( -- ) 1 bytes / X cycles
1791:000 | DONE cmt | na 16 16 |        |             | ; Make sure CP is aligned. This does nothing on the 65816
1792:000 | DONE lbl | na 16 16 | 00555f |             | xt_align                             
1793:000 | DONE ins | na 16 16 | 00555f | ea          |                 nop                  removed during native compile
1794:000 | DONE lbl | na 16 16 | 005560 |             | z_align                              
1794:001 | DONE ins | na 16 16 | 005560 | 60          |                 rts                  
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE wsp | na 16 16 |        |             |
1797:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1798:000 | DONE cmt | na 16 16 |        |             | ; ALIGNED ( addr -- a-addr ) X bytes / X cycles
1799:000 | DONE cmt | na 16 16 |        |             | ; Return the next aligned address. With the 65816, this does nothing
1800:000 | DONE lbl | na 16 16 | 005561 |             | xt_aligned                           
1801:000 | DONE ins | na 16 16 | 005561 | ea          |                 nop                  removed during native compile
1802:000 | DONE lbl | na 16 16 | 005562 |             | z_aligned                            
1802:001 | DONE ins | na 16 16 | 005562 | 60          |                 rts                  
1803:000 | DONE wsp | na 16 16 |        |             |
1804:000 | DONE wsp | na 16 16 |        |             |
1805:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1806:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1807:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1808:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1809:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1810:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1811:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1812:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1813:000 | DONE lbl | na 16 16 | 005563 |             | xt_allot                             
1814:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1815:000 | DONE ins | na 16 16 | 005563 | 98          |                 tya                  force flag check
1816:000 | DONE ins | na 16 16 | 005564 | f0 21       |                 beq 005587           zero bytes, don't do anything
1817:000 | DONE ins | na 16 16 | 005566 | 30 12       |                 bmi 00557a           free memory instead of reserving it
1818:000 | DONE wsp | na 16 16 |        |             |
1819:000 | DONE cmt | na 16 16 |        |             |         ; most common case: reserve n bytes. We've already transfered
1820:000 | DONE cmt | na 16 16 |        |             |         ; TOS to A, so we just have to add the current compile pointer
1821:000 | DONE ins | na 16 16 | 005568 | 18          |                 clc                  
1822:000 | DONE ins | na 16 16 | 005569 | 65 00       |                 adc.d 000000         create new CP
1823:000 | DONE ins | na 16 16 | 00556b | b0 07       |                 bcs 005574           oops, we've wrapped
1824:000 | DONE wsp | na 16 16 |        |             |
1825:000 | DONE ins | na 16 16 | 00556d | a8          |                 tay                  save copy of new CP
1826:000 | DONE wsp | na 16 16 |        |             |
1827:000 | DONE ins | na 16 16 | 00556e | 38          |                 sec                  
1828:000 | DONE ins | na 16 16 | 00556f | e9 ff 4f    |                 sbc.# 004fff         
1829:000 | DONE ins | na 16 16 | 005572 | 30 11       |                 bmi 005585           oops, fall thru if beyond max RAM
1830:000 | DONE wsp | na 16 16 |        |             |
1831:000 | DONE lbl | na 16 16 | 005574 |             | allot_error                          
1832:000 | DONE ins | na 16 16 | 005574 | a9 5f 71    |                 lda.# 00715f         
1833:000 | DONE ins | na 16 16 | 005577 | 4c 9c 6a    |                 jmp 006a9c           
1834:000 | DONE wsp | na 16 16 |        |             |
1835:000 | DONE lbl | na 16 16 | 00557a |             | allot_minus                          
1836:000 | DONE cmt | na 16 16 |        |             |         ; negative value means we're freeing memory
1837:000 | DONE ins | na 16 16 | 00557a | 38          |                 sec                  
1838:000 | DONE ins | na 16 16 | 00557b | e5 00       |                 sbc.d 000000         
1839:000 | DONE ins | na 16 16 | 00557d | 90 f5       |                 bcc 005574           oops, we've wrapped
1840:000 | DONE wsp | na 16 16 |        |             |
1841:000 | DONE ins | na 16 16 | 00557f | a8          |                 tay                  
1842:000 | DONE wsp | na 16 16 |        |             |
1843:000 | DONE ins | na 16 16 | 005580 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1844:000 | DONE ins | na 16 16 | 005583 | 30 ef       |                 bmi 005574           oops, gone too far back
1845:000 | DONE wsp | na 16 16 |        |             |
1846:000 | DONE cmt | na 16 16 |        |             |         ; fall through to allot_done
1847:000 | DONE lbl | na 16 16 | 005585 |             | allot_done                           
1848:000 | DONE ins | na 16 16 | 005585 | 84 00       |                 sty.d 000000         new compiler pointer
1849:000 | DONE lbl | na 16 16 | 005587 |             | allot_real_gone                      
1850:000 | DONE ins | na 16 16 | 005587 | b4 00       |                 ldy.dx 00            DROP
1851:000 | DONE ins | na 16 16 | 005589 | e8          |                 inx                  
1852:000 | DONE ins | na 16 16 | 00558a | e8          |                 inx                  
1853:000 | DONE wsp | na 16 16 |        |             |
1854:000 | DONE lbl | na 16 16 | 00558b |             | z_allot                              
1854:001 | DONE ins | na 16 16 | 00558b | 60          |                 rts                  
1855:000 | DONE wsp | na 16 16 |        |             |
1856:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1857:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1858:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1859:000 | DONE lbl | na 16 16 | 00558c |             | xt_and                               
1860:000 | DONE ins | na 16 16 | 00558c | 98          |                 tya                  
1861:000 | DONE ins | na 16 16 | 00558d | 35 00       |                 and.dx 00            
1862:000 | DONE ins | na 16 16 | 00558f | a8          |                 tay                  
1863:000 | DONE wsp | na 16 16 |        |             |
1864:000 | DONE ins | na 16 16 | 005590 | e8          |                 inx                  NIP
1865:000 | DONE ins | na 16 16 | 005591 | e8          |                 inx                  
1866:000 | DONE wsp | na 16 16 |        |             |
1867:000 | DONE lbl | na 16 16 | 005592 |             | z_and                                
1867:001 | DONE ins | na 16 16 | 005592 | 60          |                 rts                  
1868:000 | DONE wsp | na 16 16 |        |             |
1869:000 | DONE wsp | na 16 16 |        |             |
1870:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1871:000 | DONE cmt | na 16 16 |        |             | ; AT-XY ( nx ny -- ) X bytes / X cycles
1872:000 | DONE cmt | na 16 16 |        |             | ; Move cursor to coordinates given. ESC[<n>;<m>H Do not use U. to print the
1873:000 | DONE cmt | na 16 16 |        |             | ; numbers because the trailing space will not work with xterm (works fine with
1874:000 | DONE cmt | na 16 16 |        |             | ; Mac OS X Terminals, though)
1875:000 | DONE cmt | na 16 16 |        |             | ; TODO doesn't like hex values, need to get rid of byte_to_ascii
1876:000 | DONE cmt | na 16 16 |        |             | ; or call as word with 0 u.r and decimal
1877:000 | DONE lbl | na 16 16 | 005593 |             | xt_at-xy                             
1878:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1879:000 | DONE ins | na 16 16 | 005593 | a9 1b 00    |                 lda.# AscESC         ESC
1880:000 | DONE ins | na 16 16 | 005596 | 20 10 59    |                 jsr 005910           
1881:000 | DONE ins | na 16 16 | 005599 | a9 5b 00    |                 lda.# 5b             [
1882:000 | DONE ins | na 16 16 | 00559c | 20 10 59    |                 jsr 005910           
1883:000 | DONE ins | na 16 16 | 00559f | b5 00       |                 lda.dx 00            x
1884:000 | DONE ins | na 16 16 | 0055a1 | 20 d4 6a    |                 jsr 006ad4           
1885:000 | DONE ins | na 16 16 | 0055a4 | a9 3b 00    |                 lda.# 3b             semicolon
1886:000 | DONE ins | na 16 16 | 0055a7 | 20 10 59    |                 jsr 005910           
1887:000 | DONE ins | na 16 16 | 0055aa | 98          |                 tya                  y
1888:000 | DONE ins | na 16 16 | 0055ab | 20 d4 6a    |                 jsr 006ad4           
1889:000 | DONE ins | na 16 16 | 0055ae | a9 48 00    |                 lda.# 48             H
1890:000 | DONE ins | na 16 16 | 0055b1 | 20 10 59    |                 jsr 005910           
1891:000 | DONE wsp | na 16 16 |        |             |
1892:000 | DONE ins | na 16 16 | 0055b4 | b4 02       |                 ldy.dx 02            
1893:000 | DONE ins | na 16 16 | 0055b6 | e8          |                 inx                  
1894:000 | DONE ins | na 16 16 | 0055b7 | e8          |                 inx                  
1895:000 | DONE ins | na 16 16 | 0055b8 | e8          |                 inx                  
1896:000 | DONE ins | na 16 16 | 0055b9 | e8          |                 inx                  
1897:000 | DONE wsp | na 16 16 |        |             |
1898:000 | DONE lbl | na 16 16 | 0055ba |             | z_at-xy                              
1898:001 | DONE ins | na 16 16 | 0055ba | 60          |                 rts                  
1899:000 | DONE wsp | na 16 16 |        |             |
1900:000 | DONE wsp | na 16 16 |        |             |
1901:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1902:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1903:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1904:000 | DONE lbl | na 16 16 | 0055bb |             | xt_base                              
1905:000 | DONE ins | na 16 16 | 0055bb | ca          |                 dex                  
1906:000 | DONE ins | na 16 16 | 0055bc | ca          |                 dex                  
1907:000 | DONE ins | na 16 16 | 0055bd | 94 00       |                 sty.dx 00            
1908:000 | DONE wsp | na 16 16 |        |             |
1909:000 | DONE ins | na 16 16 | 0055bf | a0 16 00    |                 ldy.# 000016         
1910:000 | DONE wsp | na 16 16 |        |             |
1911:000 | DONE lbl | na 16 16 | 0055c2 |             | z_base                               
1911:001 | DONE ins | na 16 16 | 0055c2 | 60          |                 rts                  
1912:000 | DONE wsp | na 16 16 |        |             |
1913:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1914:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1915:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1916:000 | DONE lbl | na 16 16 | 0055c3 |             | xt_bell                              
1917:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1918:000 | DONE ins | na 16 16 | 0055c3 | a9 07 00    |                 lda.# AscBELL        
1919:000 | DONE ins | na 16 16 | 0055c6 | 20 10 59    |                 jsr 005910           
1920:000 | DONE wsp | na 16 16 |        |             |
1921:000 | DONE lbl | na 16 16 | 0055c9 |             | z_bell                               
1921:001 | DONE ins | na 16 16 | 0055c9 | 60          |                 rts                  
1922:000 | DONE wsp | na 16 16 |        |             |
1923:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1924:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1925:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1926:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
1927:000 | DONE cmt | na 16 16 |        |             | ; but we code it here for speed
1928:000 | DONE lbl | na 16 16 | 0055ca |             | xt_begin                             
1929:000 | DONE cmt | na 16 16 |        |             |         ; really just the same code as HERE
1930:000 | DONE ins | na 16 16 | 0055ca | ca          |                 dex                  
1931:000 | DONE ins | na 16 16 | 0055cb | ca          |                 dex                  
1932:000 | DONE ins | na 16 16 | 0055cc | 94 00       |                 sty.dx 00            
1933:000 | DONE wsp | na 16 16 |        |             |
1934:000 | DONE ins | na 16 16 | 0055ce | a4 00       |                 ldy.d 000000         
1935:000 | DONE wsp | na 16 16 |        |             |
1936:000 | DONE lbl | na 16 16 | 0055d0 |             | z_begin                              
1936:001 | DONE ins | na 16 16 | 0055d0 | 60          |                 rts                  
1937:000 | DONE wsp | na 16 16 |        |             |
1938:000 | DONE wsp | na 16 16 |        |             |
1939:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1940:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1941:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1942:000 | DONE lbl | na 16 16 | 0055d1 |             | xt_bl                                
1943:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1944:000 | DONE ins | na 16 16 | 0055d1 | ca          |                 dex                  
1945:000 | DONE ins | na 16 16 | 0055d2 | ca          |                 dex                  
1946:000 | DONE ins | na 16 16 | 0055d3 | 94 00       |                 sty.dx 00            
1947:000 | DONE ins | na 16 16 | 0055d5 | a0 20 00    |                 ldy.# AscSP          
1948:000 | DONE wsp | na 16 16 |        |             |
1949:000 | DONE lbl | na 16 16 | 0055d8 |             | z_bl                                 
1949:001 | DONE ins | na 16 16 | 0055d8 | 60          |                 rts                  
1950:000 | DONE wsp | na 16 16 |        |             |
1951:000 | DONE wsp | na 16 16 |        |             |
1952:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1953:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1954:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1955:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1956:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler. Uses tmptos
1957:000 | DONE lbl | na 16 16 | 0055d9 |             | xt_bounds                            
1958:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1959:000 | DONE ins | na 16 16 | 0055d9 | 84 24       |                 sty.d 000024         
1960:000 | DONE ins | na 16 16 | 0055db | b4 00       |                 ldy.dx 00            addr now TOS
1961:000 | DONE wsp | na 16 16 |        |             |
1962:000 | DONE ins | na 16 16 | 0055dd | 18          |                 clc                  
1963:000 | DONE ins | na 16 16 | 0055de | 65 24       |                 adc.d 000024         
1964:000 | DONE ins | na 16 16 | 0055e0 | 95 00       |                 sta.dx 00            addr+u now NOS
1965:000 | DONE wsp | na 16 16 |        |             |
1966:000 | DONE lbl | na 16 16 | 0055e2 |             | z_bounds                             
1966:001 | DONE ins | na 16 16 | 0055e2 | 60          |                 rts                  
1967:000 | DONE wsp | na 16 16 |        |             |
1968:000 | DONE wsp | na 16 16 |        |             |
1969:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1970:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1971:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. This word was adapted from Tali Forth. It
1972:000 | DONE cmt | na 16 16 |        |             | ; uses tmpbranch
1973:000 | DONE lbl | na 16 16 | 0055e3 |             | xt_branch                            
1974:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1975:000 | DONE cmt | na 16 16 |        |             |         ; encode subroutine branch to runtime portion
1976:000 | DONE ins | na 16 16 | 0055e3 | f4 ea 55    |                 phe.# 0055ea         
1977:000 | DONE ins | na 16 16 | 0055e6 | 20 7b 6a    |                 jsr 006a7b           
1978:000 | DONE wsp | na 16 16 |        |             |
1979:000 | DONE lbl | na 16 16 | 0055e9 |             | z_branch                             
1979:001 | DONE ins | na 16 16 | 0055e9 | 60          |                 rts                  
1980:000 | DONE wsp | na 16 16 |        |             |
1981:000 | DONE lbl | na 16 16 | 0055ea |             | branch_rt                            
1982:000 | DONE cmt | na 16 16 |        |             |         ; The value on the Return Stack determines where we go to
1983:000 | DONE ins | na 16 16 | 0055ea | 68          |                 pla                  
1984:000 | DONE ins | na 16 16 | 0055eb | 85 1a       |                 sta.d 00001a         
1985:000 | DONE wsp | na 16 16 |        |             |
1986:000 | DONE ins | na 16 16 | 0055ed | 5a          |                 phy                  avoid using temp variables
1987:000 | DONE ins | na 16 16 | 0055ee | a0 01 00    |                 ldy.# 0001           
1988:000 | DONE ins | na 16 16 | 0055f1 | b1 1a       |                 lda.diy 00001a       LDA (TMPBRANCH),Y
1989:000 | DONE ins | na 16 16 | 0055f3 | 7a          |                 ply                  
1990:000 | DONE wsp | na 16 16 |        |             |
1991:000 | DONE ins | na 16 16 | 0055f4 | 3a          |                 dec.a                
1992:000 | DONE ins | na 16 16 | 0055f5 | 48          |                 pha                  put target address back on Return Stack
1993:000 | DONE wsp | na 16 16 |        |             |
1994:000 | DONE ins | na 16 16 | 0055f6 | 60          |                 rts                  
1995:000 | DONE wsp | na 16 16 |        |             |
1996:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1997:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1998:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1999:000 | DONE lbl | na 16 16 | 0055f7 |             | xt_bye                               
2000:000 | DONE ins | na 16 16 | 0055f7 | 78          |                 sei                  
2001:000 | DONE ins | na 16 16 | 0055f8 | d8          |                 cld                  
2002:000 | DONE ins | na 16 16 | 0055f9 | 38          |                 sec                  
2002:001 | DONE ins | na 16 16 | 0055fa | fb          |                 xce                  
2002:002 | DONE ctl | em  8  8 |        |             |         .!emulated
2002:003 | DONE ctl | em  8  8 |        |             |         .!a8
2002:004 | DONE ctl | em  8  8 |        |             |         .!xy8
2003:000 | DONE ins | em  8  8 | 0055fb | 6c fc ff    |                 jmp.i 0fffc          
2004:000 | DONE wsp | em  8  8 |        |             |
2005:000 | DONE lbl | em  8  8 | 0055fe |             | z_bye                                ; never reached
2006:000 | DONE wsp | em  8  8 |        |             |
2007:000 | DONE wsp | em  8  8 |        |             |
2008:000 | DONE cmt | em  8  8 |        |             | ; -------------------------------------------------------------------
2009:000 | DONE cmt | em  8  8 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
2010:000 | DONE cmt | em  8  8 |        |             | ; Store one character in the Dictionary
2011:000 | DONE lbl | em  8  8 | 0055fe |             | xt_c-comma                           
2012:000 | DONE ins | em  8  8 | 0055fe | 98          |                 tya                  
2013:000 | DONE ins | em  8  8 | 0055ff | e2 20       |                 sep 20               
2013:001 | DONE ctl | em  8  8 |        |             |         .!a8
2014:000 | DONE ins | em  8  8 | 005601 | 92 00       |                 sta.di 000000        STA (CP)
2015:000 | DONE ins | em  8  8 | 005603 | c2 20       |                 rep 20               
2015:001 | DONE ctl | em 16  8 |        |             |         .!a16
2016:000 | DONE ins | em 16  8 | 005605 | e6 00       |                 inc.d 000000         quick version of 1 ALLOT
2017:000 | DONE wsp | em 16  8 |        |             |
2018:000 | DONE ins | em 16  8 | 005607 | b4 00       |                 ldy.dx 00            
2019:000 | DONE ins | em 16  8 | 005609 | e8          |                 inx                  
2020:000 | DONE ins | em 16  8 | 00560a | e8          |                 inx                  
2021:000 | DONE wsp | em 16  8 |        |             |
2022:000 | DONE lbl | em 16  8 | 00560b |             | z_c-comma                            
2022:001 | DONE ins | em 16  8 | 00560b | 60          |                 rts                  
2023:000 | DONE wsp | em 16  8 |        |             |
2024:000 | DONE wsp | em 16  8 |        |             |
2025:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2026:000 | DONE cmt | em 16  8 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
2027:000 | DONE cmt | em 16  8 |        |             | ; Get a single byte from the given address
2028:000 | DONE lbl | em 16  8 | 00560c |             | xt_c-fetch                           
2029:000 | DONE ins | em 16  8 | 00560c | e2 20       |                 sep 20               
2029:001 | DONE ctl | em  8  8 |        |             |         .!a8
2030:000 | DONE ins | em  8  8 | 00560e | b9 00 00    |                 lda.y 0000           
2031:000 | DONE ins | em  8  8 | 005611 | c2 20       |                 rep 20               
2031:001 | DONE ctl | em 16  8 |        |             |         .!a16
2032:000 | DONE ins | em 16  8 | 005613 | 29 ff 00    |                 and.# 00ff           
2033:000 | DONE ins | em 16  8 | 005616 | a8          |                 tay                  
2034:000 | DONE wsp | em 16  8 |        |             |
2035:000 | DONE lbl | em 16  8 | 005617 |             | z_c-fetch                            
2035:001 | DONE ins | em 16  8 | 005617 | 60          |                 rts                  
2036:000 | DONE wsp | em 16  8 |        |             |
2037:000 | DONE wsp | em 16  8 |        |             |
2038:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2039:000 | DONE cmt | em 16  8 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
2040:000 | DONE cmt | em 16  8 |        |             | ; Store LSB of NOS at location given as TOS
2041:000 | DONE lbl | em 16  8 | 005618 |             | xt_c-store                           
2042:000 | DONE ins | em 16  8 | 005618 | b5 00       |                 lda.dx 00            
2043:000 | DONE ins | em 16  8 | 00561a | e2 20       |                 sep 20               
2043:001 | DONE ctl | em  8  8 |        |             |         .!a8
2044:000 | DONE ins | em  8  8 | 00561c | 99 00 00    |                 sta.y 0000           
2045:000 | DONE ins | em  8  8 | 00561f | c2 20       |                 rep 20               
2045:001 | DONE ctl | em 16  8 |        |             |         .!a16
2046:000 | DONE ins | em 16  8 | 005621 | b4 02       |                 ldy.dx 02            
2047:000 | DONE ins | em 16  8 | 005623 | e8          |                 inx                  
2048:000 | DONE ins | em 16  8 | 005624 | e8          |                 inx                  
2049:000 | DONE ins | em 16  8 | 005625 | e8          |                 inx                  
2050:000 | DONE ins | em 16  8 | 005626 | e8          |                 inx                  
2051:000 | DONE wsp | em 16  8 |        |             |
2052:000 | DONE lbl | em 16  8 | 005627 |             | z_c-store                            
2052:001 | DONE ins | em 16  8 | 005627 | 60          |                 rts                  
2053:000 | DONE wsp | em 16  8 |        |             |
2054:000 | DONE wsp | em 16  8 |        |             |
2055:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2056:000 | DONE cmt | em 16  8 |        |             | ; CELL+ ( u -- u+2 ) X bytes / X cycles
2057:000 | DONE cmt | em 16  8 |        |             | ; Add the size of one cell to the value on top of the stack. Since this is
2058:000 | DONE cmt | em 16  8 |        |             | ; a 16-bit cell size, we add two
2059:000 | DONE lbl | em 16  8 | 005628 |             | xt_cellplus                          
2060:000 | DONE ins | em 16  8 | 005628 | c8          |                 iny                  
2061:000 | DONE ins | em 16  8 | 005629 | c8          |                 iny                  
2062:000 | DONE wsp | em 16  8 |        |             |
2063:000 | DONE lbl | em 16  8 | 00562a |             | z_cellplus                           
2063:001 | DONE ins | em 16  8 | 00562a | 60          |                 rts                  
2064:000 | DONE wsp | em 16  8 |        |             |
2065:000 | DONE wsp | em 16  8 |        |             |
2066:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2067:000 | DONE cmt | em 16  8 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
2068:000 | DONE cmt | em 16  8 |        |             | ; Given a number of cells, return the number of bytes that they will require.
2069:000 | DONE cmt | em 16  8 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
2070:000 | DONE cmt | em 16  8 |        |             | ; returned by 2*, see there.
2071:000 | DONE wsp | em 16  8 |        |             |
2072:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2073:000 | DONE cmt | em 16  8 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
2074:000 | DONE cmt | em 16  8 |        |             | ; Convert a character to its ASCII value
2075:000 | DONE lbl | em 16  8 | 00562b |             | xt_char                              
2076:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2077:000 | DONE ins | em 16  8 | 00562b | 20 92 5c    |                 jsr 005c92           ( -- addr u )
2078:000 | DONE wsp | em 16  8 |        |             |
2079:000 | DONE cmt | em 16  8 |        |             |         ; if we got back a zero, we have a problem
2080:000 | DONE ins | em 16  8 | 00562e | 98          |                 tya                  force flag check
2081:000 | DONE ins | em 16  8 | 00562f | d0 06       |                 bne 005637           
2082:000 | DONE wsp | em 16  8 |        |             |
2083:000 | DONE ins | em 16  8 | 005631 | a9 e4 71    |                 lda.# 0071e4         
2084:000 | DONE ins | em 16  8 | 005634 | 4c 9c 6a    |                 jmp 006a9c           
2085:000 | DONE wsp | em 16  8 |        |             |
2086:000 | DONE lbl | em 16  8 | 005637 |             | char_got_char                        
2087:000 | DONE ins | em 16  8 | 005637 | b4 00       |                 ldy.dx 00            get addr from NOS
2088:000 | DONE ins | em 16  8 | 005639 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
2089:000 | DONE ins | em 16  8 | 00563c | 29 ff 00    |                 and.# 00ff           
2090:000 | DONE ins | em 16  8 | 00563f | a8          |                 tay                  
2091:000 | DONE wsp | em 16  8 |        |             |
2092:000 | DONE ins | em 16  8 | 005640 | e8          |                 inx                  
2093:000 | DONE ins | em 16  8 | 005641 | e8          |                 inx                  
2094:000 | DONE wsp | em 16  8 |        |             |
2095:000 | DONE lbl | em 16  8 | 005642 |             | z_char                               
2095:001 | DONE ins | em 16  8 | 005642 | 60          |                 rts                  
2096:000 | DONE wsp | em 16  8 |        |             |
2097:000 | DONE wsp | em 16  8 |        |             |
2098:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2099:000 | DONE cmt | em 16  8 |        |             | ; CHARPLUS ( u -- u+1 ) X bytes / X cycles
2100:000 | DONE cmt | em 16  8 |        |             | ; Adds the size of a character to the value on top of the stack. Since our
2101:000 | DONE cmt | em 16  8 |        |             | ; character size is one, this is the same code as 1+, see there
2102:000 | DONE wsp | em 16  8 |        |             |
2103:000 | DONE wsp | em 16  8 |        |             |
2104:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2105:000 | DONE cmt | em 16  8 |        |             | ; CHARS ( u -- u ) X bytes / X cycles
2106:000 | DONE cmt | em 16  8 |        |             | ; Return the size in bytes of the number of characters on the top of the stack.
2107:000 | DONE cmt | em 16  8 |        |             | ; In this case, does nothing
2108:000 | DONE lbl | em 16  8 | 005643 |             | xt_chars                             
2109:000 | DONE wsp | em 16  8 |        |             |
2110:000 | DONE ins | em 16  8 | 005643 | ea          |                 nop                  will be removed during native compile
2111:000 | DONE lbl | em 16  8 | 005644 |             | z_chars                              
2111:001 | DONE ins | em 16  8 | 005644 | 60          |                 rts                  
2112:000 | DONE wsp | em 16  8 |        |             |
2113:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2114:000 | DONE cmt | em 16  8 |        |             | ; CMOVE ( addr1 addr2 u -- ) X bytes / X cycles
2115:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a lower to a higher address. Because of the danger of
2116:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the end of the source string (addr1+u) and copy
2117:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the end of the destination address (addr2+u). This is what the
2118:000 | DONE cmt | em 16  8 |        |             | ; MVP instruction is for. Use MOVE if you are not sure what to do.
2119:000 | DONE cmt | em 16  8 |        |             | ;       =====* source
2120:000 | DONE cmt | em 16  8 |        |             | ;          ====* destination
2121:000 | DONE lbl | em 16  8 | 005645 |             | xt_cmove                             
2122:000 | DONE cmt | em 16  8 |        |             |         ; We start at the end of the blocks, so we have to increase both
2123:000 | DONE cmt | em 16  8 |        |             |         ; addr1 and addr2 by u
2124:000 | DONE ins | em 16  8 | 005645 | 98          |                 tya                  
2125:000 | DONE ins | em 16  8 | 005646 | 18          |                 clc                  
2126:000 | DONE ins | em 16  8 | 005647 | 75 02       |                 adc.dx 02            source, goes in X
2127:000 | DONE ins | em 16  8 | 005649 | 3a          |                 dec.a                convert length to index
2128:000 | DONE ins | em 16  8 | 00564a | 95 02       |                 sta.dx 02            
2129:000 | DONE wsp | em 16  8 |        |             |
2130:000 | DONE ins | em 16  8 | 00564c | 98          |                 tya                  
2131:000 | DONE ins | em 16  8 | 00564d | 18          |                 clc                  
2132:000 | DONE ins | em 16  8 | 00564e | 75 00       |                 adc.dx 00            destination, goes in Y
2133:000 | DONE ins | em 16  8 | 005650 | 3a          |                 dec.a                convert length to index
2134:000 | DONE wsp | em 16  8 |        |             |
2135:000 | DONE ins | em 16  8 | 005651 | 86 22       |                 stx.d 000022         keep DSP safe
2136:000 | DONE wsp | em 16  8 |        |             |
2137:000 | DONE ins | em 16  8 | 005653 | 88          |                 dey                  
2138:000 | DONE ins | em 16  8 | 005654 | 5a          |                 phy                  save number of bytes to transfer
2139:000 | DONE wsp | em 16  8 |        |             |
2140:000 | DONE ins | em 16  8 | 005655 | a8          |                 tay                  destination now in Y
2141:000 | DONE wsp | em 16  8 |        |             |
2142:000 | DONE ins | em 16  8 | 005656 | b5 02       |                 lda.dx 02            get source address
2143:000 | DONE ins | em 16  8 | 005658 | aa          |                 tax                  
2144:000 | DONE wsp | em 16  8 |        |             |
2145:000 | DONE ins | em 16  8 | 005659 | 68          |                 pla                  retrieve number of bytes to transfer
2146:000 | DONE ins | em 16  8 | 00565a | 44 00 00    |                 mvp 0                
2146:001 | DONE ctl | em 16  8 |        |             |            
2147:000 | DONE wsp | em 16  8 |        |             |
2148:000 | DONE ins | em 16  8 | 00565d | a6 22       |                 ldx.d 000022         
2149:000 | DONE ins | em 16  8 | 00565f | b4 04       |                 ldy.dx 04            
2150:000 | DONE wsp | em 16  8 |        |             |
2151:000 | DONE ins | em 16  8 | 005661 | 8a          |                 txa                  It's worth addition for three cells dropped
2152:000 | DONE ins | em 16  8 | 005662 | 18          |                 clc                  
2153:000 | DONE ins | em 16  8 | 005663 | 69 06 00    |                 adc.# 0006           
2154:000 | DONE ins | em 16  8 | 005666 | aa          |                 tax                  
2155:000 | DONE wsp | em 16  8 |        |             |
2156:000 | DONE lbl | em 16  8 | 005667 |             | z_cmove                              
2156:001 | DONE ins | em 16  8 | 005667 | 60          |                 rts                  
2157:000 | DONE wsp | em 16  8 |        |             |
2158:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2159:000 | DONE cmt | em 16  8 |        |             | ; CMOVE> ( addr1 addr 2 u -- ) X bytes / X cycles
2160:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a higher to a lower address. Because of the danger of
2161:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the beginning of the source (addr1) to copy it
2162:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the beginning of the destination (addr2). This is what the MVN
2163:000 | DONE cmt | em 16  8 |        |             | ; instruction is for. Use MOVE if you are not sure what to do.
2164:000 | DONE cmt | em 16  8 |        |             | ;          *==== source
2165:000 | DONE cmt | em 16  8 |        |             | ;       *===== destination
2166:000 | DONE lbl | em 16  8 | 005668 |             | xt_cmoveup                           
2167:000 | DONE ins | em 16  8 | 005668 | 86 22       |                 stx.d 000022         keep DSP safe
2168:000 | DONE wsp | em 16  8 |        |             |
2169:000 | DONE ins | em 16  8 | 00566a | 88          |                 dey                  
2170:000 | DONE ins | em 16  8 | 00566b | 5a          |                 phy                  save number of bytes to transfer
2171:000 | DONE wsp | em 16  8 |        |             |
2172:000 | DONE ins | em 16  8 | 00566c | b5 00       |                 lda.dx 00            get destination address
2173:000 | DONE ins | em 16  8 | 00566e | a8          |                 tay                  
2174:000 | DONE wsp | em 16  8 |        |             |
2175:000 | DONE ins | em 16  8 | 00566f | b5 02       |                 lda.dx 02            get source address
2176:000 | DONE ins | em 16  8 | 005671 | aa          |                 tax                  
2177:000 | DONE wsp | em 16  8 |        |             |
2178:000 | DONE ins | em 16  8 | 005672 | 68          |                 pla                  retrieve number of bytes to transfer
2179:000 | DONE ins | em 16  8 | 005673 | 54 00 00    |                 mvn 0                
2179:001 | DONE ctl | em 16  8 |        |             |            
2180:000 | DONE wsp | em 16  8 |        |             |
2181:000 | DONE ins | em 16  8 | 005676 | a6 22       |                 ldx.d 000022         
2182:000 | DONE ins | em 16  8 | 005678 | b4 04       |                 ldy.dx 04            
2183:000 | DONE wsp | em 16  8 |        |             |
2184:000 | DONE ins | em 16  8 | 00567a | 8a          |                 txa                  It's worth addition for three cells dropped
2185:000 | DONE ins | em 16  8 | 00567b | 18          |                 clc                  
2186:000 | DONE ins | em 16  8 | 00567c | 69 06 00    |                 adc.# 0006           
2187:000 | DONE ins | em 16  8 | 00567f | aa          |                 tax                  
2188:000 | DONE wsp | em 16  8 |        |             |
2189:000 | DONE lbl | em 16  8 | 005680 |             | z_cmoveup                            
2189:001 | DONE ins | em 16  8 | 005680 | 60          |                 rts                  
2190:000 | DONE wsp | em 16  8 |        |             |
2191:000 | DONE wsp | em 16  8 |        |             |
2192:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2193:000 | DONE cmt | em 16  8 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
2194:000 | DONE cmt | em 16  8 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
2195:000 | DONE cmt | em 16  8 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
2196:000 | DONE cmt | em 16  8 |        |             | ; we're in compile mode
2197:000 | DONE lbl | em 16  8 | 005681 |             | xt_compile-only                      
2198:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2199:000 | DONE ins | em 16  8 | 005681 | a9 04 00    |                 lda.# CO             
2200:000 | DONE ins | em 16  8 | 005684 | eb          |                 xba                  flags are MSB
2201:000 | DONE ins | em 16  8 | 005685 | 12 02       |                 ora.di 000002        ORA (DP)
2202:000 | DONE ins | em 16  8 | 005687 | 92 02       |                 sta.di 000002        
2203:000 | DONE wsp | em 16  8 |        |             |
2204:000 | DONE lbl | em 16  8 | 005689 |             | z_compile-only                       
2204:001 | DONE ins | em 16  8 | 005689 | 60          |                 rts                  
2205:000 | DONE wsp | em 16  8 |        |             |
2206:000 | DONE wsp | em 16  8 |        |             |
2207:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2208:000 | DONE cmt | em 16  8 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
2209:000 | DONE cmt | em 16  8 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
2210:000 | DONE cmt | em 16  8 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
2211:000 | DONE cmt | em 16  8 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
2212:000 | DONE cmt | em 16  8 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
2213:000 | DONE cmt | em 16  8 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
2214:000 | DONE cmt | em 16  8 |        |             | ; natively coded: If the size is larger than NC_LIMIT, we silently use
2215:000 | DONE cmt | em 16  8 |        |             | ; subroutine coding. If the FN (Force Native) flag is set, the word is always
2216:000 | DONE cmt | em 16  8 |        |             | ; natively compiled
2217:000 | DONE cmt | em 16  8 |        |             | ; TODO currently just compiles subroutine jumps
2218:000 | DONE lbl | em 16  8 | 00568a |             | xt_compilecomma                      
2219:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2220:000 | DONE cmt | em 16  8 |        |             |                 ; First, see if this is Force Native compile word by checking
2221:000 | DONE cmt | em 16  8 |        |             |                 ; the FN flag. We need the nt for this
2222:000 | DONE ins | em 16  8 | 00568a | 5a          |                 phy                  save copy of xt
2223:000 | DONE wsp | em 16  8 |        |             |
2224:000 | DONE ins | em 16  8 | 00568b | 20 88 5a    |                 jsr 005a88           ( xt -- nt )
2225:000 | DONE wsp | em 16  8 |        |             |
2226:000 | DONE ins | em 16  8 | 00568e | b9 00 00    |                 lda.y 0000           Get content of nt
2227:000 | DONE ins | em 16  8 | 005691 | eb          |                 xba                  flags are MSB
2228:000 | DONE ins | em 16  8 | 005692 | 29 08 00    |                 and.# FN             mask everything but Compile Only bit
2229:000 | DONE ins | em 16  8 | 005695 | f0 05       |                 beq 00569c           
2230:000 | DONE wsp | em 16  8 |        |             |
2231:000 | DONE cmt | em 16  8 |        |             |                 ; We're natively compiling no matter what. Get the length and
2232:000 | DONE cmt | em 16  8 |        |             |                 ; compile as code
2233:000 | DONE ins | em 16  8 | 005697 | 20 9e 60    |                 jsr 00609e           ( nt -- u )
2234:000 | DONE ins | em 16  8 | 00569a | 80 12       |                 bra 0056ae           
2235:000 | DONE wsp | em 16  8 |        |             |
2236:000 | DONE lbl | em 16  8 | 00569c |             | compile_check                        
2237:000 | DONE cmt | em 16  8 |        |             |                 ; Now see if native compile is even allowed by checking the NC
2238:000 | DONE cmt | em 16  8 |        |             |                 ; flag
2239:000 | DONE ins | em 16  8 | 00569c | b9 00 00    |                 lda.y 0000           
2240:000 | DONE ins | em 16  8 | 00569f | eb          |                 xba                  
2241:000 | DONE ins | em 16  8 | 0056a0 | 29 01 00    |                 and.# NC             
2242:000 | DONE ins | em 16  8 | 0056a3 | f0 62       |                 beq 005707           
2243:000 | DONE wsp | em 16  8 |        |             |
2244:000 | DONE cmt | em 16  8 |        |             |                 ; Native compile is legal, but we have to see what limit the
2245:000 | DONE cmt | em 16  8 |        |             |                 ; user set. WORDSIZE takes nt
2246:000 | DONE ins | em 16  8 | 0056a5 | 20 9e 60    |                 jsr 00609e           ( nt -- u )
2247:000 | DONE ins | em 16  8 | 0056a8 | 98          |                 tya                  
2248:000 | DONE ins | em 16  8 | 0056a9 | 18          |                 clc                  
2249:000 | DONE ins | em 16  8 | 0056aa | c5 26       |                 cmp.d 000026         
2250:000 | DONE ins | em 16  8 | 0056ac | b0 59       |                 bcs 005707           if too large, compile as a jump
2251:000 | DONE wsp | em 16  8 |        |             |
2252:000 | DONE lbl | em 16  8 | 0056ae |             | compile_as_code                      
2253:000 | DONE cmt | em 16  8 |        |             |                 ; We arrive here with the length of the word TOS ( u ) and xt on
2254:000 | DONE cmt | em 16  8 |        |             |                 ; top of the return stack. MOVE will need ( xt cp u ) on the
2255:000 | DONE cmt | em 16  8 |        |             |                 ; Data Stack
2256:000 | DONE ins | em 16  8 | 0056ae | ca          |                 dex                  
2257:000 | DONE ins | em 16  8 | 0056af | ca          |                 dex                  
2258:000 | DONE ins | em 16  8 | 0056b0 | 68          |                 pla                  
2259:000 | DONE ins | em 16  8 | 0056b1 | 95 00       |                 sta.dx 00            ( xt u )
2260:000 | DONE wsp | em 16  8 |        |             |
2261:000 | DONE ins | em 16  8 | 0056b3 | ca          |                 dex                  
2262:000 | DONE ins | em 16  8 | 0056b4 | ca          |                 dex                  
2263:000 | DONE ins | em 16  8 | 0056b5 | a5 00       |                 lda.d 000000         
2264:000 | DONE ins | em 16  8 | 0056b7 | 95 00       |                 sta.dx 00            ( xt cp u )
2265:000 | DONE wsp | em 16  8 |        |             |
2266:000 | DONE wsp | em 16  8 |        |             |
2267:000 | DONE cmt | em 16  8 |        |             |                 ; --- SPECIAL CASES ---
2268:000 | DONE wsp | em 16  8 |        |             |
2269:000 | DONE cmt | em 16  8 |        |             |                 ; 1. Don't compile NOP instructions: Length of code is 1, and
2270:000 | DONE cmt | em 16  8 |        |             |                 ; the instruction is $EA
2271:000 | DONE ins | em 16  8 | 0056b9 | 98          |                 tya                  
2272:000 | DONE ins | em 16  8 | 0056ba | 3a          |                 dec.a                
2273:000 | DONE ins | em 16  8 | 0056bb | d0 14       |                 bne 0056d1           
2274:000 | DONE wsp | em 16  8 |        |             |
2275:000 | DONE ins | em 16  8 | 0056bd | a1 02       |                 lda.dxi 02           
2276:000 | DONE ins | em 16  8 | 0056bf | 29 ff 00    |                 and.# 00ff           
2277:000 | DONE ins | em 16  8 | 0056c2 | c9 ea 00    |                 cmp.# 00ea           opcode for NOP
2278:000 | DONE ins | em 16  8 | 0056c5 | d0 0a       |                 bne 0056d1           
2279:000 | DONE wsp | em 16  8 |        |             |
2280:000 | DONE cmt | em 16  8 |        |             |                 ; It's a single NOP. Clear the data stack and return
2281:000 | DONE ins | em 16  8 | 0056c7 | b4 04       |                 ldy.dx 04            
2282:000 | DONE ins | em 16  8 | 0056c9 | 8a          |                 txa                  
2283:000 | DONE ins | em 16  8 | 0056ca | 18          |                 clc                  
2284:000 | DONE ins | em 16  8 | 0056cb | 69 06 00    |                 adc.# 0006           
2285:000 | DONE ins | em 16  8 | 0056ce | aa          |                 tax                  
2286:000 | DONE wsp | em 16  8 |        |             |
2287:000 | DONE ins | em 16  8 | 0056cf | 80 4c       |                 bra 00571d           
2288:000 | DONE wsp | em 16  8 |        |             |
2289:000 | DONE lbl | em 16  8 | 0056d1 |             | compile_not_nop                      
2290:000 | DONE wsp | em 16  8 |        |             |
2291:000 | DONE cmt | em 16  8 |        |             |                 ; 2. Strip PLA/PHA off >R and R>
2292:000 | DONE ins | em 16  8 | 0056d1 | b5 02       |                 lda.dx 02            get xt
2293:000 | DONE ins | em 16  8 | 0056d3 | c9 bd 51    |                 cmp.# 0051bd         
2294:000 | DONE ins | em 16  8 | 0056d6 | f0 11       |                 beq 0056e9           
2295:000 | DONE ins | em 16  8 | 0056d8 | c9 54 5d    |                 cmp.# 005d54         
2296:000 | DONE ins | em 16  8 | 0056db | f0 0c       |                 beq 0056e9           
2297:000 | DONE wsp | em 16  8 |        |             |
2298:000 | DONE cmt | em 16  8 |        |             |                 ; 3. Strip off stuff from 2>R and 2R>
2299:000 | DONE ins | em 16  8 | 0056dd | c9 05 54    |                 cmp.# 005405         
2300:000 | DONE ins | em 16  8 | 0056e0 | f0 0d       |                 beq 0056ef           
2301:000 | DONE ins | em 16  8 | 0056e2 | c9 35 54    |                 cmp.# 005435         
2302:000 | DONE ins | em 16  8 | 0056e5 | f0 08       |                 beq 0056ef           
2303:000 | DONE wsp | em 16  8 |        |             |
2304:000 | DONE ins | em 16  8 | 0056e7 | 80 12       |                 bra 0056fb           not a special case
2305:000 | DONE wsp | em 16  8 |        |             |
2306:000 | DONE lbl | em 16  8 | 0056e9 |             | compile_r                            
2307:000 | DONE cmt | em 16  8 |        |             |                 ; We have either >R or R>. To simplify, drop the first and last
2308:000 | DONE cmt | em 16  8 |        |             |                 ; instruction (one byte).
2309:000 | DONE ins | em 16  8 | 0056e9 | f6 02       |                 inc.dx 02            start one byte later
2310:000 | DONE ins | em 16  8 | 0056eb | 88          |                 dey                  transfer two bytes less
2311:000 | DONE ins | em 16  8 | 0056ec | 88          |                 dey                  
2312:000 | DONE ins | em 16  8 | 0056ed | 80 0c       |                 bra 0056fb           
2313:000 | DONE wsp | em 16  8 |        |             |
2314:000 | DONE lbl | em 16  8 | 0056ef |             | compile_2r                           
2315:000 | DONE cmt | em 16  8 |        |             |                 ; We have either 2>R or 2R>. To simplify, drop the first and
2316:000 | DONE cmt | em 16  8 |        |             |                 ; last three bytes
2317:000 | DONE ins | em 16  8 | 0056ef | f6 02       |                 inc.dx 02            
2318:000 | DONE ins | em 16  8 | 0056f1 | f6 02       |                 inc.dx 02            
2319:000 | DONE ins | em 16  8 | 0056f3 | f6 02       |                 inc.dx 02            
2320:000 | DONE ins | em 16  8 | 0056f5 | 98          |                 tya                  
2321:000 | DONE ins | em 16  8 | 0056f6 | 38          |                 sec                  
2322:000 | DONE ins | em 16  8 | 0056f7 | e9 06 00    |                 sbc.# 0006           
2323:000 | DONE ins | em 16  8 | 0056fa | a8          |                 tay                  fall through to compile_move
2324:000 | DONE wsp | em 16  8 |        |             |
2325:000 | DONE lbl | em 16  8 | 0056fb |             | compile_move                         
2326:000 | DONE cmt | em 16  8 |        |             |                 ; Enough of this, compile the word already
2327:000 | DONE wsp | em 16  8 |        |             |
2328:000 | DONE ins | em 16  8 | 0056fb | 5a          |                 phy                  we need a copy of length for the CP
2329:000 | DONE wsp | em 16  8 |        |             |
2330:000 | DONE ins | em 16  8 | 0056fc | 20 96 5b    |                 jsr 005b96           ( xt cp u -- )
2331:000 | DONE wsp | em 16  8 |        |             |
2332:000 | DONE ins | em 16  8 | 0056ff | 68          |                 pla                  
2333:000 | DONE ins | em 16  8 | 005700 | 18          |                 clc                  update CP
2334:000 | DONE ins | em 16  8 | 005701 | 65 00       |                 adc.d 000000         
2335:000 | DONE ins | em 16  8 | 005703 | 85 00       |                 sta.d 000000         
2336:000 | DONE wsp | em 16  8 |        |             |
2337:000 | DONE ins | em 16  8 | 005705 | 80 16       |                 bra 00571d           
2338:000 | DONE wsp | em 16  8 |        |             |
2339:000 | DONE lbl | em 16  8 | 005707 |             | compile_as_jump                      
2340:000 | DONE cmt | em 16  8 |        |             |                 ; Compile xt as a subroutine jump.
2341:000 | DONE ins | em 16  8 | 005707 | 7a          |                 ply                  get xt back
2342:000 | DONE ins | em 16  8 | 005708 | e2 20       |                 sep 20               
2342:001 | DONE ctl | em  8  8 |        |             |         .!a8
2343:000 | DONE ins | em  8  8 | 00570a | a9 20       |                 lda.# 20             opcode for JSR
2344:000 | DONE ins | em  8  8 | 00570c | 92 00       |                 sta.di 000000        STA (CP)
2345:000 | DONE ins | em  8  8 | 00570e | c2 20       |                 rep 20               
2345:001 | DONE ctl | em 16  8 |        |             |         .!a16
2346:000 | DONE ins | em 16  8 | 005710 | e6 00       |                 inc.d 000000         
2347:000 | DONE wsp | em 16  8 |        |             |
2348:000 | DONE cmt | em 16  8 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
2349:000 | DONE cmt | em 16  8 |        |             |                 ; hard way
2350:000 | DONE ins | em 16  8 | 005712 | 98          |                 tya                  
2351:000 | DONE ins | em 16  8 | 005713 | 92 00       |                 sta.di 000000        
2352:000 | DONE ins | em 16  8 | 005715 | e6 00       |                 inc.d 000000         
2353:000 | DONE ins | em 16  8 | 005717 | e6 00       |                 inc.d 000000         
2354:000 | DONE wsp | em 16  8 |        |             |
2355:000 | DONE ins | em 16  8 | 005719 | b4 00       |                 ldy.dx 00            
2356:000 | DONE ins | em 16  8 | 00571b | e8          |                 inx                  
2357:000 | DONE ins | em 16  8 | 00571c | e8          |                 inx                  
2358:000 | DONE wsp | em 16  8 |        |             |
2359:000 | DONE lbl | em 16  8 | 00571d |             | z_compilecomma                       
2359:001 | DONE ins | em 16  8 | 00571d | 60          |                 rts                  
2360:000 | DONE wsp | em 16  8 |        |             |
2361:000 | DONE wsp | em 16  8 |        |             |
2362:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2363:000 | DONE cmt | em 16  8 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
2364:000 | DONE cmt | em 16  8 |        |             | ; Associate a fixed value with a word. This could be realized as
2365:000 | DONE cmt | em 16  8 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
2366:000 | DONE cmt | em 16  8 |        |             | ; lifting.
2367:000 | DONE cmt | em 16  8 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
2368:000 | DONE cmt | em 16  8 |        |             | ; this works in various Forths.
2369:000 | DONE lbl | em 16  8 | 00571e |             | xt_constant                          
2370:000 | DONE ins | em 16  8 | 00571e | 20 62 57    |                 jsr 005762           
2371:000 | DONE wsp | em 16  8 |        |             |
2372:000 | DONE cmt | em 16  8 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2373:000 | DONE cmt | em 16  8 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
2374:000 | DONE cmt | em 16  8 |        |             |                 ; the subroutine jump target
2375:000 | DONE ins | em 16  8 | 005721 | a5 00       |                 lda.d 000000         
2376:000 | DONE ins | em 16  8 | 005723 | 3a          |                 dec.a                
2377:000 | DONE ins | em 16  8 | 005724 | 3a          |                 dec.a                
2378:000 | DONE ins | em 16  8 | 005725 | 85 1c       |                 sta.d 00001c         
2379:000 | DONE wsp | em 16  8 |        |             |
2380:000 | DONE ins | em 16  8 | 005727 | a9 e6 69    |                 lda.# 0069e6         
2381:000 | DONE ins | em 16  8 | 00572a | 92 1c       |                 sta.di 00001c        STA (TMP1)
2382:000 | DONE wsp | em 16  8 |        |             |
2383:000 | DONE cmt | em 16  8 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
2384:000 | DONE ins | em 16  8 | 00572c | 98          |                 tya                  there is no "sty.di cp"
2385:000 | DONE ins | em 16  8 | 00572d | 92 00       |                 sta.di 000000        
2386:000 | DONE ins | em 16  8 | 00572f | e6 00       |                 inc.d 000000         
2387:000 | DONE ins | em 16  8 | 005731 | e6 00       |                 inc.d 000000         
2388:000 | DONE wsp | em 16  8 |        |             |
2389:000 | DONE ins | em 16  8 | 005733 | b4 00       |                 ldy.dx 00            DROP
2390:000 | DONE ins | em 16  8 | 005735 | e8          |                 inx                  
2391:000 | DONE ins | em 16  8 | 005736 | e8          |                 inx                  drop through to adjust_z
2392:000 | DONE wsp | em 16  8 |        |             |
2393:000 | DONE cmt | em 16  8 |        |             |                 ; Now the length of the complete word (z_word) has increased by
2394:000 | DONE cmt | em 16  8 |        |             |                 ; two. We need to update that number or else words such as SEE
2395:000 | DONE cmt | em 16  8 |        |             |                 ; will ignore the PFA. We use this same routine for VARIABLE,
2396:000 | DONE cmt | em 16  8 |        |             |                 ; VALUE and DEFER
2397:000 | DONE lbl | em 16  8 | 005737 |             | adjust_z                             
2398:000 | DONE ins | em 16  8 | 005737 | 20 d8 5a    |                 jsr 005ad8           gives us ( nt )
2399:000 | DONE wsp | em 16  8 |        |             |
2400:000 | DONE cmt | em 16  8 |        |             |                 ; z_word is kept six bytes further down
2401:000 | DONE ins | em 16  8 | 00573a | 98          |                 tya                  
2402:000 | DONE ins | em 16  8 | 00573b | 18          |                 clc                  
2403:000 | DONE ins | em 16  8 | 00573c | 69 06 00    |                 adc.# 0006           
2404:000 | DONE ins | em 16  8 | 00573f | a8          |                 tay                  
2405:000 | DONE wsp | em 16  8 |        |             |
2406:000 | DONE ins | em 16  8 | 005740 | b9 00 00    |                 lda.y 0000           LDA 0000,Y
2407:000 | DONE ins | em 16  8 | 005743 | 1a          |                 inc.a                
2408:000 | DONE ins | em 16  8 | 005744 | 1a          |                 inc.a                
2409:000 | DONE ins | em 16  8 | 005745 | 99 00 00    |                 sta.y 0000           
2410:000 | DONE wsp | em 16  8 |        |             |
2411:000 | DONE ins | em 16  8 | 005748 | b4 00       |                 ldy.dx 00            get rid of nt
2412:000 | DONE ins | em 16  8 | 00574a | e8          |                 inx                  
2413:000 | DONE ins | em 16  8 | 00574b | e8          |                 inx                  
2414:000 | DONE wsp | em 16  8 |        |             |
2415:000 | DONE lbl | em 16  8 | 00574c |             | z_constant                           
2415:001 | DONE ins | em 16  8 | 00574c | 60          |                 rts                  
2416:000 | DONE wsp | em 16  8 |        |             |
2417:000 | DONE wsp | em 16  8 |        |             |
2418:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2419:000 | DONE cmt | em 16  8 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
2420:000 | DONE cmt | em 16  8 |        |             | ; Convert old-style character string to address-length pair. Note that the
2421:000 | DONE cmt | em 16  8 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
2422:000 | DONE cmt | em 16  8 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
2423:000 | DONE cmt | em 16  8 |        |             | ; to step through a string character by character.
2424:000 | DONE lbl | em 16  8 | 00574d |             | xt_count                             
2425:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2426:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2427:000 | DONE ins | em 16 16 | 00574d | 98          |                 tya                  
2428:000 | DONE ins | em 16 16 | 00574e | 1a          |                 inc.a                String address starts one char later
2429:000 | DONE wsp | em 16 16 |        |             |
2430:000 | DONE ins | em 16 16 | 00574f | ca          |                 dex                  
2431:000 | DONE ins | em 16 16 | 005750 | ca          |                 dex                  
2432:000 | DONE ins | em 16 16 | 005751 | 95 00       |                 sta.dx 00            NOS
2433:000 | DONE wsp | em 16 16 |        |             |
2434:000 | DONE ins | em 16 16 | 005753 | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
2435:000 | DONE ins | em 16 16 | 005756 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
2436:000 | DONE ins | em 16 16 | 005759 | a8          |                 tay                  TOS
2437:000 | DONE wsp | em 16 16 |        |             |
2438:000 | DONE lbl | em 16 16 | 00575a |             | z_count                              
2438:001 | DONE ins | em 16 16 | 00575a | 60          |                 rts                  
2439:000 | DONE wsp | em 16 16 |        |             |
2440:000 | DONE wsp | em 16 16 |        |             |
2441:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2442:000 | DONE cmt | em 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
2443:000 | DONE cmt | em 16 16 |        |             | ; Cause following output to appear at beginning of next line
2444:000 | DONE lbl | em 16 16 | 00575b |             | xt_cr                                
2445:000 | DONE ins | em 16 16 | 00575b | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
2446:000 | DONE ins | em 16 16 | 00575e | 20 10 59    |                 jsr 005910           
2447:000 | DONE wsp | em 16 16 |        |             |
2448:000 | DONE lbl | em 16 16 | 005761 |             | z_cr                                 
2448:001 | DONE ins | em 16 16 | 005761 | 60          |                 rts                  
2449:000 | DONE wsp | em 16 16 |        |             |
2450:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2451:000 | DONE cmt | em 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
2452:000 | DONE cmt | em 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
2453:000 | DONE cmt | em 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
2454:000 | DONE cmt | em 16 16 |        |             | ; address.
2455:000 | DONE lbl | em 16 16 | 005762 |             | xt_create                            
2456:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2457:000 | DONE ins | em 16 16 | 005762 | 20 92 5c    |                 jsr 005c92           ( -- addr u )
2458:000 | DONE ins | em 16 16 | 005765 | d0 06       |                 bne 00576d           
2459:000 | DONE wsp | em 16 16 |        |             |
2460:000 | DONE cmt | em 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
2461:000 | DONE ins | em 16 16 | 005767 | a9 e4 71    |                 lda.# 0071e4         
2462:000 | DONE ins | em 16 16 | 00576a | 4c 9c 6a    |                 jmp 006a9c           
2463:000 | DONE wsp | em 16 16 |        |             |
2464:000 | DONE lbl | em 16 16 | 00576d |             | create_got_name                      
2465:000 | DONE cmt | em 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
2466:000 | DONE cmt | em 16 16 |        |             |                 ; word
2467:000 | DONE ins | em 16 16 | 00576d | a5 00       |                 lda.d 000000         
2468:000 | DONE ins | em 16 16 | 00576f | 85 1c       |                 sta.d 00001c         save start of new word
2469:000 | DONE wsp | em 16 16 |        |             |
2470:000 | DONE cmt | em 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
2471:000 | DONE cmt | em 16 16 |        |             |                 ; of the length of the given string. We arrive here with
2472:000 | DONE cmt | em 16 16 |        |             |                 ; ( addr u )
2473:000 | DONE ins | em 16 16 | 005771 | 98          |                 tya                  
2474:000 | DONE ins | em 16 16 | 005772 | 29 ff 00    |                 and.# 00ff           
2475:000 | DONE ins | em 16 16 | 005775 | 85 1e       |                 sta.d 00001e         save length of name string
2476:000 | DONE wsp | em 16 16 |        |             |
2477:000 | DONE cmt | em 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
2478:000 | DONE cmt | em 16 16 |        |             |                 ; header. This is also the offset for the start of the code
2479:000 | DONE cmt | em 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
2480:000 | DONE cmt | em 16 16 |        |             |                 ; could just allot the space afterwards.
2481:000 | DONE ins | em 16 16 | 005777 | 18          |                 clc                  
2482:000 | DONE ins | em 16 16 | 005778 | 69 08 00    |                 adc.# 0008           
2483:000 | DONE ins | em 16 16 | 00577b | 85 20       |                 sta.d 000020         total bytes required for header
2484:000 | DONE wsp | em 16 16 |        |             |
2485:000 | DONE cmt | em 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
2486:000 | DONE cmt | em 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
2487:000 | DONE cmt | em 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
2488:000 | DONE ins | em 16 16 | 00577d | 1a          |                 inc.a                
2489:000 | DONE ins | em 16 16 | 00577e | 1a          |                 inc.a                
2490:000 | DONE ins | em 16 16 | 00577f | 1a          |                 inc.a                
2491:000 | DONE wsp | em 16 16 |        |             |
2492:000 | DONE cmt | em 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
2493:000 | DONE cmt | em 16 16 |        |             |                 ; and so we don't have to fool around with the stack
2494:000 | DONE ins | em 16 16 | 005780 | 18          |                 clc                  
2495:000 | DONE ins | em 16 16 | 005781 | 65 00       |                 adc.d 000000         
2496:000 | DONE ins | em 16 16 | 005783 | 85 00       |                 sta.d 000000         
2497:000 | DONE wsp | em 16 16 |        |             |
2498:000 | DONE cmt | em 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
2499:000 | DONE cmt | em 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
2500:000 | DONE cmt | em 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
2501:000 | DONE cmt | em 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
2502:000 | DONE cmt | em 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
2503:000 | DONE ins | em 16 16 | 005785 | b5 00       |                 lda.dx 00            
2504:000 | DONE ins | em 16 16 | 005787 | 48          |                 pha                  
2505:000 | DONE wsp | em 16 16 |        |             |
2506:000 | DONE cmt | em 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
2507:000 | DONE ins | em 16 16 | 005788 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
2508:000 | DONE ins | em 16 16 | 00578b | a5 1e       |                 lda.d 00001e         get length byte
2509:000 | DONE ins | em 16 16 | 00578d | 91 1c       |                 sta.diy 00001c       STA (TMP1),Y
2510:000 | DONE ins | em 16 16 | 00578f | c8          |                 iny                  
2511:000 | DONE ins | em 16 16 | 005790 | c8          |                 iny                  
2512:000 | DONE wsp | em 16 16 |        |             |
2513:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
2514:000 | DONE cmt | em 16 16 |        |             |                 ; current Dictionary Pointer
2515:000 | DONE ins | em 16 16 | 005791 | a5 02       |                 lda.d 000002         
2516:000 | DONE ins | em 16 16 | 005793 | 91 1c       |                 sta.diy 00001c       
2517:000 | DONE ins | em 16 16 | 005795 | c8          |                 iny                  
2518:000 | DONE ins | em 16 16 | 005796 | c8          |                 iny                  
2519:000 | DONE wsp | em 16 16 |        |             |
2520:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
2521:000 | DONE cmt | em 16 16 |        |             |                 ; This begins after the header, so we take the length of the
2522:000 | DONE cmt | em 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
2523:000 | DONE cmt | em 16 16 |        |             |                 ; the address of the start of the word
2524:000 | DONE ins | em 16 16 | 005797 | a5 1c       |                 lda.d 00001c         can't use CP, because we've allotted space
2525:000 | DONE ins | em 16 16 | 005799 | 85 02       |                 sta.d 000002         while we've got it, make old CP the new DP
2526:000 | DONE wsp | em 16 16 |        |             |
2527:000 | DONE ins | em 16 16 | 00579b | 18          |                 clc                  
2528:000 | DONE ins | em 16 16 | 00579c | 65 20       |                 adc.d 000020         total header length
2529:000 | DONE ins | em 16 16 | 00579e | 91 1c       |                 sta.diy 00001c       
2530:000 | DONE ins | em 16 16 | 0057a0 | c8          |                 iny                  
2531:000 | DONE ins | em 16 16 | 0057a1 | c8          |                 iny                  
2532:000 | DONE wsp | em 16 16 |        |             |
2533:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
2534:000 | DONE cmt | em 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
2535:000 | DONE cmt | em 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
2536:000 | DONE cmt | em 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
2537:000 | DONE cmt | em 16 16 |        |             |                 ; compilation. The start of the code field is still in A
2538:000 | DONE ins | em 16 16 | 0057a2 | 1a          |                 inc.a                
2539:000 | DONE ins | em 16 16 | 0057a3 | 1a          |                 inc.a                
2540:000 | DONE ins | em 16 16 | 0057a4 | 1a          |                 inc.a                
2541:000 | DONE ins | em 16 16 | 0057a5 | 91 1c       |                 sta.diy 00001c       
2542:000 | DONE ins | em 16 16 | 0057a7 | c8          |                 iny                  
2543:000 | DONE ins | em 16 16 | 0057a8 | c8          |                 iny                  
2544:000 | DONE wsp | em 16 16 |        |             |
2545:000 | DONE cmt | em 16 16 |        |             |                 ; BYTE 8: Start of name string
2546:000 | DONE cmt | em 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
2547:000 | DONE cmt | em 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
2548:000 | DONE cmt | em 16 16 |        |             |                 ; so we can use the same loop index
2549:000 | DONE ins | em 16 16 | 0057a9 | 68          |                 pla                  get back string address
2550:000 | DONE ins | em 16 16 | 0057aa | 38          |                 sec                  
2551:000 | DONE ins | em 16 16 | 0057ab | e9 08 00    |                 sbc.# 0008           
2552:000 | DONE ins | em 16 16 | 0057ae | 85 20       |                 sta.d 000020         
2553:000 | DONE ins | em 16 16 | 0057b0 | e2 20       |                 sep 20               
2553:001 | DONE ctl | em  8 16 |        |             |         .!a8
2554:000 | DONE lbl | em  8 16 | 0057b2 |             | @                                    
2555:000 | DONE ins | em  8 16 | 0057b2 | b1 20       |                 lda.diy 000020       
2556:000 | DONE ins | em  8 16 | 0057b4 | 91 1c       |                 sta.diy 00001c       
2557:000 | DONE ins | em  8 16 | 0057b6 | c8          |                 iny                  
2558:000 | DONE ins | em  8 16 | 0057b7 | c6 1e       |                 dec.d 00001e         
2559:000 | DONE ins | em  8 16 | 0057b9 | d0 f7       |                 bne 0057b2           
2560:000 | DONE wsp | em  8 16 |        |             |
2561:000 | DONE cmt | em  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
2562:000 | DONE cmt | em  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
2563:000 | DONE cmt | em  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
2564:000 | DONE cmt | em  8 16 |        |             |                 ; good
2565:000 | DONE ins | em  8 16 | 0057bb | a9 20       |                 lda.# 20             opcode of JSR
2566:000 | DONE ins | em  8 16 | 0057bd | 91 1c       |                 sta.diy 00001c       
2567:000 | DONE ins | em  8 16 | 0057bf | c8          |                 iny                  single increase only because we have 8-bit A
2568:000 | DONE wsp | em  8 16 |        |             |
2569:000 | DONE ins | em  8 16 | 0057c0 | a9 10       |                 lda.# .lsb 006a10    
2570:000 | DONE ins | em  8 16 | 0057c2 | 91 1c       |                 sta.diy 00001c       
2571:000 | DONE ins | em  8 16 | 0057c4 | c8          |                 iny                  
2572:000 | DONE wsp | em  8 16 |        |             |
2573:000 | DONE ins | em  8 16 | 0057c5 | a9 6a       |                 lda.# .msb 006a10    
2574:000 | DONE ins | em  8 16 | 0057c7 | 91 1c       |                 sta.diy 00001c       
2575:000 | DONE wsp | em  8 16 |        |             |
2576:000 | DONE ins | em  8 16 | 0057c9 | c2 20       |                 rep 20               
2576:001 | DONE ctl | em 16 16 |        |             |         .!a16
2577:000 | DONE cmt | em 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
2578:000 | DONE ins | em 16 16 | 0057cb | b4 02       |                 ldy.dx 02            
2579:000 | DONE ins | em 16 16 | 0057cd | e8          |                 inx                  
2580:000 | DONE ins | em 16 16 | 0057ce | e8          |                 inx                  
2581:000 | DONE ins | em 16 16 | 0057cf | e8          |                 inx                  
2582:000 | DONE ins | em 16 16 | 0057d0 | e8          |                 inx                  
2583:000 | DONE wsp | em 16 16 |        |             |
2584:000 | DONE lbl | em 16 16 | 0057d1 |             | z_create                             
2584:001 | DONE ins | em 16 16 | 0057d1 | 60          |                 rts                  
2585:000 | DONE wsp | em 16 16 |        |             |
2586:000 | DONE wsp | em 16 16 |        |             |
2587:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2588:000 | DONE cmt | em 16 16 |        |             | ; DEFER ( "name" -- ) X bytes / X cycles
2589:000 | DONE cmt | em 16 16 |        |             | ; Reserve an name that can be linked to various xt by IS. The ANSI reference
2590:000 | DONE cmt | em 16 16 |        |             | ; implementation is CREATE ['] ABORT , DOES> @ EXECUTE ; but we use this as
2591:000 | DONE cmt | em 16 16 |        |             | ; a low-level word so we can set stuff up earlier and faster
2592:000 | DONE lbl | em 16 16 | 0057d2 |             | xt_defer                             
2593:000 | DONE ins | em 16 16 | 0057d2 | 20 62 57    |                 jsr 005762           
2594:000 | DONE wsp | em 16 16 |        |             |
2595:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2596:000 | DONE cmt | em 16 16 |        |             |                 ; actually want DODEFER this time. Go back two bytes and repace
2597:000 | DONE cmt | em 16 16 |        |             |                 ; the subroutine jump target
2598:000 | DONE ins | em 16 16 | 0057d5 | a5 00       |                 lda.d 000000         
2599:000 | DONE ins | em 16 16 | 0057d7 | 3a          |                 dec.a                
2600:000 | DONE ins | em 16 16 | 0057d8 | 3a          |                 dec.a                
2601:000 | DONE ins | em 16 16 | 0057d9 | 85 1c       |                 sta.d 00001c         
2602:000 | DONE wsp | em 16 16 |        |             |
2603:000 | DONE ins | em 16 16 | 0057db | a9 f4 69    |                 lda.# 0069f4         
2604:000 | DONE ins | em 16 16 | 0057de | 92 1c       |                 sta.di 00001c        STA (TMP1)
2605:000 | DONE wsp | em 16 16 |        |             |
2606:000 | DONE cmt | em 16 16 |        |             |                 ; DODEFER executes the next address it finds after its call. As
2607:000 | DONE cmt | em 16 16 |        |             |                 ; a default, we include the error "Defer not defined"
2608:000 | DONE ins | em 16 16 | 0057e0 | a9 fd 69    |                 lda.# 0069fd         
2609:000 | DONE ins | em 16 16 | 0057e3 | 92 00       |                 sta.di 000000        
2610:000 | DONE ins | em 16 16 | 0057e5 | e6 00       |                 inc.d 000000         
2611:000 | DONE ins | em 16 16 | 0057e7 | e6 00       |                 inc.d 000000         
2612:000 | DONE wsp | em 16 16 |        |             |
2613:000 | DONE ins | em 16 16 | 0057e9 | 20 37 57    |                 jsr 005737           adjust the header to the correct length
2614:000 | DONE wsp | em 16 16 |        |             |
2615:000 | DONE lbl | em 16 16 | 0057ec |             | z_defer                              
2615:001 | DONE ins | em 16 16 | 0057ec | 60          |                 rts                  
2616:000 | DONE wsp | em 16 16 |        |             |
2617:000 | DONE wsp | em 16 16 |        |             |
2618:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2619:000 | DONE cmt | em 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
2620:000 | DONE cmt | em 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
2621:000 | DONE cmt | em 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
2622:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2623:000 | DONE cmt | em 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
2624:000 | DONE cmt | em 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
2625:000 | DONE cmt | em 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
2626:000 | DONE cmt | em 16 16 |        |             | ; following pForth and Gforth.
2627:000 | DONE lbl | em 16 16 | 0057ed |             | xt_digitq                            
2628:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2629:000 | DONE ins | em 16 16 | 0057ed | 98          |                 tya                  
2630:000 | DONE ins | em 16 16 | 0057ee | 29 ff 00    |                 and.# 00ff           paranoid
2631:000 | DONE wsp | em 16 16 |        |             |
2632:000 | DONE ins | em 16 16 | 0057f1 | e2 20       |                 sep 20               
2632:001 | DONE ctl | em  8 16 |        |             |         .!a8
2633:000 | DONE cmt | em  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
2634:000 | DONE ins | em  8 16 | 0057f3 | c9 30       |                 cmp.# 30             
2635:000 | DONE ins | em  8 16 | 0057f5 | 90 1d       |                 bcc 005814           
2636:000 | DONE wsp | em  8 16 |        |             |
2637:000 | DONE cmt | em  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
2638:000 | DONE cmt | em  8 16 |        |             |                 ; a normal number
2639:000 | DONE ins | em  8 16 | 0057f7 | c9 3a       |                 cmp.# 00003a         This is ':'
2640:000 | DONE ins | em  8 16 | 0057f9 | 90 12       |                 bcc 00580d           
2641:000 | DONE wsp | em  8 16 |        |             |
2642:000 | DONE cmt | em  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
2643:000 | DONE cmt | em  8 16 |        |             |                 ; we can treat the whole range as a number
2644:000 | DONE ins | em  8 16 | 0057fb | c9 40       |                 cmp.# 000040         This is '@'
2645:000 | DONE ins | em  8 16 | 0057fd | 90 15       |                 bcc 005814           
2646:000 | DONE wsp | em  8 16 |        |             |
2647:000 | DONE cmt | em  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
2648:000 | DONE ins | em  8 16 | 0057ff | c9 61       |                 cmp.# 61             
2649:000 | DONE ins | em  8 16 | 005801 | 90 07       |                 bcc 00580a           not lower case, too low
2650:000 | DONE ins | em  8 16 | 005803 | c9 7b       |                 cmp.# 00007b         
2651:000 | DONE ins | em  8 16 | 005805 | b0 03       |                 bcs 00580a           not lower case, too high
2652:000 | DONE wsp | em  8 16 |        |             |
2653:000 | DONE ins | em  8 16 | 005807 | 18          |                 clc                  just right
2654:000 | DONE ins | em  8 16 | 005808 | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
2655:000 | DONE wsp | em  8 16 |        |             |
2656:000 | DONE lbl | em  8 16 | 00580a |             | dq_case_done                         
2657:000 | DONE cmt | em  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
2658:000 | DONE cmt | em  8 16 |        |             |                 ; whole range as one number
2659:000 | DONE ins | em  8 16 | 00580a | 38          |                 sec                  
2660:000 | DONE ins | em  8 16 | 00580b | e9 07       |                 sbc.# 07             fall through to dq_checkbase
2661:000 | DONE wsp | em  8 16 |        |             |
2662:000 | DONE lbl | em  8 16 | 00580d |             | dq_checkbase                         
2663:000 | DONE cmt | em  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
2664:000 | DONE ins | em  8 16 | 00580d | 38          |                 sec                  
2665:000 | DONE ins | em  8 16 | 00580e | e9 30       |                 sbc.# 30             This is also the actual conversion step
2666:000 | DONE ins | em  8 16 | 005810 | c5 16       |                 cmp.d 000016         
2667:000 | DONE ins | em  8 16 | 005812 | 90 0b       |                 bcc 00581f           
2668:000 | DONE wsp | em  8 16 |        |             |
2669:000 | DONE lbl | em  8 16 | 005814 |             | dq_notdigit                          
2670:000 | DONE cmt | em  8 16 |        |             |                 ; not a digit, add a false flag
2671:000 | DONE ins | em  8 16 | 005814 | ca          |                 dex                  
2672:000 | DONE ins | em  8 16 | 005815 | ca          |                 dex                  
2673:000 | DONE ins | em  8 16 | 005816 | 94 00       |                 sty.dx 00            keep the offending character in NOS
2674:000 | DONE ins | em  8 16 | 005818 | a0 00 00    |                 ldy.# 0000           
2675:000 | DONE ins | em  8 16 | 00581b | c2 20       |                 rep 20               
2675:001 | DONE ctl | em 16 16 |        |             |         .!a16
2676:000 | DONE ins | em 16 16 | 00581d | 80 09       |                 bra 005828           
2677:000 | DONE wsp | em 16 16 |        |             |
2678:000 | DONE lbl | em 16 16 | 00581f |             | dq_success                           
2679:000 | DONE ins | em 16 16 | 00581f | ca          |                 dex                  
2680:000 | DONE ins | em 16 16 | 005820 | ca          |                 dex                  
2681:000 | DONE ins | em 16 16 | 005821 | c2 20       |                 rep 20               
2681:001 | DONE ctl | em 16 16 |        |             |         .!a16
2682:000 | DONE ins | em 16 16 | 005823 | 95 00       |                 sta.dx 00            put the number in NOS
2683:000 | DONE ins | em 16 16 | 005825 | a0 ff ff    |                 ldy.# 0ffff          
2684:000 | DONE wsp | em 16 16 |        |             |
2685:000 | DONE lbl | em 16 16 | 005828 |             | z_digitq                             
2685:001 | DONE ins | em 16 16 | 005828 | 60          |                 rts                  
2686:000 | DONE wsp | em 16 16 |        |             |
2687:000 | DONE wsp | em 16 16 |        |             |
2688:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2689:000 | DONE cmt | em 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
2690:000 | DONE cmt | em 16 16 |        |             | ; Add two double cell numbers
2691:000 | DONE lbl | em 16 16 | 005829 |             | xt_dplus                             
2692:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2693:000 | DONE ins | em 16 16 | 005829 | 5a          |                 phy                  save hi word of first number, frees Y
2694:000 | DONE ins | em 16 16 | 00582a | b5 00       |                 lda.dx 00            lo word of first number
2695:000 | DONE ins | em 16 16 | 00582c | 18          |                 clc                  
2696:000 | DONE ins | em 16 16 | 00582d | 75 04       |                 adc.dx 04            add lo word of second number
2697:000 | DONE ins | em 16 16 | 00582f | a8          |                 tay                  
2698:000 | DONE wsp | em 16 16 |        |             |
2699:000 | DONE ins | em 16 16 | 005830 | 68          |                 pla                  get hi word of first number
2700:000 | DONE ins | em 16 16 | 005831 | 75 02       |                 adc.dx 02            add hi word of second number
2701:000 | DONE wsp | em 16 16 |        |             |
2702:000 | DONE ins | em 16 16 | 005833 | e8          |                 inx                  
2703:000 | DONE ins | em 16 16 | 005834 | e8          |                 inx                  
2704:000 | DONE ins | em 16 16 | 005835 | e8          |                 inx                  
2705:000 | DONE ins | em 16 16 | 005836 | e8          |                 inx                  
2706:000 | DONE wsp | em 16 16 |        |             |
2707:000 | DONE ins | em 16 16 | 005837 | 94 00       |                 sty.dx 00            lo result goes NOS
2708:000 | DONE ins | em 16 16 | 005839 | a8          |                 tay                  to result goes TOS
2709:000 | DONE wsp | em 16 16 |        |             |
2710:000 | DONE lbl | em 16 16 | 00583a |             | z_dplus                              
2710:001 | DONE ins | em 16 16 | 00583a | 60          |                 rts                  
2711:000 | DONE wsp | em 16 16 |        |             |
2712:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2713:000 | DONE cmt | em 16 16 |        |             | ; DMINUS ( d d -- d ) X bytes / X cycles
2714:000 | DONE cmt | em 16 16 |        |             | ; Subtract two double cell numbers
2715:000 | DONE lbl | em 16 16 | 00583b |             | xt_dminus                            
2716:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2717:000 | DONE ins | em 16 16 | 00583b | b5 04       |                 lda.dx 04            lo word NOS
2718:000 | DONE ins | em 16 16 | 00583d | 38          |                 sec                  
2719:000 | DONE ins | em 16 16 | 00583e | f5 00       |                 sbc.dx 00            lo word TOS
2720:000 | DONE ins | em 16 16 | 005840 | 48          |                 pha                  
2721:000 | DONE wsp | em 16 16 |        |             |
2722:000 | DONE ins | em 16 16 | 005841 | 94 00       |                 sty.dx 00            use as temp storage for hi word TOS
2723:000 | DONE ins | em 16 16 | 005843 | b5 02       |                 lda.dx 02            hi word, NOS
2724:000 | DONE ins | em 16 16 | 005845 | f5 00       |                 sbc.dx 00            hi word, TOS
2725:000 | DONE ins | em 16 16 | 005847 | a8          |                 tay                  result hi word now TOS
2726:000 | DONE wsp | em 16 16 |        |             |
2727:000 | DONE ins | em 16 16 | 005848 | e8          |                 inx                  
2728:000 | DONE ins | em 16 16 | 005849 | e8          |                 inx                  
2729:000 | DONE ins | em 16 16 | 00584a | e8          |                 inx                  
2730:000 | DONE ins | em 16 16 | 00584b | e8          |                 inx                  
2731:000 | DONE wsp | em 16 16 |        |             |
2732:000 | DONE ins | em 16 16 | 00584c | 68          |                 pla                  
2733:000 | DONE ins | em 16 16 | 00584d | 95 00       |                 sta.dx 00            result lo word now NOS
2734:000 | DONE wsp | em 16 16 |        |             |
2735:000 | DONE lbl | em 16 16 | 00584f |             | z_dminus                             
2735:001 | DONE ins | em 16 16 | 00584f | 60          |                 rts                  
2736:000 | DONE wsp | em 16 16 |        |             |
2737:000 | DONE wsp | em 16 16 |        |             |
2738:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2739:000 | DONE cmt | em 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2740:000 | DONE cmt | em 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2741:000 | DONE cmt | em 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2742:000 | DONE cmt | em 16 16 |        |             | ; TODO make this work the way Gforth's does
2743:000 | DONE lbl | em 16 16 | 005850 |             | xt_dtos                              
2744:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2745:000 | DONE ins | em 16 16 | 005850 | b4 00       |                 ldy.dx 00            
2746:000 | DONE ins | em 16 16 | 005852 | e8          |                 inx                  
2747:000 | DONE ins | em 16 16 | 005853 | e8          |                 inx                  
2748:000 | DONE wsp | em 16 16 |        |             |
2749:000 | DONE lbl | em 16 16 | 005854 |             | z_dtos                               
2749:001 | DONE ins | em 16 16 | 005854 | 60          |                 rts                  
2750:000 | DONE wsp | em 16 16 |        |             |
2751:000 | DONE wsp | em 16 16 |        |             |
2752:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2753:000 | DONE cmt | em 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2754:000 | DONE cmt | em 16 16 |        |             | ; Return the absolute value of a double number
2755:000 | DONE cmt | em 16 16 |        |             | ; TODO recode in assembler
2756:000 | DONE lbl | em 16 16 | 005855 |             | xt_dabs                              
2757:000 | DONE cmt | em 16 16 |        |             |                 ; double cell is TOS
2758:000 | DONE ins | em 16 16 | 005855 | 98          |                 tya                  force flag test
2759:000 | DONE ins | em 16 16 | 005856 | f0 03       |                 beq 00585b           already positive, life is good
2760:000 | DONE wsp | em 16 16 |        |             |
2761:000 | DONE ins | em 16 16 | 005858 | 20 71 58    |                 jsr 005871           
2762:000 | DONE wsp | em 16 16 |        |             |
2763:000 | DONE lbl | em 16 16 | 00585b |             | z_dabs                               
2763:001 | DONE ins | em 16 16 | 00585b | 60          |                 rts                  
2764:000 | DONE wsp | em 16 16 |        |             |
2765:000 | DONE wsp | em 16 16 |        |             |
2766:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2767:000 | DONE cmt | em 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2768:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 10
2769:000 | DONE lbl | em 16 16 | 00585c |             | xt_decimal                           
2770:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2771:000 | DONE ins | em 16 16 | 00585c | a9 0a 00    |                 lda.# 000a           
2772:000 | DONE ins | em 16 16 | 00585f | 85 16       |                 sta.d 000016         
2773:000 | DONE wsp | em 16 16 |        |             |
2774:000 | DONE lbl | em 16 16 | 005861 |             | z_decimal                            
2774:001 | DONE ins | em 16 16 | 005861 | 60          |                 rts                  
2775:000 | DONE wsp | em 16 16 |        |             |
2776:000 | DONE wsp | em 16 16 |        |             |
2777:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2778:000 | DONE cmt | em 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2779:000 | DONE cmt | em 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2780:000 | DONE cmt | em 16 16 |        |             | ; Assumes X is valid as the DSP.
2781:000 | DONE lbl | em 16 16 | 005862 |             | xt_depth                             
2782:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2783:000 | DONE cmt | em 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2784:000 | DONE ins | em 16 16 | 005862 | 86 22       |                 stx.d 000022         
2785:000 | DONE ins | em 16 16 | 005864 | a9 ff 00    |                 lda.# 0000ff         
2786:000 | DONE ins | em 16 16 | 005867 | 38          |                 sec                  
2787:000 | DONE ins | em 16 16 | 005868 | e5 22       |                 sbc.d 000022         
2788:000 | DONE wsp | em 16 16 |        |             |
2789:000 | DONE cmt | em 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2790:000 | DONE ins | em 16 16 | 00586a | 4a          |                 lsr.a                
2791:000 | DONE wsp | em 16 16 |        |             |
2792:000 | DONE ins | em 16 16 | 00586b | ca          |                 dex                  
2793:000 | DONE ins | em 16 16 | 00586c | ca          |                 dex                  
2794:000 | DONE ins | em 16 16 | 00586d | 94 00       |                 sty.dx 00            
2795:000 | DONE wsp | em 16 16 |        |             |
2796:000 | DONE cmt | em 16 16 |        |             |                 ; push result to stack
2797:000 | DONE ins | em 16 16 | 00586f | a8          |                 tay                  
2798:000 | DONE wsp | em 16 16 |        |             |
2799:000 | DONE lbl | em 16 16 | 005870 |             | z_depth                              
2799:001 | DONE ins | em 16 16 | 005870 | 60          |                 rts                  
2800:000 | DONE wsp | em 16 16 |        |             |
2801:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2802:000 | DONE cmt | em 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2803:000 | DONE cmt | em 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2804:000 | DONE lbl | em 16 16 | 005871 |             | xt_dnegate                           
2805:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2806:000 | DONE cmt | em 16 16 |        |             |                 ; start off with LSW (in NOS)
2807:000 | DONE ins | em 16 16 | 005871 | b5 00       |                 lda.dx 00            
2808:000 | DONE ins | em 16 16 | 005873 | 49 ff ff    |                 eor.# 0ffff          
2809:000 | DONE wsp | em 16 16 |        |             |
2810:000 | DONE cmt | em 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2811:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
2812:000 | DONE ins | em 16 16 | 005876 | 18          |                 clc                  
2813:000 | DONE ins | em 16 16 | 005877 | 69 01 00    |                 adc.# 0001           
2814:000 | DONE ins | em 16 16 | 00587a | 95 00       |                 sta.dx 00            
2815:000 | DONE wsp | em 16 16 |        |             |
2816:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
2817:000 | DONE ins | em 16 16 | 00587c | 98          |                 tya                  
2818:000 | DONE ins | em 16 16 | 00587d | 49 ff ff    |                 eor.# 0ffff          
2819:000 | DONE ins | em 16 16 | 005880 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2820:000 | DONE ins | em 16 16 | 005883 | a8          |                 tay                  
2821:000 | DONE wsp | em 16 16 |        |             |
2822:000 | DONE lbl | em 16 16 | 005884 |             | z_dnegate                            
2822:001 | DONE ins | em 16 16 | 005884 | 60          |                 rts                  
2823:000 | DONE wsp | em 16 16 |        |             |
2824:000 | DONE wsp | em 16 16 |        |             |
2825:000 | DONE wsp | em 16 16 |        |             |
2826:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2827:000 | DONE cmt | em 16 16 |        |             | ; ?DO ( limit start -- )  X bytes / X cycles
2828:000 | DONE cmt | em 16 16 |        |             | ; Compile-time part of ?DO. This may not be natively compiled.
2829:000 | DONE lbl | em 16 16 | 005885 |             | xt_qdo                               
2830:000 | DONE cmt | em 16 16 |        |             | 		; ?DO shares most of its code with DO. Use the tmp1 flag to
2831:000 | DONE cmt | em 16 16 |        |             |                 ; decide which is which
2832:000 | DONE ins | em 16 16 | 005885 | a9 ff ff    |                 lda.# 0ffff          
2833:000 | DONE ins | em 16 16 | 005888 | 85 1c       |                 sta.d 00001c         
2834:000 | DONE ins | em 16 16 | 00588a | 80 02       |                 bra 00588e           continue with do_common
2835:000 | DONE wsp | em 16 16 |        |             |
2836:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2837:000 | DONE cmt | em 16 16 |        |             | ; DO ( limit start -- )  X bytes / X cycles
2838:000 | DONE cmt | em 16 16 |        |             | ; Compile-time part of DO. ": DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY ;"
2839:000 | DONE cmt | em 16 16 |        |             | ; To work with LEAVE, we compile a routine that pushes the end address to the
2840:000 | DONE cmt | em 16 16 |        |             | ; Return Stack at run time. This is based on a suggestion by Garth Wilson, see
2841:000 | DONE cmt | em 16 16 |        |             | ; loops.txt for details. This may not be native compile.
2842:000 | DONE lbl | em 16 16 | 00588c |             | xt_do                                
2843:000 | DONE cmt | em 16 16 |        |             |                 ; DO and ?DO share most of their code, use tmp1 as a flag.
2844:000 | DONE ins | em 16 16 | 00588c | 64 1c       |                 stz.d 00001c         0 is DO, drop through to DO_COMMON
2845:000 | DONE wsp | em 16 16 |        |             |
2846:000 | DONE lbl | em 16 16 | 00588e |             | do_common                            
2847:000 | DONE cmt | em 16 16 |        |             |                 ; We start by compiling the opcode for LDA.# ($A9). Because
2848:000 | DONE cmt | em 16 16 |        |             |                 ; we're little endian, we don't have to switch registers sizes,
2849:000 | DONE cmt | em 16 16 |        |             |                 ; we just have to make sure the MSB will be overwritten
2850:000 | DONE ins | em 16 16 | 00588e | a9 a9 00    |                 lda.# 00a9           
2851:000 | DONE ins | em 16 16 | 005891 | 92 00       |                 sta.di 000000        
2852:000 | DONE ins | em 16 16 | 005893 | e6 00       |                 inc.d 000000         
2853:000 | DONE wsp | em 16 16 |        |             |
2854:000 | DONE cmt | em 16 16 |        |             |                 ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
2855:000 | DONE cmt | em 16 16 |        |             |                 ; compile the address we need to LDA.# at runtime
2856:000 | DONE ins | em 16 16 | 005895 | ca          |                 dex                  
2857:000 | DONE ins | em 16 16 | 005896 | ca          |                 dex                  
2858:000 | DONE ins | em 16 16 | 005897 | 94 00       |                 sty.dx 00            
2859:000 | DONE ins | em 16 16 | 005899 | a4 00       |                 ldy.d 000000         
2860:000 | DONE wsp | em 16 16 |        |             |
2861:000 | DONE cmt | em 16 16 |        |             |                 ; Reserve two bytes for the address
2862:000 | DONE ins | em 16 16 | 00589b | e6 00       |                 inc.d 000000         
2863:000 | DONE ins | em 16 16 | 00589d | e6 00       |                 inc.d 000000         
2864:000 | DONE wsp | em 16 16 |        |             |
2865:000 | DONE cmt | em 16 16 |        |             |                 ; Save the opcode for PHA ($48)
2866:000 | DONE ins | em 16 16 | 00589f | a9 48 00    |                 lda.# 0048           
2867:000 | DONE ins | em 16 16 | 0058a2 | 92 00       |                 sta.di 000000        
2868:000 | DONE ins | em 16 16 | 0058a4 | e6 00       |                 inc.d 000000         
2869:000 | DONE wsp | em 16 16 |        |             |
2870:000 | DONE cmt | em 16 16 |        |             |                 ; Make space to compile either (?DO) or (DO)
2871:000 | DONE ins | em 16 16 | 0058a6 | ca          |                 dex                  
2872:000 | DONE ins | em 16 16 | 0058a7 | ca          |                 dex                  
2873:000 | DONE ins | em 16 16 | 0058a8 | 94 00       |                 sty.dx 00            
2874:000 | DONE wsp | em 16 16 |        |             |
2875:000 | DONE cmt | em 16 16 |        |             |                 ; compile (?DO) or (DO)
2876:000 | DONE ins | em 16 16 | 0058aa | a5 1c       |                 lda.d 00001c         
2877:000 | DONE ins | em 16 16 | 0058ac | f0 05       |                 beq 0058b3           childish, yes
2878:000 | DONE wsp | em 16 16 |        |             |
2879:000 | DONE ins | em 16 16 | 0058ae | a0 eb 52    |                 ldy.# 0052eb         
2880:000 | DONE ins | em 16 16 | 0058b1 | 80 03       |                 bra 0058b6           
2881:000 | DONE wsp | em 16 16 |        |             |
2882:000 | DONE lbl | em 16 16 | 0058b3 |             | do_do                                
2883:000 | DONE ins | em 16 16 | 0058b3 | a0 02 53    |                 ldy.# 005302         
2884:000 | DONE wsp | em 16 16 |        |             |
2885:000 | DONE lbl | em 16 16 | 0058b6 |             | do_compile                           
2886:000 | DONE ins | em 16 16 | 0058b6 | 20 8a 56    |                 jsr 00568a           
2887:000 | DONE wsp | em 16 16 |        |             |
2888:000 | DONE cmt | em 16 16 |        |             |                 ; HERE. We put this on the Data Stack for LOOP/+LOOP. Note this
2889:000 | DONE cmt | em 16 16 |        |             |                 ; has nothing to do with the HERE we've saved for LEAVE
2890:000 | DONE ins | em 16 16 | 0058b9 | ca          |                 dex                  
2891:000 | DONE ins | em 16 16 | 0058ba | ca          |                 dex                  
2892:000 | DONE ins | em 16 16 | 0058bb | 94 00       |                 sty.dx 00            
2893:000 | DONE ins | em 16 16 | 0058bd | a4 00       |                 ldy.d 000000         
2894:000 | DONE wsp | em 16 16 |        |             |
2895:000 | DONE lbl | em 16 16 | 0058bf |             | z_qdo                                
2896:000 | DONE lbl | em 16 16 | 0058bf |             | z_do                                 
2897:000 | DONE ins | em 16 16 | 0058bf | 60          |                 rts                  
2898:000 | DONE wsp | em 16 16 |        |             |
2899:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2900:000 | DONE cmt | em 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2901:000 | DONE cmt | em 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2902:000 | DONE cmt | em 16 16 |        |             | ; docs/create-does.txt and
2903:000 | DONE cmt | em 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2904:000 | DONE cmt | em 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2905:000 | DONE cmt | em 16 16 |        |             | ; TODO see if this creates a correct z_word address
2906:000 | DONE lbl | em 16 16 | 0058c0 |             | xt_does                              
2907:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2908:000 | DONE ins | em 16 16 | 0058c0 | f4 cd 58    |                 phe.# 0058cd         
2909:000 | DONE ins | em 16 16 | 0058c3 | 20 7b 6a    |                 jsr 006a7b           
2910:000 | DONE wsp | em 16 16 |        |             |
2911:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2912:000 | DONE cmt | em 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2913:000 | DONE ins | em 16 16 | 0058c6 | f4 03 6a    |                 phe.# 006a03         
2914:000 | DONE ins | em 16 16 | 0058c9 | 20 7b 6a    |                 jsr 006a7b           
2915:000 | DONE wsp | em 16 16 |        |             |
2916:000 | DONE lbl | em 16 16 | 0058cc |             | z_does                               
2916:001 | DONE ins | em 16 16 | 0058cc | 60          |                 rts                  
2917:000 | DONE wsp | em 16 16 |        |             |
2918:000 | DONE lbl | em 16 16 | 0058cd |             | does_rt                              
2919:000 | DONE cmt | em 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2920:000 | DONE cmt | em 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2921:000 | DONE cmt | em 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2922:000 | DONE cmt | em 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2923:000 | DONE cmt | em 16 16 |        |             |                 ; the return addresses
2924:000 | DONE ins | em 16 16 | 0058cd | 68          |                 pla                  
2925:000 | DONE ins | em 16 16 | 0058ce | 1a          |                 inc.a                increase by one because of RTS mechanics
2926:000 | DONE ins | em 16 16 | 0058cf | 85 1c       |                 sta.d 00001c         
2927:000 | DONE wsp | em 16 16 |        |             |
2928:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2929:000 | DONE cmt | em 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2930:000 | DONE cmt | em 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2931:000 | DONE cmt | em 16 16 |        |             |                 ; now.
2932:000 | DONE ins | em 16 16 | 0058d1 | a5 02       |                 lda.d 000002         
2933:000 | DONE wsp | em 16 16 |        |             |
2934:000 | DONE cmt | em 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2935:000 | DONE cmt | em 16 16 |        |             |                 ; header.tasm for details).
2936:000 | DONE ins | em 16 16 | 0058d3 | 18          |                 clc                  
2937:000 | DONE ins | em 16 16 | 0058d4 | 69 04 00    |                 adc.# 0004           
2938:000 | DONE ins | em 16 16 | 0058d7 | 85 1e       |                 sta.d 00001e         
2939:000 | DONE wsp | em 16 16 |        |             |
2940:000 | DONE cmt | em 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2941:000 | DONE cmt | em 16 16 |        |             |                 ; opcode
2942:000 | DONE ins | em 16 16 | 0058d9 | b2 1e       |                 lda.di 00001e        LDA (TMP2)
2943:000 | DONE ins | em 16 16 | 0058db | 1a          |                 inc.a                
2944:000 | DONE ins | em 16 16 | 0058dc | 85 1e       |                 sta.d 00001e         Points to address to be replaced
2945:000 | DONE wsp | em 16 16 |        |             |
2946:000 | DONE cmt | em 16 16 |        |             |                 ; Replace the DOVAR address
2947:000 | DONE ins | em 16 16 | 0058de | a5 1c       |                 lda.d 00001c         
2948:000 | DONE ins | em 16 16 | 0058e0 | 92 1e       |                 sta.di 00001e        STA (TMP2)
2949:000 | DONE wsp | em 16 16 |        |             |
2950:000 | DONE cmt | em 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2951:000 | DONE cmt | em 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2952:000 | DONE cmt | em 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2953:000 | DONE ins | em 16 16 | 0058e2 | 60          |                 rts                  
2954:000 | DONE wsp | em 16 16 |        |             |
2955:000 | DONE wsp | em 16 16 |        |             |
2956:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2957:000 | DONE cmt | em 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2958:000 | DONE cmt | em 16 16 |        |             | ; Drop first entry on Data Stack
2959:000 | DONE wsp | em 16 16 |        |             |
2960:000 | DONE lbl | em 16 16 | 0058e3 |             | xt_drop                              
2961:000 | DONE ins | em 16 16 | 0058e3 | b4 00       |                 ldy.dx 00            
2962:000 | DONE ins | em 16 16 | 0058e5 | e8          |                 inx                  
2963:000 | DONE ins | em 16 16 | 0058e6 | e8          |                 inx                  
2964:000 | DONE wsp | em 16 16 |        |             |
2965:000 | DONE lbl | em 16 16 | 0058e7 |             | z_drop                               
2965:001 | DONE ins | em 16 16 | 0058e7 | 60          |                 rts                  
2966:000 | DONE wsp | em 16 16 |        |             |
2967:000 | DONE wsp | em 16 16 |        |             |
2968:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2969:000 | DONE cmt | em 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2970:000 | DONE cmt | em 16 16 |        |             | ; Print a region of memory in a pretty way. This is used interactively, so we
2971:000 | DONE cmt | em 16 16 |        |             | ; don't care about speed (humans are slow) and concentrate on size instead,
2972:000 | DONE cmt | em 16 16 |        |             | ; using JSR where we can. This is a primtive version until we get loops ready
2973:000 | DONE lbl | em 16 16 | 0058e8 |             | xt_dump                              
2974:000 | DONE ins | em 16 16 | 0058e8 | 98          |                 tya                  force flag test
2975:000 | DONE lbl | em 16 16 | 0058e9 |             | dump_loop                            
2976:000 | DONE ins | em 16 16 | 0058e9 | f0 14       |                 beq 0058ff           
2977:000 | DONE wsp | em 16 16 |        |             |
2978:000 | DONE ins | em 16 16 | 0058eb | 5a          |                 phy                  save counter
2979:000 | DONE ins | em 16 16 | 0058ec | a1 00       |                 lda.dxi 00           get byte from address
2980:000 | DONE ins | em 16 16 | 0058ee | 29 ff 00    |                 and.# 00ff           
2981:000 | DONE ins | em 16 16 | 0058f1 | a8          |                 tay                  
2982:000 | DONE ins | em 16 16 | 0058f2 | f6 00       |                 inc.dx 00            address modified in place
2983:000 | DONE wsp | em 16 16 |        |             |
2984:000 | DONE ins | em 16 16 | 0058f4 | 20 4b 5f    |                 jsr 005f4b           U.
2985:000 | DONE wsp | em 16 16 |        |             |
2986:000 | DONE ins | em 16 16 | 0058f7 | ca          |                 dex                  
2987:000 | DONE ins | em 16 16 | 0058f8 | ca          |                 dex                  
2988:000 | DONE ins | em 16 16 | 0058f9 | 94 00       |                 sty.dx 00            
2989:000 | DONE ins | em 16 16 | 0058fb | 7a          |                 ply                  get counter back
2990:000 | DONE wsp | em 16 16 |        |             |
2991:000 | DONE ins | em 16 16 | 0058fc | 88          |                 dey                  
2992:000 | DONE ins | em 16 16 | 0058fd | 80 ea       |                 bra 0058e9           
2993:000 | DONE wsp | em 16 16 |        |             |
2994:000 | DONE lbl | em 16 16 | 0058ff |             | dump_done                            
2995:000 | DONE ins | em 16 16 | 0058ff | 20 5b 57    |                 jsr 00575b           
2996:000 | DONE ins | em 16 16 | 005902 | 20 16 54    |                 jsr 005416           
2997:000 | DONE wsp | em 16 16 |        |             |
2998:000 | DONE lbl | em 16 16 | 005905 |             | z_dump                               
2998:001 | DONE ins | em 16 16 | 005905 | 60          |                 rts                  
2999:000 | DONE wsp | em 16 16 |        |             |
3000:000 | DONE wsp | em 16 16 |        |             |
3001:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3002:000 | DONE cmt | em 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
3003:000 | DONE cmt | em 16 16 |        |             | ; Duplicate first entry on Data Stack
3004:000 | DONE lbl | em 16 16 | 005906 |             | xt_dup                               
3005:000 | DONE ins | em 16 16 | 005906 | ca          |                 dex                  
3006:000 | DONE ins | em 16 16 | 005907 | ca          |                 dex                  
3007:000 | DONE ins | em 16 16 | 005908 | 94 00       |                 sty.dx 00            
3008:000 | DONE wsp | em 16 16 |        |             |
3009:000 | DONE lbl | em 16 16 | 00590a |             | z_dup                                
3009:001 | DONE ins | em 16 16 | 00590a | 60          |                 rts                  
3010:000 | DONE wsp | em 16 16 |        |             |
3011:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3012:000 | DONE cmt | em 16 16 |        |             | ; EMIT ( char -- ) X bytes / X cycles
3013:000 | DONE cmt | em 16 16 |        |             | ; Run-time default for EMIT. The user can revector this by changing the value of
3014:000 | DONE cmt | em 16 16 |        |             | ; the OUTPUT variable. We ignore the MSB completely, and do not check to see if
3015:000 | DONE cmt | em 16 16 |        |             | ; we have been given a valid ASCII character. Note that we keep the A register
3016:000 | DONE cmt | em 16 16 |        |             | ; in 16 bit mode all the time - it is up to the kernel routine stored at OUTPUT
3017:000 | DONE cmt | em 16 16 |        |             | ; to deal with that. Don't make this native compile
3018:000 | DONE lbl | em 16 16 | 00590b |             | xt_emit                              
3019:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3020:000 | DONE cmt | em 16 16 |        |             |                 ; we put the value in A so we don't have to switch the XY
3021:000 | DONE cmt | em 16 16 |        |             |                 ; register size
3022:000 | DONE ins | em 16 16 | 00590b | 98          |                 tya                  
3023:000 | DONE wsp | em 16 16 |        |             |
3024:000 | DONE cmt | em 16 16 |        |             |                 ; we DROP immediately so we can JMP.I to the output routine and
3025:000 | DONE cmt | em 16 16 |        |             |                 ; can use its RTS to take us back to the caller
3026:000 | DONE ins | em 16 16 | 00590c | b4 00       |                 ldy.dx 00            
3027:000 | DONE ins | em 16 16 | 00590e | e8          |                 inx                  
3028:000 | DONE ins | em 16 16 | 00590f | e8          |                 inx                  
3029:000 | DONE lbl | em 16 16 | 005910 |             | emit_a                               
3030:000 | DONE cmt | em 16 16 |        |             |                 ; Lots of times we want to print the character in A without
3031:000 | DONE cmt | em 16 16 |        |             |                 ; fooling around with the Data Stack. EMIT_A assumes a 16 bit
3032:000 | DONE cmt | em 16 16 |        |             |                 ; wide A register with the character in LSB and does not touch
3033:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack, but can still be vectored via OUTPUT. Call it
3034:000 | DONE cmt | em 16 16 |        |             |                 ; with JSR as you would XT_EMIT
3035:000 | DONE ins | em 16 16 | 005910 | 6c 0e 00    |                 jmp.i 00000e         call to kernel, JSR/RTS
3036:000 | DONE wsp | em 16 16 |        |             |
3037:000 | DONE lbl | em 16 16 | 005913 |             | z_emit                               ; never reached
3038:000 | DONE wsp | em 16 16 |        |             |
3039:000 | DONE wsp | em 16 16 |        |             |
3040:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3041:000 | DONE cmt | em 16 16 |        |             | ; ERASE ( addr u -- ) X bytes / X cycles
3042:000 | DONE cmt | em 16 16 |        |             | ; Set a region of memory to zero. Uses tmp2
3043:000 | DONE lbl | em 16 16 | 005913 |             | xt_erase                             
3044:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3045:000 | DONE ins | em 16 16 | 005913 | ca          |                 dex                  
3046:000 | DONE ins | em 16 16 | 005914 | ca          |                 dex                  
3047:000 | DONE ins | em 16 16 | 005915 | 94 00       |                 sty.dx 00            
3048:000 | DONE wsp | em 16 16 |        |             |
3049:000 | DONE ins | em 16 16 | 005917 | a0 00 00    |                 ldy.# 0000           falls through to FILL
3050:000 | DONE wsp | em 16 16 |        |             |
3051:000 | DONE wsp | em 16 16 |        |             |
3052:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3053:000 | DONE cmt | em 16 16 |        |             | ; EXIT ( -- ) X bytes / X cycles
3054:000 | DONE cmt | em 16 16 |        |             | ; Return control to the calling word immediately. If we're in a loop, we need to
3055:000 | DONE cmt | em 16 16 |        |             | ; unloop first, and get everything we we might have put on the Return Stack off
3056:000 | DONE cmt | em 16 16 |        |             | ; as well. This should be natively compiled
3057:000 | DONE lbl | em 16 16 | 00591a |             | xt_exit                              
3058:000 | DONE ins | em 16 16 | 00591a | 60          |                 rts                  
3059:000 | DONE lbl | em 16 16 | 00591b |             | z_exit                               ; never reached
3060:000 | DONE wsp | em 16 16 |        |             |
3061:000 | DONE wsp | em 16 16 |        |             |
3062:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3063:000 | DONE cmt | em 16 16 |        |             | ; FILL ( addr u b -- ) X bytes / X cycles
3064:000 | DONE cmt | em 16 16 |        |             | ; Fill the given region of memory with the LSB of the TOS. Shares code with
3065:000 | DONE cmt | em 16 16 |        |             | ; ERASE
3066:000 | DONE lbl | em 16 16 | 00591b |             | xt_fill                              
3067:000 | DONE ins | em 16 16 | 00591b | b5 02       |                 lda.dx 02            address is 3OS
3068:000 | DONE ins | em 16 16 | 00591d | 85 1e       |                 sta.d 00001e         
3069:000 | DONE wsp | em 16 16 |        |             |
3070:000 | DONE ins | em 16 16 | 00591f | 98          |                 tya                  
3071:000 | DONE ins | em 16 16 | 005920 | b4 00       |                 ldy.dx 00            don't bother with drop, to it later
3072:000 | DONE ins | em 16 16 | 005922 | e2 20       |                 sep 20               
3072:001 | DONE ctl | em  8 16 |        |             |         .!a8
3073:000 | DONE lbl | em  8 16 | 005924 |             | erase_loop                           
3074:000 | DONE ins | em  8 16 | 005924 | 88          |                 dey                  
3075:000 | DONE ins | em  8 16 | 005925 | 30 04       |                 bmi 00592b           
3076:000 | DONE wsp | em  8 16 |        |             |
3077:000 | DONE ins | em  8 16 | 005927 | 91 1e       |                 sta.diy 00001e       
3078:000 | DONE ins | em  8 16 | 005929 | 80 f9       |                 bra 005924           
3079:000 | DONE wsp | em  8 16 |        |             |
3080:000 | DONE lbl | em  8 16 | 00592b |             | erase_done                           
3081:000 | DONE ins | em  8 16 | 00592b | c2 20       |                 rep 20               
3081:001 | DONE ctl | em 16 16 |        |             |         .!a16
3082:000 | DONE ins | em 16 16 | 00592d | b4 02       |                 ldy.dx 02            dump three elements off the sack
3083:000 | DONE ins | em 16 16 | 00592f | 8a          |                 txa                  
3084:000 | DONE ins | em 16 16 | 005930 | 18          |                 clc                  
3085:000 | DONE ins | em 16 16 | 005931 | 69 06 00    |                 adc.# 0006           
3086:000 | DONE ins | em 16 16 | 005934 | aa          |                 tax                  
3087:000 | DONE lbl | em 16 16 | 005935 |             | z_fill                               
3088:000 | DONE lbl | em 16 16 | 005935 |             | z_erase                              
3088:001 | DONE ins | em 16 16 | 005935 | 60          |                 rts                  
3089:000 | DONE wsp | em 16 16 |        |             |
3090:000 | DONE wsp | em 16 16 |        |             |
3091:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3092:000 | DONE cmt | em 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
3093:000 | DONE cmt | em 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
3094:000 | DONE cmt | em 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
3095:000 | DONE lbl | em 16 16 | 005936 |             | xt_evaluate                          
3096:000 | DONE cmt | em 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
3097:000 | DONE cmt | em 16 16 |        |             |                 ; >IN to the Return Stack
3098:000 | DONE ins | em 16 16 | 005936 | a5 0c       |                 lda.d 00000c         >IN
3099:000 | DONE ins | em 16 16 | 005938 | 48          |                 pha                  
3100:000 | DONE ins | em 16 16 | 005939 | a5 06       |                 lda.d 000006         Input Source (SOURCE-ID)
3101:000 | DONE ins | em 16 16 | 00593b | 48          |                 pha                  
3102:000 | DONE ins | em 16 16 | 00593c | a5 08       |                 lda.d 000008         
3103:000 | DONE ins | em 16 16 | 00593e | 48          |                 pha                  
3104:000 | DONE ins | em 16 16 | 00593f | a5 0a       |                 lda.d 00000a         
3105:000 | DONE ins | em 16 16 | 005941 | 48          |                 pha                  
3106:000 | DONE wsp | em 16 16 |        |             |
3107:000 | DONE cmt | em 16 16 |        |             |                 ; set SOURCE-ID to -1
3108:000 | DONE ins | em 16 16 | 005942 | a9 ff ff    |                 lda.# 0ffff          
3109:000 | DONE ins | em 16 16 | 005945 | 85 06       |                 sta.d 000006         
3110:000 | DONE wsp | em 16 16 |        |             |
3111:000 | DONE cmt | em 16 16 |        |             |                 ; set >IN to zero
3112:000 | DONE ins | em 16 16 | 005947 | 64 0c       |                 stz.d 00000c         
3113:000 | DONE wsp | em 16 16 |        |             |
3114:000 | DONE cmt | em 16 16 |        |             |                 ; move TOS and NOS to input buffers
3115:000 | DONE ins | em 16 16 | 005949 | 84 0a       |                 sty.d 00000a         
3116:000 | DONE ins | em 16 16 | 00594b | b5 00       |                 lda.dx 00            
3117:000 | DONE ins | em 16 16 | 00594d | 85 08       |                 sta.d 000008         
3118:000 | DONE wsp | em 16 16 |        |             |
3119:000 | DONE cmt | em 16 16 |        |             |                 ; dump address string from stack
3120:000 | DONE ins | em 16 16 | 00594f | b4 02       |                 ldy.dx 02            
3121:000 | DONE ins | em 16 16 | 005951 | e8          |                 inx                  
3122:000 | DONE ins | em 16 16 | 005952 | e8          |                 inx                  
3123:000 | DONE ins | em 16 16 | 005953 | e8          |                 inx                  
3124:000 | DONE ins | em 16 16 | 005954 | e8          |                 inx                  
3125:000 | DONE wsp | em 16 16 |        |             |
3126:000 | DONE ins | em 16 16 | 005955 | 20 17 6a    |                 jsr 006a17           
3127:000 | DONE wsp | em 16 16 |        |             |
3128:000 | DONE cmt | em 16 16 |        |             |                 ; restore state from before evaluate
3129:000 | DONE ins | em 16 16 | 005958 | 68          |                 pla                  
3130:000 | DONE ins | em 16 16 | 005959 | 85 0a       |                 sta.d 00000a         
3131:000 | DONE ins | em 16 16 | 00595b | 68          |                 pla                  
3132:000 | DONE ins | em 16 16 | 00595c | 85 08       |                 sta.d 000008         
3133:000 | DONE ins | em 16 16 | 00595e | 68          |                 pla                  
3134:000 | DONE ins | em 16 16 | 00595f | 85 06       |                 sta.d 000006         
3135:000 | DONE ins | em 16 16 | 005961 | 68          |                 pla                  
3136:000 | DONE ins | em 16 16 | 005962 | 85 0c       |                 sta.d 00000c         
3137:000 | DONE wsp | em 16 16 |        |             |
3138:000 | DONE lbl | em 16 16 | 005964 |             | z_evaluate                           
3138:001 | DONE ins | em 16 16 | 005964 | 60          |                 rts                  
3139:000 | DONE wsp | em 16 16 |        |             |
3140:000 | DONE wsp | em 16 16 |        |             |
3141:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3142:000 | DONE cmt | em 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
3143:000 | DONE cmt | em 16 16 |        |             | ; Run a word with help of its xt on the TOS
3144:000 | DONE wsp | em 16 16 |        |             |
3145:000 | DONE cmt | em 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
3146:000 | DONE cmt | em 16 16 |        |             | ; range
3147:000 | DONE cmt | em 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
3148:000 | DONE lbl | em 16 16 | 005965 |             | execute_ip                           
3148:001 | DONE dir | em 16 16 | 005965 | (3 bytes)   |         .byte 00, 00, 00             
3148:001 | DONE dir | em 16 16 |        |             |                 00 00 00                 --  . . .
3149:000 | DONE wsp | em 16 16 |        |             |
3150:000 | DONE lbl | em 16 16 | 005968 |             | xt_execute                           
3151:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3152:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3153:000 | DONE cmt | em 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
3154:000 | DONE ins | em 16 16 | 005968 | 8c 65 59    |                 sty 005965           
3155:000 | DONE ins | em 16 16 | 00596b | b4 00       |                 ldy.dx 00            
3156:000 | DONE ins | em 16 16 | 00596d | e8          |                 inx                  
3157:000 | DONE ins | em 16 16 | 00596e | e8          |                 inx                  
3158:000 | DONE wsp | em 16 16 |        |             |
3159:000 | DONE cmt | em 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
3160:000 | DONE cmt | em 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
3161:000 | DONE cmt | em 16 16 |        |             |                 ; the original caller of this routine without us having to muck
3162:000 | DONE cmt | em 16 16 |        |             |                 ; about with the Return Stack.
3163:000 | DONE ins | em 16 16 | 00596f | 6c 65 59    |                 jmp.i 005965         JMP (EXECUTE_IP)
3164:000 | DONE wsp | em 16 16 |        |             |
3165:000 | DONE lbl | em 16 16 | 005972 |             | z_execute                            ; empty, no RTS required
3166:000 | DONE wsp | em 16 16 |        |             |
3167:000 | DONE wsp | em 16 16 |        |             |
3168:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3169:000 | DONE cmt | em 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
3170:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
3171:000 | DONE cmt | em 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
3172:000 | DONE cmt | em 16 16 |        |             | ; xt_false/z_false
3173:000 | DONE wsp | em 16 16 |        |             |
3174:000 | DONE wsp | em 16 16 |        |             |
3175:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3176:000 | DONE cmt | em 16 16 |        |             | ; FIND ( cs-addr -- addr 0 | xt 1 | xt -1 ) X bytes / X cycles
3177:000 | DONE cmt | em 16 16 |        |             | ; Find word in Dictionary. Included for backwards compatibility, Liara Forth
3178:000 | DONE cmt | em 16 16 |        |             | ; follows Gforth by replacing this with FIND-NAME. Counted string either returns
3179:000 | DONE cmt | em 16 16 |        |             | ; address with a fail flag if not found in the Dictionary, or the xt with a flag
3180:000 | DONE cmt | em 16 16 |        |             | ; to indicate if this is immediate or not. FIND is a wrapper around FIND-NAME.
3181:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
3182:000 | DONE cmt | em 16 16 |        |             | ; and https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3183:000 | DONE cmt | em 16 16 |        |             | ; for better solutions.
3184:000 | DONE lbl | em 16 16 | 005972 |             | xt_find                              
3185:000 | DONE cmt | em 16 16 |        |             |                 ; Convert counted string address to modern format
3186:000 | DONE ins | em 16 16 | 005972 | 20 4d 57    |                 jsr 00574d           ( addr u )
3187:000 | DONE wsp | em 16 16 |        |             |
3188:000 | DONE cmt | em 16 16 |        |             |                 ; Save address in case the conversion fails
3189:000 | DONE ins | em 16 16 | 005975 | b5 00       |                 lda.dx 00            
3190:000 | DONE ins | em 16 16 | 005977 | 48          |                 pha                  
3191:000 | DONE wsp | em 16 16 |        |             |
3192:000 | DONE ins | em 16 16 | 005978 | 20 a3 59    |                 jsr 0059a3           ( nt | 0 )
3193:000 | DONE wsp | em 16 16 |        |             |
3194:000 | DONE ins | em 16 16 | 00597b | 98          |                 tya                  force flag check
3195:000 | DONE ins | em 16 16 | 00597c | d0 0a       |                 bne 005988           
3196:000 | DONE wsp | em 16 16 |        |             |
3197:000 | DONE cmt | em 16 16 |        |             |                 ; No word found. Return the address of the string, leaving 0 as
3198:000 | DONE cmt | em 16 16 |        |             |                 ; a false flag TOS
3199:000 | DONE ins | em 16 16 | 00597e | ca          |                 dex                  ( <?> 0 )
3200:000 | DONE ins | em 16 16 | 00597f | ca          |                 dex                  
3201:000 | DONE ins | em 16 16 | 005980 | a0 00 00    |                 ldy.# 0000           
3202:000 | DONE ins | em 16 16 | 005983 | 68          |                 pla                  
3203:000 | DONE ins | em 16 16 | 005984 | 95 00       |                 sta.dx 00            ( addr 0 )
3204:000 | DONE ins | em 16 16 | 005986 | 80 1a       |                 bra 0059a2           
3205:000 | DONE wsp | em 16 16 |        |             |
3206:000 | DONE lbl | em 16 16 | 005988 |             | find_found                           
3207:000 | DONE cmt | em 16 16 |        |             |                 ; We have a nt. Now we have to convert it to the format that
3208:000 | DONE cmt | em 16 16 |        |             |                 ; FIND wants to return Arrive here with ( nt )
3209:000 | DONE ins | em 16 16 | 005988 | 68          |                 pla                  we won't need the address after all
3210:000 | DONE wsp | em 16 16 |        |             |
3211:000 | DONE cmt | em 16 16 |        |             |                 ; We will need the nt later
3212:000 | DONE ins | em 16 16 | 005989 | 5a          |                 phy                  
3213:000 | DONE wsp | em 16 16 |        |             |
3214:000 | DONE ins | em 16 16 | 00598a | 20 aa 5b    |                 jsr 005baa           ( nt -- xt )
3215:000 | DONE ins | em 16 16 | 00598d | ca          |                 dex                  
3216:000 | DONE ins | em 16 16 | 00598e | ca          |                 dex                  
3217:000 | DONE ins | em 16 16 | 00598f | 94 00       |                 sty.dx 00            ( xt <?> )
3218:000 | DONE wsp | em 16 16 |        |             |
3219:000 | DONE cmt | em 16 16 |        |             |                 ; If immediate, return 1 (not: zero), else return -1
3220:000 | DONE ins | em 16 16 | 005991 | 7a          |                 ply                  get nt back
3221:000 | DONE ins | em 16 16 | 005992 | b9 00 00    |                 lda.y 0000           
3222:000 | DONE ins | em 16 16 | 005995 | a0 00 00    |                 ldy.# 0000           prepare flag
3223:000 | DONE wsp | em 16 16 |        |             |
3224:000 | DONE ins | em 16 16 | 005998 | eb          |                 xba                  flags are MSB
3225:000 | DONE ins | em 16 16 | 005999 | 29 02 00    |                 and.# IM             Mask all but IM bit
3226:000 | DONE wsp | em 16 16 |        |             |
3227:000 | DONE ins | em 16 16 | 00599c | d0 03       |                 bne 0059a1           IMMEDIATE word, return 1
3228:000 | DONE ins | em 16 16 | 00599e | 88          |                 dey                  not emmediate, return -1
3229:000 | DONE ins | em 16 16 | 00599f | 80 01       |                 bra 0059a2           
3230:000 | DONE wsp | em 16 16 |        |             |
3231:000 | DONE lbl | em 16 16 | 0059a1 |             | find_imm                             
3232:000 | DONE ins | em 16 16 | 0059a1 | c8          |                 iny                  
3233:000 | DONE wsp | em 16 16 |        |             |
3234:000 | DONE lbl | em 16 16 | 0059a2 |             | z_find                               
3234:001 | DONE ins | em 16 16 | 0059a2 | 60          |                 rts                  
3235:000 | DONE wsp | em 16 16 |        |             |
3236:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3237:000 | DONE cmt | em 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
3238:000 | DONE cmt | em 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
3239:000 | DONE cmt | em 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
3240:000 | DONE cmt | em 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
3241:000 | DONE cmt | em 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
3242:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3243:000 | DONE cmt | em 16 16 |        |             | ; FIND calls this word for the hard word
3244:000 | DONE lbl | em 16 16 | 0059a3 |             | xt_find-name                         
3245:000 | DONE cmt | em 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
3246:000 | DONE cmt | em 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
3247:000 | DONE cmt | em 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
3248:000 | DONE cmt | em 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
3249:000 | DONE cmt | em 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
3250:000 | DONE cmt | em 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
3251:000 | DONE cmt | em 16 16 |        |             |                 ;       tya                     ; force flag check
3252:000 | DONE cmt | em 16 16 |        |             |                 ;       beq find-name_failure
3253:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3254:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3255:000 | DONE cmt | em 16 16 |        |             |                 ; set up loop for the first time
3256:000 | DONE ins | em 16 16 | 0059a3 | 84 24       |                 sty.d 000024         length of mystery string in tmptos, Y now free
3257:000 | DONE wsp | em 16 16 |        |             |
3258:000 | DONE ins | em 16 16 | 0059a5 | a4 02       |                 ldy.d 000002         
3259:000 | DONE ins | em 16 16 | 0059a7 | 84 1c       |                 sty.d 00001c         nt of first Dictionary word
3260:000 | DONE wsp | em 16 16 |        |             |
3261:000 | DONE ins | em 16 16 | 0059a9 | b4 00       |                 ldy.dx 00            
3262:000 | DONE ins | em 16 16 | 0059ab | 84 1e       |                 sty.d 00001e         address of mystery string, was NOS
3263:000 | DONE wsp | em 16 16 |        |             |
3264:000 | DONE lbl | em 16 16 | 0059ad |             | find-name_loop                       
3265:000 | DONE cmt | em 16 16 |        |             |                 ; First quick test: Are strings the same length?
3266:000 | DONE ins | em 16 16 | 0059ad | b2 1c       |                 lda.di 00001c        LSB in first header word is length
3267:000 | DONE ins | em 16 16 | 0059af | 29 ff 00    |                 and.# 00ff           
3268:000 | DONE ins | em 16 16 | 0059b2 | c5 24       |                 cmp.d 000024         we test LSB
3269:000 | DONE cmt | em 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
3270:000 | DONE cmt | em 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
3271:000 | DONE cmt | em 16 16 |        |             |                 ; same
3272:000 | DONE ins | em 16 16 | 0059b4 | f0 0c       |                 beq 0059c2           
3273:000 | DONE wsp | em 16 16 |        |             |
3274:000 | DONE lbl | em 16 16 | 0059b6 |             | find-name_next_entry                 
3275:000 | DONE cmt | em 16 16 |        |             |                 ; next header address is two bytes down
3276:000 | DONE ins | em 16 16 | 0059b6 | e6 1c       |                 inc.d 00001c         
3277:000 | DONE ins | em 16 16 | 0059b8 | e6 1c       |                 inc.d 00001c         
3278:000 | DONE ins | em 16 16 | 0059ba | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3279:000 | DONE wsp | em 16 16 |        |             |
3280:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3281:000 | DONE ins | em 16 16 | 0059bc | f0 36       |                 beq 0059f4           
3282:000 | DONE wsp | em 16 16 |        |             |
3283:000 | DONE ins | em 16 16 | 0059be | 85 1c       |                 sta.d 00001c         new header
3284:000 | DONE ins | em 16 16 | 0059c0 | 80 eb       |                 bra 0059ad           
3285:000 | DONE wsp | em 16 16 |        |             |
3286:000 | DONE lbl | em 16 16 | 0059c2 |             | find-name_chars                      
3287:000 | DONE cmt | em 16 16 |        |             |                 ; Yes, same length, so we compare characters
3288:000 | DONE wsp | em 16 16 |        |             |
3289:000 | DONE cmt | em 16 16 |        |             |                 ; Switch A to 8 bit for this
3290:000 | DONE ins | em 16 16 | 0059c2 | e2 20       |                 sep 20               
3290:001 | DONE ctl | em  8 16 |        |             |         .!a8
3291:000 | DONE cmt | em  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
3292:000 | DONE cmt | em  8 16 |        |             |                 ; header
3293:000 | DONE ins | em  8 16 | 0059c4 | a0 08 00    |                 ldy.# 0008           
3294:000 | DONE ins | em  8 16 | 0059c7 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - first char of entry
3295:000 | DONE ins | em  8 16 | 0059c9 | d2 1e       |                 cmp.di 00001e        CMP (TMP2) - first char of mystery string
3296:000 | DONE ins | em  8 16 | 0059cb | f0 04       |                 beq 0059d1           
3297:000 | DONE wsp | em  8 16 |        |             |
3298:000 | DONE lbl | em  8 16 | 0059cd |             | find-name_char_nomatcnt_8            
3299:000 | DONE cmt | em  8 16 |        |             |                 ; First char is not the same, next entry
3300:000 | DONE ins | em  8 16 | 0059cd | c2 20       |                 rep 20               
3300:001 | DONE ctl | em 16 16 |        |             |         .!a16
3301:000 | DONE ins | em 16 16 | 0059cf | 80 e5       |                 bra 0059b6           
3302:000 | DONE wsp | em 16 16 |        |             |
3303:000 | DONE lbl | em 16 16 | 0059d1 |             | find-name_all_chars                  
3304:000 | DONE dir | em  8 16 |        |             |         .!a8                         
3305:000 | DONE cmt | em  8 16 |        |             |                 ; String length is the same, and the first character is the
3306:000 | DONE cmt | em  8 16 |        |             |                 ; same. If the word is only one character long, we're done
3307:000 | DONE ins | em  8 16 | 0059d1 | a4 24       |                 ldy.d 000024         
3308:000 | DONE ins | em  8 16 | 0059d3 | 88          |                 dey                  faster and shorter than CPY.# 01
3309:000 | DONE ins | em  8 16 | 0059d4 | f0 18       |                 beq 0059ee           
3310:000 | DONE wsp | em  8 16 |        |             |
3311:000 | DONE cmt | em  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
3312:000 | DONE cmt | em  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
3313:000 | DONE cmt | em  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
3314:000 | DONE cmt | em  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
3315:000 | DONE cmt | em  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
3316:000 | DONE cmt | em  8 16 |        |             |                 ; we've already compared the first char.
3317:000 | DONE wsp | em  8 16 |        |             |
3318:000 | DONE cmt | em  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
3319:000 | DONE cmt | em  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
3320:000 | DONE cmt | em  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
3321:000 | DONE cmt | em  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
3322:000 | DONE ins | em  8 16 | 0059d6 | c2 20       |                 rep 20               
3322:001 | DONE ctl | em 16 16 |        |             |         .!a16
3323:000 | DONE ins | em 16 16 | 0059d8 | a5 1c       |                 lda.d 00001c         address of Dictionary string
3324:000 | DONE ins | em 16 16 | 0059da | 18          |                 clc                  
3325:000 | DONE ins | em 16 16 | 0059db | 69 08 00    |                 adc.# 0008           
3326:000 | DONE ins | em 16 16 | 0059de | 85 20       |                 sta.d 000020         
3327:000 | DONE ins | em 16 16 | 0059e0 | e2 20       |                 sep 20               
3327:001 | DONE ctl | em  8 16 |        |             |         .!a8
3328:000 | DONE ins | em  8 16 | 0059e2 | a4 24       |                 ldy.d 000024         get length of strings as loop index
3329:000 | DONE ins | em  8 16 | 0059e4 | 88          |                 dey                  first index is length minus 1
3330:000 | DONE wsp | em  8 16 |        |             |
3331:000 | DONE lbl | em  8 16 | 0059e5 |             | @                                    
3332:000 | DONE ins | em  8 16 | 0059e5 | b1 1e       |                 lda.diy 00001e       LDA (TMP2),Y - last char of mystery string
3333:000 | DONE ins | em  8 16 | 0059e7 | d1 20       |                 cmp.diy 000020       CMP (TMP1),Y - last char of DP string
3334:000 | DONE ins | em  8 16 | 0059e9 | d0 e2       |                 bne 0059cd           
3335:000 | DONE ins | em  8 16 | 0059eb | 88          |                 dey                  start of string (Y=0) was already tested
3336:000 | DONE ins | em  8 16 | 0059ec | d0 f7       |                 bne 0059e5           
3337:000 | DONE wsp | em  8 16 |        |             |
3338:000 | DONE lbl | em  8 16 | 0059ee |             | find-name_success                    
3339:000 | DONE cmt | em  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
3340:000 | DONE cmt | em  8 16 |        |             |                 ; We get here with an 8 bit A
3341:000 | DONE ins | em  8 16 | 0059ee | c2 20       |                 rep 20               
3341:001 | DONE ctl | em 16 16 |        |             |         .!a16
3342:000 | DONE ins | em 16 16 | 0059f0 | a4 1c       |                 ldy.d 00001c         get the correct DP
3343:000 | DONE ins | em 16 16 | 0059f2 | 80 03       |                 bra 0059f7           
3344:000 | DONE wsp | em 16 16 |        |             |
3345:000 | DONE wsp | em 16 16 |        |             |
3346:000 | DONE lbl | em 16 16 | 0059f4 |             | find-name_failure_16                 
3347:000 | DONE cmt | em 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
3348:000 | DONE cmt | em 16 16 |        |             |                 ; bit
3349:000 | DONE ins | em 16 16 | 0059f4 | a0 00 00    |                 ldy.# 0000           fall thru
3350:000 | DONE wsp | em 16 16 |        |             |
3351:000 | DONE lbl | em 16 16 | 0059f7 |             | find-name_done                       
3352:000 | DONE ins | em 16 16 | 0059f7 | e8          |                 inx                  drop old address (NIP)
3353:000 | DONE ins | em 16 16 | 0059f8 | e8          |                 inx                  
3354:000 | DONE wsp | em 16 16 |        |             |
3355:000 | DONE lbl | em 16 16 | 0059f9 |             | z_find-name                          
3355:001 | DONE ins | em 16 16 | 0059f9 | 60          |                 rts                  
3356:000 | DONE wsp | em 16 16 |        |             |
3357:000 | DONE wsp | em 16 16 |        |             |
3358:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3359:000 | DONE cmt | em 16 16 |        |             | ; FM/MOD ( d n1 -- n2 n3 ) X bytes / X cycles
3360:000 | DONE cmt | em 16 16 |        |             | ; Floored division, compare with SM/REM. We define FM/MOD in terms of UM/MOD,
3361:000 | DONE cmt | em 16 16 |        |             | ; see http://git.savannah.gnu.org/cgit/gforth.git/tree/prim We prefer to use
3362:000 | DONE cmt | em 16 16 |        |             | ; SM/REM for further words. You could also define FM/MOD in Terms of SM/REM,
3363:000 | DONE cmt | em 16 16 |        |             | ; see http://www.figuk.plus.com/build/arith.htm
3364:000 | DONE cmt | em 16 16 |        |             | ; Original Forth: DUP >R DUP 0< IF NEGATE >R DNEGATE R> THEN >R DUP 0< R@ AND +
3365:000 | DONE cmt | em 16 16 |        |             | ; R> UM/MOD R> 0< IF SWAP NEGATE SWAP THEN ;
3366:000 | DONE cmt | em 16 16 |        |             | ; TODO this is just a 1:1 list of jumps, optimize once it is working
3367:000 | DONE lbl | em 16 16 | 0059fa |             | xt_fmmod                             
3368:000 | DONE ins | em 16 16 | 0059fa | 20 06 59    |                 jsr 005906           
3369:000 | DONE ins | em 16 16 | 0059fd | 20 bd 51    |                 jsr 0051bd           
3370:000 | DONE ins | em 16 16 | 005a00 | 20 06 59    |                 jsr 005906           
3371:000 | DONE wsp | em 16 16 |        |             |
3372:000 | DONE ins | em 16 16 | 005a03 | 98          |                 tya                  0< IF
3373:000 | DONE ins | em 16 16 | 005a04 | 10 12       |                 bpl 005a18           
3374:000 | DONE wsp | em 16 16 |        |             |
3375:000 | DONE ins | em 16 16 | 005a06 | b4 00       |                 ldy.dx 00            
3376:000 | DONE ins | em 16 16 | 005a08 | e8          |                 inx                  
3377:000 | DONE ins | em 16 16 | 005a09 | e8          |                 inx                  
3378:000 | DONE wsp | em 16 16 |        |             |
3379:000 | DONE ins | em 16 16 | 005a0a | 20 d5 5b    |                 jsr 005bd5           
3380:000 | DONE ins | em 16 16 | 005a0d | 20 bd 51    |                 jsr 0051bd           
3381:000 | DONE ins | em 16 16 | 005a10 | 20 71 58    |                 jsr 005871           
3382:000 | DONE ins | em 16 16 | 005a13 | 20 54 5d    |                 jsr 005d54           
3383:000 | DONE wsp | em 16 16 |        |             |
3384:000 | DONE ins | em 16 16 | 005a16 | 80 04       |                 bra 005a1c           
3385:000 | DONE lbl | em 16 16 | 005a18 |             | fmmod_1                              
3386:000 | DONE ins | em 16 16 | 005a18 | b4 00       |                 ldy.dx 00            
3387:000 | DONE ins | em 16 16 | 005a1a | e8          |                 inx                  
3388:000 | DONE ins | em 16 16 | 005a1b | e8          |                 inx                  
3389:000 | DONE lbl | em 16 16 | 005a1c |             | fmmod_1_1                            
3390:000 | DONE ins | em 16 16 | 005a1c | 20 bd 51    |                 jsr 0051bd           
3391:000 | DONE ins | em 16 16 | 005a1f | 20 06 59    |                 jsr 005906           
3392:000 | DONE ins | em 16 16 | 005a22 | 20 ac 53    |                 jsr 0053ac           
3393:000 | DONE ins | em 16 16 | 005a25 | 20 4b 5d    |                 jsr 005d4b           
3394:000 | DONE ins | em 16 16 | 005a28 | 20 8c 55    |                 jsr 00558c           
3395:000 | DONE ins | em 16 16 | 005a2b | 20 31 53    |                 jsr 005331           
3396:000 | DONE ins | em 16 16 | 005a2e | 20 54 5d    |                 jsr 005d54           
3397:000 | DONE ins | em 16 16 | 005a31 | 20 d0 5f    |                 jsr 005fd0           
3398:000 | DONE ins | em 16 16 | 005a34 | 20 54 5d    |                 jsr 005d54           
3399:000 | DONE wsp | em 16 16 |        |             |
3400:000 | DONE ins | em 16 16 | 005a37 | 98          |                 tya                  
3401:000 | DONE ins | em 16 16 | 005a38 | 10 0f       |                 bpl 005a49           
3402:000 | DONE wsp | em 16 16 |        |             |
3403:000 | DONE ins | em 16 16 | 005a3a | b4 00       |                 ldy.dx 00            
3404:000 | DONE ins | em 16 16 | 005a3c | e8          |                 inx                  
3405:000 | DONE ins | em 16 16 | 005a3d | e8          |                 inx                  
3406:000 | DONE wsp | em 16 16 |        |             |
3407:000 | DONE ins | em 16 16 | 005a3e | 20 09 5f    |                 jsr 005f09           
3408:000 | DONE ins | em 16 16 | 005a41 | 20 d5 5b    |                 jsr 005bd5           
3409:000 | DONE ins | em 16 16 | 005a44 | 20 09 5f    |                 jsr 005f09           
3410:000 | DONE wsp | em 16 16 |        |             |
3411:000 | DONE ins | em 16 16 | 005a47 | 80 04       |                 bra 005a4d           
3412:000 | DONE lbl | em 16 16 | 005a49 |             | fmmod_2                              
3413:000 | DONE wsp | em 16 16 |        |             |
3414:000 | DONE ins | em 16 16 | 005a49 | b4 00       |                 ldy.dx 00            
3415:000 | DONE ins | em 16 16 | 005a4b | e8          |                 inx                  
3416:000 | DONE ins | em 16 16 | 005a4c | e8          |                 inx                  
3417:000 | DONE wsp | em 16 16 |        |             |
3418:000 | DONE lbl | em 16 16 | 005a4d |             | fmmod_2_1                            
3419:000 | DONE wsp | em 16 16 |        |             |
3420:000 | DONE lbl | em 16 16 | 005a4d |             | z_fmmod                              
3420:001 | DONE ins | em 16 16 | 005a4d | 60          |                 rts                  
3421:000 | DONE wsp | em 16 16 |        |             |
3422:000 | DONE wsp | em 16 16 |        |             |
3423:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3424:000 | DONE cmt | em 16 16 |        |             | ; KEY ( -- char ) X bytes / X cycles
3425:000 | DONE cmt | em 16 16 |        |             | ; Get one character from the input, without echoing.
3426:000 | DONE lbl | em 16 16 | 005a4e |             | xt_key                               
3427:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3428:000 | DONE wsp | em 16 16 |        |             |
3429:000 | DONE ins | em 16 16 | 005a4e | ca          |                 dex                  make room on Data Stack
3430:000 | DONE ins | em 16 16 | 005a4f | ca          |                 dex                  
3431:000 | DONE ins | em 16 16 | 005a50 | b4 00       |                 ldy.dx 00            
3432:000 | DONE wsp | em 16 16 |        |             |
3433:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "jsr.i" instruction, so we have to do this the
3434:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3435:000 | DONE ins | em 16 16 | 005a52 | 86 22       |                 stx.d 000022         
3436:000 | DONE ins | em 16 16 | 005a54 | a2 00 00    |                 ldx.# 0000           
3437:000 | DONE ins | em 16 16 | 005a57 | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X) - returns char in A
3438:000 | DONE ins | em 16 16 | 005a5a | a6 22       |                 ldx.d 000022         
3439:000 | DONE wsp | em 16 16 |        |             |
3440:000 | DONE ins | em 16 16 | 005a5c | a8          |                 tay                  
3441:000 | DONE wsp | em 16 16 |        |             |
3442:000 | DONE lbl | em 16 16 | 005a5d |             | z_key                                
3442:001 | DONE ins | em 16 16 | 005a5d | 60          |                 rts                  
3443:000 | DONE wsp | em 16 16 |        |             |
3444:000 | DONE wsp | em 16 16 |        |             |
3445:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3446:000 | DONE cmt | em 16 16 |        |             | ; KEY? ( -- f ) X bytes / X cycles
3447:000 | DONE cmt | em 16 16 |        |             | ; See if there is a character waiting in the input buffer.
3448:000 | DONE lbl | em 16 16 | 005a5e |             | xt_keyq                              
3449:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3450:000 | DONE ins | em 16 16 | 005a5e | ca          |                 dex                  
3451:000 | DONE ins | em 16 16 | 005a5f | ca          |                 dex                  
3452:000 | DONE ins | em 16 16 | 005a60 | 94 00       |                 sty.dx 00            
3453:000 | DONE wsp | em 16 16 |        |             |
3454:000 | DONE ins | em 16 16 | 005a62 | a0 00 00    |                 ldy.# 0000           default FALSE
3455:000 | DONE wsp | em 16 16 |        |             |
3456:000 | DONE cmt | em 16 16 |        |             |                 ; have_chr sets the Carry Flag to 1 if there is a character
3457:000 | DONE cmt | em 16 16 |        |             |                 ; waiting, else to 0. A is destroyed
3458:000 | DONE ins | em 16 16 | 005a65 | 20 57 50    |                 jsr 005057           
3459:000 | DONE ins | em 16 16 | 005a68 | 90 01       |                 bcc 005a6b           
3460:000 | DONE wsp | em 16 16 |        |             |
3461:000 | DONE ins | em 16 16 | 005a6a | 88          |                 dey                  wrap for TRUE
3462:000 | DONE wsp | em 16 16 |        |             |
3463:000 | DONE lbl | em 16 16 | 005a6b |             | z_keyq                               
3463:001 | DONE ins | em 16 16 | 005a6b | 60          |                 rts                  
3464:000 | DONE wsp | em 16 16 |        |             |
3465:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3466:000 | DONE cmt | em 16 16 |        |             | ; I ( -- n )(R: n -- n )  X bytes / X cycles
3467:000 | DONE cmt | em 16 16 |        |             | ; Copy loop counter (top of Return Stack) to Data Stack. This is not the same as
3468:000 | DONE cmt | em 16 16 |        |             | ; R@ because we use a fudge factor for loop control; see (DO) for more details.
3469:000 | DONE cmt | em 16 16 |        |             | ; Native compile for speed.
3470:000 | DONE lbl | em 16 16 | 005a6c |             | xt_i                                 
3471:000 | DONE ins | em 16 16 | 005a6c | ca          |                 dex                  
3472:000 | DONE ins | em 16 16 | 005a6d | ca          |                 dex                  
3473:000 | DONE ins | em 16 16 | 005a6e | 94 00       |                 sty.dx 00            
3474:000 | DONE wsp | em 16 16 |        |             |
3475:000 | DONE cmt | em 16 16 |        |             |                 ; get the fudged value of the Return Stack
3476:000 | DONE ins | em 16 16 | 005a70 | 38          |                 sec                  
3477:000 | DONE ins | em 16 16 | 005a71 | a3 01       |                 lda.s 01             
3478:000 | DONE ins | em 16 16 | 005a73 | e3 03       |                 sbc.s 03             
3479:000 | DONE wsp | em 16 16 |        |             |
3480:000 | DONE ins | em 16 16 | 005a75 | a8          |                 tay                  
3481:000 | DONE wsp | em 16 16 |        |             |
3482:000 | DONE lbl | em 16 16 | 005a76 |             | z_i                                  
3482:001 | DONE ins | em 16 16 | 005a76 | 60          |                 rts                  
3483:000 | DONE wsp | em 16 16 |        |             |
3484:000 | DONE wsp | em 16 16 |        |             |
3485:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3486:000 | DONE cmt | em 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
3487:000 | DONE cmt | em 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
3488:000 | DONE cmt | em 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
3489:000 | DONE cmt | em 16 16 |        |             | ; will have no effect and will fail without an error message
3490:000 | DONE lbl | em 16 16 | 005a77 |             | xt_immediate                         
3491:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3492:000 | DONE ins | em 16 16 | 005a77 | a9 02 00    |                 lda.# IM             Immediate flag
3493:000 | DONE ins | em 16 16 | 005a7a | eb          |                 xba                  flags are MSB
3494:000 | DONE ins | em 16 16 | 005a7b | 12 02       |                 ora.di 000002        ORA (DP)
3495:000 | DONE ins | em 16 16 | 005a7d | 92 02       |                 sta.di 000002        
3496:000 | DONE wsp | em 16 16 |        |             |
3497:000 | DONE lbl | em 16 16 | 005a7f |             | z_immediate                          
3497:001 | DONE ins | em 16 16 | 005a7f | 60          |                 rts                  
3498:000 | DONE wsp | em 16 16 |        |             |
3499:000 | DONE wsp | em 16 16 |        |             |
3500:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3501:000 | DONE cmt | em 16 16 |        |             | ; INPUT ( -- addr ) X bytes / X cycles
3502:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump targeet for KEY is stored
3503:000 | DONE lbl | em 16 16 | 005a80 |             | xt_input                             
3504:000 | DONE ins | em 16 16 | 005a80 | ca          |                 dex                  
3505:000 | DONE ins | em 16 16 | 005a81 | ca          |                 dex                  
3506:000 | DONE ins | em 16 16 | 005a82 | 94 00       |                 sty.dx 00            
3507:000 | DONE wsp | em 16 16 |        |             |
3508:000 | DONE ins | em 16 16 | 005a84 | a0 10 00    |                 ldy.# 000010         
3509:000 | DONE wsp | em 16 16 |        |             |
3510:000 | DONE lbl | em 16 16 | 005a87 |             | z_input                              
3510:001 | DONE ins | em 16 16 | 005a87 | 60          |                 rts                  
3511:000 | DONE wsp | em 16 16 |        |             |
3512:000 | DONE wsp | em 16 16 |        |             |
3513:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3514:000 | DONE cmt | em 16 16 |        |             | ; INT>NAME ( xt -- nt ) X bytes / X cycles
3515:000 | DONE cmt | em 16 16 |        |             | ; Given an execution token (xt), return the name token (nt). This is called
3516:000 | DONE cmt | em 16 16 |        |             | ; >NAME in Gforth, but changed to INT>NAME for Liara to fit better with
3517:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT.
3518:000 | DONE lbl | em 16 16 | 005a88 |             | xt_int-name                          
3519:000 | DONE cmt | em 16 16 |        |             |                 ; Unfortunately, to find the header, we have to walk through the
3520:000 | DONE cmt | em 16 16 |        |             |                 ; dictionary
3521:000 | DONE ins | em 16 16 | 005a88 | a5 02       |                 lda.d 000002         nt of first Dictionary word
3522:000 | DONE ins | em 16 16 | 005a8a | 85 1c       |                 sta.d 00001c         
3523:000 | DONE wsp | em 16 16 |        |             |
3524:000 | DONE ins | em 16 16 | 005a8c | 84 24       |                 sty.d 000024         xt of mystery word
3525:000 | DONE ins | em 16 16 | 005a8e | a0 04 00    |                 ldy.# 0004           xt in header is two bytes down
3526:000 | DONE wsp | em 16 16 |        |             |
3527:000 | DONE lbl | em 16 16 | 005a91 |             | in_loop                              
3528:000 | DONE ins | em 16 16 | 005a91 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - get xt of current nt
3529:000 | DONE ins | em 16 16 | 005a93 | c5 24       |                 cmp.d 000024         
3530:000 | DONE ins | em 16 16 | 005a95 | f0 12       |                 beq 005aa9           
3531:000 | DONE wsp | em 16 16 |        |             |
3532:000 | DONE cmt | em 16 16 |        |             |                 ; no joy, next header address is two bytes down
3533:000 | DONE ins | em 16 16 | 005a97 | e6 1c       |                 inc.d 00001c         
3534:000 | DONE ins | em 16 16 | 005a99 | e6 1c       |                 inc.d 00001c         
3535:000 | DONE ins | em 16 16 | 005a9b | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3536:000 | DONE wsp | em 16 16 |        |             |
3537:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3538:000 | DONE ins | em 16 16 | 005a9d | f0 04       |                 beq 005aa3           
3539:000 | DONE wsp | em 16 16 |        |             |
3540:000 | DONE ins | em 16 16 | 005a9f | 85 1c       |                 sta.d 00001c         new header
3541:000 | DONE ins | em 16 16 | 005aa1 | 80 ee       |                 bra 005a91           
3542:000 | DONE wsp | em 16 16 |        |             |
3543:000 | DONE lbl | em 16 16 | 005aa3 |             | in_notfound                          
3544:000 | DONE ins | em 16 16 | 005aa3 | a9 81 72    |                 lda.# 007281         
3545:000 | DONE ins | em 16 16 | 005aa6 | 4c 9c 6a    |                 jmp 006a9c           
3546:000 | DONE wsp | em 16 16 |        |             |
3547:000 | DONE lbl | em 16 16 | 005aa9 |             | in_found                             
3548:000 | DONE ins | em 16 16 | 005aa9 | a4 1c       |                 ldy.d 00001c         replace xt by nt
3549:000 | DONE wsp | em 16 16 |        |             |
3550:000 | DONE lbl | em 16 16 | 005aab |             | z_int-name                           
3550:001 | DONE ins | em 16 16 | 005aab | 60          |                 rts                  
3551:000 | DONE wsp | em 16 16 |        |             |
3552:000 | DONE wsp | em 16 16 |        |             |
3553:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3554:000 | DONE cmt | em 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
3555:000 | DONE cmt | em 16 16 |        |             | ; Complement of TOS
3556:000 | DONE lbl | em 16 16 | 005aac |             | xt_invert                            
3557:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3558:000 | DONE ins | em 16 16 | 005aac | 98          |                 tya                  
3559:000 | DONE ins | em 16 16 | 005aad | 49 ff ff    |                 eor.# 0ffff          
3560:000 | DONE ins | em 16 16 | 005ab0 | a8          |                 tay                  
3561:000 | DONE wsp | em 16 16 |        |             |
3562:000 | DONE lbl | em 16 16 | 005ab1 |             | z_invert                             
3562:001 | DONE ins | em 16 16 | 005ab1 | 60          |                 rts                  
3563:000 | DONE wsp | em 16 16 |        |             |
3564:000 | DONE wsp | em 16 16 |        |             |
3565:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3566:000 | DONE cmt | em 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
3567:000 | DONE cmt | em 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
3568:000 | DONE lbl | em 16 16 | 005ab2 |             | xt_here                              
3569:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3570:000 | DONE ins | em 16 16 | 005ab2 | ca          |                 dex                  
3571:000 | DONE ins | em 16 16 | 005ab3 | ca          |                 dex                  
3572:000 | DONE ins | em 16 16 | 005ab4 | 94 00       |                 sty.dx 00            
3573:000 | DONE wsp | em 16 16 |        |             |
3574:000 | DONE ins | em 16 16 | 005ab6 | a4 00       |                 ldy.d 000000         
3575:000 | DONE wsp | em 16 16 |        |             |
3576:000 | DONE lbl | em 16 16 | 005ab8 |             | z_here                               
3576:001 | DONE ins | em 16 16 | 005ab8 | 60          |                 rts                  
3577:000 | DONE wsp | em 16 16 |        |             |
3578:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3579:000 | DONE cmt | em 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
3580:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 16
3581:000 | DONE lbl | em 16 16 | 005ab9 |             | xt_hex                               
3582:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3583:000 | DONE ins | em 16 16 | 005ab9 | a9 10 00    |                 lda.# 0010           
3584:000 | DONE ins | em 16 16 | 005abc | 85 16       |                 sta.d 000016         
3585:000 | DONE wsp | em 16 16 |        |             |
3586:000 | DONE lbl | em 16 16 | 005abe |             | z_hex                                
3586:001 | DONE ins | em 16 16 | 005abe | 60          |                 rts                  
3587:000 | DONE wsp | em 16 16 |        |             |
3588:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3589:000 | DONE cmt | em 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
3590:000 | DONE cmt | em 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
3591:000 | DONE cmt | em 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
3592:000 | DONE cmt | em 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
3593:000 | DONE cmt | em 16 16 |        |             | ; tohold instead of HLD.
3594:000 | DONE lbl | em 16 16 | 005abf |             | xt_hold                              
3595:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3596:000 | DONE ins | em 16 16 | 005abf | c6 18       |                 dec.d 000018         -1 HLD +!
3597:000 | DONE wsp | em 16 16 |        |             |
3598:000 | DONE ins | em 16 16 | 005ac1 | 98          |                 tya                  
3599:000 | DONE ins | em 16 16 | 005ac2 | e2 20       |                 sep 20               
3599:001 | DONE ctl | em  8 16 |        |             |         .!a8
3600:000 | DONE ins | em  8 16 | 005ac4 | 92 18       |                 sta.di 000018        STA (TOHOLD)
3601:000 | DONE ins | em  8 16 | 005ac6 | c2 20       |                 rep 20               
3601:001 | DONE ctl | em 16 16 |        |             |         .!a16
3602:000 | DONE ins | em 16 16 | 005ac8 | b4 00       |                 ldy.dx 00            
3603:000 | DONE ins | em 16 16 | 005aca | e8          |                 inx                  
3604:000 | DONE ins | em 16 16 | 005acb | e8          |                 inx                  
3605:000 | DONE wsp | em 16 16 |        |             |
3606:000 | DONE lbl | em 16 16 | 005acc |             | z_hold                               
3606:001 | DONE ins | em 16 16 | 005acc | 60          |                 rts                  
3607:000 | DONE wsp | em 16 16 |        |             |
3608:000 | DONE wsp | em 16 16 |        |             |
3609:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3610:000 | DONE cmt | em 16 16 |        |             | ; J ( -- n )(R: n -- n )  X bytes / X cycles
3611:000 | DONE cmt | em 16 16 |        |             | ; Copy loop counter (top of Return Stack) to Data Stack. This is not the same as
3612:000 | DONE cmt | em 16 16 |        |             | ; R@ because we use a fudge factor for loop control; see (DO) for more details.
3613:000 | DONE cmt | em 16 16 |        |             | ; Native compile for speed.
3614:000 | DONE lbl | em 16 16 | 005acd |             | xt_j                                 
3615:000 | DONE ins | em 16 16 | 005acd | ca          |                 dex                  
3616:000 | DONE ins | em 16 16 | 005ace | ca          |                 dex                  
3617:000 | DONE ins | em 16 16 | 005acf | 94 00       |                 sty.dx 00            
3618:000 | DONE wsp | em 16 16 |        |             |
3619:000 | DONE cmt | em 16 16 |        |             |                 ; get the fudged value of the Return Stack
3620:000 | DONE ins | em 16 16 | 005ad1 | 38          |                 sec                  
3621:000 | DONE ins | em 16 16 | 005ad2 | a3 07       |                 lda.s 07             
3622:000 | DONE ins | em 16 16 | 005ad4 | e3 09       |                 sbc.s 09             
3623:000 | DONE wsp | em 16 16 |        |             |
3624:000 | DONE ins | em 16 16 | 005ad6 | a8          |                 tay                  
3625:000 | DONE wsp | em 16 16 |        |             |
3626:000 | DONE lbl | em 16 16 | 005ad7 |             | z_j                                  
3626:001 | DONE ins | em 16 16 | 005ad7 | 60          |                 rts                  
3627:000 | DONE wsp | em 16 16 |        |             |
3628:000 | DONE wsp | em 16 16 |        |             |
3629:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3630:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
3631:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
3632:000 | DONE cmt | em 16 16 |        |             | ; version of this word is called LATEST.
3633:000 | DONE lbl | em 16 16 | 005ad8 |             | xt_latestnt                          
3634:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3635:000 | DONE ins | em 16 16 | 005ad8 | ca          |                 dex                  make room on Data Stack
3636:000 | DONE ins | em 16 16 | 005ad9 | ca          |                 dex                  
3637:000 | DONE ins | em 16 16 | 005ada | 94 00       |                 sty.dx 00            
3638:000 | DONE wsp | em 16 16 |        |             |
3639:000 | DONE ins | em 16 16 | 005adc | a5 02       |                 lda.d 000002         
3640:000 | DONE ins | em 16 16 | 005ade | a8          |                 tay                  
3641:000 | DONE wsp | em 16 16 |        |             |
3642:000 | DONE lbl | em 16 16 | 005adf |             | z_latestnt                           
3642:001 | DONE ins | em 16 16 | 005adf | 60          |                 rts                  
3643:000 | DONE wsp | em 16 16 |        |             |
3644:000 | DONE wsp | em 16 16 |        |             |
3645:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3646:000 | DONE cmt | em 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
3647:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
3648:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
3649:000 | DONE lbl | em 16 16 | 005ae0 |             | xt_latestxt                          
3650:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3651:000 | DONE ins | em 16 16 | 005ae0 | ca          |                 dex                  make room on Data Stack
3652:000 | DONE ins | em 16 16 | 005ae1 | ca          |                 dex                  
3653:000 | DONE ins | em 16 16 | 005ae2 | 94 00       |                 sty.dx 00            
3654:000 | DONE wsp | em 16 16 |        |             |
3655:000 | DONE ins | em 16 16 | 005ae4 | a5 02       |                 lda.d 000002         
3656:000 | DONE wsp | em 16 16 |        |             |
3657:000 | DONE ins | em 16 16 | 005ae6 | 18          |                 clc                  xt is stored four bytes below nt in header
3658:000 | DONE ins | em 16 16 | 005ae7 | 69 04 00    |                 adc.# 0004           
3659:000 | DONE ins | em 16 16 | 005aea | a8          |                 tay                  
3660:000 | DONE wsp | em 16 16 |        |             |
3661:000 | DONE ins | em 16 16 | 005aeb | b9 00 00    |                 lda.y 0000           FETCH
3662:000 | DONE ins | em 16 16 | 005aee | a8          |                 tay                  
3663:000 | DONE wsp | em 16 16 |        |             |
3664:000 | DONE lbl | em 16 16 | 005aef |             | z_latestxt                           
3664:001 | DONE ins | em 16 16 | 005aef | 60          |                 rts                  
3665:000 | DONE wsp | em 16 16 |        |             |
3666:000 | DONE wsp | em 16 16 |        |             |
3667:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3668:000 | DONE cmt | em 16 16 |        |             | ; LEAVE ( -- ) X bytes / X cycles
3669:000 | DONE cmt | em 16 16 |        |             | ; Leave DO/LOOP construct. Note that this does not work with anything but
3670:000 | DONE cmt | em 16 16 |        |             | ; a DO/LOOP in contrast to other versions such as discussed at
3671:000 | DONE cmt | em 16 16 |        |             | ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
3672:000 | DONE cmt | em 16 16 |        |             | ; ": LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY"
3673:000 | DONE cmt | em 16 16 |        |             | ; See loops.txt on details of how this works. This must be native compile and not
3674:000 | DONE cmt | em 16 16 |        |             | ; IMMEDIATE
3675:000 | DONE lbl | em 16 16 | 005af0 |             | xt_leave                             
3676:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3677:000 | DONE cmt | em 16 16 |        |             |                 ; drop limit/start entries off the Return Stack
3678:000 | DONE ins | em 16 16 | 005af0 | 68          |                 pla                  
3679:000 | DONE ins | em 16 16 | 005af1 | 68          |                 pla                  
3680:000 | DONE wsp | em 16 16 |        |             |
3681:000 | DONE cmt | em 16 16 |        |             |                 ; We now have the LEAVE special return address on the top of the
3682:000 | DONE cmt | em 16 16 |        |             |                 ; Return Stack. This RTS must come before z_leave so native
3683:000 | DONE cmt | em 16 16 |        |             |                 ; compiling doesn't ignore it
3684:000 | DONE ins | em 16 16 | 005af2 | 60          |                 rts                  
3685:000 | DONE wsp | em 16 16 |        |             |
3686:000 | DONE lbl | em 16 16 | 005af3 |             | z_leave                              ; not reached
3687:000 | DONE wsp | em 16 16 |        |             |
3688:000 | DONE wsp | em 16 16 |        |             |
3689:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3690:000 | DONE cmt | em 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
3691:000 | DONE cmt | em 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
3692:000 | DONE cmt | em 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
3693:000 | DONE cmt | em 16 16 |        |             | ; for instance
3694:000 | DONE lbl | em 16 16 | 005af3 |             | xt_literal                           
3695:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
3696:000 | DONE cmt | em 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
3697:000 | DONE ins | em 16 16 | 005af3 | f4 05 5b    |                 phe.# 005b05         PEA LITERAL_RT
3698:000 | DONE ins | em 16 16 | 005af6 | 20 7b 6a    |                 jsr 006a7b           
3699:000 | DONE wsp | em 16 16 |        |             |
3700:000 | DONE cmt | em 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
3701:000 | DONE cmt | em 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
3702:000 | DONE cmt | em 16 16 |        |             |                 ; way. This is basically , ("comma")
3703:000 | DONE ins | em 16 16 | 005af9 | 98          |                 tya                  
3704:000 | DONE ins | em 16 16 | 005afa | 92 00       |                 sta.di 000000        
3705:000 | DONE ins | em 16 16 | 005afc | e6 00       |                 inc.d 000000         
3706:000 | DONE ins | em 16 16 | 005afe | e6 00       |                 inc.d 000000         
3707:000 | DONE wsp | em 16 16 |        |             |
3708:000 | DONE ins | em 16 16 | 005b00 | b4 00       |                 ldy.dx 00            DROP
3709:000 | DONE ins | em 16 16 | 005b02 | e8          |                 inx                  
3710:000 | DONE ins | em 16 16 | 005b03 | e8          |                 inx                  
3711:000 | DONE wsp | em 16 16 |        |             |
3712:000 | DONE lbl | em 16 16 | 005b04 |             | z_literal                            
3712:001 | DONE ins | em 16 16 | 005b04 | 60          |                 rts                  
3713:000 | DONE wsp | em 16 16 |        |             |
3714:000 | DONE lbl | em 16 16 | 005b05 |             | literal_rt                           
3715:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we push the value following this word
3716:000 | DONE cmt | em 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
3717:000 | DONE cmt | em 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
3718:000 | DONE cmt | em 16 16 |        |             |                 ; points to the data we need to get
3719:000 | DONE wsp | em 16 16 |        |             |
3720:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
3721:000 | DONE ins | em 16 16 | 005b05 | ca          |                 dex                  
3722:000 | DONE ins | em 16 16 | 005b06 | ca          |                 dex                  
3723:000 | DONE ins | em 16 16 | 005b07 | 94 00       |                 sty.dx 00            
3724:000 | DONE wsp | em 16 16 |        |             |
3725:000 | DONE cmt | em 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
3726:000 | DONE cmt | em 16 16 |        |             |                 ; so we have to manipulate the address
3727:000 | DONE ins | em 16 16 | 005b09 | 7a          |                 ply                  
3728:000 | DONE ins | em 16 16 | 005b0a | c8          |                 iny                  
3729:000 | DONE ins | em 16 16 | 005b0b | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
3730:000 | DONE wsp | em 16 16 |        |             |
3731:000 | DONE ins | em 16 16 | 005b0e | c8          |                 iny                  move return address past data and restore
3732:000 | DONE ins | em 16 16 | 005b0f | 5a          |                 phy                  so we can get back home
3733:000 | DONE wsp | em 16 16 |        |             |
3734:000 | DONE ins | em 16 16 | 005b10 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
3735:000 | DONE wsp | em 16 16 |        |             |
3736:000 | DONE ins | em 16 16 | 005b11 | 60          |                 rts                  
3737:000 | DONE wsp | em 16 16 |        |             |
3738:000 | DONE wsp | em 16 16 |        |             |
3739:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3740:000 | DONE cmt | em 16 16 |        |             | ; LSHIFT ( n u -- n ) X bytes / X cycles
3741:000 | DONE cmt | em 16 16 |        |             | ; Logically shift TOS u times to the left, adding zeros to the right
3742:000 | DONE lbl | em 16 16 | 005b12 |             | xt_lshift                            
3743:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
3744:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
3745:000 | DONE ins | em 16 16 | 005b12 | 98          |                 tya                  
3746:000 | DONE ins | em 16 16 | 005b13 | 29 0f 00    |                 and.# 000f           
3747:000 | DONE ins | em 16 16 | 005b16 | f0 09       |                 beq 005b21           if zero shifts, we're done
3748:000 | DONE wsp | em 16 16 |        |             |
3749:000 | DONE ins | em 16 16 | 005b18 | a8          |                 tay                  number of shifts is TOS
3750:000 | DONE ins | em 16 16 | 005b19 | b5 00       |                 lda.dx 00            number is in NOS
3751:000 | DONE lbl | em 16 16 | 005b1b |             | lshift_loop                          
3752:000 | DONE ins | em 16 16 | 005b1b | 0a          |                 asl.a                
3753:000 | DONE ins | em 16 16 | 005b1c | 88          |                 dey                  
3754:000 | DONE ins | em 16 16 | 005b1d | d0 fc       |                 bne 005b1b           
3755:000 | DONE wsp | em 16 16 |        |             |
3756:000 | DONE ins | em 16 16 | 005b1f | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
3757:000 | DONE wsp | em 16 16 |        |             |
3758:000 | DONE lbl | em 16 16 | 005b21 |             | lshift_done                          
3759:000 | DONE ins | em 16 16 | 005b21 | b4 00       |                 ldy.dx 00            
3760:000 | DONE ins | em 16 16 | 005b23 | e8          |                 inx                  
3761:000 | DONE ins | em 16 16 | 005b24 | e8          |                 inx                  
3762:000 | DONE wsp | em 16 16 |        |             |
3763:000 | DONE lbl | em 16 16 | 005b25 |             | z_lshift                             
3763:001 | DONE ins | em 16 16 | 005b25 | 60          |                 rts                  
3764:000 | DONE wsp | em 16 16 |        |             |
3765:000 | DONE wsp | em 16 16 |        |             |
3766:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3767:000 | DONE cmt | em 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
3768:000 | DONE cmt | em 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
3769:000 | DONE cmt | em 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
3770:000 | DONE cmt | em 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
3771:000 | DONE cmt | em 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
3772:000 | DONE cmt | em 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
3773:000 | DONE lbl | em 16 16 | 005b26 |             | xt_mstar                             
3774:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3775:000 | DONE cmt | em 16 16 |        |             |                 ; figure out the sign
3776:000 | DONE ins | em 16 16 | 005b26 | 98          |                 tya                  
3777:000 | DONE ins | em 16 16 | 005b27 | 55 00       |                 eor.dx 00            
3778:000 | DONE wsp | em 16 16 |        |             |
3779:000 | DONE cmt | em 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
3780:000 | DONE cmt | em 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
3781:000 | DONE ins | em 16 16 | 005b29 | 48          |                 pha                  
3782:000 | DONE wsp | em 16 16 |        |             |
3783:000 | DONE cmt | em 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
3784:000 | DONE cmt | em 16 16 |        |             |                 ; UM*, which does the real work
3785:000 | DONE ins | em 16 16 | 005b2a | 98          |                 tya                  
3786:000 | DONE ins | em 16 16 | 005b2b | 10 05       |                 bpl 005b32           
3787:000 | DONE wsp | em 16 16 |        |             |
3788:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is negative so we have to ABS it
3789:000 | DONE ins | em 16 16 | 005b2d | 49 ff ff    |                 eor.# 0ffff          
3790:000 | DONE ins | em 16 16 | 005b30 | 1a          |                 inc.a                
3791:000 | DONE ins | em 16 16 | 005b31 | a8          |                 tay                  
3792:000 | DONE wsp | em 16 16 |        |             |
3793:000 | DONE lbl | em 16 16 | 005b32 |             | mstar_abs_nos                        
3794:000 | DONE ins | em 16 16 | 005b32 | b5 00       |                 lda.dx 00            
3795:000 | DONE ins | em 16 16 | 005b34 | 10 06       |                 bpl 005b3c           
3796:000 | DONE wsp | em 16 16 |        |             |
3797:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is negative so we have to ABS it
3798:000 | DONE ins | em 16 16 | 005b36 | 49 ff ff    |                 eor.# 0ffff          
3799:000 | DONE ins | em 16 16 | 005b39 | 1a          |                 inc.a                
3800:000 | DONE ins | em 16 16 | 005b3a | 95 00       |                 sta.dx 00            
3801:000 | DONE wsp | em 16 16 |        |             |
3802:000 | DONE lbl | em 16 16 | 005b3c |             | mstar_umstar                         
3803:000 | DONE ins | em 16 16 | 005b3c | 20 71 5f    |                 jsr 005f71           now ( d ) on stack
3804:000 | DONE wsp | em 16 16 |        |             |
3805:000 | DONE cmt | em 16 16 |        |             |                 ; handle the sign
3806:000 | DONE ins | em 16 16 | 005b3f | 68          |                 pla                  
3807:000 | DONE wsp | em 16 16 |        |             |
3808:000 | DONE cmt | em 16 16 |        |             |                 ; postive, we don't have to care
3809:000 | DONE ins | em 16 16 | 005b40 | 10 03       |                 bpl 005b45           
3810:000 | DONE wsp | em 16 16 |        |             |
3811:000 | DONE ins | em 16 16 | 005b42 | 20 71 58    |                 jsr 005871           
3812:000 | DONE wsp | em 16 16 |        |             |
3813:000 | DONE lbl | em 16 16 | 005b45 |             | z_mstar                              
3813:001 | DONE ins | em 16 16 | 005b45 | 60          |                 rts                  
3814:000 | DONE wsp | em 16 16 |        |             |
3815:000 | DONE wsp | em 16 16 |        |             |
3816:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3817:000 | DONE cmt | em 16 16 |        |             | ; MARKER ( "name" -- ) X bytes / X cycles
3818:000 | DONE cmt | em 16 16 |        |             | ; Create a deletion boundry, restoring the Dictionary to an earlier state. This
3819:000 | DONE cmt | em 16 16 |        |             | ; replaces FORGET in earlier Forths. Old entries are not actually deleted, but
3820:000 | DONE cmt | em 16 16 |        |             | ; merely overwritten by restoring CP and DP.
3821:000 | DONE lbl | em 16 16 | 005b46 |             | xt_marker                            
3822:000 | DONE cmt | em 16 16 |        |             |                 ; This is a defining word
3823:000 | DONE ins | em 16 16 | 005b46 | 20 62 57    |                 jsr 005762           
3824:000 | DONE wsp | em 16 16 |        |             |
3825:000 | DONE cmt | em 16 16 |        |             |                 ; Add the current DP as a payload - the DP of the marker itself
3826:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if it doesn't make more sense to add nt_ of the previous
3827:000 | DONE cmt | em 16 16 |        |             |                 ; word
3828:000 | DONE ins | em 16 16 | 005b49 | a5 02       |                 lda.d 000002         
3829:000 | DONE ins | em 16 16 | 005b4b | 92 00       |                 sta.di 000000        STA (CP)
3830:000 | DONE ins | em 16 16 | 005b4d | e6 00       |                 inc.d 000000         
3831:000 | DONE ins | em 16 16 | 005b4f | e6 00       |                 inc.d 000000         
3832:000 | DONE wsp | em 16 16 |        |             |
3833:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> by hand: Add runtime behavior and DODOES routine
3834:000 | DONE ins | em 16 16 | 005b51 | 20 cd 58    |                 jsr 0058cd           
3835:000 | DONE ins | em 16 16 | 005b54 | 20 03 6a    |                 jsr 006a03           
3836:000 | DONE wsp | em 16 16 |        |             |
3837:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> payload
3838:000 | DONE ins | em 16 16 | 005b57 | 20 d7 52    |                 jsr 0052d7           ( nt )
3839:000 | DONE wsp | em 16 16 |        |             |
3840:000 | DONE cmt | em 16 16 |        |             |                 ; We now have the DP of the marker itself on the stack, but we
3841:000 | DONE cmt | em 16 16 |        |             |                 ; need the DP of the previous word. That is two bytes down
3842:000 | DONE ins | em 16 16 | 005b5a | 84 20       |                 sty.d 000020         
3843:000 | DONE ins | em 16 16 | 005b5c | a0 02 00    |                 ldy.# 0002           overwrite TOS, won't be needing it
3844:000 | DONE ins | em 16 16 | 005b5f | b1 20       |                 lda.diy 000020       LDA (TMP3),Y
3845:000 | DONE ins | em 16 16 | 005b61 | 85 02       |                 sta.d 000002         
3846:000 | DONE wsp | em 16 16 |        |             |
3847:000 | DONE cmt | em 16 16 |        |             |                 ; Adjust the CP, which is one byte after the z_ address of the
3848:000 | DONE cmt | em 16 16 |        |             |                 ; word we just restored. That address is six bytes down
3849:000 | DONE ins | em 16 16 | 005b63 | a0 06 00    |                 ldy.# 0006           
3850:000 | DONE ins | em 16 16 | 005b66 | b1 02       |                 lda.diy 000002       LDA (DP),Y
3851:000 | DONE ins | em 16 16 | 005b68 | 1a          |                 inc.a                first free byte is one byte further down
3852:000 | DONE ins | em 16 16 | 005b69 | 85 00       |                 sta.d 000000         
3853:000 | DONE wsp | em 16 16 |        |             |
3854:000 | DONE cmt | em 16 16 |        |             |                 ; clean up stack
3855:000 | DONE ins | em 16 16 | 005b6b | b4 00       |                 ldy.dx 00            
3856:000 | DONE ins | em 16 16 | 005b6d | e8          |                 inx                  
3857:000 | DONE ins | em 16 16 | 005b6e | e8          |                 inx                  
3858:000 | DONE wsp | em 16 16 |        |             |
3859:000 | DONE lbl | em 16 16 | 005b6f |             | z_marker                             
3859:001 | DONE ins | em 16 16 | 005b6f | 60          |                 rts                  
3860:000 | DONE wsp | em 16 16 |        |             |
3861:000 | DONE wsp | em 16 16 |        |             |
3862:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3863:000 | DONE cmt | em 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
3864:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
3865:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3866:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3867:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3868:000 | DONE lbl | em 16 16 | 005b70 |             | xt_max                               
3869:000 | DONE ins | em 16 16 | 005b70 | 98          |                 tya                  
3870:000 | DONE ins | em 16 16 | 005b71 | d5 00       |                 cmp.dx 00            
3871:000 | DONE wsp | em 16 16 |        |             |
3872:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3873:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3874:000 | DONE ins | em 16 16 | 005b73 | f0 0b       |                 beq 005b80           Faster than DROP because TOS is in Y
3875:000 | DONE wsp | em 16 16 |        |             |
3876:000 | DONE ins | em 16 16 | 005b75 | f5 00       |                 sbc.dx 00            
3877:000 | DONE ins | em 16 16 | 005b77 | 50 03       |                 bvc 005b7c           no overflow, skip ahead
3878:000 | DONE wsp | em 16 16 |        |             |
3879:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3880:000 | DONE ins | em 16 16 | 005b79 | 49 00 80    |                 eor.# 8000           compliment negative flag
3881:000 | DONE wsp | em 16 16 |        |             |
3882:000 | DONE lbl | em 16 16 | 005b7c |             | max_no_ov                            
3883:000 | DONE ins | em 16 16 | 005b7c | 10 02       |                 bpl 005b80           keep TOS
3884:000 | DONE lbl | em 16 16 | 005b7e |             | max_drop                             
3885:000 | DONE ins | em 16 16 | 005b7e | b4 00       |                 ldy.dx 00            DROP so NOS is result
3886:000 | DONE lbl | em 16 16 | 005b80 |             | max_nip                              
3887:000 | DONE ins | em 16 16 | 005b80 | e8          |                 inx                  
3888:000 | DONE ins | em 16 16 | 005b81 | e8          |                 inx                  
3889:000 | DONE wsp | em 16 16 |        |             |
3890:000 | DONE lbl | em 16 16 | 005b82 |             | z_max                                
3890:001 | DONE ins | em 16 16 | 005b82 | 60          |                 rts                  
3891:000 | DONE wsp | em 16 16 |        |             |
3892:000 | DONE wsp | em 16 16 |        |             |
3893:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3894:000 | DONE cmt | em 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
3895:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
3896:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3897:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3898:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3899:000 | DONE lbl | em 16 16 | 005b83 |             | xt_min                               
3900:000 | DONE ins | em 16 16 | 005b83 | 98          |                 tya                  
3901:000 | DONE ins | em 16 16 | 005b84 | d5 00       |                 cmp.dx 00            
3902:000 | DONE wsp | em 16 16 |        |             |
3903:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3904:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3905:000 | DONE ins | em 16 16 | 005b86 | f0 0b       |                 beq 005b93           Faster than DROP because TOS is in Y
3906:000 | DONE wsp | em 16 16 |        |             |
3907:000 | DONE ins | em 16 16 | 005b88 | f5 00       |                 sbc.dx 00            
3908:000 | DONE ins | em 16 16 | 005b8a | 50 03       |                 bvc 005b8f           no overflow, skip ahead
3909:000 | DONE wsp | em 16 16 |        |             |
3910:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3911:000 | DONE ins | em 16 16 | 005b8c | 49 00 80    |                 eor.# 8000           compliment negative flag
3912:000 | DONE wsp | em 16 16 |        |             |
3913:000 | DONE lbl | em 16 16 | 005b8f |             | min_no_ov                            
3914:000 | DONE ins | em 16 16 | 005b8f | 30 02       |                 bmi 005b93           keep TOS
3915:000 | DONE lbl | em 16 16 | 005b91 |             | min_drop                             
3916:000 | DONE ins | em 16 16 | 005b91 | b4 00       |                 ldy.dx 00            DROP so NOS is result
3917:000 | DONE lbl | em 16 16 | 005b93 |             | min_nip                              
3918:000 | DONE ins | em 16 16 | 005b93 | e8          |                 inx                  
3919:000 | DONE ins | em 16 16 | 005b94 | e8          |                 inx                  
3920:000 | DONE wsp | em 16 16 |        |             |
3921:000 | DONE lbl | em 16 16 | 005b95 |             | z_min                                
3921:001 | DONE ins | em 16 16 | 005b95 | 60          |                 rts                  
3922:000 | DONE wsp | em 16 16 |        |             |
3923:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3924:000 | DONE cmt | em 16 16 |        |             | ; MOVE ( addr1 addr2 u -- ) X bytes / X cycles
3925:000 | DONE cmt | em 16 16 |        |             | ; Move u bytes from addr1 to addr2, so that in the end, addr2 contains exactly
3926:000 | DONE cmt | em 16 16 |        |             | ; what was in addr1. This routine calls CMOVE or CMOVE>. Forth verison is
3927:000 | DONE cmt | em 16 16 |        |             | ; >R 2DUP U< IF R> CMOVE> ELSE  R> CMOVE THEN ; see
3928:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/-l2WlE7pEE0
3929:000 | DONE cmt | em 16 16 |        |             | ; Also see CMOVE> and CMOVE and http://forum.6502.org/viewtopic.php?f=2&t=1685
3930:000 | DONE lbl | em 16 16 | 005b96 |             | xt_move                              
3931:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3932:000 | DONE cmt | em 16 16 |        |             |                 ; if u is zero, we just skip all of this
3933:000 | DONE ins | em 16 16 | 005b96 | 98          |                 tya                  
3934:000 | DONE ins | em 16 16 | 005b97 | f0 10       |                 beq 005ba9           
3935:000 | DONE wsp | em 16 16 |        |             |
3936:000 | DONE cmt | em 16 16 |        |             |                 ; if source and destination are the same, that would be silly as
3937:000 | DONE cmt | em 16 16 |        |             |                 ; well
3938:000 | DONE ins | em 16 16 | 005b99 | b5 00       |                 lda.dx 00            addr2 (destination)
3939:000 | DONE ins | em 16 16 | 005b9b | d5 02       |                 cmp.dx 02            addr1 (source)
3940:000 | DONE ins | em 16 16 | 005b9d | f0 0a       |                 beq 005ba9           
3941:000 | DONE wsp | em 16 16 |        |             |
3942:000 | DONE cmt | em 16 16 |        |             |                 ; The destination is higher than the source, so use CMOVE, which
3943:000 | DONE cmt | em 16 16 |        |             |                 ; calls MVP
3944:000 | DONE ins | em 16 16 | 005b9f | 10 05       |                 bpl 005ba6           
3945:000 | DONE wsp | em 16 16 |        |             |
3946:000 | DONE ins | em 16 16 | 005ba1 | 20 45 56    |                 jsr 005645           
3947:000 | DONE ins | em 16 16 | 005ba4 | 80 03       |                 bra 005ba9           don't RTS because we might be natively compiling
3948:000 | DONE wsp | em 16 16 |        |             |
3949:000 | DONE cmt | em 16 16 |        |             |                 ; The source is higher than the destination, use CMOVE>,
3950:000 | DONE cmt | em 16 16 |        |             |                 ; which calls MVN
3951:000 | DONE lbl | em 16 16 | 005ba6 |             | move_cmoveup                         
3952:000 | DONE ins | em 16 16 | 005ba6 | 20 68 56    |                 jsr 005668           
3953:000 | DONE wsp | em 16 16 |        |             |
3954:000 | DONE lbl | em 16 16 | 005ba9 |             | z_move                               
3954:001 | DONE ins | em 16 16 | 005ba9 | 60          |                 rts                  
3955:000 | DONE wsp | em 16 16 |        |             |
3956:000 | DONE wsp | em 16 16 |        |             |
3957:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3958:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
3959:000 | DONE cmt | em 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
3960:000 | DONE cmt | em 16 16 |        |             | ; TODO deal with compile-only words, see
3961:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3962:000 | DONE lbl | em 16 16 | 005baa |             | xt_name-int                          
3963:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3964:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3965:000 | DONE cmt | em 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
3966:000 | DONE ins | em 16 16 | 005baa | c8          |                 iny                  
3967:000 | DONE ins | em 16 16 | 005bab | c8          |                 iny                  
3968:000 | DONE ins | em 16 16 | 005bac | c8          |                 iny                  
3969:000 | DONE ins | em 16 16 | 005bad | c8          |                 iny                  
3970:000 | DONE ins | em 16 16 | 005bae | b9 00 00    |                 lda.y 0000           
3971:000 | DONE ins | em 16 16 | 005bb1 | a8          |                 tay                  
3972:000 | DONE wsp | em 16 16 |        |             |
3973:000 | DONE lbl | em 16 16 | 005bb2 |             | z_name-int                           
3973:001 | DONE ins | em 16 16 | 005bb2 | 60          |                 rts                  
3974:000 | DONE wsp | em 16 16 |        |             |
3975:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3976:000 | DONE cmt | em 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
3977:000 | DONE cmt | em 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
3978:000 | DONE cmt | em 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
3979:000 | DONE cmt | em 16 16 |        |             | ; a valid name token. There is no "STRING>NAME" - this is handled by the
3980:000 | DONE cmt | em 16 16 |        |             | ; combination of PARSE-NAME and FIND-NAME
3981:000 | DONE lbl | em 16 16 | 005bb3 |             | xt_name-string                       
3982:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3983:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3984:000 | DONE ins | em 16 16 | 005bb3 | ca          |                 dex                  move NOS down one
3985:000 | DONE ins | em 16 16 | 005bb4 | ca          |                 dex                  
3986:000 | DONE wsp | em 16 16 |        |             |
3987:000 | DONE cmt | em 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
3988:000 | DONE cmt | em 16 16 |        |             |                 ; which we have as TOS
3989:000 | DONE ins | em 16 16 | 005bb5 | 98          |                 tya                  
3990:000 | DONE ins | em 16 16 | 005bb6 | 18          |                 clc                  
3991:000 | DONE ins | em 16 16 | 005bb7 | 69 08 00    |                 adc.# 0008           
3992:000 | DONE ins | em 16 16 | 005bba | 95 00       |                 sta.dx 00            NOS
3993:000 | DONE wsp | em 16 16 |        |             |
3994:000 | DONE cmt | em 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
3995:000 | DONE cmt | em 16 16 |        |             |                 ; of the dictionary entry header (the name token)
3996:000 | DONE ins | em 16 16 | 005bbc | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3997:000 | DONE ins | em 16 16 | 005bbf | 29 ff 00    |                 and.# 00ff           mask all but length byte
3998:000 | DONE ins | em 16 16 | 005bc2 | a8          |                 tay                  
3999:000 | DONE wsp | em 16 16 |        |             |
4000:000 | DONE lbl | em 16 16 | 005bc3 |             | z_name-string                        
4000:001 | DONE ins | em 16 16 | 005bc3 | 60          |                 rts                  
4001:000 | DONE wsp | em 16 16 |        |             |
4002:000 | DONE wsp | em 16 16 |        |             |
4003:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4004:000 | DONE cmt | em 16 16 |        |             | ; NATIVE-COMPILE ( -- ) X bytes / X cycles
4005:000 | DONE cmt | em 16 16 |        |             | ; Enable native compilation for last word in Dictionary
4006:000 | DONE lbl | em 16 16 | 005bc4 |             | xt_native-compile                    
4007:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4008:000 | DONE ins | em 16 16 | 005bc4 | a9 01 00    |                 lda.# NC             
4009:000 | DONE ins | em 16 16 | 005bc7 | eb          |                 xba                  flags are MSB
4010:000 | DONE ins | em 16 16 | 005bc8 | 12 02       |                 ora.di 000002        ORA (DP)
4011:000 | DONE ins | em 16 16 | 005bca | 92 02       |                 sta.di 000002        
4012:000 | DONE wsp | em 16 16 |        |             |
4013:000 | DONE lbl | em 16 16 | 005bcc |             | z_native-compile                     
4014:000 | DONE ins | em 16 16 | 005bcc | 60          |                 rts                  
4015:000 | DONE wsp | em 16 16 |        |             |
4016:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4017:000 | DONE cmt | em 16 16 |        |             | ; NC-LIMIT ( -- addr ) X bytes / X cycles
4018:000 | DONE cmt | em 16 16 |        |             | ; Address where the value of the Native Compile size limit is kept
4019:000 | DONE lbl | em 16 16 | 005bcd |             | xt_nc-limit                          
4020:000 | DONE ins | em 16 16 | 005bcd | ca          |                 dex                  
4021:000 | DONE ins | em 16 16 | 005bce | ca          |                 dex                  
4022:000 | DONE ins | em 16 16 | 005bcf | 94 00       |                 sty.dx 00            
4023:000 | DONE ins | em 16 16 | 005bd1 | a0 26 00    |                 ldy.# 000026         
4024:000 | DONE wsp | em 16 16 |        |             |
4025:000 | DONE lbl | em 16 16 | 005bd4 |             | z_nc-limit                           
4025:001 | DONE ins | em 16 16 | 005bd4 | 60          |                 rts                  
4026:000 | DONE wsp | em 16 16 |        |             |
4027:000 | DONE wsp | em 16 16 |        |             |
4028:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4029:000 | DONE cmt | em 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
4030:000 | DONE cmt | em 16 16 |        |             | ; Two's complement of TOS
4031:000 | DONE lbl | em 16 16 | 005bd5 |             | xt_negate                            
4032:000 | DONE ins | em 16 16 | 005bd5 | 98          |                 tya                  
4033:000 | DONE ins | em 16 16 | 005bd6 | 49 ff ff    |                 eor.# 0ffff          
4034:000 | DONE ins | em 16 16 | 005bd9 | 1a          |                 inc.a                
4035:000 | DONE ins | em 16 16 | 005bda | a8          |                 tay                  
4036:000 | DONE wsp | em 16 16 |        |             |
4037:000 | DONE lbl | em 16 16 | 005bdb |             | z_negate                             
4037:001 | DONE ins | em 16 16 | 005bdb | 60          |                 rts                  
4038:000 | DONE wsp | em 16 16 |        |             |
4039:000 | DONE wsp | em 16 16 |        |             |
4040:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4041:000 | DONE cmt | em 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
4042:000 | DONE cmt | em 16 16 |        |             | ; Delete entry that is NOS
4043:000 | DONE lbl | em 16 16 | 005bdc |             | xt_nip                               
4044:000 | DONE ins | em 16 16 | 005bdc | e8          |                 inx                  
4045:000 | DONE ins | em 16 16 | 005bdd | e8          |                 inx                  
4046:000 | DONE wsp | em 16 16 |        |             |
4047:000 | DONE lbl | em 16 16 | 005bde |             | z_nip                                
4047:001 | DONE ins | em 16 16 | 005bde | 60          |                 rts                  
4048:000 | DONE wsp | em 16 16 |        |             |
4049:000 | DONE wsp | em 16 16 |        |             |
4050:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4051:000 | DONE cmt | em 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
4052:000 | DONE cmt | em 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
4053:000 | DONE cmt | em 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
4054:000 | DONE cmt | em 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
4055:000 | DONE cmt | em 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
4056:000 | DONE cmt | em 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
4057:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
4058:000 | DONE cmt | em 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
4059:000 | DONE cmt | em 16 16 |        |             | ; signal a double cell number is required to be the last character of the
4060:000 | DONE cmt | em 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
4061:000 | DONE cmt | em 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
4062:000 | DONE lbl | em 16 16 | 005bdf |             | xt_number                            
4063:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4064:000 | DONE cmt | em 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
4065:000 | DONE cmt | em 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
4066:000 | DONE cmt | em 16 16 |        |             |                 ; for double
4067:000 | DONE ins | em 16 16 | 005bdf | f4 00 00    |                 phe.# 0000           
4068:000 | DONE wsp | em 16 16 |        |             |
4069:000 | DONE ins | em 16 16 | 005be2 | 84 24       |                 sty.d 000024         save length of string, freeing Y
4070:000 | DONE wsp | em 16 16 |        |             |
4071:000 | DONE cmt | em 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
4072:000 | DONE cmt | em 16 16 |        |             |                 ; a flag
4073:000 | DONE ins | em 16 16 | 005be4 | e2 20       |                 sep 20               
4073:001 | DONE ctl | em  8 16 |        |             |         .!a8
4074:000 | DONE ins | em  8 16 | 005be6 | a1 00       |                 lda.dxi 00           get first character
4075:000 | DONE ins | em  8 16 | 005be8 | c9 2d       |                 cmp.# 2d             
4076:000 | DONE ins | em  8 16 | 005bea | c2 20       |                 rep 20               
4076:001 | DONE ctl | em 16 16 |        |             |         .!a16
4077:000 | DONE ins | em 16 16 | 005bec | d0 09       |                 bne 005bf7           
4078:000 | DONE wsp | em 16 16 |        |             |
4079:000 | DONE cmt | em 16 16 |        |             |                 ; We have a minus.
4080:000 | DONE ins | em 16 16 | 005bee | 68          |                 pla                  
4081:000 | DONE ins | em 16 16 | 005bef | 09 00 ff    |                 ora.# 0ff00          MSB is minus
4082:000 | DONE ins | em 16 16 | 005bf2 | 48          |                 pha                  
4083:000 | DONE wsp | em 16 16 |        |             |
4084:000 | DONE ins | em 16 16 | 005bf3 | f6 00       |                 inc.dx 00            start one character later
4085:000 | DONE ins | em 16 16 | 005bf5 | c6 24       |                 dec.d 000024         reduce string length by one
4086:000 | DONE wsp | em 16 16 |        |             |
4087:000 | DONE lbl | em 16 16 | 005bf7 |             | number_dot                           
4088:000 | DONE cmt | em 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
4089:000 | DONE ins | em 16 16 | 005bf7 | a5 24       |                 lda.d 000024         get the string length
4090:000 | DONE ins | em 16 16 | 005bf9 | 3a          |                 dec.a                subtract one to convert length to index
4091:000 | DONE ins | em 16 16 | 005bfa | 18          |                 clc                  
4092:000 | DONE ins | em 16 16 | 005bfb | 75 00       |                 adc.dx 00            add length of string
4093:000 | DONE ins | em 16 16 | 005bfd | a8          |                 tay                  
4094:000 | DONE ins | em 16 16 | 005bfe | e2 20       |                 sep 20               
4094:001 | DONE ctl | em  8 16 |        |             |         .!a8
4095:000 | DONE ins | em  8 16 | 005c00 | b9 00 00    |                 lda.y 0000           get last character
4096:000 | DONE ins | em  8 16 | 005c03 | c9 2e       |                 cmp.# 2e             
4097:000 | DONE ins | em  8 16 | 005c05 | c2 20       |                 rep 20               
4097:001 | DONE ctl | em 16 16 |        |             |         .!a16
4098:000 | DONE ins | em 16 16 | 005c07 | d0 07       |                 bne 005c10           
4099:000 | DONE wsp | em 16 16 |        |             |
4100:000 | DONE cmt | em 16 16 |        |             |                 ; we have a dot
4101:000 | DONE ins | em 16 16 | 005c09 | 68          |                 pla                  get the flag back
4102:000 | DONE ins | em 16 16 | 005c0a | 09 ff 00    |                 ora.# 00ff           LSB is double
4103:000 | DONE ins | em 16 16 | 005c0d | 48          |                 pha                  
4104:000 | DONE wsp | em 16 16 |        |             |
4105:000 | DONE ins | em 16 16 | 005c0e | c6 24       |                 dec.d 000024         reduce string length by one
4106:000 | DONE wsp | em 16 16 |        |             |
4107:000 | DONE lbl | em 16 16 | 005c10 |             | number_main                          
4108:000 | DONE cmt | em 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
4109:000 | DONE ins | em 16 16 | 005c10 | b5 00       |                 lda.dx 00            get the string address to safety
4110:000 | DONE ins | em 16 16 | 005c12 | 74 00       |                 stz.dx 00            NOS is now zero
4111:000 | DONE ins | em 16 16 | 005c14 | ca          |                 dex                  
4112:000 | DONE ins | em 16 16 | 005c15 | ca          |                 dex                  
4113:000 | DONE ins | em 16 16 | 005c16 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
4114:000 | DONE ins | em 16 16 | 005c18 | ca          |                 dex                  
4115:000 | DONE ins | em 16 16 | 005c19 | ca          |                 dex                  
4116:000 | DONE wsp | em 16 16 |        |             |
4117:000 | DONE ins | em 16 16 | 005c1a | 95 00       |                 sta.dx 00            address is back as NOS
4118:000 | DONE ins | em 16 16 | 005c1c | a4 24       |                 ldy.d 000024         length is back as TOS
4119:000 | DONE wsp | em 16 16 |        |             |
4120:000 | DONE lbl | em 16 16 | 005c1e |             | number_loop                          
4121:000 | DONE ins | em 16 16 | 005c1e | 20 60 51    |                 jsr 005160           ( ud addr u -- ud addr u )
4122:000 | DONE wsp | em 16 16 |        |             |
4123:000 | DONE ins | em 16 16 | 005c21 | 98          |                 tya                  test length of returned string, should be 0
4124:000 | DONE ins | em 16 16 | 005c22 | f0 06       |                 beq 005c2a           
4125:000 | DONE wsp | em 16 16 |        |             |
4126:000 | DONE cmt | em 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
4127:000 | DONE cmt | em 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
4128:000 | DONE cmt | em 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
4129:000 | DONE cmt | em 16 16 |        |             |                 ; trouble one way or another
4130:000 | DONE cmt | em 16 16 |        |             |                 ; TODO print offending string
4131:000 | DONE ins | em 16 16 | 005c24 | a9 81 72    |                 lda.# 007281         
4132:000 | DONE ins | em 16 16 | 005c27 | 4c 9c 6a    |                 jmp 006a9c           
4133:000 | DONE wsp | em 16 16 |        |             |
4134:000 | DONE lbl | em 16 16 | 005c2a |             | number_ok                            
4135:000 | DONE cmt | em 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
4136:000 | DONE ins | em 16 16 | 005c2a | b4 02       |                 ldy.dx 02            
4137:000 | DONE ins | em 16 16 | 005c2c | e8          |                 inx                  
4138:000 | DONE ins | em 16 16 | 005c2d | e8          |                 inx                  
4139:000 | DONE ins | em 16 16 | 005c2e | e8          |                 inx                  
4140:000 | DONE ins | em 16 16 | 005c2f | e8          |                 inx                  
4141:000 | DONE wsp | em 16 16 |        |             |
4142:000 | DONE cmt | em 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
4143:000 | DONE cmt | em 16 16 |        |             |                 ; a minus and might actually be single-cell
4144:000 | DONE ins | em 16 16 | 005c30 | 68          |                 pla                  get copy of the flags
4145:000 | DONE ins | em 16 16 | 005c31 | 48          |                 pha                  
4146:000 | DONE ins | em 16 16 | 005c32 | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
4147:000 | DONE ins | em 16 16 | 005c35 | f0 1b       |                 beq 005c52           
4148:000 | DONE wsp | em 16 16 |        |             |
4149:000 | DONE cmt | em 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
4150:000 | DONE cmt | em 16 16 |        |             |                 ; negate it
4151:000 | DONE ins | em 16 16 | 005c37 | 68          |                 pla                  
4152:000 | DONE ins | em 16 16 | 005c38 | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
4153:000 | DONE ins | em 16 16 | 005c3b | f0 25       |                 beq 005c62           no minus, all done
4154:000 | DONE wsp | em 16 16 |        |             |
4155:000 | DONE ins | em 16 16 | 005c3d | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
4156:000 | DONE ins | em 16 16 | 005c3f | 49 ff ff    |                 eor.# 0ffff          
4157:000 | DONE wsp | em 16 16 |        |             |
4158:000 | DONE cmt | em 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
4159:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
4160:000 | DONE ins | em 16 16 | 005c42 | 18          |                 clc                  
4161:000 | DONE ins | em 16 16 | 005c43 | 69 01 00    |                 adc.# 0001           
4162:000 | DONE ins | em 16 16 | 005c46 | 95 00       |                 sta.dx 00            
4163:000 | DONE wsp | em 16 16 |        |             |
4164:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
4165:000 | DONE ins | em 16 16 | 005c48 | 98          |                 tya                  
4166:000 | DONE ins | em 16 16 | 005c49 | 49 ff ff    |                 eor.# 0ffff          
4167:000 | DONE ins | em 16 16 | 005c4c | 69 00 00    |                 adc.# 0000           we are only interested in the carry
4168:000 | DONE ins | em 16 16 | 005c4f | a8          |                 tay                  
4169:000 | DONE wsp | em 16 16 |        |             |
4170:000 | DONE ins | em 16 16 | 005c50 | 80 10       |                 bra 005c62           
4171:000 | DONE wsp | em 16 16 |        |             |
4172:000 | DONE lbl | em 16 16 | 005c52 |             | number_single                        
4173:000 | DONE cmt | em 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
4174:000 | DONE ins | em 16 16 | 005c52 | b4 00       |                 ldy.dx 00            
4175:000 | DONE ins | em 16 16 | 005c54 | e8          |                 inx                  
4176:000 | DONE ins | em 16 16 | 005c55 | e8          |                 inx                  
4177:000 | DONE wsp | em 16 16 |        |             |
4178:000 | DONE cmt | em 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
4179:000 | DONE cmt | em 16 16 |        |             |                 ; doubled for speed
4180:000 | DONE ins | em 16 16 | 005c56 | 68          |                 pla                  
4181:000 | DONE ins | em 16 16 | 005c57 | 29 00 ff    |                 and.# 0ff00          
4182:000 | DONE ins | em 16 16 | 005c5a | f0 06       |                 beq 005c62           no minus, all done
4183:000 | DONE wsp | em 16 16 |        |             |
4184:000 | DONE ins | em 16 16 | 005c5c | 98          |                 tya                  NEGATE
4185:000 | DONE ins | em 16 16 | 005c5d | 49 ff ff    |                 eor.# 0ffff          
4186:000 | DONE ins | em 16 16 | 005c60 | 1a          |                 inc.a                
4187:000 | DONE ins | em 16 16 | 005c61 | a8          |                 tay                  fall through to end
4188:000 | DONE wsp | em 16 16 |        |             |
4189:000 | DONE lbl | em 16 16 | 005c62 |             | z_number                             
4189:001 | DONE ins | em 16 16 | 005c62 | 60          |                 rts                  
4190:000 | DONE wsp | em 16 16 |        |             |
4191:000 | DONE wsp | em 16 16 |        |             |
4192:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4193:000 | DONE cmt | em 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
4194:000 | DONE cmt | em 16 16 |        |             | ; Logical OR
4195:000 | DONE lbl | em 16 16 | 005c63 |             | xt_or                                
4196:000 | DONE ins | em 16 16 | 005c63 | 98          |                 tya                  
4197:000 | DONE ins | em 16 16 | 005c64 | 15 00       |                 ora.dx 00            
4198:000 | DONE ins | em 16 16 | 005c66 | a8          |                 tay                  
4199:000 | DONE wsp | em 16 16 |        |             |
4200:000 | DONE ins | em 16 16 | 005c67 | e8          |                 inx                  
4201:000 | DONE ins | em 16 16 | 005c68 | e8          |                 inx                  
4202:000 | DONE wsp | em 16 16 |        |             |
4203:000 | DONE lbl | em 16 16 | 005c69 |             | z_or                                 
4203:001 | DONE ins | em 16 16 | 005c69 | 60          |                 rts                  
4204:000 | DONE wsp | em 16 16 |        |             |
4205:000 | DONE wsp | em 16 16 |        |             |
4206:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4207:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT ( -- addr ) X bytes / X cycles
4208:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump target for EMIT is stored. By default, this
4209:000 | DONE cmt | em 16 16 |        |             | ; will hold the value of put_chr from the kernel routine, but this can be
4210:000 | DONE cmt | em 16 16 |        |             | ; changed by the user
4211:000 | DONE lbl | em 16 16 | 005c6a |             | xt_output                            
4212:000 | DONE ins | em 16 16 | 005c6a | ca          |                 dex                  
4213:000 | DONE ins | em 16 16 | 005c6b | ca          |                 dex                  
4214:000 | DONE ins | em 16 16 | 005c6c | 94 00       |                 sty.dx 00            
4215:000 | DONE wsp | em 16 16 |        |             |
4216:000 | DONE ins | em 16 16 | 005c6e | a0 0e 00    |                 ldy.# 00000e         
4217:000 | DONE wsp | em 16 16 |        |             |
4218:000 | DONE lbl | em 16 16 | 005c71 |             | z_output                             
4218:001 | DONE ins | em 16 16 | 005c71 | 60          |                 rts                  
4219:000 | DONE wsp | em 16 16 |        |             |
4220:000 | DONE wsp | em 16 16 |        |             |
4221:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4222:000 | DONE cmt | em 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
4223:000 | DONE cmt | em 16 16 |        |             | ; Push NOS on Data Stack
4224:000 | DONE lbl | em 16 16 | 005c72 |             | xt_over                              
4225:000 | DONE ins | em 16 16 | 005c72 | ca          |                 dex                  
4226:000 | DONE ins | em 16 16 | 005c73 | ca          |                 dex                  
4227:000 | DONE ins | em 16 16 | 005c74 | 94 00       |                 sty.dx 00            
4228:000 | DONE ins | em 16 16 | 005c76 | b4 02       |                 ldy.dx 02            
4229:000 | DONE wsp | em 16 16 |        |             |
4230:000 | DONE lbl | em 16 16 | 005c78 |             | z_over                               
4230:001 | DONE ins | em 16 16 | 005c78 | 60          |                 rts                  
4231:000 | DONE wsp | em 16 16 |        |             |
4232:000 | DONE wsp | em 16 16 |        |             |
4233:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4234:000 | DONE cmt | em 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
4235:000 | DONE cmt | em 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
4236:000 | DONE cmt | em 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
4237:000 | DONE cmt | em 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
4238:000 | DONE cmt | em 16 16 |        |             | ; user and not used by the system
4239:000 | DONE lbl | em 16 16 | 005c79 |             | xt_pad                               
4240:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4241:000 | DONE ins | em 16 16 | 005c79 | ca          |                 dex                  
4242:000 | DONE ins | em 16 16 | 005c7a | ca          |                 dex                  
4243:000 | DONE ins | em 16 16 | 005c7b | 94 00       |                 sty.dx 00            
4244:000 | DONE wsp | em 16 16 |        |             |
4245:000 | DONE ins | em 16 16 | 005c7d | a5 00       |                 lda.d 000000         
4246:000 | DONE ins | em 16 16 | 005c7f | 18          |                 clc                  
4247:000 | DONE ins | em 16 16 | 005c80 | 69 ff 00    |                 adc.# 0000ff         
4248:000 | DONE ins | em 16 16 | 005c83 | a8          |                 tay                  
4249:000 | DONE wsp | em 16 16 |        |             |
4250:000 | DONE lbl | em 16 16 | 005c84 |             | z_pad                                
4250:001 | DONE ins | em 16 16 | 005c84 | 60          |                 rts                  
4251:000 | DONE wsp | em 16 16 |        |             |
4252:000 | DONE wsp | em 16 16 |        |             |
4253:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4254:000 | DONE cmt | em 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
4255:000 | DONE cmt | em 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
4256:000 | DONE cmt | em 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
4257:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite with EMIT
4258:000 | DONE lbl | em 16 16 | 005c85 |             | xt_page                              
4259:000 | DONE ins | em 16 16 | 005c85 | a9 90 72    |                 lda.# 007290         
4260:000 | DONE ins | em 16 16 | 005c88 | 20 a2 6a    |                 jsr 006aa2           
4261:000 | DONE wsp | em 16 16 |        |             |
4262:000 | DONE cmt | em 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
4263:000 | DONE cmt | em 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
4264:000 | DONE cmt | em 16 16 |        |             |                 ; So we send "ESC[H" as well.
4265:000 | DONE ins | em 16 16 | 005c8b | a9 95 72    |                 lda.# 007295         
4266:000 | DONE ins | em 16 16 | 005c8e | 20 a2 6a    |                 jsr 006aa2           
4267:000 | DONE wsp | em 16 16 |        |             |
4268:000 | DONE lbl | em 16 16 | 005c91 |             | z_page                               
4268:001 | DONE ins | em 16 16 | 005c91 | 60          |                 rts                  
4269:000 | DONE wsp | em 16 16 |        |             |
4270:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4271:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
4272:000 | DONE cmt | em 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
4273:000 | DONE cmt | em 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
4274:000 | DONE cmt | em 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
4275:000 | DONE cmt | em 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
4276:000 | DONE cmt | em 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
4277:000 | DONE lbl | em 16 16 | 005c92 |             | xt_parse-name                        
4278:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4279:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4280:000 | DONE cmt | em 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
4281:000 | DONE cmt | em 16 16 |        |             |                 ; character on data stack for PARSE
4282:000 | DONE ins | em 16 16 | 005c92 | 5a          |                 phy                  save TOS for later use
4283:000 | DONE ins | em 16 16 | 005c93 | a4 0c       |                 ldy.d 00000c         >IN
4284:000 | DONE ins | em 16 16 | 005c95 | e2 20       |                 sep 20               
4284:001 | DONE ctl | em  8 16 |        |             |         .!a8
4285:000 | DONE lbl | em  8 16 | 005c97 |             | parse-name_loop                      
4286:000 | DONE ins | em  8 16 | 005c97 | c4 0a       |                 cpy.d 00000a         end of line?
4287:000 | DONE ins | em  8 16 | 005c99 | f0 09       |                 beq 005ca4           
4288:000 | DONE wsp | em  8 16 |        |             |
4289:000 | DONE ins | em  8 16 | 005c9b | b1 08       |                 lda.diy 000008       LDA (CIB),Y
4290:000 | DONE ins | em  8 16 | 005c9d | c9 20       |                 cmp.# AscSP          
4291:000 | DONE ins | em  8 16 | 005c9f | d0 19       |                 bne 005cba           
4292:000 | DONE ins | em  8 16 | 005ca1 | c8          |                 iny                  
4293:000 | DONE ins | em  8 16 | 005ca2 | 80 f3       |                 bra 005c97           
4294:000 | DONE wsp | em  8 16 |        |             |
4295:000 | DONE lbl | em  8 16 | 005ca4 |             | parse-name_empty_line                
4296:000 | DONE ins | em  8 16 | 005ca4 | c2 20       |                 rep 20               
4296:001 | DONE ctl | em 16 16 |        |             |         .!a16
4297:000 | DONE cmt | em 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
4298:000 | DONE cmt | em 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
4299:000 | DONE cmt | em 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
4300:000 | DONE cmt | em 16 16 |        |             |                 ; show that it returns the address of the last space in the
4301:000 | DONE cmt | em 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
4302:000 | DONE ins | em 16 16 | 005ca6 | ca          |                 dex                  
4303:000 | DONE ins | em 16 16 | 005ca7 | ca          |                 dex                  
4304:000 | DONE ins | em 16 16 | 005ca8 | ca          |                 dex                  
4305:000 | DONE ins | em 16 16 | 005ca9 | ca          |                 dex                  
4306:000 | DONE wsp | em 16 16 |        |             |
4307:000 | DONE ins | em 16 16 | 005caa | 7a          |                 ply                  restore old TOS as 3OS
4308:000 | DONE ins | em 16 16 | 005cab | 94 02       |                 sty.dx 02            
4309:000 | DONE wsp | em 16 16 |        |             |
4310:000 | DONE ins | em 16 16 | 005cad | a5 08       |                 lda.d 000008         
4311:000 | DONE ins | em 16 16 | 005caf | 18          |                 clc                  
4312:000 | DONE ins | em 16 16 | 005cb0 | 65 0a       |                 adc.d 00000a         
4313:000 | DONE ins | em 16 16 | 005cb2 | 95 00       |                 sta.dx 00            Address as NOS
4314:000 | DONE wsp | em 16 16 |        |             |
4315:000 | DONE ins | em 16 16 | 005cb4 | a0 00 00    |                 ldy.# 0000           TOS
4316:000 | DONE wsp | em 16 16 |        |             |
4317:000 | DONE ins | em 16 16 | 005cb7 | 4c f8 5c    |                 jmp 005cf8           don't have to go through PARSE
4318:000 | DONE wsp | em 16 16 |        |             |
4319:000 | DONE lbl | em 16 16 | 005cba |             | parse-name_found                     
4320:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4321:000 | DONE ins | em 16 16 | 005cba | c2 20       |                 rep 20               
4321:001 | DONE ctl | em 16 16 |        |             |         .!a16
4322:000 | DONE ins | em 16 16 | 005cbc | 84 0c       |                 sty.d 00000c         new >IN
4323:000 | DONE wsp | em 16 16 |        |             |
4324:000 | DONE ins | em 16 16 | 005cbe | 7a          |                 ply                  recover TOS
4325:000 | DONE ins | em 16 16 | 005cbf | ca          |                 dex                  
4326:000 | DONE ins | em 16 16 | 005cc0 | ca          |                 dex                  
4327:000 | DONE ins | em 16 16 | 005cc1 | 94 00       |                 sty.dx 00            
4328:000 | DONE wsp | em 16 16 |        |             |
4329:000 | DONE ins | em 16 16 | 005cc3 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
4330:000 | DONE wsp | em 16 16 |        |             |
4331:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to PARSE
4332:000 | DONE wsp | em 16 16 |        |             |
4333:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4334:000 | DONE cmt | em 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
4335:000 | DONE cmt | em 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
4336:000 | DONE cmt | em 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
4337:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
4338:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
4339:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME drops through to here
4340:000 | DONE cmt | em 16 16 |        |             | ;
4341:000 | DONE cmt | em 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
4342:000 | DONE cmt | em 16 16 |        |             | ;     v       v             v
4343:000 | DONE cmt | em 16 16 |        |             | ;     |#####################|              Length of found string:
4344:000 | DONE cmt | em 16 16 |        |             | ;                                          ciblen - toin
4345:000 | DONE cmt | em 16 16 |        |             | ;     +------>|  toin (>IN)
4346:000 | DONE cmt | em 16 16 |        |             | ;     +-------------------->|  ciblen
4347:000 | DONE cmt | em 16 16 |        |             | ;
4348:000 | DONE cmt | em 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
4349:000 | DONE cmt | em 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
4350:000 | DONE cmt | em 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
4351:000 | DONE cmt | em 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
4352:000 | DONE lbl | em 16 16 | 005cc6 |             | xt_parse                             
4353:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4354:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4355:000 | DONE ins | em 16 16 | 005cc6 | 84 1c       |                 sty.d 00001c         save delimiter, char is LSB
4356:000 | DONE wsp | em 16 16 |        |             |
4357:000 | DONE cmt | em 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
4358:000 | DONE cmt | em 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
4359:000 | DONE cmt | em 16 16 |        |             |                 ; return
4360:000 | DONE ins | em 16 16 | 005cc8 | a5 0c       |                 lda.d 00000c         
4361:000 | DONE ins | em 16 16 | 005cca | 85 20       |                 sta.d 000020         save >IN for later length calculation
4362:000 | DONE ins | em 16 16 | 005ccc | 18          |                 clc                  
4363:000 | DONE ins | em 16 16 | 005ccd | 65 08       |                 adc.d 000008         
4364:000 | DONE wsp | em 16 16 |        |             |
4365:000 | DONE ins | em 16 16 | 005ccf | ca          |                 dex                  save addr as NOS
4366:000 | DONE ins | em 16 16 | 005cd0 | ca          |                 dex                  
4367:000 | DONE ins | em 16 16 | 005cd1 | 95 00       |                 sta.dx 00            
4368:000 | DONE wsp | em 16 16 |        |             |
4369:000 | DONE ins | em 16 16 | 005cd3 | 64 1e       |                 stz.d 00001e         offset for EOL/char found adjustment of >IN
4370:000 | DONE wsp | em 16 16 |        |             |
4371:000 | DONE cmt | em 16 16 |        |             |                 ; prepare loop using Y as index
4372:000 | DONE ins | em 16 16 | 005cd5 | a4 0c       |                 ldy.d 00000c         
4373:000 | DONE ins | em 16 16 | 005cd7 | e2 20       |                 sep 20               
4373:001 | DONE ctl | em  8 16 |        |             |         .!a8
4374:000 | DONE wsp | em  8 16 |        |             |
4375:000 | DONE lbl | em  8 16 | 005cd9 |             | parse_loop                           
4376:000 | DONE ins | em  8 16 | 005cd9 | c4 0a       |                 cpy.d 00000a         check for EOL first
4377:000 | DONE ins | em  8 16 | 005cdb | f0 0d       |                 beq 005cea           
4378:000 | DONE wsp | em  8 16 |        |             |
4379:000 | DONE ins | em  8 16 | 005cdd | b1 08       |                 lda.diy 000008       LDA (CIB),Y
4380:000 | DONE ins | em  8 16 | 005cdf | c5 1c       |                 cmp.d 00001c         found delimiter?
4381:000 | DONE ins | em  8 16 | 005ce1 | f0 03       |                 beq 005ce6           
4382:000 | DONE ins | em  8 16 | 005ce3 | c8          |                 iny                  
4383:000 | DONE ins | em  8 16 | 005ce4 | 80 f3       |                 bra 005cd9           
4384:000 | DONE wsp | em  8 16 |        |             |
4385:000 | DONE lbl | em  8 16 | 005ce6 |             | parse_found_delimiter                
4386:000 | DONE cmt | em  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
4387:000 | DONE cmt | em  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
4388:000 | DONE cmt | em  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
4389:000 | DONE cmt | em  8 16 |        |             |                 ; offset is for
4390:000 | DONE ins | em  8 16 | 005ce6 | c2 20       |                 rep 20               
4390:001 | DONE ctl | em 16 16 |        |             |         .!a16
4391:000 | DONE ins | em 16 16 | 005ce8 | e6 1e       |                 inc.d 00001e         
4392:000 | DONE wsp | em 16 16 |        |             |
4393:000 | DONE lbl | em 16 16 | 005cea |             | parse_reached_eol                    
4394:000 | DONE cmt | em 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
4395:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4396:000 | DONE ins | em 16 16 | 005cea | c2 20       |                 rep 20               
4396:001 | DONE ctl | em 16 16 |        |             |         .!a16
4397:000 | DONE ins | em 16 16 | 005cec | 98          |                 tya                  
4398:000 | DONE ins | em 16 16 | 005ced | 38          |                 sec                  
4399:000 | DONE ins | em 16 16 | 005cee | e5 20       |                 sbc.d 000020         original value for >IN / index of first char
4400:000 | DONE ins | em 16 16 | 005cf0 | 48          |                 pha                  save so we can manipulate Y
4401:000 | DONE wsp | em 16 16 |        |             |
4402:000 | DONE cmt | em 16 16 |        |             |                 ; calculate new >IN
4403:000 | DONE ins | em 16 16 | 005cf1 | 98          |                 tya                  
4404:000 | DONE ins | em 16 16 | 005cf2 | 18          |                 clc                  
4405:000 | DONE ins | em 16 16 | 005cf3 | 65 1e       |                 adc.d 00001e         offset for EOL vs found delimiter
4406:000 | DONE ins | em 16 16 | 005cf5 | 85 0c       |                 sta.d 00000c         
4407:000 | DONE wsp | em 16 16 |        |             |
4408:000 | DONE ins | em 16 16 | 005cf7 | 7a          |                 ply                  length of string in TOS
4409:000 | DONE wsp | em 16 16 |        |             |
4410:000 | DONE lbl | em 16 16 | 005cf8 |             | z_parse-name                         
4411:000 | DONE lbl | em 16 16 | 005cf8 |             | z_parse                              
4411:001 | DONE ins | em 16 16 | 005cf8 | 60          |                 rts                  
4412:000 | DONE wsp | em 16 16 |        |             |
4413:000 | DONE wsp | em 16 16 |        |             |
4414:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4415:000 | DONE cmt | em 16 16 |        |             | ; PICK ( n n u -- n n n ) X bytes / X cycles
4416:000 | DONE cmt | em 16 16 |        |             | ; Take the u-th element out of the stack and put it on TOS, overwriting the
4417:000 | DONE cmt | em 16 16 |        |             | ; current TOS. 0 PICK is equivalent to DUP, 1 PICK to OVER. Note that using PICK
4418:000 | DONE cmt | em 16 16 |        |             | ; is considered poor coding form. Also note that FIG Forth has a different
4419:000 | DONE cmt | em 16 16 |        |             | ; behavior for PICK than ANS Forth.
4420:000 | DONE cmt | em 16 16 |        |             | ; TODO use DEPTH to check for underflow
4421:000 | DONE lbl | em 16 16 | 005cf9 |             | xt_pick                              
4422:000 | DONE ins | em 16 16 | 005cf9 | 86 22       |                 stx.d 000022         
4423:000 | DONE wsp | em 16 16 |        |             |
4424:000 | DONE ins | em 16 16 | 005cfb | 98          |                 tya                  Y is just an offset to the DSP
4425:000 | DONE ins | em 16 16 | 005cfc | 0a          |                 asl.a                double because of cell size two bytes
4426:000 | DONE wsp | em 16 16 |        |             |
4427:000 | DONE ins | em 16 16 | 005cfd | 18          |                 clc                  
4428:000 | DONE ins | em 16 16 | 005cfe | 65 22       |                 adc.d 000022         
4429:000 | DONE wsp | em 16 16 |        |             |
4430:000 | DONE ins | em 16 16 | 005d00 | aa          |                 tax                  
4431:000 | DONE ins | em 16 16 | 005d01 | b5 00       |                 lda.dx 00            LDA $00,X
4432:000 | DONE ins | em 16 16 | 005d03 | a8          |                 tay                  Is now TOS
4433:000 | DONE wsp | em 16 16 |        |             |
4434:000 | DONE ins | em 16 16 | 005d04 | a6 22       |                 ldx.d 000022         
4435:000 | DONE wsp | em 16 16 |        |             |
4436:000 | DONE lbl | em 16 16 | 005d06 |             | z_pick                               
4436:001 | DONE ins | em 16 16 | 005d06 | 60          |                 rts                  
4437:000 | DONE wsp | em 16 16 |        |             |
4438:000 | DONE wsp | em 16 16 |        |             |
4439:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4440:000 | DONE cmt | em 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
4441:000 | DONE cmt | em 16 16 |        |             | ; Add NOS to address in TOS
4442:000 | DONE lbl | em 16 16 | 005d07 |             | xt_plusstore                         
4443:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4444:000 | DONE ins | em 16 16 | 005d07 | b9 00 00    |                 lda.y 0000           
4445:000 | DONE ins | em 16 16 | 005d0a | 18          |                 clc                  
4446:000 | DONE ins | em 16 16 | 005d0b | 75 00       |                 adc.dx 00            
4447:000 | DONE ins | em 16 16 | 005d0d | 99 00 00    |                 sta.y 0000           
4448:000 | DONE wsp | em 16 16 |        |             |
4449:000 | DONE ins | em 16 16 | 005d10 | b4 02       |                 ldy.dx 02            
4450:000 | DONE ins | em 16 16 | 005d12 | e8          |                 inx                  
4451:000 | DONE ins | em 16 16 | 005d13 | e8          |                 inx                  
4452:000 | DONE ins | em 16 16 | 005d14 | e8          |                 inx                  
4453:000 | DONE ins | em 16 16 | 005d15 | e8          |                 inx                  
4454:000 | DONE wsp | em 16 16 |        |             |
4455:000 | DONE lbl | em 16 16 | 005d16 |             | z_plusstore                          
4455:001 | DONE ins | em 16 16 | 005d16 | 60          |                 rts                  
4456:000 | DONE wsp | em 16 16 |        |             |
4457:000 | DONE wsp | em 16 16 |        |             |
4458:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4459:000 | DONE cmt | em 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
4460:000 | DONE cmt | em 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
4461:000 | DONE cmt | em 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
4462:000 | DONE cmt | em 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
4463:000 | DONE cmt | em 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
4464:000 | DONE cmt | em 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
4465:000 | DONE cmt | em 16 16 |        |             | ; <word>" directly. This word uses tmp1
4466:000 | DONE lbl | em 16 16 | 005d17 |             | xt_postpone                          
4467:000 | DONE cmt | em 16 16 |        |             |                 ; get name from string
4468:000 | DONE ins | em 16 16 | 005d17 | 20 92 5c    |                 jsr 005c92           ( addr n )
4469:000 | DONE wsp | em 16 16 |        |             |
4470:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no word in stream, complain and abort
4471:000 | DONE ins | em 16 16 | 005d1a | d0 06       |                 bne 005d22           
4472:000 | DONE ins | em 16 16 | 005d1c | a9 e4 71    |                 lda.# 0071e4         
4473:000 | DONE ins | em 16 16 | 005d1f | 4c 9c 6a    |                 jmp 006a9c           
4474:000 | DONE wsp | em 16 16 |        |             |
4475:000 | DONE lbl | em 16 16 | 005d22 |             | pp_got_word                          
4476:000 | DONE ins | em 16 16 | 005d22 | 20 a3 59    |                 jsr 0059a3           ( nt | 0 )
4477:000 | DONE wsp | em 16 16 |        |             |
4478:000 | DONE cmt | em 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
4479:000 | DONE ins | em 16 16 | 005d25 | d0 03       |                 bne 005d2a           
4480:000 | DONE ins | em 16 16 | 005d27 | a9 81 72    |                 lda.# 007281         
4481:000 | DONE wsp | em 16 16 |        |             |
4482:000 | DONE lbl | em 16 16 | 005d2a |             | pp_got_nt                            
4483:000 | DONE cmt | em 16 16 |        |             |                 ; Keep nt safe for later use
4484:000 | DONE ins | em 16 16 | 005d2a | 84 1c       |                 sty.d 00001c         
4485:000 | DONE wsp | em 16 16 |        |             |
4486:000 | DONE cmt | em 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
4487:000 | DONE ins | em 16 16 | 005d2c | 20 aa 5b    |                 jsr 005baa           NAME>INT ( nt -- xt )
4488:000 | DONE wsp | em 16 16 |        |             |
4489:000 | DONE cmt | em 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
4490:000 | DONE cmt | em 16 16 |        |             |                 ; with xt
4491:000 | DONE ins | em 16 16 | 005d2f | b2 1c       |                 lda.di 00001c        LDA (TMP1) - get status byte of word
4492:000 | DONE ins | em 16 16 | 005d31 | eb          |                 xba                  flags are MSB
4493:000 | DONE ins | em 16 16 | 005d32 | 29 02 00    |                 and.# IM             mask everything but Immediate bit
4494:000 | DONE ins | em 16 16 | 005d35 | f0 04       |                 beq 005d3b           
4495:000 | DONE wsp | em 16 16 |        |             |
4496:000 | DONE cmt | em 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
4497:000 | DONE cmt | em 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
4498:000 | DONE cmt | em 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
4499:000 | DONE ins | em 16 16 | 005d37 | 20 8a 56    |                 jsr 00568a           
4500:000 | DONE ins | em 16 16 | 005d3a | 60          |                 rts                  
4501:000 | DONE wsp | em 16 16 |        |             |
4502:000 | DONE lbl | em 16 16 | 005d3b |             | pp_not_immediate                     
4503:000 | DONE cmt | em 16 16 |        |             |                 ; This is not an immediate word, so we enact "deferred
4504:000 | DONE cmt | em 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
4505:000 | DONE cmt | em 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
4506:000 | DONE cmt | em 16 16 |        |             |                 ; a subroutine jump to COMPILE,
4507:000 | DONE ins | em 16 16 | 005d3b | f4 05 5b    |                 phe.# 005b05         PEA LITERAL_RT
4508:000 | DONE ins | em 16 16 | 005d3e | 20 7b 6a    |                 jsr 006a7b           
4509:000 | DONE wsp | em 16 16 |        |             |
4510:000 | DONE cmt | em 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
4511:000 | DONE cmt | em 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
4512:000 | DONE cmt | em 16 16 |        |             |                 ; and ruin everything
4513:000 | DONE ins | em 16 16 | 005d41 | 20 42 52    |                 jsr 005242           
4514:000 | DONE wsp | em 16 16 |        |             |
4515:000 | DONE cmt | em 16 16 |        |             |                 ; compile COMPILE,
4516:000 | DONE ins | em 16 16 | 005d44 | f4 8a 56    |                 phe.# 00568a         
4517:000 | DONE ins | em 16 16 | 005d47 | 20 7b 6a    |                 jsr 006a7b           
4518:000 | DONE wsp | em 16 16 |        |             |
4519:000 | DONE lbl | em 16 16 | 005d4a |             | z_postpone                           
4519:001 | DONE ins | em 16 16 | 005d4a | 60          |                 rts                  
4520:000 | DONE wsp | em 16 16 |        |             |
4521:000 | DONE wsp | em 16 16 |        |             |
4522:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4523:000 | DONE cmt | em 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
4524:000 | DONE cmt | em 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
4525:000 | DONE cmt | em 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
4526:000 | DONE cmt | em 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
4527:000 | DONE cmt | em 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
4528:000 | DONE cmt | em 16 16 |        |             | ; actually short enough to make that reasonable
4529:000 | DONE cmt | em 16 16 |        |             | ; TODO consider special case in COMPILE, see there
4530:000 | DONE lbl | em 16 16 | 005d4b |             | xt_rfetch                            
4531:000 | DONE cmt | em 16 16 |        |             |                 ; get return address that is on top of the return stack
4532:000 | DONE ins | em 16 16 | 005d4b | 68          |                 pla                  
4533:000 | DONE wsp | em 16 16 |        |             |
4534:000 | DONE ins | em 16 16 | 005d4c | ca          |                 dex                  
4535:000 | DONE ins | em 16 16 | 005d4d | ca          |                 dex                  
4536:000 | DONE ins | em 16 16 | 005d4e | 94 00       |                 sty.dx 00            
4537:000 | DONE wsp | em 16 16 |        |             |
4538:000 | DONE ins | em 16 16 | 005d50 | 7a          |                 ply                  get top of return stack and push copy back again
4539:000 | DONE ins | em 16 16 | 005d51 | 5a          |                 phy                  
4540:000 | DONE wsp | em 16 16 |        |             |
4541:000 | DONE ins | em 16 16 | 005d52 | 48          |                 pha                  restore the return address
4542:000 | DONE wsp | em 16 16 |        |             |
4543:000 | DONE lbl | em 16 16 | 005d53 |             | z_rfetch                             
4543:001 | DONE ins | em 16 16 | 005d53 | 60          |                 rts                  
4544:000 | DONE wsp | em 16 16 |        |             |
4545:000 | DONE wsp | em 16 16 |        |             |
4546:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4547:000 | DONE cmt | em 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
4548:000 | DONE cmt | em 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
4549:000 | DONE cmt | em 16 16 |        |             | ; jump address out of the way first.
4550:000 | DONE cmt | em 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
4551:000 | DONE lbl | em 16 16 | 005d54 |             | xt_fromr                             
4552:000 | DONE cmt | em 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
4553:000 | DONE cmt | em 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
4554:000 | DONE cmt | em 16 16 |        |             |                 ; a waste of nine cycles
4555:000 | DONE ins | em 16 16 | 005d54 | 68          |                 pla                  
4556:000 | DONE cmt | em 16 16 |        |             |                 ; --- cut for native coding ---
4557:000 | DONE wsp | em 16 16 |        |             |
4558:000 | DONE ins | em 16 16 | 005d55 | ca          |                 dex                  
4559:000 | DONE ins | em 16 16 | 005d56 | ca          |                 dex                  
4560:000 | DONE ins | em 16 16 | 005d57 | 94 00       |                 sty.dx 00            
4561:000 | DONE wsp | em 16 16 |        |             |
4562:000 | DONE ins | em 16 16 | 005d59 | 7a          |                 ply                  the actual work
4563:000 | DONE wsp | em 16 16 |        |             |
4564:000 | DONE cmt | em 16 16 |        |             |                 ; --- cut for native coding ---
4565:000 | DONE ins | em 16 16 | 005d5a | 48          |                 pha                  get return address back
4566:000 | DONE wsp | em 16 16 |        |             |
4567:000 | DONE lbl | em 16 16 | 005d5b |             | z_fromr                              
4567:001 | DONE ins | em 16 16 | 005d5b | 60          |                 rts                  
4568:000 | DONE wsp | em 16 16 |        |             |
4569:000 | DONE wsp | em 16 16 |        |             |
4570:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4571:000 | DONE cmt | em 16 16 |        |             | ; RECURSE ( -- ) X bytes / X cycles
4572:000 | DONE cmt | em 16 16 |        |             | ; Get the current definition to call itself This may not be native compile. Test
4573:000 | DONE cmt | em 16 16 |        |             | ; with " : GCD ( a b -- gcd) ?DUP IF TUCK MOD RECURSE THEN ;" for instance with
4574:000 | DONE cmt | em 16 16 |        |             | ; "784 48 GCD ." --> 16 ; example from
4575:000 | DONE cmt | em 16 16 |        |             | ; http://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm
4576:000 | DONE lbl | em 16 16 | 005d5c |             | xt_recurse                           
4577:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4578:000 | DONE cmt | em 16 16 |        |             |                 ; save JSR instruction
4579:000 | DONE ins | em 16 16 | 005d5c | a9 20 00    |                 lda.# 0020           
4580:000 | DONE ins | em 16 16 | 005d5f | 92 00       |                 sta.di 000000        
4581:000 | DONE ins | em 16 16 | 005d61 | e6 00       |                 inc.d 000000         
4582:000 | DONE wsp | em 16 16 |        |             |
4583:000 | DONE cmt | em 16 16 |        |             |                 ; The temporary variable WORKWORD points to the nt of the word,
4584:000 | DONE cmt | em 16 16 |        |             |                 ; not it's xt, which is kept four bytes below
4585:000 | DONE ins | em 16 16 | 005d63 | a5 04       |                 lda.d 000004         
4586:000 | DONE ins | em 16 16 | 005d65 | 1a          |                 inc.a                
4587:000 | DONE ins | em 16 16 | 005d66 | 1a          |                 inc.a                
4588:000 | DONE ins | em 16 16 | 005d67 | 1a          |                 inc.a                
4589:000 | DONE ins | em 16 16 | 005d68 | 1a          |                 inc.a                
4590:000 | DONE wsp | em 16 16 |        |             |
4591:000 | DONE ins | em 16 16 | 005d69 | 5a          |                 phy                  
4592:000 | DONE ins | em 16 16 | 005d6a | a8          |                 tay                  
4593:000 | DONE ins | em 16 16 | 005d6b | b9 00 00    |                 lda.y 0000           
4594:000 | DONE ins | em 16 16 | 005d6e | 7a          |                 ply                  
4595:000 | DONE wsp | em 16 16 |        |             |
4596:000 | DONE ins | em 16 16 | 005d6f | 92 00       |                 sta.di 000000        
4597:000 | DONE ins | em 16 16 | 005d71 | e6 00       |                 inc.d 000000         
4598:000 | DONE ins | em 16 16 | 005d73 | e6 00       |                 inc.d 000000         
4599:000 | DONE wsp | em 16 16 |        |             |
4600:000 | DONE lbl | em 16 16 | 005d75 |             | z_recurse                            
4600:001 | DONE ins | em 16 16 | 005d75 | 60          |                 rts                  
4601:000 | DONE wsp | em 16 16 |        |             |
4602:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4603:000 | DONE cmt | em 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
4604:000 | DONE cmt | em 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
4605:000 | DONE cmt | em 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
4606:000 | DONE cmt | em 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
4607:000 | DONE cmt | em 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
4608:000 | DONE cmt | em 16 16 |        |             | ; containing no characters is considered successful. If there is no input
4609:000 | DONE cmt | em 16 16 |        |             | ; available from the current input source, return false. When the input source
4610:000 | DONE cmt | em 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
4611:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
4612:000 | DONE cmt | em 16 16 |        |             | ; and Conklin & Rather p. 156
4613:000 | DONE lbl | em 16 16 | 005d76 |             | xt_refill                            
4614:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4615:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4616:000 | DONE cmt | em 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
4617:000 | DONE cmt | em 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
4618:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
4619:000 | DONE ins | em 16 16 | 005d76 | a5 06       |                 lda.d 000006         
4620:000 | DONE ins | em 16 16 | 005d78 | d0 15       |                 bne 005d8f           
4621:000 | DONE wsp | em 16 16 |        |             |
4622:000 | DONE cmt | em 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
4623:000 | DONE cmt | em 16 16 |        |             |                 ; with ACCEPT.
4624:000 | DONE ins | em 16 16 | 005d7a | ca          |                 dex                  
4625:000 | DONE ins | em 16 16 | 005d7b | ca          |                 dex                  
4626:000 | DONE ins | em 16 16 | 005d7c | ca          |                 dex                  
4627:000 | DONE ins | em 16 16 | 005d7d | ca          |                 dex                  
4628:000 | DONE ins | em 16 16 | 005d7e | 94 02       |                 sty.dx 02            
4629:000 | DONE wsp | em 16 16 |        |             |
4630:000 | DONE ins | em 16 16 | 005d80 | a5 08       |                 lda.d 000008         address of current input buffer NOS
4631:000 | DONE ins | em 16 16 | 005d82 | 95 00       |                 sta.dx 00            
4632:000 | DONE ins | em 16 16 | 005d84 | a0 80 00    |                 ldy.# 000080         max number of chars to accept TOS
4633:000 | DONE wsp | em 16 16 |        |             |
4634:000 | DONE ins | em 16 16 | 005d87 | 20 ba 54    |                 jsr 0054ba           ( addr n1 -- n2)
4635:000 | DONE wsp | em 16 16 |        |             |
4636:000 | DONE cmt | em 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
4637:000 | DONE cmt | em 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
4638:000 | DONE ins | em 16 16 | 005d8a | a0 ff ff    |                 ldy.# 0ffff          
4639:000 | DONE wsp | em 16 16 |        |             |
4640:000 | DONE ins | em 16 16 | 005d8d | 80 10       |                 bra 005d9f           
4641:000 | DONE wsp | em 16 16 |        |             |
4642:000 | DONE lbl | em 16 16 | 005d8f |             | refill_src_not_kbd                   
4643:000 | DONE cmt | em 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
4644:000 | DONE cmt | em 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
4645:000 | DONE ins | em 16 16 | 005d8f | 1a          |                 inc.a                
4646:000 | DONE ins | em 16 16 | 005d90 | d0 07       |                 bne 005d99           
4647:000 | DONE wsp | em 16 16 |        |             |
4648:000 | DONE cmt | em 16 16 |        |             |                 ; Simply return FALSE flag as per specification
4649:000 | DONE ins | em 16 16 | 005d92 | ca          |                 dex                  
4650:000 | DONE ins | em 16 16 | 005d93 | ca          |                 dex                  
4651:000 | DONE ins | em 16 16 | 005d94 | 94 00       |                 sty.dx 00            
4652:000 | DONE ins | em 16 16 | 005d96 | a8          |                 tay                  
4653:000 | DONE wsp | em 16 16 |        |             |
4654:000 | DONE ins | em 16 16 | 005d97 | 80 06       |                 bra 005d9f           
4655:000 | DONE wsp | em 16 16 |        |             |
4656:000 | DONE lbl | em 16 16 | 005d99 |             | refill_source_is_not_string          
4657:000 | DONE cmt | em 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
4658:000 | DONE cmt | em 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
4659:000 | DONE cmt | em 16 16 |        |             |                 ; report an error and jump to ABORT.
4660:000 | DONE ins | em 16 16 | 005d99 | a9 39 72    |                 lda.# 007239         
4661:000 | DONE ins | em 16 16 | 005d9c | 4c 9c 6a    |                 jmp 006a9c           
4662:000 | DONE wsp | em 16 16 |        |             |
4663:000 | DONE lbl | em 16 16 | 005d9f |             | z_refill                             
4663:001 | DONE ins | em 16 16 | 005d9f | 60          |                 rts                  dummy for compiling
4664:000 | DONE wsp | em 16 16 |        |             |
4665:000 | DONE wsp | em 16 16 |        |             |
4666:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4667:000 | DONE cmt | em 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
4668:000 | DONE cmt | em 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
4669:000 | DONE cmt | em 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
4670:000 | DONE lbl | em 16 16 | 005da0 |             | xt_rot                               
4671:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4672:000 | DONE ins | em 16 16 | 005da0 | b5 00       |                 lda.dx 00            save b
4673:000 | DONE ins | em 16 16 | 005da2 | 94 00       |                 sty.dx 00            move c to NOS
4674:000 | DONE ins | em 16 16 | 005da4 | b4 02       |                 ldy.dx 02            move a to TOS
4675:000 | DONE ins | em 16 16 | 005da6 | 95 02       |                 sta.dx 02            save b as 3OS
4676:000 | DONE wsp | em 16 16 |        |             |
4677:000 | DONE lbl | em 16 16 | 005da8 |             | z_rot                                
4677:001 | DONE ins | em 16 16 | 005da8 | 60          |                 rts                  
4678:000 | DONE wsp | em 16 16 |        |             |
4679:000 | DONE wsp | em 16 16 |        |             |
4680:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4681:000 | DONE cmt | em 16 16 |        |             | ; RSHIFT ( n u -- u ) X bytes / X cycles
4682:000 | DONE cmt | em 16 16 |        |             | ; Shift TOS right, filling vacant bits with zero
4683:000 | DONE lbl | em 16 16 | 005da9 |             | xt_rshift                            
4684:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
4685:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
4686:000 | DONE ins | em 16 16 | 005da9 | 98          |                 tya                  
4687:000 | DONE ins | em 16 16 | 005daa | 29 0f 00    |                 and.# 000f           
4688:000 | DONE ins | em 16 16 | 005dad | f0 09       |                 beq 005db8           if zero shifts, we're done
4689:000 | DONE wsp | em 16 16 |        |             |
4690:000 | DONE ins | em 16 16 | 005daf | a8          |                 tay                  number of shifts is TOS
4691:000 | DONE ins | em 16 16 | 005db0 | b5 00       |                 lda.dx 00            number is in NOS
4692:000 | DONE lbl | em 16 16 | 005db2 |             | rshift_loop                          
4693:000 | DONE ins | em 16 16 | 005db2 | 4a          |                 lsr.a                
4694:000 | DONE ins | em 16 16 | 005db3 | 88          |                 dey                  
4695:000 | DONE ins | em 16 16 | 005db4 | d0 fc       |                 bne 005db2           
4696:000 | DONE wsp | em 16 16 |        |             |
4697:000 | DONE ins | em 16 16 | 005db6 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
4698:000 | DONE wsp | em 16 16 |        |             |
4699:000 | DONE lbl | em 16 16 | 005db8 |             | rshift_done                          
4700:000 | DONE ins | em 16 16 | 005db8 | b4 00       |                 ldy.dx 00            
4701:000 | DONE ins | em 16 16 | 005dba | e8          |                 inx                  
4702:000 | DONE ins | em 16 16 | 005dbb | e8          |                 inx                  
4703:000 | DONE wsp | em 16 16 |        |             |
4704:000 | DONE lbl | em 16 16 | 005dbc |             | z_rshift                             
4704:001 | DONE ins | em 16 16 | 005dbc | 60          |                 rts                  
4705:000 | DONE wsp | em 16 16 |        |             |
4706:000 | DONE wsp | em 16 16 |        |             |
4707:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4708:000 | DONE cmt | em 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
4709:000 | DONE cmt | em 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
4710:000 | DONE cmt | em 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
4711:000 | DONE cmt | em 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
4712:000 | DONE cmt | em 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
4713:000 | DONE cmt | em 16 16 |        |             | ; want it in code
4714:000 | DONE lbl | em 16 16 | 005dbd |             | xt_squote                            
4715:000 | DONE cmt | em 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
4716:000 | DONE cmt | em 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
4717:000 | DONE ins | em 16 16 | 005dbd | ca          |                 dex                  
4718:000 | DONE ins | em 16 16 | 005dbe | ca          |                 dex                  
4719:000 | DONE ins | em 16 16 | 005dbf | 94 00       |                 sty.dx 00            
4720:000 | DONE wsp | em 16 16 |        |             |
4721:000 | DONE ins | em 16 16 | 005dc1 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
4722:000 | DONE ins | em 16 16 | 005dc4 | 20 c6 5c    |                 jsr 005cc6           Returns ( addr u ) of string
4723:000 | DONE wsp | em 16 16 |        |             |
4724:000 | DONE cmt | em 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
4725:000 | DONE cmt | em 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
4726:000 | DONE cmt | em 16 16 |        |             |                 ; we are interpreting, we're done
4727:000 | DONE ins | em 16 16 | 005dc7 | a5 14       |                 lda.d 000014         
4728:000 | DONE ins | em 16 16 | 005dc9 | d0 24       |                 bne 005def           
4729:000 | DONE wsp | em 16 16 |        |             |
4730:000 | DONE cmt | em 16 16 |        |             | 		; We copy our string to someplace safe because it lives
4731:000 | DONE cmt | em 16 16 |        |             |                 ; dangerously if we leave it in the input buffer. This might
4732:000 | DONE cmt | em 16 16 |        |             |                 ; seem like a lot of effort for a few bytes, but MVN is so fast
4733:000 | DONE cmt | em 16 16 |        |             |                 ; - 7 cycles per byte - that it is worth it. See
4734:000 | DONE cmt | em 16 16 |        |             |                 ; http://forum.6502.org/viewtopic.php?f=2&t=1685&p=50975#p50975
4735:000 | DONE cmt | em 16 16 |        |             |                 ; and http://6502.org/tutorials/65c816opcodes.html#6.6
4736:000 | DONE ins | em 16 16 | 005dcb | ca          |                 dex                  
4737:000 | DONE ins | em 16 16 | 005dcc | ca          |                 dex                  
4738:000 | DONE ins | em 16 16 | 005dcd | 94 00       |                 sty.dx 00            
4739:000 | DONE ins | em 16 16 | 005dcf | a4 00       |                 ldy.d 000000         HERE  ( addr-s u addr-d )
4740:000 | DONE wsp | em 16 16 |        |             |
4741:000 | DONE ins | em 16 16 | 005dd1 | b5 00       |                 lda.dx 00            SWAP ( addr-s addr-d u )
4742:000 | DONE ins | em 16 16 | 005dd3 | 94 00       |                 sty.dx 00            
4743:000 | DONE ins | em 16 16 | 005dd5 | a8          |                 tay                  
4744:000 | DONE wsp | em 16 16 |        |             |
4745:000 | DONE ins | em 16 16 | 005dd6 | 5a          |                 phy                  save copy of u
4746:000 | DONE ins | em 16 16 | 005dd7 | b5 00       |                 lda.dx 00            save copy of addr-d
4747:000 | DONE ins | em 16 16 | 005dd9 | 48          |                 pha                  
4748:000 | DONE wsp | em 16 16 |        |             |
4749:000 | DONE ins | em 16 16 | 005dda | 20 96 5b    |                 jsr 005b96           
4750:000 | DONE wsp | em 16 16 |        |             |
4751:000 | DONE ins | em 16 16 | 005ddd | ca          |                 dex                  
4752:000 | DONE ins | em 16 16 | 005dde | ca          |                 dex                  
4753:000 | DONE ins | em 16 16 | 005ddf | ca          |                 dex                  
4754:000 | DONE ins | em 16 16 | 005de0 | ca          |                 dex                  
4755:000 | DONE ins | em 16 16 | 005de1 | 94 02       |                 sty.dx 02            
4756:000 | DONE wsp | em 16 16 |        |             |
4757:000 | DONE ins | em 16 16 | 005de3 | 68          |                 pla                  get addr-d back
4758:000 | DONE ins | em 16 16 | 005de4 | 95 00       |                 sta.dx 00            put NOS
4759:000 | DONE ins | em 16 16 | 005de6 | 68          |                 pla                  get u back, put TOS
4760:000 | DONE ins | em 16 16 | 005de7 | a8          |                 tay                  
4761:000 | DONE wsp | em 16 16 |        |             |
4762:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4763:000 | DONE ins | em 16 16 | 005de8 | 18          |                 clc                  
4764:000 | DONE ins | em 16 16 | 005de9 | 65 00       |                 adc.d 000000         
4765:000 | DONE ins | em 16 16 | 005deb | 85 00       |                 sta.d 000000         
4766:000 | DONE wsp | em 16 16 |        |             |
4767:000 | DONE ins | em 16 16 | 005ded | 80 03       |                 bra 005df2           
4768:000 | DONE wsp | em 16 16 |        |             |
4769:000 | DONE lbl | em 16 16 | 005def |             | squote_compile                       
4770:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so we need SLITERAL
4771:000 | DONE ins | em 16 16 | 005def | 20 13 5e    |                 jsr 005e13           
4772:000 | DONE wsp | em 16 16 |        |             |
4773:000 | DONE lbl | em 16 16 | 005df2 |             | z_squote                             
4773:001 | DONE ins | em 16 16 | 005df2 | 60          |                 rts                  
4774:000 | DONE wsp | em 16 16 |        |             |
4775:000 | DONE wsp | em 16 16 |        |             |
4776:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4777:000 | DONE cmt | em 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
4778:000 | DONE cmt | em 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
4779:000 | DONE lbl | em 16 16 | 005df3 |             | xt_stod                              
4780:000 | DONE ins | em 16 16 | 005df3 | ca          |                 dex                  make room on stack
4781:000 | DONE ins | em 16 16 | 005df4 | ca          |                 dex                  
4782:000 | DONE ins | em 16 16 | 005df5 | 94 00       |                 sty.dx 00            
4783:000 | DONE wsp | em 16 16 |        |             |
4784:000 | DONE ins | em 16 16 | 005df7 | 98          |                 tya                  force flag check
4785:000 | DONE ins | em 16 16 | 005df8 | 10 05       |                 bpl 005dff           
4786:000 | DONE wsp | em 16 16 |        |             |
4787:000 | DONE cmt | em 16 16 |        |             |                 ; negative number, extend sign
4788:000 | DONE ins | em 16 16 | 005dfa | a0 ff ff    |                 ldy.# 0ffff          
4789:000 | DONE ins | em 16 16 | 005dfd | 80 03       |                 bra 005e02           
4790:000 | DONE wsp | em 16 16 |        |             |
4791:000 | DONE lbl | em 16 16 | 005dff |             | stod_pos                             
4792:000 | DONE cmt | em 16 16 |        |             |                 ; positive number
4793:000 | DONE ins | em 16 16 | 005dff | a0 00 00    |                 ldy.# 0000           fall through
4794:000 | DONE wsp | em 16 16 |        |             |
4795:000 | DONE lbl | em 16 16 | 005e02 |             | z_stod                               
4795:001 | DONE ins | em 16 16 | 005e02 | 60          |                 rts                  
4796:000 | DONE wsp | em 16 16 |        |             |
4797:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4798:000 | DONE cmt | em 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
4799:000 | DONE cmt | em 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
4800:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
4801:000 | DONE cmt | em 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
4802:000 | DONE lbl | em 16 16 | 005e03 |             | xt_sign                              
4803:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4804:000 | DONE cmt | em 16 16 |        |             |                 ; See if number is negative
4805:000 | DONE ins | em 16 16 | 005e03 | 98          |                 tya                  force flag check
4806:000 | DONE ins | em 16 16 | 005e04 | 10 08       |                 bpl 005e0e           
4807:000 | DONE wsp | em 16 16 |        |             |
4808:000 | DONE cmt | em 16 16 |        |             |                 ; We're negative, overwrite number TOS
4809:000 | DONE ins | em 16 16 | 005e06 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
4810:000 | DONE wsp | em 16 16 |        |             |
4811:000 | DONE ins | em 16 16 | 005e09 | 20 bf 5a    |                 jsr 005abf           
4812:000 | DONE ins | em 16 16 | 005e0c | 80 04       |                 bra 005e12           
4813:000 | DONE wsp | em 16 16 |        |             |
4814:000 | DONE lbl | em 16 16 | 005e0e |             | sign_plus                            
4815:000 | DONE ins | em 16 16 | 005e0e | b4 00       |                 ldy.dx 00            get rid of number and leave
4816:000 | DONE ins | em 16 16 | 005e10 | e8          |                 inx                  
4817:000 | DONE ins | em 16 16 | 005e11 | e8          |                 inx                  
4818:000 | DONE wsp | em 16 16 |        |             |
4819:000 | DONE lbl | em 16 16 | 005e12 |             | z_sign                               
4819:001 | DONE ins | em 16 16 | 005e12 | 60          |                 rts                  
4820:000 | DONE wsp | em 16 16 |        |             |
4821:000 | DONE wsp | em 16 16 |        |             |
4822:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4823:000 | DONE cmt | em 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
4824:000 | DONE cmt | em 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
4825:000 | DONE cmt | em 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
4826:000 | DONE cmt | em 16 16 |        |             | ; tmp2
4827:000 | DONE lbl | em 16 16 | 005e13 |             | xt_sliteral                          
4828:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4829:000 | DONE cmt | em 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
4830:000 | DONE cmt | em 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
4831:000 | DONE cmt | em 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
4832:000 | DONE cmt | em 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
4833:000 | DONE cmt | em 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
4834:000 | DONE ins | em 16 16 | 005e13 | b5 00       |                 lda.dx 00            Address of string is NOS
4835:000 | DONE ins | em 16 16 | 005e15 | 85 1c       |                 sta.d 00001c         
4836:000 | DONE ins | em 16 16 | 005e17 | 84 1e       |                 sty.d 00001e         keep copy of string length
4837:000 | DONE wsp | em 16 16 |        |             |
4838:000 | DONE ins | em 16 16 | 005e19 | e2 20       |                 sep 20               
4838:001 | DONE ctl | em  8 16 |        |             |         .!a8
4839:000 | DONE ins | em  8 16 | 005e1b | a9 4c       |                 lda.# 04c            opcode for JMP
4840:000 | DONE ins | em  8 16 | 005e1d | 92 00       |                 sta.di 000000        STA (CP)
4841:000 | DONE ins | em  8 16 | 005e1f | c2 20       |                 rep 20               
4841:001 | DONE ctl | em 16 16 |        |             |         .!a16
4842:000 | DONE ins | em 16 16 | 005e21 | e6 00       |                 inc.d 000000         
4843:000 | DONE wsp | em 16 16 |        |             |
4844:000 | DONE cmt | em 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
4845:000 | DONE cmt | em 16 16 |        |             |                 ; instruction itself ) + the length of the string
4846:000 | DONE ins | em 16 16 | 005e23 | a5 1e       |                 lda.d 00001e         string length
4847:000 | DONE ins | em 16 16 | 005e25 | 1a          |                 inc.a                
4848:000 | DONE ins | em 16 16 | 005e26 | 1a          |                 inc.a                
4849:000 | DONE wsp | em 16 16 |        |             |
4850:000 | DONE ins | em 16 16 | 005e27 | 18          |                 clc                  
4851:000 | DONE ins | em 16 16 | 005e28 | 65 00       |                 adc.d 000000         current address
4852:000 | DONE ins | em 16 16 | 005e2a | 92 00       |                 sta.di 000000        store jump target
4853:000 | DONE wsp | em 16 16 |        |             |
4854:000 | DONE cmt | em 16 16 |        |             |                 ; update CP to move past JMP instruction
4855:000 | DONE ins | em 16 16 | 005e2c | e6 00       |                 inc.d 000000         
4856:000 | DONE ins | em 16 16 | 005e2e | e6 00       |                 inc.d 000000         
4857:000 | DONE wsp | em 16 16 |        |             |
4858:000 | DONE cmt | em 16 16 |        |             |                 ; now we can safely copy the code
4859:000 | DONE ins | em 16 16 | 005e30 | 88          |                 dey                  last offset is one less than length
4860:000 | DONE ins | em 16 16 | 005e31 | e2 20       |                 sep 20               
4860:001 | DONE ctl | em  8 16 |        |             |         .!a8
4861:000 | DONE lbl | em  8 16 | 005e33 |             | sl_loop                              
4862:000 | DONE ins | em  8 16 | 005e33 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4863:000 | DONE ins | em  8 16 | 005e35 | 91 00       |                 sta.diy 000000       STA (CP),Y
4864:000 | DONE ins | em  8 16 | 005e37 | 88          |                 dey                  
4865:000 | DONE ins | em  8 16 | 005e38 | 10 f9       |                 bpl 005e33           
4866:000 | DONE wsp | em  8 16 |        |             |
4867:000 | DONE ins | em  8 16 | 005e3a | c2 20       |                 rep 20               
4867:001 | DONE ctl | em 16 16 |        |             |         .!a16
4868:000 | DONE cmt | em 16 16 |        |             |                 ; keep old CP as new address of string
4869:000 | DONE ins | em 16 16 | 005e3c | a5 00       |                 lda.d 000000         
4870:000 | DONE ins | em 16 16 | 005e3e | 85 1c       |                 sta.d 00001c         overwrites original address
4871:000 | DONE wsp | em 16 16 |        |             |
4872:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4873:000 | DONE ins | em 16 16 | 005e40 | 18          |                 clc                  
4874:000 | DONE ins | em 16 16 | 005e41 | 65 1e       |                 adc.d 00001e         length of string
4875:000 | DONE ins | em 16 16 | 005e43 | 85 00       |                 sta.d 000000         
4876:000 | DONE wsp | em 16 16 |        |             |
4877:000 | DONE cmt | em 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
4878:000 | DONE cmt | em 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
4879:000 | DONE cmt | em 16 16 |        |             |                 ; done, the code will look like this:
4880:000 | DONE cmt | em 16 16 |        |             |                 ;
4881:000 | DONE cmt | em 16 16 |        |             |                 ; xt -->    jmp a
4882:000 | DONE cmt | em 16 16 |        |             |                 ;           <string data bytes>
4883:000 | DONE cmt | em 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
4884:000 | DONE cmt | em 16 16 |        |             |                 ;           <string address>
4885:000 | DONE cmt | em 16 16 |        |             |                 ;           <string length>
4886:000 | DONE cmt | em 16 16 |        |             |                 ; rts -->
4887:000 | DONE cmt | em 16 16 |        |             |                 ;
4888:000 | DONE cmt | em 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
4889:000 | DONE cmt | em 16 16 |        |             |                 ; cells, not just one
4890:000 | DONE ins | em 16 16 | 005e45 | f4 5e 5e    |                 phe.# 005e5e         
4891:000 | DONE ins | em 16 16 | 005e48 | 20 7b 6a    |                 jsr 006a7b           
4892:000 | DONE wsp | em 16 16 |        |             |
4893:000 | DONE cmt | em 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
4894:000 | DONE cmt | em 16 16 |        |             |                 ; so we store the address first
4895:000 | DONE ins | em 16 16 | 005e4b | a5 1c       |                 lda.d 00001c         new address of string
4896:000 | DONE ins | em 16 16 | 005e4d | 48          |                 pha                  
4897:000 | DONE ins | em 16 16 | 005e4e | 20 76 6a    |                 jsr 006a76           
4898:000 | DONE wsp | em 16 16 |        |             |
4899:000 | DONE ins | em 16 16 | 005e51 | a5 1e       |                 lda.d 00001e         
4900:000 | DONE ins | em 16 16 | 005e53 | 48          |                 pha                  
4901:000 | DONE ins | em 16 16 | 005e54 | 20 76 6a    |                 jsr 006a76           
4902:000 | DONE wsp | em 16 16 |        |             |
4903:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up and leave
4904:000 | DONE ins | em 16 16 | 005e57 | b4 02       |                 ldy.dx 02            2DROP
4905:000 | DONE ins | em 16 16 | 005e59 | e8          |                 inx                  
4906:000 | DONE ins | em 16 16 | 005e5a | e8          |                 inx                  
4907:000 | DONE ins | em 16 16 | 005e5b | e8          |                 inx                  
4908:000 | DONE ins | em 16 16 | 005e5c | e8          |                 inx                  
4909:000 | DONE wsp | em 16 16 |        |             |
4910:000 | DONE lbl | em 16 16 | 005e5d |             | z_sliteral                           
4910:001 | DONE ins | em 16 16 | 005e5d | 60          |                 rts                  
4911:000 | DONE wsp | em 16 16 |        |             |
4912:000 | DONE lbl | em 16 16 | 005e5e |             | sliteral_rt                          
4913:000 | DONE cmt | em 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
4914:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
4915:000 | DONE cmt | em 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
4916:000 | DONE wsp | em 16 16 |        |             |
4917:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
4918:000 | DONE ins | em 16 16 | 005e5e | ca          |                 dex                  
4919:000 | DONE ins | em 16 16 | 005e5f | ca          |                 dex                  
4920:000 | DONE ins | em 16 16 | 005e60 | ca          |                 dex                  
4921:000 | DONE ins | em 16 16 | 005e61 | ca          |                 dex                  
4922:000 | DONE ins | em 16 16 | 005e62 | 94 02       |                 sty.dx 02            
4923:000 | DONE wsp | em 16 16 |        |             |
4924:000 | DONE cmt | em 16 16 |        |             |                 ; Get the address of the string address off the stack and
4925:000 | DONE cmt | em 16 16 |        |             |                 ; increase by one because of the RTS mechanics
4926:000 | DONE ins | em 16 16 | 005e64 | 7a          |                 ply                  
4927:000 | DONE ins | em 16 16 | 005e65 | c8          |                 iny                  
4928:000 | DONE wsp | em 16 16 |        |             |
4929:000 | DONE ins | em 16 16 | 005e66 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4930:000 | DONE ins | em 16 16 | 005e69 | 95 00       |                 sta.dx 00            save string address as NOS
4931:000 | DONE ins | em 16 16 | 005e6b | c8          |                 iny                  
4932:000 | DONE ins | em 16 16 | 005e6c | c8          |                 iny                  
4933:000 | DONE ins | em 16 16 | 005e6d | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
4934:000 | DONE wsp | em 16 16 |        |             |
4935:000 | DONE ins | em 16 16 | 005e70 | c8          |                 iny                  ... first, though, repair return jump
4936:000 | DONE ins | em 16 16 | 005e71 | 5a          |                 phy                  
4937:000 | DONE wsp | em 16 16 |        |             |
4938:000 | DONE ins | em 16 16 | 005e72 | a8          |                 tay                  TOS is now length of string
4939:000 | DONE wsp | em 16 16 |        |             |
4940:000 | DONE ins | em 16 16 | 005e73 | 60          |                 rts                  
4941:000 | DONE wsp | em 16 16 |        |             |
4942:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4943:000 | DONE cmt | em 16 16 |        |             | ; SM/REM ( d n1 -- n2 n3) X bytes / X cycles
4944:000 | DONE cmt | em 16 16 |        |             | ; Symmetic signed division. Compare FM/MOD. Code from Gforth, see
4945:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4946:000 | DONE cmt | em 16 16 |        |             | ; and http://git.savannah.gnu.org/cgit/gforth.git/tree/prim ; see
4947:000 | DONE cmt | em 16 16 |        |             | ; http://www.figuk.plus.com/build/arith.htm for variants. Forth is
4948:000 | DONE cmt | em 16 16 |        |             | ; SM/REM OVER >R DUP >R ABS -ROT DABS ROT UM/MOD R>
4949:000 | DONE cmt | em 16 16 |        |             | ; R@ XOR 0< IF NEGATE THEN R> 0< IF SWAP NEGATE SWAP THEN ;
4950:000 | DONE cmt | em 16 16 |        |             | ; TODO optimize in assembler
4951:000 | DONE lbl | em 16 16 | 005e74 |             | xt_smrem                             
4952:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4953:000 | DONE ins | em 16 16 | 005e74 | 20 72 5c    |                 jsr 005c72           
4954:000 | DONE wsp | em 16 16 |        |             |
4955:000 | DONE ins | em 16 16 | 005e77 | 5a          |                 phy                  >R
4956:000 | DONE ins | em 16 16 | 005e78 | b4 00       |                 ldy.dx 00            
4957:000 | DONE ins | em 16 16 | 005e7a | e8          |                 inx                  
4958:000 | DONE ins | em 16 16 | 005e7b | e8          |                 inx                  
4959:000 | DONE wsp | em 16 16 |        |             |
4960:000 | DONE ins | em 16 16 | 005e7c | ca          |                 dex                  DUP
4961:000 | DONE ins | em 16 16 | 005e7d | ca          |                 dex                  
4962:000 | DONE ins | em 16 16 | 005e7e | 94 00       |                 sty.dx 00            
4963:000 | DONE wsp | em 16 16 |        |             |
4964:000 | DONE ins | em 16 16 | 005e80 | 5a          |                 phy                  >R
4965:000 | DONE ins | em 16 16 | 005e81 | b4 00       |                 ldy.dx 00            
4966:000 | DONE ins | em 16 16 | 005e83 | e8          |                 inx                  
4967:000 | DONE ins | em 16 16 | 005e84 | e8          |                 inx                  
4968:000 | DONE wsp | em 16 16 |        |             |
4969:000 | DONE ins | em 16 16 | 005e85 | 20 b1 54    |                 jsr 0054b1           ABS
4970:000 | DONE ins | em 16 16 | 005e88 | 20 6c 53    |                 jsr 00536c           -ROT
4971:000 | DONE ins | em 16 16 | 005e8b | 20 55 58    |                 jsr 005855           DABS
4972:000 | DONE ins | em 16 16 | 005e8e | 20 a0 5d    |                 jsr 005da0           ROT
4973:000 | DONE ins | em 16 16 | 005e91 | 20 d0 5f    |                 jsr 005fd0           UM/MOD
4974:000 | DONE wsp | em 16 16 |        |             |
4975:000 | DONE ins | em 16 16 | 005e94 | ca          |                 dex                  R>
4976:000 | DONE ins | em 16 16 | 005e95 | ca          |                 dex                  
4977:000 | DONE ins | em 16 16 | 005e96 | 94 00       |                 sty.dx 00            
4978:000 | DONE ins | em 16 16 | 005e98 | 7a          |                 ply                  
4979:000 | DONE wsp | em 16 16 |        |             |
4980:000 | DONE ins | em 16 16 | 005e99 | ca          |                 dex                  R@
4981:000 | DONE ins | em 16 16 | 005e9a | ca          |                 dex                  
4982:000 | DONE ins | em 16 16 | 005e9b | 94 00       |                 sty.dx 00            
4983:000 | DONE ins | em 16 16 | 005e9d | 7a          |                 ply                  
4984:000 | DONE ins | em 16 16 | 005e9e | 5a          |                 phy                  
4985:000 | DONE wsp | em 16 16 |        |             |
4986:000 | DONE ins | em 16 16 | 005e9f | 20 b1 60    |                 jsr 0060b1           XOR
4987:000 | DONE wsp | em 16 16 |        |             |
4988:000 | DONE ins | em 16 16 | 005ea2 | 98          |                 tya                  0< IF
4989:000 | DONE ins | em 16 16 | 005ea3 | 10 09       |                 bpl 005eae           
4990:000 | DONE wsp | em 16 16 |        |             |
4991:000 | DONE ins | em 16 16 | 005ea5 | b4 00       |                 ldy.dx 00            from IF
4992:000 | DONE ins | em 16 16 | 005ea7 | e8          |                 inx                  
4993:000 | DONE ins | em 16 16 | 005ea8 | e8          |                 inx                  
4994:000 | DONE wsp | em 16 16 |        |             |
4995:000 | DONE ins | em 16 16 | 005ea9 | 20 d5 5b    |                 jsr 005bd5           NEGATE
4996:000 | DONE ins | em 16 16 | 005eac | 80 04       |                 bra 005eb2           
4997:000 | DONE lbl | em 16 16 | 005eae |             | smrem_1                              
4998:000 | DONE ins | em 16 16 | 005eae | b4 00       |                 ldy.dx 00            from IF
4999:000 | DONE ins | em 16 16 | 005eb0 | e8          |                 inx                  
5000:000 | DONE ins | em 16 16 | 005eb1 | e8          |                 inx                  
5001:000 | DONE wsp | em 16 16 |        |             |
5002:000 | DONE lbl | em 16 16 | 005eb2 |             | smrem_1_1                            
5003:000 | DONE ins | em 16 16 | 005eb2 | ca          |                 dex                  R>
5004:000 | DONE ins | em 16 16 | 005eb3 | ca          |                 dex                  
5005:000 | DONE ins | em 16 16 | 005eb4 | 94 00       |                 sty.dx 00            
5006:000 | DONE ins | em 16 16 | 005eb6 | 7a          |                 ply                  
5007:000 | DONE wsp | em 16 16 |        |             |
5008:000 | DONE ins | em 16 16 | 005eb7 | 98          |                 tya                  0< IF
5009:000 | DONE ins | em 16 16 | 005eb8 | 10 0f       |                 bpl 005ec9           
5010:000 | DONE wsp | em 16 16 |        |             |
5011:000 | DONE ins | em 16 16 | 005eba | b4 00       |                 ldy.dx 00            from IF
5012:000 | DONE ins | em 16 16 | 005ebc | e8          |                 inx                  
5013:000 | DONE ins | em 16 16 | 005ebd | e8          |                 inx                  
5014:000 | DONE wsp | em 16 16 |        |             |
5015:000 | DONE ins | em 16 16 | 005ebe | 20 09 5f    |                 jsr 005f09           
5016:000 | DONE ins | em 16 16 | 005ec1 | 20 d5 5b    |                 jsr 005bd5           
5017:000 | DONE ins | em 16 16 | 005ec4 | 20 09 5f    |                 jsr 005f09           
5018:000 | DONE ins | em 16 16 | 005ec7 | 80 04       |                 bra 005ecd           
5019:000 | DONE wsp | em 16 16 |        |             |
5020:000 | DONE lbl | em 16 16 | 005ec9 |             | smrem_2                              
5021:000 | DONE ins | em 16 16 | 005ec9 | b4 00       |                 ldy.dx 00            
5022:000 | DONE ins | em 16 16 | 005ecb | e8          |                 inx                  
5023:000 | DONE ins | em 16 16 | 005ecc | e8          |                 inx                  
5024:000 | DONE wsp | em 16 16 |        |             |
5025:000 | DONE wsp | em 16 16 |        |             |
5026:000 | DONE lbl | em 16 16 | 005ecd |             | smrem_2_1                            
5027:000 | DONE wsp | em 16 16 |        |             |
5028:000 | DONE lbl | em 16 16 | 005ecd |             | z_smrem                              
5028:001 | DONE ins | em 16 16 | 005ecd | 60          |                 rts                  
5029:000 | DONE wsp | em 16 16 |        |             |
5030:000 | DONE wsp | em 16 16 |        |             |
5031:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5032:000 | DONE cmt | em 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
5033:000 | DONE cmt | em 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
5034:000 | DONE cmt | em 16 16 |        |             | ; ANSI Forth
5035:000 | DONE wsp | em 16 16 |        |             |
5036:000 | DONE lbl | em 16 16 | 005ece |             | xt_source                            
5037:000 | DONE ins | em 16 16 | 005ece | ca          |                 dex                  make room on Data Stack
5038:000 | DONE ins | em 16 16 | 005ecf | ca          |                 dex                  
5039:000 | DONE ins | em 16 16 | 005ed0 | ca          |                 dex                  
5040:000 | DONE ins | em 16 16 | 005ed1 | ca          |                 dex                  
5041:000 | DONE ins | em 16 16 | 005ed2 | 94 02       |                 sty.dx 02            
5042:000 | DONE wsp | em 16 16 |        |             |
5043:000 | DONE ins | em 16 16 | 005ed4 | a5 08       |                 lda.d 000008         address of current input buffer as NOS
5044:000 | DONE ins | em 16 16 | 005ed6 | 95 00       |                 sta.dx 00            
5045:000 | DONE wsp | em 16 16 |        |             |
5046:000 | DONE ins | em 16 16 | 005ed8 | a4 0a       |                 ldy.d 00000a         length of current input buffer as TOS
5047:000 | DONE wsp | em 16 16 |        |             |
5048:000 | DONE lbl | em 16 16 | 005eda |             | z_source                             
5048:001 | DONE ins | em 16 16 | 005eda | 60          |                 rts                  
5049:000 | DONE wsp | em 16 16 |        |             |
5050:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5051:000 | DONE cmt | em 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
5052:000 | DONE cmt | em 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
5053:000 | DONE cmt | em 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
5054:000 | DONE cmt | em 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
5055:000 | DONE lbl | em 16 16 | 005edb |             | xt_source-id                         
5056:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5057:000 | DONE ins | em 16 16 | 005edb | ca          |                 dex                  
5058:000 | DONE ins | em 16 16 | 005edc | ca          |                 dex                  
5059:000 | DONE ins | em 16 16 | 005edd | 94 00       |                 sty.dx 00            
5060:000 | DONE ins | em 16 16 | 005edf | a4 06       |                 ldy.d 000006         
5061:000 | DONE wsp | em 16 16 |        |             |
5062:000 | DONE lbl | em 16 16 | 005ee1 |             | z_source-id                          
5062:001 | DONE ins | em 16 16 | 005ee1 | 60          |                 rts                  
5063:000 | DONE wsp | em 16 16 |        |             |
5064:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5065:000 | DONE cmt | em 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
5066:000 | DONE cmt | em 16 16 |        |             | ; Print one ASCII space character. We need to leave JSR EMIT_A as a subroutine
5067:000 | DONE cmt | em 16 16 |        |             | ; instead of JSR/RTS it to JMP to allow native compile
5068:000 | DONE lbl | em 16 16 | 005ee2 |             | xt_space                             
5069:000 | DONE ins | em 16 16 | 005ee2 | a9 20 00    |                 lda.# AscSP          
5070:000 | DONE ins | em 16 16 | 005ee5 | 20 10 59    |                 jsr 005910           
5071:000 | DONE wsp | em 16 16 |        |             |
5072:000 | DONE lbl | em 16 16 | 005ee8 |             | z_space                              
5072:001 | DONE ins | em 16 16 | 005ee8 | 60          |                 rts                  
5073:000 | DONE wsp | em 16 16 |        |             |
5074:000 | DONE wsp | em 16 16 |        |             |
5075:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5076:000 | DONE cmt | em 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
5077:000 | DONE cmt | em 16 16 |        |             | ; Print u spaces
5078:000 | DONE lbl | em 16 16 | 005ee9 |             | xt_spaces                            
5079:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5080:000 | DONE wsp | em 16 16 |        |             |
5081:000 | DONE lbl | em 16 16 | 005ee9 |             | spaces_loop                          
5082:000 | DONE ins | em 16 16 | 005ee9 | 88          |                 dey                  this also handles case u=0
5083:000 | DONE ins | em 16 16 | 005eea | 30 08       |                 bmi 005ef4           
5084:000 | DONE wsp | em 16 16 |        |             |
5085:000 | DONE ins | em 16 16 | 005eec | a9 20 00    |                 lda.# 0020           
5086:000 | DONE ins | em 16 16 | 005eef | 20 10 59    |                 jsr 005910           
5087:000 | DONE wsp | em 16 16 |        |             |
5088:000 | DONE ins | em 16 16 | 005ef2 | 80 f5       |                 bra 005ee9           
5089:000 | DONE wsp | em 16 16 |        |             |
5090:000 | DONE lbl | em 16 16 | 005ef4 |             | spaces_done                          
5091:000 | DONE ins | em 16 16 | 005ef4 | b4 00       |                 ldy.dx 00            DROP
5092:000 | DONE ins | em 16 16 | 005ef6 | e8          |                 inx                  
5093:000 | DONE ins | em 16 16 | 005ef7 | e8          |                 inx                  
5094:000 | DONE wsp | em 16 16 |        |             |
5095:000 | DONE lbl | em 16 16 | 005ef8 |             | z_spaces                             
5095:001 | DONE ins | em 16 16 | 005ef8 | 60          |                 rts                  
5096:000 | DONE wsp | em 16 16 |        |             |
5097:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5098:000 | DONE cmt | em 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
5099:000 | DONE cmt | em 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
5100:000 | DONE cmt | em 16 16 |        |             | ; more than UM* DROP
5101:000 | DONE lbl | em 16 16 | 005ef9 |             | xt_star                              
5102:000 | DONE ins | em 16 16 | 005ef9 | 20 71 5f    |                 jsr 005f71           
5103:000 | DONE wsp | em 16 16 |        |             |
5104:000 | DONE ins | em 16 16 | 005efc | b4 00       |                 ldy.dx 00            DROP
5105:000 | DONE ins | em 16 16 | 005efe | e8          |                 inx                  
5106:000 | DONE ins | em 16 16 | 005eff | e8          |                 inx                  
5107:000 | DONE wsp | em 16 16 |        |             |
5108:000 | DONE lbl | em 16 16 | 005f00 |             | z_star                               
5108:001 | DONE ins | em 16 16 | 005f00 | 60          |                 rts                  
5109:000 | DONE wsp | em 16 16 |        |             |
5110:000 | DONE wsp | em 16 16 |        |             |
5111:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5112:000 | DONE cmt | em 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
5113:000 | DONE cmt | em 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
5114:000 | DONE cmt | em 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
5115:000 | DONE cmt | em 16 16 |        |             | ; changed directly by the user; see
5116:000 | DONE cmt | em 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
5117:000 | DONE lbl | em 16 16 | 005f01 |             | xt_state                             
5118:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5119:000 | DONE ins | em 16 16 | 005f01 | ca          |                 dex                  
5120:000 | DONE ins | em 16 16 | 005f02 | ca          |                 dex                  
5121:000 | DONE ins | em 16 16 | 005f03 | 94 00       |                 sty.dx 00            
5122:000 | DONE ins | em 16 16 | 005f05 | a0 14 00    |                 ldy.# 000014         
5123:000 | DONE wsp | em 16 16 |        |             |
5124:000 | DONE lbl | em 16 16 | 005f08 |             | z_state                              
5124:001 | DONE ins | em 16 16 | 005f08 | 60          |                 rts                  
5125:000 | DONE wsp | em 16 16 |        |             |
5126:000 | DONE wsp | em 16 16 |        |             |
5127:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5128:000 | DONE cmt | em 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
5129:000 | DONE cmt | em 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
5130:000 | DONE cmt | em 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
5131:000 | DONE lbl | em 16 16 | 005f09 |             | xt_swap                              
5132:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5133:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5134:000 | DONE ins | em 16 16 | 005f09 | b5 00       |                 lda.dx 00            
5135:000 | DONE ins | em 16 16 | 005f0b | 94 00       |                 sty.dx 00            
5136:000 | DONE ins | em 16 16 | 005f0d | a8          |                 tay                  
5137:000 | DONE wsp | em 16 16 |        |             |
5138:000 | DONE lbl | em 16 16 | 005f0e |             | z_swap                               
5138:001 | DONE ins | em 16 16 | 005f0e | 60          |                 rts                  
5139:000 | DONE wsp | em 16 16 |        |             |
5140:000 | DONE wsp | em 16 16 |        |             |
5141:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5142:000 | DONE cmt | em 16 16 |        |             | ; TO ( n "name" -- ) X bytes / X cycles
5143:000 | DONE cmt | em 16 16 |        |             | ; Change the value of a VALUE. Note that in theory this would work with CONSTANT
5144:000 | DONE cmt | em 16 16 |        |             | ; as well, but we frown on this behavior. Note that while it is in violation of
5145:000 | DONE cmt | em 16 16 |        |             | ; ANS Forth, we can change the number in a VALUE with <number> ' <value> >BODY
5146:000 | DONE cmt | em 16 16 |        |             | ; +!  just as you can with Gforth
5147:000 | DONE cmt | em 16 16 |        |             | ; TODO unroll this to assembler
5148:000 | DONE lbl | em 16 16 | 005f0f |             | xt_to                                
5149:000 | DONE ins | em 16 16 | 005f0f | 20 78 54    |                 jsr 005478           '
5150:000 | DONE ins | em 16 16 | 005f12 | 20 34 51    |                 jsr 005134           >BODY
5151:000 | DONE ins | em 16 16 | 005f15 | 20 cb 52    |                 jsr 0052cb           !
5152:000 | DONE wsp | em 16 16 |        |             |
5153:000 | DONE lbl | em 16 16 | 005f18 |             | z_to                                 
5153:001 | DONE ins | em 16 16 | 005f18 | 60          |                 rts                  
5154:000 | DONE wsp | em 16 16 |        |             |
5155:000 | DONE wsp | em 16 16 |        |             |
5156:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5157:000 | DONE cmt | em 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
5158:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
5159:000 | DONE lbl | em 16 16 | 005f19 |             | xt_true                              
5160:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5161:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5162:000 | DONE ins | em 16 16 | 005f19 | ca          |                 dex                  
5163:000 | DONE ins | em 16 16 | 005f1a | ca          |                 dex                  
5164:000 | DONE ins | em 16 16 | 005f1b | 94 00       |                 sty.dx 00            
5165:000 | DONE ins | em 16 16 | 005f1d | a0 ff ff    |                 ldy.# 0ffff          
5166:000 | DONE wsp | em 16 16 |        |             |
5167:000 | DONE lbl | em 16 16 | 005f20 |             | z_true                               
5167:001 | DONE ins | em 16 16 | 005f20 | 60          |                 rts                  
5168:000 | DONE wsp | em 16 16 |        |             |
5169:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5170:000 | DONE cmt | em 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
5171:000 | DONE cmt | em 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
5172:000 | DONE cmt | em 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
5173:000 | DONE lbl | em 16 16 | 005f21 |             | xt_tuck                              
5174:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5175:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5176:000 | DONE ins | em 16 16 | 005f21 | ca          |                 dex                  
5177:000 | DONE ins | em 16 16 | 005f22 | ca          |                 dex                  
5178:000 | DONE ins | em 16 16 | 005f23 | b5 02       |                 lda.dx 2             
5179:000 | DONE ins | em 16 16 | 005f25 | 95 00       |                 sta.dx 0             
5180:000 | DONE ins | em 16 16 | 005f27 | 94 02       |                 sty.dx 2             
5181:000 | DONE wsp | em 16 16 |        |             |
5182:000 | DONE lbl | em 16 16 | 005f29 |             | z_tuck                               
5182:001 | DONE ins | em 16 16 | 005f29 | 60          |                 rts                  
5183:000 | DONE wsp | em 16 16 |        |             |
5184:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5185:000 | DONE cmt | em 16 16 |        |             | ; TYPE  ( addr u -- ) 23+ bytes / X cycles
5186:000 | DONE cmt | em 16 16 |        |             | ; Print character string if u is not 0. Works though EMIT and is affect by the
5187:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT revectoring
5188:000 | DONE cmt | em 16 16 |        |             | ; TODO LATER add PAUSE here for multitasking
5189:000 | DONE lbl | em 16 16 | 005f2a |             | xt_type                              
5190:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5191:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5192:000 | DONE cmt | em 16 16 |        |             |                 ; just leave if u is zero (empty string)
5193:000 | DONE ins | em 16 16 | 005f2a | 98          |                 tya                  force flag check of TOS
5194:000 | DONE ins | em 16 16 | 005f2b | f0 17       |                 beq 005f44           
5195:000 | DONE wsp | em 16 16 |        |             |
5196:000 | DONE ins | em 16 16 | 005f2d | b5 00       |                 lda.dx 00            get address from NOS
5197:000 | DONE ins | em 16 16 | 005f2f | 85 1c       |                 sta.d 00001c         
5198:000 | DONE ins | em 16 16 | 005f31 | 84 1e       |                 sty.d 00001e         number of chars is TOS
5199:000 | DONE ins | em 16 16 | 005f33 | a0 00 00    |                 ldy.# 0000           
5200:000 | DONE ins | em 16 16 | 005f36 | e2 20       |                 sep 20               
5200:001 | DONE ctl | em  8 16 |        |             |         .!a8
5201:000 | DONE lbl | em  8 16 | 005f38 |             | type_loop                            
5202:000 | DONE ins | em  8 16 | 005f38 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
5203:000 | DONE ins | em  8 16 | 005f3a | 20 10 59    |                 jsr 005910           
5204:000 | DONE ins | em  8 16 | 005f3d | c8          |                 iny                  
5205:000 | DONE ins | em  8 16 | 005f3e | c4 1e       |                 cpy.d 00001e         
5206:000 | DONE ins | em  8 16 | 005f40 | d0 f6       |                 bne 005f38           
5207:000 | DONE wsp | em  8 16 |        |             |
5208:000 | DONE ins | em  8 16 | 005f42 | c2 20       |                 rep 20               
5208:001 | DONE ctl | em 16 16 |        |             |         .!a16
5209:000 | DONE lbl | em 16 16 | 005f44 |             | type_done                            
5210:000 | DONE cmt | em 16 16 |        |             |                 ; clear stack
5211:000 | DONE ins | em 16 16 | 005f44 | b4 02       |                 ldy.dx 02            
5212:000 | DONE ins | em 16 16 | 005f46 | e8          |                 inx                  
5213:000 | DONE ins | em 16 16 | 005f47 | e8          |                 inx                  
5214:000 | DONE ins | em 16 16 | 005f48 | e8          |                 inx                  
5215:000 | DONE ins | em 16 16 | 005f49 | e8          |                 inx                  
5216:000 | DONE wsp | em 16 16 |        |             |
5217:000 | DONE lbl | em 16 16 | 005f4a |             | z_type                               
5217:001 | DONE ins | em 16 16 | 005f4a | 60          |                 rts                  
5218:000 | DONE wsp | em 16 16 |        |             |
5219:000 | DONE wsp | em 16 16 |        |             |
5220:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5221:000 | DONE cmt | em 16 16 |        |             | ; UDOT ( n -- ) X bytes / X cycles
5222:000 | DONE cmt | em 16 16 |        |             | ; Print unsigned number. This is based on the Forth word
5223:000 | DONE cmt | em 16 16 |        |             | ; 0 <# #S #> TYPE SPACE but uses the general print_u routine
5224:000 | DONE cmt | em 16 16 |        |             | ; that .S and DUMP use as well. We need to keep JSR EMIT_A instead of JSR/RTS it
5225:000 | DONE cmt | em 16 16 |        |             | ; to JMP to allow native compile
5226:000 | DONE lbl | em 16 16 | 005f4b |             | xt_udot                              
5227:000 | DONE ins | em 16 16 | 005f4b | 20 ba 6a    |                 jsr 006aba           ( n -- )
5228:000 | DONE wsp | em 16 16 |        |             |
5229:000 | DONE ins | em 16 16 | 005f4e | a9 20 00    |                 lda.# 0020           SPACE
5230:000 | DONE ins | em 16 16 | 005f51 | 20 10 59    |                 jsr 005910           
5231:000 | DONE wsp | em 16 16 |        |             |
5232:000 | DONE lbl | em 16 16 | 005f54 |             | z_udot                               
5232:001 | DONE ins | em 16 16 | 005f54 | 60          |                 rts                  
5233:000 | DONE wsp | em 16 16 |        |             |
5234:000 | DONE wsp | em 16 16 |        |             |
5235:000 | DONE wsp | em 16 16 |        |             |
5236:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5237:000 | DONE cmt | em 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
5238:000 | DONE cmt | em 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
5239:000 | DONE cmt | em 16 16 |        |             | ; result and a single-cell remainder. Based on
5240:000 | DONE cmt | em 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
5241:000 | DONE cmt | em 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
5242:000 | DONE cmt | em 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
5243:000 | DONE cmt | em 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
5244:000 | DONE cmt | em 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
5245:000 | DONE lbl | em 16 16 | 005f55 |             | xt_udmod                             
5246:000 | DONE ins | em 16 16 | 005f55 | 20 bd 51    |                 jsr 0051bd           
5247:000 | DONE ins | em 16 16 | 005f58 | 20 98 53    |                 jsr 005398           
5248:000 | DONE ins | em 16 16 | 005f5b | 20 4b 5d    |                 jsr 005d4b           
5249:000 | DONE ins | em 16 16 | 005f5e | 20 d0 5f    |                 jsr 005fd0           
5250:000 | DONE ins | em 16 16 | 005f61 | 20 a0 5d    |                 jsr 005da0           
5251:000 | DONE ins | em 16 16 | 005f64 | 20 a0 5d    |                 jsr 005da0           
5252:000 | DONE ins | em 16 16 | 005f67 | 20 54 5d    |                 jsr 005d54           
5253:000 | DONE ins | em 16 16 | 005f6a | 20 d0 5f    |                 jsr 005fd0           
5254:000 | DONE ins | em 16 16 | 005f6d | 20 a0 5d    |                 jsr 005da0           
5255:000 | DONE lbl | em 16 16 | 005f70 |             | z_udmod                              
5255:001 | DONE ins | em 16 16 | 005f70 | 60          |                 rts                  
5256:000 | DONE wsp | em 16 16 |        |             |
5257:000 | DONE wsp | em 16 16 |        |             |
5258:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5259:000 | DONE cmt | em 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
5260:000 | DONE cmt | em 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
5261:000 | DONE cmt | em 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
5262:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
5263:000 | DONE cmt | em 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
5264:000 | DONE cmt | em 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
5265:000 | DONE cmt | em 16 16 |        |             | ; call this "U*"
5266:000 | DONE wsp | em 16 16 |        |             |
5267:000 | DONE cmt | em 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
5268:000 | DONE cmt | em 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
5269:000 | DONE cmt | em 16 16 |        |             | ; consider switching to a table-supported version based on
5270:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
5271:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
5272:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
5273:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
5274:000 | DONE cmt | em 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
5275:000 | DONE lbl | em 16 16 | 005f71 |             | xt_umstar                            
5276:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5277:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
5278:000 | DONE ins | em 16 16 | 005f71 | 98          |                 tya                  
5279:000 | DONE ins | em 16 16 | 005f72 | f0 3d       |                 beq 005fb1           
5280:000 | DONE ins | em 16 16 | 005f74 | b5 00       |                 lda.dx 00            
5281:000 | DONE ins | em 16 16 | 005f76 | f0 39       |                 beq 005fb1           
5282:000 | DONE wsp | em 16 16 |        |             |
5283:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
5284:000 | DONE cmt | em 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
5285:000 | DONE cmt | em 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
5286:000 | DONE cmt | em 16 16 |        |             |                 ; answer
5287:000 | DONE ins | em 16 16 | 005f78 | c0 01 00    |                 cpy.# 0001           non-distructively
5288:000 | DONE ins | em 16 16 | 005f7b | f0 3b       |                 beq 005fb8           
5289:000 | DONE ins | em 16 16 | 005f7d | b5 00       |                 lda.dx 00            
5290:000 | DONE ins | em 16 16 | 005f7f | 3a          |                 dec.a                don't care about distruction
5291:000 | DONE ins | em 16 16 | 005f80 | f0 39       |                 beq 005fbb           
5292:000 | DONE wsp | em 16 16 |        |             |
5293:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
5294:000 | DONE ins | em 16 16 | 005f82 | c0 02 00    |                 cpy.# 0002           
5295:000 | DONE ins | em 16 16 | 005f85 | f0 3b       |                 beq 005fc2           
5296:000 | DONE wsp | em 16 16 |        |             |
5297:000 | DONE ins | em 16 16 | 005f87 | b5 00       |                 lda.dx 00            
5298:000 | DONE ins | em 16 16 | 005f89 | c9 02 00    |                 cmp.# 0002           
5299:000 | DONE ins | em 16 16 | 005f8c | f0 38       |                 beq 005fc6           
5300:000 | DONE wsp | em 16 16 |        |             |
5301:000 | DONE cmt | em 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
5302:000 | DONE ins | em 16 16 | 005f8e | 84 1c       |                 sty.d 00001c         TOS number  "40"
5303:000 | DONE ins | em 16 16 | 005f90 | 85 1e       |                 sta.d 00001e         NOS number  "41"
5304:000 | DONE ins | em 16 16 | 005f92 | a0 10 00    |                 ldy.# &16            loop counter
5305:000 | DONE wsp | em 16 16 |        |             |
5306:000 | DONE ins | em 16 16 | 005f95 | a9 00 00    |                 lda.# 0000           
5307:000 | DONE ins | em 16 16 | 005f98 | 85 20       |                 sta.d 000020         Most Significat Word (MSW) of result
5308:000 | DONE wsp | em 16 16 |        |             |
5309:000 | DONE lbl | em 16 16 | 005f9a |             | umstar_loop                          
5310:000 | DONE ins | em 16 16 | 005f9a | 0a          |                 asl.a                useless for first iteration
5311:000 | DONE ins | em 16 16 | 005f9b | 26 20       |                 rol.d 000020         move carry into MSB, useless first iteration
5312:000 | DONE ins | em 16 16 | 005f9d | 06 1e       |                 asl.d 00001e         move bit of NOS number into carry
5313:000 | DONE wsp | em 16 16 |        |             |
5314:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
5315:000 | DONE cmt | em 16 16 |        |             |                 ; the next bit
5316:000 | DONE ins | em 16 16 | 005f9f | 90 07       |                 bcc 005fa8           
5317:000 | DONE wsp | em 16 16 |        |             |
5318:000 | DONE ins | em 16 16 | 005fa1 | 18          |                 clc                  
5319:000 | DONE ins | em 16 16 | 005fa2 | 65 1c       |                 adc.d 00001c         we have a set bit, so add TOS
5320:000 | DONE wsp | em 16 16 |        |             |
5321:000 | DONE cmt | em 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
5322:000 | DONE ins | em 16 16 | 005fa4 | 90 02       |                 bcc 005fa8           
5323:000 | DONE ins | em 16 16 | 005fa6 | e6 20       |                 inc.d 000020         
5324:000 | DONE wsp | em 16 16 |        |             |
5325:000 | DONE lbl | em 16 16 | 005fa8 |             | umstar_counter                       
5326:000 | DONE ins | em 16 16 | 005fa8 | 88          |                 dey                  
5327:000 | DONE ins | em 16 16 | 005fa9 | d0 ef       |                 bne 005f9a           
5328:000 | DONE wsp | em 16 16 |        |             |
5329:000 | DONE cmt | em 16 16 |        |             |                 ; We're all done, clean up and leave
5330:000 | DONE ins | em 16 16 | 005fab | 95 00       |                 sta.dx 00            store lower cell of number in NOS
5331:000 | DONE ins | em 16 16 | 005fad | a4 20       |                 ldy.d 000020         store MSB in TOS as double cell
5332:000 | DONE wsp | em 16 16 |        |             |
5333:000 | DONE ins | em 16 16 | 005faf | 80 1e       |                 bra 005fcf           don't use RTS so we can natively compile
5334:000 | DONE wsp | em 16 16 |        |             |
5335:000 | DONE lbl | em 16 16 | 005fb1 |             | umstar_zero                          
5336:000 | DONE cmt | em 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
5337:000 | DONE ins | em 16 16 | 005fb1 | a0 00 00    |                 ldy.# 0000           
5338:000 | DONE ins | em 16 16 | 005fb4 | 94 00       |                 sty.dx 00            
5339:000 | DONE ins | em 16 16 | 005fb6 | 80 17       |                 bra 005fcf           
5340:000 | DONE wsp | em 16 16 |        |             |
5341:000 | DONE lbl | em 16 16 | 005fb8 |             | umstar_one_tos                       
5342:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is one, life is easy
5343:000 | DONE ins | em 16 16 | 005fb8 | 88          |                 dey                  NOS is LSW, TOS becomes zero
5344:000 | DONE ins | em 16 16 | 005fb9 | 80 14       |                 bra 005fcf           
5345:000 | DONE lbl | em 16 16 | 005fbb |             | umstar_one_nos                       
5346:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is one, life is easy
5347:000 | DONE ins | em 16 16 | 005fbb | 94 00       |                 sty.dx 00            
5348:000 | DONE ins | em 16 16 | 005fbd | a0 00 00    |                 ldy.# 0000           
5349:000 | DONE ins | em 16 16 | 005fc0 | 80 0d       |                 bra 005fcf           
5350:000 | DONE wsp | em 16 16 |        |             |
5351:000 | DONE lbl | em 16 16 | 005fc2 |             | umstar_two_tos                       
5352:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is two, life is easy
5353:000 | DONE ins | em 16 16 | 005fc2 | b5 00       |                 lda.dx 00            
5354:000 | DONE ins | em 16 16 | 005fc4 | 80 01       |                 bra 005fc7           
5355:000 | DONE lbl | em 16 16 | 005fc6 |             | umstar_two_nos                       
5356:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is two, life is still easy
5357:000 | DONE ins | em 16 16 | 005fc6 | 98          |                 tya                  
5358:000 | DONE lbl | em 16 16 | 005fc7 |             | umstar_two_common                    
5359:000 | DONE ins | em 16 16 | 005fc7 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
5360:000 | DONE ins | em 16 16 | 005fc8 | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
5361:000 | DONE wsp | em 16 16 |        |             |
5362:000 | DONE ins | em 16 16 | 005fca | a9 00 00    |                 lda.# 0000           
5363:000 | DONE ins | em 16 16 | 005fcd | 2a          |                 rol.a                Rotate any Carry Flag into MSW
5364:000 | DONE ins | em 16 16 | 005fce | a8          |                 tay                  
5365:000 | DONE wsp | em 16 16 |        |             |
5366:000 | DONE lbl | em 16 16 | 005fcf |             | z_umstar                             
5366:001 | DONE ins | em 16 16 | 005fcf | 60          |                 rts                  
5367:000 | DONE wsp | em 16 16 |        |             |
5368:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5369:000 | DONE cmt | em 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
5370:000 | DONE cmt | em 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
5371:000 | DONE cmt | em 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
5372:000 | DONE cmt | em 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
5373:000 | DONE cmt | em 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
5374:000 | DONE cmt | em 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
5375:000 | DONE lbl | em 16 16 | 005fd0 |             | xt_ummod                             
5376:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5377:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5378:000 | DONE cmt | em 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
5379:000 | DONE cmt | em 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
5380:000 | DONE cmt | em 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
5381:000 | DONE cmt | em 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
5382:000 | DONE cmt | em 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
5383:000 | DONE cmt | em 16 16 |        |             |                 ;
5384:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
5385:000 | DONE cmt | em 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
5386:000 | DONE cmt | em 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
5387:000 | DONE cmt | em 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
5388:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
5389:000 | DONE cmt | em 16 16 |        |             |                 ;
5390:000 | DONE cmt | em 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
5391:000 | DONE cmt | em 16 16 |        |             |                 ; and low cell in 3OS
5392:000 | DONE wsp | em 16 16 |        |             |
5393:000 | DONE cmt | em 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
5394:000 | DONE cmt | em 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
5395:000 | DONE cmt | em 16 16 |        |             |                 ; to appear like in Gforth
5396:000 | DONE ins | em 16 16 | 005fd0 | 98          |                 tya                  force flag test
5397:000 | DONE ins | em 16 16 | 005fd1 | d0 06       |                 bne 005fd9           
5398:000 | DONE wsp | em 16 16 |        |             |
5399:000 | DONE ins | em 16 16 | 005fd3 | a9 b1 71    |                 lda.# 0071b1         
5400:000 | DONE ins | em 16 16 | 005fd6 | 4c 9c 6a    |                 jmp 006a9c           
5401:000 | DONE wsp | em 16 16 |        |             |
5402:000 | DONE lbl | em 16 16 | 005fd9 |             | ummod_notzero                        
5403:000 | DONE ins | em 16 16 | 005fd9 | 84 28       |                 sty.d 000028         Y is now free
5404:000 | DONE ins | em 16 16 | 005fdb | b5 00       |                 lda.dx 00            high cell of dividend
5405:000 | DONE ins | em 16 16 | 005fdd | 85 2a       |                 sta.d 00002a         
5406:000 | DONE ins | em 16 16 | 005fdf | b5 02       |                 lda.dx 02            low cell of dividend
5407:000 | DONE ins | em 16 16 | 005fe1 | 85 2c       |                 sta.d 00002c         
5408:000 | DONE wsp | em 16 16 |        |             |
5409:000 | DONE cmt | em 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
5410:000 | DONE cmt | em 16 16 |        |             |                 ; Pointer, freeing X for index duty
5411:000 | DONE ins | em 16 16 | 005fe3 | e8          |                 inx                  
5412:000 | DONE ins | em 16 16 | 005fe4 | e8          |                 inx                  
5413:000 | DONE ins | em 16 16 | 005fe5 | 86 22       |                 stx.d 000022         
5414:000 | DONE wsp | em 16 16 |        |             |
5415:000 | DONE cmt | em 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
5416:000 | DONE cmt | em 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
5417:000 | DONE cmt | em 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
5418:000 | DONE cmt | em 16 16 |        |             |                 ; we did that already in a separate step
5419:000 | DONE ins | em 16 16 | 005fe7 | 38          |                 sec                  
5420:000 | DONE ins | em 16 16 | 005fe8 | a5 2a       |                 lda.d 00002a         
5421:000 | DONE ins | em 16 16 | 005fea | e5 28       |                 sbc.d 000028         
5422:000 | DONE ins | em 16 16 | 005fec | b0 21       |                 bcs 00600f           
5423:000 | DONE wsp | em 16 16 |        |             |
5424:000 | DONE cmt | em 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
5425:000 | DONE cmt | em 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
5426:000 | DONE cmt | em 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
5427:000 | DONE cmt | em 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
5428:000 | DONE cmt | em 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
5429:000 | DONE cmt | em 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
5430:000 | DONE ins | em 16 16 | 005fee | a2 11 00    |                 ldx.# &17            
5431:000 | DONE wsp | em 16 16 |        |             |
5432:000 | DONE lbl | em 16 16 | 005ff1 |             | ummod_shift                          
5433:000 | DONE cmt | em 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
5434:000 | DONE cmt | em 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
5435:000 | DONE cmt | em 16 16 |        |             |                 ; pushed off the other end in the last rotation
5436:000 | DONE ins | em 16 16 | 005ff1 | 26 2c       |                 rol.d 00002c         
5437:000 | DONE wsp | em 16 16 |        |             |
5438:000 | DONE cmt | em 16 16 |        |             |                 ; loop control
5439:000 | DONE ins | em 16 16 | 005ff3 | ca          |                 dex                  
5440:000 | DONE ins | em 16 16 | 005ff4 | f0 22       |                 beq 006018           
5441:000 | DONE wsp | em 16 16 |        |             |
5442:000 | DONE cmt | em 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
5443:000 | DONE cmt | em 16 16 |        |             |                 ; next bit in from high bit of low cell
5444:000 | DONE ins | em 16 16 | 005ff6 | 26 2a       |                 rol.d 00002a         
5445:000 | DONE ins | em 16 16 | 005ff8 | a9 00 00    |                 lda.# 0000           
5446:000 | DONE ins | em 16 16 | 005ffb | 2a          |                 rol.a                
5447:000 | DONE ins | em 16 16 | 005ffc | 85 2e       |                 sta.d 00002e         store old high bit of dividend
5448:000 | DONE wsp | em 16 16 |        |             |
5449:000 | DONE cmt | em 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
5450:000 | DONE cmt | em 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
5451:000 | DONE cmt | em 16 16 |        |             |                 ; cleared, divisor did not fit
5452:000 | DONE ins | em 16 16 | 005ffe | 38          |                 sec                  
5453:000 | DONE ins | em 16 16 | 005fff | a5 2a       |                 lda.d 00002a         
5454:000 | DONE ins | em 16 16 | 006001 | e5 28       |                 sbc.d 000028         
5455:000 | DONE ins | em 16 16 | 006003 | a8          |                 tay                  save difference in Y until we know if we need it
5456:000 | DONE wsp | em 16 16 |        |             |
5457:000 | DONE cmt | em 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
5458:000 | DONE cmt | em 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
5459:000 | DONE cmt | em 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
5460:000 | DONE cmt | em 16 16 |        |             |                 ; remains set
5461:000 | DONE ins | em 16 16 | 006004 | a5 2e       |                 lda.d 00002e         
5462:000 | DONE ins | em 16 16 | 006006 | e9 00 00    |                 sbc.# 0000           
5463:000 | DONE ins | em 16 16 | 006009 | 90 e6       |                 bcc 005ff1           
5464:000 | DONE wsp | em 16 16 |        |             |
5465:000 | DONE cmt | em 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
5466:000 | DONE cmt | em 16 16 |        |             |                 ; cell to what it would be after subtraction
5467:000 | DONE ins | em 16 16 | 00600b | 84 2a       |                 sty.d 00002a         
5468:000 | DONE ins | em 16 16 | 00600d | 80 e2       |                 bra 005ff1           
5469:000 | DONE wsp | em 16 16 |        |             |
5470:000 | DONE lbl | em 16 16 | 00600f |             | ummod_overflow                       
5471:000 | DONE cmt | em 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
5472:000 | DONE cmt | em 16 16 |        |             |                 ; in both the quotient and remainder
5473:000 | DONE ins | em 16 16 | 00600f | a6 22       |                 ldx.d 000022         restore DSP
5474:000 | DONE ins | em 16 16 | 006011 | a0 ff ff    |                 ldy.# 0ffff          
5475:000 | DONE ins | em 16 16 | 006014 | 94 00       |                 sty.dx 00            
5476:000 | DONE ins | em 16 16 | 006016 | 80 08       |                 bra 006020           go to end to enable native coding
5477:000 | DONE wsp | em 16 16 |        |             |
5478:000 | DONE lbl | em 16 16 | 006018 |             | ummod_complete                       
5479:000 | DONE ins | em 16 16 | 006018 | a6 22       |                 ldx.d 000022         restore DSP
5480:000 | DONE ins | em 16 16 | 00601a | a4 2c       |                 ldy.d 00002c         quotient is TOS
5481:000 | DONE ins | em 16 16 | 00601c | a5 2a       |                 lda.d 00002a         remainder is NOS
5482:000 | DONE ins | em 16 16 | 00601e | 95 00       |                 sta.dx 00            
5483:000 | DONE wsp | em 16 16 |        |             |
5484:000 | DONE lbl | em 16 16 | 006020 |             | z_ummod                              
5484:001 | DONE ins | em 16 16 | 006020 | 60          |                 rts                  
5485:000 | DONE wsp | em 16 16 |        |             |
5486:000 | DONE wsp | em 16 16 |        |             |
5487:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5488:000 | DONE cmt | em 16 16 |        |             | ; UNLOOP ( -- ; R: n n n -- ) X bytes / X cycles
5489:000 | DONE cmt | em 16 16 |        |             | ; Drop loop control stuff from Return Stack.
5490:000 | DONE cmt | em 16 16 |        |             | ; TODO make this faster
5491:000 | DONE lbl | em 16 16 | 006021 |             | xt_unloop                            
5492:000 | DONE cmt | em 16 16 |        |             |                 ; drop fudge number (limit/start) from DO/?DO off the Return
5493:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5494:000 | DONE ins | em 16 16 | 006021 | 68          |                 pla                  
5495:000 | DONE ins | em 16 16 | 006022 | 68          |                 pla                  
5496:000 | DONE wsp | em 16 16 |        |             |
5497:000 | DONE cmt | em 16 16 |        |             |                 ; Drop the LEAVE address that was below them as well
5498:000 | DONE ins | em 16 16 | 006023 | 68          |                 pla                  
5499:000 | DONE wsp | em 16 16 |        |             |
5500:000 | DONE lbl | em 16 16 | 006024 |             | z_unloop                             
5500:001 | DONE ins | em 16 16 | 006024 | 60          |                 rts                  
5501:000 | DONE wsp | em 16 16 |        |             |
5502:000 | DONE wsp | em 16 16 |        |             |
5503:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5504:000 | DONE cmt | em 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
5505:000 | DONE cmt | em 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not exclude the
5506:000 | DONE cmt | em 16 16 |        |             | ; space for PAD.
5507:000 | DONE lbl | em 16 16 | 006025 |             | xt_unused                            
5508:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5509:000 | DONE ins | em 16 16 | 006025 | a9 ff 4f    |                 lda.# 004fff         
5510:000 | DONE ins | em 16 16 | 006028 | 38          |                 sec                  
5511:000 | DONE ins | em 16 16 | 006029 | e5 00       |                 sbc.d 000000         current compile pointer
5512:000 | DONE wsp | em 16 16 |        |             |
5513:000 | DONE ins | em 16 16 | 00602b | ca          |                 dex                  
5514:000 | DONE ins | em 16 16 | 00602c | ca          |                 dex                  
5515:000 | DONE ins | em 16 16 | 00602d | 94 00       |                 sty.dx 00            
5516:000 | DONE wsp | em 16 16 |        |             |
5517:000 | DONE ins | em 16 16 | 00602f | a8          |                 tay                  
5518:000 | DONE wsp | em 16 16 |        |             |
5519:000 | DONE lbl | em 16 16 | 006030 |             | z_unused                             
5519:001 | DONE ins | em 16 16 | 006030 | 60          |                 rts                  
5520:000 | DONE wsp | em 16 16 |        |             |
5521:000 | DONE wsp | em 16 16 |        |             |
5522:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5523:000 | DONE cmt | em 16 16 |        |             | ; VALUE ( n "name" -- ) X bytes / X cycles
5524:000 | DONE cmt | em 16 16 |        |             | ; Associate a name with a value (like a constant) that can be changed (like
5525:000 | DONE cmt | em 16 16 |        |             | ; a variable) with TO. We use the routines as CONSTANT, see there.
5526:000 | DONE wsp | em 16 16 |        |             |
5527:000 | DONE wsp | em 16 16 |        |             |
5528:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5529:000 | DONE cmt | em 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
5530:000 | DONE cmt | em 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
5531:000 | DONE cmt | em 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
5532:000 | DONE cmt | em 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
5533:000 | DONE lbl | em 16 16 | 006031 |             | xt_variable                          
5534:000 | DONE cmt | em 16 16 |        |             |                 ; We let CREATE do the heavy lifting
5535:000 | DONE ins | em 16 16 | 006031 | 20 62 57    |                 jsr 005762           
5536:000 | DONE wsp | em 16 16 |        |             |
5537:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
5538:000 | DONE cmt | em 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
5539:000 | DONE ins | em 16 16 | 006034 | a9 00 00    |                 lda.# 0000           
5540:000 | DONE ins | em 16 16 | 006037 | 92 00       |                 sta.di 000000        STA (CP)
5541:000 | DONE wsp | em 16 16 |        |             |
5542:000 | DONE ins | em 16 16 | 006039 | e6 00       |                 inc.d 000000         direct COMMA
5543:000 | DONE ins | em 16 16 | 00603b | e6 00       |                 inc.d 000000         
5544:000 | DONE wsp | em 16 16 |        |             |
5545:000 | DONE ins | em 16 16 | 00603d | 20 37 57    |                 jsr 005737           adjust the z_ value by adding 2 bytes
5546:000 | DONE wsp | em 16 16 |        |             |
5547:000 | DONE lbl | em 16 16 | 006040 |             | z_variable                           
5547:001 | DONE ins | em 16 16 | 006040 | 60          |                 rts                  
5548:000 | DONE wsp | em 16 16 |        |             |
5549:000 | DONE wsp | em 16 16 |        |             |
5550:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5551:000 | DONE cmt | em 16 16 |        |             | ; WORD ( char "name" -- c-addr ) X bytes / X cycles
5552:000 | DONE cmt | em 16 16 |        |             | ; Obsolete parsing word included for backwards compatibility. Do note use this,
5553:000 | DONE cmt | em 16 16 |        |             | ; use PARSE or PARSE-NAME. Skips leading delimiters and copies word to storage
5554:000 | DONE cmt | em 16 16 |        |             | ; area for a maximum size of 255 bytes. Returns the result as a counted string
5555:000 | DONE cmt | em 16 16 |        |             | ; (requires COUNT to convert to modern format), and inserts a space after the
5556:000 | DONE cmt | em 16 16 |        |             | ; string. See "Forth Programmer's Handbook" 3rd edition p.159 and
5557:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
5558:000 | DONE cmt | em 16 16 |        |             | ; for discussions of why you shouldn't be using WORD anymore. Forth would be
5559:000 | DONE cmt | em 16 16 |        |             | ; PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
5560:000 | DONE cmt | em 16 16 |        |             | ; TODO What about the space?
5561:000 | DONE lbl | em 16 16 | 006041 |             | xt_word                              
5562:000 | DONE cmt | em 16 16 |        |             |                 ; The real work is done by PARSE
5563:000 | DONE ins | em 16 16 | 006041 | 20 c6 5c    |                 jsr 005cc6           ( addr u )
5564:000 | DONE wsp | em 16 16 |        |             |
5565:000 | DONE cmt | em 16 16 |        |             |                 ; Now we have to convert the modern address to the old form
5566:000 | DONE ins | em 16 16 | 006044 | 8c 80 02    |                 sty 000280           overwrite MSB
5567:000 | DONE wsp | em 16 16 |        |             |
5568:000 | DONE ins | em 16 16 | 006047 | ca          |                 dex                  
5569:000 | DONE ins | em 16 16 | 006048 | ca          |                 dex                  ( addr <?> u )
5570:000 | DONE ins | em 16 16 | 006049 | a9 80 02    |                 lda.# 000280         
5571:000 | DONE ins | em 16 16 | 00604c | 1a          |                 inc.a                
5572:000 | DONE ins | em 16 16 | 00604d | 95 00       |                 sta.dx 00            ( addr buffer1+1 u )
5573:000 | DONE wsp | em 16 16 |        |             |
5574:000 | DONE ins | em 16 16 | 00604f | 20 96 5b    |                 jsr 005b96           
5575:000 | DONE wsp | em 16 16 |        |             |
5576:000 | DONE ins | em 16 16 | 006052 | ca          |                 dex                  
5577:000 | DONE ins | em 16 16 | 006053 | ca          |                 dex                  
5578:000 | DONE ins | em 16 16 | 006054 | 94 00       |                 sty.dx 00            
5579:000 | DONE wsp | em 16 16 |        |             |
5580:000 | DONE ins | em 16 16 | 006056 | a0 80 02    |                 ldy.# 000280         
5581:000 | DONE wsp | em 16 16 |        |             |
5582:000 | DONE lbl | em 16 16 | 006059 |             | z_word                               
5582:001 | DONE ins | em 16 16 | 006059 | 60          |                 rts                  
5583:000 | DONE wsp | em 16 16 |        |             |
5584:000 | DONE wsp | em 16 16 |        |             |
5585:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5586:000 | DONE cmt | em 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
5587:000 | DONE cmt | em 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
5588:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
5589:000 | DONE cmt | em 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
5590:000 | DONE lbl | em 16 16 | 00605a |             | xt_wordsnsizes                       
5591:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5592:000 | DONE ins | em 16 16 | 00605a | a9 ff ff    |                 lda.# 0ffff          
5593:000 | DONE ins | em 16 16 | 00605d | 85 20       |                 sta.d 000020         set flag that we want sizes, too
5594:000 | DONE wsp | em 16 16 |        |             |
5595:000 | DONE cmt | em 16 16 |        |             |                 ; continue with WORDS
5596:000 | DONE ins | em 16 16 | 00605f | 80 02       |                 bra 006063           
5597:000 | DONE wsp | em 16 16 |        |             |
5598:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5599:000 | DONE cmt | em 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
5600:000 | DONE cmt | em 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
5601:000 | DONE cmt | em 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
5602:000 | DONE cmt | em 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
5603:000 | DONE cmt | em 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
5604:000 | DONE lbl | em 16 16 | 006061 |             | xt_words                             
5605:000 | DONE ins | em 16 16 | 006061 | 64 20       |                 stz.d 000020         store flag that we don't want to print sizes
5606:000 | DONE wsp | em 16 16 |        |             |
5607:000 | DONE lbl | em 16 16 | 006063 |             | words_common                         
5608:000 | DONE cmt | em 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
5609:000 | DONE ins | em 16 16 | 006063 | 20 5b 57    |                 jsr 00575b           start on next line, this is a style choice
5610:000 | DONE wsp | em 16 16 |        |             |
5611:000 | DONE ins | em 16 16 | 006066 | a5 02       |                 lda.d 000002         nt of first entry in Dictionary (last added)
5612:000 | DONE ins | em 16 16 | 006068 | 48          |                 pha                  
5613:000 | DONE wsp | em 16 16 |        |             |
5614:000 | DONE ins | em 16 16 | 006069 | ca          |                 dex                  create room on TOS
5615:000 | DONE ins | em 16 16 | 00606a | ca          |                 dex                  
5616:000 | DONE ins | em 16 16 | 00606b | 94 00       |                 sty.dx 00            
5617:000 | DONE wsp | em 16 16 |        |             |
5618:000 | DONE lbl | em 16 16 | 00606d |             | words_loop                           
5619:000 | DONE ins | em 16 16 | 00606d | a8          |                 tay                  ( nt )
5620:000 | DONE ins | em 16 16 | 00606e | 20 b3 5b    |                 jsr 005bb3           ( nt -- addr u )
5621:000 | DONE ins | em 16 16 | 006071 | 20 2a 5f    |                 jsr 005f2a           
5622:000 | DONE ins | em 16 16 | 006074 | 20 e2 5e    |                 jsr 005ee2           
5623:000 | DONE wsp | em 16 16 |        |             |
5624:000 | DONE cmt | em 16 16 |        |             |                 ; If the user wants sizes as well, print them
5625:000 | DONE ins | em 16 16 | 006077 | a5 20       |                 lda.d 000020         
5626:000 | DONE ins | em 16 16 | 006079 | f0 0f       |                 beq 00608a           
5627:000 | DONE wsp | em 16 16 |        |             |
5628:000 | DONE cmt | em 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
5629:000 | DONE cmt | em 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
5630:000 | DONE ins | em 16 16 | 00607b | ca          |                 dex                  
5631:000 | DONE ins | em 16 16 | 00607c | ca          |                 dex                  
5632:000 | DONE ins | em 16 16 | 00607d | 94 00       |                 sty.dx 00            
5633:000 | DONE wsp | em 16 16 |        |             |
5634:000 | DONE ins | em 16 16 | 00607f | 7a          |                 ply                  get nt back again
5635:000 | DONE ins | em 16 16 | 006080 | 5a          |                 phy                  
5636:000 | DONE ins | em 16 16 | 006081 | 20 9e 60    |                 jsr 00609e           ( u )
5637:000 | DONE ins | em 16 16 | 006084 | 20 d7 51    |                 jsr 0051d7           
5638:000 | DONE ins | em 16 16 | 006087 | 20 e2 5e    |                 jsr 005ee2           
5639:000 | DONE wsp | em 16 16 |        |             |
5640:000 | DONE lbl | em 16 16 | 00608a |             | words_nosizes                        
5641:000 | DONE ins | em 16 16 | 00608a | 68          |                 pla                  get back first entry in Dictionary
5642:000 | DONE wsp | em 16 16 |        |             |
5643:000 | DONE cmt | em 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
5644:000 | DONE cmt | em 16 16 |        |             |                 ; the Dictionary header
5645:000 | DONE ins | em 16 16 | 00608b | 1a          |                 inc.a                
5646:000 | DONE ins | em 16 16 | 00608c | 1a          |                 inc.a                
5647:000 | DONE wsp | em 16 16 |        |             |
5648:000 | DONE ins | em 16 16 | 00608d | ca          |                 dex                  
5649:000 | DONE ins | em 16 16 | 00608e | ca          |                 dex                  
5650:000 | DONE ins | em 16 16 | 00608f | 94 00       |                 sty.dx 00            
5651:000 | DONE wsp | em 16 16 |        |             |
5652:000 | DONE ins | em 16 16 | 006091 | a8          |                 tay                  
5653:000 | DONE ins | em 16 16 | 006092 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5654:000 | DONE ins | em 16 16 | 006095 | 48          |                 pha                  
5655:000 | DONE ins | em 16 16 | 006096 | d0 d5       |                 bne 00606d           zero entry signals end of Dictionary
5656:000 | DONE wsp | em 16 16 |        |             |
5657:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up
5658:000 | DONE ins | em 16 16 | 006098 | 68          |                 pla                  balance MPU stack, value discarded
5659:000 | DONE wsp | em 16 16 |        |             |
5660:000 | DONE ins | em 16 16 | 006099 | b4 00       |                 ldy.dx 00            
5661:000 | DONE ins | em 16 16 | 00609b | e8          |                 inx                  
5662:000 | DONE ins | em 16 16 | 00609c | e8          |                 inx                  
5663:000 | DONE wsp | em 16 16 |        |             |
5664:000 | DONE lbl | em 16 16 | 00609d |             | z_words                              
5665:000 | DONE lbl | em 16 16 | 00609d |             | z_wordsnsizes                        
5665:001 | DONE ins | em 16 16 | 00609d | 60          |                 rts                  
5666:000 | DONE wsp | em 16 16 |        |             |
5667:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5668:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
5669:000 | DONE cmt | em 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
5670:000 | DONE cmt | em 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
5671:000 | DONE cmt | em 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
5672:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite so it takes xt and not nt
5673:000 | DONE lbl | em 16 16 | 00609e |             | xt_wordsize                          
5674:000 | DONE cmt | em 16 16 |        |             |                 ; We get the beginning address of the code from the word's
5675:000 | DONE cmt | em 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
5676:000 | DONE cmt | em 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
5677:000 | DONE ins | em 16 16 | 00609e | c8          |                 iny                  
5678:000 | DONE ins | em 16 16 | 00609f | c8          |                 iny                  
5679:000 | DONE ins | em 16 16 | 0060a0 | c8          |                 iny                  
5680:000 | DONE ins | em 16 16 | 0060a1 | c8          |                 iny                  nt+4, location of xt
5681:000 | DONE ins | em 16 16 | 0060a2 | b9 00 00    |                 lda.y 0000           get xt
5682:000 | DONE ins | em 16 16 | 0060a5 | 85 1e       |                 sta.d 00001e         
5683:000 | DONE wsp | em 16 16 |        |             |
5684:000 | DONE ins | em 16 16 | 0060a7 | c8          |                 iny                  
5685:000 | DONE ins | em 16 16 | 0060a8 | c8          |                 iny                  nt+6, location of z_word
5686:000 | DONE ins | em 16 16 | 0060a9 | b9 00 00    |                 lda.y 0000           
5687:000 | DONE wsp | em 16 16 |        |             |
5688:000 | DONE ins | em 16 16 | 0060ac | 38          |                 sec                  (z_word - xt_word)
5689:000 | DONE ins | em 16 16 | 0060ad | e5 1e       |                 sbc.d 00001e         
5690:000 | DONE ins | em 16 16 | 0060af | a8          |                 tay                  
5691:000 | DONE wsp | em 16 16 |        |             |
5692:000 | DONE lbl | em 16 16 | 0060b0 |             | z_wordsize                           
5692:001 | DONE ins | em 16 16 | 0060b0 | 60          |                 rts                  
5693:000 | DONE wsp | em 16 16 |        |             |
5694:000 | DONE wsp | em 16 16 |        |             |
5695:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5696:000 | DONE cmt | em 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
5697:000 | DONE cmt | em 16 16 |        |             | ; Logical XOR
5698:000 | DONE lbl | em 16 16 | 0060b1 |             | xt_xor                               
5699:000 | DONE ins | em 16 16 | 0060b1 | 98          |                 tya                  
5700:000 | DONE ins | em 16 16 | 0060b2 | 55 00       |                 eor.dx 00            
5701:000 | DONE ins | em 16 16 | 0060b4 | a8          |                 tay                  
5702:000 | DONE wsp | em 16 16 |        |             |
5703:000 | DONE ins | em 16 16 | 0060b5 | e8          |                 inx                  
5704:000 | DONE ins | em 16 16 | 0060b6 | e8          |                 inx                  
5705:000 | DONE wsp | em 16 16 |        |             |
5706:000 | DONE lbl | em 16 16 | 0060b7 |             | z_xor                                
5706:001 | DONE ins | em 16 16 | 0060b7 | 60          |                 rts                  
5707:000 | DONE wsp | em 16 16 |        |             |
5708:000 | DONE wsp | em 16 16 |        |             |
5709:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5710:000 | DONE cmt | em 16 16 |        |             | ; MIDDLE INCLUDES
5711:000 | DONE wsp | em 16 16 |        |             |
5712:000 | DONE cmt | em 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
5712:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5712:002 | DONE cmt | em 16 16 |        |             | ; First version: 05. Dec 2016
5712:003 | DONE cmt | em 16 16 |        |             | ; This version: 19. Mar 2017
5712:004 | DONE wsp | em 16 16 |        |             |
5712:005 | DONE cmt | em 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
5712:006 | DONE cmt | em 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
5712:007 | DONE cmt | em 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
5712:008 | DONE cmt | em 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
5712:009 | DONE cmt | em 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
5712:010 | DONE cmt | em 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
5712:011 | DONE cmt | em 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
5712:012 | DONE cmt | em 16 16 |        |             | ; beginning) for the xt.
5712:013 | DONE cmt | em 16 16 |        |             | ;
5712:014 | DONE cmt | em 16 16 |        |             | ; This gives us the following header structure:
5712:015 | DONE cmt | em 16 16 |        |             | ;
5712:016 | DONE cmt | em 16 16 |        |             | ;              8 bit     8 bit
5712:017 | DONE cmt | em 16 16 |        |             | ;               LSB       MSB
5712:018 | DONE cmt | em 16 16 |        |             | ; nt_word ->  +--------+--------+
5712:019 | DONE cmt | em 16 16 |        |             | ;             | Length | Status |
5712:020 | DONE cmt | em 16 16 |        |             | ;          +2 +--------+--------+
5712:021 | DONE cmt | em 16 16 |        |             | ;             | Next Header     | -> nt_next_word
5712:022 | DONE cmt | em 16 16 |        |             | ;          +4 +-----------------+
5712:023 | DONE cmt | em 16 16 |        |             | ;             | Start of Code   | -> xt_word
5712:024 | DONE cmt | em 16 16 |        |             | ;          +6 +-----------------+
5712:025 | DONE cmt | em 16 16 |        |             | ;             | End of Code     | -> z_word
5712:026 | DONE cmt | em 16 16 |        |             | ;          +8 +--------+--------+
5712:027 | DONE cmt | em 16 16 |        |             | ;             | Name   |        |
5712:028 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5712:029 | DONE cmt | em 16 16 |        |             | ;             |        |        |
5712:030 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5712:031 | DONE cmt | em 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
5712:032 | DONE cmt | em 16 16 |        |             | ;          +n +--------+--------+
5712:033 | DONE cmt | em 16 16 |        |             | ;
5712:034 | DONE cmt | em 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
5712:035 | DONE cmt | em 16 16 |        |             | ; definitions.tasm:
5712:036 | DONE cmt | em 16 16 |        |             | ;
5712:037 | DONE cmt | em 16 16 |        |             | ;       CO - Compile Only
5712:038 | DONE cmt | em 16 16 |        |             | ;       IM - Immediate Word
5712:039 | DONE cmt | em 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
5712:040 | DONE cmt | em 16 16 |        |             | ;       FN - Force Native Compile (may not be called by JSR)
5712:041 | DONE wsp | em 16 16 |        |             |
5712:042 | DONE cmt | em 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
5712:043 | DONE cmt | em 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
5712:044 | DONE cmt | em 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
5712:045 | DONE cmt | em 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
5712:046 | DONE cmt | em 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
5712:047 | DONE cmt | em 16 16 |        |             | ; involved.
5712:048 | DONE wsp | em 16 16 |        |             |
5712:049 | DONE lbl | em 16 16 | 0060b8 |             | nt_bye                               
5712:050 | DONE dir | em 16 16 | 0060b8 | (1 bytes)   |         .byte 03                     length of word string
5712:050 | DONE dir | em 16 16 |        |             |                 03                       --  .
5712:051 | DONE dir | em 16 16 | 0060b9 | (1 bytes)   |         .byte { NC }                 status byte
5712:051 | DONE dir | em 16 16 |        |             |                 01                       --  .
5712:052 | DONE dir | em 16 16 | 0060ba | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
5712:052 | DONE dir | em 16 16 |        |             |                 00 00                    --  . .
5712:053 | DONE dir | em 16 16 | 0060bc | (2 bytes)   |         .word 0055f7                 start of code, the xt of this word
5712:053 | DONE dir | em 16 16 |        |             |                 f7 55                    --  . U
5712:054 | DONE dir | em 16 16 | 0060be | (2 bytes)   |         .word 0055fe                 end of code (points to RTS)
5712:054 | DONE dir | em 16 16 |        |             |                 fe 55                    --  . U
5712:055 | DONE dir | em 16 16 | 0060c0 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
5712:055 | DONE dir | em 16 16 |        |             |                 62 79 65                 --  b y e
5712:056 | DONE wsp | em 16 16 |        |             |
5712:057 | DONE lbl | em 16 16 | 0060c3 |             | nt_cold                              
5712:058 | DONE dir | em 16 16 | 0060c3 | (2 bytes)   |         .byte 4, 00                  
5712:058 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5712:059 | DONE dir | em 16 16 | 0060c5 | (6 bytes)   |         .word nt_bye, xt_cold, 0050f6 
5712:059 | DONE dir | em 16 16 |        |             |                 b8 60 61 50 f6 50        --  . ` a P . P
5712:060 | DONE dir | em 16 16 | 0060cb | (4 bytes)   |         .byte 63, 6f, 6c, 64         
5712:060 | DONE dir | em 16 16 |        |             |                 63 6f 6c 64              --  c o l d
5712:061 | DONE wsp | em 16 16 |        |             |
5712:062 | DONE lbl | em 16 16 | 0060cf |             | nt_word                              
5712:063 | DONE dir | em 16 16 | 0060cf | (2 bytes)   |         .byte 4, { NC }              
5712:063 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:064 | DONE dir | em 16 16 | 0060d1 | (6 bytes)   |         .word nt_cold, xt_word, 006059 
5712:064 | DONE dir | em 16 16 |        |             |                 c3 60 41 60 59 60        --  . ` A ` Y `
5712:065 | DONE dir | em 16 16 | 0060d7 | (4 bytes)   |         .byte 77, 6f, 72, 64         
5712:065 | DONE dir | em 16 16 |        |             |                 77 6f 72 64              --  w o r d
5712:066 | DONE wsp | em 16 16 |        |             |
5712:067 | DONE lbl | em 16 16 | 0060db |             | nt_find                              
5712:068 | DONE dir | em 16 16 | 0060db | (2 bytes)   |         .byte 4, { NC }              
5712:068 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:069 | DONE dir | em 16 16 | 0060dd | (6 bytes)   |         .word nt_word, xt_find, 0059a2 
5712:069 | DONE dir | em 16 16 |        |             |                 cf 60 72 59 a2 59        --  . ` r Y . Y
5712:070 | DONE dir | em 16 16 | 0060e3 | (4 bytes)   |         .byte 66, 69, 6e, 64         
5712:070 | DONE dir | em 16 16 |        |             |                 66 69 6e 64              --  f i n d
5712:071 | DONE wsp | em 16 16 |        |             |
5712:072 | DONE lbl | em 16 16 | 0060e7 |             | nt_aligned                           
5712:073 | DONE dir | em 16 16 | 0060e7 | (2 bytes)   |         .byte 7, { NC }              
5712:073 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5712:074 | DONE dir | em 16 16 | 0060e9 | (6 bytes)   |         .word nt_find, xt_aligned, 005562 
5712:074 | DONE dir | em 16 16 |        |             |                 db 60 61 55 62 55        --  . ` a U b U
5712:075 | DONE dir | em 16 16 | 0060ef | (7 bytes)   |         .byte 61, 6c, 69, 67, 6e, 65, 64 
5712:075 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e 65 64     --  a l i g n e d
5712:076 | DONE wsp | em 16 16 |        |             |
5712:077 | DONE lbl | em 16 16 | 0060f6 |             | nt_align                             
5712:078 | DONE dir | em 16 16 | 0060f6 | (2 bytes)   |         .byte 5, { NC }              
5712:078 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:079 | DONE dir | em 16 16 | 0060f8 | (6 bytes)   |         .word nt_aligned, xt_align, 005560 
5712:079 | DONE dir | em 16 16 |        |             |                 e7 60 5f 55 60 55        --  . ` _ U ` U
5712:080 | DONE dir | em 16 16 | 0060fe | (5 bytes)   |         .byte 61, 6c, 69, 67, 6e     
5712:080 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e           --  a l i g n
5712:081 | DONE wsp | em 16 16 |        |             |
5712:082 | DONE lbl | em 16 16 | 006103 |             | nt_wordsnsizes                       
5712:083 | DONE dir | em 16 16 | 006103 | (2 bytes)   |         .byte 0b, { NC }             
5712:083 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5712:084 | DONE dir | em 16 16 | 006105 | (6 bytes)   |         .word nt_align, xt_wordsnsizes, 00609d 
5712:084 | DONE dir | em 16 16 |        |             |                 f6 60 5a 60 9d 60        --  . ` Z ` . `
5712:085 | DONE dir | em 16 16 | 00610b | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
5712:085 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
5712:085 | DONE dir | em 16 16 |        |             |                 7a 65 73                 --  z e s
5712:086 | DONE wsp | em 16 16 |        |             |
5712:087 | DONE lbl | em 16 16 | 006116 |             | nt_words                             
5712:088 | DONE dir | em 16 16 | 006116 | (2 bytes)   |         .byte 5, { NC }              
5712:088 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:089 | DONE dir | em 16 16 | 006118 | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 00609d 
5712:089 | DONE dir | em 16 16 |        |             |                 03 61 61 60 9d 60        --  . a a ` . `
5712:090 | DONE dir | em 16 16 | 00611e | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
5712:090 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
5712:091 | DONE wsp | em 16 16 |        |             |
5712:092 | DONE lbl | em 16 16 | 006123 |             | nt_dump                              
5712:093 | DONE dir | em 16 16 | 006123 | (2 bytes)   |         .byte 4, { NC }              
5712:093 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:094 | DONE dir | em 16 16 | 006125 | (6 bytes)   |         .word nt_words, xt_dump, 005905 
5712:094 | DONE dir | em 16 16 |        |             |                 16 61 e8 58 05 59        --  . a . X . Y
5712:095 | DONE dir | em 16 16 | 00612b | (4 bytes)   |         .byte 64, 75, 6d, 70         
5712:095 | DONE dir | em 16 16 |        |             |                 64 75 6d 70              --  d u m p
5712:096 | DONE wsp | em 16 16 |        |             |
5712:097 | DONE lbl | em 16 16 | 00612f |             | nt_unloop                            
5712:098 | DONE dir | em 16 16 | 00612f | (2 bytes)   |         .byte 6, { NC + CO }         
5712:098 | DONE dir | em 16 16 |        |             |                 06 05                    --  . .
5712:099 | DONE dir | em 16 16 | 006131 | (6 bytes)   |         .word nt_dump, xt_unloop, 006024 
5712:099 | DONE dir | em 16 16 |        |             |                 23 61 21 60 24 60        --  # a ! ` $ `
5712:100 | DONE dir | em 16 16 | 006137 | (6 bytes)   |         .byte 75, 6e, 6c, 6f, 6f, 70 
5712:100 | DONE dir | em 16 16 |        |             |                 75 6e 6c 6f 6f 70        --  u n l o o p
5712:101 | DONE wsp | em 16 16 |        |             |
5712:102 | DONE lbl | em 16 16 | 00613d |             | nt_pploop                            
5712:103 | DONE dir | em 16 16 | 00613d | (2 bytes)   |         .byte 7, { NC + CO }         
5712:103 | DONE dir | em 16 16 |        |             |                 07 05                    --  . .
5712:104 | DONE dir | em 16 16 | 00613f | (6 bytes)   |         .word nt_unloop, xt_pploop, 0052ea 
5712:104 | DONE dir | em 16 16 |        |             |                 2f 61 dc 52 ea 52        --  / a . R . R
5712:105 | DONE dir | em 16 16 | 006145 | (7 bytes)   |         .byte 28, 2b, 6c, 6f, 6f, 70, 29 
5712:105 | DONE dir | em 16 16 |        |             |                 28 2b 6c 6f 6f 70 29     --  ( + l o o p )
5712:106 | DONE wsp | em 16 16 |        |             |
5712:107 | DONE lbl | em 16 16 | 00614c |             | nt_ploop                             
5712:108 | DONE dir | em 16 16 | 00614c | (2 bytes)   |         .byte 5, { IM + CO }         
5712:108 | DONE dir | em 16 16 |        |             |                 05 06                    --  . .
5712:109 | DONE dir | em 16 16 | 00614e | (6 bytes)   |         .word nt_pploop, xt_ploop, 005360 
5712:109 | DONE dir | em 16 16 |        |             |                 3d 61 3f 53 60 53        --  = a ? S ` S
5712:110 | DONE dir | em 16 16 | 006154 | (5 bytes)   |         .byte 2b, 6c, 6f, 6f, 70     
5712:110 | DONE dir | em 16 16 |        |             |                 2b 6c 6f 6f 70           --  + l o o p
5712:111 | DONE wsp | em 16 16 |        |             |
5712:112 | DONE lbl | em 16 16 | 006159 |             | nt_loop                              
5712:113 | DONE dir | em 16 16 | 006159 | (2 bytes)   |         .byte 4, { IM + CO }         
5712:113 | DONE dir | em 16 16 |        |             |                 04 06                    --  . .
5712:114 | DONE dir | em 16 16 | 00615b | (6 bytes)   |         .word nt_ploop, xt_loop, 005360 
5712:114 | DONE dir | em 16 16 |        |             |                 4c 61 39 53 60 53        --  L a 9 S ` S
5712:115 | DONE dir | em 16 16 | 006161 | (4 bytes)   |         .byte 6c, 6f, 6f, 70         
5712:115 | DONE dir | em 16 16 |        |             |                 6c 6f 6f 70              --  l o o p
5712:116 | DONE wsp | em 16 16 |        |             |
5712:117 | DONE lbl | em 16 16 | 006165 |             | nt_leave                             
5712:118 | DONE dir | em 16 16 | 006165 | (2 bytes)   |         .byte 5, { NC + CO }         
5712:118 | DONE dir | em 16 16 |        |             |                 05 05                    --  . .
5712:119 | DONE dir | em 16 16 | 006167 | (6 bytes)   |         .word nt_loop, xt_leave, 005af3 
5712:119 | DONE dir | em 16 16 |        |             |                 59 61 f0 5a f3 5a        --  Y a . Z . Z
5712:120 | DONE dir | em 16 16 | 00616d | (5 bytes)   |         .byte 6c, 65, 61, 76, 65     
5712:120 | DONE dir | em 16 16 |        |             |                 6c 65 61 76 65           --  l e a v e
5712:121 | DONE wsp | em 16 16 |        |             |
5712:122 | DONE lbl | em 16 16 | 006172 |             | nt_exit                              
5712:123 | DONE dir | em 16 16 | 006172 | (2 bytes)   |         .byte 4, { NC + CO }         
5712:123 | DONE dir | em 16 16 |        |             |                 04 05                    --  . .
5712:124 | DONE dir | em 16 16 | 006174 | (6 bytes)   |         .word nt_leave, xt_exit, 00591b 
5712:124 | DONE dir | em 16 16 |        |             |                 65 61 1a 59 1b 59        --  e a . Y . Y
5712:125 | DONE dir | em 16 16 | 00617a | (4 bytes)   |         .byte 65, 78, 69, 74         
5712:125 | DONE dir | em 16 16 |        |             |                 65 78 69 74              --  e x i t
5712:126 | DONE wsp | em 16 16 |        |             |
5712:127 | DONE lbl | em 16 16 | 00617e |             | nt_recurse                           
5712:128 | DONE dir | em 16 16 | 00617e | (2 bytes)   |         .byte 7, { IM + CO }         
5712:128 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5712:129 | DONE dir | em 16 16 | 006180 | (6 bytes)   |         .word nt_exit, xt_recurse, 005d75 
5712:129 | DONE dir | em 16 16 |        |             |                 72 61 5c 5d 75 5d        --  r a \ ] u ]
5712:130 | DONE dir | em 16 16 | 006186 | (7 bytes)   |         .byte 72, 65, 63, 75, 72, 73, 65 
5712:130 | DONE dir | em 16 16 |        |             |                 72 65 63 75 72 73 65     --  r e c u r s e
5712:131 | DONE wsp | em 16 16 |        |             |
5712:132 | DONE lbl | em 16 16 | 00618d |             | nt_j                                 
5712:133 | DONE dir | em 16 16 | 00618d | (2 bytes)   |         .byte 1, { NC + CO }         
5712:133 | DONE dir | em 16 16 |        |             |                 01 05                    --  . .
5712:134 | DONE dir | em 16 16 | 00618f | (6 bytes)   |         .word nt_recurse, xt_j, 005ad7 
5712:134 | DONE dir | em 16 16 |        |             |                 7e 61 cd 5a d7 5a        --  ~ a . Z . Z
5712:135 | DONE dir | em 16 16 | 006195 | (1 bytes)   |         .byte 6a                     
5712:135 | DONE dir | em 16 16 |        |             |                 6a                       --  j
5712:136 | DONE wsp | em 16 16 |        |             |
5712:137 | DONE lbl | em 16 16 | 006196 |             | nt_i                                 
5712:138 | DONE dir | em 16 16 | 006196 | (2 bytes)   |         .byte 1, { NC + CO }         
5712:138 | DONE dir | em 16 16 |        |             |                 01 05                    --  . .
5712:139 | DONE dir | em 16 16 | 006198 | (6 bytes)   |         .word nt_j, xt_i, 005a76     
5712:139 | DONE dir | em 16 16 |        |             |                 8d 61 6c 5a 76 5a        --  . a l Z v Z
5712:140 | DONE dir | em 16 16 | 00619e | (1 bytes)   |         .byte 69                     
5712:140 | DONE dir | em 16 16 |        |             |                 69                       --  i
5712:141 | DONE wsp | em 16 16 |        |             |
5712:142 | DONE lbl | em 16 16 | 00619f |             | nt_pqdo                              
5712:143 | DONE dir | em 16 16 | 00619f | (2 bytes)   |         .byte 5, { CO + NC + FN }    
5712:143 | DONE dir | em 16 16 |        |             |                 05 0d                    --  . 
5712:144 | DONE dir | em 16 16 | 0061a1 | (6 bytes)   |         .word nt_i, xt_pqdo, 005314  
5712:144 | DONE dir | em 16 16 |        |             |                 96 61 eb 52 14 53        --  . a . R . S
5712:145 | DONE dir | em 16 16 | 0061a7 | (5 bytes)   |         .byte 28, 3f, 64, 6f, 29     
5712:145 | DONE dir | em 16 16 |        |             |                 28 3f 64 6f 29           --  ( ? d o )
5712:146 | DONE wsp | em 16 16 |        |             |
5712:147 | DONE lbl | em 16 16 | 0061ac |             | nt_pdo                               
5712:148 | DONE dir | em 16 16 | 0061ac | (2 bytes)   |         .byte 4, { CO + NC + FN }    
5712:148 | DONE dir | em 16 16 |        |             |                 04 0d                    --  . 
5712:149 | DONE dir | em 16 16 | 0061ae | (6 bytes)   |         .word nt_pqdo, xt_pdo, 005314 
5712:149 | DONE dir | em 16 16 |        |             |                 9f 61 02 53 14 53        --  . a . S . S
5712:150 | DONE dir | em 16 16 | 0061b4 | (4 bytes)   |         .byte 28, 64, 6f, 29         
5712:150 | DONE dir | em 16 16 |        |             |                 28 64 6f 29              --  ( d o )
5712:151 | DONE wsp | em 16 16 |        |             |
5712:152 | DONE lbl | em 16 16 | 0061b8 |             | nt_qdo                               
5712:153 | DONE dir | em 16 16 | 0061b8 | (2 bytes)   |         .byte 3, { IM + CO }         may not be Native Compile
5712:153 | DONE dir | em 16 16 |        |             |                 03 06                    --  . .
5712:154 | DONE dir | em 16 16 | 0061ba | (6 bytes)   |         .word nt_pdo, xt_qdo, 0058bf 
5712:154 | DONE dir | em 16 16 |        |             |                 ac 61 85 58 bf 58        --  . a . X . X
5712:155 | DONE dir | em 16 16 | 0061c0 | (3 bytes)   |         .byte 3f, 64, 6f             
5712:155 | DONE dir | em 16 16 |        |             |                 3f 64 6f                 --  ? d o
5712:156 | DONE wsp | em 16 16 |        |             |
5712:157 | DONE lbl | em 16 16 | 0061c3 |             | nt_do                                
5712:158 | DONE dir | em 16 16 | 0061c3 | (2 bytes)   |         .byte 2, { IM + CO }         may not be Native Compile
5712:158 | DONE dir | em 16 16 |        |             |                 02 06                    --  . .
5712:159 | DONE dir | em 16 16 | 0061c5 | (6 bytes)   |         .word nt_qdo, xt_do, 0058bf  
5712:159 | DONE dir | em 16 16 |        |             |                 b8 61 8c 58 bf 58        --  . a . X . X
5712:160 | DONE dir | em 16 16 | 0061cb | (2 bytes)   |         .byte 64, 6f                 
5712:160 | DONE dir | em 16 16 |        |             |                 64 6f                    --  d o
5712:161 | DONE wsp | em 16 16 |        |             |
5712:162 | DONE lbl | em 16 16 | 0061cd |             | nt_marker                            
5712:163 | DONE dir | em 16 16 | 0061cd | (2 bytes)   |         .byte 6, { IM + NC }         
5712:163 | DONE dir | em 16 16 |        |             |                 06 03                    --  . .
5712:164 | DONE dir | em 16 16 | 0061cf | (6 bytes)   |         .word nt_do, xt_marker, 005b6f 
5712:164 | DONE dir | em 16 16 |        |             |                 c3 61 46 5b 6f 5b        --  . a F [ o [
5712:165 | DONE dir | em 16 16 | 0061d5 | (6 bytes)   |         .byte 6d, 61, 72, 6b, 65, 72 
5712:165 | DONE dir | em 16 16 |        |             |                 6d 61 72 6b 65 72        --  m a r k e r
5712:166 | DONE wsp | em 16 16 |        |             |
5712:167 | DONE lbl | em 16 16 | 0061db |             | nt_wordsize                          
5712:168 | DONE dir | em 16 16 | 0061db | (2 bytes)   |         .byte 8, { NC }              
5712:168 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5712:169 | DONE dir | em 16 16 | 0061dd | (6 bytes)   |         .word nt_marker, xt_wordsize, 0060b0 
5712:169 | DONE dir | em 16 16 |        |             |                 cd 61 9e 60 b0 60        --  . a . ` . `
5712:170 | DONE dir | em 16 16 | 0061e3 | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
5712:170 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
5712:170 | DONE dir | em 16 16 |        |             |                                          -- 
5712:171 | DONE wsp | em 16 16 |        |             |
5712:172 | DONE lbl | em 16 16 | 0061eb |             | nt_pick                              
5712:173 | DONE dir | em 16 16 | 0061eb | (2 bytes)   |         .byte 4, { NC }              
5712:173 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:174 | DONE dir | em 16 16 | 0061ed | (6 bytes)   |         .word nt_wordsize, xt_pick, 005d06 
5712:174 | DONE dir | em 16 16 |        |             |                 db 61 f9 5c 06 5d        --  . a . \ . ]
5712:175 | DONE dir | em 16 16 | 0061f3 | (4 bytes)   |         .byte 70, 69, 63, 6b         
5712:175 | DONE dir | em 16 16 |        |             |                 70 69 63 6b              --  p i c k
5712:176 | DONE wsp | em 16 16 |        |             |
5712:177 | DONE lbl | em 16 16 | 0061f7 |             | nt_bell                              
5712:178 | DONE dir | em 16 16 | 0061f7 | (2 bytes)   |         .byte 4, { NC }              
5712:178 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:179 | DONE dir | em 16 16 | 0061f9 | (6 bytes)   |         .word nt_pick, xt_bell, 0055c9 
5712:179 | DONE dir | em 16 16 |        |             |                 eb 61 c3 55 c9 55        --  . a . U . U
5712:180 | DONE dir | em 16 16 | 0061ff | (4 bytes)   |         .byte 62, 65, 6c, 6c         
5712:180 | DONE dir | em 16 16 |        |             |                 62 65 6c 6c              --  b e l l
5712:181 | DONE wsp | em 16 16 |        |             |
5712:182 | DONE lbl | em 16 16 | 006203 |             | nt_chars                             
5712:183 | DONE dir | em 16 16 | 006203 | (2 bytes)   |         .byte 5, { NC }              
5712:183 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:184 | DONE dir | em 16 16 | 006205 | (6 bytes)   |         .word nt_bell, xt_chars, 005644 
5712:184 | DONE dir | em 16 16 |        |             |                 f7 61 43 56 44 56        --  . a C V D V
5712:185 | DONE dir | em 16 16 | 00620b | (5 bytes)   |         .byte 63, 68, 61, 72, 73     
5712:185 | DONE dir | em 16 16 |        |             |                 63 68 61 72 73           --  c h a r s
5712:186 | DONE wsp | em 16 16 |        |             |
5712:187 | DONE lbl | em 16 16 | 006210 |             | nt_cellplus                          
5712:188 | DONE dir | em 16 16 | 006210 | (2 bytes)   |         .byte 5, { NC }              
5712:188 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:189 | DONE dir | em 16 16 | 006212 | (6 bytes)   |         .word nt_chars, xt_cellplus, 00562a 
5712:189 | DONE dir | em 16 16 |        |             |                 03 62 28 56 2a 56        --  . b ( V * V
5712:190 | DONE dir | em 16 16 | 006218 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 2b     
5712:190 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 2b           --  c e l l +
5712:191 | DONE wsp | em 16 16 |        |             |
5712:192 | DONE lbl | em 16 16 | 00621d |             | nt_charplus                          
5712:193 | DONE dir | em 16 16 | 00621d | (2 bytes)   |         .byte 5, { NC }              uses code of 1+
5712:193 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:194 | DONE dir | em 16 16 | 00621f | (6 bytes)   |         .word nt_cellplus, xt_one-plus, 0053f8 
5712:194 | DONE dir | em 16 16 |        |             |                 10 62 f7 53 f8 53        --  . b . S . S
5712:195 | DONE dir | em 16 16 | 006225 | (5 bytes)   |         .byte 63, 68, 61, 72, 2b     
5712:195 | DONE dir | em 16 16 |        |             |                 63 68 61 72 2b           --  c h a r +
5712:196 | DONE wsp | em 16 16 |        |             |
5712:197 | DONE lbl | em 16 16 | 00622a |             | nt_decimal                           
5712:198 | DONE dir | em 16 16 | 00622a | (2 bytes)   |         .byte 7, { NC }              
5712:198 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5712:199 | DONE dir | em 16 16 | 00622c | (6 bytes)   |         .word nt_charplus, xt_decimal, 005861 
5712:199 | DONE dir | em 16 16 |        |             |                 1d 62 5c 58 61 58        --  . b \ X a X
5712:200 | DONE dir | em 16 16 | 006232 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
5712:200 | DONE dir | em 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
5712:201 | DONE wsp | em 16 16 |        |             |
5712:202 | DONE lbl | em 16 16 | 006239 |             | nt_hex                               
5712:203 | DONE dir | em 16 16 | 006239 | (2 bytes)   |         .byte 3, { NC }              
5712:203 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:204 | DONE dir | em 16 16 | 00623b | (6 bytes)   |         .word nt_decimal, xt_hex, 005abe 
5712:204 | DONE dir | em 16 16 |        |             |                 2a 62 b9 5a be 5a        --  * b . Z . Z
5712:205 | DONE dir | em 16 16 | 006241 | (3 bytes)   |         .byte 68, 65, 78             
5712:205 | DONE dir | em 16 16 |        |             |                 68 65 78                 --  h e x
5712:206 | DONE wsp | em 16 16 |        |             |
5712:207 | DONE lbl | em 16 16 | 006244 |             | nt_unused                            
5712:208 | DONE dir | em 16 16 | 006244 | (2 bytes)   |         .byte 6, { NC }              
5712:208 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:209 | DONE dir | em 16 16 | 006246 | (6 bytes)   |         .word nt_hex, xt_unused, 006030 
5712:209 | DONE dir | em 16 16 |        |             |                 39 62 25 60 30 60        --  9 b % ` 0 `
5712:210 | DONE dir | em 16 16 | 00624c | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
5712:210 | DONE dir | em 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
5712:211 | DONE wsp | em 16 16 |        |             |
5712:212 | DONE lbl | em 16 16 | 006252 |             | nt_page                              
5712:213 | DONE dir | em 16 16 | 006252 | (2 bytes)   |         .byte 4, { NC }              
5712:213 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:214 | DONE dir | em 16 16 | 006254 | (6 bytes)   |         .word nt_unused, xt_page, 005c91 
5712:214 | DONE dir | em 16 16 |        |             |                 44 62 85 5c 91 5c        --  D b . \ . \
5712:215 | DONE dir | em 16 16 | 00625a | (4 bytes)   |         .byte 70, 61, 67, 65         
5712:215 | DONE dir | em 16 16 |        |             |                 70 61 67 65              --  p a g e
5712:216 | DONE wsp | em 16 16 |        |             |
5712:217 | DONE lbl | em 16 16 | 00625e |             | nt_at-xy                             
5712:218 | DONE dir | em 16 16 | 00625e | (2 bytes)   |         .byte 5, { NC }              
5712:218 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:219 | DONE dir | em 16 16 | 006260 | (6 bytes)   |         .word nt_page, xt_at-xy, 0055ba 
5712:219 | DONE dir | em 16 16 |        |             |                 52 62 93 55 ba 55        --  R b . U . U
5712:220 | DONE dir | em 16 16 | 006266 | (5 bytes)   |         .byte 61, 74, 2d, 78, 79     
5712:220 | DONE dir | em 16 16 |        |             |                 61 74 2d 78 79           --  a t - x y
5712:221 | DONE wsp | em 16 16 |        |             |
5712:222 | DONE lbl | em 16 16 | 00626b |             | nt_tworfetch                         
5712:223 | DONE dir | em 16 16 | 00626b | (2 bytes)   |         .byte 3, 00                  not natively compiled (yet)
5712:223 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5712:224 | DONE dir | em 16 16 | 00626d | (6 bytes)   |         .word nt_at-xy, xt_tworfetch, 005453 
5712:224 | DONE dir | em 16 16 |        |             |                 5e 62 46 54 53 54        --  ^ b F T S T
5712:225 | DONE dir | em 16 16 | 006273 | (3 bytes)   |         .byte 32, 72, 40             
5712:225 | DONE dir | em 16 16 |        |             |                 32 72 40                 --  2 r @
5712:226 | DONE wsp | em 16 16 |        |             |
5712:227 | DONE lbl | em 16 16 | 006276 |             | nt_2variable                         
5712:228 | DONE dir | em 16 16 | 006276 | (2 bytes)   |         .byte 9, { NC }              
5712:228 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5712:229 | DONE dir | em 16 16 | 006278 | (6 bytes)   |         .word nt_tworfetch, xt_2variable, 005477 
5712:229 | DONE dir | em 16 16 |        |             |                 6b 62 65 54 77 54        --  k b e T w T
5712:230 | DONE dir | em 16 16 | 00627e | (9 bytes)   |         .byte 32, 76, 61, 72, 69, 61, 62, 6c, 65 
5712:230 | DONE dir | em 16 16 |        |             |                 32 76 61 72 69 61 62 6c  --  2 v a r i a b l
5712:230 | DONE dir | em 16 16 |        |             |                 65                       --  e
5712:231 | DONE wsp | em 16 16 |        |             |
5712:232 | DONE lbl | em 16 16 | 006287 |             | nt_dabs                              
5712:233 | DONE dir | em 16 16 | 006287 | (2 bytes)   |         .byte 4, { NC }              
5712:233 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:234 | DONE dir | em 16 16 | 006289 | (6 bytes)   |         .word nt_2variable, xt_dabs, 00585b 
5712:234 | DONE dir | em 16 16 |        |             |                 76 62 55 58 5b 58        --  v b U X [ X
5712:235 | DONE dir | em 16 16 | 00628f | (4 bytes)   |         .byte 64, 61, 62, 73         
5712:235 | DONE dir | em 16 16 |        |             |                 64 61 62 73              --  d a b s
5712:236 | DONE wsp | em 16 16 |        |             |
5712:237 | DONE lbl | em 16 16 | 006293 |             | nt_dnegate                           
5712:238 | DONE dir | em 16 16 | 006293 | (2 bytes)   |         .byte 7, { NC }              
5712:238 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5712:239 | DONE dir | em 16 16 | 006295 | (6 bytes)   |         .word nt_dabs, xt_dnegate, 005884 
5712:239 | DONE dir | em 16 16 |        |             |                 87 62 71 58 84 58        --  . b q X . X
5712:240 | DONE dir | em 16 16 | 00629b | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
5712:240 | DONE dir | em 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
5712:241 | DONE wsp | em 16 16 |        |             |
5712:242 | DONE lbl | em 16 16 | 0062a2 |             | nt_dtos                              
5712:243 | DONE dir | em 16 16 | 0062a2 | (2 bytes)   |         .byte 3, { NC }              
5712:243 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:244 | DONE dir | em 16 16 | 0062a4 | (6 bytes)   |         .word nt_dnegate, xt_dtos, 005854 
5712:244 | DONE dir | em 16 16 |        |             |                 93 62 50 58 54 58        --  . b P X T X
5712:245 | DONE dir | em 16 16 | 0062aa | (3 bytes)   |         .byte 64, 3e, 73             
5712:245 | DONE dir | em 16 16 |        |             |                 64 3e 73                 --  d > s
5712:246 | DONE wsp | em 16 16 |        |             |
5712:247 | DONE lbl | em 16 16 | 0062ad |             | nt_stod                              
5712:248 | DONE dir | em 16 16 | 0062ad | (2 bytes)   |         .byte 3, { NC }              
5712:248 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:249 | DONE dir | em 16 16 | 0062af | (6 bytes)   |         .word nt_dtos, xt_stod, 005e02 
5712:249 | DONE dir | em 16 16 |        |             |                 a2 62 f3 5d 02 5e        --  . b . ] . ^
5712:250 | DONE dir | em 16 16 | 0062b5 | (3 bytes)   |         .byte 73, 3e, 64             
5712:250 | DONE dir | em 16 16 |        |             |                 73 3e 64                 --  s > d
5712:251 | DONE wsp | em 16 16 |        |             |
5712:252 | DONE lbl | em 16 16 | 0062b8 |             | nt_twofromr                          
5712:253 | DONE dir | em 16 16 | 0062b8 | (2 bytes)   |         .byte 3, { CO + NC }         NC is special case
5712:253 | DONE dir | em 16 16 |        |             |                 03 05                    --  . .
5712:254 | DONE dir | em 16 16 | 0062ba | (6 bytes)   |         .word nt_stod, xt_twofromr, 005445 
5712:254 | DONE dir | em 16 16 |        |             |                 ad 62 35 54 45 54        --  . b 5 T E T
5712:255 | DONE dir | em 16 16 | 0062c0 | (3 bytes)   |         .byte 32, 72, 3e             
5712:255 | DONE dir | em 16 16 |        |             |                 32 72 3e                 --  2 r >
5712:256 | DONE wsp | em 16 16 |        |             |
5712:257 | DONE lbl | em 16 16 | 0062c3 |             | nt_twotor                            
5712:258 | DONE dir | em 16 16 | 0062c3 | (2 bytes)   |         .byte 3, { CO + NC }         NC is special case
5712:258 | DONE dir | em 16 16 |        |             |                 03 05                    --  . .
5712:259 | DONE dir | em 16 16 | 0062c5 | (6 bytes)   |         .word nt_twofromr, xt_twotor, 005415 
5712:259 | DONE dir | em 16 16 |        |             |                 b8 62 05 54 15 54        --  . b . T . T
5712:260 | DONE dir | em 16 16 | 0062cb | (3 bytes)   |         .byte 32, 3e, 72             
5712:260 | DONE dir | em 16 16 |        |             |                 32 3e 72                 --  2 > r
5712:261 | DONE wsp | em 16 16 |        |             |
5712:262 | DONE lbl | em 16 16 | 0062ce |             | nt_dminus                            
5712:263 | DONE dir | em 16 16 | 0062ce | (2 bytes)   |         .byte 2, { NC }              
5712:263 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:264 | DONE dir | em 16 16 | 0062d0 | (6 bytes)   |         .word nt_twotor, xt_dminus, 00584f 
5712:264 | DONE dir | em 16 16 |        |             |                 c3 62 3b 58 4f 58        --  . b ; X O X
5712:265 | DONE dir | em 16 16 | 0062d6 | (2 bytes)   |         .byte 64, 2d                 
5712:265 | DONE dir | em 16 16 |        |             |                 64 2d                    --  d -
5712:266 | DONE wsp | em 16 16 |        |             |
5712:267 | DONE lbl | em 16 16 | 0062d8 |             | nt_dplus                             
5712:268 | DONE dir | em 16 16 | 0062d8 | (2 bytes)   |         .byte 2, { NC }              
5712:268 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:269 | DONE dir | em 16 16 | 0062da | (6 bytes)   |         .word nt_dminus, xt_dplus, 00583a 
5712:269 | DONE dir | em 16 16 |        |             |                 ce 62 29 58 3a 58        --  . b ) X : X
5712:270 | DONE dir | em 16 16 | 0062e0 | (2 bytes)   |         .byte 64, 2b                 
5712:270 | DONE dir | em 16 16 |        |             |                 64 2b                    --  d +
5712:271 | DONE wsp | em 16 16 |        |             |
5712:272 | DONE lbl | em 16 16 | 0062e2 |             | nt_fmmod                             
5712:273 | DONE dir | em 16 16 | 0062e2 | (2 bytes)   |         .byte 6, { NC }              
5712:273 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:274 | DONE dir | em 16 16 | 0062e4 | (6 bytes)   |         .word nt_dplus, xt_fmmod, 005a4d 
5712:274 | DONE dir | em 16 16 |        |             |                 d8 62 fa 59 4d 5a        --  . b . Y M Z
5712:275 | DONE dir | em 16 16 | 0062ea | (6 bytes)   |         .byte 66, 6d, 2f, 6d, 6f, 64 
5712:275 | DONE dir | em 16 16 |        |             |                 66 6d 2f 6d 6f 64        --  f m / m o d
5712:276 | DONE wsp | em 16 16 |        |             |
5712:277 | DONE lbl | em 16 16 | 0062f0 |             | nt_smrem                             
5712:278 | DONE dir | em 16 16 | 0062f0 | (2 bytes)   |         .byte 6, { NC }              
5712:278 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:279 | DONE dir | em 16 16 | 0062f2 | (6 bytes)   |         .word nt_fmmod, xt_smrem, 005ecd 
5712:279 | DONE dir | em 16 16 |        |             |                 e2 62 74 5e cd 5e        --  . b t ^ . ^
5712:280 | DONE dir | em 16 16 | 0062f8 | (6 bytes)   |         .byte 73, 6d, 2f, 72, 65, 6d 
5712:280 | DONE dir | em 16 16 |        |             |                 73 6d 2f 72 65 6d        --  s m / r e m
5712:281 | DONE wsp | em 16 16 |        |             |
5712:282 | DONE lbl | em 16 16 | 0062fe |             | nt_udmod                             
5712:283 | DONE dir | em 16 16 | 0062fe | (2 bytes)   |         .byte 6, { NC }              
5712:283 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:284 | DONE dir | em 16 16 | 006300 | (6 bytes)   |         .word nt_smrem, xt_udmod, 005f70 
5712:284 | DONE dir | em 16 16 |        |             |                 f0 62 55 5f 70 5f        --  . b U _ p _
5712:285 | DONE dir | em 16 16 | 006306 | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
5712:285 | DONE dir | em 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
5712:286 | DONE wsp | em 16 16 |        |             |
5712:287 | DONE lbl | em 16 16 | 00630c |             | nt_ummod                             
5712:288 | DONE dir | em 16 16 | 00630c | (2 bytes)   |         .byte 6, { NC }              
5712:288 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:289 | DONE dir | em 16 16 | 00630e | (6 bytes)   |         .word nt_udmod, xt_ummod, 006020 
5712:289 | DONE dir | em 16 16 |        |             |                 fe 62 d0 5f 20 60        --  . b . _   `
5712:290 | DONE dir | em 16 16 | 006314 | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
5712:290 | DONE dir | em 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
5712:291 | DONE wsp | em 16 16 |        |             |
5712:292 | DONE lbl | em 16 16 | 00631a |             | nt_star                              
5712:293 | DONE dir | em 16 16 | 00631a | (2 bytes)   |         .byte 1, { NC }              
5712:293 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:294 | DONE dir | em 16 16 | 00631c | (6 bytes)   |         .word nt_ummod, xt_star, 005f00 
5712:294 | DONE dir | em 16 16 |        |             |                 0c 63 f9 5e 00 5f        --   c . ^ . _
5712:295 | DONE dir | em 16 16 | 006322 | (1 bytes)   |         .byte 2a                     
5712:295 | DONE dir | em 16 16 |        |             |                 2a                       --  *
5712:296 | DONE wsp | em 16 16 |        |             |
5712:297 | DONE lbl | em 16 16 | 006323 |             | nt_mstar                             
5712:298 | DONE dir | em 16 16 | 006323 | (2 bytes)   |         .byte 2, { NC }              
5712:298 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:299 | DONE dir | em 16 16 | 006325 | (6 bytes)   |         .word nt_star, xt_mstar, 005b45 
5712:299 | DONE dir | em 16 16 |        |             |                 1a 63 26 5b 45 5b        --  . c & [ E [
5712:300 | DONE dir | em 16 16 | 00632b | (2 bytes)   |         .byte 6d, 2a                 
5712:300 | DONE dir | em 16 16 |        |             |                 6d 2a                    --  m *
5712:301 | DONE wsp | em 16 16 |        |             |
5712:302 | DONE lbl | em 16 16 | 00632d |             | nt_umstar                            
5712:303 | DONE dir | em 16 16 | 00632d | (2 bytes)   |         .byte 3, { NC }              
5712:303 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:304 | DONE dir | em 16 16 | 00632f | (6 bytes)   |         .word nt_mstar, xt_umstar, 005fcf 
5712:304 | DONE dir | em 16 16 |        |             |                 23 63 71 5f cf 5f        --  # c q _ . _
5712:305 | DONE dir | em 16 16 | 006335 | (3 bytes)   |         .byte 75, 6d, 2a             
5712:305 | DONE dir | em 16 16 |        |             |                 75 6d 2a                 --  u m *
5712:306 | DONE wsp | em 16 16 |        |             |
5712:307 | DONE lbl | em 16 16 | 006338 |             | nt_cmoveup                           
5712:308 | DONE dir | em 16 16 | 006338 | (2 bytes)   |         .byte 6, { NC }              
5712:308 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:309 | DONE dir | em 16 16 | 00633a | (6 bytes)   |         .word nt_umstar, xt_cmoveup, 005680 
5712:309 | DONE dir | em 16 16 |        |             |                 2d 63 68 56 80 56        --  - c h V . V
5712:310 | DONE dir | em 16 16 | 006340 | (6 bytes)   |         .byte 63, 6d, 6f, 76, 65, 3e 
5712:310 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65 3e        --  c m o v e >
5712:311 | DONE wsp | em 16 16 |        |             |
5712:312 | DONE lbl | em 16 16 | 006346 |             | nt_cmove                             
5712:313 | DONE dir | em 16 16 | 006346 | (2 bytes)   |         .byte 5, { NC }              
5712:313 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:314 | DONE dir | em 16 16 | 006348 | (6 bytes)   |         .word nt_cmoveup, xt_cmove, 005667 
5712:314 | DONE dir | em 16 16 |        |             |                 38 63 45 56 67 56        --  8 c E V g V
5712:315 | DONE dir | em 16 16 | 00634e | (5 bytes)   |         .byte 63, 6d, 6f, 76, 65     
5712:315 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65           --  c m o v e
5712:316 | DONE wsp | em 16 16 |        |             |
5712:317 | DONE lbl | em 16 16 | 006353 |             | nt_count                             
5712:318 | DONE dir | em 16 16 | 006353 | (2 bytes)   |         .byte 5, { NC }              
5712:318 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:319 | DONE dir | em 16 16 | 006355 | (6 bytes)   |         .word nt_cmove, xt_count, 00575a 
5712:319 | DONE dir | em 16 16 |        |             |                 46 63 4d 57 5a 57        --  F c M W Z W
5712:320 | DONE dir | em 16 16 | 00635b | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
5712:320 | DONE dir | em 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
5712:321 | DONE wsp | em 16 16 |        |             |
5712:322 | DONE lbl | em 16 16 | 006360 |             | nt_abortq                            
5712:323 | DONE dir | em 16 16 | 006360 | (2 bytes)   |         .byte 6, { CO + IM }         
5712:323 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5712:324 | DONE dir | em 16 16 | 006362 | (6 bytes)   |         .word nt_count, xt_abortq, 0054b0 
5712:324 | DONE dir | em 16 16 |        |             |                 53 63 94 54 b0 54        --  S c . T . T
5712:325 | DONE dir | em 16 16 | 006368 | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
5712:325 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
5712:326 | DONE wsp | em 16 16 |        |             |
5712:327 | DONE lbl | em 16 16 | 00636e |             | nt_abort                             
5712:328 | DONE dir | em 16 16 | 00636e | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
5712:328 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5712:329 | DONE dir | em 16 16 | 006370 | (6 bytes)   |         .word nt_abortq, xt_abort, 0050f6 
5712:329 | DONE dir | em 16 16 |        |             |                 60 63 af 50 f6 50        --  ` c . P . P
5712:330 | DONE dir | em 16 16 | 006376 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
5712:330 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
5712:331 | DONE wsp | em 16 16 |        |             |
5712:332 | DONE lbl | em 16 16 | 00637b |             | nt_parse                             
5712:333 | DONE dir | em 16 16 | 00637b | (2 bytes)   |         .byte 5, 00                  
5712:333 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5712:334 | DONE dir | em 16 16 | 00637d | (6 bytes)   |         .word nt_abort, xt_parse, 005cf8 
5712:334 | DONE dir | em 16 16 |        |             |                 6e 63 c6 5c f8 5c        --  n c . \ . \
5712:335 | DONE dir | em 16 16 | 006383 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
5712:335 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
5712:336 | DONE wsp | em 16 16 |        |             |
5712:337 | DONE lbl | em 16 16 | 006388 |             | nt_quit                              
5712:338 | DONE dir | em 16 16 | 006388 | (2 bytes)   |         .byte 4, 00                  
5712:338 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5712:339 | DONE dir | em 16 16 | 00638a | (6 bytes)   |         .word nt_parse, xt_quit, 0050f6 
5712:339 | DONE dir | em 16 16 |        |             |                 7b 63 b7 50 f6 50        --  { c . P . P
5712:340 | DONE dir | em 16 16 | 006390 | (4 bytes)   |         .byte 71, 75, 69, 74         
5712:340 | DONE dir | em 16 16 |        |             |                 71 75 69 74              --  q u i t
5712:341 | DONE wsp | em 16 16 |        |             |
5712:342 | DONE lbl | em 16 16 | 006394 |             | nt_question                          
5712:343 | DONE dir | em 16 16 | 006394 | (2 bytes)   |         .byte 1, { NC }              
5712:343 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:344 | DONE dir | em 16 16 | 006396 | (6 bytes)   |         .word nt_quit, xt_question, 0052c2 
5712:344 | DONE dir | em 16 16 |        |             |                 88 63 bc 52 c2 52        --  . c . R . R
5712:345 | DONE dir | em 16 16 | 00639c | (1 bytes)   |         .byte 3f                     
5712:345 | DONE dir | em 16 16 |        |             |                 3f                       --  ?
5712:346 | DONE wsp | em 16 16 |        |             |
5712:347 | DONE lbl | em 16 16 | 00639d |             | nt_int-name                          
5712:348 | DONE dir | em 16 16 | 00639d | (2 bytes)   |         .byte 8, { NC }              
5712:348 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5712:349 | DONE dir | em 16 16 | 00639f | (6 bytes)   |         .word nt_question, xt_int-name, 005aab 
5712:349 | DONE dir | em 16 16 |        |             |                 94 63 88 5a ab 5a        --  . c . Z . Z
5712:350 | DONE dir | em 16 16 | 0063a5 | (8 bytes)   |         .byte 69, 6e, 74, 3e, 6e, 61, 6d, 65 
5712:350 | DONE dir | em 16 16 |        |             |                 69 6e 74 3e 6e 61 6d 65  --  i n t > n a m e
5712:350 | DONE dir | em 16 16 |        |             |                                          -- 
5712:351 | DONE wsp | em 16 16 |        |             |
5712:352 | DONE lbl | em 16 16 | 0063ad |             | nt_name-int                          
5712:353 | DONE dir | em 16 16 | 0063ad | (2 bytes)   |         .byte 8, { NC }              
5712:353 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5712:354 | DONE dir | em 16 16 | 0063af | (6 bytes)   |         .word nt_int-name, xt_name-int, 005bb2 
5712:354 | DONE dir | em 16 16 |        |             |                 9d 63 aa 5b b2 5b        --  . c . [ . [
5712:355 | DONE dir | em 16 16 | 0063b5 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
5712:355 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
5712:355 | DONE dir | em 16 16 |        |             |                                          -- 
5712:356 | DONE wsp | em 16 16 |        |             |
5712:357 | DONE lbl | em 16 16 | 0063bd |             | nt_cr                                
5712:358 | DONE dir | em 16 16 | 0063bd | (2 bytes)   |         .byte 2, { NC }              
5712:358 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:359 | DONE dir | em 16 16 | 0063bf | (6 bytes)   |         .word nt_name-int, xt_cr, 005761 
5712:359 | DONE dir | em 16 16 |        |             |                 ad 63 5b 57 61 57        --  . c [ W a W
5712:360 | DONE dir | em 16 16 | 0063c5 | (2 bytes)   |         .byte 63, 72                 
5712:360 | DONE dir | em 16 16 |        |             |                 63 72                    --  c r
5712:361 | DONE wsp | em 16 16 |        |             |
5712:362 | DONE lbl | em 16 16 | 0063c7 |             | nt_fill                              
5712:363 | DONE dir | em 16 16 | 0063c7 | (2 bytes)   |         .byte 4, { NC }              
5712:363 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:364 | DONE dir | em 16 16 | 0063c9 | (6 bytes)   |         .word nt_cr, xt_fill, 005935 
5712:364 | DONE dir | em 16 16 |        |             |                 bd 63 1b 59 35 59        --  . c . Y 5 Y
5712:365 | DONE dir | em 16 16 | 0063cf | (4 bytes)   |         .byte 66, 69, 6c, 6c         
5712:365 | DONE dir | em 16 16 |        |             |                 66 69 6c 6c              --  f i l l
5712:366 | DONE wsp | em 16 16 |        |             |
5712:367 | DONE lbl | em 16 16 | 0063d3 |             | nt_erase                             
5712:368 | DONE dir | em 16 16 | 0063d3 | (2 bytes)   |         .byte 5, { NC }              
5712:368 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:369 | DONE dir | em 16 16 | 0063d5 | (6 bytes)   |         .word nt_fill, xt_erase, 005935 
5712:369 | DONE dir | em 16 16 |        |             |                 c7 63 13 59 35 59        --  . c . Y 5 Y
5712:370 | DONE dir | em 16 16 | 0063db | (5 bytes)   |         .byte 65, 72, 61, 73, 65     
5712:370 | DONE dir | em 16 16 |        |             |                 65 72 61 73 65           --  e r a s e
5712:371 | DONE wsp | em 16 16 |        |             |
5712:372 | DONE lbl | em 16 16 | 0063e0 |             | nt_numbermore                        
5712:373 | DONE dir | em 16 16 | 0063e0 | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
5712:373 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:374 | DONE dir | em 16 16 | 0063e2 | (6 bytes)   |         .word nt_erase, xt_numbermore, 0052b2 
5712:374 | DONE dir | em 16 16 |        |             |                 d3 63 a4 52 b2 52        --  . c . R . R
5712:375 | DONE dir | em 16 16 | 0063e8 | (2 bytes)   |         .byte 23, 3e                 
5712:375 | DONE dir | em 16 16 |        |             |                 23 3e                    --  # >
5712:376 | DONE wsp | em 16 16 |        |             |
5712:377 | DONE lbl | em 16 16 | 0063ea |             | nt_hold                              
5712:378 | DONE dir | em 16 16 | 0063ea | (2 bytes)   |         .byte 4, { NC }              
5712:378 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:379 | DONE dir | em 16 16 | 0063ec | (6 bytes)   |         .word nt_numbermore, xt_hold, 005acc 
5712:379 | DONE dir | em 16 16 |        |             |                 e0 63 bf 5a cc 5a        --  . c . Z . Z
5712:380 | DONE dir | em 16 16 | 0063f2 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
5712:380 | DONE dir | em 16 16 |        |             |                 68 6f 6c 64              --  h o l d
5712:381 | DONE wsp | em 16 16 |        |             |
5712:382 | DONE lbl | em 16 16 | 0063f6 |             | nt_hashs                             
5712:383 | DONE dir | em 16 16 | 0063f6 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
5712:383 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:384 | DONE dir | em 16 16 | 0063f8 | (6 bytes)   |         .word nt_hold, xt_hashs, 0052bb 
5712:384 | DONE dir | em 16 16 |        |             |                 ea 63 b3 52 bb 52        --  . c . R . R
5712:385 | DONE dir | em 16 16 | 0063fe | (2 bytes)   |         .byte 23, 73                 
5712:385 | DONE dir | em 16 16 |        |             |                 23 73                    --  # s
5712:386 | DONE wsp | em 16 16 |        |             |
5712:387 | DONE lbl | em 16 16 | 006400 |             | nt_sign                              
5712:388 | DONE dir | em 16 16 | 006400 | (2 bytes)   |         .byte 4, { NC }              
5712:388 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:389 | DONE dir | em 16 16 | 006402 | (6 bytes)   |         .word nt_hashs, xt_sign, 005e12 
5712:389 | DONE dir | em 16 16 |        |             |                 f6 63 03 5e 12 5e        --  . c . ^ . ^
5712:390 | DONE dir | em 16 16 | 006408 | (4 bytes)   |         .byte 73, 69, 67, 6e         
5712:390 | DONE dir | em 16 16 |        |             |                 73 69 67 6e              --  s i g n
5712:391 | DONE wsp | em 16 16 |        |             |
5712:392 | DONE lbl | em 16 16 | 00640c |             | nt_hash                              
5712:393 | DONE dir | em 16 16 | 00640c | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
5712:393 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:394 | DONE dir | em 16 16 | 00640e | (6 bytes)   |         .word nt_sign, xt_hash, 0052a3 
5712:394 | DONE dir | em 16 16 |        |             |                 00 64 89 52 a3 52        --  . d . R . R
5712:395 | DONE dir | em 16 16 | 006414 | (1 bytes)   |         .byte 23                     
5712:395 | DONE dir | em 16 16 |        |             |                 23                       --  #
5712:396 | DONE wsp | em 16 16 |        |             |
5712:397 | DONE lbl | em 16 16 | 006415 |             | nt_lessnumber                        
5712:398 | DONE dir | em 16 16 | 006415 | (2 bytes)   |         .byte 2, { NC }              
5712:398 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:399 | DONE dir | em 16 16 | 006417 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 00511f 
5712:399 | DONE dir | em 16 16 |        |             |                 0c 64 16 51 1f 51        --   d . Q . Q
5712:400 | DONE dir | em 16 16 | 00641d | (2 bytes)   |         .byte 3c, 23                 
5712:400 | DONE dir | em 16 16 |        |             |                 3c 23                    --  < #
5712:401 | DONE wsp | em 16 16 |        |             |
5712:402 | DONE lbl | em 16 16 | 00641f |             | nt_bl                                
5712:403 | DONE dir | em 16 16 | 00641f | (2 bytes)   |         .byte 2, { NC }              
5712:403 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:404 | DONE dir | em 16 16 | 006421 | (6 bytes)   |         .word nt_lessnumber, xt_bl, 0055d8 
5712:404 | DONE dir | em 16 16 |        |             |                 15 64 d1 55 d8 55        --  . d . U . U
5712:405 | DONE dir | em 16 16 | 006427 | (2 bytes)   |         .byte 62, 6c                 
5712:405 | DONE dir | em 16 16 |        |             |                 62 6c                    --  b l
5712:406 | DONE wsp | em 16 16 |        |             |
5712:407 | DONE lbl | em 16 16 | 006429 |             | nt_spaces                            
5712:408 | DONE dir | em 16 16 | 006429 | (2 bytes)   |         .byte 6, { NC }              
5712:408 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:409 | DONE dir | em 16 16 | 00642b | (6 bytes)   |         .word nt_bl, xt_spaces, 005ef8 
5712:409 | DONE dir | em 16 16 |        |             |                 1f 64 e9 5e f8 5e        --  . d . ^ . ^
5712:410 | DONE dir | em 16 16 | 006431 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
5712:410 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
5712:411 | DONE wsp | em 16 16 |        |             |
5712:412 | DONE lbl | em 16 16 | 006437 |             | nt_space                             
5712:413 | DONE dir | em 16 16 | 006437 | (2 bytes)   |         .byte 5, { NC }              
5712:413 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:414 | DONE dir | em 16 16 | 006439 | (6 bytes)   |         .word nt_spaces, xt_space, 005ee8 
5712:414 | DONE dir | em 16 16 |        |             |                 29 64 e2 5e e8 5e        --  ) d . ^ . ^
5712:415 | DONE dir | em 16 16 | 00643f | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
5712:415 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
5712:416 | DONE wsp | em 16 16 |        |             |
5712:417 | DONE lbl | em 16 16 | 006444 |             | nt_dots                              
5712:418 | DONE dir | em 16 16 | 006444 | (2 bytes)   |         .byte 2, { NC }              
5712:418 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:419 | DONE dir | em 16 16 | 006446 | (6 bytes)   |         .word nt_space, xt_dots, 005241 
5712:419 | DONE dir | em 16 16 |        |             |                 37 64 0a 52 41 52        --  7 d 
 R A R
5712:420 | DONE dir | em 16 16 | 00644c | (2 bytes)   |         .byte 2e, 73                 
5712:420 | DONE dir | em 16 16 |        |             |                 2e 73                    --  . s
5712:421 | DONE wsp | em 16 16 |        |             |
5712:422 | DONE lbl | em 16 16 | 00644e |             | nt_type                              
5712:423 | DONE dir | em 16 16 | 00644e | (2 bytes)   |         .byte 4, { NC }              
5712:423 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:424 | DONE dir | em 16 16 | 006450 | (6 bytes)   |         .word nt_dots, xt_type, 005f4a 
5712:424 | DONE dir | em 16 16 |        |             |                 44 64 2a 5f 4a 5f        --  D d * _ J _
5712:425 | DONE dir | em 16 16 | 006456 | (4 bytes)   |         .byte 74, 79, 70, 65         
5712:425 | DONE dir | em 16 16 |        |             |                 74 79 70 65              --  t y p e
5712:426 | DONE wsp | em 16 16 |        |             |
5712:427 | DONE lbl | em 16 16 | 00645a |             | nt_udot                              
5712:428 | DONE dir | em 16 16 | 00645a | (2 bytes)   |         .byte 2, { NC }              
5712:428 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:429 | DONE dir | em 16 16 | 00645c | (6 bytes)   |         .word nt_type, xt_udot, 005f54 
5712:429 | DONE dir | em 16 16 |        |             |                 4e 64 4b 5f 54 5f        --  N d K _ T _
5712:430 | DONE dir | em 16 16 | 006462 | (2 bytes)   |         .byte 75, 2e                 
5712:430 | DONE dir | em 16 16 |        |             |                 75 2e                    --  u .
5712:431 | DONE wsp | em 16 16 |        |             |
5712:432 | DONE lbl | em 16 16 | 006464 |             | nt_emit                              
5712:433 | DONE dir | em 16 16 | 006464 | (2 bytes)   |         .byte 4, 0                   not native compile
5712:433 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5712:434 | DONE dir | em 16 16 | 006466 | (6 bytes)   |         .word nt_udot, xt_emit, 005913 
5712:434 | DONE dir | em 16 16 |        |             |                 5a 64 0b 59 13 59        --  Z d  Y . Y
5712:435 | DONE dir | em 16 16 | 00646c | (4 bytes)   |         .byte 65, 6d, 69, 74         
5712:435 | DONE dir | em 16 16 |        |             |                 65 6d 69 74              --  e m i t
5712:436 | DONE wsp | em 16 16 |        |             |
5712:437 | DONE lbl | em 16 16 | 006470 |             | nt_dot                               
5712:438 | DONE dir | em 16 16 | 006470 | (2 bytes)   |         .byte 1, { NC }              
5712:438 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:439 | DONE dir | em 16 16 | 006472 | (6 bytes)   |         .word nt_emit, xt_dot, 0051f5 
5712:439 | DONE dir | em 16 16 |        |             |                 64 64 d7 51 f5 51        --  d d . Q . Q
5712:440 | DONE dir | em 16 16 | 006478 | (1 bytes)   |         .byte 2e                     
5712:440 | DONE dir | em 16 16 |        |             |                 2e                       --  .
5712:441 | DONE wsp | em 16 16 |        |             |
5712:442 | DONE lbl | em 16 16 | 006479 |             | nt_pad                               
5712:443 | DONE dir | em 16 16 | 006479 | (2 bytes)   |         .byte 3, { NC }              
5712:443 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:444 | DONE dir | em 16 16 | 00647b | (6 bytes)   |         .word nt_dot, xt_pad, 005c84 
5712:444 | DONE dir | em 16 16 |        |             |                 70 64 79 5c 84 5c        --  p d y \ . \
5712:445 | DONE dir | em 16 16 | 006481 | (3 bytes)   |         .byte 70, 61, 64             
5712:445 | DONE dir | em 16 16 |        |             |                 70 61 64                 --  p a d
5712:446 | DONE wsp | em 16 16 |        |             |
5712:447 | DONE lbl | em 16 16 | 006484 |             | nt_base                              
5712:448 | DONE dir | em 16 16 | 006484 | (2 bytes)   |         .byte 4, { NC }              
5712:448 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:449 | DONE dir | em 16 16 | 006486 | (6 bytes)   |         .word nt_pad, xt_base, 0055c2 
5712:449 | DONE dir | em 16 16 |        |             |                 79 64 bb 55 c2 55        --  y d . U . U
5712:450 | DONE dir | em 16 16 | 00648c | (4 bytes)   |         .byte 62, 61, 73, 65         
5712:450 | DONE dir | em 16 16 |        |             |                 62 61 73 65              --  b a s e
5712:451 | DONE wsp | em 16 16 |        |             |
5712:452 | DONE lbl | em 16 16 | 006490 |             | nt_nc-limit                          
5712:453 | DONE dir | em 16 16 | 006490 | (2 bytes)   |         .byte 8, { NC }              
5712:453 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5712:454 | DONE dir | em 16 16 | 006492 | (6 bytes)   |         .word nt_base, xt_nc-limit, 005bd4 
5712:454 | DONE dir | em 16 16 |        |             |                 84 64 cd 5b d4 5b        --  . d . [ . [
5712:455 | DONE dir | em 16 16 | 006498 | (8 bytes)   |         .byte 6e, 63, 2d, 6c, 69, 6d, 69, 74 
5712:455 | DONE dir | em 16 16 |        |             |                 6e 63 2d 6c 69 6d 69 74  --  n c - l i m i t
5712:455 | DONE dir | em 16 16 |        |             |                                          -- 
5712:456 | DONE wsp | em 16 16 |        |             |
5712:457 | DONE lbl | em 16 16 | 0064a0 |             | nt_input                             
5712:458 | DONE dir | em 16 16 | 0064a0 | (2 bytes)   |         .byte 5, { NC }              
5712:458 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:459 | DONE dir | em 16 16 | 0064a2 | (6 bytes)   |         .word nt_nc-limit, xt_input, 005a87 
5712:459 | DONE dir | em 16 16 |        |             |                 90 64 80 5a 87 5a        --  . d . Z . Z
5712:460 | DONE dir | em 16 16 | 0064a8 | (5 bytes)   |         .byte 69, 6e, 70, 75, 74     
5712:460 | DONE dir | em 16 16 |        |             |                 69 6e 70 75 74           --  i n p u t
5712:461 | DONE wsp | em 16 16 |        |             |
5712:462 | DONE lbl | em 16 16 | 0064ad |             | nt_output                            
5712:463 | DONE dir | em 16 16 | 0064ad | (2 bytes)   |         .byte 6, { NC }              
5712:463 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:464 | DONE dir | em 16 16 | 0064af | (6 bytes)   |         .word nt_input, xt_output, 005c71 
5712:464 | DONE dir | em 16 16 |        |             |                 a0 64 6a 5c 71 5c        --  . d j \ q \
5712:465 | DONE dir | em 16 16 | 0064b5 | (6 bytes)   |         .byte 6f, 75, 74, 70, 75, 74 
5712:465 | DONE dir | em 16 16 |        |             |                 6f 75 74 70 75 74        --  o u t p u t
5712:466 | DONE wsp | em 16 16 |        |             |
5712:467 | DONE lbl | em 16 16 | 0064bb |             | nt_evaluate                          
5712:468 | DONE dir | em 16 16 | 0064bb | (2 bytes)   |         .byte 8, { NC }              
5712:468 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5712:469 | DONE dir | em 16 16 | 0064bd | (6 bytes)   |         .word nt_output, xt_evaluate, 005964 
5712:469 | DONE dir | em 16 16 |        |             |                 ad 64 36 59 64 59        --  . d 6 Y d Y
5712:470 | DONE dir | em 16 16 | 0064c3 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
5712:470 | DONE dir | em 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
5712:470 | DONE dir | em 16 16 |        |             |                                          -- 
5712:471 | DONE wsp | em 16 16 |        |             |
5712:472 | DONE lbl | em 16 16 | 0064cb |             | nt_cells                             
5712:473 | DONE dir | em 16 16 | 0064cb | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
5712:473 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:474 | DONE dir | em 16 16 | 0064cd | (6 bytes)   |         .word nt_evaluate, xt_two-star, 005404 
5712:474 | DONE dir | em 16 16 |        |             |                 bb 64 01 54 04 54        --  . d . T . T
5712:475 | DONE dir | em 16 16 | 0064d3 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
5712:475 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
5712:476 | DONE wsp | em 16 16 |        |             |
5712:477 | DONE lbl | em 16 16 | 0064d8 |             | nt_dotquote                          
5712:478 | DONE dir | em 16 16 | 0064d8 | (2 bytes)   |         .byte 2, { CO + IM }         
5712:478 | DONE dir | em 16 16 |        |             |                 02 06                    --  . .
5712:479 | DONE dir | em 16 16 | 0064da | (6 bytes)   |         .word nt_cells, xt_dotquote, 005209 
5712:479 | DONE dir | em 16 16 |        |             |                 cb 64 f6 51 09 52        --  . d . Q 	 R
5712:480 | DONE dir | em 16 16 | 0064e0 | (2 bytes)   |         .byte 2e, &34                
5712:480 | DONE dir | em 16 16 |        |             |                 2e 22                    --  . "
5712:481 | DONE wsp | em 16 16 |        |             |
5712:482 | DONE lbl | em 16 16 | 0064e2 |             | nt_squote                            
5712:483 | DONE dir | em 16 16 | 0064e2 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
5712:483 | DONE dir | em 16 16 |        |             |                 02 03                    --  . .
5712:484 | DONE dir | em 16 16 | 0064e4 | (6 bytes)   |         .word nt_dotquote, xt_squote, 005df2 
5712:484 | DONE dir | em 16 16 |        |             |                 d8 64 bd 5d f2 5d        --  . d . ] . ]
5712:485 | DONE dir | em 16 16 | 0064ea | (2 bytes)   |         .byte 73, &34                
5712:485 | DONE dir | em 16 16 |        |             |                 73 22                    --  s "
5712:486 | DONE wsp | em 16 16 |        |             |
5712:487 | DONE lbl | em 16 16 | 0064ec |             | nt_sliteral                          
5712:488 | DONE dir | em 16 16 | 0064ec | (2 bytes)   |         .byte 8, { IM + CO }         
5712:488 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5712:489 | DONE dir | em 16 16 | 0064ee | (6 bytes)   |         .word nt_squote, xt_sliteral, 005e5d 
5712:489 | DONE dir | em 16 16 |        |             |                 e2 64 13 5e 5d 5e        --  . d . ^ ] ^
5712:490 | DONE dir | em 16 16 | 0064f4 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
5712:490 | DONE dir | em 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
5712:490 | DONE dir | em 16 16 |        |             |                                          -- 
5712:491 | DONE wsp | em 16 16 |        |             |
5712:492 | DONE lbl | em 16 16 | 0064fc |             | nt_brackettick                       
5712:493 | DONE dir | em 16 16 | 0064fc | (2 bytes)   |         .byte 3, { IM + CO }         
5712:493 | DONE dir | em 16 16 |        |             |                 03 06                    --  . .
5712:494 | DONE dir | em 16 16 | 0064fe | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 00531b 
5712:494 | DONE dir | em 16 16 |        |             |                 ec 64 15 53 1b 53        --  . d . S . S
5712:495 | DONE dir | em 16 16 | 006504 | (3 bytes)   |         .byte 5b, 27, 5d             
5712:495 | DONE dir | em 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
5712:496 | DONE wsp | em 16 16 |        |             |
5712:497 | DONE lbl | em 16 16 | 006507 |             | nt_bracketchar                       
5712:498 | DONE dir | em 16 16 | 006507 | (2 bytes)   |         .byte 6, { IM + CO }         
5712:498 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5712:499 | DONE dir | em 16 16 | 006509 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 00532b 
5712:499 | DONE dir | em 16 16 |        |             |                 fc 64 25 53 2b 53        --  . d % S + S
5712:500 | DONE dir | em 16 16 | 00650f | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
5712:500 | DONE dir | em 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
5712:501 | DONE wsp | em 16 16 |        |             |
5712:502 | DONE lbl | em 16 16 | 006515 |             | nt_literal                           
5712:503 | DONE dir | em 16 16 | 006515 | (2 bytes)   |         .byte 7, { IM + CO }         
5712:503 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5712:504 | DONE dir | em 16 16 | 006517 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 005b04 
5712:504 | DONE dir | em 16 16 |        |             |                 07 65 f3 5a 04 5b        --  . e . Z . [
5712:505 | DONE dir | em 16 16 | 00651d | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
5712:505 | DONE dir | em 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
5712:506 | DONE wsp | em 16 16 |        |             |
5712:507 | DONE lbl | em 16 16 | 006524 |             | nt_native-compile                    
5712:508 | DONE dir | em 16 16 | 006524 | (2 bytes)   |         .byte 0e, { NC }             
5712:508 | DONE dir | em 16 16 |        |             |                 0e 01                    --  . .
5712:509 | DONE dir | em 16 16 | 006526 | (6 bytes)   |         .word nt_literal, xt_native-compile, 005bcc 
5712:509 | DONE dir | em 16 16 |        |             |                 15 65 c4 5b cc 5b        --  . e . [ . [
5712:510 | DONE dir | em 16 16 | 00652c | (14 bytes)  |         .byte 6e, 61, 74, 69, 76, 65, 2d, 63, 6f, 6d, 70, 69, 6c, 65 
5712:510 | DONE dir | em 16 16 |        |             |                 6e 61 74 69 76 65 2d 63  --  n a t i v e - c
5712:510 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65        --  o m p i l e
5712:511 | DONE wsp | em 16 16 |        |             |
5712:512 | DONE lbl | em 16 16 | 00653a |             | nt_compile-only                      
5712:513 | DONE dir | em 16 16 | 00653a | (2 bytes)   |         .byte 0c, { NC }             
5712:513 | DONE dir | em 16 16 |        |             |                 0c 01                    --   .
5712:514 | DONE dir | em 16 16 | 00653c | (6 bytes)   |         .word nt_native-compile, xt_compile-only, 005689 
5712:514 | DONE dir | em 16 16 |        |             |                 24 65 81 56 89 56        --  $ e . V . V
5712:515 | DONE dir | em 16 16 | 006542 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
5712:515 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5712:515 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
5712:516 | DONE wsp | em 16 16 |        |             |
5712:517 | DONE lbl | em 16 16 | 00654e |             | nt_immediate                         
5712:518 | DONE dir | em 16 16 | 00654e | (2 bytes)   |         .byte 9, { NC }              
5712:518 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5712:519 | DONE dir | em 16 16 | 006550 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 005a7f 
5712:519 | DONE dir | em 16 16 |        |             |                 3a 65 77 5a 7f 5a        --  : e w Z . Z
5712:520 | DONE dir | em 16 16 | 006556 | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
5712:520 | DONE dir | em 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
5712:520 | DONE dir | em 16 16 |        |             |                 65                       --  e
5712:521 | DONE wsp | em 16 16 |        |             |
5712:522 | DONE lbl | em 16 16 | 00655f |             | nt_postpone                          
5712:523 | DONE dir | em 16 16 | 00655f | (2 bytes)   |         .byte 8, { IM + CO }         
5712:523 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5712:524 | DONE dir | em 16 16 | 006561 | (6 bytes)   |         .word nt_immediate, xt_postpone, 005d4a 
5712:524 | DONE dir | em 16 16 |        |             |                 4e 65 17 5d 4a 5d        --  N e . ] J ]
5712:525 | DONE dir | em 16 16 | 006567 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
5712:525 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5712:525 | DONE dir | em 16 16 |        |             |                                          -- 
5712:526 | DONE wsp | em 16 16 |        |             |
5712:527 | DONE lbl | em 16 16 | 00656f |             | nt_rightbracket                      
5712:528 | DONE dir | em 16 16 | 00656f | (2 bytes)   |         .byte 1, { NC }              
5712:528 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:529 | DONE dir | em 16 16 | 006571 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 005324 
5712:529 | DONE dir | em 16 16 |        |             |                 5f 65 1f 53 24 53        --  _ e . S $ S
5712:530 | DONE dir | em 16 16 | 006577 | (1 bytes)   |         .byte 5d                     
5712:530 | DONE dir | em 16 16 |        |             |                 5d                       --  ]
5712:531 | DONE wsp | em 16 16 |        |             |
5712:532 | DONE lbl | em 16 16 | 006578 |             | nt_leftbracket                       
5712:533 | DONE dir | em 16 16 | 006578 | (2 bytes)   |         .byte 1, { IM + CO }         
5712:533 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5712:534 | DONE dir | em 16 16 | 00657a | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 00531e 
5712:534 | DONE dir | em 16 16 |        |             |                 6f 65 1c 53 1e 53        --  o e . S . S
5712:535 | DONE dir | em 16 16 | 006580 | (1 bytes)   |         .byte 5b                     
5712:535 | DONE dir | em 16 16 |        |             |                 5b                       --  [
5712:536 | DONE wsp | em 16 16 |        |             |
5712:537 | DONE lbl | em 16 16 | 006581 |             | nt_latestnt                          
5712:538 | DONE dir | em 16 16 | 006581 | (2 bytes)   |         .byte 8, { NC }              
5712:538 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5712:539 | DONE dir | em 16 16 | 006583 | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 005adf 
5712:539 | DONE dir | em 16 16 |        |             |                 78 65 d8 5a df 5a        --  x e . Z . Z
5712:540 | DONE dir | em 16 16 | 006589 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
5712:540 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
5712:540 | DONE dir | em 16 16 |        |             |                                          -- 
5712:541 | DONE wsp | em 16 16 |        |             |
5712:542 | DONE lbl | em 16 16 | 006591 |             | nt_latestxt                          
5712:543 | DONE dir | em 16 16 | 006591 | (2 bytes)   |         .byte 8, { NC }              
5712:543 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5712:544 | DONE dir | em 16 16 | 006593 | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 005aef 
5712:544 | DONE dir | em 16 16 |        |             |                 81 65 e0 5a ef 5a        --  . e . Z . Z
5712:545 | DONE dir | em 16 16 | 006599 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
5712:545 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
5712:545 | DONE dir | em 16 16 |        |             |                                          -- 
5712:546 | DONE wsp | em 16 16 |        |             |
5712:547 | DONE lbl | em 16 16 | 0065a1 |             | nt_dtrailing                         
5712:548 | DONE dir | em 16 16 | 0065a1 | (2 bytes)   |         .byte 9, { NC }              
5712:548 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5712:549 | DONE dir | em 16 16 | 0065a3 | (6 bytes)   |         .word nt_latestxt, xt_dtrailing, 00538b 
5712:549 | DONE dir | em 16 16 |        |             |                 91 65 75 53 8b 53        --  . e u S . S
5712:550 | DONE dir | em 16 16 | 0065a9 | (9 bytes)   |         .byte 2d, 74, 72, 61, 69, 6c, 69, 6e, 67 
5712:550 | DONE dir | em 16 16 |        |             |                 2d 74 72 61 69 6c 69 6e  --  - t r a i l i n
5712:550 | DONE dir | em 16 16 |        |             |                 67                       --  g
5712:551 | DONE wsp | em 16 16 |        |             |
5712:552 | DONE lbl | em 16 16 | 0065b2 |             | nt_slashstring                       
5712:553 | DONE dir | em 16 16 | 0065b2 | (2 bytes)   |         .byte 7, { NC }              
5712:553 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5712:554 | DONE dir | em 16 16 | 0065b4 | (6 bytes)   |         .word nt_dtrailing, xt_slashstring, 0051d6 
5712:554 | DONE dir | em 16 16 |        |             |                 a1 65 c5 51 d6 51        --  . e . Q . Q
5712:555 | DONE dir | em 16 16 | 0065ba | (7 bytes)   |         .byte 2f, 73, 74, 72, 69, 6e, 67 
5712:555 | DONE dir | em 16 16 |        |             |                 2f 73 74 72 69 6e 67     --  / s t r i n g
5712:556 | DONE wsp | em 16 16 |        |             |
5712:557 | DONE lbl | em 16 16 | 0065c1 |             | nt_zbranch                           
5712:558 | DONE dir | em 16 16 | 0065c1 | (2 bytes)   |         .byte 7, { IM + CO }         
5712:558 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5712:559 | DONE dir | em 16 16 | 0065c3 | (6 bytes)   |         .word nt_slashstring, xt_zbranch, 0053d5 
5712:559 | DONE dir | em 16 16 |        |             |                 b2 65 cf 53 d5 53        --  . e . S . S
5712:560 | DONE dir | em 16 16 | 0065c9 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
5712:560 | DONE dir | em 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
5712:561 | DONE wsp | em 16 16 |        |             |
5712:562 | DONE lbl | em 16 16 | 0065d0 |             | nt_branch                            
5712:563 | DONE dir | em 16 16 | 0065d0 | (2 bytes)   |         .byte 6, { IM + CO }         
5712:563 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5712:564 | DONE dir | em 16 16 | 0065d2 | (6 bytes)   |         .word nt_zbranch, xt_branch, 0055e9 
5712:564 | DONE dir | em 16 16 |        |             |                 c1 65 e3 55 e9 55        --  . e . U . U
5712:565 | DONE dir | em 16 16 | 0065d8 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
5712:565 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
5712:566 | DONE wsp | em 16 16 |        |             |
5712:567 | DONE lbl | em 16 16 | 0065de |             | nt_again                             
5712:568 | DONE dir | em 16 16 | 0065de | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5712:568 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5712:569 | DONE dir | em 16 16 | 0065e0 | (6 bytes)   |         .word nt_branch, xt_again, 00555e 
5712:569 | DONE dir | em 16 16 |        |             |                 d0 65 49 55 5e 55        --  . e I U ^ U
5712:570 | DONE dir | em 16 16 | 0065e6 | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
5712:570 | DONE dir | em 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
5712:571 | DONE wsp | em 16 16 |        |             |
5712:572 | DONE lbl | em 16 16 | 0065eb |             | nt_begin                             
5712:573 | DONE dir | em 16 16 | 0065eb | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5712:573 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5712:574 | DONE dir | em 16 16 | 0065ed | (6 bytes)   |         .word nt_again, xt_begin, 0055d0 
5712:574 | DONE dir | em 16 16 |        |             |                 de 65 ca 55 d0 55        --  . e . U . U
5712:575 | DONE dir | em 16 16 | 0065f3 | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
5712:575 | DONE dir | em 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
5712:576 | DONE wsp | em 16 16 |        |             |
5712:577 | DONE lbl | em 16 16 | 0065f8 |             | nt_compilecomma                      
5712:578 | DONE dir | em 16 16 | 0065f8 | (2 bytes)   |         .byte 08, { CO }             
5712:578 | DONE dir | em 16 16 |        |             |                 08 04                    --  . .
5712:579 | DONE dir | em 16 16 | 0065fa | (6 bytes)   |         .word nt_begin, xt_compilecomma, 00571d 
5712:579 | DONE dir | em 16 16 |        |             |                 eb 65 8a 56 1d 57        --  . e . V . W
5712:580 | DONE dir | em 16 16 | 006600 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
5712:580 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
5712:580 | DONE dir | em 16 16 |        |             |                                          -- 
5712:581 | DONE wsp | em 16 16 |        |             |
5712:582 | DONE lbl | em 16 16 | 006608 |             | nt_semicolon                         
5712:583 | DONE dir | em 16 16 | 006608 | (2 bytes)   |         .byte 1, { CO + IM }         
5712:583 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5712:584 | DONE dir | em 16 16 | 00660a | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 005288 
5712:584 | DONE dir | em 16 16 |        |             |                 f8 65 70 52 88 52        --  . e p R . R
5712:585 | DONE dir | em 16 16 | 006610 | (1 bytes)   |         .byte 3b                     
5712:585 | DONE dir | em 16 16 |        |             |                 3b                       --  ;
5712:586 | DONE wsp | em 16 16 |        |             |
5712:587 | DONE lbl | em 16 16 | 006611 |             | nt_colon                             
5712:588 | DONE dir | em 16 16 | 006611 | (2 bytes)   |         .byte 1, 0                   
5712:588 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5712:589 | DONE dir | em 16 16 | 006613 | (6 bytes)   |         .word nt_semicolon, xt_colon, 00526f 
5712:589 | DONE dir | em 16 16 |        |             |                 08 66 4e 52 6f 52        --  . f N R o R
5712:590 | DONE dir | em 16 16 | 006619 | (1 bytes)   |         .byte 3a                     
5712:590 | DONE dir | em 16 16 |        |             |                 3a                       --  :
5712:591 | DONE wsp | em 16 16 |        |             |
5712:592 | DONE lbl | em 16 16 | 00661a |             | nt_allot                             
5712:593 | DONE dir | em 16 16 | 00661a | (2 bytes)   |         .byte 5, { NC }              
5712:593 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:594 | DONE dir | em 16 16 | 00661c | (6 bytes)   |         .word nt_colon, xt_allot, 00558b 
5712:594 | DONE dir | em 16 16 |        |             |                 11 66 63 55 8b 55        --  . f c U . U
5712:595 | DONE dir | em 16 16 | 006622 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
5712:595 | DONE dir | em 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
5712:596 | DONE wsp | em 16 16 |        |             |
5712:597 | DONE lbl | em 16 16 | 006627 |             | nt_defer                             
5712:598 | DONE dir | em 16 16 | 006627 | (2 bytes)   |         .byte 5, { NC }              
5712:598 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:599 | DONE dir | em 16 16 | 006629 | (6 bytes)   |         .word nt_allot, xt_defer, 0057ec 
5712:599 | DONE dir | em 16 16 |        |             |                 1a 66 d2 57 ec 57        --  . f . W . W
5712:600 | DONE dir | em 16 16 | 00662f | (5 bytes)   |         .byte 64, 65, 66, 65, 72     
5712:600 | DONE dir | em 16 16 |        |             |                 64 65 66 65 72           --  d e f e r
5712:601 | DONE wsp | em 16 16 |        |             |
5712:602 | DONE lbl | em 16 16 | 006634 |             | nt_tobody                            
5712:603 | DONE dir | em 16 16 | 006634 | (2 bytes)   |         .byte 5, { NC }              
5712:603 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:604 | DONE dir | em 16 16 | 006636 | (6 bytes)   |         .word nt_defer, xt_tobody, 005157 
5712:604 | DONE dir | em 16 16 |        |             |                 27 66 34 51 57 51        --  ' f 4 Q W Q
5712:605 | DONE dir | em 16 16 | 00663c | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
5712:605 | DONE dir | em 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
5712:606 | DONE wsp | em 16 16 |        |             |
5712:607 | DONE lbl | em 16 16 | 006641 |             | nt_does                              
5712:608 | DONE dir | em 16 16 | 006641 | (2 bytes)   |         .byte 5, { IM + CO }         
5712:608 | DONE dir | em 16 16 |        |             |                 05 06                    --  . .
5712:609 | DONE dir | em 16 16 | 006643 | (6 bytes)   |         .word nt_tobody, xt_does, 0058cc 
5712:609 | DONE dir | em 16 16 |        |             |                 34 66 c0 58 cc 58        --  4 f . X . X
5712:610 | DONE dir | em 16 16 | 006649 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
5712:610 | DONE dir | em 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
5712:611 | DONE wsp | em 16 16 |        |             |
5712:612 | DONE lbl | em 16 16 | 00664e |             | nt_create                            
5712:613 | DONE dir | em 16 16 | 00664e | (2 bytes)   |         .byte 6, 0                   
5712:613 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5712:614 | DONE dir | em 16 16 | 006650 | (6 bytes)   |         .word nt_does, xt_create, 0057d1 
5712:614 | DONE dir | em 16 16 |        |             |                 41 66 62 57 d1 57        --  A f b W . W
5712:615 | DONE dir | em 16 16 | 006656 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
5712:615 | DONE dir | em 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
5712:616 | DONE wsp | em 16 16 |        |             |
5712:617 | DONE lbl | em 16 16 | 00665c |             | nt_name-string                       
5712:618 | DONE dir | em 16 16 | 00665c | (2 bytes)   |         .byte 0b, { NC }             
5712:618 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5712:619 | DONE dir | em 16 16 | 00665e | (6 bytes)   |         .word nt_create, xt_name-string, 005bc3 
5712:619 | DONE dir | em 16 16 |        |             |                 4e 66 b3 5b c3 5b        --  N f . [ . [
5712:620 | DONE dir | em 16 16 | 006664 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
5712:620 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
5712:620 | DONE dir | em 16 16 |        |             |                 69 6e 67                 --  i n g
5712:621 | DONE wsp | em 16 16 |        |             |
5712:622 | DONE lbl | em 16 16 | 00666f |             | nt_2dup                              
5712:623 | DONE dir | em 16 16 | 00666f | (2 bytes)   |         .byte 4, { NC }              
5712:623 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:624 | DONE dir | em 16 16 | 006671 | (6 bytes)   |         .word nt_name-string, xt_2dup, 005427 
5712:624 | DONE dir | em 16 16 |        |             |                 5c 66 1d 54 27 54        --  \ f . T ' T
5712:625 | DONE dir | em 16 16 | 006677 | (4 bytes)   |         .byte 32, 64, 75, 70         
5712:625 | DONE dir | em 16 16 |        |             |                 32 64 75 70              --  2 d u p
5712:626 | DONE wsp | em 16 16 |        |             |
5712:627 | DONE lbl | em 16 16 | 00667b |             | nt_abs                               
5712:628 | DONE dir | em 16 16 | 00667b | (2 bytes)   |         .byte 3, { NC }              
5712:628 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:629 | DONE dir | em 16 16 | 00667d | (6 bytes)   |         .word nt_2dup, xt_abs, 0054b9 
5712:629 | DONE dir | em 16 16 |        |             |                 6f 66 b1 54 b9 54        --  o f . T . T
5712:630 | DONE dir | em 16 16 | 006683 | (3 bytes)   |         .byte 61, 62, 73             
5712:630 | DONE dir | em 16 16 |        |             |                 61 62 73                 --  a b s
5712:631 | DONE wsp | em 16 16 |        |             |
5712:632 | DONE lbl | em 16 16 | 006686 |             | nt_state                             
5712:633 | DONE dir | em 16 16 | 006686 | (2 bytes)   |         .byte 5, { NC }              
5712:633 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:634 | DONE dir | em 16 16 | 006688 | (6 bytes)   |         .word nt_abs, xt_state, 005f08 
5712:634 | DONE dir | em 16 16 |        |             |                 7b 66 01 5f 08 5f        --  { f . _ . _
5712:635 | DONE dir | em 16 16 | 00668e | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
5712:635 | DONE dir | em 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
5712:636 | DONE wsp | em 16 16 |        |             |
5712:637 | DONE lbl | em 16 16 | 006693 |             | nt_to-in                             
5712:638 | DONE dir | em 16 16 | 006693 | (2 bytes)   |         .byte 3, { NC }              
5712:638 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:639 | DONE dir | em 16 16 | 006695 | (6 bytes)   |         .word nt_state, xt_to-in, 00515f 
5712:639 | DONE dir | em 16 16 |        |             |                 86 66 58 51 5f 51        --  . f X Q _ Q
5712:640 | DONE dir | em 16 16 | 00669b | (3 bytes)   |         .byte 3e, 69, 6e             
5712:640 | DONE dir | em 16 16 |        |             |                 3e 69 6e                 --  > i n
5712:641 | DONE wsp | em 16 16 |        |             |
5712:642 | DONE lbl | em 16 16 | 00669e |             | nt_source                            
5712:643 | DONE dir | em 16 16 | 00669e | (2 bytes)   |         .byte 6, { NC }              
5712:643 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:644 | DONE dir | em 16 16 | 0066a0 | (6 bytes)   |         .word nt_to-in, xt_source, 005eda 
5712:644 | DONE dir | em 16 16 |        |             |                 93 66 ce 5e da 5e        --  . f . ^ . ^
5712:645 | DONE dir | em 16 16 | 0066a6 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
5712:645 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
5712:646 | DONE wsp | em 16 16 |        |             |
5712:647 | DONE lbl | em 16 16 | 0066ac |             | nt_depth                             
5712:648 | DONE dir | em 16 16 | 0066ac | (2 bytes)   |         .byte 5, { NC }              
5712:648 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:649 | DONE dir | em 16 16 | 0066ae | (6 bytes)   |         .word nt_source, xt_depth, 005870 
5712:649 | DONE dir | em 16 16 |        |             |                 9e 66 62 58 70 58        --  . f b X p X
5712:650 | DONE dir | em 16 16 | 0066b4 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
5712:650 | DONE dir | em 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
5712:651 | DONE wsp | em 16 16 |        |             |
5712:652 | DONE lbl | em 16 16 | 0066b9 |             | nt_to                                
5712:653 | DONE dir | em 16 16 | 0066b9 | (2 bytes)   |         .byte 2, { NC }              
5712:653 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:654 | DONE dir | em 16 16 | 0066bb | (6 bytes)   |         .word nt_depth, xt_to, 005f18 
5712:654 | DONE dir | em 16 16 |        |             |                 ac 66 0f 5f 18 5f        --  . f . _ . _
5712:655 | DONE dir | em 16 16 | 0066c1 | (2 bytes)   |         .byte 74, 6f                 
5712:655 | DONE dir | em 16 16 |        |             |                 74 6f                    --  t o
5712:656 | DONE wsp | em 16 16 |        |             |
5712:657 | DONE lbl | em 16 16 | 0066c3 |             | nt_value                             
5712:658 | DONE dir | em 16 16 | 0066c3 | (2 bytes)   |         .byte 5, { NC }              uses routines of CONSTANT
5712:658 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:659 | DONE dir | em 16 16 | 0066c5 | (6 bytes)   |         .word nt_to, xt_constant, 00574c 
5712:659 | DONE dir | em 16 16 |        |             |                 b9 66 1e 57 4c 57        --  . f . W L W
5712:660 | DONE dir | em 16 16 | 0066cb | (5 bytes)   |         .byte 76, 61, 6c, 75, 65     
5712:660 | DONE dir | em 16 16 |        |             |                 76 61 6c 75 65           --  v a l u e
5712:661 | DONE wsp | em 16 16 |        |             |
5712:662 | DONE lbl | em 16 16 | 0066d0 |             | nt_constant                          
5712:663 | DONE dir | em 16 16 | 0066d0 | (2 bytes)   |         .byte 8, { NC }              
5712:663 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5712:664 | DONE dir | em 16 16 | 0066d2 | (6 bytes)   |         .word nt_value, xt_constant, 00574c 
5712:664 | DONE dir | em 16 16 |        |             |                 c3 66 1e 57 4c 57        --  . f . W L W
5712:665 | DONE dir | em 16 16 | 0066d8 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
5712:665 | DONE dir | em 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
5712:665 | DONE dir | em 16 16 |        |             |                                          -- 
5712:666 | DONE wsp | em 16 16 |        |             |
5712:667 | DONE lbl | em 16 16 | 0066e0 |             | nt_variable                          
5712:668 | DONE dir | em 16 16 | 0066e0 | (2 bytes)   |         .byte 8, { NC }              
5712:668 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5712:669 | DONE dir | em 16 16 | 0066e2 | (6 bytes)   |         .word nt_constant, xt_variable, 006040 
5712:669 | DONE dir | em 16 16 |        |             |                 d0 66 31 60 40 60        --  . f 1 ` @ `
5712:670 | DONE dir | em 16 16 | 0066e8 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
5712:670 | DONE dir | em 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
5712:670 | DONE dir | em 16 16 |        |             |                                          -- 
5712:671 | DONE wsp | em 16 16 |        |             |
5712:672 | DONE lbl | em 16 16 | 0066f0 |             | nt_tick                              
5712:673 | DONE dir | em 16 16 | 0066f0 | (2 bytes)   |         .byte 1, { NC }              
5712:673 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:674 | DONE dir | em 16 16 | 0066f2 | (6 bytes)   |         .word nt_variable, xt_tick, 005493 
5712:674 | DONE dir | em 16 16 |        |             |                 e0 66 78 54 93 54        --  . f x T . T
5712:675 | DONE dir | em 16 16 | 0066f8 | (1 bytes)   |         .byte 27                     hex for "'"
5712:675 | DONE dir | em 16 16 |        |             |                 27                       --  '
5712:676 | DONE wsp | em 16 16 |        |             |
5712:677 | DONE lbl | em 16 16 | 0066f9 |             | nt_move                              
5712:678 | DONE dir | em 16 16 | 0066f9 | (2 bytes)   |         .byte 4, { NC }              
5712:678 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:679 | DONE dir | em 16 16 | 0066fb | (6 bytes)   |         .word nt_tick, xt_move, 005ba9 
5712:679 | DONE dir | em 16 16 |        |             |                 f0 66 96 5b a9 5b        --  . f . [ . [
5712:680 | DONE dir | em 16 16 | 006701 | (4 bytes)   |         .byte 6d, 6f, 76, 65         
5712:680 | DONE dir | em 16 16 |        |             |                 6d 6f 76 65              --  m o v e
5712:681 | DONE wsp | em 16 16 |        |             |
5712:682 | DONE lbl | em 16 16 | 006705 |             | nt_min                               
5712:683 | DONE dir | em 16 16 | 006705 | (2 bytes)   |         .byte 3, { NC }              
5712:683 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:684 | DONE dir | em 16 16 | 006707 | (6 bytes)   |         .word nt_move, xt_min, 005b95 
5712:684 | DONE dir | em 16 16 |        |             |                 f9 66 83 5b 95 5b        --  . f . [ . [
5712:685 | DONE dir | em 16 16 | 00670d | (3 bytes)   |         .byte 6d, 69, 6e             
5712:685 | DONE dir | em 16 16 |        |             |                 6d 69 6e                 --  m i n
5712:686 | DONE wsp | em 16 16 |        |             |
5712:687 | DONE lbl | em 16 16 | 006710 |             | nt_max                               
5712:688 | DONE dir | em 16 16 | 006710 | (2 bytes)   |         .byte 3, { NC }              
5712:688 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:689 | DONE dir | em 16 16 | 006712 | (6 bytes)   |         .word nt_min, xt_max, 005b82 
5712:689 | DONE dir | em 16 16 |        |             |                 05 67 70 5b 82 5b        --  . g p [ . [
5712:690 | DONE dir | em 16 16 | 006718 | (3 bytes)   |         .byte 6d, 61, 78             
5712:690 | DONE dir | em 16 16 |        |             |                 6d 61 78                 --  m a x
5712:691 | DONE wsp | em 16 16 |        |             |
5712:692 | DONE lbl | em 16 16 | 00671b |             | nt_negate                            
5712:693 | DONE dir | em 16 16 | 00671b | (2 bytes)   |         .byte 6, { NC }              
5712:693 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:694 | DONE dir | em 16 16 | 00671d | (6 bytes)   |         .word nt_max, xt_negate, 005bdb 
5712:694 | DONE dir | em 16 16 |        |             |                 10 67 d5 5b db 5b        --  . g . [ . [
5712:695 | DONE dir | em 16 16 | 006723 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
5712:695 | DONE dir | em 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
5712:696 | DONE wsp | em 16 16 |        |             |
5712:697 | DONE lbl | em 16 16 | 006729 |             | nt_invert                            
5712:698 | DONE dir | em 16 16 | 006729 | (2 bytes)   |         .byte 6, { NC }              
5712:698 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:699 | DONE dir | em 16 16 | 00672b | (6 bytes)   |         .word nt_negate, xt_invert, 005ab1 
5712:699 | DONE dir | em 16 16 |        |             |                 1b 67 ac 5a b1 5a        --  . g . Z . Z
5712:700 | DONE dir | em 16 16 | 006731 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
5712:700 | DONE dir | em 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
5712:701 | DONE wsp | em 16 16 |        |             |
5712:702 | DONE lbl | em 16 16 | 006737 |             | nt_char                              
5712:703 | DONE dir | em 16 16 | 006737 | (2 bytes)   |         .byte 4, { NC }              
5712:703 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:704 | DONE dir | em 16 16 | 006739 | (6 bytes)   |         .word nt_invert, xt_char, 005642 
5712:704 | DONE dir | em 16 16 |        |             |                 29 67 2b 56 42 56        --  ) g + V B V
5712:705 | DONE dir | em 16 16 | 00673f | (4 bytes)   |         .byte 63, 68, 61, 72         
5712:705 | DONE dir | em 16 16 |        |             |                 63 68 61 72              --  c h a r
5712:706 | DONE wsp | em 16 16 |        |             |
5712:707 | DONE lbl | em 16 16 | 006743 |             | nt_rshift                            
5712:708 | DONE dir | em 16 16 | 006743 | (2 bytes)   |         .byte 6, { NC }              
5712:708 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:709 | DONE dir | em 16 16 | 006745 | (6 bytes)   |         .word nt_char, xt_rshift, 005dbc 
5712:709 | DONE dir | em 16 16 |        |             |                 37 67 a9 5d bc 5d        --  7 g . ] . ]
5712:710 | DONE dir | em 16 16 | 00674b | (6 bytes)   |         .byte 72, 73, 68, 69, 66, 74 
5712:710 | DONE dir | em 16 16 |        |             |                 72 73 68 69 66 74        --  r s h i f t
5712:711 | DONE wsp | em 16 16 |        |             |
5712:712 | DONE lbl | em 16 16 | 006751 |             | nt_xor                               
5712:713 | DONE dir | em 16 16 | 006751 | (2 bytes)   |         .byte 3, { NC }              
5712:713 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:714 | DONE dir | em 16 16 | 006753 | (6 bytes)   |         .word nt_rshift, xt_xor, 0060b7 
5712:714 | DONE dir | em 16 16 |        |             |                 43 67 b1 60 b7 60        --  C g . ` . `
5712:715 | DONE dir | em 16 16 | 006759 | (3 bytes)   |         .byte 78, 6f, 72             
5712:715 | DONE dir | em 16 16 |        |             |                 78 6f 72                 --  x o r
5712:716 | DONE wsp | em 16 16 |        |             |
5712:717 | DONE lbl | em 16 16 | 00675c |             | nt_or                                
5712:718 | DONE dir | em 16 16 | 00675c | (2 bytes)   |         .byte 2, { NC }              
5712:718 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:719 | DONE dir | em 16 16 | 00675e | (6 bytes)   |         .word nt_xor, xt_or, 005c69  
5712:719 | DONE dir | em 16 16 |        |             |                 51 67 63 5c 69 5c        --  Q g c \ i \
5712:720 | DONE dir | em 16 16 | 006764 | (2 bytes)   |         .byte 6f, 72                 
5712:720 | DONE dir | em 16 16 |        |             |                 6f 72                    --  o r
5712:721 | DONE wsp | em 16 16 |        |             |
5712:722 | DONE lbl | em 16 16 | 006766 |             | nt_and                               
5712:723 | DONE dir | em 16 16 | 006766 | (2 bytes)   |         .byte 3, { NC }              
5712:723 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:724 | DONE dir | em 16 16 | 006768 | (6 bytes)   |         .word nt_or, xt_and, 005592  
5712:724 | DONE dir | em 16 16 |        |             |                 5c 67 8c 55 92 55        --  \ g . U . U
5712:725 | DONE dir | em 16 16 | 00676e | (3 bytes)   |         .byte 61, 6e, 64             
5712:725 | DONE dir | em 16 16 |        |             |                 61 6e 64                 --  a n d
5712:726 | DONE wsp | em 16 16 |        |             |
5712:727 | DONE lbl | em 16 16 | 006771 |             | nt_lshift                            
5712:728 | DONE dir | em 16 16 | 006771 | (2 bytes)   |         .byte 6, { NC }              
5712:728 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:729 | DONE dir | em 16 16 | 006773 | (6 bytes)   |         .word nt_and, xt_lshift, 005b25 
5712:729 | DONE dir | em 16 16 |        |             |                 66 67 12 5b 25 5b        --  f g . [ % [
5712:730 | DONE dir | em 16 16 | 006779 | (6 bytes)   |         .byte 6c, 73, 68, 69, 66, 74 
5712:730 | DONE dir | em 16 16 |        |             |                 6c 73 68 69 66 74        --  l s h i f t
5712:731 | DONE wsp | em 16 16 |        |             |
5712:732 | DONE lbl | em 16 16 | 00677f |             | nt_plusstore                         
5712:733 | DONE dir | em 16 16 | 00677f | (2 bytes)   |         .byte 2, { NC }              
5712:733 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:734 | DONE dir | em 16 16 | 006781 | (6 bytes)   |         .word nt_lshift, xt_plusstore, 005d16 
5712:734 | DONE dir | em 16 16 |        |             |                 71 67 07 5d 16 5d        --  q g . ] . ]
5712:735 | DONE dir | em 16 16 | 006787 | (2 bytes)   |         .byte 2b, 21                 
5712:735 | DONE dir | em 16 16 |        |             |                 2b 21                    --  + !
5712:736 | DONE wsp | em 16 16 |        |             |
5712:737 | DONE lbl | em 16 16 | 006789 |             | nt_c-comma                           
5712:738 | DONE dir | em 16 16 | 006789 | (2 bytes)   |         .byte 2, { NC }              
5712:738 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:739 | DONE dir | em 16 16 | 00678b | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 00560b 
5712:739 | DONE dir | em 16 16 |        |             |                 7f 67 fe 55 0b 56        --  . g . U  V
5712:740 | DONE dir | em 16 16 | 006791 | (2 bytes)   |         .byte 63, 2c                 
5712:740 | DONE dir | em 16 16 |        |             |                 63 2c                    --  c ,
5712:741 | DONE wsp | em 16 16 |        |             |
5712:742 | DONE lbl | em 16 16 | 006793 |             | nt_c-fetch                           
5712:743 | DONE dir | em 16 16 | 006793 | (2 bytes)   |         .byte 2, { NC }              
5712:743 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:744 | DONE dir | em 16 16 | 006795 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 005617 
5712:744 | DONE dir | em 16 16 |        |             |                 89 67 0c 56 17 56        --  . g  V . V
5712:745 | DONE dir | em 16 16 | 00679b | (2 bytes)   |         .byte 63, 40                 
5712:745 | DONE dir | em 16 16 |        |             |                 63 40                    --  c @
5712:746 | DONE wsp | em 16 16 |        |             |
5712:747 | DONE lbl | em 16 16 | 00679d |             | nt_c-store                           
5712:748 | DONE dir | em 16 16 | 00679d | (2 bytes)   |         .byte 2, { NC }              
5712:748 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:749 | DONE dir | em 16 16 | 00679f | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 005627 
5712:749 | DONE dir | em 16 16 |        |             |                 93 67 18 56 27 56        --  . g . V ' V
5712:750 | DONE dir | em 16 16 | 0067a5 | (2 bytes)   |         .byte 63, 21                 
5712:750 | DONE dir | em 16 16 |        |             |                 63 21                    --  c !
5712:751 | DONE wsp | em 16 16 |        |             |
5712:752 | DONE lbl | em 16 16 | 0067a7 |             | nt_two-star                          
5712:753 | DONE dir | em 16 16 | 0067a7 | (2 bytes)   |         .byte 2, { NC }              
5712:753 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:754 | DONE dir | em 16 16 | 0067a9 | (6 bytes)   |         .word nt_c-store, xt_two-star, 005404 
5712:754 | DONE dir | em 16 16 |        |             |                 9d 67 01 54 04 54        --  . g . T . T
5712:755 | DONE dir | em 16 16 | 0067af | (2 bytes)   |         .byte 32, 2a                 
5712:755 | DONE dir | em 16 16 |        |             |                 32 2a                    --  2 *
5712:756 | DONE wsp | em 16 16 |        |             |
5712:757 | DONE lbl | em 16 16 | 0067b1 |             | nt_minus                             
5712:758 | DONE dir | em 16 16 | 0067b1 | (2 bytes)   |         .byte 1, { NC }              
5712:758 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:759 | DONE dir | em 16 16 | 0067b3 | (6 bytes)   |         .word nt_two-star, xt_minus, 00536b 
5712:759 | DONE dir | em 16 16 |        |             |                 a7 67 61 53 6b 53        --  . g a S k S
5712:760 | DONE dir | em 16 16 | 0067b9 | (1 bytes)   |         .byte 2d                     
5712:760 | DONE dir | em 16 16 |        |             |                 2d                       --  -
5712:761 | DONE wsp | em 16 16 |        |             |
5712:762 | DONE lbl | em 16 16 | 0067ba |             | nt_plus                              
5712:763 | DONE dir | em 16 16 | 0067ba | (2 bytes)   |         .byte 1, { NC }              
5712:763 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:764 | DONE dir | em 16 16 | 0067bc | (6 bytes)   |         .word nt_minus, xt_plus, 005338 
5712:764 | DONE dir | em 16 16 |        |             |                 b1 67 31 53 38 53        --  . g 1 S 8 S
5712:765 | DONE dir | em 16 16 | 0067c2 | (1 bytes)   |         .byte 2b                     
5712:765 | DONE dir | em 16 16 |        |             |                 2b                       --  +
5712:766 | DONE wsp | em 16 16 |        |             |
5712:767 | DONE lbl | em 16 16 | 0067c3 |             | nt_one-minus                         
5712:768 | DONE dir | em 16 16 | 0067c3 | (2 bytes)   |         .byte 2, { NC }              
5712:768 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:769 | DONE dir | em 16 16 | 0067c5 | (6 bytes)   |         .word nt_plus, xt_one-minus, 0053f6 
5712:769 | DONE dir | em 16 16 |        |             |                 ba 67 f5 53 f6 53        --  . g . S . S
5712:770 | DONE dir | em 16 16 | 0067cb | (2 bytes)   |         .byte 31, 2d                 
5712:770 | DONE dir | em 16 16 |        |             |                 31 2d                    --  1 -
5712:771 | DONE wsp | em 16 16 |        |             |
5712:772 | DONE lbl | em 16 16 | 0067cd |             | nt_one-plus                          
5712:773 | DONE dir | em 16 16 | 0067cd | (2 bytes)   |         .byte 2, { NC }              
5712:773 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:774 | DONE dir | em 16 16 | 0067cf | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 0053f8 
5712:774 | DONE dir | em 16 16 |        |             |                 c3 67 f7 53 f8 53        --  . g . S . S
5712:775 | DONE dir | em 16 16 | 0067d5 | (2 bytes)   |         .byte 31, 2b                 
5712:775 | DONE dir | em 16 16 |        |             |                 31 2b                    --  1 +
5712:776 | DONE wsp | em 16 16 |        |             |
5712:777 | DONE lbl | em 16 16 | 0067d7 |             | nt_zero-notequal                     
5712:778 | DONE dir | em 16 16 | 0067d7 | (2 bytes)   |         .byte 3, { NC }              
5712:778 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:779 | DONE dir | em 16 16 | 0067d9 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 0053c3 
5712:779 | DONE dir | em 16 16 |        |             |                 cd 67 b8 53 c3 53        --  . g . S . S
5712:780 | DONE dir | em 16 16 | 0067df | (3 bytes)   |         .byte 30, 3c, 3e             
5712:780 | DONE dir | em 16 16 |        |             |                 30 3c 3e                 --  0 < >
5712:781 | DONE wsp | em 16 16 |        |             |
5712:782 | DONE lbl | em 16 16 | 0067e2 |             | nt_zero-more                         
5712:783 | DONE dir | em 16 16 | 0067e2 | (2 bytes)   |         .byte 2, { NC }              
5712:783 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:784 | DONE dir | em 16 16 | 0067e4 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 0053ce 
5712:784 | DONE dir | em 16 16 |        |             |                 d7 67 c4 53 ce 53        --  . g . S . S
5712:785 | DONE dir | em 16 16 | 0067ea | (2 bytes)   |         .byte 30, 3e                 
5712:785 | DONE dir | em 16 16 |        |             |                 30 3e                    --  0 >
5712:786 | DONE wsp | em 16 16 |        |             |
5712:787 | DONE lbl | em 16 16 | 0067ec |             | nt_zero-less                         
5712:788 | DONE dir | em 16 16 | 0067ec | (2 bytes)   |         .byte 2, { NC }              
5712:788 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:789 | DONE dir | em 16 16 | 0067ee | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 0053b7 
5712:789 | DONE dir | em 16 16 |        |             |                 e2 67 ac 53 b7 53        --  . g . S . S
5712:790 | DONE dir | em 16 16 | 0067f4 | (2 bytes)   |         .byte 30, 3c                 
5712:790 | DONE dir | em 16 16 |        |             |                 30 3c                    --  0 <
5712:791 | DONE wsp | em 16 16 |        |             |
5712:792 | DONE lbl | em 16 16 | 0067f6 |             | nt_greater                           
5712:793 | DONE dir | em 16 16 | 0067f6 | (2 bytes)   |         .byte 1, { NC }              
5712:793 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:794 | DONE dir | em 16 16 | 0067f8 | (6 bytes)   |         .word nt_zero-less, xt_greater, 005133 
5712:794 | DONE dir | em 16 16 |        |             |                 ec 67 20 51 33 51        --  . g   Q 3 Q
5712:795 | DONE dir | em 16 16 | 0067fe | (1 bytes)   |         .byte 3e                     
5712:795 | DONE dir | em 16 16 |        |             |                 3e                       --  >
5712:796 | DONE wsp | em 16 16 |        |             |
5712:797 | DONE lbl | em 16 16 | 0067ff |             | nt_less                              
5712:798 | DONE dir | em 16 16 | 0067ff | (2 bytes)   |         .byte 1, { NC }              
5712:798 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:799 | DONE dir | em 16 16 | 006801 | (6 bytes)   |         .word nt_greater, xt_less, 005109 
5712:799 | DONE dir | em 16 16 |        |             |                 f6 67 f6 50 09 51        --  . g . P 	 Q
5712:800 | DONE dir | em 16 16 | 006807 | (1 bytes)   |         .byte 3c                     
5712:800 | DONE dir | em 16 16 |        |             |                 3c                       --  <
5712:801 | DONE wsp | em 16 16 |        |             |
5712:802 | DONE lbl | em 16 16 | 006808 |             | nt_zero-equal                        
5712:803 | DONE dir | em 16 16 | 006808 | (2 bytes)   |         .byte 2, { NC }              
5712:803 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:804 | DONE dir | em 16 16 | 00680a | (6 bytes)   |         .word nt_less, xt_zero-equal, 0053ab 
5712:804 | DONE dir | em 16 16 |        |             |                 ff 67 a0 53 ab 53        --  . g . S . S
5712:805 | DONE dir | em 16 16 | 006810 | (2 bytes)   |         .byte 30, 3d                 
5712:805 | DONE dir | em 16 16 |        |             |                 30 3d                    --  0 =
5712:806 | DONE wsp | em 16 16 |        |             |
5712:807 | DONE lbl | em 16 16 | 006812 |             | nt_not-equal                         
5712:808 | DONE dir | em 16 16 | 006812 | (2 bytes)   |         .byte 2, { NC }              
5712:808 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5712:809 | DONE dir | em 16 16 | 006814 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 005115 
5712:809 | DONE dir | em 16 16 |        |             |                 08 68 0a 51 15 51        --  . h 
 Q . Q
5712:810 | DONE dir | em 16 16 | 00681a | (2 bytes)   |         .byte 3c, 3e                 
5712:810 | DONE dir | em 16 16 |        |             |                 3c 3e                    --  < >
5712:811 | DONE wsp | em 16 16 |        |             |
5712:812 | DONE lbl | em 16 16 | 00681c |             | nt_equal                             
5712:813 | DONE dir | em 16 16 | 00681c | (2 bytes)   |         .byte 1, { NC }              
5712:813 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:814 | DONE dir | em 16 16 | 00681e | (6 bytes)   |         .word nt_not-equal, xt_equal, 005397 
5712:814 | DONE dir | em 16 16 |        |             |                 12 68 8c 53 97 53        --  . h . S . S
5712:815 | DONE dir | em 16 16 | 006824 | (1 bytes)   |         .byte 3d                     
5712:815 | DONE dir | em 16 16 |        |             |                 3d                       --  =
5712:816 | DONE wsp | em 16 16 |        |             |
5712:817 | DONE lbl | em 16 16 | 006825 |             | nt_false                             
5712:818 | DONE dir | em 16 16 | 006825 | (2 bytes)   |         .byte 5, { NC }              
5712:818 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:819 | DONE dir | em 16 16 | 006827 | (6 bytes)   |         .word nt_equal, xt_zero, 00539f 
5712:819 | DONE dir | em 16 16 |        |             |                 1c 68 98 53 9f 53        --  . h . S . S
5712:820 | DONE dir | em 16 16 | 00682d | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
5712:820 | DONE dir | em 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
5712:821 | DONE wsp | em 16 16 |        |             |
5712:822 | DONE lbl | em 16 16 | 006832 |             | nt_true                              
5712:823 | DONE dir | em 16 16 | 006832 | (2 bytes)   |         .byte 4, { NC }              
5712:823 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:824 | DONE dir | em 16 16 | 006834 | (6 bytes)   |         .word nt_false, xt_true, 005f20 
5712:824 | DONE dir | em 16 16 |        |             |                 25 68 19 5f 20 5f        --  % h . _   _
5712:825 | DONE dir | em 16 16 | 00683a | (4 bytes)   |         .byte 74, 72, 75, 65         
5712:825 | DONE dir | em 16 16 |        |             |                 74 72 75 65              --  t r u e
5712:826 | DONE wsp | em 16 16 |        |             |
5712:827 | DONE lbl | em 16 16 | 00683e |             | nt_tonumber                          
5712:828 | DONE dir | em 16 16 | 00683e | (2 bytes)   |         .byte 7, { NC }              see if actually NC
5712:828 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5712:829 | DONE dir | em 16 16 | 006840 | (6 bytes)   |         .word nt_true, xt_tonumber, 0051bc 
5712:829 | DONE dir | em 16 16 |        |             |                 32 68 60 51 bc 51        --  2 h ` Q . Q
5712:830 | DONE dir | em 16 16 | 006846 | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
5712:830 | DONE dir | em 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
5712:831 | DONE wsp | em 16 16 |        |             |
5712:832 | DONE lbl | em 16 16 | 00684d |             | nt_number                            
5712:833 | DONE dir | em 16 16 | 00684d | (2 bytes)   |         .byte 6, { NC }              see if actually NC
5712:833 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:834 | DONE dir | em 16 16 | 00684f | (6 bytes)   |         .word nt_tonumber, xt_number, 005c62 
5712:834 | DONE dir | em 16 16 |        |             |                 3e 68 df 5b 62 5c        --  > h . [ b \
5712:835 | DONE dir | em 16 16 | 006855 | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
5712:835 | DONE dir | em 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
5712:836 | DONE wsp | em 16 16 |        |             |
5712:837 | DONE lbl | em 16 16 | 00685b |             | nt_two                               
5712:838 | DONE dir | em 16 16 | 00685b | (2 bytes)   |         .byte 1, { NC }              
5712:838 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:839 | DONE dir | em 16 16 | 00685d | (6 bytes)   |         .word nt_number, xt_two, 005400 
5712:839 | DONE dir | em 16 16 |        |             |                 4d 68 f9 53 00 54        --  M h . S . T
5712:840 | DONE dir | em 16 16 | 006863 | (1 bytes)   |         .byte 32                     
5712:840 | DONE dir | em 16 16 |        |             |                 32                       --  2
5712:841 | DONE wsp | em 16 16 |        |             |
5712:842 | DONE lbl | em 16 16 | 006864 |             | nt_one                               
5712:843 | DONE dir | em 16 16 | 006864 | (2 bytes)   |         .byte 1, { NC }              
5712:843 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:844 | DONE dir | em 16 16 | 006866 | (6 bytes)   |         .word nt_two, xt_one, 0053f4 
5712:844 | DONE dir | em 16 16 |        |             |                 5b 68 ed 53 f4 53        --  [ h . S . S
5712:845 | DONE dir | em 16 16 | 00686c | (1 bytes)   |         .byte 31                     
5712:845 | DONE dir | em 16 16 |        |             |                 31                       --  1
5712:846 | DONE wsp | em 16 16 |        |             |
5712:847 | DONE lbl | em 16 16 | 00686d |             | nt_zero                              
5712:848 | DONE dir | em 16 16 | 00686d | (2 bytes)   |         .byte 1, { NC }              
5712:848 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:849 | DONE dir | em 16 16 | 00686f | (6 bytes)   |         .word nt_one, xt_zero, 00539f 
5712:849 | DONE dir | em 16 16 |        |             |                 64 68 98 53 9f 53        --  d h . S . S
5712:850 | DONE dir | em 16 16 | 006875 | (1 bytes)   |         .byte 30                     
5712:850 | DONE dir | em 16 16 |        |             |                 30                       --  0
5712:851 | DONE wsp | em 16 16 |        |             |
5712:852 | DONE lbl | em 16 16 | 006876 |             | nt_find-name                         
5712:853 | DONE dir | em 16 16 | 006876 | (2 bytes)   |         .byte 9, 0                   
5712:853 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5712:854 | DONE dir | em 16 16 | 006878 | (6 bytes)   |         .word nt_zero, xt_find-name, 0059f9 
5712:854 | DONE dir | em 16 16 |        |             |                 6d 68 a3 59 f9 59        --  m h . Y . Y
5712:855 | DONE dir | em 16 16 | 00687e | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
5712:855 | DONE dir | em 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
5712:855 | DONE dir | em 16 16 |        |             |                 65                       --  e
5712:856 | DONE wsp | em 16 16 |        |             |
5712:857 | DONE lbl | em 16 16 | 006887 |             | nt_refill                            
5712:858 | DONE dir | em 16 16 | 006887 | (2 bytes)   |         .byte 6, 0                   TODO check flags
5712:858 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5712:859 | DONE dir | em 16 16 | 006889 | (6 bytes)   |         .word nt_find-name, xt_refill, 005d9f 
5712:859 | DONE dir | em 16 16 |        |             |                 76 68 76 5d 9f 5d        --  v h v ] . ]
5712:860 | DONE dir | em 16 16 | 00688f | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
5712:860 | DONE dir | em 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
5712:861 | DONE wsp | em 16 16 |        |             |
5712:862 | DONE lbl | em 16 16 | 006895 |             | nt_parse-name                        
5712:863 | DONE dir | em 16 16 | 006895 | (2 bytes)   |         .byte &10, 0                 
5712:863 | DONE dir | em 16 16 |        |             |                 0a 00                    --  
 .
5712:864 | DONE dir | em 16 16 | 006897 | (6 bytes)   |         .word nt_refill, xt_parse-name, 005cf8 
5712:864 | DONE dir | em 16 16 |        |             |                 87 68 92 5c f8 5c        --  . h . \ . \
5712:865 | DONE dir | em 16 16 | 00689d | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
5712:865 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
5712:865 | DONE dir | em 16 16 |        |             |                 6d 65                    --  m e
5712:866 | DONE wsp | em 16 16 |        |             |
5712:867 | DONE lbl | em 16 16 | 0068a7 |             | nt_source-id                         
5712:868 | DONE dir | em 16 16 | 0068a7 | (2 bytes)   |         .byte 9, { NC }              
5712:868 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5712:869 | DONE dir | em 16 16 | 0068a9 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 005ee1 
5712:869 | DONE dir | em 16 16 |        |             |                 95 68 db 5e e1 5e        --  . h . ^ . ^
5712:870 | DONE dir | em 16 16 | 0068af | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
5712:870 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
5712:870 | DONE dir | em 16 16 |        |             |                 64                       --  d
5712:871 | DONE wsp | em 16 16 |        |             |
5712:872 | DONE lbl | em 16 16 | 0068b8 |             | nt_comma                             
5712:873 | DONE dir | em 16 16 | 0068b8 | (2 bytes)   |         .byte 1, { NC }              
5712:873 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:874 | DONE dir | em 16 16 | 0068ba | (6 bytes)   |         .word nt_source-id, xt_comma, 00524d 
5712:874 | DONE dir | em 16 16 |        |             |                 a7 68 42 52 4d 52        --  . h B R M R
5712:875 | DONE dir | em 16 16 | 0068c0 | (1 bytes)   |         .byte 2c                     
5712:875 | DONE dir | em 16 16 |        |             |                 2c                       --  ,
5712:876 | DONE wsp | em 16 16 |        |             |
5712:877 | DONE lbl | em 16 16 | 0068c1 |             | nt_accept                            
5712:878 | DONE dir | em 16 16 | 0068c1 | (2 bytes)   |         .byte 6, 00                  TODO check flags
5712:878 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5712:879 | DONE dir | em 16 16 | 0068c3 | (6 bytes)   |         .word nt_comma, xt_accept, 005548 
5712:879 | DONE dir | em 16 16 |        |             |                 b8 68 ba 54 48 55        --  . h . T H U
5712:880 | DONE dir | em 16 16 | 0068c9 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
5712:880 | DONE dir | em 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
5712:881 | DONE wsp | em 16 16 |        |             |
5712:882 | DONE lbl | em 16 16 | 0068cf |             | nt_keyq                              
5712:883 | DONE dir | em 16 16 | 0068cf | (2 bytes)   |         .byte 4, { NC }              
5712:883 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:884 | DONE dir | em 16 16 | 0068d1 | (6 bytes)   |         .word nt_accept, xt_keyq, 005a6b 
5712:884 | DONE dir | em 16 16 |        |             |                 c1 68 5e 5a 6b 5a        --  . h ^ Z k Z
5712:885 | DONE dir | em 16 16 | 0068d7 | (4 bytes)   |         .byte 6b, 65, 79, 3f         
5712:885 | DONE dir | em 16 16 |        |             |                 6b 65 79 3f              --  k e y ?
5712:886 | DONE wsp | em 16 16 |        |             |
5712:887 | DONE lbl | em 16 16 | 0068db |             | nt_key                               
5712:888 | DONE dir | em 16 16 | 0068db | (2 bytes)   |         .byte 3, { NC }              
5712:888 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:889 | DONE dir | em 16 16 | 0068dd | (6 bytes)   |         .word nt_keyq, xt_key, 005a5d 
5712:889 | DONE dir | em 16 16 |        |             |                 cf 68 4e 5a 5d 5a        --  . h N Z ] Z
5712:890 | DONE dir | em 16 16 | 0068e3 | (3 bytes)   |         .byte 6b, 65, 79             
5712:890 | DONE dir | em 16 16 |        |             |                 6b 65 79                 --  k e y
5712:891 | DONE wsp | em 16 16 |        |             |
5712:892 | DONE lbl | em 16 16 | 0068e6 |             | nt_backslash                         
5712:893 | DONE dir | em 16 16 | 0068e6 | (2 bytes)   |         .byte 1, { NC }              
5712:893 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:894 | DONE dir | em 16 16 | 0068e8 | (6 bytes)   |         .word nt_key, xt_backslash, 005330 
5712:894 | DONE dir | em 16 16 |        |             |                 db 68 2c 53 30 53        --  . h , S 0 S
5712:895 | DONE dir | em 16 16 | 0068ee | (1 bytes)   |         .byte 5c                     
5712:895 | DONE dir | em 16 16 |        |             |                 5c                       --  \
5712:896 | DONE wsp | em 16 16 |        |             |
5712:897 | DONE lbl | em 16 16 | 0068ef |             | nt_qdup                              
5712:898 | DONE dir | em 16 16 | 0068ef | (2 bytes)   |         .byte 4, { NC }              
5712:898 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:899 | DONE dir | em 16 16 | 0068f1 | (6 bytes)   |         .word nt_backslash, xt_qdup, 0052ca 
5712:899 | DONE dir | em 16 16 |        |             |                 e6 68 c3 52 ca 52        --  . h . R . R
5712:900 | DONE dir | em 16 16 | 0068f7 | (4 bytes)   |         .byte 3f, 64, 75, 70         
5712:900 | DONE dir | em 16 16 |        |             |                 3f 64 75 70              --  ? d u p
5712:901 | DONE wsp | em 16 16 |        |             |
5712:902 | DONE lbl | em 16 16 | 0068fb |             | nt_tuck                              
5712:903 | DONE dir | em 16 16 | 0068fb | (2 bytes)   |         .byte 4, { NC }              
5712:903 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:904 | DONE dir | em 16 16 | 0068fd | (6 bytes)   |         .word nt_qdup, xt_tuck, 005f29 
5712:904 | DONE dir | em 16 16 |        |             |                 ef 68 21 5f 29 5f        --  . h ! _ ) _
5712:905 | DONE dir | em 16 16 | 006903 | (4 bytes)   |         .byte 74, 75, 63, 6b         
5712:905 | DONE dir | em 16 16 |        |             |                 74 75 63 6b              --  t u c k
5712:906 | DONE wsp | em 16 16 |        |             |
5712:907 | DONE lbl | em 16 16 | 006907 |             | nt_nip                               
5712:908 | DONE dir | em 16 16 | 006907 | (2 bytes)   |         .byte 3, { NC }              
5712:908 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:909 | DONE dir | em 16 16 | 006909 | (6 bytes)   |         .word nt_tuck, xt_nip, 005bde 
5712:909 | DONE dir | em 16 16 |        |             |                 fb 68 dc 5b de 5b        --  . h . [ . [
5712:910 | DONE dir | em 16 16 | 00690f | (3 bytes)   |         .byte 6e, 69, 70             
5712:910 | DONE dir | em 16 16 |        |             |                 6e 69 70                 --  n i p
5712:911 | DONE wsp | em 16 16 |        |             |
5712:912 | DONE lbl | em 16 16 | 006912 |             | nt_mrot                              
5712:913 | DONE dir | em 16 16 | 006912 | (2 bytes)   |         .byte 4, { NC }              
5712:913 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:914 | DONE dir | em 16 16 | 006914 | (6 bytes)   |         .word nt_nip, xt_mrot, 005374 
5712:914 | DONE dir | em 16 16 |        |             |                 07 69 6c 53 74 53        --  . i l S t S
5712:915 | DONE dir | em 16 16 | 00691a | (4 bytes)   |         .byte 2d, 72, 6f, 74         
5712:915 | DONE dir | em 16 16 |        |             |                 2d 72 6f 74              --  - r o t
5712:916 | DONE wsp | em 16 16 |        |             |
5712:917 | DONE lbl | em 16 16 | 00691e |             | nt_rot                               
5712:918 | DONE dir | em 16 16 | 00691e | (2 bytes)   |         .byte 3, { NC }              
5712:918 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:919 | DONE dir | em 16 16 | 006920 | (6 bytes)   |         .word nt_mrot, xt_rot, 005da8 
5712:919 | DONE dir | em 16 16 |        |             |                 12 69 a0 5d a8 5d        --  . i . ] . ]
5712:920 | DONE dir | em 16 16 | 006926 | (3 bytes)   |         .byte 72, 6f, 74             
5712:920 | DONE dir | em 16 16 |        |             |                 72 6f 74                 --  r o t
5712:921 | DONE wsp | em 16 16 |        |             |
5712:922 | DONE lbl | em 16 16 | 006929 |             | nt_2over                             
5712:923 | DONE dir | em 16 16 | 006929 | (2 bytes)   |         .byte 5, { NC }              
5712:923 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:924 | DONE dir | em 16 16 | 00692b | (6 bytes)   |         .word nt_rot, xt_2over, 005434 
5712:924 | DONE dir | em 16 16 |        |             |                 1e 69 28 54 34 54        --  . i ( T 4 T
5712:925 | DONE dir | em 16 16 | 006931 | (5 bytes)   |         .byte 32, 6f, 76, 65, 72     
5712:925 | DONE dir | em 16 16 |        |             |                 32 6f 76 65 72           --  2 o v e r
5712:926 | DONE wsp | em 16 16 |        |             |
5712:927 | DONE lbl | em 16 16 | 006936 |             | nt_2swap                             
5712:928 | DONE dir | em 16 16 | 006936 | (2 bytes)   |         .byte 5, { NC }              
5712:928 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:929 | DONE dir | em 16 16 | 006938 | (6 bytes)   |         .word nt_2over, xt_2swap, 005464 
5712:929 | DONE dir | em 16 16 |        |             |                 29 69 54 54 64 54        --  ) i T T d T
5712:930 | DONE dir | em 16 16 | 00693e | (5 bytes)   |         .byte 32, 73, 77, 61, 70     
5712:930 | DONE dir | em 16 16 |        |             |                 32 73 77 61 70           --  2 s w a p
5712:931 | DONE wsp | em 16 16 |        |             |
5712:932 | DONE lbl | em 16 16 | 006943 |             | nt_execute                           
5712:933 | DONE dir | em 16 16 | 006943 | (2 bytes)   |         .byte 7, { NC }              
5712:933 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5712:934 | DONE dir | em 16 16 | 006945 | (6 bytes)   |         .word nt_2swap, xt_execute, 005972 
5712:934 | DONE dir | em 16 16 |        |             |                 36 69 68 59 72 59        --  6 i h Y r Y
5712:935 | DONE dir | em 16 16 | 00694b | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
5712:935 | DONE dir | em 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
5712:936 | DONE wsp | em 16 16 |        |             |
5712:937 | DONE lbl | em 16 16 | 006952 |             | nt_here                              
5712:938 | DONE dir | em 16 16 | 006952 | (2 bytes)   |         .byte 4, { NC }              
5712:938 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:939 | DONE dir | em 16 16 | 006954 | (6 bytes)   |         .word nt_execute, xt_here, 005ab8 
5712:939 | DONE dir | em 16 16 |        |             |                 43 69 b2 5a b8 5a        --  C i . Z . Z
5712:940 | DONE dir | em 16 16 | 00695a | (4 bytes)   |         .byte 68, 65, 72, 65         
5712:940 | DONE dir | em 16 16 |        |             |                 68 65 72 65              --  h e r e
5712:941 | DONE wsp | em 16 16 |        |             |
5712:942 | DONE lbl | em 16 16 | 00695e |             | nt_2drop                             
5712:943 | DONE dir | em 16 16 | 00695e | (2 bytes)   |         .byte 5, { NC }              
5712:943 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5712:944 | DONE dir | em 16 16 | 006960 | (6 bytes)   |         .word nt_here, xt_2drop, 00541c 
5712:944 | DONE dir | em 16 16 |        |             |                 52 69 16 54 1c 54        --  R i . T . T
5712:945 | DONE dir | em 16 16 | 006966 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
5712:945 | DONE dir | em 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
5712:946 | DONE wsp | em 16 16 |        |             |
5712:947 | DONE lbl | em 16 16 | 00696b |             | nt_rfetch                            
5712:948 | DONE dir | em 16 16 | 00696b | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
5712:948 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5712:949 | DONE dir | em 16 16 | 00696d | (6 bytes)   |         .word nt_2drop, xt_rfetch, 005d53 
5712:949 | DONE dir | em 16 16 |        |             |                 5e 69 4b 5d 53 5d        --  ^ i K ] S ]
5712:950 | DONE dir | em 16 16 | 006973 | (2 bytes)   |         .byte 72, 40                 
5712:950 | DONE dir | em 16 16 |        |             |                 72 40                    --  r @
5712:951 | DONE wsp | em 16 16 |        |             |
5712:952 | DONE lbl | em 16 16 | 006975 |             | nt_fromr                             
5712:953 | DONE dir | em 16 16 | 006975 | (2 bytes)   |         .byte 2, { CO + NC }         NC is special case
5712:953 | DONE dir | em 16 16 |        |             |                 02 05                    --  . .
5712:954 | DONE dir | em 16 16 | 006977 | (6 bytes)   |         .word nt_rfetch, xt_fromr, 005d5b 
5712:954 | DONE dir | em 16 16 |        |             |                 6b 69 54 5d 5b 5d        --  k i T ] [ ]
5712:955 | DONE dir | em 16 16 | 00697d | (2 bytes)   |         .byte 72, 3e                 
5712:955 | DONE dir | em 16 16 |        |             |                 72 3e                    --  r >
5712:956 | DONE wsp | em 16 16 |        |             |
5712:957 | DONE lbl | em 16 16 | 00697f |             | nt_tor                               
5712:958 | DONE dir | em 16 16 | 00697f | (2 bytes)   |         .byte 2, { CO + NC }         NC is special case
5712:958 | DONE dir | em 16 16 |        |             |                 02 05                    --  . .
5712:959 | DONE dir | em 16 16 | 006981 | (6 bytes)   |         .word nt_fromr, xt_tor, 0051c4 
5712:959 | DONE dir | em 16 16 |        |             |                 75 69 bd 51 c4 51        --  u i . Q . Q
5712:960 | DONE dir | em 16 16 | 006987 | (2 bytes)   |         .byte 3e, 72                 
5712:960 | DONE dir | em 16 16 |        |             |                 3e 72                    --  > r
5712:961 | DONE wsp | em 16 16 |        |             |
5712:962 | DONE lbl | em 16 16 | 006989 |             | nt_digitq                            
5712:963 | DONE dir | em 16 16 | 006989 | (2 bytes)   |         .byte 6, { NC }              
5712:963 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:964 | DONE dir | em 16 16 | 00698b | (6 bytes)   |         .word nt_tor, xt_digitq, 005828 
5712:964 | DONE dir | em 16 16 |        |             |                 7f 69 ed 57 28 58        --  . i . W ( X
5712:965 | DONE dir | em 16 16 | 006991 | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
5712:965 | DONE dir | em 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
5712:966 | DONE wsp | em 16 16 |        |             |
5712:967 | DONE lbl | em 16 16 | 006997 |             | nt_bounds                            
5712:968 | DONE dir | em 16 16 | 006997 | (2 bytes)   |         .byte 6, { NC }              
5712:968 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5712:969 | DONE dir | em 16 16 | 006999 | (6 bytes)   |         .word nt_digitq, xt_bounds, 0055e2 
5712:969 | DONE dir | em 16 16 |        |             |                 89 69 d9 55 e2 55        --  . i . U . U
5712:970 | DONE dir | em 16 16 | 00699f | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
5712:970 | DONE dir | em 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
5712:971 | DONE wsp | em 16 16 |        |             |
5712:972 | DONE lbl | em 16 16 | 0069a5 |             | nt_over                              
5712:973 | DONE dir | em 16 16 | 0069a5 | (2 bytes)   |         .byte 4, { NC }              
5712:973 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:974 | DONE dir | em 16 16 | 0069a7 | (6 bytes)   |         .word nt_bounds, xt_over, 005c78 
5712:974 | DONE dir | em 16 16 |        |             |                 97 69 72 5c 78 5c        --  . i r \ x \
5712:975 | DONE dir | em 16 16 | 0069ad | (4 bytes)   |         .byte 6f, 76, 65, 72         
5712:975 | DONE dir | em 16 16 |        |             |                 6f 76 65 72              --  o v e r
5712:976 | DONE wsp | em 16 16 |        |             |
5712:977 | DONE lbl | em 16 16 | 0069b1 |             | nt_fetch                             
5712:978 | DONE dir | em 16 16 | 0069b1 | (2 bytes)   |         .byte 1, { NC }              
5712:978 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:979 | DONE dir | em 16 16 | 0069b3 | (6 bytes)   |         .word nt_over, xt_fetch, 0052db 
5712:979 | DONE dir | em 16 16 |        |             |                 a5 69 d7 52 db 52        --  . i . R . R
5712:980 | DONE dir | em 16 16 | 0069b9 | (1 bytes)   |         .byte 40                     
5712:980 | DONE dir | em 16 16 |        |             |                 40                       --  @
5712:981 | DONE wsp | em 16 16 |        |             |
5712:982 | DONE lbl | em 16 16 | 0069ba |             | nt_store                             
5712:983 | DONE dir | em 16 16 | 0069ba | (2 bytes)   |         .byte 1, { NC }              
5712:983 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5712:984 | DONE dir | em 16 16 | 0069bc | (6 bytes)   |         .word nt_fetch, xt_store, 0052d6 
5712:984 | DONE dir | em 16 16 |        |             |                 b1 69 cb 52 d6 52        --  . i . R . R
5712:985 | DONE dir | em 16 16 | 0069c2 | (1 bytes)   |         .byte 21                     
5712:985 | DONE dir | em 16 16 |        |             |                 21                       --  !
5712:986 | DONE wsp | em 16 16 |        |             |
5712:987 | DONE lbl | em 16 16 | 0069c3 |             | nt_swap                              
5712:988 | DONE dir | em 16 16 | 0069c3 | (2 bytes)   |         .byte 4, { NC }              
5712:988 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:989 | DONE dir | em 16 16 | 0069c5 | (6 bytes)   |         .word nt_store, xt_swap, 005f0e 
5712:989 | DONE dir | em 16 16 |        |             |                 ba 69 09 5f 0e 5f        --  . i 	 _ . _
5712:990 | DONE dir | em 16 16 | 0069cb | (4 bytes)   |         .byte 73, 77, 61, 70         
5712:990 | DONE dir | em 16 16 |        |             |                 73 77 61 70              --  s w a p
5712:991 | DONE wsp | em 16 16 |        |             |
5712:992 | DONE lbl | em 16 16 | 0069cf |             | nt_dup                               
5712:993 | DONE dir | em 16 16 | 0069cf | (2 bytes)   |         .byte 3, { NC }              
5712:993 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5712:994 | DONE dir | em 16 16 | 0069d1 | (6 bytes)   |         .word nt_swap, xt_dup, 00590a 
5712:994 | DONE dir | em 16 16 |        |             |                 c3 69 06 59 0a 59        --  . i . Y 
 Y
5712:995 | DONE dir | em 16 16 | 0069d7 | (3 bytes)   |         .byte 64, 75, 70             
5712:995 | DONE dir | em 16 16 |        |             |                 64 75 70                 --  d u p
5712:996 | DONE wsp | em 16 16 |        |             |
5712:997 | DONE cmt | em 16 16 |        |             | ; DROP is always the first entry in dictionary
5712:998 | DONE lbl | em 16 16 | 0069da |             | nt_drop                              
5712:999 | DONE dir | em 16 16 | 0069da | (2 bytes)   |         .byte 4, { NC }              
5712:999 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5712:1000 | DONE dir | em 16 16 | 0069dc | (6 bytes)   |         .word nt_dup, xt_drop, 0058e7 
5712:1000 | DONE dir | em 16 16 |        |             |                 cf 69 e3 58 e7 58       --  . i . X . X
5712:1001 | DONE dir | em 16 16 | 0069e2 | (4 bytes)   |         .byte 64, 72, 6f, 70         
5712:1001 | DONE dir | em 16 16 |        |             |                 64 72 6f 70             --  d r o p
5712:1002 | DONE wsp | em 16 16 |        |             |
5712:1003 | DONE cmt | em 16 16 |        |             | ; END
5713:000 | DONE wsp | em 16 16 |        |             |
5714:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5715:000 | DONE cmt | em 16 16 |        |             | ; CODE FIELD ROUTINES
5716:000 | DONE wsp | em 16 16 |        |             |
5717:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5718:000 | DONE cmt | em 16 16 |        |             | ; DOCONST
5719:000 | DONE cmt | em 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
5720:000 | DONE cmt | em 16 16 |        |             | ; the stack
5721:000 | DONE lbl | em 16 16 | 0069e6 |             | doconst                              
5722:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5723:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5724:000 | DONE ins | em 16 16 | 0069e6 | ca          |                 dex                  make room on Data Stack
5725:000 | DONE ins | em 16 16 | 0069e7 | ca          |                 dex                  
5726:000 | DONE ins | em 16 16 | 0069e8 | 94 00       |                 sty.dx 00            
5727:000 | DONE wsp | em 16 16 |        |             |
5728:000 | DONE cmt | em 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
5729:000 | DONE cmt | em 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
5730:000 | DONE ins | em 16 16 | 0069ea | 68          |                 pla                  get the return address
5731:000 | DONE ins | em 16 16 | 0069eb | 85 1c       |                 sta.d 00001c         
5732:000 | DONE wsp | em 16 16 |        |             |
5733:000 | DONE cmt | em 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
5734:000 | DONE cmt | em 16 16 |        |             |                 ; address handling
5735:000 | DONE ins | em 16 16 | 0069ed | a0 01 00    |                 ldy.# 0001           
5736:000 | DONE ins | em 16 16 | 0069f0 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
5737:000 | DONE ins | em 16 16 | 0069f2 | a8          |                 tay                  
5738:000 | DONE wsp | em 16 16 |        |             |
5739:000 | DONE ins | em 16 16 | 0069f3 | 60          |                 rts                  takes us to original caller
5740:000 | DONE wsp | em 16 16 |        |             |
5741:000 | DONE wsp | em 16 16 |        |             |
5742:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5743:000 | DONE cmt | em 16 16 |        |             | ; DODEFER
5744:000 | DONE cmt | em 16 16 |        |             | ; Execute a DEFER statement at runtime: Execute the address we find after the
5745:000 | DONE cmt | em 16 16 |        |             | ; caller in the Data Field
5746:000 | DONE lbl | em 16 16 | 0069f4 |             | dodefer                              
5747:000 | DONE cmt | em 16 16 |        |             |                 ; the xt we need is stored in the two bytes after the JSR return
5748:000 | DONE cmt | em 16 16 |        |             |                 ; address, which is what is on top of the Retun Stack. So all we
5749:000 | DONE cmt | em 16 16 |        |             |                 ; have to do is replace our return jump with what we find there
5750:000 | DONE ins | em 16 16 | 0069f4 | 68          |                 pla                  this is the address where we find the xt ...
5751:000 | DONE ins | em 16 16 | 0069f5 | 1a          |                 inc.a                ... except one byte later
5752:000 | DONE ins | em 16 16 | 0069f6 | 85 1c       |                 sta.d 00001c         
5753:000 | DONE ins | em 16 16 | 0069f8 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
5754:000 | DONE ins | em 16 16 | 0069fa | 3a          |                 dec.a                Now we need to move one byte back
5755:000 | DONE ins | em 16 16 | 0069fb | 48          |                 pha                  Return new address
5756:000 | DONE wsp | em 16 16 |        |             |
5757:000 | DONE ins | em 16 16 | 0069fc | 60          |                 rts                  This is actually a jump to the new target
5758:000 | DONE wsp | em 16 16 |        |             |
5759:000 | DONE lbl | em 16 16 | 0069fd |             | defer_error                          
5760:000 | DONE cmt | em 16 16 |        |             |                 ; if the defer has not been defined with an IS word, we land
5761:000 | DONE cmt | em 16 16 |        |             |                 ; here by default
5762:000 | DONE ins | em 16 16 | 0069fd | a9 94 71    |                 lda.# 007194         
5763:000 | DONE ins | em 16 16 | 006a00 | 4c 9c 6a    |                 jmp 006a9c           
5764:000 | DONE wsp | em 16 16 |        |             |
5765:000 | DONE wsp | em 16 16 |        |             |
5766:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5767:000 | DONE cmt | em 16 16 |        |             | ; DODOES
5768:000 | DONE cmt | em 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
5769:000 | DONE cmt | em 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
5770:000 | DONE lbl | em 16 16 | 006a03 |             | dodoes                               
5771:000 | DONE cmt | em 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
5772:000 | DONE cmt | em 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
5773:000 | DONE cmt | em 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
5774:000 | DONE cmt | em 16 16 |        |             |                 ; works
5775:000 | DONE ins | em 16 16 | 006a03 | 68          |                 pla                  
5776:000 | DONE ins | em 16 16 | 006a04 | 1a          |                 inc.a                
5777:000 | DONE ins | em 16 16 | 006a05 | 85 20       |                 sta.d 000020         
5778:000 | DONE wsp | em 16 16 |        |             |
5779:000 | DONE cmt | em 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
5780:000 | DONE cmt | em 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
5781:000 | DONE cmt | em 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
5782:000 | DONE ins | em 16 16 | 006a07 | ca          |                 dex                  
5783:000 | DONE ins | em 16 16 | 006a08 | ca          |                 dex                  
5784:000 | DONE ins | em 16 16 | 006a09 | 94 00       |                 sty.dx 00            
5785:000 | DONE wsp | em 16 16 |        |             |
5786:000 | DONE ins | em 16 16 | 006a0b | 7a          |                 ply                  
5787:000 | DONE ins | em 16 16 | 006a0c | c8          |                 iny                  
5788:000 | DONE wsp | em 16 16 |        |             |
5789:000 | DONE cmt | em 16 16 |        |             |                 ; This leaves the return address from the original main routine
5790:000 | DONE cmt | em 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
5791:000 | DONE cmt | em 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
5792:000 | DONE cmt | em 16 16 |        |             |                 ; will take us back to the main routine
5793:000 | DONE ins | em 16 16 | 006a0d | 6c 20 00    |                 jmp.i 000020         JMP (TMP3)
5794:000 | DONE wsp | em 16 16 |        |             |
5795:000 | DONE wsp | em 16 16 |        |             |
5796:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5797:000 | DONE cmt | em 16 16 |        |             | ; DOVAR
5798:000 | DONE cmt | em 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
5799:000 | DONE cmt | em 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
5800:000 | DONE cmt | em 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
5801:000 | DONE cmt | em 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
5802:000 | DONE cmt | em 16 16 |        |             | ; routine installed with CREATE
5803:000 | DONE lbl | em 16 16 | 006a10 |             | dovar                                
5804:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5805:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5806:000 | DONE ins | em 16 16 | 006a10 | ca          |                 dex                  make room on Data Stack
5807:000 | DONE ins | em 16 16 | 006a11 | ca          |                 dex                  
5808:000 | DONE ins | em 16 16 | 006a12 | 94 00       |                 sty.dx 00            
5809:000 | DONE wsp | em 16 16 |        |             |
5810:000 | DONE cmt | em 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
5811:000 | DONE cmt | em 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
5812:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5813:000 | DONE ins | em 16 16 | 006a14 | 7a          |                 ply                  value is now TOS
5814:000 | DONE ins | em 16 16 | 006a15 | c8          |                 iny                  add one because of 65816's address handling
5815:000 | DONE wsp | em 16 16 |        |             |
5816:000 | DONE ins | em 16 16 | 006a16 | 60          |                 rts                  takes us to original caller
5817:000 | DONE wsp | em 16 16 |        |             |
5818:000 | DONE wsp | em 16 16 |        |             |
5819:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5820:000 | DONE cmt | em 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
5821:000 | DONE wsp | em 16 16 |        |             |
5822:000 | DONE wsp | em 16 16 |        |             |
5823:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5824:000 | DONE cmt | em 16 16 |        |             | ; INTERPRET
5825:000 | DONE cmt | em 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
5826:000 | DONE cmt | em 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
5827:000 | DONE cmt | em 16 16 |        |             | ; string is in ciblen
5828:000 | DONE lbl | em 16 16 | 006a17 |             | interpret                            
5829:000 | DONE lbl | em 16 16 | 006a17 |             | interpret_loop                       
5830:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5831:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5832:000 | DONE cmt | em 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
5833:000 | DONE cmt | em 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
5834:000 | DONE cmt | em 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
5835:000 | DONE cmt | em 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
5836:000 | DONE cmt | em 16 16 |        |             |                 ; PARSE doesn't
5837:000 | DONE ins | em 16 16 | 006a17 | 20 92 5c    |                 jsr 005c92           ( "string" -- addr u )
5838:000 | DONE wsp | em 16 16 |        |             |
5839:000 | DONE cmt | em 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
5840:000 | DONE cmt | em 16 16 |        |             |                 ; in the line and we need to go get a new line
5841:000 | DONE ins | em 16 16 | 006a1a | 98          |                 tya                  force flag check
5842:000 | DONE ins | em 16 16 | 006a1b | f0 52       |                 beq 006a6f           
5843:000 | DONE wsp | em 16 16 |        |             |
5844:000 | DONE cmt | em 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
5845:000 | DONE cmt | em 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
5846:000 | DONE cmt | em 16 16 |        |             |                 ; we have to go see if it is a number
5847:000 | DONE ins | em 16 16 | 006a1d | 20 1d 54    |                 jsr 00541d           TODO convert this to assembler
5848:000 | DONE ins | em 16 16 | 006a20 | 20 a3 59    |                 jsr 0059a3           ( addr u -- nt | 0 )
5849:000 | DONE wsp | em 16 16 |        |             |
5850:000 | DONE cmt | em 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
5851:000 | DONE ins | em 16 16 | 006a23 | 98          |                 tya                  
5852:000 | DONE ins | em 16 16 | 006a24 | d0 15       |                 bne 006a3b           
5853:000 | DONE wsp | em 16 16 |        |             |
5854:000 | DONE cmt | em 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
5855:000 | DONE cmt | em 16 16 |        |             |                 ; a number.
5856:000 | DONE ins | em 16 16 | 006a26 | 20 e3 58    |                 jsr 0058e3           TODO convert this to assembler
5857:000 | DONE wsp | em 16 16 |        |             |
5858:000 | DONE cmt | em 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
5859:000 | DONE cmt | em 16 16 |        |             |                 ; complaining for us
5860:000 | DONE ins | em 16 16 | 006a29 | 20 df 5b    |                 jsr 005bdf           ( addr u -- u | d )
5861:000 | DONE wsp | em 16 16 |        |             |
5862:000 | DONE cmt | em 16 16 |        |             |                 ; If we're interpreting, we're done
5863:000 | DONE ins | em 16 16 | 006a2c | a5 14       |                 lda.d 000014         
5864:000 | DONE ins | em 16 16 | 006a2e | f0 e7       |                 beq 006a17           
5865:000 | DONE wsp | em 16 16 |        |             |
5866:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so there is a bit more work. Note this
5867:000 | DONE cmt | em 16 16 |        |             |                 ; doesn't work with double-cell numbers, only single-cell
5868:000 | DONE ins | em 16 16 | 006a30 | f4 05 5b    |                 phe.# 005b05         LITERAL runtime
5869:000 | DONE ins | em 16 16 | 006a33 | 20 7b 6a    |                 jsr 006a7b           
5870:000 | DONE wsp | em 16 16 |        |             |
5871:000 | DONE cmt | em 16 16 |        |             |                 ; compile our number
5872:000 | DONE cmt | em 16 16 |        |             |                 ; TODO convert this to assembler
5873:000 | DONE ins | em 16 16 | 006a36 | 20 42 52    |                 jsr 005242           
5874:000 | DONE wsp | em 16 16 |        |             |
5875:000 | DONE cmt | em 16 16 |        |             |                 ; That was so much fun, let's do it again!
5876:000 | DONE ins | em 16 16 | 006a39 | 80 dc       |                 bra 006a17           
5877:000 | DONE wsp | em 16 16 |        |             |
5878:000 | DONE lbl | em 16 16 | 006a3b |             | interpret_got_name_token             
5879:000 | DONE cmt | em 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
5880:000 | DONE cmt | em 16 16 |        |             |                 ; though, which is four bytes father down.
5881:000 | DONE wsp | em 16 16 |        |             |
5882:000 | DONE cmt | em 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
5883:000 | DONE cmt | em 16 16 |        |             |                 ; really fast if Y is TOS
5884:000 | DONE ins | em 16 16 | 006a3b | e8          |                 inx                  
5885:000 | DONE ins | em 16 16 | 006a3c | e8          |                 inx                  
5886:000 | DONE ins | em 16 16 | 006a3d | e8          |                 inx                  
5887:000 | DONE ins | em 16 16 | 006a3e | e8          |                 inx                  
5888:000 | DONE wsp | em 16 16 |        |             |
5889:000 | DONE cmt | em 16 16 |        |             |                 ; This is a quicker
5890:000 | DONE cmt | em 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
5891:000 | DONE cmt | em 16 16 |        |             |                 ; error handling and compilation stuff.
5892:000 | DONE ins | em 16 16 | 006a3f | 84 1a       |                 sty.d 00001a         
5893:000 | DONE ins | em 16 16 | 006a41 | c8          |                 iny                  
5894:000 | DONE ins | em 16 16 | 006a42 | c8          |                 iny                  
5895:000 | DONE ins | em 16 16 | 006a43 | c8          |                 iny                  
5896:000 | DONE ins | em 16 16 | 006a44 | c8          |                 iny                  
5897:000 | DONE ins | em 16 16 | 006a45 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5898:000 | DONE ins | em 16 16 | 006a48 | a8          |                 tay                  xt is TOS
5899:000 | DONE wsp | em 16 16 |        |             |
5900:000 | DONE cmt | em 16 16 |        |             |                 ; See if we are in interpret or compile mode
5901:000 | DONE ins | em 16 16 | 006a49 | a5 14       |                 lda.d 000014         
5902:000 | DONE ins | em 16 16 | 006a4b | d0 14       |                 bne 006a61           
5903:000 | DONE wsp | em 16 16 |        |             |
5904:000 | DONE cmt | em 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
5905:000 | DONE cmt | em 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
5906:000 | DONE cmt | em 16 16 |        |             |                 ; illegal.
5907:000 | DONE ins | em 16 16 | 006a4d | b2 1a       |                 lda.di 00001a        
5908:000 | DONE ins | em 16 16 | 006a4f | eb          |                 xba                  flags are MSB
5909:000 | DONE ins | em 16 16 | 006a50 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
5910:000 | DONE ins | em 16 16 | 006a53 | f0 06       |                 beq 006a5b           
5911:000 | DONE wsp | em 16 16 |        |             |
5912:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if we can print offending word first
5913:000 | DONE ins | em 16 16 | 006a55 | a9 73 71    |                 lda.# 007173         
5914:000 | DONE ins | em 16 16 | 006a58 | 4c 9c 6a    |                 jmp 006a9c           
5915:000 | DONE wsp | em 16 16 |        |             |
5916:000 | DONE lbl | em 16 16 | 006a5b |             | interpret_interpret                  
5917:000 | DONE cmt | em 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
5918:000 | DONE cmt | em 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
5919:000 | DONE cmt | em 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
5920:000 | DONE cmt | em 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
5921:000 | DONE cmt | em 16 16 |        |             |                 ; instead, which is actually slightly slower
5922:000 | DONE ins | em 16 16 | 006a5b | 20 68 59    |                 jsr 005968           
5923:000 | DONE wsp | em 16 16 |        |             |
5924:000 | DONE cmt | em 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
5925:000 | DONE ins | em 16 16 | 006a5e | 4c 17 6a    |                 jmp 006a17           
5926:000 | DONE wsp | em 16 16 |        |             |
5927:000 | DONE lbl | em 16 16 | 006a61 |             | interpret_compile                    
5928:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
5929:000 | DONE cmt | em 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
5930:000 | DONE cmt | em 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
5931:000 | DONE cmt | em 16 16 |        |             |                 ; is easier
5932:000 | DONE ins | em 16 16 | 006a61 | b2 1a       |                 lda.di 00001a        
5933:000 | DONE ins | em 16 16 | 006a63 | eb          |                 xba                  flags are MSB
5934:000 | DONE ins | em 16 16 | 006a64 | 29 02 00    |                 and.# IM             Mask all but IM bit
5935:000 | DONE ins | em 16 16 | 006a67 | d0 f2       |                 bne 006a5b           IMMEDIATE word, execute right now
5936:000 | DONE wsp | em 16 16 |        |             |
5937:000 | DONE cmt | em 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
5938:000 | DONE ins | em 16 16 | 006a69 | 20 8a 56    |                 jsr 00568a           
5939:000 | DONE ins | em 16 16 | 006a6c | 4c 17 6a    |                 jmp 006a17           
5940:000 | DONE wsp | em 16 16 |        |             |
5941:000 | DONE lbl | em 16 16 | 006a6f |             | interpret_line_done                  
5942:000 | DONE cmt | em 16 16 |        |             |                 ; drop stuff from PARSE_NAME
5943:000 | DONE ins | em 16 16 | 006a6f | b4 02       |                 ldy.dx 02            
5944:000 | DONE ins | em 16 16 | 006a71 | e8          |                 inx                  
5945:000 | DONE ins | em 16 16 | 006a72 | e8          |                 inx                  
5946:000 | DONE ins | em 16 16 | 006a73 | e8          |                 inx                  
5947:000 | DONE ins | em 16 16 | 006a74 | e8          |                 inx                  
5948:000 | DONE wsp | em 16 16 |        |             |
5949:000 | DONE ins | em 16 16 | 006a75 | 60          |                 rts                  
5950:000 | DONE wsp | em 16 16 |        |             |
5951:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5952:000 | DONE cmt | em 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
5953:000 | DONE cmt | em 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
5954:000 | DONE cmt | em 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
5955:000 | DONE cmt | em 16 16 |        |             | ; address to be compiled on the Return Stack with
5956:000 | DONE cmt | em 16 16 |        |             | ;
5957:000 | DONE cmt | em 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
5958:000 | DONE cmt | em 16 16 |        |             | ;
5959:000 | DONE cmt | em 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
5960:000 | DONE cmt | em 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
5961:000 | DONE cmt | em 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
5962:000 | DONE cmt | em 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
5963:000 | DONE cmt | em 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
5964:000 | DONE wsp | em 16 16 |        |             |
5965:000 | DONE dir | em 16 16 |        |             |         .!a16                        paranoid
5966:000 | DONE lbl | em 16 16 | 006a76 |             | cmpl_word                            
5967:000 | DONE ins | em 16 16 | 006a76 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
5968:000 | DONE ins | em 16 16 | 006a79 | 80 08       |                 bra 006a83           
5969:000 | DONE lbl | em 16 16 | 006a7b |             | cmpl_subroutine                      
5970:000 | DONE ins | em 16 16 | 006a7b | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
5971:000 | DONE ins | em 16 16 | 006a7e | 80 03       |                 bra 006a83           
5972:000 | DONE lbl | em 16 16 | 006a80 |             | cmpl_jump                            
5973:000 | DONE ins | em 16 16 | 006a80 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
5974:000 | DONE lbl | em 16 16 | 006a83 |             | cmpl_common                          
5975:000 | DONE cmt | em 16 16 |        |             |                 ; we're going to need the Y register to get anything done
5976:000 | DONE ins | em 16 16 | 006a83 | 84 24       |                 sty.d 000024         
5977:000 | DONE wsp | em 16 16 |        |             |
5978:000 | DONE ins | em 16 16 | 006a85 | a8          |                 tay                  force flag check
5979:000 | DONE ins | em 16 16 | 006a86 | f0 08       |                 beq 006a90           came in through cmpl_word, just compile body
5980:000 | DONE wsp | em 16 16 |        |             |
5981:000 | DONE cmt | em 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
5982:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of C, ("c-comma")
5983:000 | DONE ins | em 16 16 | 006a88 | e2 20       |                 sep 20               
5983:001 | DONE ctl | em  8 16 |        |             |         .!a8
5984:000 | DONE ins | em  8 16 | 006a8a | 92 00       |                 sta.di 000000        STA (CP)
5985:000 | DONE ins | em  8 16 | 006a8c | c2 20       |                 rep 20               
5985:001 | DONE ctl | em 16 16 |        |             |         .!a16
5986:000 | DONE ins | em 16 16 | 006a8e | e6 00       |                 inc.d 000000         fall through to cmpl_body
5987:000 | DONE lbl | em 16 16 | 006a90 |             | cmpl_body                            
5988:000 | DONE ins | em 16 16 | 006a90 | 7a          |                 ply                  the return address we'll need later
5989:000 | DONE wsp | em 16 16 |        |             |
5990:000 | DONE ins | em 16 16 | 006a91 | 68          |                 pla                  next value on stack is the word to compile
5991:000 | DONE ins | em 16 16 | 006a92 | 92 00       |                 sta.di 000000        this is a quicker version of , ("comma")
5992:000 | DONE ins | em 16 16 | 006a94 | e6 00       |                 inc.d 000000         
5993:000 | DONE ins | em 16 16 | 006a96 | e6 00       |                 inc.d 000000         
5994:000 | DONE wsp | em 16 16 |        |             |
5995:000 | DONE ins | em 16 16 | 006a98 | 5a          |                 phy                  make sure we can get back home
5996:000 | DONE wsp | em 16 16 |        |             |
5997:000 | DONE ins | em 16 16 | 006a99 | a4 24       |                 ldy.d 000024         restore Data Stack
5998:000 | DONE wsp | em 16 16 |        |             |
5999:000 | DONE ins | em 16 16 | 006a9b | 60          |                 rts                  
6000:000 | DONE wsp | em 16 16 |        |             |
6001:000 | DONE wsp | em 16 16 |        |             |
6002:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
6003:000 | DONE cmt | em 16 16 |        |             | ; FATAL ERROR
6004:000 | DONE cmt | em 16 16 |        |             | ; Take address of error string from A, print it and then call abort
6005:000 | DONE lbl | em 16 16 | 006a9c |             | error                                
6006:000 | DONE ins | em 16 16 | 006a9c | 20 a2 6a    |                 jsr 006aa2           
6007:000 | DONE ins | em 16 16 | 006a9f | 4c af 50    |                 jmp 0050af           
6008:000 | DONE wsp | em 16 16 |        |             |
6009:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
6010:000 | DONE cmt | em 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
6011:000 | DONE cmt | em 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
6012:000 | DONE cmt | em 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
6013:000 | DONE cmt | em 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
6014:000 | DONE lbl | em 16 16 | 006aa2 |             | print_string                         
6015:000 | DONE dir | em 16 16 |        |             |         .!a16                        
6016:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
6017:000 | DONE cmt | em 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
6018:000 | DONE cmt | em 16 16 |        |             |                 ; used it for something already
6019:000 | DONE ins | em 16 16 | 006aa2 | da          |                 phx                  
6020:000 | DONE ins | em 16 16 | 006aa3 | aa          |                 tax                  x16 contains address of string
6021:000 | DONE lbl | em 16 16 | 006aa4 |             | @                                    
6022:000 | DONE ins | em 16 16 | 006aa4 | e2 20       |                 sep 20               
6022:001 | DONE ctl | em  8 16 |        |             |         .!a8
6023:000 | DONE ins | em  8 16 | 006aa6 | bd 00 00    |                 lda.x 0000           LDA $0000,X
6024:000 | DONE ins | em  8 16 | 006aa9 | f0 06       |                 beq 006ab1           
6025:000 | DONE ins | em  8 16 | 006aab | 20 10 59    |                 jsr 005910           
6026:000 | DONE ins | em  8 16 | 006aae | e8          |                 inx                  
6027:000 | DONE ins | em  8 16 | 006aaf | 80 f3       |                 bra 006aa4           
6028:000 | DONE wsp | em  8 16 |        |             |
6029:000 | DONE lbl | em  8 16 | 006ab1 |             | print_string_done                    
6030:000 | DONE ins | em  8 16 | 006ab1 | a9 0a       |                 lda.# AscLF          should be CR on some systems
6031:000 | DONE ins | em  8 16 | 006ab3 | 20 10 59    |                 jsr 005910           
6032:000 | DONE ins | em  8 16 | 006ab6 | c2 20       |                 rep 20               
6032:001 | DONE ctl | em 16 16 |        |             |         .!a16
6033:000 | DONE ins | em 16 16 | 006ab8 | fa          |                 plx                  
6034:000 | DONE wsp | em 16 16 |        |             |
6035:000 | DONE ins | em 16 16 | 006ab9 | 60          |                 rts                  
6036:000 | DONE wsp | em 16 16 |        |             |
6037:000 | DONE wsp | em 16 16 |        |             |
6038:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
6039:000 | DONE cmt | em 16 16 |        |             | ; PRINT UNSIGNED NUMBER
6040:000 | DONE cmt | em 16 16 |        |             | ; Is the equivalent to Forth's 0 <# S# #> TYPE or U. without the SPACE at the
6041:000 | DONE cmt | em 16 16 |        |             | ; end. TODO convert this to more assembler for speed
6042:000 | DONE lbl | em 16 16 | 006aba |             | print_u                              
6043:000 | DONE ins | em 16 16 | 006aba | ca          |                 dex                  0
6044:000 | DONE ins | em 16 16 | 006abb | ca          |                 dex                  
6045:000 | DONE ins | em 16 16 | 006abc | 94 00       |                 sty.dx 00            
6046:000 | DONE ins | em 16 16 | 006abe | a0 00 00    |                 ldy.# 0000           
6047:000 | DONE wsp | em 16 16 |        |             |
6048:000 | DONE ins | em 16 16 | 006ac1 | 20 79 5c    |                 jsr 005c79           <#
6049:000 | DONE ins | em 16 16 | 006ac4 | 84 18       |                 sty.d 000018         
6050:000 | DONE ins | em 16 16 | 006ac6 | b4 00       |                 ldy.dx 00            
6051:000 | DONE ins | em 16 16 | 006ac8 | e8          |                 inx                  
6052:000 | DONE ins | em 16 16 | 006ac9 | e8          |                 inx                  
6053:000 | DONE wsp | em 16 16 |        |             |
6054:000 | DONE ins | em 16 16 | 006aca | 20 b3 52    |                 jsr 0052b3           #S
6055:000 | DONE ins | em 16 16 | 006acd | 20 a4 52    |                 jsr 0052a4           #>
6056:000 | DONE ins | em 16 16 | 006ad0 | 20 2a 5f    |                 jsr 005f2a           
6057:000 | DONE wsp | em 16 16 |        |             |
6058:000 | DONE ins | em 16 16 | 006ad3 | 60          |                 rts                  
6059:000 | DONE wsp | em 16 16 |        |             |
6060:000 | DONE wsp | em 16 16 |        |             |
6061:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
6062:000 | DONE cmt | em 16 16 |        |             | ; CONVERT BYTE TO ASCII
6063:000 | DONE cmt | em 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
6064:000 | DONE cmt | em 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
6065:000 | DONE lbl | em 16 16 | 006ad4 |             | byte_to_ascii                        
6066:000 | DONE dir | em 16 16 |        |             |         .!a16                        
6067:000 | DONE ins | em 16 16 | 006ad4 | 48          |                 pha                  
6068:000 | DONE cmt | em 16 16 |        |             |                 ; convert high nibble first
6069:000 | DONE ins | em 16 16 | 006ad5 | 4a          |                 lsr.a                
6070:000 | DONE ins | em 16 16 | 006ad6 | 4a          |                 lsr.a                
6071:000 | DONE ins | em 16 16 | 006ad7 | 4a          |                 lsr.a                
6072:000 | DONE ins | em 16 16 | 006ad8 | 4a          |                 lsr.a                
6073:000 | DONE ins | em 16 16 | 006ad9 | 20 dd 6a    |                 jsr 006add           
6074:000 | DONE wsp | em 16 16 |        |             |
6075:000 | DONE ins | em 16 16 | 006adc | 68          |                 pla                  
6076:000 | DONE wsp | em 16 16 |        |             |
6077:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to nibble_to_ascii
6078:000 | DONE wsp | em 16 16 |        |             |
6079:000 | DONE wsp | em 16 16 |        |             |
6080:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
6081:000 | DONE cmt | em 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
6082:000 | DONE cmt | em 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
6083:000 | DONE cmt | em 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
6084:000 | DONE lbl | em 16 16 | 006add |             | nibble_to_ascii                      
6085:000 | DONE dir | em 16 16 |        |             |         .!a16                        
6086:000 | DONE ins | em 16 16 | 006add | 29 0f 00    |                 and.# 000f           
6087:000 | DONE ins | em 16 16 | 006ae0 | 09 30 00    |                 ora.# 30             
6088:000 | DONE ins | em 16 16 | 006ae3 | c9 3a 00    |                 cmp.# 003a           '9' + 1
6089:000 | DONE ins | em 16 16 | 006ae6 | 90 03       |                 bcc 006aeb           
6090:000 | DONE ins | em 16 16 | 006ae8 | 69 06 00    |                 adc.# 0006           
6091:000 | DONE lbl | em 16 16 | 006aeb |             | @                                    
6092:000 | DONE ins | em 16 16 | 006aeb | 20 10 59    |                 jsr 005910           
6093:000 | DONE wsp | em 16 16 |        |             |
6094:000 | DONE ins | em 16 16 | 006aee | 60          |                 rts                  
6095:000 | DONE wsp | em 16 16 |        |             |
6096:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6097:000 | DONE cmt | em 16 16 |        |             | ; HIGH-LEVEL WORDS
6098:000 | DONE wsp | em 16 16 |        |             |
6099:000 | DONE cmt | em 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
6100:000 | DONE cmt | em 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
6101:000 | DONE cmt | em 16 16 |        |             | ; or CR/LF is required
6102:000 | DONE lbl | em 16 16 | 006aef |             | hi-start                             
6103:000 | DONE cmt | em 16 16 |        |             |         ; Output and comment words
6104:000 | DONE dir | em 16 16 | 006aef | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) 
6104:000 | DONE dir | em 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
6104:000 | DONE dir | em 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
6104:000 | DONE dir | em 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
6104:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
6104:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
6105:000 | DONE dir | em 16 16 | 006b14 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) 
6105:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
6105:000 | DONE dir | em 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
6105:000 | DONE dir | em 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
6105:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
6105:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
6106:000 | DONE wsp | em 16 16 |        |             |
6107:000 | DONE cmt | em 16 16 |        |             |         ; High flow control. Some of these could be realized with CS-ROLL and
6108:000 | DONE cmt | em 16 16 |        |             |         ; CS-PICK instead
6109:000 | DONE dir | em 16 16 | 006b39 | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) 
6109:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
6109:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
6109:000 | DONE dir | em 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
6109:000 | DONE dir | em 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
6109:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
6109:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
6109:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
6109:000 | DONE dir | em 16 16 |        |             |                                          -- 
6110:000 | DONE dir | em 16 16 | 006b71 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) 
6110:000 | DONE dir | em 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
6110:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
6110:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
6110:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
6110:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
6110:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
6111:000 | DONE dir | em 16 16 | 006b9d | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) 
6111:000 | DONE dir | em 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
6111:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
6111:000 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
6111:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
6111:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
6111:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
6111:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
6111:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
6111:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
6112:000 | DONE dir | em 16 16 | 006be1 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) 
6112:000 | DONE dir | em 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
6112:000 | DONE dir | em 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
6112:000 | DONE dir | em 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
6112:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
6112:000 | DONE dir | em 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
6112:000 | DONE dir | em 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
6112:000 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
6112:000 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
6113:000 | DONE dir | em 16 16 | 006c1e | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) 
6113:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
6113:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
6113:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
6113:000 | DONE dir | em 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
6113:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
6113:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
6113:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
6114:000 | DONE dir | em 16 16 | 006c52 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) 
6114:000 | DONE dir | em 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
6114:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
6114:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
6114:000 | DONE dir | em 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
6114:000 | DONE dir | em 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
6114:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
6114:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
6114:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
6114:000 | DONE dir | em 16 16 |        |             |                                          -- 
6115:000 | DONE wsp | em 16 16 |        |             |
6116:000 | DONE cmt | em 16 16 |        |             |         ; DEFER's friends. Code taken from ANSI Forth specifications. Many of
6117:000 | DONE cmt | em 16 16 |        |             |         ; these will be moved to assembler code in due course
6118:000 | DONE dir | em 16 16 | 006c92 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 21, 20, 3e, 62, 6f, 64, (...) 
6118:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 21  --  :   d e f e r !
6118:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 21  --    > b o d y   !
6118:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
6119:000 | DONE dir | em 16 16 | 006ca5 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 40, 20, 3e, 62, 6f, 64, (...) 
6119:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 40  --  :   d e f e r @
6119:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 40  --    > b o d y   @
6119:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
6120:000 | DONE dir | em 16 16 | 006cb8 | (76 bytes)  |         .byte 3a, 20, 69, 73, 20, 73, 74, 61, 74, 65, 20, 40, 20, (...) 
6120:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 73 20 73 74 61  --  :   i s   s t a
6120:000 | DONE dir | em 16 16 |        |             |                 74 65 20 40 20 69 66 20  --  t e   @   i f  
6120:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
6120:000 | DONE dir | em 16 16 |        |             |                 20 5b 27 5d 20 70 6f 73  --    [ ' ]   p o s
6120:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 64 65  --  t p o n e   d e
6120:000 | DONE dir | em 16 16 |        |             |                 66 65 72 21 20 65 6c 73  --  f e r !   e l s
6120:000 | DONE dir | em 16 16 |        |             |                 65 20 27 20 64 65 66 65  --  e   '   d e f e
6120:000 | DONE dir | em 16 16 |        |             |                 72 21 20 74 68 65 6e 20  --  r !   t h e n  
6120:000 | DONE dir | em 16 16 |        |             |                 3b 20 69 6d 6d 65 64 69  --  ;   i m m e d i
6120:000 | DONE dir | em 16 16 |        |             |                 61 74 65 20              --  a t e  
6121:000 | DONE dir | em 16 16 | 006d04 | (83 bytes)  |         .byte 3a, 20, 61, 63, 74, 69, 6f, 6e, 2d, 6f, 66, 20, 73, (...) 
6121:000 | DONE dir | em 16 16 |        |             |                 3a 20 61 63 74 69 6f 6e  --  :   a c t i o n
6121:000 | DONE dir | em 16 16 |        |             |                 2d 6f 66 20 73 74 61 74  --  - o f   s t a t
6121:000 | DONE dir | em 16 16 |        |             |                 65 20 40 20 69 66 20 70  --  e   @   i f   p
6121:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
6121:000 | DONE dir | em 16 16 |        |             |                 5b 27 5d 20 70 6f 73 74  --  [ ' ]   p o s t
6121:000 | DONE dir | em 16 16 |        |             |                 70 6f 6e 65 20 64 65 66  --  p o n e   d e f
6121:000 | DONE dir | em 16 16 |        |             |                 65 72 40 20 65 6c 73 65  --  e r @   e l s e
6121:000 | DONE dir | em 16 16 |        |             |                 20 27 20 64 65 66 65 72  --    '   d e f e r
6121:000 | DONE dir | em 16 16 |        |             |                 40 20 74 68 65 6e 20 3b  --  @   t h e n   ;
6121:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
6121:000 | DONE dir | em 16 16 |        |             |                 74 65 20                 --  t e  
6122:000 | DONE wsp | em 16 16 |        |             |
6123:000 | DONE cmt | em 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
6124:000 | DONE cmt | em 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
6125:000 | DONE cmt | em 16 16 |        |             |         ; stuff
6126:000 | DONE dir | em 16 16 | 006d57 | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
6126:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
6126:000 | DONE dir | em 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
6126:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
6126:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
6126:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6127:000 | DONE dir | em 16 16 | 006d78 | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
6127:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
6127:000 | DONE dir | em 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
6127:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
6127:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
6128:000 | DONE dir | em 16 16 | 006d92 | (18 bytes)  |         .byte 3a, 20, 6d, 6f, 64, 20, 2f, 6d, 6f, 64, 20, 64, 72, (...) 
6128:000 | DONE dir | em 16 16 |        |             |                 3a 20 6d 6f 64 20 2f 6d  --  :   m o d   / m
6128:000 | DONE dir | em 16 16 |        |             |                 6f 64 20 64 72 6f 70 20  --  o d   d r o p  
6128:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
6129:000 | DONE dir | em 16 16 | 006da4 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
6129:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
6129:000 | DONE dir | em 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
6129:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
6129:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
6129:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6130:000 | DONE dir | em 16 16 | 006dc5 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
6130:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
6130:000 | DONE dir | em 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
6130:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
6130:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
6131:000 | DONE wsp | em 16 16 |        |             |
6132:000 | DONE cmt | em 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
6133:000 | DONE cmt | em 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
6134:000 | DONE cmt | em 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
6135:000 | DONE cmt | em 16 16 |        |             |         ; . (DOT) and U. are hard-coded because there are used by other words
6136:000 | DONE dir | em 16 16 | 006ddf | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
6136:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
6136:000 | DONE dir | em 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
6136:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
6136:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
6136:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
6136:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
6137:000 | DONE dir | em 16 16 | 006e0b | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
6137:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
6137:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
6137:000 | DONE dir | em 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
6137:000 | DONE dir | em 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
6137:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
6137:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
6137:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
6137:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
6138:000 | DONE dir | em 16 16 | 006e47 | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
6138:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
6138:000 | DONE dir | em 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
6138:000 | DONE dir | em 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
6138:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
6139:000 | DONE dir | em 16 16 | 006e63 | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
6139:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
6139:000 | DONE dir | em 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
6139:000 | DONE dir | em 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
6139:000 | DONE dir | em 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
6139:000 | DONE dir | em 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
6139:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
6140:000 | DONE dir | em 16 16 | 006e8e | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
6140:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
6140:000 | DONE dir | em 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
6140:000 | DONE dir | em 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
6140:000 | DONE dir | em 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
6140:000 | DONE dir | em 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
6140:000 | DONE dir | em 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
6141:000 | DONE dir | em 16 16 | 006ebc | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
6141:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
6141:000 | DONE dir | em 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
6141:000 | DONE dir | em 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
6141:000 | DONE dir | em 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
6141:000 | DONE dir | em 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
6141:000 | DONE dir | em 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
6141:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
6141:000 | DONE dir | em 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
6142:000 | DONE wsp | em 16 16 |        |             |
6143:000 | DONE cmt | em 16 16 |        |             |         ; Various words. Convert these to assembler
6144:000 | DONE dir | em 16 16 | 006ef9 | (58 bytes)  |         .byte 3a, 20, 77, 69, 74, 68, 69, 6e, 20, 28, 20, 6e, 31, (...) 
6144:000 | DONE dir | em 16 16 |        |             |                 3a 20 77 69 74 68 69 6e  --  :   w i t h i n
6144:000 | DONE dir | em 16 16 |        |             |                 20 28 20 6e 31 20 6e 32  --    (   n 1   n 2
6144:000 | DONE dir | em 16 16 |        |             |                 20 6e 33 20 2d 2d 20 66  --    n 3   - -   f
6144:000 | DONE dir | em 16 16 |        |             |                 20 29 20 72 6f 74 20 74  --    )   r o t   t
6144:000 | DONE dir | em 16 16 |        |             |                 75 63 6b 20 3e 20 2d 72  --  u c k   >   - r
6144:000 | DONE dir | em 16 16 |        |             |                 6f 74 20 3e 20 69 6e 76  --  o t   >   i n v
6144:000 | DONE dir | em 16 16 |        |             |                 65 72 74 20 61 6e 64 20  --  e r t   a n d  
6144:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
6145:000 | DONE wsp | em 16 16 |        |             |
6146:000 | DONE cmt | em 16 16 |        |             |         ; DUMP is a longish word we'll want to modify for a while until we are
6147:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
6148:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": dump ( addr u -- ) bounds ?do cr i 4 u.r space "
6149:000 | DONE cmt | em 16 16 |        |             | 	; .byte "16 0 do i j + c@ 0 <# # #s #> type space loop 16 +loop ; "
6150:000 | DONE wsp | em 16 16 |        |             |
6151:000 | DONE cmt | em 16 16 |        |             |         ; SEE is a longish word we'll want to modify for a while until we are
6152:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
6153:000 | DONE cmt | em 16 16 |        |             |         ; TODO replace by code, this is far too long
6154:000 | DONE dir | em 16 16 | 006f33 | (55 bytes)  |         .byte 3a, 20, 73, 65, 65, 20, 70, 61, 72, 73, 65, 2d, 6e, (...) 
6154:000 | DONE dir | em 16 16 |        |             |                 3a 20 73 65 65 20 70 61  --  :   s e e   p a
6154:000 | DONE dir | em 16 16 |        |             |                 72 73 65 2d 6e 61 6d 65  --  r s e - n a m e
6154:000 | DONE dir | em 16 16 |        |             |                 20 66 69 6e 64 2d 6e 61  --    f i n d - n a
6154:000 | DONE dir | em 16 16 |        |             |                 6d 65 20 64 75 70 20 30  --  m e   d u p   0
6154:000 | DONE dir | em 16 16 |        |             |                 3d 20 61 62 6f 72 74 22  --  =   a b o r t "
6154:000 | DONE dir | em 16 16 |        |             |                 20 4e 6f 20 73 75 63 68  --    N o   s u c h
6154:000 | DONE dir | em 16 16 |        |             |                 20 6e 61 6d 65 22 20     --    n a m e "  
6155:000 | DONE dir | em 16 16 | 006f6a | (38 bytes)  |         .byte 62, 61, 73, 65, 20, 40, 20, 3e, 72, 20, 68, 65, 78, (...) 
6155:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 40 20 3e  --  b a s e   @   >
6155:000 | DONE dir | em 16 16 |        |             |                 72 20 68 65 78 20 64 75  --  r   h e x   d u
6155:000 | DONE dir | em 16 16 |        |             |                 70 20 63 72 20 73 70 61  --  p   c r   s p a
6155:000 | DONE dir | em 16 16 |        |             |                 63 65 20 2e 22 20 6e 74  --  c e   . "   n t
6155:000 | DONE dir | em 16 16 |        |             |                 3a 20 22 20 2e 20        --  :   "   .  
6156:000 | DONE dir | em 16 16 | 006f90 | (27 bytes)  |         .byte 64, 75, 70, 20, 34, 20, 2b, 20, 40, 20, 73, 70, 61, (...) 
6156:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 34 20 2b 20  --  d u p   4   +  
6156:000 | DONE dir | em 16 16 |        |             |                 40 20 73 70 61 63 65 20  --  @   s p a c e  
6156:000 | DONE dir | em 16 16 |        |             |                 2e 22 20 78 74 3a 20 22  --  . "   x t :   "
6156:000 | DONE dir | em 16 16 |        |             |                 20 2e 20                 --    .  
6157:000 | DONE dir | em 16 16 | 006fab | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 31, 20, 61, (...) 
6157:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
6157:000 | DONE dir | em 16 16 |        |             |                 40 20 31 20 61 6e 64 20  --  @   1   a n d  
6157:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
6157:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 4e 43 22 20  --    . "   N C "  
6157:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
6158:000 | DONE dir | em 16 16 | 006fd0 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 32, 20, 61, (...) 
6158:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
6158:000 | DONE dir | em 16 16 |        |             |                 40 20 32 20 61 6e 64 20  --  @   2   a n d  
6158:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
6158:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 49 4d 22 20  --    . "   I M "  
6158:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
6159:000 | DONE dir | em 16 16 | 006ff5 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 34, 20, 61, (...) 
6159:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
6159:000 | DONE dir | em 16 16 |        |             |                 40 20 34 20 61 6e 64 20  --  @   4   a n d  
6159:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
6159:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 43 4f 22 20  --    . "   C O "  
6159:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
6160:000 | DONE dir | em 16 16 | 00701a | (57 bytes)  |         .byte 64, 75, 70, 20, 63, 72, 20, 73, 70, 61, 63, 65, 20, (...) 
6160:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 63 72 20 73  --  d u p   c r   s
6160:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 20 2e 22 20  --  p a c e   . "  
6160:000 | DONE dir | em 16 16 |        |             |                 73 69 7a 65 20 28 64 65  --  s i z e   ( d e
6160:000 | DONE dir | em 16 16 |        |             |                 63 69 6d 61 6c 29 3a 20  --  c i m a l ) :  
6160:000 | DONE dir | em 16 16 |        |             |                 22 20 64 65 63 69 6d 61  --  "   d e c i m a
6160:000 | DONE dir | em 16 16 |        |             |                 6c 20 77 6f 72 64 73 69  --  l   w o r d s i
6160:000 | DONE dir | em 16 16 |        |             |                 7a 65 20 64 75 70 20 2e  --  z e   d u p   .
6160:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6161:000 | DONE dir | em 16 16 | 007053 | (49 bytes)  |         .byte 73, 77, 61, 70, 20, 6e, 61, 6d, 65, 3e, 69, 6e, 74, (...) 
6161:000 | DONE dir | em 16 16 |        |             |                 73 77 61 70 20 6e 61 6d  --  s w a p   n a m
6161:000 | DONE dir | em 16 16 |        |             |                 65 3e 69 6e 74 20 73 77  --  e > i n t   s w
6161:000 | DONE dir | em 16 16 |        |             |                 61 70 20 68 65 78 20 63  --  a p   h e x   c
6161:000 | DONE dir | em 16 16 |        |             |                 72 20 73 70 61 63 65 20  --  r   s p a c e  
6161:000 | DONE dir | em 16 16 |        |             |                 64 75 6d 70 20 72 3e 20  --  d u m p   r >  
6161:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 21 20 3b  --  b a s e   !   ;
6161:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6162:000 | DONE wsp | em 16 16 |        |             |
6163:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6164:000 | DONE cmt | em 16 16 |        |             | ; USER INCLUDES
6165:000 | DONE wsp | em 16 16 |        |             |
6166:000 | DONE cmt | em 16 16 |        |             | ; Include any Forth words defined by the user in USER.TASM
6167:000 | DONE wsp | em 16 16 |        |             |
6169:000 | DONE wsp | em 16 16 |        |             |
6170:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6171:000 | DONE wsp | em 16 16 |        |             |
6172:000 | DONE cmt | em 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
6173:000 | DONE cmt | em 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
6174:000 | DONE cmt | em 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
6175:000 | DONE dir | em 16 16 | 007084 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
6175:000 | DONE dir | em 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
6175:000 | DONE dir | em 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
6175:000 | DONE dir | em 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
6175:000 | DONE dir | em 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
6175:000 | DONE dir | em 16 16 |        |             |                 42 20 29                 --  B   )
6176:000 | DONE dir | em 16 16 | 0070a7 | (39 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
6176:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
6176:000 | DONE dir | em 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
6176:000 | DONE dir | em 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
6176:000 | DONE dir | em 16 16 |        |             |                 31 39 2e 20 4d 61 72 63  --  1 9 .   M a r c
6176:000 | DONE dir | em 16 16 |        |             |                 68 20 32 30 31 37 29     --  h   2 0 1 7 )
6177:000 | DONE dir | em 16 16 | 0070ce | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
6177:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
6177:000 | DONE dir | em 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
6177:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
6177:000 | DONE dir | em 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
6177:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
6177:000 | DONE dir | em 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
6177:000 | DONE dir | em 16 16 |        |             |                 6d 3e 29                 --  m > )
6178:000 | DONE dir | em 16 16 | 007101 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
6178:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
6178:000 | DONE dir | em 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
6178:000 | DONE dir | em 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
6178:000 | DONE dir | em 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
6178:000 | DONE dir | em 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
6178:000 | DONE dir | em 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
6178:000 | DONE dir | em 16 16 |        |             |                 4e 54 59 29              --  N T Y )
6179:000 | DONE dir | em 16 16 | 007135 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
6179:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
6179:000 | DONE dir | em 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
6179:000 | DONE dir | em 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
6179:000 | DONE dir | em 16 16 |        |             |                 29 20 63 72              --  )   c r
6180:000 | DONE lbl | em 16 16 | 007151 |             | hi-end                               
6181:000 | DONE wsp | em 16 16 |        |             |
6182:000 | DONE wsp | em 16 16 |        |             |
6183:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6184:000 | DONE cmt | em 16 16 |        |             | ; BOTTOM INCLUDES
6185:000 | DONE wsp | em 16 16 |        |             |
6186:000 | DONE cmt | em 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
6186:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
6186:002 | DONE cmt | em 16 16 |        |             | ; First version: 01. Apr 2016
6186:003 | DONE cmt | em 16 16 |        |             | ; This version:  11. Mar 2017
6186:004 | DONE wsp | em 16 16 |        |             |
6186:005 | DONE cmt | em 16 16 |        |             | ; This file is included by liaraforth.tasm
6186:006 | DONE wsp | em 16 16 |        |             |
6186:007 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6186:008 | DONE cmt | em 16 16 |        |             | ; GENERAL
6186:009 | DONE wsp | em 16 16 |        |             |
6186:010 | DONE cmt | em 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
6186:011 | DONE wsp | em 16 16 |        |             |
6186:012 | DONE lbl | em 16 16 | 007151 |             | s_ok                                 
6186:013 | DONE dir | em 16 16 | 007151 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
6186:013 | DONE dir | em 16 16 |        |             |                 20 6f 6b 00              --    o k .
6186:014 | DONE lbl | em 16 16 | 007155 |             | s_compiled                           
6186:015 | DONE dir | em 16 16 | 007155 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
6186:015 | DONE dir | em 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
6186:015 | DONE dir | em 16 16 |        |             |                 64 00                    --  d .
6186:016 | DONE wsp | em 16 16 |        |             |
6186:017 | DONE wsp | em 16 16 |        |             |
6186:018 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6186:019 | DONE cmt | em 16 16 |        |             | ; ERROR STRINGS
6186:020 | DONE wsp | em 16 16 |        |             |
6186:021 | DONE cmt | em 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
6186:022 | DONE wsp | em 16 16 |        |             |
6186:023 | DONE lbl | em 16 16 | 00715f |             | es_allot                             
6186:024 | DONE dir | em 16 16 | 00715f | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
6186:024 | DONE dir | em 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
6186:024 | DONE dir | em 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
6186:024 | DONE dir | em 16 16 |        |             |                 6e 64 73 00              --  n d s .
6186:025 | DONE lbl | em 16 16 | 007173 |             | es_componly                          
6186:026 | DONE dir | em 16 16 | 007173 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
6186:026 | DONE dir | em 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
6186:026 | DONE dir | em 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
6186:026 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
6186:026 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
6186:026 | DONE dir | em 16 16 |        |             |                 00                       --  .
6186:027 | DONE lbl | em 16 16 | 007194 |             | es_defer                             
6186:028 | DONE dir | em 16 16 | 007194 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
6186:028 | DONE dir | em 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
6186:028 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
6186:028 | DONE dir | em 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
6186:028 | DONE dir | em 16 16 |        |             |                 20 79 65 74 00           --    y e t .
6186:029 | DONE lbl | em 16 16 | 0071b1 |             | es_divzero                           
6186:030 | DONE dir | em 16 16 | 0071b1 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
6186:030 | DONE dir | em 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
6186:030 | DONE dir | em 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
6186:030 | DONE dir | em 16 16 |        |             |                 00                       --  .
6186:031 | DONE lbl | em 16 16 | 0071c2 |             | es_error                             
6186:032 | DONE dir | em 16 16 | 0071c2 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
6186:032 | DONE dir | em 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
6186:032 | DONE dir | em 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
6186:033 | DONE lbl | em 16 16 | 0071ce |             | es_intonly                           
6186:034 | DONE dir | em 16 16 | 0071ce | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
6186:034 | DONE dir | em 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
6186:034 | DONE dir | em 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
6186:034 | DONE dir | em 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
6186:035 | DONE lbl | em 16 16 | 0071e4 |             | es_noname                            
6186:036 | DONE dir | em 16 16 | 0071e4 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
6186:036 | DONE dir | em 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
6186:036 | DONE dir | em 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
6186:036 | DONE dir | em 16 16 |        |             |                                          -- 
6186:037 | DONE lbl | em 16 16 | 0071f4 |             | es_radix                             
6186:038 | DONE dir | em 16 16 | 0071f4 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
6186:038 | DONE dir | em 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
6186:038 | DONE dir | em 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
6186:038 | DONE dir | em 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
6186:039 | DONE lbl | em 16 16 | 00720b |             | es_refill1                           
6186:040 | DONE dir | em 16 16 | 00720b | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
6186:040 | DONE dir | em 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
6186:040 | DONE dir | em 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
6186:040 | DONE dir | em 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
6186:040 | DONE dir | em 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
6186:040 | DONE dir | em 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
6186:040 | DONE dir | em 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
6186:041 | DONE lbl | em 16 16 | 007239 |             | es_refill2                           
6186:042 | DONE dir | em 16 16 | 007239 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
6186:042 | DONE dir | em 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
6186:042 | DONE dir | em 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
6186:042 | DONE dir | em 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
6186:042 | DONE dir | em 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
6186:042 | DONE dir | em 16 16 |        |             |                                          -- 
6186:043 | DONE lbl | em 16 16 | 007259 |             | es_state                             
6186:044 | DONE dir | em 16 16 | 007259 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
6186:044 | DONE dir | em 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
6186:044 | DONE dir | em 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
6186:044 | DONE dir | em 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
6186:044 | DONE dir | em 16 16 |        |             |                                          -- 
6186:045 | DONE lbl | em 16 16 | 007271 |             | es_underflow                         
6186:046 | DONE dir | em 16 16 | 007271 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
6186:046 | DONE dir | em 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
6186:046 | DONE dir | em 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
6186:046 | DONE dir | em 16 16 |        |             |                                          -- 
6186:047 | DONE lbl | em 16 16 | 007281 |             | es_syntax                            
6186:048 | DONE dir | em 16 16 | 007281 | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
6186:048 | DONE dir | em 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
6186:048 | DONE dir | em 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
6186:049 | DONE wsp | em 16 16 |        |             |
6186:050 | DONE wsp | em 16 16 |        |             |
6186:051 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6186:052 | DONE cmt | em 16 16 |        |             | ; ANSI VT-100 SEQUENCES
6186:053 | DONE wsp | em 16 16 |        |             |
6186:054 | DONE lbl | em 16 16 | 007290 |             | vt100_page                           
6186:055 | DONE dir | em 16 16 | 007290 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
6186:055 | DONE dir | em 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
6186:056 | DONE lbl | em 16 16 | 007295 |             | vt100_home                           
6186:057 | DONE dir | em 16 16 | 007295 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
6186:057 | DONE dir | em 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
6186:058 | DONE wsp | em 16 16 |        |             |
6186:059 | DONE wsp | em 16 16 |        |             |
6186:060 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6186:061 | DONE cmt | em 16 16 |        |             | ; TESTING STRINGS
6186:062 | DONE wsp | em 16 16 |        |             |
6186:063 | DONE cmt | em 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
6186:064 | DONE cmt | em 16 16 |        |             | ; developed. All start with "tests_"
6186:065 | DONE wsp | em 16 16 |        |             |
6186:066 | DONE lbl | em 16 16 | 007299 |             | tests_prev_cmd                       
6186:067 | DONE dir | em 16 16 | 007299 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
6186:067 | DONE dir | em 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
6186:067 | DONE dir | em 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
6186:067 | DONE dir | em 16 16 |        |             |                 64 29 00                 --  d ) .
6186:068 | DONE lbl | em 16 16 | 0072ac |             | tests_next_cmd                       
6186:069 | DONE dir | em 16 16 | 0072ac | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
6186:069 | DONE dir | em 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
6186:069 | DONE dir | em 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
6186:070 | DONE wsp | em 16 16 |        |             |
6186:071 | DONE wsp | em 16 16 |        |             |
6186:072 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6186:073 | DONE cmt | em 16 16 |        |             | ; ALPHABET STRINGS
6186:074 | DONE wsp | em 16 16 |        |             |
6186:075 | DONE cmt | em 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
6186:076 | DONE cmt | em 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
6186:077 | DONE cmt | em 16 16 |        |             | ; TODO see if we need lower
6186:078 | DONE wsp | em 16 16 |        |             |
6186:079 | DONE lbl | em 16 16 | 0072bb |             | abc_str_lower                        
6186:080 | DONE dir | em 16 16 | 0072bb | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
6186:080 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
6186:080 | DONE dir | em 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
6186:080 | DONE dir | em 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
6186:080 | DONE dir | em 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
6186:080 | DONE dir | em 16 16 |        |             |                 77 79 7a                 --  w y z
6186:081 | DONE lbl | em 16 16 | 0072de |             | abc_str_upper                        
6186:082 | DONE dir | em 16 16 | 0072de | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, (...) 
6186:082 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
6186:082 | DONE dir | em 16 16 |        |             |                 38 39 41 42 43 44 45 46  --  8 9 A B C D E F
6186:082 | DONE dir | em 16 16 |        |             |                 47 48 49 4a 4b 4c 4d 4e  --  G H I J K L M N
6186:082 | DONE dir | em 16 16 |        |             |                 4f 50 51 52 53 54 55 56  --  O P Q R S T U V
6186:082 | DONE dir | em 16 16 |        |             |                 57 59 5a                 --  W Y Z
6186:083 | DONE wsp | em 16 16 |        |             |
6187:000 | DONE wsp | em 16 16 |        |             |
6188:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6189:000 | DONE cmt | em 16 16 |        |             | ; END
6190:000 | DONE dir | em 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abc_str_lower               : 0072bb
- abc_str_upper               : 0072de
- abortq_done                 : 0054a8
- abortq_rt                   : 00549e
- accept_bs                   : 005527
- accept_eol                  : 005520
- accept_loop                 : 0054cd
- accept_nonzero              : 0054c2
- adjust_z                    : 005737
- allot_done                  : 005585
- allot_error                 : 005574
- allot_minus                 : 00557a
- allot_real_gone             : 005587
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 000016
- branch_rt                   : 0055ea
- brg_value                   : 00000b
- bsize                       : 000080
- buffer0                     : 000200
- buffer1                     : 000280
- byte_to_ascii               : 006ad4
- char_got_char               : 005637
- cib                         : 000008
- ciblen                      : 00000a
- cmpl_body                   : 006a90
- cmpl_common                 : 006a83
- cmpl_jump                   : 006a80
- cmpl_subroutine             : 006a7b
- cmpl_word                   : 006a76
- co                          : 000004
- code0                       : 005000
- compile_2r                  : 0056ef
- compile_as_code             : 0056ae
- compile_as_jump             : 005707
- compile_check               : 00569c
- compile_move                : 0056fb
- compile_not_nop             : 0056d1
- compile_r                   : 0056e9
- cp                          : 000000
- cp-end                      : 004fff
- cp0                         : 000300
- create_got_name             : 00576d
- defer_error                 : 0069fd
- do_common                   : 00588e
- do_compile                  : 0058b6
- do_do                       : 0058b3
- doconst                     : 0069e6
- dodefer                     : 0069f4
- dodoes                      : 006a03
- does_rt                     : 0058cd
- dots_done                   : 00523e
- dots_loop                   : 00522b
- dots_not_empty              : 005226
- dovar                       : 006a10
- dp                          : 000002
- dpage                       : 000000
- dq_case_done                : 00580a
- dq_checkbase                : 00580d
- dq_notdigit                 : 005814
- dq_success                  : 00581f
- dsp0                        : 0000ff
- dtrailing_done              : 005388
- dtrailing_loop              : 00537f
- dump_done                   : 0058ff
- dump_loop                   : 0058e9
- emit_a                      : 005910
- equal_not                   : 005395
- erase_done                  : 00592b
- erase_loop                  : 005924
- error                       : 006a9c
- es_allot                    : 00715f
- es_componly                 : 007173
- es_defer                    : 007194
- es_divzero                  : 0071b1
- es_error                    : 0071c2
- es_intonly                  : 0071ce
- es_noname                   : 0071e4
- es_radix                    : 0071f4
- es_refill1                  : 00720b
- es_refill2                  : 007239
- es_state                    : 007259
- es_syntax                   : 007281
- es_underflow                : 007271
- execute_ip                  : 005965
- find-name_all_chars         : 0059d1
- find-name_char_nomatcnt_8   : 0059cd
- find-name_chars             : 0059c2
- find-name_done              : 0059f7
- find-name_failure_16        : 0059f4
- find-name_loop              : 0059ad
- find-name_next_entry        : 0059b6
- find-name_success           : 0059ee
- find_found                  : 005988
- find_imm                    : 0059a1
- fmmod_1                     : 005a18
- fmmod_1_1                   : 005a1c
- fmmod_2                     : 005a49
- fmmod_2_1                   : 005a4d
- fn                          : 000008
- get_chr                     : 005045
- get_chr_wait                : 005049
- greater_nip                 : 005131
- greater_no_ov               : 00512e
- hashs_loop                  : 0052b3
- have_chr                    : 005057
- havekey                     : 000012
- hi-end                      : 007151
- hi-start                    : 006aef
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- im                          : 000002
- in_found                    : 005aa9
- in_loop                     : 005a91
- in_notfound                 : 005aa3
- input                       : 000010
- insrc                       : 000006
- interpret                   : 006a17
- interpret_compile           : 006a61
- interpret_got_name_token    : 006a3b
- interpret_interpret         : 006a5b
- interpret_line_done         : 006a6f
- interpret_loop              : 006a17
- less_nip                    : 005107
- less_no_ov                  : 005104
- literal_rt                  : 005b05
- lshift_done                 : 005b21
- lshift_loop                 : 005b1b
- max_drop                    : 005b7e
- max_nip                     : 005b80
- max_no_ov                   : 005b7c
- min_drop                    : 005b91
- min_nip                     : 005b93
- min_no_ov                   : 005b8f
- move_cmoveup                : 005ba6
- mstar_abs_nos               : 005b32
- mstar_umstar                : 005b3c
- nc                          : 000001
- nc_limit                    : 000026
- nibble_to_ascii             : 006add
- not-equal_equal             : 005113
- nt_2drop                    : 00695e
- nt_2dup                     : 00666f
- nt_2over                    : 006929
- nt_2swap                    : 006936
- nt_2variable                : 006276
- nt_abort                    : 00636e
- nt_abortq                   : 006360
- nt_abs                      : 00667b
- nt_accept                   : 0068c1
- nt_again                    : 0065de
- nt_align                    : 0060f6
- nt_aligned                  : 0060e7
- nt_allot                    : 00661a
- nt_and                      : 006766
- nt_at-xy                    : 00625e
- nt_backslash                : 0068e6
- nt_base                     : 006484
- nt_begin                    : 0065eb
- nt_bell                     : 0061f7
- nt_bl                       : 00641f
- nt_bounds                   : 006997
- nt_bracketchar              : 006507
- nt_brackettick              : 0064fc
- nt_branch                   : 0065d0
- nt_bye                      : 0060b8
- nt_c-comma                  : 006789
- nt_c-fetch                  : 006793
- nt_c-store                  : 00679d
- nt_cellplus                 : 006210
- nt_cells                    : 0064cb
- nt_char                     : 006737
- nt_charplus                 : 00621d
- nt_chars                    : 006203
- nt_cmove                    : 006346
- nt_cmoveup                  : 006338
- nt_cold                     : 0060c3
- nt_colon                    : 006611
- nt_comma                    : 0068b8
- nt_compile-only             : 00653a
- nt_compilecomma             : 0065f8
- nt_constant                 : 0066d0
- nt_count                    : 006353
- nt_cr                       : 0063bd
- nt_create                   : 00664e
- nt_dabs                     : 006287
- nt_decimal                  : 00622a
- nt_defer                    : 006627
- nt_depth                    : 0066ac
- nt_digitq                   : 006989
- nt_dminus                   : 0062ce
- nt_dnegate                  : 006293
- nt_do                       : 0061c3
- nt_does                     : 006641
- nt_dot                      : 006470
- nt_dotquote                 : 0064d8
- nt_dots                     : 006444
- nt_dplus                    : 0062d8
- nt_drop                     : 0069da
- nt_dtos                     : 0062a2
- nt_dtrailing                : 0065a1
- nt_dump                     : 006123
- nt_dup                      : 0069cf
- nt_emit                     : 006464
- nt_equal                    : 00681c
- nt_erase                    : 0063d3
- nt_evaluate                 : 0064bb
- nt_execute                  : 006943
- nt_exit                     : 006172
- nt_false                    : 006825
- nt_fetch                    : 0069b1
- nt_fill                     : 0063c7
- nt_find                     : 0060db
- nt_find-name                : 006876
- nt_fmmod                    : 0062e2
- nt_fromr                    : 006975
- nt_greater                  : 0067f6
- nt_hash                     : 00640c
- nt_hashs                    : 0063f6
- nt_here                     : 006952
- nt_hex                      : 006239
- nt_hold                     : 0063ea
- nt_i                        : 006196
- nt_immediate                : 00654e
- nt_input                    : 0064a0
- nt_int-name                 : 00639d
- nt_invert                   : 006729
- nt_j                        : 00618d
- nt_key                      : 0068db
- nt_keyq                     : 0068cf
- nt_latestnt                 : 006581
- nt_latestxt                 : 006591
- nt_leave                    : 006165
- nt_leftbracket              : 006578
- nt_less                     : 0067ff
- nt_lessnumber               : 006415
- nt_literal                  : 006515
- nt_loop                     : 006159
- nt_lshift                   : 006771
- nt_marker                   : 0061cd
- nt_max                      : 006710
- nt_min                      : 006705
- nt_minus                    : 0067b1
- nt_move                     : 0066f9
- nt_mrot                     : 006912
- nt_mstar                    : 006323
- nt_name-int                 : 0063ad
- nt_name-string              : 00665c
- nt_native-compile           : 006524
- nt_nc-limit                 : 006490
- nt_negate                   : 00671b
- nt_nip                      : 006907
- nt_not-equal                : 006812
- nt_number                   : 00684d
- nt_numbermore               : 0063e0
- nt_one                      : 006864
- nt_one-minus                : 0067c3
- nt_one-plus                 : 0067cd
- nt_or                       : 00675c
- nt_output                   : 0064ad
- nt_over                     : 0069a5
- nt_pad                      : 006479
- nt_page                     : 006252
- nt_parse                    : 00637b
- nt_parse-name               : 006895
- nt_pdo                      : 0061ac
- nt_pick                     : 0061eb
- nt_ploop                    : 00614c
- nt_plus                     : 0067ba
- nt_plusstore                : 00677f
- nt_postpone                 : 00655f
- nt_pploop                   : 00613d
- nt_pqdo                     : 00619f
- nt_qdo                      : 0061b8
- nt_qdup                     : 0068ef
- nt_question                 : 006394
- nt_quit                     : 006388
- nt_recurse                  : 00617e
- nt_refill                   : 006887
- nt_rfetch                   : 00696b
- nt_rightbracket             : 00656f
- nt_rot                      : 00691e
- nt_rshift                   : 006743
- nt_semicolon                : 006608
- nt_sign                     : 006400
- nt_slashstring              : 0065b2
- nt_sliteral                 : 0064ec
- nt_smrem                    : 0062f0
- nt_source                   : 00669e
- nt_source-id                : 0068a7
- nt_space                    : 006437
- nt_spaces                   : 006429
- nt_squote                   : 0064e2
- nt_star                     : 00631a
- nt_state                    : 006686
- nt_stod                     : 0062ad
- nt_store                    : 0069ba
- nt_swap                     : 0069c3
- nt_tick                     : 0066f0
- nt_to                       : 0066b9
- nt_to-in                    : 006693
- nt_tobody                   : 006634
- nt_tonumber                 : 00683e
- nt_tor                      : 00697f
- nt_true                     : 006832
- nt_tuck                     : 0068fb
- nt_two                      : 00685b
- nt_two-star                 : 0067a7
- nt_twofromr                 : 0062b8
- nt_tworfetch                : 00626b
- nt_twotor                   : 0062c3
- nt_type                     : 00644e
- nt_udmod                    : 0062fe
- nt_udot                     : 00645a
- nt_ummod                    : 00630c
- nt_umstar                   : 00632d
- nt_unloop                   : 00612f
- nt_unused                   : 006244
- nt_value                    : 0066c3
- nt_variable                 : 0066e0
- nt_word                     : 0060cf
- nt_words                    : 006116
- nt_wordsize                 : 0061db
- nt_wordsnsizes              : 006103
- nt_xor                      : 006751
- nt_zbranch                  : 0065c1
- nt_zero                     : 00686d
- nt_zero-equal               : 006808
- nt_zero-less                : 0067ec
- nt_zero-more                : 0067e2
- nt_zero-notequal            : 0067d7
- number_dot                  : 005bf7
- number_loop                 : 005c1e
- number_main                 : 005c10
- number_ok                   : 005c2a
- number_single               : 005c52
- output                      : 00000e
- padoffset                   : 0000ff
- parse-name_empty_line       : 005ca4
- parse-name_found            : 005cba
- parse-name_loop             : 005c97
- parse_found_delimiter       : 005ce6
- parse_loop                  : 005cd9
- parse_reached_eol           : 005cea
- pp_got_nt                   : 005d2a
- pp_got_word                 : 005d22
- pp_not_immediate            : 005d3b
- pploop_jmp                  : 0052e9
- pqdo_done                   : 0052fe
- print_string                : 006aa2
- print_string_done           : 006ab1
- print_u                     : 006aba
- put_chr                     : 005034
- put_chr_wait                : 005039
- quit_compiled               : 0050ed
- quit_get_line               : 0050c2
- quit_ok                     : 0050e4
- quit_print                  : 0050f0
- quit_refill_successful      : 0050d0
- ram-end                     : 007fff
- ram-start                   : 000000
- refill_source_is_not_string : 005d99
- refill_src_not_kbd          : 005d8f
- reset_hardware              : 005000
- rshift_done                 : 005db8
- rshift_loop                 : 005db2
- s_compiled                  : 007155
- s_ok                        : 007151
- scratch                     : 000028
- sign_plus                   : 005e0e
- sl_loop                     : 005e33
- sliteral_rt                 : 005e5e
- smrem_1                     : 005eae
- smrem_1_1                   : 005eb2
- smrem_2                     : 005ec9
- smrem_2_1                   : 005ecd
- spaces_done                 : 005ef4
- spaces_loop                 : 005ee9
- squote_compile              : 005def
- stack                       : 000100
- stack0                      : 0001ff
- start                       : 005064
- state                       : 000014
- stod_pos                    : 005dff
- tests_next_cmd              : 0072ac
- tests_prev_cmd              : 007299
- tick_have_nt                : 005490
- tick_have_word              : 005484
- tmp1                        : 00001c
- tmp2                        : 00001e
- tmp3                        : 000020
- tmpbranch                   : 00001a
- tmpdsp                      : 000022
- tmptos                      : 000024
- tobody_have_cfa             : 005155
- tobody_nojsr                : 005157
- tohold                      : 000018
- toin                        : 00000c
- tonumber_done               : 0051b0
- tonumber_loop               : 00516c
- tonumber_ok                 : 00517b
- type_done                   : 005f44
- type_loop                   : 005f38
- ummod_complete              : 006018
- ummod_notzero               : 005fd9
- ummod_overflow              : 00600f
- ummod_shift                 : 005ff1
- umstar_counter              : 005fa8
- umstar_loop                 : 005f9a
- umstar_one_nos              : 005fbb
- umstar_one_tos              : 005fb8
- umstar_two_common           : 005fc7
- umstar_two_nos              : 005fc6
- umstar_two_tos              : 005fc2
- umstar_zero                 : 005fb1
- user0                       : 000000
- vt100_home                  : 007295
- vt100_page                  : 007290
- words_common                : 006063
- words_loop                  : 00606d
- words_nosizes               : 00608a
- workword                    : 000004
- xt_2drop                    : 005416
- xt_2dup                     : 00541d
- xt_2over                    : 005428
- xt_2swap                    : 005454
- xt_2variable                : 005465
- xt_abort                    : 0050af
- xt_abortq                   : 005494
- xt_abs                      : 0054b1
- xt_accept                   : 0054ba
- xt_again                    : 005549
- xt_align                    : 00555f
- xt_aligned                  : 005561
- xt_allot                    : 005563
- xt_and                      : 00558c
- xt_at-xy                    : 005593
- xt_backslash                : 00532c
- xt_base                     : 0055bb
- xt_begin                    : 0055ca
- xt_bell                     : 0055c3
- xt_bl                       : 0055d1
- xt_bounds                   : 0055d9
- xt_bracketchar              : 005325
- xt_brackettick              : 005315
- xt_branch                   : 0055e3
- xt_bye                      : 0055f7
- xt_c-comma                  : 0055fe
- xt_c-fetch                  : 00560c
- xt_c-store                  : 005618
- xt_cellplus                 : 005628
- xt_char                     : 00562b
- xt_chars                    : 005643
- xt_cmove                    : 005645
- xt_cmoveup                  : 005668
- xt_cold                     : 005061
- xt_colon                    : 00524e
- xt_comma                    : 005242
- xt_compile-only             : 005681
- xt_compilecomma             : 00568a
- xt_constant                 : 00571e
- xt_count                    : 00574d
- xt_cr                       : 00575b
- xt_create                   : 005762
- xt_dabs                     : 005855
- xt_decimal                  : 00585c
- xt_defer                    : 0057d2
- xt_depth                    : 005862
- xt_digitq                   : 0057ed
- xt_dminus                   : 00583b
- xt_dnegate                  : 005871
- xt_do                       : 00588c
- xt_does                     : 0058c0
- xt_dot                      : 0051d7
- xt_dotquote                 : 0051f6
- xt_dots                     : 00520a
- xt_dplus                    : 005829
- xt_drop                     : 0058e3
- xt_dtos                     : 005850
- xt_dtrailing                : 005375
- xt_dump                     : 0058e8
- xt_dup                      : 005906
- xt_emit                     : 00590b
- xt_equal                    : 00538c
- xt_erase                    : 005913
- xt_evaluate                 : 005936
- xt_execute                  : 005968
- xt_exit                     : 00591a
- xt_fetch                    : 0052d7
- xt_fill                     : 00591b
- xt_find                     : 005972
- xt_find-name                : 0059a3
- xt_fmmod                    : 0059fa
- xt_fromr                    : 005d54
- xt_greater                  : 005120
- xt_hash                     : 005289
- xt_hashs                    : 0052b3
- xt_here                     : 005ab2
- xt_hex                      : 005ab9
- xt_hold                     : 005abf
- xt_i                        : 005a6c
- xt_immediate                : 005a77
- xt_input                    : 005a80
- xt_int-name                 : 005a88
- xt_invert                   : 005aac
- xt_j                        : 005acd
- xt_key                      : 005a4e
- xt_keyq                     : 005a5e
- xt_latestnt                 : 005ad8
- xt_latestxt                 : 005ae0
- xt_leave                    : 005af0
- xt_leftbracket              : 00531c
- xt_less                     : 0050f6
- xt_lessnumber               : 005116
- xt_literal                  : 005af3
- xt_loop                     : 005339
- xt_lshift                   : 005b12
- xt_marker                   : 005b46
- xt_max                      : 005b70
- xt_min                      : 005b83
- xt_minus                    : 005361
- xt_move                     : 005b96
- xt_mrot                     : 00536c
- xt_mstar                    : 005b26
- xt_name-int                 : 005baa
- xt_name-string              : 005bb3
- xt_native-compile           : 005bc4
- xt_nc-limit                 : 005bcd
- xt_negate                   : 005bd5
- xt_nip                      : 005bdc
- xt_not-equal                : 00510a
- xt_number                   : 005bdf
- xt_numbermore               : 0052a4
- xt_one                      : 0053ed
- xt_one-minus                : 0053f5
- xt_one-plus                 : 0053f7
- xt_or                       : 005c63
- xt_output                   : 005c6a
- xt_over                     : 005c72
- xt_pad                      : 005c79
- xt_page                     : 005c85
- xt_parse                    : 005cc6
- xt_parse-name               : 005c92
- xt_pdo                      : 005302
- xt_pick                     : 005cf9
- xt_ploop                    : 00533f
- xt_plus                     : 005331
- xt_plusstore                : 005d07
- xt_postpone                 : 005d17
- xt_pploop                   : 0052dc
- xt_pqdo                     : 0052eb
- xt_qdo                      : 005885
- xt_qdup                     : 0052c3
- xt_question                 : 0052bc
- xt_quit                     : 0050b7
- xt_recurse                  : 005d5c
- xt_refill                   : 005d76
- xt_rfetch                   : 005d4b
- xt_rightbracket             : 00531f
- xt_rot                      : 005da0
- xt_rshift                   : 005da9
- xt_semicolon                : 005270
- xt_sign                     : 005e03
- xt_slashstring              : 0051c5
- xt_sliteral                 : 005e13
- xt_smrem                    : 005e74
- xt_source                   : 005ece
- xt_source-id                : 005edb
- xt_space                    : 005ee2
- xt_spaces                   : 005ee9
- xt_squote                   : 005dbd
- xt_star                     : 005ef9
- xt_state                    : 005f01
- xt_stod                     : 005df3
- xt_store                    : 0052cb
- xt_swap                     : 005f09
- xt_tick                     : 005478
- xt_to                       : 005f0f
- xt_to-in                    : 005158
- xt_tobody                   : 005134
- xt_tonumber                 : 005160
- xt_tor                      : 0051bd
- xt_true                     : 005f19
- xt_tuck                     : 005f21
- xt_two                      : 0053f9
- xt_two-star                 : 005401
- xt_twofromr                 : 005435
- xt_tworfetch                : 005446
- xt_twotor                   : 005405
- xt_type                     : 005f2a
- xt_udmod                    : 005f55
- xt_udot                     : 005f4b
- xt_ummod                    : 005fd0
- xt_umstar                   : 005f71
- xt_unloop                   : 006021
- xt_unused                   : 006025
- xt_variable                 : 006031
- xt_word                     : 006041
- xt_words                    : 006061
- xt_wordsize                 : 00609e
- xt_wordsnsizes              : 00605a
- xt_xor                      : 0060b1
- xt_zbranch                  : 0053cf
- xt_zero                     : 005398
- xt_zero-equal               : 0053a0
- xt_zero-less                : 0053ac
- xt_zero-more                : 0053c4
- xt_zero-notequal            : 0053b8
- z_2drop                     : 00541c
- z_2dup                      : 005427
- z_2over                     : 005434
- z_2swap                     : 005464
- z_2variable                 : 005477
- z_abort                     : 0050f6
- z_abortq                    : 0054b0
- z_abs                       : 0054b9
- z_accept                    : 005548
- z_again                     : 00555e
- z_align                     : 005560
- z_aligned                   : 005562
- z_allot                     : 00558b
- z_and                       : 005592
- z_at-xy                     : 0055ba
- z_backslash                 : 005330
- z_base                      : 0055c2
- z_begin                     : 0055d0
- z_bell                      : 0055c9
- z_bl                        : 0055d8
- z_bounds                    : 0055e2
- z_bracketchar               : 00532b
- z_brackettick               : 00531b
- z_branch                    : 0055e9
- z_bye                       : 0055fe
- z_c-comma                   : 00560b
- z_c-fetch                   : 005617
- z_c-store                   : 005627
- z_cellplus                  : 00562a
- z_char                      : 005642
- z_chars                     : 005644
- z_cmove                     : 005667
- z_cmoveup                   : 005680
- z_cold                      : 0050f6
- z_colon                     : 00526f
- z_comma                     : 00524d
- z_compile-only              : 005689
- z_compilecomma              : 00571d
- z_constant                  : 00574c
- z_count                     : 00575a
- z_cr                        : 005761
- z_create                    : 0057d1
- z_dabs                      : 00585b
- z_decimal                   : 005861
- z_defer                     : 0057ec
- z_depth                     : 005870
- z_digitq                    : 005828
- z_dminus                    : 00584f
- z_dnegate                   : 005884
- z_do                        : 0058bf
- z_does                      : 0058cc
- z_dot                       : 0051f5
- z_dotquote                  : 005209
- z_dots                      : 005241
- z_dplus                     : 00583a
- z_drop                      : 0058e7
- z_dtos                      : 005854
- z_dtrailing                 : 00538b
- z_dump                      : 005905
- z_dup                       : 00590a
- z_emit                      : 005913
- z_equal                     : 005397
- z_erase                     : 005935
- z_evaluate                  : 005964
- z_execute                   : 005972
- z_exit                      : 00591b
- z_fetch                     : 0052db
- z_fill                      : 005935
- z_find                      : 0059a2
- z_find-name                 : 0059f9
- z_fmmod                     : 005a4d
- z_fromr                     : 005d5b
- z_greater                   : 005133
- z_hash                      : 0052a3
- z_hashs                     : 0052bb
- z_here                      : 005ab8
- z_hex                       : 005abe
- z_hold                      : 005acc
- z_i                         : 005a76
- z_immediate                 : 005a7f
- z_input                     : 005a87
- z_int-name                  : 005aab
- z_invert                    : 005ab1
- z_j                         : 005ad7
- z_key                       : 005a5d
- z_keyq                      : 005a6b
- z_latestnt                  : 005adf
- z_latestxt                  : 005aef
- z_leave                     : 005af3
- z_leftbracket               : 00531e
- z_less                      : 005109
- z_lessnumber                : 00511f
- z_literal                   : 005b04
- z_loop                      : 005360
- z_lshift                    : 005b25
- z_marker                    : 005b6f
- z_max                       : 005b82
- z_min                       : 005b95
- z_minus                     : 00536b
- z_move                      : 005ba9
- z_mrot                      : 005374
- z_mstar                     : 005b45
- z_name-int                  : 005bb2
- z_name-string               : 005bc3
- z_native-compile            : 005bcc
- z_nc-limit                  : 005bd4
- z_negate                    : 005bdb
- z_nip                       : 005bde
- z_not-equal                 : 005115
- z_number                    : 005c62
- z_numbermore                : 0052b2
- z_one                       : 0053f4
- z_one-minus                 : 0053f6
- z_one-plus                  : 0053f8
- z_or                        : 005c69
- z_output                    : 005c71
- z_over                      : 005c78
- z_pad                       : 005c84
- z_page                      : 005c91
- z_parse                     : 005cf8
- z_parse-name                : 005cf8
- z_pdo                       : 005314
- z_pick                      : 005d06
- z_ploop                     : 005360
- z_plus                      : 005338
- z_plusstore                 : 005d16
- z_postpone                  : 005d4a
- z_pploop                    : 0052ea
- z_pqdo                      : 005314
- z_qdo                       : 0058bf
- z_qdup                      : 0052ca
- z_question                  : 0052c2
- z_quit                      : 0050f6
- z_recurse                   : 005d75
- z_refill                    : 005d9f
- z_rfetch                    : 005d53
- z_rightbracket              : 005324
- z_rot                       : 005da8
- z_rshift                    : 005dbc
- z_semicolon                 : 005288
- z_sign                      : 005e12
- z_slashstring               : 0051d6
- z_sliteral                  : 005e5d
- z_smrem                     : 005ecd
- z_source                    : 005eda
- z_source-id                 : 005ee1
- z_space                     : 005ee8
- z_spaces                    : 005ef8
- z_squote                    : 005df2
- z_star                      : 005f00
- z_state                     : 005f08
- z_stod                      : 005e02
- z_store                     : 0052d6
- z_swap                      : 005f0e
- z_tick                      : 005493
- z_to                        : 005f18
- z_to-in                     : 00515f
- z_tobody                    : 005157
- z_tonumber                  : 0051bc
- z_tor                       : 0051c4
- z_true                      : 005f20
- z_tuck                      : 005f29
- z_two                       : 005400
- z_two-star                  : 005404
- z_twofromr                  : 005445
- z_tworfetch                 : 005453
- z_twotor                    : 005415
- z_type                      : 005f4a
- z_udmod                     : 005f70
- z_udot                      : 005f54
- z_ummod                     : 006020
- z_umstar                    : 005fcf
- z_unloop                    : 006024
- z_unused                    : 006030
- z_variable                  : 006040
- z_word                      : 006059
- z_words                     : 00609d
- z_wordsize                  : 0060b0
- z_wordsnsizes               : 00609d
- z_xor                       : 0060b7
- z_zbranch                   : 0053d5
- z_zero                      : 00539f
- z_zero-equal                : 0053ab
- z_zero-less                 : 0053b7
- z_zero-more                 : 0053ce
- z_zero-notequal             : 0053c3
- zb_done                     : 0053e7
- zb_zero                     : 0053de
- zbranch_rt                  : 0053d6
- ze_not_zero                 : 0053a8
- zero-less-is-less           : 0053b4
- zero-more_done              : 0053cd
- zero-more_true              : 0053cc
- zne_is_zero                 : 0053c0
