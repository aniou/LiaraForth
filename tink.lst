A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 24. January 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Wed Feb 15 23:05:04 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.10684 seconds
Code origin: 006000
Bytes of machine code: 3356

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 ; start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   ; start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   ; end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   ; end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   ; end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           ; buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         ; maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         ; start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         ; start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         ; size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         ; distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 ; single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 ; multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 ; multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             ; single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             ; initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      ; Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      ; Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  ; Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  ; Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  ; Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  ; Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    ; Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } ; Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } ; Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   ; Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  ; STATE: 1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   ; Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   ; Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   ; Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   ; Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } ; Currently compiliing word
  16:073 | DONE wsp | em  8  8 |        |             |
  16:074 | DONE wsp | em  8  8 |        |             |
  16:075 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:076 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:077 | DONE wsp | em  8  8 |        |             |
  16:078 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              ; break (Control-C) ASCII character
  16:080 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ; ACSCII bell sound
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              ; backspace ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              ; line feed ASCII character
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              ; carriage return ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ; ASCII CNTR-n (for next command)
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ; ASCII CNTR-p (for previous command)
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              ; Escape ASCII character
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              ; space ASCII character
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              ; DEL ASCII character
  16:089 | DONE wsp | em  8  8 |        |             |
  16:090 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:091 | DONE dir | em  8  8 |        |             |         .equ PW 0008                 ; Primitive (Native) Word
  16:092 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 ; Compile Only
  16:093 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 ; Immediate Word
  16:094 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 ; Native (inline) Compile
  16:095 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           ; 19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           ; Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           ; Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           ; Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           ; Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           ; Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           ; Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           ; Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           ; Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           ; Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           ; Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           ; Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           ; Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           ; Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           ; Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           ; Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           ; Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           ; Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           ; System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           ; Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           ; Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           ; Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           ; Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           ; Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           ; Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           ; UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           ; UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           ; Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           ; Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           ; Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           ; Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           ; Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           ; Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           ; Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           ; Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           ; Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           ; Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           ; Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           ; Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           ; Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           ; Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           ; Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           ; Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          ; UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          ; UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          ; UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          ; UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          ; UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          ; UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          ; UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          ; UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           ; UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            ; Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           ; Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           ; Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      ; Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           ; Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    ; And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           ; Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           ; Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             ; Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           ; Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      ; Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           ; UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           ; we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  ; save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             ; (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           ; timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           ; transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  ; Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             ; (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           ; Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           ; No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           ; Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  ; save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           ; read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                ; shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  ; restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           ; don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     ; these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             | 		; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 3c 63    |                 jsr 00633c           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  57:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  58:000 | DONE ins | na 16 16 | 00606a | a9 02 6a    |                 lda.# 006a02         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         ; start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE wsp | na 16 16 |        |             |
  70:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         ; previous input buffer is empty
  71:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         ; SOURCE-ID is zero
  72:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         ; STATE is zero (interpret)
  73:000 | DONE wsp | na 16 16 |        |             |
  74:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  75:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  76:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  77:000 | DONE wsp | na 16 16 |        |             |
  78:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  79:000 | DONE ins | na 16 16 | 006085 | 20 f9 64    |                 jsr 0064f9           
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  82:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is rubbish, so we don't have to push it to the
  83:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  84:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  88:000 | DONE ins | na 16 16 | 00608c | a9 a9 6a    |                 lda.# 006aa9         
  89:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            ; Start address goes in NOS
  90:000 | DONE ins | na 16 16 | 006091 | a0 cb 00    |                 ldy.# 0000cb         ; length goes in TOS
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE ins | na 16 16 | 006094 | 20 ee 63    |                 jsr 0063ee           
  93:000 | DONE wsp | na 16 16 |        |             |
  94:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to ABORT
  95:000 | DONE wsp | na 16 16 |        |             |
  96:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  97:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  98:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  99:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 100:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 101:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 102:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 103:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 103:001 | DONE ctl | na 16 16 |        |             |         .!a16
 104:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 105:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 106:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE wsp | na 16 16 |        |             |
 109:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 110:000 | DONE wsp | na 16 16 |        |             |
 111:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 112:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 113:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 114:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 115:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 116:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 117:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 118:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 119:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 120:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 123:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 124:000 | DONE ins | na 16 16 | 0060a3 | 9c 1d 64    |                 stz 00641d           
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 127:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 130:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 131:000 | DONE wsp | na 16 16 |        |             |
 132:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 133:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 134:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 135:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 136:000 | DONE wsp | na 16 16 |        |             |
 137:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 138:000 | DONE ins | na 16 16 | 0060ac | 20 6b 65    |                 jsr 00656b           ; ( -- f )
 139:000 | DONE wsp | na 16 16 |        |             |
 140:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  ; force flag test
 141:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 142:000 | DONE wsp | na 16 16 |        |             |
 143:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 145:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 146:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 147:000 | DONE ins | na 16 16 | 0060b2 | a9 48 6c    |                 lda.# 006c48         
 148:000 | DONE ins | na 16 16 | 0060b5 | 4c 6f 6a    |                 jmp 006a6f           
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE wsp | na 16 16 |        |             |
 151:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 152:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 153:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 154:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 155:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 156:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            ; drop TOS
 157:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 158:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 159:000 | DONE wsp | na 16 16 |        |             |
 160:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 161:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 164:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 165:000 | DONE ins | na 16 16 | 0060be | 20 23 6a    |                 jsr 006a23           
 166:000 | DONE wsp | na 16 16 |        |             |
 167:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 168:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 169:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 170:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 171:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           ; DSP must always be smaller (!) than DSP0
 172:000 | DONE wsp | na 16 16 |        |             |
 173:000 | DONE ins | na 16 16 | 0060c6 | a9 ae 6c    |                 lda.# 006cae         
 174:000 | DONE ins | na 16 16 | 0060c9 | 4c 6f 6a    |                 jmp 006a6f           
 175:000 | DONE wsp | na 16 16 |        |             |
 176:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 177:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 178:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 179:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 180:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 181:000 | DONE wsp | na 16 16 |        |             |
 182:000 | DONE ins | na 16 16 | 0060d0 | a9 74 6b    |                 lda.# 006b74         
 183:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 184:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 185:000 | DONE ins | na 16 16 | 0060d5 | a9 78 6b    |                 lda.# 006b78         ; fall through to quit_print
 186:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 187:000 | DONE ins | na 16 16 | 0060d8 | 20 75 6a    |                 jsr 006a75           
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, guys. Now get the next one
 190:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 191:000 | DONE wsp | na 16 16 |        |             |
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 194:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 194:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  ; dummy for compilation, TODO test if required
 195:000 | DONE wsp | na 16 16 |        |             |
 196:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 197:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 198:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 199:000 | DONE lbl | na 16 16 | 0060df |             | xt_to-in                             
 200:000 | DONE ins | na 16 16 | 0060df | ca          |                 dex                  
 201:000 | DONE ins | na 16 16 | 0060e0 | ca          |                 dex                  
 202:000 | DONE ins | na 16 16 | 0060e1 | 94 00       |                 sty.dx 00            
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | a0 12 02    |                 ldy.# 000212         ; >IN
 205:000 | DONE lbl | na 16 16 | 0060e6 |             | z_to-in                              
 205:001 | DONE ins | na 16 16 | 0060e6 | 60          |                 rts                  
 206:000 | DONE wsp | na 16 16 |        |             |
 207:000 | DONE wsp | na 16 16 |        |             |
 208:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 209:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 210:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 211:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 212:000 | DONE cmt | na 16 16 |        |             | ; aligned
 213:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 214:000 | DONE cmt | na 16 16 |        |             | ;               tya
 215:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 216:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 217:000 | DONE cmt | na 16 16 |        |             | ;               iny
 218:000 | DONE cmt | na 16 16 |        |             | ;               iny
 219:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 220:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 221:000 | DONE cmt | na 16 16 |        |             | ;               inx
 222:000 | DONE cmt | na 16 16 |        |             | ;               inx
 223:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 224:000 | DONE lbl | na 16 16 | 0060e7 |             | xt_comma                             
 225:000 | DONE ins | na 16 16 | 0060e7 | 98          |                 tya                  
 226:000 | DONE ins | na 16 16 | 0060e8 | 92 00       |                 sta.di 000200        ; STA (CP)
 227:000 | DONE ins | na 16 16 | 0060ea | e6 00       |                 inc.d 000200         
 228:000 | DONE ins | na 16 16 | 0060ec | e6 00       |                 inc.d 000200         
 229:000 | DONE wsp | na 16 16 |        |             |
 230:000 | DONE ins | na 16 16 | 0060ee | b4 00       |                 ldy.dx 00            
 231:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 232:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE lbl | na 16 16 | 0060f2 |             | z_comma                              
 234:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 235:000 | DONE wsp | na 16 16 |        |             |
 236:000 | DONE wsp | na 16 16 |        |             |
 237:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 238:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 239:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 240:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 241:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_colon                             
 242:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 243:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 244:000 | DONE ins | na 16 16 | 0060f3 | a5 14       |                 lda.d 000214         
 245:000 | DONE ins | na 16 16 | 0060f5 | f0 06       |                 beq 0060fd           
 246:000 | DONE wsp | na 16 16 |        |             |
 247:000 | DONE ins | na 16 16 | 0060f7 | a9 96 6c    |                 lda.# 006c96         
 248:000 | DONE ins | na 16 16 | 0060fa | 4c 6f 6a    |                 jmp 006a6f           
 249:000 | DONE lbl | na 16 16 | 0060fd |             | @                                    
 250:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 251:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 252:000 | DONE ins | na 16 16 | 0060fd | e6 14       |                 inc.d 000214         
 253:000 | DONE wsp | na 16 16 |        |             |
 254:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 255:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 256:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 257:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 258:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 259:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 260:000 | DONE ins | na 16 16 | 0060ff | a5 02       |                 lda.d 000202         
 261:000 | DONE ins | na 16 16 | 006101 | 48          |                 pha                  ; CREATE uses tmp1, tmp2 and tmp3
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE ins | na 16 16 | 006102 | 20 c9 62    |                 jsr 0062c9           
 264:000 | DONE wsp | na 16 16 |        |             |
 265:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 266:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 267:000 | DONE ins | na 16 16 | 006105 | a5 02       |                 lda.d 000202         
 268:000 | DONE ins | na 16 16 | 006107 | 85 1e       |                 sta.d 00021e         
 269:000 | DONE ins | na 16 16 | 006109 | 68          |                 pla                  
 270:000 | DONE ins | na 16 16 | 00610a | 85 02       |                 sta.d 000202         
 271:000 | DONE wsp | na 16 16 |        |             |
 272:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 273:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 274:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 275:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 276:000 | DONE ins | na 16 16 | 00610c | a5 00       |                 lda.d 000200         
 277:000 | DONE ins | na 16 16 | 00610e | 38          |                 sec                  
 278:000 | DONE ins | na 16 16 | 00610f | e9 03 00    |                 sbc.# 0003           
 279:000 | DONE ins | na 16 16 | 006112 | 85 00       |                 sta.d 000200         
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE lbl | na 16 16 | 006114 |             | z_colon                              
 281:001 | DONE ins | na 16 16 | 006114 | 60          |                 rts                  
 282:000 | DONE wsp | na 16 16 |        |             |
 283:000 | DONE wsp | na 16 16 |        |             |
 284:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 285:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 286:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 287:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 288:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free
 289:000 | DONE cmt | na 16 16 |        |             | ; byte.
 290:000 | DONE lbl | na 16 16 | 006115 |             | xt_semicolon                         
 291:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 292:000 | DONE ins | na 16 16 | 006115 | 84 06       |                 sty.d 000206         
 293:000 | DONE wsp | na 16 16 |        |             |
 294:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 295:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 296:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 297:000 | DONE ins | na 16 16 | 006117 | a0 06 00    |                 ldy.# 0006           
 298:000 | DONE ins | na 16 16 | 00611a | a5 00       |                 lda.d 000200         
 299:000 | DONE ins | na 16 16 | 00611c | 91 1e       |                 sta.diy 00021e       ; STA (WORKWORD),Y
 300:000 | DONE wsp | na 16 16 |        |             |
 301:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 302:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 303:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 304:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 305:000 | DONE ins | na 16 16 | 00611e | a9 60 00    |                 lda.# 60             ; opcode for RTS
 306:000 | DONE ins | na 16 16 | 006121 | 92 00       |                 sta.di 000200        ; STA (CP)
 307:000 | DONE ins | na 16 16 | 006123 | e6 00       |                 inc.d 000200         ; MSB will be overwritten
 308:000 | DONE wsp | na 16 16 |        |             |
 309:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 310:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 311:000 | DONE ins | na 16 16 | 006125 | a5 1e       |                 lda.d 00021e         
 312:000 | DONE ins | na 16 16 | 006127 | 85 02       |                 sta.d 000202         
 313:000 | DONE wsp | na 16 16 |        |             |
 314:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 315:000 | DONE ins | na 16 16 | 006129 | a4 06       |                 ldy.d 000206         
 316:000 | DONE wsp | na 16 16 |        |             |
 317:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 318:000 | DONE ins | na 16 16 | 00612b | 64 14       |                 stz.d 000214         
 319:000 | DONE wsp | na 16 16 |        |             |
 320:000 | DONE lbl | na 16 16 | 00612d |             | z_semicolon                          
 320:001 | DONE ins | na 16 16 | 00612d | 60          |                 rts                  
 321:000 | DONE wsp | na 16 16 |        |             |
 322:000 | DONE wsp | na 16 16 |        |             |
 323:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 324:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 325:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and so can be pretty
 326:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 327:000 | DONE lbl | na 16 16 | 00612e |             | xt_question                          
 328:000 | DONE ins | na 16 16 | 00612e | 20 3f 61    |                 jsr 00613f           
 329:000 | DONE ins | na 16 16 | 006131 | 20 51 63    |                 jsr 006351           
 330:000 | DONE wsp | na 16 16 |        |             |
 331:000 | DONE lbl | na 16 16 | 006134 |             | z_question                           
 331:001 | DONE ins | na 16 16 | 006134 | 60          |                 rts                  
 332:000 | DONE wsp | na 16 16 |        |             |
 333:000 | DONE wsp | na 16 16 |        |             |
 334:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 335:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 336:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 337:000 | DONE lbl | na 16 16 | 006135 |             | xt_store                             
 338:000 | DONE ins | na 16 16 | 006135 | b5 00       |                 lda.dx 00            ; NOS has value
 339:000 | DONE ins | na 16 16 | 006137 | 99 00 00    |                 sta.y 0000           
 340:000 | DONE ins | na 16 16 | 00613a | e8          |                 inx                  
 341:000 | DONE ins | na 16 16 | 00613b | e8          |                 inx                  
 342:000 | DONE ins | na 16 16 | 00613c | e8          |                 inx                  
 343:000 | DONE ins | na 16 16 | 00613d | e8          |                 inx                  
 344:000 | DONE wsp | na 16 16 |        |             |
 345:000 | DONE lbl | na 16 16 | 00613e |             | z_store                              
 345:001 | DONE ins | na 16 16 | 00613e | 60          |                 rts                  
 346:000 | DONE wsp | na 16 16 |        |             |
 347:000 | DONE wsp | na 16 16 |        |             |
 348:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 349:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 350:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 351:000 | DONE lbl | na 16 16 | 00613f |             | xt_fetch                             
 352:000 | DONE ins | na 16 16 | 00613f | b9 00 00    |                 lda.y 0000           
 353:000 | DONE ins | na 16 16 | 006142 | a8          |                 tay                  
 354:000 | DONE lbl | na 16 16 | 006143 |             | z_fetch                              
 354:001 | DONE ins | na 16 16 | 006143 | 60          |                 rts                  
 355:000 | DONE wsp | na 16 16 |        |             |
 356:000 | DONE wsp | na 16 16 |        |             |
 357:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 358:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 359:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 360:000 | DONE lbl | na 16 16 | 006144 |             | xt_leftbracket                       
 361:000 | DONE ins | na 16 16 | 006144 | 64 14       |                 stz.d 000214         
 362:000 | DONE lbl | na 16 16 | 006146 |             | z_leftbracket                        
 362:001 | DONE ins | na 16 16 | 006146 | 60          |                 rts                  
 363:000 | DONE wsp | na 16 16 |        |             |
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 366:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 367:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 368:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 369:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 370:000 | DONE lbl | na 16 16 | 006147 |             | xt_rightbracket                      
 371:000 | DONE ins | na 16 16 | 006147 | a9 01 00    |                 lda.# 0001           
 372:000 | DONE ins | na 16 16 | 00614a | 85 14       |                 sta.d 000214         
 373:000 | DONE wsp | na 16 16 |        |             |
 374:000 | DONE lbl | na 16 16 | 00614c |             | z_rightbracket                       
 374:001 | DONE ins | na 16 16 | 00614c | 60          |                 rts                  
 375:000 | DONE wsp | na 16 16 |        |             |
 376:000 | DONE wsp | na 16 16 |        |             |
 377:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 378:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 379:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 380:000 | DONE lbl | na 16 16 | 00614d |             | xt_plus                              
 381:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 382:000 | DONE ins | na 16 16 | 00614d | 98          |                 tya                  
 383:000 | DONE ins | na 16 16 | 00614e | 18          |                 clc                  
 384:000 | DONE ins | na 16 16 | 00614f | 75 00       |                 adc.dx 00            
 385:000 | DONE ins | na 16 16 | 006151 | a8          |                 tay                  
 386:000 | DONE ins | na 16 16 | 006152 | e8          |                 inx                  
 387:000 | DONE ins | na 16 16 | 006153 | e8          |                 inx                  
 388:000 | DONE wsp | na 16 16 |        |             |
 389:000 | DONE lbl | na 16 16 | 006154 |             | z_plus                               
 389:001 | DONE ins | na 16 16 | 006154 | 60          |                 rts                  
 390:000 | DONE wsp | na 16 16 |        |             |
 391:000 | DONE wsp | na 16 16 |        |             |
 392:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 393:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 394:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 395:000 | DONE lbl | na 16 16 | 006155 |             | xt_minus                             
 396:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 397:000 | DONE ins | na 16 16 | 006155 | 98          |                 tya                  
 398:000 | DONE ins | na 16 16 | 006156 | 49 ff ff    |                 eor.# 0ffff          
 399:000 | DONE wsp | na 16 16 |        |             |
 400:000 | DONE ins | na 16 16 | 006159 | 38          |                 sec                  ; not CLC
 401:000 | DONE ins | na 16 16 | 00615a | 75 00       |                 adc.dx 00            
 402:000 | DONE wsp | na 16 16 |        |             |
 403:000 | DONE ins | na 16 16 | 00615c | a8          |                 tay                  
 404:000 | DONE ins | na 16 16 | 00615d | e8          |                 inx                  
 405:000 | DONE ins | na 16 16 | 00615e | e8          |                 inx                  
 406:000 | DONE wsp | na 16 16 |        |             |
 407:000 | DONE lbl | na 16 16 | 00615f |             | z_minus                              
 407:001 | DONE ins | na 16 16 | 00615f | 60          |                 rts                  
 408:000 | DONE wsp | na 16 16 |        |             |
 409:000 | DONE wsp | na 16 16 |        |             |
 410:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 411:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 412:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 413:000 | DONE lbl | na 16 16 | 006160 |             | xt_zero                              
 414:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 415:000 | DONE ins | na 16 16 | 006160 | ca          |                 dex                  
 416:000 | DONE ins | na 16 16 | 006161 | ca          |                 dex                  
 417:000 | DONE ins | na 16 16 | 006162 | 94 00       |                 sty.dx 00            
 418:000 | DONE ins | na 16 16 | 006164 | a0 00 00    |                 ldy.# 0000           
 419:000 | DONE wsp | na 16 16 |        |             |
 420:000 | DONE lbl | na 16 16 | 006167 |             | z_zero                               
 420:001 | DONE ins | na 16 16 | 006167 | 60          |                 rts                  
 421:000 | DONE wsp | na 16 16 |        |             |
 422:000 | DONE wsp | na 16 16 |        |             |
 423:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 424:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 425:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 426:000 | DONE lbl | na 16 16 | 006168 |             | xt_one                               
 427:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 428:000 | DONE ins | na 16 16 | 006168 | ca          |                 dex                  
 429:000 | DONE ins | na 16 16 | 006169 | ca          |                 dex                  
 430:000 | DONE ins | na 16 16 | 00616a | 94 00       |                 sty.dx 00            
 431:000 | DONE ins | na 16 16 | 00616c | a0 01 00    |                 ldy.# 0001           
 432:000 | DONE wsp | na 16 16 |        |             |
 433:000 | DONE lbl | na 16 16 | 00616f |             | z_one                                
 433:001 | DONE ins | na 16 16 | 00616f | 60          |                 rts                  
 434:000 | DONE wsp | na 16 16 |        |             |
 435:000 | DONE wsp | na 16 16 |        |             |
 436:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 437:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 438:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 439:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 440:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 441:000 | DONE lbl | na 16 16 | 006170 |             | xt_one-minus                         
 442:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 443:000 | DONE ins | na 16 16 | 006170 | 88          |                 dey                  
 444:000 | DONE lbl | na 16 16 | 006171 |             | z_one-minus                          
 444:001 | DONE ins | na 16 16 | 006171 | 60          |                 rts                  
 445:000 | DONE wsp | na 16 16 |        |             |
 446:000 | DONE wsp | na 16 16 |        |             |
 447:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 448:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 449:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 450:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 451:000 | DONE lbl | na 16 16 | 006172 |             | xt_one-plus                          
 452:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 453:000 | DONE ins | na 16 16 | 006172 | c8          |                 iny                  
 454:000 | DONE lbl | na 16 16 | 006173 |             | z_one-plus                           
 454:001 | DONE ins | na 16 16 | 006173 | 60          |                 rts                  
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE wsp | na 16 16 |        |             |
 457:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 458:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 459:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 460:000 | DONE lbl | na 16 16 | 006174 |             | xt_two                               
 461:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 462:000 | DONE ins | na 16 16 | 006174 | ca          |                 dex                  
 463:000 | DONE ins | na 16 16 | 006175 | ca          |                 dex                  
 464:000 | DONE ins | na 16 16 | 006176 | 94 00       |                 sty.dx 00            
 465:000 | DONE ins | na 16 16 | 006178 | a0 02 00    |                 ldy.# 0002           
 466:000 | DONE wsp | na 16 16 |        |             |
 467:000 | DONE lbl | na 16 16 | 00617b |             | z_two                                
 467:001 | DONE ins | na 16 16 | 00617b | 60          |                 rts                  
 468:000 | DONE wsp | na 16 16 |        |             |
 469:000 | DONE wsp | na 16 16 |        |             |
 470:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 471:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 472:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 473:000 | DONE lbl | na 16 16 | 00617c |             | xt_two-star                          
 474:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 475:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 476:000 | DONE ins | na 16 16 | 00617c | 98          |                 tya                  
 477:000 | DONE ins | na 16 16 | 00617d | 0a          |                 asl.a                
 478:000 | DONE ins | na 16 16 | 00617e | a8          |                 tay                  
 479:000 | DONE wsp | na 16 16 |        |             |
 480:000 | DONE lbl | na 16 16 | 00617f |             | z_two-star                           
 480:001 | DONE ins | na 16 16 | 00617f | 60          |                 rts                  
 481:000 | DONE wsp | na 16 16 |        |             |
 482:000 | DONE wsp | na 16 16 |        |             |
 483:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 484:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
 485:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
 486:000 | DONE lbl | na 16 16 | 006180 |             | xt_2drop                             
 487:000 | DONE ins | na 16 16 | 006180 | b4 02       |                 ldy.dx 02            
 488:000 | DONE ins | na 16 16 | 006182 | e8          |                 inx                  
 489:000 | DONE ins | na 16 16 | 006183 | e8          |                 inx                  
 490:000 | DONE ins | na 16 16 | 006184 | e8          |                 inx                  
 491:000 | DONE ins | na 16 16 | 006185 | e8          |                 inx                  
 492:000 | DONE wsp | na 16 16 |        |             |
 493:000 | DONE lbl | na 16 16 | 006186 |             | z_2drop                              
 493:001 | DONE ins | na 16 16 | 006186 | 60          |                 rts                  
 494:000 | DONE wsp | na 16 16 |        |             |
 495:000 | DONE wsp | na 16 16 |        |             |
 496:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 497:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 498:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 499:000 | DONE wsp | na 16 16 |        |             |
 500:000 | DONE lbl | na 16 16 | 006187 |             | xt_2dup                              
 501:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 502:000 | DONE ins | na 16 16 | 006187 | ca          |                 dex                  
 503:000 | DONE ins | na 16 16 | 006188 | ca          |                 dex                  
 504:000 | DONE ins | na 16 16 | 006189 | ca          |                 dex                  
 505:000 | DONE ins | na 16 16 | 00618a | ca          |                 dex                  
 506:000 | DONE ins | na 16 16 | 00618b | 94 02       |                 sty.dx 02            
 507:000 | DONE ins | na 16 16 | 00618d | b5 04       |                 lda.dx 04            
 508:000 | DONE ins | na 16 16 | 00618f | 95 00       |                 sta.dx 00            
 509:000 | DONE wsp | na 16 16 |        |             |
 510:000 | DONE lbl | na 16 16 | 006191 |             | z_2dup                               
 510:001 | DONE ins | na 16 16 | 006191 | 60          |                 rts                  
 511:000 | DONE wsp | na 16 16 |        |             |
 512:000 | DONE wsp | na 16 16 |        |             |
 513:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 514:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 515:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 516:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 517:000 | DONE lbl | na 16 16 | 006192 |             | xt_tick                              
 518:000 | DONE ins | na 16 16 | 006192 | 20 06 65    |                 jsr 006506           ; ( -- addr u )
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE cmt | na 16 16 |        |             | 		; if we got a zero, complain and abort
 521:000 | DONE ins | na 16 16 | 006195 | 98          |                 tya                  ; force flag check
 522:000 | DONE ins | na 16 16 | 006196 | d0 06       |                 bne 00619e           
 523:000 | DONE wsp | na 16 16 |        |             |
 524:000 | DONE ins | na 16 16 | 006198 | a9 21 6c    |                 lda.# 006c21         
 525:000 | DONE ins | na 16 16 | 00619b | 4c 6f 6a    |                 jmp 006a6f           
 526:000 | DONE wsp | na 16 16 |        |             |
 527:000 | DONE lbl | na 16 16 | 00619e |             | tick_have_word                       
 528:000 | DONE ins | na 16 16 | 00619e | 20 2b 64    |                 jsr 00642b           ; ( addr u -- nt)
 529:000 | DONE ins | na 16 16 | 0061a1 | 98          |                 tya                  ; force flag check
 530:000 | DONE wsp | na 16 16 |        |             |
 531:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 532:000 | DONE ins | na 16 16 | 0061a2 | d0 06       |                 bne 0061aa           
 533:000 | DONE wsp | na 16 16 |        |             |
 534:000 | DONE ins | na 16 16 | 0061a4 | a9 be 6c    |                 lda.# 006cbe         
 535:000 | DONE ins | na 16 16 | 0061a7 | 4c 6f 6a    |                 jmp 006a6f           
 536:000 | DONE wsp | na 16 16 |        |             |
 537:000 | DONE lbl | na 16 16 | 0061aa |             | tick_have_nt                         
 538:000 | DONE ins | na 16 16 | 0061aa | 20 bb 64    |                 jsr 0064bb           ; ( nt -- xt )
 539:000 | DONE wsp | na 16 16 |        |             |
 540:000 | DONE lbl | na 16 16 | 0061ad |             | z_tick                               
 540:001 | DONE ins | na 16 16 | 0061ad | 60          |                 rts                  
 541:000 | DONE wsp | na 16 16 |        |             |
 542:000 | DONE wsp | na 16 16 |        |             |
 543:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 544:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 545:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 546:000 | DONE lbl | na 16 16 | 0061ae |             | xt_abs                               
 547:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 548:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 549:000 | DONE ins | na 16 16 | 0061ae | 98          |                 tya                  ; force flag test
 550:000 | DONE ins | na 16 16 | 0061af | 10 05       |                 bpl 0061b6           ; positive number is easy
 551:000 | DONE wsp | na 16 16 |        |             |
 552:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 553:000 | DONE ins | na 16 16 | 0061b1 | 49 ff ff    |                 eor.# 0ffff          
 554:000 | DONE ins | na 16 16 | 0061b4 | 1a          |                 inc.a                
 555:000 | DONE ins | na 16 16 | 0061b5 | a8          |                 tay                  
 556:000 | DONE wsp | na 16 16 |        |             |
 557:000 | DONE lbl | na 16 16 | 0061b6 |             | z_abs                                
 557:001 | DONE ins | na 16 16 | 0061b6 | 60          |                 rts                  
 558:000 | DONE wsp | na 16 16 |        |             |
 559:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 560:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 561:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 562:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 563:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 564:000 | DONE lbl | na 16 16 | 0061b7 |             | xt_accept                            
 565:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 566:000 | DONE ins | na 16 16 | 0061b7 | 98          |                 tya                  ; force flag test
 567:000 | DONE ins | na 16 16 | 0061b8 | d0 03       |                 bne 0061bd           
 568:000 | DONE wsp | na 16 16 |        |             |
 569:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 570:000 | DONE ins | na 16 16 | 0061ba | e8          |                 inx                  ; NIP, TOS is zero which is also FALSE
 571:000 | DONE ins | na 16 16 | 0061bb | e8          |                 inx                  
 572:000 | DONE wsp | na 16 16 |        |             |
 573:000 | DONE ins | na 16 16 | 0061bc | 60          |                 rts                  
 574:000 | DONE wsp | na 16 16 |        |             |
 575:000 | DONE lbl | na 16 16 | 0061bd |             | accept_nonzero                       
 576:000 | DONE ins | na 16 16 | 0061bd | b5 00       |                 lda.dx 00            ; address of buffer is NOS
 577:000 | DONE ins | na 16 16 | 0061bf | 85 16       |                 sta.d 000216         
 578:000 | DONE ins | na 16 16 | 0061c1 | e8          |                 inx                  ; NIP
 579:000 | DONE ins | na 16 16 | 0061c2 | e8          |                 inx                  
 580:000 | DONE wsp | na 16 16 |        |             |
 581:000 | DONE ins | na 16 16 | 0061c3 | 84 18       |                 sty.d 000218         ; Save max number of chars in tmp2
 582:000 | DONE ins | na 16 16 | 0061c5 | a0 00 00    |                 ldy.# 0000           ; Use Y as counter
 583:000 | DONE ins | na 16 16 | 0061c8 | e2 20       |                 sep 20               
 583:001 | DONE ctl | na  8 16 |        |             |         .!a8
 584:000 | DONE wsp | na  8 16 |        |             |
 585:000 | DONE lbl | na  8 16 | 0061ca |             | accept_loop                          
 586:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 587:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
 588:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 589:000 | DONE ins | na  8 16 | 0061ca | 20 47 60    |                 jsr 006047           
 590:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 591:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
 592:000 | DONE ins | na  8 16 | 0061cd | c9 0a       |                 cmp.# AscLF          
 593:000 | DONE ins | na  8 16 | 0061cf | f0 44       |                 beq 006215           
 594:000 | DONE ins | na  8 16 | 0061d1 | c9 0d       |                 cmp.# AscCR          
 595:000 | DONE ins | na  8 16 | 0061d3 | f0 40       |                 beq 006215           
 596:000 | DONE wsp | na  8 16 |        |             |
 597:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
 598:000 | DONE ins | na  8 16 | 0061d5 | c9 08       |                 cmp.# AscBS          
 599:000 | DONE ins | na  8 16 | 0061d7 | f0 44       |                 beq 00621d           
 600:000 | DONE ins | na  8 16 | 0061d9 | c9 7f       |                 cmp.# AscDEL         
 601:000 | DONE ins | na  8 16 | 0061db | f0 40       |                 beq 00621d           
 602:000 | DONE wsp | na  8 16 |        |             |
 603:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
 604:000 | DONE ins | na  8 16 | 0061dd | c9 03       |                 cmp.# AscCC          
 605:000 | DONE ins | na  8 16 | 0061df | d0 03       |                 bne 0061e4           
 606:000 | DONE ins | na  8 16 | 0061e1 | 4c 97 60    |                 jmp 006097           
 607:000 | DONE lbl | na  8 16 | 0061e4 |             | @                                    
 608:000 | DONE ins | na  8 16 | 0061e4 | c9 1b       |                 cmp.# AscESC         
 609:000 | DONE ins | na  8 16 | 0061e6 | d0 03       |                 bne 0061eb           
 610:000 | DONE ins | na  8 16 | 0061e8 | 4c 97 60    |                 jmp 006097           
 611:000 | DONE lbl | na  8 16 | 0061eb |             | @                                    
 612:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
 613:000 | DONE ins | na  8 16 | 0061eb | c9 10       |                 cmp.# AscCP          
 614:000 | DONE ins | na  8 16 | 0061ed | d0 0c       |                 bne 0061fb           
 615:000 | DONE ins | na  8 16 | 0061ef | c2 20       |                 rep 20               
 615:001 | DONE ctl | na 16 16 |        |             |         .!a16
 616:000 | DONE ins | na 16 16 | 0061f1 | a9 d7 6c    |                 lda.# 006cd7         
 617:000 | DONE ins | na 16 16 | 0061f4 | 20 75 6a    |                 jsr 006a75           
 618:000 | DONE ins | na 16 16 | 0061f7 | e2 20       |                 sep 20               
 618:001 | DONE ctl | na  8 16 |        |             |         .!a8
 619:000 | DONE ins | na  8 16 | 0061f9 | 80 cf       |                 bra 0061ca           
 620:000 | DONE lbl | na  8 16 | 0061fb |             | @                                    
 621:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
 622:000 | DONE ins | na  8 16 | 0061fb | c9 0e       |                 cmp.# AscCN          
 623:000 | DONE ins | na  8 16 | 0061fd | d0 0c       |                 bne 00620b           
 624:000 | DONE ins | na  8 16 | 0061ff | c2 20       |                 rep 20               
 624:001 | DONE ctl | na 16 16 |        |             |         .!a16
 625:000 | DONE ins | na 16 16 | 006201 | a9 ea 6c    |                 lda.# 006cea         
 626:000 | DONE ins | na 16 16 | 006204 | 20 75 6a    |                 jsr 006a75           
 627:000 | DONE ins | na 16 16 | 006207 | e2 20       |                 sep 20               
 627:001 | DONE ctl | na  8 16 |        |             |         .!a8
 628:000 | DONE ins | na  8 16 | 006209 | 80 bf       |                 bra 0061ca           
 629:000 | DONE wsp | na  8 16 |        |             |
 630:000 | DONE lbl | na  8 16 | 00620b |             | @                                    
 631:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
 632:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
 633:000 | DONE ins | na  8 16 | 00620b | 20 36 60    |                 jsr 006036           ; echo character
 634:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 635:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 636:000 | DONE wsp | na  8 16 |        |             |
 637:000 | DONE ins | na  8 16 | 00620e | 91 0c       |                 sta.diy 00020c       ; STA (CIB),Y
 638:000 | DONE ins | na  8 16 | 006210 | c8          |                 iny                  
 639:000 | DONE ins | na  8 16 | 006211 | c4 18       |                 cpy.d 000218         ; reached character limit?
 640:000 | DONE ins | na  8 16 | 006213 | d0 b5       |                 bne 0061ca           ; fall thru if buffer limit reached
 641:000 | DONE wsp | na  8 16 |        |             |
 642:000 | DONE lbl | na  8 16 | 006215 |             | accept_eol                           
 643:000 | DONE ins | na  8 16 | 006215 | 84 0e       |                 sty.d 00020e         ; Y contains number of chars accepted already
 644:000 | DONE ins | na  8 16 | 006217 | c2 20       |                 rep 20               
 644:001 | DONE ctl | na 16 16 |        |             |         .!a16
 645:000 | DONE ins | na 16 16 | 006219 | 20 bb 65    |                 jsr 0065bb           ; print final space
 646:000 | DONE ins | na 16 16 | 00621c | 60          |                 rts                  ; this is the actual return of the routine
 647:000 | DONE wsp | na 16 16 |        |             |
 648:000 | DONE lbl | na 16 16 | 00621d |             | accept_bs                            
 649:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 650:000 | DONE ins | na  8 16 | 00621d | c0 00 00    |                 cpy.# 0000           ; buffer empty?
 651:000 | DONE ins | na  8 16 | 006220 | d0 06       |                 bne 006228           
 652:000 | DONE wsp | na  8 16 |        |             |
 653:000 | DONE ins | na  8 16 | 006222 | a9 07       |                 lda.# AscBELL        ; complain and don't delete beyond the start of line
 654:000 | DONE ins | na  8 16 | 006224 | 20 36 60    |                 jsr 006036           
 655:000 | DONE ins | na  8 16 | 006227 | c8          |                 iny                  
 656:000 | DONE lbl | na  8 16 | 006228 |             | @                                    
 657:000 | DONE ins | na  8 16 | 006228 | 88          |                 dey                  
 658:000 | DONE ins | na  8 16 | 006229 | a9 08       |                 lda.# AscBS          ; move back one
 659:000 | DONE ins | na  8 16 | 00622b | 20 36 60    |                 jsr 006036           
 660:000 | DONE ins | na  8 16 | 00622e | a9 20       |                 lda.# AscSP          ; print a space (rubout)
 661:000 | DONE ins | na  8 16 | 006230 | 20 36 60    |                 jsr 006036           
 662:000 | DONE ins | na  8 16 | 006233 | a9 08       |                 lda.# AscBS          ; move back over space
 663:000 | DONE ins | na  8 16 | 006235 | 20 36 60    |                 jsr 006036           
 664:000 | DONE wsp | na  8 16 |        |             |
 665:000 | DONE ins | na  8 16 | 006238 | 80 90       |                 bra 0061ca           
 666:000 | DONE wsp | na  8 16 |        |             |
 667:000 | DONE lbl | na  8 16 | 00623a |             | z_accept                             
 667:001 | DONE ins | na  8 16 | 00623a | 60          |                 rts                  
 668:000 | DONE wsp | na  8 16 |        |             |
 669:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 670:000 | DONE cmt | na  8 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
 671:000 | DONE cmt | na  8 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
 672:000 | DONE cmt | na  8 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
 673:000 | DONE cmt | na  8 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
 674:000 | DONE cmt | na  8 16 |        |             | ; past the Dictionary.
 675:000 | DONE cmt | na  8 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
 676:000 | DONE cmt | na  8 16 |        |             | ; TODO test negative values
 677:000 | DONE lbl | na  8 16 | 00623b |             | xt_allot                             
 678:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 679:000 | DONE ins | na 16 16 | 00623b | 98          |                 tya                  ; force flag check
 680:000 | DONE ins | na 16 16 | 00623c | f0 21       |                 beq 00625f           ; zero bytes, don't do anything
 681:000 | DONE ins | na 16 16 | 00623e | 30 12       |                 bmi 006252           ; free memory instead of reserving it
 682:000 | DONE wsp | na 16 16 |        |             |
 683:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
 684:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
 685:000 | DONE ins | na 16 16 | 006240 | 18          |                 clc                  
 686:000 | DONE ins | na 16 16 | 006241 | 65 00       |                 adc.d 000200         ; create new CP
 687:000 | DONE ins | na 16 16 | 006243 | b0 07       |                 bcs 00624c           ; oops, we've wrapped
 688:000 | DONE wsp | na 16 16 |        |             |
 689:000 | DONE ins | na 16 16 | 006245 | a8          |                 tay                  ; save copy of new CP
 690:000 | DONE wsp | na 16 16 |        |             |
 691:000 | DONE ins | na 16 16 | 006246 | 38          |                 sec                  
 692:000 | DONE ins | na 16 16 | 006247 | e9 ff 7b    |                 sbc.# 007bff         
 693:000 | DONE ins | na 16 16 | 00624a | 30 11       |                 bmi 00625d           ; oops, fall thru if beyond max RAM
 694:000 | DONE wsp | na 16 16 |        |             |
 695:000 | DONE lbl | na 16 16 | 00624c |             | allot_error                          
 696:000 | DONE ins | na 16 16 | 00624c | a9 82 6b    |                 lda.# 006b82         
 697:000 | DONE ins | na 16 16 | 00624f | 4c 6f 6a    |                 jmp 006a6f           
 698:000 | DONE wsp | na 16 16 |        |             |
 699:000 | DONE lbl | na 16 16 | 006252 |             | allot_minus                          
 700:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
 701:000 | DONE ins | na 16 16 | 006252 | 38          |                 sec                  
 702:000 | DONE ins | na 16 16 | 006253 | e5 00       |                 sbc.d 000200         
 703:000 | DONE ins | na 16 16 | 006255 | 90 f5       |                 bcc 00624c           ; oops, we've wrapped
 704:000 | DONE wsp | na 16 16 |        |             |
 705:000 | DONE ins | na 16 16 | 006257 | a8          |                 tay                  
 706:000 | DONE wsp | na 16 16 |        |             |
 707:000 | DONE ins | na 16 16 | 006258 | e9 00 03    |                 sbc.# 000300         ; Carry Flag must still be set
 708:000 | DONE ins | na 16 16 | 00625b | 30 ef       |                 bmi 00624c           ; oops, gone too far back
 709:000 | DONE wsp | na 16 16 |        |             |
 710:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
 711:000 | DONE lbl | na 16 16 | 00625d |             | allot_done                           
 712:000 | DONE ins | na 16 16 | 00625d | 84 00       |                 sty.d 000200         ; new compiler pointer
 713:000 | DONE lbl | na 16 16 | 00625f |             | allot_real_gone                      
 714:000 | DONE ins | na 16 16 | 00625f | b4 00       |                 ldy.dx 00            ; DROP
 715:000 | DONE ins | na 16 16 | 006261 | e8          |                 inx                  
 716:000 | DONE ins | na 16 16 | 006262 | e8          |                 inx                  
 717:000 | DONE wsp | na 16 16 |        |             |
 718:000 | DONE lbl | na 16 16 | 006263 |             | z_allot                              
 718:001 | DONE ins | na 16 16 | 006263 | 60          |                 rts                  
 719:000 | DONE wsp | na 16 16 |        |             |
 720:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 721:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
 722:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
 723:000 | DONE lbl | na 16 16 | 006264 |             | xt_and                               
 724:000 | DONE ins | na 16 16 | 006264 | 98          |                 tya                  
 725:000 | DONE ins | na 16 16 | 006265 | 35 00       |                 and.dx 00            
 726:000 | DONE ins | na 16 16 | 006267 | a8          |                 tay                  
 727:000 | DONE wsp | na 16 16 |        |             |
 728:000 | DONE ins | na 16 16 | 006268 | e8          |                 inx                  ; NIP
 729:000 | DONE ins | na 16 16 | 006269 | e8          |                 inx                  
 730:000 | DONE wsp | na 16 16 |        |             |
 731:000 | DONE lbl | na 16 16 | 00626a |             | z_and                                
 731:001 | DONE ins | na 16 16 | 00626a | 60          |                 rts                  
 732:000 | DONE wsp | na 16 16 |        |             |
 733:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 734:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
 735:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
 736:000 | DONE lbl | na 16 16 | 00626b |             | xt_base                              
 737:000 | DONE ins | na 16 16 | 00626b | ca          |                 dex                  
 738:000 | DONE ins | na 16 16 | 00626c | ca          |                 dex                  
 739:000 | DONE ins | na 16 16 | 00626d | 94 00       |                 sty.dx 00            
 740:000 | DONE wsp | na 16 16 |        |             |
 741:000 | DONE ins | na 16 16 | 00626f | a0 1c 02    |                 ldy.# 00021c         
 742:000 | DONE wsp | na 16 16 |        |             |
 743:000 | DONE lbl | na 16 16 | 006272 |             | z_base                               
 743:001 | DONE ins | na 16 16 | 006272 | 60          |                 rts                  
 744:000 | DONE wsp | na 16 16 |        |             |
 745:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 746:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 747:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
 748:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 749:000 | DONE lbl | na 16 16 | 006273 |             | xt_bell                              
 750:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 751:000 | DONE ins | na 16 16 | 006273 | a9 07 00    |                 lda.# AscBELL        
 752:000 | DONE ins | na 16 16 | 006276 | 20 36 60    |                 jsr 006036           
 753:000 | DONE wsp | na 16 16 |        |             |
 754:000 | DONE lbl | na 16 16 | 006279 |             | z_bell                               
 754:001 | DONE ins | na 16 16 | 006279 | 60          |                 rts                  
 755:000 | DONE wsp | na 16 16 |        |             |
 756:000 | DONE wsp | na 16 16 |        |             |
 757:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 758:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 759:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 760:000 | DONE lbl | na 16 16 | 00627a |             | xt_bl                                
 761:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 762:000 | DONE ins | na 16 16 | 00627a | ca          |                 dex                  
 763:000 | DONE ins | na 16 16 | 00627b | ca          |                 dex                  
 764:000 | DONE ins | na 16 16 | 00627c | 94 00       |                 sty.dx 00            
 765:000 | DONE ins | na 16 16 | 00627e | a0 20 00    |                 ldy.# AscSP          
 766:000 | DONE wsp | na 16 16 |        |             |
 767:000 | DONE lbl | na 16 16 | 006281 |             | z_bl                                 
 767:001 | DONE ins | na 16 16 | 006281 | 60          |                 rts                  
 768:000 | DONE wsp | na 16 16 |        |             |
 769:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 770:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 771:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 772:000 | DONE lbl | na 16 16 | 006282 |             | xt_bye                               
 773:000 | DONE ins | na 16 16 | 006282 | 58          |                 cli                  
 774:000 | DONE ins | na 16 16 | 006283 | 00 00       |                 brk 00               ; status byte 00 required for assembler
 775:000 | DONE wsp | na 16 16 |        |             |
 776:000 | DONE lbl | na 16 16 | 006285 |             | z_bye                                
 776:001 | DONE ins | na 16 16 | 006285 | 60          |                 rts                  ; dummy for compiling, never reached
 777:000 | DONE wsp | na 16 16 |        |             |
 778:000 | DONE wsp | na 16 16 |        |             |
 779:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 780:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
 781:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
 782:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
 783:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
 784:000 | DONE wsp | na 16 16 |        |             |
 785:000 | DONE wsp | na 16 16 |        |             |
 786:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 787:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
 788:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
 789:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
 790:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
 791:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
 792:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
 793:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
 794:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
 795:000 | DONE lbl | na 16 16 | 006286 |             | xt_compilecomma                      
 796:000 | DONE wsp | na 16 16 |        |             |
 797:000 | DONE lbl | na 16 16 | 006286 |             | compile_as_code                      
 798:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
 799:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
 800:000 | DONE cmt | na 16 16 |        |             |                 ; TODO currently just compiles subroutine jumps
 801:000 | DONE wsp | na 16 16 |        |             |
 802:000 | DONE lbl | na 16 16 | 006286 |             | compile_as_jump                      
 803:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
 804:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
 805:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
 806:000 | DONE cmt | na 16 16 |        |             |                 ; win!
 807:000 | DONE ins | na 16 16 | 006286 | a9 20 00    |                 lda.# 20             ; opcode for JSR
 808:000 | DONE ins | na 16 16 | 006289 | 92 00       |                 sta.di 000200        ; STA (CP)
 809:000 | DONE ins | na 16 16 | 00628b | e6 00       |                 inc.d 000200         
 810:000 | DONE wsp | na 16 16 |        |             |
 811:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
 812:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
 813:000 | DONE ins | na 16 16 | 00628d | 98          |                 tya                  
 814:000 | DONE ins | na 16 16 | 00628e | 92 00       |                 sta.di 000200        
 815:000 | DONE ins | na 16 16 | 006290 | e6 00       |                 inc.d 000200         
 816:000 | DONE ins | na 16 16 | 006292 | e6 00       |                 inc.d 000200         
 817:000 | DONE wsp | na 16 16 |        |             |
 818:000 | DONE ins | na 16 16 | 006294 | b4 00       |                 ldy.dx 00            
 819:000 | DONE ins | na 16 16 | 006296 | e8          |                 inx                  
 820:000 | DONE ins | na 16 16 | 006297 | e8          |                 inx                  
 821:000 | DONE wsp | na 16 16 |        |             |
 822:000 | DONE lbl | na 16 16 | 006298 |             | z_compilecomma                       
 822:001 | DONE ins | na 16 16 | 006298 | 60          |                 rts                  
 823:000 | DONE wsp | na 16 16 |        |             |
 824:000 | DONE wsp | na 16 16 |        |             |
 825:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 826:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
 827:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
 828:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
 829:000 | DONE cmt | na 16 16 |        |             | ; lifting.
 830:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
 831:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
 832:000 | DONE lbl | na 16 16 | 006299 |             | xt_constant                          
 833:000 | DONE ins | na 16 16 | 006299 | 20 c9 62    |                 jsr 0062c9           
 834:000 | DONE wsp | na 16 16 |        |             |
 835:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
 836:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
 837:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
 838:000 | DONE ins | na 16 16 | 00629c | a5 00       |                 lda.d 000200         
 839:000 | DONE ins | na 16 16 | 00629e | 3a          |                 dec.a                
 840:000 | DONE ins | na 16 16 | 00629f | 3a          |                 dec.a                
 841:000 | DONE ins | na 16 16 | 0062a0 | 85 16       |                 sta.d 000216         
 842:000 | DONE wsp | na 16 16 |        |             |
 843:000 | DONE ins | na 16 16 | 0062a2 | a9 15 6a    |                 lda.# 006a15         
 844:000 | DONE ins | na 16 16 | 0062a5 | 92 16       |                 sta.di 000216        ; STA (TMP1)
 845:000 | DONE wsp | na 16 16 |        |             |
 846:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
 847:000 | DONE ins | na 16 16 | 0062a7 | 98          |                 tya                  ; there is no "sty.di cp"
 848:000 | DONE ins | na 16 16 | 0062a8 | 92 00       |                 sta.di 000200        
 849:000 | DONE ins | na 16 16 | 0062aa | e6 00       |                 inc.d 000200         
 850:000 | DONE ins | na 16 16 | 0062ac | e6 00       |                 inc.d 000200         
 851:000 | DONE wsp | na 16 16 |        |             |
 852:000 | DONE ins | na 16 16 | 0062ae | b4 00       |                 ldy.dx 00            ; DROP
 853:000 | DONE ins | na 16 16 | 0062b0 | e8          |                 inx                  
 854:000 | DONE ins | na 16 16 | 0062b1 | e8          |                 inx                  
 855:000 | DONE wsp | na 16 16 |        |             |
 856:000 | DONE lbl | na 16 16 | 0062b2 |             | z_constant                           
 856:001 | DONE ins | na 16 16 | 0062b2 | 60          |                 rts                  
 857:000 | DONE wsp | na 16 16 |        |             |
 858:000 | DONE wsp | na 16 16 |        |             |
 859:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 860:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 861:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 862:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 863:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 864:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 865:000 | DONE lbl | na 16 16 | 0062b3 |             | xt_count                             
 866:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 867:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 868:000 | DONE ins | na 16 16 | 0062b3 | 98          |                 tya                  
 869:000 | DONE ins | na 16 16 | 0062b4 | 1a          |                 inc.a                ; String address starts one char later
 870:000 | DONE wsp | na 16 16 |        |             |
 871:000 | DONE ins | na 16 16 | 0062b5 | ca          |                 dex                  
 872:000 | DONE ins | na 16 16 | 0062b6 | ca          |                 dex                  
 873:000 | DONE ins | na 16 16 | 0062b7 | 95 00       |                 sta.dx 00            ; NOS
 874:000 | DONE wsp | na 16 16 |        |             |
 875:000 | DONE ins | na 16 16 | 0062b9 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y  first byte is length
 876:000 | DONE ins | na 16 16 | 0062bc | eb          |                 xba                  ; move length to LSB
 877:000 | DONE ins | na 16 16 | 0062bd | 29 ff 00    |                 and.# 00ff           ; get rid of whatever was MSB
 878:000 | DONE ins | na 16 16 | 0062c0 | a8          |                 tay                  ; TOS
 879:000 | DONE wsp | na 16 16 |        |             |
 880:000 | DONE lbl | na 16 16 | 0062c1 |             | z_count                              
 880:001 | DONE ins | na 16 16 | 0062c1 | 60          |                 rts                  
 881:000 | DONE wsp | na 16 16 |        |             |
 882:000 | DONE wsp | na 16 16 |        |             |
 883:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 884:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 885:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 886:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 887:000 | DONE lbl | na 16 16 | 0062c2 |             | xt_cr                                
 888:000 | DONE ins | na 16 16 | 0062c2 | a9 0a 00    |                 lda.# AscLF          ; test with AscCR for emulators
 889:000 | DONE ins | na 16 16 | 0062c5 | 20 36 60    |                 jsr 006036           
 890:000 | DONE wsp | na 16 16 |        |             |
 891:000 | DONE lbl | na 16 16 | 0062c8 |             | z_cr                                 
 891:001 | DONE ins | na 16 16 | 0062c8 | 60          |                 rts                  
 892:000 | DONE wsp | na 16 16 |        |             |
 893:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 894:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
 895:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
 896:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
 897:000 | DONE cmt | na 16 16 |        |             | ; address.
 898:000 | DONE lbl | na 16 16 | 0062c9 |             | xt_create                            
 899:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 900:000 | DONE ins | na 16 16 | 0062c9 | 20 06 65    |                 jsr 006506           ; ( -- addr u )
 901:000 | DONE ins | na 16 16 | 0062cc | d0 06       |                 bne 0062d4           
 902:000 | DONE wsp | na 16 16 |        |             |
 903:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
 904:000 | DONE ins | na 16 16 | 0062ce | a9 21 6c    |                 lda.# 006c21         
 905:000 | DONE ins | na 16 16 | 0062d1 | 4c 6f 6a    |                 jmp 006a6f           
 906:000 | DONE wsp | na 16 16 |        |             |
 907:000 | DONE lbl | na 16 16 | 0062d4 |             | create_got_name                      
 908:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
 909:000 | DONE ins | na 16 16 | 0062d4 | 20 a8 6a    |                 jsr 006aa8           
 910:000 | DONE wsp | na 16 16 |        |             |
 911:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
 912:000 | DONE cmt | na 16 16 |        |             |                 ; word
 913:000 | DONE ins | na 16 16 | 0062d7 | a5 00       |                 lda.d 000200         
 914:000 | DONE ins | na 16 16 | 0062d9 | 85 16       |                 sta.d 000216         ; save start of new word
 915:000 | DONE wsp | na 16 16 |        |             |
 916:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
 917:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
 918:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
 919:000 | DONE ins | na 16 16 | 0062db | 98          |                 tya                  
 920:000 | DONE ins | na 16 16 | 0062dc | 29 ff 00    |                 and.# 00ff           
 921:000 | DONE ins | na 16 16 | 0062df | 85 18       |                 sta.d 000218         ; save length of name string
 922:000 | DONE wsp | na 16 16 |        |             |
 923:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
 924:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
 925:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
 926:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
 927:000 | DONE ins | na 16 16 | 0062e1 | 18          |                 clc                  
 928:000 | DONE ins | na 16 16 | 0062e2 | 69 08 00    |                 adc.# 0008           
 929:000 | DONE ins | na 16 16 | 0062e5 | 85 1a       |                 sta.d 00021a         ; total bytes required for header
 930:000 | DONE wsp | na 16 16 |        |             |
 931:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
 932:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
 933:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
 934:000 | DONE ins | na 16 16 | 0062e7 | 1a          |                 inc.a                
 935:000 | DONE ins | na 16 16 | 0062e8 | 1a          |                 inc.a                
 936:000 | DONE ins | na 16 16 | 0062e9 | 1a          |                 inc.a                
 937:000 | DONE wsp | na 16 16 |        |             |
 938:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
 939:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
 940:000 | DONE ins | na 16 16 | 0062ea | 18          |                 clc                  
 941:000 | DONE ins | na 16 16 | 0062eb | 65 00       |                 adc.d 000200         
 942:000 | DONE ins | na 16 16 | 0062ed | 85 00       |                 sta.d 000200         
 943:000 | DONE wsp | na 16 16 |        |             |
 944:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
 945:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
 946:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
 947:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
 948:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
 949:000 | DONE ins | na 16 16 | 0062ef | b5 00       |                 lda.dx 00            
 950:000 | DONE ins | na 16 16 | 0062f1 | 48          |                 pha                  
 951:000 | DONE wsp | na 16 16 |        |             |
 952:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
 953:000 | DONE ins | na 16 16 | 0062f2 | a0 00 00    |                 ldy.# 0000           ; Y is now an index, not TOS
 954:000 | DONE ins | na 16 16 | 0062f5 | a5 18       |                 lda.d 000218         ; get length byte
 955:000 | DONE ins | na 16 16 | 0062f7 | 91 16       |                 sta.diy 000216       ; STA (TMP1),Y
 956:000 | DONE ins | na 16 16 | 0062f9 | c8          |                 iny                  
 957:000 | DONE ins | na 16 16 | 0062fa | c8          |                 iny                  
 958:000 | DONE wsp | na 16 16 |        |             |
 959:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
 960:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
 961:000 | DONE ins | na 16 16 | 0062fb | a5 02       |                 lda.d 000202         
 962:000 | DONE ins | na 16 16 | 0062fd | 91 16       |                 sta.diy 000216       
 963:000 | DONE ins | na 16 16 | 0062ff | c8          |                 iny                  
 964:000 | DONE ins | na 16 16 | 006300 | c8          |                 iny                  
 965:000 | DONE wsp | na 16 16 |        |             |
 966:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
 967:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
 968:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
 969:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
 970:000 | DONE ins | na 16 16 | 006301 | a5 16       |                 lda.d 000216         ; can't use CP, because we've allotted space
 971:000 | DONE ins | na 16 16 | 006303 | 85 02       |                 sta.d 000202         ; while we've got it, make old CP the new DP
 972:000 | DONE wsp | na 16 16 |        |             |
 973:000 | DONE ins | na 16 16 | 006305 | 18          |                 clc                  
 974:000 | DONE ins | na 16 16 | 006306 | 65 1a       |                 adc.d 00021a         ; total header length
 975:000 | DONE ins | na 16 16 | 006308 | 91 16       |                 sta.diy 000216       
 976:000 | DONE ins | na 16 16 | 00630a | c8          |                 iny                  
 977:000 | DONE ins | na 16 16 | 00630b | c8          |                 iny                  
 978:000 | DONE wsp | na 16 16 |        |             |
 979:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
 980:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
 981:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
 982:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
 983:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
 984:000 | DONE ins | na 16 16 | 00630c | 1a          |                 inc.a                
 985:000 | DONE ins | na 16 16 | 00630d | 1a          |                 inc.a                
 986:000 | DONE ins | na 16 16 | 00630e | 1a          |                 inc.a                
 987:000 | DONE ins | na 16 16 | 00630f | 91 16       |                 sta.diy 000216       
 988:000 | DONE ins | na 16 16 | 006311 | c8          |                 iny                  
 989:000 | DONE ins | na 16 16 | 006312 | c8          |                 iny                  
 990:000 | DONE wsp | na 16 16 |        |             |
 991:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
 992:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
 993:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
 994:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
 995:000 | DONE ins | na 16 16 | 006313 | 68          |                 pla                  ; get back string address
 996:000 | DONE ins | na 16 16 | 006314 | 38          |                 sec                  
 997:000 | DONE ins | na 16 16 | 006315 | e9 08 00    |                 sbc.# 0008           
 998:000 | DONE ins | na 16 16 | 006318 | 85 1a       |                 sta.d 00021a         
 999:000 | DONE ins | na 16 16 | 00631a | e2 20       |                 sep 20               
 999:001 | DONE ctl | na  8 16 |        |             |         .!a8
1000:000 | DONE lbl | na  8 16 | 00631c |             | @                                    
1001:000 | DONE ins | na  8 16 | 00631c | b1 1a       |                 lda.diy 00021a       
1002:000 | DONE ins | na  8 16 | 00631e | 91 16       |                 sta.diy 000216       
1003:000 | DONE ins | na  8 16 | 006320 | c8          |                 iny                  
1004:000 | DONE ins | na  8 16 | 006321 | c6 18       |                 dec.d 000218         
1005:000 | DONE ins | na  8 16 | 006323 | d0 f7       |                 bne 00631c           
1006:000 | DONE wsp | na  8 16 |        |             |
1007:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1008:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1009:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1010:000 | DONE cmt | na  8 16 |        |             |                 ; good
1011:000 | DONE ins | na  8 16 | 006325 | a9 20       |                 lda.# 20             ; opcode of JSR
1012:000 | DONE ins | na  8 16 | 006327 | 91 16       |                 sta.diy 000216       
1013:000 | DONE ins | na  8 16 | 006329 | c8          |                 iny                  ; single increase only because we have 8-bit A
1014:000 | DONE wsp | na  8 16 |        |             |
1015:000 | DONE ins | na  8 16 | 00632a | a9 0e       |                 lda.# .lsb 006a0e    
1016:000 | DONE ins | na  8 16 | 00632c | 91 16       |                 sta.diy 000216       
1017:000 | DONE ins | na  8 16 | 00632e | c8          |                 iny                  
1018:000 | DONE wsp | na  8 16 |        |             |
1019:000 | DONE ins | na  8 16 | 00632f | a9 6a       |                 lda.# .msb 006a0e    
1020:000 | DONE ins | na  8 16 | 006331 | 91 16       |                 sta.diy 000216       
1021:000 | DONE wsp | na  8 16 |        |             |
1022:000 | DONE ins | na  8 16 | 006333 | c2 20       |                 rep 20               
1022:001 | DONE ctl | na 16 16 |        |             |         .!a16
1023:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1024:000 | DONE ins | na 16 16 | 006335 | b4 02       |                 ldy.dx 02            
1025:000 | DONE ins | na 16 16 | 006337 | e8          |                 inx                  
1026:000 | DONE ins | na 16 16 | 006338 | e8          |                 inx                  
1027:000 | DONE ins | na 16 16 | 006339 | e8          |                 inx                  
1028:000 | DONE ins | na 16 16 | 00633a | e8          |                 inx                  
1029:000 | DONE wsp | na 16 16 |        |             |
1030:000 | DONE lbl | na 16 16 | 00633b |             | z_create                             
1030:001 | DONE ins | na 16 16 | 00633b | 60          |                 rts                  
1031:000 | DONE wsp | na 16 16 |        |             |
1032:000 | DONE wsp | na 16 16 |        |             |
1033:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1034:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1035:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1036:000 | DONE lbl | na 16 16 | 00633c |             | xt_decimal                           
1037:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1038:000 | DONE ins | na 16 16 | 00633c | a9 0a 00    |                 lda.# 000a           
1039:000 | DONE ins | na 16 16 | 00633f | 85 1c       |                 sta.d 00021c         
1040:000 | DONE wsp | na 16 16 |        |             |
1041:000 | DONE lbl | na 16 16 | 006341 |             | z_decimal                            
1041:001 | DONE ins | na 16 16 | 006341 | 60          |                 rts                  
1042:000 | DONE wsp | na 16 16 |        |             |
1043:000 | DONE wsp | na 16 16 |        |             |
1044:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1045:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1046:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1047:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1048:000 | DONE lbl | na 16 16 | 006342 |             | xt_depth                             
1049:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1050:000 | DONE cmt | na 16 16 |        |             | 		; We've got zero entries when X is dsp0
1051:000 | DONE ins | na 16 16 | 006342 | 86 04       |                 stx.d 000204         
1052:000 | DONE ins | na 16 16 | 006344 | a9 f8 02    |                 lda.# 0002f8         
1053:000 | DONE ins | na 16 16 | 006347 | 38          |                 sec                  
1054:000 | DONE ins | na 16 16 | 006348 | e5 04       |                 sbc.d 000204         
1055:000 | DONE wsp | na 16 16 |        |             |
1056:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
1057:000 | DONE ins | na 16 16 | 00634a | 4a          |                 lsr.a                
1058:000 | DONE wsp | na 16 16 |        |             |
1059:000 | DONE ins | na 16 16 | 00634b | ca          |                 dex                  
1060:000 | DONE ins | na 16 16 | 00634c | ca          |                 dex                  
1061:000 | DONE ins | na 16 16 | 00634d | 94 00       |                 sty.dx 00            
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
1064:000 | DONE ins | na 16 16 | 00634f | a8          |                 tay                  
1065:000 | DONE wsp | na 16 16 |        |             |
1066:000 | DONE lbl | na 16 16 | 006350 |             | z_depth                              
1066:001 | DONE ins | na 16 16 | 006350 | 60          |                 rts                  
1067:000 | DONE wsp | na 16 16 |        |             |
1068:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1069:000 | DONE cmt | na 16 16 |        |             | ; DOT ( n -- ) X bytes / X cycles
1070:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
1071:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
1072:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
1073:000 | DONE cmt | na 16 16 |        |             | ; focus on size
1074:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
1075:000 | DONE lbl | na 16 16 | 006351 |             | xt_dot                               
1076:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1077:000 | DONE ins | na 16 16 | 006351 | 98          |                 tya                  
1078:000 | DONE ins | na 16 16 | 006352 | 29 00 ff    |                 and.# 0ff00          
1079:000 | DONE ins | na 16 16 | 006355 | eb          |                 xba                  
1080:000 | DONE ins | na 16 16 | 006356 | 20 8d 6a    |                 jsr 006a8d           
1081:000 | DONE ins | na 16 16 | 006359 | 98          |                 tya                  
1082:000 | DONE ins | na 16 16 | 00635a | 29 ff 00    |                 and.# 00ff           
1083:000 | DONE ins | na 16 16 | 00635d | 20 8d 6a    |                 jsr 006a8d           
1084:000 | DONE ins | na 16 16 | 006360 | 20 bb 65    |                 jsr 0065bb           
1085:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1086:000 | DONE wsp | na 16 16 |        |             |
1087:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
1088:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
1089:000 | DONE ins | na 16 16 | 006363 | 20 bd 63    |                 jsr 0063bd           
1090:000 | DONE wsp | na 16 16 |        |             |
1091:000 | DONE lbl | na 16 16 | 006366 |             | z_dot                                
1091:001 | DONE ins | na 16 16 | 006366 | 60          |                 rts                  
1092:000 | DONE wsp | na 16 16 |        |             |
1093:000 | DONE wsp | na 16 16 |        |             |
1094:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1095:000 | DONE cmt | na 16 16 |        |             | ; DOTPAREN ( "string" -- ) 13 bytes / X cycles
1096:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
1097:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
1098:000 | DONE lbl | na 16 16 | 006367 |             | xt_dotparen                          
1099:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
1100:000 | DONE ins | na 16 16 | 006367 | ca          |                 dex                  
1101:000 | DONE ins | na 16 16 | 006368 | ca          |                 dex                  
1102:000 | DONE ins | na 16 16 | 006369 | 94 00       |                 sty.dx 00            
1103:000 | DONE ins | na 16 16 | 00636b | a0 29 00    |                 ldy.# 29             
1104:000 | DONE wsp | na 16 16 |        |             |
1105:000 | DONE ins | na 16 16 | 00636e | 20 38 65    |                 jsr 006538           ; ( -- addr u)
1106:000 | DONE ins | na 16 16 | 006371 | 20 ee 65    |                 jsr 0065ee           
1107:000 | DONE wsp | na 16 16 |        |             |
1108:000 | DONE lbl | na 16 16 | 006374 |             | z_dotparen                           
1108:001 | DONE ins | na 16 16 | 006374 | 60          |                 rts                  
1109:000 | DONE wsp | na 16 16 |        |             |
1110:000 | DONE wsp | na 16 16 |        |             |
1111:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1112:000 | DONE cmt | na 16 16 |        |             | ; DOTS ".S" ( -- ) X bytes / X cycles
1113:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
1114:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
1115:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
1116:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
1117:000 | DONE lbl | na 16 16 | 006375 |             | xt_dots                              
1118:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1119:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1120:000 | DONE ins | na 16 16 | 006375 | 20 42 63    |                 jsr 006342           ; ( -- u)
1121:000 | DONE wsp | na 16 16 |        |             |
1122:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
1123:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
1124:000 | DONE ins | na 16 16 | 006378 | a9 3c 00    |                 lda.# 3c             
1125:000 | DONE ins | na 16 16 | 00637b | 20 36 60    |                 jsr 006036           
1126:000 | DONE wsp | na 16 16 |        |             |
1127:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1128:000 | DONE ins | na 16 16 | 00637e | 98          |                 tya                  
1129:000 | DONE ins | na 16 16 | 00637f | 29 00 ff    |                 and.# 0ff00          
1130:000 | DONE ins | na 16 16 | 006382 | eb          |                 xba                  
1131:000 | DONE ins | na 16 16 | 006383 | 20 8d 6a    |                 jsr 006a8d           
1132:000 | DONE ins | na 16 16 | 006386 | 98          |                 tya                  
1133:000 | DONE ins | na 16 16 | 006387 | 29 ff 00    |                 and.# 00ff           
1134:000 | DONE ins | na 16 16 | 00638a | 20 8d 6a    |                 jsr 006a8d           
1135:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1136:000 | DONE wsp | na 16 16 |        |             |
1137:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
1138:000 | DONE ins | na 16 16 | 00638d | a9 3e 00    |                 lda.# 3e             
1139:000 | DONE ins | na 16 16 | 006390 | 20 36 60    |                 jsr 006036           
1140:000 | DONE ins | na 16 16 | 006393 | 20 bb 65    |                 jsr 0065bb           
1141:000 | DONE wsp | na 16 16 |        |             |
1142:000 | DONE wsp | na 16 16 |        |             |
1143:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
1144:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
1145:000 | DONE ins | na 16 16 | 006396 | 98          |                 tya                  ; force flag test
1146:000 | DONE ins | na 16 16 | 006397 | f0 20       |                 beq 0063b9           
1147:000 | DONE wsp | na 16 16 |        |             |
1148:000 | DONE lbl | na 16 16 | 006399 |             | dots_not_empty                       
1149:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
1150:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
1151:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
1152:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
1153:000 | DONE wsp | na 16 16 |        |             |
1154:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
1155:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
1156:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
1157:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
1158:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
1159:000 | DONE ins | na 16 16 | 006399 | da          |                 phx                  
1160:000 | DONE wsp | na 16 16 |        |             |
1161:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
1162:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
1163:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
1164:000 | DONE ins | na 16 16 | 00639a | a2 f8 02    |                 ldx.# 0002f8         ; points to dsp0, which is garbage
1165:000 | DONE ins | na 16 16 | 00639d | ca          |                 dex                  
1166:000 | DONE ins | na 16 16 | 00639e | ca          |                 dex                  ; points to dsp0-2, which is more garbage
1167:000 | DONE wsp | na 16 16 |        |             |
1168:000 | DONE lbl | na 16 16 | 00639f |             | dots_loop                            
1169:000 | DONE ins | na 16 16 | 00639f | ca          |                 dex                  ; get next element on DS, initially dsp0-4
1170:000 | DONE ins | na 16 16 | 0063a0 | ca          |                 dex                  
1171:000 | DONE wsp | na 16 16 |        |             |
1172:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1173:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
1174:000 | DONE ins | na 16 16 | 0063a1 | b5 00       |                 lda.dx 00            
1175:000 | DONE ins | na 16 16 | 0063a3 | 29 00 ff    |                 and.# 0ff00          
1176:000 | DONE ins | na 16 16 | 0063a6 | eb          |                 xba                  
1177:000 | DONE ins | na 16 16 | 0063a7 | 20 8d 6a    |                 jsr 006a8d           
1178:000 | DONE ins | na 16 16 | 0063aa | b5 00       |                 lda.dx 00            
1179:000 | DONE ins | na 16 16 | 0063ac | 29 ff 00    |                 and.# 00ff           
1180:000 | DONE ins | na 16 16 | 0063af | 20 8d 6a    |                 jsr 006a8d           
1181:000 | DONE ins | na 16 16 | 0063b2 | 20 bb 65    |                 jsr 0065bb           
1182:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE ins | na 16 16 | 0063b5 | 88          |                 dey                  
1185:000 | DONE ins | na 16 16 | 0063b6 | d0 e7       |                 bne 00639f           
1186:000 | DONE wsp | na 16 16 |        |             |
1187:000 | DONE ins | na 16 16 | 0063b8 | fa          |                 plx                  ; restore original DSP
1188:000 | DONE wsp | na 16 16 |        |             |
1189:000 | DONE lbl | na 16 16 | 0063b9 |             | dots_done                            
1190:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
1191:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
1192:000 | DONE ins | na 16 16 | 0063b9 | 20 bd 63    |                 jsr 0063bd           
1193:000 | DONE wsp | na 16 16 |        |             |
1194:000 | DONE lbl | na 16 16 | 0063bc |             | z_dots                               
1194:001 | DONE ins | na 16 16 | 0063bc | 60          |                 rts                  
1195:000 | DONE wsp | na 16 16 |        |             |
1196:000 | DONE wsp | na 16 16 |        |             |
1197:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1198:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1199:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1200:000 | DONE wsp | na 16 16 |        |             |
1201:000 | DONE lbl | na 16 16 | 0063bd |             | xt_drop                              
1202:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1203:000 | DONE ins | na 16 16 | 0063bd | b4 00       |                 ldy.dx 00            
1204:000 | DONE ins | na 16 16 | 0063bf | e8          |                 inx                  
1205:000 | DONE ins | na 16 16 | 0063c0 | e8          |                 inx                  
1206:000 | DONE wsp | na 16 16 |        |             |
1207:000 | DONE lbl | na 16 16 | 0063c1 |             | z_drop                               
1207:001 | DONE ins | na 16 16 | 0063c1 | 60          |                 rts                  
1208:000 | DONE wsp | na 16 16 |        |             |
1209:000 | DONE wsp | na 16 16 |        |             |
1210:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1211:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1212:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1213:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1214:000 | DONE lbl | na 16 16 | 0063c2 |             | xt_dump                              
1215:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1216:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1217:000 | DONE ins | na 16 16 | 0063c2 | 84 16       |                 sty.d 000216         
1218:000 | DONE wsp | na 16 16 |        |             |
1219:000 | DONE lbl | na 16 16 | 0063c4 |             | dump_line_loop                       
1220:000 | DONE ins | na 16 16 | 0063c4 | 20 c2 62    |                 jsr 0062c2           
1221:000 | DONE wsp | na 16 16 |        |             |
1222:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1223:000 | DONE ins | na 16 16 | 0063c7 | a0 10 00    |                 ldy.# 0010           
1224:000 | DONE lbl | na 16 16 | 0063ca |             | dump_byte_loop                       
1225:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1226:000 | DONE ins | na 16 16 | 0063ca | a5 16       |                 lda.d 000216         
1227:000 | DONE ins | na 16 16 | 0063cc | f0 11       |                 beq 0063df           
1228:000 | DONE wsp | na 16 16 |        |             |
1229:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1230:000 | DONE ins | na 16 16 | 0063ce | a1 00       |                 lda.dxi 00           
1231:000 | DONE ins | na 16 16 | 0063d0 | 20 8d 6a    |                 jsr 006a8d           ; TODO replace by EMIT
1232:000 | DONE ins | na 16 16 | 0063d3 | 20 bb 65    |                 jsr 0065bb           
1233:000 | DONE wsp | na 16 16 |        |             |
1234:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1235:000 | DONE ins | na 16 16 | 0063d6 | f6 00       |                 inc.dx 00            
1236:000 | DONE wsp | na 16 16 |        |             |
1237:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1238:000 | DONE ins | na 16 16 | 0063d8 | c6 16       |                 dec.d 000216         
1239:000 | DONE ins | na 16 16 | 0063da | 88          |                 dey                  
1240:000 | DONE ins | na 16 16 | 0063db | d0 ed       |                 bne 0063ca           
1241:000 | DONE ins | na 16 16 | 0063dd | 80 e5       |                 bra 0063c4           
1242:000 | DONE wsp | na 16 16 |        |             |
1243:000 | DONE lbl | na 16 16 | 0063df |             | dump_done                            
1244:000 | DONE ins | na 16 16 | 0063df | 20 c2 62    |                 jsr 0062c2           
1245:000 | DONE wsp | na 16 16 |        |             |
1246:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1247:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1248:000 | DONE ins | na 16 16 | 0063e2 | b4 02       |                 ldy.dx 02            
1249:000 | DONE ins | na 16 16 | 0063e4 | e8          |                 inx                  
1250:000 | DONE ins | na 16 16 | 0063e5 | e8          |                 inx                  
1251:000 | DONE ins | na 16 16 | 0063e6 | e8          |                 inx                  
1252:000 | DONE ins | na 16 16 | 0063e7 | e8          |                 inx                  
1253:000 | DONE wsp | na 16 16 |        |             |
1254:000 | DONE lbl | na 16 16 | 0063e8 |             | z_dump                               
1254:001 | DONE ins | na 16 16 | 0063e8 | 60          |                 rts                  
1255:000 | DONE wsp | na 16 16 |        |             |
1256:000 | DONE wsp | na 16 16 |        |             |
1257:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1258:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1259:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1260:000 | DONE wsp | na 16 16 |        |             |
1261:000 | DONE lbl | na 16 16 | 0063e9 |             | xt_dup                               
1262:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1263:000 | DONE ins | na 16 16 | 0063e9 | ca          |                 dex                  
1264:000 | DONE ins | na 16 16 | 0063ea | ca          |                 dex                  
1265:000 | DONE ins | na 16 16 | 0063eb | 94 00       |                 sty.dx 00            
1266:000 | DONE wsp | na 16 16 |        |             |
1267:000 | DONE lbl | na 16 16 | 0063ed |             | z_dup                                
1267:001 | DONE ins | na 16 16 | 0063ed | 60          |                 rts                  
1268:000 | DONE wsp | na 16 16 |        |             |
1269:000 | DONE wsp | na 16 16 |        |             |
1270:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1271:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1272:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1273:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1274:000 | DONE lbl | na 16 16 | 0063ee |             | xt_evaluate                          
1275:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1276:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1277:000 | DONE ins | na 16 16 | 0063ee | a5 12       |                 lda.d 000212         ; >IN
1278:000 | DONE ins | na 16 16 | 0063f0 | 48          |                 pha                  
1279:000 | DONE ins | na 16 16 | 0063f1 | a5 0a       |                 lda.d 00020a         ; Input Source (SOURCE-ID)
1280:000 | DONE ins | na 16 16 | 0063f3 | 48          |                 pha                  
1281:000 | DONE ins | na 16 16 | 0063f4 | a5 0c       |                 lda.d 00020c         
1282:000 | DONE ins | na 16 16 | 0063f6 | 48          |                 pha                  
1283:000 | DONE ins | na 16 16 | 0063f7 | a5 0e       |                 lda.d 00020e         
1284:000 | DONE ins | na 16 16 | 0063f9 | 48          |                 pha                  
1285:000 | DONE wsp | na 16 16 |        |             |
1286:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
1287:000 | DONE ins | na 16 16 | 0063fa | a9 ff ff    |                 lda.# 0ffff          
1288:000 | DONE ins | na 16 16 | 0063fd | 85 0a       |                 sta.d 00020a         
1289:000 | DONE wsp | na 16 16 |        |             |
1290:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
1291:000 | DONE ins | na 16 16 | 0063ff | 64 12       |                 stz.d 000212         
1292:000 | DONE wsp | na 16 16 |        |             |
1293:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
1294:000 | DONE ins | na 16 16 | 006401 | 84 0e       |                 sty.d 00020e         
1295:000 | DONE ins | na 16 16 | 006403 | b5 00       |                 lda.dx 00            
1296:000 | DONE ins | na 16 16 | 006405 | 85 0c       |                 sta.d 00020c         
1297:000 | DONE wsp | na 16 16 |        |             |
1298:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1299:000 | DONE ins | na 16 16 | 006407 | b4 02       |                 ldy.dx 02            
1300:000 | DONE ins | na 16 16 | 006409 | e8          |                 inx                  
1301:000 | DONE ins | na 16 16 | 00640a | e8          |                 inx                  
1302:000 | DONE ins | na 16 16 | 00640b | e8          |                 inx                  
1303:000 | DONE ins | na 16 16 | 00640c | e8          |                 inx                  
1304:000 | DONE wsp | na 16 16 |        |             |
1305:000 | DONE ins | na 16 16 | 00640d | 20 23 6a    |                 jsr 006a23           
1306:000 | DONE wsp | na 16 16 |        |             |
1307:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1308:000 | DONE ins | na 16 16 | 006410 | 68          |                 pla                  
1309:000 | DONE ins | na 16 16 | 006411 | 85 0e       |                 sta.d 00020e         
1310:000 | DONE ins | na 16 16 | 006413 | 68          |                 pla                  
1311:000 | DONE ins | na 16 16 | 006414 | 85 0c       |                 sta.d 00020c         
1312:000 | DONE ins | na 16 16 | 006416 | 68          |                 pla                  
1313:000 | DONE ins | na 16 16 | 006417 | 85 0a       |                 sta.d 00020a         
1314:000 | DONE ins | na 16 16 | 006419 | 68          |                 pla                  
1315:000 | DONE ins | na 16 16 | 00641a | 85 12       |                 sta.d 000212         
1316:000 | DONE wsp | na 16 16 |        |             |
1317:000 | DONE lbl | na 16 16 | 00641c |             | z_evaluate                           
1317:001 | DONE ins | na 16 16 | 00641c | 60          |                 rts                  
1318:000 | DONE wsp | na 16 16 |        |             |
1319:000 | DONE wsp | na 16 16 |        |             |
1320:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1321:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1322:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1323:000 | DONE wsp | na 16 16 |        |             |
1324:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1325:000 | DONE cmt | na 16 16 |        |             | ; range
1326:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1327:000 | DONE lbl | na 16 16 | 00641d |             | execute_ip                           
1327:001 | DONE dir | na 16 16 | 00641d | (3 bytes)   |         .byte 00, 00, 00             
1327:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1328:000 | DONE wsp | na 16 16 |        |             |
1329:000 | DONE lbl | na 16 16 | 006420 |             | xt_execute                           
1330:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1331:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1332:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
1333:000 | DONE ins | na 16 16 | 006420 | 8c 1d 64    |                 sty 00641d           
1334:000 | DONE ins | na 16 16 | 006423 | b4 00       |                 ldy.dx 00            
1335:000 | DONE ins | na 16 16 | 006425 | e8          |                 inx                  
1336:000 | DONE ins | na 16 16 | 006426 | e8          |                 inx                  
1337:000 | DONE wsp | na 16 16 |        |             |
1338:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
1339:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
1340:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
1341:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
1342:000 | DONE ins | na 16 16 | 006427 | 6c 1d 64    |                 jmp.i 00641d         ; JMP (EXECUTE_IP)
1343:000 | DONE wsp | na 16 16 |        |             |
1344:000 | DONE lbl | na 16 16 | 00642a |             | z_execute                            
1344:001 | DONE ins | na 16 16 | 00642a | ea          |                 nop                  ; Never reached, see if we need the NOP
1345:000 | DONE wsp | na 16 16 |        |             |
1346:000 | DONE wsp | na 16 16 |        |             |
1347:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1348:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1349:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1350:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
1351:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
1352:000 | DONE wsp | na 16 16 |        |             |
1353:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1354:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1355:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1356:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1357:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1358:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1359:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1360:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1361:000 | DONE lbl | na 16 16 | 00642b |             | xt_find-name                         
1362:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1363:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1364:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1365:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1366:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1367:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1368:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1369:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1370:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1371:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1372:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1373:000 | DONE ins | na 16 16 | 00642b | 84 06       |                 sty.d 000206         ; length of mystery string in tmptos, Y now free
1374:000 | DONE wsp | na 16 16 |        |             |
1375:000 | DONE ins | na 16 16 | 00642d | a4 02       |                 ldy.d 000202         
1376:000 | DONE ins | na 16 16 | 00642f | 84 16       |                 sty.d 000216         ; nt of first Dictionary word
1377:000 | DONE wsp | na 16 16 |        |             |
1378:000 | DONE ins | na 16 16 | 006431 | b4 00       |                 ldy.dx 00            
1379:000 | DONE ins | na 16 16 | 006433 | 84 18       |                 sty.d 000218         ; address of mystery string, was NOS
1380:000 | DONE wsp | na 16 16 |        |             |
1381:000 | DONE lbl | na 16 16 | 006435 |             | find-name_loop                       
1382:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1383:000 | DONE ins | na 16 16 | 006435 | b2 16       |                 lda.di 000216        ; LSB in first header word is length
1384:000 | DONE ins | na 16 16 | 006437 | 29 ff 00    |                 and.# 00ff           
1385:000 | DONE ins | na 16 16 | 00643a | c5 06       |                 cmp.d 000206         ; we test LSB
1386:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1387:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1388:000 | DONE cmt | na 16 16 |        |             |                 ; same
1389:000 | DONE ins | na 16 16 | 00643c | f0 0c       |                 beq 00644a           
1390:000 | DONE wsp | na 16 16 |        |             |
1391:000 | DONE lbl | na 16 16 | 00643e |             | find-name_next_entry                 
1392:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1393:000 | DONE ins | na 16 16 | 00643e | e6 16       |                 inc.d 000216         
1394:000 | DONE ins | na 16 16 | 006440 | e6 16       |                 inc.d 000216         
1395:000 | DONE ins | na 16 16 | 006442 | b2 16       |                 lda.di 000216        ; LDA (TMP1)
1396:000 | DONE wsp | na 16 16 |        |             |
1397:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1398:000 | DONE ins | na 16 16 | 006444 | f0 36       |                 beq 00647c           
1399:000 | DONE wsp | na 16 16 |        |             |
1400:000 | DONE ins | na 16 16 | 006446 | 85 16       |                 sta.d 000216         ; new header
1401:000 | DONE ins | na 16 16 | 006448 | 80 eb       |                 bra 006435           
1402:000 | DONE wsp | na 16 16 |        |             |
1403:000 | DONE lbl | na 16 16 | 00644a |             | find-name_chars                      
1404:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1405:000 | DONE wsp | na 16 16 |        |             |
1406:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1407:000 | DONE ins | na 16 16 | 00644a | e2 20       |                 sep 20               
1407:001 | DONE ctl | na  8 16 |        |             |         .!a8
1408:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1409:000 | DONE cmt | na  8 16 |        |             |                 ; header
1410:000 | DONE ins | na  8 16 | 00644c | a0 08 00    |                 ldy.# 0008           
1411:000 | DONE ins | na  8 16 | 00644f | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y - first char of entry
1412:000 | DONE ins | na  8 16 | 006451 | d2 18       |                 cmp.di 000218        ; CMP (TMP2) - first char of mystery string
1413:000 | DONE ins | na  8 16 | 006453 | f0 04       |                 beq 006459           
1414:000 | DONE wsp | na  8 16 |        |             |
1415:000 | DONE lbl | na  8 16 | 006455 |             | find-name_char_nomatcnt_8            
1416:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1417:000 | DONE ins | na  8 16 | 006455 | c2 20       |                 rep 20               
1417:001 | DONE ctl | na 16 16 |        |             |         .!a16
1418:000 | DONE ins | na 16 16 | 006457 | 80 e5       |                 bra 00643e           
1419:000 | DONE wsp | na 16 16 |        |             |
1420:000 | DONE lbl | na 16 16 | 006459 |             | find-name_all_chars                  
1421:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1422:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1423:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1424:000 | DONE ins | na  8 16 | 006459 | a4 06       |                 ldy.d 000206         
1425:000 | DONE ins | na  8 16 | 00645b | 88          |                 dey                  ; faster and shorter than CPY.# 01
1426:000 | DONE ins | na  8 16 | 00645c | f0 18       |                 beq 006476           
1427:000 | DONE wsp | na  8 16 |        |             |
1428:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1429:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1430:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1431:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1432:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1433:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1434:000 | DONE wsp | na  8 16 |        |             |
1435:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1436:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1437:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1438:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1439:000 | DONE ins | na  8 16 | 00645e | c2 20       |                 rep 20               
1439:001 | DONE ctl | na 16 16 |        |             |         .!a16
1440:000 | DONE ins | na 16 16 | 006460 | a5 16       |                 lda.d 000216         ; address of Dictionary string
1441:000 | DONE ins | na 16 16 | 006462 | 18          |                 clc                  
1442:000 | DONE ins | na 16 16 | 006463 | 69 08 00    |                 adc.# 0008           
1443:000 | DONE ins | na 16 16 | 006466 | 85 1a       |                 sta.d 00021a         
1444:000 | DONE ins | na 16 16 | 006468 | e2 20       |                 sep 20               
1444:001 | DONE ctl | na  8 16 |        |             |         .!a8
1445:000 | DONE ins | na  8 16 | 00646a | a4 06       |                 ldy.d 000206         ; get length of strings as loop index
1446:000 | DONE ins | na  8 16 | 00646c | 88          |                 dey                  ; first index is length minus 1
1447:000 | DONE wsp | na  8 16 |        |             |
1448:000 | DONE lbl | na  8 16 | 00646d |             | @                                    
1449:000 | DONE ins | na  8 16 | 00646d | b1 18       |                 lda.diy 000218       ; LDA (TMP2),Y - last char of mystery string
1450:000 | DONE ins | na  8 16 | 00646f | d1 1a       |                 cmp.diy 00021a       ; CMP (TMP1),Y - last char of DP string
1451:000 | DONE ins | na  8 16 | 006471 | d0 e2       |                 bne 006455           
1452:000 | DONE ins | na  8 16 | 006473 | 88          |                 dey                  ; start of string (Y=0) was already tested
1453:000 | DONE ins | na  8 16 | 006474 | d0 f7       |                 bne 00646d           
1454:000 | DONE wsp | na  8 16 |        |             |
1455:000 | DONE lbl | na  8 16 | 006476 |             | find-name_success                    
1456:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1457:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1458:000 | DONE ins | na  8 16 | 006476 | c2 20       |                 rep 20               
1458:001 | DONE ctl | na 16 16 |        |             |         .!a16
1459:000 | DONE ins | na 16 16 | 006478 | a4 16       |                 ldy.d 000216         ; get the correct DP
1460:000 | DONE ins | na 16 16 | 00647a | 80 03       |                 bra 00647f           
1461:000 | DONE wsp | na 16 16 |        |             |
1462:000 | DONE wsp | na 16 16 |        |             |
1463:000 | DONE lbl | na 16 16 | 00647c |             | find-name_failure_16                 
1464:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1465:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1466:000 | DONE ins | na 16 16 | 00647c | a0 00 00    |                 ldy.# 0000           ; fall thru
1467:000 | DONE wsp | na 16 16 |        |             |
1468:000 | DONE lbl | na 16 16 | 00647f |             | find-name_done                       
1469:000 | DONE ins | na 16 16 | 00647f | e8          |                 inx                  ; drop old address (NIP)
1470:000 | DONE ins | na 16 16 | 006480 | e8          |                 inx                  
1471:000 | DONE wsp | na 16 16 |        |             |
1472:000 | DONE lbl | na 16 16 | 006481 |             | z_find-name                          
1472:001 | DONE ins | na 16 16 | 006481 | 60          |                 rts                  
1473:000 | DONE wsp | na 16 16 |        |             |
1474:000 | DONE wsp | na 16 16 |        |             |
1475:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1476:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
1477:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
1478:000 | DONE lbl | na 16 16 | 006482 |             | xt_invert                            
1479:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1480:000 | DONE ins | na 16 16 | 006482 | 98          |                 tya                  
1481:000 | DONE ins | na 16 16 | 006483 | 49 ff ff    |                 eor.# 0ffff          
1482:000 | DONE ins | na 16 16 | 006486 | a8          |                 tay                  
1483:000 | DONE wsp | na 16 16 |        |             |
1484:000 | DONE lbl | na 16 16 | 006487 |             | z_invert                             
1484:001 | DONE ins | na 16 16 | 006487 | 60          |                 rts                  
1485:000 | DONE wsp | na 16 16 |        |             |
1486:000 | DONE wsp | na 16 16 |        |             |
1487:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1488:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
1489:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
1490:000 | DONE lbl | na 16 16 | 006488 |             | xt_here                              
1491:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1492:000 | DONE ins | na 16 16 | 006488 | ca          |                 dex                  
1493:000 | DONE ins | na 16 16 | 006489 | ca          |                 dex                  
1494:000 | DONE ins | na 16 16 | 00648a | 94 00       |                 sty.dx 00            
1495:000 | DONE wsp | na 16 16 |        |             |
1496:000 | DONE ins | na 16 16 | 00648c | a4 00       |                 ldy.d 000200         
1497:000 | DONE wsp | na 16 16 |        |             |
1498:000 | DONE lbl | na 16 16 | 00648e |             | z_here                               
1498:001 | DONE ins | na 16 16 | 00648e | 60          |                 rts                  
1499:000 | DONE wsp | na 16 16 |        |             |
1500:000 | DONE wsp | na 16 16 |        |             |
1501:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1502:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
1503:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
1504:000 | DONE lbl | na 16 16 | 00648f |             | xt_hex                               
1505:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1506:000 | DONE ins | na 16 16 | 00648f | a9 10 00    |                 lda.# 0010           
1507:000 | DONE ins | na 16 16 | 006492 | 85 1c       |                 sta.d 00021c         
1508:000 | DONE wsp | na 16 16 |        |             |
1509:000 | DONE lbl | na 16 16 | 006494 |             | z_hex                                
1509:001 | DONE ins | na 16 16 | 006494 | 60          |                 rts                  
1510:000 | DONE wsp | na 16 16 |        |             |
1511:000 | DONE wsp | na 16 16 |        |             |
1512:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1513:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
1514:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
1515:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1516:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1517:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1518:000 | DONE lbl | na 16 16 | 006495 |             | xt_max                               
1519:000 | DONE ins | na 16 16 | 006495 | 98          |                 tya                  
1520:000 | DONE ins | na 16 16 | 006496 | d5 00       |                 cmp.dx 00            
1521:000 | DONE wsp | na 16 16 |        |             |
1522:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1523:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1524:000 | DONE ins | na 16 16 | 006498 | f0 0b       |                 beq 0064a5           ; Faster than DROP because TOS is in Y
1525:000 | DONE wsp | na 16 16 |        |             |
1526:000 | DONE ins | na 16 16 | 00649a | f5 00       |                 sbc.dx 00            
1527:000 | DONE ins | na 16 16 | 00649c | 50 03       |                 bvc 0064a1           ; no overflow, skip ahead
1528:000 | DONE wsp | na 16 16 |        |             |
1529:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1530:000 | DONE ins | na 16 16 | 00649e | 49 00 80    |                 eor.# 8000           ; compliment negative flag
1531:000 | DONE wsp | na 16 16 |        |             |
1532:000 | DONE lbl | na 16 16 | 0064a1 |             | max_no_ov                            
1533:000 | DONE ins | na 16 16 | 0064a1 | 10 02       |                 bpl 0064a5           ; keep TOS
1534:000 | DONE lbl | na 16 16 | 0064a3 |             | max_drop                             
1535:000 | DONE ins | na 16 16 | 0064a3 | b4 00       |                 ldy.dx 00            ; DROP so NOS is result
1536:000 | DONE lbl | na 16 16 | 0064a5 |             | max_nip                              
1537:000 | DONE ins | na 16 16 | 0064a5 | e8          |                 inx                  
1538:000 | DONE ins | na 16 16 | 0064a6 | e8          |                 inx                  
1539:000 | DONE wsp | na 16 16 |        |             |
1540:000 | DONE lbl | na 16 16 | 0064a7 |             | z_max                                
1540:001 | DONE ins | na 16 16 | 0064a7 | 60          |                 rts                  
1541:000 | DONE wsp | na 16 16 |        |             |
1542:000 | DONE wsp | na 16 16 |        |             |
1543:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1544:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
1545:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
1546:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1547:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1548:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1549:000 | DONE lbl | na 16 16 | 0064a8 |             | xt_min                               
1550:000 | DONE ins | na 16 16 | 0064a8 | 98          |                 tya                  
1551:000 | DONE ins | na 16 16 | 0064a9 | d5 00       |                 cmp.dx 00            
1552:000 | DONE wsp | na 16 16 |        |             |
1553:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1554:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1555:000 | DONE ins | na 16 16 | 0064ab | f0 0b       |                 beq 0064b8           ; Faster than DROP because TOS is in Y
1556:000 | DONE wsp | na 16 16 |        |             |
1557:000 | DONE ins | na 16 16 | 0064ad | f5 00       |                 sbc.dx 00            
1558:000 | DONE ins | na 16 16 | 0064af | 50 03       |                 bvc 0064b4           ; no overflow, skip ahead
1559:000 | DONE wsp | na 16 16 |        |             |
1560:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1561:000 | DONE ins | na 16 16 | 0064b1 | 49 00 80    |                 eor.# 8000           ; compliment negative flag
1562:000 | DONE wsp | na 16 16 |        |             |
1563:000 | DONE lbl | na 16 16 | 0064b4 |             | min_no_ov                            
1564:000 | DONE ins | na 16 16 | 0064b4 | 30 02       |                 bmi 0064b8           ; keep TOS
1565:000 | DONE lbl | na 16 16 | 0064b6 |             | min_drop                             
1566:000 | DONE ins | na 16 16 | 0064b6 | b4 00       |                 ldy.dx 00            ; DROP so NOS is result
1567:000 | DONE lbl | na 16 16 | 0064b8 |             | min_nip                              
1568:000 | DONE ins | na 16 16 | 0064b8 | e8          |                 inx                  
1569:000 | DONE ins | na 16 16 | 0064b9 | e8          |                 inx                  
1570:000 | DONE wsp | na 16 16 |        |             |
1571:000 | DONE lbl | na 16 16 | 0064ba |             | z_min                                
1571:001 | DONE ins | na 16 16 | 0064ba | 60          |                 rts                  
1572:000 | DONE wsp | na 16 16 |        |             |
1573:000 | DONE wsp | na 16 16 |        |             |
1574:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1575:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
1576:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
1577:000 | DONE lbl | na 16 16 | 0064bb |             | xt_name-int                          
1578:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1579:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1580:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
1581:000 | DONE ins | na 16 16 | 0064bb | c8          |                 iny                  
1582:000 | DONE ins | na 16 16 | 0064bc | c8          |                 iny                  
1583:000 | DONE ins | na 16 16 | 0064bd | c8          |                 iny                  
1584:000 | DONE ins | na 16 16 | 0064be | c8          |                 iny                  
1585:000 | DONE ins | na 16 16 | 0064bf | b9 00 00    |                 lda.y 0000           
1586:000 | DONE ins | na 16 16 | 0064c2 | a8          |                 tay                  
1587:000 | DONE wsp | na 16 16 |        |             |
1588:000 | DONE lbl | na 16 16 | 0064c3 |             | z_name-int                           
1588:001 | DONE ins | na 16 16 | 0064c3 | 60          |                 rts                  
1589:000 | DONE wsp | na 16 16 |        |             |
1590:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1591:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
1592:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
1593:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
1594:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
1595:000 | DONE lbl | na 16 16 | 0064c4 |             | xt_name-string                       
1596:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1597:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1598:000 | DONE ins | na 16 16 | 0064c4 | ca          |                 dex                  ; move NOS down one
1599:000 | DONE ins | na 16 16 | 0064c5 | ca          |                 dex                  
1600:000 | DONE wsp | na 16 16 |        |             |
1601:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
1602:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
1603:000 | DONE ins | na 16 16 | 0064c6 | 98          |                 tya                  
1604:000 | DONE ins | na 16 16 | 0064c7 | 18          |                 clc                  
1605:000 | DONE ins | na 16 16 | 0064c8 | 69 08 00    |                 adc.# 0008           
1606:000 | DONE ins | na 16 16 | 0064cb | 95 00       |                 sta.dx 00            ; NOS
1607:000 | DONE wsp | na 16 16 |        |             |
1608:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
1609:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
1610:000 | DONE ins | na 16 16 | 0064cd | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1611:000 | DONE ins | na 16 16 | 0064d0 | 29 ff 00    |                 and.# 00ff           ; mask all but length byte
1612:000 | DONE ins | na 16 16 | 0064d3 | a8          |                 tay                  
1613:000 | DONE wsp | na 16 16 |        |             |
1614:000 | DONE lbl | na 16 16 | 0064d4 |             | z_name-string                        
1614:001 | DONE ins | na 16 16 | 0064d4 | 60          |                 rts                  
1615:000 | DONE wsp | na 16 16 |        |             |
1616:000 | DONE wsp | na 16 16 |        |             |
1617:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1618:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
1619:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
1620:000 | DONE lbl | na 16 16 | 0064d5 |             | xt_negate                            
1621:000 | DONE ins | na 16 16 | 0064d5 | 98          |                 tya                  
1622:000 | DONE ins | na 16 16 | 0064d6 | 49 ff ff    |                 eor.# 0ffff          
1623:000 | DONE ins | na 16 16 | 0064d9 | 1a          |                 inc.a                
1624:000 | DONE ins | na 16 16 | 0064da | a8          |                 tay                  
1625:000 | DONE wsp | na 16 16 |        |             |
1626:000 | DONE lbl | na 16 16 | 0064db |             | z_negate                             
1626:001 | DONE ins | na 16 16 | 0064db | 60          |                 rts                  
1627:000 | DONE wsp | na 16 16 |        |             |
1628:000 | DONE wsp | na 16 16 |        |             |
1629:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1630:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
1631:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
1632:000 | DONE lbl | na 16 16 | 0064dc |             | xt_nip                               
1633:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1634:000 | DONE ins | na 16 16 | 0064dc | e8          |                 inx                  
1635:000 | DONE ins | na 16 16 | 0064dd | e8          |                 inx                  
1636:000 | DONE lbl | na 16 16 | 0064de |             | z_nip                                
1636:001 | DONE ins | na 16 16 | 0064de | 60          |                 rts                  
1637:000 | DONE wsp | na 16 16 |        |             |
1638:000 | DONE wsp | na 16 16 |        |             |
1639:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1640:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
1641:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
1642:000 | DONE lbl | na 16 16 | 0064df |             | xt_or                                
1643:000 | DONE ins | na 16 16 | 0064df | 98          |                 tya                  
1644:000 | DONE ins | na 16 16 | 0064e0 | 15 00       |                 ora.dx 00            
1645:000 | DONE ins | na 16 16 | 0064e2 | a8          |                 tay                  
1646:000 | DONE wsp | na 16 16 |        |             |
1647:000 | DONE ins | na 16 16 | 0064e3 | e8          |                 inx                  
1648:000 | DONE ins | na 16 16 | 0064e4 | e8          |                 inx                  
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE lbl | na 16 16 | 0064e5 |             | z_or                                 
1650:001 | DONE ins | na 16 16 | 0064e5 | 60          |                 rts                  
1651:000 | DONE wsp | na 16 16 |        |             |
1652:000 | DONE wsp | na 16 16 |        |             |
1653:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1654:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
1655:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
1656:000 | DONE lbl | na 16 16 | 0064e6 |             | xt_over                              
1657:000 | DONE ins | na 16 16 | 0064e6 | ca          |                 dex                  
1658:000 | DONE ins | na 16 16 | 0064e7 | ca          |                 dex                  
1659:000 | DONE ins | na 16 16 | 0064e8 | 94 00       |                 sty.dx 00            
1660:000 | DONE ins | na 16 16 | 0064ea | b4 02       |                 ldy.dx 02            
1661:000 | DONE wsp | na 16 16 |        |             |
1662:000 | DONE lbl | na 16 16 | 0064ec |             | z_over                               
1662:001 | DONE ins | na 16 16 | 0064ec | 60          |                 rts                  
1663:000 | DONE wsp | na 16 16 |        |             |
1664:000 | DONE wsp | na 16 16 |        |             |
1665:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1666:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
1667:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
1668:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
1669:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
1670:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
1671:000 | DONE lbl | na 16 16 | 0064ed |             | xt_pad                               
1672:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1673:000 | DONE ins | na 16 16 | 0064ed | ca          |                 dex                  
1674:000 | DONE ins | na 16 16 | 0064ee | ca          |                 dex                  
1675:000 | DONE ins | na 16 16 | 0064ef | 94 00       |                 sty.dx 00            
1676:000 | DONE wsp | na 16 16 |        |             |
1677:000 | DONE ins | na 16 16 | 0064f1 | a5 00       |                 lda.d 000200         
1678:000 | DONE ins | na 16 16 | 0064f3 | 18          |                 clc                  
1679:000 | DONE ins | na 16 16 | 0064f4 | 69 7f 00    |                 adc.# 00007f         
1680:000 | DONE ins | na 16 16 | 0064f7 | a8          |                 tay                  
1681:000 | DONE wsp | na 16 16 |        |             |
1682:000 | DONE lbl | na 16 16 | 0064f8 |             | z_pad                                
1682:001 | DONE ins | na 16 16 | 0064f8 | 60          |                 rts                  
1683:000 | DONE wsp | na 16 16 |        |             |
1684:000 | DONE wsp | na 16 16 |        |             |
1685:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1686:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
1687:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
1688:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
1689:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
1690:000 | DONE lbl | na 16 16 | 0064f9 |             | xt_page                              
1691:000 | DONE ins | na 16 16 | 0064f9 | a9 ce 6c    |                 lda.# 006cce         
1692:000 | DONE ins | na 16 16 | 0064fc | 20 75 6a    |                 jsr 006a75           
1693:000 | DONE wsp | na 16 16 |        |             |
1694:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
1695:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
1696:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
1697:000 | DONE ins | na 16 16 | 0064ff | a9 d3 6c    |                 lda.# 006cd3         
1698:000 | DONE ins | na 16 16 | 006502 | 20 75 6a    |                 jsr 006a75           
1699:000 | DONE wsp | na 16 16 |        |             |
1700:000 | DONE lbl | na 16 16 | 006505 |             | z_page                               
1700:001 | DONE ins | na 16 16 | 006505 | 60          |                 rts                  
1701:000 | DONE wsp | na 16 16 |        |             |
1702:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1703:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
1704:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
1705:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
1706:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
1707:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
1708:000 | DONE lbl | na 16 16 | 006506 |             | xt_parse-name                        
1709:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1710:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1711:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
1712:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
1713:000 | DONE ins | na 16 16 | 006506 | 5a          |                 phy                  ; save TOS for later use
1714:000 | DONE ins | na 16 16 | 006507 | a4 12       |                 ldy.d 000212         ; >IN
1715:000 | DONE ins | na 16 16 | 006509 | e2 20       |                 sep 20               
1715:001 | DONE ctl | na  8 16 |        |             |         .!a8
1716:000 | DONE lbl | na  8 16 | 00650b |             | parse-name_loop                      
1717:000 | DONE ins | na  8 16 | 00650b | c4 0e       |                 cpy.d 00020e         ; end of line?
1718:000 | DONE ins | na  8 16 | 00650d | f0 09       |                 beq 006518           
1719:000 | DONE wsp | na  8 16 |        |             |
1720:000 | DONE ins | na  8 16 | 00650f | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1721:000 | DONE ins | na  8 16 | 006511 | c9 20       |                 cmp.# AscSP          
1722:000 | DONE ins | na  8 16 | 006513 | d0 17       |                 bne 00652c           
1723:000 | DONE ins | na  8 16 | 006515 | c8          |                 iny                  
1724:000 | DONE ins | na  8 16 | 006516 | 80 f3       |                 bra 00650b           
1725:000 | DONE wsp | na  8 16 |        |             |
1726:000 | DONE lbl | na  8 16 | 006518 |             | parse-name_empty_line                
1727:000 | DONE ins | na  8 16 | 006518 | c2 20       |                 rep 20               
1727:001 | DONE ctl | na 16 16 |        |             |         .!a16
1728:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
1729:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
1730:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
1731:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
1732:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
1733:000 | DONE ins | na 16 16 | 00651a | ca          |                 dex                  
1734:000 | DONE ins | na 16 16 | 00651b | ca          |                 dex                  
1735:000 | DONE ins | na 16 16 | 00651c | ca          |                 dex                  
1736:000 | DONE ins | na 16 16 | 00651d | ca          |                 dex                  
1737:000 | DONE wsp | na 16 16 |        |             |
1738:000 | DONE ins | na 16 16 | 00651e | 7a          |                 ply                  ; restore old TOS as 3OS
1739:000 | DONE ins | na 16 16 | 00651f | 94 02       |                 sty.dx 02            
1740:000 | DONE wsp | na 16 16 |        |             |
1741:000 | DONE ins | na 16 16 | 006521 | a5 0c       |                 lda.d 00020c         
1742:000 | DONE ins | na 16 16 | 006523 | 18          |                 clc                  
1743:000 | DONE ins | na 16 16 | 006524 | 65 0e       |                 adc.d 00020e         
1744:000 | DONE ins | na 16 16 | 006526 | 95 00       |                 sta.dx 00            ; Address as NOS
1745:000 | DONE wsp | na 16 16 |        |             |
1746:000 | DONE ins | na 16 16 | 006528 | a0 00 00    |                 ldy.# 0000           ; TOS
1747:000 | DONE wsp | na 16 16 |        |             |
1748:000 | DONE ins | na 16 16 | 00652b | 60          |                 rts                  ; don't have to go through PARSE
1749:000 | DONE wsp | na 16 16 |        |             |
1750:000 | DONE lbl | na 16 16 | 00652c |             | parse-name_found                     
1751:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1752:000 | DONE ins | na 16 16 | 00652c | c2 20       |                 rep 20               
1752:001 | DONE ctl | na 16 16 |        |             |         .!a16
1753:000 | DONE ins | na 16 16 | 00652e | 84 12       |                 sty.d 000212         ; new >IN
1754:000 | DONE wsp | na 16 16 |        |             |
1755:000 | DONE ins | na 16 16 | 006530 | 7a          |                 ply                  ; recover TOS
1756:000 | DONE ins | na 16 16 | 006531 | ca          |                 dex                  
1757:000 | DONE ins | na 16 16 | 006532 | ca          |                 dex                  
1758:000 | DONE ins | na 16 16 | 006533 | 94 00       |                 sty.dx 00            
1759:000 | DONE wsp | na 16 16 |        |             |
1760:000 | DONE ins | na 16 16 | 006535 | a0 20 00    |                 ldy.# AscSP          ; put space on TOS for PARSE
1761:000 | DONE wsp | na 16 16 |        |             |
1762:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
1763:000 | DONE wsp | na 16 16 |        |             |
1764:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1765:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
1766:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
1767:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
1768:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
1769:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
1770:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
1771:000 | DONE cmt | na 16 16 |        |             | ;
1772:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
1773:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
1774:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
1775:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
1776:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
1777:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
1778:000 | DONE cmt | na 16 16 |        |             | ;
1779:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
1780:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
1781:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
1782:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
1783:000 | DONE lbl | na 16 16 | 006538 |             | xt_parse                             
1784:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1785:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1786:000 | DONE ins | na 16 16 | 006538 | 84 16       |                 sty.d 000216         ; save delimiter, char is LSB
1787:000 | DONE wsp | na 16 16 |        |             |
1788:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
1789:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
1790:000 | DONE cmt | na 16 16 |        |             |                 ; return
1791:000 | DONE ins | na 16 16 | 00653a | a5 12       |                 lda.d 000212         
1792:000 | DONE ins | na 16 16 | 00653c | 85 1a       |                 sta.d 00021a         ; save >IN for later length calculation
1793:000 | DONE ins | na 16 16 | 00653e | 18          |                 clc                  
1794:000 | DONE ins | na 16 16 | 00653f | 65 0c       |                 adc.d 00020c         
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE ins | na 16 16 | 006541 | ca          |                 dex                  ; save addr as NOS
1797:000 | DONE ins | na 16 16 | 006542 | ca          |                 dex                  
1798:000 | DONE ins | na 16 16 | 006543 | 95 00       |                 sta.dx 00            
1799:000 | DONE wsp | na 16 16 |        |             |
1800:000 | DONE ins | na 16 16 | 006545 | 64 18       |                 stz.d 000218         ; offset for EOL/char found adjustment of >IN
1801:000 | DONE wsp | na 16 16 |        |             |
1802:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
1803:000 | DONE ins | na 16 16 | 006547 | a4 12       |                 ldy.d 000212         
1804:000 | DONE ins | na 16 16 | 006549 | e2 20       |                 sep 20               
1804:001 | DONE ctl | na  8 16 |        |             |         .!a8
1805:000 | DONE wsp | na  8 16 |        |             |
1806:000 | DONE lbl | na  8 16 | 00654b |             | parse_loop                           
1807:000 | DONE ins | na  8 16 | 00654b | c4 0e       |                 cpy.d 00020e         ; check for EOL first
1808:000 | DONE ins | na  8 16 | 00654d | f0 0d       |                 beq 00655c           
1809:000 | DONE wsp | na  8 16 |        |             |
1810:000 | DONE ins | na  8 16 | 00654f | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1811:000 | DONE ins | na  8 16 | 006551 | c5 16       |                 cmp.d 000216         ; found delimiter?
1812:000 | DONE ins | na  8 16 | 006553 | f0 03       |                 beq 006558           
1813:000 | DONE ins | na  8 16 | 006555 | c8          |                 iny                  
1814:000 | DONE ins | na  8 16 | 006556 | 80 f3       |                 bra 00654b           
1815:000 | DONE wsp | na  8 16 |        |             |
1816:000 | DONE lbl | na  8 16 | 006558 |             | parse_found_delimiter                
1817:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
1818:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
1819:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
1820:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
1821:000 | DONE ins | na  8 16 | 006558 | c2 20       |                 rep 20               
1821:001 | DONE ctl | na 16 16 |        |             |         .!a16
1822:000 | DONE ins | na 16 16 | 00655a | e6 18       |                 inc.d 000218         
1823:000 | DONE wsp | na 16 16 |        |             |
1824:000 | DONE lbl | na 16 16 | 00655c |             | parse_reached_eol                    
1825:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
1826:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1827:000 | DONE ins | na 16 16 | 00655c | c2 20       |                 rep 20               
1827:001 | DONE ctl | na 16 16 |        |             |         .!a16
1828:000 | DONE ins | na 16 16 | 00655e | 98          |                 tya                  
1829:000 | DONE ins | na 16 16 | 00655f | 38          |                 sec                  
1830:000 | DONE ins | na 16 16 | 006560 | e5 1a       |                 sbc.d 00021a         ; original value for >IN / index of first char
1831:000 | DONE ins | na 16 16 | 006562 | 48          |                 pha                  ; save so we can manipulate Y
1832:000 | DONE wsp | na 16 16 |        |             |
1833:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
1834:000 | DONE ins | na 16 16 | 006563 | 98          |                 tya                  
1835:000 | DONE ins | na 16 16 | 006564 | 18          |                 clc                  
1836:000 | DONE ins | na 16 16 | 006565 | 65 18       |                 adc.d 000218         ; offset for EOL vs found delimiter
1837:000 | DONE ins | na 16 16 | 006567 | 85 12       |                 sta.d 000212         
1838:000 | DONE wsp | na 16 16 |        |             |
1839:000 | DONE ins | na 16 16 | 006569 | 7a          |                 ply                  ; length of string in TOS
1840:000 | DONE wsp | na 16 16 |        |             |
1841:000 | DONE lbl | na 16 16 | 00656a |             | z_parse-name                         
1842:000 | DONE lbl | na 16 16 | 00656a |             | z_parse                              
1842:001 | DONE ins | na 16 16 | 00656a | 60          |                 rts                  
1843:000 | DONE wsp | na 16 16 |        |             |
1844:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1845:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
1846:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
1847:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
1848:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
1849:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
1850:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
1851:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
1852:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
1853:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
1854:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
1855:000 | DONE lbl | na 16 16 | 00656b |             | xt_refill                            
1856:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1857:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1858:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
1859:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
1860:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
1861:000 | DONE ins | na 16 16 | 00656b | a5 0c       |                 lda.d 00020c         
1862:000 | DONE ins | na 16 16 | 00656d | 49 00 01    |                 eor.# 0100           ; flip 07d00 / 07c00
1863:000 | DONE ins | na 16 16 | 006570 | 85 0c       |                 sta.d 00020c         
1864:000 | DONE wsp | na 16 16 |        |             |
1865:000 | DONE ins | na 16 16 | 006572 | a5 0e       |                 lda.d 00020e         ; current length is now previous length
1866:000 | DONE ins | na 16 16 | 006574 | 85 10       |                 sta.d 000210         
1867:000 | DONE wsp | na 16 16 |        |             |
1868:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
1869:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
1870:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
1871:000 | DONE ins | na 16 16 | 006576 | a5 0a       |                 lda.d 00020a         
1872:000 | DONE ins | na 16 16 | 006578 | d0 14       |                 bne 00658e           
1873:000 | DONE wsp | na 16 16 |        |             |
1874:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
1875:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
1876:000 | DONE ins | na 16 16 | 00657a | ca          |                 dex                  ; push Data Stack down twice
1877:000 | DONE ins | na 16 16 | 00657b | ca          |                 dex                  
1878:000 | DONE ins | na 16 16 | 00657c | 94 00       |                 sty.dx 00            
1879:000 | DONE wsp | na 16 16 |        |             |
1880:000 | DONE ins | na 16 16 | 00657e | a5 0c       |                 lda.d 00020c         ; address of current input buffer NOS
1881:000 | DONE ins | na 16 16 | 006580 | ca          |                 dex                  
1882:000 | DONE ins | na 16 16 | 006581 | ca          |                 dex                  
1883:000 | DONE ins | na 16 16 | 006582 | 95 00       |                 sta.dx 00            
1884:000 | DONE wsp | na 16 16 |        |             |
1885:000 | DONE ins | na 16 16 | 006584 | a0 ff 00    |                 ldy.# 0000ff         
1886:000 | DONE wsp | na 16 16 |        |             |
1887:000 | DONE ins | na 16 16 | 006587 | 20 b7 61    |                 jsr 0061b7           ; ( addr n1 -- n2)
1888:000 | DONE wsp | na 16 16 |        |             |
1889:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
1890:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
1891:000 | DONE ins | na 16 16 | 00658a | a0 ff ff    |                 ldy.# 0ffff          
1892:000 | DONE wsp | na 16 16 |        |             |
1893:000 | DONE ins | na 16 16 | 00658d | 60          |                 rts                  
1894:000 | DONE wsp | na 16 16 |        |             |
1895:000 | DONE lbl | na 16 16 | 00658e |             | refill_src_not_kbd                   
1896:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
1897:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
1898:000 | DONE ins | na 16 16 | 00658e | 1a          |                 inc.a                
1899:000 | DONE ins | na 16 16 | 00658f | d0 06       |                 bne 006597           
1900:000 | DONE wsp | na 16 16 |        |             |
1901:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
1902:000 | DONE ins | na 16 16 | 006591 | ca          |                 dex                  
1903:000 | DONE ins | na 16 16 | 006592 | ca          |                 dex                  
1904:000 | DONE ins | na 16 16 | 006593 | 94 00       |                 sty.dx 00            
1905:000 | DONE ins | na 16 16 | 006595 | a8          |                 tay                  
1906:000 | DONE wsp | na 16 16 |        |             |
1907:000 | DONE ins | na 16 16 | 006596 | 60          |                 rts                  
1908:000 | DONE wsp | na 16 16 |        |             |
1909:000 | DONE lbl | na 16 16 | 006597 |             | refill_source_is_not_string          
1910:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
1911:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
1912:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
1913:000 | DONE ins | na 16 16 | 006597 | a9 76 6c    |                 lda.# 006c76         
1914:000 | DONE ins | na 16 16 | 00659a | 4c 6f 6a    |                 jmp 006a6f           
1915:000 | DONE wsp | na 16 16 |        |             |
1916:000 | DONE lbl | na 16 16 | 00659d |             | z_refill                             
1916:001 | DONE ins | na 16 16 | 00659d | 60          |                 rts                  ; dummy for compiling
1917:000 | DONE wsp | na 16 16 |        |             |
1918:000 | DONE wsp | na 16 16 |        |             |
1919:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1920:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
1921:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
1922:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
1923:000 | DONE lbl | na 16 16 | 00659e |             | xt_rot                               
1924:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1925:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1926:000 | DONE ins | na 16 16 | 00659e | b5 00       |                 lda.dx 00            ; save b
1927:000 | DONE ins | na 16 16 | 0065a0 | 94 00       |                 sty.dx 00            ; move c to NOS
1928:000 | DONE ins | na 16 16 | 0065a2 | b4 02       |                 ldy.dx 02            ; move a to TOS
1929:000 | DONE ins | na 16 16 | 0065a4 | 95 02       |                 sta.dx 02            ; save b as 3OS
1930:000 | DONE wsp | na 16 16 |        |             |
1931:000 | DONE lbl | na 16 16 | 0065a6 |             | z_rot                                
1931:001 | DONE ins | na 16 16 | 0065a6 | 60          |                 rts                  
1932:000 | DONE wsp | na 16 16 |        |             |
1933:000 | DONE wsp | na 16 16 |        |             |
1934:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1935:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
1936:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
1937:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
1938:000 | DONE wsp | na 16 16 |        |             |
1939:000 | DONE lbl | na 16 16 | 0065a7 |             | xt_source                            
1940:000 | DONE ins | na 16 16 | 0065a7 | ca          |                 dex                  ; make room on Data Stack
1941:000 | DONE ins | na 16 16 | 0065a8 | ca          |                 dex                  
1942:000 | DONE ins | na 16 16 | 0065a9 | ca          |                 dex                  
1943:000 | DONE ins | na 16 16 | 0065aa | ca          |                 dex                  
1944:000 | DONE ins | na 16 16 | 0065ab | 94 02       |                 sty.dx 02            
1945:000 | DONE wsp | na 16 16 |        |             |
1946:000 | DONE ins | na 16 16 | 0065ad | a5 0c       |                 lda.d 00020c         ; address of current input buffer as NOS
1947:000 | DONE ins | na 16 16 | 0065af | 95 00       |                 sta.dx 00            
1948:000 | DONE wsp | na 16 16 |        |             |
1949:000 | DONE ins | na 16 16 | 0065b1 | a4 0e       |                 ldy.d 00020e         ; length of current input buffer as TOS
1950:000 | DONE wsp | na 16 16 |        |             |
1951:000 | DONE lbl | na 16 16 | 0065b3 |             | z_source                             
1951:001 | DONE ins | na 16 16 | 0065b3 | 60          |                 rts                  
1952:000 | DONE wsp | na 16 16 |        |             |
1953:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1954:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
1955:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
1956:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
1957:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
1958:000 | DONE lbl | na 16 16 | 0065b4 |             | xt_source-id                         
1959:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1960:000 | DONE ins | na 16 16 | 0065b4 | ca          |                 dex                  
1961:000 | DONE ins | na 16 16 | 0065b5 | ca          |                 dex                  
1962:000 | DONE ins | na 16 16 | 0065b6 | 94 00       |                 sty.dx 00            
1963:000 | DONE ins | na 16 16 | 0065b8 | a4 0a       |                 ldy.d 00020a         
1964:000 | DONE wsp | na 16 16 |        |             |
1965:000 | DONE lbl | na 16 16 | 0065ba |             | z_source-id                          
1965:001 | DONE ins | na 16 16 | 0065ba | 60          |                 rts                  
1966:000 | DONE wsp | na 16 16 |        |             |
1967:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1968:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
1969:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
1970:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
1971:000 | DONE lbl | na 16 16 | 0065bb |             | xt_space                             
1972:000 | DONE ins | na 16 16 | 0065bb | a9 20 00    |                 lda.# AscSP          
1973:000 | DONE ins | na 16 16 | 0065be | 20 36 60    |                 jsr 006036           
1974:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1975:000 | DONE wsp | na 16 16 |        |             |
1976:000 | DONE lbl | na 16 16 | 0065c1 |             | z_space                              
1976:001 | DONE ins | na 16 16 | 0065c1 | 60          |                 rts                  
1977:000 | DONE wsp | na 16 16 |        |             |
1978:000 | DONE wsp | na 16 16 |        |             |
1979:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1980:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
1981:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
1982:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
1983:000 | DONE lbl | na 16 16 | 0065c2 |             | xt_spaces                            
1984:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1985:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1986:000 | DONE lbl | na 16 16 | 0065c2 |             | @                                    
1987:000 | DONE ins | na 16 16 | 0065c2 | 88          |                 dey                  ; this also handles case u=0
1988:000 | DONE ins | na 16 16 | 0065c3 | 30 05       |                 bmi 0065ca           
1989:000 | DONE wsp | na 16 16 |        |             |
1990:000 | DONE ins | na 16 16 | 0065c5 | 20 bb 65    |                 jsr 0065bb           
1991:000 | DONE ins | na 16 16 | 0065c8 | 80 f8       |                 bra 0065c2           
1992:000 | DONE wsp | na 16 16 |        |             |
1993:000 | DONE lbl | na 16 16 | 0065ca |             | spaces_done                          
1994:000 | DONE ins | na 16 16 | 0065ca | b4 00       |                 ldy.dx 00            ; DROP
1995:000 | DONE ins | na 16 16 | 0065cc | e8          |                 inx                  
1996:000 | DONE ins | na 16 16 | 0065cd | e8          |                 inx                  
1997:000 | DONE wsp | na 16 16 |        |             |
1998:000 | DONE lbl | na 16 16 | 0065ce |             | z_spaces                             
1998:001 | DONE ins | na 16 16 | 0065ce | 60          |                 rts                  
1999:000 | DONE wsp | na 16 16 |        |             |
2000:000 | DONE wsp | na 16 16 |        |             |
2001:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2002:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
2003:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
2004:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
2005:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
2006:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
2007:000 | DONE lbl | na 16 16 | 0065cf |             | xt_state                             
2008:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2009:000 | DONE ins | na 16 16 | 0065cf | ca          |                 dex                  
2010:000 | DONE ins | na 16 16 | 0065d0 | ca          |                 dex                  
2011:000 | DONE ins | na 16 16 | 0065d1 | 94 00       |                 sty.dx 00            
2012:000 | DONE ins | na 16 16 | 0065d3 | a0 14 02    |                 ldy.# 000214         
2013:000 | DONE wsp | na 16 16 |        |             |
2014:000 | DONE lbl | na 16 16 | 0065d6 |             | z_state                              
2014:001 | DONE ins | na 16 16 | 0065d6 | 60          |                 rts                  
2015:000 | DONE wsp | na 16 16 |        |             |
2016:000 | DONE wsp | na 16 16 |        |             |
2017:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2018:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
2019:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
2020:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
2021:000 | DONE lbl | na 16 16 | 0065d7 |             | xt_swap                              
2022:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2023:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2024:000 | DONE ins | na 16 16 | 0065d7 | b5 00       |                 lda.dx 00            
2025:000 | DONE ins | na 16 16 | 0065d9 | 94 00       |                 sty.dx 00            
2026:000 | DONE ins | na 16 16 | 0065db | a8          |                 tay                  
2027:000 | DONE wsp | na 16 16 |        |             |
2028:000 | DONE lbl | na 16 16 | 0065dc |             | z_swap                               
2028:001 | DONE ins | na 16 16 | 0065dc | 60          |                 rts                  
2029:000 | DONE wsp | na 16 16 |        |             |
2030:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2031:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
2032:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
2033:000 | DONE lbl | na 16 16 | 0065dd |             | xt_true                              
2034:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2035:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2036:000 | DONE ins | na 16 16 | 0065dd | ca          |                 dex                  
2037:000 | DONE ins | na 16 16 | 0065de | ca          |                 dex                  
2038:000 | DONE ins | na 16 16 | 0065df | 94 00       |                 sty.dx 00            
2039:000 | DONE ins | na 16 16 | 0065e1 | a0 ff ff    |                 ldy.# 0ffff          
2040:000 | DONE wsp | na 16 16 |        |             |
2041:000 | DONE lbl | na 16 16 | 0065e4 |             | z_true                               
2041:001 | DONE ins | na 16 16 | 0065e4 | 60          |                 rts                  
2042:000 | DONE wsp | na 16 16 |        |             |
2043:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2044:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
2045:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
2046:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
2047:000 | DONE lbl | na 16 16 | 0065e5 |             | xt_tuck                              
2048:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2049:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2050:000 | DONE ins | na 16 16 | 0065e5 | ca          |                 dex                  
2051:000 | DONE ins | na 16 16 | 0065e6 | ca          |                 dex                  
2052:000 | DONE ins | na 16 16 | 0065e7 | b5 02       |                 lda.dx 2             
2053:000 | DONE ins | na 16 16 | 0065e9 | 95 00       |                 sta.dx 0             
2054:000 | DONE ins | na 16 16 | 0065eb | 94 02       |                 sty.dx 2             
2055:000 | DONE wsp | na 16 16 |        |             |
2056:000 | DONE lbl | na 16 16 | 0065ed |             | z_tuck                               
2056:001 | DONE ins | na 16 16 | 0065ed | 60          |                 rts                  
2057:000 | DONE wsp | na 16 16 |        |             |
2058:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2059:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
2060:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
2061:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
2062:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
2063:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
2064:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
2065:000 | DONE cmt | na 16 16 |        |             | ; running.
2066:000 | DONE lbl | na 16 16 | 0065ee |             | xt_type                              
2067:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2068:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2069:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
2070:000 | DONE ins | na 16 16 | 0065ee | 98          |                 tya                  ; force flag check of TOS
2071:000 | DONE ins | na 16 16 | 0065ef | f0 17       |                 beq 006608           
2072:000 | DONE wsp | na 16 16 |        |             |
2073:000 | DONE ins | na 16 16 | 0065f1 | b5 00       |                 lda.dx 00            ; get address from NOS
2074:000 | DONE ins | na 16 16 | 0065f3 | 85 16       |                 sta.d 000216         
2075:000 | DONE ins | na 16 16 | 0065f5 | 84 18       |                 sty.d 000218         ; number of chars is TOS
2076:000 | DONE ins | na 16 16 | 0065f7 | a0 00 00    |                 ldy.# 0000           
2077:000 | DONE ins | na 16 16 | 0065fa | e2 20       |                 sep 20               
2077:001 | DONE ctl | na  8 16 |        |             |         .!a8
2078:000 | DONE lbl | na  8 16 | 0065fc |             | type_loop                            
2079:000 | DONE ins | na  8 16 | 0065fc | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
2080:000 | DONE ins | na  8 16 | 0065fe | 20 36 60    |                 jsr 006036           
2081:000 | DONE ins | na  8 16 | 006601 | c8          |                 iny                  
2082:000 | DONE ins | na  8 16 | 006602 | c4 18       |                 cpy.d 000218         
2083:000 | DONE ins | na  8 16 | 006604 | d0 f6       |                 bne 0065fc           
2084:000 | DONE wsp | na  8 16 |        |             |
2085:000 | DONE ins | na  8 16 | 006606 | c2 20       |                 rep 20               
2085:001 | DONE ctl | na 16 16 |        |             |         .!a16
2086:000 | DONE lbl | na 16 16 | 006608 |             | type_done                            
2087:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
2088:000 | DONE ins | na 16 16 | 006608 | b4 02       |                 ldy.dx 02            
2089:000 | DONE ins | na 16 16 | 00660a | e8          |                 inx                  
2090:000 | DONE ins | na 16 16 | 00660b | e8          |                 inx                  
2091:000 | DONE ins | na 16 16 | 00660c | e8          |                 inx                  
2092:000 | DONE ins | na 16 16 | 00660d | e8          |                 inx                  
2093:000 | DONE wsp | na 16 16 |        |             |
2094:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
2095:000 | DONE wsp | na 16 16 |        |             |
2096:000 | DONE lbl | na 16 16 | 00660e |             | z_type                               
2096:001 | DONE ins | na 16 16 | 00660e | 60          |                 rts                  
2097:000 | DONE wsp | na 16 16 |        |             |
2098:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2099:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
2100:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
2101:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
2102:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
2103:000 | DONE lbl | na 16 16 | 00660f |             | xt_unused                            
2104:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2105:000 | DONE ins | na 16 16 | 00660f | a9 ff 7b    |                 lda.# 007bff         
2106:000 | DONE ins | na 16 16 | 006612 | 38          |                 sec                  
2107:000 | DONE ins | na 16 16 | 006613 | e5 00       |                 sbc.d 000200         ; current compile pointer
2108:000 | DONE wsp | na 16 16 |        |             |
2109:000 | DONE ins | na 16 16 | 006615 | ca          |                 dex                  
2110:000 | DONE ins | na 16 16 | 006616 | ca          |                 dex                  
2111:000 | DONE ins | na 16 16 | 006617 | 94 00       |                 sty.dx 00            
2112:000 | DONE wsp | na 16 16 |        |             |
2113:000 | DONE ins | na 16 16 | 006619 | a8          |                 tay                  
2114:000 | DONE wsp | na 16 16 |        |             |
2115:000 | DONE lbl | na 16 16 | 00661a |             | z_unused                             
2115:001 | DONE ins | na 16 16 | 00661a | 60          |                 rts                  
2116:000 | DONE wsp | na 16 16 |        |             |
2117:000 | DONE wsp | na 16 16 |        |             |
2118:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2119:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
2120:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
2121:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
2122:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
2123:000 | DONE lbl | na 16 16 | 00661b |             | xt_variable                          
2124:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
2125:000 | DONE ins | na 16 16 | 00661b | 20 c9 62    |                 jsr 0062c9           
2126:000 | DONE wsp | na 16 16 |        |             |
2127:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
2128:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
2129:000 | DONE ins | na 16 16 | 00661e | a9 00 00    |                 lda.# 0000           
2130:000 | DONE ins | na 16 16 | 006621 | 92 00       |                 sta.di 000200        ; STA (CP)
2131:000 | DONE wsp | na 16 16 |        |             |
2132:000 | DONE ins | na 16 16 | 006623 | e6 00       |                 inc.d 000200         ; direct COMMA
2133:000 | DONE ins | na 16 16 | 006625 | e6 00       |                 inc.d 000200         
2134:000 | DONE wsp | na 16 16 |        |             |
2135:000 | DONE lbl | na 16 16 | 006627 |             | z_variable                           
2135:001 | DONE ins | na 16 16 | 006627 | 60          |                 rts                  
2136:000 | DONE wsp | na 16 16 |        |             |
2137:000 | DONE wsp | na 16 16 |        |             |
2138:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2139:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
2140:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
2141:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
2142:000 | DONE lbl | na 16 16 | 006628 |             | xt_words                             
2143:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2144:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2145:000 | DONE ins | na 16 16 | 006628 | 20 c2 62    |                 jsr 0062c2           ; start on next line, this is a style choice
2146:000 | DONE wsp | na 16 16 |        |             |
2147:000 | DONE ins | na 16 16 | 00662b | a5 02       |                 lda.d 000202         ; nt of first entry in Dictionary (last added)
2148:000 | DONE ins | na 16 16 | 00662d | 48          |                 pha                  
2149:000 | DONE wsp | na 16 16 |        |             |
2150:000 | DONE ins | na 16 16 | 00662e | ca          |                 dex                  ; create room on TOS
2151:000 | DONE ins | na 16 16 | 00662f | ca          |                 dex                  
2152:000 | DONE ins | na 16 16 | 006630 | 94 00       |                 sty.dx 00            
2153:000 | DONE wsp | na 16 16 |        |             |
2154:000 | DONE lbl | na 16 16 | 006632 |             | words_loop                           
2155:000 | DONE ins | na 16 16 | 006632 | a8          |                 tay                  ; ( nt )
2156:000 | DONE ins | na 16 16 | 006633 | 20 c4 64    |                 jsr 0064c4           ; ( nt -- addr u )
2157:000 | DONE ins | na 16 16 | 006636 | 20 ee 65    |                 jsr 0065ee           ; ( addr u -- )
2158:000 | DONE ins | na 16 16 | 006639 | 20 bb 65    |                 jsr 0065bb           
2159:000 | DONE wsp | na 16 16 |        |             |
2160:000 | DONE ins | na 16 16 | 00663c | 68          |                 pla                  ; get back first entry in Dictionary
2161:000 | DONE wsp | na 16 16 |        |             |
2162:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
2163:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
2164:000 | DONE ins | na 16 16 | 00663d | 1a          |                 inc.a                
2165:000 | DONE ins | na 16 16 | 00663e | 1a          |                 inc.a                
2166:000 | DONE wsp | na 16 16 |        |             |
2167:000 | DONE ins | na 16 16 | 00663f | ca          |                 dex                  
2168:000 | DONE ins | na 16 16 | 006640 | ca          |                 dex                  
2169:000 | DONE ins | na 16 16 | 006641 | 94 00       |                 sty.dx 00            
2170:000 | DONE wsp | na 16 16 |        |             |
2171:000 | DONE ins | na 16 16 | 006643 | a8          |                 tay                  
2172:000 | DONE ins | na 16 16 | 006644 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
2173:000 | DONE ins | na 16 16 | 006647 | 48          |                 pha                  
2174:000 | DONE ins | na 16 16 | 006648 | d0 e8       |                 bne 006632           ; zero entry signals end of Dictionary
2175:000 | DONE wsp | na 16 16 |        |             |
2176:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
2177:000 | DONE ins | na 16 16 | 00664a | 68          |                 pla                  ; balance MPU stack, value discarded
2178:000 | DONE wsp | na 16 16 |        |             |
2179:000 | DONE ins | na 16 16 | 00664b | b4 00       |                 ldy.dx 00            
2180:000 | DONE ins | na 16 16 | 00664d | e8          |                 inx                  
2181:000 | DONE ins | na 16 16 | 00664e | e8          |                 inx                  
2182:000 | DONE wsp | na 16 16 |        |             |
2183:000 | DONE lbl | na 16 16 | 00664f |             | z_words                              
2183:001 | DONE ins | na 16 16 | 00664f | 60          |                 rts                  
2184:000 | DONE wsp | na 16 16 |        |             |
2185:000 | DONE wsp | na 16 16 |        |             |
2186:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2187:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
2188:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
2189:000 | DONE lbl | na 16 16 | 006650 |             | xt_xor                               
2190:000 | DONE ins | na 16 16 | 006650 | 98          |                 tya                  
2191:000 | DONE ins | na 16 16 | 006651 | 55 00       |                 eor.dx 00            
2192:000 | DONE ins | na 16 16 | 006653 | a8          |                 tay                  
2193:000 | DONE wsp | na 16 16 |        |             |
2194:000 | DONE ins | na 16 16 | 006654 | e8          |                 inx                  
2195:000 | DONE ins | na 16 16 | 006655 | e8          |                 inx                  
2196:000 | DONE wsp | na 16 16 |        |             |
2197:000 | DONE lbl | na 16 16 | 006656 |             | z_xor                                
2197:001 | DONE ins | na 16 16 | 006656 | 60          |                 rts                  
2198:000 | DONE wsp | na 16 16 |        |             |
2199:000 | DONE wsp | na 16 16 |        |             |
2200:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2201:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
2202:000 | DONE wsp | na 16 16 |        |             |
2203:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
2203:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2203:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
2203:003 | DONE cmt | na 16 16 |        |             | ; This version: 15. Feb 2017
2203:004 | DONE wsp | na 16 16 |        |             |
2203:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
2203:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
2203:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
2203:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
2203:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
2203:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
2203:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
2203:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
2203:013 | DONE cmt | na 16 16 |        |             | ;
2203:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
2203:015 | DONE cmt | na 16 16 |        |             | ;
2203:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
2203:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
2203:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
2203:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
2203:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
2203:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
2203:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
2203:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
2203:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
2203:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
2203:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
2203:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
2203:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2203:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
2203:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2203:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
2203:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
2203:033 | DONE wsp | na 16 16 |        |             |
2203:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
2203:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
2203:036 | DONE cmt | na 16 16 |        |             | ;
2203:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
2203:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
2203:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
2203:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
2203:041 | DONE wsp | na 16 16 |        |             |
2203:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
2203:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
2203:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
2203:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
2203:046 | DONE wsp | na 16 16 |        |             |
2203:047 | DONE lbl | na 16 16 | 006657 |             | nt_bye                               
2203:048 | DONE dir | na 16 16 | 006657 | (1 bytes)   |         .byte 03                     ; length of word string
2203:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
2203:049 | DONE dir | na 16 16 | 006658 | (1 bytes)   |         .byte { PW + NC }            ; status byte
2203:049 | DONE dir | na 16 16 |        |             |                 09                       --  	
2203:050 | DONE dir | na 16 16 | 006659 | (2 bytes)   |         .word 0000                   ; next word in dictionary, 0000 signals end
2203:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
2203:051 | DONE dir | na 16 16 | 00665b | (2 bytes)   |         .word 006282                 ; start of code, the xt of this word
2203:051 | DONE dir | na 16 16 |        |             |                 82 62                    --  . b
2203:052 | DONE dir | na 16 16 | 00665d | (2 bytes)   |         .word 006285                 ; end of code (points to RTS)
2203:052 | DONE dir | na 16 16 |        |             |                 85 62                    --  . b
2203:053 | DONE dir | na 16 16 | 00665f | (3 bytes)   |         .byte 62, 79, 65             ; word name, always lower case
2203:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
2203:054 | DONE wsp | na 16 16 |        |             |
2203:055 | DONE lbl | na 16 16 | 006662 |             | nt_cold                              
2203:056 | DONE dir | na 16 16 | 006662 | (2 bytes)   |         .byte 4, 00                  
2203:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2203:057 | DONE dir | na 16 16 | 006664 | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
2203:057 | DONE dir | na 16 16 |        |             |                 57 66 63 60 de 60        --  W f c ` . `
2203:058 | DONE dir | na 16 16 | 00666a | (4 bytes)   |         .byte 63, 6f, 6c, 64         
2203:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
2203:059 | DONE wsp | na 16 16 |        |             |
2203:060 | DONE lbl | na 16 16 | 00666e |             | nt_words                             
2203:061 | DONE dir | na 16 16 | 00666e | (2 bytes)   |         .byte 5, { PW + NC }         
2203:061 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2203:062 | DONE dir | na 16 16 | 006670 | (6 bytes)   |         .word nt_cold, xt_words, 00664f 
2203:062 | DONE dir | na 16 16 |        |             |                 62 66 28 66 4f 66        --  b f ( f O f
2203:063 | DONE dir | na 16 16 | 006676 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
2203:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
2203:064 | DONE wsp | na 16 16 |        |             |
2203:065 | DONE lbl | na 16 16 | 00667b |             | nt_dump                              
2203:066 | DONE dir | na 16 16 | 00667b | (2 bytes)   |         .byte 4, { PW + NC }         
2203:066 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2203:067 | DONE dir | na 16 16 | 00667d | (6 bytes)   |         .word nt_words, xt_dump, 0063e8 
2203:067 | DONE dir | na 16 16 |        |             |                 6e 66 c2 63 e8 63        --  n f . c . c
2203:068 | DONE dir | na 16 16 | 006683 | (4 bytes)   |         .byte 64, 75, 6d, 70         
2203:068 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
2203:069 | DONE wsp | na 16 16 |        |             |
2203:070 | DONE lbl | na 16 16 | 006687 |             | nt_bell                              
2203:071 | DONE dir | na 16 16 | 006687 | (2 bytes)   |         .byte 4, { PW + NC }         
2203:071 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2203:072 | DONE dir | na 16 16 | 006689 | (6 bytes)   |         .word nt_dump, xt_bell, 006279 
2203:072 | DONE dir | na 16 16 |        |             |                 7b 66 73 62 79 62        --  { f s b y b
2203:073 | DONE dir | na 16 16 | 00668f | (4 bytes)   |         .byte 62, 65, 6c, 6c         
2203:073 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
2203:074 | DONE wsp | na 16 16 |        |             |
2203:075 | DONE lbl | na 16 16 | 006693 |             | nt_decimal                           
2203:076 | DONE dir | na 16 16 | 006693 | (2 bytes)   |         .byte 7, { PW + NC }         
2203:076 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2203:077 | DONE dir | na 16 16 | 006695 | (6 bytes)   |         .word nt_bell, xt_decimal, 006341 
2203:077 | DONE dir | na 16 16 |        |             |                 87 66 3c 63 41 63        --  . f < c A c
2203:078 | DONE dir | na 16 16 | 00669b | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
2203:078 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
2203:079 | DONE wsp | na 16 16 |        |             |
2203:080 | DONE lbl | na 16 16 | 0066a2 |             | nt_hex                               
2203:081 | DONE dir | na 16 16 | 0066a2 | (2 bytes)   |         .byte 3, { PW + NC }         
2203:081 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2203:082 | DONE dir | na 16 16 | 0066a4 | (6 bytes)   |         .word nt_decimal, xt_hex, 006494 
2203:082 | DONE dir | na 16 16 |        |             |                 93 66 8f 64 94 64        --  . f . d . d
2203:083 | DONE dir | na 16 16 | 0066aa | (3 bytes)   |         .byte 68, 65, 78             
2203:083 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
2203:084 | DONE wsp | na 16 16 |        |             |
2203:085 | DONE lbl | na 16 16 | 0066ad |             | nt_unused                            
2203:086 | DONE dir | na 16 16 | 0066ad | (2 bytes)   |         .byte 6, { PW + NC }         
2203:086 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2203:087 | DONE dir | na 16 16 | 0066af | (6 bytes)   |         .word nt_hex, xt_unused, 00661a 
2203:087 | DONE dir | na 16 16 |        |             |                 a2 66 0f 66 1a 66        --  . f . f . f
2203:088 | DONE dir | na 16 16 | 0066b5 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
2203:088 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
2203:089 | DONE wsp | na 16 16 |        |             |
2203:090 | DONE lbl | na 16 16 | 0066bb |             | nt_page                              
2203:091 | DONE dir | na 16 16 | 0066bb | (2 bytes)   |         .byte 4, { PW + NC }         
2203:091 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2203:092 | DONE dir | na 16 16 | 0066bd | (6 bytes)   |         .word nt_unused, xt_page, 006505 
2203:092 | DONE dir | na 16 16 |        |             |                 ad 66 f9 64 05 65        --  . f . d . e
2203:093 | DONE dir | na 16 16 | 0066c3 | (4 bytes)   |         .byte 70, 61, 67, 65         
2203:093 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
2203:094 | DONE wsp | na 16 16 |        |             |
2203:095 | DONE lbl | na 16 16 | 0066c7 |             | nt_count                             
2203:096 | DONE dir | na 16 16 | 0066c7 | (2 bytes)   |         .byte 5, { NC + PW }         
2203:096 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2203:097 | DONE dir | na 16 16 | 0066c9 | (6 bytes)   |         .word nt_page, xt_count, 0062c1 
2203:097 | DONE dir | na 16 16 |        |             |                 bb 66 b3 62 c1 62        --  . f . b . b
2203:098 | DONE dir | na 16 16 | 0066cf | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
2203:098 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
2203:099 | DONE wsp | na 16 16 |        |             |
2203:100 | DONE lbl | na 16 16 | 0066d4 |             | nt_abort                             
2203:101 | DONE dir | na 16 16 | 0066d4 | (2 bytes)   |         .byte 5, 00                  ; TODO check flags
2203:101 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2203:102 | DONE dir | na 16 16 | 0066d6 | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
2203:102 | DONE dir | na 16 16 |        |             |                 c7 66 97 60 de 60        --  . f . ` . `
2203:103 | DONE dir | na 16 16 | 0066dc | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
2203:103 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
2203:104 | DONE wsp | na 16 16 |        |             |
2203:105 | DONE lbl | na 16 16 | 0066e1 |             | nt_parse                             
2203:106 | DONE dir | na 16 16 | 0066e1 | (2 bytes)   |         .byte 5, 00                  
2203:106 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2203:107 | DONE dir | na 16 16 | 0066e3 | (6 bytes)   |         .word nt_abort, xt_parse, 00656a 
2203:107 | DONE dir | na 16 16 |        |             |                 d4 66 38 65 6a 65        --  . f 8 e j e
2203:108 | DONE dir | na 16 16 | 0066e9 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
2203:108 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
2203:109 | DONE wsp | na 16 16 |        |             |
2203:110 | DONE lbl | na 16 16 | 0066ee |             | nt_quit                              
2203:111 | DONE dir | na 16 16 | 0066ee | (2 bytes)   |         .byte 4, 00                  
2203:111 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2203:112 | DONE dir | na 16 16 | 0066f0 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
2203:112 | DONE dir | na 16 16 |        |             |                 e1 66 9f 60 de 60        --  . f . ` . `
2203:113 | DONE dir | na 16 16 | 0066f6 | (4 bytes)   |         .byte 71, 75, 69, 74         
2203:113 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
2203:114 | DONE wsp | na 16 16 |        |             |
2203:115 | DONE lbl | na 16 16 | 0066fa |             | nt_question                          
2203:116 | DONE dir | na 16 16 | 0066fa | (2 bytes)   |         .byte 1, { PW + NC }         
2203:116 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:117 | DONE dir | na 16 16 | 0066fc | (6 bytes)   |         .word nt_quit, xt_question, 006134 
2203:117 | DONE dir | na 16 16 |        |             |                 ee 66 2e 61 34 61        --  . f . a 4 a
2203:118 | DONE dir | na 16 16 | 006702 | (1 bytes)   |         .byte 3f                     
2203:118 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
2203:119 | DONE wsp | na 16 16 |        |             |
2203:120 | DONE lbl | na 16 16 | 006703 |             | nt_name-int                          
2203:121 | DONE dir | na 16 16 | 006703 | (2 bytes)   |         .byte 8, { PW + NC }         
2203:121 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2203:122 | DONE dir | na 16 16 | 006705 | (6 bytes)   |         .word nt_question, xt_name-int, 0064c3 
2203:122 | DONE dir | na 16 16 |        |             |                 fa 66 bb 64 c3 64        --  . f . d . d
2203:123 | DONE dir | na 16 16 | 00670b | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
2203:123 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
2203:123 | DONE dir | na 16 16 |        |             |                                          -- 
2203:124 | DONE wsp | na 16 16 |        |             |
2203:125 | DONE lbl | na 16 16 | 006713 |             | nt_cr                                
2203:126 | DONE dir | na 16 16 | 006713 | (2 bytes)   |         .byte 2, { PW + NC }         
2203:126 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2203:127 | DONE dir | na 16 16 | 006715 | (6 bytes)   |         .word nt_name-int, xt_cr, 0062c8 
2203:127 | DONE dir | na 16 16 |        |             |                 03 67 c2 62 c8 62        --  . g . b . b
2203:128 | DONE dir | na 16 16 | 00671b | (2 bytes)   |         .byte 63, 72                 
2203:128 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
2203:129 | DONE wsp | na 16 16 |        |             |
2203:130 | DONE lbl | na 16 16 | 00671d |             | nt_bl                                
2203:131 | DONE dir | na 16 16 | 00671d | (2 bytes)   |         .byte 2, { PW + NC }         
2203:131 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2203:132 | DONE dir | na 16 16 | 00671f | (6 bytes)   |         .word nt_cr, xt_bl, 006281   
2203:132 | DONE dir | na 16 16 |        |             |                 13 67 7a 62 81 62        --  . g z b . b
2203:133 | DONE dir | na 16 16 | 006725 | (2 bytes)   |         .byte 62, 6c                 
2203:133 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
2203:134 | DONE wsp | na 16 16 |        |             |
2203:135 | DONE lbl | na 16 16 | 006727 |             | nt_spaces                            
2203:136 | DONE dir | na 16 16 | 006727 | (2 bytes)   |         .byte 6, { PW + NC }         
2203:136 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2203:137 | DONE dir | na 16 16 | 006729 | (6 bytes)   |         .word nt_bl, xt_spaces, 0065ce 
2203:137 | DONE dir | na 16 16 |        |             |                 1d 67 c2 65 ce 65        --  . g . e . e
2203:138 | DONE dir | na 16 16 | 00672f | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
2203:138 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
2203:139 | DONE wsp | na 16 16 |        |             |
2203:140 | DONE lbl | na 16 16 | 006735 |             | nt_space                             
2203:141 | DONE dir | na 16 16 | 006735 | (2 bytes)   |         .byte 5, { PW + NC }         
2203:141 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2203:142 | DONE dir | na 16 16 | 006737 | (6 bytes)   |         .word nt_spaces, xt_space, 0065c1 
2203:142 | DONE dir | na 16 16 |        |             |                 27 67 bb 65 c1 65        --  ' g . e . e
2203:143 | DONE dir | na 16 16 | 00673d | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
2203:143 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
2203:144 | DONE wsp | na 16 16 |        |             |
2203:145 | DONE lbl | na 16 16 | 006742 |             | nt_dots                              
2203:146 | DONE dir | na 16 16 | 006742 | (2 bytes)   |         .byte 2, { PW + NC }         
2203:146 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2203:147 | DONE dir | na 16 16 | 006744 | (6 bytes)   |         .word nt_space, xt_dots, 0063bc 
2203:147 | DONE dir | na 16 16 |        |             |                 35 67 75 63 bc 63        --  5 g u c . c
2203:148 | DONE dir | na 16 16 | 00674a | (2 bytes)   |         .byte 2e, 73                 
2203:148 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
2203:149 | DONE wsp | na 16 16 |        |             |
2203:150 | DONE lbl | na 16 16 | 00674c |             | nt_dotparen                          
2203:151 | DONE dir | na 16 16 | 00674c | (2 bytes)   |         .byte 2, { IM + NC }         
2203:151 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
2203:152 | DONE dir | na 16 16 | 00674e | (6 bytes)   |         .word nt_dots, xt_dotparen, 006374 
2203:152 | DONE dir | na 16 16 |        |             |                 42 67 67 63 74 63        --  B g g c t c
2203:153 | DONE dir | na 16 16 | 006754 | (2 bytes)   |         .byte 2e, 28                 
2203:153 | DONE dir | na 16 16 |        |             |                 2e 28                    --  . (
2203:154 | DONE wsp | na 16 16 |        |             |
2203:155 | DONE lbl | na 16 16 | 006756 |             | nt_type                              
2203:156 | DONE dir | na 16 16 | 006756 | (2 bytes)   |         .byte 4, 0                   
2203:156 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2203:157 | DONE dir | na 16 16 | 006758 | (6 bytes)   |         .word nt_dotparen, xt_type, 00660e 
2203:157 | DONE dir | na 16 16 |        |             |                 4c 67 ee 65 0e 66        --  L g . e . f
2203:158 | DONE dir | na 16 16 | 00675e | (4 bytes)   |         .byte 74, 79, 70, 65         
2203:158 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
2203:159 | DONE wsp | na 16 16 |        |             |
2203:160 | DONE lbl | na 16 16 | 006762 |             | nt_dot                               
2203:161 | DONE dir | na 16 16 | 006762 | (2 bytes)   |         .byte 1, { PW + NC }         
2203:161 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:162 | DONE dir | na 16 16 | 006764 | (6 bytes)   |         .word nt_type, xt_dot, 006366 
2203:162 | DONE dir | na 16 16 |        |             |                 56 67 51 63 66 63        --  V g Q c f c
2203:163 | DONE dir | na 16 16 | 00676a | (1 bytes)   |         .byte 2e                     
2203:163 | DONE dir | na 16 16 |        |             |                 2e                       --  .
2203:164 | DONE wsp | na 16 16 |        |             |
2203:165 | DONE lbl | na 16 16 | 00676b |             | nt_pad                               
2203:166 | DONE dir | na 16 16 | 00676b | (2 bytes)   |         .byte 3, { PW + NC }         
2203:166 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2203:167 | DONE dir | na 16 16 | 00676d | (6 bytes)   |         .word nt_dot, xt_pad, 0064f8 
2203:167 | DONE dir | na 16 16 |        |             |                 62 67 ed 64 f8 64        --  b g . d . d
2203:168 | DONE dir | na 16 16 | 006773 | (3 bytes)   |         .byte 70, 61, 64             
2203:168 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
2203:169 | DONE wsp | na 16 16 |        |             |
2203:170 | DONE lbl | na 16 16 | 006776 |             | nt_base                              
2203:171 | DONE dir | na 16 16 | 006776 | (2 bytes)   |         .byte 4, { PW + NC }         
2203:171 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2203:172 | DONE dir | na 16 16 | 006778 | (6 bytes)   |         .word nt_pad, xt_base, 006272 
2203:172 | DONE dir | na 16 16 |        |             |                 6b 67 6b 62 72 62        --  k g k b r b
2203:173 | DONE dir | na 16 16 | 00677e | (4 bytes)   |         .byte 62, 61, 73, 65         
2203:173 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
2203:174 | DONE wsp | na 16 16 |        |             |
2203:175 | DONE lbl | na 16 16 | 006782 |             | nt_evaluate                          
2203:176 | DONE dir | na 16 16 | 006782 | (2 bytes)   |         .byte 8, { PW + NC }         
2203:176 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2203:177 | DONE dir | na 16 16 | 006784 | (6 bytes)   |         .word nt_base, xt_evaluate, 00641c 
2203:177 | DONE dir | na 16 16 |        |             |                 76 67 ee 63 1c 64        --  v g . c . d
2203:178 | DONE dir | na 16 16 | 00678a | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
2203:178 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
2203:178 | DONE dir | na 16 16 |        |             |                                          -- 
2203:179 | DONE wsp | na 16 16 |        |             |
2203:180 | DONE lbl | na 16 16 | 006792 |             | nt_cells                             
2203:181 | DONE dir | na 16 16 | 006792 | (2 bytes)   |         .byte 5, { PW + NC }         ; 2* because we have 16 bit stack
2203:181 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2203:182 | DONE dir | na 16 16 | 006794 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 00617f 
2203:182 | DONE dir | na 16 16 |        |             |                 82 67 7c 61 7f 61        --  . g | a . a
2203:183 | DONE dir | na 16 16 | 00679a | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
2203:183 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
2203:184 | DONE wsp | na 16 16 |        |             |
2203:185 | DONE lbl | na 16 16 | 00679f |             | nt_rightbracket                      
2203:186 | DONE dir | na 16 16 | 00679f | (2 bytes)   |         .byte 1, { PW + NC }         
2203:186 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:187 | DONE dir | na 16 16 | 0067a1 | (6 bytes)   |         .word nt_cells, xt_rightbracket, 00614c 
2203:187 | DONE dir | na 16 16 |        |             |                 92 67 47 61 4c 61        --  . g G a L a
2203:188 | DONE dir | na 16 16 | 0067a7 | (1 bytes)   |         .byte 5d                     
2203:188 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
2203:189 | DONE wsp | na 16 16 |        |             |
2203:190 | DONE lbl | na 16 16 | 0067a8 |             | nt_leftbracket                       
2203:191 | DONE dir | na 16 16 | 0067a8 | (2 bytes)   |         .byte 1, { IM + CO }         
2203:191 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2203:192 | DONE dir | na 16 16 | 0067aa | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 006146 
2203:192 | DONE dir | na 16 16 |        |             |                 9f 67 44 61 46 61        --  . g D a F a
2203:193 | DONE dir | na 16 16 | 0067b0 | (1 bytes)   |         .byte 5b                     
2203:193 | DONE dir | na 16 16 |        |             |                 5b                       --  [
2203:194 | DONE wsp | na 16 16 |        |             |
2203:195 | DONE lbl | na 16 16 | 0067b1 |             | nt_compilecomma                      
2203:196 | DONE dir | na 16 16 | 0067b1 | (2 bytes)   |         .byte 08, { CO }             
2203:196 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
2203:197 | DONE dir | na 16 16 | 0067b3 | (6 bytes)   |         .word nt_leftbracket, xt_compilecomma, 006298 
2203:197 | DONE dir | na 16 16 |        |             |                 a8 67 86 62 98 62        --  . g . b . b
2203:198 | DONE dir | na 16 16 | 0067b9 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
2203:198 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
2203:198 | DONE dir | na 16 16 |        |             |                                          -- 
2203:199 | DONE wsp | na 16 16 |        |             |
2203:200 | DONE lbl | na 16 16 | 0067c1 |             | nt_semicolon                         
2203:201 | DONE dir | na 16 16 | 0067c1 | (2 bytes)   |         .byte 1, { CO + IM }         
2203:201 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2203:202 | DONE dir | na 16 16 | 0067c3 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 00612d 
2203:202 | DONE dir | na 16 16 |        |             |                 b1 67 15 61 2d 61        --  . g . a - a
2203:203 | DONE dir | na 16 16 | 0067c9 | (1 bytes)   |         .byte 3b                     ; ASCII for semicolon
2203:203 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
2203:204 | DONE wsp | na 16 16 |        |             |
2203:205 | DONE lbl | na 16 16 | 0067ca |             | nt_colon                             
2203:206 | DONE dir | na 16 16 | 0067ca | (2 bytes)   |         .byte 1, { NC + IM }         
2203:206 | DONE dir | na 16 16 |        |             |                 01 03                    --  . .
2203:207 | DONE dir | na 16 16 | 0067cc | (6 bytes)   |         .word nt_semicolon, xt_colon, 006114 
2203:207 | DONE dir | na 16 16 |        |             |                 c1 67 f3 60 14 61        --  . g . ` . a
2203:208 | DONE dir | na 16 16 | 0067d2 | (1 bytes)   |         .byte 3a                     
2203:208 | DONE dir | na 16 16 |        |             |                 3a                       --  :
2203:209 | DONE wsp | na 16 16 |        |             |
2203:210 | DONE lbl | na 16 16 | 0067d3 |             | nt_allot                             
2203:211 | DONE dir | na 16 16 | 0067d3 | (2 bytes)   |         .byte 5, { PW + NC }         
2203:211 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2203:212 | DONE dir | na 16 16 | 0067d5 | (6 bytes)   |         .word nt_colon, xt_allot, 006263 
2203:212 | DONE dir | na 16 16 |        |             |                 ca 67 3b 62 63 62        --  . g ; b c b
2203:213 | DONE dir | na 16 16 | 0067db | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
2203:213 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
2203:214 | DONE wsp | na 16 16 |        |             |
2203:215 | DONE lbl | na 16 16 | 0067e0 |             | nt_create                            
2203:216 | DONE dir | na 16 16 | 0067e0 | (2 bytes)   |         .byte 6, { PW + NC }         
2203:216 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2203:217 | DONE dir | na 16 16 | 0067e2 | (6 bytes)   |         .word nt_allot, xt_create, 00633b 
2203:217 | DONE dir | na 16 16 |        |             |                 d3 67 c9 62 3b 63        --  . g . b ; c
2203:218 | DONE dir | na 16 16 | 0067e8 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
2203:218 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
2203:219 | DONE wsp | na 16 16 |        |             |
2203:220 | DONE lbl | na 16 16 | 0067ee |             | nt_name-string                       
2203:221 | DONE dir | na 16 16 | 0067ee | (2 bytes)   |         .byte 0b, { PW + NC }        
2203:221 | DONE dir | na 16 16 |        |             |                 0b 09                    --   	
2203:222 | DONE dir | na 16 16 | 0067f0 | (6 bytes)   |         .word nt_create, xt_name-string, 0064d4 
2203:222 | DONE dir | na 16 16 |        |             |                 e0 67 c4 64 d4 64        --  . g . d . d
2203:223 | DONE dir | na 16 16 | 0067f6 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
2203:223 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
2203:223 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
2203:224 | DONE wsp | na 16 16 |        |             |
2203:225 | DONE lbl | na 16 16 | 006801 |             | nt_2dup                              
2203:226 | DONE dir | na 16 16 | 006801 | (2 bytes)   |         .byte 4, { PW + NC }         
2203:226 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2203:227 | DONE dir | na 16 16 | 006803 | (6 bytes)   |         .word nt_name-string, xt_2dup, 006191 
2203:227 | DONE dir | na 16 16 |        |             |                 ee 67 87 61 91 61        --  . g . a . a
2203:228 | DONE dir | na 16 16 | 006809 | (4 bytes)   |         .byte 32, 64, 75, 70         
2203:228 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
2203:229 | DONE wsp | na 16 16 |        |             |
2203:230 | DONE lbl | na 16 16 | 00680d |             | nt_abs                               
2203:231 | DONE dir | na 16 16 | 00680d | (2 bytes)   |         .byte 3, { PW + NC }         
2203:231 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2203:232 | DONE dir | na 16 16 | 00680f | (6 bytes)   |         .word nt_2dup, xt_abs, 0061b6 
2203:232 | DONE dir | na 16 16 |        |             |                 01 68 ae 61 b6 61        --  . h . a . a
2203:233 | DONE dir | na 16 16 | 006815 | (3 bytes)   |         .byte 61, 62, 73             
2203:233 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
2203:234 | DONE wsp | na 16 16 |        |             |
2203:235 | DONE lbl | na 16 16 | 006818 |             | nt_state                             
2203:236 | DONE dir | na 16 16 | 006818 | (2 bytes)   |         .byte 5, { PW + NC }         
2203:236 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2203:237 | DONE dir | na 16 16 | 00681a | (6 bytes)   |         .word nt_abs, xt_state, 0065d6 
2203:237 | DONE dir | na 16 16 |        |             |                 0d 68 cf 65 d6 65        --   h . e . e
2203:238 | DONE dir | na 16 16 | 006820 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
2203:238 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
2203:239 | DONE wsp | na 16 16 |        |             |
2203:240 | DONE lbl | na 16 16 | 006825 |             | nt_to-in                             
2203:241 | DONE dir | na 16 16 | 006825 | (2 bytes)   |         .byte 3, { PW + NC }         
2203:241 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2203:242 | DONE dir | na 16 16 | 006827 | (6 bytes)   |         .word nt_state, xt_to-in, 0060e6 
2203:242 | DONE dir | na 16 16 |        |             |                 18 68 df 60 e6 60        --  . h . ` . `
2203:243 | DONE dir | na 16 16 | 00682d | (3 bytes)   |         .byte 3e, 69, 6e             
2203:243 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
2203:244 | DONE wsp | na 16 16 |        |             |
2203:245 | DONE lbl | na 16 16 | 006830 |             | nt_source                            
2203:246 | DONE dir | na 16 16 | 006830 | (2 bytes)   |         .byte 6, { PW + NC }         
2203:246 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2203:247 | DONE dir | na 16 16 | 006832 | (6 bytes)   |         .word nt_to-in, xt_source, 0065b3 
2203:247 | DONE dir | na 16 16 |        |             |                 25 68 a7 65 b3 65        --  % h . e . e
2203:248 | DONE dir | na 16 16 | 006838 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
2203:248 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
2203:249 | DONE wsp | na 16 16 |        |             |
2203:250 | DONE lbl | na 16 16 | 00683e |             | nt_depth                             
2203:251 | DONE dir | na 16 16 | 00683e | (2 bytes)   |         .byte 5, { PW + NC }         
2203:251 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2203:252 | DONE dir | na 16 16 | 006840 | (6 bytes)   |         .word nt_source, xt_depth, 006350 
2203:252 | DONE dir | na 16 16 |        |             |                 30 68 42 63 50 63        --  0 h B c P c
2203:253 | DONE dir | na 16 16 | 006846 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
2203:253 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
2203:254 | DONE wsp | na 16 16 |        |             |
2203:255 | DONE lbl | na 16 16 | 00684b |             | nt_constant                          
2203:256 | DONE dir | na 16 16 | 00684b | (2 bytes)   |         .byte 8, { PW + NC }         
2203:256 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2203:257 | DONE dir | na 16 16 | 00684d | (6 bytes)   |         .word nt_depth, xt_constant, 0062b2 
2203:257 | DONE dir | na 16 16 |        |             |                 3e 68 99 62 b2 62        --  > h . b . b
2203:258 | DONE dir | na 16 16 | 006853 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
2203:258 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
2203:258 | DONE dir | na 16 16 |        |             |                                          -- 
2203:259 | DONE wsp | na 16 16 |        |             |
2203:260 | DONE lbl | na 16 16 | 00685b |             | nt_variable                          
2203:261 | DONE dir | na 16 16 | 00685b | (2 bytes)   |         .byte 8, { PW + NC }         
2203:261 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2203:262 | DONE dir | na 16 16 | 00685d | (6 bytes)   |         .word nt_constant, xt_variable, 006627 
2203:262 | DONE dir | na 16 16 |        |             |                 4b 68 1b 66 27 66        --  K h . f ' f
2203:263 | DONE dir | na 16 16 | 006863 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
2203:263 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
2203:263 | DONE dir | na 16 16 |        |             |                                          -- 
2203:264 | DONE wsp | na 16 16 |        |             |
2203:265 | DONE lbl | na 16 16 | 00686b |             | nt_tick                              
2203:266 | DONE dir | na 16 16 | 00686b | (2 bytes)   |         .byte 1, { PW + NC }         
2203:266 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:267 | DONE dir | na 16 16 | 00686d | (6 bytes)   |         .word nt_variable, xt_tick, 0061ad 
2203:267 | DONE dir | na 16 16 |        |             |                 5b 68 92 61 ad 61        --  [ h . a . a
2203:268 | DONE dir | na 16 16 | 006873 | (1 bytes)   |         .byte 27                     ; hex for "'"
2203:268 | DONE dir | na 16 16 |        |             |                 27                       --  '
2203:269 | DONE wsp | na 16 16 |        |             |
2203:270 | DONE lbl | na 16 16 | 006874 |             | nt_min                               
2203:271 | DONE dir | na 16 16 | 006874 | (2 bytes)   |         .byte 3, { PW + NC }         
2203:271 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2203:272 | DONE dir | na 16 16 | 006876 | (6 bytes)   |         .word nt_tick, xt_min, 0064ba 
2203:272 | DONE dir | na 16 16 |        |             |                 6b 68 a8 64 ba 64        --  k h . d . d
2203:273 | DONE dir | na 16 16 | 00687c | (3 bytes)   |         .byte 6d, 69, 6e             
2203:273 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
2203:274 | DONE wsp | na 16 16 |        |             |
2203:275 | DONE lbl | na 16 16 | 00687f |             | nt_max                               
2203:276 | DONE dir | na 16 16 | 00687f | (2 bytes)   |         .byte 3, { PW + NC }         
2203:276 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2203:277 | DONE dir | na 16 16 | 006881 | (6 bytes)   |         .word nt_min, xt_max, 0064a7 
2203:277 | DONE dir | na 16 16 |        |             |                 74 68 95 64 a7 64        --  t h . d . d
2203:278 | DONE dir | na 16 16 | 006887 | (3 bytes)   |         .byte 6d, 61, 78             
2203:278 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
2203:279 | DONE wsp | na 16 16 |        |             |
2203:280 | DONE lbl | na 16 16 | 00688a |             | nt_negate                            
2203:281 | DONE dir | na 16 16 | 00688a | (2 bytes)   |         .byte 6, { PW + NC }         
2203:281 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2203:282 | DONE dir | na 16 16 | 00688c | (6 bytes)   |         .word nt_max, xt_negate, 0064db 
2203:282 | DONE dir | na 16 16 |        |             |                 7f 68 d5 64 db 64        --  . h . d . d
2203:283 | DONE dir | na 16 16 | 006892 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
2203:283 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
2203:284 | DONE wsp | na 16 16 |        |             |
2203:285 | DONE lbl | na 16 16 | 006898 |             | nt_invert                            
2203:286 | DONE dir | na 16 16 | 006898 | (2 bytes)   |         .byte 6, { PW + NC }         
2203:286 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2203:287 | DONE dir | na 16 16 | 00689a | (6 bytes)   |         .word nt_negate, xt_invert, 006487 
2203:287 | DONE dir | na 16 16 |        |             |                 8a 68 82 64 87 64        --  . h . d . d
2203:288 | DONE dir | na 16 16 | 0068a0 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
2203:288 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
2203:289 | DONE wsp | na 16 16 |        |             |
2203:290 | DONE lbl | na 16 16 | 0068a6 |             | nt_xor                               
2203:291 | DONE dir | na 16 16 | 0068a6 | (2 bytes)   |         .byte 3, { PW + NC }         
2203:291 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2203:292 | DONE dir | na 16 16 | 0068a8 | (6 bytes)   |         .word nt_invert, xt_xor, 006656 
2203:292 | DONE dir | na 16 16 |        |             |                 98 68 50 66 56 66        --  . h P f V f
2203:293 | DONE dir | na 16 16 | 0068ae | (3 bytes)   |         .byte 78, 6f, 72             
2203:293 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
2203:294 | DONE wsp | na 16 16 |        |             |
2203:295 | DONE lbl | na 16 16 | 0068b1 |             | nt_or                                
2203:296 | DONE dir | na 16 16 | 0068b1 | (2 bytes)   |         .byte 2, { PW + NC }         
2203:296 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2203:297 | DONE dir | na 16 16 | 0068b3 | (6 bytes)   |         .word nt_xor, xt_or, 0064e5  
2203:297 | DONE dir | na 16 16 |        |             |                 a6 68 df 64 e5 64        --  . h . d . d
2203:298 | DONE dir | na 16 16 | 0068b9 | (2 bytes)   |         .byte 6f, 72                 
2203:298 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
2203:299 | DONE wsp | na 16 16 |        |             |
2203:300 | DONE lbl | na 16 16 | 0068bb |             | nt_and                               
2203:301 | DONE dir | na 16 16 | 0068bb | (2 bytes)   |         .byte 3, { PW + NC }         
2203:301 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2203:302 | DONE dir | na 16 16 | 0068bd | (6 bytes)   |         .word nt_or, xt_and, 00626a  
2203:302 | DONE dir | na 16 16 |        |             |                 b1 68 64 62 6a 62        --  . h d b j b
2203:303 | DONE dir | na 16 16 | 0068c3 | (3 bytes)   |         .byte 61, 6e, 64             
2203:303 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
2203:304 | DONE wsp | na 16 16 |        |             |
2203:305 | DONE lbl | na 16 16 | 0068c6 |             | nt_two-star                          
2203:306 | DONE dir | na 16 16 | 0068c6 | (2 bytes)   |         .byte 2, { PW + NC }         
2203:306 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2203:307 | DONE dir | na 16 16 | 0068c8 | (6 bytes)   |         .word nt_and, xt_two-star, 00617f 
2203:307 | DONE dir | na 16 16 |        |             |                 bb 68 7c 61 7f 61        --  . h | a . a
2203:308 | DONE dir | na 16 16 | 0068ce | (2 bytes)   |         .byte 32, 2a                 
2203:308 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
2203:309 | DONE wsp | na 16 16 |        |             |
2203:310 | DONE lbl | na 16 16 | 0068d0 |             | nt_minus                             
2203:311 | DONE dir | na 16 16 | 0068d0 | (2 bytes)   |         .byte 1, { PW + NC }         
2203:311 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:312 | DONE dir | na 16 16 | 0068d2 | (6 bytes)   |         .word nt_two-star, xt_minus, 00615f 
2203:312 | DONE dir | na 16 16 |        |             |                 c6 68 55 61 5f 61        --  . h U a _ a
2203:313 | DONE dir | na 16 16 | 0068d8 | (1 bytes)   |         .byte 2d                     
2203:313 | DONE dir | na 16 16 |        |             |                 2d                       --  -
2203:314 | DONE wsp | na 16 16 |        |             |
2203:315 | DONE lbl | na 16 16 | 0068d9 |             | nt_plus                              
2203:316 | DONE dir | na 16 16 | 0068d9 | (2 bytes)   |         .byte 1, { PW + NC }         
2203:316 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:317 | DONE dir | na 16 16 | 0068db | (6 bytes)   |         .word nt_minus, xt_plus, 006154 
2203:317 | DONE dir | na 16 16 |        |             |                 d0 68 4d 61 54 61        --  . h M a T a
2203:318 | DONE dir | na 16 16 | 0068e1 | (1 bytes)   |         .byte 2b                     
2203:318 | DONE dir | na 16 16 |        |             |                 2b                       --  +
2203:319 | DONE wsp | na 16 16 |        |             |
2203:320 | DONE lbl | na 16 16 | 0068e2 |             | nt_one-minus                         
2203:321 | DONE dir | na 16 16 | 0068e2 | (2 bytes)   |         .byte 2, { PW + NC }         
2203:321 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2203:322 | DONE dir | na 16 16 | 0068e4 | (6 bytes)   |         .word nt_plus, xt_one-minus, 006171 
2203:322 | DONE dir | na 16 16 |        |             |                 d9 68 70 61 71 61        --  . h p a q a
2203:323 | DONE dir | na 16 16 | 0068ea | (2 bytes)   |         .byte 31, 2d                 
2203:323 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
2203:324 | DONE wsp | na 16 16 |        |             |
2203:325 | DONE lbl | na 16 16 | 0068ec |             | nt_one-plus                          
2203:326 | DONE dir | na 16 16 | 0068ec | (2 bytes)   |         .byte 2, { PW + NC }         
2203:326 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2203:327 | DONE dir | na 16 16 | 0068ee | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 006173 
2203:327 | DONE dir | na 16 16 |        |             |                 e2 68 72 61 73 61        --  . h r a s a
2203:328 | DONE dir | na 16 16 | 0068f4 | (2 bytes)   |         .byte 31, 2b                 
2203:328 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
2203:329 | DONE wsp | na 16 16 |        |             |
2203:330 | DONE lbl | na 16 16 | 0068f6 |             | nt_false                             
2203:331 | DONE dir | na 16 16 | 0068f6 | (2 bytes)   |         .byte 5, { PW + NC }         
2203:331 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2203:332 | DONE dir | na 16 16 | 0068f8 | (6 bytes)   |         .word nt_one-plus, xt_zero, 006167 
2203:332 | DONE dir | na 16 16 |        |             |                 ec 68 60 61 67 61        --  . h ` a g a
2203:333 | DONE dir | na 16 16 | 0068fe | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
2203:333 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
2203:334 | DONE wsp | na 16 16 |        |             |
2203:335 | DONE lbl | na 16 16 | 006903 |             | nt_true                              
2203:336 | DONE dir | na 16 16 | 006903 | (2 bytes)   |         .byte 4, { PW + NC }         
2203:336 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2203:337 | DONE dir | na 16 16 | 006905 | (6 bytes)   |         .word nt_false, xt_true, 0065e4 
2203:337 | DONE dir | na 16 16 |        |             |                 f6 68 dd 65 e4 65        --  . h . e . e
2203:338 | DONE dir | na 16 16 | 00690b | (4 bytes)   |         .byte 74, 72, 75, 65         
2203:338 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
2203:339 | DONE wsp | na 16 16 |        |             |
2203:340 | DONE lbl | na 16 16 | 00690f |             | nt_two                               
2203:341 | DONE dir | na 16 16 | 00690f | (2 bytes)   |         .byte 1, { PW + NC }         
2203:341 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:342 | DONE dir | na 16 16 | 006911 | (6 bytes)   |         .word nt_true, xt_two, 00617b 
2203:342 | DONE dir | na 16 16 |        |             |                 03 69 74 61 7b 61        --  . i t a { a
2203:343 | DONE dir | na 16 16 | 006917 | (1 bytes)   |         .byte 32                     
2203:343 | DONE dir | na 16 16 |        |             |                 32                       --  2
2203:344 | DONE wsp | na 16 16 |        |             |
2203:345 | DONE lbl | na 16 16 | 006918 |             | nt_one                               
2203:346 | DONE dir | na 16 16 | 006918 | (2 bytes)   |         .byte 1, { PW + NC }         
2203:346 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:347 | DONE dir | na 16 16 | 00691a | (6 bytes)   |         .word nt_two, xt_one, 00616f 
2203:347 | DONE dir | na 16 16 |        |             |                 0f 69 68 61 6f 61        --  . i h a o a
2203:348 | DONE dir | na 16 16 | 006920 | (1 bytes)   |         .byte 31                     
2203:348 | DONE dir | na 16 16 |        |             |                 31                       --  1
2203:349 | DONE wsp | na 16 16 |        |             |
2203:350 | DONE lbl | na 16 16 | 006921 |             | nt_zero                              
2203:351 | DONE dir | na 16 16 | 006921 | (2 bytes)   |         .byte 1, { PW + NC }         
2203:351 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:352 | DONE dir | na 16 16 | 006923 | (6 bytes)   |         .word nt_one, xt_zero, 006167 
2203:352 | DONE dir | na 16 16 |        |             |                 18 69 60 61 67 61        --  . i ` a g a
2203:353 | DONE dir | na 16 16 | 006929 | (1 bytes)   |         .byte 30                     
2203:353 | DONE dir | na 16 16 |        |             |                 30                       --  0
2203:354 | DONE wsp | na 16 16 |        |             |
2203:355 | DONE lbl | na 16 16 | 00692a |             | nt_find-name                         
2203:356 | DONE dir | na 16 16 | 00692a | (2 bytes)   |         .byte 9, 0                   
2203:356 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
2203:357 | DONE dir | na 16 16 | 00692c | (6 bytes)   |         .word nt_zero, xt_find-name, 006481 
2203:357 | DONE dir | na 16 16 |        |             |                 21 69 2b 64 81 64        --  ! i + d . d
2203:358 | DONE dir | na 16 16 | 006932 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
2203:358 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
2203:358 | DONE dir | na 16 16 |        |             |                 65                       --  e
2203:359 | DONE wsp | na 16 16 |        |             |
2203:360 | DONE lbl | na 16 16 | 00693b |             | nt_refill                            
2203:361 | DONE dir | na 16 16 | 00693b | (2 bytes)   |         .byte 6, { PW }              ; TODO check flags
2203:361 | DONE dir | na 16 16 |        |             |                 06 08                    --  . .
2203:362 | DONE dir | na 16 16 | 00693d | (6 bytes)   |         .word nt_find-name, xt_refill, 00659d 
2203:362 | DONE dir | na 16 16 |        |             |                 2a 69 6b 65 9d 65        --  * i k e . e
2203:363 | DONE dir | na 16 16 | 006943 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
2203:363 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
2203:364 | DONE wsp | na 16 16 |        |             |
2203:365 | DONE lbl | na 16 16 | 006949 |             | nt_parse-name                        
2203:366 | DONE dir | na 16 16 | 006949 | (2 bytes)   |         .byte &10, 0                 
2203:366 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
2203:367 | DONE dir | na 16 16 | 00694b | (6 bytes)   |         .word nt_refill, xt_parse-name, 00656a 
2203:367 | DONE dir | na 16 16 |        |             |                 3b 69 06 65 6a 65        --  ; i . e j e
2203:368 | DONE dir | na 16 16 | 006951 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
2203:368 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
2203:368 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
2203:369 | DONE wsp | na 16 16 |        |             |
2203:370 | DONE lbl | na 16 16 | 00695b |             | nt_source-id                         
2203:371 | DONE dir | na 16 16 | 00695b | (2 bytes)   |         .byte 9, { PW + NC }         
2203:371 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2203:372 | DONE dir | na 16 16 | 00695d | (6 bytes)   |         .word nt_parse-name, xt_source-id, 0065ba 
2203:372 | DONE dir | na 16 16 |        |             |                 49 69 b4 65 ba 65        --  I i . e . e
2203:373 | DONE dir | na 16 16 | 006963 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
2203:373 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
2203:373 | DONE dir | na 16 16 |        |             |                 64                       --  d
2203:374 | DONE wsp | na 16 16 |        |             |
2203:375 | DONE lbl | na 16 16 | 00696c |             | nt_comma                             
2203:376 | DONE dir | na 16 16 | 00696c | (2 bytes)   |         .byte 1, { PW + NC }         
2203:376 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:377 | DONE dir | na 16 16 | 00696e | (6 bytes)   |         .word nt_source-id, xt_comma, 0060f2 
2203:377 | DONE dir | na 16 16 |        |             |                 5b 69 e7 60 f2 60        --  [ i . ` . `
2203:378 | DONE dir | na 16 16 | 006974 | (1 bytes)   |         .byte 2c                     
2203:378 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
2203:379 | DONE wsp | na 16 16 |        |             |
2203:380 | DONE lbl | na 16 16 | 006975 |             | nt_accept                            
2203:381 | DONE dir | na 16 16 | 006975 | (2 bytes)   |         .byte 6, 00                  ; TODO check flags
2203:381 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
2203:382 | DONE dir | na 16 16 | 006977 | (6 bytes)   |         .word nt_comma, xt_accept, 00623a 
2203:382 | DONE dir | na 16 16 |        |             |                 6c 69 b7 61 3a 62        --  l i . a : b
2203:383 | DONE dir | na 16 16 | 00697d | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
2203:383 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
2203:384 | DONE wsp | na 16 16 |        |             |
2203:385 | DONE lbl | na 16 16 | 006983 |             | nt_tuck                              
2203:386 | DONE dir | na 16 16 | 006983 | (2 bytes)   |         .byte 4, { PW + NC }         
2203:386 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2203:387 | DONE dir | na 16 16 | 006985 | (6 bytes)   |         .word nt_accept, xt_tuck, 0065ed 
2203:387 | DONE dir | na 16 16 |        |             |                 75 69 e5 65 ed 65        --  u i . e . e
2203:388 | DONE dir | na 16 16 | 00698b | (4 bytes)   |         .byte 74, 75, 63, 6b         
2203:388 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
2203:389 | DONE wsp | na 16 16 |        |             |
2203:390 | DONE lbl | na 16 16 | 00698f |             | nt_nip                               
2203:391 | DONE dir | na 16 16 | 00698f | (2 bytes)   |         .byte 3, { PW + NC }         
2203:391 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2203:392 | DONE dir | na 16 16 | 006991 | (6 bytes)   |         .word nt_tuck, xt_nip, 0064de 
2203:392 | DONE dir | na 16 16 |        |             |                 83 69 dc 64 de 64        --  . i . d . d
2203:393 | DONE dir | na 16 16 | 006997 | (3 bytes)   |         .byte 6e, 69, 70             
2203:393 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
2203:394 | DONE wsp | na 16 16 |        |             |
2203:395 | DONE lbl | na 16 16 | 00699a |             | nt_rot                               
2203:396 | DONE dir | na 16 16 | 00699a | (2 bytes)   |         .byte 3, { PW + NC }         
2203:396 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2203:397 | DONE dir | na 16 16 | 00699c | (6 bytes)   |         .word nt_nip, xt_rot, 0065a6 
2203:397 | DONE dir | na 16 16 |        |             |                 8f 69 9e 65 a6 65        --  . i . e . e
2203:398 | DONE dir | na 16 16 | 0069a2 | (3 bytes)   |         .byte 72, 6f, 74             
2203:398 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
2203:399 | DONE wsp | na 16 16 |        |             |
2203:400 | DONE lbl | na 16 16 | 0069a5 |             | nt_execute                           
2203:401 | DONE dir | na 16 16 | 0069a5 | (2 bytes)   |         .byte 7, { PW + NC }         
2203:401 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2203:402 | DONE dir | na 16 16 | 0069a7 | (6 bytes)   |         .word nt_rot, xt_execute, 00642a 
2203:402 | DONE dir | na 16 16 |        |             |                 9a 69 20 64 2a 64        --  . i   d * d
2203:403 | DONE dir | na 16 16 | 0069ad | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
2203:403 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
2203:404 | DONE wsp | na 16 16 |        |             |
2203:405 | DONE lbl | na 16 16 | 0069b4 |             | nt_here                              
2203:406 | DONE dir | na 16 16 | 0069b4 | (2 bytes)   |         .byte 4, { PW + NC }         
2203:406 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2203:407 | DONE dir | na 16 16 | 0069b6 | (6 bytes)   |         .word nt_execute, xt_here, 00648e 
2203:407 | DONE dir | na 16 16 |        |             |                 a5 69 88 64 8e 64        --  . i . d . d
2203:408 | DONE dir | na 16 16 | 0069bc | (4 bytes)   |         .byte 68, 65, 72, 65         
2203:408 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
2203:409 | DONE wsp | na 16 16 |        |             |
2203:410 | DONE lbl | na 16 16 | 0069c0 |             | nt_2drop                             
2203:411 | DONE dir | na 16 16 | 0069c0 | (2 bytes)   |         .byte 5, { PW + NC }         
2203:411 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2203:412 | DONE dir | na 16 16 | 0069c2 | (6 bytes)   |         .word nt_here, xt_2drop, 006186 
2203:412 | DONE dir | na 16 16 |        |             |                 b4 69 80 61 86 61        --  . i . a . a
2203:413 | DONE dir | na 16 16 | 0069c8 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
2203:413 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
2203:414 | DONE wsp | na 16 16 |        |             |
2203:415 | DONE lbl | na 16 16 | 0069cd |             | nt_over                              
2203:416 | DONE dir | na 16 16 | 0069cd | (2 bytes)   |         .byte 4, { PW + NC }         
2203:416 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2203:417 | DONE dir | na 16 16 | 0069cf | (6 bytes)   |         .word nt_2drop, xt_over, 0064ec 
2203:417 | DONE dir | na 16 16 |        |             |                 c0 69 e6 64 ec 64        --  . i . d . d
2203:418 | DONE dir | na 16 16 | 0069d5 | (4 bytes)   |         .byte 6f, 76, 65, 72         
2203:418 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
2203:419 | DONE wsp | na 16 16 |        |             |
2203:420 | DONE lbl | na 16 16 | 0069d9 |             | nt_fetch                             
2203:421 | DONE dir | na 16 16 | 0069d9 | (2 bytes)   |         .byte 1, { PW + NC }         
2203:421 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:422 | DONE dir | na 16 16 | 0069db | (6 bytes)   |         .word nt_over, xt_fetch, 006143 
2203:422 | DONE dir | na 16 16 |        |             |                 cd 69 3f 61 43 61        --  . i ? a C a
2203:423 | DONE dir | na 16 16 | 0069e1 | (1 bytes)   |         .byte 40                     
2203:423 | DONE dir | na 16 16 |        |             |                 40                       --  @
2203:424 | DONE wsp | na 16 16 |        |             |
2203:425 | DONE lbl | na 16 16 | 0069e2 |             | nt_store                             
2203:426 | DONE dir | na 16 16 | 0069e2 | (2 bytes)   |         .byte 1, { PW + NC }         
2203:426 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2203:427 | DONE dir | na 16 16 | 0069e4 | (6 bytes)   |         .word nt_fetch, xt_store, 00613e 
2203:427 | DONE dir | na 16 16 |        |             |                 d9 69 35 61 3e 61        --  . i 5 a > a
2203:428 | DONE dir | na 16 16 | 0069ea | (1 bytes)   |         .byte 21                     
2203:428 | DONE dir | na 16 16 |        |             |                 21                       --  !
2203:429 | DONE wsp | na 16 16 |        |             |
2203:430 | DONE lbl | na 16 16 | 0069eb |             | nt_swap                              
2203:431 | DONE dir | na 16 16 | 0069eb | (2 bytes)   |         .byte 4, { PW + NC }         
2203:431 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2203:432 | DONE dir | na 16 16 | 0069ed | (6 bytes)   |         .word nt_store, xt_swap, 0065dc 
2203:432 | DONE dir | na 16 16 |        |             |                 e2 69 d7 65 dc 65        --  . i . e . e
2203:433 | DONE dir | na 16 16 | 0069f3 | (4 bytes)   |         .byte 73, 77, 61, 70         
2203:433 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
2203:434 | DONE wsp | na 16 16 |        |             |
2203:435 | DONE lbl | na 16 16 | 0069f7 |             | nt_dup                               
2203:436 | DONE dir | na 16 16 | 0069f7 | (2 bytes)   |         .byte 3, { PW + NC }         
2203:436 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2203:437 | DONE dir | na 16 16 | 0069f9 | (6 bytes)   |         .word nt_swap, xt_dup, 0063ed 
2203:437 | DONE dir | na 16 16 |        |             |                 eb 69 e9 63 ed 63        --  . i . c . c
2203:438 | DONE dir | na 16 16 | 0069ff | (3 bytes)   |         .byte 64, 75, 70             
2203:438 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
2203:439 | DONE wsp | na 16 16 |        |             |
2203:440 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
2203:441 | DONE lbl | na 16 16 | 006a02 |             | nt_drop                              
2203:442 | DONE dir | na 16 16 | 006a02 | (2 bytes)   |         .byte 4, { PW + NC }         
2203:442 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2203:443 | DONE dir | na 16 16 | 006a04 | (6 bytes)   |         .word nt_dup, xt_drop, 0063c1 
2203:443 | DONE dir | na 16 16 |        |             |                 f7 69 bd 63 c1 63        --  . i . c . c
2203:444 | DONE dir | na 16 16 | 006a0a | (4 bytes)   |         .byte 64, 72, 6f, 70         
2203:444 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
2203:445 | DONE wsp | na 16 16 |        |             |
2203:446 | DONE cmt | na 16 16 |        |             | ; END
2204:000 | DONE wsp | na 16 16 |        |             |
2205:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2206:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
2207:000 | DONE wsp | na 16 16 |        |             |
2208:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2209:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
2210:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
2211:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
2212:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
2213:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
2214:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
2215:000 | DONE lbl | na 16 16 | 006a0e |             | dovar                                
2216:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2217:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2218:000 | DONE ins | na 16 16 | 006a0e | ca          |                 dex                  ; make room on Data Stack
2219:000 | DONE ins | na 16 16 | 006a0f | ca          |                 dex                  
2220:000 | DONE ins | na 16 16 | 006a10 | 94 00       |                 sty.dx 00            
2221:000 | DONE wsp | na 16 16 |        |             |
2222:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
2223:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
2224:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
2225:000 | DONE ins | na 16 16 | 006a12 | 7a          |                 ply                  ; value is now TOS
2226:000 | DONE ins | na 16 16 | 006a13 | c8          |                 iny                  ; add one because of 65816's address handling
2227:000 | DONE wsp | na 16 16 |        |             |
2228:000 | DONE ins | na 16 16 | 006a14 | 60          |                 rts                  ; takes us to original caller
2229:000 | DONE wsp | na 16 16 |        |             |
2230:000 | DONE wsp | na 16 16 |        |             |
2231:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2232:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
2233:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
2234:000 | DONE cmt | na 16 16 |        |             | ; the stack
2235:000 | DONE lbl | na 16 16 | 006a15 |             | doconst                              
2236:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2237:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2238:000 | DONE ins | na 16 16 | 006a15 | ca          |                 dex                  ; make room on Data Stack
2239:000 | DONE ins | na 16 16 | 006a16 | ca          |                 dex                  
2240:000 | DONE ins | na 16 16 | 006a17 | 94 00       |                 sty.dx 00            
2241:000 | DONE wsp | na 16 16 |        |             |
2242:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
2243:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
2244:000 | DONE ins | na 16 16 | 006a19 | 68          |                 pla                  ; get the return address
2245:000 | DONE ins | na 16 16 | 006a1a | 85 16       |                 sta.d 000216         
2246:000 | DONE wsp | na 16 16 |        |             |
2247:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
2248:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
2249:000 | DONE ins | na 16 16 | 006a1c | a0 01 00    |                 ldy.# 0001           
2250:000 | DONE ins | na 16 16 | 006a1f | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
2251:000 | DONE ins | na 16 16 | 006a21 | a8          |                 tay                  
2252:000 | DONE wsp | na 16 16 |        |             |
2253:000 | DONE ins | na 16 16 | 006a22 | 60          |                 rts                  ; takes us to original caller
2254:000 | DONE wsp | na 16 16 |        |             |
2255:000 | DONE wsp | na 16 16 |        |             |
2256:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2257:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
2258:000 | DONE wsp | na 16 16 |        |             |
2259:000 | DONE wsp | na 16 16 |        |             |
2260:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2261:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (AKA INTERPRET)
2262:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
2263:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
2264:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
2265:000 | DONE lbl | na 16 16 | 006a23 |             | compex                               
2266:000 | DONE lbl | na 16 16 | 006a23 |             | compex_loop                          
2267:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2268:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2269:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
2270:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
2271:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
2272:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
2273:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
2274:000 | DONE ins | na 16 16 | 006a23 | 20 06 65    |                 jsr 006506           ; ( "string" -- addr u )
2275:000 | DONE wsp | na 16 16 |        |             |
2276:000 | DONE cmt | na 16 16 |        |             |                 ; TODO decide if we want to make a copy of the string here so
2277:000 | DONE cmt | na 16 16 |        |             |                 ; that we can provide a better error message
2278:000 | DONE wsp | na 16 16 |        |             |
2279:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
2280:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
2281:000 | DONE ins | na 16 16 | 006a26 | 98          |                 tya                  ; force flag check
2282:000 | DONE ins | na 16 16 | 006a27 | f0 3f       |                 beq 006a68           
2283:000 | DONE wsp | na 16 16 |        |             |
2284:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
2285:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
2286:000 | DONE ins | na 16 16 | 006a29 | 20 a8 6a    |                 jsr 006aa8           
2287:000 | DONE wsp | na 16 16 |        |             |
2288:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know
2289:000 | DONE ins | na 16 16 | 006a2c | 20 2b 64    |                 jsr 00642b           ; ( addr u -- nt | 0 )
2290:000 | DONE wsp | na 16 16 |        |             |
2291:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
2292:000 | DONE ins | na 16 16 | 006a2f | 98          |                 tya                  
2293:000 | DONE ins | na 16 16 | 006a30 | d0 06       |                 bne 006a38           
2294:000 | DONE wsp | na 16 16 |        |             |
2295:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
2296:000 | DONE wsp | na 16 16 |        |             |
2297:000 | DONE cmt | na 16 16 |        |             |                 ; Number conversion has failed, which means the user screwed up,
2298:000 | DONE cmt | na 16 16 |        |             |                 ; so complain and abort
2299:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print the offending string first
2300:000 | DONE ins | na 16 16 | 006a32 | a9 be 6c    |                 lda.# 006cbe         ; "Unknown word"
2301:000 | DONE ins | na 16 16 | 006a35 | 4c 6f 6a    |                 jmp 006a6f           
2302:000 | DONE wsp | na 16 16 |        |             |
2303:000 | DONE lbl | na 16 16 | 006a38 |             | compex_got_name_token                
2304:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
2305:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down. This is a quicker
2306:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
2307:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
2308:000 | DONE ins | na 16 16 | 006a38 | 84 16       |                 sty.d 000216         
2309:000 | DONE ins | na 16 16 | 006a3a | c8          |                 iny                  
2310:000 | DONE ins | na 16 16 | 006a3b | c8          |                 iny                  
2311:000 | DONE ins | na 16 16 | 006a3c | c8          |                 iny                  
2312:000 | DONE ins | na 16 16 | 006a3d | c8          |                 iny                  
2313:000 | DONE ins | na 16 16 | 006a3e | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
2314:000 | DONE ins | na 16 16 | 006a41 | a8          |                 tay                  ; xt is TOS
2315:000 | DONE wsp | na 16 16 |        |             |
2316:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
2317:000 | DONE ins | na 16 16 | 006a42 | a5 14       |                 lda.d 000214         
2318:000 | DONE ins | na 16 16 | 006a44 | d0 14       |                 bne 006a5a           
2319:000 | DONE wsp | na 16 16 |        |             |
2320:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
2321:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
2322:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
2323:000 | DONE ins | na 16 16 | 006a46 | b2 16       |                 lda.di 000216        
2324:000 | DONE ins | na 16 16 | 006a48 | eb          |                 xba                  
2325:000 | DONE ins | na 16 16 | 006a49 | 29 04 00    |                 and.# CO             ; mask everything but Compile Only bit
2326:000 | DONE ins | na 16 16 | 006a4c | f0 06       |                 beq 006a54           
2327:000 | DONE wsp | na 16 16 |        |             |
2328:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
2329:000 | DONE ins | na 16 16 | 006a4e | a9 b0 6b    |                 lda.# 006bb0         
2330:000 | DONE ins | na 16 16 | 006a51 | 4c 6f 6a    |                 jmp 006a6f           
2331:000 | DONE wsp | na 16 16 |        |             |
2332:000 | DONE lbl | na 16 16 | 006a54 |             | compex_interpret                     
2333:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
2334:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
2335:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
2336:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
2337:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
2338:000 | DONE ins | na 16 16 | 006a54 | 20 20 64    |                 jsr 006420           
2339:000 | DONE wsp | na 16 16 |        |             |
2340:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
2341:000 | DONE ins | na 16 16 | 006a57 | 4c 23 6a    |                 jmp 006a23           
2342:000 | DONE wsp | na 16 16 |        |             |
2343:000 | DONE lbl | na 16 16 | 006a5a |             | compex_compile                       
2344:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
2345:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
2346:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
2347:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
2348:000 | DONE ins | na 16 16 | 006a5a | b2 16       |                 lda.di 000216        
2349:000 | DONE ins | na 16 16 | 006a5c | eb          |                 xba                  
2350:000 | DONE ins | na 16 16 | 006a5d | 29 02 00    |                 and.# IM             ; Mask all but IM bit
2351:000 | DONE ins | na 16 16 | 006a60 | d0 f2       |                 bne 006a54           ; IMMEDIATE word, execute right now
2352:000 | DONE wsp | na 16 16 |        |             |
2353:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
2354:000 | DONE ins | na 16 16 | 006a62 | 20 86 62    |                 jsr 006286           
2355:000 | DONE wsp | na 16 16 |        |             |
2356:000 | DONE ins | na 16 16 | 006a65 | 4c 23 6a    |                 jmp 006a23           
2357:000 | DONE wsp | na 16 16 |        |             |
2358:000 | DONE wsp | na 16 16 |        |             |
2359:000 | DONE lbl | na 16 16 | 006a68 |             | compex_line_done                     
2360:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
2361:000 | DONE ins | na 16 16 | 006a68 | b4 02       |                 ldy.dx 02            
2362:000 | DONE ins | na 16 16 | 006a6a | e8          |                 inx                  
2363:000 | DONE ins | na 16 16 | 006a6b | e8          |                 inx                  
2364:000 | DONE ins | na 16 16 | 006a6c | e8          |                 inx                  
2365:000 | DONE ins | na 16 16 | 006a6d | e8          |                 inx                  
2366:000 | DONE wsp | na 16 16 |        |             |
2367:000 | DONE ins | na 16 16 | 006a6e | 60          |                 rts                  
2368:000 | DONE wsp | na 16 16 |        |             |
2369:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2370:000 | DONE cmt | na 16 16 |        |             | ; Fatal error encountered: Take address of error string from A, print it and
2371:000 | DONE cmt | na 16 16 |        |             | ; then call abort
2372:000 | DONE lbl | na 16 16 | 006a6f |             | error                                
2373:000 | DONE ins | na 16 16 | 006a6f | 20 75 6a    |                 jsr 006a75           
2374:000 | DONE ins | na 16 16 | 006a72 | 4c 97 60    |                 jmp 006097           
2375:000 | DONE wsp | na 16 16 |        |             |
2376:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2377:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
2378:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
2379:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
2380:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
2381:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
2382:000 | DONE lbl | na 16 16 | 006a75 |             | print_string                         
2383:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2384:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2385:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
2386:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
2387:000 | DONE ins | na 16 16 | 006a75 | da          |                 phx                  
2388:000 | DONE ins | na 16 16 | 006a76 | aa          |                 tax                  ; x16 contains address of string
2389:000 | DONE lbl | na 16 16 | 006a77 |             | @                                    
2390:000 | DONE ins | na 16 16 | 006a77 | e2 20       |                 sep 20               
2390:001 | DONE ctl | na  8 16 |        |             |         .!a8
2391:000 | DONE ins | na  8 16 | 006a79 | bd 00 00    |                 lda.x 0000           ; LDA $0000,X
2392:000 | DONE ins | na  8 16 | 006a7c | f0 06       |                 beq 006a84           
2393:000 | DONE ins | na  8 16 | 006a7e | 20 36 60    |                 jsr 006036           
2394:000 | DONE ins | na  8 16 | 006a81 | e8          |                 inx                  
2395:000 | DONE ins | na  8 16 | 006a82 | 80 f3       |                 bra 006a77           
2396:000 | DONE wsp | na  8 16 |        |             |
2397:000 | DONE lbl | na  8 16 | 006a84 |             | print_string_done                    
2398:000 | DONE ins | na  8 16 | 006a84 | a9 0a       |                 lda.# AscLF          ; should be CR on some systems
2399:000 | DONE ins | na  8 16 | 006a86 | 20 36 60    |                 jsr 006036           
2400:000 | DONE ins | na  8 16 | 006a89 | c2 20       |                 rep 20               
2400:001 | DONE ctl | na 16 16 |        |             |         .!a16
2401:000 | DONE ins | na 16 16 | 006a8b | fa          |                 plx                  
2402:000 | DONE ins | na 16 16 | 006a8c | 60          |                 rts                  
2403:000 | DONE wsp | na 16 16 |        |             |
2404:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2405:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
2406:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
2407:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
2408:000 | DONE lbl | na 16 16 | 006a8d |             | byte_to_ascii                        
2409:000 | DONE ins | na 16 16 | 006a8d | 48          |                 pha                  
2410:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
2411:000 | DONE ins | na 16 16 | 006a8e | 4a          |                 lsr.a                
2412:000 | DONE ins | na 16 16 | 006a8f | 4a          |                 lsr.a                
2413:000 | DONE ins | na 16 16 | 006a90 | 4a          |                 lsr.a                
2414:000 | DONE ins | na 16 16 | 006a91 | 4a          |                 lsr.a                
2415:000 | DONE ins | na 16 16 | 006a92 | 20 96 6a    |                 jsr 006a96           
2416:000 | DONE wsp | na 16 16 |        |             |
2417:000 | DONE ins | na 16 16 | 006a95 | 68          |                 pla                  
2418:000 | DONE wsp | na 16 16 |        |             |
2419:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
2420:000 | DONE wsp | na 16 16 |        |             |
2421:000 | DONE wsp | na 16 16 |        |             |
2422:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2423:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
2424:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
2425:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
2426:000 | DONE lbl | na 16 16 | 006a96 |             | nibble_to_ascii                      
2427:000 | DONE ins | na 16 16 | 006a96 | 29 0f 00    |                 and.# 000f           
2428:000 | DONE ins | na 16 16 | 006a99 | 09 30 00    |                 ora.# 30             
2429:000 | DONE ins | na 16 16 | 006a9c | c9 3a 00    |                 cmp.# 003a           ; '9' + 1
2430:000 | DONE ins | na 16 16 | 006a9f | 90 03       |                 bcc 006aa4           
2431:000 | DONE ins | na 16 16 | 006aa1 | 69 06 00    |                 adc.# 0006           
2432:000 | DONE lbl | na 16 16 | 006aa4 |             | @                                    
2433:000 | DONE ins | na 16 16 | 006aa4 | 20 36 60    |                 jsr 006036           
2434:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2435:000 | DONE ins | na 16 16 | 006aa7 | 60          |                 rts                  
2436:000 | DONE wsp | na 16 16 |        |             |
2437:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2438:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
2439:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
2440:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
2441:000 | DONE lbl | na 16 16 | 006aa8 |             | string_to_lowercase                  
2442:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
2443:000 | DONE ins | na 16 16 | 006aa8 | 60          |                 rts                  
2444:000 | DONE wsp | na 16 16 |        |             |
2445:000 | DONE wsp | na 16 16 |        |             |
2446:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2447:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
2448:000 | DONE wsp | na 16 16 |        |             |
2449:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
2450:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
2451:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
2452:000 | DONE lbl | na 16 16 | 006aa9 |             | hi-start                             
2453:000 | DONE dir | na 16 16 | 006aa9 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
2453:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
2453:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
2453:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
2453:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
2453:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
2454:000 | DONE dir | na 16 16 | 006acc | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
2454:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
2454:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
2454:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
2454:000 | DONE dir | na 16 16 |        |             |                 31 35 2e 20 46 65 62 20  --  1 5 .   F e b  
2454:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
2455:000 | DONE dir | na 16 16 | 006af1 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
2455:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
2455:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
2455:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
2455:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
2455:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
2455:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
2455:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
2456:000 | DONE dir | na 16 16 | 006b24 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
2456:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
2456:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
2456:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
2456:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
2456:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
2456:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
2456:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
2457:000 | DONE dir | na 16 16 | 006b58 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
2457:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
2457:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
2457:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
2457:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
2458:000 | DONE lbl | na 16 16 | 006b74 |             | hi-end                               
2459:000 | DONE wsp | na 16 16 |        |             |
2460:000 | DONE wsp | na 16 16 |        |             |
2461:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2462:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
2463:000 | DONE wsp | na 16 16 |        |             |
2464:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
2464:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2464:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
2464:003 | DONE cmt | na 16 16 |        |             | ; This version:  15. Feb 2017
2464:004 | DONE wsp | na 16 16 |        |             |
2464:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
2464:006 | DONE wsp | na 16 16 |        |             |
2464:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2464:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
2464:009 | DONE wsp | na 16 16 |        |             |
2464:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
2464:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
2464:012 | DONE cmt | na 16 16 |        |             | ; character
2464:013 | DONE wsp | na 16 16 |        |             |
2464:014 | DONE lbl | na 16 16 | 006b74 |             | s_ok                                 
2464:015 | DONE dir | na 16 16 | 006b74 | (4 bytes)   |         .byte 20, 6f, 6b, 0          ; note space at beginning
2464:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
2464:016 | DONE lbl | na 16 16 | 006b78 |             | s_compiled                           
2464:017 | DONE dir | na 16 16 | 006b78 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
2464:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
2464:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
2464:018 | DONE wsp | na 16 16 |        |             |
2464:019 | DONE wsp | na 16 16 |        |             |
2464:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2464:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
2464:022 | DONE wsp | na 16 16 |        |             |
2464:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
2464:024 | DONE wsp | na 16 16 |        |             |
2464:025 | DONE lbl | na 16 16 | 006b82 |             | es_allot                             
2464:026 | DONE dir | na 16 16 | 006b82 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
2464:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
2464:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
2464:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
2464:027 | DONE lbl | na 16 16 | 006b96 |             | es_channel                           
2464:028 | DONE dir | na 16 16 | 006b96 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
2464:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
2464:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
2464:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
2464:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
2464:029 | DONE lbl | na 16 16 | 006bb0 |             | es_componly                          
2464:030 | DONE dir | na 16 16 | 006bb0 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
2464:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
2464:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
2464:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
2464:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
2464:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
2464:031 | DONE lbl | na 16 16 | 006bd1 |             | es_defer                             
2464:032 | DONE dir | na 16 16 | 006bd1 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
2464:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
2464:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
2464:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
2464:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
2464:033 | DONE lbl | na 16 16 | 006bee |             | es_divzero                           
2464:034 | DONE dir | na 16 16 | 006bee | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
2464:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
2464:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
2464:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
2464:035 | DONE lbl | na 16 16 | 006bff |             | es_error                             
2464:036 | DONE dir | na 16 16 | 006bff | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
2464:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
2464:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
2464:037 | DONE lbl | na 16 16 | 006c0b |             | es_intonly                           
2464:038 | DONE dir | na 16 16 | 006c0b | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
2464:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
2464:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
2464:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
2464:039 | DONE lbl | na 16 16 | 006c21 |             | es_noname                            
2464:040 | DONE dir | na 16 16 | 006c21 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
2464:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
2464:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
2464:040 | DONE dir | na 16 16 |        |             |                                          -- 
2464:041 | DONE lbl | na 16 16 | 006c31 |             | es_radix                             
2464:042 | DONE dir | na 16 16 | 006c31 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
2464:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
2464:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
2464:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
2464:043 | DONE lbl | na 16 16 | 006c48 |             | es_refill1                           
2464:044 | DONE dir | na 16 16 | 006c48 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
2464:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
2464:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
2464:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
2464:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
2464:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
2464:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
2464:045 | DONE lbl | na 16 16 | 006c76 |             | es_refill2                           
2464:046 | DONE dir | na 16 16 | 006c76 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
2464:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
2464:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
2464:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
2464:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
2464:046 | DONE dir | na 16 16 |        |             |                                          -- 
2464:047 | DONE lbl | na 16 16 | 006c96 |             | es_state                             
2464:048 | DONE dir | na 16 16 | 006c96 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
2464:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
2464:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
2464:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
2464:048 | DONE dir | na 16 16 |        |             |                                          -- 
2464:049 | DONE lbl | na 16 16 | 006cae |             | es_underflow                         
2464:050 | DONE dir | na 16 16 | 006cae | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
2464:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
2464:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
2464:050 | DONE dir | na 16 16 |        |             |                                          -- 
2464:051 | DONE lbl | na 16 16 | 006cbe |             | es_syntax                            
2464:052 | DONE dir | na 16 16 | 006cbe | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
2464:052 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
2464:052 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
2464:052 | DONE dir | na 16 16 |        |             |                                          -- 
2464:053 | DONE wsp | na 16 16 |        |             |
2464:054 | DONE wsp | na 16 16 |        |             |
2464:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2464:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
2464:057 | DONE wsp | na 16 16 |        |             |
2464:058 | DONE lbl | na 16 16 | 006cce |             | vt100_page                           
2464:059 | DONE dir | na 16 16 | 006cce | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  ; clear screen
2464:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
2464:060 | DONE lbl | na 16 16 | 006cd3 |             | vt100_home                           
2464:061 | DONE dir | na 16 16 | 006cd3 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      ; cursor home
2464:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
2464:062 | DONE wsp | na 16 16 |        |             |
2464:063 | DONE wsp | na 16 16 |        |             |
2464:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2464:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
2464:066 | DONE wsp | na 16 16 |        |             |
2464:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
2464:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
2464:069 | DONE wsp | na 16 16 |        |             |
2464:070 | DONE lbl | na 16 16 | 006cd7 |             | tests_prev_cmd                       
2464:071 | DONE dir | na 16 16 | 006cd7 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
2464:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
2464:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
2464:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
2464:072 | DONE lbl | na 16 16 | 006cea |             | tests_next_cmd                       
2464:073 | DONE dir | na 16 16 | 006cea | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
2464:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
2464:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
2464:074 | DONE wsp | na 16 16 |        |             |
2464:075 | DONE wsp | na 16 16 |        |             |
2464:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2464:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
2464:078 | DONE wsp | na 16 16 |        |             |
2464:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
2464:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
2464:081 | DONE wsp | na 16 16 |        |             |
2464:082 | DONE lbl | na 16 16 | 006cf9 |             | alphastr                             
2464:083 | DONE dir | na 16 16 | 006cf9 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
2464:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
2464:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
2464:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
2464:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
2464:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
2465:000 | DONE wsp | na 16 16 |        |             |
2466:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2467:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
2468:000 | DONE wsp | na 16 16 |        |             |
2469:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
2470:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
2471:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
2472:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
2473:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
2474:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2475:000 | DONE wsp | na 16 16 |        |             |
2476:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
2477:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2478:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
2479:000 | DONE cmt | na 16 16 |        |             |                 ; xba
2480:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2481:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2482:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
2483:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2484:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
2485:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
2486:000 | DONE wsp | na 16 16 |        |             |
2487:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
2488:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
2489:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
2490:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2491:000 | DONE wsp | na 16 16 |        |             |
2492:000 | DONE wsp | na 16 16 |        |             |
2493:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2494:000 | DONE cmt | na 16 16 |        |             | ; END
2495:000 | DONE wsp | na 16 16 |        |             |
2496:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 00621d
- accept_eol                  : 006215
- accept_loop                 : 0061ca
- accept_nonzero              : 0061bd
- allot_done                  : 00625d
- allot_error                 : 00624c
- allot_minus                 : 006252
- allot_real_gone             : 00625f
- alphastr                    : 006cf9
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006a8d
- cib                         : 00020c
- ciblen                      : 00020e
- co                          : 000004
- compex                      : 006a23
- compex_compile              : 006a5a
- compex_got_name_token       : 006a38
- compex_interpret            : 006a54
- compex_line_done            : 006a68
- compex_loop                 : 006a23
- compile_as_code             : 006286
- compile_as_jump             : 006286
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 0062d4
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 006a15
- dots_done                   : 0063b9
- dots_loop                   : 00639f
- dots_not_empty              : 006399
- dovar                       : 006a0e
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 0063ca
- dump_done                   : 0063df
- dump_line_loop              : 0063c4
- error                       : 006a6f
- es_allot                    : 006b82
- es_channel                  : 006b96
- es_componly                 : 006bb0
- es_defer                    : 006bd1
- es_divzero                  : 006bee
- es_error                    : 006bff
- es_intonly                  : 006c0b
- es_noname                   : 006c21
- es_radix                    : 006c31
- es_refill1                  : 006c48
- es_refill2                  : 006c76
- es_state                    : 006c96
- es_syntax                   : 006cbe
- es_underflow                : 006cae
- execute_ip                  : 00641d
- find-name_all_chars         : 006459
- find-name_char_nomatcnt_8   : 006455
- find-name_chars             : 00644a
- find-name_done              : 00647f
- find-name_failure_16        : 00647c
- find-name_loop              : 006435
- find-name_next_entry        : 00643e
- find-name_success           : 006476
- get_chr                     : 006047
- get_chr_wait                : 00604c
- have_chr?                   : 006056
- hi-end                      : 006b74
- hi-start                    : 006aa9
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- max_drop                    : 0064a3
- max_nip                     : 0064a5
- max_no_ov                   : 0064a1
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 0064b6
- min_nip                     : 0064b8
- min_no_ov                   : 0064b4
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 006a96
- nt_2drop                    : 0069c0
- nt_2dup                     : 006801
- nt_abort                    : 0066d4
- nt_abs                      : 00680d
- nt_accept                   : 006975
- nt_allot                    : 0067d3
- nt_and                      : 0068bb
- nt_base                     : 006776
- nt_bell                     : 006687
- nt_bl                       : 00671d
- nt_bye                      : 006657
- nt_cells                    : 006792
- nt_cold                     : 006662
- nt_colon                    : 0067ca
- nt_comma                    : 00696c
- nt_compilecomma             : 0067b1
- nt_constant                 : 00684b
- nt_count                    : 0066c7
- nt_cr                       : 006713
- nt_create                   : 0067e0
- nt_decimal                  : 006693
- nt_depth                    : 00683e
- nt_dot                      : 006762
- nt_dotparen                 : 00674c
- nt_dots                     : 006742
- nt_drop                     : 006a02
- nt_dump                     : 00667b
- nt_dup                      : 0069f7
- nt_evaluate                 : 006782
- nt_execute                  : 0069a5
- nt_false                    : 0068f6
- nt_fetch                    : 0069d9
- nt_find-name                : 00692a
- nt_here                     : 0069b4
- nt_hex                      : 0066a2
- nt_invert                   : 006898
- nt_leftbracket              : 0067a8
- nt_max                      : 00687f
- nt_min                      : 006874
- nt_minus                    : 0068d0
- nt_name-int                 : 006703
- nt_name-string              : 0067ee
- nt_negate                   : 00688a
- nt_nip                      : 00698f
- nt_one                      : 006918
- nt_one-minus                : 0068e2
- nt_one-plus                 : 0068ec
- nt_or                       : 0068b1
- nt_over                     : 0069cd
- nt_pad                      : 00676b
- nt_page                     : 0066bb
- nt_parse                    : 0066e1
- nt_parse-name               : 006949
- nt_plus                     : 0068d9
- nt_question                 : 0066fa
- nt_quit                     : 0066ee
- nt_refill                   : 00693b
- nt_rightbracket             : 00679f
- nt_rot                      : 00699a
- nt_semicolon                : 0067c1
- nt_source                   : 006830
- nt_source-id                : 00695b
- nt_space                    : 006735
- nt_spaces                   : 006727
- nt_state                    : 006818
- nt_store                    : 0069e2
- nt_swap                     : 0069eb
- nt_tick                     : 00686b
- nt_to-in                    : 006825
- nt_true                     : 006903
- nt_tuck                     : 006983
- nt_two                      : 00690f
- nt_two-star                 : 0068c6
- nt_type                     : 006756
- nt_unused                   : 0066ad
- nt_variable                 : 00685b
- nt_words                    : 00666e
- nt_xor                      : 0068a6
- nt_zero                     : 006921
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 006518
- parse-name_found            : 00652c
- parse-name_loop             : 00650b
- parse_found_delimiter       : 006558
- parse_loop                  : 00654b
- parse_reached_eol           : 00655c
- physicalram                 : 007fff
- piblen                      : 000210
- print_string                : 006a75
- print_string_done           : 006a84
- put_chr                     : 006036
- put_chr_wait                : 00603c
- pw                          : 000008
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 006597
- refill_src_not_kbd          : 00658e
- reset_hardware              : 006000
- s_compiled                  : 006b78
- s_ok                        : 006b74
- spaces_done                 : 0065ca
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- string_to_lowercase         : 006aa8
- tests_next_cmd              : 006cea
- tests_prev_cmd              : 006cd7
- tick_have_nt                : 0061aa
- tick_have_word              : 00619e
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 006608
- type_loop                   : 0065fc
- vt100_home                  : 006cd3
- vt100_page                  : 006cce
- words_loop                  : 006632
- workword                    : 00021e
- xt_2drop                    : 006180
- xt_2dup                     : 006187
- xt_abort                    : 006097
- xt_abs                      : 0061ae
- xt_accept                   : 0061b7
- xt_allot                    : 00623b
- xt_and                      : 006264
- xt_base                     : 00626b
- xt_bell                     : 006273
- xt_bl                       : 00627a
- xt_bye                      : 006282
- xt_cold                     : 006063
- xt_colon                    : 0060f3
- xt_comma                    : 0060e7
- xt_compilecomma             : 006286
- xt_constant                 : 006299
- xt_count                    : 0062b3
- xt_cr                       : 0062c2
- xt_create                   : 0062c9
- xt_decimal                  : 00633c
- xt_depth                    : 006342
- xt_dot                      : 006351
- xt_dotparen                 : 006367
- xt_dots                     : 006375
- xt_drop                     : 0063bd
- xt_dump                     : 0063c2
- xt_dup                      : 0063e9
- xt_evaluate                 : 0063ee
- xt_execute                  : 006420
- xt_fetch                    : 00613f
- xt_find-name                : 00642b
- xt_here                     : 006488
- xt_hex                      : 00648f
- xt_invert                   : 006482
- xt_leftbracket              : 006144
- xt_max                      : 006495
- xt_min                      : 0064a8
- xt_minus                    : 006155
- xt_name-int                 : 0064bb
- xt_name-string              : 0064c4
- xt_negate                   : 0064d5
- xt_nip                      : 0064dc
- xt_one                      : 006168
- xt_one-minus                : 006170
- xt_one-plus                 : 006172
- xt_or                       : 0064df
- xt_over                     : 0064e6
- xt_pad                      : 0064ed
- xt_page                     : 0064f9
- xt_parse                    : 006538
- xt_parse-name               : 006506
- xt_plus                     : 00614d
- xt_question                 : 00612e
- xt_quit                     : 00609f
- xt_refill                   : 00656b
- xt_rightbracket             : 006147
- xt_rot                      : 00659e
- xt_semicolon                : 006115
- xt_source                   : 0065a7
- xt_source-id                : 0065b4
- xt_space                    : 0065bb
- xt_spaces                   : 0065c2
- xt_state                    : 0065cf
- xt_store                    : 006135
- xt_swap                     : 0065d7
- xt_tick                     : 006192
- xt_to-in                    : 0060df
- xt_true                     : 0065dd
- xt_tuck                     : 0065e5
- xt_two                      : 006174
- xt_two-star                 : 00617c
- xt_type                     : 0065ee
- xt_unused                   : 00660f
- xt_variable                 : 00661b
- xt_words                    : 006628
- xt_xor                      : 006650
- xt_zero                     : 006160
- z_2drop                     : 006186
- z_2dup                      : 006191
- z_abort                     : 0060de
- z_abs                       : 0061b6
- z_accept                    : 00623a
- z_allot                     : 006263
- z_and                       : 00626a
- z_base                      : 006272
- z_bell                      : 006279
- z_bl                        : 006281
- z_bye                       : 006285
- z_cold                      : 0060de
- z_colon                     : 006114
- z_comma                     : 0060f2
- z_compilecomma              : 006298
- z_constant                  : 0062b2
- z_count                     : 0062c1
- z_cr                        : 0062c8
- z_create                    : 00633b
- z_decimal                   : 006341
- z_depth                     : 006350
- z_dot                       : 006366
- z_dotparen                  : 006374
- z_dots                      : 0063bc
- z_drop                      : 0063c1
- z_dump                      : 0063e8
- z_dup                       : 0063ed
- z_evaluate                  : 00641c
- z_execute                   : 00642a
- z_fetch                     : 006143
- z_find-name                 : 006481
- z_here                      : 00648e
- z_hex                       : 006494
- z_invert                    : 006487
- z_leftbracket               : 006146
- z_max                       : 0064a7
- z_min                       : 0064ba
- z_minus                     : 00615f
- z_name-int                  : 0064c3
- z_name-string               : 0064d4
- z_negate                    : 0064db
- z_nip                       : 0064de
- z_one                       : 00616f
- z_one-minus                 : 006171
- z_one-plus                  : 006173
- z_or                        : 0064e5
- z_over                      : 0064ec
- z_pad                       : 0064f8
- z_page                      : 006505
- z_parse                     : 00656a
- z_parse-name                : 00656a
- z_plus                      : 006154
- z_question                  : 006134
- z_quit                      : 0060de
- z_refill                    : 00659d
- z_rightbracket              : 00614c
- z_rot                       : 0065a6
- z_semicolon                 : 00612d
- z_source                    : 0065b3
- z_source-id                 : 0065ba
- z_space                     : 0065c1
- z_spaces                    : 0065ce
- z_state                     : 0065d6
- z_store                     : 00613e
- z_swap                      : 0065dc
- z_tick                      : 0061ad
- z_to-in                     : 0060e6
- z_true                      : 0065e4
- z_tuck                      : 0065ed
- z_two                       : 00617b
- z_two-star                  : 00617f
- z_type                      : 00660e
- z_unused                    : 00661a
- z_variable                  : 006627
- z_words                     : 00664f
- z_xor                       : 006656
- z_zero                      : 006167
