A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sat Mar 11 11:25:17 2017
Target MPU: 65816
External files loaded: 5
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.20458 seconds
Code origin: 005000
Bytes of machine code: 8410

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 11. Mar 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE dir | em  8  8 |        |             |         .origin 5000                 start of code to save to built-in RAM
  11:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  12:000 | DONE lbl | em  8  8 | 005000 |             | code0                                ; used to calculate UNUSED
  13:000 | DONE wsp | em  8  8 |        |             |
  14:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  15:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  16:000 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  17:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  17:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  17:003 | DONE cmt | em  8  8 |        |             | ; This version: 05. Mar 2017
  17:004 | DONE wsp | em  8  8 |        |             |
  17:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  17:006 | DONE wsp | em  8  8 |        |             |
  17:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  17:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  17:009 | DONE wsp | em  8  8 |        |             |
  17:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  17:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  17:012 | DONE wsp | em  8  8 |        |             |
  17:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  17:015 | DONE wsp | em  8  8 |        |             |
  17:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  17:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  17:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  17:019 | DONE cmt | em  8  8 |        |             |         ; TODO expose this to the user
  17:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  17:021 | DONE wsp | em  8  8 |        |             |
  17:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP
  17:024 | DONE cmt | em  8  8 |        |             | ; We reuse the memory that the Mensch Monitor had been using
  17:025 | DONE wsp | em  8  8 |        |             |
  17:026 | DONE cmt | em  8  8 |        |             |         ; TODO add any extra RAM in other banks
  17:027 | DONE cmt | em  8  8 |        |             |         ; TODO add stuff for multitasking
  17:028 | DONE wsp | em  8  8 |        |             |
  17:029 | DONE cmt | em  8  8 |        |             |         ;  00:0000  +-------------------+  ram-start, dpage, user0
  17:030 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:031 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Data Stack    |  <-- dsp
  17:032 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:033 | DONE cmt | em  8  8 |        |             |         ;  00:0100  +-------------------+  dsp0, stack
  17:034 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:035 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Return Stack  |  <-- rsp
  17:036 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:037 | DONE cmt | em  8  8 |        |             |         ;  00:0200  +-------------------+  rsp0, buffer, buffer0
  17:038 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:039 | DONE cmt | em  8  8 |        |             |         ;           |  v  Input Buffer  |
  17:040 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:041 | DONE cmt | em  8  8 |        |             |         ;  00:0300  +-------------------+  cp0
  17:042 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:043 | DONE cmt | em  8  8 |        |             |         ;           |  v  Dictionary    |  <-- cp
  17:044 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:045 | DONE cmt | em  8  8 |        |             |         ;   (...)   ~~~~~~~~~~~~~~~~~~~~~
  17:046 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:047 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:048 | DONE cmt | em  8  8 |        |             |         ;  00:7fff  +-------------------+  ram-end
  17:049 | DONE wsp | em  8  8 |        |             |
  17:050 | DONE cmt | em  8  8 |        |             |         ; Hard physical addresses
  17:051 | DONE dir | em  8  8 |        |             |         .equ ram-start  0000         start of installed RAM
  17:052 | DONE dir | em  8  8 |        |             |         .equ ram-end { 8000 - 1 }    end of 32k installed RAM
  17:053 | DONE wsp | em  8  8 |        |             |
  17:054 | DONE cmt | em  8  8 |        |             |         ; Soft physical addresses
  17:055 | DONE dir | em  8  8 |        |             |         .equ dpage      ram-start    direct page:       0000 - 00ff
  17:056 | DONE dir | em  8  8 |        |             |         .equ stack { 000000 + 0100 } return stack area: 0100 - 01ff
  17:057 | DONE dir | em  8  8 |        |             |         .equ buffer0 { stack + 0100 } buffer areas:      0200 - 02ff
  17:058 | DONE wsp | em  8  8 |        |             |
  17:059 | DONE cmt | em  8  8 |        |             |         ; Defined locations
  17:060 | DONE dir | em  8  8 |        |             |         .equ user0      dpage        user and system variables
  17:061 | DONE dir | em  8  8 |        |             |         .equ dsp0 { stack - 1 }      initial Data Stack Pointer:   00ff
  17:062 | DONE dir | em  8  8 |        |             |         .equ stack0 { buffer0 - 1 }  initial Return Stack Pointer: 01ff
  17:063 | DONE wsp | em  8  8 |        |             |
  17:064 | DONE cmt | em  8  8 |        |             |         ; Buffers
  17:065 | DONE dir | em  8  8 |        |             |         .equ bsize      0080         size of input/output buffers
  17:066 | DONE dir | em  8  8 |        |             |         .equ buffer1 { buffer0 + 000080 } output buffer 0280 (UNUSED)
  17:067 | DONE wsp | em  8  8 |        |             |
  17:068 | DONE cmt | em  8  8 |        |             |         ; Dictionary RAM
  17:069 | DONE dir | em  8  8 |        |             |         .equ cp0 { buffer1 + 000080 } Dictionary starts after last buffer
  17:070 | DONE dir | em  8  8 |        |             |         .equ cp-end { code0 - 1 }    Last RAM byte available
  17:071 | DONE wsp | em  8  8 |        |             |
  17:072 | DONE cmt | em  8  8 |        |             |         ; Other locations
  17:073 | DONE dir | em  8  8 |        |             |         .equ padoffset  0ff          offset from CP to PAD (holds number strings)
  17:074 | DONE wsp | em  8  8 |        |             |
  17:075 | DONE wsp | em  8  8 |        |             |
  17:076 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:077 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  17:078 | DONE wsp | em  8  8 |        |             |
  17:079 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  17:080 | DONE cmt | em  8  8 |        |             | ; TODO rewrite with USER variables
  17:081 | DONE dir | em  8  8 |        |             |         .equ cp { 000000 + &00 }     Compiler Pointer, 2 bytes
  17:082 | DONE dir | em  8  8 |        |             |         .equ dp { 000000 + &02 }     Dictionary Pointer, 2 bytes
  17:083 | DONE dir | em  8  8 |        |             |         .equ workword { 000000 + &04 } Currently compiliing word
  17:084 | DONE dir | em  8  8 |        |             |         .equ insrc { 000000 + &06 }  Input Source for SOURCE-ID
  17:085 | DONE dir | em  8  8 |        |             |         .equ cib { 000000 + &08 }    Address of current input buffer
  17:086 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000000 + &10 } Length of current input buffer
  17:087 | DONE dir | em  8  8 |        |             |         .equ toin { 000000 + &12 }   Pointer to CIB (>IN in Forth)
  17:088 | DONE dir | em  8  8 |        |             |         .equ output { 000000 + &14 } Jump target for EMIT
  17:089 | DONE dir | em  8  8 |        |             |         .equ input { 000000 + &16 }  Jump target for KEY
  17:090 | DONE dir | em  8  8 |        |             |         .equ havekey { 000000 + &18 } Jump target for KEY?
  17:091 | DONE dir | em  8  8 |        |             |         .equ state { 000000 + &20 }  STATE: -1 compile, 0 interpret
  17:092 | DONE dir | em  8  8 |        |             |         .equ base { 000000 + &22 }   Radix for number conversion
  17:093 | DONE dir | em  8  8 |        |             |         .equ tohold { 000000 + &24 } Pointer for formatted output
  17:094 | DONE dir | em  8  8 |        |             |         .equ tmpbranch { 000000 + &26 } temp storage for 0BRANCH, BRANCH only
  17:095 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000000 + &28 }   Temporary storage
  17:096 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000000 + &30 }   Temporary storage
  17:097 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000000 + &32 }   Temporary storage
  17:098 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000000 + &34 } Temporary DSP (X) storage, 2 bytes
  17:099 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000000 + &36 } Temporary TOS (Y) storage, 2 bytes
  17:100 | DONE dir | em  8  8 |        |             |         .equ scratch { 000000 + &38 } 8 byte scratchpad (see UM/MOD)
  17:101 | DONE wsp | em  8  8 |        |             |
  17:102 | DONE wsp | em  8  8 |        |             |
  17:103 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:104 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  17:105 | DONE wsp | em  8  8 |        |             |
  17:106 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  17:107 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  17:108 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  17:109 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  17:110 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  17:111 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  17:112 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  17:113 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  17:114 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  17:115 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  17:116 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  17:117 | DONE wsp | em  8  8 |        |             |
  17:118 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  17:119 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  17:120 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  17:121 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  17:122 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE wsp | em  8  8 |        |             |
  19:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  20:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One (very ALPHA) for the crude65816 emulator,
  21:000 | DONE cmt | em  8  8 |        |             | ; and one for the 265sxb board. Only use one. Which ever kernel file is used, it
  22:000 | DONE cmt | em  8  8 |        |             | ; must contain at least the routines put_chr, get_chr and have_chr, which work
  23:000 | DONE cmt | em  8  8 |        |             | ; on the A register
  24:000 | DONE wsp | em  8  8 |        |             |
  25:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  25:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  25:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  25:003 | DONE cmt | em  8  8 |        |             | ; This version: 05. Mar 2017
  25:004 | DONE wsp | em  8  8 |        |             |
  25:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing at the
  25:006 | DONE cmt | em  8  8 |        |             | ; very least the the PUT_CHR, GET_CHR and HAVE_CHR routines that Liara Forth
  25:007 | DONE cmt | em  8  8 |        |             | ; uses. These MUST BE PRESENT. It is in its own section to make porting Forth
  25:008 | DONE cmt | em  8  8 |        |             | ; to other machines easier.
  25:009 | DONE wsp | em  8  8 |        |             |
  25:010 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  25:011 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  25:012 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  25:013 | DONE cmt | em  8  8 |        |             | ; following license:
  25:014 | DONE cmt | em  8  8 |        |             | ;
  25:015 | DONE cmt | em  8  8 |        |             | ;     This work is made available under the terms of the Creative Commons
  25:016 | DONE cmt | em  8  8 |        |             | ;     Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  25:017 | DONE cmt | em  8  8 |        |             | ;     following URL to see the details.
  25:018 | DONE cmt | em  8  8 |        |             | ;     http://creativecommons.org/licenses/by-nc-sa/4.0/
  25:019 | DONE wsp | em  8  8 |        |             |
  25:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  25:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  25:022 | DONE wsp | em  8  8 |        |             |
  25:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  25:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  25:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  25:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  25:027 | DONE wsp | em  8  8 |        |             |
  25:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  25:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  25:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  25:031 | DONE cmt | em  8  8 |        |             | ;
  25:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  25:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  25:034 | DONE wsp | em  8  8 |        |             |
  25:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  25:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  25:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  25:038 | DONE wsp | em  8  8 |        |             |
  25:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  25:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  25:041 | DONE wsp | em  8  8 |        |             |
  25:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  25:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  25:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  25:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  25:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  25:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  25:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  25:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  25:050 | DONE wsp | em  8  8 |        |             |
  25:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  25:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  25:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  25:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  25:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  25:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  25:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  25:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  25:059 | DONE wsp | em  8  8 |        |             |
  25:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  25:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  25:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  25:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  25:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  25:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  25:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  25:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  25:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  25:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  25:070 | DONE wsp | em  8  8 |        |             |
  25:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  25:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  25:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  25:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  25:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  25:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  25:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  25:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  25:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  25:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  25:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  25:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  25:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  25:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  25:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  25:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  25:087 | DONE wsp | em  8  8 |        |             |
  25:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  25:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  25:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  25:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  25:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  25:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  25:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  25:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  25:096 | DONE wsp | em  8  8 |        |             |
  25:097 | DONE wsp | em  8  8 |        |             |
  25:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  25:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  25:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting.
  25:101 | DONE cmt | em  8  8 |        |             | ; Note this does not reset the MPU, which is done by the main Forth code
  25:102 | DONE lbl | em  8  8 | 005000 |             | reset_hardware                       
  25:103 | DONE ins | em  8  8 | 005000 | 78          |                 sei                  
  25:104 | DONE ins | em  8  8 | 005001 | 18          |                 clc                  
  25:105 | DONE ins | em  8  8 | 005002 | fb          |                 xce                  
  25:106 | DONE ctl | na  8  8 |        |             |         .!native
  25:107 | DONE ins | na  8  8 | 005003 | c2 10       |                 rep 10               
  25:108 | DONE ctl | na  8 16 |        |             |         .!xy16
  25:109 | DONE ins | na  8 16 | 005005 | e2 20       |                 sep 20               
  25:110 | DONE ctl | na  8 16 |        |             |         .!a8
  25:111 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  25:112 | DONE ins | na  8 16 | 005007 | a2 ff 01    |                 ldx.# 01ff           
  25:113 | DONE ins | na  8 16 | 00500a | 9a          |                 txs                  
  25:114 | DONE wsp | na  8 16 |        |             |
  25:115 | DONE ins | na  8 16 | 00500b | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  25:116 | DONE wsp | na  8 16 |        |             |
  25:117 | DONE ins | na  8 16 | 00500e | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  25:118 | DONE ins | na  8 16 | 005010 | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  25:119 | DONE ins | na  8 16 | 005013 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  25:120 | DONE wsp | na  8 16 |        |             |
  25:121 | DONE ins | na  8 16 | 005016 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  25:122 | DONE ins | na  8 16 | 005018 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  25:123 | DONE ins | na  8 16 | 00501b | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  25:124 | DONE ins | na  8 16 | 00501d | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  25:125 | DONE ins | na  8 16 | 005020 | a9 00       |                 lda.# .msb 00000b    
  25:126 | DONE ins | na  8 16 | 005022 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  25:127 | DONE ins | na  8 16 | 005025 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  25:128 | DONE ins | na  8 16 | 005027 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  25:129 | DONE wsp | na  8 16 |        |             |
  25:130 | DONE ins | na  8 16 | 00502a | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  25:131 | DONE ins | na  8 16 | 00502c | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  25:132 | DONE wsp | na  8 16 |        |             |
  25:133 | DONE ins | na  8 16 | 00502f | c2 20       |                 rep 20               
  25:134 | DONE ctl | na 16 16 |        |             |         .!a16
  25:135 | DONE ins | na 16 16 | 005031 | 4c 67 50    |                 jmp 005067           we return with A as 8 bits
  25:136 | DONE wsp | na 16 16 |        |             |
  25:137 | DONE wsp | na 16 16 |        |             |
  25:138 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:139 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  25:140 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  25:141 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. This handles all the register size stuff, and does not need to be
  25:142 | DONE cmt | na 16 16 |        |             | ; called with a 8-bit Y register as TOS. This is only called directly by EMIT
  25:143 | DONE cmt | na 16 16 |        |             | ; through the OUTPUT variable. In Forth, this is refered to as UART0
  25:144 | DONE lbl | na 16 16 | 005034 |             | put_chr                              
  25:145 | DONE ins | na 16 16 | 005034 | e2 20       |                 sep 20               
  25:146 | DONE ctl | na  8 16 |        |             |         .!a8
  25:147 | DONE ins | na  8 16 | 005036 | 48          |                 pha                  
  25:148 | DONE ins | na  8 16 | 005037 | a9 02       |                 lda.# 02             (1<<1)
  25:149 | DONE wsp | na  8 16 |        |             |
  25:150 | DONE lbl | na  8 16 | 005039 |             | put_chr_wait                         
  25:151 | DONE ins | na  8 16 | 005039 | 2c 48 df    |                 bit 00df48           timer finished?
  25:152 | DONE ins | na  8 16 | 00503c | f0 fb       |                 beq 005039           
  25:153 | DONE wsp | na  8 16 |        |             |
  25:154 | DONE ins | na  8 16 | 00503e | 68          |                 pla                  
  25:155 | DONE ins | na  8 16 | 00503f | 8d 71 df    |                 sta 00df71           transmit char
  25:156 | DONE ins | na  8 16 | 005042 | c2 20       |                 rep 20               
  25:157 | DONE ctl | na 16 16 |        |             |         .!a16
  25:158 | DONE wsp | na 16 16 |        |             |
  25:159 | DONE ins | na 16 16 | 005044 | 60          |                 rts                  
  25:160 | DONE wsp | na 16 16 |        |             |
  25:161 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:162 | DONE cmt | na 16 16 |        |             | ; GET_CHR
  25:163 | DONE cmt | na 16 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  25:164 | DONE cmt | na 16 16 |        |             | ; if the buffer is empty. This is handled by KEY through the INPUT variable
  25:165 | DONE cmt | na 16 16 |        |             | ; Note the routine returns its value through A - getting it TOS is the caller's
  25:166 | DONE cmt | na 16 16 |        |             | ; problem
  25:167 | DONE lbl | na 16 16 | 005045 |             | get_chr                              
  25:168 | DONE ins | na 16 16 | 005045 | e2 20       |                 sep 20               
  25:169 | DONE ctl | na  8 16 |        |             |         .!a8
  25:170 | DONE ins | na  8 16 | 005047 | a9 01       |                 lda.# 01             (1<<0)
  25:171 | DONE wsp | na  8 16 |        |             |
  25:172 | DONE lbl | na  8 16 | 005049 |             | get_chr_wait                         
  25:173 | DONE ins | na  8 16 | 005049 | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  25:174 | DONE ins | na  8 16 | 00504c | f0 fb       |                 beq 005049           No, keep waiting
  25:175 | DONE ins | na  8 16 | 00504e | ad 71 df    |                 lda 00df71           Yes, read it
  25:176 | DONE ins | na  8 16 | 005051 | c2 20       |                 rep 20               
  25:177 | DONE ctl | na 16 16 |        |             |         .!a16
  25:178 | DONE ins | na 16 16 | 005053 | 29 ff 00    |                 and.# 00ff           paranoid
  25:179 | DONE wsp | na 16 16 |        |             |
  25:180 | DONE ins | na 16 16 | 005056 | 60          |                 rts                  
  25:181 | DONE wsp | na 16 16 |        |             |
  25:182 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:183 | DONE cmt | na 16 16 |        |             | ; HAVE_CHR
  25:184 | DONE cmt | na 16 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  25:185 | DONE cmt | na 16 16 |        |             | ; some. This should be handled by KEY? through the HAVEKEY variable
  25:186 | DONE cmt | na 16 16 |        |             | ; TODO Test this
  25:187 | DONE wsp | na 16 16 |        |             |
  25:188 | DONE lbl | na 16 16 | 005057 |             | have_chr                             
  25:189 | DONE ins | na 16 16 | 005057 | 48          |                 pha                  save caller's A
  25:190 | DONE ins | na 16 16 | 005058 | 08          |                 php                  
  25:191 | DONE ins | na 16 16 | 005059 | e2 20       |                 sep 20               
  25:192 | DONE ctl | na  8 16 |        |             |         .!a8
  25:193 | DONE ins | na  8 16 | 00505b | ad 48 df    |                 lda 00df48           read the status register
  25:194 | DONE ins | na  8 16 | 00505e | 28          |                 plp                  
  25:195 | DONE ins | na  8 16 | 00505f | 6a          |                 ror.a                shift hw_uart0r bit into carry
  25:196 | DONE ins | na  8 16 | 005060 | c2 20       |                 rep 20               
  25:197 | DONE ctl | na 16 16 |        |             |         .!a16
  25:198 | DONE ins | na 16 16 | 005062 | 68          |                 pla                  restore A
  25:199 | DONE ins | na 16 16 | 005063 | 60          |                 rts                  
  25:200 | DONE wsp | na 16 16 |        |             |
  25:201 | DONE cmt | na 16 16 |        |             | ; END
  26:000 | DONE cmt | na 16 16 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  27:000 | DONE wsp | na 16 16 |        |             |
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  30:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  31:000 | DONE wsp | na 16 16 |        |             |
  32:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  33:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  34:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  35:000 | DONE wsp | na 16 16 |        |             |
  36:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  37:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  38:000 | DONE cmt | na 16 16 |        |             | ; Reset the Forth system. Use BYE to return to the Mensch Monitor.
  39:000 | DONE lbl | na 16 16 | 005064 |             | xt_cold                              
  40:000 | DONE wsp | na 16 16 |        |             |
  41:000 | DONE ins | na 16 16 | 005064 | 4c 00 50    |                 jmp 005000           don't use JSR, jump back to start
  42:000 | DONE lbl | na 16 16 | 005067 |             | start                                
  43:000 | DONE dir | na 16 16 |        |             |         .!native                     these should have been handled by hardware reset
  44:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  45:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  46:000 | DONE ins | na 16 16 | 005067 | 78          |                 sei                  
  47:000 | DONE wsp | na 16 16 |        |             |
  48:000 | DONE cmt | na 16 16 |        |             |                 ; Initialize the Return Stack (65816 stack)
  49:000 | DONE ins | na 16 16 | 005068 | a2 ff 01    |                 ldx.# 0001ff         01ff
  50:000 | DONE ins | na 16 16 | 00506b | 9a          |                 txs                  
  51:000 | DONE wsp | na 16 16 |        |             |
  52:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack. This is repeated in ABORT, but we have no
  53:000 | DONE cmt | na 16 16 |        |             |                 ; choice if we want to load high-level words via EVALUATE
  54:000 | DONE ins | na 16 16 | 00506c | a0 00 00    |                 ldy.# 0000           
  55:000 | DONE ins | na 16 16 | 00506f | a2 ff 00    |                 ldx.# 0000ff         
  56:000 | DONE wsp | na 16 16 |        |             |
  57:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  58:000 | DONE ins | na 16 16 | 005072 | a9 0a 00    |                 lda.# 000a           
  59:000 | DONE ins | na 16 16 | 005075 | 85 16       |                 sta.d 000016         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; set the OUTPUT vector to the default, which is always put_chr,
  62:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  63:000 | DONE ins | na 16 16 | 005077 | a9 34 50    |                 lda.# 005034         
  64:000 | DONE ins | na 16 16 | 00507a | 85 0e       |                 sta.d 00000e         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; set the INPUT vector to the default, which is always get_chr,
  67:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  68:000 | DONE ins | na 16 16 | 00507c | a9 45 50    |                 lda.# 005045         
  69:000 | DONE ins | na 16 16 | 00507f | 85 10       |                 sta.d 000010         
  70:000 | DONE wsp | na 16 16 |        |             |
  71:000 | DONE cmt | na 16 16 |        |             |                 ; set the HAVE_KEY vector to the default, which is always
  72:000 | DONE cmt | na 16 16 |        |             |                 ; have_chr, but may have synonyms such as uart0
  73:000 | DONE ins | na 16 16 | 005081 | a9 57 50    |                 lda.# 005057         
  74:000 | DONE ins | na 16 16 | 005084 | 85 12       |                 sta.d 000012         
  75:000 | DONE wsp | na 16 16 |        |             |
  76:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free byte
  77:000 | DONE cmt | na 16 16 |        |             |                 ; in the Dictionary
  78:000 | DONE ins | na 16 16 | 005086 | a9 00 03    |                 lda.# 000300         
  79:000 | DONE ins | na 16 16 | 005089 | 85 00       |                 sta.d 000000         
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE ins | na 16 16 | 00508b | a9 00 02    |                 lda.# 000200         
  82:000 | DONE ins | na 16 16 | 00508e | 85 08       |                 sta.d 000008         input buffer
  83:000 | DONE ins | na 16 16 | 005090 | 64 0a       |                 stz.d 00000a         input buffer starts empty
  84:000 | DONE ins | na 16 16 | 005092 | 64 06       |                 stz.d 000006         SOURCE-ID is zero
  85:000 | DONE ins | na 16 16 | 005094 | 64 14       |                 stz.d 000014         STATE is zero (interpret)
  86:000 | DONE wsp | na 16 16 |        |             |
  87:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  88:000 | DONE cmt | na 16 16 |        |             |                 ; new Dictionary, so we start off the Dictionary Pointer (DP)
  89:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  90:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  91:000 | DONE ins | na 16 16 | 005096 | a9 09 68    |                 lda.# 006809         
  92:000 | DONE ins | na 16 16 | 005099 | 85 02       |                 sta.d 000002         
  93:000 | DONE wsp | na 16 16 |        |             |
  94:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  95:000 | DONE ins | na 16 16 | 00509b | 20 5d 5b    |                 jsr 005b5d           
  96:000 | DONE wsp | na 16 16 |        |             |
  97:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  98:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  99:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
 100:000 | DONE ins | na 16 16 | 00509e | ca          |                 dex                  
 101:000 | DONE ins | na 16 16 | 00509f | ca          |                 dex                  
 102:000 | DONE ins | na 16 16 | 0050a0 | ca          |                 dex                  
 103:000 | DONE ins | na 16 16 | 0050a1 | ca          |                 dex                  
 104:000 | DONE ins | na 16 16 | 0050a2 | a9 1d 69    |                 lda.# 00691d         
 105:000 | DONE ins | na 16 16 | 0050a5 | 95 00       |                 sta.dx 00            Start address goes in NOS
 106:000 | DONE ins | na 16 16 | 0050a7 | a0 0d 06    |                 ldy.# 00060d         length goes in TOS
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE ins | na 16 16 | 0050aa | 20 41 58    |                 jsr 005841           
 109:000 | DONE wsp | na 16 16 |        |             |
 110:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
 111:000 | DONE wsp | na 16 16 |        |             |
 112:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 113:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
 114:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
 115:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 116:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 117:000 | DONE lbl | na 16 16 | 0050ad |             | xt_abort                             
 118:000 | DONE ins | na 16 16 | 0050ad | c2 20       |                 rep 20               
 118:001 | DONE ctl | na 16 16 |        |             |         .!a16
 119:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 120:000 | DONE ins | na 16 16 | 0050af | a0 00 00    |                 ldy.# 0000           
 121:000 | DONE ins | na 16 16 | 0050b2 | a2 ff 00    |                 ldx.# 0000ff         
 122:000 | DONE wsp | na 16 16 |        |             |
 123:000 | DONE wsp | na 16 16 |        |             |
 124:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 127:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 128:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 129:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 130:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 131:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 132:000 | DONE lbl | na 16 16 | 0050b5 |             | xt_quit                              
 133:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 134:000 | DONE ins | na 16 16 | 0050b5 | a9 ff 01    |                 lda.# 0001ff         
 135:000 | DONE ins | na 16 16 | 0050b8 | 1b          |                 tcs                  
 136:000 | DONE wsp | na 16 16 |        |             |
 137:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 138:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 139:000 | DONE ins | na 16 16 | 0050b9 | 9c 70 58    |                 stz 005870           
 140:000 | DONE wsp | na 16 16 |        |             |
 141:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 142:000 | DONE ins | na 16 16 | 0050bc | 64 06       |                 stz.d 000006         
 143:000 | DONE wsp | na 16 16 |        |             |
 144:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 145:000 | DONE ins | na 16 16 | 0050be | 64 14       |                 stz.d 000014         
 146:000 | DONE wsp | na 16 16 |        |             |
 147:000 | DONE lbl | na 16 16 | 0050c0 |             | quit_get_line                        
 148:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer
 149:000 | DONE ins | na 16 16 | 0050c0 | 64 0a       |                 stz.d 00000a         
 150:000 | DONE wsp | na 16 16 |        |             |
 151:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 152:000 | DONE ins | na 16 16 | 0050c2 | 20 31 5c    |                 jsr 005c31           ( -- f )
 153:000 | DONE wsp | na 16 16 |        |             |
 154:000 | DONE ins | na 16 16 | 0050c5 | 98          |                 tya                  force flag test
 155:000 | DONE ins | na 16 16 | 0050c6 | d0 06       |                 bne 0050ce           
 156:000 | DONE wsp | na 16 16 |        |             |
 157:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 158:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 159:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 160:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 161:000 | DONE ins | na 16 16 | 0050c8 | a9 e4 6f    |                 lda.# 006fe4         
 162:000 | DONE ins | na 16 16 | 0050cb | 4c cb 68    |                 jmp 0068cb           
 163:000 | DONE wsp | na 16 16 |        |             |
 164:000 | DONE wsp | na 16 16 |        |             |
 165:000 | DONE lbl | na 16 16 | 0050ce |             | quit_refill_successful               
 166:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 167:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address cib and length of input in ciblen. We
 168:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here still with the TRUE flag from REFILL as TOS (in Y)
 169:000 | DONE ins | na 16 16 | 0050ce | b4 00       |                 ldy.dx 00            drop TOS
 170:000 | DONE ins | na 16 16 | 0050d0 | e8          |                 inx                  
 171:000 | DONE ins | na 16 16 | 0050d1 | e8          |                 inx                  
 172:000 | DONE wsp | na 16 16 |        |             |
 173:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 174:000 | DONE ins | na 16 16 | 0050d2 | 64 0c       |                 stz.d 00000c         
 175:000 | DONE wsp | na 16 16 |        |             |
 176:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 177:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 178:000 | DONE ins | na 16 16 | 0050d4 | 20 46 68    |                 jsr 006846           
 179:000 | DONE wsp | na 16 16 |        |             |
 180:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 181:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 182:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 183:000 | DONE ins | na 16 16 | 0050d7 | e0 00 01    |                 cpx.# 000100         
 184:000 | DONE ins | na 16 16 | 0050da | 90 06       |                 bcc 0050e2           DSP must always be smaller (!) than DSP0
 185:000 | DONE wsp | na 16 16 |        |             |
 186:000 | DONE ins | na 16 16 | 0050dc | a9 4a 70    |                 lda.# 00704a         
 187:000 | DONE ins | na 16 16 | 0050df | 4c cb 68    |                 jmp 0068cb           
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE lbl | na 16 16 | 0050e2 |             | quit_ok                              
 190:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 191:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 192:000 | DONE ins | na 16 16 | 0050e2 | a5 14       |                 lda.d 000014         
 193:000 | DONE ins | na 16 16 | 0050e4 | d0 05       |                 bne 0050eb           
 194:000 | DONE wsp | na 16 16 |        |             |
 195:000 | DONE ins | na 16 16 | 0050e6 | a9 2a 6f    |                 lda.# 006f2a         
 196:000 | DONE ins | na 16 16 | 0050e9 | 80 03       |                 bra 0050ee           
 197:000 | DONE lbl | na 16 16 | 0050eb |             | quit_compiled                        
 198:000 | DONE ins | na 16 16 | 0050eb | a9 2e 6f    |                 lda.# 006f2e         fall through to quit_print
 199:000 | DONE lbl | na 16 16 | 0050ee |             | quit_print                           
 200:000 | DONE ins | na 16 16 | 0050ee | 20 d1 68    |                 jsr 0068d1           
 201:000 | DONE wsp | na 16 16 |        |             |
 202:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 203:000 | DONE ins | na 16 16 | 0050f1 | 4c c0 50    |                 jmp 0050c0           
 204:000 | DONE wsp | na 16 16 |        |             |
 205:000 | DONE lbl | na 16 16 | 0050f4 |             | z_cold                               
 206:000 | DONE lbl | na 16 16 | 0050f4 |             | z_abort                              
 207:000 | DONE lbl | na 16 16 | 0050f4 |             | z_quit                               ; empty, no RTS required
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 210:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 211:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 212:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 213:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 214:000 | DONE lbl | na 16 16 | 0050f4 |             | xt_less                              
 215:000 | DONE ins | na 16 16 | 0050f4 | 98          |                 tya                  
 216:000 | DONE ins | na 16 16 | 0050f5 | a0 00 00    |                 ldy.# 0000           default is false
 217:000 | DONE wsp | na 16 16 |        |             |
 218:000 | DONE ins | na 16 16 | 0050f8 | 38          |                 sec                  
 219:000 | DONE ins | na 16 16 | 0050f9 | f5 00       |                 sbc.dx 00            
 220:000 | DONE ins | na 16 16 | 0050fb | f0 08       |                 beq 005105           the same is not greater
 221:000 | DONE ins | na 16 16 | 0050fd | 50 03       |                 bvc 005102           no overflow, skip ahead
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 224:000 | DONE ins | na 16 16 | 0050ff | 49 00 80    |                 eor.# 8000           compliment negative flag
 225:000 | DONE wsp | na 16 16 |        |             |
 226:000 | DONE lbl | na 16 16 | 005102 |             | less_no_ov                           
 227:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 228:000 | DONE ins | na 16 16 | 005102 | 30 01       |                 bmi 005105           
 229:000 | DONE ins | na 16 16 | 005104 | 88          |                 dey                  
 230:000 | DONE lbl | na 16 16 | 005105 |             | less_nip                             
 231:000 | DONE ins | na 16 16 | 005105 | e8          |                 inx                  
 232:000 | DONE ins | na 16 16 | 005106 | e8          |                 inx                  
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE lbl | na 16 16 | 005107 |             | z_less                               
 234:001 | DONE ins | na 16 16 | 005107 | 60          |                 rts                  
 235:000 | DONE wsp | na 16 16 |        |             |
 236:000 | DONE wsp | na 16 16 |        |             |
 237:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 238:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 239:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 240:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 241:000 | DONE lbl | na 16 16 | 005108 |             | xt_not-equal                         
 242:000 | DONE ins | na 16 16 | 005108 | 98          |                 tya                  
 243:000 | DONE ins | na 16 16 | 005109 | a0 00 00    |                 ldy.# 0000           default value is false
 244:000 | DONE wsp | na 16 16 |        |             |
 245:000 | DONE ins | na 16 16 | 00510c | d5 00       |                 cmp.dx 00            
 246:000 | DONE ins | na 16 16 | 00510e | f0 01       |                 beq 005111           
 247:000 | DONE ins | na 16 16 | 005110 | 88          |                 dey                  wraps to 0FFFF (true)
 248:000 | DONE wsp | na 16 16 |        |             |
 249:000 | DONE lbl | na 16 16 | 005111 |             | not-equal_equal                      ; yes, this is a silly name
 250:000 | DONE ins | na 16 16 | 005111 | e8          |                 inx                  
 251:000 | DONE ins | na 16 16 | 005112 | e8          |                 inx                  
 252:000 | DONE wsp | na 16 16 |        |             |
 253:000 | DONE lbl | na 16 16 | 005113 |             | z_not-equal                          
 253:001 | DONE ins | na 16 16 | 005113 | 60          |                 rts                  
 254:000 | DONE wsp | na 16 16 |        |             |
 255:000 | DONE wsp | na 16 16 |        |             |
 256:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 257:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 258:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 259:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 260:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 261:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 262:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 263:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 264:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 265:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 266:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 267:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 268:000 | DONE cmt | na 16 16 |        |             | ; TODO consider using OUTPUT buffer as a location instead
 269:000 | DONE lbl | na 16 16 | 005114 |             | xt_lessnumber                        
 270:000 | DONE ins | na 16 16 | 005114 | 20 51 5b    |                 jsr 005b51           
 271:000 | DONE ins | na 16 16 | 005117 | 84 18       |                 sty.d 000018         
 272:000 | DONE wsp | na 16 16 |        |             |
 273:000 | DONE ins | na 16 16 | 005119 | b4 00       |                 ldy.dx 00            
 274:000 | DONE ins | na 16 16 | 00511b | e8          |                 inx                  
 275:000 | DONE ins | na 16 16 | 00511c | e8          |                 inx                  
 276:000 | DONE wsp | na 16 16 |        |             |
 277:000 | DONE lbl | na 16 16 | 00511d |             | z_lessnumber                         
 277:001 | DONE ins | na 16 16 | 00511d | 60          |                 rts                  
 278:000 | DONE wsp | na 16 16 |        |             |
 279:000 | DONE wsp | na 16 16 |        |             |
 280:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 281:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 282:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 283:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 284:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 285:000 | DONE lbl | na 16 16 | 00511e |             | xt_greater                           
 286:000 | DONE ins | na 16 16 | 00511e | 98          |                 tya                  
 287:000 | DONE ins | na 16 16 | 00511f | a0 00 00    |                 ldy.# 0000           default is false
 288:000 | DONE wsp | na 16 16 |        |             |
 289:000 | DONE ins | na 16 16 | 005122 | 38          |                 sec                  
 290:000 | DONE ins | na 16 16 | 005123 | f5 00       |                 sbc.dx 00            
 291:000 | DONE ins | na 16 16 | 005125 | f0 08       |                 beq 00512f           the same is not greater
 292:000 | DONE ins | na 16 16 | 005127 | 50 03       |                 bvc 00512c           no overflow, skip ahead
 293:000 | DONE wsp | na 16 16 |        |             |
 294:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 295:000 | DONE ins | na 16 16 | 005129 | 49 00 80    |                 eor.# 8000           compliment negative flag
 296:000 | DONE wsp | na 16 16 |        |             |
 297:000 | DONE lbl | na 16 16 | 00512c |             | greater_no_ov                        
 298:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 299:000 | DONE ins | na 16 16 | 00512c | 10 01       |                 bpl 00512f           
 300:000 | DONE ins | na 16 16 | 00512e | 88          |                 dey                  
 301:000 | DONE lbl | na 16 16 | 00512f |             | greater_nip                          
 302:000 | DONE ins | na 16 16 | 00512f | e8          |                 inx                  
 303:000 | DONE ins | na 16 16 | 005130 | e8          |                 inx                  
 304:000 | DONE wsp | na 16 16 |        |             |
 305:000 | DONE lbl | na 16 16 | 005131 |             | z_greater                            
 305:001 | DONE ins | na 16 16 | 005131 | 60          |                 rts                  
 306:000 | DONE wsp | na 16 16 |        |             |
 307:000 | DONE wsp | na 16 16 |        |             |
 308:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 309:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 310:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 311:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 312:000 | DONE cmt | na 16 16 |        |             | ; after CREATE. This is a difficult word for STC Forths, because most words
 313:000 | DONE cmt | na 16 16 |        |             | ; don't have a Code Field Area (CFA) to skip. We solve this by testing if the
 314:000 | DONE cmt | na 16 16 |        |             | ; first three bytes of the body (that starts at xt) are subroutine jumps to
 315:000 | DONE cmt | na 16 16 |        |             | ; DOVAR, DOCONST or DODOES
 316:000 | DONE lbl | na 16 16 | 005132 |             | xt_tobody                            
 317:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 318:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR
 319:000 | DONE ins | na 16 16 | 005132 | e2 20       |                 sep 20               
 319:001 | DONE ctl | na  8 16 |        |             |         .!a8
 320:000 | DONE ins | na  8 16 | 005134 | b9 00 00    |                 lda.y 0000           see if we have a JSR instruction
 321:000 | DONE ins | na  8 16 | 005137 | c9 20       |                 cmp.# 20             
 322:000 | DONE ins | na  8 16 | 005139 | c2 20       |                 rep 20               
 322:001 | DONE ctl | na 16 16 |        |             |         .!a16
 323:000 | DONE ins | na 16 16 | 00513b | d0 18       |                 bne 005155           
 324:000 | DONE wsp | na 16 16 |        |             |
 325:000 | DONE cmt | na 16 16 |        |             |                 ; Okay, so we found a JSR instruction. But is it one of the
 326:000 | DONE cmt | na 16 16 |        |             |                 ; right ones?
 327:000 | DONE ins | na 16 16 | 00513d | c8          |                 iny                  
 328:000 | DONE ins | na 16 16 | 00513e | b9 00 00    |                 lda.y 0000           
 329:000 | DONE wsp | na 16 16 |        |             |
 330:000 | DONE ins | na 16 16 | 005141 | c9 3f 68    |                 cmp.# 00683f         
 331:000 | DONE ins | na 16 16 | 005144 | f0 0d       |                 beq 005153           
 332:000 | DONE ins | na 16 16 | 005146 | c9 15 68    |                 cmp.# 006815         
 333:000 | DONE ins | na 16 16 | 005149 | f0 08       |                 beq 005153           
 334:000 | DONE ins | na 16 16 | 00514b | c9 32 68    |                 cmp.# 006832         
 335:000 | DONE ins | na 16 16 | 00514e | f0 03       |                 beq 005153           
 336:000 | DONE wsp | na 16 16 |        |             |
 337:000 | DONE cmt | na 16 16 |        |             |                 ; This is some other jump, so we go back to beginning of word
 338:000 | DONE ins | na 16 16 | 005150 | 88          |                 dey                  restor original xt
 339:000 | DONE ins | na 16 16 | 005151 | 80 02       |                 bra 005155           
 340:000 | DONE wsp | na 16 16 |        |             |
 341:000 | DONE lbl | na 16 16 | 005153 |             | tobody_have_cfa                      
 342:000 | DONE cmt | na 16 16 |        |             |                 ; Got the right kind of jump. We've already increased the index
 343:000 | DONE cmt | na 16 16 |        |             |                 ; by one, so we just have to add two
 344:000 | DONE ins | na 16 16 | 005153 | c8          |                 iny                  
 345:000 | DONE ins | na 16 16 | 005154 | c8          |                 iny                  drops through to end
 346:000 | DONE wsp | na 16 16 |        |             |
 347:000 | DONE lbl | na 16 16 | 005155 |             | tobody_nojsr                         
 348:000 | DONE cmt | na 16 16 |        |             |                 ; If we don't have a jump instruction, the xt already points to
 349:000 | DONE cmt | na 16 16 |        |             |                 ; the PFA, because there is no CFA
 350:000 | DONE cmt | na 16 16 |        |             |                 ; body
 351:000 | DONE wsp | na 16 16 |        |             |
 352:000 | DONE lbl | na 16 16 | 005155 |             | z_tobody                             
 352:001 | DONE ins | na 16 16 | 005155 | 60          |                 rts                  
 353:000 | DONE wsp | na 16 16 |        |             |
 354:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 355:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 356:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 357:000 | DONE lbl | na 16 16 | 005156 |             | xt_to-in                             
 358:000 | DONE ins | na 16 16 | 005156 | ca          |                 dex                  
 359:000 | DONE ins | na 16 16 | 005157 | ca          |                 dex                  
 360:000 | DONE ins | na 16 16 | 005158 | 94 00       |                 sty.dx 00            
 361:000 | DONE wsp | na 16 16 |        |             |
 362:000 | DONE ins | na 16 16 | 00515a | a0 0c 00    |                 ldy.# 00000c         >IN
 363:000 | DONE lbl | na 16 16 | 00515d |             | z_to-in                              
 363:001 | DONE ins | na 16 16 | 00515d | 60          |                 rts                  
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 366:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 367:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 368:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 369:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the original
 370:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 371:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 372:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 373:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 374:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 375:000 | DONE lbl | na 16 16 | 00515e |             | xt_tonumber                          
 376:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 377:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 378:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 379:000 | DONE cmt | na 16 16 |        |             |                 ;
 380:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 381:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 382:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 383:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 384:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 385:000 | DONE wsp | na 16 16 |        |             |
 386:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 387:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 388:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 389:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 390:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 391:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 392:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 393:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 394:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 395:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 396:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 397:000 | DONE wsp | na 16 16 |        |             |
 398:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 399:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 400:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 401:000 | DONE ins | na 16 16 | 00515e | b5 04       |                 lda.dx 04            ud-lo
 402:000 | DONE ins | na 16 16 | 005160 | 85 26       |                 sta.d 000026         
 403:000 | DONE ins | na 16 16 | 005162 | b5 02       |                 lda.dx 02            ud-hi
 404:000 | DONE ins | na 16 16 | 005164 | 85 28       |                 sta.d 000028         
 405:000 | DONE wsp | na 16 16 |        |             |
 406:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 407:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 408:000 | DONE ins | na 16 16 | 005166 | ca          |                 dex                  
 409:000 | DONE ins | na 16 16 | 005167 | ca          |                 dex                  
 410:000 | DONE ins | na 16 16 | 005168 | 94 00       |                 sty.dx 00            
 411:000 | DONE wsp | na 16 16 |        |             |
 412:000 | DONE lbl | na 16 16 | 00516a |             | tonumber_loop                        
 413:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 414:000 | DONE ins | na 16 16 | 00516a | a1 02       |                 lda.dxi 02           
 415:000 | DONE ins | na 16 16 | 00516c | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 416:000 | DONE wsp | na 16 16 |        |             |
 417:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 418:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 419:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 420:000 | DONE ins | na 16 16 | 00516d | 20 34 57    |                 jsr 005734           ( char -- n -1 | char 0 )
 421:000 | DONE wsp | na 16 16 |        |             |
 422:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 423:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 424:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 425:000 | DONE ins | na 16 16 | 005170 | 98          |                 tya                  
 426:000 | DONE ins | na 16 16 | 005171 | d0 06       |                 bne 005179           
 427:000 | DONE wsp | na 16 16 |        |             |
 428:000 | DONE ins | na 16 16 | 005173 | b4 00       |                 ldy.dx 00            
 429:000 | DONE ins | na 16 16 | 005175 | e8          |                 inx                  
 430:000 | DONE ins | na 16 16 | 005176 | e8          |                 inx                  
 431:000 | DONE ins | na 16 16 | 005177 | 80 35       |                 bra 0051ae           
 432:000 | DONE wsp | na 16 16 |        |             |
 433:000 | DONE lbl | na 16 16 | 005179 |             | tonumber_ok                          
 434:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 435:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 436:000 | DONE wsp | na 16 16 |        |             |
 437:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 438:000 | DONE ins | na 16 16 | 005179 | b5 00       |                 lda.dx 00            
 439:000 | DONE ins | na 16 16 | 00517b | 85 2a       |                 sta.d 00002a         
 440:000 | DONE wsp | na 16 16 |        |             |
 441:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 442:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 443:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 444:000 | DONE ins | na 16 16 | 00517d | a5 28       |                 lda.d 000028         
 445:000 | DONE ins | na 16 16 | 00517f | 95 00       |                 sta.dx 00            
 446:000 | DONE ins | na 16 16 | 005181 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-hi base )
 447:000 | DONE wsp | na 16 16 |        |             |
 448:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 449:000 | DONE ins | na 16 16 | 005183 | 20 22 5e    |                 jsr 005e22           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 450:000 | DONE wsp | na 16 16 |        |             |
 451:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 452:000 | DONE ins | na 16 16 | 005186 | b5 00       |                 lda.dx 00            ud-hi-lo
 453:000 | DONE ins | na 16 16 | 005188 | 85 2c       |                 sta.d 00002c         
 454:000 | DONE wsp | na 16 16 |        |             |
 455:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 456:000 | DONE ins | na 16 16 | 00518a | a5 26       |                 lda.d 000026         
 457:000 | DONE ins | na 16 16 | 00518c | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 458:000 | DONE ins | na 16 16 | 00518e | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-lo base )
 459:000 | DONE wsp | na 16 16 |        |             |
 460:000 | DONE ins | na 16 16 | 005190 | 20 22 5e    |                 jsr 005e22           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 461:000 | DONE ins | na 16 16 | 005193 | 84 28       |                 sty.d 000028         
 462:000 | DONE ins | na 16 16 | 005195 | b5 00       |                 lda.dx 00            
 463:000 | DONE ins | na 16 16 | 005197 | 85 26       |                 sta.d 000026         
 464:000 | DONE wsp | na 16 16 |        |             |
 465:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 466:000 | DONE ins | na 16 16 | 005199 | a5 26       |                 lda.d 000026         
 467:000 | DONE ins | na 16 16 | 00519b | 18          |                 clc                  
 468:000 | DONE ins | na 16 16 | 00519c | 65 2a       |                 adc.d 00002a         
 469:000 | DONE ins | na 16 16 | 00519e | 85 26       |                 sta.d 000026         this is the new ud-lo
 470:000 | DONE ins | na 16 16 | 0051a0 | a5 28       |                 lda.d 000028         
 471:000 | DONE ins | na 16 16 | 0051a2 | 65 2c       |                 adc.d 00002c         
 472:000 | DONE ins | na 16 16 | 0051a4 | 85 28       |                 sta.d 000028         this is the new ud-hi
 473:000 | DONE wsp | na 16 16 |        |             |
 474:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 475:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 476:000 | DONE ins | na 16 16 | 0051a6 | e8          |                 inx                  
 477:000 | DONE ins | na 16 16 | 0051a7 | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 478:000 | DONE wsp | na 16 16 |        |             |
 479:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 480:000 | DONE ins | na 16 16 | 0051a8 | f6 02       |                 inc.dx 02            increase address
 481:000 | DONE ins | na 16 16 | 0051aa | d6 00       |                 dec.dx 00            decrease length
 482:000 | DONE wsp | na 16 16 |        |             |
 483:000 | DONE ins | na 16 16 | 0051ac | d0 bc       |                 bne 00516a           
 484:000 | DONE wsp | na 16 16 |        |             |
 485:000 | DONE lbl | na 16 16 | 0051ae |             | tonumber_done                        
 486:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 487:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 488:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 489:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 490:000 | DONE ins | na 16 16 | 0051ae | b4 00       |                 ldy.dx 00            
 491:000 | DONE ins | na 16 16 | 0051b0 | e8          |                 inx                  
 492:000 | DONE ins | na 16 16 | 0051b1 | e8          |                 inx                  ( ud-lo ud-hi addr u )
 493:000 | DONE wsp | na 16 16 |        |             |
 494:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 495:000 | DONE ins | na 16 16 | 0051b2 | a5 26       |                 lda.d 000026         new ud-lo
 496:000 | DONE ins | na 16 16 | 0051b4 | 95 04       |                 sta.dx 04            
 497:000 | DONE ins | na 16 16 | 0051b6 | a5 28       |                 lda.d 000028         
 498:000 | DONE ins | na 16 16 | 0051b8 | 95 02       |                 sta.dx 02            new ud-hi
 499:000 | DONE wsp | na 16 16 |        |             |
 500:000 | DONE lbl | na 16 16 | 0051ba |             | z_tonumber                           
 500:001 | DONE ins | na 16 16 | 0051ba | 60          |                 rts                  
 501:000 | DONE wsp | na 16 16 |        |             |
 502:000 | DONE wsp | na 16 16 |        |             |
 503:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 504:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 505:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 506:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 507:000 | DONE lbl | na 16 16 | 0051bb |             | xt_tor                               
 508:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 509:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 510:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 511:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 512:000 | DONE ins | na 16 16 | 0051bb | 68          |                 pla                  
 513:000 | DONE wsp | na 16 16 |        |             |
 514:000 | DONE ins | na 16 16 | 0051bc | 5a          |                 phy                  the actual work
 515:000 | DONE wsp | na 16 16 |        |             |
 516:000 | DONE ins | na 16 16 | 0051bd | b4 00       |                 ldy.dx 00            DROP
 517:000 | DONE ins | na 16 16 | 0051bf | e8          |                 inx                  
 518:000 | DONE ins | na 16 16 | 0051c0 | e8          |                 inx                  
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE ins | na 16 16 | 0051c1 | 48          |                 pha                  put return address back in place
 521:000 | DONE wsp | na 16 16 |        |             |
 522:000 | DONE lbl | na 16 16 | 0051c2 |             | z_tor                                
 522:001 | DONE ins | na 16 16 | 0051c2 | 60          |                 rts                  
 523:000 | DONE wsp | na 16 16 |        |             |
 524:000 | DONE wsp | na 16 16 |        |             |
 525:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 526:000 | DONE cmt | na 16 16 |        |             | ; /STRING ( addr u n -- ) X bytes / X cycles
 527:000 | DONE cmt | na 16 16 |        |             | ; Remove characters from front of string. Uses tmp1
 528:000 | DONE cmt | na 16 16 |        |             | ; Forth version: ROT OVER + ROT ROT - ;
 529:000 | DONE cmt | na 16 16 |        |             | ; TODO check for negative strings so 1 /STRING TYPE won't try to print the whole
 530:000 | DONE cmt | na 16 16 |        |             | ; address space; follow Gforth in failing gracefully
 531:000 | DONE lbl | na 16 16 | 0051c3 |             | xt_slashstring                       
 532:000 | DONE ins | na 16 16 | 0051c3 | 84 1c       |                 sty.d 00001c         
 533:000 | DONE wsp | na 16 16 |        |             |
 534:000 | DONE ins | na 16 16 | 0051c5 | b5 00       |                 lda.dx 00            length
 535:000 | DONE ins | na 16 16 | 0051c7 | 38          |                 sec                  
 536:000 | DONE ins | na 16 16 | 0051c8 | e5 1c       |                 sbc.d 00001c         
 537:000 | DONE ins | na 16 16 | 0051ca | a8          |                 tay                  
 538:000 | DONE wsp | na 16 16 |        |             |
 539:000 | DONE ins | na 16 16 | 0051cb | b5 02       |                 lda.dx 02            address
 540:000 | DONE ins | na 16 16 | 0051cd | 18          |                 clc                  
 541:000 | DONE ins | na 16 16 | 0051ce | 65 1c       |                 adc.d 00001c         
 542:000 | DONE ins | na 16 16 | 0051d0 | 95 02       |                 sta.dx 02            
 543:000 | DONE wsp | na 16 16 |        |             |
 544:000 | DONE ins | na 16 16 | 0051d2 | e8          |                 inx                  
 545:000 | DONE ins | na 16 16 | 0051d3 | e8          |                 inx                  
 546:000 | DONE wsp | na 16 16 |        |             |
 547:000 | DONE lbl | na 16 16 | 0051d4 |             | z_slashstring                        
 547:001 | DONE ins | na 16 16 | 0051d4 | 60          |                 rts                  
 548:000 | DONE wsp | na 16 16 |        |             |
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 551:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 552:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 553:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE   Based on
 554:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth Since this is
 555:000 | DONE cmt | na 16 16 |        |             | ; used interactively, and humans are slow (just ask GlaDOS), we focus on size.
 556:000 | DONE lbl | na 16 16 | 0051d5 |             | xt_dot                               
 557:000 | DONE ins | na 16 16 | 0051d5 | 20 12 58    |                 jsr 005812           ( n n )
 558:000 | DONE ins | na 16 16 | 0051d8 | 20 7c 54    |                 jsr 00547c           ( n n )
 559:000 | DONE ins | na 16 16 | 0051db | 20 63 53    |                 jsr 005363           ( n n 0 )
 560:000 | DONE ins | na 16 16 | 0051de | 20 14 51    |                 jsr 005114           ( n n 0 )
 561:000 | DONE ins | na 16 16 | 0051e1 | 20 b1 52    |                 jsr 0052b1           ( n ud )
 562:000 | DONE ins | na 16 16 | 0051e4 | 20 59 5c    |                 jsr 005c59           ( ud n )
 563:000 | DONE ins | na 16 16 | 0051e7 | 20 bc 5c    |                 jsr 005cbc           ( ud )
 564:000 | DONE ins | na 16 16 | 0051ea | 20 a2 52    |                 jsr 0052a2           
 565:000 | DONE ins | na 16 16 | 0051ed | 20 dd 5d    |                 jsr 005ddd           
 566:000 | DONE ins | na 16 16 | 0051f0 | 20 99 5d    |                 jsr 005d99           
 567:000 | DONE wsp | na 16 16 |        |             |
 568:000 | DONE lbl | na 16 16 | 0051f3 |             | z_dot                                
 568:001 | DONE ins | na 16 16 | 0051f3 | 60          |                 rts                  
 569:000 | DONE wsp | na 16 16 |        |             |
 570:000 | DONE wsp | na 16 16 |        |             |
 571:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 572:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 573:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 574:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 575:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 576:000 | DONE lbl | na 16 16 | 0051f4 |             | xt_dotquote                          
 577:000 | DONE ins | na 16 16 | 0051f4 | ca          |                 dex                  
 578:000 | DONE ins | na 16 16 | 0051f5 | ca          |                 dex                  
 579:000 | DONE ins | na 16 16 | 0051f6 | 94 00       |                 sty.dx 00            
 580:000 | DONE ins | na 16 16 | 0051f8 | a0 22 00    |                 ldy.# 0022           ASCII for "
 581:000 | DONE wsp | na 16 16 |        |             |
 582:000 | DONE ins | na 16 16 | 0051fb | 20 9c 5b    |                 jsr 005b9c           
 583:000 | DONE ins | na 16 16 | 0051fe | 20 ca 5c    |                 jsr 005cca           
 584:000 | DONE wsp | na 16 16 |        |             |
 585:000 | DONE ins | na 16 16 | 005201 | f4 dd 5d    |                 phe.# 005ddd         
 586:000 | DONE ins | na 16 16 | 005204 | 20 aa 68    |                 jsr 0068aa           
 587:000 | DONE wsp | na 16 16 |        |             |
 588:000 | DONE ins | na 16 16 | 005207 | 60          |                 rts                  
 589:000 | DONE lbl | na 16 16 | 005208 |             | z_dotquote                           
 590:000 | DONE wsp | na 16 16 |        |             |
 591:000 | DONE wsp | na 16 16 |        |             |
 592:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 593:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 594:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 595:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 596:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 597:000 | DONE cmt | na 16 16 |        |             | ; content (if present). Uses tmp3
 598:000 | DONE lbl | na 16 16 | 005208 |             | xt_dots                              
 599:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 600:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 601:000 | DONE ins | na 16 16 | 005208 | 20 a9 57    |                 jsr 0057a9           ( -- u)
 602:000 | DONE wsp | na 16 16 |        |             |
 603:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 604:000 | DONE ins | na 16 16 | 00520b | a9 3c 00    |                 lda.# 3c             
 605:000 | DONE ins | na 16 16 | 00520e | 20 1c 58    |                 jsr 00581c           
 606:000 | DONE wsp | na 16 16 |        |             |
 607:000 | DONE cmt | na 16 16 |        |             |                 ; We keep a copy of the number of things on the stack to use as
 608:000 | DONE cmt | na 16 16 |        |             |                 ; a counter further down
 609:000 | DONE ins | na 16 16 | 005211 | ca          |                 dex                  DUP
 610:000 | DONE ins | na 16 16 | 005212 | ca          |                 dex                  
 611:000 | DONE ins | na 16 16 | 005213 | 94 00       |                 sty.dx 00            
 612:000 | DONE wsp | na 16 16 |        |             |
 613:000 | DONE ins | na 16 16 | 005215 | 20 e9 68    |                 jsr 0068e9           print unsigned number
 614:000 | DONE wsp | na 16 16 |        |             |
 615:000 | DONE ins | na 16 16 | 005218 | a9 3e 00    |                 lda.# 3e             
 616:000 | DONE ins | na 16 16 | 00521b | 20 1c 58    |                 jsr 00581c           
 617:000 | DONE ins | na 16 16 | 00521e | 20 99 5d    |                 jsr 005d99           
 618:000 | DONE wsp | na 16 16 |        |             |
 619:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 620:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 621:000 | DONE ins | na 16 16 | 005221 | 98          |                 tya                  force flag test
 622:000 | DONE ins | na 16 16 | 005222 | f0 18       |                 beq 00523c           
 623:000 | DONE wsp | na 16 16 |        |             |
 624:000 | DONE lbl | na 16 16 | 005224 |             | dots_not_empty                       
 625:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 626:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. The
 627:000 | DONE cmt | na 16 16 |        |             |                 ; depth of the Data Stack is in Y waiting to be used as
 628:000 | DONE cmt | na 16 16 |        |             |                 ; a counter. We use this to our advantage.
 629:000 | DONE ins | na 16 16 | 005224 | a9 fb 00    |                 lda.# 0000fb         skip two garbage entries on stack
 630:000 | DONE ins | na 16 16 | 005227 | 85 20       |                 sta.d 000020         use as pointer
 631:000 | DONE wsp | na 16 16 |        |             |
 632:000 | DONE lbl | na 16 16 | 005229 |             | dots_loop                            
 633:000 | DONE ins | na 16 16 | 005229 | b2 20       |                 lda.di 000020        LDA (TMP1)
 634:000 | DONE ins | na 16 16 | 00522b | 5a          |                 phy                  save our counter
 635:000 | DONE ins | na 16 16 | 00522c | a8          |                 tay                  
 636:000 | DONE ins | na 16 16 | 00522d | 20 d5 51    |                 jsr 0051d5           print one number, drops TOS
 637:000 | DONE wsp | na 16 16 |        |             |
 638:000 | DONE ins | na 16 16 | 005230 | ca          |                 dex                  restore counter
 639:000 | DONE ins | na 16 16 | 005231 | ca          |                 dex                  
 640:000 | DONE ins | na 16 16 | 005232 | 94 00       |                 sty.dx 00            
 641:000 | DONE ins | na 16 16 | 005234 | 7a          |                 ply                  
 642:000 | DONE wsp | na 16 16 |        |             |
 643:000 | DONE ins | na 16 16 | 005235 | c6 20       |                 dec.d 000020         next stack entry
 644:000 | DONE ins | na 16 16 | 005237 | c6 20       |                 dec.d 000020         
 645:000 | DONE wsp | na 16 16 |        |             |
 646:000 | DONE ins | na 16 16 | 005239 | 88          |                 dey                  
 647:000 | DONE ins | na 16 16 | 00523a | d0 ed       |                 bne 005229           
 648:000 | DONE wsp | na 16 16 |        |             |
 649:000 | DONE lbl | na 16 16 | 00523c |             | dots_done                            
 650:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. We don't care about speed in this
 651:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 652:000 | DONE ins | na 16 16 | 00523c | 20 ef 57    |                 jsr 0057ef           
 653:000 | DONE wsp | na 16 16 |        |             |
 654:000 | DONE lbl | na 16 16 | 00523f |             | z_dots                               
 654:001 | DONE ins | na 16 16 | 00523f | 60          |                 rts                  
 655:000 | DONE wsp | na 16 16 |        |             |
 656:000 | DONE wsp | na 16 16 |        |             |
 657:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 658:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 659:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 660:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 661:000 | DONE cmt | na 16 16 |        |             | ; aligned
 662:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 663:000 | DONE cmt | na 16 16 |        |             | ;               tya
 664:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 665:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 666:000 | DONE cmt | na 16 16 |        |             | ;               iny
 667:000 | DONE cmt | na 16 16 |        |             | ;               iny
 668:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 669:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 670:000 | DONE cmt | na 16 16 |        |             | ;               inx
 671:000 | DONE cmt | na 16 16 |        |             | ;               inx
 672:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 673:000 | DONE lbl | na 16 16 | 005240 |             | xt_comma                             
 674:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 675:000 | DONE ins | na 16 16 | 005240 | 98          |                 tya                  
 676:000 | DONE ins | na 16 16 | 005241 | 92 00       |                 sta.di 000000        STA (CP)
 677:000 | DONE ins | na 16 16 | 005243 | e6 00       |                 inc.d 000000         
 678:000 | DONE ins | na 16 16 | 005245 | e6 00       |                 inc.d 000000         
 679:000 | DONE wsp | na 16 16 |        |             |
 680:000 | DONE ins | na 16 16 | 005247 | b4 00       |                 ldy.dx 00            
 681:000 | DONE ins | na 16 16 | 005249 | e8          |                 inx                  
 682:000 | DONE ins | na 16 16 | 00524a | e8          |                 inx                  
 683:000 | DONE wsp | na 16 16 |        |             |
 684:000 | DONE lbl | na 16 16 | 00524b |             | z_comma                              
 684:001 | DONE ins | na 16 16 | 00524b | 60          |                 rts                  
 685:000 | DONE wsp | na 16 16 |        |             |
 686:000 | DONE wsp | na 16 16 |        |             |
 687:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 688:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 689:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 690:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 691:000 | DONE lbl | na 16 16 | 00524c |             | xt_colon                             
 692:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 693:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 694:000 | DONE ins | na 16 16 | 00524c | a5 14       |                 lda.d 000014         
 695:000 | DONE ins | na 16 16 | 00524e | f0 06       |                 beq 005256           
 696:000 | DONE wsp | na 16 16 |        |             |
 697:000 | DONE ins | na 16 16 | 005250 | a9 32 70    |                 lda.# 007032         
 698:000 | DONE ins | na 16 16 | 005253 | 4c cb 68    |                 jmp 0068cb           
 699:000 | DONE lbl | na 16 16 | 005256 |             | @                                    
 700:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 701:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 702:000 | DONE ins | na 16 16 | 005256 | e6 14       |                 inc.d 000014         
 703:000 | DONE wsp | na 16 16 |        |             |
 704:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 705:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 706:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 707:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 708:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 709:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 710:000 | DONE ins | na 16 16 | 005258 | a5 02       |                 lda.d 000002         
 711:000 | DONE ins | na 16 16 | 00525a | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 712:000 | DONE wsp | na 16 16 |        |             |
 713:000 | DONE ins | na 16 16 | 00525b | 20 aa 56    |                 jsr 0056aa           
 714:000 | DONE wsp | na 16 16 |        |             |
 715:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 716:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 717:000 | DONE ins | na 16 16 | 00525e | a5 02       |                 lda.d 000002         
 718:000 | DONE ins | na 16 16 | 005260 | 85 04       |                 sta.d 000004         
 719:000 | DONE ins | na 16 16 | 005262 | 68          |                 pla                  
 720:000 | DONE ins | na 16 16 | 005263 | 85 02       |                 sta.d 000002         
 721:000 | DONE wsp | na 16 16 |        |             |
 722:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 723:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 724:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 725:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 726:000 | DONE ins | na 16 16 | 005265 | a5 00       |                 lda.d 000000         
 727:000 | DONE ins | na 16 16 | 005267 | 38          |                 sec                  
 728:000 | DONE ins | na 16 16 | 005268 | e9 03 00    |                 sbc.# 0003           
 729:000 | DONE ins | na 16 16 | 00526b | 85 00       |                 sta.d 000000         
 730:000 | DONE wsp | na 16 16 |        |             |
 731:000 | DONE lbl | na 16 16 | 00526d |             | z_colon                              
 731:001 | DONE ins | na 16 16 | 00526d | 60          |                 rts                  
 732:000 | DONE wsp | na 16 16 |        |             |
 733:000 | DONE wsp | na 16 16 |        |             |
 734:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 735:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 736:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 737:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 738:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 739:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 740:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 741:000 | DONE lbl | na 16 16 | 00526e |             | xt_semicolon                         
 742:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 743:000 | DONE ins | na 16 16 | 00526e | 84 24       |                 sty.d 000024         
 744:000 | DONE wsp | na 16 16 |        |             |
 745:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 746:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 747:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 748:000 | DONE ins | na 16 16 | 005270 | a0 06 00    |                 ldy.# 0006           
 749:000 | DONE ins | na 16 16 | 005273 | a5 00       |                 lda.d 000000         
 750:000 | DONE ins | na 16 16 | 005275 | 91 04       |                 sta.diy 000004       STA (WORKWORD),Y
 751:000 | DONE wsp | na 16 16 |        |             |
 752:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 753:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 754:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 755:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 756:000 | DONE ins | na 16 16 | 005277 | a9 60 00    |                 lda.# 60             opcode for RTS
 757:000 | DONE ins | na 16 16 | 00527a | 92 00       |                 sta.di 000000        STA (CP)
 758:000 | DONE ins | na 16 16 | 00527c | e6 00       |                 inc.d 000000         MSB will be overwritten
 759:000 | DONE wsp | na 16 16 |        |             |
 760:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 761:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 762:000 | DONE ins | na 16 16 | 00527e | a5 04       |                 lda.d 000004         
 763:000 | DONE ins | na 16 16 | 005280 | 85 02       |                 sta.d 000002         
 764:000 | DONE wsp | na 16 16 |        |             |
 765:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 766:000 | DONE ins | na 16 16 | 005282 | a4 24       |                 ldy.d 000024         
 767:000 | DONE wsp | na 16 16 |        |             |
 768:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 769:000 | DONE ins | na 16 16 | 005284 | 64 14       |                 stz.d 000014         
 770:000 | DONE wsp | na 16 16 |        |             |
 771:000 | DONE lbl | na 16 16 | 005286 |             | z_semicolon                          
 771:001 | DONE ins | na 16 16 | 005286 | 60          |                 rts                  
 772:000 | DONE wsp | na 16 16 |        |             |
 773:000 | DONE wsp | na 16 16 |        |             |
 774:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 775:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 776:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 777:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 778:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 779:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 780:000 | DONE lbl | na 16 16 | 005287 |             | xt_hash                              
 781:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 782:000 | DONE ins | na 16 16 | 005287 | 20 83 55    |                 jsr 005583           ( ud addr )
 783:000 | DONE ins | na 16 16 | 00528a | 20 d5 52    |                 jsr 0052d5           ( ud u )
 784:000 | DONE ins | na 16 16 | 00528d | 20 07 5e    |                 jsr 005e07           ( rem ud )
 785:000 | DONE ins | na 16 16 | 005290 | 20 59 5c    |                 jsr 005c59           ( ud rem )
 786:000 | DONE wsp | na 16 16 |        |             |
 787:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 788:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed. Use either abc_str_lower for
 789:000 | DONE cmt | na 16 16 |        |             |                 ; lower case or abc_str_upper for upper case (prefered)
 790:000 | DONE ins | na 16 16 | 005293 | e2 20       |                 sep 20               
 790:001 | DONE ctl | na  8 16 |        |             |         .!a8
 791:000 | DONE ins | na  8 16 | 005295 | b9 b7 70    |                 lda.y 0070b7         
 792:000 | DONE ins | na  8 16 | 005298 | c2 20       |                 rep 20               
 792:001 | DONE ctl | na 16 16 |        |             |         .!a16
 793:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 794:000 | DONE ins | na 16 16 | 00529a | 29 ff 00    |                 and.# 00ff           
 795:000 | DONE ins | na 16 16 | 00529d | a8          |                 tay                  ( ud char )
 796:000 | DONE wsp | na 16 16 |        |             |
 797:000 | DONE ins | na 16 16 | 00529e | 20 b0 59    |                 jsr 0059b0           JSR/RTS
 798:000 | DONE wsp | na 16 16 |        |             |
 799:000 | DONE lbl | na 16 16 | 0052a1 |             | z_hash                               
 799:001 | DONE ins | na 16 16 | 0052a1 | 60          |                 rts                  
 800:000 | DONE wsp | na 16 16 |        |             |
 801:000 | DONE wsp | na 16 16 |        |             |
 802:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 803:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 804:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 805:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 806:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 807:000 | DONE lbl | na 16 16 | 0052a2 |             | xt_numbermore                        
 808:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 809:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 810:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 811:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 812:000 | DONE ins | na 16 16 | 0052a2 | a4 18       |                 ldy.d 000018         
 813:000 | DONE ins | na 16 16 | 0052a4 | 94 00       |                 sty.dx 00            ( addr addr )
 814:000 | DONE wsp | na 16 16 |        |             |
 815:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 816:000 | DONE ins | na 16 16 | 0052a6 | 20 51 5b    |                 jsr 005b51           ( addr addr pad )
 817:000 | DONE wsp | na 16 16 |        |             |
 818:000 | DONE ins | na 16 16 | 0052a9 | 38          |                 sec                  
 819:000 | DONE ins | na 16 16 | 0052aa | 98          |                 tya                  
 820:000 | DONE ins | na 16 16 | 0052ab | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 821:000 | DONE ins | na 16 16 | 0052ad | a8          |                 tay                  ( addr addr n )
 822:000 | DONE wsp | na 16 16 |        |             |
 823:000 | DONE ins | na 16 16 | 0052ae | e8          |                 inx                  NIP
 824:000 | DONE ins | na 16 16 | 0052af | e8          |                 inx                  
 825:000 | DONE wsp | na 16 16 |        |             |
 826:000 | DONE lbl | na 16 16 | 0052b0 |             | z_numbermore                         
 826:001 | DONE ins | na 16 16 | 0052b0 | 60          |                 rts                  
 827:000 | DONE wsp | na 16 16 |        |             |
 828:000 | DONE wsp | na 16 16 |        |             |
 829:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 830:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 831:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 832:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 833:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 834:000 | DONE lbl | na 16 16 | 0052b1 |             | xt_hashs                             
 835:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 836:000 | DONE lbl | na 16 16 | 0052b1 |             | hashs_loop                           
 837:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 838:000 | DONE ins | na 16 16 | 0052b1 | 20 87 52    |                 jsr 005287           ( ud -- ud )
 839:000 | DONE wsp | na 16 16 |        |             |
 840:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 841:000 | DONE ins | na 16 16 | 0052b4 | 98          |                 tya                  
 842:000 | DONE ins | na 16 16 | 0052b5 | 15 00       |                 ora.dx 00            
 843:000 | DONE ins | na 16 16 | 0052b7 | d0 f8       |                 bne 0052b1           
 844:000 | DONE wsp | na 16 16 |        |             |
 845:000 | DONE lbl | na 16 16 | 0052b9 |             | z_hashs                              
 845:001 | DONE ins | na 16 16 | 0052b9 | 60          |                 rts                  
 846:000 | DONE wsp | na 16 16 |        |             |
 847:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 848:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 849:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 850:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 851:000 | DONE lbl | na 16 16 | 0052ba |             | xt_question                          
 852:000 | DONE ins | na 16 16 | 0052ba | 20 d5 52    |                 jsr 0052d5           
 853:000 | DONE ins | na 16 16 | 0052bd | 20 d5 51    |                 jsr 0051d5           
 854:000 | DONE wsp | na 16 16 |        |             |
 855:000 | DONE lbl | na 16 16 | 0052c0 |             | z_question                           
 855:001 | DONE ins | na 16 16 | 0052c0 | 60          |                 rts                  
 856:000 | DONE wsp | na 16 16 |        |             |
 857:000 | DONE wsp | na 16 16 |        |             |
 858:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 859:000 | DONE cmt | na 16 16 |        |             | ; QDUP ( n -- 0 | n n ) X bytes / X cycles
 860:000 | DONE cmt | na 16 16 |        |             | ; If top element on Data Stack is not zero, duplicate it
 861:000 | DONE lbl | na 16 16 | 0052c1 |             | xt_qdup                              
 862:000 | DONE ins | na 16 16 | 0052c1 | 98          |                 tya                  
 863:000 | DONE ins | na 16 16 | 0052c2 | f0 04       |                 beq 0052c8           
 864:000 | DONE wsp | na 16 16 |        |             |
 865:000 | DONE ins | na 16 16 | 0052c4 | ca          |                 dex                  
 866:000 | DONE ins | na 16 16 | 0052c5 | ca          |                 dex                  
 867:000 | DONE ins | na 16 16 | 0052c6 | 94 00       |                 sty.dx 00            
 868:000 | DONE wsp | na 16 16 |        |             |
 869:000 | DONE lbl | na 16 16 | 0052c8 |             | z_qdup                               
 869:001 | DONE ins | na 16 16 | 0052c8 | 60          |                 rts                  
 870:000 | DONE wsp | na 16 16 |        |             |
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 873:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 874:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 875:000 | DONE lbl | na 16 16 | 0052c9 |             | xt_store                             
 876:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 877:000 | DONE ins | na 16 16 | 0052c9 | b5 00       |                 lda.dx 00            NOS has value
 878:000 | DONE ins | na 16 16 | 0052cb | 99 00 00    |                 sta.y 0000           
 879:000 | DONE wsp | na 16 16 |        |             |
 880:000 | DONE ins | na 16 16 | 0052ce | b4 02       |                 ldy.dx 02            
 881:000 | DONE ins | na 16 16 | 0052d0 | e8          |                 inx                  
 882:000 | DONE ins | na 16 16 | 0052d1 | e8          |                 inx                  
 883:000 | DONE ins | na 16 16 | 0052d2 | e8          |                 inx                  
 884:000 | DONE ins | na 16 16 | 0052d3 | e8          |                 inx                  
 885:000 | DONE wsp | na 16 16 |        |             |
 886:000 | DONE lbl | na 16 16 | 0052d4 |             | z_store                              
 886:001 | DONE ins | na 16 16 | 0052d4 | 60          |                 rts                  
 887:000 | DONE wsp | na 16 16 |        |             |
 888:000 | DONE wsp | na 16 16 |        |             |
 889:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 890:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 891:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 892:000 | DONE lbl | na 16 16 | 0052d5 |             | xt_fetch                             
 893:000 | DONE ins | na 16 16 | 0052d5 | b9 00 00    |                 lda.y 0000           
 894:000 | DONE ins | na 16 16 | 0052d8 | a8          |                 tay                  
 895:000 | DONE wsp | na 16 16 |        |             |
 896:000 | DONE lbl | na 16 16 | 0052d9 |             | z_fetch                              
 896:001 | DONE ins | na 16 16 | 0052d9 | 60          |                 rts                  
 897:000 | DONE wsp | na 16 16 |        |             |
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 900:000 | DONE cmt | na 16 16 |        |             | ; (+LOOP) "PARENS-PLUSLOOP" ( n -- ) X bytes / X cycles
 901:000 | DONE cmt | na 16 16 |        |             | ; Runtime compile for counted loop control. This is used for both +LOOP and
 902:000 | DONE cmt | na 16 16 |        |             | ; LOOP which are defined at high level. Note we use a fudge factor for loop
 903:000 | DONE cmt | na 16 16 |        |             | ; control so we can test with the Overflow Flag. See (DO) for details. This is
 904:000 | DONE cmt | na 16 16 |        |             | ; Native Compile. The step value is TOS in the loop
 905:000 | DONE lbl | na 16 16 | 0052da |             | xt_pploop                            
 906:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 907:000 | DONE cmt | na 16 16 |        |             |                 ; add step to index
 908:000 | DONE ins | na 16 16 | 0052da | 98          |                 tya                  step
 909:000 | DONE ins | na 16 16 | 0052db | b8          |                 clv                  this is used for loop control
 910:000 | DONE ins | na 16 16 | 0052dc | 18          |                 clc                  
 911:000 | DONE ins | na 16 16 | 0052dd | 63 03       |                 adc.s 03             add index from top of R
 912:000 | DONE ins | na 16 16 | 0052df | 83 03       |                 sta.s 03             store it back on top of R
 913:000 | DONE wsp | na 16 16 |        |             |
 914:000 | DONE cmt | na 16 16 |        |             |                 ; dump step from TOS
 915:000 | DONE ins | na 16 16 | 0052e1 | b4 00       |                 ldy.dx 00            
 916:000 | DONE ins | na 16 16 | 0052e3 | e8          |                 inx                  
 917:000 | DONE ins | na 16 16 | 0052e4 | e8          |                 inx                  
 918:000 | DONE wsp | na 16 16 |        |             |
 919:000 | DONE cmt | na 16 16 |        |             |                 ; if the V flag is set, we're done looping and continue after
 920:000 | DONE cmt | na 16 16 |        |             |                 ; the +LOOP instruction
 921:000 | DONE ins | na 16 16 | 0052e5 | 70 03       |                 bvs 0052ea           
 922:000 | DONE wsp | na 16 16 |        |             |
 923:000 | DONE lbl | na 16 16 | 0052e7 |             | pploop_jmp                           
 924:000 | DONE cmt | na 16 16 |        |             |                 ; This is why this routine must be natively compiled: We compile
 925:000 | DONE cmt | na 16 16 |        |             |                 ; the opcode for jump here without an address to go to, which is
 926:000 | DONE cmt | na 16 16 |        |             |                 ; added by the next instruction of LOOP (or +LOOP) during
 927:000 | DONE cmt | na 16 16 |        |             |                 ; compile time
 928:000 | DONE dir | na 16 16 | 0052e7 | (1 bytes)   |         .byte 20                     
 928:000 | DONE dir | na 16 16 |        |             |                 20                       --   
 929:000 | DONE wsp | na 16 16 |        |             |
 930:000 | DONE lbl | na 16 16 | 0052e8 |             | z_pploop                             
 930:001 | DONE ins | na 16 16 | 0052e8 | 60          |                 rts                  
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE wsp | na 16 16 |        |             |
 933:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 934:000 | DONE cmt | na 16 16 |        |             | ; (?DO) "PARENS-QUESTION-DO" ( -- ) X bytes / X cycles
 935:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for ?DO. This contains the parts required for the question
 936:000 | DONE cmt | na 16 16 |        |             | ; mark and then drops through to (DO). This must be native compile
 937:000 | DONE lbl | na 16 16 | 0052e9 |             | xt_pqdo                              
 938:000 | DONE cmt | na 16 16 |        |             |                 ; See if TOS and NOS are equal
 939:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to assembler for speed
 940:000 | DONE ins | na 16 16 | 0052e9 | 20 e8 53    |                 jsr 0053e8           
 941:000 | DONE ins | na 16 16 | 0052ec | 20 57 53    |                 jsr 005357           now ( n1 n2 f )
 942:000 | DONE wsp | na 16 16 |        |             |
 943:000 | DONE ins | na 16 16 | 0052ef | a8          |                 tay                  force flag check
 944:000 | DONE ins | na 16 16 | 0052f0 | f0 00       |                 beq 0052f2           
 945:000 | DONE wsp | na 16 16 |        |             |
 946:000 | DONE lbl | na 16 16 | 0052f2 |             | pqdo_done                            
 947:000 | DONE cmt | na 16 16 |        |             |                 ; get ready to drop to (DO)
 948:000 | DONE ins | na 16 16 | 0052f2 | b4 00       |                 ldy.dx 00            drop flag from EQUAL
 949:000 | DONE ins | na 16 16 | 0052f4 | e8          |                 inx                  
 950:000 | DONE ins | na 16 16 | 0052f5 | e8          |                 inx                  drop through to (DO)
 951:000 | DONE wsp | na 16 16 |        |             |
 952:000 | DONE wsp | na 16 16 |        |             |
 953:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 954:000 | DONE cmt | na 16 16 |        |             | ; (DO) "PARENS-DO" ( limit start -- ; R: -- limit start ) X bytes / X cycles
 955:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for DO loop. Note that ANSI loops quit when the boundry of
 956:000 | DONE cmt | na 16 16 |        |             | ; limit-1 and limit is reached, a different mechanism than the FIG Forth loop
 957:000 | DONE cmt | na 16 16 |        |             | ; (you can see which version you have by running a loop with start and limit as
 958:000 | DONE cmt | na 16 16 |        |             | ; the same value, for instance 0 0 DO -- these will walk through the complete
 959:000 | DONE cmt | na 16 16 |        |             | ; number space). This is why there is ?DO, which you should use. We use a "fudge
 960:000 | DONE cmt | na 16 16 |        |             | ; factor" for the limit that makes the Overflow Flag trip when it is reached;
 961:000 | DONE cmt | na 16 16 |        |             | ; see http://forum.6502.org/viewtopic.php?f=9&t=2> for further discussion of
 962:000 | DONE cmt | na 16 16 |        |             | ; this. The source given there for this idea is Laxen & Perry F83. This routine
 963:000 | DONE cmt | na 16 16 |        |             | ; must be native compile (and should be anyway for speed).
 964:000 | DONE lbl | na 16 16 | 0052f6 |             | xt_pdo                               
 965:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 966:000 | DONE cmt | na 16 16 |        |             |                 ; Create fudge factor (fufa) by subtracting the limit from
 967:000 | DONE cmt | na 16 16 |        |             |                 ; $8000, the number that will trip the overflow flag
 968:000 | DONE ins | na 16 16 | 0052f6 | 38          |                 sec                  
 969:000 | DONE ins | na 16 16 | 0052f7 | a9 00 80    |                 lda.# 8000           
 970:000 | DONE ins | na 16 16 | 0052fa | f5 00       |                 sbc.dx 00            limit is NOS
 971:000 | DONE ins | na 16 16 | 0052fc | 95 00       |                 sta.dx 00            save fufa for later use as NOS
 972:000 | DONE ins | na 16 16 | 0052fe | 48          |                 pha                  we use fufa instead of limit on R
 973:000 | DONE wsp | na 16 16 |        |             |
 974:000 | DONE cmt | na 16 16 |        |             |                 ; Index is fufa plus original index
 975:000 | DONE ins | na 16 16 | 0052ff | 18          |                 clc                  
 976:000 | DONE ins | na 16 16 | 005300 | 98          |                 tya                  index is TOS
 977:000 | DONE ins | na 16 16 | 005301 | 75 00       |                 adc.dx 00            add fufa
 978:000 | DONE ins | na 16 16 | 005303 | 48          |                 pha                  
 979:000 | DONE wsp | na 16 16 |        |             |
 980:000 | DONE cmt | na 16 16 |        |             |                 ; clean up
 981:000 | DONE ins | na 16 16 | 005304 | e8          |                 inx                  
 982:000 | DONE ins | na 16 16 | 005305 | e8          |                 inx                  
 983:000 | DONE ins | na 16 16 | 005306 | e8          |                 inx                  
 984:000 | DONE ins | na 16 16 | 005307 | e8          |                 inx                  
 985:000 | DONE wsp | na 16 16 |        |             |
 986:000 | DONE lbl | na 16 16 | 005308 |             | z_pqdo                               
 987:000 | DONE lbl | na 16 16 | 005308 |             | z_pdo                                
 987:001 | DONE ins | na 16 16 | 005308 | 60          |                 rts                  
 988:000 | DONE wsp | na 16 16 |        |             |
 989:000 | DONE wsp | na 16 16 |        |             |
 990:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 991:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 992:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 993:000 | DONE lbl | na 16 16 | 005309 |             | xt_brackettick                       
 994:000 | DONE ins | na 16 16 | 005309 | 20 43 54    |                 jsr 005443           
 995:000 | DONE ins | na 16 16 | 00530c | 4c d6 59    |                 jmp 0059d6           JSR/RTS
 996:000 | DONE lbl | na 16 16 | 00530f |             | z_brackettick                        
 997:000 | DONE wsp | na 16 16 |        |             |
 998:000 | DONE wsp | na 16 16 |        |             |
 999:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1000:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
1001:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
1002:000 | DONE lbl | na 16 16 | 00530f |             | xt_leftbracket                       
1003:000 | DONE ins | na 16 16 | 00530f | 64 14       |                 stz.d 000014         
1004:000 | DONE lbl | na 16 16 | 005311 |             | z_leftbracket                        
1004:001 | DONE ins | na 16 16 | 005311 | 60          |                 rts                  
1005:000 | DONE wsp | na 16 16 |        |             |
1006:000 | DONE wsp | na 16 16 |        |             |
1007:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1008:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
1009:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
1010:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
1011:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
1012:000 | DONE lbl | na 16 16 | 005312 |             | xt_rightbracket                      
1013:000 | DONE ins | na 16 16 | 005312 | a9 01 00    |                 lda.# 0001           
1014:000 | DONE ins | na 16 16 | 005315 | 85 14       |                 sta.d 000014         
1015:000 | DONE wsp | na 16 16 |        |             |
1016:000 | DONE lbl | na 16 16 | 005317 |             | z_rightbracket                       
1016:001 | DONE ins | na 16 16 | 005317 | 60          |                 rts                  
1017:000 | DONE wsp | na 16 16 |        |             |
1018:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1019:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
1020:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
1021:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
1022:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
1023:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
1024:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
1025:000 | DONE lbl | na 16 16 | 005318 |             | xt_bracketchar                       
1026:000 | DONE ins | na 16 16 | 005318 | 20 f2 55    |                 jsr 0055f2           
1027:000 | DONE ins | na 16 16 | 00531b | 20 d6 59    |                 jsr 0059d6           
1028:000 | DONE wsp | na 16 16 |        |             |
1029:000 | DONE lbl | na 16 16 | 00531e |             | z_bracketchar                        
1029:001 | DONE ins | na 16 16 | 00531e | 60          |                 rts                  
1030:000 | DONE wsp | na 16 16 |        |             |
1031:000 | DONE wsp | na 16 16 |        |             |
1032:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1033:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
1034:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
1035:000 | DONE lbl | na 16 16 | 00531f |             | xt_backslash                         
1036:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1037:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
1038:000 | DONE ins | na 16 16 | 00531f | a5 0a       |                 lda.d 00000a         
1039:000 | DONE ins | na 16 16 | 005321 | 85 0c       |                 sta.d 00000c         
1040:000 | DONE wsp | na 16 16 |        |             |
1041:000 | DONE lbl | na 16 16 | 005323 |             | z_backslash                          
1041:001 | DONE ins | na 16 16 | 005323 | 60          |                 rts                  
1042:000 | DONE wsp | na 16 16 |        |             |
1043:000 | DONE wsp | na 16 16 |        |             |
1044:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1045:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
1046:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
1047:000 | DONE lbl | na 16 16 | 005324 |             | xt_plus                              
1048:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1049:000 | DONE ins | na 16 16 | 005324 | 98          |                 tya                  
1050:000 | DONE ins | na 16 16 | 005325 | 18          |                 clc                  
1051:000 | DONE ins | na 16 16 | 005326 | 75 00       |                 adc.dx 00            
1052:000 | DONE ins | na 16 16 | 005328 | a8          |                 tay                  
1053:000 | DONE ins | na 16 16 | 005329 | e8          |                 inx                  
1054:000 | DONE ins | na 16 16 | 00532a | e8          |                 inx                  
1055:000 | DONE wsp | na 16 16 |        |             |
1056:000 | DONE lbl | na 16 16 | 00532b |             | z_plus                               
1056:001 | DONE ins | na 16 16 | 00532b | 60          |                 rts                  
1057:000 | DONE wsp | na 16 16 |        |             |
1058:000 | DONE wsp | na 16 16 |        |             |
1059:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1060:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
1061:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
1062:000 | DONE lbl | na 16 16 | 00532c |             | xt_minus                             
1063:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1064:000 | DONE ins | na 16 16 | 00532c | 98          |                 tya                  
1065:000 | DONE ins | na 16 16 | 00532d | 49 ff ff    |                 eor.# 0ffff          
1066:000 | DONE wsp | na 16 16 |        |             |
1067:000 | DONE ins | na 16 16 | 005330 | 38          |                 sec                  not CLC
1068:000 | DONE ins | na 16 16 | 005331 | 75 00       |                 adc.dx 00            
1069:000 | DONE wsp | na 16 16 |        |             |
1070:000 | DONE ins | na 16 16 | 005333 | a8          |                 tay                  
1071:000 | DONE ins | na 16 16 | 005334 | e8          |                 inx                  
1072:000 | DONE ins | na 16 16 | 005335 | e8          |                 inx                  
1073:000 | DONE wsp | na 16 16 |        |             |
1074:000 | DONE lbl | na 16 16 | 005336 |             | z_minus                              
1074:001 | DONE ins | na 16 16 | 005336 | 60          |                 rts                  
1075:000 | DONE wsp | na 16 16 |        |             |
1076:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1077:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
1078:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
1079:000 | DONE lbl | na 16 16 | 005337 |             | xt_mrot                              
1080:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1081:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1082:000 | DONE ins | na 16 16 | 005337 | b5 02       |                 lda.dx 02            save a
1083:000 | DONE ins | na 16 16 | 005339 | 94 02       |                 sty.dx 02            move c to 3OS
1084:000 | DONE ins | na 16 16 | 00533b | b4 00       |                 ldy.dx 00            move b to TOS
1085:000 | DONE ins | na 16 16 | 00533d | 95 00       |                 sta.dx 00            save a as NOS
1086:000 | DONE wsp | na 16 16 |        |             |
1087:000 | DONE lbl | na 16 16 | 00533f |             | z_mrot                               
1087:001 | DONE ins | na 16 16 | 00533f | 60          |                 rts                  
1088:000 | DONE wsp | na 16 16 |        |             |
1089:000 | DONE wsp | na 16 16 |        |             |
1090:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1091:000 | DONE cmt | na 16 16 |        |             | ; -TRAILING ( addr u -- addr u ) X bytes / X cycles
1092:000 | DONE cmt | na 16 16 |        |             | ; Remove any trailing blanks. Uses tmp3
1093:000 | DONE lbl | na 16 16 | 005340 |             | xt_dtrailing                         
1094:000 | DONE cmt | na 16 16 |        |             |                 ; if u is zero, just return string
1095:000 | DONE ins | na 16 16 | 005340 | 98          |                 tya                  force flag check
1096:000 | DONE ins | na 16 16 | 005341 | f0 13       |                 beq 005356           
1097:000 | DONE wsp | na 16 16 |        |             |
1098:000 | DONE ins | na 16 16 | 005343 | b5 00       |                 lda.dx 00            
1099:000 | DONE ins | na 16 16 | 005345 | 85 20       |                 sta.d 000020         
1100:000 | DONE ins | na 16 16 | 005347 | 88          |                 dey                  convert length to index
1101:000 | DONE ins | na 16 16 | 005348 | e2 20       |                 sep 20               
1101:001 | DONE ctl | na  8 16 |        |             |         .!a8
1102:000 | DONE wsp | na  8 16 |        |             |
1103:000 | DONE lbl | na  8 16 | 00534a |             | dtrailing_loop                       
1104:000 | DONE ins | na  8 16 | 00534a | b1 20       |                 lda.diy 000020       
1105:000 | DONE ins | na  8 16 | 00534c | c9 20       |                 cmp.# 20             
1106:000 | DONE ins | na  8 16 | 00534e | d0 03       |                 bne 005353           
1107:000 | DONE ins | na  8 16 | 005350 | 88          |                 dey                  
1108:000 | DONE ins | na  8 16 | 005351 | 10 f7       |                 bpl 00534a           fall through when done
1109:000 | DONE wsp | na  8 16 |        |             |
1110:000 | DONE lbl | na  8 16 | 005353 |             | dtrailing_done                       
1111:000 | DONE ins | na  8 16 | 005353 | c2 20       |                 rep 20               
1111:001 | DONE ctl | na 16 16 |        |             |         .!a16
1112:000 | DONE ins | na 16 16 | 005355 | c8          |                 iny                  convert index to length
1113:000 | DONE wsp | na 16 16 |        |             |
1114:000 | DONE lbl | na 16 16 | 005356 |             | z_dtrailing                          
1114:001 | DONE ins | na 16 16 | 005356 | 60          |                 rts                  
1115:000 | DONE wsp | na 16 16 |        |             |
1116:000 | DONE wsp | na 16 16 |        |             |
1117:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1118:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
1119:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
1120:000 | DONE lbl | na 16 16 | 005357 |             | xt_equal                             
1121:000 | DONE ins | na 16 16 | 005357 | 98          |                 tya                  
1122:000 | DONE ins | na 16 16 | 005358 | a0 00 00    |                 ldy.# 0000           default value is false
1123:000 | DONE wsp | na 16 16 |        |             |
1124:000 | DONE ins | na 16 16 | 00535b | d5 00       |                 cmp.dx 00            
1125:000 | DONE ins | na 16 16 | 00535d | d0 01       |                 bne 005360           
1126:000 | DONE ins | na 16 16 | 00535f | 88          |                 dey                  wraps to 0FFFF (true)
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE lbl | na 16 16 | 005360 |             | equal_not                            
1129:000 | DONE ins | na 16 16 | 005360 | e8          |                 inx                  
1130:000 | DONE ins | na 16 16 | 005361 | e8          |                 inx                  
1131:000 | DONE wsp | na 16 16 |        |             |
1132:000 | DONE lbl | na 16 16 | 005362 |             | z_equal                              
1132:001 | DONE ins | na 16 16 | 005362 | 60          |                 rts                  
1133:000 | DONE wsp | na 16 16 |        |             |
1134:000 | DONE wsp | na 16 16 |        |             |
1135:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1136:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
1137:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
1138:000 | DONE lbl | na 16 16 | 005363 |             | xt_zero                              
1139:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1140:000 | DONE ins | na 16 16 | 005363 | ca          |                 dex                  
1141:000 | DONE ins | na 16 16 | 005364 | ca          |                 dex                  
1142:000 | DONE ins | na 16 16 | 005365 | 94 00       |                 sty.dx 00            
1143:000 | DONE ins | na 16 16 | 005367 | a0 00 00    |                 ldy.# 0000           
1144:000 | DONE wsp | na 16 16 |        |             |
1145:000 | DONE lbl | na 16 16 | 00536a |             | z_zero                               
1145:001 | DONE ins | na 16 16 | 00536a | 60          |                 rts                  
1146:000 | DONE wsp | na 16 16 |        |             |
1147:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1148:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
1149:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
1150:000 | DONE lbl | na 16 16 | 00536b |             | xt_zero-equal                        
1151:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1152:000 | DONE ins | na 16 16 | 00536b | 98          |                 tya                  force flag check
1153:000 | DONE ins | na 16 16 | 00536c | d0 05       |                 bne 005373           
1154:000 | DONE wsp | na 16 16 |        |             |
1155:000 | DONE ins | na 16 16 | 00536e | a0 ff ff    |                 ldy.# 0ffff          
1156:000 | DONE ins | na 16 16 | 005371 | 80 03       |                 bra 005376           
1157:000 | DONE lbl | na 16 16 | 005373 |             | ze_not_zero                          
1158:000 | DONE ins | na 16 16 | 005373 | a0 00 00    |                 ldy.# 0000           
1159:000 | DONE wsp | na 16 16 |        |             |
1160:000 | DONE lbl | na 16 16 | 005376 |             | z_zero-equal                         
1160:001 | DONE ins | na 16 16 | 005376 | 60          |                 rts                  
1161:000 | DONE wsp | na 16 16 |        |             |
1162:000 | DONE wsp | na 16 16 |        |             |
1163:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1164:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1165:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1166:000 | DONE lbl | na 16 16 | 005377 |             | xt_zero-less                         
1167:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1168:000 | DONE ins | na 16 16 | 005377 | 98          |                 tya                  force flag check
1169:000 | DONE ins | na 16 16 | 005378 | 30 05       |                 bmi 00537f           
1170:000 | DONE wsp | na 16 16 |        |             |
1171:000 | DONE ins | na 16 16 | 00537a | a0 00 00    |                 ldy.# 0000           
1172:000 | DONE ins | na 16 16 | 00537d | 80 03       |                 bra 005382           
1173:000 | DONE wsp | na 16 16 |        |             |
1174:000 | DONE lbl | na 16 16 | 00537f |             | zero-less-is-less                    
1175:000 | DONE ins | na 16 16 | 00537f | a0 ff ff    |                 ldy.# 0ffff          
1176:000 | DONE wsp | na 16 16 |        |             |
1177:000 | DONE lbl | na 16 16 | 005382 |             | z_zero-less                          
1177:001 | DONE ins | na 16 16 | 005382 | 60          |                 rts                  
1178:000 | DONE wsp | na 16 16 |        |             |
1179:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1180:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1181:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1182:000 | DONE lbl | na 16 16 | 005383 |             | xt_zero-notequal                     
1183:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1184:000 | DONE ins | na 16 16 | 005383 | 98          |                 tya                  force flag check
1185:000 | DONE ins | na 16 16 | 005384 | f0 05       |                 beq 00538b           
1186:000 | DONE ins | na 16 16 | 005386 | a0 ff ff    |                 ldy.# 0ffff          
1187:000 | DONE ins | na 16 16 | 005389 | 80 03       |                 bra 00538e           
1188:000 | DONE lbl | na 16 16 | 00538b |             | zne_is_zero                          
1189:000 | DONE ins | na 16 16 | 00538b | a0 00 00    |                 ldy.# 0000           
1190:000 | DONE lbl | na 16 16 | 00538e |             | z_zero-notequal                      
1191:000 | DONE ins | na 16 16 | 00538e | 60          |                 rts                  
1192:000 | DONE wsp | na 16 16 |        |             |
1193:000 | DONE wsp | na 16 16 |        |             |
1194:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1195:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1196:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1197:000 | DONE lbl | na 16 16 | 00538f |             | xt_zero-more                         
1198:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1199:000 | DONE ins | na 16 16 | 00538f | a9 00 00    |                 lda.# 0000           default is false
1200:000 | DONE wsp | na 16 16 |        |             |
1201:000 | DONE ins | na 16 16 | 005392 | 88          |                 dey                  
1202:000 | DONE ins | na 16 16 | 005393 | 10 02       |                 bpl 005397           was at least 1
1203:000 | DONE wsp | na 16 16 |        |             |
1204:000 | DONE ins | na 16 16 | 005395 | 80 01       |                 bra 005398           nope, stays false
1205:000 | DONE wsp | na 16 16 |        |             |
1206:000 | DONE lbl | na 16 16 | 005397 |             | zero-more_true                       
1207:000 | DONE ins | na 16 16 | 005397 | 3a          |                 dec.a                wraps to 0ffff, true
1208:000 | DONE lbl | na 16 16 | 005398 |             | zero-more_done                       
1209:000 | DONE ins | na 16 16 | 005398 | a8          |                 tay                  
1210:000 | DONE wsp | na 16 16 |        |             |
1211:000 | DONE lbl | na 16 16 | 005399 |             | z_zero-more                          
1211:001 | DONE ins | na 16 16 | 005399 | 60          |                 rts                  
1212:000 | DONE wsp | na 16 16 |        |             |
1213:000 | DONE wsp | na 16 16 |        |             |
1214:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1215:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1216:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1217:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1218:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1219:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmpbranch
1220:000 | DONE lbl | na 16 16 | 00539a |             | xt_zbranch                           
1221:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1222:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1223:000 | DONE ins | na 16 16 | 00539a | f4 a1 53    |                 phe.# 0053a1         
1224:000 | DONE ins | na 16 16 | 00539d | 20 aa 68    |                 jsr 0068aa           
1225:000 | DONE wsp | na 16 16 |        |             |
1226:000 | DONE lbl | na 16 16 | 0053a0 |             | z_zbranch                            
1226:001 | DONE ins | na 16 16 | 0053a0 | 60          |                 rts                  
1227:000 | DONE wsp | na 16 16 |        |             |
1228:000 | DONE lbl | na 16 16 | 0053a1 |             | zbranch_rt                           
1229:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1230:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1231:000 | DONE ins | na 16 16 | 0053a1 | 98          |                 tya                  force flag check
1232:000 | DONE ins | na 16 16 | 0053a2 | f0 05       |                 beq 0053a9           flag is false (zero), so we branch
1233:000 | DONE wsp | na 16 16 |        |             |
1234:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1235:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1236:000 | DONE ins | na 16 16 | 0053a4 | 68          |                 pla                  
1237:000 | DONE ins | na 16 16 | 0053a5 | 1a          |                 inc.a                
1238:000 | DONE ins | na 16 16 | 0053a6 | 1a          |                 inc.a                
1239:000 | DONE wsp | na 16 16 |        |             |
1240:000 | DONE ins | na 16 16 | 0053a7 | 80 09       |                 bra 0053b2           
1241:000 | DONE wsp | na 16 16 |        |             |
1242:000 | DONE lbl | na 16 16 | 0053a9 |             | zb_zero                              
1243:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1244:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1245:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1246:000 | DONE ins | na 16 16 | 0053a9 | 68          |                 pla                  
1247:000 | DONE ins | na 16 16 | 0053aa | 85 1a       |                 sta.d 00001a         
1248:000 | DONE ins | na 16 16 | 0053ac | a0 01 00    |                 ldy.# 0001           
1249:000 | DONE ins | na 16 16 | 0053af | b1 1a       |                 lda.diy 00001a       
1250:000 | DONE wsp | na 16 16 |        |             |
1251:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1252:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1253:000 | DONE ins | na 16 16 | 0053b1 | 3a          |                 dec.a                
1254:000 | DONE wsp | na 16 16 |        |             |
1255:000 | DONE lbl | na 16 16 | 0053b2 |             | zb_done                              
1256:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1257:000 | DONE ins | na 16 16 | 0053b2 | 48          |                 pha                  
1258:000 | DONE wsp | na 16 16 |        |             |
1259:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1260:000 | DONE ins | na 16 16 | 0053b3 | b4 00       |                 ldy.dx 00            
1261:000 | DONE ins | na 16 16 | 0053b5 | e8          |                 inx                  
1262:000 | DONE ins | na 16 16 | 0053b6 | e8          |                 inx                  
1263:000 | DONE wsp | na 16 16 |        |             |
1264:000 | DONE ins | na 16 16 | 0053b7 | 60          |                 rts                  
1265:000 | DONE wsp | na 16 16 |        |             |
1266:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1267:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1268:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1269:000 | DONE lbl | na 16 16 | 0053b8 |             | xt_one                               
1270:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1271:000 | DONE ins | na 16 16 | 0053b8 | ca          |                 dex                  
1272:000 | DONE ins | na 16 16 | 0053b9 | ca          |                 dex                  
1273:000 | DONE ins | na 16 16 | 0053ba | 94 00       |                 sty.dx 00            
1274:000 | DONE ins | na 16 16 | 0053bc | a0 01 00    |                 ldy.# 0001           
1275:000 | DONE wsp | na 16 16 |        |             |
1276:000 | DONE lbl | na 16 16 | 0053bf |             | z_one                                
1276:001 | DONE ins | na 16 16 | 0053bf | 60          |                 rts                  
1277:000 | DONE wsp | na 16 16 |        |             |
1278:000 | DONE wsp | na 16 16 |        |             |
1279:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1280:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1281:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1282:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1283:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1284:000 | DONE lbl | na 16 16 | 0053c0 |             | xt_one-minus                         
1285:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1286:000 | DONE ins | na 16 16 | 0053c0 | 88          |                 dey                  
1287:000 | DONE lbl | na 16 16 | 0053c1 |             | z_one-minus                          
1287:001 | DONE ins | na 16 16 | 0053c1 | 60          |                 rts                  
1288:000 | DONE wsp | na 16 16 |        |             |
1289:000 | DONE wsp | na 16 16 |        |             |
1290:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1291:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1292:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1293:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1294:000 | DONE lbl | na 16 16 | 0053c2 |             | xt_one-plus                          
1295:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1296:000 | DONE ins | na 16 16 | 0053c2 | c8          |                 iny                  
1297:000 | DONE lbl | na 16 16 | 0053c3 |             | z_one-plus                           
1297:001 | DONE ins | na 16 16 | 0053c3 | 60          |                 rts                  
1298:000 | DONE wsp | na 16 16 |        |             |
1299:000 | DONE wsp | na 16 16 |        |             |
1300:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1301:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1302:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1303:000 | DONE lbl | na 16 16 | 0053c4 |             | xt_two                               
1304:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1305:000 | DONE ins | na 16 16 | 0053c4 | ca          |                 dex                  
1306:000 | DONE ins | na 16 16 | 0053c5 | ca          |                 dex                  
1307:000 | DONE ins | na 16 16 | 0053c6 | 94 00       |                 sty.dx 00            
1308:000 | DONE ins | na 16 16 | 0053c8 | a0 02 00    |                 ldy.# 0002           
1309:000 | DONE wsp | na 16 16 |        |             |
1310:000 | DONE lbl | na 16 16 | 0053cb |             | z_two                                
1310:001 | DONE ins | na 16 16 | 0053cb | 60          |                 rts                  
1311:000 | DONE wsp | na 16 16 |        |             |
1312:000 | DONE wsp | na 16 16 |        |             |
1313:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1314:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1315:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1316:000 | DONE lbl | na 16 16 | 0053cc |             | xt_two-star                          
1317:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1318:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1319:000 | DONE ins | na 16 16 | 0053cc | 98          |                 tya                  
1320:000 | DONE ins | na 16 16 | 0053cd | 0a          |                 asl.a                
1321:000 | DONE ins | na 16 16 | 0053ce | a8          |                 tay                  
1322:000 | DONE wsp | na 16 16 |        |             |
1323:000 | DONE lbl | na 16 16 | 0053cf |             | z_two-star                           
1323:001 | DONE ins | na 16 16 | 0053cf | 60          |                 rts                  
1324:000 | DONE wsp | na 16 16 |        |             |
1325:000 | DONE wsp | na 16 16 |        |             |
1326:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1327:000 | DONE cmt | na 16 16 |        |             | ; 2>R "TWOTOR" ( n1 n2 -- )(R: -- n1 n2)  X bytes / X cycles
1328:000 | DONE cmt | na 16 16 |        |             | ; Push top two entries to Return Stack. The same as SWAP >R >R except that if we
1329:000 | DONE cmt | na 16 16 |        |             | ; jumped here, the return address will be in the way. May not be natively
1330:000 | DONE cmt | na 16 16 |        |             | ; compiled
1331:000 | DONE cmt | na 16 16 |        |             | ; TODO not coded
1332:000 | DONE lbl | na 16 16 | 0053d0 |             | xt_twotor                            
1333:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1334:000 | DONE ins | na 16 16 | 0053d0 | 68          |                 pla                  
1335:000 | DONE ins | na 16 16 | 0053d1 | 85 20       |                 sta.d 000020         
1336:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1337:000 | DONE wsp | na 16 16 |        |             |
1338:000 | DONE ins | na 16 16 | 0053d3 | b5 00       |                 lda.dx 00            NOS stays next on Return Stack
1339:000 | DONE ins | na 16 16 | 0053d5 | 48          |                 pha                  
1340:000 | DONE ins | na 16 16 | 0053d6 | 5a          |                 phy                  TOS stays on top
1341:000 | DONE wsp | na 16 16 |        |             |
1342:000 | DONE ins | na 16 16 | 0053d7 | b4 02       |                 ldy.dx 02            clean up data stack
1343:000 | DONE ins | na 16 16 | 0053d9 | e8          |                 inx                  
1344:000 | DONE ins | na 16 16 | 0053da | e8          |                 inx                  
1345:000 | DONE ins | na 16 16 | 0053db | e8          |                 inx                  
1346:000 | DONE ins | na 16 16 | 0053dc | e8          |                 inx                  
1347:000 | DONE wsp | na 16 16 |        |             |
1348:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1349:000 | DONE ins | na 16 16 | 0053dd | a5 20       |                 lda.d 000020         
1350:000 | DONE ins | na 16 16 | 0053df | 48          |                 pha                  
1351:000 | DONE wsp | na 16 16 |        |             |
1352:000 | DONE lbl | na 16 16 | 0053e0 |             | z_twotor                             
1352:001 | DONE ins | na 16 16 | 0053e0 | 60          |                 rts                  
1353:000 | DONE wsp | na 16 16 |        |             |
1354:000 | DONE wsp | na 16 16 |        |             |
1355:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1356:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1357:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1358:000 | DONE lbl | na 16 16 | 0053e1 |             | xt_2drop                             
1359:000 | DONE ins | na 16 16 | 0053e1 | b4 02       |                 ldy.dx 02            
1360:000 | DONE ins | na 16 16 | 0053e3 | e8          |                 inx                  
1361:000 | DONE ins | na 16 16 | 0053e4 | e8          |                 inx                  
1362:000 | DONE ins | na 16 16 | 0053e5 | e8          |                 inx                  
1363:000 | DONE ins | na 16 16 | 0053e6 | e8          |                 inx                  
1364:000 | DONE wsp | na 16 16 |        |             |
1365:000 | DONE lbl | na 16 16 | 0053e7 |             | z_2drop                              
1365:001 | DONE ins | na 16 16 | 0053e7 | 60          |                 rts                  
1366:000 | DONE wsp | na 16 16 |        |             |
1367:000 | DONE wsp | na 16 16 |        |             |
1368:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1369:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1370:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1371:000 | DONE wsp | na 16 16 |        |             |
1372:000 | DONE lbl | na 16 16 | 0053e8 |             | xt_2dup                              
1373:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1374:000 | DONE ins | na 16 16 | 0053e8 | ca          |                 dex                  
1375:000 | DONE ins | na 16 16 | 0053e9 | ca          |                 dex                  
1376:000 | DONE ins | na 16 16 | 0053ea | ca          |                 dex                  
1377:000 | DONE ins | na 16 16 | 0053eb | ca          |                 dex                  
1378:000 | DONE ins | na 16 16 | 0053ec | 94 02       |                 sty.dx 02            
1379:000 | DONE ins | na 16 16 | 0053ee | b5 04       |                 lda.dx 04            
1380:000 | DONE ins | na 16 16 | 0053f0 | 95 00       |                 sta.dx 00            
1381:000 | DONE wsp | na 16 16 |        |             |
1382:000 | DONE lbl | na 16 16 | 0053f2 |             | z_2dup                               
1382:001 | DONE ins | na 16 16 | 0053f2 | 60          |                 rts                  
1383:000 | DONE wsp | na 16 16 |        |             |
1384:000 | DONE wsp | na 16 16 |        |             |
1385:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1386:000 | DONE cmt | na 16 16 |        |             | ; 2OVER ( d1 d2 -- d1 d2 d1 ) X bytes / X cycles
1387:000 | DONE cmt | na 16 16 |        |             | ; Copy cell pair that is NOS to TOS
1388:000 | DONE lbl | na 16 16 | 0053f3 |             | xt_2over                             
1389:000 | DONE ins | na 16 16 | 0053f3 | ca          |                 dex                  
1390:000 | DONE ins | na 16 16 | 0053f4 | ca          |                 dex                  
1391:000 | DONE ins | na 16 16 | 0053f5 | ca          |                 dex                  
1392:000 | DONE ins | na 16 16 | 0053f6 | ca          |                 dex                  
1393:000 | DONE ins | na 16 16 | 0053f7 | 94 02       |                 sty.dx 02            
1394:000 | DONE ins | na 16 16 | 0053f9 | b4 06       |                 ldy.dx 06            
1395:000 | DONE ins | na 16 16 | 0053fb | b5 08       |                 lda.dx 08            
1396:000 | DONE ins | na 16 16 | 0053fd | 95 00       |                 sta.dx 00            
1397:000 | DONE wsp | na 16 16 |        |             |
1398:000 | DONE lbl | na 16 16 | 0053ff |             | z_2over                              
1398:001 | DONE ins | na 16 16 | 0053ff | 60          |                 rts                  
1399:000 | DONE wsp | na 16 16 |        |             |
1400:000 | DONE wsp | na 16 16 |        |             |
1401:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1402:000 | DONE cmt | na 16 16 |        |             | ; 2R> "TWOFROMR" ( -- n1 n2 ) ( R: n1 n2 ) X bytes / X cycles
1403:000 | DONE cmt | na 16 16 |        |             | ; Pull top two entries from Return Stack. Is the same as R> R> SWAP
1404:000 | DONE cmt | na 16 16 |        |             | ; As with R>, the problem with the is word is that the top value on the Return
1405:000 | DONE cmt | na 16 16 |        |             | ; Stack for a STC Forth is the return address, which we need to get out of the
1406:000 | DONE cmt | na 16 16 |        |             | ; way first. Uses tmp3
1407:000 | DONE lbl | na 16 16 | 005400 |             | xt_twofromr                          
1408:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1409:000 | DONE ins | na 16 16 | 005400 | 68          |                 pla                  
1410:000 | DONE ins | na 16 16 | 005401 | 85 20       |                 sta.d 000020         
1411:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1412:000 | DONE wsp | na 16 16 |        |             |
1413:000 | DONE ins | na 16 16 | 005403 | ca          |                 dex                  make room on Data Stack
1414:000 | DONE ins | na 16 16 | 005404 | ca          |                 dex                  
1415:000 | DONE ins | na 16 16 | 005405 | ca          |                 dex                  
1416:000 | DONE ins | na 16 16 | 005406 | ca          |                 dex                  
1417:000 | DONE ins | na 16 16 | 005407 | 94 02       |                 sty.dx 02            
1418:000 | DONE wsp | na 16 16 |        |             |
1419:000 | DONE ins | na 16 16 | 005409 | 7a          |                 ply                  top element stays on top
1420:000 | DONE ins | na 16 16 | 00540a | 68          |                 pla                  next element stays below
1421:000 | DONE ins | na 16 16 | 00540b | 95 00       |                 sta.dx 00            
1422:000 | DONE wsp | na 16 16 |        |             |
1423:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1424:000 | DONE cmt | na 16 16 |        |             |                 ; restore return address
1425:000 | DONE ins | na 16 16 | 00540d | a5 20       |                 lda.d 000020         
1426:000 | DONE ins | na 16 16 | 00540f | 48          |                 pha                  
1427:000 | DONE wsp | na 16 16 |        |             |
1428:000 | DONE lbl | na 16 16 | 005410 |             | z_twofromr                           
1428:001 | DONE ins | na 16 16 | 005410 | 60          |                 rts                  
1429:000 | DONE wsp | na 16 16 |        |             |
1430:000 | DONE wsp | na 16 16 |        |             |
1431:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1432:000 | DONE cmt | na 16 16 |        |             | ; 2R@ ( -- n1 n2 )(R: n1 n2 -- n1 n2 )  X bytes / X cycles
1433:000 | DONE cmt | na 16 16 |        |             | ; Copy two words off the Return Stack.  This is R> R> 2DUP >R >R SWAP but we
1434:000 | DONE cmt | na 16 16 |        |             | ; can do this a lot faster in assembler This routine may not be natively
1435:000 | DONE cmt | na 16 16 |        |             | ; compiled; because it accessed by a JSR, the first element on the Return Stack
1436:000 | DONE cmt | na 16 16 |        |             | ; (LDA.S 01) is the return address.
1437:000 | DONE lbl | na 16 16 | 005411 |             | xt_tworfetch                         
1438:000 | DONE cmt | na 16 16 |        |             |                 ; make room on the Data Stack
1439:000 | DONE ins | na 16 16 | 005411 | ca          |                 dex                  
1440:000 | DONE ins | na 16 16 | 005412 | ca          |                 dex                  
1441:000 | DONE ins | na 16 16 | 005413 | ca          |                 dex                  
1442:000 | DONE ins | na 16 16 | 005414 | ca          |                 dex                  
1443:000 | DONE ins | na 16 16 | 005415 | 94 02       |                 sty.dx 02            
1444:000 | DONE wsp | na 16 16 |        |             |
1445:000 | DONE ins | na 16 16 | 005417 | a3 03       |                 lda.s 03             get top of Return Stack
1446:000 | DONE ins | na 16 16 | 005419 | a8          |                 tay                  
1447:000 | DONE ins | na 16 16 | 00541a | a3 05       |                 lda.s 05             get next on Return Stack
1448:000 | DONE ins | na 16 16 | 00541c | 95 00       |                 sta.dx 00            
1449:000 | DONE wsp | na 16 16 |        |             |
1450:000 | DONE lbl | na 16 16 | 00541e |             | z_tworfetch                          
1450:001 | DONE ins | na 16 16 | 00541e | 60          |                 rts                  
1451:000 | DONE wsp | na 16 16 |        |             |
1452:000 | DONE wsp | na 16 16 |        |             |
1453:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1454:000 | DONE cmt | na 16 16 |        |             | ; 2SWAP ( d1 d2 -- d2 d1 ) X bytes / X cycles
1455:000 | DONE cmt | na 16 16 |        |             | ; Swap two double cell numbers on the Data Stack.
1456:000 | DONE lbl | na 16 16 | 00541f |             | xt_2swap                             
1457:000 | DONE ins | na 16 16 | 00541f | 5a          |                 phy                  hi word of TOS
1458:000 | DONE ins | na 16 16 | 005420 | b4 02       |                 ldy.dx 02            hi word of NOS
1459:000 | DONE ins | na 16 16 | 005422 | 68          |                 pla                  
1460:000 | DONE ins | na 16 16 | 005423 | 95 02       |                 sta.dx 02            
1461:000 | DONE wsp | na 16 16 |        |             |
1462:000 | DONE ins | na 16 16 | 005425 | b5 00       |                 lda.dx 00            lo word of TOS
1463:000 | DONE ins | na 16 16 | 005427 | 48          |                 pha                  
1464:000 | DONE ins | na 16 16 | 005428 | b5 04       |                 lda.dx 04            lo word of NOS
1465:000 | DONE ins | na 16 16 | 00542a | 95 00       |                 sta.dx 00            
1466:000 | DONE ins | na 16 16 | 00542c | 68          |                 pla                  
1467:000 | DONE ins | na 16 16 | 00542d | 95 04       |                 sta.dx 04            
1468:000 | DONE wsp | na 16 16 |        |             |
1469:000 | DONE lbl | na 16 16 | 00542f |             | z_2swap                              
1469:001 | DONE ins | na 16 16 | 00542f | 60          |                 rts                  
1470:000 | DONE wsp | na 16 16 |        |             |
1471:000 | DONE wsp | na 16 16 |        |             |
1472:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1473:000 | DONE cmt | na 16 16 |        |             | ; 2VARIABLE ( "name" -- ) X bytes / X cycles
1474:000 | DONE cmt | na 16 16 |        |             | ; Create a variable with space for a double celled word. This can be realized in
1475:000 | DONE cmt | na 16 16 |        |             | ; Forth as either CREATE 2 CELLS ALLOT or just CREATE 0 , 0 ,
1476:000 | DONE cmt | na 16 16 |        |             | ; We use the second variant, letting CREATE do the hard work
1477:000 | DONE cmt | na 16 16 |        |             | ; TODO see if it is faster to use Y as an index and increase by four
1478:000 | DONE lbl | na 16 16 | 005430 |             | xt_2variable                         
1479:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1480:000 | DONE ins | na 16 16 | 005430 | 20 aa 56    |                 jsr 0056aa           
1481:000 | DONE wsp | na 16 16 |        |             |
1482:000 | DONE ins | na 16 16 | 005433 | a9 00 00    |                 lda.# 0000           
1483:000 | DONE ins | na 16 16 | 005436 | 92 00       |                 sta.di 000000        
1484:000 | DONE ins | na 16 16 | 005438 | e6 00       |                 inc.d 000000         
1485:000 | DONE ins | na 16 16 | 00543a | e6 00       |                 inc.d 000000         
1486:000 | DONE ins | na 16 16 | 00543c | 92 00       |                 sta.di 000000        
1487:000 | DONE ins | na 16 16 | 00543e | e6 00       |                 inc.d 000000         
1488:000 | DONE ins | na 16 16 | 005440 | e6 00       |                 inc.d 000000         
1489:000 | DONE wsp | na 16 16 |        |             |
1490:000 | DONE lbl | na 16 16 | 005442 |             | z_2variable                          
1490:001 | DONE ins | na 16 16 | 005442 | 60          |                 rts                  
1491:000 | DONE wsp | na 16 16 |        |             |
1492:000 | DONE wsp | na 16 16 |        |             |
1493:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1494:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1495:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1496:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1497:000 | DONE lbl | na 16 16 | 005443 |             | xt_tick                              
1498:000 | DONE ins | na 16 16 | 005443 | 20 6a 5b    |                 jsr 005b6a           ( -- addr u )
1499:000 | DONE wsp | na 16 16 |        |             |
1500:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1501:000 | DONE ins | na 16 16 | 005446 | 98          |                 tya                  force flag check
1502:000 | DONE ins | na 16 16 | 005447 | d0 06       |                 bne 00544f           
1503:000 | DONE wsp | na 16 16 |        |             |
1504:000 | DONE ins | na 16 16 | 005449 | a9 bd 6f    |                 lda.# 006fbd         
1505:000 | DONE ins | na 16 16 | 00544c | 4c cb 68    |                 jmp 0068cb           
1506:000 | DONE wsp | na 16 16 |        |             |
1507:000 | DONE lbl | na 16 16 | 00544f |             | tick_have_word                       
1508:000 | DONE ins | na 16 16 | 00544f | 20 ae 58    |                 jsr 0058ae           ( addr u -- nt)
1509:000 | DONE ins | na 16 16 | 005452 | 98          |                 tya                  force flag check
1510:000 | DONE wsp | na 16 16 |        |             |
1511:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1512:000 | DONE ins | na 16 16 | 005453 | d0 06       |                 bne 00545b           
1513:000 | DONE wsp | na 16 16 |        |             |
1514:000 | DONE ins | na 16 16 | 005455 | a9 5a 70    |                 lda.# 00705a         
1515:000 | DONE ins | na 16 16 | 005458 | 4c cb 68    |                 jmp 0068cb           
1516:000 | DONE wsp | na 16 16 |        |             |
1517:000 | DONE lbl | na 16 16 | 00545b |             | tick_have_nt                         
1518:000 | DONE ins | na 16 16 | 00545b | 20 8a 5a    |                 jsr 005a8a           ( nt -- xt )
1519:000 | DONE wsp | na 16 16 |        |             |
1520:000 | DONE lbl | na 16 16 | 00545e |             | z_tick                               
1520:001 | DONE ins | na 16 16 | 00545e | 60          |                 rts                  
1521:000 | DONE wsp | na 16 16 |        |             |
1522:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1523:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1524:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1525:000 | DONE lbl | na 16 16 | 00545f |             | xt_abortq                            
1526:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1527:000 | DONE ins | na 16 16 | 00545f | 20 76 5c    |                 jsr 005c76           save string
1528:000 | DONE wsp | na 16 16 |        |             |
1529:000 | DONE ins | na 16 16 | 005462 | f4 69 54    |                 phe.# 005469         compile run-time aspect
1530:000 | DONE ins | na 16 16 | 005465 | 20 aa 68    |                 jsr 0068aa           
1531:000 | DONE wsp | na 16 16 |        |             |
1532:000 | DONE ins | na 16 16 | 005468 | 60          |                 rts                  
1533:000 | DONE wsp | na 16 16 |        |             |
1534:000 | DONE lbl | na 16 16 | 005469 |             | abortq_rt                            
1535:000 | DONE cmt | na 16 16 |        |             |                 ; we land here with ( f addr u )
1536:000 | DONE ins | na 16 16 | 005469 | b5 02       |                 lda.dx 02            get flag as 3OS
1537:000 | DONE ins | na 16 16 | 00546b | f0 06       |                 beq 005473           if FALSE, we're done
1538:000 | DONE wsp | na 16 16 |        |             |
1539:000 | DONE cmt | na 16 16 |        |             |                 ; if TRUE, we print string and ABORT
1540:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we want to inform user we're aborting
1541:000 | DONE ins | na 16 16 | 00546d | 20 dd 5d    |                 jsr 005ddd           
1542:000 | DONE ins | na 16 16 | 005470 | 4c ad 50    |                 jmp 0050ad           not JSR because we never come back
1543:000 | DONE wsp | na 16 16 |        |             |
1544:000 | DONE lbl | na 16 16 | 005473 |             | abortq_done                          
1545:000 | DONE cmt | na 16 16 |        |             |                 ; drop the three entries from the Data Stack
1546:000 | DONE ins | na 16 16 | 005473 | b4 04       |                 ldy.dx 04            fourth on the stack
1547:000 | DONE wsp | na 16 16 |        |             |
1548:000 | DONE cmt | na 16 16 |        |             |                 ; this is the same size, but three cycles faster than six INX
1549:000 | DONE cmt | na 16 16 |        |             |                 ; instructions
1550:000 | DONE ins | na 16 16 | 005475 | 8a          |                 txa                  
1551:000 | DONE ins | na 16 16 | 005476 | 18          |                 clc                  
1552:000 | DONE ins | na 16 16 | 005477 | 69 06 00    |                 adc.# 0006           
1553:000 | DONE ins | na 16 16 | 00547a | aa          |                 tax                  
1554:000 | DONE wsp | na 16 16 |        |             |
1555:000 | DONE lbl | na 16 16 | 00547b |             | z_abortq                             
1555:001 | DONE ins | na 16 16 | 00547b | 60          |                 rts                  
1556:000 | DONE wsp | na 16 16 |        |             |
1557:000 | DONE wsp | na 16 16 |        |             |
1558:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1559:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1560:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1561:000 | DONE lbl | na 16 16 | 00547c |             | xt_abs                               
1562:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1563:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1564:000 | DONE ins | na 16 16 | 00547c | 98          |                 tya                  force flag test
1565:000 | DONE ins | na 16 16 | 00547d | 10 05       |                 bpl 005484           positive number is easy
1566:000 | DONE wsp | na 16 16 |        |             |
1567:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1568:000 | DONE ins | na 16 16 | 00547f | 49 ff ff    |                 eor.# 0ffff          
1569:000 | DONE ins | na 16 16 | 005482 | 1a          |                 inc.a                
1570:000 | DONE ins | na 16 16 | 005483 | a8          |                 tay                  
1571:000 | DONE wsp | na 16 16 |        |             |
1572:000 | DONE lbl | na 16 16 | 005484 |             | z_abs                                
1572:001 | DONE ins | na 16 16 | 005484 | 60          |                 rts                  
1573:000 | DONE wsp | na 16 16 |        |             |
1574:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1575:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1576:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1577:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1578:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1579:000 | DONE wsp | na 16 16 |        |             |
1580:000 | DONE cmt | na 16 16 |        |             | ; Though we're dealing with individual characters, all these actions are
1581:000 | DONE cmt | na 16 16 |        |             | ; performed with a 16 bit A register. The only place we switch is in the kernel
1582:000 | DONE cmt | na 16 16 |        |             | ; routines themselves
1583:000 | DONE lbl | na 16 16 | 005485 |             | xt_accept                            
1584:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1585:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1586:000 | DONE ins | na 16 16 | 005485 | 98          |                 tya                  force flag test
1587:000 | DONE ins | na 16 16 | 005486 | d0 03       |                 bne 00548b           
1588:000 | DONE wsp | na 16 16 |        |             |
1589:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1590:000 | DONE ins | na 16 16 | 005488 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1591:000 | DONE ins | na 16 16 | 005489 | e8          |                 inx                  
1592:000 | DONE wsp | na 16 16 |        |             |
1593:000 | DONE ins | na 16 16 | 00548a | 60          |                 rts                  
1594:000 | DONE wsp | na 16 16 |        |             |
1595:000 | DONE lbl | na 16 16 | 00548b |             | accept_nonzero                       
1596:000 | DONE ins | na 16 16 | 00548b | b5 00       |                 lda.dx 00            address of buffer is NOS
1597:000 | DONE ins | na 16 16 | 00548d | 85 1c       |                 sta.d 00001c         
1598:000 | DONE ins | na 16 16 | 00548f | e8          |                 inx                  NIP
1599:000 | DONE ins | na 16 16 | 005490 | e8          |                 inx                  
1600:000 | DONE wsp | na 16 16 |        |             |
1601:000 | DONE ins | na 16 16 | 005491 | 84 1e       |                 sty.d 00001e         Save max number of chars in tmp2
1602:000 | DONE ins | na 16 16 | 005493 | a0 00 00    |                 ldy.# 0000           Use Y as counter
1603:000 | DONE wsp | na 16 16 |        |             |
1604:000 | DONE lbl | na 16 16 | 005496 |             | accept_loop                          
1605:000 | DONE cmt | na 16 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1606:000 | DONE cmt | na 16 16 |        |             |                 ; clears the screen automatically
1607:000 | DONE wsp | na 16 16 |        |             |
1608:000 | DONE cmt | na 16 16 |        |             |                 ; This is a rolled-out version of KEY so we don't spend time
1609:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around wit the stack
1610:000 | DONE ins | na 16 16 | 005496 | 8e 22 00    |                 stx 000022           
1611:000 | DONE ins | na 16 16 | 005499 | a2 00 00    |                 ldx.# 0000           
1612:000 | DONE ins | na 16 16 | 00549c | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X)
1613:000 | DONE ins | na 16 16 | 00549f | a6 22       |                 ldx.d 000022         
1614:000 | DONE wsp | na 16 16 |        |             |
1615:000 | DONE cmt | na 16 16 |        |             |                 ; we quit on both line feed and carriage return
1616:000 | DONE ins | na 16 16 | 0054a1 | c9 0a 00    |                 cmp.# AscLF          
1617:000 | DONE ins | na 16 16 | 0054a4 | f0 43       |                 beq 0054e9           
1618:000 | DONE ins | na 16 16 | 0054a6 | c9 0d 00    |                 cmp.# AscCR          
1619:000 | DONE ins | na 16 16 | 0054a9 | f0 3e       |                 beq 0054e9           
1620:000 | DONE wsp | na 16 16 |        |             |
1621:000 | DONE cmt | na 16 16 |        |             |                 ; BS and DEL do the same thing for the moment
1622:000 | DONE ins | na 16 16 | 0054ab | c9 08 00    |                 cmp.# AscBS          
1623:000 | DONE ins | na 16 16 | 0054ae | f0 3f       |                 beq 0054ef           
1624:000 | DONE ins | na 16 16 | 0054b0 | c9 7f 00    |                 cmp.# AscDEL         
1625:000 | DONE ins | na 16 16 | 0054b3 | f0 3a       |                 beq 0054ef           
1626:000 | DONE wsp | na 16 16 |        |             |
1627:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1628:000 | DONE ins | na 16 16 | 0054b5 | c9 03 00    |                 cmp.# AscCC          
1629:000 | DONE ins | na 16 16 | 0054b8 | d0 03       |                 bne 0054bd           
1630:000 | DONE ins | na 16 16 | 0054ba | 4c ad 50    |                 jmp 0050ad           
1631:000 | DONE lbl | na 16 16 | 0054bd |             | @                                    
1632:000 | DONE ins | na 16 16 | 0054bd | c9 1b 00    |                 cmp.# AscESC         
1633:000 | DONE ins | na 16 16 | 0054c0 | d0 03       |                 bne 0054c5           
1634:000 | DONE ins | na 16 16 | 0054c2 | 4c ad 50    |                 jmp 0050ad           
1635:000 | DONE lbl | na 16 16 | 0054c5 |             | @                                    
1636:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1637:000 | DONE ins | na 16 16 | 0054c5 | c9 10 00    |                 cmp.# AscCP          
1638:000 | DONE ins | na 16 16 | 0054c8 | d0 08       |                 bne 0054d2           
1639:000 | DONE wsp | na 16 16 |        |             |
1640:000 | DONE ins | na 16 16 | 0054ca | a9 72 70    |                 lda.# 007072         
1641:000 | DONE ins | na 16 16 | 0054cd | 20 d1 68    |                 jsr 0068d1           
1642:000 | DONE wsp | na 16 16 |        |             |
1643:000 | DONE ins | na 16 16 | 0054d0 | 80 c4       |                 bra 005496           
1644:000 | DONE lbl | na 16 16 | 0054d2 |             | @                                    
1645:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1646:000 | DONE ins | na 16 16 | 0054d2 | c9 0e 00    |                 cmp.# AscCN          
1647:000 | DONE ins | na 16 16 | 0054d5 | d0 08       |                 bne 0054df           
1648:000 | DONE wsp | na 16 16 |        |             |
1649:000 | DONE ins | na 16 16 | 0054d7 | a9 85 70    |                 lda.# 007085         
1650:000 | DONE ins | na 16 16 | 0054da | 20 d1 68    |                 jsr 0068d1           
1651:000 | DONE wsp | na 16 16 |        |             |
1652:000 | DONE ins | na 16 16 | 0054dd | 80 b7       |                 bra 005496           
1653:000 | DONE wsp | na 16 16 |        |             |
1654:000 | DONE lbl | na 16 16 | 0054df |             | @                                    
1655:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough, echo character. EMIT_A sidesteps all the
1656:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around with the Data Stack
1657:000 | DONE ins | na 16 16 | 0054df | 20 1c 58    |                 jsr 00581c           
1658:000 | DONE wsp | na 16 16 |        |             |
1659:000 | DONE ins | na 16 16 | 0054e2 | 91 08       |                 sta.diy 000008       STA (CIB),Y
1660:000 | DONE wsp | na 16 16 |        |             |
1661:000 | DONE ins | na 16 16 | 0054e4 | c8          |                 iny                  
1662:000 | DONE ins | na 16 16 | 0054e5 | c4 1e       |                 cpy.d 00001e         reached character limit?
1663:000 | DONE ins | na 16 16 | 0054e7 | d0 ad       |                 bne 005496           fall thru if buffer limit reached
1664:000 | DONE wsp | na 16 16 |        |             |
1665:000 | DONE lbl | na 16 16 | 0054e9 |             | accept_eol                           
1666:000 | DONE ins | na 16 16 | 0054e9 | 84 0a       |                 sty.d 00000a         Y contains number of chars accepted already
1667:000 | DONE wsp | na 16 16 |        |             |
1668:000 | DONE ins | na 16 16 | 0054eb | 20 99 5d    |                 jsr 005d99           print final space
1669:000 | DONE ins | na 16 16 | 0054ee | 60          |                 rts                  this is the actual return of the routine
1670:000 | DONE wsp | na 16 16 |        |             |
1671:000 | DONE lbl | na 16 16 | 0054ef |             | accept_bs                            
1672:000 | DONE ins | na 16 16 | 0054ef | c0 00 00    |                 cpy.# 0000           buffer empty?
1673:000 | DONE ins | na 16 16 | 0054f2 | d0 07       |                 bne 0054fb           
1674:000 | DONE wsp | na 16 16 |        |             |
1675:000 | DONE ins | na 16 16 | 0054f4 | a9 07 00    |                 lda.# AscBELL        complain and don't delete beyond the start of line
1676:000 | DONE ins | na 16 16 | 0054f7 | 20 1c 58    |                 jsr 00581c           
1677:000 | DONE ins | na 16 16 | 0054fa | c8          |                 iny                  
1678:000 | DONE lbl | na 16 16 | 0054fb |             | @                                    
1679:000 | DONE ins | na 16 16 | 0054fb | 88          |                 dey                  
1680:000 | DONE ins | na 16 16 | 0054fc | a9 08 00    |                 lda.# AscBS          move back one
1681:000 | DONE ins | na 16 16 | 0054ff | 20 1c 58    |                 jsr 00581c           
1682:000 | DONE ins | na 16 16 | 005502 | a9 20 00    |                 lda.# AscSP          print a space (rubout)
1683:000 | DONE ins | na 16 16 | 005505 | 20 1c 58    |                 jsr 00581c           
1684:000 | DONE ins | na 16 16 | 005508 | a9 08 00    |                 lda.# AscBS          move back over space
1685:000 | DONE ins | na 16 16 | 00550b | 20 1c 58    |                 jsr 00581c           
1686:000 | DONE wsp | na 16 16 |        |             |
1687:000 | DONE ins | na 16 16 | 00550e | 80 86       |                 bra 005496           
1688:000 | DONE wsp | na 16 16 |        |             |
1689:000 | DONE lbl | na 16 16 | 005510 |             | z_accept                             
1689:001 | DONE ins | na 16 16 | 005510 | 60          |                 rts                  
1690:000 | DONE wsp | na 16 16 |        |             |
1691:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1692:000 | DONE cmt | na 16 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1693:000 | DONE cmt | na 16 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1694:000 | DONE cmt | na 16 16 |        |             | ; instead of BRA to make sure we have the range.
1695:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1696:000 | DONE lbl | na 16 16 | 005511 |             | xt_again                             
1697:000 | DONE wsp | na 16 16 |        |             |
1698:000 | DONE cmt | na 16 16 |        |             |                 ; Add the opcode for a JMP
1699:000 | DONE ins | na 16 16 | 005511 | e2 20       |                 sep 20               
1699:001 | DONE ctl | na  8 16 |        |             |         .!a8
1700:000 | DONE ins | na  8 16 | 005513 | a9 4c       |                 lda.# 4c             
1701:000 | DONE ins | na  8 16 | 005515 | 92 00       |                 sta.di 000000        STA (CP)
1702:000 | DONE ins | na  8 16 | 005517 | c2 20       |                 rep 20               
1702:001 | DONE ctl | na 16 16 |        |             |         .!a16
1703:000 | DONE ins | na 16 16 | 005519 | e6 00       |                 inc.d 000000         
1704:000 | DONE wsp | na 16 16 |        |             |
1705:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1706:000 | DONE ins | na 16 16 | 00551b | 98          |                 tya                  
1707:000 | DONE ins | na 16 16 | 00551c | 92 00       |                 sta.di 000000        
1708:000 | DONE ins | na 16 16 | 00551e | e6 00       |                 inc.d 000000         
1709:000 | DONE ins | na 16 16 | 005520 | e6 00       |                 inc.d 000000         
1710:000 | DONE wsp | na 16 16 |        |             |
1711:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1712:000 | DONE ins | na 16 16 | 005522 | b4 00       |                 ldy.dx 00            
1713:000 | DONE ins | na 16 16 | 005524 | e8          |                 inx                  
1714:000 | DONE ins | na 16 16 | 005525 | e8          |                 inx                  
1715:000 | DONE wsp | na 16 16 |        |             |
1716:000 | DONE lbl | na 16 16 | 005526 |             | z_again                              
1716:001 | DONE ins | na 16 16 | 005526 | 60          |                 rts                  
1717:000 | DONE wsp | na 16 16 |        |             |
1718:000 | DONE wsp | na 16 16 |        |             |
1719:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1720:000 | DONE cmt | na 16 16 |        |             | ; ALIGN ( -- ) 1 bytes / X cycles
1721:000 | DONE cmt | na 16 16 |        |             | ; Make sure CP is aligned. This does nothing on the 65816
1722:000 | DONE lbl | na 16 16 | 005527 |             | xt_align                             
1723:000 | DONE ins | na 16 16 | 005527 | ea          |                 nop                  removed during native compile
1724:000 | DONE lbl | na 16 16 | 005528 |             | z_align                              
1724:001 | DONE ins | na 16 16 | 005528 | 60          |                 rts                  
1725:000 | DONE wsp | na 16 16 |        |             |
1726:000 | DONE wsp | na 16 16 |        |             |
1727:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1728:000 | DONE cmt | na 16 16 |        |             | ; ALIGNED ( addr -- a-addr ) X bytes / X cycles
1729:000 | DONE cmt | na 16 16 |        |             | ; Return the next aligned address. With the 65816, this does nothing
1730:000 | DONE lbl | na 16 16 | 005529 |             | xt_aligned                           
1731:000 | DONE ins | na 16 16 | 005529 | ea          |                 nop                  removed during native compile
1732:000 | DONE lbl | na 16 16 | 00552a |             | z_aligned                            
1732:001 | DONE ins | na 16 16 | 00552a | 60          |                 rts                  
1733:000 | DONE wsp | na 16 16 |        |             |
1734:000 | DONE wsp | na 16 16 |        |             |
1735:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1736:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1737:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1738:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1739:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1740:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1741:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1742:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1743:000 | DONE lbl | na 16 16 | 00552b |             | xt_allot                             
1744:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1745:000 | DONE ins | na 16 16 | 00552b | 98          |                 tya                  force flag check
1746:000 | DONE ins | na 16 16 | 00552c | f0 21       |                 beq 00554f           zero bytes, don't do anything
1747:000 | DONE ins | na 16 16 | 00552e | 30 12       |                 bmi 005542           free memory instead of reserving it
1748:000 | DONE wsp | na 16 16 |        |             |
1749:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1750:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1751:000 | DONE ins | na 16 16 | 005530 | 18          |                 clc                  
1752:000 | DONE ins | na 16 16 | 005531 | 65 00       |                 adc.d 000000         create new CP
1753:000 | DONE ins | na 16 16 | 005533 | b0 07       |                 bcs 00553c           oops, we've wrapped
1754:000 | DONE wsp | na 16 16 |        |             |
1755:000 | DONE ins | na 16 16 | 005535 | a8          |                 tay                  save copy of new CP
1756:000 | DONE wsp | na 16 16 |        |             |
1757:000 | DONE ins | na 16 16 | 005536 | 38          |                 sec                  
1758:000 | DONE ins | na 16 16 | 005537 | e9 ff 4f    |                 sbc.# 004fff         
1759:000 | DONE ins | na 16 16 | 00553a | 30 11       |                 bmi 00554d           oops, fall thru if beyond max RAM
1760:000 | DONE wsp | na 16 16 |        |             |
1761:000 | DONE lbl | na 16 16 | 00553c |             | allot_error                          
1762:000 | DONE ins | na 16 16 | 00553c | a9 38 6f    |                 lda.# 006f38         
1763:000 | DONE ins | na 16 16 | 00553f | 4c cb 68    |                 jmp 0068cb           
1764:000 | DONE wsp | na 16 16 |        |             |
1765:000 | DONE lbl | na 16 16 | 005542 |             | allot_minus                          
1766:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1767:000 | DONE ins | na 16 16 | 005542 | 38          |                 sec                  
1768:000 | DONE ins | na 16 16 | 005543 | e5 00       |                 sbc.d 000000         
1769:000 | DONE ins | na 16 16 | 005545 | 90 f5       |                 bcc 00553c           oops, we've wrapped
1770:000 | DONE wsp | na 16 16 |        |             |
1771:000 | DONE ins | na 16 16 | 005547 | a8          |                 tay                  
1772:000 | DONE wsp | na 16 16 |        |             |
1773:000 | DONE ins | na 16 16 | 005548 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1774:000 | DONE ins | na 16 16 | 00554b | 30 ef       |                 bmi 00553c           oops, gone too far back
1775:000 | DONE wsp | na 16 16 |        |             |
1776:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1777:000 | DONE lbl | na 16 16 | 00554d |             | allot_done                           
1778:000 | DONE ins | na 16 16 | 00554d | 84 00       |                 sty.d 000000         new compiler pointer
1779:000 | DONE lbl | na 16 16 | 00554f |             | allot_real_gone                      
1780:000 | DONE ins | na 16 16 | 00554f | b4 00       |                 ldy.dx 00            DROP
1781:000 | DONE ins | na 16 16 | 005551 | e8          |                 inx                  
1782:000 | DONE ins | na 16 16 | 005552 | e8          |                 inx                  
1783:000 | DONE wsp | na 16 16 |        |             |
1784:000 | DONE lbl | na 16 16 | 005553 |             | z_allot                              
1784:001 | DONE ins | na 16 16 | 005553 | 60          |                 rts                  
1785:000 | DONE wsp | na 16 16 |        |             |
1786:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1787:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1788:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1789:000 | DONE lbl | na 16 16 | 005554 |             | xt_and                               
1790:000 | DONE ins | na 16 16 | 005554 | 98          |                 tya                  
1791:000 | DONE ins | na 16 16 | 005555 | 35 00       |                 and.dx 00            
1792:000 | DONE ins | na 16 16 | 005557 | a8          |                 tay                  
1793:000 | DONE wsp | na 16 16 |        |             |
1794:000 | DONE ins | na 16 16 | 005558 | e8          |                 inx                  NIP
1795:000 | DONE ins | na 16 16 | 005559 | e8          |                 inx                  
1796:000 | DONE wsp | na 16 16 |        |             |
1797:000 | DONE lbl | na 16 16 | 00555a |             | z_and                                
1797:001 | DONE ins | na 16 16 | 00555a | 60          |                 rts                  
1798:000 | DONE wsp | na 16 16 |        |             |
1799:000 | DONE wsp | na 16 16 |        |             |
1800:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1801:000 | DONE cmt | na 16 16 |        |             | ; AT-XY ( nx ny -- ) X bytes / X cycles
1802:000 | DONE cmt | na 16 16 |        |             | ; Move cursor to coordinates given. ESC[<n>;<m>H Do not use U. to print the
1803:000 | DONE cmt | na 16 16 |        |             | ; numbers because the trailing space will not work with xterm (works fine with
1804:000 | DONE cmt | na 16 16 |        |             | ; Mac OS X Terminals, though)
1805:000 | DONE cmt | na 16 16 |        |             | ; TODO doesn't like hex values, need to get rid of byte_to_ascii
1806:000 | DONE cmt | na 16 16 |        |             | ; or call as word with 0 u.r and decimal
1807:000 | DONE lbl | na 16 16 | 00555b |             | xt_at-xy                             
1808:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1809:000 | DONE ins | na 16 16 | 00555b | a9 1b 00    |                 lda.# AscESC         ESC
1810:000 | DONE ins | na 16 16 | 00555e | 20 1c 58    |                 jsr 00581c           
1811:000 | DONE ins | na 16 16 | 005561 | a9 5b 00    |                 lda.# 5b             [
1812:000 | DONE ins | na 16 16 | 005564 | 20 1c 58    |                 jsr 00581c           
1813:000 | DONE ins | na 16 16 | 005567 | b5 00       |                 lda.dx 00            x
1814:000 | DONE ins | na 16 16 | 005569 | 20 02 69    |                 jsr 006902           
1815:000 | DONE ins | na 16 16 | 00556c | a9 3b 00    |                 lda.# 3b             semicolon
1816:000 | DONE ins | na 16 16 | 00556f | 20 1c 58    |                 jsr 00581c           
1817:000 | DONE ins | na 16 16 | 005572 | 98          |                 tya                  y
1818:000 | DONE ins | na 16 16 | 005573 | 20 02 69    |                 jsr 006902           
1819:000 | DONE ins | na 16 16 | 005576 | a9 48 00    |                 lda.# 48             H
1820:000 | DONE ins | na 16 16 | 005579 | 20 1c 58    |                 jsr 00581c           
1821:000 | DONE wsp | na 16 16 |        |             |
1822:000 | DONE ins | na 16 16 | 00557c | b4 02       |                 ldy.dx 02            
1823:000 | DONE ins | na 16 16 | 00557e | e8          |                 inx                  
1824:000 | DONE ins | na 16 16 | 00557f | e8          |                 inx                  
1825:000 | DONE ins | na 16 16 | 005580 | e8          |                 inx                  
1826:000 | DONE ins | na 16 16 | 005581 | e8          |                 inx                  
1827:000 | DONE wsp | na 16 16 |        |             |
1828:000 | DONE lbl | na 16 16 | 005582 |             | z_at-xy                              
1828:001 | DONE ins | na 16 16 | 005582 | 60          |                 rts                  
1829:000 | DONE wsp | na 16 16 |        |             |
1830:000 | DONE wsp | na 16 16 |        |             |
1831:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1832:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1833:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1834:000 | DONE lbl | na 16 16 | 005583 |             | xt_base                              
1835:000 | DONE ins | na 16 16 | 005583 | ca          |                 dex                  
1836:000 | DONE ins | na 16 16 | 005584 | ca          |                 dex                  
1837:000 | DONE ins | na 16 16 | 005585 | 94 00       |                 sty.dx 00            
1838:000 | DONE wsp | na 16 16 |        |             |
1839:000 | DONE ins | na 16 16 | 005587 | a0 16 00    |                 ldy.# 000016         
1840:000 | DONE wsp | na 16 16 |        |             |
1841:000 | DONE lbl | na 16 16 | 00558a |             | z_base                               
1841:001 | DONE ins | na 16 16 | 00558a | 60          |                 rts                  
1842:000 | DONE wsp | na 16 16 |        |             |
1843:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1844:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1845:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1846:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1847:000 | DONE lbl | na 16 16 | 00558b |             | xt_bell                              
1848:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1849:000 | DONE ins | na 16 16 | 00558b | a9 07 00    |                 lda.# AscBELL        
1850:000 | DONE ins | na 16 16 | 00558e | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
1851:000 | DONE wsp | na 16 16 |        |             |
1852:000 | DONE lbl | na 16 16 | 005591 |             | z_bell                               ; never reached
1853:000 | DONE wsp | na 16 16 |        |             |
1854:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1855:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1856:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1857:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1858:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1859:000 | DONE lbl | na 16 16 | 005591 |             | xt_begin                             
1860:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1861:000 | DONE ins | na 16 16 | 005591 | ca          |                 dex                  
1862:000 | DONE ins | na 16 16 | 005592 | ca          |                 dex                  
1863:000 | DONE ins | na 16 16 | 005593 | 94 00       |                 sty.dx 00            
1864:000 | DONE wsp | na 16 16 |        |             |
1865:000 | DONE ins | na 16 16 | 005595 | a4 00       |                 ldy.d 000000         
1866:000 | DONE wsp | na 16 16 |        |             |
1867:000 | DONE lbl | na 16 16 | 005597 |             | z_begin                              
1867:001 | DONE ins | na 16 16 | 005597 | 60          |                 rts                  
1868:000 | DONE wsp | na 16 16 |        |             |
1869:000 | DONE wsp | na 16 16 |        |             |
1870:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1871:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1872:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1873:000 | DONE lbl | na 16 16 | 005598 |             | xt_bl                                
1874:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1875:000 | DONE ins | na 16 16 | 005598 | ca          |                 dex                  
1876:000 | DONE ins | na 16 16 | 005599 | ca          |                 dex                  
1877:000 | DONE ins | na 16 16 | 00559a | 94 00       |                 sty.dx 00            
1878:000 | DONE ins | na 16 16 | 00559c | a0 20 00    |                 ldy.# AscSP          
1879:000 | DONE wsp | na 16 16 |        |             |
1880:000 | DONE lbl | na 16 16 | 00559f |             | z_bl                                 
1880:001 | DONE ins | na 16 16 | 00559f | 60          |                 rts                  
1881:000 | DONE wsp | na 16 16 |        |             |
1882:000 | DONE wsp | na 16 16 |        |             |
1883:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1884:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1885:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1886:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1887:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler. Uses tmptos
1888:000 | DONE lbl | na 16 16 | 0055a0 |             | xt_bounds                            
1889:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1890:000 | DONE ins | na 16 16 | 0055a0 | 84 24       |                 sty.d 000024         
1891:000 | DONE ins | na 16 16 | 0055a2 | b4 00       |                 ldy.dx 00            addr now TOS
1892:000 | DONE wsp | na 16 16 |        |             |
1893:000 | DONE ins | na 16 16 | 0055a4 | 18          |                 clc                  
1894:000 | DONE ins | na 16 16 | 0055a5 | 65 24       |                 adc.d 000024         
1895:000 | DONE ins | na 16 16 | 0055a7 | 95 00       |                 sta.dx 00            addr+u now NOS
1896:000 | DONE wsp | na 16 16 |        |             |
1897:000 | DONE lbl | na 16 16 | 0055a9 |             | z_bounds                             
1897:001 | DONE ins | na 16 16 | 0055a9 | 60          |                 rts                  
1898:000 | DONE wsp | na 16 16 |        |             |
1899:000 | DONE wsp | na 16 16 |        |             |
1900:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1901:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1902:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. This word was adapted from Tali Forth. It
1903:000 | DONE cmt | na 16 16 |        |             | ; uses tmpbranch
1904:000 | DONE lbl | na 16 16 | 0055aa |             | xt_branch                            
1905:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1906:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1907:000 | DONE ins | na 16 16 | 0055aa | f4 b1 55    |                 phe.# 0055b1         
1908:000 | DONE ins | na 16 16 | 0055ad | 20 aa 68    |                 jsr 0068aa           
1909:000 | DONE wsp | na 16 16 |        |             |
1910:000 | DONE lbl | na 16 16 | 0055b0 |             | z_branch                             
1910:001 | DONE ins | na 16 16 | 0055b0 | 60          |                 rts                  
1911:000 | DONE wsp | na 16 16 |        |             |
1912:000 | DONE lbl | na 16 16 | 0055b1 |             | branch_rt                            
1913:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1914:000 | DONE ins | na 16 16 | 0055b1 | 68          |                 pla                  
1915:000 | DONE ins | na 16 16 | 0055b2 | 85 1a       |                 sta.d 00001a         
1916:000 | DONE wsp | na 16 16 |        |             |
1917:000 | DONE ins | na 16 16 | 0055b4 | 5a          |                 phy                  avoid using temp variables
1918:000 | DONE ins | na 16 16 | 0055b5 | a0 01 00    |                 ldy.# 0001           
1919:000 | DONE ins | na 16 16 | 0055b8 | b1 1a       |                 lda.diy 00001a       LDA (TMPBRANCH),Y
1920:000 | DONE ins | na 16 16 | 0055ba | 7a          |                 ply                  
1921:000 | DONE wsp | na 16 16 |        |             |
1922:000 | DONE ins | na 16 16 | 0055bb | 3a          |                 dec.a                
1923:000 | DONE ins | na 16 16 | 0055bc | 48          |                 pha                  put target address back on Return Stack
1924:000 | DONE wsp | na 16 16 |        |             |
1925:000 | DONE ins | na 16 16 | 0055bd | 60          |                 rts                  
1926:000 | DONE wsp | na 16 16 |        |             |
1927:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1928:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1929:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1930:000 | DONE lbl | na 16 16 | 0055be |             | xt_bye                               
1931:000 | DONE ins | na 16 16 | 0055be | 78          |                 sei                  
1932:000 | DONE ins | na 16 16 | 0055bf | d8          |                 cld                  
1933:000 | DONE ins | na 16 16 | 0055c0 | 38          |                 sec                  
1933:001 | DONE ins | na 16 16 | 0055c1 | fb          |                 xce                  
1933:002 | DONE ctl | em  8  8 |        |             |         .!emulated
1933:003 | DONE ctl | em  8  8 |        |             |         .!a8
1933:004 | DONE ctl | em  8  8 |        |             |         .!xy8
1934:000 | DONE ins | em  8  8 | 0055c2 | 6c fc ff    |                 jmp.i 0fffc          
1935:000 | DONE wsp | em  8  8 |        |             |
1936:000 | DONE lbl | em  8  8 | 0055c5 |             | z_bye                                ; never reached
1937:000 | DONE wsp | em  8  8 |        |             |
1938:000 | DONE wsp | em  8  8 |        |             |
1939:000 | DONE cmt | em  8  8 |        |             | ; -------------------------------------------------------------------
1940:000 | DONE cmt | em  8  8 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1941:000 | DONE cmt | em  8  8 |        |             | ; Store one character in the Dictionary
1942:000 | DONE lbl | em  8  8 | 0055c5 |             | xt_c-comma                           
1943:000 | DONE ins | em  8  8 | 0055c5 | 98          |                 tya                  
1944:000 | DONE ins | em  8  8 | 0055c6 | e2 20       |                 sep 20               
1944:001 | DONE ctl | em  8  8 |        |             |         .!a8
1945:000 | DONE ins | em  8  8 | 0055c8 | 92 00       |                 sta.di 000000        STA (CP)
1946:000 | DONE ins | em  8  8 | 0055ca | c2 20       |                 rep 20               
1946:001 | DONE ctl | em 16  8 |        |             |         .!a16
1947:000 | DONE ins | em 16  8 | 0055cc | e6 00       |                 inc.d 000000         quick version of 1 ALLOT
1948:000 | DONE wsp | em 16  8 |        |             |
1949:000 | DONE ins | em 16  8 | 0055ce | b4 00       |                 ldy.dx 00            
1950:000 | DONE ins | em 16  8 | 0055d0 | e8          |                 inx                  
1951:000 | DONE ins | em 16  8 | 0055d1 | e8          |                 inx                  
1952:000 | DONE wsp | em 16  8 |        |             |
1953:000 | DONE lbl | em 16  8 | 0055d2 |             | z_c-comma                            
1953:001 | DONE ins | em 16  8 | 0055d2 | 60          |                 rts                  
1954:000 | DONE wsp | em 16  8 |        |             |
1955:000 | DONE wsp | em 16  8 |        |             |
1956:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1957:000 | DONE cmt | em 16  8 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1958:000 | DONE cmt | em 16  8 |        |             | ; Get a single byte from the given address
1959:000 | DONE lbl | em 16  8 | 0055d3 |             | xt_c-fetch                           
1960:000 | DONE ins | em 16  8 | 0055d3 | e2 20       |                 sep 20               
1960:001 | DONE ctl | em  8  8 |        |             |         .!a8
1961:000 | DONE ins | em  8  8 | 0055d5 | b9 00 00    |                 lda.y 0000           
1962:000 | DONE ins | em  8  8 | 0055d8 | c2 20       |                 rep 20               
1962:001 | DONE ctl | em 16  8 |        |             |         .!a16
1963:000 | DONE ins | em 16  8 | 0055da | 29 ff 00    |                 and.# 00ff           
1964:000 | DONE ins | em 16  8 | 0055dd | a8          |                 tay                  
1965:000 | DONE wsp | em 16  8 |        |             |
1966:000 | DONE lbl | em 16  8 | 0055de |             | z_c-fetch                            
1966:001 | DONE ins | em 16  8 | 0055de | 60          |                 rts                  
1967:000 | DONE wsp | em 16  8 |        |             |
1968:000 | DONE wsp | em 16  8 |        |             |
1969:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1970:000 | DONE cmt | em 16  8 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1971:000 | DONE cmt | em 16  8 |        |             | ; Store LSB of NOS at location given as TOS
1972:000 | DONE lbl | em 16  8 | 0055df |             | xt_c-store                           
1973:000 | DONE ins | em 16  8 | 0055df | b5 00       |                 lda.dx 00            
1974:000 | DONE ins | em 16  8 | 0055e1 | e2 20       |                 sep 20               
1974:001 | DONE ctl | em  8  8 |        |             |         .!a8
1975:000 | DONE ins | em  8  8 | 0055e3 | 99 00 00    |                 sta.y 0000           
1976:000 | DONE ins | em  8  8 | 0055e6 | c2 20       |                 rep 20               
1976:001 | DONE ctl | em 16  8 |        |             |         .!a16
1977:000 | DONE ins | em 16  8 | 0055e8 | b4 02       |                 ldy.dx 02            
1978:000 | DONE ins | em 16  8 | 0055ea | e8          |                 inx                  
1979:000 | DONE ins | em 16  8 | 0055eb | e8          |                 inx                  
1980:000 | DONE ins | em 16  8 | 0055ec | e8          |                 inx                  
1981:000 | DONE ins | em 16  8 | 0055ed | e8          |                 inx                  
1982:000 | DONE wsp | em 16  8 |        |             |
1983:000 | DONE lbl | em 16  8 | 0055ee |             | z_c-store                            
1983:001 | DONE ins | em 16  8 | 0055ee | 60          |                 rts                  
1984:000 | DONE wsp | em 16  8 |        |             |
1985:000 | DONE wsp | em 16  8 |        |             |
1986:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1987:000 | DONE cmt | em 16  8 |        |             | ; CELL+ ( u -- u+2 ) X bytes / X cycles
1988:000 | DONE cmt | em 16  8 |        |             | ; Add the size of one cell to the value on top of the stack. Since this is
1989:000 | DONE cmt | em 16  8 |        |             | ; a 16-bit cell size, we add two
1990:000 | DONE lbl | em 16  8 | 0055ef |             | xt_cellplus                          
1991:000 | DONE ins | em 16  8 | 0055ef | c8          |                 iny                  
1992:000 | DONE ins | em 16  8 | 0055f0 | c8          |                 iny                  
1993:000 | DONE lbl | em 16  8 | 0055f1 |             | z_cellplus                           
1993:001 | DONE ins | em 16  8 | 0055f1 | 60          |                 rts                  
1994:000 | DONE wsp | em 16  8 |        |             |
1995:000 | DONE wsp | em 16  8 |        |             |
1996:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1997:000 | DONE cmt | em 16  8 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1998:000 | DONE cmt | em 16  8 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1999:000 | DONE cmt | em 16  8 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
2000:000 | DONE cmt | em 16  8 |        |             | ; returned by 2*, see there.
2001:000 | DONE wsp | em 16  8 |        |             |
2002:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2003:000 | DONE cmt | em 16  8 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
2004:000 | DONE cmt | em 16  8 |        |             | ; Convert a character to its ASCII value
2005:000 | DONE lbl | em 16  8 | 0055f2 |             | xt_char                              
2006:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2007:000 | DONE ins | em 16  8 | 0055f2 | 20 6a 5b    |                 jsr 005b6a           ( -- addr u )
2008:000 | DONE wsp | em 16  8 |        |             |
2009:000 | DONE cmt | em 16  8 |        |             |                 ; if we got back a zero, we have a problem
2010:000 | DONE ins | em 16  8 | 0055f5 | 98          |                 tya                  force flag check
2011:000 | DONE ins | em 16  8 | 0055f6 | d0 06       |                 bne 0055fe           
2012:000 | DONE wsp | em 16  8 |        |             |
2013:000 | DONE ins | em 16  8 | 0055f8 | a9 bd 6f    |                 lda.# 006fbd         
2014:000 | DONE ins | em 16  8 | 0055fb | 4c cb 68    |                 jmp 0068cb           
2015:000 | DONE wsp | em 16  8 |        |             |
2016:000 | DONE lbl | em 16  8 | 0055fe |             | char_got_char                        
2017:000 | DONE ins | em 16  8 | 0055fe | b4 00       |                 ldy.dx 00            get addr from NOS
2018:000 | DONE ins | em 16  8 | 005600 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
2019:000 | DONE ins | em 16  8 | 005603 | 29 ff 00    |                 and.# 00ff           
2020:000 | DONE ins | em 16  8 | 005606 | a8          |                 tay                  
2021:000 | DONE wsp | em 16  8 |        |             |
2022:000 | DONE ins | em 16  8 | 005607 | e8          |                 inx                  
2023:000 | DONE ins | em 16  8 | 005608 | e8          |                 inx                  
2024:000 | DONE wsp | em 16  8 |        |             |
2025:000 | DONE lbl | em 16  8 | 005609 |             | z_char                               
2025:001 | DONE ins | em 16  8 | 005609 | 60          |                 rts                  
2026:000 | DONE wsp | em 16  8 |        |             |
2027:000 | DONE wsp | em 16  8 |        |             |
2028:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2029:000 | DONE cmt | em 16  8 |        |             | ; CHARPLUS ( u -- u+1 ) X bytes / X cycles
2030:000 | DONE cmt | em 16  8 |        |             | ; Adds the size of a character to the value on top of the stack. Since our
2031:000 | DONE cmt | em 16  8 |        |             | ; character size is one, this is the same code as 1+, see there
2032:000 | DONE wsp | em 16  8 |        |             |
2033:000 | DONE wsp | em 16  8 |        |             |
2034:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2035:000 | DONE cmt | em 16  8 |        |             | ; CHARS ( u -- u ) X bytes / X cycles
2036:000 | DONE cmt | em 16  8 |        |             | ; Return the size in bytes of the number of characters on the top of the stack.
2037:000 | DONE cmt | em 16  8 |        |             | ; In this case, does nothing
2038:000 | DONE lbl | em 16  8 | 00560a |             | xt_chars                             
2039:000 | DONE wsp | em 16  8 |        |             |
2040:000 | DONE ins | em 16  8 | 00560a | ea          |                 nop                  will be removed during native compile
2041:000 | DONE lbl | em 16  8 | 00560b |             | z_chars                              
2041:001 | DONE ins | em 16  8 | 00560b | 60          |                 rts                  
2042:000 | DONE wsp | em 16  8 |        |             |
2043:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2044:000 | DONE cmt | em 16  8 |        |             | ; CMOVE ( addr1 addr2 u -- ) X bytes / X cycles
2045:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a lower to a higher address. Because of the danger of
2046:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the end of the source string (addr1+u) and copy
2047:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the end of the destination address (addr2+u). This is what the
2048:000 | DONE cmt | em 16  8 |        |             | ; MVP instruction is for. Use MOVE if you are not sure what to do.
2049:000 | DONE cmt | em 16  8 |        |             | ;       =====* source
2050:000 | DONE cmt | em 16  8 |        |             | ;          ====* destination
2051:000 | DONE lbl | em 16  8 | 00560c |             | xt_cmove                             
2052:000 | DONE cmt | em 16  8 |        |             |                 ; We start at the end of the blocks, so we have to increase both
2053:000 | DONE cmt | em 16  8 |        |             |                 ; addr1 and addr2 by u
2054:000 | DONE ins | em 16  8 | 00560c | 98          |                 tya                  
2055:000 | DONE ins | em 16  8 | 00560d | 18          |                 clc                  
2056:000 | DONE ins | em 16  8 | 00560e | 75 02       |                 adc.dx 02            source, goes in X
2057:000 | DONE ins | em 16  8 | 005610 | 3a          |                 dec.a                convert length to index
2058:000 | DONE ins | em 16  8 | 005611 | 95 02       |                 sta.dx 02            
2059:000 | DONE wsp | em 16  8 |        |             |
2060:000 | DONE ins | em 16  8 | 005613 | 98          |                 tya                  
2061:000 | DONE ins | em 16  8 | 005614 | 18          |                 clc                  
2062:000 | DONE ins | em 16  8 | 005615 | 75 00       |                 adc.dx 00            destination, goes in Y
2063:000 | DONE ins | em 16  8 | 005617 | 3a          |                 dec.a                convert length to index
2064:000 | DONE wsp | em 16  8 |        |             |
2065:000 | DONE ins | em 16  8 | 005618 | 86 22       |                 stx.d 000022         keep DSP safe
2066:000 | DONE wsp | em 16  8 |        |             |
2067:000 | DONE ins | em 16  8 | 00561a | 88          |                 dey                  
2068:000 | DONE ins | em 16  8 | 00561b | 5a          |                 phy                  save number of bytes to transfer
2069:000 | DONE wsp | em 16  8 |        |             |
2070:000 | DONE ins | em 16  8 | 00561c | a8          |                 tay                  destination now in Y
2071:000 | DONE wsp | em 16  8 |        |             |
2072:000 | DONE ins | em 16  8 | 00561d | b5 02       |                 lda.dx 02            get source address
2073:000 | DONE ins | em 16  8 | 00561f | aa          |                 tax                  
2074:000 | DONE wsp | em 16  8 |        |             |
2075:000 | DONE ins | em 16  8 | 005620 | 68          |                 pla                  retrieve number of bytes to transfer
2076:000 | DONE ins | em 16  8 | 005621 | 44 00 00    |                 mvp 0                
2076:001 | DONE ctl | em 16  8 |        |             |            
2077:000 | DONE wsp | em 16  8 |        |             |
2078:000 | DONE ins | em 16  8 | 005624 | a6 22       |                 ldx.d 000022         
2079:000 | DONE ins | em 16  8 | 005626 | b4 04       |                 ldy.dx 04            
2080:000 | DONE wsp | em 16  8 |        |             |
2081:000 | DONE ins | em 16  8 | 005628 | 8a          |                 txa                  It's worth addition for three cells dropped
2082:000 | DONE ins | em 16  8 | 005629 | 18          |                 clc                  
2083:000 | DONE ins | em 16  8 | 00562a | 69 06 00    |                 adc.# 0006           
2084:000 | DONE ins | em 16  8 | 00562d | aa          |                 tax                  
2085:000 | DONE wsp | em 16  8 |        |             |
2086:000 | DONE lbl | em 16  8 | 00562e |             | z_cmove                              
2086:001 | DONE ins | em 16  8 | 00562e | 60          |                 rts                  
2087:000 | DONE wsp | em 16  8 |        |             |
2088:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2089:000 | DONE cmt | em 16  8 |        |             | ; CMOVE> ( addr1 addr 2 u -- ) X bytes / X cycles
2090:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a higher to a lower address. Because of the danger of
2091:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the beginning of the source (addr1) to copy it
2092:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the beginning of the destination (addr2). This is what the MVN
2093:000 | DONE cmt | em 16  8 |        |             | ; instruction is for. Use MOVE if you are not sure what to do.
2094:000 | DONE cmt | em 16  8 |        |             | ;          *==== source
2095:000 | DONE cmt | em 16  8 |        |             | ;       *===== destination
2096:000 | DONE lbl | em 16  8 | 00562f |             | xt_cmoveup                           
2097:000 | DONE ins | em 16  8 | 00562f | 86 22       |                 stx.d 000022         keep DSP safe
2098:000 | DONE wsp | em 16  8 |        |             |
2099:000 | DONE ins | em 16  8 | 005631 | 88          |                 dey                  
2100:000 | DONE ins | em 16  8 | 005632 | 5a          |                 phy                  save number of bytes to transfer
2101:000 | DONE wsp | em 16  8 |        |             |
2102:000 | DONE ins | em 16  8 | 005633 | b5 00       |                 lda.dx 00            get destination address
2103:000 | DONE ins | em 16  8 | 005635 | a8          |                 tay                  
2104:000 | DONE wsp | em 16  8 |        |             |
2105:000 | DONE ins | em 16  8 | 005636 | b5 02       |                 lda.dx 02            get source address
2106:000 | DONE ins | em 16  8 | 005638 | aa          |                 tax                  
2107:000 | DONE wsp | em 16  8 |        |             |
2108:000 | DONE ins | em 16  8 | 005639 | 68          |                 pla                  retrieve number of bytes to transfer
2109:000 | DONE ins | em 16  8 | 00563a | 54 00 00    |                 mvn 0                
2109:001 | DONE ctl | em 16  8 |        |             |            
2110:000 | DONE wsp | em 16  8 |        |             |
2111:000 | DONE ins | em 16  8 | 00563d | a6 22       |                 ldx.d 000022         
2112:000 | DONE ins | em 16  8 | 00563f | b4 04       |                 ldy.dx 04            
2113:000 | DONE wsp | em 16  8 |        |             |
2114:000 | DONE ins | em 16  8 | 005641 | 8a          |                 txa                  It's worth addition for three cells dropped
2115:000 | DONE ins | em 16  8 | 005642 | 18          |                 clc                  
2116:000 | DONE ins | em 16  8 | 005643 | 69 06 00    |                 adc.# 0006           
2117:000 | DONE ins | em 16  8 | 005646 | aa          |                 tax                  
2118:000 | DONE wsp | em 16  8 |        |             |
2119:000 | DONE lbl | em 16  8 | 005647 |             | z_cmoveup                            
2119:001 | DONE ins | em 16  8 | 005647 | 60          |                 rts                  
2120:000 | DONE wsp | em 16  8 |        |             |
2121:000 | DONE wsp | em 16  8 |        |             |
2122:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2123:000 | DONE cmt | em 16  8 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
2124:000 | DONE cmt | em 16  8 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
2125:000 | DONE cmt | em 16  8 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
2126:000 | DONE cmt | em 16  8 |        |             | ; we're in compile mode
2127:000 | DONE lbl | em 16  8 | 005648 |             | xt_compile-only                      
2128:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2129:000 | DONE ins | em 16  8 | 005648 | a9 04 00    |                 lda.# CO             
2130:000 | DONE ins | em 16  8 | 00564b | eb          |                 xba                  flags are MSB
2131:000 | DONE ins | em 16  8 | 00564c | 12 02       |                 ora.di 000002        ORA (DP)
2132:000 | DONE ins | em 16  8 | 00564e | 92 02       |                 sta.di 000002        
2133:000 | DONE wsp | em 16  8 |        |             |
2134:000 | DONE lbl | em 16  8 | 005650 |             | z_compile-only                       
2134:001 | DONE ins | em 16  8 | 005650 | 60          |                 rts                  
2135:000 | DONE wsp | em 16  8 |        |             |
2136:000 | DONE wsp | em 16  8 |        |             |
2137:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2138:000 | DONE cmt | em 16  8 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
2139:000 | DONE cmt | em 16  8 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
2140:000 | DONE cmt | em 16  8 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
2141:000 | DONE cmt | em 16  8 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
2142:000 | DONE cmt | em 16  8 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
2143:000 | DONE cmt | em 16  8 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
2144:000 | DONE cmt | em 16  8 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
2145:000 | DONE cmt | em 16  8 |        |             | ; subroutine coding.
2146:000 | DONE cmt | em 16  8 |        |             | ; TODO currently just compiles subroutine jumps
2147:000 | DONE lbl | em 16  8 | 005651 |             | xt_compilecomma                      
2148:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2149:000 | DONE wsp | em 16  8 |        |             |
2150:000 | DONE lbl | em 16  8 | 005651 |             | compile_as_code                      
2151:000 | DONE cmt | em 16  8 |        |             |                 ; Compile xt as native code
2152:000 | DONE cmt | em 16  8 |        |             |                 ; use nc_limit to decide if we want native compile
2153:000 | DONE cmt | em 16  8 |        |             |                 ; TODO consider special cases:
2154:000 | DONE cmt | em 16  8 |        |             |                 ;  - >R R> should strip PLA/PHA if native compiled
2155:000 | DONE cmt | em 16  8 |        |             |                 ;  - 2>R and 2R> should strip three first and last bytes
2156:000 | DONE cmt | em 16  8 |        |             |                 ;  - NOP should be removed if only instruction
2157:000 | DONE cmt | em 16  8 |        |             |                 ;  - Don't compile comments
2158:000 | DONE wsp | em 16  8 |        |             |
2159:000 | DONE lbl | em 16  8 | 005651 |             | compile_as_jump                      
2160:000 | DONE cmt | em 16  8 |        |             |                 ; Compile xt as a subroutine jump.
2161:000 | DONE ins | em 16  8 | 005651 | e2 20       |                 sep 20               
2161:001 | DONE ctl | em  8  8 |        |             |         .!a8
2162:000 | DONE ins | em  8  8 | 005653 | a9 20       |                 lda.# 20             opcode for JSR
2163:000 | DONE ins | em  8  8 | 005655 | 92 00       |                 sta.di 000000        STA (CP)
2164:000 | DONE ins | em  8  8 | 005657 | c2 20       |                 rep 20               
2164:001 | DONE ctl | em 16  8 |        |             |         .!a16
2165:000 | DONE ins | em 16  8 | 005659 | e6 00       |                 inc.d 000000         
2166:000 | DONE wsp | em 16  8 |        |             |
2167:000 | DONE cmt | em 16  8 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
2168:000 | DONE cmt | em 16  8 |        |             |                 ; hard way
2169:000 | DONE ins | em 16  8 | 00565b | 98          |                 tya                  
2170:000 | DONE ins | em 16  8 | 00565c | 92 00       |                 sta.di 000000        
2171:000 | DONE ins | em 16  8 | 00565e | e6 00       |                 inc.d 000000         
2172:000 | DONE ins | em 16  8 | 005660 | e6 00       |                 inc.d 000000         
2173:000 | DONE wsp | em 16  8 |        |             |
2174:000 | DONE ins | em 16  8 | 005662 | b4 00       |                 ldy.dx 00            
2175:000 | DONE ins | em 16  8 | 005664 | e8          |                 inx                  
2176:000 | DONE ins | em 16  8 | 005665 | e8          |                 inx                  
2177:000 | DONE wsp | em 16  8 |        |             |
2178:000 | DONE lbl | em 16  8 | 005666 |             | z_compilecomma                       
2178:001 | DONE ins | em 16  8 | 005666 | 60          |                 rts                  
2179:000 | DONE wsp | em 16  8 |        |             |
2180:000 | DONE wsp | em 16  8 |        |             |
2181:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2182:000 | DONE cmt | em 16  8 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
2183:000 | DONE cmt | em 16  8 |        |             | ; Associate a fixed value with a word. This could be realized as
2184:000 | DONE cmt | em 16  8 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
2185:000 | DONE cmt | em 16  8 |        |             | ; lifting.
2186:000 | DONE cmt | em 16  8 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
2187:000 | DONE cmt | em 16  8 |        |             | ; this works in various Forths.
2188:000 | DONE lbl | em 16  8 | 005667 |             | xt_constant                          
2189:000 | DONE ins | em 16  8 | 005667 | 20 aa 56    |                 jsr 0056aa           
2190:000 | DONE wsp | em 16  8 |        |             |
2191:000 | DONE cmt | em 16  8 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2192:000 | DONE cmt | em 16  8 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
2193:000 | DONE cmt | em 16  8 |        |             |                 ; the subroutine jump target
2194:000 | DONE ins | em 16  8 | 00566a | a5 00       |                 lda.d 000000         
2195:000 | DONE ins | em 16  8 | 00566c | 3a          |                 dec.a                
2196:000 | DONE ins | em 16  8 | 00566d | 3a          |                 dec.a                
2197:000 | DONE ins | em 16  8 | 00566e | 85 1c       |                 sta.d 00001c         
2198:000 | DONE wsp | em 16  8 |        |             |
2199:000 | DONE ins | em 16  8 | 005670 | a9 15 68    |                 lda.# 006815         
2200:000 | DONE ins | em 16  8 | 005673 | 92 1c       |                 sta.di 00001c        STA (TMP1)
2201:000 | DONE wsp | em 16  8 |        |             |
2202:000 | DONE cmt | em 16  8 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
2203:000 | DONE ins | em 16  8 | 005675 | 98          |                 tya                  there is no "sty.di cp"
2204:000 | DONE ins | em 16  8 | 005676 | 92 00       |                 sta.di 000000        
2205:000 | DONE ins | em 16  8 | 005678 | e6 00       |                 inc.d 000000         
2206:000 | DONE ins | em 16  8 | 00567a | e6 00       |                 inc.d 000000         
2207:000 | DONE wsp | em 16  8 |        |             |
2208:000 | DONE ins | em 16  8 | 00567c | b4 00       |                 ldy.dx 00            DROP
2209:000 | DONE ins | em 16  8 | 00567e | e8          |                 inx                  
2210:000 | DONE ins | em 16  8 | 00567f | e8          |                 inx                  drop through to adjust_z
2211:000 | DONE wsp | em 16  8 |        |             |
2212:000 | DONE cmt | em 16  8 |        |             |                 ; Now the length of the complete word (z_word) has increased by
2213:000 | DONE cmt | em 16  8 |        |             |                 ; two. We need to update that number or else words such as SEE
2214:000 | DONE cmt | em 16  8 |        |             |                 ; will ignore the PFA. We use this same routine for VARIABLE,
2215:000 | DONE cmt | em 16  8 |        |             |                 ; VALUE and DEFER
2216:000 | DONE lbl | em 16  8 | 005680 |             | adjust_z                             
2217:000 | DONE ins | em 16  8 | 005680 | 20 be 59    |                 jsr 0059be           gives us ( nt )
2218:000 | DONE wsp | em 16  8 |        |             |
2219:000 | DONE cmt | em 16  8 |        |             |                 ; z_word is kept six bytes further down
2220:000 | DONE ins | em 16  8 | 005683 | 98          |                 tya                  
2221:000 | DONE ins | em 16  8 | 005684 | 18          |                 clc                  
2222:000 | DONE ins | em 16  8 | 005685 | 69 06 00    |                 adc.# 0006           
2223:000 | DONE ins | em 16  8 | 005688 | a8          |                 tay                  
2224:000 | DONE wsp | em 16  8 |        |             |
2225:000 | DONE ins | em 16  8 | 005689 | b9 00 00    |                 lda.y 0000           LDA 0000,Y
2226:000 | DONE ins | em 16  8 | 00568c | 1a          |                 inc.a                
2227:000 | DONE ins | em 16  8 | 00568d | 1a          |                 inc.a                
2228:000 | DONE ins | em 16  8 | 00568e | 99 00 00    |                 sta.y 0000           
2229:000 | DONE wsp | em 16  8 |        |             |
2230:000 | DONE ins | em 16  8 | 005691 | b4 00       |                 ldy.dx 00            get rid of nt
2231:000 | DONE ins | em 16  8 | 005693 | e8          |                 inx                  
2232:000 | DONE ins | em 16  8 | 005694 | e8          |                 inx                  
2233:000 | DONE wsp | em 16  8 |        |             |
2234:000 | DONE lbl | em 16  8 | 005695 |             | z_constant                           
2234:001 | DONE ins | em 16  8 | 005695 | 60          |                 rts                  
2235:000 | DONE wsp | em 16  8 |        |             |
2236:000 | DONE wsp | em 16  8 |        |             |
2237:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2238:000 | DONE cmt | em 16  8 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
2239:000 | DONE cmt | em 16  8 |        |             | ; Convert old-style character string to address-length pair. Note that the
2240:000 | DONE cmt | em 16  8 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
2241:000 | DONE cmt | em 16  8 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
2242:000 | DONE cmt | em 16  8 |        |             | ; to step through a string character by character.
2243:000 | DONE lbl | em 16  8 | 005696 |             | xt_count                             
2244:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2245:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2246:000 | DONE ins | em 16 16 | 005696 | 98          |                 tya                  
2247:000 | DONE ins | em 16 16 | 005697 | 1a          |                 inc.a                String address starts one char later
2248:000 | DONE wsp | em 16 16 |        |             |
2249:000 | DONE ins | em 16 16 | 005698 | ca          |                 dex                  
2250:000 | DONE ins | em 16 16 | 005699 | ca          |                 dex                  
2251:000 | DONE ins | em 16 16 | 00569a | 95 00       |                 sta.dx 00            NOS
2252:000 | DONE wsp | em 16 16 |        |             |
2253:000 | DONE ins | em 16 16 | 00569c | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
2254:000 | DONE ins | em 16 16 | 00569f | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
2255:000 | DONE ins | em 16 16 | 0056a2 | a8          |                 tay                  TOS
2256:000 | DONE wsp | em 16 16 |        |             |
2257:000 | DONE lbl | em 16 16 | 0056a3 |             | z_count                              
2257:001 | DONE ins | em 16 16 | 0056a3 | 60          |                 rts                  
2258:000 | DONE wsp | em 16 16 |        |             |
2259:000 | DONE wsp | em 16 16 |        |             |
2260:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2261:000 | DONE cmt | em 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
2262:000 | DONE cmt | em 16 16 |        |             | ; Cause following output to appear at beginning of next line
2263:000 | DONE lbl | em 16 16 | 0056a4 |             | xt_cr                                
2264:000 | DONE ins | em 16 16 | 0056a4 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
2265:000 | DONE ins | em 16 16 | 0056a7 | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
2266:000 | DONE wsp | em 16 16 |        |             |
2267:000 | DONE lbl | em 16 16 | 0056aa |             | z_cr                                 ; never reached
2268:000 | DONE wsp | em 16 16 |        |             |
2269:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2270:000 | DONE cmt | em 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
2271:000 | DONE cmt | em 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
2272:000 | DONE cmt | em 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
2273:000 | DONE cmt | em 16 16 |        |             | ; address.
2274:000 | DONE lbl | em 16 16 | 0056aa |             | xt_create                            
2275:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2276:000 | DONE ins | em 16 16 | 0056aa | 20 6a 5b    |                 jsr 005b6a           ( -- addr u )
2277:000 | DONE ins | em 16 16 | 0056ad | d0 06       |                 bne 0056b5           
2278:000 | DONE wsp | em 16 16 |        |             |
2279:000 | DONE cmt | em 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
2280:000 | DONE ins | em 16 16 | 0056af | a9 bd 6f    |                 lda.# 006fbd         
2281:000 | DONE ins | em 16 16 | 0056b2 | 4c cb 68    |                 jmp 0068cb           
2282:000 | DONE wsp | em 16 16 |        |             |
2283:000 | DONE lbl | em 16 16 | 0056b5 |             | create_got_name                      
2284:000 | DONE cmt | em 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
2285:000 | DONE cmt | em 16 16 |        |             |                 ; word
2286:000 | DONE ins | em 16 16 | 0056b5 | a5 00       |                 lda.d 000000         
2287:000 | DONE ins | em 16 16 | 0056b7 | 85 1c       |                 sta.d 00001c         save start of new word
2288:000 | DONE wsp | em 16 16 |        |             |
2289:000 | DONE cmt | em 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
2290:000 | DONE cmt | em 16 16 |        |             |                 ; of the length of the given string. We arrive here with
2291:000 | DONE cmt | em 16 16 |        |             |                 ; ( addr u )
2292:000 | DONE ins | em 16 16 | 0056b9 | 98          |                 tya                  
2293:000 | DONE ins | em 16 16 | 0056ba | 29 ff 00    |                 and.# 00ff           
2294:000 | DONE ins | em 16 16 | 0056bd | 85 1e       |                 sta.d 00001e         save length of name string
2295:000 | DONE wsp | em 16 16 |        |             |
2296:000 | DONE cmt | em 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
2297:000 | DONE cmt | em 16 16 |        |             |                 ; header. This is also the offset for the start of the code
2298:000 | DONE cmt | em 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
2299:000 | DONE cmt | em 16 16 |        |             |                 ; could just allot the space afterwards.
2300:000 | DONE ins | em 16 16 | 0056bf | 18          |                 clc                  
2301:000 | DONE ins | em 16 16 | 0056c0 | 69 08 00    |                 adc.# 0008           
2302:000 | DONE ins | em 16 16 | 0056c3 | 85 20       |                 sta.d 000020         total bytes required for header
2303:000 | DONE wsp | em 16 16 |        |             |
2304:000 | DONE cmt | em 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
2305:000 | DONE cmt | em 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
2306:000 | DONE cmt | em 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
2307:000 | DONE ins | em 16 16 | 0056c5 | 1a          |                 inc.a                
2308:000 | DONE ins | em 16 16 | 0056c6 | 1a          |                 inc.a                
2309:000 | DONE ins | em 16 16 | 0056c7 | 1a          |                 inc.a                
2310:000 | DONE wsp | em 16 16 |        |             |
2311:000 | DONE cmt | em 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
2312:000 | DONE cmt | em 16 16 |        |             |                 ; and so we don't have to fool around with the stack
2313:000 | DONE ins | em 16 16 | 0056c8 | 18          |                 clc                  
2314:000 | DONE ins | em 16 16 | 0056c9 | 65 00       |                 adc.d 000000         
2315:000 | DONE ins | em 16 16 | 0056cb | 85 00       |                 sta.d 000000         
2316:000 | DONE wsp | em 16 16 |        |             |
2317:000 | DONE cmt | em 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
2318:000 | DONE cmt | em 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
2319:000 | DONE cmt | em 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
2320:000 | DONE cmt | em 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
2321:000 | DONE cmt | em 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
2322:000 | DONE ins | em 16 16 | 0056cd | b5 00       |                 lda.dx 00            
2323:000 | DONE ins | em 16 16 | 0056cf | 48          |                 pha                  
2324:000 | DONE wsp | em 16 16 |        |             |
2325:000 | DONE cmt | em 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
2326:000 | DONE ins | em 16 16 | 0056d0 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
2327:000 | DONE ins | em 16 16 | 0056d3 | a5 1e       |                 lda.d 00001e         get length byte
2328:000 | DONE ins | em 16 16 | 0056d5 | 91 1c       |                 sta.diy 00001c       STA (TMP1),Y
2329:000 | DONE ins | em 16 16 | 0056d7 | c8          |                 iny                  
2330:000 | DONE ins | em 16 16 | 0056d8 | c8          |                 iny                  
2331:000 | DONE wsp | em 16 16 |        |             |
2332:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
2333:000 | DONE cmt | em 16 16 |        |             |                 ; current Dictionary Pointer
2334:000 | DONE ins | em 16 16 | 0056d9 | a5 02       |                 lda.d 000002         
2335:000 | DONE ins | em 16 16 | 0056db | 91 1c       |                 sta.diy 00001c       
2336:000 | DONE ins | em 16 16 | 0056dd | c8          |                 iny                  
2337:000 | DONE ins | em 16 16 | 0056de | c8          |                 iny                  
2338:000 | DONE wsp | em 16 16 |        |             |
2339:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
2340:000 | DONE cmt | em 16 16 |        |             |                 ; This begins after the header, so we take the length of the
2341:000 | DONE cmt | em 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
2342:000 | DONE cmt | em 16 16 |        |             |                 ; the address of the start of the word
2343:000 | DONE ins | em 16 16 | 0056df | a5 1c       |                 lda.d 00001c         can't use CP, because we've allotted space
2344:000 | DONE ins | em 16 16 | 0056e1 | 85 02       |                 sta.d 000002         while we've got it, make old CP the new DP
2345:000 | DONE wsp | em 16 16 |        |             |
2346:000 | DONE ins | em 16 16 | 0056e3 | 18          |                 clc                  
2347:000 | DONE ins | em 16 16 | 0056e4 | 65 20       |                 adc.d 000020         total header length
2348:000 | DONE ins | em 16 16 | 0056e6 | 91 1c       |                 sta.diy 00001c       
2349:000 | DONE ins | em 16 16 | 0056e8 | c8          |                 iny                  
2350:000 | DONE ins | em 16 16 | 0056e9 | c8          |                 iny                  
2351:000 | DONE wsp | em 16 16 |        |             |
2352:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
2353:000 | DONE cmt | em 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
2354:000 | DONE cmt | em 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
2355:000 | DONE cmt | em 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
2356:000 | DONE cmt | em 16 16 |        |             |                 ; compilation. The start of the code field is still in A
2357:000 | DONE ins | em 16 16 | 0056ea | 1a          |                 inc.a                
2358:000 | DONE ins | em 16 16 | 0056eb | 1a          |                 inc.a                
2359:000 | DONE ins | em 16 16 | 0056ec | 1a          |                 inc.a                
2360:000 | DONE ins | em 16 16 | 0056ed | 91 1c       |                 sta.diy 00001c       
2361:000 | DONE ins | em 16 16 | 0056ef | c8          |                 iny                  
2362:000 | DONE ins | em 16 16 | 0056f0 | c8          |                 iny                  
2363:000 | DONE wsp | em 16 16 |        |             |
2364:000 | DONE cmt | em 16 16 |        |             |                 ; BYTE 8: Start of name string
2365:000 | DONE cmt | em 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
2366:000 | DONE cmt | em 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
2367:000 | DONE cmt | em 16 16 |        |             |                 ; so we can use the same loop index
2368:000 | DONE ins | em 16 16 | 0056f1 | 68          |                 pla                  get back string address
2369:000 | DONE ins | em 16 16 | 0056f2 | 38          |                 sec                  
2370:000 | DONE ins | em 16 16 | 0056f3 | e9 08 00    |                 sbc.# 0008           
2371:000 | DONE ins | em 16 16 | 0056f6 | 85 20       |                 sta.d 000020         
2372:000 | DONE ins | em 16 16 | 0056f8 | e2 20       |                 sep 20               
2372:001 | DONE ctl | em  8 16 |        |             |         .!a8
2373:000 | DONE lbl | em  8 16 | 0056fa |             | @                                    
2374:000 | DONE ins | em  8 16 | 0056fa | b1 20       |                 lda.diy 000020       
2375:000 | DONE ins | em  8 16 | 0056fc | 91 1c       |                 sta.diy 00001c       
2376:000 | DONE ins | em  8 16 | 0056fe | c8          |                 iny                  
2377:000 | DONE ins | em  8 16 | 0056ff | c6 1e       |                 dec.d 00001e         
2378:000 | DONE ins | em  8 16 | 005701 | d0 f7       |                 bne 0056fa           
2379:000 | DONE wsp | em  8 16 |        |             |
2380:000 | DONE cmt | em  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
2381:000 | DONE cmt | em  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
2382:000 | DONE cmt | em  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
2383:000 | DONE cmt | em  8 16 |        |             |                 ; good
2384:000 | DONE ins | em  8 16 | 005703 | a9 20       |                 lda.# 20             opcode of JSR
2385:000 | DONE ins | em  8 16 | 005705 | 91 1c       |                 sta.diy 00001c       
2386:000 | DONE ins | em  8 16 | 005707 | c8          |                 iny                  single increase only because we have 8-bit A
2387:000 | DONE wsp | em  8 16 |        |             |
2388:000 | DONE ins | em  8 16 | 005708 | a9 3f       |                 lda.# .lsb 00683f    
2389:000 | DONE ins | em  8 16 | 00570a | 91 1c       |                 sta.diy 00001c       
2390:000 | DONE ins | em  8 16 | 00570c | c8          |                 iny                  
2391:000 | DONE wsp | em  8 16 |        |             |
2392:000 | DONE ins | em  8 16 | 00570d | a9 68       |                 lda.# .msb 00683f    
2393:000 | DONE ins | em  8 16 | 00570f | 91 1c       |                 sta.diy 00001c       
2394:000 | DONE wsp | em  8 16 |        |             |
2395:000 | DONE ins | em  8 16 | 005711 | c2 20       |                 rep 20               
2395:001 | DONE ctl | em 16 16 |        |             |         .!a16
2396:000 | DONE cmt | em 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
2397:000 | DONE ins | em 16 16 | 005713 | b4 02       |                 ldy.dx 02            
2398:000 | DONE ins | em 16 16 | 005715 | e8          |                 inx                  
2399:000 | DONE ins | em 16 16 | 005716 | e8          |                 inx                  
2400:000 | DONE ins | em 16 16 | 005717 | e8          |                 inx                  
2401:000 | DONE ins | em 16 16 | 005718 | e8          |                 inx                  
2402:000 | DONE wsp | em 16 16 |        |             |
2403:000 | DONE lbl | em 16 16 | 005719 |             | z_create                             
2403:001 | DONE ins | em 16 16 | 005719 | 60          |                 rts                  
2404:000 | DONE wsp | em 16 16 |        |             |
2405:000 | DONE wsp | em 16 16 |        |             |
2406:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2407:000 | DONE cmt | em 16 16 |        |             | ; DEFER ( "name" -- ) X bytes / X cycles
2408:000 | DONE cmt | em 16 16 |        |             | ; Reserve an name that can be linked to various xt by IS. The ANSI reference
2409:000 | DONE cmt | em 16 16 |        |             | ; implementation is CREATE ['] ABORT , DOES> @ EXECUTE ; but we use this as
2410:000 | DONE cmt | em 16 16 |        |             | ; a low-level word so we can set stuff up earlier and faster
2411:000 | DONE lbl | em 16 16 | 00571a |             | xt_defer                             
2412:000 | DONE ins | em 16 16 | 00571a | 20 aa 56    |                 jsr 0056aa           
2413:000 | DONE wsp | em 16 16 |        |             |
2414:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2415:000 | DONE cmt | em 16 16 |        |             |                 ; actually want DODEFER this time. Go back two bytes and repace
2416:000 | DONE cmt | em 16 16 |        |             |                 ; the subroutine jump target
2417:000 | DONE ins | em 16 16 | 00571d | a5 00       |                 lda.d 000000         
2418:000 | DONE ins | em 16 16 | 00571f | 3a          |                 dec.a                
2419:000 | DONE ins | em 16 16 | 005720 | 3a          |                 dec.a                
2420:000 | DONE ins | em 16 16 | 005721 | 85 1c       |                 sta.d 00001c         
2421:000 | DONE wsp | em 16 16 |        |             |
2422:000 | DONE ins | em 16 16 | 005723 | a9 23 68    |                 lda.# 006823         
2423:000 | DONE ins | em 16 16 | 005726 | 92 1c       |                 sta.di 00001c        STA (TMP1)
2424:000 | DONE wsp | em 16 16 |        |             |
2425:000 | DONE cmt | em 16 16 |        |             |                 ; DODEFER executes the next address it finds after its call. As
2426:000 | DONE cmt | em 16 16 |        |             |                 ; a default, we include the error "Defer not defined"
2427:000 | DONE ins | em 16 16 | 005728 | a9 2c 68    |                 lda.# 00682c         
2428:000 | DONE ins | em 16 16 | 00572b | 92 00       |                 sta.di 000000        
2429:000 | DONE ins | em 16 16 | 00572d | e6 00       |                 inc.d 000000         
2430:000 | DONE ins | em 16 16 | 00572f | e6 00       |                 inc.d 000000         
2431:000 | DONE wsp | em 16 16 |        |             |
2432:000 | DONE ins | em 16 16 | 005731 | 4c 80 56    |                 jmp 005680           adjust the header to the correct length
2433:000 | DONE wsp | em 16 16 |        |             |
2434:000 | DONE lbl | em 16 16 | 005734 |             | z_defer                              ; never reached
2435:000 | DONE wsp | em 16 16 |        |             |
2436:000 | DONE wsp | em 16 16 |        |             |
2437:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2438:000 | DONE cmt | em 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
2439:000 | DONE cmt | em 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
2440:000 | DONE cmt | em 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
2441:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2442:000 | DONE cmt | em 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
2443:000 | DONE cmt | em 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
2444:000 | DONE cmt | em 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
2445:000 | DONE cmt | em 16 16 |        |             | ; following pForth and Gforth.
2446:000 | DONE lbl | em 16 16 | 005734 |             | xt_digitq                            
2447:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2448:000 | DONE ins | em 16 16 | 005734 | 98          |                 tya                  
2449:000 | DONE ins | em 16 16 | 005735 | 29 ff 00    |                 and.# 00ff           paranoid
2450:000 | DONE wsp | em 16 16 |        |             |
2451:000 | DONE ins | em 16 16 | 005738 | e2 20       |                 sep 20               
2451:001 | DONE ctl | em  8 16 |        |             |         .!a8
2452:000 | DONE cmt | em  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
2453:000 | DONE ins | em  8 16 | 00573a | c9 30       |                 cmp.# 30             
2454:000 | DONE ins | em  8 16 | 00573c | 90 1d       |                 bcc 00575b           
2455:000 | DONE wsp | em  8 16 |        |             |
2456:000 | DONE cmt | em  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
2457:000 | DONE cmt | em  8 16 |        |             |                 ; a normal number
2458:000 | DONE ins | em  8 16 | 00573e | c9 3a       |                 cmp.# 00003a         This is ':'
2459:000 | DONE ins | em  8 16 | 005740 | 90 12       |                 bcc 005754           
2460:000 | DONE wsp | em  8 16 |        |             |
2461:000 | DONE cmt | em  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
2462:000 | DONE cmt | em  8 16 |        |             |                 ; we can treat the whole range as a number
2463:000 | DONE ins | em  8 16 | 005742 | c9 40       |                 cmp.# 000040         This is '@'
2464:000 | DONE ins | em  8 16 | 005744 | 90 15       |                 bcc 00575b           
2465:000 | DONE wsp | em  8 16 |        |             |
2466:000 | DONE cmt | em  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
2467:000 | DONE ins | em  8 16 | 005746 | c9 61       |                 cmp.# 61             
2468:000 | DONE ins | em  8 16 | 005748 | 90 07       |                 bcc 005751           not lower case, too low
2469:000 | DONE ins | em  8 16 | 00574a | c9 7b       |                 cmp.# 00007b         
2470:000 | DONE ins | em  8 16 | 00574c | b0 03       |                 bcs 005751           not lower case, too high
2471:000 | DONE wsp | em  8 16 |        |             |
2472:000 | DONE ins | em  8 16 | 00574e | 18          |                 clc                  just right
2473:000 | DONE ins | em  8 16 | 00574f | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
2474:000 | DONE wsp | em  8 16 |        |             |
2475:000 | DONE lbl | em  8 16 | 005751 |             | dq_case_done                         
2476:000 | DONE cmt | em  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
2477:000 | DONE cmt | em  8 16 |        |             |                 ; whole range as one number
2478:000 | DONE ins | em  8 16 | 005751 | 38          |                 sec                  
2479:000 | DONE ins | em  8 16 | 005752 | e9 07       |                 sbc.# 07             fall through to dq_checkbase
2480:000 | DONE wsp | em  8 16 |        |             |
2481:000 | DONE lbl | em  8 16 | 005754 |             | dq_checkbase                         
2482:000 | DONE cmt | em  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
2483:000 | DONE ins | em  8 16 | 005754 | 38          |                 sec                  
2484:000 | DONE ins | em  8 16 | 005755 | e9 30       |                 sbc.# 30             This is also the actual conversion step
2485:000 | DONE ins | em  8 16 | 005757 | c5 16       |                 cmp.d 000016         
2486:000 | DONE ins | em  8 16 | 005759 | 90 0b       |                 bcc 005766           
2487:000 | DONE wsp | em  8 16 |        |             |
2488:000 | DONE lbl | em  8 16 | 00575b |             | dq_notdigit                          
2489:000 | DONE cmt | em  8 16 |        |             |                 ; not a digit, add a false flag
2490:000 | DONE ins | em  8 16 | 00575b | ca          |                 dex                  
2491:000 | DONE ins | em  8 16 | 00575c | ca          |                 dex                  
2492:000 | DONE ins | em  8 16 | 00575d | 94 00       |                 sty.dx 00            keep the offending character in NOS
2493:000 | DONE ins | em  8 16 | 00575f | a0 00 00    |                 ldy.# 0000           
2494:000 | DONE ins | em  8 16 | 005762 | c2 20       |                 rep 20               
2494:001 | DONE ctl | em 16 16 |        |             |         .!a16
2495:000 | DONE ins | em 16 16 | 005764 | 80 09       |                 bra 00576f           
2496:000 | DONE wsp | em 16 16 |        |             |
2497:000 | DONE lbl | em 16 16 | 005766 |             | dq_success                           
2498:000 | DONE ins | em 16 16 | 005766 | ca          |                 dex                  
2499:000 | DONE ins | em 16 16 | 005767 | ca          |                 dex                  
2500:000 | DONE ins | em 16 16 | 005768 | c2 20       |                 rep 20               
2500:001 | DONE ctl | em 16 16 |        |             |         .!a16
2501:000 | DONE ins | em 16 16 | 00576a | 95 00       |                 sta.dx 00            put the number in NOS
2502:000 | DONE ins | em 16 16 | 00576c | a0 ff ff    |                 ldy.# 0ffff          
2503:000 | DONE wsp | em 16 16 |        |             |
2504:000 | DONE lbl | em 16 16 | 00576f |             | z_digitq                             
2504:001 | DONE ins | em 16 16 | 00576f | 60          |                 rts                  
2505:000 | DONE wsp | em 16 16 |        |             |
2506:000 | DONE wsp | em 16 16 |        |             |
2507:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2508:000 | DONE cmt | em 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
2509:000 | DONE cmt | em 16 16 |        |             | ; Add two double cell numbers
2510:000 | DONE lbl | em 16 16 | 005770 |             | xt_dplus                             
2511:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2512:000 | DONE ins | em 16 16 | 005770 | 5a          |                 phy                  save hi word of first number, frees Y
2513:000 | DONE ins | em 16 16 | 005771 | b5 00       |                 lda.dx 00            lo word of first number
2514:000 | DONE ins | em 16 16 | 005773 | 18          |                 clc                  
2515:000 | DONE ins | em 16 16 | 005774 | 75 04       |                 adc.dx 04            add lo word of second number
2516:000 | DONE ins | em 16 16 | 005776 | a8          |                 tay                  
2517:000 | DONE wsp | em 16 16 |        |             |
2518:000 | DONE ins | em 16 16 | 005777 | 68          |                 pla                  get hi word of first number
2519:000 | DONE ins | em 16 16 | 005778 | 75 02       |                 adc.dx 02            add hi word of second number
2520:000 | DONE wsp | em 16 16 |        |             |
2521:000 | DONE ins | em 16 16 | 00577a | e8          |                 inx                  
2522:000 | DONE ins | em 16 16 | 00577b | e8          |                 inx                  
2523:000 | DONE ins | em 16 16 | 00577c | e8          |                 inx                  
2524:000 | DONE ins | em 16 16 | 00577d | e8          |                 inx                  
2525:000 | DONE wsp | em 16 16 |        |             |
2526:000 | DONE ins | em 16 16 | 00577e | 94 00       |                 sty.dx 00            lo result goes NOS
2527:000 | DONE ins | em 16 16 | 005780 | a8          |                 tay                  to result goes TOS
2528:000 | DONE wsp | em 16 16 |        |             |
2529:000 | DONE lbl | em 16 16 | 005781 |             | z_dplus                              
2529:001 | DONE ins | em 16 16 | 005781 | 60          |                 rts                  
2530:000 | DONE wsp | em 16 16 |        |             |
2531:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2532:000 | DONE cmt | em 16 16 |        |             | ; DMINUS ( d d -- d ) X bytes / X cycles
2533:000 | DONE cmt | em 16 16 |        |             | ; Subtract two double cell numbers
2534:000 | DONE lbl | em 16 16 | 005782 |             | xt_dminus                            
2535:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2536:000 | DONE ins | em 16 16 | 005782 | b5 04       |                 lda.dx 04            lo word NOS
2537:000 | DONE ins | em 16 16 | 005784 | 38          |                 sec                  
2538:000 | DONE ins | em 16 16 | 005785 | f5 00       |                 sbc.dx 00            lo word TOS
2539:000 | DONE ins | em 16 16 | 005787 | 48          |                 pha                  
2540:000 | DONE wsp | em 16 16 |        |             |
2541:000 | DONE ins | em 16 16 | 005788 | 94 00       |                 sty.dx 00            use as temp storage for hi word TOS
2542:000 | DONE ins | em 16 16 | 00578a | b5 02       |                 lda.dx 02            hi word, NOS
2543:000 | DONE ins | em 16 16 | 00578c | f5 00       |                 sbc.dx 00            hi word, TOS
2544:000 | DONE ins | em 16 16 | 00578e | a8          |                 tay                  result hi word now TOS
2545:000 | DONE wsp | em 16 16 |        |             |
2546:000 | DONE ins | em 16 16 | 00578f | e8          |                 inx                  
2547:000 | DONE ins | em 16 16 | 005790 | e8          |                 inx                  
2548:000 | DONE ins | em 16 16 | 005791 | e8          |                 inx                  
2549:000 | DONE ins | em 16 16 | 005792 | e8          |                 inx                  
2550:000 | DONE wsp | em 16 16 |        |             |
2551:000 | DONE ins | em 16 16 | 005793 | 68          |                 pla                  
2552:000 | DONE ins | em 16 16 | 005794 | 95 00       |                 sta.dx 00            result lo word now NOS
2553:000 | DONE wsp | em 16 16 |        |             |
2554:000 | DONE lbl | em 16 16 | 005796 |             | z_dminus                             
2554:001 | DONE ins | em 16 16 | 005796 | 60          |                 rts                  
2555:000 | DONE wsp | em 16 16 |        |             |
2556:000 | DONE wsp | em 16 16 |        |             |
2557:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2558:000 | DONE cmt | em 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2559:000 | DONE cmt | em 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2560:000 | DONE cmt | em 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2561:000 | DONE cmt | em 16 16 |        |             | ; TODO make this work the way Gforth's does
2562:000 | DONE lbl | em 16 16 | 005797 |             | xt_dtos                              
2563:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2564:000 | DONE ins | em 16 16 | 005797 | b4 00       |                 ldy.dx 00            
2565:000 | DONE ins | em 16 16 | 005799 | e8          |                 inx                  
2566:000 | DONE ins | em 16 16 | 00579a | e8          |                 inx                  
2567:000 | DONE wsp | em 16 16 |        |             |
2568:000 | DONE lbl | em 16 16 | 00579b |             | z_dtos                               
2568:001 | DONE ins | em 16 16 | 00579b | 60          |                 rts                  
2569:000 | DONE wsp | em 16 16 |        |             |
2570:000 | DONE wsp | em 16 16 |        |             |
2571:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2572:000 | DONE cmt | em 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2573:000 | DONE cmt | em 16 16 |        |             | ; Return the absolute value of a double number
2574:000 | DONE cmt | em 16 16 |        |             | ; TODO recode in assembler
2575:000 | DONE lbl | em 16 16 | 00579c |             | xt_dabs                              
2576:000 | DONE cmt | em 16 16 |        |             |                 ; double cell is TOS
2577:000 | DONE ins | em 16 16 | 00579c | 98          |                 tya                  force flag test
2578:000 | DONE ins | em 16 16 | 00579d | f0 03       |                 beq 0057a2           already positive, life is good
2579:000 | DONE wsp | em 16 16 |        |             |
2580:000 | DONE ins | em 16 16 | 00579f | 20 b8 57    |                 jsr 0057b8           
2581:000 | DONE wsp | em 16 16 |        |             |
2582:000 | DONE lbl | em 16 16 | 0057a2 |             | z_dabs                               
2582:001 | DONE ins | em 16 16 | 0057a2 | 60          |                 rts                  
2583:000 | DONE wsp | em 16 16 |        |             |
2584:000 | DONE wsp | em 16 16 |        |             |
2585:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2586:000 | DONE cmt | em 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2587:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 10
2588:000 | DONE lbl | em 16 16 | 0057a3 |             | xt_decimal                           
2589:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2590:000 | DONE ins | em 16 16 | 0057a3 | a9 0a 00    |                 lda.# 000a           
2591:000 | DONE ins | em 16 16 | 0057a6 | 85 16       |                 sta.d 000016         
2592:000 | DONE wsp | em 16 16 |        |             |
2593:000 | DONE lbl | em 16 16 | 0057a8 |             | z_decimal                            
2593:001 | DONE ins | em 16 16 | 0057a8 | 60          |                 rts                  
2594:000 | DONE wsp | em 16 16 |        |             |
2595:000 | DONE wsp | em 16 16 |        |             |
2596:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2597:000 | DONE cmt | em 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2598:000 | DONE cmt | em 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2599:000 | DONE cmt | em 16 16 |        |             | ; Assumes X is valid as the DSP.
2600:000 | DONE lbl | em 16 16 | 0057a9 |             | xt_depth                             
2601:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2602:000 | DONE cmt | em 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2603:000 | DONE ins | em 16 16 | 0057a9 | 86 22       |                 stx.d 000022         
2604:000 | DONE ins | em 16 16 | 0057ab | a9 ff 00    |                 lda.# 0000ff         
2605:000 | DONE ins | em 16 16 | 0057ae | 38          |                 sec                  
2606:000 | DONE ins | em 16 16 | 0057af | e5 22       |                 sbc.d 000022         
2607:000 | DONE wsp | em 16 16 |        |             |
2608:000 | DONE cmt | em 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2609:000 | DONE ins | em 16 16 | 0057b1 | 4a          |                 lsr.a                
2610:000 | DONE wsp | em 16 16 |        |             |
2611:000 | DONE ins | em 16 16 | 0057b2 | ca          |                 dex                  
2612:000 | DONE ins | em 16 16 | 0057b3 | ca          |                 dex                  
2613:000 | DONE ins | em 16 16 | 0057b4 | 94 00       |                 sty.dx 00            
2614:000 | DONE wsp | em 16 16 |        |             |
2615:000 | DONE cmt | em 16 16 |        |             |                 ; push result to stack
2616:000 | DONE ins | em 16 16 | 0057b6 | a8          |                 tay                  
2617:000 | DONE wsp | em 16 16 |        |             |
2618:000 | DONE lbl | em 16 16 | 0057b7 |             | z_depth                              
2618:001 | DONE ins | em 16 16 | 0057b7 | 60          |                 rts                  
2619:000 | DONE wsp | em 16 16 |        |             |
2620:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2621:000 | DONE cmt | em 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2622:000 | DONE cmt | em 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2623:000 | DONE lbl | em 16 16 | 0057b8 |             | xt_dnegate                           
2624:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2625:000 | DONE cmt | em 16 16 |        |             |                 ; start off with LSW (in NOS)
2626:000 | DONE ins | em 16 16 | 0057b8 | b5 00       |                 lda.dx 00            
2627:000 | DONE ins | em 16 16 | 0057ba | 49 ff ff    |                 eor.# 0ffff          
2628:000 | DONE wsp | em 16 16 |        |             |
2629:000 | DONE cmt | em 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2630:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
2631:000 | DONE ins | em 16 16 | 0057bd | 18          |                 clc                  
2632:000 | DONE ins | em 16 16 | 0057be | 69 01 00    |                 adc.# 0001           
2633:000 | DONE ins | em 16 16 | 0057c1 | 95 00       |                 sta.dx 00            
2634:000 | DONE wsp | em 16 16 |        |             |
2635:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
2636:000 | DONE ins | em 16 16 | 0057c3 | 98          |                 tya                  
2637:000 | DONE ins | em 16 16 | 0057c4 | 49 ff ff    |                 eor.# 0ffff          
2638:000 | DONE ins | em 16 16 | 0057c7 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2639:000 | DONE ins | em 16 16 | 0057ca | a8          |                 tay                  
2640:000 | DONE wsp | em 16 16 |        |             |
2641:000 | DONE lbl | em 16 16 | 0057cb |             | z_dnegate                            
2641:001 | DONE ins | em 16 16 | 0057cb | 60          |                 rts                  
2642:000 | DONE wsp | em 16 16 |        |             |
2643:000 | DONE wsp | em 16 16 |        |             |
2644:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2645:000 | DONE cmt | em 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2646:000 | DONE cmt | em 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2647:000 | DONE cmt | em 16 16 |        |             | ; docs/create-does.txt and
2648:000 | DONE cmt | em 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2649:000 | DONE cmt | em 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2650:000 | DONE cmt | em 16 16 |        |             | ; TODO see if this creates a correct z_word address
2651:000 | DONE lbl | em 16 16 | 0057cc |             | xt_does                              
2652:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2653:000 | DONE ins | em 16 16 | 0057cc | f4 d9 57    |                 phe.# 0057d9         
2654:000 | DONE ins | em 16 16 | 0057cf | 20 aa 68    |                 jsr 0068aa           
2655:000 | DONE wsp | em 16 16 |        |             |
2656:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2657:000 | DONE cmt | em 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2658:000 | DONE ins | em 16 16 | 0057d2 | f4 32 68    |                 phe.# 006832         
2659:000 | DONE ins | em 16 16 | 0057d5 | 20 aa 68    |                 jsr 0068aa           
2660:000 | DONE wsp | em 16 16 |        |             |
2661:000 | DONE lbl | em 16 16 | 0057d8 |             | z_does                               
2661:001 | DONE ins | em 16 16 | 0057d8 | 60          |                 rts                  
2662:000 | DONE wsp | em 16 16 |        |             |
2663:000 | DONE lbl | em 16 16 | 0057d9 |             | does_rt                              
2664:000 | DONE cmt | em 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2665:000 | DONE cmt | em 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2666:000 | DONE cmt | em 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2667:000 | DONE cmt | em 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2668:000 | DONE cmt | em 16 16 |        |             |                 ; the return addresses
2669:000 | DONE ins | em 16 16 | 0057d9 | 68          |                 pla                  
2670:000 | DONE ins | em 16 16 | 0057da | 1a          |                 inc.a                increase by one because of RTS mechanics
2671:000 | DONE ins | em 16 16 | 0057db | 85 1c       |                 sta.d 00001c         
2672:000 | DONE wsp | em 16 16 |        |             |
2673:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2674:000 | DONE cmt | em 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2675:000 | DONE cmt | em 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2676:000 | DONE cmt | em 16 16 |        |             |                 ; now.
2677:000 | DONE ins | em 16 16 | 0057dd | a5 02       |                 lda.d 000002         
2678:000 | DONE wsp | em 16 16 |        |             |
2679:000 | DONE cmt | em 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2680:000 | DONE cmt | em 16 16 |        |             |                 ; header.tasm for details).
2681:000 | DONE ins | em 16 16 | 0057df | 18          |                 clc                  
2682:000 | DONE ins | em 16 16 | 0057e0 | 69 04 00    |                 adc.# 0004           
2683:000 | DONE ins | em 16 16 | 0057e3 | 85 1e       |                 sta.d 00001e         
2684:000 | DONE wsp | em 16 16 |        |             |
2685:000 | DONE cmt | em 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2686:000 | DONE cmt | em 16 16 |        |             |                 ; opcode
2687:000 | DONE ins | em 16 16 | 0057e5 | b2 1e       |                 lda.di 00001e        LDA (TMP2)
2688:000 | DONE ins | em 16 16 | 0057e7 | 1a          |                 inc.a                
2689:000 | DONE ins | em 16 16 | 0057e8 | 85 1e       |                 sta.d 00001e         Points to address to be replaced
2690:000 | DONE wsp | em 16 16 |        |             |
2691:000 | DONE cmt | em 16 16 |        |             |                 ; Replace the DOVAR address
2692:000 | DONE ins | em 16 16 | 0057ea | a5 1c       |                 lda.d 00001c         
2693:000 | DONE ins | em 16 16 | 0057ec | 92 1e       |                 sta.di 00001e        STA (TMP2)
2694:000 | DONE wsp | em 16 16 |        |             |
2695:000 | DONE cmt | em 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2696:000 | DONE cmt | em 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2697:000 | DONE cmt | em 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2698:000 | DONE ins | em 16 16 | 0057ee | 60          |                 rts                  
2699:000 | DONE wsp | em 16 16 |        |             |
2700:000 | DONE wsp | em 16 16 |        |             |
2701:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2702:000 | DONE cmt | em 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2703:000 | DONE cmt | em 16 16 |        |             | ; Drop first entry on Data Stack
2704:000 | DONE wsp | em 16 16 |        |             |
2705:000 | DONE lbl | em 16 16 | 0057ef |             | xt_drop                              
2706:000 | DONE ins | em 16 16 | 0057ef | b4 00       |                 ldy.dx 00            
2707:000 | DONE ins | em 16 16 | 0057f1 | e8          |                 inx                  
2708:000 | DONE ins | em 16 16 | 0057f2 | e8          |                 inx                  
2709:000 | DONE wsp | em 16 16 |        |             |
2710:000 | DONE lbl | em 16 16 | 0057f3 |             | z_drop                               
2710:001 | DONE ins | em 16 16 | 0057f3 | 60          |                 rts                  
2711:000 | DONE wsp | em 16 16 |        |             |
2712:000 | DONE wsp | em 16 16 |        |             |
2713:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2714:000 | DONE cmt | em 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2715:000 | DONE cmt | em 16 16 |        |             | ; Print a region of memory in a pretty way. This is used interactively, so we
2716:000 | DONE cmt | em 16 16 |        |             | ; don't care about speed (humans are slow) and concentrate on size instead,
2717:000 | DONE cmt | em 16 16 |        |             | ; using JSR where we can. This is a primtive version until we get loops ready
2718:000 | DONE lbl | em 16 16 | 0057f4 |             | xt_dump                              
2719:000 | DONE ins | em 16 16 | 0057f4 | 98          |                 tya                  force flag test
2720:000 | DONE lbl | em 16 16 | 0057f5 |             | dump_loop                            
2721:000 | DONE ins | em 16 16 | 0057f5 | f0 14       |                 beq 00580b           
2722:000 | DONE wsp | em 16 16 |        |             |
2723:000 | DONE ins | em 16 16 | 0057f7 | 5a          |                 phy                  save counter
2724:000 | DONE ins | em 16 16 | 0057f8 | a1 00       |                 lda.dxi 00           get byte from address
2725:000 | DONE ins | em 16 16 | 0057fa | 29 ff 00    |                 and.# 00ff           
2726:000 | DONE ins | em 16 16 | 0057fd | a8          |                 tay                  
2727:000 | DONE ins | em 16 16 | 0057fe | f6 00       |                 inc.dx 00            address modified in place
2728:000 | DONE wsp | em 16 16 |        |             |
2729:000 | DONE ins | em 16 16 | 005800 | 20 fe 5d    |                 jsr 005dfe           U.
2730:000 | DONE wsp | em 16 16 |        |             |
2731:000 | DONE ins | em 16 16 | 005803 | ca          |                 dex                  
2732:000 | DONE ins | em 16 16 | 005804 | ca          |                 dex                  
2733:000 | DONE ins | em 16 16 | 005805 | 94 00       |                 sty.dx 00            
2734:000 | DONE ins | em 16 16 | 005807 | 7a          |                 ply                  get counter back
2735:000 | DONE wsp | em 16 16 |        |             |
2736:000 | DONE ins | em 16 16 | 005808 | 88          |                 dey                  
2737:000 | DONE ins | em 16 16 | 005809 | 80 ea       |                 bra 0057f5           
2738:000 | DONE wsp | em 16 16 |        |             |
2739:000 | DONE lbl | em 16 16 | 00580b |             | dump_done                            
2740:000 | DONE ins | em 16 16 | 00580b | 20 a4 56    |                 jsr 0056a4           
2741:000 | DONE ins | em 16 16 | 00580e | 20 e1 53    |                 jsr 0053e1           
2742:000 | DONE wsp | em 16 16 |        |             |
2743:000 | DONE lbl | em 16 16 | 005811 |             | z_dump                               
2743:001 | DONE ins | em 16 16 | 005811 | 60          |                 rts                  
2744:000 | DONE wsp | em 16 16 |        |             |
2745:000 | DONE wsp | em 16 16 |        |             |
2746:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2747:000 | DONE cmt | em 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2748:000 | DONE cmt | em 16 16 |        |             | ; Duplicate first entry on Data Stack
2749:000 | DONE lbl | em 16 16 | 005812 |             | xt_dup                               
2750:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2751:000 | DONE ins | em 16 16 | 005812 | ca          |                 dex                  
2752:000 | DONE ins | em 16 16 | 005813 | ca          |                 dex                  
2753:000 | DONE ins | em 16 16 | 005814 | 94 00       |                 sty.dx 00            
2754:000 | DONE wsp | em 16 16 |        |             |
2755:000 | DONE lbl | em 16 16 | 005816 |             | z_dup                                
2755:001 | DONE ins | em 16 16 | 005816 | 60          |                 rts                  
2756:000 | DONE wsp | em 16 16 |        |             |
2757:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2758:000 | DONE cmt | em 16 16 |        |             | ; EMIT ( char -- ) X bytes / X cycles
2759:000 | DONE cmt | em 16 16 |        |             | ; Run-time default for EMIT. The user can revector this by changing the value of
2760:000 | DONE cmt | em 16 16 |        |             | ; the OUTPUT variable. We ignore the MSB completely, and do not check to see if
2761:000 | DONE cmt | em 16 16 |        |             | ; we have been given a valid ASCII character. Note that we keep the A register
2762:000 | DONE cmt | em 16 16 |        |             | ; in 16 bit mode all the time - it is up to the kernel routine stored at OUTPUT
2763:000 | DONE cmt | em 16 16 |        |             | ; to deal with that.
2764:000 | DONE lbl | em 16 16 | 005817 |             | xt_emit                              
2765:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2766:000 | DONE cmt | em 16 16 |        |             |                 ; we put the value in A so we don't have to switch the XY
2767:000 | DONE cmt | em 16 16 |        |             |                 ; register size
2768:000 | DONE ins | em 16 16 | 005817 | 98          |                 tya                  
2769:000 | DONE wsp | em 16 16 |        |             |
2770:000 | DONE cmt | em 16 16 |        |             |                 ; we DROP immediately so we can JMP.I to the output routine and
2771:000 | DONE cmt | em 16 16 |        |             |                 ; can use its RTS to take us back to the caller
2772:000 | DONE ins | em 16 16 | 005818 | b4 00       |                 ldy.dx 00            
2773:000 | DONE ins | em 16 16 | 00581a | e8          |                 inx                  
2774:000 | DONE ins | em 16 16 | 00581b | e8          |                 inx                  
2775:000 | DONE lbl | em 16 16 | 00581c |             | emit_a                               
2776:000 | DONE cmt | em 16 16 |        |             |                 ; Lots of times we want to print the character in A without
2777:000 | DONE cmt | em 16 16 |        |             |                 ; fooling around with the Data Stack. EMIT_A assumes a 16 bit
2778:000 | DONE cmt | em 16 16 |        |             |                 ; wide A register with the character in LSB and does not touch
2779:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack, but can still be vectored via OUTPUT. Call it
2780:000 | DONE cmt | em 16 16 |        |             |                 ; with JSR as you would XT_EMIT
2781:000 | DONE ins | em 16 16 | 00581c | 6c 0e 00    |                 jmp.i 00000e         call to kernel, JSR/RTS
2782:000 | DONE wsp | em 16 16 |        |             |
2783:000 | DONE lbl | em 16 16 | 00581f |             | z_emit                               ; never reached
2784:000 | DONE wsp | em 16 16 |        |             |
2785:000 | DONE wsp | em 16 16 |        |             |
2786:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2787:000 | DONE cmt | em 16 16 |        |             | ; ERASE ( addr u -- ) X bytes / X cycles
2788:000 | DONE cmt | em 16 16 |        |             | ; Set a region of memory to zero. Uses tmp2
2789:000 | DONE lbl | em 16 16 | 00581f |             | xt_erase                             
2790:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2791:000 | DONE ins | em 16 16 | 00581f | ca          |                 dex                  
2792:000 | DONE ins | em 16 16 | 005820 | ca          |                 dex                  
2793:000 | DONE ins | em 16 16 | 005821 | 94 00       |                 sty.dx 00            
2794:000 | DONE wsp | em 16 16 |        |             |
2795:000 | DONE ins | em 16 16 | 005823 | a0 00 00    |                 ldy.# 0000           falls through to FILL
2796:000 | DONE wsp | em 16 16 |        |             |
2797:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2798:000 | DONE cmt | em 16 16 |        |             | ; FILL ( addr u b -- ) X bytes / X cycles
2799:000 | DONE cmt | em 16 16 |        |             | ; Fill the given region of memory with the LSB of the TOS. Shares code with
2800:000 | DONE cmt | em 16 16 |        |             | ; ERASE
2801:000 | DONE lbl | em 16 16 | 005826 |             | xt_fill                              
2802:000 | DONE ins | em 16 16 | 005826 | b5 02       |                 lda.dx 02            address is 3OS
2803:000 | DONE ins | em 16 16 | 005828 | 85 1e       |                 sta.d 00001e         
2804:000 | DONE wsp | em 16 16 |        |             |
2805:000 | DONE ins | em 16 16 | 00582a | 98          |                 tya                  
2806:000 | DONE ins | em 16 16 | 00582b | b4 00       |                 ldy.dx 00            don't bother with drop, to it later
2807:000 | DONE ins | em 16 16 | 00582d | e2 20       |                 sep 20               
2807:001 | DONE ctl | em  8 16 |        |             |         .!a8
2808:000 | DONE lbl | em  8 16 | 00582f |             | erase_loop                           
2809:000 | DONE ins | em  8 16 | 00582f | 88          |                 dey                  
2810:000 | DONE ins | em  8 16 | 005830 | 30 04       |                 bmi 005836           
2811:000 | DONE wsp | em  8 16 |        |             |
2812:000 | DONE ins | em  8 16 | 005832 | 91 1e       |                 sta.diy 00001e       
2813:000 | DONE ins | em  8 16 | 005834 | 80 f9       |                 bra 00582f           
2814:000 | DONE wsp | em  8 16 |        |             |
2815:000 | DONE lbl | em  8 16 | 005836 |             | erase_done                           
2816:000 | DONE ins | em  8 16 | 005836 | c2 20       |                 rep 20               
2816:001 | DONE ctl | em 16 16 |        |             |         .!a16
2817:000 | DONE ins | em 16 16 | 005838 | b4 02       |                 ldy.dx 02            dump three elements off the sack
2818:000 | DONE ins | em 16 16 | 00583a | 8a          |                 txa                  
2819:000 | DONE ins | em 16 16 | 00583b | 18          |                 clc                  
2820:000 | DONE ins | em 16 16 | 00583c | 69 06 00    |                 adc.# 0006           
2821:000 | DONE ins | em 16 16 | 00583f | aa          |                 tax                  
2822:000 | DONE lbl | em 16 16 | 005840 |             | z_fill                               
2823:000 | DONE lbl | em 16 16 | 005840 |             | z_erase                              
2823:001 | DONE ins | em 16 16 | 005840 | 60          |                 rts                  
2824:000 | DONE wsp | em 16 16 |        |             |
2825:000 | DONE wsp | em 16 16 |        |             |
2826:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2827:000 | DONE cmt | em 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
2828:000 | DONE cmt | em 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
2829:000 | DONE cmt | em 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
2830:000 | DONE lbl | em 16 16 | 005841 |             | xt_evaluate                          
2831:000 | DONE cmt | em 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
2832:000 | DONE cmt | em 16 16 |        |             |                 ; >IN to the Return Stack
2833:000 | DONE ins | em 16 16 | 005841 | a5 0c       |                 lda.d 00000c         >IN
2834:000 | DONE ins | em 16 16 | 005843 | 48          |                 pha                  
2835:000 | DONE ins | em 16 16 | 005844 | a5 06       |                 lda.d 000006         Input Source (SOURCE-ID)
2836:000 | DONE ins | em 16 16 | 005846 | 48          |                 pha                  
2837:000 | DONE ins | em 16 16 | 005847 | a5 08       |                 lda.d 000008         
2838:000 | DONE ins | em 16 16 | 005849 | 48          |                 pha                  
2839:000 | DONE ins | em 16 16 | 00584a | a5 0a       |                 lda.d 00000a         
2840:000 | DONE ins | em 16 16 | 00584c | 48          |                 pha                  
2841:000 | DONE wsp | em 16 16 |        |             |
2842:000 | DONE cmt | em 16 16 |        |             |                 ; set SOURCE-ID to -1
2843:000 | DONE ins | em 16 16 | 00584d | a9 ff ff    |                 lda.# 0ffff          
2844:000 | DONE ins | em 16 16 | 005850 | 85 06       |                 sta.d 000006         
2845:000 | DONE wsp | em 16 16 |        |             |
2846:000 | DONE cmt | em 16 16 |        |             |                 ; set >IN to zero
2847:000 | DONE ins | em 16 16 | 005852 | 64 0c       |                 stz.d 00000c         
2848:000 | DONE wsp | em 16 16 |        |             |
2849:000 | DONE cmt | em 16 16 |        |             |                 ; move TOS and NOS to input buffers
2850:000 | DONE ins | em 16 16 | 005854 | 84 0a       |                 sty.d 00000a         
2851:000 | DONE ins | em 16 16 | 005856 | b5 00       |                 lda.dx 00            
2852:000 | DONE ins | em 16 16 | 005858 | 85 08       |                 sta.d 000008         
2853:000 | DONE wsp | em 16 16 |        |             |
2854:000 | DONE cmt | em 16 16 |        |             |                 ; dump address string from stack
2855:000 | DONE ins | em 16 16 | 00585a | b4 02       |                 ldy.dx 02            
2856:000 | DONE ins | em 16 16 | 00585c | e8          |                 inx                  
2857:000 | DONE ins | em 16 16 | 00585d | e8          |                 inx                  
2858:000 | DONE ins | em 16 16 | 00585e | e8          |                 inx                  
2859:000 | DONE ins | em 16 16 | 00585f | e8          |                 inx                  
2860:000 | DONE wsp | em 16 16 |        |             |
2861:000 | DONE ins | em 16 16 | 005860 | 20 46 68    |                 jsr 006846           
2862:000 | DONE wsp | em 16 16 |        |             |
2863:000 | DONE cmt | em 16 16 |        |             |                 ; restore state from before evaluate
2864:000 | DONE ins | em 16 16 | 005863 | 68          |                 pla                  
2865:000 | DONE ins | em 16 16 | 005864 | 85 0a       |                 sta.d 00000a         
2866:000 | DONE ins | em 16 16 | 005866 | 68          |                 pla                  
2867:000 | DONE ins | em 16 16 | 005867 | 85 08       |                 sta.d 000008         
2868:000 | DONE ins | em 16 16 | 005869 | 68          |                 pla                  
2869:000 | DONE ins | em 16 16 | 00586a | 85 06       |                 sta.d 000006         
2870:000 | DONE ins | em 16 16 | 00586c | 68          |                 pla                  
2871:000 | DONE ins | em 16 16 | 00586d | 85 0c       |                 sta.d 00000c         
2872:000 | DONE wsp | em 16 16 |        |             |
2873:000 | DONE lbl | em 16 16 | 00586f |             | z_evaluate                           
2873:001 | DONE ins | em 16 16 | 00586f | 60          |                 rts                  
2874:000 | DONE wsp | em 16 16 |        |             |
2875:000 | DONE wsp | em 16 16 |        |             |
2876:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2877:000 | DONE cmt | em 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2878:000 | DONE cmt | em 16 16 |        |             | ; Run a word with help of its xt on the TOS
2879:000 | DONE wsp | em 16 16 |        |             |
2880:000 | DONE cmt | em 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2881:000 | DONE cmt | em 16 16 |        |             | ; range
2882:000 | DONE cmt | em 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2883:000 | DONE lbl | em 16 16 | 005870 |             | execute_ip                           
2883:001 | DONE dir | em 16 16 | 005870 | (3 bytes)   |         .byte 00, 00, 00             
2883:001 | DONE dir | em 16 16 |        |             |                 00 00 00                 --  . . .
2884:000 | DONE wsp | em 16 16 |        |             |
2885:000 | DONE lbl | em 16 16 | 005873 |             | xt_execute                           
2886:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2887:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2888:000 | DONE cmt | em 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
2889:000 | DONE ins | em 16 16 | 005873 | 8c 70 58    |                 sty 005870           
2890:000 | DONE ins | em 16 16 | 005876 | b4 00       |                 ldy.dx 00            
2891:000 | DONE ins | em 16 16 | 005878 | e8          |                 inx                  
2892:000 | DONE ins | em 16 16 | 005879 | e8          |                 inx                  
2893:000 | DONE wsp | em 16 16 |        |             |
2894:000 | DONE cmt | em 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
2895:000 | DONE cmt | em 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
2896:000 | DONE cmt | em 16 16 |        |             |                 ; the original caller of this routine without us having to muck
2897:000 | DONE cmt | em 16 16 |        |             |                 ; about with the Return Stack.
2898:000 | DONE ins | em 16 16 | 00587a | 6c 70 58    |                 jmp.i 005870         JMP (EXECUTE_IP)
2899:000 | DONE wsp | em 16 16 |        |             |
2900:000 | DONE lbl | em 16 16 | 00587d |             | z_execute                            ; empty, no RTS required
2901:000 | DONE wsp | em 16 16 |        |             |
2902:000 | DONE wsp | em 16 16 |        |             |
2903:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2904:000 | DONE cmt | em 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
2905:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
2906:000 | DONE cmt | em 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
2907:000 | DONE cmt | em 16 16 |        |             | ; xt_false/z_false
2908:000 | DONE wsp | em 16 16 |        |             |
2909:000 | DONE wsp | em 16 16 |        |             |
2910:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2911:000 | DONE cmt | em 16 16 |        |             | ; FIND ( cs-addr -- addr 0 | xt 1 | xt -1 ) X bytes / X cycles
2912:000 | DONE cmt | em 16 16 |        |             | ; Find word in Dictionary. Included for backwards compatibility, Liara Forth
2913:000 | DONE cmt | em 16 16 |        |             | ; follows Gforth by replacing this with FIND-NAME. Counted string either returns
2914:000 | DONE cmt | em 16 16 |        |             | ; address with a fail flag if not found in the Dictionary, or the xt with a flag
2915:000 | DONE cmt | em 16 16 |        |             | ; to indicate if this is immediate or not. FIND is a wrapper around FIND-NAME.
2916:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
2917:000 | DONE cmt | em 16 16 |        |             | ; and https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2918:000 | DONE cmt | em 16 16 |        |             | ; for better solutions.
2919:000 | DONE lbl | em 16 16 | 00587d |             | xt_find                              
2920:000 | DONE cmt | em 16 16 |        |             |                 ; Convert counted string address to modern format
2921:000 | DONE ins | em 16 16 | 00587d | 20 96 56    |                 jsr 005696           ( addr u )
2922:000 | DONE wsp | em 16 16 |        |             |
2923:000 | DONE cmt | em 16 16 |        |             |                 ; Save address in case the conversion fails
2924:000 | DONE ins | em 16 16 | 005880 | b5 00       |                 lda.dx 00            
2925:000 | DONE ins | em 16 16 | 005882 | 48          |                 pha                  
2926:000 | DONE wsp | em 16 16 |        |             |
2927:000 | DONE ins | em 16 16 | 005883 | 20 ae 58    |                 jsr 0058ae           ( nt | 0 )
2928:000 | DONE wsp | em 16 16 |        |             |
2929:000 | DONE ins | em 16 16 | 005886 | 98          |                 tya                  force flag check
2930:000 | DONE ins | em 16 16 | 005887 | d0 0a       |                 bne 005893           
2931:000 | DONE wsp | em 16 16 |        |             |
2932:000 | DONE cmt | em 16 16 |        |             |                 ; No word found. Return the address of the string, leaving 0 as
2933:000 | DONE cmt | em 16 16 |        |             |                 ; a false flag TOS
2934:000 | DONE ins | em 16 16 | 005889 | ca          |                 dex                  ( <?> 0 )
2935:000 | DONE ins | em 16 16 | 00588a | ca          |                 dex                  
2936:000 | DONE ins | em 16 16 | 00588b | a0 00 00    |                 ldy.# 0000           
2937:000 | DONE ins | em 16 16 | 00588e | 68          |                 pla                  
2938:000 | DONE ins | em 16 16 | 00588f | 95 00       |                 sta.dx 00            ( addr 0 )
2939:000 | DONE ins | em 16 16 | 005891 | 80 1a       |                 bra 0058ad           
2940:000 | DONE wsp | em 16 16 |        |             |
2941:000 | DONE lbl | em 16 16 | 005893 |             | find_found                           
2942:000 | DONE cmt | em 16 16 |        |             |                 ; We have a nt. Now we have to convert it to the format that
2943:000 | DONE cmt | em 16 16 |        |             |                 ; FIND wants to return Arrive here with ( nt )
2944:000 | DONE ins | em 16 16 | 005893 | 68          |                 pla                  we won't need the address after all
2945:000 | DONE wsp | em 16 16 |        |             |
2946:000 | DONE cmt | em 16 16 |        |             |                 ; We will need the nt later
2947:000 | DONE ins | em 16 16 | 005894 | 5a          |                 phy                  
2948:000 | DONE wsp | em 16 16 |        |             |
2949:000 | DONE ins | em 16 16 | 005895 | 20 8a 5a    |                 jsr 005a8a           ( nt -- xt )
2950:000 | DONE ins | em 16 16 | 005898 | ca          |                 dex                  
2951:000 | DONE ins | em 16 16 | 005899 | ca          |                 dex                  
2952:000 | DONE ins | em 16 16 | 00589a | 94 00       |                 sty.dx 00            ( xt <?> )
2953:000 | DONE wsp | em 16 16 |        |             |
2954:000 | DONE cmt | em 16 16 |        |             |                 ; If immediate, return 1 (not: zero), else return -1
2955:000 | DONE ins | em 16 16 | 00589c | 7a          |                 ply                  get nt back
2956:000 | DONE ins | em 16 16 | 00589d | b9 00 00    |                 lda.y 0000           
2957:000 | DONE ins | em 16 16 | 0058a0 | a0 00 00    |                 ldy.# 0000           prepare flag
2958:000 | DONE wsp | em 16 16 |        |             |
2959:000 | DONE ins | em 16 16 | 0058a3 | eb          |                 xba                  flags are MSB
2960:000 | DONE ins | em 16 16 | 0058a4 | 29 02 00    |                 and.# IM             Mask all but IM bit
2961:000 | DONE wsp | em 16 16 |        |             |
2962:000 | DONE ins | em 16 16 | 0058a7 | d0 03       |                 bne 0058ac           IMMEDIATE word, return 1
2963:000 | DONE ins | em 16 16 | 0058a9 | 88          |                 dey                  not emmediate, return -1
2964:000 | DONE ins | em 16 16 | 0058aa | 80 01       |                 bra 0058ad           
2965:000 | DONE wsp | em 16 16 |        |             |
2966:000 | DONE lbl | em 16 16 | 0058ac |             | find_imm                             
2967:000 | DONE ins | em 16 16 | 0058ac | c8          |                 iny                  
2968:000 | DONE wsp | em 16 16 |        |             |
2969:000 | DONE lbl | em 16 16 | 0058ad |             | z_find                               
2969:001 | DONE ins | em 16 16 | 0058ad | 60          |                 rts                  
2970:000 | DONE wsp | em 16 16 |        |             |
2971:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2972:000 | DONE cmt | em 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
2973:000 | DONE cmt | em 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
2974:000 | DONE cmt | em 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
2975:000 | DONE cmt | em 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
2976:000 | DONE cmt | em 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
2977:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2978:000 | DONE cmt | em 16 16 |        |             | ; FIND calls this word for the hard word
2979:000 | DONE lbl | em 16 16 | 0058ae |             | xt_find-name                         
2980:000 | DONE cmt | em 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
2981:000 | DONE cmt | em 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
2982:000 | DONE cmt | em 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
2983:000 | DONE cmt | em 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
2984:000 | DONE cmt | em 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
2985:000 | DONE cmt | em 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
2986:000 | DONE cmt | em 16 16 |        |             |                 ;       tya                     ; force flag check
2987:000 | DONE cmt | em 16 16 |        |             |                 ;       beq find-name_failure
2988:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2989:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2990:000 | DONE cmt | em 16 16 |        |             |                 ; set up loop for the first time
2991:000 | DONE ins | em 16 16 | 0058ae | 84 24       |                 sty.d 000024         length of mystery string in tmptos, Y now free
2992:000 | DONE wsp | em 16 16 |        |             |
2993:000 | DONE ins | em 16 16 | 0058b0 | a4 02       |                 ldy.d 000002         
2994:000 | DONE ins | em 16 16 | 0058b2 | 84 1c       |                 sty.d 00001c         nt of first Dictionary word
2995:000 | DONE wsp | em 16 16 |        |             |
2996:000 | DONE ins | em 16 16 | 0058b4 | b4 00       |                 ldy.dx 00            
2997:000 | DONE ins | em 16 16 | 0058b6 | 84 1e       |                 sty.d 00001e         address of mystery string, was NOS
2998:000 | DONE wsp | em 16 16 |        |             |
2999:000 | DONE lbl | em 16 16 | 0058b8 |             | find-name_loop                       
3000:000 | DONE cmt | em 16 16 |        |             |                 ; First quick test: Are strings the same length?
3001:000 | DONE ins | em 16 16 | 0058b8 | b2 1c       |                 lda.di 00001c        LSB in first header word is length
3002:000 | DONE ins | em 16 16 | 0058ba | 29 ff 00    |                 and.# 00ff           
3003:000 | DONE ins | em 16 16 | 0058bd | c5 24       |                 cmp.d 000024         we test LSB
3004:000 | DONE cmt | em 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
3005:000 | DONE cmt | em 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
3006:000 | DONE cmt | em 16 16 |        |             |                 ; same
3007:000 | DONE ins | em 16 16 | 0058bf | f0 0c       |                 beq 0058cd           
3008:000 | DONE wsp | em 16 16 |        |             |
3009:000 | DONE lbl | em 16 16 | 0058c1 |             | find-name_next_entry                 
3010:000 | DONE cmt | em 16 16 |        |             |                 ; next header address is two bytes down
3011:000 | DONE ins | em 16 16 | 0058c1 | e6 1c       |                 inc.d 00001c         
3012:000 | DONE ins | em 16 16 | 0058c3 | e6 1c       |                 inc.d 00001c         
3013:000 | DONE ins | em 16 16 | 0058c5 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3014:000 | DONE wsp | em 16 16 |        |             |
3015:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3016:000 | DONE ins | em 16 16 | 0058c7 | f0 36       |                 beq 0058ff           
3017:000 | DONE wsp | em 16 16 |        |             |
3018:000 | DONE ins | em 16 16 | 0058c9 | 85 1c       |                 sta.d 00001c         new header
3019:000 | DONE ins | em 16 16 | 0058cb | 80 eb       |                 bra 0058b8           
3020:000 | DONE wsp | em 16 16 |        |             |
3021:000 | DONE lbl | em 16 16 | 0058cd |             | find-name_chars                      
3022:000 | DONE cmt | em 16 16 |        |             |                 ; Yes, same length, so we compare characters
3023:000 | DONE wsp | em 16 16 |        |             |
3024:000 | DONE cmt | em 16 16 |        |             |                 ; Switch A to 8 bit for this
3025:000 | DONE ins | em 16 16 | 0058cd | e2 20       |                 sep 20               
3025:001 | DONE ctl | em  8 16 |        |             |         .!a8
3026:000 | DONE cmt | em  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
3027:000 | DONE cmt | em  8 16 |        |             |                 ; header
3028:000 | DONE ins | em  8 16 | 0058cf | a0 08 00    |                 ldy.# 0008           
3029:000 | DONE ins | em  8 16 | 0058d2 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - first char of entry
3030:000 | DONE ins | em  8 16 | 0058d4 | d2 1e       |                 cmp.di 00001e        CMP (TMP2) - first char of mystery string
3031:000 | DONE ins | em  8 16 | 0058d6 | f0 04       |                 beq 0058dc           
3032:000 | DONE wsp | em  8 16 |        |             |
3033:000 | DONE lbl | em  8 16 | 0058d8 |             | find-name_char_nomatcnt_8            
3034:000 | DONE cmt | em  8 16 |        |             |                 ; First char is not the same, next entry
3035:000 | DONE ins | em  8 16 | 0058d8 | c2 20       |                 rep 20               
3035:001 | DONE ctl | em 16 16 |        |             |         .!a16
3036:000 | DONE ins | em 16 16 | 0058da | 80 e5       |                 bra 0058c1           
3037:000 | DONE wsp | em 16 16 |        |             |
3038:000 | DONE lbl | em 16 16 | 0058dc |             | find-name_all_chars                  
3039:000 | DONE dir | em  8 16 |        |             |         .!a8                         
3040:000 | DONE cmt | em  8 16 |        |             |                 ; String length is the same, and the first character is the
3041:000 | DONE cmt | em  8 16 |        |             |                 ; same. If the word is only one character long, we're done
3042:000 | DONE ins | em  8 16 | 0058dc | a4 24       |                 ldy.d 000024         
3043:000 | DONE ins | em  8 16 | 0058de | 88          |                 dey                  faster and shorter than CPY.# 01
3044:000 | DONE ins | em  8 16 | 0058df | f0 18       |                 beq 0058f9           
3045:000 | DONE wsp | em  8 16 |        |             |
3046:000 | DONE cmt | em  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
3047:000 | DONE cmt | em  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
3048:000 | DONE cmt | em  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
3049:000 | DONE cmt | em  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
3050:000 | DONE cmt | em  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
3051:000 | DONE cmt | em  8 16 |        |             |                 ; we've already compared the first char.
3052:000 | DONE wsp | em  8 16 |        |             |
3053:000 | DONE cmt | em  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
3054:000 | DONE cmt | em  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
3055:000 | DONE cmt | em  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
3056:000 | DONE cmt | em  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
3057:000 | DONE ins | em  8 16 | 0058e1 | c2 20       |                 rep 20               
3057:001 | DONE ctl | em 16 16 |        |             |         .!a16
3058:000 | DONE ins | em 16 16 | 0058e3 | a5 1c       |                 lda.d 00001c         address of Dictionary string
3059:000 | DONE ins | em 16 16 | 0058e5 | 18          |                 clc                  
3060:000 | DONE ins | em 16 16 | 0058e6 | 69 08 00    |                 adc.# 0008           
3061:000 | DONE ins | em 16 16 | 0058e9 | 85 20       |                 sta.d 000020         
3062:000 | DONE ins | em 16 16 | 0058eb | e2 20       |                 sep 20               
3062:001 | DONE ctl | em  8 16 |        |             |         .!a8
3063:000 | DONE ins | em  8 16 | 0058ed | a4 24       |                 ldy.d 000024         get length of strings as loop index
3064:000 | DONE ins | em  8 16 | 0058ef | 88          |                 dey                  first index is length minus 1
3065:000 | DONE wsp | em  8 16 |        |             |
3066:000 | DONE lbl | em  8 16 | 0058f0 |             | @                                    
3067:000 | DONE ins | em  8 16 | 0058f0 | b1 1e       |                 lda.diy 00001e       LDA (TMP2),Y - last char of mystery string
3068:000 | DONE ins | em  8 16 | 0058f2 | d1 20       |                 cmp.diy 000020       CMP (TMP1),Y - last char of DP string
3069:000 | DONE ins | em  8 16 | 0058f4 | d0 e2       |                 bne 0058d8           
3070:000 | DONE ins | em  8 16 | 0058f6 | 88          |                 dey                  start of string (Y=0) was already tested
3071:000 | DONE ins | em  8 16 | 0058f7 | d0 f7       |                 bne 0058f0           
3072:000 | DONE wsp | em  8 16 |        |             |
3073:000 | DONE lbl | em  8 16 | 0058f9 |             | find-name_success                    
3074:000 | DONE cmt | em  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
3075:000 | DONE cmt | em  8 16 |        |             |                 ; We get here with an 8 bit A
3076:000 | DONE ins | em  8 16 | 0058f9 | c2 20       |                 rep 20               
3076:001 | DONE ctl | em 16 16 |        |             |         .!a16
3077:000 | DONE ins | em 16 16 | 0058fb | a4 1c       |                 ldy.d 00001c         get the correct DP
3078:000 | DONE ins | em 16 16 | 0058fd | 80 03       |                 bra 005902           
3079:000 | DONE wsp | em 16 16 |        |             |
3080:000 | DONE wsp | em 16 16 |        |             |
3081:000 | DONE lbl | em 16 16 | 0058ff |             | find-name_failure_16                 
3082:000 | DONE cmt | em 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
3083:000 | DONE cmt | em 16 16 |        |             |                 ; bit
3084:000 | DONE ins | em 16 16 | 0058ff | a0 00 00    |                 ldy.# 0000           fall thru
3085:000 | DONE wsp | em 16 16 |        |             |
3086:000 | DONE lbl | em 16 16 | 005902 |             | find-name_done                       
3087:000 | DONE ins | em 16 16 | 005902 | e8          |                 inx                  drop old address (NIP)
3088:000 | DONE ins | em 16 16 | 005903 | e8          |                 inx                  
3089:000 | DONE wsp | em 16 16 |        |             |
3090:000 | DONE lbl | em 16 16 | 005904 |             | z_find-name                          
3090:001 | DONE ins | em 16 16 | 005904 | 60          |                 rts                  
3091:000 | DONE wsp | em 16 16 |        |             |
3092:000 | DONE wsp | em 16 16 |        |             |
3093:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3094:000 | DONE cmt | em 16 16 |        |             | ; FM/MOD ( d n1 -- n2 n3 ) X bytes / X cycles
3095:000 | DONE cmt | em 16 16 |        |             | ; Floored division, compare with SM/REM. We define FM/MOD in terms of UM/MOD,
3096:000 | DONE cmt | em 16 16 |        |             | ; see http://git.savannah.gnu.org/cgit/gforth.git/tree/prim We prefer to use
3097:000 | DONE cmt | em 16 16 |        |             | ; SM/REM for further words. You could also define FM/MOD in Terms of SM/REM,
3098:000 | DONE cmt | em 16 16 |        |             | ; see http://www.figuk.plus.com/build/arith.htm
3099:000 | DONE cmt | em 16 16 |        |             | ; Original Forth: DUP >R DUP 0< IF NEGATE >R DNEGATE R> THEN >R DUP 0< R@ AND +
3100:000 | DONE cmt | em 16 16 |        |             | ; R> UM/MOD R> 0< IF SWAP NEGATE SWAP THEN ;
3101:000 | DONE cmt | em 16 16 |        |             | ; TODO this is just a 1:1 list of jumps, optimize once it is working
3102:000 | DONE lbl | em 16 16 | 005905 |             | xt_fmmod                             
3103:000 | DONE ins | em 16 16 | 005905 | 20 12 58    |                 jsr 005812           
3104:000 | DONE ins | em 16 16 | 005908 | 20 bb 51    |                 jsr 0051bb           
3105:000 | DONE ins | em 16 16 | 00590b | 20 12 58    |                 jsr 005812           
3106:000 | DONE wsp | em 16 16 |        |             |
3107:000 | DONE ins | em 16 16 | 00590e | 98          |                 tya                  0< IF
3108:000 | DONE ins | em 16 16 | 00590f | 10 12       |                 bpl 005923           
3109:000 | DONE wsp | em 16 16 |        |             |
3110:000 | DONE ins | em 16 16 | 005911 | b4 00       |                 ldy.dx 00            
3111:000 | DONE ins | em 16 16 | 005913 | e8          |                 inx                  
3112:000 | DONE ins | em 16 16 | 005914 | e8          |                 inx                  
3113:000 | DONE wsp | em 16 16 |        |             |
3114:000 | DONE ins | em 16 16 | 005915 | 20 ad 5a    |                 jsr 005aad           
3115:000 | DONE ins | em 16 16 | 005918 | 20 bb 51    |                 jsr 0051bb           
3116:000 | DONE ins | em 16 16 | 00591b | 20 b8 57    |                 jsr 0057b8           
3117:000 | DONE ins | em 16 16 | 00591e | 20 29 5c    |                 jsr 005c29           
3118:000 | DONE wsp | em 16 16 |        |             |
3119:000 | DONE ins | em 16 16 | 005921 | 80 04       |                 bra 005927           
3120:000 | DONE lbl | em 16 16 | 005923 |             | fmmod_1                              
3121:000 | DONE ins | em 16 16 | 005923 | b4 00       |                 ldy.dx 00            
3122:000 | DONE ins | em 16 16 | 005925 | e8          |                 inx                  
3123:000 | DONE ins | em 16 16 | 005926 | e8          |                 inx                  
3124:000 | DONE lbl | em 16 16 | 005927 |             | fmmod_1_1                            
3125:000 | DONE ins | em 16 16 | 005927 | 20 bb 51    |                 jsr 0051bb           
3126:000 | DONE ins | em 16 16 | 00592a | 20 12 58    |                 jsr 005812           
3127:000 | DONE ins | em 16 16 | 00592d | 20 77 53    |                 jsr 005377           
3128:000 | DONE ins | em 16 16 | 005930 | 20 20 5c    |                 jsr 005c20           
3129:000 | DONE ins | em 16 16 | 005933 | 20 54 55    |                 jsr 005554           
3130:000 | DONE ins | em 16 16 | 005936 | 20 24 53    |                 jsr 005324           
3131:000 | DONE ins | em 16 16 | 005939 | 20 29 5c    |                 jsr 005c29           
3132:000 | DONE ins | em 16 16 | 00593c | 20 81 5e    |                 jsr 005e81           
3133:000 | DONE ins | em 16 16 | 00593f | 20 29 5c    |                 jsr 005c29           
3134:000 | DONE wsp | em 16 16 |        |             |
3135:000 | DONE ins | em 16 16 | 005942 | 98          |                 tya                  
3136:000 | DONE ins | em 16 16 | 005943 | 10 0f       |                 bpl 005954           
3137:000 | DONE wsp | em 16 16 |        |             |
3138:000 | DONE ins | em 16 16 | 005945 | b4 00       |                 ldy.dx 00            
3139:000 | DONE ins | em 16 16 | 005947 | e8          |                 inx                  
3140:000 | DONE ins | em 16 16 | 005948 | e8          |                 inx                  
3141:000 | DONE wsp | em 16 16 |        |             |
3142:000 | DONE ins | em 16 16 | 005949 | 20 bc 5d    |                 jsr 005dbc           
3143:000 | DONE ins | em 16 16 | 00594c | 20 ad 5a    |                 jsr 005aad           
3144:000 | DONE ins | em 16 16 | 00594f | 20 bc 5d    |                 jsr 005dbc           
3145:000 | DONE wsp | em 16 16 |        |             |
3146:000 | DONE ins | em 16 16 | 005952 | 80 04       |                 bra 005958           
3147:000 | DONE lbl | em 16 16 | 005954 |             | fmmod_2                              
3148:000 | DONE wsp | em 16 16 |        |             |
3149:000 | DONE ins | em 16 16 | 005954 | b4 00       |                 ldy.dx 00            
3150:000 | DONE ins | em 16 16 | 005956 | e8          |                 inx                  
3151:000 | DONE ins | em 16 16 | 005957 | e8          |                 inx                  
3152:000 | DONE wsp | em 16 16 |        |             |
3153:000 | DONE lbl | em 16 16 | 005958 |             | fmmod_2_1                            
3154:000 | DONE wsp | em 16 16 |        |             |
3155:000 | DONE lbl | em 16 16 | 005958 |             | z_fmmod                              
3155:001 | DONE ins | em 16 16 | 005958 | 60          |                 rts                  
3156:000 | DONE wsp | em 16 16 |        |             |
3157:000 | DONE wsp | em 16 16 |        |             |
3158:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3159:000 | DONE cmt | em 16 16 |        |             | ; KEY ( -- char ) X bytes / X cycles
3160:000 | DONE cmt | em 16 16 |        |             | ; Get one character from the input, without echoing.
3161:000 | DONE lbl | em 16 16 | 005959 |             | xt_key                               
3162:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3163:000 | DONE wsp | em 16 16 |        |             |
3164:000 | DONE ins | em 16 16 | 005959 | ca          |                 dex                  make room on Data Stack
3165:000 | DONE ins | em 16 16 | 00595a | ca          |                 dex                  
3166:000 | DONE ins | em 16 16 | 00595b | b4 00       |                 ldy.dx 00            
3167:000 | DONE wsp | em 16 16 |        |             |
3168:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "jsr.i" instruction, so we have to do this the
3169:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3170:000 | DONE ins | em 16 16 | 00595d | 86 22       |                 stx.d 000022         
3171:000 | DONE ins | em 16 16 | 00595f | a2 00 00    |                 ldx.# 0000           
3172:000 | DONE ins | em 16 16 | 005962 | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X) - returns char in A
3173:000 | DONE ins | em 16 16 | 005965 | a6 22       |                 ldx.d 000022         
3174:000 | DONE wsp | em 16 16 |        |             |
3175:000 | DONE ins | em 16 16 | 005967 | a8          |                 tay                  
3176:000 | DONE wsp | em 16 16 |        |             |
3177:000 | DONE lbl | em 16 16 | 005968 |             | z_key                                ; never reached
3178:000 | DONE wsp | em 16 16 |        |             |
3179:000 | DONE wsp | em 16 16 |        |             |
3180:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3181:000 | DONE cmt | em 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
3182:000 | DONE cmt | em 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
3183:000 | DONE cmt | em 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
3184:000 | DONE cmt | em 16 16 |        |             | ; will have no effect and will fail without an error message
3185:000 | DONE lbl | em 16 16 | 005968 |             | xt_immediate                         
3186:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3187:000 | DONE ins | em 16 16 | 005968 | a9 02 00    |                 lda.# IM             Immediate flag
3188:000 | DONE ins | em 16 16 | 00596b | eb          |                 xba                  flags are MSB
3189:000 | DONE ins | em 16 16 | 00596c | 12 02       |                 ora.di 000002        ORA (DP)
3190:000 | DONE ins | em 16 16 | 00596e | 92 02       |                 sta.di 000002        
3191:000 | DONE wsp | em 16 16 |        |             |
3192:000 | DONE lbl | em 16 16 | 005970 |             | z_immediate                          
3192:001 | DONE ins | em 16 16 | 005970 | 60          |                 rts                  
3193:000 | DONE wsp | em 16 16 |        |             |
3194:000 | DONE wsp | em 16 16 |        |             |
3195:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3196:000 | DONE cmt | em 16 16 |        |             | ; INPUT ( -- addr ) X bytes / X cycles
3197:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump targeet for KEY is stored
3198:000 | DONE lbl | em 16 16 | 005971 |             | xt_input                             
3199:000 | DONE ins | em 16 16 | 005971 | ca          |                 dex                  
3200:000 | DONE ins | em 16 16 | 005972 | ca          |                 dex                  
3201:000 | DONE ins | em 16 16 | 005973 | 94 00       |                 sty.dx 00            
3202:000 | DONE wsp | em 16 16 |        |             |
3203:000 | DONE ins | em 16 16 | 005975 | a0 10 00    |                 ldy.# 000010         
3204:000 | DONE wsp | em 16 16 |        |             |
3205:000 | DONE lbl | em 16 16 | 005978 |             | z_input                              
3205:001 | DONE ins | em 16 16 | 005978 | 60          |                 rts                  
3206:000 | DONE wsp | em 16 16 |        |             |
3207:000 | DONE wsp | em 16 16 |        |             |
3208:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3209:000 | DONE cmt | em 16 16 |        |             | ; INT>NAME ( xt -- nt ) X bytes / X cycles
3210:000 | DONE cmt | em 16 16 |        |             | ; Given an execution token (xt), return the name token (nt). This is called
3211:000 | DONE cmt | em 16 16 |        |             | ; >NAME in Gforth, but changed to INT>NAME for Liara to fit better with
3212:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT.
3213:000 | DONE lbl | em 16 16 | 005979 |             | xt_int-name                          
3214:000 | DONE cmt | em 16 16 |        |             |                 ; Unfortunately, to find the header, we have to walk through the
3215:000 | DONE cmt | em 16 16 |        |             |                 ; dictionary
3216:000 | DONE ins | em 16 16 | 005979 | a5 02       |                 lda.d 000002         nt of first Dictionary word
3217:000 | DONE ins | em 16 16 | 00597b | 85 1c       |                 sta.d 00001c         
3218:000 | DONE wsp | em 16 16 |        |             |
3219:000 | DONE ins | em 16 16 | 00597d | 84 24       |                 sty.d 000024         xt of mystery word
3220:000 | DONE ins | em 16 16 | 00597f | a0 04 00    |                 ldy.# 0004           xt in header is two bytes down
3221:000 | DONE wsp | em 16 16 |        |             |
3222:000 | DONE lbl | em 16 16 | 005982 |             | in_loop                              
3223:000 | DONE ins | em 16 16 | 005982 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - get xt of current nt
3224:000 | DONE ins | em 16 16 | 005984 | c5 24       |                 cmp.d 000024         
3225:000 | DONE ins | em 16 16 | 005986 | f0 12       |                 beq 00599a           
3226:000 | DONE wsp | em 16 16 |        |             |
3227:000 | DONE cmt | em 16 16 |        |             |                 ; no joy, next header address is two bytes down
3228:000 | DONE ins | em 16 16 | 005988 | e6 1c       |                 inc.d 00001c         
3229:000 | DONE ins | em 16 16 | 00598a | e6 1c       |                 inc.d 00001c         
3230:000 | DONE ins | em 16 16 | 00598c | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3231:000 | DONE wsp | em 16 16 |        |             |
3232:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3233:000 | DONE ins | em 16 16 | 00598e | f0 04       |                 beq 005994           
3234:000 | DONE wsp | em 16 16 |        |             |
3235:000 | DONE ins | em 16 16 | 005990 | 85 1c       |                 sta.d 00001c         new header
3236:000 | DONE ins | em 16 16 | 005992 | 80 ee       |                 bra 005982           
3237:000 | DONE wsp | em 16 16 |        |             |
3238:000 | DONE lbl | em 16 16 | 005994 |             | in_notfound                          
3239:000 | DONE ins | em 16 16 | 005994 | a9 5a 70    |                 lda.# 00705a         
3240:000 | DONE ins | em 16 16 | 005997 | 4c cb 68    |                 jmp 0068cb           
3241:000 | DONE wsp | em 16 16 |        |             |
3242:000 | DONE lbl | em 16 16 | 00599a |             | in_found                             
3243:000 | DONE ins | em 16 16 | 00599a | a4 1c       |                 ldy.d 00001c         replace xt by nt
3244:000 | DONE lbl | em 16 16 | 00599c |             | z_int-name                           
3244:001 | DONE ins | em 16 16 | 00599c | 60          |                 rts                  
3245:000 | DONE wsp | em 16 16 |        |             |
3246:000 | DONE wsp | em 16 16 |        |             |
3247:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3248:000 | DONE cmt | em 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
3249:000 | DONE cmt | em 16 16 |        |             | ; Complement of TOS
3250:000 | DONE lbl | em 16 16 | 00599d |             | xt_invert                            
3251:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3252:000 | DONE ins | em 16 16 | 00599d | 98          |                 tya                  
3253:000 | DONE ins | em 16 16 | 00599e | 49 ff ff    |                 eor.# 0ffff          
3254:000 | DONE ins | em 16 16 | 0059a1 | a8          |                 tay                  
3255:000 | DONE wsp | em 16 16 |        |             |
3256:000 | DONE lbl | em 16 16 | 0059a2 |             | z_invert                             
3256:001 | DONE ins | em 16 16 | 0059a2 | 60          |                 rts                  
3257:000 | DONE wsp | em 16 16 |        |             |
3258:000 | DONE wsp | em 16 16 |        |             |
3259:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3260:000 | DONE cmt | em 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
3261:000 | DONE cmt | em 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
3262:000 | DONE lbl | em 16 16 | 0059a3 |             | xt_here                              
3263:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3264:000 | DONE ins | em 16 16 | 0059a3 | ca          |                 dex                  
3265:000 | DONE ins | em 16 16 | 0059a4 | ca          |                 dex                  
3266:000 | DONE ins | em 16 16 | 0059a5 | 94 00       |                 sty.dx 00            
3267:000 | DONE wsp | em 16 16 |        |             |
3268:000 | DONE ins | em 16 16 | 0059a7 | a4 00       |                 ldy.d 000000         
3269:000 | DONE wsp | em 16 16 |        |             |
3270:000 | DONE lbl | em 16 16 | 0059a9 |             | z_here                               
3270:001 | DONE ins | em 16 16 | 0059a9 | 60          |                 rts                  
3271:000 | DONE wsp | em 16 16 |        |             |
3272:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3273:000 | DONE cmt | em 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
3274:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 16
3275:000 | DONE lbl | em 16 16 | 0059aa |             | xt_hex                               
3276:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3277:000 | DONE ins | em 16 16 | 0059aa | a9 10 00    |                 lda.# 0010           
3278:000 | DONE ins | em 16 16 | 0059ad | 85 16       |                 sta.d 000016         
3279:000 | DONE wsp | em 16 16 |        |             |
3280:000 | DONE lbl | em 16 16 | 0059af |             | z_hex                                
3280:001 | DONE ins | em 16 16 | 0059af | 60          |                 rts                  
3281:000 | DONE wsp | em 16 16 |        |             |
3282:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3283:000 | DONE cmt | em 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
3284:000 | DONE cmt | em 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
3285:000 | DONE cmt | em 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
3286:000 | DONE cmt | em 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
3287:000 | DONE cmt | em 16 16 |        |             | ; tohold instead of HLD.
3288:000 | DONE lbl | em 16 16 | 0059b0 |             | xt_hold                              
3289:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3290:000 | DONE ins | em 16 16 | 0059b0 | c6 18       |                 dec.d 000018         -1 HLD +!
3291:000 | DONE wsp | em 16 16 |        |             |
3292:000 | DONE ins | em 16 16 | 0059b2 | 98          |                 tya                  
3293:000 | DONE ins | em 16 16 | 0059b3 | e2 20       |                 sep 20               
3293:001 | DONE ctl | em  8 16 |        |             |         .!a8
3294:000 | DONE ins | em  8 16 | 0059b5 | 92 18       |                 sta.di 000018        STA (TOHOLD)
3295:000 | DONE ins | em  8 16 | 0059b7 | c2 20       |                 rep 20               
3295:001 | DONE ctl | em 16 16 |        |             |         .!a16
3296:000 | DONE ins | em 16 16 | 0059b9 | b4 00       |                 ldy.dx 00            
3297:000 | DONE ins | em 16 16 | 0059bb | e8          |                 inx                  
3298:000 | DONE ins | em 16 16 | 0059bc | e8          |                 inx                  
3299:000 | DONE wsp | em 16 16 |        |             |
3300:000 | DONE lbl | em 16 16 | 0059bd |             | z_hold                               
3300:001 | DONE ins | em 16 16 | 0059bd | 60          |                 rts                  
3301:000 | DONE wsp | em 16 16 |        |             |
3302:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3303:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
3304:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
3305:000 | DONE cmt | em 16 16 |        |             | ; version of this word is called LATEST.
3306:000 | DONE lbl | em 16 16 | 0059be |             | xt_latestnt                          
3307:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3308:000 | DONE ins | em 16 16 | 0059be | ca          |                 dex                  make room on Data Stack
3309:000 | DONE ins | em 16 16 | 0059bf | ca          |                 dex                  
3310:000 | DONE ins | em 16 16 | 0059c0 | 94 00       |                 sty.dx 00            
3311:000 | DONE wsp | em 16 16 |        |             |
3312:000 | DONE ins | em 16 16 | 0059c2 | a5 02       |                 lda.d 000002         
3313:000 | DONE ins | em 16 16 | 0059c4 | a8          |                 tay                  
3314:000 | DONE wsp | em 16 16 |        |             |
3315:000 | DONE lbl | em 16 16 | 0059c5 |             | z_latestnt                           
3315:001 | DONE ins | em 16 16 | 0059c5 | 60          |                 rts                  
3316:000 | DONE wsp | em 16 16 |        |             |
3317:000 | DONE wsp | em 16 16 |        |             |
3318:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3319:000 | DONE cmt | em 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
3320:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
3321:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
3322:000 | DONE lbl | em 16 16 | 0059c6 |             | xt_latestxt                          
3323:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3324:000 | DONE ins | em 16 16 | 0059c6 | ca          |                 dex                  make room on Data Stack
3325:000 | DONE ins | em 16 16 | 0059c7 | ca          |                 dex                  
3326:000 | DONE ins | em 16 16 | 0059c8 | 94 00       |                 sty.dx 00            
3327:000 | DONE wsp | em 16 16 |        |             |
3328:000 | DONE ins | em 16 16 | 0059ca | a5 02       |                 lda.d 000002         
3329:000 | DONE wsp | em 16 16 |        |             |
3330:000 | DONE ins | em 16 16 | 0059cc | 18          |                 clc                  xt is stored four bytes below nt in header
3331:000 | DONE ins | em 16 16 | 0059cd | 69 04 00    |                 adc.# 0004           
3332:000 | DONE ins | em 16 16 | 0059d0 | a8          |                 tay                  
3333:000 | DONE wsp | em 16 16 |        |             |
3334:000 | DONE ins | em 16 16 | 0059d1 | b9 00 00    |                 lda.y 0000           FETCH
3335:000 | DONE ins | em 16 16 | 0059d4 | a8          |                 tay                  
3336:000 | DONE wsp | em 16 16 |        |             |
3337:000 | DONE lbl | em 16 16 | 0059d5 |             | z_latestxt                           
3337:001 | DONE ins | em 16 16 | 0059d5 | 60          |                 rts                  
3338:000 | DONE wsp | em 16 16 |        |             |
3339:000 | DONE wsp | em 16 16 |        |             |
3340:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3341:000 | DONE cmt | em 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
3342:000 | DONE cmt | em 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
3343:000 | DONE cmt | em 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
3344:000 | DONE cmt | em 16 16 |        |             | ; for instance
3345:000 | DONE lbl | em 16 16 | 0059d6 |             | xt_literal                           
3346:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
3347:000 | DONE cmt | em 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
3348:000 | DONE ins | em 16 16 | 0059d6 | f4 e8 59    |                 phe.# 0059e8         PEA LITERAL_RT
3349:000 | DONE ins | em 16 16 | 0059d9 | 20 aa 68    |                 jsr 0068aa           
3350:000 | DONE wsp | em 16 16 |        |             |
3351:000 | DONE cmt | em 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
3352:000 | DONE cmt | em 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
3353:000 | DONE cmt | em 16 16 |        |             |                 ; way. This is basically , ("comma")
3354:000 | DONE ins | em 16 16 | 0059dc | 98          |                 tya                  
3355:000 | DONE ins | em 16 16 | 0059dd | 92 00       |                 sta.di 000000        
3356:000 | DONE ins | em 16 16 | 0059df | e6 00       |                 inc.d 000000         
3357:000 | DONE ins | em 16 16 | 0059e1 | e6 00       |                 inc.d 000000         
3358:000 | DONE wsp | em 16 16 |        |             |
3359:000 | DONE ins | em 16 16 | 0059e3 | b4 00       |                 ldy.dx 00            DROP
3360:000 | DONE ins | em 16 16 | 0059e5 | e8          |                 inx                  
3361:000 | DONE ins | em 16 16 | 0059e6 | e8          |                 inx                  
3362:000 | DONE wsp | em 16 16 |        |             |
3363:000 | DONE lbl | em 16 16 | 0059e7 |             | z_literal                            
3363:001 | DONE ins | em 16 16 | 0059e7 | 60          |                 rts                  
3364:000 | DONE wsp | em 16 16 |        |             |
3365:000 | DONE lbl | em 16 16 | 0059e8 |             | literal_rt                           
3366:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we push the value following this word
3367:000 | DONE cmt | em 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
3368:000 | DONE cmt | em 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
3369:000 | DONE cmt | em 16 16 |        |             |                 ; points to the data we need to get
3370:000 | DONE wsp | em 16 16 |        |             |
3371:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
3372:000 | DONE ins | em 16 16 | 0059e8 | ca          |                 dex                  
3373:000 | DONE ins | em 16 16 | 0059e9 | ca          |                 dex                  
3374:000 | DONE ins | em 16 16 | 0059ea | 94 00       |                 sty.dx 00            
3375:000 | DONE wsp | em 16 16 |        |             |
3376:000 | DONE cmt | em 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
3377:000 | DONE cmt | em 16 16 |        |             |                 ; so we have to manipulate the address
3378:000 | DONE ins | em 16 16 | 0059ec | 7a          |                 ply                  
3379:000 | DONE ins | em 16 16 | 0059ed | c8          |                 iny                  
3380:000 | DONE ins | em 16 16 | 0059ee | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
3381:000 | DONE wsp | em 16 16 |        |             |
3382:000 | DONE ins | em 16 16 | 0059f1 | c8          |                 iny                  move return address past data and restore
3383:000 | DONE ins | em 16 16 | 0059f2 | 5a          |                 phy                  so we can get back home
3384:000 | DONE wsp | em 16 16 |        |             |
3385:000 | DONE ins | em 16 16 | 0059f3 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
3386:000 | DONE wsp | em 16 16 |        |             |
3387:000 | DONE ins | em 16 16 | 0059f4 | 60          |                 rts                  
3388:000 | DONE wsp | em 16 16 |        |             |
3389:000 | DONE wsp | em 16 16 |        |             |
3390:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3391:000 | DONE cmt | em 16 16 |        |             | ; LSHIFT ( n u -- n ) X bytes / X cycles
3392:000 | DONE cmt | em 16 16 |        |             | ; Logically shift TOS u times to the left, adding zeros to the right
3393:000 | DONE lbl | em 16 16 | 0059f5 |             | xt_lshift                            
3394:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
3395:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
3396:000 | DONE ins | em 16 16 | 0059f5 | 98          |                 tya                  
3397:000 | DONE ins | em 16 16 | 0059f6 | 29 0f 00    |                 and.# 000f           
3398:000 | DONE ins | em 16 16 | 0059f9 | f0 09       |                 beq 005a04           if zero shifts, we're done
3399:000 | DONE wsp | em 16 16 |        |             |
3400:000 | DONE ins | em 16 16 | 0059fb | a8          |                 tay                  number of shifts is TOS
3401:000 | DONE ins | em 16 16 | 0059fc | b5 00       |                 lda.dx 00            number is in NOS
3402:000 | DONE lbl | em 16 16 | 0059fe |             | lshift_loop                          
3403:000 | DONE ins | em 16 16 | 0059fe | 0a          |                 asl.a                
3404:000 | DONE ins | em 16 16 | 0059ff | 88          |                 dey                  
3405:000 | DONE ins | em 16 16 | 005a00 | d0 fc       |                 bne 0059fe           
3406:000 | DONE wsp | em 16 16 |        |             |
3407:000 | DONE ins | em 16 16 | 005a02 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
3408:000 | DONE wsp | em 16 16 |        |             |
3409:000 | DONE lbl | em 16 16 | 005a04 |             | lshift_done                          
3410:000 | DONE ins | em 16 16 | 005a04 | b4 00       |                 ldy.dx 00            
3411:000 | DONE ins | em 16 16 | 005a06 | e8          |                 inx                  
3412:000 | DONE ins | em 16 16 | 005a07 | e8          |                 inx                  
3413:000 | DONE wsp | em 16 16 |        |             |
3414:000 | DONE lbl | em 16 16 | 005a08 |             | z_lshift                             
3414:001 | DONE ins | em 16 16 | 005a08 | 60          |                 rts                  
3415:000 | DONE wsp | em 16 16 |        |             |
3416:000 | DONE wsp | em 16 16 |        |             |
3417:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3418:000 | DONE cmt | em 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
3419:000 | DONE cmt | em 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
3420:000 | DONE cmt | em 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
3421:000 | DONE cmt | em 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
3422:000 | DONE cmt | em 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
3423:000 | DONE cmt | em 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
3424:000 | DONE lbl | em 16 16 | 005a09 |             | xt_mstar                             
3425:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3426:000 | DONE cmt | em 16 16 |        |             |                 ; figure out the sign
3427:000 | DONE ins | em 16 16 | 005a09 | 98          |                 tya                  
3428:000 | DONE ins | em 16 16 | 005a0a | 55 00       |                 eor.dx 00            
3429:000 | DONE wsp | em 16 16 |        |             |
3430:000 | DONE cmt | em 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
3431:000 | DONE cmt | em 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
3432:000 | DONE ins | em 16 16 | 005a0c | 48          |                 pha                  
3433:000 | DONE wsp | em 16 16 |        |             |
3434:000 | DONE cmt | em 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
3435:000 | DONE cmt | em 16 16 |        |             |                 ; UM*, which does the real work
3436:000 | DONE ins | em 16 16 | 005a0d | 98          |                 tya                  
3437:000 | DONE ins | em 16 16 | 005a0e | 10 05       |                 bpl 005a15           
3438:000 | DONE wsp | em 16 16 |        |             |
3439:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is negative so we have to ABS it
3440:000 | DONE ins | em 16 16 | 005a10 | 49 ff ff    |                 eor.# 0ffff          
3441:000 | DONE ins | em 16 16 | 005a13 | 1a          |                 inc.a                
3442:000 | DONE ins | em 16 16 | 005a14 | a8          |                 tay                  
3443:000 | DONE wsp | em 16 16 |        |             |
3444:000 | DONE lbl | em 16 16 | 005a15 |             | mstar_abs_nos                        
3445:000 | DONE ins | em 16 16 | 005a15 | b5 00       |                 lda.dx 00            
3446:000 | DONE ins | em 16 16 | 005a17 | 10 06       |                 bpl 005a1f           
3447:000 | DONE wsp | em 16 16 |        |             |
3448:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is negative so we have to ABS it
3449:000 | DONE ins | em 16 16 | 005a19 | 49 ff ff    |                 eor.# 0ffff          
3450:000 | DONE ins | em 16 16 | 005a1c | 1a          |                 inc.a                
3451:000 | DONE ins | em 16 16 | 005a1d | 95 00       |                 sta.dx 00            
3452:000 | DONE wsp | em 16 16 |        |             |
3453:000 | DONE lbl | em 16 16 | 005a1f |             | mstar_umstar                         
3454:000 | DONE ins | em 16 16 | 005a1f | 20 22 5e    |                 jsr 005e22           now ( d ) on stack
3455:000 | DONE wsp | em 16 16 |        |             |
3456:000 | DONE cmt | em 16 16 |        |             |                 ; handle the sign
3457:000 | DONE ins | em 16 16 | 005a22 | 68          |                 pla                  
3458:000 | DONE wsp | em 16 16 |        |             |
3459:000 | DONE cmt | em 16 16 |        |             |                 ; postive, we don't have to care
3460:000 | DONE ins | em 16 16 | 005a23 | 10 03       |                 bpl 005a28           
3461:000 | DONE wsp | em 16 16 |        |             |
3462:000 | DONE ins | em 16 16 | 005a25 | 20 b8 57    |                 jsr 0057b8           
3463:000 | DONE wsp | em 16 16 |        |             |
3464:000 | DONE lbl | em 16 16 | 005a28 |             | z_mstar                              
3464:001 | DONE ins | em 16 16 | 005a28 | 60          |                 rts                  
3465:000 | DONE wsp | em 16 16 |        |             |
3466:000 | DONE wsp | em 16 16 |        |             |
3467:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3468:000 | DONE cmt | em 16 16 |        |             | ; MARKER ( "name" -- ) X bytes / X cycles
3469:000 | DONE cmt | em 16 16 |        |             | ; Create a deletion boundry, restoring the Dictionary to an earlier state. This
3470:000 | DONE cmt | em 16 16 |        |             | ; replaces FORGET in earlier Forths. Old entries are not actually deleted, but
3471:000 | DONE cmt | em 16 16 |        |             | ; merely overwritten by restoring CP and DP.
3472:000 | DONE lbl | em 16 16 | 005a29 |             | xt_marker                            
3473:000 | DONE cmt | em 16 16 |        |             |                 ; This is a defining word
3474:000 | DONE ins | em 16 16 | 005a29 | 20 aa 56    |                 jsr 0056aa           
3475:000 | DONE wsp | em 16 16 |        |             |
3476:000 | DONE cmt | em 16 16 |        |             |                 ; Add the current DP as a payload - the DP of the marker itself
3477:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if it doesn't make more sense to add nt_ of the previous
3478:000 | DONE cmt | em 16 16 |        |             |                 ; word
3479:000 | DONE ins | em 16 16 | 005a2c | a5 02       |                 lda.d 000002         
3480:000 | DONE ins | em 16 16 | 005a2e | 92 00       |                 sta.di 000000        STA (CP)
3481:000 | DONE ins | em 16 16 | 005a30 | e6 00       |                 inc.d 000000         
3482:000 | DONE ins | em 16 16 | 005a32 | e6 00       |                 inc.d 000000         
3483:000 | DONE wsp | em 16 16 |        |             |
3484:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> by hand: Add runtime behavior and DODOES routine
3485:000 | DONE ins | em 16 16 | 005a34 | 20 d9 57    |                 jsr 0057d9           
3486:000 | DONE ins | em 16 16 | 005a37 | 20 32 68    |                 jsr 006832           
3487:000 | DONE wsp | em 16 16 |        |             |
3488:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> payload
3489:000 | DONE ins | em 16 16 | 005a3a | 20 d5 52    |                 jsr 0052d5           ( nt )
3490:000 | DONE wsp | em 16 16 |        |             |
3491:000 | DONE cmt | em 16 16 |        |             |                 ; We now have the DP of the marker itself on the stack, but we
3492:000 | DONE cmt | em 16 16 |        |             |                 ; need the DP of the previous word. That is two bytes down
3493:000 | DONE ins | em 16 16 | 005a3d | 84 20       |                 sty.d 000020         
3494:000 | DONE ins | em 16 16 | 005a3f | a0 02 00    |                 ldy.# 0002           overwrite TOS, won't be needing it
3495:000 | DONE ins | em 16 16 | 005a42 | b1 20       |                 lda.diy 000020       LDA (TMP3),Y
3496:000 | DONE ins | em 16 16 | 005a44 | 85 02       |                 sta.d 000002         
3497:000 | DONE wsp | em 16 16 |        |             |
3498:000 | DONE cmt | em 16 16 |        |             |                 ; Adjust the CP, which is one byte after the z_ address of the
3499:000 | DONE cmt | em 16 16 |        |             |                 ; word we just restored. That address is six bytes down
3500:000 | DONE ins | em 16 16 | 005a46 | a0 06 00    |                 ldy.# 0006           
3501:000 | DONE ins | em 16 16 | 005a49 | b1 02       |                 lda.diy 000002       LDA (DP),Y
3502:000 | DONE ins | em 16 16 | 005a4b | 1a          |                 inc.a                first free byte is one byte further down
3503:000 | DONE ins | em 16 16 | 005a4c | 85 00       |                 sta.d 000000         
3504:000 | DONE wsp | em 16 16 |        |             |
3505:000 | DONE cmt | em 16 16 |        |             |                 ; clean up stack
3506:000 | DONE ins | em 16 16 | 005a4e | b4 00       |                 ldy.dx 00            
3507:000 | DONE ins | em 16 16 | 005a50 | e8          |                 inx                  
3508:000 | DONE ins | em 16 16 | 005a51 | e8          |                 inx                  
3509:000 | DONE wsp | em 16 16 |        |             |
3510:000 | DONE lbl | em 16 16 | 005a52 |             | z_marker                             
3510:001 | DONE ins | em 16 16 | 005a52 | 60          |                 rts                  
3511:000 | DONE wsp | em 16 16 |        |             |
3512:000 | DONE wsp | em 16 16 |        |             |
3513:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3514:000 | DONE cmt | em 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
3515:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
3516:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3517:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3518:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3519:000 | DONE lbl | em 16 16 | 005a53 |             | xt_max                               
3520:000 | DONE ins | em 16 16 | 005a53 | 98          |                 tya                  
3521:000 | DONE ins | em 16 16 | 005a54 | d5 00       |                 cmp.dx 00            
3522:000 | DONE wsp | em 16 16 |        |             |
3523:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3524:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3525:000 | DONE ins | em 16 16 | 005a56 | f0 0b       |                 beq 005a63           Faster than DROP because TOS is in Y
3526:000 | DONE wsp | em 16 16 |        |             |
3527:000 | DONE ins | em 16 16 | 005a58 | f5 00       |                 sbc.dx 00            
3528:000 | DONE ins | em 16 16 | 005a5a | 50 03       |                 bvc 005a5f           no overflow, skip ahead
3529:000 | DONE wsp | em 16 16 |        |             |
3530:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3531:000 | DONE ins | em 16 16 | 005a5c | 49 00 80    |                 eor.# 8000           compliment negative flag
3532:000 | DONE wsp | em 16 16 |        |             |
3533:000 | DONE lbl | em 16 16 | 005a5f |             | max_no_ov                            
3534:000 | DONE ins | em 16 16 | 005a5f | 10 02       |                 bpl 005a63           keep TOS
3535:000 | DONE lbl | em 16 16 | 005a61 |             | max_drop                             
3536:000 | DONE ins | em 16 16 | 005a61 | b4 00       |                 ldy.dx 00            DROP so NOS is result
3537:000 | DONE lbl | em 16 16 | 005a63 |             | max_nip                              
3538:000 | DONE ins | em 16 16 | 005a63 | e8          |                 inx                  
3539:000 | DONE ins | em 16 16 | 005a64 | e8          |                 inx                  
3540:000 | DONE wsp | em 16 16 |        |             |
3541:000 | DONE lbl | em 16 16 | 005a65 |             | z_max                                
3541:001 | DONE ins | em 16 16 | 005a65 | 60          |                 rts                  
3542:000 | DONE wsp | em 16 16 |        |             |
3543:000 | DONE wsp | em 16 16 |        |             |
3544:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3545:000 | DONE cmt | em 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
3546:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
3547:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3548:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3549:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3550:000 | DONE lbl | em 16 16 | 005a66 |             | xt_min                               
3551:000 | DONE ins | em 16 16 | 005a66 | 98          |                 tya                  
3552:000 | DONE ins | em 16 16 | 005a67 | d5 00       |                 cmp.dx 00            
3553:000 | DONE wsp | em 16 16 |        |             |
3554:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3555:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3556:000 | DONE ins | em 16 16 | 005a69 | f0 0b       |                 beq 005a76           Faster than DROP because TOS is in Y
3557:000 | DONE wsp | em 16 16 |        |             |
3558:000 | DONE ins | em 16 16 | 005a6b | f5 00       |                 sbc.dx 00            
3559:000 | DONE ins | em 16 16 | 005a6d | 50 03       |                 bvc 005a72           no overflow, skip ahead
3560:000 | DONE wsp | em 16 16 |        |             |
3561:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3562:000 | DONE ins | em 16 16 | 005a6f | 49 00 80    |                 eor.# 8000           compliment negative flag
3563:000 | DONE wsp | em 16 16 |        |             |
3564:000 | DONE lbl | em 16 16 | 005a72 |             | min_no_ov                            
3565:000 | DONE ins | em 16 16 | 005a72 | 30 02       |                 bmi 005a76           keep TOS
3566:000 | DONE lbl | em 16 16 | 005a74 |             | min_drop                             
3567:000 | DONE ins | em 16 16 | 005a74 | b4 00       |                 ldy.dx 00            DROP so NOS is result
3568:000 | DONE lbl | em 16 16 | 005a76 |             | min_nip                              
3569:000 | DONE ins | em 16 16 | 005a76 | e8          |                 inx                  
3570:000 | DONE ins | em 16 16 | 005a77 | e8          |                 inx                  
3571:000 | DONE wsp | em 16 16 |        |             |
3572:000 | DONE lbl | em 16 16 | 005a78 |             | z_min                                
3572:001 | DONE ins | em 16 16 | 005a78 | 60          |                 rts                  
3573:000 | DONE wsp | em 16 16 |        |             |
3574:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3575:000 | DONE cmt | em 16 16 |        |             | ; MOVE ( addr1 addr2 u -- ) X bytes / X cycles
3576:000 | DONE cmt | em 16 16 |        |             | ; Move u bytes from addr1 to addr2, so that in the end, addr2 contains exactly
3577:000 | DONE cmt | em 16 16 |        |             | ; what was in addr1. This routine calls CMOVE or CMOVE>. Forth verison is
3578:000 | DONE cmt | em 16 16 |        |             | ; >R 2DUP U< IF R> CMOVE> ELSE  R> CMOVE THEN ; see
3579:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/-l2WlE7pEE0
3580:000 | DONE cmt | em 16 16 |        |             | ; Also see CMOVE> and CMOVE and http://forum.6502.org/viewtopic.php?f=2&t=1685
3581:000 | DONE lbl | em 16 16 | 005a79 |             | xt_move                              
3582:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3583:000 | DONE cmt | em 16 16 |        |             |                 ; if u is zero, we just skip all of this
3584:000 | DONE ins | em 16 16 | 005a79 | 98          |                 tya                  
3585:000 | DONE ins | em 16 16 | 005a7a | f0 0e       |                 beq 005a8a           
3586:000 | DONE wsp | em 16 16 |        |             |
3587:000 | DONE cmt | em 16 16 |        |             |                 ; if source and destination are the same, that would be silly as
3588:000 | DONE cmt | em 16 16 |        |             |                 ; well
3589:000 | DONE ins | em 16 16 | 005a7c | b5 00       |                 lda.dx 00            addr2 (destination)
3590:000 | DONE ins | em 16 16 | 005a7e | d5 04       |                 cmp.dx 04            addr1 (source)
3591:000 | DONE ins | em 16 16 | 005a80 | f0 08       |                 beq 005a8a           
3592:000 | DONE wsp | em 16 16 |        |             |
3593:000 | DONE cmt | em 16 16 |        |             |                 ; The destination is higher than the source, so use CMOVE, which
3594:000 | DONE cmt | em 16 16 |        |             |                 ; calls MVP
3595:000 | DONE ins | em 16 16 | 005a82 | 10 03       |                 bpl 005a87           
3596:000 | DONE wsp | em 16 16 |        |             |
3597:000 | DONE ins | em 16 16 | 005a84 | 4c 0c 56    |                 jmp 00560c           JSR/RTS
3598:000 | DONE wsp | em 16 16 |        |             |
3599:000 | DONE cmt | em 16 16 |        |             |                 ; The source is higher than the destination, use CMOVE>,
3600:000 | DONE cmt | em 16 16 |        |             |                 ; which calls MVN
3601:000 | DONE lbl | em 16 16 | 005a87 |             | move_cmoveup                         
3602:000 | DONE ins | em 16 16 | 005a87 | 4c 2f 56    |                 jmp 00562f           
3603:000 | DONE wsp | em 16 16 |        |             |
3604:000 | DONE lbl | em 16 16 | 005a8a |             | z_move                               ; never reached
3605:000 | DONE wsp | em 16 16 |        |             |
3606:000 | DONE wsp | em 16 16 |        |             |
3607:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3608:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
3609:000 | DONE cmt | em 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
3610:000 | DONE cmt | em 16 16 |        |             | ; TODO deal with compile-only words, see
3611:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3612:000 | DONE lbl | em 16 16 | 005a8a |             | xt_name-int                          
3613:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3614:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3615:000 | DONE cmt | em 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
3616:000 | DONE ins | em 16 16 | 005a8a | c8          |                 iny                  
3617:000 | DONE ins | em 16 16 | 005a8b | c8          |                 iny                  
3618:000 | DONE ins | em 16 16 | 005a8c | c8          |                 iny                  
3619:000 | DONE ins | em 16 16 | 005a8d | c8          |                 iny                  
3620:000 | DONE ins | em 16 16 | 005a8e | b9 00 00    |                 lda.y 0000           
3621:000 | DONE ins | em 16 16 | 005a91 | a8          |                 tay                  
3622:000 | DONE wsp | em 16 16 |        |             |
3623:000 | DONE lbl | em 16 16 | 005a92 |             | z_name-int                           
3623:001 | DONE ins | em 16 16 | 005a92 | 60          |                 rts                  
3624:000 | DONE wsp | em 16 16 |        |             |
3625:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3626:000 | DONE cmt | em 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
3627:000 | DONE cmt | em 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
3628:000 | DONE cmt | em 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
3629:000 | DONE cmt | em 16 16 |        |             | ; a valid name token. There is no "STRING>NAME" - this is handled by the
3630:000 | DONE cmt | em 16 16 |        |             | ; combination of PARSE-NAME and FIND-NAME
3631:000 | DONE lbl | em 16 16 | 005a93 |             | xt_name-string                       
3632:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3633:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3634:000 | DONE ins | em 16 16 | 005a93 | ca          |                 dex                  move NOS down one
3635:000 | DONE ins | em 16 16 | 005a94 | ca          |                 dex                  
3636:000 | DONE wsp | em 16 16 |        |             |
3637:000 | DONE cmt | em 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
3638:000 | DONE cmt | em 16 16 |        |             |                 ; which we have as TOS
3639:000 | DONE ins | em 16 16 | 005a95 | 98          |                 tya                  
3640:000 | DONE ins | em 16 16 | 005a96 | 18          |                 clc                  
3641:000 | DONE ins | em 16 16 | 005a97 | 69 08 00    |                 adc.# 0008           
3642:000 | DONE ins | em 16 16 | 005a9a | 95 00       |                 sta.dx 00            NOS
3643:000 | DONE wsp | em 16 16 |        |             |
3644:000 | DONE cmt | em 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
3645:000 | DONE cmt | em 16 16 |        |             |                 ; of the dictionary entry header (the name token)
3646:000 | DONE ins | em 16 16 | 005a9c | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3647:000 | DONE ins | em 16 16 | 005a9f | 29 ff 00    |                 and.# 00ff           mask all but length byte
3648:000 | DONE ins | em 16 16 | 005aa2 | a8          |                 tay                  
3649:000 | DONE wsp | em 16 16 |        |             |
3650:000 | DONE lbl | em 16 16 | 005aa3 |             | z_name-string                        
3650:001 | DONE ins | em 16 16 | 005aa3 | 60          |                 rts                  
3651:000 | DONE wsp | em 16 16 |        |             |
3652:000 | DONE wsp | em 16 16 |        |             |
3653:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3654:000 | DONE cmt | em 16 16 |        |             | ; NATIVE-COMPILE ( -- ) X bytes / X cycles
3655:000 | DONE cmt | em 16 16 |        |             | ; Enable native compilation for last word in Dictionary
3656:000 | DONE lbl | em 16 16 | 005aa4 |             | xt_native-compile                    
3657:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3658:000 | DONE ins | em 16 16 | 005aa4 | a9 01 00    |                 lda.# NC             
3659:000 | DONE ins | em 16 16 | 005aa7 | eb          |                 xba                  flags are MSB
3660:000 | DONE ins | em 16 16 | 005aa8 | 12 02       |                 ora.di 000002        ORA (DP)
3661:000 | DONE ins | em 16 16 | 005aaa | 92 02       |                 sta.di 000002        
3662:000 | DONE wsp | em 16 16 |        |             |
3663:000 | DONE lbl | em 16 16 | 005aac |             | z_native-compile                     
3664:000 | DONE ins | em 16 16 | 005aac | 60          |                 rts                  
3665:000 | DONE wsp | em 16 16 |        |             |
3666:000 | DONE wsp | em 16 16 |        |             |
3667:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3668:000 | DONE cmt | em 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
3669:000 | DONE cmt | em 16 16 |        |             | ; Two's complement of TOS
3670:000 | DONE lbl | em 16 16 | 005aad |             | xt_negate                            
3671:000 | DONE ins | em 16 16 | 005aad | 98          |                 tya                  
3672:000 | DONE ins | em 16 16 | 005aae | 49 ff ff    |                 eor.# 0ffff          
3673:000 | DONE ins | em 16 16 | 005ab1 | 1a          |                 inc.a                
3674:000 | DONE ins | em 16 16 | 005ab2 | a8          |                 tay                  
3675:000 | DONE wsp | em 16 16 |        |             |
3676:000 | DONE lbl | em 16 16 | 005ab3 |             | z_negate                             
3676:001 | DONE ins | em 16 16 | 005ab3 | 60          |                 rts                  
3677:000 | DONE wsp | em 16 16 |        |             |
3678:000 | DONE wsp | em 16 16 |        |             |
3679:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3680:000 | DONE cmt | em 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
3681:000 | DONE cmt | em 16 16 |        |             | ; Delete entry that is NOS
3682:000 | DONE lbl | em 16 16 | 005ab4 |             | xt_nip                               
3683:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3684:000 | DONE ins | em 16 16 | 005ab4 | e8          |                 inx                  
3685:000 | DONE ins | em 16 16 | 005ab5 | e8          |                 inx                  
3686:000 | DONE lbl | em 16 16 | 005ab6 |             | z_nip                                
3686:001 | DONE ins | em 16 16 | 005ab6 | 60          |                 rts                  
3687:000 | DONE wsp | em 16 16 |        |             |
3688:000 | DONE wsp | em 16 16 |        |             |
3689:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3690:000 | DONE cmt | em 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
3691:000 | DONE cmt | em 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
3692:000 | DONE cmt | em 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
3693:000 | DONE cmt | em 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
3694:000 | DONE cmt | em 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
3695:000 | DONE cmt | em 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
3696:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
3697:000 | DONE cmt | em 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
3698:000 | DONE cmt | em 16 16 |        |             | ; signal a double cell number is required to be the last character of the
3699:000 | DONE cmt | em 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
3700:000 | DONE cmt | em 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
3701:000 | DONE lbl | em 16 16 | 005ab7 |             | xt_number                            
3702:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3703:000 | DONE cmt | em 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
3704:000 | DONE cmt | em 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
3705:000 | DONE cmt | em 16 16 |        |             |                 ; for double
3706:000 | DONE ins | em 16 16 | 005ab7 | f4 00 00    |                 phe.# 0000           
3707:000 | DONE wsp | em 16 16 |        |             |
3708:000 | DONE ins | em 16 16 | 005aba | 84 24       |                 sty.d 000024         save length of string, freeing Y
3709:000 | DONE wsp | em 16 16 |        |             |
3710:000 | DONE cmt | em 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
3711:000 | DONE cmt | em 16 16 |        |             |                 ; a flag
3712:000 | DONE ins | em 16 16 | 005abc | e2 20       |                 sep 20               
3712:001 | DONE ctl | em  8 16 |        |             |         .!a8
3713:000 | DONE ins | em  8 16 | 005abe | a1 00       |                 lda.dxi 00           get first character
3714:000 | DONE ins | em  8 16 | 005ac0 | c9 2d       |                 cmp.# 2d             
3715:000 | DONE ins | em  8 16 | 005ac2 | c2 20       |                 rep 20               
3715:001 | DONE ctl | em 16 16 |        |             |         .!a16
3716:000 | DONE ins | em 16 16 | 005ac4 | d0 09       |                 bne 005acf           
3717:000 | DONE wsp | em 16 16 |        |             |
3718:000 | DONE cmt | em 16 16 |        |             |                 ; We have a minus.
3719:000 | DONE ins | em 16 16 | 005ac6 | 68          |                 pla                  
3720:000 | DONE ins | em 16 16 | 005ac7 | 09 00 ff    |                 ora.# 0ff00          MSB is minus
3721:000 | DONE ins | em 16 16 | 005aca | 48          |                 pha                  
3722:000 | DONE wsp | em 16 16 |        |             |
3723:000 | DONE ins | em 16 16 | 005acb | f6 00       |                 inc.dx 00            start one character later
3724:000 | DONE ins | em 16 16 | 005acd | c6 24       |                 dec.d 000024         reduce string length by one
3725:000 | DONE wsp | em 16 16 |        |             |
3726:000 | DONE lbl | em 16 16 | 005acf |             | number_dot                           
3727:000 | DONE cmt | em 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
3728:000 | DONE ins | em 16 16 | 005acf | a5 24       |                 lda.d 000024         get the string length
3729:000 | DONE ins | em 16 16 | 005ad1 | 3a          |                 dec.a                subtract one to convert length to index
3730:000 | DONE ins | em 16 16 | 005ad2 | 18          |                 clc                  
3731:000 | DONE ins | em 16 16 | 005ad3 | 75 00       |                 adc.dx 00            add length of string
3732:000 | DONE ins | em 16 16 | 005ad5 | a8          |                 tay                  
3733:000 | DONE ins | em 16 16 | 005ad6 | e2 20       |                 sep 20               
3733:001 | DONE ctl | em  8 16 |        |             |         .!a8
3734:000 | DONE ins | em  8 16 | 005ad8 | b9 00 00    |                 lda.y 0000           get last character
3735:000 | DONE ins | em  8 16 | 005adb | c9 2e       |                 cmp.# 2e             
3736:000 | DONE ins | em  8 16 | 005add | c2 20       |                 rep 20               
3736:001 | DONE ctl | em 16 16 |        |             |         .!a16
3737:000 | DONE ins | em 16 16 | 005adf | d0 07       |                 bne 005ae8           
3738:000 | DONE wsp | em 16 16 |        |             |
3739:000 | DONE cmt | em 16 16 |        |             |                 ; we have a dot
3740:000 | DONE ins | em 16 16 | 005ae1 | 68          |                 pla                  get the flag back
3741:000 | DONE ins | em 16 16 | 005ae2 | 09 ff 00    |                 ora.# 00ff           LSB is double
3742:000 | DONE ins | em 16 16 | 005ae5 | 48          |                 pha                  
3743:000 | DONE wsp | em 16 16 |        |             |
3744:000 | DONE ins | em 16 16 | 005ae6 | c6 24       |                 dec.d 000024         reduce string length by one
3745:000 | DONE wsp | em 16 16 |        |             |
3746:000 | DONE lbl | em 16 16 | 005ae8 |             | number_main                          
3747:000 | DONE cmt | em 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
3748:000 | DONE ins | em 16 16 | 005ae8 | b5 00       |                 lda.dx 00            get the string address to safety
3749:000 | DONE ins | em 16 16 | 005aea | 74 00       |                 stz.dx 00            NOS is now zero
3750:000 | DONE ins | em 16 16 | 005aec | ca          |                 dex                  
3751:000 | DONE ins | em 16 16 | 005aed | ca          |                 dex                  
3752:000 | DONE ins | em 16 16 | 005aee | 74 00       |                 stz.dx 00            3OS and NOS are now zero
3753:000 | DONE ins | em 16 16 | 005af0 | ca          |                 dex                  
3754:000 | DONE ins | em 16 16 | 005af1 | ca          |                 dex                  
3755:000 | DONE wsp | em 16 16 |        |             |
3756:000 | DONE ins | em 16 16 | 005af2 | 95 00       |                 sta.dx 00            address is back as NOS
3757:000 | DONE ins | em 16 16 | 005af4 | a4 24       |                 ldy.d 000024         length is back as TOS
3758:000 | DONE wsp | em 16 16 |        |             |
3759:000 | DONE lbl | em 16 16 | 005af6 |             | number_loop                          
3760:000 | DONE ins | em 16 16 | 005af6 | 20 5e 51    |                 jsr 00515e           ( ud addr u -- ud addr u )
3761:000 | DONE wsp | em 16 16 |        |             |
3762:000 | DONE ins | em 16 16 | 005af9 | 98          |                 tya                  test length of returned string, should be 0
3763:000 | DONE ins | em 16 16 | 005afa | f0 06       |                 beq 005b02           
3764:000 | DONE wsp | em 16 16 |        |             |
3765:000 | DONE cmt | em 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
3766:000 | DONE cmt | em 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
3767:000 | DONE cmt | em 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
3768:000 | DONE cmt | em 16 16 |        |             |                 ; trouble one way or another
3769:000 | DONE cmt | em 16 16 |        |             |                 ; TODO print offending string
3770:000 | DONE ins | em 16 16 | 005afc | a9 5a 70    |                 lda.# 00705a         
3771:000 | DONE ins | em 16 16 | 005aff | 4c cb 68    |                 jmp 0068cb           
3772:000 | DONE wsp | em 16 16 |        |             |
3773:000 | DONE lbl | em 16 16 | 005b02 |             | number_ok                            
3774:000 | DONE cmt | em 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
3775:000 | DONE ins | em 16 16 | 005b02 | b4 02       |                 ldy.dx 02            
3776:000 | DONE ins | em 16 16 | 005b04 | e8          |                 inx                  
3777:000 | DONE ins | em 16 16 | 005b05 | e8          |                 inx                  
3778:000 | DONE ins | em 16 16 | 005b06 | e8          |                 inx                  
3779:000 | DONE ins | em 16 16 | 005b07 | e8          |                 inx                  
3780:000 | DONE wsp | em 16 16 |        |             |
3781:000 | DONE cmt | em 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
3782:000 | DONE cmt | em 16 16 |        |             |                 ; a minus and might actually be single-cell
3783:000 | DONE ins | em 16 16 | 005b08 | 68          |                 pla                  get copy of the flags
3784:000 | DONE ins | em 16 16 | 005b09 | 48          |                 pha                  
3785:000 | DONE ins | em 16 16 | 005b0a | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
3786:000 | DONE ins | em 16 16 | 005b0d | f0 1b       |                 beq 005b2a           
3787:000 | DONE wsp | em 16 16 |        |             |
3788:000 | DONE cmt | em 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
3789:000 | DONE cmt | em 16 16 |        |             |                 ; negate it
3790:000 | DONE ins | em 16 16 | 005b0f | 68          |                 pla                  
3791:000 | DONE ins | em 16 16 | 005b10 | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
3792:000 | DONE ins | em 16 16 | 005b13 | f0 25       |                 beq 005b3a           no minus, all done
3793:000 | DONE wsp | em 16 16 |        |             |
3794:000 | DONE ins | em 16 16 | 005b15 | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
3795:000 | DONE ins | em 16 16 | 005b17 | 49 ff ff    |                 eor.# 0ffff          
3796:000 | DONE wsp | em 16 16 |        |             |
3797:000 | DONE cmt | em 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
3798:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3799:000 | DONE ins | em 16 16 | 005b1a | 18          |                 clc                  
3800:000 | DONE ins | em 16 16 | 005b1b | 69 01 00    |                 adc.# 0001           
3801:000 | DONE ins | em 16 16 | 005b1e | 95 00       |                 sta.dx 00            
3802:000 | DONE wsp | em 16 16 |        |             |
3803:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
3804:000 | DONE ins | em 16 16 | 005b20 | 98          |                 tya                  
3805:000 | DONE ins | em 16 16 | 005b21 | 49 ff ff    |                 eor.# 0ffff          
3806:000 | DONE ins | em 16 16 | 005b24 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
3807:000 | DONE ins | em 16 16 | 005b27 | a8          |                 tay                  
3808:000 | DONE wsp | em 16 16 |        |             |
3809:000 | DONE ins | em 16 16 | 005b28 | 80 10       |                 bra 005b3a           
3810:000 | DONE wsp | em 16 16 |        |             |
3811:000 | DONE lbl | em 16 16 | 005b2a |             | number_single                        
3812:000 | DONE cmt | em 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
3813:000 | DONE ins | em 16 16 | 005b2a | b4 00       |                 ldy.dx 00            
3814:000 | DONE ins | em 16 16 | 005b2c | e8          |                 inx                  
3815:000 | DONE ins | em 16 16 | 005b2d | e8          |                 inx                  
3816:000 | DONE wsp | em 16 16 |        |             |
3817:000 | DONE cmt | em 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
3818:000 | DONE cmt | em 16 16 |        |             |                 ; doubled for speed
3819:000 | DONE ins | em 16 16 | 005b2e | 68          |                 pla                  
3820:000 | DONE ins | em 16 16 | 005b2f | 29 00 ff    |                 and.# 0ff00          
3821:000 | DONE ins | em 16 16 | 005b32 | f0 06       |                 beq 005b3a           no minus, all done
3822:000 | DONE wsp | em 16 16 |        |             |
3823:000 | DONE ins | em 16 16 | 005b34 | 98          |                 tya                  NEGATE
3824:000 | DONE ins | em 16 16 | 005b35 | 49 ff ff    |                 eor.# 0ffff          
3825:000 | DONE ins | em 16 16 | 005b38 | 1a          |                 inc.a                
3826:000 | DONE ins | em 16 16 | 005b39 | a8          |                 tay                  fall through to end
3827:000 | DONE wsp | em 16 16 |        |             |
3828:000 | DONE lbl | em 16 16 | 005b3a |             | z_number                             
3828:001 | DONE ins | em 16 16 | 005b3a | 60          |                 rts                  
3829:000 | DONE wsp | em 16 16 |        |             |
3830:000 | DONE wsp | em 16 16 |        |             |
3831:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3832:000 | DONE cmt | em 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
3833:000 | DONE cmt | em 16 16 |        |             | ; Logical OR
3834:000 | DONE lbl | em 16 16 | 005b3b |             | xt_or                                
3835:000 | DONE ins | em 16 16 | 005b3b | 98          |                 tya                  
3836:000 | DONE ins | em 16 16 | 005b3c | 15 00       |                 ora.dx 00            
3837:000 | DONE ins | em 16 16 | 005b3e | a8          |                 tay                  
3838:000 | DONE wsp | em 16 16 |        |             |
3839:000 | DONE ins | em 16 16 | 005b3f | e8          |                 inx                  
3840:000 | DONE ins | em 16 16 | 005b40 | e8          |                 inx                  
3841:000 | DONE wsp | em 16 16 |        |             |
3842:000 | DONE lbl | em 16 16 | 005b41 |             | z_or                                 
3842:001 | DONE ins | em 16 16 | 005b41 | 60          |                 rts                  
3843:000 | DONE wsp | em 16 16 |        |             |
3844:000 | DONE wsp | em 16 16 |        |             |
3845:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3846:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT ( -- addr ) X bytes / X cycles
3847:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump target for EMIT is stored. By default, this
3848:000 | DONE cmt | em 16 16 |        |             | ; will hold the value of put_chr from the kernel routine, but this can be
3849:000 | DONE cmt | em 16 16 |        |             | ; changed by the user
3850:000 | DONE lbl | em 16 16 | 005b42 |             | xt_output                            
3851:000 | DONE ins | em 16 16 | 005b42 | ca          |                 dex                  
3852:000 | DONE ins | em 16 16 | 005b43 | ca          |                 dex                  
3853:000 | DONE ins | em 16 16 | 005b44 | 94 00       |                 sty.dx 00            
3854:000 | DONE wsp | em 16 16 |        |             |
3855:000 | DONE ins | em 16 16 | 005b46 | a0 0e 00    |                 ldy.# 00000e         
3856:000 | DONE wsp | em 16 16 |        |             |
3857:000 | DONE lbl | em 16 16 | 005b49 |             | z_output                             
3857:001 | DONE ins | em 16 16 | 005b49 | 60          |                 rts                  
3858:000 | DONE wsp | em 16 16 |        |             |
3859:000 | DONE wsp | em 16 16 |        |             |
3860:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3861:000 | DONE cmt | em 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
3862:000 | DONE cmt | em 16 16 |        |             | ; Push NOS on Data Stack
3863:000 | DONE lbl | em 16 16 | 005b4a |             | xt_over                              
3864:000 | DONE ins | em 16 16 | 005b4a | ca          |                 dex                  
3865:000 | DONE ins | em 16 16 | 005b4b | ca          |                 dex                  
3866:000 | DONE ins | em 16 16 | 005b4c | 94 00       |                 sty.dx 00            
3867:000 | DONE ins | em 16 16 | 005b4e | b4 02       |                 ldy.dx 02            
3868:000 | DONE wsp | em 16 16 |        |             |
3869:000 | DONE lbl | em 16 16 | 005b50 |             | z_over                               
3869:001 | DONE ins | em 16 16 | 005b50 | 60          |                 rts                  
3870:000 | DONE wsp | em 16 16 |        |             |
3871:000 | DONE wsp | em 16 16 |        |             |
3872:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3873:000 | DONE cmt | em 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
3874:000 | DONE cmt | em 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
3875:000 | DONE cmt | em 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
3876:000 | DONE cmt | em 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
3877:000 | DONE cmt | em 16 16 |        |             | ; user and not used by the system
3878:000 | DONE lbl | em 16 16 | 005b51 |             | xt_pad                               
3879:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3880:000 | DONE ins | em 16 16 | 005b51 | ca          |                 dex                  
3881:000 | DONE ins | em 16 16 | 005b52 | ca          |                 dex                  
3882:000 | DONE ins | em 16 16 | 005b53 | 94 00       |                 sty.dx 00            
3883:000 | DONE wsp | em 16 16 |        |             |
3884:000 | DONE ins | em 16 16 | 005b55 | a5 00       |                 lda.d 000000         
3885:000 | DONE ins | em 16 16 | 005b57 | 18          |                 clc                  
3886:000 | DONE ins | em 16 16 | 005b58 | 69 ff 00    |                 adc.# 0000ff         
3887:000 | DONE ins | em 16 16 | 005b5b | a8          |                 tay                  
3888:000 | DONE wsp | em 16 16 |        |             |
3889:000 | DONE lbl | em 16 16 | 005b5c |             | z_pad                                
3889:001 | DONE ins | em 16 16 | 005b5c | 60          |                 rts                  
3890:000 | DONE wsp | em 16 16 |        |             |
3891:000 | DONE wsp | em 16 16 |        |             |
3892:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3893:000 | DONE cmt | em 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
3894:000 | DONE cmt | em 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
3895:000 | DONE cmt | em 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
3896:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite with EMIT
3897:000 | DONE lbl | em 16 16 | 005b5d |             | xt_page                              
3898:000 | DONE ins | em 16 16 | 005b5d | a9 69 70    |                 lda.# 007069         
3899:000 | DONE ins | em 16 16 | 005b60 | 20 d1 68    |                 jsr 0068d1           
3900:000 | DONE wsp | em 16 16 |        |             |
3901:000 | DONE cmt | em 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
3902:000 | DONE cmt | em 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
3903:000 | DONE cmt | em 16 16 |        |             |                 ; So we send "ESC[H" as well.
3904:000 | DONE ins | em 16 16 | 005b63 | a9 6e 70    |                 lda.# 00706e         
3905:000 | DONE ins | em 16 16 | 005b66 | 20 d1 68    |                 jsr 0068d1           
3906:000 | DONE wsp | em 16 16 |        |             |
3907:000 | DONE lbl | em 16 16 | 005b69 |             | z_page                               
3907:001 | DONE ins | em 16 16 | 005b69 | 60          |                 rts                  
3908:000 | DONE wsp | em 16 16 |        |             |
3909:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3910:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
3911:000 | DONE cmt | em 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
3912:000 | DONE cmt | em 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
3913:000 | DONE cmt | em 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
3914:000 | DONE cmt | em 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
3915:000 | DONE cmt | em 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
3916:000 | DONE lbl | em 16 16 | 005b6a |             | xt_parse-name                        
3917:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3918:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3919:000 | DONE cmt | em 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
3920:000 | DONE cmt | em 16 16 |        |             |                 ; character on data stack for PARSE
3921:000 | DONE ins | em 16 16 | 005b6a | 5a          |                 phy                  save TOS for later use
3922:000 | DONE ins | em 16 16 | 005b6b | a4 0c       |                 ldy.d 00000c         >IN
3923:000 | DONE ins | em 16 16 | 005b6d | e2 20       |                 sep 20               
3923:001 | DONE ctl | em  8 16 |        |             |         .!a8
3924:000 | DONE lbl | em  8 16 | 005b6f |             | parse-name_loop                      
3925:000 | DONE ins | em  8 16 | 005b6f | c4 0a       |                 cpy.d 00000a         end of line?
3926:000 | DONE ins | em  8 16 | 005b71 | f0 09       |                 beq 005b7c           
3927:000 | DONE wsp | em  8 16 |        |             |
3928:000 | DONE ins | em  8 16 | 005b73 | b1 08       |                 lda.diy 000008       LDA (CIB),Y
3929:000 | DONE ins | em  8 16 | 005b75 | c9 20       |                 cmp.# AscSP          
3930:000 | DONE ins | em  8 16 | 005b77 | d0 17       |                 bne 005b90           
3931:000 | DONE ins | em  8 16 | 005b79 | c8          |                 iny                  
3932:000 | DONE ins | em  8 16 | 005b7a | 80 f3       |                 bra 005b6f           
3933:000 | DONE wsp | em  8 16 |        |             |
3934:000 | DONE lbl | em  8 16 | 005b7c |             | parse-name_empty_line                
3935:000 | DONE ins | em  8 16 | 005b7c | c2 20       |                 rep 20               
3935:001 | DONE ctl | em 16 16 |        |             |         .!a16
3936:000 | DONE cmt | em 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
3937:000 | DONE cmt | em 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
3938:000 | DONE cmt | em 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
3939:000 | DONE cmt | em 16 16 |        |             |                 ; show that it returns the address of the last space in the
3940:000 | DONE cmt | em 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
3941:000 | DONE ins | em 16 16 | 005b7e | ca          |                 dex                  
3942:000 | DONE ins | em 16 16 | 005b7f | ca          |                 dex                  
3943:000 | DONE ins | em 16 16 | 005b80 | ca          |                 dex                  
3944:000 | DONE ins | em 16 16 | 005b81 | ca          |                 dex                  
3945:000 | DONE wsp | em 16 16 |        |             |
3946:000 | DONE ins | em 16 16 | 005b82 | 7a          |                 ply                  restore old TOS as 3OS
3947:000 | DONE ins | em 16 16 | 005b83 | 94 02       |                 sty.dx 02            
3948:000 | DONE wsp | em 16 16 |        |             |
3949:000 | DONE ins | em 16 16 | 005b85 | a5 08       |                 lda.d 000008         
3950:000 | DONE ins | em 16 16 | 005b87 | 18          |                 clc                  
3951:000 | DONE ins | em 16 16 | 005b88 | 65 0a       |                 adc.d 00000a         
3952:000 | DONE ins | em 16 16 | 005b8a | 95 00       |                 sta.dx 00            Address as NOS
3953:000 | DONE wsp | em 16 16 |        |             |
3954:000 | DONE ins | em 16 16 | 005b8c | a0 00 00    |                 ldy.# 0000           TOS
3955:000 | DONE wsp | em 16 16 |        |             |
3956:000 | DONE ins | em 16 16 | 005b8f | 60          |                 rts                  don't have to go through PARSE
3957:000 | DONE wsp | em 16 16 |        |             |
3958:000 | DONE lbl | em 16 16 | 005b90 |             | parse-name_found                     
3959:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3960:000 | DONE ins | em 16 16 | 005b90 | c2 20       |                 rep 20               
3960:001 | DONE ctl | em 16 16 |        |             |         .!a16
3961:000 | DONE ins | em 16 16 | 005b92 | 84 0c       |                 sty.d 00000c         new >IN
3962:000 | DONE wsp | em 16 16 |        |             |
3963:000 | DONE ins | em 16 16 | 005b94 | 7a          |                 ply                  recover TOS
3964:000 | DONE ins | em 16 16 | 005b95 | ca          |                 dex                  
3965:000 | DONE ins | em 16 16 | 005b96 | ca          |                 dex                  
3966:000 | DONE ins | em 16 16 | 005b97 | 94 00       |                 sty.dx 00            
3967:000 | DONE wsp | em 16 16 |        |             |
3968:000 | DONE ins | em 16 16 | 005b99 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
3969:000 | DONE wsp | em 16 16 |        |             |
3970:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to PARSE
3971:000 | DONE wsp | em 16 16 |        |             |
3972:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3973:000 | DONE cmt | em 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
3974:000 | DONE cmt | em 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
3975:000 | DONE cmt | em 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
3976:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
3977:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
3978:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME drops through to here
3979:000 | DONE cmt | em 16 16 |        |             | ;
3980:000 | DONE cmt | em 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
3981:000 | DONE cmt | em 16 16 |        |             | ;     v       v             v
3982:000 | DONE cmt | em 16 16 |        |             | ;     |#####################|              Length of found string:
3983:000 | DONE cmt | em 16 16 |        |             | ;                                          ciblen - toin
3984:000 | DONE cmt | em 16 16 |        |             | ;     +------>|  toin (>IN)
3985:000 | DONE cmt | em 16 16 |        |             | ;     +-------------------->|  ciblen
3986:000 | DONE cmt | em 16 16 |        |             | ;
3987:000 | DONE cmt | em 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
3988:000 | DONE cmt | em 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
3989:000 | DONE cmt | em 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
3990:000 | DONE cmt | em 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
3991:000 | DONE lbl | em 16 16 | 005b9c |             | xt_parse                             
3992:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3993:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3994:000 | DONE ins | em 16 16 | 005b9c | 84 1c       |                 sty.d 00001c         save delimiter, char is LSB
3995:000 | DONE wsp | em 16 16 |        |             |
3996:000 | DONE cmt | em 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
3997:000 | DONE cmt | em 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
3998:000 | DONE cmt | em 16 16 |        |             |                 ; return
3999:000 | DONE ins | em 16 16 | 005b9e | a5 0c       |                 lda.d 00000c         
4000:000 | DONE ins | em 16 16 | 005ba0 | 85 20       |                 sta.d 000020         save >IN for later length calculation
4001:000 | DONE ins | em 16 16 | 005ba2 | 18          |                 clc                  
4002:000 | DONE ins | em 16 16 | 005ba3 | 65 08       |                 adc.d 000008         
4003:000 | DONE wsp | em 16 16 |        |             |
4004:000 | DONE ins | em 16 16 | 005ba5 | ca          |                 dex                  save addr as NOS
4005:000 | DONE ins | em 16 16 | 005ba6 | ca          |                 dex                  
4006:000 | DONE ins | em 16 16 | 005ba7 | 95 00       |                 sta.dx 00            
4007:000 | DONE wsp | em 16 16 |        |             |
4008:000 | DONE ins | em 16 16 | 005ba9 | 64 1e       |                 stz.d 00001e         offset for EOL/char found adjustment of >IN
4009:000 | DONE wsp | em 16 16 |        |             |
4010:000 | DONE cmt | em 16 16 |        |             |                 ; prepare loop using Y as index
4011:000 | DONE ins | em 16 16 | 005bab | a4 0c       |                 ldy.d 00000c         
4012:000 | DONE ins | em 16 16 | 005bad | e2 20       |                 sep 20               
4012:001 | DONE ctl | em  8 16 |        |             |         .!a8
4013:000 | DONE wsp | em  8 16 |        |             |
4014:000 | DONE lbl | em  8 16 | 005baf |             | parse_loop                           
4015:000 | DONE ins | em  8 16 | 005baf | c4 0a       |                 cpy.d 00000a         check for EOL first
4016:000 | DONE ins | em  8 16 | 005bb1 | f0 0d       |                 beq 005bc0           
4017:000 | DONE wsp | em  8 16 |        |             |
4018:000 | DONE ins | em  8 16 | 005bb3 | b1 08       |                 lda.diy 000008       LDA (CIB),Y
4019:000 | DONE ins | em  8 16 | 005bb5 | c5 1c       |                 cmp.d 00001c         found delimiter?
4020:000 | DONE ins | em  8 16 | 005bb7 | f0 03       |                 beq 005bbc           
4021:000 | DONE ins | em  8 16 | 005bb9 | c8          |                 iny                  
4022:000 | DONE ins | em  8 16 | 005bba | 80 f3       |                 bra 005baf           
4023:000 | DONE wsp | em  8 16 |        |             |
4024:000 | DONE lbl | em  8 16 | 005bbc |             | parse_found_delimiter                
4025:000 | DONE cmt | em  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
4026:000 | DONE cmt | em  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
4027:000 | DONE cmt | em  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
4028:000 | DONE cmt | em  8 16 |        |             |                 ; offset is for
4029:000 | DONE ins | em  8 16 | 005bbc | c2 20       |                 rep 20               
4029:001 | DONE ctl | em 16 16 |        |             |         .!a16
4030:000 | DONE ins | em 16 16 | 005bbe | e6 1e       |                 inc.d 00001e         
4031:000 | DONE wsp | em 16 16 |        |             |
4032:000 | DONE lbl | em 16 16 | 005bc0 |             | parse_reached_eol                    
4033:000 | DONE cmt | em 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
4034:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4035:000 | DONE ins | em 16 16 | 005bc0 | c2 20       |                 rep 20               
4035:001 | DONE ctl | em 16 16 |        |             |         .!a16
4036:000 | DONE ins | em 16 16 | 005bc2 | 98          |                 tya                  
4037:000 | DONE ins | em 16 16 | 005bc3 | 38          |                 sec                  
4038:000 | DONE ins | em 16 16 | 005bc4 | e5 20       |                 sbc.d 000020         original value for >IN / index of first char
4039:000 | DONE ins | em 16 16 | 005bc6 | 48          |                 pha                  save so we can manipulate Y
4040:000 | DONE wsp | em 16 16 |        |             |
4041:000 | DONE cmt | em 16 16 |        |             |                 ; calculate new >IN
4042:000 | DONE ins | em 16 16 | 005bc7 | 98          |                 tya                  
4043:000 | DONE ins | em 16 16 | 005bc8 | 18          |                 clc                  
4044:000 | DONE ins | em 16 16 | 005bc9 | 65 1e       |                 adc.d 00001e         offset for EOL vs found delimiter
4045:000 | DONE ins | em 16 16 | 005bcb | 85 0c       |                 sta.d 00000c         
4046:000 | DONE wsp | em 16 16 |        |             |
4047:000 | DONE ins | em 16 16 | 005bcd | 7a          |                 ply                  length of string in TOS
4048:000 | DONE wsp | em 16 16 |        |             |
4049:000 | DONE lbl | em 16 16 | 005bce |             | z_parse-name                         
4050:000 | DONE lbl | em 16 16 | 005bce |             | z_parse                              
4050:001 | DONE ins | em 16 16 | 005bce | 60          |                 rts                  
4051:000 | DONE wsp | em 16 16 |        |             |
4052:000 | DONE wsp | em 16 16 |        |             |
4053:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4054:000 | DONE cmt | em 16 16 |        |             | ; PICK ( n n u -- n n n ) X bytes / X cycles
4055:000 | DONE cmt | em 16 16 |        |             | ; Take the u-th element out of the stack and put it on TOS, overwriting the
4056:000 | DONE cmt | em 16 16 |        |             | ; current TOS. 0 PICK is equivalent to DUP, 1 PICK to OVER. Note that using PICK
4057:000 | DONE cmt | em 16 16 |        |             | ; is considered poor coding form. Also note that FIG Forth has a different
4058:000 | DONE cmt | em 16 16 |        |             | ; behavior for PICK than ANS Forth.
4059:000 | DONE cmt | em 16 16 |        |             | ; TODO use DEPTH to check for underflow
4060:000 | DONE lbl | em 16 16 | 005bcf |             | xt_pick                              
4061:000 | DONE ins | em 16 16 | 005bcf | 86 22       |                 stx.d 000022         
4062:000 | DONE wsp | em 16 16 |        |             |
4063:000 | DONE ins | em 16 16 | 005bd1 | 98          |                 tya                  Y is just an offset to the DSP
4064:000 | DONE ins | em 16 16 | 005bd2 | 0a          |                 asl.a                double because of cell size two bytes
4065:000 | DONE wsp | em 16 16 |        |             |
4066:000 | DONE ins | em 16 16 | 005bd3 | 18          |                 clc                  
4067:000 | DONE ins | em 16 16 | 005bd4 | 65 22       |                 adc.d 000022         
4068:000 | DONE wsp | em 16 16 |        |             |
4069:000 | DONE ins | em 16 16 | 005bd6 | aa          |                 tax                  
4070:000 | DONE ins | em 16 16 | 005bd7 | b5 00       |                 lda.dx 00            LDA $00,X
4071:000 | DONE ins | em 16 16 | 005bd9 | a8          |                 tay                  Is now TOS
4072:000 | DONE wsp | em 16 16 |        |             |
4073:000 | DONE ins | em 16 16 | 005bda | a6 22       |                 ldx.d 000022         
4074:000 | DONE wsp | em 16 16 |        |             |
4075:000 | DONE lbl | em 16 16 | 005bdc |             | z_pick                               
4075:001 | DONE ins | em 16 16 | 005bdc | 60          |                 rts                  
4076:000 | DONE wsp | em 16 16 |        |             |
4077:000 | DONE wsp | em 16 16 |        |             |
4078:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4079:000 | DONE cmt | em 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
4080:000 | DONE cmt | em 16 16 |        |             | ; Add NOS to address in TOS
4081:000 | DONE lbl | em 16 16 | 005bdd |             | xt_plusstore                         
4082:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4083:000 | DONE ins | em 16 16 | 005bdd | b9 00 00    |                 lda.y 0000           
4084:000 | DONE ins | em 16 16 | 005be0 | 18          |                 clc                  
4085:000 | DONE ins | em 16 16 | 005be1 | 75 00       |                 adc.dx 00            
4086:000 | DONE ins | em 16 16 | 005be3 | 99 00 00    |                 sta.y 0000           
4087:000 | DONE wsp | em 16 16 |        |             |
4088:000 | DONE ins | em 16 16 | 005be6 | b4 02       |                 ldy.dx 02            
4089:000 | DONE ins | em 16 16 | 005be8 | e8          |                 inx                  
4090:000 | DONE ins | em 16 16 | 005be9 | e8          |                 inx                  
4091:000 | DONE ins | em 16 16 | 005bea | e8          |                 inx                  
4092:000 | DONE ins | em 16 16 | 005beb | e8          |                 inx                  
4093:000 | DONE wsp | em 16 16 |        |             |
4094:000 | DONE lbl | em 16 16 | 005bec |             | z_plusstore                          
4094:001 | DONE ins | em 16 16 | 005bec | 60          |                 rts                  
4095:000 | DONE wsp | em 16 16 |        |             |
4096:000 | DONE wsp | em 16 16 |        |             |
4097:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4098:000 | DONE cmt | em 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
4099:000 | DONE cmt | em 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
4100:000 | DONE cmt | em 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
4101:000 | DONE cmt | em 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
4102:000 | DONE cmt | em 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
4103:000 | DONE cmt | em 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
4104:000 | DONE cmt | em 16 16 |        |             | ; <word>" directly. This word uses tmp1
4105:000 | DONE lbl | em 16 16 | 005bed |             | xt_postpone                          
4106:000 | DONE cmt | em 16 16 |        |             |                 ; get name from string
4107:000 | DONE ins | em 16 16 | 005bed | 20 6a 5b    |                 jsr 005b6a           ( addr n )
4108:000 | DONE wsp | em 16 16 |        |             |
4109:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no word in stream, complain and abort
4110:000 | DONE ins | em 16 16 | 005bf0 | d0 06       |                 bne 005bf8           
4111:000 | DONE ins | em 16 16 | 005bf2 | a9 bd 6f    |                 lda.# 006fbd         
4112:000 | DONE ins | em 16 16 | 005bf5 | 4c cb 68    |                 jmp 0068cb           
4113:000 | DONE wsp | em 16 16 |        |             |
4114:000 | DONE lbl | em 16 16 | 005bf8 |             | pp_got_word                          
4115:000 | DONE ins | em 16 16 | 005bf8 | 20 ae 58    |                 jsr 0058ae           ( nt | 0 )
4116:000 | DONE wsp | em 16 16 |        |             |
4117:000 | DONE cmt | em 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
4118:000 | DONE ins | em 16 16 | 005bfb | d0 03       |                 bne 005c00           
4119:000 | DONE ins | em 16 16 | 005bfd | a9 5a 70    |                 lda.# 00705a         
4120:000 | DONE wsp | em 16 16 |        |             |
4121:000 | DONE lbl | em 16 16 | 005c00 |             | pp_got_nt                            
4122:000 | DONE cmt | em 16 16 |        |             |                 ; Keep nt safe for later use
4123:000 | DONE ins | em 16 16 | 005c00 | 84 1c       |                 sty.d 00001c         
4124:000 | DONE wsp | em 16 16 |        |             |
4125:000 | DONE cmt | em 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
4126:000 | DONE ins | em 16 16 | 005c02 | 20 8a 5a    |                 jsr 005a8a           NAME>INT ( nt -- xt )
4127:000 | DONE wsp | em 16 16 |        |             |
4128:000 | DONE cmt | em 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
4129:000 | DONE cmt | em 16 16 |        |             |                 ; with xt
4130:000 | DONE ins | em 16 16 | 005c05 | b2 1c       |                 lda.di 00001c        LDA (TMP1) - get status byte of word
4131:000 | DONE ins | em 16 16 | 005c07 | eb          |                 xba                  flags are MSB
4132:000 | DONE ins | em 16 16 | 005c08 | 29 02 00    |                 and.# IM             mask everything but Immediate bit
4133:000 | DONE ins | em 16 16 | 005c0b | f0 03       |                 beq 005c10           
4134:000 | DONE wsp | em 16 16 |        |             |
4135:000 | DONE cmt | em 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
4136:000 | DONE cmt | em 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
4137:000 | DONE cmt | em 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
4138:000 | DONE ins | em 16 16 | 005c0d | 4c 51 56    |                 jmp 005651           JSR/RTS
4139:000 | DONE wsp | em 16 16 |        |             |
4140:000 | DONE lbl | em 16 16 | 005c10 |             | pp_not_immediate                     
4141:000 | DONE cmt | em 16 16 |        |             |                 ; This is not an immediate word, so we enact "deferred
4142:000 | DONE cmt | em 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
4143:000 | DONE cmt | em 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
4144:000 | DONE cmt | em 16 16 |        |             |                 ; a subroutine jump to COMPILE,
4145:000 | DONE ins | em 16 16 | 005c10 | f4 e8 59    |                 phe.# 0059e8         PEA LITERAL_RT
4146:000 | DONE ins | em 16 16 | 005c13 | 20 aa 68    |                 jsr 0068aa           
4147:000 | DONE wsp | em 16 16 |        |             |
4148:000 | DONE cmt | em 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
4149:000 | DONE cmt | em 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
4150:000 | DONE cmt | em 16 16 |        |             |                 ; and ruin everything
4151:000 | DONE ins | em 16 16 | 005c16 | 20 40 52    |                 jsr 005240           
4152:000 | DONE wsp | em 16 16 |        |             |
4153:000 | DONE cmt | em 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
4154:000 | DONE ins | em 16 16 | 005c19 | f4 51 56    |                 phe.# 005651         
4155:000 | DONE ins | em 16 16 | 005c1c | 20 aa 68    |                 jsr 0068aa           JSR/RTS
4156:000 | DONE wsp | em 16 16 |        |             |
4157:000 | DONE lbl | em 16 16 | 005c1f |             | z_postpone                           
4157:001 | DONE ins | em 16 16 | 005c1f | 60          |                 rts                  
4158:000 | DONE wsp | em 16 16 |        |             |
4159:000 | DONE wsp | em 16 16 |        |             |
4160:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4161:000 | DONE cmt | em 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
4162:000 | DONE cmt | em 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
4163:000 | DONE cmt | em 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
4164:000 | DONE cmt | em 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
4165:000 | DONE cmt | em 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
4166:000 | DONE cmt | em 16 16 |        |             | ; actually short enough to make that reasonable
4167:000 | DONE cmt | em 16 16 |        |             | ; TODO consider special case in COMPILE, see there
4168:000 | DONE lbl | em 16 16 | 005c20 |             | xt_rfetch                            
4169:000 | DONE cmt | em 16 16 |        |             |                 ; get return address that is on top of the return stack
4170:000 | DONE ins | em 16 16 | 005c20 | 68          |                 pla                  
4171:000 | DONE wsp | em 16 16 |        |             |
4172:000 | DONE ins | em 16 16 | 005c21 | ca          |                 dex                  
4173:000 | DONE ins | em 16 16 | 005c22 | ca          |                 dex                  
4174:000 | DONE ins | em 16 16 | 005c23 | 94 00       |                 sty.dx 00            
4175:000 | DONE wsp | em 16 16 |        |             |
4176:000 | DONE ins | em 16 16 | 005c25 | 7a          |                 ply                  get top of return stack and push copy back again
4177:000 | DONE ins | em 16 16 | 005c26 | 5a          |                 phy                  
4178:000 | DONE wsp | em 16 16 |        |             |
4179:000 | DONE ins | em 16 16 | 005c27 | 48          |                 pha                  restore the return address
4180:000 | DONE wsp | em 16 16 |        |             |
4181:000 | DONE lbl | em 16 16 | 005c28 |             | z_rfetch                             
4181:001 | DONE ins | em 16 16 | 005c28 | 60          |                 rts                  
4182:000 | DONE wsp | em 16 16 |        |             |
4183:000 | DONE wsp | em 16 16 |        |             |
4184:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4185:000 | DONE cmt | em 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
4186:000 | DONE cmt | em 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
4187:000 | DONE cmt | em 16 16 |        |             | ; jump address out of the way first.
4188:000 | DONE cmt | em 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
4189:000 | DONE lbl | em 16 16 | 005c29 |             | xt_fromr                             
4190:000 | DONE cmt | em 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
4191:000 | DONE cmt | em 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
4192:000 | DONE cmt | em 16 16 |        |             |                 ; a waste of nine cycles
4193:000 | DONE ins | em 16 16 | 005c29 | 68          |                 pla                  
4194:000 | DONE wsp | em 16 16 |        |             |
4195:000 | DONE ins | em 16 16 | 005c2a | ca          |                 dex                  
4196:000 | DONE ins | em 16 16 | 005c2b | ca          |                 dex                  
4197:000 | DONE ins | em 16 16 | 005c2c | 94 00       |                 sty.dx 00            
4198:000 | DONE wsp | em 16 16 |        |             |
4199:000 | DONE ins | em 16 16 | 005c2e | 7a          |                 ply                  the actual work
4200:000 | DONE wsp | em 16 16 |        |             |
4201:000 | DONE ins | em 16 16 | 005c2f | 48          |                 pha                  get return address back
4202:000 | DONE wsp | em 16 16 |        |             |
4203:000 | DONE lbl | em 16 16 | 005c30 |             | z_fromr                              
4203:001 | DONE ins | em 16 16 | 005c30 | 60          |                 rts                  
4204:000 | DONE wsp | em 16 16 |        |             |
4205:000 | DONE wsp | em 16 16 |        |             |
4206:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4207:000 | DONE cmt | em 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
4208:000 | DONE cmt | em 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
4209:000 | DONE cmt | em 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
4210:000 | DONE cmt | em 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
4211:000 | DONE cmt | em 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
4212:000 | DONE cmt | em 16 16 |        |             | ; containing no characters is considered successful. If there is no input
4213:000 | DONE cmt | em 16 16 |        |             | ; available from the current input source, return false. When the input source
4214:000 | DONE cmt | em 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
4215:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
4216:000 | DONE cmt | em 16 16 |        |             | ; and Conklin & Rather p. 156
4217:000 | DONE lbl | em 16 16 | 005c31 |             | xt_refill                            
4218:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4219:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4220:000 | DONE cmt | em 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
4221:000 | DONE cmt | em 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
4222:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
4223:000 | DONE ins | em 16 16 | 005c31 | a5 06       |                 lda.d 000006         
4224:000 | DONE ins | em 16 16 | 005c33 | d0 14       |                 bne 005c49           
4225:000 | DONE wsp | em 16 16 |        |             |
4226:000 | DONE cmt | em 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
4227:000 | DONE cmt | em 16 16 |        |             |                 ; with ACCEPT.
4228:000 | DONE ins | em 16 16 | 005c35 | ca          |                 dex                  
4229:000 | DONE ins | em 16 16 | 005c36 | ca          |                 dex                  
4230:000 | DONE ins | em 16 16 | 005c37 | ca          |                 dex                  
4231:000 | DONE ins | em 16 16 | 005c38 | ca          |                 dex                  
4232:000 | DONE ins | em 16 16 | 005c39 | 94 02       |                 sty.dx 02            
4233:000 | DONE wsp | em 16 16 |        |             |
4234:000 | DONE ins | em 16 16 | 005c3b | a5 08       |                 lda.d 000008         address of current input buffer NOS
4235:000 | DONE ins | em 16 16 | 005c3d | 95 00       |                 sta.dx 00            
4236:000 | DONE ins | em 16 16 | 005c3f | a0 80 00    |                 ldy.# 000080         max number of chars to accept TOS
4237:000 | DONE wsp | em 16 16 |        |             |
4238:000 | DONE ins | em 16 16 | 005c42 | 20 85 54    |                 jsr 005485           ( addr n1 -- n2)
4239:000 | DONE wsp | em 16 16 |        |             |
4240:000 | DONE cmt | em 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
4241:000 | DONE cmt | em 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
4242:000 | DONE ins | em 16 16 | 005c45 | a0 ff ff    |                 ldy.# 0ffff          
4243:000 | DONE wsp | em 16 16 |        |             |
4244:000 | DONE ins | em 16 16 | 005c48 | 60          |                 rts                  
4245:000 | DONE wsp | em 16 16 |        |             |
4246:000 | DONE lbl | em 16 16 | 005c49 |             | refill_src_not_kbd                   
4247:000 | DONE cmt | em 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
4248:000 | DONE cmt | em 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
4249:000 | DONE ins | em 16 16 | 005c49 | 1a          |                 inc.a                
4250:000 | DONE ins | em 16 16 | 005c4a | d0 06       |                 bne 005c52           
4251:000 | DONE wsp | em 16 16 |        |             |
4252:000 | DONE cmt | em 16 16 |        |             |                 ; Simply return FALSE flag as per specification
4253:000 | DONE ins | em 16 16 | 005c4c | ca          |                 dex                  
4254:000 | DONE ins | em 16 16 | 005c4d | ca          |                 dex                  
4255:000 | DONE ins | em 16 16 | 005c4e | 94 00       |                 sty.dx 00            
4256:000 | DONE ins | em 16 16 | 005c50 | a8          |                 tay                  
4257:000 | DONE wsp | em 16 16 |        |             |
4258:000 | DONE ins | em 16 16 | 005c51 | 60          |                 rts                  
4259:000 | DONE wsp | em 16 16 |        |             |
4260:000 | DONE lbl | em 16 16 | 005c52 |             | refill_source_is_not_string          
4261:000 | DONE cmt | em 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
4262:000 | DONE cmt | em 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
4263:000 | DONE cmt | em 16 16 |        |             |                 ; report an error and jump to ABORT.
4264:000 | DONE ins | em 16 16 | 005c52 | a9 12 70    |                 lda.# 007012         
4265:000 | DONE ins | em 16 16 | 005c55 | 4c cb 68    |                 jmp 0068cb           
4266:000 | DONE wsp | em 16 16 |        |             |
4267:000 | DONE lbl | em 16 16 | 005c58 |             | z_refill                             
4267:001 | DONE ins | em 16 16 | 005c58 | 60          |                 rts                  dummy for compiling
4268:000 | DONE wsp | em 16 16 |        |             |
4269:000 | DONE wsp | em 16 16 |        |             |
4270:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4271:000 | DONE cmt | em 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
4272:000 | DONE cmt | em 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
4273:000 | DONE cmt | em 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
4274:000 | DONE lbl | em 16 16 | 005c59 |             | xt_rot                               
4275:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4276:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4277:000 | DONE ins | em 16 16 | 005c59 | b5 00       |                 lda.dx 00            save b
4278:000 | DONE ins | em 16 16 | 005c5b | 94 00       |                 sty.dx 00            move c to NOS
4279:000 | DONE ins | em 16 16 | 005c5d | b4 02       |                 ldy.dx 02            move a to TOS
4280:000 | DONE ins | em 16 16 | 005c5f | 95 02       |                 sta.dx 02            save b as 3OS
4281:000 | DONE wsp | em 16 16 |        |             |
4282:000 | DONE lbl | em 16 16 | 005c61 |             | z_rot                                
4282:001 | DONE ins | em 16 16 | 005c61 | 60          |                 rts                  
4283:000 | DONE wsp | em 16 16 |        |             |
4284:000 | DONE wsp | em 16 16 |        |             |
4285:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4286:000 | DONE cmt | em 16 16 |        |             | ; RSHIFT ( n u -- u ) X bytes / X cycles
4287:000 | DONE cmt | em 16 16 |        |             | ; Shift TOS right, filling vacant bits with zero
4288:000 | DONE lbl | em 16 16 | 005c62 |             | xt_rshift                            
4289:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
4290:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
4291:000 | DONE ins | em 16 16 | 005c62 | 98          |                 tya                  
4292:000 | DONE ins | em 16 16 | 005c63 | 29 0f 00    |                 and.# 000f           
4293:000 | DONE ins | em 16 16 | 005c66 | f0 09       |                 beq 005c71           if zero shifts, we're done
4294:000 | DONE wsp | em 16 16 |        |             |
4295:000 | DONE ins | em 16 16 | 005c68 | a8          |                 tay                  number of shifts is TOS
4296:000 | DONE ins | em 16 16 | 005c69 | b5 00       |                 lda.dx 00            number is in NOS
4297:000 | DONE lbl | em 16 16 | 005c6b |             | rshift_loop                          
4298:000 | DONE ins | em 16 16 | 005c6b | 4a          |                 lsr.a                
4299:000 | DONE ins | em 16 16 | 005c6c | 88          |                 dey                  
4300:000 | DONE ins | em 16 16 | 005c6d | d0 fc       |                 bne 005c6b           
4301:000 | DONE wsp | em 16 16 |        |             |
4302:000 | DONE ins | em 16 16 | 005c6f | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
4303:000 | DONE wsp | em 16 16 |        |             |
4304:000 | DONE lbl | em 16 16 | 005c71 |             | rshift_done                          
4305:000 | DONE ins | em 16 16 | 005c71 | b4 00       |                 ldy.dx 00            
4306:000 | DONE ins | em 16 16 | 005c73 | e8          |                 inx                  
4307:000 | DONE ins | em 16 16 | 005c74 | e8          |                 inx                  
4308:000 | DONE wsp | em 16 16 |        |             |
4309:000 | DONE lbl | em 16 16 | 005c75 |             | z_rshift                             
4309:001 | DONE ins | em 16 16 | 005c75 | 60          |                 rts                  
4310:000 | DONE wsp | em 16 16 |        |             |
4311:000 | DONE wsp | em 16 16 |        |             |
4312:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4313:000 | DONE cmt | em 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
4314:000 | DONE cmt | em 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
4315:000 | DONE cmt | em 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
4316:000 | DONE cmt | em 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
4317:000 | DONE cmt | em 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
4318:000 | DONE cmt | em 16 16 |        |             | ; want it in code
4319:000 | DONE lbl | em 16 16 | 005c76 |             | xt_squote                            
4320:000 | DONE cmt | em 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
4321:000 | DONE cmt | em 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
4322:000 | DONE ins | em 16 16 | 005c76 | ca          |                 dex                  
4323:000 | DONE ins | em 16 16 | 005c77 | ca          |                 dex                  
4324:000 | DONE ins | em 16 16 | 005c78 | 94 00       |                 sty.dx 00            
4325:000 | DONE wsp | em 16 16 |        |             |
4326:000 | DONE ins | em 16 16 | 005c7a | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
4327:000 | DONE ins | em 16 16 | 005c7d | 20 9c 5b    |                 jsr 005b9c           Returns ( addr u ) of string
4328:000 | DONE wsp | em 16 16 |        |             |
4329:000 | DONE cmt | em 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
4330:000 | DONE cmt | em 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
4331:000 | DONE cmt | em 16 16 |        |             |                 ; we are interpreting, we're done
4332:000 | DONE ins | em 16 16 | 005c80 | a5 14       |                 lda.d 000014         
4333:000 | DONE ins | em 16 16 | 005c82 | d0 24       |                 bne 005ca8           
4334:000 | DONE wsp | em 16 16 |        |             |
4335:000 | DONE cmt | em 16 16 |        |             | 		; We copy our string to someplace safe because it lives
4336:000 | DONE cmt | em 16 16 |        |             |                 ; dangerously if we leave it in the input buffer. This might
4337:000 | DONE cmt | em 16 16 |        |             |                 ; seem like a lot of effort for a few bytes, but MVN is so fast
4338:000 | DONE cmt | em 16 16 |        |             |                 ; - 7 cycles per byte - that it is worth it. See
4339:000 | DONE cmt | em 16 16 |        |             |                 ; http://forum.6502.org/viewtopic.php?f=2&t=1685&p=50975#p50975
4340:000 | DONE cmt | em 16 16 |        |             |                 ; and http://6502.org/tutorials/65c816opcodes.html#6.6
4341:000 | DONE ins | em 16 16 | 005c84 | ca          |                 dex                  
4342:000 | DONE ins | em 16 16 | 005c85 | ca          |                 dex                  
4343:000 | DONE ins | em 16 16 | 005c86 | 94 00       |                 sty.dx 00            
4344:000 | DONE ins | em 16 16 | 005c88 | a4 00       |                 ldy.d 000000         HERE  ( addr-s u addr-d )
4345:000 | DONE wsp | em 16 16 |        |             |
4346:000 | DONE ins | em 16 16 | 005c8a | b5 00       |                 lda.dx 00            SWAP ( addr-s addr-d u )
4347:000 | DONE ins | em 16 16 | 005c8c | 94 00       |                 sty.dx 00            
4348:000 | DONE ins | em 16 16 | 005c8e | a8          |                 tay                  
4349:000 | DONE wsp | em 16 16 |        |             |
4350:000 | DONE ins | em 16 16 | 005c8f | 5a          |                 phy                  save copy of u
4351:000 | DONE ins | em 16 16 | 005c90 | b5 00       |                 lda.dx 00            save copy of addr-d
4352:000 | DONE ins | em 16 16 | 005c92 | 48          |                 pha                  
4353:000 | DONE wsp | em 16 16 |        |             |
4354:000 | DONE ins | em 16 16 | 005c93 | 20 79 5a    |                 jsr 005a79           
4355:000 | DONE wsp | em 16 16 |        |             |
4356:000 | DONE ins | em 16 16 | 005c96 | ca          |                 dex                  
4357:000 | DONE ins | em 16 16 | 005c97 | ca          |                 dex                  
4358:000 | DONE ins | em 16 16 | 005c98 | ca          |                 dex                  
4359:000 | DONE ins | em 16 16 | 005c99 | ca          |                 dex                  
4360:000 | DONE ins | em 16 16 | 005c9a | 94 02       |                 sty.dx 02            
4361:000 | DONE wsp | em 16 16 |        |             |
4362:000 | DONE ins | em 16 16 | 005c9c | 68          |                 pla                  get addr-d back
4363:000 | DONE ins | em 16 16 | 005c9d | 95 00       |                 sta.dx 00            put NOS
4364:000 | DONE ins | em 16 16 | 005c9f | 68          |                 pla                  get u back, put TOS
4365:000 | DONE ins | em 16 16 | 005ca0 | a8          |                 tay                  
4366:000 | DONE wsp | em 16 16 |        |             |
4367:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4368:000 | DONE ins | em 16 16 | 005ca1 | 18          |                 clc                  
4369:000 | DONE ins | em 16 16 | 005ca2 | 65 00       |                 adc.d 000000         
4370:000 | DONE ins | em 16 16 | 005ca4 | 85 00       |                 sta.d 000000         
4371:000 | DONE wsp | em 16 16 |        |             |
4372:000 | DONE ins | em 16 16 | 005ca6 | 80 03       |                 bra 005cab           
4373:000 | DONE wsp | em 16 16 |        |             |
4374:000 | DONE lbl | em 16 16 | 005ca8 |             | squote_compile                       
4375:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
4376:000 | DONE cmt | em 16 16 |        |             |                 ; we're at it
4377:000 | DONE ins | em 16 16 | 005ca8 | 4c ca 5c    |                 jmp 005cca           JSR/RTS
4378:000 | DONE wsp | em 16 16 |        |             |
4379:000 | DONE lbl | em 16 16 | 005cab |             | z_squote                             
4379:001 | DONE ins | em 16 16 | 005cab | 60          |                 rts                  
4380:000 | DONE wsp | em 16 16 |        |             |
4381:000 | DONE wsp | em 16 16 |        |             |
4382:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4383:000 | DONE cmt | em 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
4384:000 | DONE cmt | em 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
4385:000 | DONE lbl | em 16 16 | 005cac |             | xt_stod                              
4386:000 | DONE ins | em 16 16 | 005cac | ca          |                 dex                  make room on stack
4387:000 | DONE ins | em 16 16 | 005cad | ca          |                 dex                  
4388:000 | DONE ins | em 16 16 | 005cae | 94 00       |                 sty.dx 00            
4389:000 | DONE wsp | em 16 16 |        |             |
4390:000 | DONE ins | em 16 16 | 005cb0 | 98          |                 tya                  force flag check
4391:000 | DONE ins | em 16 16 | 005cb1 | 10 05       |                 bpl 005cb8           
4392:000 | DONE wsp | em 16 16 |        |             |
4393:000 | DONE cmt | em 16 16 |        |             |                 ; negative number, extend sign
4394:000 | DONE ins | em 16 16 | 005cb3 | a0 ff ff    |                 ldy.# 0ffff          
4395:000 | DONE ins | em 16 16 | 005cb6 | 80 03       |                 bra 005cbb           
4396:000 | DONE wsp | em 16 16 |        |             |
4397:000 | DONE lbl | em 16 16 | 005cb8 |             | stod_pos                             
4398:000 | DONE cmt | em 16 16 |        |             |                 ; positive number
4399:000 | DONE ins | em 16 16 | 005cb8 | a0 00 00    |                 ldy.# 0000           fall through
4400:000 | DONE wsp | em 16 16 |        |             |
4401:000 | DONE lbl | em 16 16 | 005cbb |             | z_stod                               
4401:001 | DONE ins | em 16 16 | 005cbb | 60          |                 rts                  
4402:000 | DONE wsp | em 16 16 |        |             |
4403:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4404:000 | DONE cmt | em 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
4405:000 | DONE cmt | em 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
4406:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
4407:000 | DONE cmt | em 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
4408:000 | DONE lbl | em 16 16 | 005cbc |             | xt_sign                              
4409:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4410:000 | DONE cmt | em 16 16 |        |             |                 ; See if number is negative
4411:000 | DONE ins | em 16 16 | 005cbc | 98          |                 tya                  force flag check
4412:000 | DONE ins | em 16 16 | 005cbd | 10 06       |                 bpl 005cc5           
4413:000 | DONE wsp | em 16 16 |        |             |
4414:000 | DONE cmt | em 16 16 |        |             |                 ; We're negative, overwrite number TOS
4415:000 | DONE ins | em 16 16 | 005cbf | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
4416:000 | DONE wsp | em 16 16 |        |             |
4417:000 | DONE ins | em 16 16 | 005cc2 | 4c b0 59    |                 jmp 0059b0           JSR/RTS, does not fall through
4418:000 | DONE wsp | em 16 16 |        |             |
4419:000 | DONE lbl | em 16 16 | 005cc5 |             | sign_plus                            
4420:000 | DONE ins | em 16 16 | 005cc5 | b4 00       |                 ldy.dx 00            get rid of number and leave
4421:000 | DONE ins | em 16 16 | 005cc7 | e8          |                 inx                  
4422:000 | DONE ins | em 16 16 | 005cc8 | e8          |                 inx                  
4423:000 | DONE wsp | em 16 16 |        |             |
4424:000 | DONE lbl | em 16 16 | 005cc9 |             | z_sign                               
4424:001 | DONE ins | em 16 16 | 005cc9 | 60          |                 rts                  
4425:000 | DONE wsp | em 16 16 |        |             |
4426:000 | DONE wsp | em 16 16 |        |             |
4427:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4428:000 | DONE cmt | em 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
4429:000 | DONE cmt | em 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
4430:000 | DONE cmt | em 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
4431:000 | DONE cmt | em 16 16 |        |             | ; tmp2
4432:000 | DONE lbl | em 16 16 | 005cca |             | xt_sliteral                          
4433:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4434:000 | DONE cmt | em 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
4435:000 | DONE cmt | em 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
4436:000 | DONE cmt | em 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
4437:000 | DONE cmt | em 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
4438:000 | DONE cmt | em 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
4439:000 | DONE ins | em 16 16 | 005cca | b5 00       |                 lda.dx 00            Address of string is NOS
4440:000 | DONE ins | em 16 16 | 005ccc | 85 1c       |                 sta.d 00001c         
4441:000 | DONE ins | em 16 16 | 005cce | 84 1e       |                 sty.d 00001e         keep copy of string length
4442:000 | DONE wsp | em 16 16 |        |             |
4443:000 | DONE ins | em 16 16 | 005cd0 | e2 20       |                 sep 20               
4443:001 | DONE ctl | em  8 16 |        |             |         .!a8
4444:000 | DONE ins | em  8 16 | 005cd2 | a9 4c       |                 lda.# 04c            opcode for JMP
4445:000 | DONE ins | em  8 16 | 005cd4 | 92 00       |                 sta.di 000000        STA (CP)
4446:000 | DONE ins | em  8 16 | 005cd6 | c2 20       |                 rep 20               
4446:001 | DONE ctl | em 16 16 |        |             |         .!a16
4447:000 | DONE ins | em 16 16 | 005cd8 | e6 00       |                 inc.d 000000         
4448:000 | DONE wsp | em 16 16 |        |             |
4449:000 | DONE cmt | em 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
4450:000 | DONE cmt | em 16 16 |        |             |                 ; instruction itself ) + the length of the string
4451:000 | DONE ins | em 16 16 | 005cda | a5 1e       |                 lda.d 00001e         string length
4452:000 | DONE ins | em 16 16 | 005cdc | 1a          |                 inc.a                
4453:000 | DONE ins | em 16 16 | 005cdd | 1a          |                 inc.a                
4454:000 | DONE wsp | em 16 16 |        |             |
4455:000 | DONE ins | em 16 16 | 005cde | 18          |                 clc                  
4456:000 | DONE ins | em 16 16 | 005cdf | 65 00       |                 adc.d 000000         current address
4457:000 | DONE ins | em 16 16 | 005ce1 | 92 00       |                 sta.di 000000        store jump target
4458:000 | DONE wsp | em 16 16 |        |             |
4459:000 | DONE cmt | em 16 16 |        |             |                 ; update CP to move past JMP instruction
4460:000 | DONE ins | em 16 16 | 005ce3 | e6 00       |                 inc.d 000000         
4461:000 | DONE ins | em 16 16 | 005ce5 | e6 00       |                 inc.d 000000         
4462:000 | DONE wsp | em 16 16 |        |             |
4463:000 | DONE cmt | em 16 16 |        |             |                 ; now we can safely copy the code
4464:000 | DONE ins | em 16 16 | 005ce7 | 88          |                 dey                  last offset is one less than length
4465:000 | DONE ins | em 16 16 | 005ce8 | e2 20       |                 sep 20               
4465:001 | DONE ctl | em  8 16 |        |             |         .!a8
4466:000 | DONE lbl | em  8 16 | 005cea |             | sl_loop                              
4467:000 | DONE ins | em  8 16 | 005cea | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4468:000 | DONE ins | em  8 16 | 005cec | 91 00       |                 sta.diy 000000       STA (CP),Y
4469:000 | DONE ins | em  8 16 | 005cee | 88          |                 dey                  
4470:000 | DONE ins | em  8 16 | 005cef | 10 f9       |                 bpl 005cea           
4471:000 | DONE wsp | em  8 16 |        |             |
4472:000 | DONE ins | em  8 16 | 005cf1 | c2 20       |                 rep 20               
4472:001 | DONE ctl | em 16 16 |        |             |         .!a16
4473:000 | DONE cmt | em 16 16 |        |             |                 ; keep old CP as new address of string
4474:000 | DONE ins | em 16 16 | 005cf3 | a5 00       |                 lda.d 000000         
4475:000 | DONE ins | em 16 16 | 005cf5 | 85 1c       |                 sta.d 00001c         overwrites original address
4476:000 | DONE wsp | em 16 16 |        |             |
4477:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4478:000 | DONE ins | em 16 16 | 005cf7 | 18          |                 clc                  
4479:000 | DONE ins | em 16 16 | 005cf8 | 65 1e       |                 adc.d 00001e         length of string
4480:000 | DONE ins | em 16 16 | 005cfa | 85 00       |                 sta.d 000000         
4481:000 | DONE wsp | em 16 16 |        |             |
4482:000 | DONE cmt | em 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
4483:000 | DONE cmt | em 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
4484:000 | DONE cmt | em 16 16 |        |             |                 ; done, the code will look like this:
4485:000 | DONE cmt | em 16 16 |        |             |                 ;
4486:000 | DONE cmt | em 16 16 |        |             |                 ; xt -->    jmp a
4487:000 | DONE cmt | em 16 16 |        |             |                 ;           <string data bytes>
4488:000 | DONE cmt | em 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
4489:000 | DONE cmt | em 16 16 |        |             |                 ;           <string address>
4490:000 | DONE cmt | em 16 16 |        |             |                 ;           <string length>
4491:000 | DONE cmt | em 16 16 |        |             |                 ; rts -->
4492:000 | DONE cmt | em 16 16 |        |             |                 ;
4493:000 | DONE cmt | em 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
4494:000 | DONE cmt | em 16 16 |        |             |                 ; cells, not just one
4495:000 | DONE ins | em 16 16 | 005cfc | f4 15 5d    |                 phe.# 005d15         
4496:000 | DONE ins | em 16 16 | 005cff | 20 aa 68    |                 jsr 0068aa           
4497:000 | DONE wsp | em 16 16 |        |             |
4498:000 | DONE cmt | em 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
4499:000 | DONE cmt | em 16 16 |        |             |                 ; so we store the address first
4500:000 | DONE ins | em 16 16 | 005d02 | a5 1c       |                 lda.d 00001c         new address of string
4501:000 | DONE ins | em 16 16 | 005d04 | 48          |                 pha                  
4502:000 | DONE ins | em 16 16 | 005d05 | 20 a5 68    |                 jsr 0068a5           
4503:000 | DONE wsp | em 16 16 |        |             |
4504:000 | DONE ins | em 16 16 | 005d08 | a5 1e       |                 lda.d 00001e         
4505:000 | DONE ins | em 16 16 | 005d0a | 48          |                 pha                  
4506:000 | DONE ins | em 16 16 | 005d0b | 20 a5 68    |                 jsr 0068a5           
4507:000 | DONE wsp | em 16 16 |        |             |
4508:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up and leave
4509:000 | DONE ins | em 16 16 | 005d0e | b4 02       |                 ldy.dx 02            2DROP
4510:000 | DONE ins | em 16 16 | 005d10 | e8          |                 inx                  
4511:000 | DONE ins | em 16 16 | 005d11 | e8          |                 inx                  
4512:000 | DONE ins | em 16 16 | 005d12 | e8          |                 inx                  
4513:000 | DONE ins | em 16 16 | 005d13 | e8          |                 inx                  
4514:000 | DONE wsp | em 16 16 |        |             |
4515:000 | DONE lbl | em 16 16 | 005d14 |             | z_sliteral                           
4515:001 | DONE ins | em 16 16 | 005d14 | 60          |                 rts                  
4516:000 | DONE wsp | em 16 16 |        |             |
4517:000 | DONE lbl | em 16 16 | 005d15 |             | sliteral_rt                          
4518:000 | DONE cmt | em 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
4519:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
4520:000 | DONE cmt | em 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
4521:000 | DONE wsp | em 16 16 |        |             |
4522:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
4523:000 | DONE ins | em 16 16 | 005d15 | ca          |                 dex                  
4524:000 | DONE ins | em 16 16 | 005d16 | ca          |                 dex                  
4525:000 | DONE ins | em 16 16 | 005d17 | ca          |                 dex                  
4526:000 | DONE ins | em 16 16 | 005d18 | ca          |                 dex                  
4527:000 | DONE ins | em 16 16 | 005d19 | 94 02       |                 sty.dx 02            
4528:000 | DONE wsp | em 16 16 |        |             |
4529:000 | DONE cmt | em 16 16 |        |             |                 ; Get the address of the string address off the stack and
4530:000 | DONE cmt | em 16 16 |        |             |                 ; increase by one because of the RTS mechanics
4531:000 | DONE ins | em 16 16 | 005d1b | 7a          |                 ply                  
4532:000 | DONE ins | em 16 16 | 005d1c | c8          |                 iny                  
4533:000 | DONE wsp | em 16 16 |        |             |
4534:000 | DONE ins | em 16 16 | 005d1d | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4535:000 | DONE ins | em 16 16 | 005d20 | 95 00       |                 sta.dx 00            save string address as NOS
4536:000 | DONE ins | em 16 16 | 005d22 | c8          |                 iny                  
4537:000 | DONE ins | em 16 16 | 005d23 | c8          |                 iny                  
4538:000 | DONE ins | em 16 16 | 005d24 | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
4539:000 | DONE wsp | em 16 16 |        |             |
4540:000 | DONE ins | em 16 16 | 005d27 | c8          |                 iny                  ... first, though, repair return jump
4541:000 | DONE ins | em 16 16 | 005d28 | 5a          |                 phy                  
4542:000 | DONE wsp | em 16 16 |        |             |
4543:000 | DONE ins | em 16 16 | 005d29 | a8          |                 tay                  TOS is now length of string
4544:000 | DONE wsp | em 16 16 |        |             |
4545:000 | DONE ins | em 16 16 | 005d2a | 60          |                 rts                  
4546:000 | DONE wsp | em 16 16 |        |             |
4547:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4548:000 | DONE cmt | em 16 16 |        |             | ; SM/REM ( d n1 -- n2 n3) X bytes / X cycles
4549:000 | DONE cmt | em 16 16 |        |             | ; Symmetic signed division. Compare FM/MOD. Code from Gforth, see
4550:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4551:000 | DONE cmt | em 16 16 |        |             | ; and http://git.savannah.gnu.org/cgit/gforth.git/tree/prim ; see
4552:000 | DONE cmt | em 16 16 |        |             | ; http://www.figuk.plus.com/build/arith.htm for variants. Forth is
4553:000 | DONE cmt | em 16 16 |        |             | ; SM/REM OVER >R DUP >R ABS -ROT DABS ROT UM/MOD R>
4554:000 | DONE cmt | em 16 16 |        |             | ; R@ XOR 0< IF NEGATE THEN R> 0< IF SWAP NEGATE SWAP THEN ;
4555:000 | DONE cmt | em 16 16 |        |             | ; TODO optimize in assembler
4556:000 | DONE lbl | em 16 16 | 005d2b |             | xt_smrem                             
4557:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4558:000 | DONE ins | em 16 16 | 005d2b | 20 4a 5b    |                 jsr 005b4a           
4559:000 | DONE wsp | em 16 16 |        |             |
4560:000 | DONE ins | em 16 16 | 005d2e | 5a          |                 phy                  >R
4561:000 | DONE ins | em 16 16 | 005d2f | b4 00       |                 ldy.dx 00            
4562:000 | DONE ins | em 16 16 | 005d31 | e8          |                 inx                  
4563:000 | DONE ins | em 16 16 | 005d32 | e8          |                 inx                  
4564:000 | DONE wsp | em 16 16 |        |             |
4565:000 | DONE ins | em 16 16 | 005d33 | ca          |                 dex                  DUP
4566:000 | DONE ins | em 16 16 | 005d34 | ca          |                 dex                  
4567:000 | DONE ins | em 16 16 | 005d35 | 94 00       |                 sty.dx 00            
4568:000 | DONE wsp | em 16 16 |        |             |
4569:000 | DONE ins | em 16 16 | 005d37 | 5a          |                 phy                  >R
4570:000 | DONE ins | em 16 16 | 005d38 | b4 00       |                 ldy.dx 00            
4571:000 | DONE ins | em 16 16 | 005d3a | e8          |                 inx                  
4572:000 | DONE ins | em 16 16 | 005d3b | e8          |                 inx                  
4573:000 | DONE wsp | em 16 16 |        |             |
4574:000 | DONE ins | em 16 16 | 005d3c | 20 7c 54    |                 jsr 00547c           ABS
4575:000 | DONE ins | em 16 16 | 005d3f | 20 37 53    |                 jsr 005337           -ROT
4576:000 | DONE ins | em 16 16 | 005d42 | 20 9c 57    |                 jsr 00579c           DABS
4577:000 | DONE ins | em 16 16 | 005d45 | 20 59 5c    |                 jsr 005c59           ROT
4578:000 | DONE ins | em 16 16 | 005d48 | 20 81 5e    |                 jsr 005e81           UM/MOD
4579:000 | DONE wsp | em 16 16 |        |             |
4580:000 | DONE ins | em 16 16 | 005d4b | ca          |                 dex                  R>
4581:000 | DONE ins | em 16 16 | 005d4c | ca          |                 dex                  
4582:000 | DONE ins | em 16 16 | 005d4d | 94 00       |                 sty.dx 00            
4583:000 | DONE ins | em 16 16 | 005d4f | 7a          |                 ply                  
4584:000 | DONE wsp | em 16 16 |        |             |
4585:000 | DONE ins | em 16 16 | 005d50 | ca          |                 dex                  R@
4586:000 | DONE ins | em 16 16 | 005d51 | ca          |                 dex                  
4587:000 | DONE ins | em 16 16 | 005d52 | 94 00       |                 sty.dx 00            
4588:000 | DONE ins | em 16 16 | 005d54 | 7a          |                 ply                  
4589:000 | DONE ins | em 16 16 | 005d55 | 5a          |                 phy                  
4590:000 | DONE wsp | em 16 16 |        |             |
4591:000 | DONE ins | em 16 16 | 005d56 | 20 64 5f    |                 jsr 005f64           XOR
4592:000 | DONE wsp | em 16 16 |        |             |
4593:000 | DONE ins | em 16 16 | 005d59 | 98          |                 tya                  0< IF
4594:000 | DONE ins | em 16 16 | 005d5a | 10 09       |                 bpl 005d65           
4595:000 | DONE wsp | em 16 16 |        |             |
4596:000 | DONE ins | em 16 16 | 005d5c | b4 00       |                 ldy.dx 00            from IF
4597:000 | DONE ins | em 16 16 | 005d5e | e8          |                 inx                  
4598:000 | DONE ins | em 16 16 | 005d5f | e8          |                 inx                  
4599:000 | DONE wsp | em 16 16 |        |             |
4600:000 | DONE ins | em 16 16 | 005d60 | 20 ad 5a    |                 jsr 005aad           NEGATE
4601:000 | DONE ins | em 16 16 | 005d63 | 80 04       |                 bra 005d69           
4602:000 | DONE lbl | em 16 16 | 005d65 |             | smrem_1                              
4603:000 | DONE ins | em 16 16 | 005d65 | b4 00       |                 ldy.dx 00            from IF
4604:000 | DONE ins | em 16 16 | 005d67 | e8          |                 inx                  
4605:000 | DONE ins | em 16 16 | 005d68 | e8          |                 inx                  
4606:000 | DONE wsp | em 16 16 |        |             |
4607:000 | DONE lbl | em 16 16 | 005d69 |             | smrem_1_1                            
4608:000 | DONE ins | em 16 16 | 005d69 | ca          |                 dex                  R>
4609:000 | DONE ins | em 16 16 | 005d6a | ca          |                 dex                  
4610:000 | DONE ins | em 16 16 | 005d6b | 94 00       |                 sty.dx 00            
4611:000 | DONE ins | em 16 16 | 005d6d | 7a          |                 ply                  
4612:000 | DONE wsp | em 16 16 |        |             |
4613:000 | DONE ins | em 16 16 | 005d6e | 98          |                 tya                  0< IF
4614:000 | DONE ins | em 16 16 | 005d6f | 10 0f       |                 bpl 005d80           
4615:000 | DONE wsp | em 16 16 |        |             |
4616:000 | DONE ins | em 16 16 | 005d71 | b4 00       |                 ldy.dx 00            from IF
4617:000 | DONE ins | em 16 16 | 005d73 | e8          |                 inx                  
4618:000 | DONE ins | em 16 16 | 005d74 | e8          |                 inx                  
4619:000 | DONE wsp | em 16 16 |        |             |
4620:000 | DONE ins | em 16 16 | 005d75 | 20 bc 5d    |                 jsr 005dbc           
4621:000 | DONE ins | em 16 16 | 005d78 | 20 ad 5a    |                 jsr 005aad           
4622:000 | DONE ins | em 16 16 | 005d7b | 20 bc 5d    |                 jsr 005dbc           
4623:000 | DONE ins | em 16 16 | 005d7e | 80 04       |                 bra 005d84           
4624:000 | DONE wsp | em 16 16 |        |             |
4625:000 | DONE lbl | em 16 16 | 005d80 |             | smrem_2                              
4626:000 | DONE ins | em 16 16 | 005d80 | b4 00       |                 ldy.dx 00            
4627:000 | DONE ins | em 16 16 | 005d82 | e8          |                 inx                  
4628:000 | DONE ins | em 16 16 | 005d83 | e8          |                 inx                  
4629:000 | DONE wsp | em 16 16 |        |             |
4630:000 | DONE wsp | em 16 16 |        |             |
4631:000 | DONE lbl | em 16 16 | 005d84 |             | smrem_2_1                            
4632:000 | DONE wsp | em 16 16 |        |             |
4633:000 | DONE lbl | em 16 16 | 005d84 |             | z_smrem                              
4633:001 | DONE ins | em 16 16 | 005d84 | 60          |                 rts                  
4634:000 | DONE wsp | em 16 16 |        |             |
4635:000 | DONE wsp | em 16 16 |        |             |
4636:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4637:000 | DONE cmt | em 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
4638:000 | DONE cmt | em 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
4639:000 | DONE cmt | em 16 16 |        |             | ; ANSI Forth
4640:000 | DONE wsp | em 16 16 |        |             |
4641:000 | DONE lbl | em 16 16 | 005d85 |             | xt_source                            
4642:000 | DONE ins | em 16 16 | 005d85 | ca          |                 dex                  make room on Data Stack
4643:000 | DONE ins | em 16 16 | 005d86 | ca          |                 dex                  
4644:000 | DONE ins | em 16 16 | 005d87 | ca          |                 dex                  
4645:000 | DONE ins | em 16 16 | 005d88 | ca          |                 dex                  
4646:000 | DONE ins | em 16 16 | 005d89 | 94 02       |                 sty.dx 02            
4647:000 | DONE wsp | em 16 16 |        |             |
4648:000 | DONE ins | em 16 16 | 005d8b | a5 08       |                 lda.d 000008         address of current input buffer as NOS
4649:000 | DONE ins | em 16 16 | 005d8d | 95 00       |                 sta.dx 00            
4650:000 | DONE wsp | em 16 16 |        |             |
4651:000 | DONE ins | em 16 16 | 005d8f | a4 0a       |                 ldy.d 00000a         length of current input buffer as TOS
4652:000 | DONE wsp | em 16 16 |        |             |
4653:000 | DONE lbl | em 16 16 | 005d91 |             | z_source                             
4653:001 | DONE ins | em 16 16 | 005d91 | 60          |                 rts                  
4654:000 | DONE wsp | em 16 16 |        |             |
4655:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4656:000 | DONE cmt | em 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
4657:000 | DONE cmt | em 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
4658:000 | DONE cmt | em 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
4659:000 | DONE cmt | em 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
4660:000 | DONE lbl | em 16 16 | 005d92 |             | xt_source-id                         
4661:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4662:000 | DONE ins | em 16 16 | 005d92 | ca          |                 dex                  
4663:000 | DONE ins | em 16 16 | 005d93 | ca          |                 dex                  
4664:000 | DONE ins | em 16 16 | 005d94 | 94 00       |                 sty.dx 00            
4665:000 | DONE ins | em 16 16 | 005d96 | a4 06       |                 ldy.d 000006         
4666:000 | DONE wsp | em 16 16 |        |             |
4667:000 | DONE lbl | em 16 16 | 005d98 |             | z_source-id                          
4667:001 | DONE ins | em 16 16 | 005d98 | 60          |                 rts                  
4668:000 | DONE wsp | em 16 16 |        |             |
4669:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4670:000 | DONE cmt | em 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
4671:000 | DONE cmt | em 16 16 |        |             | ; Print one ASCII space character
4672:000 | DONE cmt | em 16 16 |        |             | ; TODO change to call EMIT
4673:000 | DONE lbl | em 16 16 | 005d99 |             | xt_space                             
4674:000 | DONE ins | em 16 16 | 005d99 | a9 20 00    |                 lda.# AscSP          
4675:000 | DONE ins | em 16 16 | 005d9c | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
4676:000 | DONE wsp | em 16 16 |        |             |
4677:000 | DONE lbl | em 16 16 | 005d9f |             | z_space                              ; never reached
4678:000 | DONE wsp | em 16 16 |        |             |
4679:000 | DONE wsp | em 16 16 |        |             |
4680:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4681:000 | DONE cmt | em 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
4682:000 | DONE cmt | em 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
4683:000 | DONE cmt | em 16 16 |        |             | ; are slow enough we don't have to care about speed.
4684:000 | DONE lbl | em 16 16 | 005d9f |             | xt_spaces                            
4685:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4686:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4687:000 | DONE lbl | em 16 16 | 005d9f |             | @                                    
4688:000 | DONE ins | em 16 16 | 005d9f | 88          |                 dey                  this also handles case u=0
4689:000 | DONE ins | em 16 16 | 005da0 | 30 05       |                 bmi 005da7           
4690:000 | DONE wsp | em 16 16 |        |             |
4691:000 | DONE ins | em 16 16 | 005da2 | 20 99 5d    |                 jsr 005d99           
4692:000 | DONE ins | em 16 16 | 005da5 | 80 f8       |                 bra 005d9f           
4693:000 | DONE wsp | em 16 16 |        |             |
4694:000 | DONE lbl | em 16 16 | 005da7 |             | spaces_done                          
4695:000 | DONE ins | em 16 16 | 005da7 | b4 00       |                 ldy.dx 00            DROP
4696:000 | DONE ins | em 16 16 | 005da9 | e8          |                 inx                  
4697:000 | DONE ins | em 16 16 | 005daa | e8          |                 inx                  
4698:000 | DONE wsp | em 16 16 |        |             |
4699:000 | DONE lbl | em 16 16 | 005dab |             | z_spaces                             
4699:001 | DONE ins | em 16 16 | 005dab | 60          |                 rts                  
4700:000 | DONE wsp | em 16 16 |        |             |
4701:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4702:000 | DONE cmt | em 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
4703:000 | DONE cmt | em 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
4704:000 | DONE cmt | em 16 16 |        |             | ; more than UM* DROP
4705:000 | DONE lbl | em 16 16 | 005dac |             | xt_star                              
4706:000 | DONE ins | em 16 16 | 005dac | 20 22 5e    |                 jsr 005e22           
4707:000 | DONE ins | em 16 16 | 005daf | b4 00       |                 ldy.dx 00            DROP
4708:000 | DONE ins | em 16 16 | 005db1 | e8          |                 inx                  
4709:000 | DONE ins | em 16 16 | 005db2 | e8          |                 inx                  
4710:000 | DONE wsp | em 16 16 |        |             |
4711:000 | DONE lbl | em 16 16 | 005db3 |             | z_star                               
4711:001 | DONE ins | em 16 16 | 005db3 | 60          |                 rts                  
4712:000 | DONE wsp | em 16 16 |        |             |
4713:000 | DONE wsp | em 16 16 |        |             |
4714:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4715:000 | DONE cmt | em 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
4716:000 | DONE cmt | em 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
4717:000 | DONE cmt | em 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
4718:000 | DONE cmt | em 16 16 |        |             | ; changed directly by the user; see
4719:000 | DONE cmt | em 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
4720:000 | DONE lbl | em 16 16 | 005db4 |             | xt_state                             
4721:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4722:000 | DONE ins | em 16 16 | 005db4 | ca          |                 dex                  
4723:000 | DONE ins | em 16 16 | 005db5 | ca          |                 dex                  
4724:000 | DONE ins | em 16 16 | 005db6 | 94 00       |                 sty.dx 00            
4725:000 | DONE ins | em 16 16 | 005db8 | a0 14 00    |                 ldy.# 000014         
4726:000 | DONE wsp | em 16 16 |        |             |
4727:000 | DONE lbl | em 16 16 | 005dbb |             | z_state                              
4727:001 | DONE ins | em 16 16 | 005dbb | 60          |                 rts                  
4728:000 | DONE wsp | em 16 16 |        |             |
4729:000 | DONE wsp | em 16 16 |        |             |
4730:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4731:000 | DONE cmt | em 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
4732:000 | DONE cmt | em 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
4733:000 | DONE cmt | em 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
4734:000 | DONE lbl | em 16 16 | 005dbc |             | xt_swap                              
4735:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4736:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4737:000 | DONE ins | em 16 16 | 005dbc | b5 00       |                 lda.dx 00            
4738:000 | DONE ins | em 16 16 | 005dbe | 94 00       |                 sty.dx 00            
4739:000 | DONE ins | em 16 16 | 005dc0 | a8          |                 tay                  
4740:000 | DONE wsp | em 16 16 |        |             |
4741:000 | DONE lbl | em 16 16 | 005dc1 |             | z_swap                               
4741:001 | DONE ins | em 16 16 | 005dc1 | 60          |                 rts                  
4742:000 | DONE wsp | em 16 16 |        |             |
4743:000 | DONE wsp | em 16 16 |        |             |
4744:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4745:000 | DONE cmt | em 16 16 |        |             | ; TO ( n "name" -- ) X bytes / X cycles
4746:000 | DONE cmt | em 16 16 |        |             | ; Change the value of a VALUE. Note that in theory this would work with CONSTANT
4747:000 | DONE cmt | em 16 16 |        |             | ; as well, but we frown on this behavior. Note that while it is in violation of
4748:000 | DONE cmt | em 16 16 |        |             | ; ANS Forth, we can change the number in a VALUE with <number> ' <value> >BODY
4749:000 | DONE cmt | em 16 16 |        |             | ; +!  just as you can with Gforth
4750:000 | DONE cmt | em 16 16 |        |             | ; TODO unroll this to assembler
4751:000 | DONE lbl | em 16 16 | 005dc2 |             | xt_to                                
4752:000 | DONE ins | em 16 16 | 005dc2 | 20 43 54    |                 jsr 005443           '
4753:000 | DONE ins | em 16 16 | 005dc5 | 20 32 51    |                 jsr 005132           >BODY
4754:000 | DONE ins | em 16 16 | 005dc8 | 20 c9 52    |                 jsr 0052c9           !
4755:000 | DONE wsp | em 16 16 |        |             |
4756:000 | DONE lbl | em 16 16 | 005dcb |             | z_to                                 
4756:001 | DONE ins | em 16 16 | 005dcb | 60          |                 rts                  
4757:000 | DONE wsp | em 16 16 |        |             |
4758:000 | DONE wsp | em 16 16 |        |             |
4759:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4760:000 | DONE cmt | em 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
4761:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
4762:000 | DONE lbl | em 16 16 | 005dcc |             | xt_true                              
4763:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4764:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4765:000 | DONE ins | em 16 16 | 005dcc | ca          |                 dex                  
4766:000 | DONE ins | em 16 16 | 005dcd | ca          |                 dex                  
4767:000 | DONE ins | em 16 16 | 005dce | 94 00       |                 sty.dx 00            
4768:000 | DONE ins | em 16 16 | 005dd0 | a0 ff ff    |                 ldy.# 0ffff          
4769:000 | DONE wsp | em 16 16 |        |             |
4770:000 | DONE lbl | em 16 16 | 005dd3 |             | z_true                               
4770:001 | DONE ins | em 16 16 | 005dd3 | 60          |                 rts                  
4771:000 | DONE wsp | em 16 16 |        |             |
4772:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4773:000 | DONE cmt | em 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
4774:000 | DONE cmt | em 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
4775:000 | DONE cmt | em 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
4776:000 | DONE lbl | em 16 16 | 005dd4 |             | xt_tuck                              
4777:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4778:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4779:000 | DONE ins | em 16 16 | 005dd4 | ca          |                 dex                  
4780:000 | DONE ins | em 16 16 | 005dd5 | ca          |                 dex                  
4781:000 | DONE ins | em 16 16 | 005dd6 | b5 02       |                 lda.dx 2             
4782:000 | DONE ins | em 16 16 | 005dd8 | 95 00       |                 sta.dx 0             
4783:000 | DONE ins | em 16 16 | 005dda | 94 02       |                 sty.dx 2             
4784:000 | DONE wsp | em 16 16 |        |             |
4785:000 | DONE lbl | em 16 16 | 005ddc |             | z_tuck                               
4785:001 | DONE ins | em 16 16 | 005ddc | 60          |                 rts                  
4786:000 | DONE wsp | em 16 16 |        |             |
4787:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4788:000 | DONE cmt | em 16 16 |        |             | ; TYPE  ( addr u -- ) 23+ bytes / X cycles
4789:000 | DONE cmt | em 16 16 |        |             | ; Print character string if u is not 0. Works though EMIT and is affect by the
4790:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT revectoring
4791:000 | DONE cmt | em 16 16 |        |             | ; TODO LATER add PAUSE here for multitasking
4792:000 | DONE lbl | em 16 16 | 005ddd |             | xt_type                              
4793:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4794:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4795:000 | DONE cmt | em 16 16 |        |             |                 ; just leave if u is zero (empty string)
4796:000 | DONE ins | em 16 16 | 005ddd | 98          |                 tya                  force flag check of TOS
4797:000 | DONE ins | em 16 16 | 005dde | f0 17       |                 beq 005df7           
4798:000 | DONE wsp | em 16 16 |        |             |
4799:000 | DONE ins | em 16 16 | 005de0 | b5 00       |                 lda.dx 00            get address from NOS
4800:000 | DONE ins | em 16 16 | 005de2 | 85 1c       |                 sta.d 00001c         
4801:000 | DONE ins | em 16 16 | 005de4 | 84 1e       |                 sty.d 00001e         number of chars is TOS
4802:000 | DONE ins | em 16 16 | 005de6 | a0 00 00    |                 ldy.# 0000           
4803:000 | DONE ins | em 16 16 | 005de9 | e2 20       |                 sep 20               
4803:001 | DONE ctl | em  8 16 |        |             |         .!a8
4804:000 | DONE lbl | em  8 16 | 005deb |             | type_loop                            
4805:000 | DONE ins | em  8 16 | 005deb | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4806:000 | DONE ins | em  8 16 | 005ded | 20 1c 58    |                 jsr 00581c           
4807:000 | DONE ins | em  8 16 | 005df0 | c8          |                 iny                  
4808:000 | DONE ins | em  8 16 | 005df1 | c4 1e       |                 cpy.d 00001e         
4809:000 | DONE ins | em  8 16 | 005df3 | d0 f6       |                 bne 005deb           
4810:000 | DONE wsp | em  8 16 |        |             |
4811:000 | DONE ins | em  8 16 | 005df5 | c2 20       |                 rep 20               
4811:001 | DONE ctl | em 16 16 |        |             |         .!a16
4812:000 | DONE lbl | em 16 16 | 005df7 |             | type_done                            
4813:000 | DONE cmt | em 16 16 |        |             |                 ; clear stack
4814:000 | DONE ins | em 16 16 | 005df7 | b4 02       |                 ldy.dx 02            
4815:000 | DONE ins | em 16 16 | 005df9 | e8          |                 inx                  
4816:000 | DONE ins | em 16 16 | 005dfa | e8          |                 inx                  
4817:000 | DONE ins | em 16 16 | 005dfb | e8          |                 inx                  
4818:000 | DONE ins | em 16 16 | 005dfc | e8          |                 inx                  
4819:000 | DONE wsp | em 16 16 |        |             |
4820:000 | DONE wsp | em 16 16 |        |             |
4821:000 | DONE lbl | em 16 16 | 005dfd |             | z_type                               
4821:001 | DONE ins | em 16 16 | 005dfd | 60          |                 rts                  
4822:000 | DONE wsp | em 16 16 |        |             |
4823:000 | DONE wsp | em 16 16 |        |             |
4824:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4825:000 | DONE cmt | em 16 16 |        |             | ; UDOT ( n -- ) X bytes / X cycles
4826:000 | DONE cmt | em 16 16 |        |             | ; Print unsigned number. This is based on the Forth word
4827:000 | DONE cmt | em 16 16 |        |             | ; 0 <# #S #> TYPE SPACE but uses the general print_u routine
4828:000 | DONE cmt | em 16 16 |        |             | ; that .S and DUMP use as well.
4829:000 | DONE lbl | em 16 16 | 005dfe |             | xt_udot                              
4830:000 | DONE ins | em 16 16 | 005dfe | 20 e9 68    |                 jsr 0068e9           ( n -- )
4831:000 | DONE wsp | em 16 16 |        |             |
4832:000 | DONE ins | em 16 16 | 005e01 | a9 20 00    |                 lda.# 0020           SPACE
4833:000 | DONE ins | em 16 16 | 005e04 | 4c 1c 58    |                 jmp 00581c           JSR/RTS
4834:000 | DONE wsp | em 16 16 |        |             |
4835:000 | DONE lbl | em 16 16 | 005e07 |             | z_udot                               ; not reached
4836:000 | DONE wsp | em 16 16 |        |             |
4837:000 | DONE wsp | em 16 16 |        |             |
4838:000 | DONE wsp | em 16 16 |        |             |
4839:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4840:000 | DONE cmt | em 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
4841:000 | DONE cmt | em 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
4842:000 | DONE cmt | em 16 16 |        |             | ; result and a single-cell remainder. Based on
4843:000 | DONE cmt | em 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
4844:000 | DONE cmt | em 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
4845:000 | DONE cmt | em 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
4846:000 | DONE cmt | em 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
4847:000 | DONE cmt | em 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
4848:000 | DONE lbl | em 16 16 | 005e07 |             | xt_udmod                             
4849:000 | DONE ins | em 16 16 | 005e07 | 20 bb 51    |                 jsr 0051bb           
4850:000 | DONE ins | em 16 16 | 005e0a | 20 63 53    |                 jsr 005363           
4851:000 | DONE ins | em 16 16 | 005e0d | 20 20 5c    |                 jsr 005c20           
4852:000 | DONE ins | em 16 16 | 005e10 | 20 81 5e    |                 jsr 005e81           
4853:000 | DONE ins | em 16 16 | 005e13 | 20 59 5c    |                 jsr 005c59           
4854:000 | DONE ins | em 16 16 | 005e16 | 20 59 5c    |                 jsr 005c59           
4855:000 | DONE ins | em 16 16 | 005e19 | 20 29 5c    |                 jsr 005c29           
4856:000 | DONE ins | em 16 16 | 005e1c | 20 81 5e    |                 jsr 005e81           
4857:000 | DONE ins | em 16 16 | 005e1f | 4c 59 5c    |                 jmp 005c59           JSR/RTS
4858:000 | DONE lbl | em 16 16 | 005e22 |             | z_udmod                              
4859:000 | DONE wsp | em 16 16 |        |             |
4860:000 | DONE wsp | em 16 16 |        |             |
4861:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4862:000 | DONE cmt | em 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
4863:000 | DONE cmt | em 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
4864:000 | DONE cmt | em 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
4865:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
4866:000 | DONE cmt | em 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
4867:000 | DONE cmt | em 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
4868:000 | DONE cmt | em 16 16 |        |             | ; call this "U*"
4869:000 | DONE wsp | em 16 16 |        |             |
4870:000 | DONE cmt | em 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
4871:000 | DONE cmt | em 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
4872:000 | DONE cmt | em 16 16 |        |             | ; consider switching to a table-supported version based on
4873:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
4874:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
4875:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
4876:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
4877:000 | DONE cmt | em 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
4878:000 | DONE lbl | em 16 16 | 005e22 |             | xt_umstar                            
4879:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4880:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
4881:000 | DONE ins | em 16 16 | 005e22 | 98          |                 tya                  
4882:000 | DONE ins | em 16 16 | 005e23 | f0 3d       |                 beq 005e62           
4883:000 | DONE ins | em 16 16 | 005e25 | b5 00       |                 lda.dx 00            
4884:000 | DONE ins | em 16 16 | 005e27 | f0 39       |                 beq 005e62           
4885:000 | DONE wsp | em 16 16 |        |             |
4886:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
4887:000 | DONE cmt | em 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
4888:000 | DONE cmt | em 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
4889:000 | DONE cmt | em 16 16 |        |             |                 ; answer
4890:000 | DONE ins | em 16 16 | 005e29 | c0 01 00    |                 cpy.# 0001           non-distructively
4891:000 | DONE ins | em 16 16 | 005e2c | f0 3b       |                 beq 005e69           
4892:000 | DONE ins | em 16 16 | 005e2e | b5 00       |                 lda.dx 00            
4893:000 | DONE ins | em 16 16 | 005e30 | 3a          |                 dec.a                don't care about distruction
4894:000 | DONE ins | em 16 16 | 005e31 | f0 39       |                 beq 005e6c           
4895:000 | DONE wsp | em 16 16 |        |             |
4896:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
4897:000 | DONE ins | em 16 16 | 005e33 | c0 02 00    |                 cpy.# 0002           
4898:000 | DONE ins | em 16 16 | 005e36 | f0 3b       |                 beq 005e73           
4899:000 | DONE wsp | em 16 16 |        |             |
4900:000 | DONE ins | em 16 16 | 005e38 | b5 00       |                 lda.dx 00            
4901:000 | DONE ins | em 16 16 | 005e3a | c9 02 00    |                 cmp.# 0002           
4902:000 | DONE ins | em 16 16 | 005e3d | f0 38       |                 beq 005e77           
4903:000 | DONE wsp | em 16 16 |        |             |
4904:000 | DONE cmt | em 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
4905:000 | DONE ins | em 16 16 | 005e3f | 84 1c       |                 sty.d 00001c         TOS number  "40"
4906:000 | DONE ins | em 16 16 | 005e41 | 85 1e       |                 sta.d 00001e         NOS number  "41"
4907:000 | DONE ins | em 16 16 | 005e43 | a0 10 00    |                 ldy.# &16            loop counter
4908:000 | DONE wsp | em 16 16 |        |             |
4909:000 | DONE ins | em 16 16 | 005e46 | a9 00 00    |                 lda.# 0000           
4910:000 | DONE ins | em 16 16 | 005e49 | 85 20       |                 sta.d 000020         Most Significat Word (MSW) of result
4911:000 | DONE wsp | em 16 16 |        |             |
4912:000 | DONE lbl | em 16 16 | 005e4b |             | umstar_loop                          
4913:000 | DONE ins | em 16 16 | 005e4b | 0a          |                 asl.a                useless for first iteration
4914:000 | DONE ins | em 16 16 | 005e4c | 26 20       |                 rol.d 000020         move carry into MSB, useless first iteration
4915:000 | DONE ins | em 16 16 | 005e4e | 06 1e       |                 asl.d 00001e         move bit of NOS number into carry
4916:000 | DONE wsp | em 16 16 |        |             |
4917:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
4918:000 | DONE cmt | em 16 16 |        |             |                 ; the next bit
4919:000 | DONE ins | em 16 16 | 005e50 | 90 07       |                 bcc 005e59           
4920:000 | DONE wsp | em 16 16 |        |             |
4921:000 | DONE ins | em 16 16 | 005e52 | 18          |                 clc                  
4922:000 | DONE ins | em 16 16 | 005e53 | 65 1c       |                 adc.d 00001c         we have a set bit, so add TOS
4923:000 | DONE wsp | em 16 16 |        |             |
4924:000 | DONE cmt | em 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
4925:000 | DONE ins | em 16 16 | 005e55 | 90 02       |                 bcc 005e59           
4926:000 | DONE ins | em 16 16 | 005e57 | e6 20       |                 inc.d 000020         
4927:000 | DONE wsp | em 16 16 |        |             |
4928:000 | DONE lbl | em 16 16 | 005e59 |             | umstar_counter                       
4929:000 | DONE ins | em 16 16 | 005e59 | 88          |                 dey                  
4930:000 | DONE ins | em 16 16 | 005e5a | d0 ef       |                 bne 005e4b           
4931:000 | DONE wsp | em 16 16 |        |             |
4932:000 | DONE cmt | em 16 16 |        |             |                 ; We're all done, clean up and leave
4933:000 | DONE ins | em 16 16 | 005e5c | 95 00       |                 sta.dx 00            store lower cell of number in NOS
4934:000 | DONE ins | em 16 16 | 005e5e | a4 20       |                 ldy.d 000020         store MSB in TOS as double cell
4935:000 | DONE wsp | em 16 16 |        |             |
4936:000 | DONE ins | em 16 16 | 005e60 | 80 1e       |                 bra 005e80           don't use RTS so we can natively compile
4937:000 | DONE wsp | em 16 16 |        |             |
4938:000 | DONE lbl | em 16 16 | 005e62 |             | umstar_zero                          
4939:000 | DONE cmt | em 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
4940:000 | DONE ins | em 16 16 | 005e62 | a0 00 00    |                 ldy.# 0000           
4941:000 | DONE ins | em 16 16 | 005e65 | 94 00       |                 sty.dx 00            
4942:000 | DONE ins | em 16 16 | 005e67 | 80 17       |                 bra 005e80           
4943:000 | DONE wsp | em 16 16 |        |             |
4944:000 | DONE lbl | em 16 16 | 005e69 |             | umstar_one_tos                       
4945:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is one, life is easy
4946:000 | DONE ins | em 16 16 | 005e69 | 88          |                 dey                  NOS is LSW, TOS becomes zero
4947:000 | DONE ins | em 16 16 | 005e6a | 80 14       |                 bra 005e80           
4948:000 | DONE lbl | em 16 16 | 005e6c |             | umstar_one_nos                       
4949:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is one, life is easy
4950:000 | DONE ins | em 16 16 | 005e6c | 94 00       |                 sty.dx 00            
4951:000 | DONE ins | em 16 16 | 005e6e | a0 00 00    |                 ldy.# 0000           
4952:000 | DONE ins | em 16 16 | 005e71 | 80 0d       |                 bra 005e80           
4953:000 | DONE wsp | em 16 16 |        |             |
4954:000 | DONE lbl | em 16 16 | 005e73 |             | umstar_two_tos                       
4955:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is two, life is easy
4956:000 | DONE ins | em 16 16 | 005e73 | b5 00       |                 lda.dx 00            
4957:000 | DONE ins | em 16 16 | 005e75 | 80 01       |                 bra 005e78           
4958:000 | DONE lbl | em 16 16 | 005e77 |             | umstar_two_nos                       
4959:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is two, life is still easy
4960:000 | DONE ins | em 16 16 | 005e77 | 98          |                 tya                  
4961:000 | DONE lbl | em 16 16 | 005e78 |             | umstar_two_common                    
4962:000 | DONE ins | em 16 16 | 005e78 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
4963:000 | DONE ins | em 16 16 | 005e79 | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
4964:000 | DONE wsp | em 16 16 |        |             |
4965:000 | DONE ins | em 16 16 | 005e7b | a9 00 00    |                 lda.# 0000           
4966:000 | DONE ins | em 16 16 | 005e7e | 2a          |                 rol.a                Rotate any Carry Flag into MSW
4967:000 | DONE ins | em 16 16 | 005e7f | a8          |                 tay                  
4968:000 | DONE wsp | em 16 16 |        |             |
4969:000 | DONE lbl | em 16 16 | 005e80 |             | z_umstar                             
4969:001 | DONE ins | em 16 16 | 005e80 | 60          |                 rts                  
4970:000 | DONE wsp | em 16 16 |        |             |
4971:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4972:000 | DONE cmt | em 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
4973:000 | DONE cmt | em 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
4974:000 | DONE cmt | em 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
4975:000 | DONE cmt | em 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
4976:000 | DONE cmt | em 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
4977:000 | DONE cmt | em 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
4978:000 | DONE lbl | em 16 16 | 005e81 |             | xt_ummod                             
4979:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4980:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4981:000 | DONE cmt | em 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
4982:000 | DONE cmt | em 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
4983:000 | DONE cmt | em 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
4984:000 | DONE cmt | em 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
4985:000 | DONE cmt | em 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
4986:000 | DONE cmt | em 16 16 |        |             |                 ;
4987:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
4988:000 | DONE cmt | em 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
4989:000 | DONE cmt | em 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
4990:000 | DONE cmt | em 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
4991:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
4992:000 | DONE cmt | em 16 16 |        |             |                 ;
4993:000 | DONE cmt | em 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
4994:000 | DONE cmt | em 16 16 |        |             |                 ; and low cell in 3OS
4995:000 | DONE wsp | em 16 16 |        |             |
4996:000 | DONE cmt | em 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
4997:000 | DONE cmt | em 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
4998:000 | DONE cmt | em 16 16 |        |             |                 ; to appear like in Gforth
4999:000 | DONE ins | em 16 16 | 005e81 | 98          |                 tya                  force flag test
5000:000 | DONE ins | em 16 16 | 005e82 | d0 06       |                 bne 005e8a           
5001:000 | DONE wsp | em 16 16 |        |             |
5002:000 | DONE ins | em 16 16 | 005e84 | a9 8a 6f    |                 lda.# 006f8a         
5003:000 | DONE ins | em 16 16 | 005e87 | 4c cb 68    |                 jmp 0068cb           
5004:000 | DONE wsp | em 16 16 |        |             |
5005:000 | DONE lbl | em 16 16 | 005e8a |             | ummod_notzero                        
5006:000 | DONE ins | em 16 16 | 005e8a | 84 26       |                 sty.d 000026         Y is now free
5007:000 | DONE ins | em 16 16 | 005e8c | b5 00       |                 lda.dx 00            high cell of dividend
5008:000 | DONE ins | em 16 16 | 005e8e | 85 28       |                 sta.d 000028         
5009:000 | DONE ins | em 16 16 | 005e90 | b5 02       |                 lda.dx 02            low cell of dividend
5010:000 | DONE ins | em 16 16 | 005e92 | 85 2a       |                 sta.d 00002a         
5011:000 | DONE wsp | em 16 16 |        |             |
5012:000 | DONE cmt | em 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
5013:000 | DONE cmt | em 16 16 |        |             |                 ; Pointer, freeing X for index duty
5014:000 | DONE ins | em 16 16 | 005e94 | e8          |                 inx                  
5015:000 | DONE ins | em 16 16 | 005e95 | e8          |                 inx                  
5016:000 | DONE ins | em 16 16 | 005e96 | 86 22       |                 stx.d 000022         
5017:000 | DONE wsp | em 16 16 |        |             |
5018:000 | DONE cmt | em 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
5019:000 | DONE cmt | em 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
5020:000 | DONE cmt | em 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
5021:000 | DONE cmt | em 16 16 |        |             |                 ; we did that already in a separate step
5022:000 | DONE ins | em 16 16 | 005e98 | 38          |                 sec                  
5023:000 | DONE ins | em 16 16 | 005e99 | a5 28       |                 lda.d 000028         
5024:000 | DONE ins | em 16 16 | 005e9b | e5 26       |                 sbc.d 000026         
5025:000 | DONE ins | em 16 16 | 005e9d | b0 21       |                 bcs 005ec0           
5026:000 | DONE wsp | em 16 16 |        |             |
5027:000 | DONE cmt | em 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
5028:000 | DONE cmt | em 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
5029:000 | DONE cmt | em 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
5030:000 | DONE cmt | em 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
5031:000 | DONE cmt | em 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
5032:000 | DONE cmt | em 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
5033:000 | DONE ins | em 16 16 | 005e9f | a2 11 00    |                 ldx.# &17            
5034:000 | DONE wsp | em 16 16 |        |             |
5035:000 | DONE lbl | em 16 16 | 005ea2 |             | ummod_shift                          
5036:000 | DONE cmt | em 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
5037:000 | DONE cmt | em 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
5038:000 | DONE cmt | em 16 16 |        |             |                 ; pushed off the other end in the last rotation
5039:000 | DONE ins | em 16 16 | 005ea2 | 26 2a       |                 rol.d 00002a         
5040:000 | DONE wsp | em 16 16 |        |             |
5041:000 | DONE cmt | em 16 16 |        |             |                 ; loop control
5042:000 | DONE ins | em 16 16 | 005ea4 | ca          |                 dex                  
5043:000 | DONE ins | em 16 16 | 005ea5 | f0 22       |                 beq 005ec9           
5044:000 | DONE wsp | em 16 16 |        |             |
5045:000 | DONE cmt | em 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
5046:000 | DONE cmt | em 16 16 |        |             |                 ; next bit in from high bit of low cell
5047:000 | DONE ins | em 16 16 | 005ea7 | 26 28       |                 rol.d 000028         
5048:000 | DONE ins | em 16 16 | 005ea9 | a9 00 00    |                 lda.# 0000           
5049:000 | DONE ins | em 16 16 | 005eac | 2a          |                 rol.a                
5050:000 | DONE ins | em 16 16 | 005ead | 85 2c       |                 sta.d 00002c         store old high bit of dividend
5051:000 | DONE wsp | em 16 16 |        |             |
5052:000 | DONE cmt | em 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
5053:000 | DONE cmt | em 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
5054:000 | DONE cmt | em 16 16 |        |             |                 ; cleared, divisor did not fit
5055:000 | DONE ins | em 16 16 | 005eaf | 38          |                 sec                  
5056:000 | DONE ins | em 16 16 | 005eb0 | a5 28       |                 lda.d 000028         
5057:000 | DONE ins | em 16 16 | 005eb2 | e5 26       |                 sbc.d 000026         
5058:000 | DONE ins | em 16 16 | 005eb4 | a8          |                 tay                  save difference in Y until we know if we need it
5059:000 | DONE wsp | em 16 16 |        |             |
5060:000 | DONE cmt | em 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
5061:000 | DONE cmt | em 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
5062:000 | DONE cmt | em 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
5063:000 | DONE cmt | em 16 16 |        |             |                 ; remains set
5064:000 | DONE ins | em 16 16 | 005eb5 | a5 2c       |                 lda.d 00002c         
5065:000 | DONE ins | em 16 16 | 005eb7 | e9 00 00    |                 sbc.# 0000           
5066:000 | DONE ins | em 16 16 | 005eba | 90 e6       |                 bcc 005ea2           
5067:000 | DONE wsp | em 16 16 |        |             |
5068:000 | DONE cmt | em 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
5069:000 | DONE cmt | em 16 16 |        |             |                 ; cell to what it would be after subtraction
5070:000 | DONE ins | em 16 16 | 005ebc | 84 28       |                 sty.d 000028         
5071:000 | DONE ins | em 16 16 | 005ebe | 80 e2       |                 bra 005ea2           
5072:000 | DONE wsp | em 16 16 |        |             |
5073:000 | DONE lbl | em 16 16 | 005ec0 |             | ummod_overflow                       
5074:000 | DONE cmt | em 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
5075:000 | DONE cmt | em 16 16 |        |             |                 ; in both the quotient and remainder
5076:000 | DONE ins | em 16 16 | 005ec0 | a6 22       |                 ldx.d 000022         restore DSP
5077:000 | DONE ins | em 16 16 | 005ec2 | a0 ff ff    |                 ldy.# 0ffff          
5078:000 | DONE ins | em 16 16 | 005ec5 | 94 00       |                 sty.dx 00            
5079:000 | DONE ins | em 16 16 | 005ec7 | 80 08       |                 bra 005ed1           go to end to enable native coding
5080:000 | DONE wsp | em 16 16 |        |             |
5081:000 | DONE lbl | em 16 16 | 005ec9 |             | ummod_complete                       
5082:000 | DONE ins | em 16 16 | 005ec9 | a6 22       |                 ldx.d 000022         restore DSP
5083:000 | DONE ins | em 16 16 | 005ecb | a4 2a       |                 ldy.d 00002a         quotient is TOS
5084:000 | DONE ins | em 16 16 | 005ecd | a5 28       |                 lda.d 000028         remainder is NOS
5085:000 | DONE ins | em 16 16 | 005ecf | 95 00       |                 sta.dx 00            
5086:000 | DONE wsp | em 16 16 |        |             |
5087:000 | DONE lbl | em 16 16 | 005ed1 |             | z_ummod                              
5087:001 | DONE ins | em 16 16 | 005ed1 | 60          |                 rts                  
5088:000 | DONE wsp | em 16 16 |        |             |
5089:000 | DONE wsp | em 16 16 |        |             |
5090:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5091:000 | DONE cmt | em 16 16 |        |             | ; UNLOOP ( -- ; R: n n n -- ) X bytes / X cycles
5092:000 | DONE cmt | em 16 16 |        |             | ; Drop loop control stuff from Return Stack.
5093:000 | DONE cmt | em 16 16 |        |             | ; TODO make this faster
5094:000 | DONE lbl | em 16 16 | 005ed2 |             | xt_unloop                            
5095:000 | DONE cmt | em 16 16 |        |             |                 ; drop fudge number (limit/start) from DO/?DO off the Return
5096:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5097:000 | DONE ins | em 16 16 | 005ed2 | 68          |                 pla                  
5098:000 | DONE ins | em 16 16 | 005ed3 | 68          |                 pla                  
5099:000 | DONE ins | em 16 16 | 005ed4 | 68          |                 pla                  
5100:000 | DONE ins | em 16 16 | 005ed5 | 68          |                 pla                  
5101:000 | DONE wsp | em 16 16 |        |             |
5102:000 | DONE cmt | em 16 16 |        |             |                 ; Drop the LEAVE address that was below them as well
5103:000 | DONE ins | em 16 16 | 005ed6 | 68          |                 pla                  
5104:000 | DONE ins | em 16 16 | 005ed7 | 68          |                 pla                  
5105:000 | DONE wsp | em 16 16 |        |             |
5106:000 | DONE lbl | em 16 16 | 005ed8 |             | z_unloop                             
5106:001 | DONE ins | em 16 16 | 005ed8 | 60          |                 rts                  
5107:000 | DONE wsp | em 16 16 |        |             |
5108:000 | DONE wsp | em 16 16 |        |             |
5109:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5110:000 | DONE cmt | em 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
5111:000 | DONE cmt | em 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not exclude the
5112:000 | DONE cmt | em 16 16 |        |             | ; space for PAD.
5113:000 | DONE lbl | em 16 16 | 005ed9 |             | xt_unused                            
5114:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5115:000 | DONE ins | em 16 16 | 005ed9 | a9 ff 4f    |                 lda.# 004fff         
5116:000 | DONE ins | em 16 16 | 005edc | 38          |                 sec                  
5117:000 | DONE ins | em 16 16 | 005edd | e5 00       |                 sbc.d 000000         current compile pointer
5118:000 | DONE wsp | em 16 16 |        |             |
5119:000 | DONE ins | em 16 16 | 005edf | ca          |                 dex                  
5120:000 | DONE ins | em 16 16 | 005ee0 | ca          |                 dex                  
5121:000 | DONE ins | em 16 16 | 005ee1 | 94 00       |                 sty.dx 00            
5122:000 | DONE wsp | em 16 16 |        |             |
5123:000 | DONE ins | em 16 16 | 005ee3 | a8          |                 tay                  
5124:000 | DONE wsp | em 16 16 |        |             |
5125:000 | DONE lbl | em 16 16 | 005ee4 |             | z_unused                             
5125:001 | DONE ins | em 16 16 | 005ee4 | 60          |                 rts                  
5126:000 | DONE wsp | em 16 16 |        |             |
5127:000 | DONE wsp | em 16 16 |        |             |
5128:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5129:000 | DONE cmt | em 16 16 |        |             | ; VALUE ( n "name" -- ) X bytes / X cycles
5130:000 | DONE cmt | em 16 16 |        |             | ; Associate a name with a value (like a constant) that can be changed (like
5131:000 | DONE cmt | em 16 16 |        |             | ; a variable) with TO. We use the routines as CONSTANT, see there.
5132:000 | DONE wsp | em 16 16 |        |             |
5133:000 | DONE wsp | em 16 16 |        |             |
5134:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5135:000 | DONE cmt | em 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
5136:000 | DONE cmt | em 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
5137:000 | DONE cmt | em 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
5138:000 | DONE cmt | em 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
5139:000 | DONE lbl | em 16 16 | 005ee5 |             | xt_variable                          
5140:000 | DONE cmt | em 16 16 |        |             |                 ; We let CREATE do the heavy lifting
5141:000 | DONE ins | em 16 16 | 005ee5 | 20 aa 56    |                 jsr 0056aa           
5142:000 | DONE wsp | em 16 16 |        |             |
5143:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
5144:000 | DONE cmt | em 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
5145:000 | DONE ins | em 16 16 | 005ee8 | a9 00 00    |                 lda.# 0000           
5146:000 | DONE ins | em 16 16 | 005eeb | 92 00       |                 sta.di 000000        STA (CP)
5147:000 | DONE wsp | em 16 16 |        |             |
5148:000 | DONE ins | em 16 16 | 005eed | e6 00       |                 inc.d 000000         direct COMMA
5149:000 | DONE ins | em 16 16 | 005eef | e6 00       |                 inc.d 000000         
5150:000 | DONE wsp | em 16 16 |        |             |
5151:000 | DONE ins | em 16 16 | 005ef1 | 4c 80 56    |                 jmp 005680           adjust the z_ value by adding 2 bytes
5152:000 | DONE wsp | em 16 16 |        |             |
5153:000 | DONE lbl | em 16 16 | 005ef4 |             | z_variable                           ; never reached
5154:000 | DONE wsp | em 16 16 |        |             |
5155:000 | DONE wsp | em 16 16 |        |             |
5156:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5157:000 | DONE cmt | em 16 16 |        |             | ; WORD ( char "name" -- c-addr ) X bytes / X cycles
5158:000 | DONE cmt | em 16 16 |        |             | ; Obsolete parsing word included for backwards compatibility. Do note use this,
5159:000 | DONE cmt | em 16 16 |        |             | ; use PARSE or PARSE-NAME. Skips leading delimiters and copies word to storage
5160:000 | DONE cmt | em 16 16 |        |             | ; area for a maximum size of 255 bytes. Returns the result as a counted string
5161:000 | DONE cmt | em 16 16 |        |             | ; (requires COUNT to convert to modern format), and inserts a space after the
5162:000 | DONE cmt | em 16 16 |        |             | ; string. See "Forth Programmer's Handbook" 3rd edition p.159 and
5163:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
5164:000 | DONE cmt | em 16 16 |        |             | ; for discussions of why you shouldn't be using WORD anymore. Forth would be
5165:000 | DONE cmt | em 16 16 |        |             | ; PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
5166:000 | DONE cmt | em 16 16 |        |             | ; TODO What about the space?
5167:000 | DONE lbl | em 16 16 | 005ef4 |             | xt_word                              
5168:000 | DONE cmt | em 16 16 |        |             |                 ; The real work is done by PARSE
5169:000 | DONE ins | em 16 16 | 005ef4 | 20 9c 5b    |                 jsr 005b9c           ( addr u )
5170:000 | DONE wsp | em 16 16 |        |             |
5171:000 | DONE cmt | em 16 16 |        |             |                 ; Now we have to convert the modern address to the old form
5172:000 | DONE ins | em 16 16 | 005ef7 | 8c 80 02    |                 sty 000280           overwrite MSB
5173:000 | DONE wsp | em 16 16 |        |             |
5174:000 | DONE ins | em 16 16 | 005efa | ca          |                 dex                  
5175:000 | DONE ins | em 16 16 | 005efb | ca          |                 dex                  ( addr <?> u )
5176:000 | DONE ins | em 16 16 | 005efc | a9 80 02    |                 lda.# 000280         
5177:000 | DONE ins | em 16 16 | 005eff | 1a          |                 inc.a                
5178:000 | DONE ins | em 16 16 | 005f00 | 95 00       |                 sta.dx 00            ( addr buffer1+1 u )
5179:000 | DONE wsp | em 16 16 |        |             |
5180:000 | DONE ins | em 16 16 | 005f02 | 20 79 5a    |                 jsr 005a79           
5181:000 | DONE wsp | em 16 16 |        |             |
5182:000 | DONE ins | em 16 16 | 005f05 | ca          |                 dex                  
5183:000 | DONE ins | em 16 16 | 005f06 | ca          |                 dex                  
5184:000 | DONE ins | em 16 16 | 005f07 | 94 00       |                 sty.dx 00            
5185:000 | DONE wsp | em 16 16 |        |             |
5186:000 | DONE ins | em 16 16 | 005f09 | a0 80 02    |                 ldy.# 000280         
5187:000 | DONE wsp | em 16 16 |        |             |
5188:000 | DONE lbl | em 16 16 | 005f0c |             | z_word                               
5188:001 | DONE ins | em 16 16 | 005f0c | 60          |                 rts                  
5189:000 | DONE wsp | em 16 16 |        |             |
5190:000 | DONE wsp | em 16 16 |        |             |
5191:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5192:000 | DONE cmt | em 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
5193:000 | DONE cmt | em 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
5194:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
5195:000 | DONE cmt | em 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
5196:000 | DONE lbl | em 16 16 | 005f0d |             | xt_wordsnsizes                       
5197:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5198:000 | DONE ins | em 16 16 | 005f0d | a9 ff ff    |                 lda.# 0ffff          
5199:000 | DONE ins | em 16 16 | 005f10 | 85 20       |                 sta.d 000020         set flag that we want sizes, too
5200:000 | DONE wsp | em 16 16 |        |             |
5201:000 | DONE cmt | em 16 16 |        |             |                 ; continue with WORDS
5202:000 | DONE ins | em 16 16 | 005f12 | 80 02       |                 bra 005f16           
5203:000 | DONE wsp | em 16 16 |        |             |
5204:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5205:000 | DONE cmt | em 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
5206:000 | DONE cmt | em 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
5207:000 | DONE cmt | em 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
5208:000 | DONE cmt | em 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
5209:000 | DONE cmt | em 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
5210:000 | DONE lbl | em 16 16 | 005f14 |             | xt_words                             
5211:000 | DONE ins | em 16 16 | 005f14 | 64 20       |                 stz.d 000020         store flag that we don't want to print sizes
5212:000 | DONE wsp | em 16 16 |        |             |
5213:000 | DONE lbl | em 16 16 | 005f16 |             | words_common                         
5214:000 | DONE cmt | em 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
5215:000 | DONE ins | em 16 16 | 005f16 | 20 a4 56    |                 jsr 0056a4           start on next line, this is a style choice
5216:000 | DONE wsp | em 16 16 |        |             |
5217:000 | DONE ins | em 16 16 | 005f19 | a5 02       |                 lda.d 000002         nt of first entry in Dictionary (last added)
5218:000 | DONE ins | em 16 16 | 005f1b | 48          |                 pha                  
5219:000 | DONE wsp | em 16 16 |        |             |
5220:000 | DONE ins | em 16 16 | 005f1c | ca          |                 dex                  create room on TOS
5221:000 | DONE ins | em 16 16 | 005f1d | ca          |                 dex                  
5222:000 | DONE ins | em 16 16 | 005f1e | 94 00       |                 sty.dx 00            
5223:000 | DONE wsp | em 16 16 |        |             |
5224:000 | DONE lbl | em 16 16 | 005f20 |             | words_loop                           
5225:000 | DONE ins | em 16 16 | 005f20 | a8          |                 tay                  ( nt )
5226:000 | DONE ins | em 16 16 | 005f21 | 20 93 5a    |                 jsr 005a93           ( nt -- addr u )
5227:000 | DONE ins | em 16 16 | 005f24 | 20 dd 5d    |                 jsr 005ddd           
5228:000 | DONE ins | em 16 16 | 005f27 | 20 99 5d    |                 jsr 005d99           
5229:000 | DONE wsp | em 16 16 |        |             |
5230:000 | DONE cmt | em 16 16 |        |             |                 ; If the user wants sizes as well, print them
5231:000 | DONE ins | em 16 16 | 005f2a | a5 20       |                 lda.d 000020         
5232:000 | DONE ins | em 16 16 | 005f2c | f0 0f       |                 beq 005f3d           
5233:000 | DONE wsp | em 16 16 |        |             |
5234:000 | DONE cmt | em 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
5235:000 | DONE cmt | em 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
5236:000 | DONE ins | em 16 16 | 005f2e | ca          |                 dex                  
5237:000 | DONE ins | em 16 16 | 005f2f | ca          |                 dex                  
5238:000 | DONE ins | em 16 16 | 005f30 | 94 00       |                 sty.dx 00            
5239:000 | DONE wsp | em 16 16 |        |             |
5240:000 | DONE ins | em 16 16 | 005f32 | 7a          |                 ply                  get nt back again
5241:000 | DONE ins | em 16 16 | 005f33 | 5a          |                 phy                  
5242:000 | DONE ins | em 16 16 | 005f34 | 20 51 5f    |                 jsr 005f51           ( u )
5243:000 | DONE ins | em 16 16 | 005f37 | 20 d5 51    |                 jsr 0051d5           
5244:000 | DONE ins | em 16 16 | 005f3a | 20 99 5d    |                 jsr 005d99           
5245:000 | DONE wsp | em 16 16 |        |             |
5246:000 | DONE lbl | em 16 16 | 005f3d |             | words_nosizes                        
5247:000 | DONE ins | em 16 16 | 005f3d | 68          |                 pla                  get back first entry in Dictionary
5248:000 | DONE wsp | em 16 16 |        |             |
5249:000 | DONE cmt | em 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
5250:000 | DONE cmt | em 16 16 |        |             |                 ; the Dictionary header
5251:000 | DONE ins | em 16 16 | 005f3e | 1a          |                 inc.a                
5252:000 | DONE ins | em 16 16 | 005f3f | 1a          |                 inc.a                
5253:000 | DONE wsp | em 16 16 |        |             |
5254:000 | DONE ins | em 16 16 | 005f40 | ca          |                 dex                  
5255:000 | DONE ins | em 16 16 | 005f41 | ca          |                 dex                  
5256:000 | DONE ins | em 16 16 | 005f42 | 94 00       |                 sty.dx 00            
5257:000 | DONE wsp | em 16 16 |        |             |
5258:000 | DONE ins | em 16 16 | 005f44 | a8          |                 tay                  
5259:000 | DONE ins | em 16 16 | 005f45 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5260:000 | DONE ins | em 16 16 | 005f48 | 48          |                 pha                  
5261:000 | DONE ins | em 16 16 | 005f49 | d0 d5       |                 bne 005f20           zero entry signals end of Dictionary
5262:000 | DONE wsp | em 16 16 |        |             |
5263:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up
5264:000 | DONE ins | em 16 16 | 005f4b | 68          |                 pla                  balance MPU stack, value discarded
5265:000 | DONE wsp | em 16 16 |        |             |
5266:000 | DONE ins | em 16 16 | 005f4c | b4 00       |                 ldy.dx 00            
5267:000 | DONE ins | em 16 16 | 005f4e | e8          |                 inx                  
5268:000 | DONE ins | em 16 16 | 005f4f | e8          |                 inx                  
5269:000 | DONE wsp | em 16 16 |        |             |
5270:000 | DONE lbl | em 16 16 | 005f50 |             | z_words                              
5271:000 | DONE lbl | em 16 16 | 005f50 |             | z_wordsnsizes                        
5271:001 | DONE ins | em 16 16 | 005f50 | 60          |                 rts                  
5272:000 | DONE wsp | em 16 16 |        |             |
5273:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5274:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
5275:000 | DONE cmt | em 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
5276:000 | DONE cmt | em 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
5277:000 | DONE cmt | em 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
5278:000 | DONE lbl | em 16 16 | 005f51 |             | xt_wordsize                          
5279:000 | DONE cmt | em 16 16 |        |             |                 ; We get the beginning address of the code from the word's
5280:000 | DONE cmt | em 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
5281:000 | DONE cmt | em 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
5282:000 | DONE ins | em 16 16 | 005f51 | c8          |                 iny                  
5283:000 | DONE ins | em 16 16 | 005f52 | c8          |                 iny                  
5284:000 | DONE ins | em 16 16 | 005f53 | c8          |                 iny                  
5285:000 | DONE ins | em 16 16 | 005f54 | c8          |                 iny                  nt+4, location of xt
5286:000 | DONE ins | em 16 16 | 005f55 | b9 00 00    |                 lda.y 0000           get xt
5287:000 | DONE ins | em 16 16 | 005f58 | 85 1e       |                 sta.d 00001e         
5288:000 | DONE wsp | em 16 16 |        |             |
5289:000 | DONE ins | em 16 16 | 005f5a | c8          |                 iny                  
5290:000 | DONE ins | em 16 16 | 005f5b | c8          |                 iny                  nt+6, location of z_word
5291:000 | DONE ins | em 16 16 | 005f5c | b9 00 00    |                 lda.y 0000           
5292:000 | DONE wsp | em 16 16 |        |             |
5293:000 | DONE ins | em 16 16 | 005f5f | 38          |                 sec                  (z_word - xt_word)
5294:000 | DONE ins | em 16 16 | 005f60 | e5 1e       |                 sbc.d 00001e         
5295:000 | DONE ins | em 16 16 | 005f62 | a8          |                 tay                  
5296:000 | DONE wsp | em 16 16 |        |             |
5297:000 | DONE lbl | em 16 16 | 005f63 |             | z_wordsize                           
5297:001 | DONE ins | em 16 16 | 005f63 | 60          |                 rts                  
5298:000 | DONE wsp | em 16 16 |        |             |
5299:000 | DONE wsp | em 16 16 |        |             |
5300:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5301:000 | DONE cmt | em 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
5302:000 | DONE cmt | em 16 16 |        |             | ; Logical XOR
5303:000 | DONE lbl | em 16 16 | 005f64 |             | xt_xor                               
5304:000 | DONE ins | em 16 16 | 005f64 | 98          |                 tya                  
5305:000 | DONE ins | em 16 16 | 005f65 | 55 00       |                 eor.dx 00            
5306:000 | DONE ins | em 16 16 | 005f67 | a8          |                 tay                  
5307:000 | DONE wsp | em 16 16 |        |             |
5308:000 | DONE ins | em 16 16 | 005f68 | e8          |                 inx                  
5309:000 | DONE ins | em 16 16 | 005f69 | e8          |                 inx                  
5310:000 | DONE wsp | em 16 16 |        |             |
5311:000 | DONE lbl | em 16 16 | 005f6a |             | z_xor                                
5311:001 | DONE ins | em 16 16 | 005f6a | 60          |                 rts                  
5312:000 | DONE wsp | em 16 16 |        |             |
5313:000 | DONE wsp | em 16 16 |        |             |
5314:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5315:000 | DONE cmt | em 16 16 |        |             | ; MIDDLE INCLUDES
5316:000 | DONE wsp | em 16 16 |        |             |
5317:000 | DONE cmt | em 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
5317:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5317:002 | DONE cmt | em 16 16 |        |             | ; First version: 05. Dec 2016
5317:003 | DONE cmt | em 16 16 |        |             | ; This version: 11. Mar 2017
5317:004 | DONE wsp | em 16 16 |        |             |
5317:005 | DONE cmt | em 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
5317:006 | DONE cmt | em 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
5317:007 | DONE cmt | em 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
5317:008 | DONE cmt | em 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
5317:009 | DONE cmt | em 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
5317:010 | DONE cmt | em 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
5317:011 | DONE cmt | em 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
5317:012 | DONE cmt | em 16 16 |        |             | ; beginning) for the xt.
5317:013 | DONE cmt | em 16 16 |        |             | ;
5317:014 | DONE cmt | em 16 16 |        |             | ; This gives us the following header structure:
5317:015 | DONE cmt | em 16 16 |        |             | ;
5317:016 | DONE cmt | em 16 16 |        |             | ;              8 bit     8 bit
5317:017 | DONE cmt | em 16 16 |        |             | ;               LSB       MSB
5317:018 | DONE cmt | em 16 16 |        |             | ; nt_word ->  +--------+--------+
5317:019 | DONE cmt | em 16 16 |        |             | ;             | Length | Status |
5317:020 | DONE cmt | em 16 16 |        |             | ;          +2 +--------+--------+
5317:021 | DONE cmt | em 16 16 |        |             | ;             | Next Header     | -> nt_next_word
5317:022 | DONE cmt | em 16 16 |        |             | ;          +4 +-----------------+
5317:023 | DONE cmt | em 16 16 |        |             | ;             | Start of Code   | -> xt_word
5317:024 | DONE cmt | em 16 16 |        |             | ;          +6 +-----------------+
5317:025 | DONE cmt | em 16 16 |        |             | ;             | End of Code     | -> z_word
5317:026 | DONE cmt | em 16 16 |        |             | ;          +8 +--------+--------+
5317:027 | DONE cmt | em 16 16 |        |             | ;             | Name   |        |
5317:028 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5317:029 | DONE cmt | em 16 16 |        |             | ;             |        |        |
5317:030 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5317:031 | DONE cmt | em 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
5317:032 | DONE cmt | em 16 16 |        |             | ;          +n +--------+--------+
5317:033 | DONE cmt | em 16 16 |        |             | ;
5317:034 | DONE cmt | em 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
5317:035 | DONE cmt | em 16 16 |        |             | ; definitions.tasm:
5317:036 | DONE cmt | em 16 16 |        |             | ;
5317:037 | DONE cmt | em 16 16 |        |             | ;       CO - Compile Only
5317:038 | DONE cmt | em 16 16 |        |             | ;       IM - Immediate Word
5317:039 | DONE cmt | em 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
5317:040 | DONE wsp | em 16 16 |        |             |
5317:041 | DONE cmt | em 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
5317:042 | DONE cmt | em 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
5317:043 | DONE cmt | em 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
5317:044 | DONE cmt | em 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
5317:045 | DONE cmt | em 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
5317:046 | DONE cmt | em 16 16 |        |             | ; involved.
5317:047 | DONE wsp | em 16 16 |        |             |
5317:048 | DONE lbl | em 16 16 | 005f6b |             | nt_bye                               
5317:049 | DONE dir | em 16 16 | 005f6b | (1 bytes)   |         .byte 03                     length of word string
5317:049 | DONE dir | em 16 16 |        |             |                 03                       --  .
5317:050 | DONE dir | em 16 16 | 005f6c | (1 bytes)   |         .byte { NC }                 status byte
5317:050 | DONE dir | em 16 16 |        |             |                 01                       --  .
5317:051 | DONE dir | em 16 16 | 005f6d | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
5317:051 | DONE dir | em 16 16 |        |             |                 00 00                    --  . .
5317:052 | DONE dir | em 16 16 | 005f6f | (2 bytes)   |         .word 0055be                 start of code, the xt of this word
5317:052 | DONE dir | em 16 16 |        |             |                 be 55                    --  . U
5317:053 | DONE dir | em 16 16 | 005f71 | (2 bytes)   |         .word 0055c5                 end of code (points to RTS)
5317:053 | DONE dir | em 16 16 |        |             |                 c5 55                    --  . U
5317:054 | DONE dir | em 16 16 | 005f73 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
5317:054 | DONE dir | em 16 16 |        |             |                 62 79 65                 --  b y e
5317:055 | DONE wsp | em 16 16 |        |             |
5317:056 | DONE lbl | em 16 16 | 005f76 |             | nt_cold                              
5317:057 | DONE dir | em 16 16 | 005f76 | (2 bytes)   |         .byte 4, 00                  
5317:057 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5317:058 | DONE dir | em 16 16 | 005f78 | (6 bytes)   |         .word nt_bye, xt_cold, 0050f4 
5317:058 | DONE dir | em 16 16 |        |             |                 6b 5f 64 50 f4 50        --  k _ d P . P
5317:059 | DONE dir | em 16 16 | 005f7e | (4 bytes)   |         .byte 63, 6f, 6c, 64         
5317:059 | DONE dir | em 16 16 |        |             |                 63 6f 6c 64              --  c o l d
5317:060 | DONE wsp | em 16 16 |        |             |
5317:061 | DONE lbl | em 16 16 | 005f82 |             | nt_word                              
5317:062 | DONE dir | em 16 16 | 005f82 | (2 bytes)   |         .byte 4, { NC }              
5317:062 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:063 | DONE dir | em 16 16 | 005f84 | (6 bytes)   |         .word nt_cold, xt_word, 005f0c 
5317:063 | DONE dir | em 16 16 |        |             |                 76 5f f4 5e 0c 5f        --  v _ . ^  _
5317:064 | DONE dir | em 16 16 | 005f8a | (4 bytes)   |         .byte 77, 6f, 72, 64         
5317:064 | DONE dir | em 16 16 |        |             |                 77 6f 72 64              --  w o r d
5317:065 | DONE wsp | em 16 16 |        |             |
5317:066 | DONE lbl | em 16 16 | 005f8e |             | nt_find                              
5317:067 | DONE dir | em 16 16 | 005f8e | (2 bytes)   |         .byte 4, { NC }              
5317:067 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:068 | DONE dir | em 16 16 | 005f90 | (6 bytes)   |         .word nt_word, xt_find, 0058ad 
5317:068 | DONE dir | em 16 16 |        |             |                 82 5f 7d 58 ad 58        --  . _ } X . X
5317:069 | DONE dir | em 16 16 | 005f96 | (4 bytes)   |         .byte 66, 69, 6e, 64         
5317:069 | DONE dir | em 16 16 |        |             |                 66 69 6e 64              --  f i n d
5317:070 | DONE wsp | em 16 16 |        |             |
5317:071 | DONE lbl | em 16 16 | 005f9a |             | nt_aligned                           
5317:072 | DONE dir | em 16 16 | 005f9a | (2 bytes)   |         .byte 7, { NC }              
5317:072 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5317:073 | DONE dir | em 16 16 | 005f9c | (6 bytes)   |         .word nt_find, xt_aligned, 00552a 
5317:073 | DONE dir | em 16 16 |        |             |                 8e 5f 29 55 2a 55        --  . _ ) U * U
5317:074 | DONE dir | em 16 16 | 005fa2 | (7 bytes)   |         .byte 61, 6c, 69, 67, 6e, 65, 64 
5317:074 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e 65 64     --  a l i g n e d
5317:075 | DONE wsp | em 16 16 |        |             |
5317:076 | DONE lbl | em 16 16 | 005fa9 |             | nt_align                             
5317:077 | DONE dir | em 16 16 | 005fa9 | (2 bytes)   |         .byte 5, { NC }              
5317:077 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:078 | DONE dir | em 16 16 | 005fab | (6 bytes)   |         .word nt_aligned, xt_align, 005528 
5317:078 | DONE dir | em 16 16 |        |             |                 9a 5f 27 55 28 55        --  . _ ' U ( U
5317:079 | DONE dir | em 16 16 | 005fb1 | (5 bytes)   |         .byte 61, 6c, 69, 67, 6e     
5317:079 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e           --  a l i g n
5317:080 | DONE wsp | em 16 16 |        |             |
5317:081 | DONE lbl | em 16 16 | 005fb6 |             | nt_wordsnsizes                       
5317:082 | DONE dir | em 16 16 | 005fb6 | (2 bytes)   |         .byte 0b, { NC }             
5317:082 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5317:083 | DONE dir | em 16 16 | 005fb8 | (6 bytes)   |         .word nt_align, xt_wordsnsizes, 005f50 
5317:083 | DONE dir | em 16 16 |        |             |                 a9 5f 0d 5f 50 5f        --  . _  _ P _
5317:084 | DONE dir | em 16 16 | 005fbe | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
5317:084 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
5317:084 | DONE dir | em 16 16 |        |             |                 7a 65 73                 --  z e s
5317:085 | DONE wsp | em 16 16 |        |             |
5317:086 | DONE lbl | em 16 16 | 005fc9 |             | nt_words                             
5317:087 | DONE dir | em 16 16 | 005fc9 | (2 bytes)   |         .byte 5, { NC }              
5317:087 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:088 | DONE dir | em 16 16 | 005fcb | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 005f50 
5317:088 | DONE dir | em 16 16 |        |             |                 b6 5f 14 5f 50 5f        --  . _ . _ P _
5317:089 | DONE dir | em 16 16 | 005fd1 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
5317:089 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
5317:090 | DONE wsp | em 16 16 |        |             |
5317:091 | DONE lbl | em 16 16 | 005fd6 |             | nt_dump                              
5317:092 | DONE dir | em 16 16 | 005fd6 | (2 bytes)   |         .byte 4, { NC }              
5317:092 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:093 | DONE dir | em 16 16 | 005fd8 | (6 bytes)   |         .word nt_words, xt_dump, 005811 
5317:093 | DONE dir | em 16 16 |        |             |                 c9 5f f4 57 11 58        --  . _ . W . X
5317:094 | DONE dir | em 16 16 | 005fde | (4 bytes)   |         .byte 64, 75, 6d, 70         
5317:094 | DONE dir | em 16 16 |        |             |                 64 75 6d 70              --  d u m p
5317:095 | DONE wsp | em 16 16 |        |             |
5317:096 | DONE lbl | em 16 16 | 005fe2 |             | nt_unloop                            
5317:097 | DONE dir | em 16 16 | 005fe2 | (2 bytes)   |         .byte 6, { NC + CO }         
5317:097 | DONE dir | em 16 16 |        |             |                 06 05                    --  . .
5317:098 | DONE dir | em 16 16 | 005fe4 | (6 bytes)   |         .word nt_dump, xt_unloop, 005ed8 
5317:098 | DONE dir | em 16 16 |        |             |                 d6 5f d2 5e d8 5e        --  . _ . ^ . ^
5317:099 | DONE dir | em 16 16 | 005fea | (6 bytes)   |         .byte 75, 6e, 6c, 6f, 6f, 70 
5317:099 | DONE dir | em 16 16 |        |             |                 75 6e 6c 6f 6f 70        --  u n l o o p
5317:100 | DONE wsp | em 16 16 |        |             |
5317:101 | DONE lbl | em 16 16 | 005ff0 |             | nt_pploop                            
5317:102 | DONE dir | em 16 16 | 005ff0 | (2 bytes)   |         .byte 7, { NC + CO }         
5317:102 | DONE dir | em 16 16 |        |             |                 07 05                    --  . .
5317:103 | DONE dir | em 16 16 | 005ff2 | (6 bytes)   |         .word nt_unloop, xt_pploop, 0052e8 
5317:103 | DONE dir | em 16 16 |        |             |                 e2 5f da 52 e8 52        --  . _ . R . R
5317:104 | DONE dir | em 16 16 | 005ff8 | (7 bytes)   |         .byte 28, 2b, 6c, 6f, 6f, 70, 29 
5317:104 | DONE dir | em 16 16 |        |             |                 28 2b 6c 6f 6f 70 29     --  ( + l o o p )
5317:105 | DONE wsp | em 16 16 |        |             |
5317:106 | DONE lbl | em 16 16 | 005fff |             | nt_pqdo                              
5317:107 | DONE dir | em 16 16 | 005fff | (2 bytes)   |         .byte 5, { NC + CO }         
5317:107 | DONE dir | em 16 16 |        |             |                 05 05                    --  . .
5317:108 | DONE dir | em 16 16 | 006001 | (6 bytes)   |         .word nt_pploop, xt_pqdo, 005308 
5317:108 | DONE dir | em 16 16 |        |             |                 f0 5f e9 52 08 53        --  . _ . R . S
5317:109 | DONE dir | em 16 16 | 006007 | (5 bytes)   |         .byte 28, 3f, 64, 6f, 29     
5317:109 | DONE dir | em 16 16 |        |             |                 28 3f 64 6f 29           --  ( ? d o )
5317:110 | DONE wsp | em 16 16 |        |             |
5317:111 | DONE lbl | em 16 16 | 00600c |             | nt_pdo                               
5317:112 | DONE dir | em 16 16 | 00600c | (2 bytes)   |         .byte 4, { NC + CO }         
5317:112 | DONE dir | em 16 16 |        |             |                 04 05                    --  . .
5317:113 | DONE dir | em 16 16 | 00600e | (6 bytes)   |         .word nt_pqdo, xt_pdo, 005308 
5317:113 | DONE dir | em 16 16 |        |             |                 ff 5f f6 52 08 53        --  . _ . R . S
5317:114 | DONE dir | em 16 16 | 006014 | (4 bytes)   |         .byte 28, 64, 6f, 29         
5317:114 | DONE dir | em 16 16 |        |             |                 28 64 6f 29              --  ( d o )
5317:115 | DONE wsp | em 16 16 |        |             |
5317:116 | DONE lbl | em 16 16 | 006018 |             | nt_marker                            
5317:117 | DONE dir | em 16 16 | 006018 | (2 bytes)   |         .byte 6, { IM + NC }         
5317:117 | DONE dir | em 16 16 |        |             |                 06 03                    --  . .
5317:118 | DONE dir | em 16 16 | 00601a | (6 bytes)   |         .word nt_pdo, xt_marker, 005a52 
5317:118 | DONE dir | em 16 16 |        |             |                 0c 60 29 5a 52 5a        --   ` ) Z R Z
5317:119 | DONE dir | em 16 16 | 006020 | (6 bytes)   |         .byte 6d, 61, 72, 6b, 65, 72 
5317:119 | DONE dir | em 16 16 |        |             |                 6d 61 72 6b 65 72        --  m a r k e r
5317:120 | DONE wsp | em 16 16 |        |             |
5317:121 | DONE lbl | em 16 16 | 006026 |             | nt_wordsize                          
5317:122 | DONE dir | em 16 16 | 006026 | (2 bytes)   |         .byte 8, { NC }              
5317:122 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5317:123 | DONE dir | em 16 16 | 006028 | (6 bytes)   |         .word nt_marker, xt_wordsize, 005f63 
5317:123 | DONE dir | em 16 16 |        |             |                 18 60 51 5f 63 5f        --  . ` Q _ c _
5317:124 | DONE dir | em 16 16 | 00602e | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
5317:124 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
5317:124 | DONE dir | em 16 16 |        |             |                                          -- 
5317:125 | DONE wsp | em 16 16 |        |             |
5317:126 | DONE lbl | em 16 16 | 006036 |             | nt_pick                              
5317:127 | DONE dir | em 16 16 | 006036 | (2 bytes)   |         .byte 4, { NC }              
5317:127 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:128 | DONE dir | em 16 16 | 006038 | (6 bytes)   |         .word nt_wordsize, xt_pick, 005bdc 
5317:128 | DONE dir | em 16 16 |        |             |                 26 60 cf 5b dc 5b        --  & ` . [ . [
5317:129 | DONE dir | em 16 16 | 00603e | (4 bytes)   |         .byte 70, 69, 63, 6b         
5317:129 | DONE dir | em 16 16 |        |             |                 70 69 63 6b              --  p i c k
5317:130 | DONE wsp | em 16 16 |        |             |
5317:131 | DONE lbl | em 16 16 | 006042 |             | nt_bell                              
5317:132 | DONE dir | em 16 16 | 006042 | (2 bytes)   |         .byte 4, { NC }              
5317:132 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:133 | DONE dir | em 16 16 | 006044 | (6 bytes)   |         .word nt_pick, xt_bell, 005591 
5317:133 | DONE dir | em 16 16 |        |             |                 36 60 8b 55 91 55        --  6 ` . U . U
5317:134 | DONE dir | em 16 16 | 00604a | (4 bytes)   |         .byte 62, 65, 6c, 6c         
5317:134 | DONE dir | em 16 16 |        |             |                 62 65 6c 6c              --  b e l l
5317:135 | DONE wsp | em 16 16 |        |             |
5317:136 | DONE lbl | em 16 16 | 00604e |             | nt_chars                             
5317:137 | DONE dir | em 16 16 | 00604e | (2 bytes)   |         .byte 5, { NC }              
5317:137 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:138 | DONE dir | em 16 16 | 006050 | (6 bytes)   |         .word nt_bell, xt_chars, 00560b 
5317:138 | DONE dir | em 16 16 |        |             |                 42 60 0a 56 0b 56        --  B ` 
 V  V
5317:139 | DONE dir | em 16 16 | 006056 | (5 bytes)   |         .byte 63, 68, 61, 72, 73     
5317:139 | DONE dir | em 16 16 |        |             |                 63 68 61 72 73           --  c h a r s
5317:140 | DONE wsp | em 16 16 |        |             |
5317:141 | DONE lbl | em 16 16 | 00605b |             | nt_cellplus                          
5317:142 | DONE dir | em 16 16 | 00605b | (2 bytes)   |         .byte 5, { NC }              
5317:142 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:143 | DONE dir | em 16 16 | 00605d | (6 bytes)   |         .word nt_chars, xt_cellplus, 0055f1 
5317:143 | DONE dir | em 16 16 |        |             |                 4e 60 ef 55 f1 55        --  N ` . U . U
5317:144 | DONE dir | em 16 16 | 006063 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 2b     
5317:144 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 2b           --  c e l l +
5317:145 | DONE wsp | em 16 16 |        |             |
5317:146 | DONE lbl | em 16 16 | 006068 |             | nt_charplus                          
5317:147 | DONE dir | em 16 16 | 006068 | (2 bytes)   |         .byte 5, { NC }              uses code of 1+
5317:147 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:148 | DONE dir | em 16 16 | 00606a | (6 bytes)   |         .word nt_cellplus, xt_one-plus, 0053c3 
5317:148 | DONE dir | em 16 16 |        |             |                 5b 60 c2 53 c3 53        --  [ ` . S . S
5317:149 | DONE dir | em 16 16 | 006070 | (5 bytes)   |         .byte 63, 68, 61, 72, 2b     
5317:149 | DONE dir | em 16 16 |        |             |                 63 68 61 72 2b           --  c h a r +
5317:150 | DONE wsp | em 16 16 |        |             |
5317:151 | DONE lbl | em 16 16 | 006075 |             | nt_decimal                           
5317:152 | DONE dir | em 16 16 | 006075 | (2 bytes)   |         .byte 7, { NC }              
5317:152 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5317:153 | DONE dir | em 16 16 | 006077 | (6 bytes)   |         .word nt_charplus, xt_decimal, 0057a8 
5317:153 | DONE dir | em 16 16 |        |             |                 68 60 a3 57 a8 57        --  h ` . W . W
5317:154 | DONE dir | em 16 16 | 00607d | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
5317:154 | DONE dir | em 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
5317:155 | DONE wsp | em 16 16 |        |             |
5317:156 | DONE lbl | em 16 16 | 006084 |             | nt_hex                               
5317:157 | DONE dir | em 16 16 | 006084 | (2 bytes)   |         .byte 3, { NC }              
5317:157 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:158 | DONE dir | em 16 16 | 006086 | (6 bytes)   |         .word nt_decimal, xt_hex, 0059af 
5317:158 | DONE dir | em 16 16 |        |             |                 75 60 aa 59 af 59        --  u ` . Y . Y
5317:159 | DONE dir | em 16 16 | 00608c | (3 bytes)   |         .byte 68, 65, 78             
5317:159 | DONE dir | em 16 16 |        |             |                 68 65 78                 --  h e x
5317:160 | DONE wsp | em 16 16 |        |             |
5317:161 | DONE lbl | em 16 16 | 00608f |             | nt_unused                            
5317:162 | DONE dir | em 16 16 | 00608f | (2 bytes)   |         .byte 6, { NC }              
5317:162 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:163 | DONE dir | em 16 16 | 006091 | (6 bytes)   |         .word nt_hex, xt_unused, 005ee4 
5317:163 | DONE dir | em 16 16 |        |             |                 84 60 d9 5e e4 5e        --  . ` . ^ . ^
5317:164 | DONE dir | em 16 16 | 006097 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
5317:164 | DONE dir | em 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
5317:165 | DONE wsp | em 16 16 |        |             |
5317:166 | DONE lbl | em 16 16 | 00609d |             | nt_page                              
5317:167 | DONE dir | em 16 16 | 00609d | (2 bytes)   |         .byte 4, { NC }              
5317:167 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:168 | DONE dir | em 16 16 | 00609f | (6 bytes)   |         .word nt_unused, xt_page, 005b69 
5317:168 | DONE dir | em 16 16 |        |             |                 8f 60 5d 5b 69 5b        --  . ` ] [ i [
5317:169 | DONE dir | em 16 16 | 0060a5 | (4 bytes)   |         .byte 70, 61, 67, 65         
5317:169 | DONE dir | em 16 16 |        |             |                 70 61 67 65              --  p a g e
5317:170 | DONE wsp | em 16 16 |        |             |
5317:171 | DONE lbl | em 16 16 | 0060a9 |             | nt_at-xy                             
5317:172 | DONE dir | em 16 16 | 0060a9 | (2 bytes)   |         .byte 5, { NC }              
5317:172 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:173 | DONE dir | em 16 16 | 0060ab | (6 bytes)   |         .word nt_page, xt_at-xy, 005582 
5317:173 | DONE dir | em 16 16 |        |             |                 9d 60 5b 55 82 55        --  . ` [ U . U
5317:174 | DONE dir | em 16 16 | 0060b1 | (5 bytes)   |         .byte 61, 74, 2d, 78, 79     
5317:174 | DONE dir | em 16 16 |        |             |                 61 74 2d 78 79           --  a t - x y
5317:175 | DONE wsp | em 16 16 |        |             |
5317:176 | DONE lbl | em 16 16 | 0060b6 |             | nt_tworfetch                         
5317:177 | DONE dir | em 16 16 | 0060b6 | (2 bytes)   |         .byte 3, 00                  not natively compiled (yet)
5317:177 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5317:178 | DONE dir | em 16 16 | 0060b8 | (6 bytes)   |         .word nt_at-xy, xt_tworfetch, 00541e 
5317:178 | DONE dir | em 16 16 |        |             |                 a9 60 11 54 1e 54        --  . ` . T . T
5317:179 | DONE dir | em 16 16 | 0060be | (3 bytes)   |         .byte 32, 72, 40             
5317:179 | DONE dir | em 16 16 |        |             |                 32 72 40                 --  2 r @
5317:180 | DONE wsp | em 16 16 |        |             |
5317:181 | DONE lbl | em 16 16 | 0060c1 |             | nt_2variable                         
5317:182 | DONE dir | em 16 16 | 0060c1 | (2 bytes)   |         .byte 9, { NC }              
5317:182 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5317:183 | DONE dir | em 16 16 | 0060c3 | (6 bytes)   |         .word nt_tworfetch, xt_2variable, 005442 
5317:183 | DONE dir | em 16 16 |        |             |                 b6 60 30 54 42 54        --  . ` 0 T B T
5317:184 | DONE dir | em 16 16 | 0060c9 | (9 bytes)   |         .byte 32, 76, 61, 72, 69, 61, 62, 6c, 65 
5317:184 | DONE dir | em 16 16 |        |             |                 32 76 61 72 69 61 62 6c  --  2 v a r i a b l
5317:184 | DONE dir | em 16 16 |        |             |                 65                       --  e
5317:185 | DONE wsp | em 16 16 |        |             |
5317:186 | DONE lbl | em 16 16 | 0060d2 |             | nt_dabs                              
5317:187 | DONE dir | em 16 16 | 0060d2 | (2 bytes)   |         .byte 4, { NC }              
5317:187 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:188 | DONE dir | em 16 16 | 0060d4 | (6 bytes)   |         .word nt_2variable, xt_dabs, 0057a2 
5317:188 | DONE dir | em 16 16 |        |             |                 c1 60 9c 57 a2 57        --  . ` . W . W
5317:189 | DONE dir | em 16 16 | 0060da | (4 bytes)   |         .byte 64, 61, 62, 73         
5317:189 | DONE dir | em 16 16 |        |             |                 64 61 62 73              --  d a b s
5317:190 | DONE wsp | em 16 16 |        |             |
5317:191 | DONE lbl | em 16 16 | 0060de |             | nt_dnegate                           
5317:192 | DONE dir | em 16 16 | 0060de | (2 bytes)   |         .byte 7, { NC }              
5317:192 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5317:193 | DONE dir | em 16 16 | 0060e0 | (6 bytes)   |         .word nt_dabs, xt_dnegate, 0057cb 
5317:193 | DONE dir | em 16 16 |        |             |                 d2 60 b8 57 cb 57        --  . ` . W . W
5317:194 | DONE dir | em 16 16 | 0060e6 | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
5317:194 | DONE dir | em 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
5317:195 | DONE wsp | em 16 16 |        |             |
5317:196 | DONE lbl | em 16 16 | 0060ed |             | nt_dtos                              
5317:197 | DONE dir | em 16 16 | 0060ed | (2 bytes)   |         .byte 3, { NC }              
5317:197 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:198 | DONE dir | em 16 16 | 0060ef | (6 bytes)   |         .word nt_dnegate, xt_dtos, 00579b 
5317:198 | DONE dir | em 16 16 |        |             |                 de 60 97 57 9b 57        --  . ` . W . W
5317:199 | DONE dir | em 16 16 | 0060f5 | (3 bytes)   |         .byte 64, 3e, 73             
5317:199 | DONE dir | em 16 16 |        |             |                 64 3e 73                 --  d > s
5317:200 | DONE wsp | em 16 16 |        |             |
5317:201 | DONE lbl | em 16 16 | 0060f8 |             | nt_stod                              
5317:202 | DONE dir | em 16 16 | 0060f8 | (2 bytes)   |         .byte 3, { NC }              
5317:202 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:203 | DONE dir | em 16 16 | 0060fa | (6 bytes)   |         .word nt_dtos, xt_stod, 005cbb 
5317:203 | DONE dir | em 16 16 |        |             |                 ed 60 ac 5c bb 5c        --  . ` . \ . \
5317:204 | DONE dir | em 16 16 | 006100 | (3 bytes)   |         .byte 73, 3e, 64             
5317:204 | DONE dir | em 16 16 |        |             |                 73 3e 64                 --  s > d
5317:205 | DONE wsp | em 16 16 |        |             |
5317:206 | DONE lbl | em 16 16 | 006103 |             | nt_twofromr                          
5317:207 | DONE dir | em 16 16 | 006103 | (2 bytes)   |         .byte 3, { CO }              
5317:207 | DONE dir | em 16 16 |        |             |                 03 04                    --  . .
5317:208 | DONE dir | em 16 16 | 006105 | (6 bytes)   |         .word nt_stod, xt_twofromr, 005410 
5317:208 | DONE dir | em 16 16 |        |             |                 f8 60 00 54 10 54        --  . ` . T . T
5317:209 | DONE dir | em 16 16 | 00610b | (3 bytes)   |         .byte 32, 72, 3e             
5317:209 | DONE dir | em 16 16 |        |             |                 32 72 3e                 --  2 r >
5317:210 | DONE wsp | em 16 16 |        |             |
5317:211 | DONE lbl | em 16 16 | 00610e |             | nt_twotor                            
5317:212 | DONE dir | em 16 16 | 00610e | (2 bytes)   |         .byte 3, { CO }              
5317:212 | DONE dir | em 16 16 |        |             |                 03 04                    --  . .
5317:213 | DONE dir | em 16 16 | 006110 | (6 bytes)   |         .word nt_twofromr, xt_twotor, 0053e0 
5317:213 | DONE dir | em 16 16 |        |             |                 03 61 d0 53 e0 53        --  . a . S . S
5317:214 | DONE dir | em 16 16 | 006116 | (3 bytes)   |         .byte 32, 3e, 72             
5317:214 | DONE dir | em 16 16 |        |             |                 32 3e 72                 --  2 > r
5317:215 | DONE wsp | em 16 16 |        |             |
5317:216 | DONE lbl | em 16 16 | 006119 |             | nt_dminus                            
5317:217 | DONE dir | em 16 16 | 006119 | (2 bytes)   |         .byte 2, { NC }              
5317:217 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:218 | DONE dir | em 16 16 | 00611b | (6 bytes)   |         .word nt_twotor, xt_dminus, 005796 
5317:218 | DONE dir | em 16 16 |        |             |                 0e 61 82 57 96 57        --  . a . W . W
5317:219 | DONE dir | em 16 16 | 006121 | (2 bytes)   |         .byte 64, 2d                 
5317:219 | DONE dir | em 16 16 |        |             |                 64 2d                    --  d -
5317:220 | DONE wsp | em 16 16 |        |             |
5317:221 | DONE lbl | em 16 16 | 006123 |             | nt_dplus                             
5317:222 | DONE dir | em 16 16 | 006123 | (2 bytes)   |         .byte 2, { NC }              
5317:222 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:223 | DONE dir | em 16 16 | 006125 | (6 bytes)   |         .word nt_dminus, xt_dplus, 005781 
5317:223 | DONE dir | em 16 16 |        |             |                 19 61 70 57 81 57        --  . a p W . W
5317:224 | DONE dir | em 16 16 | 00612b | (2 bytes)   |         .byte 64, 2b                 
5317:224 | DONE dir | em 16 16 |        |             |                 64 2b                    --  d +
5317:225 | DONE wsp | em 16 16 |        |             |
5317:226 | DONE lbl | em 16 16 | 00612d |             | nt_fmmod                             
5317:227 | DONE dir | em 16 16 | 00612d | (2 bytes)   |         .byte 6, { NC }              
5317:227 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:228 | DONE dir | em 16 16 | 00612f | (6 bytes)   |         .word nt_dplus, xt_fmmod, 005958 
5317:228 | DONE dir | em 16 16 |        |             |                 23 61 05 59 58 59        --  # a . Y X Y
5317:229 | DONE dir | em 16 16 | 006135 | (6 bytes)   |         .byte 66, 6d, 2f, 6d, 6f, 64 
5317:229 | DONE dir | em 16 16 |        |             |                 66 6d 2f 6d 6f 64        --  f m / m o d
5317:230 | DONE wsp | em 16 16 |        |             |
5317:231 | DONE lbl | em 16 16 | 00613b |             | nt_smrem                             
5317:232 | DONE dir | em 16 16 | 00613b | (2 bytes)   |         .byte 6, { NC }              
5317:232 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:233 | DONE dir | em 16 16 | 00613d | (6 bytes)   |         .word nt_fmmod, xt_smrem, 005d84 
5317:233 | DONE dir | em 16 16 |        |             |                 2d 61 2b 5d 84 5d        --  - a + ] . ]
5317:234 | DONE dir | em 16 16 | 006143 | (6 bytes)   |         .byte 73, 6d, 2f, 72, 65, 6d 
5317:234 | DONE dir | em 16 16 |        |             |                 73 6d 2f 72 65 6d        --  s m / r e m
5317:235 | DONE wsp | em 16 16 |        |             |
5317:236 | DONE lbl | em 16 16 | 006149 |             | nt_udmod                             
5317:237 | DONE dir | em 16 16 | 006149 | (2 bytes)   |         .byte 6, { NC }              
5317:237 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:238 | DONE dir | em 16 16 | 00614b | (6 bytes)   |         .word nt_smrem, xt_udmod, 005e22 
5317:238 | DONE dir | em 16 16 |        |             |                 3b 61 07 5e 22 5e        --  ; a . ^ " ^
5317:239 | DONE dir | em 16 16 | 006151 | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
5317:239 | DONE dir | em 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
5317:240 | DONE wsp | em 16 16 |        |             |
5317:241 | DONE lbl | em 16 16 | 006157 |             | nt_ummod                             
5317:242 | DONE dir | em 16 16 | 006157 | (2 bytes)   |         .byte 6, { NC }              
5317:242 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:243 | DONE dir | em 16 16 | 006159 | (6 bytes)   |         .word nt_udmod, xt_ummod, 005ed1 
5317:243 | DONE dir | em 16 16 |        |             |                 49 61 81 5e d1 5e        --  I a . ^ . ^
5317:244 | DONE dir | em 16 16 | 00615f | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
5317:244 | DONE dir | em 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
5317:245 | DONE wsp | em 16 16 |        |             |
5317:246 | DONE lbl | em 16 16 | 006165 |             | nt_star                              
5317:247 | DONE dir | em 16 16 | 006165 | (2 bytes)   |         .byte 1, { NC }              
5317:247 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:248 | DONE dir | em 16 16 | 006167 | (6 bytes)   |         .word nt_ummod, xt_star, 005db3 
5317:248 | DONE dir | em 16 16 |        |             |                 57 61 ac 5d b3 5d        --  W a . ] . ]
5317:249 | DONE dir | em 16 16 | 00616d | (1 bytes)   |         .byte 2a                     
5317:249 | DONE dir | em 16 16 |        |             |                 2a                       --  *
5317:250 | DONE wsp | em 16 16 |        |             |
5317:251 | DONE lbl | em 16 16 | 00616e |             | nt_mstar                             
5317:252 | DONE dir | em 16 16 | 00616e | (2 bytes)   |         .byte 2, { NC }              
5317:252 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:253 | DONE dir | em 16 16 | 006170 | (6 bytes)   |         .word nt_star, xt_mstar, 005a28 
5317:253 | DONE dir | em 16 16 |        |             |                 65 61 09 5a 28 5a        --  e a 	 Z ( Z
5317:254 | DONE dir | em 16 16 | 006176 | (2 bytes)   |         .byte 6d, 2a                 
5317:254 | DONE dir | em 16 16 |        |             |                 6d 2a                    --  m *
5317:255 | DONE wsp | em 16 16 |        |             |
5317:256 | DONE lbl | em 16 16 | 006178 |             | nt_umstar                            
5317:257 | DONE dir | em 16 16 | 006178 | (2 bytes)   |         .byte 3, { NC }              
5317:257 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:258 | DONE dir | em 16 16 | 00617a | (6 bytes)   |         .word nt_mstar, xt_umstar, 005e80 
5317:258 | DONE dir | em 16 16 |        |             |                 6e 61 22 5e 80 5e        --  n a " ^ . ^
5317:259 | DONE dir | em 16 16 | 006180 | (3 bytes)   |         .byte 75, 6d, 2a             
5317:259 | DONE dir | em 16 16 |        |             |                 75 6d 2a                 --  u m *
5317:260 | DONE wsp | em 16 16 |        |             |
5317:261 | DONE lbl | em 16 16 | 006183 |             | nt_cmoveup                           
5317:262 | DONE dir | em 16 16 | 006183 | (2 bytes)   |         .byte 6, { NC }              
5317:262 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:263 | DONE dir | em 16 16 | 006185 | (6 bytes)   |         .word nt_umstar, xt_cmoveup, 005647 
5317:263 | DONE dir | em 16 16 |        |             |                 78 61 2f 56 47 56        --  x a / V G V
5317:264 | DONE dir | em 16 16 | 00618b | (6 bytes)   |         .byte 63, 6d, 6f, 76, 65, 3e 
5317:264 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65 3e        --  c m o v e >
5317:265 | DONE wsp | em 16 16 |        |             |
5317:266 | DONE lbl | em 16 16 | 006191 |             | nt_cmove                             
5317:267 | DONE dir | em 16 16 | 006191 | (2 bytes)   |         .byte 5, { NC }              
5317:267 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:268 | DONE dir | em 16 16 | 006193 | (6 bytes)   |         .word nt_cmoveup, xt_cmove, 00562e 
5317:268 | DONE dir | em 16 16 |        |             |                 83 61 0c 56 2e 56        --  . a  V . V
5317:269 | DONE dir | em 16 16 | 006199 | (5 bytes)   |         .byte 63, 6d, 6f, 76, 65     
5317:269 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65           --  c m o v e
5317:270 | DONE wsp | em 16 16 |        |             |
5317:271 | DONE lbl | em 16 16 | 00619e |             | nt_count                             
5317:272 | DONE dir | em 16 16 | 00619e | (2 bytes)   |         .byte 5, { NC }              
5317:272 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:273 | DONE dir | em 16 16 | 0061a0 | (6 bytes)   |         .word nt_cmove, xt_count, 0056a3 
5317:273 | DONE dir | em 16 16 |        |             |                 91 61 96 56 a3 56        --  . a . V . V
5317:274 | DONE dir | em 16 16 | 0061a6 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
5317:274 | DONE dir | em 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
5317:275 | DONE wsp | em 16 16 |        |             |
5317:276 | DONE lbl | em 16 16 | 0061ab |             | nt_abortq                            
5317:277 | DONE dir | em 16 16 | 0061ab | (2 bytes)   |         .byte 6, { CO + IM }         
5317:277 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5317:278 | DONE dir | em 16 16 | 0061ad | (6 bytes)   |         .word nt_count, xt_abortq, 00547b 
5317:278 | DONE dir | em 16 16 |        |             |                 9e 61 5f 54 7b 54        --  . a _ T { T
5317:279 | DONE dir | em 16 16 | 0061b3 | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
5317:279 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
5317:280 | DONE wsp | em 16 16 |        |             |
5317:281 | DONE lbl | em 16 16 | 0061b9 |             | nt_abort                             
5317:282 | DONE dir | em 16 16 | 0061b9 | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
5317:282 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5317:283 | DONE dir | em 16 16 | 0061bb | (6 bytes)   |         .word nt_abortq, xt_abort, 0050f4 
5317:283 | DONE dir | em 16 16 |        |             |                 ab 61 ad 50 f4 50        --  . a . P . P
5317:284 | DONE dir | em 16 16 | 0061c1 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
5317:284 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
5317:285 | DONE wsp | em 16 16 |        |             |
5317:286 | DONE lbl | em 16 16 | 0061c6 |             | nt_parse                             
5317:287 | DONE dir | em 16 16 | 0061c6 | (2 bytes)   |         .byte 5, 00                  
5317:287 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5317:288 | DONE dir | em 16 16 | 0061c8 | (6 bytes)   |         .word nt_abort, xt_parse, 005bce 
5317:288 | DONE dir | em 16 16 |        |             |                 b9 61 9c 5b ce 5b        --  . a . [ . [
5317:289 | DONE dir | em 16 16 | 0061ce | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
5317:289 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
5317:290 | DONE wsp | em 16 16 |        |             |
5317:291 | DONE lbl | em 16 16 | 0061d3 |             | nt_quit                              
5317:292 | DONE dir | em 16 16 | 0061d3 | (2 bytes)   |         .byte 4, 00                  
5317:292 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5317:293 | DONE dir | em 16 16 | 0061d5 | (6 bytes)   |         .word nt_parse, xt_quit, 0050f4 
5317:293 | DONE dir | em 16 16 |        |             |                 c6 61 b5 50 f4 50        --  . a . P . P
5317:294 | DONE dir | em 16 16 | 0061db | (4 bytes)   |         .byte 71, 75, 69, 74         
5317:294 | DONE dir | em 16 16 |        |             |                 71 75 69 74              --  q u i t
5317:295 | DONE wsp | em 16 16 |        |             |
5317:296 | DONE lbl | em 16 16 | 0061df |             | nt_question                          
5317:297 | DONE dir | em 16 16 | 0061df | (2 bytes)   |         .byte 1, { NC }              
5317:297 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:298 | DONE dir | em 16 16 | 0061e1 | (6 bytes)   |         .word nt_quit, xt_question, 0052c0 
5317:298 | DONE dir | em 16 16 |        |             |                 d3 61 ba 52 c0 52        --  . a . R . R
5317:299 | DONE dir | em 16 16 | 0061e7 | (1 bytes)   |         .byte 3f                     
5317:299 | DONE dir | em 16 16 |        |             |                 3f                       --  ?
5317:300 | DONE wsp | em 16 16 |        |             |
5317:301 | DONE lbl | em 16 16 | 0061e8 |             | nt_int-name                          
5317:302 | DONE dir | em 16 16 | 0061e8 | (2 bytes)   |         .byte 8, { NC }              
5317:302 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5317:303 | DONE dir | em 16 16 | 0061ea | (6 bytes)   |         .word nt_question, xt_int-name, 00599c 
5317:303 | DONE dir | em 16 16 |        |             |                 df 61 79 59 9c 59        --  . a y Y . Y
5317:304 | DONE dir | em 16 16 | 0061f0 | (8 bytes)   |         .byte 69, 6e, 74, 3e, 6e, 61, 6d, 65 
5317:304 | DONE dir | em 16 16 |        |             |                 69 6e 74 3e 6e 61 6d 65  --  i n t > n a m e
5317:304 | DONE dir | em 16 16 |        |             |                                          -- 
5317:305 | DONE wsp | em 16 16 |        |             |
5317:306 | DONE lbl | em 16 16 | 0061f8 |             | nt_name-int                          
5317:307 | DONE dir | em 16 16 | 0061f8 | (2 bytes)   |         .byte 8, { NC }              
5317:307 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5317:308 | DONE dir | em 16 16 | 0061fa | (6 bytes)   |         .word nt_int-name, xt_name-int, 005a92 
5317:308 | DONE dir | em 16 16 |        |             |                 e8 61 8a 5a 92 5a        --  . a . Z . Z
5317:309 | DONE dir | em 16 16 | 006200 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
5317:309 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
5317:309 | DONE dir | em 16 16 |        |             |                                          -- 
5317:310 | DONE wsp | em 16 16 |        |             |
5317:311 | DONE lbl | em 16 16 | 006208 |             | nt_cr                                
5317:312 | DONE dir | em 16 16 | 006208 | (2 bytes)   |         .byte 2, { NC }              
5317:312 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:313 | DONE dir | em 16 16 | 00620a | (6 bytes)   |         .word nt_name-int, xt_cr, 0056aa 
5317:313 | DONE dir | em 16 16 |        |             |                 f8 61 a4 56 aa 56        --  . a . V . V
5317:314 | DONE dir | em 16 16 | 006210 | (2 bytes)   |         .byte 63, 72                 
5317:314 | DONE dir | em 16 16 |        |             |                 63 72                    --  c r
5317:315 | DONE wsp | em 16 16 |        |             |
5317:316 | DONE lbl | em 16 16 | 006212 |             | nt_fill                              
5317:317 | DONE dir | em 16 16 | 006212 | (2 bytes)   |         .byte 4, { NC }              
5317:317 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:318 | DONE dir | em 16 16 | 006214 | (6 bytes)   |         .word nt_cr, xt_fill, 005840 
5317:318 | DONE dir | em 16 16 |        |             |                 08 62 26 58 40 58        --  . b & X @ X
5317:319 | DONE dir | em 16 16 | 00621a | (4 bytes)   |         .byte 66, 69, 6c, 6c         
5317:319 | DONE dir | em 16 16 |        |             |                 66 69 6c 6c              --  f i l l
5317:320 | DONE wsp | em 16 16 |        |             |
5317:321 | DONE lbl | em 16 16 | 00621e |             | nt_erase                             
5317:322 | DONE dir | em 16 16 | 00621e | (2 bytes)   |         .byte 5, { NC }              
5317:322 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:323 | DONE dir | em 16 16 | 006220 | (6 bytes)   |         .word nt_fill, xt_erase, 005840 
5317:323 | DONE dir | em 16 16 |        |             |                 12 62 1f 58 40 58        --  . b . X @ X
5317:324 | DONE dir | em 16 16 | 006226 | (5 bytes)   |         .byte 65, 72, 61, 73, 65     
5317:324 | DONE dir | em 16 16 |        |             |                 65 72 61 73 65           --  e r a s e
5317:325 | DONE wsp | em 16 16 |        |             |
5317:326 | DONE lbl | em 16 16 | 00622b |             | nt_numbermore                        
5317:327 | DONE dir | em 16 16 | 00622b | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
5317:327 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:328 | DONE dir | em 16 16 | 00622d | (6 bytes)   |         .word nt_erase, xt_numbermore, 0052b0 
5317:328 | DONE dir | em 16 16 |        |             |                 1e 62 a2 52 b0 52        --  . b . R . R
5317:329 | DONE dir | em 16 16 | 006233 | (2 bytes)   |         .byte 23, 3e                 
5317:329 | DONE dir | em 16 16 |        |             |                 23 3e                    --  # >
5317:330 | DONE wsp | em 16 16 |        |             |
5317:331 | DONE lbl | em 16 16 | 006235 |             | nt_hold                              
5317:332 | DONE dir | em 16 16 | 006235 | (2 bytes)   |         .byte 4, { NC }              
5317:332 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:333 | DONE dir | em 16 16 | 006237 | (6 bytes)   |         .word nt_numbermore, xt_hold, 0059bd 
5317:333 | DONE dir | em 16 16 |        |             |                 2b 62 b0 59 bd 59        --  + b . Y . Y
5317:334 | DONE dir | em 16 16 | 00623d | (4 bytes)   |         .byte 68, 6f, 6c, 64         
5317:334 | DONE dir | em 16 16 |        |             |                 68 6f 6c 64              --  h o l d
5317:335 | DONE wsp | em 16 16 |        |             |
5317:336 | DONE lbl | em 16 16 | 006241 |             | nt_hashs                             
5317:337 | DONE dir | em 16 16 | 006241 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
5317:337 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:338 | DONE dir | em 16 16 | 006243 | (6 bytes)   |         .word nt_hold, xt_hashs, 0052b9 
5317:338 | DONE dir | em 16 16 |        |             |                 35 62 b1 52 b9 52        --  5 b . R . R
5317:339 | DONE dir | em 16 16 | 006249 | (2 bytes)   |         .byte 23, 73                 
5317:339 | DONE dir | em 16 16 |        |             |                 23 73                    --  # s
5317:340 | DONE wsp | em 16 16 |        |             |
5317:341 | DONE lbl | em 16 16 | 00624b |             | nt_sign                              
5317:342 | DONE dir | em 16 16 | 00624b | (2 bytes)   |         .byte 4, { NC }              
5317:342 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:343 | DONE dir | em 16 16 | 00624d | (6 bytes)   |         .word nt_hashs, xt_sign, 005cc9 
5317:343 | DONE dir | em 16 16 |        |             |                 41 62 bc 5c c9 5c        --  A b . \ . \
5317:344 | DONE dir | em 16 16 | 006253 | (4 bytes)   |         .byte 73, 69, 67, 6e         
5317:344 | DONE dir | em 16 16 |        |             |                 73 69 67 6e              --  s i g n
5317:345 | DONE wsp | em 16 16 |        |             |
5317:346 | DONE lbl | em 16 16 | 006257 |             | nt_hash                              
5317:347 | DONE dir | em 16 16 | 006257 | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
5317:347 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:348 | DONE dir | em 16 16 | 006259 | (6 bytes)   |         .word nt_sign, xt_hash, 0052a1 
5317:348 | DONE dir | em 16 16 |        |             |                 4b 62 87 52 a1 52        --  K b . R . R
5317:349 | DONE dir | em 16 16 | 00625f | (1 bytes)   |         .byte 23                     
5317:349 | DONE dir | em 16 16 |        |             |                 23                       --  #
5317:350 | DONE wsp | em 16 16 |        |             |
5317:351 | DONE lbl | em 16 16 | 006260 |             | nt_lessnumber                        
5317:352 | DONE dir | em 16 16 | 006260 | (2 bytes)   |         .byte 2, { NC }              
5317:352 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:353 | DONE dir | em 16 16 | 006262 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 00511d 
5317:353 | DONE dir | em 16 16 |        |             |                 57 62 14 51 1d 51        --  W b . Q . Q
5317:354 | DONE dir | em 16 16 | 006268 | (2 bytes)   |         .byte 3c, 23                 
5317:354 | DONE dir | em 16 16 |        |             |                 3c 23                    --  < #
5317:355 | DONE wsp | em 16 16 |        |             |
5317:356 | DONE lbl | em 16 16 | 00626a |             | nt_bl                                
5317:357 | DONE dir | em 16 16 | 00626a | (2 bytes)   |         .byte 2, { NC }              
5317:357 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:358 | DONE dir | em 16 16 | 00626c | (6 bytes)   |         .word nt_lessnumber, xt_bl, 00559f 
5317:358 | DONE dir | em 16 16 |        |             |                 60 62 98 55 9f 55        --  ` b . U . U
5317:359 | DONE dir | em 16 16 | 006272 | (2 bytes)   |         .byte 62, 6c                 
5317:359 | DONE dir | em 16 16 |        |             |                 62 6c                    --  b l
5317:360 | DONE wsp | em 16 16 |        |             |
5317:361 | DONE lbl | em 16 16 | 006274 |             | nt_spaces                            
5317:362 | DONE dir | em 16 16 | 006274 | (2 bytes)   |         .byte 6, { NC }              
5317:362 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:363 | DONE dir | em 16 16 | 006276 | (6 bytes)   |         .word nt_bl, xt_spaces, 005dab 
5317:363 | DONE dir | em 16 16 |        |             |                 6a 62 9f 5d ab 5d        --  j b . ] . ]
5317:364 | DONE dir | em 16 16 | 00627c | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
5317:364 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
5317:365 | DONE wsp | em 16 16 |        |             |
5317:366 | DONE lbl | em 16 16 | 006282 |             | nt_space                             
5317:367 | DONE dir | em 16 16 | 006282 | (2 bytes)   |         .byte 5, { NC }              
5317:367 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:368 | DONE dir | em 16 16 | 006284 | (6 bytes)   |         .word nt_spaces, xt_space, 005d9f 
5317:368 | DONE dir | em 16 16 |        |             |                 74 62 99 5d 9f 5d        --  t b . ] . ]
5317:369 | DONE dir | em 16 16 | 00628a | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
5317:369 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
5317:370 | DONE wsp | em 16 16 |        |             |
5317:371 | DONE lbl | em 16 16 | 00628f |             | nt_dots                              
5317:372 | DONE dir | em 16 16 | 00628f | (2 bytes)   |         .byte 2, { NC }              
5317:372 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:373 | DONE dir | em 16 16 | 006291 | (6 bytes)   |         .word nt_space, xt_dots, 00523f 
5317:373 | DONE dir | em 16 16 |        |             |                 82 62 08 52 3f 52        --  . b . R ? R
5317:374 | DONE dir | em 16 16 | 006297 | (2 bytes)   |         .byte 2e, 73                 
5317:374 | DONE dir | em 16 16 |        |             |                 2e 73                    --  . s
5317:375 | DONE wsp | em 16 16 |        |             |
5317:376 | DONE lbl | em 16 16 | 006299 |             | nt_type                              
5317:377 | DONE dir | em 16 16 | 006299 | (2 bytes)   |         .byte 4, { NC }              
5317:377 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:378 | DONE dir | em 16 16 | 00629b | (6 bytes)   |         .word nt_dots, xt_type, 005dfd 
5317:378 | DONE dir | em 16 16 |        |             |                 8f 62 dd 5d fd 5d        --  . b . ] . ]
5317:379 | DONE dir | em 16 16 | 0062a1 | (4 bytes)   |         .byte 74, 79, 70, 65         
5317:379 | DONE dir | em 16 16 |        |             |                 74 79 70 65              --  t y p e
5317:380 | DONE wsp | em 16 16 |        |             |
5317:381 | DONE lbl | em 16 16 | 0062a5 |             | nt_udot                              
5317:382 | DONE dir | em 16 16 | 0062a5 | (2 bytes)   |         .byte 2, { NC }              
5317:382 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:383 | DONE dir | em 16 16 | 0062a7 | (6 bytes)   |         .word nt_type, xt_udot, 005e07 
5317:383 | DONE dir | em 16 16 |        |             |                 99 62 fe 5d 07 5e        --  . b . ] . ^
5317:384 | DONE dir | em 16 16 | 0062ad | (2 bytes)   |         .byte 75, 2e                 
5317:384 | DONE dir | em 16 16 |        |             |                 75 2e                    --  u .
5317:385 | DONE wsp | em 16 16 |        |             |
5317:386 | DONE lbl | em 16 16 | 0062af |             | nt_emit                              
5317:387 | DONE dir | em 16 16 | 0062af | (2 bytes)   |         .byte 4, { NC }              
5317:387 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:388 | DONE dir | em 16 16 | 0062b1 | (6 bytes)   |         .word nt_udot, xt_emit, 00581f 
5317:388 | DONE dir | em 16 16 |        |             |                 a5 62 17 58 1f 58        --  . b . X . X
5317:389 | DONE dir | em 16 16 | 0062b7 | (4 bytes)   |         .byte 65, 6d, 69, 74         
5317:389 | DONE dir | em 16 16 |        |             |                 65 6d 69 74              --  e m i t
5317:390 | DONE wsp | em 16 16 |        |             |
5317:391 | DONE lbl | em 16 16 | 0062bb |             | nt_dot                               
5317:392 | DONE dir | em 16 16 | 0062bb | (2 bytes)   |         .byte 1, { NC }              
5317:392 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:393 | DONE dir | em 16 16 | 0062bd | (6 bytes)   |         .word nt_emit, xt_dot, 0051f3 
5317:393 | DONE dir | em 16 16 |        |             |                 af 62 d5 51 f3 51        --  . b . Q . Q
5317:394 | DONE dir | em 16 16 | 0062c3 | (1 bytes)   |         .byte 2e                     
5317:394 | DONE dir | em 16 16 |        |             |                 2e                       --  .
5317:395 | DONE wsp | em 16 16 |        |             |
5317:396 | DONE lbl | em 16 16 | 0062c4 |             | nt_pad                               
5317:397 | DONE dir | em 16 16 | 0062c4 | (2 bytes)   |         .byte 3, { NC }              
5317:397 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:398 | DONE dir | em 16 16 | 0062c6 | (6 bytes)   |         .word nt_dot, xt_pad, 005b5c 
5317:398 | DONE dir | em 16 16 |        |             |                 bb 62 51 5b 5c 5b        --  . b Q [ \ [
5317:399 | DONE dir | em 16 16 | 0062cc | (3 bytes)   |         .byte 70, 61, 64             
5317:399 | DONE dir | em 16 16 |        |             |                 70 61 64                 --  p a d
5317:400 | DONE wsp | em 16 16 |        |             |
5317:401 | DONE lbl | em 16 16 | 0062cf |             | nt_base                              
5317:402 | DONE dir | em 16 16 | 0062cf | (2 bytes)   |         .byte 4, { NC }              
5317:402 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:403 | DONE dir | em 16 16 | 0062d1 | (6 bytes)   |         .word nt_pad, xt_base, 00558a 
5317:403 | DONE dir | em 16 16 |        |             |                 c4 62 83 55 8a 55        --  . b . U . U
5317:404 | DONE dir | em 16 16 | 0062d7 | (4 bytes)   |         .byte 62, 61, 73, 65         
5317:404 | DONE dir | em 16 16 |        |             |                 62 61 73 65              --  b a s e
5317:405 | DONE wsp | em 16 16 |        |             |
5317:406 | DONE lbl | em 16 16 | 0062db |             | nt_input                             
5317:407 | DONE dir | em 16 16 | 0062db | (2 bytes)   |         .byte 5, { NC }              
5317:407 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:408 | DONE dir | em 16 16 | 0062dd | (6 bytes)   |         .word nt_base, xt_input, 005978 
5317:408 | DONE dir | em 16 16 |        |             |                 cf 62 71 59 78 59        --  . b q Y x Y
5317:409 | DONE dir | em 16 16 | 0062e3 | (5 bytes)   |         .byte 69, 6e, 70, 75, 74     
5317:409 | DONE dir | em 16 16 |        |             |                 69 6e 70 75 74           --  i n p u t
5317:410 | DONE wsp | em 16 16 |        |             |
5317:411 | DONE lbl | em 16 16 | 0062e8 |             | nt_output                            
5317:412 | DONE dir | em 16 16 | 0062e8 | (2 bytes)   |         .byte 6, { NC }              
5317:412 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:413 | DONE dir | em 16 16 | 0062ea | (6 bytes)   |         .word nt_input, xt_output, 005b49 
5317:413 | DONE dir | em 16 16 |        |             |                 db 62 42 5b 49 5b        --  . b B [ I [
5317:414 | DONE dir | em 16 16 | 0062f0 | (6 bytes)   |         .byte 6f, 75, 74, 70, 75, 74 
5317:414 | DONE dir | em 16 16 |        |             |                 6f 75 74 70 75 74        --  o u t p u t
5317:415 | DONE wsp | em 16 16 |        |             |
5317:416 | DONE lbl | em 16 16 | 0062f6 |             | nt_evaluate                          
5317:417 | DONE dir | em 16 16 | 0062f6 | (2 bytes)   |         .byte 8, { NC }              
5317:417 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5317:418 | DONE dir | em 16 16 | 0062f8 | (6 bytes)   |         .word nt_output, xt_evaluate, 00586f 
5317:418 | DONE dir | em 16 16 |        |             |                 e8 62 41 58 6f 58        --  . b A X o X
5317:419 | DONE dir | em 16 16 | 0062fe | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
5317:419 | DONE dir | em 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
5317:419 | DONE dir | em 16 16 |        |             |                                          -- 
5317:420 | DONE wsp | em 16 16 |        |             |
5317:421 | DONE lbl | em 16 16 | 006306 |             | nt_cells                             
5317:422 | DONE dir | em 16 16 | 006306 | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
5317:422 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:423 | DONE dir | em 16 16 | 006308 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 0053cf 
5317:423 | DONE dir | em 16 16 |        |             |                 f6 62 cc 53 cf 53        --  . b . S . S
5317:424 | DONE dir | em 16 16 | 00630e | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
5317:424 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
5317:425 | DONE wsp | em 16 16 |        |             |
5317:426 | DONE lbl | em 16 16 | 006313 |             | nt_dotquote                          
5317:427 | DONE dir | em 16 16 | 006313 | (2 bytes)   |         .byte 2, { CO + NC + IM }    
5317:427 | DONE dir | em 16 16 |        |             |                 02 07                    --  . .
5317:428 | DONE dir | em 16 16 | 006315 | (6 bytes)   |         .word nt_cells, xt_dotquote, 005208 
5317:428 | DONE dir | em 16 16 |        |             |                 06 63 f4 51 08 52        --  . c . Q . R
5317:429 | DONE dir | em 16 16 | 00631b | (2 bytes)   |         .byte 2e, &34                
5317:429 | DONE dir | em 16 16 |        |             |                 2e 22                    --  . "
5317:430 | DONE wsp | em 16 16 |        |             |
5317:431 | DONE lbl | em 16 16 | 00631d |             | nt_squote                            
5317:432 | DONE dir | em 16 16 | 00631d | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
5317:432 | DONE dir | em 16 16 |        |             |                 02 03                    --  . .
5317:433 | DONE dir | em 16 16 | 00631f | (6 bytes)   |         .word nt_dotquote, xt_squote, 005cab 
5317:433 | DONE dir | em 16 16 |        |             |                 13 63 76 5c ab 5c        --  . c v \ . \
5317:434 | DONE dir | em 16 16 | 006325 | (2 bytes)   |         .byte 73, &34                
5317:434 | DONE dir | em 16 16 |        |             |                 73 22                    --  s "
5317:435 | DONE wsp | em 16 16 |        |             |
5317:436 | DONE lbl | em 16 16 | 006327 |             | nt_sliteral                          
5317:437 | DONE dir | em 16 16 | 006327 | (2 bytes)   |         .byte 8, { IM + CO }         
5317:437 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5317:438 | DONE dir | em 16 16 | 006329 | (6 bytes)   |         .word nt_squote, xt_sliteral, 005d14 
5317:438 | DONE dir | em 16 16 |        |             |                 1d 63 ca 5c 14 5d        --  . c . \ . ]
5317:439 | DONE dir | em 16 16 | 00632f | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
5317:439 | DONE dir | em 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
5317:439 | DONE dir | em 16 16 |        |             |                                          -- 
5317:440 | DONE wsp | em 16 16 |        |             |
5317:441 | DONE lbl | em 16 16 | 006337 |             | nt_brackettick                       
5317:442 | DONE dir | em 16 16 | 006337 | (2 bytes)   |         .byte 3, { IM + CO }         
5317:442 | DONE dir | em 16 16 |        |             |                 03 06                    --  . .
5317:443 | DONE dir | em 16 16 | 006339 | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 00530f 
5317:443 | DONE dir | em 16 16 |        |             |                 27 63 09 53 0f 53        --  ' c 	 S . S
5317:444 | DONE dir | em 16 16 | 00633f | (3 bytes)   |         .byte 5b, 27, 5d             
5317:444 | DONE dir | em 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
5317:445 | DONE wsp | em 16 16 |        |             |
5317:446 | DONE lbl | em 16 16 | 006342 |             | nt_bracketchar                       
5317:447 | DONE dir | em 16 16 | 006342 | (2 bytes)   |         .byte 6, { IM + CO }         
5317:447 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5317:448 | DONE dir | em 16 16 | 006344 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 00531e 
5317:448 | DONE dir | em 16 16 |        |             |                 37 63 18 53 1e 53        --  7 c . S . S
5317:449 | DONE dir | em 16 16 | 00634a | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
5317:449 | DONE dir | em 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
5317:450 | DONE wsp | em 16 16 |        |             |
5317:451 | DONE lbl | em 16 16 | 006350 |             | nt_literal                           
5317:452 | DONE dir | em 16 16 | 006350 | (2 bytes)   |         .byte 7, { IM + CO }         
5317:452 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5317:453 | DONE dir | em 16 16 | 006352 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 0059e7 
5317:453 | DONE dir | em 16 16 |        |             |                 42 63 d6 59 e7 59        --  B c . Y . Y
5317:454 | DONE dir | em 16 16 | 006358 | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
5317:454 | DONE dir | em 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
5317:455 | DONE wsp | em 16 16 |        |             |
5317:456 | DONE lbl | em 16 16 | 00635f |             | nt_native-compile                    
5317:457 | DONE dir | em 16 16 | 00635f | (2 bytes)   |         .byte 0e, { NC }             
5317:457 | DONE dir | em 16 16 |        |             |                 0e 01                    --  . .
5317:458 | DONE dir | em 16 16 | 006361 | (6 bytes)   |         .word nt_literal, xt_native-compile, 005aac 
5317:458 | DONE dir | em 16 16 |        |             |                 50 63 a4 5a ac 5a        --  P c . Z . Z
5317:459 | DONE dir | em 16 16 | 006367 | (14 bytes)  |         .byte 6e, 61, 74, 69, 76, 65, 2d, 63, 6f, 6d, 70, 69, 6c, 65 
5317:459 | DONE dir | em 16 16 |        |             |                 6e 61 74 69 76 65 2d 63  --  n a t i v e - c
5317:459 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65        --  o m p i l e
5317:460 | DONE wsp | em 16 16 |        |             |
5317:461 | DONE lbl | em 16 16 | 006375 |             | nt_compile-only                      
5317:462 | DONE dir | em 16 16 | 006375 | (2 bytes)   |         .byte 0c, { NC }             
5317:462 | DONE dir | em 16 16 |        |             |                 0c 01                    --   .
5317:463 | DONE dir | em 16 16 | 006377 | (6 bytes)   |         .word nt_native-compile, xt_compile-only, 005650 
5317:463 | DONE dir | em 16 16 |        |             |                 5f 63 48 56 50 56        --  _ c H V P V
5317:464 | DONE dir | em 16 16 | 00637d | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
5317:464 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5317:464 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
5317:465 | DONE wsp | em 16 16 |        |             |
5317:466 | DONE lbl | em 16 16 | 006389 |             | nt_immediate                         
5317:467 | DONE dir | em 16 16 | 006389 | (2 bytes)   |         .byte 9, { NC }              
5317:467 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5317:468 | DONE dir | em 16 16 | 00638b | (6 bytes)   |         .word nt_compile-only, xt_immediate, 005970 
5317:468 | DONE dir | em 16 16 |        |             |                 75 63 68 59 70 59        --  u c h Y p Y
5317:469 | DONE dir | em 16 16 | 006391 | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
5317:469 | DONE dir | em 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
5317:469 | DONE dir | em 16 16 |        |             |                 65                       --  e
5317:470 | DONE wsp | em 16 16 |        |             |
5317:471 | DONE lbl | em 16 16 | 00639a |             | nt_postpone                          
5317:472 | DONE dir | em 16 16 | 00639a | (2 bytes)   |         .byte 8, { IM + CO }         
5317:472 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5317:473 | DONE dir | em 16 16 | 00639c | (6 bytes)   |         .word nt_immediate, xt_postpone, 005c1f 
5317:473 | DONE dir | em 16 16 |        |             |                 89 63 ed 5b 1f 5c        --  . c . [ . \
5317:474 | DONE dir | em 16 16 | 0063a2 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
5317:474 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5317:474 | DONE dir | em 16 16 |        |             |                                          -- 
5317:475 | DONE wsp | em 16 16 |        |             |
5317:476 | DONE lbl | em 16 16 | 0063aa |             | nt_rightbracket                      
5317:477 | DONE dir | em 16 16 | 0063aa | (2 bytes)   |         .byte 1, { NC }              
5317:477 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:478 | DONE dir | em 16 16 | 0063ac | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 005317 
5317:478 | DONE dir | em 16 16 |        |             |                 9a 63 12 53 17 53        --  . c . S . S
5317:479 | DONE dir | em 16 16 | 0063b2 | (1 bytes)   |         .byte 5d                     
5317:479 | DONE dir | em 16 16 |        |             |                 5d                       --  ]
5317:480 | DONE wsp | em 16 16 |        |             |
5317:481 | DONE lbl | em 16 16 | 0063b3 |             | nt_leftbracket                       
5317:482 | DONE dir | em 16 16 | 0063b3 | (2 bytes)   |         .byte 1, { IM + CO }         
5317:482 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5317:483 | DONE dir | em 16 16 | 0063b5 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 005311 
5317:483 | DONE dir | em 16 16 |        |             |                 aa 63 0f 53 11 53        --  . c . S . S
5317:484 | DONE dir | em 16 16 | 0063bb | (1 bytes)   |         .byte 5b                     
5317:484 | DONE dir | em 16 16 |        |             |                 5b                       --  [
5317:485 | DONE wsp | em 16 16 |        |             |
5317:486 | DONE lbl | em 16 16 | 0063bc |             | nt_latestnt                          
5317:487 | DONE dir | em 16 16 | 0063bc | (2 bytes)   |         .byte 8, { NC }              
5317:487 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5317:488 | DONE dir | em 16 16 | 0063be | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 0059c5 
5317:488 | DONE dir | em 16 16 |        |             |                 b3 63 be 59 c5 59        --  . c . Y . Y
5317:489 | DONE dir | em 16 16 | 0063c4 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
5317:489 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
5317:489 | DONE dir | em 16 16 |        |             |                                          -- 
5317:490 | DONE wsp | em 16 16 |        |             |
5317:491 | DONE lbl | em 16 16 | 0063cc |             | nt_latestxt                          
5317:492 | DONE dir | em 16 16 | 0063cc | (2 bytes)   |         .byte 8, { NC }              
5317:492 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5317:493 | DONE dir | em 16 16 | 0063ce | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 0059d5 
5317:493 | DONE dir | em 16 16 |        |             |                 bc 63 c6 59 d5 59        --  . c . Y . Y
5317:494 | DONE dir | em 16 16 | 0063d4 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
5317:494 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
5317:494 | DONE dir | em 16 16 |        |             |                                          -- 
5317:495 | DONE wsp | em 16 16 |        |             |
5317:496 | DONE lbl | em 16 16 | 0063dc |             | nt_dtrailing                         
5317:497 | DONE dir | em 16 16 | 0063dc | (2 bytes)   |         .byte 9, { NC }              
5317:497 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5317:498 | DONE dir | em 16 16 | 0063de | (6 bytes)   |         .word nt_latestxt, xt_dtrailing, 005356 
5317:498 | DONE dir | em 16 16 |        |             |                 cc 63 40 53 56 53        --  . c @ S V S
5317:499 | DONE dir | em 16 16 | 0063e4 | (9 bytes)   |         .byte 2d, 74, 72, 61, 69, 6c, 69, 6e, 67 
5317:499 | DONE dir | em 16 16 |        |             |                 2d 74 72 61 69 6c 69 6e  --  - t r a i l i n
5317:499 | DONE dir | em 16 16 |        |             |                 67                       --  g
5317:500 | DONE wsp | em 16 16 |        |             |
5317:501 | DONE lbl | em 16 16 | 0063ed |             | nt_slashstring                       
5317:502 | DONE dir | em 16 16 | 0063ed | (2 bytes)   |         .byte 7, { NC }              
5317:502 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5317:503 | DONE dir | em 16 16 | 0063ef | (6 bytes)   |         .word nt_dtrailing, xt_slashstring, 0051d4 
5317:503 | DONE dir | em 16 16 |        |             |                 dc 63 c3 51 d4 51        --  . c . Q . Q
5317:504 | DONE dir | em 16 16 | 0063f5 | (7 bytes)   |         .byte 2f, 73, 74, 72, 69, 6e, 67 
5317:504 | DONE dir | em 16 16 |        |             |                 2f 73 74 72 69 6e 67     --  / s t r i n g
5317:505 | DONE wsp | em 16 16 |        |             |
5317:506 | DONE lbl | em 16 16 | 0063fc |             | nt_zbranch                           
5317:507 | DONE dir | em 16 16 | 0063fc | (2 bytes)   |         .byte 7, { IM + CO }         
5317:507 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5317:508 | DONE dir | em 16 16 | 0063fe | (6 bytes)   |         .word nt_slashstring, xt_zbranch, 0053a0 
5317:508 | DONE dir | em 16 16 |        |             |                 ed 63 9a 53 a0 53        --  . c . S . S
5317:509 | DONE dir | em 16 16 | 006404 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
5317:509 | DONE dir | em 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
5317:510 | DONE wsp | em 16 16 |        |             |
5317:511 | DONE lbl | em 16 16 | 00640b |             | nt_branch                            
5317:512 | DONE dir | em 16 16 | 00640b | (2 bytes)   |         .byte 6, { IM + CO }         
5317:512 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5317:513 | DONE dir | em 16 16 | 00640d | (6 bytes)   |         .word nt_zbranch, xt_branch, 0055b0 
5317:513 | DONE dir | em 16 16 |        |             |                 fc 63 aa 55 b0 55        --  . c . U . U
5317:514 | DONE dir | em 16 16 | 006413 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
5317:514 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
5317:515 | DONE wsp | em 16 16 |        |             |
5317:516 | DONE lbl | em 16 16 | 006419 |             | nt_again                             
5317:517 | DONE dir | em 16 16 | 006419 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5317:517 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5317:518 | DONE dir | em 16 16 | 00641b | (6 bytes)   |         .word nt_branch, xt_again, 005526 
5317:518 | DONE dir | em 16 16 |        |             |                 0b 64 11 55 26 55        --   d . U & U
5317:519 | DONE dir | em 16 16 | 006421 | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
5317:519 | DONE dir | em 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
5317:520 | DONE wsp | em 16 16 |        |             |
5317:521 | DONE lbl | em 16 16 | 006426 |             | nt_begin                             
5317:522 | DONE dir | em 16 16 | 006426 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5317:522 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5317:523 | DONE dir | em 16 16 | 006428 | (6 bytes)   |         .word nt_again, xt_begin, 005597 
5317:523 | DONE dir | em 16 16 |        |             |                 19 64 91 55 97 55        --  . d . U . U
5317:524 | DONE dir | em 16 16 | 00642e | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
5317:524 | DONE dir | em 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
5317:525 | DONE wsp | em 16 16 |        |             |
5317:526 | DONE lbl | em 16 16 | 006433 |             | nt_compilecomma                      
5317:527 | DONE dir | em 16 16 | 006433 | (2 bytes)   |         .byte 08, { CO }             
5317:527 | DONE dir | em 16 16 |        |             |                 08 04                    --  . .
5317:528 | DONE dir | em 16 16 | 006435 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 005666 
5317:528 | DONE dir | em 16 16 |        |             |                 26 64 51 56 66 56        --  & d Q V f V
5317:529 | DONE dir | em 16 16 | 00643b | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
5317:529 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
5317:529 | DONE dir | em 16 16 |        |             |                                          -- 
5317:530 | DONE wsp | em 16 16 |        |             |
5317:531 | DONE lbl | em 16 16 | 006443 |             | nt_semicolon                         
5317:532 | DONE dir | em 16 16 | 006443 | (2 bytes)   |         .byte 1, { CO + IM }         
5317:532 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5317:533 | DONE dir | em 16 16 | 006445 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 005286 
5317:533 | DONE dir | em 16 16 |        |             |                 33 64 6e 52 86 52        --  3 d n R . R
5317:534 | DONE dir | em 16 16 | 00644b | (1 bytes)   |         .byte 3b                     
5317:534 | DONE dir | em 16 16 |        |             |                 3b                       --  ;
5317:535 | DONE wsp | em 16 16 |        |             |
5317:536 | DONE lbl | em 16 16 | 00644c |             | nt_colon                             
5317:537 | DONE dir | em 16 16 | 00644c | (2 bytes)   |         .byte 1, { NC }              
5317:537 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:538 | DONE dir | em 16 16 | 00644e | (6 bytes)   |         .word nt_semicolon, xt_colon, 00526d 
5317:538 | DONE dir | em 16 16 |        |             |                 43 64 4c 52 6d 52        --  C d L R m R
5317:539 | DONE dir | em 16 16 | 006454 | (1 bytes)   |         .byte 3a                     
5317:539 | DONE dir | em 16 16 |        |             |                 3a                       --  :
5317:540 | DONE wsp | em 16 16 |        |             |
5317:541 | DONE lbl | em 16 16 | 006455 |             | nt_allot                             
5317:542 | DONE dir | em 16 16 | 006455 | (2 bytes)   |         .byte 5, { NC }              
5317:542 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:543 | DONE dir | em 16 16 | 006457 | (6 bytes)   |         .word nt_colon, xt_allot, 005553 
5317:543 | DONE dir | em 16 16 |        |             |                 4c 64 2b 55 53 55        --  L d + U S U
5317:544 | DONE dir | em 16 16 | 00645d | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
5317:544 | DONE dir | em 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
5317:545 | DONE wsp | em 16 16 |        |             |
5317:546 | DONE lbl | em 16 16 | 006462 |             | nt_defer                             
5317:547 | DONE dir | em 16 16 | 006462 | (2 bytes)   |         .byte 5, { NC }              
5317:547 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:548 | DONE dir | em 16 16 | 006464 | (6 bytes)   |         .word nt_allot, xt_defer, 005734 
5317:548 | DONE dir | em 16 16 |        |             |                 55 64 1a 57 34 57        --  U d . W 4 W
5317:549 | DONE dir | em 16 16 | 00646a | (5 bytes)   |         .byte 64, 65, 66, 65, 72     
5317:549 | DONE dir | em 16 16 |        |             |                 64 65 66 65 72           --  d e f e r
5317:550 | DONE wsp | em 16 16 |        |             |
5317:551 | DONE lbl | em 16 16 | 00646f |             | nt_tobody                            
5317:552 | DONE dir | em 16 16 | 00646f | (2 bytes)   |         .byte 5, { NC }              
5317:552 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:553 | DONE dir | em 16 16 | 006471 | (6 bytes)   |         .word nt_defer, xt_tobody, 005155 
5317:553 | DONE dir | em 16 16 |        |             |                 62 64 32 51 55 51        --  b d 2 Q U Q
5317:554 | DONE dir | em 16 16 | 006477 | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
5317:554 | DONE dir | em 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
5317:555 | DONE wsp | em 16 16 |        |             |
5317:556 | DONE lbl | em 16 16 | 00647c |             | nt_does                              
5317:557 | DONE dir | em 16 16 | 00647c | (2 bytes)   |         .byte 5, { IM + CO }         
5317:557 | DONE dir | em 16 16 |        |             |                 05 06                    --  . .
5317:558 | DONE dir | em 16 16 | 00647e | (6 bytes)   |         .word nt_tobody, xt_does, 0057d8 
5317:558 | DONE dir | em 16 16 |        |             |                 6f 64 cc 57 d8 57        --  o d . W . W
5317:559 | DONE dir | em 16 16 | 006484 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
5317:559 | DONE dir | em 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
5317:560 | DONE wsp | em 16 16 |        |             |
5317:561 | DONE lbl | em 16 16 | 006489 |             | nt_create                            
5317:562 | DONE dir | em 16 16 | 006489 | (2 bytes)   |         .byte 6, { NC }              
5317:562 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:563 | DONE dir | em 16 16 | 00648b | (6 bytes)   |         .word nt_does, xt_create, 005719 
5317:563 | DONE dir | em 16 16 |        |             |                 7c 64 aa 56 19 57        --  | d . V . W
5317:564 | DONE dir | em 16 16 | 006491 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
5317:564 | DONE dir | em 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
5317:565 | DONE wsp | em 16 16 |        |             |
5317:566 | DONE lbl | em 16 16 | 006497 |             | nt_name-string                       
5317:567 | DONE dir | em 16 16 | 006497 | (2 bytes)   |         .byte 0b, { NC }             
5317:567 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5317:568 | DONE dir | em 16 16 | 006499 | (6 bytes)   |         .word nt_create, xt_name-string, 005aa3 
5317:568 | DONE dir | em 16 16 |        |             |                 89 64 93 5a a3 5a        --  . d . Z . Z
5317:569 | DONE dir | em 16 16 | 00649f | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
5317:569 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
5317:569 | DONE dir | em 16 16 |        |             |                 69 6e 67                 --  i n g
5317:570 | DONE wsp | em 16 16 |        |             |
5317:571 | DONE lbl | em 16 16 | 0064aa |             | nt_2dup                              
5317:572 | DONE dir | em 16 16 | 0064aa | (2 bytes)   |         .byte 4, { NC }              
5317:572 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:573 | DONE dir | em 16 16 | 0064ac | (6 bytes)   |         .word nt_name-string, xt_2dup, 0053f2 
5317:573 | DONE dir | em 16 16 |        |             |                 97 64 e8 53 f2 53        --  . d . S . S
5317:574 | DONE dir | em 16 16 | 0064b2 | (4 bytes)   |         .byte 32, 64, 75, 70         
5317:574 | DONE dir | em 16 16 |        |             |                 32 64 75 70              --  2 d u p
5317:575 | DONE wsp | em 16 16 |        |             |
5317:576 | DONE lbl | em 16 16 | 0064b6 |             | nt_abs                               
5317:577 | DONE dir | em 16 16 | 0064b6 | (2 bytes)   |         .byte 3, { NC }              
5317:577 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:578 | DONE dir | em 16 16 | 0064b8 | (6 bytes)   |         .word nt_2dup, xt_abs, 005484 
5317:578 | DONE dir | em 16 16 |        |             |                 aa 64 7c 54 84 54        --  . d | T . T
5317:579 | DONE dir | em 16 16 | 0064be | (3 bytes)   |         .byte 61, 62, 73             
5317:579 | DONE dir | em 16 16 |        |             |                 61 62 73                 --  a b s
5317:580 | DONE wsp | em 16 16 |        |             |
5317:581 | DONE lbl | em 16 16 | 0064c1 |             | nt_state                             
5317:582 | DONE dir | em 16 16 | 0064c1 | (2 bytes)   |         .byte 5, { NC }              
5317:582 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:583 | DONE dir | em 16 16 | 0064c3 | (6 bytes)   |         .word nt_abs, xt_state, 005dbb 
5317:583 | DONE dir | em 16 16 |        |             |                 b6 64 b4 5d bb 5d        --  . d . ] . ]
5317:584 | DONE dir | em 16 16 | 0064c9 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
5317:584 | DONE dir | em 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
5317:585 | DONE wsp | em 16 16 |        |             |
5317:586 | DONE lbl | em 16 16 | 0064ce |             | nt_to-in                             
5317:587 | DONE dir | em 16 16 | 0064ce | (2 bytes)   |         .byte 3, { NC }              
5317:587 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:588 | DONE dir | em 16 16 | 0064d0 | (6 bytes)   |         .word nt_state, xt_to-in, 00515d 
5317:588 | DONE dir | em 16 16 |        |             |                 c1 64 56 51 5d 51        --  . d V Q ] Q
5317:589 | DONE dir | em 16 16 | 0064d6 | (3 bytes)   |         .byte 3e, 69, 6e             
5317:589 | DONE dir | em 16 16 |        |             |                 3e 69 6e                 --  > i n
5317:590 | DONE wsp | em 16 16 |        |             |
5317:591 | DONE lbl | em 16 16 | 0064d9 |             | nt_source                            
5317:592 | DONE dir | em 16 16 | 0064d9 | (2 bytes)   |         .byte 6, { NC }              
5317:592 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:593 | DONE dir | em 16 16 | 0064db | (6 bytes)   |         .word nt_to-in, xt_source, 005d91 
5317:593 | DONE dir | em 16 16 |        |             |                 ce 64 85 5d 91 5d        --  . d . ] . ]
5317:594 | DONE dir | em 16 16 | 0064e1 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
5317:594 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
5317:595 | DONE wsp | em 16 16 |        |             |
5317:596 | DONE lbl | em 16 16 | 0064e7 |             | nt_depth                             
5317:597 | DONE dir | em 16 16 | 0064e7 | (2 bytes)   |         .byte 5, { NC }              
5317:597 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:598 | DONE dir | em 16 16 | 0064e9 | (6 bytes)   |         .word nt_source, xt_depth, 0057b7 
5317:598 | DONE dir | em 16 16 |        |             |                 d9 64 a9 57 b7 57        --  . d . W . W
5317:599 | DONE dir | em 16 16 | 0064ef | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
5317:599 | DONE dir | em 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
5317:600 | DONE wsp | em 16 16 |        |             |
5317:601 | DONE lbl | em 16 16 | 0064f4 |             | nt_to                                
5317:602 | DONE dir | em 16 16 | 0064f4 | (2 bytes)   |         .byte 2, { NC }              
5317:602 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:603 | DONE dir | em 16 16 | 0064f6 | (6 bytes)   |         .word nt_depth, xt_to, 005dcb 
5317:603 | DONE dir | em 16 16 |        |             |                 e7 64 c2 5d cb 5d        --  . d . ] . ]
5317:604 | DONE dir | em 16 16 | 0064fc | (2 bytes)   |         .byte 74, 6f                 
5317:604 | DONE dir | em 16 16 |        |             |                 74 6f                    --  t o
5317:605 | DONE wsp | em 16 16 |        |             |
5317:606 | DONE lbl | em 16 16 | 0064fe |             | nt_value                             
5317:607 | DONE dir | em 16 16 | 0064fe | (2 bytes)   |         .byte 5, { NC }              uses routines of CONSTANT
5317:607 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:608 | DONE dir | em 16 16 | 006500 | (6 bytes)   |         .word nt_to, xt_constant, 005695 
5317:608 | DONE dir | em 16 16 |        |             |                 f4 64 67 56 95 56        --  . d g V . V
5317:609 | DONE dir | em 16 16 | 006506 | (5 bytes)   |         .byte 76, 61, 6c, 75, 65     
5317:609 | DONE dir | em 16 16 |        |             |                 76 61 6c 75 65           --  v a l u e
5317:610 | DONE wsp | em 16 16 |        |             |
5317:611 | DONE lbl | em 16 16 | 00650b |             | nt_constant                          
5317:612 | DONE dir | em 16 16 | 00650b | (2 bytes)   |         .byte 8, { NC }              
5317:612 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5317:613 | DONE dir | em 16 16 | 00650d | (6 bytes)   |         .word nt_value, xt_constant, 005695 
5317:613 | DONE dir | em 16 16 |        |             |                 fe 64 67 56 95 56        --  . d g V . V
5317:614 | DONE dir | em 16 16 | 006513 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
5317:614 | DONE dir | em 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
5317:614 | DONE dir | em 16 16 |        |             |                                          -- 
5317:615 | DONE wsp | em 16 16 |        |             |
5317:616 | DONE lbl | em 16 16 | 00651b |             | nt_variable                          
5317:617 | DONE dir | em 16 16 | 00651b | (2 bytes)   |         .byte 8, { NC }              
5317:617 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5317:618 | DONE dir | em 16 16 | 00651d | (6 bytes)   |         .word nt_constant, xt_variable, 005ef4 
5317:618 | DONE dir | em 16 16 |        |             |                 0b 65 e5 5e f4 5e        --   e . ^ . ^
5317:619 | DONE dir | em 16 16 | 006523 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
5317:619 | DONE dir | em 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
5317:619 | DONE dir | em 16 16 |        |             |                                          -- 
5317:620 | DONE wsp | em 16 16 |        |             |
5317:621 | DONE lbl | em 16 16 | 00652b |             | nt_tick                              
5317:622 | DONE dir | em 16 16 | 00652b | (2 bytes)   |         .byte 1, { NC }              
5317:622 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:623 | DONE dir | em 16 16 | 00652d | (6 bytes)   |         .word nt_variable, xt_tick, 00545e 
5317:623 | DONE dir | em 16 16 |        |             |                 1b 65 43 54 5e 54        --  . e C T ^ T
5317:624 | DONE dir | em 16 16 | 006533 | (1 bytes)   |         .byte 27                     hex for "'"
5317:624 | DONE dir | em 16 16 |        |             |                 27                       --  '
5317:625 | DONE wsp | em 16 16 |        |             |
5317:626 | DONE lbl | em 16 16 | 006534 |             | nt_move                              
5317:627 | DONE dir | em 16 16 | 006534 | (2 bytes)   |         .byte 4, { NC }              
5317:627 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:628 | DONE dir | em 16 16 | 006536 | (6 bytes)   |         .word nt_tick, xt_move, 005a8a 
5317:628 | DONE dir | em 16 16 |        |             |                 2b 65 79 5a 8a 5a        --  + e y Z . Z
5317:629 | DONE dir | em 16 16 | 00653c | (4 bytes)   |         .byte 6d, 6f, 76, 65         
5317:629 | DONE dir | em 16 16 |        |             |                 6d 6f 76 65              --  m o v e
5317:630 | DONE wsp | em 16 16 |        |             |
5317:631 | DONE lbl | em 16 16 | 006540 |             | nt_min                               
5317:632 | DONE dir | em 16 16 | 006540 | (2 bytes)   |         .byte 3, { NC }              
5317:632 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:633 | DONE dir | em 16 16 | 006542 | (6 bytes)   |         .word nt_move, xt_min, 005a78 
5317:633 | DONE dir | em 16 16 |        |             |                 34 65 66 5a 78 5a        --  4 e f Z x Z
5317:634 | DONE dir | em 16 16 | 006548 | (3 bytes)   |         .byte 6d, 69, 6e             
5317:634 | DONE dir | em 16 16 |        |             |                 6d 69 6e                 --  m i n
5317:635 | DONE wsp | em 16 16 |        |             |
5317:636 | DONE lbl | em 16 16 | 00654b |             | nt_max                               
5317:637 | DONE dir | em 16 16 | 00654b | (2 bytes)   |         .byte 3, { NC }              
5317:637 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:638 | DONE dir | em 16 16 | 00654d | (6 bytes)   |         .word nt_min, xt_max, 005a65 
5317:638 | DONE dir | em 16 16 |        |             |                 40 65 53 5a 65 5a        --  @ e S Z e Z
5317:639 | DONE dir | em 16 16 | 006553 | (3 bytes)   |         .byte 6d, 61, 78             
5317:639 | DONE dir | em 16 16 |        |             |                 6d 61 78                 --  m a x
5317:640 | DONE wsp | em 16 16 |        |             |
5317:641 | DONE lbl | em 16 16 | 006556 |             | nt_negate                            
5317:642 | DONE dir | em 16 16 | 006556 | (2 bytes)   |         .byte 6, { NC }              
5317:642 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:643 | DONE dir | em 16 16 | 006558 | (6 bytes)   |         .word nt_max, xt_negate, 005ab3 
5317:643 | DONE dir | em 16 16 |        |             |                 4b 65 ad 5a b3 5a        --  K e . Z . Z
5317:644 | DONE dir | em 16 16 | 00655e | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
5317:644 | DONE dir | em 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
5317:645 | DONE wsp | em 16 16 |        |             |
5317:646 | DONE lbl | em 16 16 | 006564 |             | nt_invert                            
5317:647 | DONE dir | em 16 16 | 006564 | (2 bytes)   |         .byte 6, { NC }              
5317:647 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:648 | DONE dir | em 16 16 | 006566 | (6 bytes)   |         .word nt_negate, xt_invert, 0059a2 
5317:648 | DONE dir | em 16 16 |        |             |                 56 65 9d 59 a2 59        --  V e . Y . Y
5317:649 | DONE dir | em 16 16 | 00656c | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
5317:649 | DONE dir | em 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
5317:650 | DONE wsp | em 16 16 |        |             |
5317:651 | DONE lbl | em 16 16 | 006572 |             | nt_char                              
5317:652 | DONE dir | em 16 16 | 006572 | (2 bytes)   |         .byte 4, { NC }              
5317:652 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:653 | DONE dir | em 16 16 | 006574 | (6 bytes)   |         .word nt_invert, xt_char, 005609 
5317:653 | DONE dir | em 16 16 |        |             |                 64 65 f2 55 09 56        --  d e . U 	 V
5317:654 | DONE dir | em 16 16 | 00657a | (4 bytes)   |         .byte 63, 68, 61, 72         
5317:654 | DONE dir | em 16 16 |        |             |                 63 68 61 72              --  c h a r
5317:655 | DONE wsp | em 16 16 |        |             |
5317:656 | DONE lbl | em 16 16 | 00657e |             | nt_rshift                            
5317:657 | DONE dir | em 16 16 | 00657e | (2 bytes)   |         .byte 6, { NC }              
5317:657 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:658 | DONE dir | em 16 16 | 006580 | (6 bytes)   |         .word nt_char, xt_rshift, 005c75 
5317:658 | DONE dir | em 16 16 |        |             |                 72 65 62 5c 75 5c        --  r e b \ u \
5317:659 | DONE dir | em 16 16 | 006586 | (6 bytes)   |         .byte 72, 73, 68, 69, 66, 74 
5317:659 | DONE dir | em 16 16 |        |             |                 72 73 68 69 66 74        --  r s h i f t
5317:660 | DONE wsp | em 16 16 |        |             |
5317:661 | DONE lbl | em 16 16 | 00658c |             | nt_xor                               
5317:662 | DONE dir | em 16 16 | 00658c | (2 bytes)   |         .byte 3, { NC }              
5317:662 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:663 | DONE dir | em 16 16 | 00658e | (6 bytes)   |         .word nt_rshift, xt_xor, 005f6a 
5317:663 | DONE dir | em 16 16 |        |             |                 7e 65 64 5f 6a 5f        --  ~ e d _ j _
5317:664 | DONE dir | em 16 16 | 006594 | (3 bytes)   |         .byte 78, 6f, 72             
5317:664 | DONE dir | em 16 16 |        |             |                 78 6f 72                 --  x o r
5317:665 | DONE wsp | em 16 16 |        |             |
5317:666 | DONE lbl | em 16 16 | 006597 |             | nt_or                                
5317:667 | DONE dir | em 16 16 | 006597 | (2 bytes)   |         .byte 2, { NC }              
5317:667 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:668 | DONE dir | em 16 16 | 006599 | (6 bytes)   |         .word nt_xor, xt_or, 005b41  
5317:668 | DONE dir | em 16 16 |        |             |                 8c 65 3b 5b 41 5b        --  . e ; [ A [
5317:669 | DONE dir | em 16 16 | 00659f | (2 bytes)   |         .byte 6f, 72                 
5317:669 | DONE dir | em 16 16 |        |             |                 6f 72                    --  o r
5317:670 | DONE wsp | em 16 16 |        |             |
5317:671 | DONE lbl | em 16 16 | 0065a1 |             | nt_and                               
5317:672 | DONE dir | em 16 16 | 0065a1 | (2 bytes)   |         .byte 3, { NC }              
5317:672 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:673 | DONE dir | em 16 16 | 0065a3 | (6 bytes)   |         .word nt_or, xt_and, 00555a  
5317:673 | DONE dir | em 16 16 |        |             |                 97 65 54 55 5a 55        --  . e T U Z U
5317:674 | DONE dir | em 16 16 | 0065a9 | (3 bytes)   |         .byte 61, 6e, 64             
5317:674 | DONE dir | em 16 16 |        |             |                 61 6e 64                 --  a n d
5317:675 | DONE wsp | em 16 16 |        |             |
5317:676 | DONE lbl | em 16 16 | 0065ac |             | nt_lshift                            
5317:677 | DONE dir | em 16 16 | 0065ac | (2 bytes)   |         .byte 6, { NC }              
5317:677 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:678 | DONE dir | em 16 16 | 0065ae | (6 bytes)   |         .word nt_and, xt_lshift, 005a08 
5317:678 | DONE dir | em 16 16 |        |             |                 a1 65 f5 59 08 5a        --  . e . Y . Z
5317:679 | DONE dir | em 16 16 | 0065b4 | (6 bytes)   |         .byte 6c, 73, 68, 69, 66, 74 
5317:679 | DONE dir | em 16 16 |        |             |                 6c 73 68 69 66 74        --  l s h i f t
5317:680 | DONE wsp | em 16 16 |        |             |
5317:681 | DONE lbl | em 16 16 | 0065ba |             | nt_plusstore                         
5317:682 | DONE dir | em 16 16 | 0065ba | (2 bytes)   |         .byte 2, { NC }              
5317:682 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:683 | DONE dir | em 16 16 | 0065bc | (6 bytes)   |         .word nt_lshift, xt_plusstore, 005bec 
5317:683 | DONE dir | em 16 16 |        |             |                 ac 65 dd 5b ec 5b        --  . e . [ . [
5317:684 | DONE dir | em 16 16 | 0065c2 | (2 bytes)   |         .byte 2b, 21                 
5317:684 | DONE dir | em 16 16 |        |             |                 2b 21                    --  + !
5317:685 | DONE wsp | em 16 16 |        |             |
5317:686 | DONE lbl | em 16 16 | 0065c4 |             | nt_c-comma                           
5317:687 | DONE dir | em 16 16 | 0065c4 | (2 bytes)   |         .byte 2, { NC }              
5317:687 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:688 | DONE dir | em 16 16 | 0065c6 | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 0055d2 
5317:688 | DONE dir | em 16 16 |        |             |                 ba 65 c5 55 d2 55        --  . e . U . U
5317:689 | DONE dir | em 16 16 | 0065cc | (2 bytes)   |         .byte 63, 2c                 
5317:689 | DONE dir | em 16 16 |        |             |                 63 2c                    --  c ,
5317:690 | DONE wsp | em 16 16 |        |             |
5317:691 | DONE lbl | em 16 16 | 0065ce |             | nt_c-fetch                           
5317:692 | DONE dir | em 16 16 | 0065ce | (2 bytes)   |         .byte 2, { NC }              
5317:692 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:693 | DONE dir | em 16 16 | 0065d0 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 0055de 
5317:693 | DONE dir | em 16 16 |        |             |                 c4 65 d3 55 de 55        --  . e . U . U
5317:694 | DONE dir | em 16 16 | 0065d6 | (2 bytes)   |         .byte 63, 40                 
5317:694 | DONE dir | em 16 16 |        |             |                 63 40                    --  c @
5317:695 | DONE wsp | em 16 16 |        |             |
5317:696 | DONE lbl | em 16 16 | 0065d8 |             | nt_c-store                           
5317:697 | DONE dir | em 16 16 | 0065d8 | (2 bytes)   |         .byte 2, { NC }              
5317:697 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:698 | DONE dir | em 16 16 | 0065da | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0055ee 
5317:698 | DONE dir | em 16 16 |        |             |                 ce 65 df 55 ee 55        --  . e . U . U
5317:699 | DONE dir | em 16 16 | 0065e0 | (2 bytes)   |         .byte 63, 21                 
5317:699 | DONE dir | em 16 16 |        |             |                 63 21                    --  c !
5317:700 | DONE wsp | em 16 16 |        |             |
5317:701 | DONE lbl | em 16 16 | 0065e2 |             | nt_two-star                          
5317:702 | DONE dir | em 16 16 | 0065e2 | (2 bytes)   |         .byte 2, { NC }              
5317:702 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:703 | DONE dir | em 16 16 | 0065e4 | (6 bytes)   |         .word nt_c-store, xt_two-star, 0053cf 
5317:703 | DONE dir | em 16 16 |        |             |                 d8 65 cc 53 cf 53        --  . e . S . S
5317:704 | DONE dir | em 16 16 | 0065ea | (2 bytes)   |         .byte 32, 2a                 
5317:704 | DONE dir | em 16 16 |        |             |                 32 2a                    --  2 *
5317:705 | DONE wsp | em 16 16 |        |             |
5317:706 | DONE lbl | em 16 16 | 0065ec |             | nt_minus                             
5317:707 | DONE dir | em 16 16 | 0065ec | (2 bytes)   |         .byte 1, { NC }              
5317:707 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:708 | DONE dir | em 16 16 | 0065ee | (6 bytes)   |         .word nt_two-star, xt_minus, 005336 
5317:708 | DONE dir | em 16 16 |        |             |                 e2 65 2c 53 36 53        --  . e , S 6 S
5317:709 | DONE dir | em 16 16 | 0065f4 | (1 bytes)   |         .byte 2d                     
5317:709 | DONE dir | em 16 16 |        |             |                 2d                       --  -
5317:710 | DONE wsp | em 16 16 |        |             |
5317:711 | DONE lbl | em 16 16 | 0065f5 |             | nt_plus                              
5317:712 | DONE dir | em 16 16 | 0065f5 | (2 bytes)   |         .byte 1, { NC }              
5317:712 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:713 | DONE dir | em 16 16 | 0065f7 | (6 bytes)   |         .word nt_minus, xt_plus, 00532b 
5317:713 | DONE dir | em 16 16 |        |             |                 ec 65 24 53 2b 53        --  . e $ S + S
5317:714 | DONE dir | em 16 16 | 0065fd | (1 bytes)   |         .byte 2b                     
5317:714 | DONE dir | em 16 16 |        |             |                 2b                       --  +
5317:715 | DONE wsp | em 16 16 |        |             |
5317:716 | DONE lbl | em 16 16 | 0065fe |             | nt_one-minus                         
5317:717 | DONE dir | em 16 16 | 0065fe | (2 bytes)   |         .byte 2, { NC }              
5317:717 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:718 | DONE dir | em 16 16 | 006600 | (6 bytes)   |         .word nt_plus, xt_one-minus, 0053c1 
5317:718 | DONE dir | em 16 16 |        |             |                 f5 65 c0 53 c1 53        --  . e . S . S
5317:719 | DONE dir | em 16 16 | 006606 | (2 bytes)   |         .byte 31, 2d                 
5317:719 | DONE dir | em 16 16 |        |             |                 31 2d                    --  1 -
5317:720 | DONE wsp | em 16 16 |        |             |
5317:721 | DONE lbl | em 16 16 | 006608 |             | nt_one-plus                          
5317:722 | DONE dir | em 16 16 | 006608 | (2 bytes)   |         .byte 2, { NC }              
5317:722 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:723 | DONE dir | em 16 16 | 00660a | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 0053c3 
5317:723 | DONE dir | em 16 16 |        |             |                 fe 65 c2 53 c3 53        --  . e . S . S
5317:724 | DONE dir | em 16 16 | 006610 | (2 bytes)   |         .byte 31, 2b                 
5317:724 | DONE dir | em 16 16 |        |             |                 31 2b                    --  1 +
5317:725 | DONE wsp | em 16 16 |        |             |
5317:726 | DONE lbl | em 16 16 | 006612 |             | nt_zero-notequal                     
5317:727 | DONE dir | em 16 16 | 006612 | (2 bytes)   |         .byte 3, { NC }              
5317:727 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:728 | DONE dir | em 16 16 | 006614 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 00538e 
5317:728 | DONE dir | em 16 16 |        |             |                 08 66 83 53 8e 53        --  . f . S . S
5317:729 | DONE dir | em 16 16 | 00661a | (3 bytes)   |         .byte 30, 3c, 3e             
5317:729 | DONE dir | em 16 16 |        |             |                 30 3c 3e                 --  0 < >
5317:730 | DONE wsp | em 16 16 |        |             |
5317:731 | DONE lbl | em 16 16 | 00661d |             | nt_zero-more                         
5317:732 | DONE dir | em 16 16 | 00661d | (2 bytes)   |         .byte 2, { NC }              
5317:732 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:733 | DONE dir | em 16 16 | 00661f | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 005399 
5317:733 | DONE dir | em 16 16 |        |             |                 12 66 8f 53 99 53        --  . f . S . S
5317:734 | DONE dir | em 16 16 | 006625 | (2 bytes)   |         .byte 30, 3e                 
5317:734 | DONE dir | em 16 16 |        |             |                 30 3e                    --  0 >
5317:735 | DONE wsp | em 16 16 |        |             |
5317:736 | DONE lbl | em 16 16 | 006627 |             | nt_zero-less                         
5317:737 | DONE dir | em 16 16 | 006627 | (2 bytes)   |         .byte 2, { NC }              
5317:737 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:738 | DONE dir | em 16 16 | 006629 | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 005382 
5317:738 | DONE dir | em 16 16 |        |             |                 1d 66 77 53 82 53        --  . f w S . S
5317:739 | DONE dir | em 16 16 | 00662f | (2 bytes)   |         .byte 30, 3c                 
5317:739 | DONE dir | em 16 16 |        |             |                 30 3c                    --  0 <
5317:740 | DONE wsp | em 16 16 |        |             |
5317:741 | DONE lbl | em 16 16 | 006631 |             | nt_greater                           
5317:742 | DONE dir | em 16 16 | 006631 | (2 bytes)   |         .byte 1, { NC }              
5317:742 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:743 | DONE dir | em 16 16 | 006633 | (6 bytes)   |         .word nt_zero-less, xt_greater, 005131 
5317:743 | DONE dir | em 16 16 |        |             |                 27 66 1e 51 31 51        --  ' f . Q 1 Q
5317:744 | DONE dir | em 16 16 | 006639 | (1 bytes)   |         .byte 3e                     
5317:744 | DONE dir | em 16 16 |        |             |                 3e                       --  >
5317:745 | DONE wsp | em 16 16 |        |             |
5317:746 | DONE lbl | em 16 16 | 00663a |             | nt_less                              
5317:747 | DONE dir | em 16 16 | 00663a | (2 bytes)   |         .byte 1, { NC }              
5317:747 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:748 | DONE dir | em 16 16 | 00663c | (6 bytes)   |         .word nt_greater, xt_less, 005107 
5317:748 | DONE dir | em 16 16 |        |             |                 31 66 f4 50 07 51        --  1 f . P . Q
5317:749 | DONE dir | em 16 16 | 006642 | (1 bytes)   |         .byte 3c                     
5317:749 | DONE dir | em 16 16 |        |             |                 3c                       --  <
5317:750 | DONE wsp | em 16 16 |        |             |
5317:751 | DONE lbl | em 16 16 | 006643 |             | nt_zero-equal                        
5317:752 | DONE dir | em 16 16 | 006643 | (2 bytes)   |         .byte 2, { NC }              
5317:752 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:753 | DONE dir | em 16 16 | 006645 | (6 bytes)   |         .word nt_less, xt_zero-equal, 005376 
5317:753 | DONE dir | em 16 16 |        |             |                 3a 66 6b 53 76 53        --  : f k S v S
5317:754 | DONE dir | em 16 16 | 00664b | (2 bytes)   |         .byte 30, 3d                 
5317:754 | DONE dir | em 16 16 |        |             |                 30 3d                    --  0 =
5317:755 | DONE wsp | em 16 16 |        |             |
5317:756 | DONE lbl | em 16 16 | 00664d |             | nt_not-equal                         
5317:757 | DONE dir | em 16 16 | 00664d | (2 bytes)   |         .byte 2, { NC }              
5317:757 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5317:758 | DONE dir | em 16 16 | 00664f | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 005113 
5317:758 | DONE dir | em 16 16 |        |             |                 43 66 08 51 13 51        --  C f . Q . Q
5317:759 | DONE dir | em 16 16 | 006655 | (2 bytes)   |         .byte 3c, 3e                 
5317:759 | DONE dir | em 16 16 |        |             |                 3c 3e                    --  < >
5317:760 | DONE wsp | em 16 16 |        |             |
5317:761 | DONE lbl | em 16 16 | 006657 |             | nt_equal                             
5317:762 | DONE dir | em 16 16 | 006657 | (2 bytes)   |         .byte 1, { NC }              
5317:762 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:763 | DONE dir | em 16 16 | 006659 | (6 bytes)   |         .word nt_not-equal, xt_equal, 005362 
5317:763 | DONE dir | em 16 16 |        |             |                 4d 66 57 53 62 53        --  M f W S b S
5317:764 | DONE dir | em 16 16 | 00665f | (1 bytes)   |         .byte 3d                     
5317:764 | DONE dir | em 16 16 |        |             |                 3d                       --  =
5317:765 | DONE wsp | em 16 16 |        |             |
5317:766 | DONE lbl | em 16 16 | 006660 |             | nt_false                             
5317:767 | DONE dir | em 16 16 | 006660 | (2 bytes)   |         .byte 5, { NC }              
5317:767 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:768 | DONE dir | em 16 16 | 006662 | (6 bytes)   |         .word nt_equal, xt_zero, 00536a 
5317:768 | DONE dir | em 16 16 |        |             |                 57 66 63 53 6a 53        --  W f c S j S
5317:769 | DONE dir | em 16 16 | 006668 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
5317:769 | DONE dir | em 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
5317:770 | DONE wsp | em 16 16 |        |             |
5317:771 | DONE lbl | em 16 16 | 00666d |             | nt_true                              
5317:772 | DONE dir | em 16 16 | 00666d | (2 bytes)   |         .byte 4, { NC }              
5317:772 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:773 | DONE dir | em 16 16 | 00666f | (6 bytes)   |         .word nt_false, xt_true, 005dd3 
5317:773 | DONE dir | em 16 16 |        |             |                 60 66 cc 5d d3 5d        --  ` f . ] . ]
5317:774 | DONE dir | em 16 16 | 006675 | (4 bytes)   |         .byte 74, 72, 75, 65         
5317:774 | DONE dir | em 16 16 |        |             |                 74 72 75 65              --  t r u e
5317:775 | DONE wsp | em 16 16 |        |             |
5317:776 | DONE lbl | em 16 16 | 006679 |             | nt_tonumber                          
5317:777 | DONE dir | em 16 16 | 006679 | (2 bytes)   |         .byte 7, { NC }              see if actually NC
5317:777 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5317:778 | DONE dir | em 16 16 | 00667b | (6 bytes)   |         .word nt_true, xt_tonumber, 0051ba 
5317:778 | DONE dir | em 16 16 |        |             |                 6d 66 5e 51 ba 51        --  m f ^ Q . Q
5317:779 | DONE dir | em 16 16 | 006681 | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
5317:779 | DONE dir | em 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
5317:780 | DONE wsp | em 16 16 |        |             |
5317:781 | DONE lbl | em 16 16 | 006688 |             | nt_number                            
5317:782 | DONE dir | em 16 16 | 006688 | (2 bytes)   |         .byte 6, { NC }              see if actually NC
5317:782 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:783 | DONE dir | em 16 16 | 00668a | (6 bytes)   |         .word nt_tonumber, xt_number, 005b3a 
5317:783 | DONE dir | em 16 16 |        |             |                 79 66 b7 5a 3a 5b        --  y f . Z : [
5317:784 | DONE dir | em 16 16 | 006690 | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
5317:784 | DONE dir | em 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
5317:785 | DONE wsp | em 16 16 |        |             |
5317:786 | DONE lbl | em 16 16 | 006696 |             | nt_two                               
5317:787 | DONE dir | em 16 16 | 006696 | (2 bytes)   |         .byte 1, { NC }              
5317:787 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:788 | DONE dir | em 16 16 | 006698 | (6 bytes)   |         .word nt_number, xt_two, 0053cb 
5317:788 | DONE dir | em 16 16 |        |             |                 88 66 c4 53 cb 53        --  . f . S . S
5317:789 | DONE dir | em 16 16 | 00669e | (1 bytes)   |         .byte 32                     
5317:789 | DONE dir | em 16 16 |        |             |                 32                       --  2
5317:790 | DONE wsp | em 16 16 |        |             |
5317:791 | DONE lbl | em 16 16 | 00669f |             | nt_one                               
5317:792 | DONE dir | em 16 16 | 00669f | (2 bytes)   |         .byte 1, { NC }              
5317:792 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:793 | DONE dir | em 16 16 | 0066a1 | (6 bytes)   |         .word nt_two, xt_one, 0053bf 
5317:793 | DONE dir | em 16 16 |        |             |                 96 66 b8 53 bf 53        --  . f . S . S
5317:794 | DONE dir | em 16 16 | 0066a7 | (1 bytes)   |         .byte 31                     
5317:794 | DONE dir | em 16 16 |        |             |                 31                       --  1
5317:795 | DONE wsp | em 16 16 |        |             |
5317:796 | DONE lbl | em 16 16 | 0066a8 |             | nt_zero                              
5317:797 | DONE dir | em 16 16 | 0066a8 | (2 bytes)   |         .byte 1, { NC }              
5317:797 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:798 | DONE dir | em 16 16 | 0066aa | (6 bytes)   |         .word nt_one, xt_zero, 00536a 
5317:798 | DONE dir | em 16 16 |        |             |                 9f 66 63 53 6a 53        --  . f c S j S
5317:799 | DONE dir | em 16 16 | 0066b0 | (1 bytes)   |         .byte 30                     
5317:799 | DONE dir | em 16 16 |        |             |                 30                       --  0
5317:800 | DONE wsp | em 16 16 |        |             |
5317:801 | DONE lbl | em 16 16 | 0066b1 |             | nt_find-name                         
5317:802 | DONE dir | em 16 16 | 0066b1 | (2 bytes)   |         .byte 9, 0                   
5317:802 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5317:803 | DONE dir | em 16 16 | 0066b3 | (6 bytes)   |         .word nt_zero, xt_find-name, 005904 
5317:803 | DONE dir | em 16 16 |        |             |                 a8 66 ae 58 04 59        --  . f . X . Y
5317:804 | DONE dir | em 16 16 | 0066b9 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
5317:804 | DONE dir | em 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
5317:804 | DONE dir | em 16 16 |        |             |                 65                       --  e
5317:805 | DONE wsp | em 16 16 |        |             |
5317:806 | DONE lbl | em 16 16 | 0066c2 |             | nt_refill                            
5317:807 | DONE dir | em 16 16 | 0066c2 | (2 bytes)   |         .byte 6, 0                   TODO check flags
5317:807 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5317:808 | DONE dir | em 16 16 | 0066c4 | (6 bytes)   |         .word nt_find-name, xt_refill, 005c58 
5317:808 | DONE dir | em 16 16 |        |             |                 b1 66 31 5c 58 5c        --  . f 1 \ X \
5317:809 | DONE dir | em 16 16 | 0066ca | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
5317:809 | DONE dir | em 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
5317:810 | DONE wsp | em 16 16 |        |             |
5317:811 | DONE lbl | em 16 16 | 0066d0 |             | nt_parse-name                        
5317:812 | DONE dir | em 16 16 | 0066d0 | (2 bytes)   |         .byte &10, 0                 
5317:812 | DONE dir | em 16 16 |        |             |                 0a 00                    --  
 .
5317:813 | DONE dir | em 16 16 | 0066d2 | (6 bytes)   |         .word nt_refill, xt_parse-name, 005bce 
5317:813 | DONE dir | em 16 16 |        |             |                 c2 66 6a 5b ce 5b        --  . f j [ . [
5317:814 | DONE dir | em 16 16 | 0066d8 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
5317:814 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
5317:814 | DONE dir | em 16 16 |        |             |                 6d 65                    --  m e
5317:815 | DONE wsp | em 16 16 |        |             |
5317:816 | DONE lbl | em 16 16 | 0066e2 |             | nt_source-id                         
5317:817 | DONE dir | em 16 16 | 0066e2 | (2 bytes)   |         .byte 9, { NC }              
5317:817 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5317:818 | DONE dir | em 16 16 | 0066e4 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 005d98 
5317:818 | DONE dir | em 16 16 |        |             |                 d0 66 92 5d 98 5d        --  . f . ] . ]
5317:819 | DONE dir | em 16 16 | 0066ea | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
5317:819 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
5317:819 | DONE dir | em 16 16 |        |             |                 64                       --  d
5317:820 | DONE wsp | em 16 16 |        |             |
5317:821 | DONE lbl | em 16 16 | 0066f3 |             | nt_comma                             
5317:822 | DONE dir | em 16 16 | 0066f3 | (2 bytes)   |         .byte 1, { NC }              
5317:822 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:823 | DONE dir | em 16 16 | 0066f5 | (6 bytes)   |         .word nt_source-id, xt_comma, 00524b 
5317:823 | DONE dir | em 16 16 |        |             |                 e2 66 40 52 4b 52        --  . f @ R K R
5317:824 | DONE dir | em 16 16 | 0066fb | (1 bytes)   |         .byte 2c                     
5317:824 | DONE dir | em 16 16 |        |             |                 2c                       --  ,
5317:825 | DONE wsp | em 16 16 |        |             |
5317:826 | DONE lbl | em 16 16 | 0066fc |             | nt_accept                            
5317:827 | DONE dir | em 16 16 | 0066fc | (2 bytes)   |         .byte 6, 00                  TODO check flags
5317:827 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5317:828 | DONE dir | em 16 16 | 0066fe | (6 bytes)   |         .word nt_comma, xt_accept, 005510 
5317:828 | DONE dir | em 16 16 |        |             |                 f3 66 85 54 10 55        --  . f . T . U
5317:829 | DONE dir | em 16 16 | 006704 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
5317:829 | DONE dir | em 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
5317:830 | DONE wsp | em 16 16 |        |             |
5317:831 | DONE lbl | em 16 16 | 00670a |             | nt_key                               
5317:832 | DONE dir | em 16 16 | 00670a | (2 bytes)   |         .byte 3, { NC }              
5317:832 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:833 | DONE dir | em 16 16 | 00670c | (6 bytes)   |         .word nt_accept, xt_key, 005968 
5317:833 | DONE dir | em 16 16 |        |             |                 fc 66 59 59 68 59        --  . f Y Y h Y
5317:834 | DONE dir | em 16 16 | 006712 | (3 bytes)   |         .byte 6b, 65, 79             
5317:834 | DONE dir | em 16 16 |        |             |                 6b 65 79                 --  k e y
5317:835 | DONE wsp | em 16 16 |        |             |
5317:836 | DONE lbl | em 16 16 | 006715 |             | nt_backslash                         
5317:837 | DONE dir | em 16 16 | 006715 | (2 bytes)   |         .byte 1, { NC }              
5317:837 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:838 | DONE dir | em 16 16 | 006717 | (6 bytes)   |         .word nt_key, xt_backslash, 005323 
5317:838 | DONE dir | em 16 16 |        |             |                 0a 67 1f 53 23 53        --  
 g . S # S
5317:839 | DONE dir | em 16 16 | 00671d | (1 bytes)   |         .byte 5c                     
5317:839 | DONE dir | em 16 16 |        |             |                 5c                       --  \
5317:840 | DONE wsp | em 16 16 |        |             |
5317:841 | DONE lbl | em 16 16 | 00671e |             | nt_qdup                              
5317:842 | DONE dir | em 16 16 | 00671e | (2 bytes)   |         .byte 4, { NC }              
5317:842 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:843 | DONE dir | em 16 16 | 006720 | (6 bytes)   |         .word nt_backslash, xt_qdup, 0052c8 
5317:843 | DONE dir | em 16 16 |        |             |                 15 67 c1 52 c8 52        --  . g . R . R
5317:844 | DONE dir | em 16 16 | 006726 | (4 bytes)   |         .byte 3f, 64, 75, 70         
5317:844 | DONE dir | em 16 16 |        |             |                 3f 64 75 70              --  ? d u p
5317:845 | DONE wsp | em 16 16 |        |             |
5317:846 | DONE lbl | em 16 16 | 00672a |             | nt_tuck                              
5317:847 | DONE dir | em 16 16 | 00672a | (2 bytes)   |         .byte 4, { NC }              
5317:847 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:848 | DONE dir | em 16 16 | 00672c | (6 bytes)   |         .word nt_qdup, xt_tuck, 005ddc 
5317:848 | DONE dir | em 16 16 |        |             |                 1e 67 d4 5d dc 5d        --  . g . ] . ]
5317:849 | DONE dir | em 16 16 | 006732 | (4 bytes)   |         .byte 74, 75, 63, 6b         
5317:849 | DONE dir | em 16 16 |        |             |                 74 75 63 6b              --  t u c k
5317:850 | DONE wsp | em 16 16 |        |             |
5317:851 | DONE lbl | em 16 16 | 006736 |             | nt_nip                               
5317:852 | DONE dir | em 16 16 | 006736 | (2 bytes)   |         .byte 3, { NC }              
5317:852 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:853 | DONE dir | em 16 16 | 006738 | (6 bytes)   |         .word nt_tuck, xt_nip, 005ab6 
5317:853 | DONE dir | em 16 16 |        |             |                 2a 67 b4 5a b6 5a        --  * g . Z . Z
5317:854 | DONE dir | em 16 16 | 00673e | (3 bytes)   |         .byte 6e, 69, 70             
5317:854 | DONE dir | em 16 16 |        |             |                 6e 69 70                 --  n i p
5317:855 | DONE wsp | em 16 16 |        |             |
5317:856 | DONE lbl | em 16 16 | 006741 |             | nt_mrot                              
5317:857 | DONE dir | em 16 16 | 006741 | (2 bytes)   |         .byte 4, { NC }              
5317:857 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:858 | DONE dir | em 16 16 | 006743 | (6 bytes)   |         .word nt_nip, xt_mrot, 00533f 
5317:858 | DONE dir | em 16 16 |        |             |                 36 67 37 53 3f 53        --  6 g 7 S ? S
5317:859 | DONE dir | em 16 16 | 006749 | (4 bytes)   |         .byte 2d, 72, 6f, 74         
5317:859 | DONE dir | em 16 16 |        |             |                 2d 72 6f 74              --  - r o t
5317:860 | DONE wsp | em 16 16 |        |             |
5317:861 | DONE lbl | em 16 16 | 00674d |             | nt_rot                               
5317:862 | DONE dir | em 16 16 | 00674d | (2 bytes)   |         .byte 3, { NC }              
5317:862 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:863 | DONE dir | em 16 16 | 00674f | (6 bytes)   |         .word nt_mrot, xt_rot, 005c61 
5317:863 | DONE dir | em 16 16 |        |             |                 41 67 59 5c 61 5c        --  A g Y \ a \
5317:864 | DONE dir | em 16 16 | 006755 | (3 bytes)   |         .byte 72, 6f, 74             
5317:864 | DONE dir | em 16 16 |        |             |                 72 6f 74                 --  r o t
5317:865 | DONE wsp | em 16 16 |        |             |
5317:866 | DONE lbl | em 16 16 | 006758 |             | nt_2over                             
5317:867 | DONE dir | em 16 16 | 006758 | (2 bytes)   |         .byte 5, { NC }              
5317:867 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:868 | DONE dir | em 16 16 | 00675a | (6 bytes)   |         .word nt_rot, xt_2over, 0053ff 
5317:868 | DONE dir | em 16 16 |        |             |                 4d 67 f3 53 ff 53        --  M g . S . S
5317:869 | DONE dir | em 16 16 | 006760 | (5 bytes)   |         .byte 32, 6f, 76, 65, 72     
5317:869 | DONE dir | em 16 16 |        |             |                 32 6f 76 65 72           --  2 o v e r
5317:870 | DONE wsp | em 16 16 |        |             |
5317:871 | DONE lbl | em 16 16 | 006765 |             | nt_2swap                             
5317:872 | DONE dir | em 16 16 | 006765 | (2 bytes)   |         .byte 5, { NC }              
5317:872 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:873 | DONE dir | em 16 16 | 006767 | (6 bytes)   |         .word nt_2over, xt_2swap, 00542f 
5317:873 | DONE dir | em 16 16 |        |             |                 58 67 1f 54 2f 54        --  X g . T / T
5317:874 | DONE dir | em 16 16 | 00676d | (5 bytes)   |         .byte 32, 73, 77, 61, 70     
5317:874 | DONE dir | em 16 16 |        |             |                 32 73 77 61 70           --  2 s w a p
5317:875 | DONE wsp | em 16 16 |        |             |
5317:876 | DONE lbl | em 16 16 | 006772 |             | nt_execute                           
5317:877 | DONE dir | em 16 16 | 006772 | (2 bytes)   |         .byte 7, { NC }              
5317:877 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5317:878 | DONE dir | em 16 16 | 006774 | (6 bytes)   |         .word nt_2swap, xt_execute, 00587d 
5317:878 | DONE dir | em 16 16 |        |             |                 65 67 73 58 7d 58        --  e g s X } X
5317:879 | DONE dir | em 16 16 | 00677a | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
5317:879 | DONE dir | em 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
5317:880 | DONE wsp | em 16 16 |        |             |
5317:881 | DONE lbl | em 16 16 | 006781 |             | nt_here                              
5317:882 | DONE dir | em 16 16 | 006781 | (2 bytes)   |         .byte 4, { NC }              
5317:882 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:883 | DONE dir | em 16 16 | 006783 | (6 bytes)   |         .word nt_execute, xt_here, 0059a9 
5317:883 | DONE dir | em 16 16 |        |             |                 72 67 a3 59 a9 59        --  r g . Y . Y
5317:884 | DONE dir | em 16 16 | 006789 | (4 bytes)   |         .byte 68, 65, 72, 65         
5317:884 | DONE dir | em 16 16 |        |             |                 68 65 72 65              --  h e r e
5317:885 | DONE wsp | em 16 16 |        |             |
5317:886 | DONE lbl | em 16 16 | 00678d |             | nt_2drop                             
5317:887 | DONE dir | em 16 16 | 00678d | (2 bytes)   |         .byte 5, { NC }              
5317:887 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5317:888 | DONE dir | em 16 16 | 00678f | (6 bytes)   |         .word nt_here, xt_2drop, 0053e7 
5317:888 | DONE dir | em 16 16 |        |             |                 81 67 e1 53 e7 53        --  . g . S . S
5317:889 | DONE dir | em 16 16 | 006795 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
5317:889 | DONE dir | em 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
5317:890 | DONE wsp | em 16 16 |        |             |
5317:891 | DONE lbl | em 16 16 | 00679a |             | nt_rfetch                            
5317:892 | DONE dir | em 16 16 | 00679a | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
5317:892 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5317:893 | DONE dir | em 16 16 | 00679c | (6 bytes)   |         .word nt_2drop, xt_rfetch, 005c28 
5317:893 | DONE dir | em 16 16 |        |             |                 8d 67 20 5c 28 5c        --  . g   \ ( \
5317:894 | DONE dir | em 16 16 | 0067a2 | (2 bytes)   |         .byte 72, 40                 
5317:894 | DONE dir | em 16 16 |        |             |                 72 40                    --  r @
5317:895 | DONE wsp | em 16 16 |        |             |
5317:896 | DONE lbl | em 16 16 | 0067a4 |             | nt_fromr                             
5317:897 | DONE dir | em 16 16 | 0067a4 | (2 bytes)   |         .byte 2, { CO }              
5317:897 | DONE dir | em 16 16 |        |             |                 02 04                    --  . .
5317:898 | DONE dir | em 16 16 | 0067a6 | (6 bytes)   |         .word nt_rfetch, xt_fromr, 005c30 
5317:898 | DONE dir | em 16 16 |        |             |                 9a 67 29 5c 30 5c        --  . g ) \ 0 \
5317:899 | DONE dir | em 16 16 | 0067ac | (2 bytes)   |         .byte 72, 3e                 
5317:899 | DONE dir | em 16 16 |        |             |                 72 3e                    --  r >
5317:900 | DONE wsp | em 16 16 |        |             |
5317:901 | DONE lbl | em 16 16 | 0067ae |             | nt_tor                               
5317:902 | DONE dir | em 16 16 | 0067ae | (2 bytes)   |         .byte 2, { CO }              
5317:902 | DONE dir | em 16 16 |        |             |                 02 04                    --  . .
5317:903 | DONE dir | em 16 16 | 0067b0 | (6 bytes)   |         .word nt_fromr, xt_tor, 0051c2 
5317:903 | DONE dir | em 16 16 |        |             |                 a4 67 bb 51 c2 51        --  . g . Q . Q
5317:904 | DONE dir | em 16 16 | 0067b6 | (2 bytes)   |         .byte 3e, 72                 
5317:904 | DONE dir | em 16 16 |        |             |                 3e 72                    --  > r
5317:905 | DONE wsp | em 16 16 |        |             |
5317:906 | DONE lbl | em 16 16 | 0067b8 |             | nt_digitq                            
5317:907 | DONE dir | em 16 16 | 0067b8 | (2 bytes)   |         .byte 6, { NC }              
5317:907 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:908 | DONE dir | em 16 16 | 0067ba | (6 bytes)   |         .word nt_tor, xt_digitq, 00576f 
5317:908 | DONE dir | em 16 16 |        |             |                 ae 67 34 57 6f 57        --  . g 4 W o W
5317:909 | DONE dir | em 16 16 | 0067c0 | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
5317:909 | DONE dir | em 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
5317:910 | DONE wsp | em 16 16 |        |             |
5317:911 | DONE lbl | em 16 16 | 0067c6 |             | nt_bounds                            
5317:912 | DONE dir | em 16 16 | 0067c6 | (2 bytes)   |         .byte 6, { NC }              
5317:912 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5317:913 | DONE dir | em 16 16 | 0067c8 | (6 bytes)   |         .word nt_digitq, xt_bounds, 0055a9 
5317:913 | DONE dir | em 16 16 |        |             |                 b8 67 a0 55 a9 55        --  . g . U . U
5317:914 | DONE dir | em 16 16 | 0067ce | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
5317:914 | DONE dir | em 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
5317:915 | DONE wsp | em 16 16 |        |             |
5317:916 | DONE lbl | em 16 16 | 0067d4 |             | nt_over                              
5317:917 | DONE dir | em 16 16 | 0067d4 | (2 bytes)   |         .byte 4, { NC }              
5317:917 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:918 | DONE dir | em 16 16 | 0067d6 | (6 bytes)   |         .word nt_bounds, xt_over, 005b50 
5317:918 | DONE dir | em 16 16 |        |             |                 c6 67 4a 5b 50 5b        --  . g J [ P [
5317:919 | DONE dir | em 16 16 | 0067dc | (4 bytes)   |         .byte 6f, 76, 65, 72         
5317:919 | DONE dir | em 16 16 |        |             |                 6f 76 65 72              --  o v e r
5317:920 | DONE wsp | em 16 16 |        |             |
5317:921 | DONE lbl | em 16 16 | 0067e0 |             | nt_fetch                             
5317:922 | DONE dir | em 16 16 | 0067e0 | (2 bytes)   |         .byte 1, { NC }              
5317:922 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:923 | DONE dir | em 16 16 | 0067e2 | (6 bytes)   |         .word nt_over, xt_fetch, 0052d9 
5317:923 | DONE dir | em 16 16 |        |             |                 d4 67 d5 52 d9 52        --  . g . R . R
5317:924 | DONE dir | em 16 16 | 0067e8 | (1 bytes)   |         .byte 40                     
5317:924 | DONE dir | em 16 16 |        |             |                 40                       --  @
5317:925 | DONE wsp | em 16 16 |        |             |
5317:926 | DONE lbl | em 16 16 | 0067e9 |             | nt_store                             
5317:927 | DONE dir | em 16 16 | 0067e9 | (2 bytes)   |         .byte 1, { NC }              
5317:927 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5317:928 | DONE dir | em 16 16 | 0067eb | (6 bytes)   |         .word nt_fetch, xt_store, 0052d4 
5317:928 | DONE dir | em 16 16 |        |             |                 e0 67 c9 52 d4 52        --  . g . R . R
5317:929 | DONE dir | em 16 16 | 0067f1 | (1 bytes)   |         .byte 21                     
5317:929 | DONE dir | em 16 16 |        |             |                 21                       --  !
5317:930 | DONE wsp | em 16 16 |        |             |
5317:931 | DONE lbl | em 16 16 | 0067f2 |             | nt_swap                              
5317:932 | DONE dir | em 16 16 | 0067f2 | (2 bytes)   |         .byte 4, { NC }              
5317:932 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:933 | DONE dir | em 16 16 | 0067f4 | (6 bytes)   |         .word nt_store, xt_swap, 005dc1 
5317:933 | DONE dir | em 16 16 |        |             |                 e9 67 bc 5d c1 5d        --  . g . ] . ]
5317:934 | DONE dir | em 16 16 | 0067fa | (4 bytes)   |         .byte 73, 77, 61, 70         
5317:934 | DONE dir | em 16 16 |        |             |                 73 77 61 70              --  s w a p
5317:935 | DONE wsp | em 16 16 |        |             |
5317:936 | DONE lbl | em 16 16 | 0067fe |             | nt_dup                               
5317:937 | DONE dir | em 16 16 | 0067fe | (2 bytes)   |         .byte 3, { NC }              
5317:937 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5317:938 | DONE dir | em 16 16 | 006800 | (6 bytes)   |         .word nt_swap, xt_dup, 005816 
5317:938 | DONE dir | em 16 16 |        |             |                 f2 67 12 58 16 58        --  . g . X . X
5317:939 | DONE dir | em 16 16 | 006806 | (3 bytes)   |         .byte 64, 75, 70             
5317:939 | DONE dir | em 16 16 |        |             |                 64 75 70                 --  d u p
5317:940 | DONE wsp | em 16 16 |        |             |
5317:941 | DONE cmt | em 16 16 |        |             | ; DROP is always the first entry in dictionary
5317:942 | DONE lbl | em 16 16 | 006809 |             | nt_drop                              
5317:943 | DONE dir | em 16 16 | 006809 | (2 bytes)   |         .byte 4, { NC }              
5317:943 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5317:944 | DONE dir | em 16 16 | 00680b | (6 bytes)   |         .word nt_dup, xt_drop, 0057f3 
5317:944 | DONE dir | em 16 16 |        |             |                 fe 67 ef 57 f3 57        --  . g . W . W
5317:945 | DONE dir | em 16 16 | 006811 | (4 bytes)   |         .byte 64, 72, 6f, 70         
5317:945 | DONE dir | em 16 16 |        |             |                 64 72 6f 70              --  d r o p
5317:946 | DONE wsp | em 16 16 |        |             |
5317:947 | DONE cmt | em 16 16 |        |             | ; END
5318:000 | DONE wsp | em 16 16 |        |             |
5319:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5320:000 | DONE cmt | em 16 16 |        |             | ; CODE FIELD ROUTINES
5321:000 | DONE wsp | em 16 16 |        |             |
5322:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5323:000 | DONE cmt | em 16 16 |        |             | ; DOCONST
5324:000 | DONE cmt | em 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
5325:000 | DONE cmt | em 16 16 |        |             | ; the stack
5326:000 | DONE lbl | em 16 16 | 006815 |             | doconst                              
5327:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5328:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5329:000 | DONE ins | em 16 16 | 006815 | ca          |                 dex                  make room on Data Stack
5330:000 | DONE ins | em 16 16 | 006816 | ca          |                 dex                  
5331:000 | DONE ins | em 16 16 | 006817 | 94 00       |                 sty.dx 00            
5332:000 | DONE wsp | em 16 16 |        |             |
5333:000 | DONE cmt | em 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
5334:000 | DONE cmt | em 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
5335:000 | DONE ins | em 16 16 | 006819 | 68          |                 pla                  get the return address
5336:000 | DONE ins | em 16 16 | 00681a | 85 1c       |                 sta.d 00001c         
5337:000 | DONE wsp | em 16 16 |        |             |
5338:000 | DONE cmt | em 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
5339:000 | DONE cmt | em 16 16 |        |             |                 ; address handling
5340:000 | DONE ins | em 16 16 | 00681c | a0 01 00    |                 ldy.# 0001           
5341:000 | DONE ins | em 16 16 | 00681f | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
5342:000 | DONE ins | em 16 16 | 006821 | a8          |                 tay                  
5343:000 | DONE wsp | em 16 16 |        |             |
5344:000 | DONE ins | em 16 16 | 006822 | 60          |                 rts                  takes us to original caller
5345:000 | DONE wsp | em 16 16 |        |             |
5346:000 | DONE wsp | em 16 16 |        |             |
5347:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5348:000 | DONE cmt | em 16 16 |        |             | ; DODEFER
5349:000 | DONE cmt | em 16 16 |        |             | ; Execute a DEFER statement at runtime: Execute the address we find after the
5350:000 | DONE cmt | em 16 16 |        |             | ; caller in the Data Field
5351:000 | DONE lbl | em 16 16 | 006823 |             | dodefer                              
5352:000 | DONE cmt | em 16 16 |        |             |                 ; the xt we need is stored in the two bytes after the JSR return
5353:000 | DONE cmt | em 16 16 |        |             |                 ; address, which is what is on top of the Retun Stack. So all we
5354:000 | DONE cmt | em 16 16 |        |             |                 ; have to do is replace our return jump with what we find there
5355:000 | DONE ins | em 16 16 | 006823 | 68          |                 pla                  this is the address where we find the xt ...
5356:000 | DONE ins | em 16 16 | 006824 | 1a          |                 inc.a                ... except one byte later
5357:000 | DONE ins | em 16 16 | 006825 | 85 1c       |                 sta.d 00001c         
5358:000 | DONE ins | em 16 16 | 006827 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
5359:000 | DONE ins | em 16 16 | 006829 | 3a          |                 dec.a                Now we need to move one byte back
5360:000 | DONE ins | em 16 16 | 00682a | 48          |                 pha                  Return new address
5361:000 | DONE wsp | em 16 16 |        |             |
5362:000 | DONE ins | em 16 16 | 00682b | 60          |                 rts                  This is actually a jump to the new target
5363:000 | DONE wsp | em 16 16 |        |             |
5364:000 | DONE lbl | em 16 16 | 00682c |             | defer_error                          
5365:000 | DONE cmt | em 16 16 |        |             |                 ; if the defer has not been defined with an IS word, we land
5366:000 | DONE cmt | em 16 16 |        |             |                 ; here by default
5367:000 | DONE ins | em 16 16 | 00682c | a9 6d 6f    |                 lda.# 006f6d         
5368:000 | DONE ins | em 16 16 | 00682f | 4c cb 68    |                 jmp 0068cb           
5369:000 | DONE wsp | em 16 16 |        |             |
5370:000 | DONE wsp | em 16 16 |        |             |
5371:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5372:000 | DONE cmt | em 16 16 |        |             | ; DODOES
5373:000 | DONE cmt | em 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
5374:000 | DONE cmt | em 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
5375:000 | DONE lbl | em 16 16 | 006832 |             | dodoes                               
5376:000 | DONE cmt | em 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
5377:000 | DONE cmt | em 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
5378:000 | DONE cmt | em 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
5379:000 | DONE cmt | em 16 16 |        |             |                 ; works
5380:000 | DONE ins | em 16 16 | 006832 | 68          |                 pla                  
5381:000 | DONE ins | em 16 16 | 006833 | 1a          |                 inc.a                
5382:000 | DONE ins | em 16 16 | 006834 | 85 20       |                 sta.d 000020         
5383:000 | DONE wsp | em 16 16 |        |             |
5384:000 | DONE cmt | em 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
5385:000 | DONE cmt | em 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
5386:000 | DONE cmt | em 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
5387:000 | DONE ins | em 16 16 | 006836 | ca          |                 dex                  
5388:000 | DONE ins | em 16 16 | 006837 | ca          |                 dex                  
5389:000 | DONE ins | em 16 16 | 006838 | 94 00       |                 sty.dx 00            
5390:000 | DONE wsp | em 16 16 |        |             |
5391:000 | DONE ins | em 16 16 | 00683a | 7a          |                 ply                  
5392:000 | DONE ins | em 16 16 | 00683b | c8          |                 iny                  
5393:000 | DONE wsp | em 16 16 |        |             |
5394:000 | DONE cmt | em 16 16 |        |             |                 ; This leaves the return address from the original main routine
5395:000 | DONE cmt | em 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
5396:000 | DONE cmt | em 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
5397:000 | DONE cmt | em 16 16 |        |             |                 ; will take us back to the main routine
5398:000 | DONE ins | em 16 16 | 00683c | 6c 20 00    |                 jmp.i 000020         JMP (TMP3)
5399:000 | DONE wsp | em 16 16 |        |             |
5400:000 | DONE wsp | em 16 16 |        |             |
5401:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5402:000 | DONE cmt | em 16 16 |        |             | ; DOVAR
5403:000 | DONE cmt | em 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
5404:000 | DONE cmt | em 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
5405:000 | DONE cmt | em 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
5406:000 | DONE cmt | em 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
5407:000 | DONE cmt | em 16 16 |        |             | ; routine installed with CREATE
5408:000 | DONE lbl | em 16 16 | 00683f |             | dovar                                
5409:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5410:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5411:000 | DONE ins | em 16 16 | 00683f | ca          |                 dex                  make room on Data Stack
5412:000 | DONE ins | em 16 16 | 006840 | ca          |                 dex                  
5413:000 | DONE ins | em 16 16 | 006841 | 94 00       |                 sty.dx 00            
5414:000 | DONE wsp | em 16 16 |        |             |
5415:000 | DONE cmt | em 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
5416:000 | DONE cmt | em 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
5417:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5418:000 | DONE ins | em 16 16 | 006843 | 7a          |                 ply                  value is now TOS
5419:000 | DONE ins | em 16 16 | 006844 | c8          |                 iny                  add one because of 65816's address handling
5420:000 | DONE wsp | em 16 16 |        |             |
5421:000 | DONE ins | em 16 16 | 006845 | 60          |                 rts                  takes us to original caller
5422:000 | DONE wsp | em 16 16 |        |             |
5423:000 | DONE wsp | em 16 16 |        |             |
5424:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5425:000 | DONE cmt | em 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
5426:000 | DONE wsp | em 16 16 |        |             |
5427:000 | DONE wsp | em 16 16 |        |             |
5428:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5429:000 | DONE cmt | em 16 16 |        |             | ; INTERPRET
5430:000 | DONE cmt | em 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
5431:000 | DONE cmt | em 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
5432:000 | DONE cmt | em 16 16 |        |             | ; string is in ciblen
5433:000 | DONE lbl | em 16 16 | 006846 |             | interpret                            
5434:000 | DONE lbl | em 16 16 | 006846 |             | interpret_loop                       
5435:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5436:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5437:000 | DONE cmt | em 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
5438:000 | DONE cmt | em 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
5439:000 | DONE cmt | em 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
5440:000 | DONE cmt | em 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
5441:000 | DONE cmt | em 16 16 |        |             |                 ; PARSE doesn't
5442:000 | DONE ins | em 16 16 | 006846 | 20 6a 5b    |                 jsr 005b6a           ( "string" -- addr u )
5443:000 | DONE wsp | em 16 16 |        |             |
5444:000 | DONE cmt | em 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
5445:000 | DONE cmt | em 16 16 |        |             |                 ; in the line and we need to go get a new line
5446:000 | DONE ins | em 16 16 | 006849 | 98          |                 tya                  force flag check
5447:000 | DONE ins | em 16 16 | 00684a | f0 52       |                 beq 00689e           
5448:000 | DONE wsp | em 16 16 |        |             |
5449:000 | DONE cmt | em 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
5450:000 | DONE cmt | em 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
5451:000 | DONE cmt | em 16 16 |        |             |                 ; we have to go see if it is a number
5452:000 | DONE ins | em 16 16 | 00684c | 20 e8 53    |                 jsr 0053e8           TODO convert this to assembler
5453:000 | DONE ins | em 16 16 | 00684f | 20 ae 58    |                 jsr 0058ae           ( addr u -- nt | 0 )
5454:000 | DONE wsp | em 16 16 |        |             |
5455:000 | DONE cmt | em 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
5456:000 | DONE ins | em 16 16 | 006852 | 98          |                 tya                  
5457:000 | DONE ins | em 16 16 | 006853 | d0 15       |                 bne 00686a           
5458:000 | DONE wsp | em 16 16 |        |             |
5459:000 | DONE cmt | em 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
5460:000 | DONE cmt | em 16 16 |        |             |                 ; a number.
5461:000 | DONE ins | em 16 16 | 006855 | 20 ef 57    |                 jsr 0057ef           TODO convert this to assembler
5462:000 | DONE wsp | em 16 16 |        |             |
5463:000 | DONE wsp | em 16 16 |        |             |
5464:000 | DONE cmt | em 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
5465:000 | DONE cmt | em 16 16 |        |             |                 ; complaining for us
5466:000 | DONE ins | em 16 16 | 006858 | 20 b7 5a    |                 jsr 005ab7           ( addr u -- u | d )
5467:000 | DONE wsp | em 16 16 |        |             |
5468:000 | DONE cmt | em 16 16 |        |             |                 ; If we're interpreting, we're done
5469:000 | DONE ins | em 16 16 | 00685b | a5 14       |                 lda.d 000014         
5470:000 | DONE ins | em 16 16 | 00685d | f0 e7       |                 beq 006846           
5471:000 | DONE wsp | em 16 16 |        |             |
5472:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so there is a bit more work. Note this
5473:000 | DONE cmt | em 16 16 |        |             |                 ; doesn't work with double-cell numbers, only single-cell
5474:000 | DONE ins | em 16 16 | 00685f | f4 e8 59    |                 phe.# 0059e8         LITERAL runtime
5475:000 | DONE ins | em 16 16 | 006862 | 20 aa 68    |                 jsr 0068aa           
5476:000 | DONE wsp | em 16 16 |        |             |
5477:000 | DONE cmt | em 16 16 |        |             |                 ; compile our number
5478:000 | DONE cmt | em 16 16 |        |             |                 ; TODO convert this to assembler
5479:000 | DONE ins | em 16 16 | 006865 | 20 40 52    |                 jsr 005240           
5480:000 | DONE wsp | em 16 16 |        |             |
5481:000 | DONE cmt | em 16 16 |        |             |                 ; That was so much fun, let's do it again!
5482:000 | DONE ins | em 16 16 | 006868 | 80 dc       |                 bra 006846           
5483:000 | DONE wsp | em 16 16 |        |             |
5484:000 | DONE lbl | em 16 16 | 00686a |             | interpret_got_name_token             
5485:000 | DONE cmt | em 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
5486:000 | DONE cmt | em 16 16 |        |             |                 ; though, which is four bytes father down.
5487:000 | DONE wsp | em 16 16 |        |             |
5488:000 | DONE cmt | em 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
5489:000 | DONE cmt | em 16 16 |        |             |                 ; really fast if Y is TOS
5490:000 | DONE ins | em 16 16 | 00686a | e8          |                 inx                  
5491:000 | DONE ins | em 16 16 | 00686b | e8          |                 inx                  
5492:000 | DONE ins | em 16 16 | 00686c | e8          |                 inx                  
5493:000 | DONE ins | em 16 16 | 00686d | e8          |                 inx                  
5494:000 | DONE wsp | em 16 16 |        |             |
5495:000 | DONE cmt | em 16 16 |        |             |                 ; This is a quicker
5496:000 | DONE cmt | em 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
5497:000 | DONE cmt | em 16 16 |        |             |                 ; error handling and compilation stuff.
5498:000 | DONE ins | em 16 16 | 00686e | 84 1a       |                 sty.d 00001a         
5499:000 | DONE ins | em 16 16 | 006870 | c8          |                 iny                  
5500:000 | DONE ins | em 16 16 | 006871 | c8          |                 iny                  
5501:000 | DONE ins | em 16 16 | 006872 | c8          |                 iny                  
5502:000 | DONE ins | em 16 16 | 006873 | c8          |                 iny                  
5503:000 | DONE ins | em 16 16 | 006874 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5504:000 | DONE ins | em 16 16 | 006877 | a8          |                 tay                  xt is TOS
5505:000 | DONE wsp | em 16 16 |        |             |
5506:000 | DONE cmt | em 16 16 |        |             |                 ; See if we are in interpret or compile mode
5507:000 | DONE ins | em 16 16 | 006878 | a5 14       |                 lda.d 000014         
5508:000 | DONE ins | em 16 16 | 00687a | d0 14       |                 bne 006890           
5509:000 | DONE wsp | em 16 16 |        |             |
5510:000 | DONE cmt | em 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
5511:000 | DONE cmt | em 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
5512:000 | DONE cmt | em 16 16 |        |             |                 ; illegal.
5513:000 | DONE ins | em 16 16 | 00687c | b2 1a       |                 lda.di 00001a        
5514:000 | DONE ins | em 16 16 | 00687e | eb          |                 xba                  flags are MSB
5515:000 | DONE ins | em 16 16 | 00687f | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
5516:000 | DONE ins | em 16 16 | 006882 | f0 06       |                 beq 00688a           
5517:000 | DONE wsp | em 16 16 |        |             |
5518:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if we can print offending word first
5519:000 | DONE ins | em 16 16 | 006884 | a9 4c 6f    |                 lda.# 006f4c         
5520:000 | DONE ins | em 16 16 | 006887 | 4c cb 68    |                 jmp 0068cb           
5521:000 | DONE wsp | em 16 16 |        |             |
5522:000 | DONE lbl | em 16 16 | 00688a |             | interpret_interpret                  
5523:000 | DONE cmt | em 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
5524:000 | DONE cmt | em 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
5525:000 | DONE cmt | em 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
5526:000 | DONE cmt | em 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
5527:000 | DONE cmt | em 16 16 |        |             |                 ; instead, which is actually slightly slower
5528:000 | DONE ins | em 16 16 | 00688a | 20 73 58    |                 jsr 005873           
5529:000 | DONE wsp | em 16 16 |        |             |
5530:000 | DONE cmt | em 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
5531:000 | DONE ins | em 16 16 | 00688d | 4c 46 68    |                 jmp 006846           
5532:000 | DONE wsp | em 16 16 |        |             |
5533:000 | DONE lbl | em 16 16 | 006890 |             | interpret_compile                    
5534:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
5535:000 | DONE cmt | em 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
5536:000 | DONE cmt | em 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
5537:000 | DONE cmt | em 16 16 |        |             |                 ; is easier
5538:000 | DONE ins | em 16 16 | 006890 | b2 1a       |                 lda.di 00001a        
5539:000 | DONE ins | em 16 16 | 006892 | eb          |                 xba                  flags are MSB
5540:000 | DONE ins | em 16 16 | 006893 | 29 02 00    |                 and.# IM             Mask all but IM bit
5541:000 | DONE ins | em 16 16 | 006896 | d0 f2       |                 bne 00688a           IMMEDIATE word, execute right now
5542:000 | DONE wsp | em 16 16 |        |             |
5543:000 | DONE cmt | em 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
5544:000 | DONE ins | em 16 16 | 006898 | 20 51 56    |                 jsr 005651           
5545:000 | DONE ins | em 16 16 | 00689b | 4c 46 68    |                 jmp 006846           
5546:000 | DONE wsp | em 16 16 |        |             |
5547:000 | DONE lbl | em 16 16 | 00689e |             | interpret_line_done                  
5548:000 | DONE cmt | em 16 16 |        |             |                 ; drop stuff from PARSE_NAME
5549:000 | DONE ins | em 16 16 | 00689e | b4 02       |                 ldy.dx 02            
5550:000 | DONE ins | em 16 16 | 0068a0 | e8          |                 inx                  
5551:000 | DONE ins | em 16 16 | 0068a1 | e8          |                 inx                  
5552:000 | DONE ins | em 16 16 | 0068a2 | e8          |                 inx                  
5553:000 | DONE ins | em 16 16 | 0068a3 | e8          |                 inx                  
5554:000 | DONE wsp | em 16 16 |        |             |
5555:000 | DONE ins | em 16 16 | 0068a4 | 60          |                 rts                  
5556:000 | DONE wsp | em 16 16 |        |             |
5557:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5558:000 | DONE cmt | em 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
5559:000 | DONE cmt | em 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
5560:000 | DONE cmt | em 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
5561:000 | DONE cmt | em 16 16 |        |             | ; address to be compiled on the Return Stack with
5562:000 | DONE cmt | em 16 16 |        |             | ;
5563:000 | DONE cmt | em 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
5564:000 | DONE cmt | em 16 16 |        |             | ;
5565:000 | DONE cmt | em 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
5566:000 | DONE cmt | em 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
5567:000 | DONE cmt | em 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
5568:000 | DONE cmt | em 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
5569:000 | DONE cmt | em 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
5570:000 | DONE wsp | em 16 16 |        |             |
5571:000 | DONE dir | em 16 16 |        |             |         .!a16                        paranoid
5572:000 | DONE lbl | em 16 16 | 0068a5 |             | cmpl_word                            
5573:000 | DONE ins | em 16 16 | 0068a5 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
5574:000 | DONE ins | em 16 16 | 0068a8 | 80 08       |                 bra 0068b2           
5575:000 | DONE lbl | em 16 16 | 0068aa |             | cmpl_subroutine                      
5576:000 | DONE ins | em 16 16 | 0068aa | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
5577:000 | DONE ins | em 16 16 | 0068ad | 80 03       |                 bra 0068b2           
5578:000 | DONE lbl | em 16 16 | 0068af |             | cmpl_jump                            
5579:000 | DONE ins | em 16 16 | 0068af | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
5580:000 | DONE lbl | em 16 16 | 0068b2 |             | cmpl_common                          
5581:000 | DONE cmt | em 16 16 |        |             |                 ; we're going to need the Y register to get anything done
5582:000 | DONE ins | em 16 16 | 0068b2 | 84 24       |                 sty.d 000024         
5583:000 | DONE wsp | em 16 16 |        |             |
5584:000 | DONE ins | em 16 16 | 0068b4 | a8          |                 tay                  force flag check
5585:000 | DONE ins | em 16 16 | 0068b5 | f0 08       |                 beq 0068bf           came in through cmpl_word, just compile body
5586:000 | DONE wsp | em 16 16 |        |             |
5587:000 | DONE cmt | em 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
5588:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of C, ("c-comma")
5589:000 | DONE ins | em 16 16 | 0068b7 | e2 20       |                 sep 20               
5589:001 | DONE ctl | em  8 16 |        |             |         .!a8
5590:000 | DONE ins | em  8 16 | 0068b9 | 92 00       |                 sta.di 000000        STA (CP)
5591:000 | DONE ins | em  8 16 | 0068bb | c2 20       |                 rep 20               
5591:001 | DONE ctl | em 16 16 |        |             |         .!a16
5592:000 | DONE ins | em 16 16 | 0068bd | e6 00       |                 inc.d 000000         fall through to cmpl_body
5593:000 | DONE lbl | em 16 16 | 0068bf |             | cmpl_body                            
5594:000 | DONE ins | em 16 16 | 0068bf | 7a          |                 ply                  the return address we'll need later
5595:000 | DONE wsp | em 16 16 |        |             |
5596:000 | DONE ins | em 16 16 | 0068c0 | 68          |                 pla                  next value on stack is the word to compile
5597:000 | DONE ins | em 16 16 | 0068c1 | 92 00       |                 sta.di 000000        this is a quicker version of , ("comma")
5598:000 | DONE ins | em 16 16 | 0068c3 | e6 00       |                 inc.d 000000         
5599:000 | DONE ins | em 16 16 | 0068c5 | e6 00       |                 inc.d 000000         
5600:000 | DONE wsp | em 16 16 |        |             |
5601:000 | DONE ins | em 16 16 | 0068c7 | 5a          |                 phy                  make sure we can get back home
5602:000 | DONE wsp | em 16 16 |        |             |
5603:000 | DONE ins | em 16 16 | 0068c8 | a4 24       |                 ldy.d 000024         restore Data Stack
5604:000 | DONE wsp | em 16 16 |        |             |
5605:000 | DONE ins | em 16 16 | 0068ca | 60          |                 rts                  
5606:000 | DONE wsp | em 16 16 |        |             |
5607:000 | DONE wsp | em 16 16 |        |             |
5608:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5609:000 | DONE cmt | em 16 16 |        |             | ; FATAL ERROR
5610:000 | DONE cmt | em 16 16 |        |             | ; Take address of error string from A, print it and then call abort
5611:000 | DONE lbl | em 16 16 | 0068cb |             | error                                
5612:000 | DONE ins | em 16 16 | 0068cb | 20 d1 68    |                 jsr 0068d1           
5613:000 | DONE ins | em 16 16 | 0068ce | 4c ad 50    |                 jmp 0050ad           
5614:000 | DONE wsp | em 16 16 |        |             |
5615:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5616:000 | DONE cmt | em 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
5617:000 | DONE cmt | em 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
5618:000 | DONE cmt | em 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
5619:000 | DONE cmt | em 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
5620:000 | DONE lbl | em 16 16 | 0068d1 |             | print_string                         
5621:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5622:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5623:000 | DONE cmt | em 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
5624:000 | DONE cmt | em 16 16 |        |             |                 ; used it for something already
5625:000 | DONE ins | em 16 16 | 0068d1 | da          |                 phx                  
5626:000 | DONE ins | em 16 16 | 0068d2 | aa          |                 tax                  x16 contains address of string
5627:000 | DONE lbl | em 16 16 | 0068d3 |             | @                                    
5628:000 | DONE ins | em 16 16 | 0068d3 | e2 20       |                 sep 20               
5628:001 | DONE ctl | em  8 16 |        |             |         .!a8
5629:000 | DONE ins | em  8 16 | 0068d5 | bd 00 00    |                 lda.x 0000           LDA $0000,X
5630:000 | DONE ins | em  8 16 | 0068d8 | f0 06       |                 beq 0068e0           
5631:000 | DONE ins | em  8 16 | 0068da | 20 1c 58    |                 jsr 00581c           
5632:000 | DONE ins | em  8 16 | 0068dd | e8          |                 inx                  
5633:000 | DONE ins | em  8 16 | 0068de | 80 f3       |                 bra 0068d3           
5634:000 | DONE wsp | em  8 16 |        |             |
5635:000 | DONE lbl | em  8 16 | 0068e0 |             | print_string_done                    
5636:000 | DONE ins | em  8 16 | 0068e0 | a9 0a       |                 lda.# AscLF          should be CR on some systems
5637:000 | DONE ins | em  8 16 | 0068e2 | 20 1c 58    |                 jsr 00581c           
5638:000 | DONE ins | em  8 16 | 0068e5 | c2 20       |                 rep 20               
5638:001 | DONE ctl | em 16 16 |        |             |         .!a16
5639:000 | DONE ins | em 16 16 | 0068e7 | fa          |                 plx                  
5640:000 | DONE ins | em 16 16 | 0068e8 | 60          |                 rts                  
5641:000 | DONE wsp | em 16 16 |        |             |
5642:000 | DONE wsp | em 16 16 |        |             |
5643:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5644:000 | DONE cmt | em 16 16 |        |             | ; PRINT UNSIGNED NUMBER
5645:000 | DONE cmt | em 16 16 |        |             | ; Is the equivalent to Forth's 0 <# S# #> TYPE or U. without the SPACE at the
5646:000 | DONE cmt | em 16 16 |        |             | ; end. TODO convert this to more assembler for speed
5647:000 | DONE lbl | em 16 16 | 0068e9 |             | print_u                              
5648:000 | DONE ins | em 16 16 | 0068e9 | ca          |                 dex                  0
5649:000 | DONE ins | em 16 16 | 0068ea | ca          |                 dex                  
5650:000 | DONE ins | em 16 16 | 0068eb | 94 00       |                 sty.dx 00            
5651:000 | DONE ins | em 16 16 | 0068ed | a0 00 00    |                 ldy.# 0000           
5652:000 | DONE wsp | em 16 16 |        |             |
5653:000 | DONE ins | em 16 16 | 0068f0 | 20 51 5b    |                 jsr 005b51           <#
5654:000 | DONE ins | em 16 16 | 0068f3 | 84 18       |                 sty.d 000018         
5655:000 | DONE ins | em 16 16 | 0068f5 | b4 00       |                 ldy.dx 00            
5656:000 | DONE ins | em 16 16 | 0068f7 | e8          |                 inx                  
5657:000 | DONE ins | em 16 16 | 0068f8 | e8          |                 inx                  
5658:000 | DONE wsp | em 16 16 |        |             |
5659:000 | DONE ins | em 16 16 | 0068f9 | 20 b1 52    |                 jsr 0052b1           #S
5660:000 | DONE ins | em 16 16 | 0068fc | 20 a2 52    |                 jsr 0052a2           #>
5661:000 | DONE ins | em 16 16 | 0068ff | 4c dd 5d    |                 jmp 005ddd           TYPE - JSR/RTS
5662:000 | DONE wsp | em 16 16 |        |             |
5663:000 | DONE wsp | em 16 16 |        |             |
5664:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5665:000 | DONE cmt | em 16 16 |        |             | ; CONVERT BYTE TO ASCII
5666:000 | DONE cmt | em 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
5667:000 | DONE cmt | em 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
5668:000 | DONE lbl | em 16 16 | 006902 |             | byte_to_ascii                        
5669:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5670:000 | DONE ins | em 16 16 | 006902 | 48          |                 pha                  
5671:000 | DONE cmt | em 16 16 |        |             |                 ; convert high nibble first
5672:000 | DONE ins | em 16 16 | 006903 | 4a          |                 lsr.a                
5673:000 | DONE ins | em 16 16 | 006904 | 4a          |                 lsr.a                
5674:000 | DONE ins | em 16 16 | 006905 | 4a          |                 lsr.a                
5675:000 | DONE ins | em 16 16 | 006906 | 4a          |                 lsr.a                
5676:000 | DONE ins | em 16 16 | 006907 | 20 0b 69    |                 jsr 00690b           
5677:000 | DONE wsp | em 16 16 |        |             |
5678:000 | DONE ins | em 16 16 | 00690a | 68          |                 pla                  
5679:000 | DONE wsp | em 16 16 |        |             |
5680:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to nibble_to_ascii
5681:000 | DONE wsp | em 16 16 |        |             |
5682:000 | DONE wsp | em 16 16 |        |             |
5683:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5684:000 | DONE cmt | em 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
5685:000 | DONE cmt | em 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
5686:000 | DONE cmt | em 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
5687:000 | DONE lbl | em 16 16 | 00690b |             | nibble_to_ascii                      
5688:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5689:000 | DONE ins | em 16 16 | 00690b | 29 0f 00    |                 and.# 000f           
5690:000 | DONE ins | em 16 16 | 00690e | 09 30 00    |                 ora.# 30             
5691:000 | DONE ins | em 16 16 | 006911 | c9 3a 00    |                 cmp.# 003a           '9' + 1
5692:000 | DONE ins | em 16 16 | 006914 | 90 03       |                 bcc 006919           
5693:000 | DONE ins | em 16 16 | 006916 | 69 06 00    |                 adc.# 0006           
5694:000 | DONE lbl | em 16 16 | 006919 |             | @                                    
5695:000 | DONE ins | em 16 16 | 006919 | 20 1c 58    |                 jsr 00581c           
5696:000 | DONE wsp | em 16 16 |        |             |
5697:000 | DONE ins | em 16 16 | 00691c | 60          |                 rts                  
5698:000 | DONE wsp | em 16 16 |        |             |
5699:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5700:000 | DONE cmt | em 16 16 |        |             | ; HIGH-LEVEL WORDS
5701:000 | DONE wsp | em 16 16 |        |             |
5702:000 | DONE cmt | em 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
5703:000 | DONE cmt | em 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
5704:000 | DONE cmt | em 16 16 |        |             | ; or CR/LF is required
5705:000 | DONE lbl | em 16 16 | 00691d |             | hi-start                             
5706:000 | DONE cmt | em 16 16 |        |             |         ; High flow control. Some of these could be realized with CS-ROLL and
5707:000 | DONE cmt | em 16 16 |        |             |         ; CS-PICK instead
5708:000 | DONE dir | em 16 16 | 00691d | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) 
5708:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
5708:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
5708:000 | DONE dir | em 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
5708:000 | DONE dir | em 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
5708:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5708:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5708:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5708:000 | DONE dir | em 16 16 |        |             |                                          -- 
5709:000 | DONE dir | em 16 16 | 006955 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) 
5709:000 | DONE dir | em 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
5709:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
5709:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5709:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5709:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5709:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5710:000 | DONE dir | em 16 16 | 006981 | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) 
5710:000 | DONE dir | em 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
5710:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5710:000 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
5710:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
5710:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
5710:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5710:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5710:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5710:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5711:000 | DONE dir | em 16 16 | 0069c5 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) 
5711:000 | DONE dir | em 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
5711:000 | DONE dir | em 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
5711:000 | DONE dir | em 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
5711:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
5711:000 | DONE dir | em 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
5711:000 | DONE dir | em 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
5711:000 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5711:000 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
5712:000 | DONE dir | em 16 16 | 006a02 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) 
5712:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
5712:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5712:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5712:000 | DONE dir | em 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
5712:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5712:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5712:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5713:000 | DONE dir | em 16 16 | 006a36 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) 
5713:000 | DONE dir | em 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
5713:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5713:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5713:000 | DONE dir | em 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
5713:000 | DONE dir | em 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
5713:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5713:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5713:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5713:000 | DONE dir | em 16 16 |        |             |                                          -- 
5714:000 | DONE wsp | em 16 16 |        |             |
5715:000 | DONE cmt | em 16 16 |        |             |         ; DEFER's friends. Code taken from ANSI Forth specifications. Many of
5716:000 | DONE cmt | em 16 16 |        |             |         ; these will be moved to assembler code in due course
5717:000 | DONE dir | em 16 16 | 006a76 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 21, 20, 3e, 62, 6f, 64, (...) 
5717:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 21  --  :   d e f e r !
5717:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 21  --    > b o d y   !
5717:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5718:000 | DONE dir | em 16 16 | 006a89 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 40, 20, 3e, 62, 6f, 64, (...) 
5718:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 40  --  :   d e f e r @
5718:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 40  --    > b o d y   @
5718:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5719:000 | DONE dir | em 16 16 | 006a9c | (76 bytes)  |         .byte 3a, 20, 69, 73, 20, 73, 74, 61, 74, 65, 20, 40, 20, (...) 
5719:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 73 20 73 74 61  --  :   i s   s t a
5719:000 | DONE dir | em 16 16 |        |             |                 74 65 20 40 20 69 66 20  --  t e   @   i f  
5719:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5719:000 | DONE dir | em 16 16 |        |             |                 20 5b 27 5d 20 70 6f 73  --    [ ' ]   p o s
5719:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 64 65  --  t p o n e   d e
5719:000 | DONE dir | em 16 16 |        |             |                 66 65 72 21 20 65 6c 73  --  f e r !   e l s
5719:000 | DONE dir | em 16 16 |        |             |                 65 20 27 20 64 65 66 65  --  e   '   d e f e
5719:000 | DONE dir | em 16 16 |        |             |                 72 21 20 74 68 65 6e 20  --  r !   t h e n  
5719:000 | DONE dir | em 16 16 |        |             |                 3b 20 69 6d 6d 65 64 69  --  ;   i m m e d i
5719:000 | DONE dir | em 16 16 |        |             |                 61 74 65 20              --  a t e  
5720:000 | DONE dir | em 16 16 | 006ae8 | (83 bytes)  |         .byte 3a, 20, 61, 63, 74, 69, 6f, 6e, 2d, 6f, 66, 20, 73, (...) 
5720:000 | DONE dir | em 16 16 |        |             |                 3a 20 61 63 74 69 6f 6e  --  :   a c t i o n
5720:000 | DONE dir | em 16 16 |        |             |                 2d 6f 66 20 73 74 61 74  --  - o f   s t a t
5720:000 | DONE dir | em 16 16 |        |             |                 65 20 40 20 69 66 20 70  --  e   @   i f   p
5720:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5720:000 | DONE dir | em 16 16 |        |             |                 5b 27 5d 20 70 6f 73 74  --  [ ' ]   p o s t
5720:000 | DONE dir | em 16 16 |        |             |                 70 6f 6e 65 20 64 65 66  --  p o n e   d e f
5720:000 | DONE dir | em 16 16 |        |             |                 65 72 40 20 65 6c 73 65  --  e r @   e l s e
5720:000 | DONE dir | em 16 16 |        |             |                 20 27 20 64 65 66 65 72  --    '   d e f e r
5720:000 | DONE dir | em 16 16 |        |             |                 40 20 74 68 65 6e 20 3b  --  @   t h e n   ;
5720:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5720:000 | DONE dir | em 16 16 |        |             |                 74 65 20                 --  t e  
5721:000 | DONE wsp | em 16 16 |        |             |
5722:000 | DONE cmt | em 16 16 |        |             |         ; Output and comment words
5723:000 | DONE dir | em 16 16 | 006b3b | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) 
5723:000 | DONE dir | em 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
5723:000 | DONE dir | em 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
5723:000 | DONE dir | em 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
5723:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5723:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5724:000 | DONE dir | em 16 16 | 006b60 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) 
5724:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
5724:000 | DONE dir | em 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
5724:000 | DONE dir | em 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
5724:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5724:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5725:000 | DONE wsp | em 16 16 |        |             |
5726:000 | DONE cmt | em 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
5727:000 | DONE cmt | em 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
5728:000 | DONE cmt | em 16 16 |        |             |         ; stuff
5729:000 | DONE dir | em 16 16 | 006b85 | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
5729:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
5729:000 | DONE dir | em 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
5729:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5729:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5729:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5730:000 | DONE dir | em 16 16 | 006ba6 | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
5730:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
5730:000 | DONE dir | em 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
5730:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5730:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
5731:000 | DONE dir | em 16 16 | 006bc0 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
5731:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
5731:000 | DONE dir | em 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
5731:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5731:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5731:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5732:000 | DONE dir | em 16 16 | 006be1 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
5732:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
5732:000 | DONE dir | em 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
5732:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5732:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
5733:000 | DONE wsp | em 16 16 |        |             |
5734:000 | DONE cmt | em 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
5735:000 | DONE cmt | em 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
5736:000 | DONE cmt | em 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
5737:000 | DONE cmt | em 16 16 |        |             |         ; . (DOT) and U. are hard-coded because there are used by other words
5738:000 | DONE dir | em 16 16 | 006bfb | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
5738:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
5738:000 | DONE dir | em 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
5738:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5738:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5738:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5738:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5739:000 | DONE dir | em 16 16 | 006c27 | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
5739:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
5739:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
5739:000 | DONE dir | em 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
5739:000 | DONE dir | em 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
5739:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5739:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5739:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5739:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5740:000 | DONE dir | em 16 16 | 006c63 | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
5740:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
5740:000 | DONE dir | em 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
5740:000 | DONE dir | em 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
5740:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5741:000 | DONE dir | em 16 16 | 006c7f | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
5741:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
5741:000 | DONE dir | em 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
5741:000 | DONE dir | em 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
5741:000 | DONE dir | em 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
5741:000 | DONE dir | em 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
5741:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5742:000 | DONE dir | em 16 16 | 006caa | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
5742:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
5742:000 | DONE dir | em 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
5742:000 | DONE dir | em 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
5742:000 | DONE dir | em 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
5742:000 | DONE dir | em 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
5742:000 | DONE dir | em 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
5743:000 | DONE dir | em 16 16 | 006cd8 | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
5743:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
5743:000 | DONE dir | em 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
5743:000 | DONE dir | em 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
5743:000 | DONE dir | em 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
5743:000 | DONE dir | em 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
5743:000 | DONE dir | em 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
5743:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
5743:000 | DONE dir | em 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
5744:000 | DONE wsp | em 16 16 |        |             |
5745:000 | DONE cmt | em 16 16 |        |             |         ; LOOP constructs. See discussion at
5746:000 | DONE cmt | em 16 16 |        |             | 	; https://blogs.msdn.microsoft.com/ashleyf/2011/02/06/loopty-do-i-loop/
5747:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": do postpone (do) here ; immediate compile-only "
5748:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": +loop postpone (+loop) , postpone unloop ; immediate compile-only "
5749:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": loop postpone 1 postpone (+loop) , postpone unloop ; immediate compile-only "
5750:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": leave postpone branch here swap 0 , ; immediate compile-only "
5751:000 | DONE wsp | em 16 16 |        |             |
5752:000 | DONE cmt | em 16 16 |        |             |         ; DUMP is a longish word we'll want to modify for a while until we are
5753:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
5754:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": dump bounds ?do cr i 4 u.r space"
5755:000 | DONE cmt | em 16 16 |        |             | 	; .byte "16 0 do i j + c@ 0 <# # #s #> type space loop 16 +loop ;"
5756:000 | DONE wsp | em 16 16 |        |             |
5757:000 | DONE cmt | em 16 16 |        |             |         ; SEE is a longish word we'll want to modify for a while until we are
5758:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
5759:000 | DONE dir | em 16 16 | 006d15 | (55 bytes)  |         .byte 3a, 20, 73, 65, 65, 20, 70, 61, 72, 73, 65, 2d, 6e, (...) 
5759:000 | DONE dir | em 16 16 |        |             |                 3a 20 73 65 65 20 70 61  --  :   s e e   p a
5759:000 | DONE dir | em 16 16 |        |             |                 72 73 65 2d 6e 61 6d 65  --  r s e - n a m e
5759:000 | DONE dir | em 16 16 |        |             |                 20 66 69 6e 64 2d 6e 61  --    f i n d - n a
5759:000 | DONE dir | em 16 16 |        |             |                 6d 65 20 64 75 70 20 30  --  m e   d u p   0
5759:000 | DONE dir | em 16 16 |        |             |                 3d 20 61 62 6f 72 74 22  --  =   a b o r t "
5759:000 | DONE dir | em 16 16 |        |             |                 20 4e 6f 20 73 75 63 68  --    N o   s u c h
5759:000 | DONE dir | em 16 16 |        |             |                 20 6e 61 6d 65 22 20     --    n a m e "  
5760:000 | DONE dir | em 16 16 | 006d4c | (38 bytes)  |         .byte 62, 61, 73, 65, 20, 40, 20, 3e, 72, 20, 68, 65, 78, (...) 
5760:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 40 20 3e  --  b a s e   @   >
5760:000 | DONE dir | em 16 16 |        |             |                 72 20 68 65 78 20 64 75  --  r   h e x   d u
5760:000 | DONE dir | em 16 16 |        |             |                 70 20 63 72 20 73 70 61  --  p   c r   s p a
5760:000 | DONE dir | em 16 16 |        |             |                 63 65 20 2e 22 20 6e 74  --  c e   . "   n t
5760:000 | DONE dir | em 16 16 |        |             |                 3a 20 22 20 2e 20        --  :   "   .  
5761:000 | DONE dir | em 16 16 | 006d72 | (27 bytes)  |         .byte 64, 75, 70, 20, 34, 20, 2b, 20, 40, 20, 73, 70, 61, (...) 
5761:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 34 20 2b 20  --  d u p   4   +  
5761:000 | DONE dir | em 16 16 |        |             |                 40 20 73 70 61 63 65 20  --  @   s p a c e  
5761:000 | DONE dir | em 16 16 |        |             |                 2e 22 20 78 74 3a 20 22  --  . "   x t :   "
5761:000 | DONE dir | em 16 16 |        |             |                 20 2e 20                 --    .  
5762:000 | DONE dir | em 16 16 | 006d8d | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 31, 20, 61, (...) 
5762:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5762:000 | DONE dir | em 16 16 |        |             |                 40 20 31 20 61 6e 64 20  --  @   1   a n d  
5762:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5762:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 4e 43 22 20  --    . "   N C "  
5762:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5763:000 | DONE dir | em 16 16 | 006db2 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 32, 20, 61, (...) 
5763:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5763:000 | DONE dir | em 16 16 |        |             |                 40 20 32 20 61 6e 64 20  --  @   2   a n d  
5763:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5763:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 49 4d 22 20  --    . "   I M "  
5763:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5764:000 | DONE dir | em 16 16 | 006dd7 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 34, 20, 61, (...) 
5764:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5764:000 | DONE dir | em 16 16 |        |             |                 40 20 34 20 61 6e 64 20  --  @   4   a n d  
5764:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5764:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 43 4f 22 20  --    . "   C O "  
5764:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5765:000 | DONE dir | em 16 16 | 006dfc | (57 bytes)  |         .byte 64, 75, 70, 20, 63, 72, 20, 73, 70, 61, 63, 65, 20, (...) 
5765:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 63 72 20 73  --  d u p   c r   s
5765:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 20 2e 22 20  --  p a c e   . "  
5765:000 | DONE dir | em 16 16 |        |             |                 73 69 7a 65 20 28 64 65  --  s i z e   ( d e
5765:000 | DONE dir | em 16 16 |        |             |                 63 69 6d 61 6c 29 3a 20  --  c i m a l ) :  
5765:000 | DONE dir | em 16 16 |        |             |                 22 20 64 65 63 69 6d 61  --  "   d e c i m a
5765:000 | DONE dir | em 16 16 |        |             |                 6c 20 77 6f 72 64 73 69  --  l   w o r d s i
5765:000 | DONE dir | em 16 16 |        |             |                 7a 65 20 64 75 70 20 2e  --  z e   d u p   .
5765:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5766:000 | DONE dir | em 16 16 | 006e35 | (40 bytes)  |         .byte 73, 77, 61, 70, 20, 6e, 61, 6d, 65, 3e, 69, 6e, 74, (...) 
5766:000 | DONE dir | em 16 16 |        |             |                 73 77 61 70 20 6e 61 6d  --  s w a p   n a m
5766:000 | DONE dir | em 16 16 |        |             |                 65 3e 69 6e 74 20 73 77  --  e > i n t   s w
5766:000 | DONE dir | em 16 16 |        |             |                 61 70 20 68 65 78 20 64  --  a p   h e x   d
5766:000 | DONE dir | em 16 16 |        |             |                 75 6d 70 20 72 3e 20 62  --  u m p   r >   b
5766:000 | DONE dir | em 16 16 |        |             |                 61 73 65 20 21 20 3b 20  --  a s e   !   ;  
5766:000 | DONE dir | em 16 16 |        |             |                                          -- 
5767:000 | DONE wsp | em 16 16 |        |             |
5768:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5769:000 | DONE cmt | em 16 16 |        |             | ; USER INCLUDES
5770:000 | DONE wsp | em 16 16 |        |             |
5771:000 | DONE cmt | em 16 16 |        |             | ; Include any Forth words defined by the user in USER.TASM
5772:000 | DONE wsp | em 16 16 |        |             |
5774:000 | DONE wsp | em 16 16 |        |             |
5775:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5776:000 | DONE wsp | em 16 16 |        |             |
5777:000 | DONE cmt | em 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
5778:000 | DONE cmt | em 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
5779:000 | DONE cmt | em 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
5780:000 | DONE dir | em 16 16 | 006e5d | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
5780:000 | DONE dir | em 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
5780:000 | DONE dir | em 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
5780:000 | DONE dir | em 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
5780:000 | DONE dir | em 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
5780:000 | DONE dir | em 16 16 |        |             |                 42 20 29                 --  B   )
5781:000 | DONE dir | em 16 16 | 006e80 | (39 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
5781:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
5781:000 | DONE dir | em 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
5781:000 | DONE dir | em 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
5781:000 | DONE dir | em 16 16 |        |             |                 31 31 2e 20 4d 61 72 63  --  1 1 .   M a r c
5781:000 | DONE dir | em 16 16 |        |             |                 68 20 32 30 31 37 29     --  h   2 0 1 7 )
5782:000 | DONE dir | em 16 16 | 006ea7 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
5782:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
5782:000 | DONE dir | em 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
5782:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
5782:000 | DONE dir | em 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
5782:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
5782:000 | DONE dir | em 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
5782:000 | DONE dir | em 16 16 |        |             |                 6d 3e 29                 --  m > )
5783:000 | DONE dir | em 16 16 | 006eda | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
5783:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
5783:000 | DONE dir | em 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
5783:000 | DONE dir | em 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
5783:000 | DONE dir | em 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
5783:000 | DONE dir | em 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
5783:000 | DONE dir | em 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
5783:000 | DONE dir | em 16 16 |        |             |                 4e 54 59 29              --  N T Y )
5784:000 | DONE dir | em 16 16 | 006f0e | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
5784:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
5784:000 | DONE dir | em 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
5784:000 | DONE dir | em 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
5784:000 | DONE dir | em 16 16 |        |             |                 29 20 63 72              --  )   c r
5785:000 | DONE lbl | em 16 16 | 006f2a |             | hi-end                               
5786:000 | DONE wsp | em 16 16 |        |             |
5787:000 | DONE wsp | em 16 16 |        |             |
5788:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5789:000 | DONE cmt | em 16 16 |        |             | ; BOTTOM INCLUDES
5790:000 | DONE wsp | em 16 16 |        |             |
5791:000 | DONE cmt | em 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
5791:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5791:002 | DONE cmt | em 16 16 |        |             | ; First version: 01. Apr 2016
5791:003 | DONE cmt | em 16 16 |        |             | ; This version:  11. Mar 2017
5791:004 | DONE wsp | em 16 16 |        |             |
5791:005 | DONE cmt | em 16 16 |        |             | ; This file is included by liaraforth.tasm
5791:006 | DONE wsp | em 16 16 |        |             |
5791:007 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5791:008 | DONE cmt | em 16 16 |        |             | ; GENERAL
5791:009 | DONE wsp | em 16 16 |        |             |
5791:010 | DONE cmt | em 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
5791:011 | DONE wsp | em 16 16 |        |             |
5791:012 | DONE lbl | em 16 16 | 006f2a |             | s_ok                                 
5791:013 | DONE dir | em 16 16 | 006f2a | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
5791:013 | DONE dir | em 16 16 |        |             |                 20 6f 6b 00              --    o k .
5791:014 | DONE lbl | em 16 16 | 006f2e |             | s_compiled                           
5791:015 | DONE dir | em 16 16 | 006f2e | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
5791:015 | DONE dir | em 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
5791:015 | DONE dir | em 16 16 |        |             |                 64 00                    --  d .
5791:016 | DONE wsp | em 16 16 |        |             |
5791:017 | DONE wsp | em 16 16 |        |             |
5791:018 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5791:019 | DONE cmt | em 16 16 |        |             | ; ERROR STRINGS
5791:020 | DONE wsp | em 16 16 |        |             |
5791:021 | DONE cmt | em 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
5791:022 | DONE wsp | em 16 16 |        |             |
5791:023 | DONE lbl | em 16 16 | 006f38 |             | es_allot                             
5791:024 | DONE dir | em 16 16 | 006f38 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
5791:024 | DONE dir | em 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
5791:024 | DONE dir | em 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
5791:024 | DONE dir | em 16 16 |        |             |                 6e 64 73 00              --  n d s .
5791:025 | DONE lbl | em 16 16 | 006f4c |             | es_componly                          
5791:026 | DONE dir | em 16 16 | 006f4c | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
5791:026 | DONE dir | em 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
5791:026 | DONE dir | em 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
5791:026 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5791:026 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
5791:026 | DONE dir | em 16 16 |        |             |                 00                       --  .
5791:027 | DONE lbl | em 16 16 | 006f6d |             | es_defer                             
5791:028 | DONE dir | em 16 16 | 006f6d | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
5791:028 | DONE dir | em 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
5791:028 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
5791:028 | DONE dir | em 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
5791:028 | DONE dir | em 16 16 |        |             |                 20 79 65 74 00           --    y e t .
5791:029 | DONE lbl | em 16 16 | 006f8a |             | es_divzero                           
5791:030 | DONE dir | em 16 16 | 006f8a | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
5791:030 | DONE dir | em 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
5791:030 | DONE dir | em 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
5791:030 | DONE dir | em 16 16 |        |             |                 00                       --  .
5791:031 | DONE lbl | em 16 16 | 006f9b |             | es_error                             
5791:032 | DONE dir | em 16 16 | 006f9b | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
5791:032 | DONE dir | em 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
5791:032 | DONE dir | em 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
5791:033 | DONE lbl | em 16 16 | 006fa7 |             | es_intonly                           
5791:034 | DONE dir | em 16 16 | 006fa7 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
5791:034 | DONE dir | em 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
5791:034 | DONE dir | em 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
5791:034 | DONE dir | em 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
5791:035 | DONE lbl | em 16 16 | 006fbd |             | es_noname                            
5791:036 | DONE dir | em 16 16 | 006fbd | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
5791:036 | DONE dir | em 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
5791:036 | DONE dir | em 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
5791:036 | DONE dir | em 16 16 |        |             |                                          -- 
5791:037 | DONE lbl | em 16 16 | 006fcd |             | es_radix                             
5791:038 | DONE dir | em 16 16 | 006fcd | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
5791:038 | DONE dir | em 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
5791:038 | DONE dir | em 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
5791:038 | DONE dir | em 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
5791:039 | DONE lbl | em 16 16 | 006fe4 |             | es_refill1                           
5791:040 | DONE dir | em 16 16 | 006fe4 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
5791:040 | DONE dir | em 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
5791:040 | DONE dir | em 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
5791:040 | DONE dir | em 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
5791:040 | DONE dir | em 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
5791:040 | DONE dir | em 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
5791:040 | DONE dir | em 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
5791:041 | DONE lbl | em 16 16 | 007012 |             | es_refill2                           
5791:042 | DONE dir | em 16 16 | 007012 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
5791:042 | DONE dir | em 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
5791:042 | DONE dir | em 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
5791:042 | DONE dir | em 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
5791:042 | DONE dir | em 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
5791:042 | DONE dir | em 16 16 |        |             |                                          -- 
5791:043 | DONE lbl | em 16 16 | 007032 |             | es_state                             
5791:044 | DONE dir | em 16 16 | 007032 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
5791:044 | DONE dir | em 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
5791:044 | DONE dir | em 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
5791:044 | DONE dir | em 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
5791:044 | DONE dir | em 16 16 |        |             |                                          -- 
5791:045 | DONE lbl | em 16 16 | 00704a |             | es_underflow                         
5791:046 | DONE dir | em 16 16 | 00704a | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
5791:046 | DONE dir | em 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
5791:046 | DONE dir | em 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
5791:046 | DONE dir | em 16 16 |        |             |                                          -- 
5791:047 | DONE lbl | em 16 16 | 00705a |             | es_syntax                            
5791:048 | DONE dir | em 16 16 | 00705a | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
5791:048 | DONE dir | em 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
5791:048 | DONE dir | em 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
5791:049 | DONE wsp | em 16 16 |        |             |
5791:050 | DONE wsp | em 16 16 |        |             |
5791:051 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5791:052 | DONE cmt | em 16 16 |        |             | ; ANSI VT-100 SEQUENCES
5791:053 | DONE wsp | em 16 16 |        |             |
5791:054 | DONE lbl | em 16 16 | 007069 |             | vt100_page                           
5791:055 | DONE dir | em 16 16 | 007069 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
5791:055 | DONE dir | em 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
5791:056 | DONE lbl | em 16 16 | 00706e |             | vt100_home                           
5791:057 | DONE dir | em 16 16 | 00706e | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
5791:057 | DONE dir | em 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
5791:058 | DONE wsp | em 16 16 |        |             |
5791:059 | DONE wsp | em 16 16 |        |             |
5791:060 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5791:061 | DONE cmt | em 16 16 |        |             | ; TESTING STRINGS
5791:062 | DONE wsp | em 16 16 |        |             |
5791:063 | DONE cmt | em 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
5791:064 | DONE cmt | em 16 16 |        |             | ; developed. All start with "tests_"
5791:065 | DONE wsp | em 16 16 |        |             |
5791:066 | DONE lbl | em 16 16 | 007072 |             | tests_prev_cmd                       
5791:067 | DONE dir | em 16 16 | 007072 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
5791:067 | DONE dir | em 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
5791:067 | DONE dir | em 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
5791:067 | DONE dir | em 16 16 |        |             |                 64 29 00                 --  d ) .
5791:068 | DONE lbl | em 16 16 | 007085 |             | tests_next_cmd                       
5791:069 | DONE dir | em 16 16 | 007085 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
5791:069 | DONE dir | em 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
5791:069 | DONE dir | em 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
5791:070 | DONE wsp | em 16 16 |        |             |
5791:071 | DONE wsp | em 16 16 |        |             |
5791:072 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5791:073 | DONE cmt | em 16 16 |        |             | ; ALPHABET STRINGS
5791:074 | DONE wsp | em 16 16 |        |             |
5791:075 | DONE cmt | em 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
5791:076 | DONE cmt | em 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
5791:077 | DONE cmt | em 16 16 |        |             | ; TODO see if we need lower
5791:078 | DONE wsp | em 16 16 |        |             |
5791:079 | DONE lbl | em 16 16 | 007094 |             | abc_str_lower                        
5791:080 | DONE dir | em 16 16 | 007094 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
5791:080 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
5791:080 | DONE dir | em 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
5791:080 | DONE dir | em 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
5791:080 | DONE dir | em 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
5791:080 | DONE dir | em 16 16 |        |             |                 77 79 7a                 --  w y z
5791:081 | DONE lbl | em 16 16 | 0070b7 |             | abc_str_upper                        
5791:082 | DONE dir | em 16 16 | 0070b7 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, (...) 
5791:082 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
5791:082 | DONE dir | em 16 16 |        |             |                 38 39 41 42 43 44 45 46  --  8 9 A B C D E F
5791:082 | DONE dir | em 16 16 |        |             |                 47 48 49 4a 4b 4c 4d 4e  --  G H I J K L M N
5791:082 | DONE dir | em 16 16 |        |             |                 4f 50 51 52 53 54 55 56  --  O P Q R S T U V
5791:082 | DONE dir | em 16 16 |        |             |                 57 59 5a                 --  W Y Z
5791:083 | DONE wsp | em 16 16 |        |             |
5792:000 | DONE wsp | em 16 16 |        |             |
5793:000 | DONE wsp | em 16 16 |        |             |
5794:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5795:000 | DONE cmt | em 16 16 |        |             | ; END
5796:000 | DONE dir | em 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abc_str_lower               : 007094
- abc_str_upper               : 0070b7
- abortq_done                 : 005473
- abortq_rt                   : 005469
- accept_bs                   : 0054ef
- accept_eol                  : 0054e9
- accept_loop                 : 005496
- accept_nonzero              : 00548b
- adjust_z                    : 005680
- allot_done                  : 00554d
- allot_error                 : 00553c
- allot_minus                 : 005542
- allot_real_gone             : 00554f
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 000016
- branch_rt                   : 0055b1
- brg_value                   : 00000b
- bsize                       : 000080
- buffer0                     : 000200
- buffer1                     : 000280
- byte_to_ascii               : 006902
- char_got_char               : 0055fe
- cib                         : 000008
- ciblen                      : 00000a
- cmpl_body                   : 0068bf
- cmpl_common                 : 0068b2
- cmpl_jump                   : 0068af
- cmpl_subroutine             : 0068aa
- cmpl_word                   : 0068a5
- co                          : 000004
- code0                       : 005000
- compile_as_code             : 005651
- compile_as_jump             : 005651
- cp                          : 000000
- cp-end                      : 004fff
- cp0                         : 000300
- create_got_name             : 0056b5
- defer_error                 : 00682c
- doconst                     : 006815
- dodefer                     : 006823
- dodoes                      : 006832
- does_rt                     : 0057d9
- dots_done                   : 00523c
- dots_loop                   : 005229
- dots_not_empty              : 005224
- dovar                       : 00683f
- dp                          : 000002
- dpage                       : 000000
- dq_case_done                : 005751
- dq_checkbase                : 005754
- dq_notdigit                 : 00575b
- dq_success                  : 005766
- dsp0                        : 0000ff
- dtrailing_done              : 005353
- dtrailing_loop              : 00534a
- dump_done                   : 00580b
- dump_loop                   : 0057f5
- emit_a                      : 00581c
- equal_not                   : 005360
- erase_done                  : 005836
- erase_loop                  : 00582f
- error                       : 0068cb
- es_allot                    : 006f38
- es_componly                 : 006f4c
- es_defer                    : 006f6d
- es_divzero                  : 006f8a
- es_error                    : 006f9b
- es_intonly                  : 006fa7
- es_noname                   : 006fbd
- es_radix                    : 006fcd
- es_refill1                  : 006fe4
- es_refill2                  : 007012
- es_state                    : 007032
- es_syntax                   : 00705a
- es_underflow                : 00704a
- execute_ip                  : 005870
- find-name_all_chars         : 0058dc
- find-name_char_nomatcnt_8   : 0058d8
- find-name_chars             : 0058cd
- find-name_done              : 005902
- find-name_failure_16        : 0058ff
- find-name_loop              : 0058b8
- find-name_next_entry        : 0058c1
- find-name_success           : 0058f9
- find_found                  : 005893
- find_imm                    : 0058ac
- fmmod_1                     : 005923
- fmmod_1_1                   : 005927
- fmmod_2                     : 005954
- fmmod_2_1                   : 005958
- get_chr                     : 005045
- get_chr_wait                : 005049
- greater_nip                 : 00512f
- greater_no_ov               : 00512c
- hashs_loop                  : 0052b1
- have_chr                    : 005057
- havekey                     : 000012
- hi-end                      : 006f2a
- hi-start                    : 00691d
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- im                          : 000002
- in_found                    : 00599a
- in_loop                     : 005982
- in_notfound                 : 005994
- input                       : 000010
- insrc                       : 000006
- interpret                   : 006846
- interpret_compile           : 006890
- interpret_got_name_token    : 00686a
- interpret_interpret         : 00688a
- interpret_line_done         : 00689e
- interpret_loop              : 006846
- less_nip                    : 005105
- less_no_ov                  : 005102
- literal_rt                  : 0059e8
- lshift_done                 : 005a04
- lshift_loop                 : 0059fe
- max_drop                    : 005a61
- max_nip                     : 005a63
- max_no_ov                   : 005a5f
- min_drop                    : 005a74
- min_nip                     : 005a76
- min_no_ov                   : 005a72
- move_cmoveup                : 005a87
- mstar_abs_nos               : 005a15
- mstar_umstar                : 005a1f
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 00690b
- not-equal_equal             : 005111
- nt_2drop                    : 00678d
- nt_2dup                     : 0064aa
- nt_2over                    : 006758
- nt_2swap                    : 006765
- nt_2variable                : 0060c1
- nt_abort                    : 0061b9
- nt_abortq                   : 0061ab
- nt_abs                      : 0064b6
- nt_accept                   : 0066fc
- nt_again                    : 006419
- nt_align                    : 005fa9
- nt_aligned                  : 005f9a
- nt_allot                    : 006455
- nt_and                      : 0065a1
- nt_at-xy                    : 0060a9
- nt_backslash                : 006715
- nt_base                     : 0062cf
- nt_begin                    : 006426
- nt_bell                     : 006042
- nt_bl                       : 00626a
- nt_bounds                   : 0067c6
- nt_bracketchar              : 006342
- nt_brackettick              : 006337
- nt_branch                   : 00640b
- nt_bye                      : 005f6b
- nt_c-comma                  : 0065c4
- nt_c-fetch                  : 0065ce
- nt_c-store                  : 0065d8
- nt_cellplus                 : 00605b
- nt_cells                    : 006306
- nt_char                     : 006572
- nt_charplus                 : 006068
- nt_chars                    : 00604e
- nt_cmove                    : 006191
- nt_cmoveup                  : 006183
- nt_cold                     : 005f76
- nt_colon                    : 00644c
- nt_comma                    : 0066f3
- nt_compile-only             : 006375
- nt_compilecomma             : 006433
- nt_constant                 : 00650b
- nt_count                    : 00619e
- nt_cr                       : 006208
- nt_create                   : 006489
- nt_dabs                     : 0060d2
- nt_decimal                  : 006075
- nt_defer                    : 006462
- nt_depth                    : 0064e7
- nt_digitq                   : 0067b8
- nt_dminus                   : 006119
- nt_dnegate                  : 0060de
- nt_does                     : 00647c
- nt_dot                      : 0062bb
- nt_dotquote                 : 006313
- nt_dots                     : 00628f
- nt_dplus                    : 006123
- nt_drop                     : 006809
- nt_dtos                     : 0060ed
- nt_dtrailing                : 0063dc
- nt_dump                     : 005fd6
- nt_dup                      : 0067fe
- nt_emit                     : 0062af
- nt_equal                    : 006657
- nt_erase                    : 00621e
- nt_evaluate                 : 0062f6
- nt_execute                  : 006772
- nt_false                    : 006660
- nt_fetch                    : 0067e0
- nt_fill                     : 006212
- nt_find                     : 005f8e
- nt_find-name                : 0066b1
- nt_fmmod                    : 00612d
- nt_fromr                    : 0067a4
- nt_greater                  : 006631
- nt_hash                     : 006257
- nt_hashs                    : 006241
- nt_here                     : 006781
- nt_hex                      : 006084
- nt_hold                     : 006235
- nt_immediate                : 006389
- nt_input                    : 0062db
- nt_int-name                 : 0061e8
- nt_invert                   : 006564
- nt_key                      : 00670a
- nt_latestnt                 : 0063bc
- nt_latestxt                 : 0063cc
- nt_leftbracket              : 0063b3
- nt_less                     : 00663a
- nt_lessnumber               : 006260
- nt_literal                  : 006350
- nt_lshift                   : 0065ac
- nt_marker                   : 006018
- nt_max                      : 00654b
- nt_min                      : 006540
- nt_minus                    : 0065ec
- nt_move                     : 006534
- nt_mrot                     : 006741
- nt_mstar                    : 00616e
- nt_name-int                 : 0061f8
- nt_name-string              : 006497
- nt_native-compile           : 00635f
- nt_negate                   : 006556
- nt_nip                      : 006736
- nt_not-equal                : 00664d
- nt_number                   : 006688
- nt_numbermore               : 00622b
- nt_one                      : 00669f
- nt_one-minus                : 0065fe
- nt_one-plus                 : 006608
- nt_or                       : 006597
- nt_output                   : 0062e8
- nt_over                     : 0067d4
- nt_pad                      : 0062c4
- nt_page                     : 00609d
- nt_parse                    : 0061c6
- nt_parse-name               : 0066d0
- nt_pdo                      : 00600c
- nt_pick                     : 006036
- nt_plus                     : 0065f5
- nt_plusstore                : 0065ba
- nt_postpone                 : 00639a
- nt_pploop                   : 005ff0
- nt_pqdo                     : 005fff
- nt_qdup                     : 00671e
- nt_question                 : 0061df
- nt_quit                     : 0061d3
- nt_refill                   : 0066c2
- nt_rfetch                   : 00679a
- nt_rightbracket             : 0063aa
- nt_rot                      : 00674d
- nt_rshift                   : 00657e
- nt_semicolon                : 006443
- nt_sign                     : 00624b
- nt_slashstring              : 0063ed
- nt_sliteral                 : 006327
- nt_smrem                    : 00613b
- nt_source                   : 0064d9
- nt_source-id                : 0066e2
- nt_space                    : 006282
- nt_spaces                   : 006274
- nt_squote                   : 00631d
- nt_star                     : 006165
- nt_state                    : 0064c1
- nt_stod                     : 0060f8
- nt_store                    : 0067e9
- nt_swap                     : 0067f2
- nt_tick                     : 00652b
- nt_to                       : 0064f4
- nt_to-in                    : 0064ce
- nt_tobody                   : 00646f
- nt_tonumber                 : 006679
- nt_tor                      : 0067ae
- nt_true                     : 00666d
- nt_tuck                     : 00672a
- nt_two                      : 006696
- nt_two-star                 : 0065e2
- nt_twofromr                 : 006103
- nt_tworfetch                : 0060b6
- nt_twotor                   : 00610e
- nt_type                     : 006299
- nt_udmod                    : 006149
- nt_udot                     : 0062a5
- nt_ummod                    : 006157
- nt_umstar                   : 006178
- nt_unloop                   : 005fe2
- nt_unused                   : 00608f
- nt_value                    : 0064fe
- nt_variable                 : 00651b
- nt_word                     : 005f82
- nt_words                    : 005fc9
- nt_wordsize                 : 006026
- nt_wordsnsizes              : 005fb6
- nt_xor                      : 00658c
- nt_zbranch                  : 0063fc
- nt_zero                     : 0066a8
- nt_zero-equal               : 006643
- nt_zero-less                : 006627
- nt_zero-more                : 00661d
- nt_zero-notequal            : 006612
- number_dot                  : 005acf
- number_loop                 : 005af6
- number_main                 : 005ae8
- number_ok                   : 005b02
- number_single               : 005b2a
- output                      : 00000e
- padoffset                   : 0000ff
- parse-name_empty_line       : 005b7c
- parse-name_found            : 005b90
- parse-name_loop             : 005b6f
- parse_found_delimiter       : 005bbc
- parse_loop                  : 005baf
- parse_reached_eol           : 005bc0
- pp_got_nt                   : 005c00
- pp_got_word                 : 005bf8
- pp_not_immediate            : 005c10
- pploop_jmp                  : 0052e7
- pqdo_done                   : 0052f2
- print_string                : 0068d1
- print_string_done           : 0068e0
- print_u                     : 0068e9
- put_chr                     : 005034
- put_chr_wait                : 005039
- quit_compiled               : 0050eb
- quit_get_line               : 0050c0
- quit_ok                     : 0050e2
- quit_print                  : 0050ee
- quit_refill_successful      : 0050ce
- ram-end                     : 007fff
- ram-start                   : 000000
- refill_source_is_not_string : 005c52
- refill_src_not_kbd          : 005c49
- reset_hardware              : 005000
- rshift_done                 : 005c71
- rshift_loop                 : 005c6b
- s_compiled                  : 006f2e
- s_ok                        : 006f2a
- scratch                     : 000026
- sign_plus                   : 005cc5
- sl_loop                     : 005cea
- sliteral_rt                 : 005d15
- smrem_1                     : 005d65
- smrem_1_1                   : 005d69
- smrem_2                     : 005d80
- smrem_2_1                   : 005d84
- spaces_done                 : 005da7
- squote_compile              : 005ca8
- stack                       : 000100
- stack0                      : 0001ff
- start                       : 005067
- state                       : 000014
- stod_pos                    : 005cb8
- tests_next_cmd              : 007085
- tests_prev_cmd              : 007072
- tick_have_nt                : 00545b
- tick_have_word              : 00544f
- tmp1                        : 00001c
- tmp2                        : 00001e
- tmp3                        : 000020
- tmpbranch                   : 00001a
- tmpdsp                      : 000022
- tmptos                      : 000024
- tobody_have_cfa             : 005153
- tobody_nojsr                : 005155
- tohold                      : 000018
- toin                        : 00000c
- tonumber_done               : 0051ae
- tonumber_loop               : 00516a
- tonumber_ok                 : 005179
- type_done                   : 005df7
- type_loop                   : 005deb
- ummod_complete              : 005ec9
- ummod_notzero               : 005e8a
- ummod_overflow              : 005ec0
- ummod_shift                 : 005ea2
- umstar_counter              : 005e59
- umstar_loop                 : 005e4b
- umstar_one_nos              : 005e6c
- umstar_one_tos              : 005e69
- umstar_two_common           : 005e78
- umstar_two_nos              : 005e77
- umstar_two_tos              : 005e73
- umstar_zero                 : 005e62
- user0                       : 000000
- vt100_home                  : 00706e
- vt100_page                  : 007069
- words_common                : 005f16
- words_loop                  : 005f20
- words_nosizes               : 005f3d
- workword                    : 000004
- xt_2drop                    : 0053e1
- xt_2dup                     : 0053e8
- xt_2over                    : 0053f3
- xt_2swap                    : 00541f
- xt_2variable                : 005430
- xt_abort                    : 0050ad
- xt_abortq                   : 00545f
- xt_abs                      : 00547c
- xt_accept                   : 005485
- xt_again                    : 005511
- xt_align                    : 005527
- xt_aligned                  : 005529
- xt_allot                    : 00552b
- xt_and                      : 005554
- xt_at-xy                    : 00555b
- xt_backslash                : 00531f
- xt_base                     : 005583
- xt_begin                    : 005591
- xt_bell                     : 00558b
- xt_bl                       : 005598
- xt_bounds                   : 0055a0
- xt_bracketchar              : 005318
- xt_brackettick              : 005309
- xt_branch                   : 0055aa
- xt_bye                      : 0055be
- xt_c-comma                  : 0055c5
- xt_c-fetch                  : 0055d3
- xt_c-store                  : 0055df
- xt_cellplus                 : 0055ef
- xt_char                     : 0055f2
- xt_chars                    : 00560a
- xt_cmove                    : 00560c
- xt_cmoveup                  : 00562f
- xt_cold                     : 005064
- xt_colon                    : 00524c
- xt_comma                    : 005240
- xt_compile-only             : 005648
- xt_compilecomma             : 005651
- xt_constant                 : 005667
- xt_count                    : 005696
- xt_cr                       : 0056a4
- xt_create                   : 0056aa
- xt_dabs                     : 00579c
- xt_decimal                  : 0057a3
- xt_defer                    : 00571a
- xt_depth                    : 0057a9
- xt_digitq                   : 005734
- xt_dminus                   : 005782
- xt_dnegate                  : 0057b8
- xt_does                     : 0057cc
- xt_dot                      : 0051d5
- xt_dotquote                 : 0051f4
- xt_dots                     : 005208
- xt_dplus                    : 005770
- xt_drop                     : 0057ef
- xt_dtos                     : 005797
- xt_dtrailing                : 005340
- xt_dump                     : 0057f4
- xt_dup                      : 005812
- xt_emit                     : 005817
- xt_equal                    : 005357
- xt_erase                    : 00581f
- xt_evaluate                 : 005841
- xt_execute                  : 005873
- xt_fetch                    : 0052d5
- xt_fill                     : 005826
- xt_find                     : 00587d
- xt_find-name                : 0058ae
- xt_fmmod                    : 005905
- xt_fromr                    : 005c29
- xt_greater                  : 00511e
- xt_hash                     : 005287
- xt_hashs                    : 0052b1
- xt_here                     : 0059a3
- xt_hex                      : 0059aa
- xt_hold                     : 0059b0
- xt_immediate                : 005968
- xt_input                    : 005971
- xt_int-name                 : 005979
- xt_invert                   : 00599d
- xt_key                      : 005959
- xt_latestnt                 : 0059be
- xt_latestxt                 : 0059c6
- xt_leftbracket              : 00530f
- xt_less                     : 0050f4
- xt_lessnumber               : 005114
- xt_literal                  : 0059d6
- xt_lshift                   : 0059f5
- xt_marker                   : 005a29
- xt_max                      : 005a53
- xt_min                      : 005a66
- xt_minus                    : 00532c
- xt_move                     : 005a79
- xt_mrot                     : 005337
- xt_mstar                    : 005a09
- xt_name-int                 : 005a8a
- xt_name-string              : 005a93
- xt_native-compile           : 005aa4
- xt_negate                   : 005aad
- xt_nip                      : 005ab4
- xt_not-equal                : 005108
- xt_number                   : 005ab7
- xt_numbermore               : 0052a2
- xt_one                      : 0053b8
- xt_one-minus                : 0053c0
- xt_one-plus                 : 0053c2
- xt_or                       : 005b3b
- xt_output                   : 005b42
- xt_over                     : 005b4a
- xt_pad                      : 005b51
- xt_page                     : 005b5d
- xt_parse                    : 005b9c
- xt_parse-name               : 005b6a
- xt_pdo                      : 0052f6
- xt_pick                     : 005bcf
- xt_plus                     : 005324
- xt_plusstore                : 005bdd
- xt_postpone                 : 005bed
- xt_pploop                   : 0052da
- xt_pqdo                     : 0052e9
- xt_qdup                     : 0052c1
- xt_question                 : 0052ba
- xt_quit                     : 0050b5
- xt_refill                   : 005c31
- xt_rfetch                   : 005c20
- xt_rightbracket             : 005312
- xt_rot                      : 005c59
- xt_rshift                   : 005c62
- xt_semicolon                : 00526e
- xt_sign                     : 005cbc
- xt_slashstring              : 0051c3
- xt_sliteral                 : 005cca
- xt_smrem                    : 005d2b
- xt_source                   : 005d85
- xt_source-id                : 005d92
- xt_space                    : 005d99
- xt_spaces                   : 005d9f
- xt_squote                   : 005c76
- xt_star                     : 005dac
- xt_state                    : 005db4
- xt_stod                     : 005cac
- xt_store                    : 0052c9
- xt_swap                     : 005dbc
- xt_tick                     : 005443
- xt_to                       : 005dc2
- xt_to-in                    : 005156
- xt_tobody                   : 005132
- xt_tonumber                 : 00515e
- xt_tor                      : 0051bb
- xt_true                     : 005dcc
- xt_tuck                     : 005dd4
- xt_two                      : 0053c4
- xt_two-star                 : 0053cc
- xt_twofromr                 : 005400
- xt_tworfetch                : 005411
- xt_twotor                   : 0053d0
- xt_type                     : 005ddd
- xt_udmod                    : 005e07
- xt_udot                     : 005dfe
- xt_ummod                    : 005e81
- xt_umstar                   : 005e22
- xt_unloop                   : 005ed2
- xt_unused                   : 005ed9
- xt_variable                 : 005ee5
- xt_word                     : 005ef4
- xt_words                    : 005f14
- xt_wordsize                 : 005f51
- xt_wordsnsizes              : 005f0d
- xt_xor                      : 005f64
- xt_zbranch                  : 00539a
- xt_zero                     : 005363
- xt_zero-equal               : 00536b
- xt_zero-less                : 005377
- xt_zero-more                : 00538f
- xt_zero-notequal            : 005383
- z_2drop                     : 0053e7
- z_2dup                      : 0053f2
- z_2over                     : 0053ff
- z_2swap                     : 00542f
- z_2variable                 : 005442
- z_abort                     : 0050f4
- z_abortq                    : 00547b
- z_abs                       : 005484
- z_accept                    : 005510
- z_again                     : 005526
- z_align                     : 005528
- z_aligned                   : 00552a
- z_allot                     : 005553
- z_and                       : 00555a
- z_at-xy                     : 005582
- z_backslash                 : 005323
- z_base                      : 00558a
- z_begin                     : 005597
- z_bell                      : 005591
- z_bl                        : 00559f
- z_bounds                    : 0055a9
- z_bracketchar               : 00531e
- z_brackettick               : 00530f
- z_branch                    : 0055b0
- z_bye                       : 0055c5
- z_c-comma                   : 0055d2
- z_c-fetch                   : 0055de
- z_c-store                   : 0055ee
- z_cellplus                  : 0055f1
- z_char                      : 005609
- z_chars                     : 00560b
- z_cmove                     : 00562e
- z_cmoveup                   : 005647
- z_cold                      : 0050f4
- z_colon                     : 00526d
- z_comma                     : 00524b
- z_compile-only              : 005650
- z_compilecomma              : 005666
- z_constant                  : 005695
- z_count                     : 0056a3
- z_cr                        : 0056aa
- z_create                    : 005719
- z_dabs                      : 0057a2
- z_decimal                   : 0057a8
- z_defer                     : 005734
- z_depth                     : 0057b7
- z_digitq                    : 00576f
- z_dminus                    : 005796
- z_dnegate                   : 0057cb
- z_does                      : 0057d8
- z_dot                       : 0051f3
- z_dotquote                  : 005208
- z_dots                      : 00523f
- z_dplus                     : 005781
- z_drop                      : 0057f3
- z_dtos                      : 00579b
- z_dtrailing                 : 005356
- z_dump                      : 005811
- z_dup                       : 005816
- z_emit                      : 00581f
- z_equal                     : 005362
- z_erase                     : 005840
- z_evaluate                  : 00586f
- z_execute                   : 00587d
- z_fetch                     : 0052d9
- z_fill                      : 005840
- z_find                      : 0058ad
- z_find-name                 : 005904
- z_fmmod                     : 005958
- z_fromr                     : 005c30
- z_greater                   : 005131
- z_hash                      : 0052a1
- z_hashs                     : 0052b9
- z_here                      : 0059a9
- z_hex                       : 0059af
- z_hold                      : 0059bd
- z_immediate                 : 005970
- z_input                     : 005978
- z_int-name                  : 00599c
- z_invert                    : 0059a2
- z_key                       : 005968
- z_latestnt                  : 0059c5
- z_latestxt                  : 0059d5
- z_leftbracket               : 005311
- z_less                      : 005107
- z_lessnumber                : 00511d
- z_literal                   : 0059e7
- z_lshift                    : 005a08
- z_marker                    : 005a52
- z_max                       : 005a65
- z_min                       : 005a78
- z_minus                     : 005336
- z_move                      : 005a8a
- z_mrot                      : 00533f
- z_mstar                     : 005a28
- z_name-int                  : 005a92
- z_name-string               : 005aa3
- z_native-compile            : 005aac
- z_negate                    : 005ab3
- z_nip                       : 005ab6
- z_not-equal                 : 005113
- z_number                    : 005b3a
- z_numbermore                : 0052b0
- z_one                       : 0053bf
- z_one-minus                 : 0053c1
- z_one-plus                  : 0053c3
- z_or                        : 005b41
- z_output                    : 005b49
- z_over                      : 005b50
- z_pad                       : 005b5c
- z_page                      : 005b69
- z_parse                     : 005bce
- z_parse-name                : 005bce
- z_pdo                       : 005308
- z_pick                      : 005bdc
- z_plus                      : 00532b
- z_plusstore                 : 005bec
- z_postpone                  : 005c1f
- z_pploop                    : 0052e8
- z_pqdo                      : 005308
- z_qdup                      : 0052c8
- z_question                  : 0052c0
- z_quit                      : 0050f4
- z_refill                    : 005c58
- z_rfetch                    : 005c28
- z_rightbracket              : 005317
- z_rot                       : 005c61
- z_rshift                    : 005c75
- z_semicolon                 : 005286
- z_sign                      : 005cc9
- z_slashstring               : 0051d4
- z_sliteral                  : 005d14
- z_smrem                     : 005d84
- z_source                    : 005d91
- z_source-id                 : 005d98
- z_space                     : 005d9f
- z_spaces                    : 005dab
- z_squote                    : 005cab
- z_star                      : 005db3
- z_state                     : 005dbb
- z_stod                      : 005cbb
- z_store                     : 0052d4
- z_swap                      : 005dc1
- z_tick                      : 00545e
- z_to                        : 005dcb
- z_to-in                     : 00515d
- z_tobody                    : 005155
- z_tonumber                  : 0051ba
- z_tor                       : 0051c2
- z_true                      : 005dd3
- z_tuck                      : 005ddc
- z_two                       : 0053cb
- z_two-star                  : 0053cf
- z_twofromr                  : 005410
- z_tworfetch                 : 00541e
- z_twotor                    : 0053e0
- z_type                      : 005dfd
- z_udmod                     : 005e22
- z_udot                      : 005e07
- z_ummod                     : 005ed1
- z_umstar                    : 005e80
- z_unloop                    : 005ed8
- z_unused                    : 005ee4
- z_variable                  : 005ef4
- z_word                      : 005f0c
- z_words                     : 005f50
- z_wordsize                  : 005f63
- z_wordsnsizes               : 005f50
- z_xor                       : 005f6a
- z_zbranch                   : 0053a0
- z_zero                      : 00536a
- z_zero-equal                : 005376
- z_zero-less                 : 005382
- z_zero-more                 : 005399
- z_zero-notequal             : 00538e
- zb_done                     : 0053b2
- zb_zero                     : 0053a9
- zbranch_rt                  : 0053a1
- ze_not_zero                 : 005373
- zero-less-is-less           : 00537f
- zero-more_done              : 005398
- zero-more_true              : 005397
- zne_is_zero                 : 00538b
