A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Tue Feb 21 04:47:30 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.16103 seconds
Code origin: 006000
Bytes of machine code: 6244

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 21. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 19. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: -1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE dir | em  8  8 |        |             |         .equ scratch { 000200 + &32 } 8 byte scratchpad (see UM/MOD)
  16:074 | DONE dir | em  8  8 |        |             |         .equ tohold { 000200 + &40 } Pointer for formatted output
  16:075 | DONE wsp | em  8  8 |        |             |
  16:076 | DONE wsp | em  8  8 |        |             |
  16:077 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:078 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:079 | DONE wsp | em  8  8 |        |             |
  16:080 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:089 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:090 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:091 | DONE wsp | em  8  8 |        |             |
  16:092 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:093 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:094 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:095 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  16:096 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 7c 65    |                 jsr 00657c           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  57:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  58:000 | DONE ins | na 16 16 | 00606a | a9 e2 70    |                 lda.# 0070e2         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  70:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  71:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  72:000 | DONE wsp | na 16 16 |        |             |
  73:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  74:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  75:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  78:000 | DONE ins | na 16 16 | 006085 | 20 d5 67    |                 jsr 0067d5           
  79:000 | DONE wsp | na 16 16 |        |             |
  80:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  81:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  82:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  83:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  84:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608c | a9 bc 71    |                 lda.# 0071bc         
  88:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  89:000 | DONE ins | na 16 16 | 006091 | a0 01 05    |                 ldy.# 000501         length goes in TOS
  90:000 | DONE wsp | na 16 16 |        |             |
  91:000 | DONE ins | na 16 16 | 006094 | 20 f9 65    |                 jsr 0065f9           
  92:000 | DONE wsp | na 16 16 |        |             |
  93:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  96:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  97:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  98:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  99:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 100:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 101:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 102:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 102:001 | DONE ctl | na 16 16 |        |             |         .!a16
 103:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 104:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 105:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 106:000 | DONE wsp | na 16 16 |        |             |
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 109:000 | DONE wsp | na 16 16 |        |             |
 110:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 111:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 112:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 113:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 114:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 115:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 116:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 117:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 118:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 119:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 120:000 | DONE wsp | na 16 16 |        |             |
 121:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 122:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 123:000 | DONE ins | na 16 16 | 0060a3 | 9c 28 66    |                 stz 006628           
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 126:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 129:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 130:000 | DONE wsp | na 16 16 |        |             |
 131:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 132:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 133:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 134:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 137:000 | DONE ins | na 16 16 | 0060ac | 20 9d 68    |                 jsr 00689d           ( -- f )
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 140:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 143:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 145:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 146:000 | DONE ins | na 16 16 | 0060b2 | a9 91 77    |                 lda.# 007791         
 147:000 | DONE ins | na 16 16 | 0060b5 | 4c 82 71    |                 jmp 007182           
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 151:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 152:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 153:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 154:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 155:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 156:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 157:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 160:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 163:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 164:000 | DONE ins | na 16 16 | 0060be | 20 10 71    |                 jsr 007110           
 165:000 | DONE wsp | na 16 16 |        |             |
 166:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 167:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 168:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 169:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 170:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE ins | na 16 16 | 0060c6 | a9 f7 77    |                 lda.# 0077f7         
 173:000 | DONE ins | na 16 16 | 0060c9 | 4c 82 71    |                 jmp 007182           
 174:000 | DONE wsp | na 16 16 |        |             |
 175:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 176:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 177:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 178:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 179:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE ins | na 16 16 | 0060d0 | a9 bd 76    |                 lda.# 0076bd         
 182:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 183:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 184:000 | DONE ins | na 16 16 | 0060d5 | a9 c1 76    |                 lda.# 0076c1         fall through to quit_print
 185:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 186:000 | DONE ins | na 16 16 | 0060d8 | 20 88 71    |                 jsr 007188           
 187:000 | DONE wsp | na 16 16 |        |             |
 188:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 189:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 193:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 194:000 | DONE wsp | na 16 16 |        |             |
 195:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 196:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 197:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 198:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 199:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 200:000 | DONE lbl | na 16 16 | 0060df |             | xt_less                              
 201:000 | DONE ins | na 16 16 | 0060df | 98          |                 tya                  
 202:000 | DONE ins | na 16 16 | 0060e0 | a0 00 00    |                 ldy.# 0000           default is false
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | 38          |                 sec                  
 205:000 | DONE ins | na 16 16 | 0060e4 | f5 00       |                 sbc.dx 00            
 206:000 | DONE ins | na 16 16 | 0060e6 | f0 08       |                 beq 0060f0           the same is not greater
 207:000 | DONE ins | na 16 16 | 0060e8 | 50 03       |                 bvc 0060ed           no overflow, skip ahead
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 210:000 | DONE ins | na 16 16 | 0060ea | 49 00 80    |                 eor.# 8000           compliment negative flag
 211:000 | DONE wsp | na 16 16 |        |             |
 212:000 | DONE lbl | na 16 16 | 0060ed |             | xt_less_no_ov                        
 213:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 214:000 | DONE ins | na 16 16 | 0060ed | 30 01       |                 bmi 0060f0           
 215:000 | DONE ins | na 16 16 | 0060ef | 88          |                 dey                  
 216:000 | DONE lbl | na 16 16 | 0060f0 |             | xt_less_nip                          
 217:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 218:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 219:000 | DONE wsp | na 16 16 |        |             |
 220:000 | DONE lbl | na 16 16 | 0060f2 |             | z_less                               
 220:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 224:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 225:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 226:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 227:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_not-equal                         
 228:000 | DONE ins | na 16 16 | 0060f3 | 98          |                 tya                  
 229:000 | DONE ins | na 16 16 | 0060f4 | a0 00 00    |                 ldy.# 0000           default value is false
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE ins | na 16 16 | 0060f7 | d5 00       |                 cmp.dx 00            
 232:000 | DONE ins | na 16 16 | 0060f9 | f0 01       |                 beq 0060fc           
 233:000 | DONE ins | na 16 16 | 0060fb | 88          |                 dey                  wraps to 0FFFF (true)
 234:000 | DONE wsp | na 16 16 |        |             |
 235:000 | DONE lbl | na 16 16 | 0060fc |             | not-equal_equal                      ; yes, this is a silly name
 236:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 237:000 | DONE ins | na 16 16 | 0060fd | e8          |                 inx                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 0060fe |             | z_not-equal                          
 239:001 | DONE ins | na 16 16 | 0060fe | 60          |                 rts                  
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 243:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 244:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 245:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 246:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 247:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 248:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 249:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 250:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 251:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 252:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 253:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 254:000 | DONE lbl | na 16 16 | 0060ff |             | xt_lessnumber                        
 255:000 | DONE ins | na 16 16 | 0060ff | 20 c9 67    |                 jsr 0067c9           
 256:000 | DONE ins | na 16 16 | 006102 | 84 28       |                 sty.d 000228         
 257:000 | DONE ins | na 16 16 | 006104 | b4 00       |                 ldy.dx 00            
 258:000 | DONE ins | na 16 16 | 006106 | e8          |                 inx                  
 259:000 | DONE ins | na 16 16 | 006107 | e8          |                 inx                  
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE lbl | na 16 16 | 006108 |             | z_lessnumber                         
 261:001 | DONE ins | na 16 16 | 006108 | 60          |                 rts                  
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE wsp | na 16 16 |        |             |
 264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 265:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 266:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 267:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 268:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 269:000 | DONE lbl | na 16 16 | 006109 |             | xt_greater                           
 270:000 | DONE ins | na 16 16 | 006109 | 98          |                 tya                  
 271:000 | DONE ins | na 16 16 | 00610a | a0 00 00    |                 ldy.# 0000           default is false
 272:000 | DONE wsp | na 16 16 |        |             |
 273:000 | DONE ins | na 16 16 | 00610d | 38          |                 sec                  
 274:000 | DONE ins | na 16 16 | 00610e | f5 00       |                 sbc.dx 00            
 275:000 | DONE ins | na 16 16 | 006110 | f0 08       |                 beq 00611a           the same is not greater
 276:000 | DONE ins | na 16 16 | 006112 | 50 03       |                 bvc 006117           no overflow, skip ahead
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 279:000 | DONE ins | na 16 16 | 006114 | 49 00 80    |                 eor.# 8000           compliment negative flag
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE lbl | na 16 16 | 006117 |             | xt_greater_no_ov                     
 282:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 283:000 | DONE ins | na 16 16 | 006117 | 10 01       |                 bpl 00611a           
 284:000 | DONE ins | na 16 16 | 006119 | 88          |                 dey                  
 285:000 | DONE lbl | na 16 16 | 00611a |             | xt_greater_nip                       
 286:000 | DONE ins | na 16 16 | 00611a | e8          |                 inx                  
 287:000 | DONE ins | na 16 16 | 00611b | e8          |                 inx                  
 288:000 | DONE wsp | na 16 16 |        |             |
 289:000 | DONE lbl | na 16 16 | 00611c |             | z_greater                            
 289:001 | DONE ins | na 16 16 | 00611c | 60          |                 rts                  
 290:000 | DONE wsp | na 16 16 |        |             |
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 293:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 294:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 295:000 | DONE lbl | na 16 16 | 00611d |             | xt_to-in                             
 296:000 | DONE ins | na 16 16 | 00611d | ca          |                 dex                  
 297:000 | DONE ins | na 16 16 | 00611e | ca          |                 dex                  
 298:000 | DONE ins | na 16 16 | 00611f | 94 00       |                 sty.dx 00            
 299:000 | DONE wsp | na 16 16 |        |             |
 300:000 | DONE ins | na 16 16 | 006121 | a0 12 02    |                 ldy.# 000212         >IN
 301:000 | DONE lbl | na 16 16 | 006124 |             | z_to-in                              
 301:001 | DONE ins | na 16 16 | 006124 | 60          |                 rts                  
 302:000 | DONE wsp | na 16 16 |        |             |
 303:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 304:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 305:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number.
 306:000 | DONE cmt | na 16 16 |        |             | ; This routine is called by NUMBER, which already uses tmptos, tmp2 and tmp3
 307:000 | DONE lbl | na 16 16 | 006125 |             | xt_gtnumber                          
 308:000 | DONE cmt | na 16 16 |        |             | 		; TODO not coded yet
 309:000 | DONE lbl | na 16 16 | 006125 |             | z_gtnumber                           
 309:001 | DONE ins | na 16 16 | 006125 | 60          |                 rts                  
 310:000 | DONE wsp | na 16 16 |        |             |
 311:000 | DONE wsp | na 16 16 |        |             |
 312:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 313:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 314:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 315:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 316:000 | DONE lbl | na 16 16 | 006126 |             | xt_tor                               
 317:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 318:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 319:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 320:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 321:000 | DONE ins | na 16 16 | 006126 | 68          |                 pla                  
 322:000 | DONE wsp | na 16 16 |        |             |
 323:000 | DONE ins | na 16 16 | 006127 | 5a          |                 phy                  the actual work
 324:000 | DONE wsp | na 16 16 |        |             |
 325:000 | DONE ins | na 16 16 | 006128 | b4 00       |                 ldy.dx 00            DROP
 326:000 | DONE ins | na 16 16 | 00612a | e8          |                 inx                  
 327:000 | DONE ins | na 16 16 | 00612b | e8          |                 inx                  
 328:000 | DONE wsp | na 16 16 |        |             |
 329:000 | DONE ins | na 16 16 | 00612c | 48          |                 pha                  put return address back in place
 330:000 | DONE wsp | na 16 16 |        |             |
 331:000 | DONE lbl | na 16 16 | 00612d |             | z_tor                                
 331:001 | DONE ins | na 16 16 | 00612d | 60          |                 rts                  
 332:000 | DONE wsp | na 16 16 |        |             |
 333:000 | DONE wsp | na 16 16 |        |             |
 334:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 335:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 336:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 337:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE  Based on
 338:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 339:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 340:000 | DONE cmt | na 16 16 |        |             | ; focus on size.
 341:000 | DONE cmt | na 16 16 |        |             | ; TODO Once we know this works, move to assembler
 342:000 | DONE lbl | na 16 16 | 00612e |             | xt_dot                               
 343:000 | DONE ins | na 16 16 | 00612e | 20 f4 65    |                 jsr 0065f4           ( n n )
 344:000 | DONE ins | na 16 16 | 006131 | 20 28 63    |                 jsr 006328           ( n n )
 345:000 | DONE ins | na 16 16 | 006134 | 20 8c 62    |                 jsr 00628c           ( n n 0 )
 346:000 | DONE ins | na 16 16 | 006137 | 20 ff 60    |                 jsr 0060ff           ( n n 0 )
 347:000 | DONE ins | na 16 16 | 00613a | 20 28 62    |                 jsr 006228           ( n ud )
 348:000 | DONE ins | na 16 16 | 00613d | 20 d0 68    |                 jsr 0068d0           ( ud n )
 349:000 | DONE ins | na 16 16 | 006140 | 20 fb 68    |                 jsr 0068fb           ( ud )
 350:000 | DONE ins | na 16 16 | 006143 | 20 19 62    |                 jsr 006219           
 351:000 | DONE ins | na 16 16 | 006146 | 20 b9 69    |                 jsr 0069b9           
 352:000 | DONE ins | na 16 16 | 006149 | 20 7e 69    |                 jsr 00697e           
 353:000 | DONE wsp | na 16 16 |        |             |
 354:000 | DONE lbl | na 16 16 | 00614c |             | z_dot                                
 354:001 | DONE ins | na 16 16 | 00614c | 60          |                 rts                  
 355:000 | DONE wsp | na 16 16 |        |             |
 356:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 357:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 358:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 359:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 360:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 361:000 | DONE lbl | na 16 16 | 00614d |             | xt_dotparen                          
 362:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 363:000 | DONE ins | na 16 16 | 00614d | ca          |                 dex                  
 364:000 | DONE ins | na 16 16 | 00614e | ca          |                 dex                  
 365:000 | DONE ins | na 16 16 | 00614f | 94 00       |                 sty.dx 00            
 366:000 | DONE ins | na 16 16 | 006151 | a0 29 00    |                 ldy.# 29             
 367:000 | DONE wsp | na 16 16 |        |             |
 368:000 | DONE ins | na 16 16 | 006154 | 20 14 68    |                 jsr 006814           ( -- addr u)
 369:000 | DONE ins | na 16 16 | 006157 | 20 b9 69    |                 jsr 0069b9           
 370:000 | DONE wsp | na 16 16 |        |             |
 371:000 | DONE lbl | na 16 16 | 00615a |             | z_dotparen                           
 371:001 | DONE ins | na 16 16 | 00615a | 60          |                 rts                  
 372:000 | DONE wsp | na 16 16 |        |             |
 373:000 | DONE wsp | na 16 16 |        |             |
 374:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 375:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 376:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 377:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 378:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 379:000 | DONE lbl | na 16 16 | 00615b |             | xt_dotquote                          
 380:000 | DONE ins | na 16 16 | 00615b | ca          |                 dex                  
 381:000 | DONE ins | na 16 16 | 00615c | ca          |                 dex                  
 382:000 | DONE ins | na 16 16 | 00615d | 94 00       |                 sty.dx 00            
 383:000 | DONE ins | na 16 16 | 00615f | a0 22 00    |                 ldy.# 0022           ASCII for "
 384:000 | DONE wsp | na 16 16 |        |             |
 385:000 | DONE ins | na 16 16 | 006162 | 20 14 68    |                 jsr 006814           
 386:000 | DONE ins | na 16 16 | 006165 | 20 09 69    |                 jsr 006909           
 387:000 | DONE wsp | na 16 16 |        |             |
 388:000 | DONE ins | na 16 16 | 006168 | f4 b9 69    |                 phe.# 0069b9         
 389:000 | DONE ins | na 16 16 | 00616b | 20 61 71    |                 jsr 007161           
 390:000 | DONE wsp | na 16 16 |        |             |
 391:000 | DONE ins | na 16 16 | 00616e | 60          |                 rts                  
 392:000 | DONE lbl | na 16 16 | 00616f |             | z_dotquote                           
 393:000 | DONE wsp | na 16 16 |        |             |
 394:000 | DONE wsp | na 16 16 |        |             |
 395:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 396:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 397:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 398:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 399:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 400:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 401:000 | DONE lbl | na 16 16 | 00616f |             | xt_dots                              
 402:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 403:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 404:000 | DONE ins | na 16 16 | 00616f | 20 82 65    |                 jsr 006582           ( -- u)
 405:000 | DONE wsp | na 16 16 |        |             |
 406:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 407:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 408:000 | DONE ins | na 16 16 | 006172 | a9 3c 00    |                 lda.# 3c             
 409:000 | DONE ins | na 16 16 | 006175 | 20 36 60    |                 jsr 006036           
 410:000 | DONE wsp | na 16 16 |        |             |
 411:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 412:000 | DONE ins | na 16 16 | 006178 | 98          |                 tya                  
 413:000 | DONE ins | na 16 16 | 006179 | 29 00 ff    |                 and.# 0ff00          
 414:000 | DONE ins | na 16 16 | 00617c | eb          |                 xba                  
 415:000 | DONE ins | na 16 16 | 00617d | 20 a0 71    |                 jsr 0071a0           
 416:000 | DONE ins | na 16 16 | 006180 | 98          |                 tya                  
 417:000 | DONE ins | na 16 16 | 006181 | 29 ff 00    |                 and.# 00ff           
 418:000 | DONE ins | na 16 16 | 006184 | 20 a0 71    |                 jsr 0071a0           
 419:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 420:000 | DONE wsp | na 16 16 |        |             |
 421:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 422:000 | DONE ins | na 16 16 | 006187 | a9 3e 00    |                 lda.# 3e             
 423:000 | DONE ins | na 16 16 | 00618a | 20 36 60    |                 jsr 006036           
 424:000 | DONE ins | na 16 16 | 00618d | 20 7e 69    |                 jsr 00697e           
 425:000 | DONE wsp | na 16 16 |        |             |
 426:000 | DONE wsp | na 16 16 |        |             |
 427:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 428:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 429:000 | DONE ins | na 16 16 | 006190 | 98          |                 tya                  force flag test
 430:000 | DONE ins | na 16 16 | 006191 | f0 20       |                 beq 0061b3           
 431:000 | DONE wsp | na 16 16 |        |             |
 432:000 | DONE lbl | na 16 16 | 006193 |             | dots_not_empty                       
 433:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 434:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 435:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 436:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 437:000 | DONE wsp | na 16 16 |        |             |
 438:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 439:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 440:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 441:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 442:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles), and we save the two bytes.
 443:000 | DONE ins | na 16 16 | 006193 | da          |                 phx                  
 444:000 | DONE wsp | na 16 16 |        |             |
 445:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 446:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped.
 447:000 | DONE cmt | na 16 16 |        |             |                 ; See docs/INTERNALS.md for details
 448:000 | DONE ins | na 16 16 | 006194 | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
 449:000 | DONE ins | na 16 16 | 006197 | ca          |                 dex                  
 450:000 | DONE ins | na 16 16 | 006198 | ca          |                 dex                  points to dsp0-2, which is also garbage
 451:000 | DONE wsp | na 16 16 |        |             |
 452:000 | DONE lbl | na 16 16 | 006199 |             | dots_loop                            
 453:000 | DONE ins | na 16 16 | 006199 | ca          |                 dex                  get next element on DS, initially dsp0-4
 454:000 | DONE ins | na 16 16 | 00619a | ca          |                 dex                  
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 457:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 458:000 | DONE ins | na 16 16 | 00619b | b5 00       |                 lda.dx 00            
 459:000 | DONE ins | na 16 16 | 00619d | 29 00 ff    |                 and.# 0ff00          
 460:000 | DONE ins | na 16 16 | 0061a0 | eb          |                 xba                  
 461:000 | DONE ins | na 16 16 | 0061a1 | 20 a0 71    |                 jsr 0071a0           
 462:000 | DONE ins | na 16 16 | 0061a4 | b5 00       |                 lda.dx 00            
 463:000 | DONE ins | na 16 16 | 0061a6 | 29 ff 00    |                 and.# 00ff           
 464:000 | DONE ins | na 16 16 | 0061a9 | 20 a0 71    |                 jsr 0071a0           
 465:000 | DONE ins | na 16 16 | 0061ac | 20 7e 69    |                 jsr 00697e           
 466:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 467:000 | DONE wsp | na 16 16 |        |             |
 468:000 | DONE ins | na 16 16 | 0061af | 88          |                 dey                  
 469:000 | DONE ins | na 16 16 | 0061b0 | d0 e7       |                 bne 006199           
 470:000 | DONE wsp | na 16 16 |        |             |
 471:000 | DONE ins | na 16 16 | 0061b2 | fa          |                 plx                  restore original DSP
 472:000 | DONE wsp | na 16 16 |        |             |
 473:000 | DONE lbl | na 16 16 | 0061b3 |             | dots_done                            
 474:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 475:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 476:000 | DONE ins | na 16 16 | 0061b3 | 20 c8 65    |                 jsr 0065c8           
 477:000 | DONE wsp | na 16 16 |        |             |
 478:000 | DONE lbl | na 16 16 | 0061b6 |             | z_dots                               
 478:001 | DONE ins | na 16 16 | 0061b6 | 60          |                 rts                  
 479:000 | DONE wsp | na 16 16 |        |             |
 480:000 | DONE wsp | na 16 16 |        |             |
 481:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 482:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 483:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 484:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 485:000 | DONE cmt | na 16 16 |        |             | ; aligned
 486:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 487:000 | DONE cmt | na 16 16 |        |             | ;               tya
 488:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 489:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 490:000 | DONE cmt | na 16 16 |        |             | ;               iny
 491:000 | DONE cmt | na 16 16 |        |             | ;               iny
 492:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 493:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 494:000 | DONE cmt | na 16 16 |        |             | ;               inx
 495:000 | DONE cmt | na 16 16 |        |             | ;               inx
 496:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 497:000 | DONE lbl | na 16 16 | 0061b7 |             | xt_comma                             
 498:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 499:000 | DONE ins | na 16 16 | 0061b7 | 98          |                 tya                  
 500:000 | DONE ins | na 16 16 | 0061b8 | 92 00       |                 sta.di 000200        STA (CP)
 501:000 | DONE ins | na 16 16 | 0061ba | e6 00       |                 inc.d 000200         
 502:000 | DONE ins | na 16 16 | 0061bc | e6 00       |                 inc.d 000200         
 503:000 | DONE wsp | na 16 16 |        |             |
 504:000 | DONE ins | na 16 16 | 0061be | b4 00       |                 ldy.dx 00            
 505:000 | DONE ins | na 16 16 | 0061c0 | e8          |                 inx                  
 506:000 | DONE ins | na 16 16 | 0061c1 | e8          |                 inx                  
 507:000 | DONE wsp | na 16 16 |        |             |
 508:000 | DONE lbl | na 16 16 | 0061c2 |             | z_comma                              
 508:001 | DONE ins | na 16 16 | 0061c2 | 60          |                 rts                  
 509:000 | DONE wsp | na 16 16 |        |             |
 510:000 | DONE wsp | na 16 16 |        |             |
 511:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 512:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 513:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 514:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 515:000 | DONE lbl | na 16 16 | 0061c3 |             | xt_colon                             
 516:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 517:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 518:000 | DONE ins | na 16 16 | 0061c3 | a5 14       |                 lda.d 000214         
 519:000 | DONE ins | na 16 16 | 0061c5 | f0 06       |                 beq 0061cd           
 520:000 | DONE wsp | na 16 16 |        |             |
 521:000 | DONE ins | na 16 16 | 0061c7 | a9 df 77    |                 lda.# 0077df         
 522:000 | DONE ins | na 16 16 | 0061ca | 4c 82 71    |                 jmp 007182           
 523:000 | DONE lbl | na 16 16 | 0061cd |             | @                                    
 524:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 525:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 526:000 | DONE ins | na 16 16 | 0061cd | e6 14       |                 inc.d 000214         
 527:000 | DONE wsp | na 16 16 |        |             |
 528:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 529:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 530:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 531:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 532:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 533:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 534:000 | DONE ins | na 16 16 | 0061cf | a5 02       |                 lda.d 000202         
 535:000 | DONE ins | na 16 16 | 0061d1 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 536:000 | DONE wsp | na 16 16 |        |             |
 537:000 | DONE ins | na 16 16 | 0061d2 | 20 fd 64    |                 jsr 0064fd           
 538:000 | DONE wsp | na 16 16 |        |             |
 539:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 540:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 541:000 | DONE ins | na 16 16 | 0061d5 | a5 02       |                 lda.d 000202         
 542:000 | DONE ins | na 16 16 | 0061d7 | 85 1e       |                 sta.d 00021e         
 543:000 | DONE ins | na 16 16 | 0061d9 | 68          |                 pla                  
 544:000 | DONE ins | na 16 16 | 0061da | 85 02       |                 sta.d 000202         
 545:000 | DONE wsp | na 16 16 |        |             |
 546:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 547:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 548:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 549:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 550:000 | DONE ins | na 16 16 | 0061dc | a5 00       |                 lda.d 000200         
 551:000 | DONE ins | na 16 16 | 0061de | 38          |                 sec                  
 552:000 | DONE ins | na 16 16 | 0061df | e9 03 00    |                 sbc.# 0003           
 553:000 | DONE ins | na 16 16 | 0061e2 | 85 00       |                 sta.d 000200         
 554:000 | DONE wsp | na 16 16 |        |             |
 555:000 | DONE lbl | na 16 16 | 0061e4 |             | z_colon                              
 555:001 | DONE ins | na 16 16 | 0061e4 | 60          |                 rts                  
 556:000 | DONE wsp | na 16 16 |        |             |
 557:000 | DONE wsp | na 16 16 |        |             |
 558:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 559:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 560:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 561:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 562:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 563:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 564:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 565:000 | DONE lbl | na 16 16 | 0061e5 |             | xt_semicolon                         
 566:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 567:000 | DONE ins | na 16 16 | 0061e5 | 84 06       |                 sty.d 000206         
 568:000 | DONE wsp | na 16 16 |        |             |
 569:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 570:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 571:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 572:000 | DONE ins | na 16 16 | 0061e7 | a0 06 00    |                 ldy.# 0006           
 573:000 | DONE ins | na 16 16 | 0061ea | a5 00       |                 lda.d 000200         
 574:000 | DONE ins | na 16 16 | 0061ec | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 575:000 | DONE wsp | na 16 16 |        |             |
 576:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 577:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 578:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 579:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 580:000 | DONE ins | na 16 16 | 0061ee | a9 60 00    |                 lda.# 60             opcode for RTS
 581:000 | DONE ins | na 16 16 | 0061f1 | 92 00       |                 sta.di 000200        STA (CP)
 582:000 | DONE ins | na 16 16 | 0061f3 | e6 00       |                 inc.d 000200         MSB will be overwritten
 583:000 | DONE wsp | na 16 16 |        |             |
 584:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 585:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 586:000 | DONE ins | na 16 16 | 0061f5 | a5 1e       |                 lda.d 00021e         
 587:000 | DONE ins | na 16 16 | 0061f7 | 85 02       |                 sta.d 000202         
 588:000 | DONE wsp | na 16 16 |        |             |
 589:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 590:000 | DONE ins | na 16 16 | 0061f9 | a4 06       |                 ldy.d 000206         
 591:000 | DONE wsp | na 16 16 |        |             |
 592:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 593:000 | DONE ins | na 16 16 | 0061fb | 64 14       |                 stz.d 000214         
 594:000 | DONE wsp | na 16 16 |        |             |
 595:000 | DONE lbl | na 16 16 | 0061fd |             | z_semicolon                          
 595:001 | DONE ins | na 16 16 | 0061fd | 60          |                 rts                  
 596:000 | DONE wsp | na 16 16 |        |             |
 597:000 | DONE wsp | na 16 16 |        |             |
 598:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 599:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 600:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 601:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 602:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 603:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 604:000 | DONE lbl | na 16 16 | 0061fe |             | xt_hash                              
 605:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 606:000 | DONE ins | na 16 16 | 0061fe | 20 fb 63    |                 jsr 0063fb           ( ud addr )
 607:000 | DONE ins | na 16 16 | 006201 | 20 44 62    |                 jsr 006244           ( ud u )
 608:000 | DONE ins | na 16 16 | 006204 | 20 da 69    |                 jsr 0069da           ( rem ud )
 609:000 | DONE ins | na 16 16 | 006207 | 20 d0 68    |                 jsr 0068d0           ( ud rem )
 610:000 | DONE wsp | na 16 16 |        |             |
 611:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 612:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed
 613:000 | DONE ins | na 16 16 | 00620a | e2 20       |                 sep 20               
 613:001 | DONE ctl | na  8 16 |        |             |         .!a8
 614:000 | DONE ins | na  8 16 | 00620c | b9 41 78    |                 lda.y 007841         
 615:000 | DONE ins | na  8 16 | 00620f | c2 20       |                 rep 20               
 615:001 | DONE ctl | na 16 16 |        |             |         .!a16
 616:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 617:000 | DONE ins | na 16 16 | 006211 | 29 ff 00    |                 and.# 00ff           
 618:000 | DONE ins | na 16 16 | 006214 | a8          |                 tay                  ( ud char )
 619:000 | DONE wsp | na 16 16 |        |             |
 620:000 | DONE ins | na 16 16 | 006215 | 20 a9 66    |                 jsr 0066a9           JSR/RTS
 621:000 | DONE wsp | na 16 16 |        |             |
 622:000 | DONE lbl | na 16 16 | 006218 |             | z_hash                               
 622:001 | DONE ins | na 16 16 | 006218 | 60          |                 rts                  
 623:000 | DONE wsp | na 16 16 |        |             |
 624:000 | DONE wsp | na 16 16 |        |             |
 625:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 626:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 627:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 628:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 629:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 630:000 | DONE lbl | na 16 16 | 006219 |             | xt_numbermore                        
 631:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 632:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 633:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 634:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 635:000 | DONE ins | na 16 16 | 006219 | a4 28       |                 ldy.d 000228         
 636:000 | DONE ins | na 16 16 | 00621b | 94 00       |                 sty.dx 00            ( addr addr )
 637:000 | DONE wsp | na 16 16 |        |             |
 638:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 639:000 | DONE ins | na 16 16 | 00621d | 20 c9 67    |                 jsr 0067c9           ( addr addr pad )
 640:000 | DONE wsp | na 16 16 |        |             |
 641:000 | DONE ins | na 16 16 | 006220 | 38          |                 sec                  
 642:000 | DONE ins | na 16 16 | 006221 | 98          |                 tya                  
 643:000 | DONE ins | na 16 16 | 006222 | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 644:000 | DONE ins | na 16 16 | 006224 | a8          |                 tay                  ( addr addr n )
 645:000 | DONE wsp | na 16 16 |        |             |
 646:000 | DONE ins | na 16 16 | 006225 | e8          |                 inx                  NIP
 647:000 | DONE ins | na 16 16 | 006226 | e8          |                 inx                  
 648:000 | DONE wsp | na 16 16 |        |             |
 649:000 | DONE lbl | na 16 16 | 006227 |             | z_numbermore                         
 649:001 | DONE ins | na 16 16 | 006227 | 60          |                 rts                  
 650:000 | DONE wsp | na 16 16 |        |             |
 651:000 | DONE wsp | na 16 16 |        |             |
 652:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 653:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 654:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 655:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 656:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 657:000 | DONE lbl | na 16 16 | 006228 |             | xt_hashs                             
 658:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 659:000 | DONE lbl | na 16 16 | 006228 |             | hashs_loop                           
 660:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 661:000 | DONE ins | na 16 16 | 006228 | 20 fe 61    |                 jsr 0061fe           ( ud -- ud )
 662:000 | DONE wsp | na 16 16 |        |             |
 663:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 664:000 | DONE ins | na 16 16 | 00622b | 98          |                 tya                  
 665:000 | DONE ins | na 16 16 | 00622c | 15 00       |                 ora.dx 00            
 666:000 | DONE ins | na 16 16 | 00622e | d0 f8       |                 bne 006228           
 667:000 | DONE wsp | na 16 16 |        |             |
 668:000 | DONE lbl | na 16 16 | 006230 |             | z_hashs                              
 668:001 | DONE ins | na 16 16 | 006230 | 60          |                 rts                  
 669:000 | DONE wsp | na 16 16 |        |             |
 670:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 671:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 672:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 673:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 674:000 | DONE lbl | na 16 16 | 006231 |             | xt_question                          
 675:000 | DONE ins | na 16 16 | 006231 | 20 44 62    |                 jsr 006244           
 676:000 | DONE ins | na 16 16 | 006234 | 20 2e 61    |                 jsr 00612e           
 677:000 | DONE wsp | na 16 16 |        |             |
 678:000 | DONE lbl | na 16 16 | 006237 |             | z_question                           
 678:001 | DONE ins | na 16 16 | 006237 | 60          |                 rts                  
 679:000 | DONE wsp | na 16 16 |        |             |
 680:000 | DONE wsp | na 16 16 |        |             |
 681:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 682:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 683:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 684:000 | DONE lbl | na 16 16 | 006238 |             | xt_store                             
 685:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 686:000 | DONE ins | na 16 16 | 006238 | b5 00       |                 lda.dx 00            NOS has value
 687:000 | DONE ins | na 16 16 | 00623a | 99 00 00    |                 sta.y 0000           
 688:000 | DONE wsp | na 16 16 |        |             |
 689:000 | DONE ins | na 16 16 | 00623d | b4 02       |                 ldy.dx 02            
 690:000 | DONE ins | na 16 16 | 00623f | e8          |                 inx                  
 691:000 | DONE ins | na 16 16 | 006240 | e8          |                 inx                  
 692:000 | DONE ins | na 16 16 | 006241 | e8          |                 inx                  
 693:000 | DONE ins | na 16 16 | 006242 | e8          |                 inx                  
 694:000 | DONE wsp | na 16 16 |        |             |
 695:000 | DONE lbl | na 16 16 | 006243 |             | z_store                              
 695:001 | DONE ins | na 16 16 | 006243 | 60          |                 rts                  
 696:000 | DONE wsp | na 16 16 |        |             |
 697:000 | DONE wsp | na 16 16 |        |             |
 698:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 699:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 700:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 701:000 | DONE lbl | na 16 16 | 006244 |             | xt_fetch                             
 702:000 | DONE ins | na 16 16 | 006244 | b9 00 00    |                 lda.y 0000           
 703:000 | DONE ins | na 16 16 | 006247 | a8          |                 tay                  
 704:000 | DONE wsp | na 16 16 |        |             |
 705:000 | DONE lbl | na 16 16 | 006248 |             | z_fetch                              
 705:001 | DONE ins | na 16 16 | 006248 | 60          |                 rts                  
 706:000 | DONE wsp | na 16 16 |        |             |
 707:000 | DONE wsp | na 16 16 |        |             |
 708:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 709:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 710:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 711:000 | DONE lbl | na 16 16 | 006249 |             | xt_brackettick                       
 712:000 | DONE ins | na 16 16 | 006249 | 20 0c 63    |                 jsr 00630c           
 713:000 | DONE ins | na 16 16 | 00624c | 4c b7 66    |                 jmp 0066b7           JSR/RTS
 714:000 | DONE lbl | na 16 16 | 00624f |             | z_brackettick                        
 715:000 | DONE wsp | na 16 16 |        |             |
 716:000 | DONE wsp | na 16 16 |        |             |
 717:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 718:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 719:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 720:000 | DONE lbl | na 16 16 | 00624f |             | xt_leftbracket                       
 721:000 | DONE ins | na 16 16 | 00624f | 64 14       |                 stz.d 000214         
 722:000 | DONE lbl | na 16 16 | 006251 |             | z_leftbracket                        
 722:001 | DONE ins | na 16 16 | 006251 | 60          |                 rts                  
 723:000 | DONE wsp | na 16 16 |        |             |
 724:000 | DONE wsp | na 16 16 |        |             |
 725:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 726:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 727:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 728:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 729:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 730:000 | DONE lbl | na 16 16 | 006252 |             | xt_rightbracket                      
 731:000 | DONE ins | na 16 16 | 006252 | a9 01 00    |                 lda.# 0001           
 732:000 | DONE ins | na 16 16 | 006255 | 85 14       |                 sta.d 000214         
 733:000 | DONE wsp | na 16 16 |        |             |
 734:000 | DONE lbl | na 16 16 | 006257 |             | z_rightbracket                       
 734:001 | DONE ins | na 16 16 | 006257 | 60          |                 rts                  
 735:000 | DONE wsp | na 16 16 |        |             |
 736:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 737:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
 738:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 739:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
 740:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
 741:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
 742:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 743:000 | DONE lbl | na 16 16 | 006258 |             | xt_bracketchar                       
 744:000 | DONE ins | na 16 16 | 006258 | 20 5d 64    |                 jsr 00645d           
 745:000 | DONE ins | na 16 16 | 00625b | 20 b7 66    |                 jsr 0066b7           
 746:000 | DONE wsp | na 16 16 |        |             |
 747:000 | DONE lbl | na 16 16 | 00625e |             | z_bracketchar                        
 747:001 | DONE ins | na 16 16 | 00625e | 60          |                 rts                  
 748:000 | DONE wsp | na 16 16 |        |             |
 749:000 | DONE wsp | na 16 16 |        |             |
 750:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 751:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
 752:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
 753:000 | DONE lbl | na 16 16 | 00625f |             | xt_backslash                         
 754:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 755:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
 756:000 | DONE ins | na 16 16 | 00625f | a5 0e       |                 lda.d 00020e         
 757:000 | DONE ins | na 16 16 | 006261 | 85 12       |                 sta.d 000212         
 758:000 | DONE wsp | na 16 16 |        |             |
 759:000 | DONE lbl | na 16 16 | 006263 |             | z_backslash                          
 759:001 | DONE ins | na 16 16 | 006263 | 60          |                 rts                  
 760:000 | DONE wsp | na 16 16 |        |             |
 761:000 | DONE wsp | na 16 16 |        |             |
 762:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 763:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 764:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 765:000 | DONE lbl | na 16 16 | 006264 |             | xt_plus                              
 766:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 767:000 | DONE ins | na 16 16 | 006264 | 98          |                 tya                  
 768:000 | DONE ins | na 16 16 | 006265 | 18          |                 clc                  
 769:000 | DONE ins | na 16 16 | 006266 | 75 00       |                 adc.dx 00            
 770:000 | DONE ins | na 16 16 | 006268 | a8          |                 tay                  
 771:000 | DONE ins | na 16 16 | 006269 | e8          |                 inx                  
 772:000 | DONE ins | na 16 16 | 00626a | e8          |                 inx                  
 773:000 | DONE wsp | na 16 16 |        |             |
 774:000 | DONE lbl | na 16 16 | 00626b |             | z_plus                               
 774:001 | DONE ins | na 16 16 | 00626b | 60          |                 rts                  
 775:000 | DONE wsp | na 16 16 |        |             |
 776:000 | DONE wsp | na 16 16 |        |             |
 777:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 778:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 779:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 780:000 | DONE lbl | na 16 16 | 00626c |             | xt_minus                             
 781:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 782:000 | DONE ins | na 16 16 | 00626c | 98          |                 tya                  
 783:000 | DONE ins | na 16 16 | 00626d | 49 ff ff    |                 eor.# 0ffff          
 784:000 | DONE wsp | na 16 16 |        |             |
 785:000 | DONE ins | na 16 16 | 006270 | 38          |                 sec                  not CLC
 786:000 | DONE ins | na 16 16 | 006271 | 75 00       |                 adc.dx 00            
 787:000 | DONE wsp | na 16 16 |        |             |
 788:000 | DONE ins | na 16 16 | 006273 | a8          |                 tay                  
 789:000 | DONE ins | na 16 16 | 006274 | e8          |                 inx                  
 790:000 | DONE ins | na 16 16 | 006275 | e8          |                 inx                  
 791:000 | DONE wsp | na 16 16 |        |             |
 792:000 | DONE lbl | na 16 16 | 006276 |             | z_minus                              
 792:001 | DONE ins | na 16 16 | 006276 | 60          |                 rts                  
 793:000 | DONE wsp | na 16 16 |        |             |
 794:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 795:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
 796:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
 797:000 | DONE lbl | na 16 16 | 006277 |             | xt_mrot                              
 798:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 799:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 800:000 | DONE ins | na 16 16 | 006277 | b5 02       |                 lda.dx 02            save a
 801:000 | DONE ins | na 16 16 | 006279 | 94 02       |                 sty.dx 02            move c to 3OS
 802:000 | DONE ins | na 16 16 | 00627b | b4 00       |                 ldy.dx 00            move b to TOS
 803:000 | DONE ins | na 16 16 | 00627d | 95 00       |                 sta.dx 00            save a as NOS
 804:000 | DONE wsp | na 16 16 |        |             |
 805:000 | DONE lbl | na 16 16 | 00627f |             | z_mrot                               
 805:001 | DONE ins | na 16 16 | 00627f | 60          |                 rts                  
 806:000 | DONE wsp | na 16 16 |        |             |
 807:000 | DONE wsp | na 16 16 |        |             |
 808:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 809:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
 810:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
 811:000 | DONE lbl | na 16 16 | 006280 |             | xt_equal                             
 812:000 | DONE ins | na 16 16 | 006280 | 98          |                 tya                  
 813:000 | DONE ins | na 16 16 | 006281 | a0 00 00    |                 ldy.# 0000           default value is false
 814:000 | DONE wsp | na 16 16 |        |             |
 815:000 | DONE ins | na 16 16 | 006284 | d5 00       |                 cmp.dx 00            
 816:000 | DONE ins | na 16 16 | 006286 | d0 01       |                 bne 006289           
 817:000 | DONE ins | na 16 16 | 006288 | 88          |                 dey                  wraps to 0FFFF (true)
 818:000 | DONE wsp | na 16 16 |        |             |
 819:000 | DONE lbl | na 16 16 | 006289 |             | equal_not                            
 820:000 | DONE ins | na 16 16 | 006289 | e8          |                 inx                  
 821:000 | DONE ins | na 16 16 | 00628a | e8          |                 inx                  
 822:000 | DONE wsp | na 16 16 |        |             |
 823:000 | DONE lbl | na 16 16 | 00628b |             | z_equal                              
 823:001 | DONE ins | na 16 16 | 00628b | 60          |                 rts                  
 824:000 | DONE wsp | na 16 16 |        |             |
 825:000 | DONE wsp | na 16 16 |        |             |
 826:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 827:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 828:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 829:000 | DONE lbl | na 16 16 | 00628c |             | xt_zero                              
 830:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 831:000 | DONE ins | na 16 16 | 00628c | ca          |                 dex                  
 832:000 | DONE ins | na 16 16 | 00628d | ca          |                 dex                  
 833:000 | DONE ins | na 16 16 | 00628e | 94 00       |                 sty.dx 00            
 834:000 | DONE ins | na 16 16 | 006290 | a0 00 00    |                 ldy.# 0000           
 835:000 | DONE wsp | na 16 16 |        |             |
 836:000 | DONE lbl | na 16 16 | 006293 |             | z_zero                               
 836:001 | DONE ins | na 16 16 | 006293 | 60          |                 rts                  
 837:000 | DONE wsp | na 16 16 |        |             |
 838:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 839:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
 840:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
 841:000 | DONE lbl | na 16 16 | 006294 |             | xt_zero-equal                        
 842:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 843:000 | DONE ins | na 16 16 | 006294 | 98          |                 tya                  force flag check
 844:000 | DONE ins | na 16 16 | 006295 | d0 05       |                 bne 00629c           
 845:000 | DONE wsp | na 16 16 |        |             |
 846:000 | DONE ins | na 16 16 | 006297 | a0 ff 0f    |                 ldy.# 0fff           
 847:000 | DONE ins | na 16 16 | 00629a | 80 03       |                 bra 00629f           
 848:000 | DONE lbl | na 16 16 | 00629c |             | ze_not_zero                          
 849:000 | DONE ins | na 16 16 | 00629c | a0 00 00    |                 ldy.# 0000           
 850:000 | DONE wsp | na 16 16 |        |             |
 851:000 | DONE lbl | na 16 16 | 00629f |             | z_zero-equal                         
 851:001 | DONE ins | na 16 16 | 00629f | 60          |                 rts                  
 852:000 | DONE wsp | na 16 16 |        |             |
 853:000 | DONE wsp | na 16 16 |        |             |
 854:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 855:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
 856:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
 857:000 | DONE lbl | na 16 16 | 0062a0 |             | xt_zero-less                         
 858:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 859:000 | DONE ins | na 16 16 | 0062a0 | 98          |                 tya                  force flag check
 860:000 | DONE ins | na 16 16 | 0062a1 | 30 05       |                 bmi 0062a8           
 861:000 | DONE wsp | na 16 16 |        |             |
 862:000 | DONE ins | na 16 16 | 0062a3 | a0 00 00    |                 ldy.# 0000           
 863:000 | DONE ins | na 16 16 | 0062a6 | 80 03       |                 bra 0062ab           
 864:000 | DONE wsp | na 16 16 |        |             |
 865:000 | DONE lbl | na 16 16 | 0062a8 |             | zero-less-is-less                    
 866:000 | DONE ins | na 16 16 | 0062a8 | a0 ff ff    |                 ldy.# 0ffff          
 867:000 | DONE wsp | na 16 16 |        |             |
 868:000 | DONE lbl | na 16 16 | 0062ab |             | z_zero-less                          
 868:001 | DONE ins | na 16 16 | 0062ab | 60          |                 rts                  
 869:000 | DONE wsp | na 16 16 |        |             |
 870:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 871:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
 872:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
 873:000 | DONE lbl | na 16 16 | 0062ac |             | xt_zero-notequal                     
 874:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 875:000 | DONE ins | na 16 16 | 0062ac | 98          |                 tya                  force flag check
 876:000 | DONE ins | na 16 16 | 0062ad | f0 05       |                 beq 0062b4           
 877:000 | DONE ins | na 16 16 | 0062af | a0 ff ff    |                 ldy.# 0ffff          
 878:000 | DONE ins | na 16 16 | 0062b2 | 80 03       |                 bra 0062b7           
 879:000 | DONE lbl | na 16 16 | 0062b4 |             | zne_is_zero                          
 880:000 | DONE ins | na 16 16 | 0062b4 | a0 00 00    |                 ldy.# 0000           
 881:000 | DONE lbl | na 16 16 | 0062b7 |             | z_zero-notequal                      
 882:000 | DONE ins | na 16 16 | 0062b7 | 60          |                 rts                  
 883:000 | DONE wsp | na 16 16 |        |             |
 884:000 | DONE wsp | na 16 16 |        |             |
 885:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 886:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
 887:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
 888:000 | DONE lbl | na 16 16 | 0062b8 |             | xt_zero-more                         
 889:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 890:000 | DONE ins | na 16 16 | 0062b8 | a9 00 00    |                 lda.# 0000           default is false
 891:000 | DONE wsp | na 16 16 |        |             |
 892:000 | DONE ins | na 16 16 | 0062bb | 88          |                 dey                  
 893:000 | DONE ins | na 16 16 | 0062bc | 10 02       |                 bpl 0062c0           was at least 1
 894:000 | DONE wsp | na 16 16 |        |             |
 895:000 | DONE ins | na 16 16 | 0062be | 80 01       |                 bra 0062c1           nope, stays false
 896:000 | DONE wsp | na 16 16 |        |             |
 897:000 | DONE lbl | na 16 16 | 0062c0 |             | zero-more_true                       
 898:000 | DONE ins | na 16 16 | 0062c0 | 3a          |                 dec.a                wraps to 0ffff, true
 899:000 | DONE lbl | na 16 16 | 0062c1 |             | zero-more_done                       
 900:000 | DONE ins | na 16 16 | 0062c1 | a8          |                 tay                  
 901:000 | DONE wsp | na 16 16 |        |             |
 902:000 | DONE lbl | na 16 16 | 0062c2 |             | z_zero-more                          
 902:001 | DONE ins | na 16 16 | 0062c2 | 60          |                 rts                  
 903:000 | DONE wsp | na 16 16 |        |             |
 904:000 | DONE wsp | na 16 16 |        |             |
 905:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 906:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
 907:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
 908:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
 909:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
 910:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmp1
 911:000 | DONE lbl | na 16 16 | 0062c3 |             | xt_zbranch                           
 912:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 913:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
 914:000 | DONE ins | na 16 16 | 0062c3 | f4 ca 62    |                 phe.# 0062ca         
 915:000 | DONE ins | na 16 16 | 0062c6 | 20 61 71    |                 jsr 007161           
 916:000 | DONE wsp | na 16 16 |        |             |
 917:000 | DONE lbl | na 16 16 | 0062c9 |             | z_zbranch                            
 917:001 | DONE ins | na 16 16 | 0062c9 | 60          |                 rts                  
 918:000 | DONE wsp | na 16 16 |        |             |
 919:000 | DONE lbl | na 16 16 | 0062ca |             | zbranch_rt                           
 920:000 | DONE cmt | na 16 16 |        |             |                 ; Compiled component. Use the address on the Return Stack to
 921:000 | DONE cmt | na 16 16 |        |             |                 ; decide where we want to return to
 922:000 | DONE ins | na 16 16 | 0062ca | 68          |                 pla                  
 923:000 | DONE ins | na 16 16 | 0062cb | 85 16       |                 sta.d 000216         
 924:000 | DONE wsp | na 16 16 |        |             |
 925:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
 926:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
 927:000 | DONE ins | na 16 16 | 0062cd | 98          |                 tya                  force flag check
 928:000 | DONE ins | na 16 16 | 0062ce | f0 06       |                 beq 0062d6           flag is false (zero), so we branch
 929:000 | DONE wsp | na 16 16 |        |             |
 930:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
 931:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
 932:000 | DONE ins | na 16 16 | 0062d0 | a5 16       |                 lda.d 000216         
 933:000 | DONE ins | na 16 16 | 0062d2 | 1a          |                 inc.a                
 934:000 | DONE ins | na 16 16 | 0062d3 | 1a          |                 inc.a                
 935:000 | DONE wsp | na 16 16 |        |             |
 936:000 | DONE ins | na 16 16 | 0062d4 | 80 06       |                 bra 0062dc           
 937:000 | DONE wsp | na 16 16 |        |             |
 938:000 | DONE lbl | na 16 16 | 0062d6 |             | zb_zero                              
 939:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
 940:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
 941:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
 942:000 | DONE ins | na 16 16 | 0062d6 | a0 01 00    |                 ldy.# 0001           
 943:000 | DONE ins | na 16 16 | 0062d9 | b1 16       |                 lda.diy 000216       
 944:000 | DONE wsp | na 16 16 |        |             |
 945:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
 946:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
 947:000 | DONE ins | na 16 16 | 0062db | 3a          |                 dec.a                
 948:000 | DONE wsp | na 16 16 |        |             |
 949:000 | DONE lbl | na 16 16 | 0062dc |             | zb_done                              
 950:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
 951:000 | DONE ins | na 16 16 | 0062dc | 48          |                 pha                  
 952:000 | DONE wsp | na 16 16 |        |             |
 953:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
 954:000 | DONE ins | na 16 16 | 0062dd | b4 00       |                 ldy.dx 00            
 955:000 | DONE ins | na 16 16 | 0062df | e8          |                 inx                  
 956:000 | DONE ins | na 16 16 | 0062e0 | e8          |                 inx                  
 957:000 | DONE wsp | na 16 16 |        |             |
 958:000 | DONE ins | na 16 16 | 0062e1 | 60          |                 rts                  
 959:000 | DONE wsp | na 16 16 |        |             |
 960:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 961:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 962:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 963:000 | DONE lbl | na 16 16 | 0062e2 |             | xt_one                               
 964:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 965:000 | DONE ins | na 16 16 | 0062e2 | ca          |                 dex                  
 966:000 | DONE ins | na 16 16 | 0062e3 | ca          |                 dex                  
 967:000 | DONE ins | na 16 16 | 0062e4 | 94 00       |                 sty.dx 00            
 968:000 | DONE ins | na 16 16 | 0062e6 | a0 01 00    |                 ldy.# 0001           
 969:000 | DONE wsp | na 16 16 |        |             |
 970:000 | DONE lbl | na 16 16 | 0062e9 |             | z_one                                
 970:001 | DONE ins | na 16 16 | 0062e9 | 60          |                 rts                  
 971:000 | DONE wsp | na 16 16 |        |             |
 972:000 | DONE wsp | na 16 16 |        |             |
 973:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 974:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 975:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 976:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 977:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 978:000 | DONE lbl | na 16 16 | 0062ea |             | xt_one-minus                         
 979:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 980:000 | DONE ins | na 16 16 | 0062ea | 88          |                 dey                  
 981:000 | DONE lbl | na 16 16 | 0062eb |             | z_one-minus                          
 981:001 | DONE ins | na 16 16 | 0062eb | 60          |                 rts                  
 982:000 | DONE wsp | na 16 16 |        |             |
 983:000 | DONE wsp | na 16 16 |        |             |
 984:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 985:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 986:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 987:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 988:000 | DONE lbl | na 16 16 | 0062ec |             | xt_one-plus                          
 989:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 990:000 | DONE ins | na 16 16 | 0062ec | c8          |                 iny                  
 991:000 | DONE lbl | na 16 16 | 0062ed |             | z_one-plus                           
 991:001 | DONE ins | na 16 16 | 0062ed | 60          |                 rts                  
 992:000 | DONE wsp | na 16 16 |        |             |
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 995:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 996:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 997:000 | DONE lbl | na 16 16 | 0062ee |             | xt_two                               
 998:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 999:000 | DONE ins | na 16 16 | 0062ee | ca          |                 dex                  
1000:000 | DONE ins | na 16 16 | 0062ef | ca          |                 dex                  
1001:000 | DONE ins | na 16 16 | 0062f0 | 94 00       |                 sty.dx 00            
1002:000 | DONE ins | na 16 16 | 0062f2 | a0 02 00    |                 ldy.# 0002           
1003:000 | DONE wsp | na 16 16 |        |             |
1004:000 | DONE lbl | na 16 16 | 0062f5 |             | z_two                                
1004:001 | DONE ins | na 16 16 | 0062f5 | 60          |                 rts                  
1005:000 | DONE wsp | na 16 16 |        |             |
1006:000 | DONE wsp | na 16 16 |        |             |
1007:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1008:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1009:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1010:000 | DONE lbl | na 16 16 | 0062f6 |             | xt_two-star                          
1011:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1012:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1013:000 | DONE ins | na 16 16 | 0062f6 | 98          |                 tya                  
1014:000 | DONE ins | na 16 16 | 0062f7 | 0a          |                 asl.a                
1015:000 | DONE ins | na 16 16 | 0062f8 | a8          |                 tay                  
1016:000 | DONE wsp | na 16 16 |        |             |
1017:000 | DONE lbl | na 16 16 | 0062f9 |             | z_two-star                           
1017:001 | DONE ins | na 16 16 | 0062f9 | 60          |                 rts                  
1018:000 | DONE wsp | na 16 16 |        |             |
1019:000 | DONE wsp | na 16 16 |        |             |
1020:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1021:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1022:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1023:000 | DONE lbl | na 16 16 | 0062fa |             | xt_2drop                             
1024:000 | DONE ins | na 16 16 | 0062fa | b4 02       |                 ldy.dx 02            
1025:000 | DONE ins | na 16 16 | 0062fc | e8          |                 inx                  
1026:000 | DONE ins | na 16 16 | 0062fd | e8          |                 inx                  
1027:000 | DONE ins | na 16 16 | 0062fe | e8          |                 inx                  
1028:000 | DONE ins | na 16 16 | 0062ff | e8          |                 inx                  
1029:000 | DONE wsp | na 16 16 |        |             |
1030:000 | DONE lbl | na 16 16 | 006300 |             | z_2drop                              
1030:001 | DONE ins | na 16 16 | 006300 | 60          |                 rts                  
1031:000 | DONE wsp | na 16 16 |        |             |
1032:000 | DONE wsp | na 16 16 |        |             |
1033:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1034:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1035:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1036:000 | DONE wsp | na 16 16 |        |             |
1037:000 | DONE lbl | na 16 16 | 006301 |             | xt_2dup                              
1038:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1039:000 | DONE ins | na 16 16 | 006301 | ca          |                 dex                  
1040:000 | DONE ins | na 16 16 | 006302 | ca          |                 dex                  
1041:000 | DONE ins | na 16 16 | 006303 | ca          |                 dex                  
1042:000 | DONE ins | na 16 16 | 006304 | ca          |                 dex                  
1043:000 | DONE ins | na 16 16 | 006305 | 94 02       |                 sty.dx 02            
1044:000 | DONE ins | na 16 16 | 006307 | b5 04       |                 lda.dx 04            
1045:000 | DONE ins | na 16 16 | 006309 | 95 00       |                 sta.dx 00            
1046:000 | DONE wsp | na 16 16 |        |             |
1047:000 | DONE lbl | na 16 16 | 00630b |             | z_2dup                               
1047:001 | DONE ins | na 16 16 | 00630b | 60          |                 rts                  
1048:000 | DONE wsp | na 16 16 |        |             |
1049:000 | DONE wsp | na 16 16 |        |             |
1050:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1051:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1052:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1053:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1054:000 | DONE lbl | na 16 16 | 00630c |             | xt_tick                              
1055:000 | DONE ins | na 16 16 | 00630c | 20 e2 67    |                 jsr 0067e2           ( -- addr u )
1056:000 | DONE wsp | na 16 16 |        |             |
1057:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1058:000 | DONE ins | na 16 16 | 00630f | 98          |                 tya                  force flag check
1059:000 | DONE ins | na 16 16 | 006310 | d0 06       |                 bne 006318           
1060:000 | DONE wsp | na 16 16 |        |             |
1061:000 | DONE ins | na 16 16 | 006312 | a9 6a 77    |                 lda.# 00776a         
1062:000 | DONE ins | na 16 16 | 006315 | 4c 82 71    |                 jmp 007182           
1063:000 | DONE wsp | na 16 16 |        |             |
1064:000 | DONE lbl | na 16 16 | 006318 |             | tick_have_word                       
1065:000 | DONE ins | na 16 16 | 006318 | 20 36 66    |                 jsr 006636           ( addr u -- nt)
1066:000 | DONE ins | na 16 16 | 00631b | 98          |                 tya                  force flag check
1067:000 | DONE wsp | na 16 16 |        |             |
1068:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1069:000 | DONE ins | na 16 16 | 00631c | d0 06       |                 bne 006324           
1070:000 | DONE wsp | na 16 16 |        |             |
1071:000 | DONE ins | na 16 16 | 00631e | a9 07 78    |                 lda.# 007807         
1072:000 | DONE ins | na 16 16 | 006321 | 4c 82 71    |                 jmp 007182           
1073:000 | DONE wsp | na 16 16 |        |             |
1074:000 | DONE lbl | na 16 16 | 006324 |             | tick_have_nt                         
1075:000 | DONE ins | na 16 16 | 006324 | 20 1c 67    |                 jsr 00671c           ( nt -- xt )
1076:000 | DONE wsp | na 16 16 |        |             |
1077:000 | DONE lbl | na 16 16 | 006327 |             | z_tick                               
1077:001 | DONE ins | na 16 16 | 006327 | 60          |                 rts                  
1078:000 | DONE wsp | na 16 16 |        |             |
1079:000 | DONE wsp | na 16 16 |        |             |
1080:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1081:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1082:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1083:000 | DONE lbl | na 16 16 | 006328 |             | xt_abs                               
1084:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1085:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1086:000 | DONE ins | na 16 16 | 006328 | 98          |                 tya                  force flag test
1087:000 | DONE ins | na 16 16 | 006329 | 10 05       |                 bpl 006330           positive number is easy
1088:000 | DONE wsp | na 16 16 |        |             |
1089:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1090:000 | DONE ins | na 16 16 | 00632b | 49 ff ff    |                 eor.# 0ffff          
1091:000 | DONE ins | na 16 16 | 00632e | 1a          |                 inc.a                
1092:000 | DONE ins | na 16 16 | 00632f | a8          |                 tay                  
1093:000 | DONE wsp | na 16 16 |        |             |
1094:000 | DONE lbl | na 16 16 | 006330 |             | z_abs                                
1094:001 | DONE ins | na 16 16 | 006330 | 60          |                 rts                  
1095:000 | DONE wsp | na 16 16 |        |             |
1096:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1097:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1098:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1099:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1100:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1101:000 | DONE lbl | na 16 16 | 006331 |             | xt_accept                            
1102:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1103:000 | DONE ins | na 16 16 | 006331 | 98          |                 tya                  force flag test
1104:000 | DONE ins | na 16 16 | 006332 | d0 03       |                 bne 006337           
1105:000 | DONE wsp | na 16 16 |        |             |
1106:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1107:000 | DONE ins | na 16 16 | 006334 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1108:000 | DONE ins | na 16 16 | 006335 | e8          |                 inx                  
1109:000 | DONE wsp | na 16 16 |        |             |
1110:000 | DONE ins | na 16 16 | 006336 | 60          |                 rts                  
1111:000 | DONE wsp | na 16 16 |        |             |
1112:000 | DONE lbl | na 16 16 | 006337 |             | accept_nonzero                       
1113:000 | DONE ins | na 16 16 | 006337 | b5 00       |                 lda.dx 00            address of buffer is NOS
1114:000 | DONE ins | na 16 16 | 006339 | 85 16       |                 sta.d 000216         
1115:000 | DONE ins | na 16 16 | 00633b | e8          |                 inx                  NIP
1116:000 | DONE ins | na 16 16 | 00633c | e8          |                 inx                  
1117:000 | DONE wsp | na 16 16 |        |             |
1118:000 | DONE ins | na 16 16 | 00633d | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
1119:000 | DONE ins | na 16 16 | 00633f | a0 00 00    |                 ldy.# 0000           Use Y as counter
1120:000 | DONE ins | na 16 16 | 006342 | e2 20       |                 sep 20               
1120:001 | DONE ctl | na  8 16 |        |             |         .!a8
1121:000 | DONE wsp | na  8 16 |        |             |
1122:000 | DONE lbl | na  8 16 | 006344 |             | accept_loop                          
1123:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
1124:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1125:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
1126:000 | DONE ins | na  8 16 | 006344 | 20 47 60    |                 jsr 006047           
1127:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1128:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
1129:000 | DONE ins | na  8 16 | 006347 | c9 0a       |                 cmp.# AscLF          
1130:000 | DONE ins | na  8 16 | 006349 | f0 44       |                 beq 00638f           
1131:000 | DONE ins | na  8 16 | 00634b | c9 0d       |                 cmp.# AscCR          
1132:000 | DONE ins | na  8 16 | 00634d | f0 40       |                 beq 00638f           
1133:000 | DONE wsp | na  8 16 |        |             |
1134:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
1135:000 | DONE ins | na  8 16 | 00634f | c9 08       |                 cmp.# AscBS          
1136:000 | DONE ins | na  8 16 | 006351 | f0 44       |                 beq 006397           
1137:000 | DONE ins | na  8 16 | 006353 | c9 7f       |                 cmp.# AscDEL         
1138:000 | DONE ins | na  8 16 | 006355 | f0 40       |                 beq 006397           
1139:000 | DONE wsp | na  8 16 |        |             |
1140:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1141:000 | DONE ins | na  8 16 | 006357 | c9 03       |                 cmp.# AscCC          
1142:000 | DONE ins | na  8 16 | 006359 | d0 03       |                 bne 00635e           
1143:000 | DONE ins | na  8 16 | 00635b | 4c 97 60    |                 jmp 006097           
1144:000 | DONE lbl | na  8 16 | 00635e |             | @                                    
1145:000 | DONE ins | na  8 16 | 00635e | c9 1b       |                 cmp.# AscESC         
1146:000 | DONE ins | na  8 16 | 006360 | d0 03       |                 bne 006365           
1147:000 | DONE ins | na  8 16 | 006362 | 4c 97 60    |                 jmp 006097           
1148:000 | DONE lbl | na  8 16 | 006365 |             | @                                    
1149:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1150:000 | DONE ins | na  8 16 | 006365 | c9 10       |                 cmp.# AscCP          
1151:000 | DONE ins | na  8 16 | 006367 | d0 0c       |                 bne 006375           
1152:000 | DONE ins | na  8 16 | 006369 | c2 20       |                 rep 20               
1152:001 | DONE ctl | na 16 16 |        |             |         .!a16
1153:000 | DONE ins | na 16 16 | 00636b | a9 1f 78    |                 lda.# 00781f         
1154:000 | DONE ins | na 16 16 | 00636e | 20 88 71    |                 jsr 007188           
1155:000 | DONE ins | na 16 16 | 006371 | e2 20       |                 sep 20               
1155:001 | DONE ctl | na  8 16 |        |             |         .!a8
1156:000 | DONE ins | na  8 16 | 006373 | 80 cf       |                 bra 006344           
1157:000 | DONE lbl | na  8 16 | 006375 |             | @                                    
1158:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1159:000 | DONE ins | na  8 16 | 006375 | c9 0e       |                 cmp.# AscCN          
1160:000 | DONE ins | na  8 16 | 006377 | d0 0c       |                 bne 006385           
1161:000 | DONE ins | na  8 16 | 006379 | c2 20       |                 rep 20               
1161:001 | DONE ctl | na 16 16 |        |             |         .!a16
1162:000 | DONE ins | na 16 16 | 00637b | a9 32 78    |                 lda.# 007832         
1163:000 | DONE ins | na 16 16 | 00637e | 20 88 71    |                 jsr 007188           
1164:000 | DONE ins | na 16 16 | 006381 | e2 20       |                 sep 20               
1164:001 | DONE ctl | na  8 16 |        |             |         .!a8
1165:000 | DONE ins | na  8 16 | 006383 | 80 bf       |                 bra 006344           
1166:000 | DONE wsp | na  8 16 |        |             |
1167:000 | DONE lbl | na  8 16 | 006385 |             | @                                    
1168:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
1169:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
1170:000 | DONE ins | na  8 16 | 006385 | 20 36 60    |                 jsr 006036           echo character
1171:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1172:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
1173:000 | DONE wsp | na  8 16 |        |             |
1174:000 | DONE ins | na  8 16 | 006388 | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
1175:000 | DONE ins | na  8 16 | 00638a | c8          |                 iny                  
1176:000 | DONE ins | na  8 16 | 00638b | c4 18       |                 cpy.d 000218         reached character limit?
1177:000 | DONE ins | na  8 16 | 00638d | d0 b5       |                 bne 006344           fall thru if buffer limit reached
1178:000 | DONE wsp | na  8 16 |        |             |
1179:000 | DONE lbl | na  8 16 | 00638f |             | accept_eol                           
1180:000 | DONE ins | na  8 16 | 00638f | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
1181:000 | DONE ins | na  8 16 | 006391 | c2 20       |                 rep 20               
1181:001 | DONE ctl | na 16 16 |        |             |         .!a16
1182:000 | DONE ins | na 16 16 | 006393 | 20 7e 69    |                 jsr 00697e           print final space
1183:000 | DONE ins | na 16 16 | 006396 | 60          |                 rts                  this is the actual return of the routine
1184:000 | DONE wsp | na 16 16 |        |             |
1185:000 | DONE lbl | na 16 16 | 006397 |             | accept_bs                            
1186:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1187:000 | DONE ins | na  8 16 | 006397 | c0 00 00    |                 cpy.# 0000           buffer empty?
1188:000 | DONE ins | na  8 16 | 00639a | d0 06       |                 bne 0063a2           
1189:000 | DONE wsp | na  8 16 |        |             |
1190:000 | DONE ins | na  8 16 | 00639c | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
1191:000 | DONE ins | na  8 16 | 00639e | 20 36 60    |                 jsr 006036           
1192:000 | DONE ins | na  8 16 | 0063a1 | c8          |                 iny                  
1193:000 | DONE lbl | na  8 16 | 0063a2 |             | @                                    
1194:000 | DONE ins | na  8 16 | 0063a2 | 88          |                 dey                  
1195:000 | DONE ins | na  8 16 | 0063a3 | a9 08       |                 lda.# AscBS          move back one
1196:000 | DONE ins | na  8 16 | 0063a5 | 20 36 60    |                 jsr 006036           
1197:000 | DONE ins | na  8 16 | 0063a8 | a9 20       |                 lda.# AscSP          print a space (rubout)
1198:000 | DONE ins | na  8 16 | 0063aa | 20 36 60    |                 jsr 006036           
1199:000 | DONE ins | na  8 16 | 0063ad | a9 08       |                 lda.# AscBS          move back over space
1200:000 | DONE ins | na  8 16 | 0063af | 20 36 60    |                 jsr 006036           
1201:000 | DONE wsp | na  8 16 |        |             |
1202:000 | DONE ins | na  8 16 | 0063b2 | 80 90       |                 bra 006344           
1203:000 | DONE wsp | na  8 16 |        |             |
1204:000 | DONE lbl | na  8 16 | 0063b4 |             | z_accept                             
1204:001 | DONE ins | na  8 16 | 0063b4 | 60          |                 rts                  
1205:000 | DONE wsp | na  8 16 |        |             |
1206:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1207:000 | DONE cmt | na  8 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1208:000 | DONE cmt | na  8 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1209:000 | DONE cmt | na  8 16 |        |             | ; instead of BRA to make sure we have the range.
1210:000 | DONE cmt | na  8 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1211:000 | DONE lbl | na  8 16 | 0063b5 |             | xt_again                             
1212:000 | DONE wsp | na  8 16 |        |             |
1213:000 | DONE cmt | na  8 16 |        |             |                 ; Add the opcode for a JMP
1214:000 | DONE ins | na  8 16 | 0063b5 | e2 20       |                 sep 20               
1214:001 | DONE ctl | na  8 16 |        |             |         .!a8
1215:000 | DONE ins | na  8 16 | 0063b7 | a9 4c       |                 lda.# 4c             
1216:000 | DONE ins | na  8 16 | 0063b9 | 92 00       |                 sta.di 000200        STA (CP)
1217:000 | DONE ins | na  8 16 | 0063bb | c2 20       |                 rep 20               
1217:001 | DONE ctl | na 16 16 |        |             |         .!a16
1218:000 | DONE ins | na 16 16 | 0063bd | e6 00       |                 inc.d 000200         
1219:000 | DONE wsp | na 16 16 |        |             |
1220:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1221:000 | DONE ins | na 16 16 | 0063bf | 98          |                 tya                  
1222:000 | DONE ins | na 16 16 | 0063c0 | 92 00       |                 sta.di 000200        
1223:000 | DONE ins | na 16 16 | 0063c2 | e6 00       |                 inc.d 000200         
1224:000 | DONE ins | na 16 16 | 0063c4 | e6 00       |                 inc.d 000200         
1225:000 | DONE wsp | na 16 16 |        |             |
1226:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1227:000 | DONE ins | na 16 16 | 0063c6 | b4 00       |                 ldy.dx 00            
1228:000 | DONE ins | na 16 16 | 0063c8 | e8          |                 inx                  
1229:000 | DONE ins | na 16 16 | 0063c9 | e8          |                 inx                  
1230:000 | DONE wsp | na 16 16 |        |             |
1231:000 | DONE lbl | na 16 16 | 0063ca |             | z_again                              
1231:001 | DONE ins | na 16 16 | 0063ca | 60          |                 rts                  
1232:000 | DONE wsp | na 16 16 |        |             |
1233:000 | DONE wsp | na 16 16 |        |             |
1234:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1235:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1236:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1237:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1238:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1239:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1240:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1241:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1242:000 | DONE lbl | na 16 16 | 0063cb |             | xt_allot                             
1243:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1244:000 | DONE ins | na 16 16 | 0063cb | 98          |                 tya                  force flag check
1245:000 | DONE ins | na 16 16 | 0063cc | f0 21       |                 beq 0063ef           zero bytes, don't do anything
1246:000 | DONE ins | na 16 16 | 0063ce | 30 12       |                 bmi 0063e2           free memory instead of reserving it
1247:000 | DONE wsp | na 16 16 |        |             |
1248:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1249:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1250:000 | DONE ins | na 16 16 | 0063d0 | 18          |                 clc                  
1251:000 | DONE ins | na 16 16 | 0063d1 | 65 00       |                 adc.d 000200         create new CP
1252:000 | DONE ins | na 16 16 | 0063d3 | b0 07       |                 bcs 0063dc           oops, we've wrapped
1253:000 | DONE wsp | na 16 16 |        |             |
1254:000 | DONE ins | na 16 16 | 0063d5 | a8          |                 tay                  save copy of new CP
1255:000 | DONE wsp | na 16 16 |        |             |
1256:000 | DONE ins | na 16 16 | 0063d6 | 38          |                 sec                  
1257:000 | DONE ins | na 16 16 | 0063d7 | e9 ff 7b    |                 sbc.# 007bff         
1258:000 | DONE ins | na 16 16 | 0063da | 30 11       |                 bmi 0063ed           oops, fall thru if beyond max RAM
1259:000 | DONE wsp | na 16 16 |        |             |
1260:000 | DONE lbl | na 16 16 | 0063dc |             | allot_error                          
1261:000 | DONE ins | na 16 16 | 0063dc | a9 cb 76    |                 lda.# 0076cb         
1262:000 | DONE ins | na 16 16 | 0063df | 4c 82 71    |                 jmp 007182           
1263:000 | DONE wsp | na 16 16 |        |             |
1264:000 | DONE lbl | na 16 16 | 0063e2 |             | allot_minus                          
1265:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1266:000 | DONE ins | na 16 16 | 0063e2 | 38          |                 sec                  
1267:000 | DONE ins | na 16 16 | 0063e3 | e5 00       |                 sbc.d 000200         
1268:000 | DONE ins | na 16 16 | 0063e5 | 90 f5       |                 bcc 0063dc           oops, we've wrapped
1269:000 | DONE wsp | na 16 16 |        |             |
1270:000 | DONE ins | na 16 16 | 0063e7 | a8          |                 tay                  
1271:000 | DONE wsp | na 16 16 |        |             |
1272:000 | DONE ins | na 16 16 | 0063e8 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1273:000 | DONE ins | na 16 16 | 0063eb | 30 ef       |                 bmi 0063dc           oops, gone too far back
1274:000 | DONE wsp | na 16 16 |        |             |
1275:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1276:000 | DONE lbl | na 16 16 | 0063ed |             | allot_done                           
1277:000 | DONE ins | na 16 16 | 0063ed | 84 00       |                 sty.d 000200         new compiler pointer
1278:000 | DONE lbl | na 16 16 | 0063ef |             | allot_real_gone                      
1279:000 | DONE ins | na 16 16 | 0063ef | b4 00       |                 ldy.dx 00            DROP
1280:000 | DONE ins | na 16 16 | 0063f1 | e8          |                 inx                  
1281:000 | DONE ins | na 16 16 | 0063f2 | e8          |                 inx                  
1282:000 | DONE wsp | na 16 16 |        |             |
1283:000 | DONE lbl | na 16 16 | 0063f3 |             | z_allot                              
1283:001 | DONE ins | na 16 16 | 0063f3 | 60          |                 rts                  
1284:000 | DONE wsp | na 16 16 |        |             |
1285:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1286:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1287:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1288:000 | DONE lbl | na 16 16 | 0063f4 |             | xt_and                               
1289:000 | DONE ins | na 16 16 | 0063f4 | 98          |                 tya                  
1290:000 | DONE ins | na 16 16 | 0063f5 | 35 00       |                 and.dx 00            
1291:000 | DONE ins | na 16 16 | 0063f7 | a8          |                 tay                  
1292:000 | DONE wsp | na 16 16 |        |             |
1293:000 | DONE ins | na 16 16 | 0063f8 | e8          |                 inx                  NIP
1294:000 | DONE ins | na 16 16 | 0063f9 | e8          |                 inx                  
1295:000 | DONE wsp | na 16 16 |        |             |
1296:000 | DONE lbl | na 16 16 | 0063fa |             | z_and                                
1296:001 | DONE ins | na 16 16 | 0063fa | 60          |                 rts                  
1297:000 | DONE wsp | na 16 16 |        |             |
1298:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1299:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1300:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1301:000 | DONE lbl | na 16 16 | 0063fb |             | xt_base                              
1302:000 | DONE ins | na 16 16 | 0063fb | ca          |                 dex                  
1303:000 | DONE ins | na 16 16 | 0063fc | ca          |                 dex                  
1304:000 | DONE ins | na 16 16 | 0063fd | 94 00       |                 sty.dx 00            
1305:000 | DONE wsp | na 16 16 |        |             |
1306:000 | DONE ins | na 16 16 | 0063ff | a0 1c 02    |                 ldy.# 00021c         
1307:000 | DONE wsp | na 16 16 |        |             |
1308:000 | DONE lbl | na 16 16 | 006402 |             | z_base                               
1308:001 | DONE ins | na 16 16 | 006402 | 60          |                 rts                  
1309:000 | DONE wsp | na 16 16 |        |             |
1310:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1311:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1312:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1313:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1314:000 | DONE lbl | na 16 16 | 006403 |             | xt_bell                              
1315:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1316:000 | DONE ins | na 16 16 | 006403 | a9 07 00    |                 lda.# AscBELL        
1317:000 | DONE ins | na 16 16 | 006406 | 20 36 60    |                 jsr 006036           
1318:000 | DONE wsp | na 16 16 |        |             |
1319:000 | DONE lbl | na 16 16 | 006409 |             | z_bell                               
1319:001 | DONE ins | na 16 16 | 006409 | 60          |                 rts                  
1320:000 | DONE wsp | na 16 16 |        |             |
1321:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1322:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1323:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1324:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1325:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1326:000 | DONE lbl | na 16 16 | 00640a |             | xt_begin                             
1327:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1328:000 | DONE ins | na 16 16 | 00640a | ca          |                 dex                  
1329:000 | DONE ins | na 16 16 | 00640b | ca          |                 dex                  
1330:000 | DONE ins | na 16 16 | 00640c | 94 00       |                 sty.dx 00            
1331:000 | DONE wsp | na 16 16 |        |             |
1332:000 | DONE ins | na 16 16 | 00640e | a4 00       |                 ldy.d 000200         
1333:000 | DONE wsp | na 16 16 |        |             |
1334:000 | DONE lbl | na 16 16 | 006410 |             | z_begin                              
1334:001 | DONE ins | na 16 16 | 006410 | 60          |                 rts                  
1335:000 | DONE wsp | na 16 16 |        |             |
1336:000 | DONE wsp | na 16 16 |        |             |
1337:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1338:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1339:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1340:000 | DONE lbl | na 16 16 | 006411 |             | xt_bl                                
1341:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1342:000 | DONE ins | na 16 16 | 006411 | ca          |                 dex                  
1343:000 | DONE ins | na 16 16 | 006412 | ca          |                 dex                  
1344:000 | DONE ins | na 16 16 | 006413 | 94 00       |                 sty.dx 00            
1345:000 | DONE ins | na 16 16 | 006415 | a0 20 00    |                 ldy.# AscSP          
1346:000 | DONE wsp | na 16 16 |        |             |
1347:000 | DONE lbl | na 16 16 | 006418 |             | z_bl                                 
1347:001 | DONE ins | na 16 16 | 006418 | 60          |                 rts                  
1348:000 | DONE wsp | na 16 16 |        |             |
1349:000 | DONE wsp | na 16 16 |        |             |
1350:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1351:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1352:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. Uses tmp3 and tmptos
1353:000 | DONE lbl | na 16 16 | 006419 |             | xt_branch                            
1354:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1355:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1356:000 | DONE ins | na 16 16 | 006419 | f4 20 64    |                 phe.# 006420         
1357:000 | DONE ins | na 16 16 | 00641c | 20 61 71    |                 jsr 007161           
1358:000 | DONE wsp | na 16 16 |        |             |
1359:000 | DONE lbl | na 16 16 | 00641f |             | z_branch                             
1359:001 | DONE ins | na 16 16 | 00641f | 60          |                 rts                  
1360:000 | DONE wsp | na 16 16 |        |             |
1361:000 | DONE lbl | na 16 16 | 006420 |             | branch_rt                            
1362:000 | DONE ins | na 16 16 | 006420 | 84 06       |                 sty.d 000206         
1363:000 | DONE wsp | na 16 16 |        |             |
1364:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1365:000 | DONE ins | na 16 16 | 006422 | 68          |                 pla                  
1366:000 | DONE ins | na 16 16 | 006423 | 85 1a       |                 sta.d 00021a         
1367:000 | DONE ins | na 16 16 | 006425 | a0 01 00    |                 ldy.# 0001           
1368:000 | DONE ins | na 16 16 | 006428 | b1 1a       |                 lda.diy 00021a       LDA (TMP1),Y ; get address we're pointing to
1369:000 | DONE ins | na 16 16 | 00642a | 3a          |                 dec.a                
1370:000 | DONE ins | na 16 16 | 00642b | 48          |                 pha                  put target address back on Return Stack
1371:000 | DONE wsp | na 16 16 |        |             |
1372:000 | DONE ins | na 16 16 | 00642c | a4 06       |                 ldy.d 000206         
1373:000 | DONE wsp | na 16 16 |        |             |
1374:000 | DONE ins | na 16 16 | 00642e | 60          |                 rts                  
1375:000 | DONE wsp | na 16 16 |        |             |
1376:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1377:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1378:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1379:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
1380:000 | DONE lbl | na 16 16 | 00642f |             | xt_bye                               
1381:000 | DONE ins | na 16 16 | 00642f | 58          |                 cli                  
1382:000 | DONE ins | na 16 16 | 006430 | 00 00       |                 brk 00               status byte 00 required for assembler
1383:000 | DONE wsp | na 16 16 |        |             |
1384:000 | DONE lbl | na 16 16 | 006432 |             | z_bye                                
1384:001 | DONE ins | na 16 16 | 006432 | 60          |                 rts                  dummy for compiling, never reached
1385:000 | DONE wsp | na 16 16 |        |             |
1386:000 | DONE wsp | na 16 16 |        |             |
1387:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1388:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1389:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
1390:000 | DONE lbl | na 16 16 | 006433 |             | xt_c-comma                           
1391:000 | DONE ins | na 16 16 | 006433 | 98          |                 tya                  
1392:000 | DONE ins | na 16 16 | 006434 | e2 20       |                 sep 20               
1392:001 | DONE ctl | na  8 16 |        |             |         .!a8
1393:000 | DONE ins | na  8 16 | 006436 | 92 00       |                 sta.di 000200        STA (CP)
1394:000 | DONE ins | na  8 16 | 006438 | c2 20       |                 rep 20               
1394:001 | DONE ctl | na 16 16 |        |             |         .!a16
1395:000 | DONE ins | na 16 16 | 00643a | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
1396:000 | DONE wsp | na 16 16 |        |             |
1397:000 | DONE ins | na 16 16 | 00643c | b4 00       |                 ldy.dx 00            
1398:000 | DONE ins | na 16 16 | 00643e | e8          |                 inx                  
1399:000 | DONE ins | na 16 16 | 00643f | e8          |                 inx                  
1400:000 | DONE wsp | na 16 16 |        |             |
1401:000 | DONE lbl | na 16 16 | 006440 |             | z_c-comma                            
1401:001 | DONE ins | na 16 16 | 006440 | 60          |                 rts                  
1402:000 | DONE wsp | na 16 16 |        |             |
1403:000 | DONE wsp | na 16 16 |        |             |
1404:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1405:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1406:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
1407:000 | DONE lbl | na 16 16 | 006441 |             | xt_c-fetch                           
1408:000 | DONE ins | na 16 16 | 006441 | e2 20       |                 sep 20               
1408:001 | DONE ctl | na  8 16 |        |             |         .!a8
1409:000 | DONE ins | na  8 16 | 006443 | b9 00 00    |                 lda.y 0000           
1410:000 | DONE ins | na  8 16 | 006446 | c2 20       |                 rep 20               
1410:001 | DONE ctl | na 16 16 |        |             |         .!a16
1411:000 | DONE ins | na 16 16 | 006448 | 29 ff 00    |                 and.# 00ff           
1412:000 | DONE ins | na 16 16 | 00644b | a8          |                 tay                  
1413:000 | DONE wsp | na 16 16 |        |             |
1414:000 | DONE lbl | na 16 16 | 00644c |             | z_c-fetch                            
1414:001 | DONE ins | na 16 16 | 00644c | 60          |                 rts                  
1415:000 | DONE wsp | na 16 16 |        |             |
1416:000 | DONE wsp | na 16 16 |        |             |
1417:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1418:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1419:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
1420:000 | DONE lbl | na 16 16 | 00644d |             | xt_c-store                           
1421:000 | DONE ins | na 16 16 | 00644d | b5 00       |                 lda.dx 00            
1422:000 | DONE ins | na 16 16 | 00644f | e2 20       |                 sep 20               
1422:001 | DONE ctl | na  8 16 |        |             |         .!a8
1423:000 | DONE ins | na  8 16 | 006451 | 99 00 00    |                 sta.y 0000           
1424:000 | DONE ins | na  8 16 | 006454 | c2 20       |                 rep 20               
1424:001 | DONE ctl | na 16 16 |        |             |         .!a16
1425:000 | DONE ins | na 16 16 | 006456 | b4 02       |                 ldy.dx 02            
1426:000 | DONE ins | na 16 16 | 006458 | e8          |                 inx                  
1427:000 | DONE ins | na 16 16 | 006459 | e8          |                 inx                  
1428:000 | DONE ins | na 16 16 | 00645a | e8          |                 inx                  
1429:000 | DONE ins | na 16 16 | 00645b | e8          |                 inx                  
1430:000 | DONE wsp | na 16 16 |        |             |
1431:000 | DONE lbl | na 16 16 | 00645c |             | z_c-store                            
1431:001 | DONE ins | na 16 16 | 00645c | 60          |                 rts                  
1432:000 | DONE wsp | na 16 16 |        |             |
1433:000 | DONE wsp | na 16 16 |        |             |
1434:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1435:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1436:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1437:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1438:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
1439:000 | DONE wsp | na 16 16 |        |             |
1440:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1441:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1442:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
1443:000 | DONE lbl | na 16 16 | 00645d |             | xt_char                              
1444:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1445:000 | DONE ins | na 16 16 | 00645d | 20 e2 67    |                 jsr 0067e2           ( -- addr u )
1446:000 | DONE wsp | na 16 16 |        |             |
1447:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
1448:000 | DONE ins | na 16 16 | 006460 | 98          |                 tya                  force flag check
1449:000 | DONE ins | na 16 16 | 006461 | d0 06       |                 bne 006469           
1450:000 | DONE wsp | na 16 16 |        |             |
1451:000 | DONE ins | na 16 16 | 006463 | a9 6a 77    |                 lda.# 00776a         
1452:000 | DONE ins | na 16 16 | 006466 | 4c 82 71    |                 jmp 007182           
1453:000 | DONE wsp | na 16 16 |        |             |
1454:000 | DONE lbl | na 16 16 | 006469 |             | char_got_char                        
1455:000 | DONE ins | na 16 16 | 006469 | b4 00       |                 ldy.dx 00            get addr from NOS
1456:000 | DONE ins | na 16 16 | 00646b | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1457:000 | DONE ins | na 16 16 | 00646e | 29 ff 00    |                 and.# 00ff           
1458:000 | DONE ins | na 16 16 | 006471 | a8          |                 tay                  
1459:000 | DONE wsp | na 16 16 |        |             |
1460:000 | DONE ins | na 16 16 | 006472 | e8          |                 inx                  
1461:000 | DONE ins | na 16 16 | 006473 | e8          |                 inx                  
1462:000 | DONE wsp | na 16 16 |        |             |
1463:000 | DONE lbl | na 16 16 | 006474 |             | z_char                               
1463:001 | DONE ins | na 16 16 | 006474 | 60          |                 rts                  
1464:000 | DONE wsp | na 16 16 |        |             |
1465:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1466:000 | DONE cmt | na 16 16 |        |             | ; CHAR>NUMBER ( char -- u f | char f )  X bytes / X cycles
1467:000 | DONE cmt | na 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
1468:000 | DONE cmt | na 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
1469:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
1470:000 | DONE cmt | na 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
1471:000 | DONE cmt | na 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it
1472:000 | DONE lbl | na 16 16 | 006475 |             | xt_char-num                          
1473:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1474:000 | DONE ins | na 16 16 | 006475 | 98          |                 tya                  
1475:000 | DONE ins | na 16 16 | 006476 | 29 ff 00    |                 and.# 00ff           
1476:000 | DONE wsp | na 16 16 |        |             |
1477:000 | DONE ins | na 16 16 | 006479 | e2 20       |                 sep 20               
1477:001 | DONE ctl | na  8 16 |        |             |         .!a8
1478:000 | DONE cmt | na  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
1479:000 | DONE ins | na  8 16 | 00647b | c9 30       |                 cmp.# 30             
1480:000 | DONE ins | na  8 16 | 00647d | 90 1d       |                 bcc 00649c           
1481:000 | DONE wsp | na  8 16 |        |             |
1482:000 | DONE cmt | na  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
1483:000 | DONE cmt | na  8 16 |        |             |                 ; a normal number
1484:000 | DONE ins | na  8 16 | 00647f | c9 3a       |                 cmp.# 00003a         This is ':'
1485:000 | DONE ins | na  8 16 | 006481 | 90 12       |                 bcc 006495           
1486:000 | DONE wsp | na  8 16 |        |             |
1487:000 | DONE cmt | na  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
1488:000 | DONE cmt | na  8 16 |        |             |                 ; we can treat the whole range as a number
1489:000 | DONE ins | na  8 16 | 006483 | c9 40       |                 cmp.# 000040         This is '@'
1490:000 | DONE ins | na  8 16 | 006485 | 90 15       |                 bcc 00649c           
1491:000 | DONE wsp | na  8 16 |        |             |
1492:000 | DONE cmt | na  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
1493:000 | DONE ins | na  8 16 | 006487 | c9 61       |                 cmp.# 61             
1494:000 | DONE ins | na  8 16 | 006489 | 90 07       |                 bcc 006492           not lower case, too low
1495:000 | DONE ins | na  8 16 | 00648b | c9 7b       |                 cmp.# 00007b         
1496:000 | DONE ins | na  8 16 | 00648d | b0 03       |                 bcs 006492           not lower case, too high
1497:000 | DONE wsp | na  8 16 |        |             |
1498:000 | DONE ins | na  8 16 | 00648f | 18          |                 clc                  just right
1499:000 | DONE ins | na  8 16 | 006490 | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
1500:000 | DONE wsp | na  8 16 |        |             |
1501:000 | DONE lbl | na  8 16 | 006492 |             | cn_case_done                         
1502:000 | DONE cmt | na  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
1503:000 | DONE cmt | na  8 16 |        |             |                 ; whole range as one number
1504:000 | DONE ins | na  8 16 | 006492 | 38          |                 sec                  
1505:000 | DONE ins | na  8 16 | 006493 | e9 07       |                 sbc.# 07             fall through to cn_checkbase
1506:000 | DONE wsp | na  8 16 |        |             |
1507:000 | DONE lbl | na  8 16 | 006495 |             | cn_checkbase                         
1508:000 | DONE cmt | na  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
1509:000 | DONE ins | na  8 16 | 006495 | 38          |                 sec                  
1510:000 | DONE ins | na  8 16 | 006496 | e9 30       |                 sbc.# 30             This is also the actual conversion step
1511:000 | DONE ins | na  8 16 | 006498 | c5 1c       |                 cmp.d 00021c         
1512:000 | DONE ins | na  8 16 | 00649a | 90 0b       |                 bcc 0064a7           
1513:000 | DONE wsp | na  8 16 |        |             |
1514:000 | DONE lbl | na  8 16 | 00649c |             | cn_notdigit                          
1515:000 | DONE cmt | na  8 16 |        |             |                 ; not a digit, add a false flag
1516:000 | DONE ins | na  8 16 | 00649c | ca          |                 dex                  
1517:000 | DONE ins | na  8 16 | 00649d | ca          |                 dex                  
1518:000 | DONE ins | na  8 16 | 00649e | 94 00       |                 sty.dx 00            keep the offending character in NOS
1519:000 | DONE ins | na  8 16 | 0064a0 | a0 00 00    |                 ldy.# 0000           
1520:000 | DONE ins | na  8 16 | 0064a3 | c2 20       |                 rep 20               
1520:001 | DONE ctl | na 16 16 |        |             |         .!a16
1521:000 | DONE ins | na 16 16 | 0064a5 | 80 09       |                 bra 0064b0           
1522:000 | DONE wsp | na 16 16 |        |             |
1523:000 | DONE lbl | na 16 16 | 0064a7 |             | cn_success                           
1524:000 | DONE ins | na 16 16 | 0064a7 | ca          |                 dex                  
1525:000 | DONE ins | na 16 16 | 0064a8 | ca          |                 dex                  
1526:000 | DONE ins | na 16 16 | 0064a9 | c2 20       |                 rep 20               
1526:001 | DONE ctl | na 16 16 |        |             |         .!a16
1527:000 | DONE ins | na 16 16 | 0064ab | 95 00       |                 sta.dx 00            put the number in NOS
1528:000 | DONE ins | na 16 16 | 0064ad | a0 ff ff    |                 ldy.# 0ffff          
1529:000 | DONE wsp | na 16 16 |        |             |
1530:000 | DONE lbl | na 16 16 | 0064b0 |             | z_char-num                           
1530:001 | DONE ins | na 16 16 | 0064b0 | 60          |                 rts                  
1531:000 | DONE wsp | na 16 16 |        |             |
1532:000 | DONE wsp | na 16 16 |        |             |
1533:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1534:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1535:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1536:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1537:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1538:000 | DONE lbl | na 16 16 | 0064b1 |             | xt_compile-only                      
1539:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1540:000 | DONE ins | na 16 16 | 0064b1 | a9 04 00    |                 lda.# CO             
1541:000 | DONE ins | na 16 16 | 0064b4 | eb          |                 xba                  flags are MSB
1542:000 | DONE ins | na 16 16 | 0064b5 | 12 02       |                 ora.di 000202        ORA (DP)
1543:000 | DONE ins | na 16 16 | 0064b7 | 92 02       |                 sta.di 000202        
1544:000 | DONE wsp | na 16 16 |        |             |
1545:000 | DONE lbl | na 16 16 | 0064b9 |             | z_compile-only                       
1545:001 | DONE ins | na 16 16 | 0064b9 | 60          |                 rts                  
1546:000 | DONE wsp | na 16 16 |        |             |
1547:000 | DONE wsp | na 16 16 |        |             |
1548:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1549:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1550:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1551:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1552:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1553:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1554:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1555:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1556:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1557:000 | DONE cmt | na 16 16 |        |             | ; TODO currently just compiles subroutine jumps
1558:000 | DONE lbl | na 16 16 | 0064ba |             | xt_compilecomma                      
1559:000 | DONE wsp | na 16 16 |        |             |
1560:000 | DONE lbl | na 16 16 | 0064ba |             | compile_as_code                      
1561:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1562:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1563:000 | DONE cmt | na 16 16 |        |             |                 ; TODO consider special cases:
1564:000 | DONE cmt | na 16 16 |        |             |                 ;  - >R R> R@ should strip PLA/PHA if native compiled
1565:000 | DONE cmt | na 16 16 |        |             |                 ;  - Don't compile comments
1566:000 | DONE wsp | na 16 16 |        |             |
1567:000 | DONE lbl | na 16 16 | 0064ba |             | compile_as_jump                      
1568:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
1569:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
1570:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
1571:000 | DONE cmt | na 16 16 |        |             |                 ; win!
1572:000 | DONE ins | na 16 16 | 0064ba | a9 20 00    |                 lda.# 20             opcode for JSR
1573:000 | DONE ins | na 16 16 | 0064bd | 92 00       |                 sta.di 000200        STA (CP)
1574:000 | DONE ins | na 16 16 | 0064bf | e6 00       |                 inc.d 000200         
1575:000 | DONE wsp | na 16 16 |        |             |
1576:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1577:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1578:000 | DONE ins | na 16 16 | 0064c1 | 98          |                 tya                  
1579:000 | DONE ins | na 16 16 | 0064c2 | 92 00       |                 sta.di 000200        
1580:000 | DONE ins | na 16 16 | 0064c4 | e6 00       |                 inc.d 000200         
1581:000 | DONE ins | na 16 16 | 0064c6 | e6 00       |                 inc.d 000200         
1582:000 | DONE wsp | na 16 16 |        |             |
1583:000 | DONE ins | na 16 16 | 0064c8 | b4 00       |                 ldy.dx 00            
1584:000 | DONE ins | na 16 16 | 0064ca | e8          |                 inx                  
1585:000 | DONE ins | na 16 16 | 0064cb | e8          |                 inx                  
1586:000 | DONE wsp | na 16 16 |        |             |
1587:000 | DONE lbl | na 16 16 | 0064cc |             | z_compilecomma                       
1587:001 | DONE ins | na 16 16 | 0064cc | 60          |                 rts                  
1588:000 | DONE wsp | na 16 16 |        |             |
1589:000 | DONE wsp | na 16 16 |        |             |
1590:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1591:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1592:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1593:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1594:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1595:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1596:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1597:000 | DONE lbl | na 16 16 | 0064cd |             | xt_constant                          
1598:000 | DONE ins | na 16 16 | 0064cd | 20 fd 64    |                 jsr 0064fd           
1599:000 | DONE wsp | na 16 16 |        |             |
1600:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1601:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1602:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1603:000 | DONE ins | na 16 16 | 0064d0 | a5 00       |                 lda.d 000200         
1604:000 | DONE ins | na 16 16 | 0064d2 | 3a          |                 dec.a                
1605:000 | DONE ins | na 16 16 | 0064d3 | 3a          |                 dec.a                
1606:000 | DONE ins | na 16 16 | 0064d4 | 85 16       |                 sta.d 000216         
1607:000 | DONE wsp | na 16 16 |        |             |
1608:000 | DONE ins | na 16 16 | 0064d6 | a9 ee 70    |                 lda.# 0070ee         
1609:000 | DONE ins | na 16 16 | 0064d9 | 92 16       |                 sta.di 000216        STA (TMP1)
1610:000 | DONE wsp | na 16 16 |        |             |
1611:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1612:000 | DONE ins | na 16 16 | 0064db | 98          |                 tya                  there is no "sty.di cp"
1613:000 | DONE ins | na 16 16 | 0064dc | 92 00       |                 sta.di 000200        
1614:000 | DONE ins | na 16 16 | 0064de | e6 00       |                 inc.d 000200         
1615:000 | DONE ins | na 16 16 | 0064e0 | e6 00       |                 inc.d 000200         
1616:000 | DONE wsp | na 16 16 |        |             |
1617:000 | DONE ins | na 16 16 | 0064e2 | b4 00       |                 ldy.dx 00            DROP
1618:000 | DONE ins | na 16 16 | 0064e4 | e8          |                 inx                  
1619:000 | DONE ins | na 16 16 | 0064e5 | e8          |                 inx                  
1620:000 | DONE wsp | na 16 16 |        |             |
1621:000 | DONE lbl | na 16 16 | 0064e6 |             | z_constant                           
1621:001 | DONE ins | na 16 16 | 0064e6 | 60          |                 rts                  
1622:000 | DONE wsp | na 16 16 |        |             |
1623:000 | DONE wsp | na 16 16 |        |             |
1624:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1625:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1626:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1627:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
1628:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
1629:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
1630:000 | DONE lbl | na 16 16 | 0064e7 |             | xt_count                             
1631:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1632:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1633:000 | DONE ins | na 16 16 | 0064e7 | 98          |                 tya                  
1634:000 | DONE ins | na 16 16 | 0064e8 | 1a          |                 inc.a                String address starts one char later
1635:000 | DONE wsp | na 16 16 |        |             |
1636:000 | DONE ins | na 16 16 | 0064e9 | ca          |                 dex                  
1637:000 | DONE ins | na 16 16 | 0064ea | ca          |                 dex                  
1638:000 | DONE ins | na 16 16 | 0064eb | 95 00       |                 sta.dx 00            NOS
1639:000 | DONE wsp | na 16 16 |        |             |
1640:000 | DONE ins | na 16 16 | 0064ed | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
1641:000 | DONE ins | na 16 16 | 0064f0 | eb          |                 xba                  move length to LSB
1642:000 | DONE ins | na 16 16 | 0064f1 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
1643:000 | DONE ins | na 16 16 | 0064f4 | a8          |                 tay                  TOS
1644:000 | DONE wsp | na 16 16 |        |             |
1645:000 | DONE lbl | na 16 16 | 0064f5 |             | z_count                              
1645:001 | DONE ins | na 16 16 | 0064f5 | 60          |                 rts                  
1646:000 | DONE wsp | na 16 16 |        |             |
1647:000 | DONE wsp | na 16 16 |        |             |
1648:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1649:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
1650:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
1651:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1652:000 | DONE lbl | na 16 16 | 0064f6 |             | xt_cr                                
1653:000 | DONE ins | na 16 16 | 0064f6 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
1654:000 | DONE ins | na 16 16 | 0064f9 | 20 36 60    |                 jsr 006036           
1655:000 | DONE wsp | na 16 16 |        |             |
1656:000 | DONE lbl | na 16 16 | 0064fc |             | z_cr                                 
1656:001 | DONE ins | na 16 16 | 0064fc | 60          |                 rts                  
1657:000 | DONE wsp | na 16 16 |        |             |
1658:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1659:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
1660:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
1661:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
1662:000 | DONE cmt | na 16 16 |        |             | ; address.
1663:000 | DONE lbl | na 16 16 | 0064fd |             | xt_create                            
1664:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1665:000 | DONE ins | na 16 16 | 0064fd | 20 e2 67    |                 jsr 0067e2           ( -- addr u )
1666:000 | DONE ins | na 16 16 | 006500 | d0 06       |                 bne 006508           
1667:000 | DONE wsp | na 16 16 |        |             |
1668:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1669:000 | DONE ins | na 16 16 | 006502 | a9 6a 77    |                 lda.# 00776a         
1670:000 | DONE ins | na 16 16 | 006505 | 4c 82 71    |                 jmp 007182           
1671:000 | DONE wsp | na 16 16 |        |             |
1672:000 | DONE lbl | na 16 16 | 006508 |             | create_got_name                      
1673:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1674:000 | DONE ins | na 16 16 | 006508 | 20 bb 71    |                 jsr 0071bb           
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1677:000 | DONE cmt | na 16 16 |        |             |                 ; word
1678:000 | DONE ins | na 16 16 | 00650b | a5 00       |                 lda.d 000200         
1679:000 | DONE ins | na 16 16 | 00650d | 85 16       |                 sta.d 000216         save start of new word
1680:000 | DONE wsp | na 16 16 |        |             |
1681:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1682:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1683:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1684:000 | DONE ins | na 16 16 | 00650f | 98          |                 tya                  
1685:000 | DONE ins | na 16 16 | 006510 | 29 ff 00    |                 and.# 00ff           
1686:000 | DONE ins | na 16 16 | 006513 | 85 18       |                 sta.d 000218         save length of name string
1687:000 | DONE wsp | na 16 16 |        |             |
1688:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1689:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1690:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1691:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1692:000 | DONE ins | na 16 16 | 006515 | 18          |                 clc                  
1693:000 | DONE ins | na 16 16 | 006516 | 69 08 00    |                 adc.# 0008           
1694:000 | DONE ins | na 16 16 | 006519 | 85 1a       |                 sta.d 00021a         total bytes required for header
1695:000 | DONE wsp | na 16 16 |        |             |
1696:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1697:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1698:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1699:000 | DONE ins | na 16 16 | 00651b | 1a          |                 inc.a                
1700:000 | DONE ins | na 16 16 | 00651c | 1a          |                 inc.a                
1701:000 | DONE ins | na 16 16 | 00651d | 1a          |                 inc.a                
1702:000 | DONE wsp | na 16 16 |        |             |
1703:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1704:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1705:000 | DONE ins | na 16 16 | 00651e | 18          |                 clc                  
1706:000 | DONE ins | na 16 16 | 00651f | 65 00       |                 adc.d 000200         
1707:000 | DONE ins | na 16 16 | 006521 | 85 00       |                 sta.d 000200         
1708:000 | DONE wsp | na 16 16 |        |             |
1709:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1710:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1711:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1712:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1713:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1714:000 | DONE ins | na 16 16 | 006523 | b5 00       |                 lda.dx 00            
1715:000 | DONE ins | na 16 16 | 006525 | 48          |                 pha                  
1716:000 | DONE wsp | na 16 16 |        |             |
1717:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1718:000 | DONE ins | na 16 16 | 006526 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1719:000 | DONE ins | na 16 16 | 006529 | a5 18       |                 lda.d 000218         get length byte
1720:000 | DONE ins | na 16 16 | 00652b | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1721:000 | DONE ins | na 16 16 | 00652d | c8          |                 iny                  
1722:000 | DONE ins | na 16 16 | 00652e | c8          |                 iny                  
1723:000 | DONE wsp | na 16 16 |        |             |
1724:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1725:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1726:000 | DONE ins | na 16 16 | 00652f | a5 02       |                 lda.d 000202         
1727:000 | DONE ins | na 16 16 | 006531 | 91 16       |                 sta.diy 000216       
1728:000 | DONE ins | na 16 16 | 006533 | c8          |                 iny                  
1729:000 | DONE ins | na 16 16 | 006534 | c8          |                 iny                  
1730:000 | DONE wsp | na 16 16 |        |             |
1731:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1732:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1733:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1734:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1735:000 | DONE ins | na 16 16 | 006535 | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1736:000 | DONE ins | na 16 16 | 006537 | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1737:000 | DONE wsp | na 16 16 |        |             |
1738:000 | DONE ins | na 16 16 | 006539 | 18          |                 clc                  
1739:000 | DONE ins | na 16 16 | 00653a | 65 1a       |                 adc.d 00021a         total header length
1740:000 | DONE ins | na 16 16 | 00653c | 91 16       |                 sta.diy 000216       
1741:000 | DONE ins | na 16 16 | 00653e | c8          |                 iny                  
1742:000 | DONE ins | na 16 16 | 00653f | c8          |                 iny                  
1743:000 | DONE wsp | na 16 16 |        |             |
1744:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1745:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1746:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1747:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1748:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1749:000 | DONE ins | na 16 16 | 006540 | 1a          |                 inc.a                
1750:000 | DONE ins | na 16 16 | 006541 | 1a          |                 inc.a                
1751:000 | DONE ins | na 16 16 | 006542 | 1a          |                 inc.a                
1752:000 | DONE ins | na 16 16 | 006543 | 91 16       |                 sta.diy 000216       
1753:000 | DONE ins | na 16 16 | 006545 | c8          |                 iny                  
1754:000 | DONE ins | na 16 16 | 006546 | c8          |                 iny                  
1755:000 | DONE wsp | na 16 16 |        |             |
1756:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1757:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1758:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1759:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1760:000 | DONE ins | na 16 16 | 006547 | 68          |                 pla                  get back string address
1761:000 | DONE ins | na 16 16 | 006548 | 38          |                 sec                  
1762:000 | DONE ins | na 16 16 | 006549 | e9 08 00    |                 sbc.# 0008           
1763:000 | DONE ins | na 16 16 | 00654c | 85 1a       |                 sta.d 00021a         
1764:000 | DONE ins | na 16 16 | 00654e | e2 20       |                 sep 20               
1764:001 | DONE ctl | na  8 16 |        |             |         .!a8
1765:000 | DONE lbl | na  8 16 | 006550 |             | @                                    
1766:000 | DONE ins | na  8 16 | 006550 | b1 1a       |                 lda.diy 00021a       
1767:000 | DONE ins | na  8 16 | 006552 | 91 16       |                 sta.diy 000216       
1768:000 | DONE ins | na  8 16 | 006554 | c8          |                 iny                  
1769:000 | DONE ins | na  8 16 | 006555 | c6 18       |                 dec.d 000218         
1770:000 | DONE ins | na  8 16 | 006557 | d0 f7       |                 bne 006550           
1771:000 | DONE wsp | na  8 16 |        |             |
1772:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1773:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1774:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1775:000 | DONE cmt | na  8 16 |        |             |                 ; good
1776:000 | DONE ins | na  8 16 | 006559 | a9 20       |                 lda.# 20             opcode of JSR
1777:000 | DONE ins | na  8 16 | 00655b | 91 16       |                 sta.diy 000216       
1778:000 | DONE ins | na  8 16 | 00655d | c8          |                 iny                  single increase only because we have 8-bit A
1779:000 | DONE wsp | na  8 16 |        |             |
1780:000 | DONE ins | na  8 16 | 00655e | a9 09       |                 lda.# .lsb 007109    
1781:000 | DONE ins | na  8 16 | 006560 | 91 16       |                 sta.diy 000216       
1782:000 | DONE ins | na  8 16 | 006562 | c8          |                 iny                  
1783:000 | DONE wsp | na  8 16 |        |             |
1784:000 | DONE ins | na  8 16 | 006563 | a9 71       |                 lda.# .msb 007109    
1785:000 | DONE ins | na  8 16 | 006565 | 91 16       |                 sta.diy 000216       
1786:000 | DONE wsp | na  8 16 |        |             |
1787:000 | DONE ins | na  8 16 | 006567 | c2 20       |                 rep 20               
1787:001 | DONE ctl | na 16 16 |        |             |         .!a16
1788:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1789:000 | DONE ins | na 16 16 | 006569 | b4 02       |                 ldy.dx 02            
1790:000 | DONE ins | na 16 16 | 00656b | e8          |                 inx                  
1791:000 | DONE ins | na 16 16 | 00656c | e8          |                 inx                  
1792:000 | DONE ins | na 16 16 | 00656d | e8          |                 inx                  
1793:000 | DONE ins | na 16 16 | 00656e | e8          |                 inx                  
1794:000 | DONE wsp | na 16 16 |        |             |
1795:000 | DONE lbl | na 16 16 | 00656f |             | z_create                             
1795:001 | DONE ins | na 16 16 | 00656f | 60          |                 rts                  
1796:000 | DONE wsp | na 16 16 |        |             |
1797:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1798:000 | DONE cmt | na 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
1799:000 | DONE cmt | na 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
1800:000 | DONE cmt | na 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
1801:000 | DONE cmt | na 16 16 |        |             | ; TODO make this work the way Gforth's does
1802:000 | DONE lbl | na 16 16 | 006570 |             | xt_dtos                              
1803:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1804:000 | DONE ins | na 16 16 | 006570 | b4 00       |                 ldy.dx 00            
1805:000 | DONE ins | na 16 16 | 006572 | e8          |                 inx                  
1806:000 | DONE ins | na 16 16 | 006573 | e8          |                 inx                  
1807:000 | DONE wsp | na 16 16 |        |             |
1808:000 | DONE lbl | na 16 16 | 006574 |             | z_dtos                               
1808:001 | DONE ins | na 16 16 | 006574 | 60          |                 rts                  
1809:000 | DONE wsp | na 16 16 |        |             |
1810:000 | DONE wsp | na 16 16 |        |             |
1811:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1812:000 | DONE cmt | na 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
1813:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a double number
1814:000 | DONE cmt | na 16 16 |        |             | ; TODO recode in assembler
1815:000 | DONE lbl | na 16 16 | 006575 |             | xt_dabs                              
1816:000 | DONE cmt | na 16 16 |        |             |                 ; double cell is TOS
1817:000 | DONE ins | na 16 16 | 006575 | 98          |                 tya                  force flag test
1818:000 | DONE ins | na 16 16 | 006576 | f0 03       |                 beq 00657b           already positive, life is good
1819:000 | DONE wsp | na 16 16 |        |             |
1820:000 | DONE ins | na 16 16 | 006578 | 20 91 65    |                 jsr 006591           
1821:000 | DONE wsp | na 16 16 |        |             |
1822:000 | DONE lbl | na 16 16 | 00657b |             | z_dabs                               
1822:001 | DONE ins | na 16 16 | 00657b | 60          |                 rts                  
1823:000 | DONE wsp | na 16 16 |        |             |
1824:000 | DONE wsp | na 16 16 |        |             |
1825:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1826:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1827:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1828:000 | DONE lbl | na 16 16 | 00657c |             | xt_decimal                           
1829:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1830:000 | DONE ins | na 16 16 | 00657c | a9 0a 00    |                 lda.# 000a           
1831:000 | DONE ins | na 16 16 | 00657f | 85 1c       |                 sta.d 00021c         
1832:000 | DONE wsp | na 16 16 |        |             |
1833:000 | DONE lbl | na 16 16 | 006581 |             | z_decimal                            
1833:001 | DONE ins | na 16 16 | 006581 | 60          |                 rts                  
1834:000 | DONE wsp | na 16 16 |        |             |
1835:000 | DONE wsp | na 16 16 |        |             |
1836:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1837:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1838:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1839:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1840:000 | DONE lbl | na 16 16 | 006582 |             | xt_depth                             
1841:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1842:000 | DONE cmt | na 16 16 |        |             |                 ; We've got zero entries when X is dsp0
1843:000 | DONE ins | na 16 16 | 006582 | 86 04       |                 stx.d 000204         
1844:000 | DONE ins | na 16 16 | 006584 | a9 f8 02    |                 lda.# 0002f8         
1845:000 | DONE ins | na 16 16 | 006587 | 38          |                 sec                  
1846:000 | DONE ins | na 16 16 | 006588 | e5 04       |                 sbc.d 000204         
1847:000 | DONE wsp | na 16 16 |        |             |
1848:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
1849:000 | DONE ins | na 16 16 | 00658a | 4a          |                 lsr.a                
1850:000 | DONE wsp | na 16 16 |        |             |
1851:000 | DONE ins | na 16 16 | 00658b | ca          |                 dex                  
1852:000 | DONE ins | na 16 16 | 00658c | ca          |                 dex                  
1853:000 | DONE ins | na 16 16 | 00658d | 94 00       |                 sty.dx 00            
1854:000 | DONE wsp | na 16 16 |        |             |
1855:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
1856:000 | DONE ins | na 16 16 | 00658f | a8          |                 tay                  
1857:000 | DONE wsp | na 16 16 |        |             |
1858:000 | DONE lbl | na 16 16 | 006590 |             | z_depth                              
1858:001 | DONE ins | na 16 16 | 006590 | 60          |                 rts                  
1859:000 | DONE wsp | na 16 16 |        |             |
1860:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1861:000 | DONE cmt | na 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
1862:000 | DONE cmt | na 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
1863:000 | DONE lbl | na 16 16 | 006591 |             | xt_dnegate                           
1864:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1865:000 | DONE cmt | na 16 16 |        |             |                 ; start off with LSW (in NOS)
1866:000 | DONE ins | na 16 16 | 006591 | b5 00       |                 lda.dx 00            
1867:000 | DONE ins | na 16 16 | 006593 | 49 ff ff    |                 eor.# 0ffff          
1868:000 | DONE wsp | na 16 16 |        |             |
1869:000 | DONE cmt | na 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
1870:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1871:000 | DONE ins | na 16 16 | 006596 | 18          |                 clc                  
1872:000 | DONE ins | na 16 16 | 006597 | 69 01 00    |                 adc.# 0001           
1873:000 | DONE ins | na 16 16 | 00659a | 95 00       |                 sta.dx 00            
1874:000 | DONE wsp | na 16 16 |        |             |
1875:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
1876:000 | DONE ins | na 16 16 | 00659c | 98          |                 tya                  
1877:000 | DONE ins | na 16 16 | 00659d | 49 ff ff    |                 eor.# 0ffff          
1878:000 | DONE ins | na 16 16 | 0065a0 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
1879:000 | DONE ins | na 16 16 | 0065a3 | a8          |                 tay                  
1880:000 | DONE wsp | na 16 16 |        |             |
1881:000 | DONE lbl | na 16 16 | 0065a4 |             | z_dnegate                            
1881:001 | DONE ins | na 16 16 | 0065a4 | 60          |                 rts                  
1882:000 | DONE wsp | na 16 16 |        |             |
1883:000 | DONE wsp | na 16 16 |        |             |
1884:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1885:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
1886:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
1887:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
1888:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
1889:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
1890:000 | DONE lbl | na 16 16 | 0065a5 |             | xt_does                              
1891:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
1892:000 | DONE ins | na 16 16 | 0065a5 | f4 b2 65    |                 phe.# 0065b2         
1893:000 | DONE ins | na 16 16 | 0065a8 | 20 61 71    |                 jsr 007161           
1894:000 | DONE wsp | na 16 16 |        |             |
1895:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
1896:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
1897:000 | DONE ins | na 16 16 | 0065ab | f4 fc 70    |                 phe.# 0070fc         
1898:000 | DONE ins | na 16 16 | 0065ae | 20 61 71    |                 jsr 007161           
1899:000 | DONE wsp | na 16 16 |        |             |
1900:000 | DONE lbl | na 16 16 | 0065b1 |             | z_does                               
1900:001 | DONE ins | na 16 16 | 0065b1 | 60          |                 rts                  
1901:000 | DONE wsp | na 16 16 |        |             |
1902:000 | DONE lbl | na 16 16 | 0065b2 |             | does_rt                              
1903:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
1904:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
1905:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
1906:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
1907:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
1908:000 | DONE ins | na 16 16 | 0065b2 | 68          |                 pla                  
1909:000 | DONE ins | na 16 16 | 0065b3 | 1a          |                 inc.a                increase by one because of RTS mechanics
1910:000 | DONE ins | na 16 16 | 0065b4 | 85 16       |                 sta.d 000216         
1911:000 | DONE wsp | na 16 16 |        |             |
1912:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
1913:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
1914:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
1915:000 | DONE cmt | na 16 16 |        |             |                 ; now.
1916:000 | DONE ins | na 16 16 | 0065b6 | a5 02       |                 lda.d 000202         
1917:000 | DONE wsp | na 16 16 |        |             |
1918:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
1919:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
1920:000 | DONE ins | na 16 16 | 0065b8 | 18          |                 clc                  
1921:000 | DONE ins | na 16 16 | 0065b9 | 69 04 00    |                 adc.# 0004           
1922:000 | DONE ins | na 16 16 | 0065bc | 85 18       |                 sta.d 000218         
1923:000 | DONE wsp | na 16 16 |        |             |
1924:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
1925:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
1926:000 | DONE ins | na 16 16 | 0065be | b2 18       |                 lda.di 000218        LDA (TMP2)
1927:000 | DONE ins | na 16 16 | 0065c0 | 1a          |                 inc.a                
1928:000 | DONE ins | na 16 16 | 0065c1 | 85 18       |                 sta.d 000218         Points to address to be replaced
1929:000 | DONE wsp | na 16 16 |        |             |
1930:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
1931:000 | DONE ins | na 16 16 | 0065c3 | a5 16       |                 lda.d 000216         
1932:000 | DONE ins | na 16 16 | 0065c5 | 92 18       |                 sta.di 000218        STA (TMP2)
1933:000 | DONE wsp | na 16 16 |        |             |
1934:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
1935:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
1936:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
1937:000 | DONE ins | na 16 16 | 0065c7 | 60          |                 rts                  
1938:000 | DONE wsp | na 16 16 |        |             |
1939:000 | DONE wsp | na 16 16 |        |             |
1940:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1941:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1942:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1943:000 | DONE wsp | na 16 16 |        |             |
1944:000 | DONE lbl | na 16 16 | 0065c8 |             | xt_drop                              
1945:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1946:000 | DONE ins | na 16 16 | 0065c8 | b4 00       |                 ldy.dx 00            
1947:000 | DONE ins | na 16 16 | 0065ca | e8          |                 inx                  
1948:000 | DONE ins | na 16 16 | 0065cb | e8          |                 inx                  
1949:000 | DONE wsp | na 16 16 |        |             |
1950:000 | DONE lbl | na 16 16 | 0065cc |             | z_drop                               
1950:001 | DONE ins | na 16 16 | 0065cc | 60          |                 rts                  
1951:000 | DONE wsp | na 16 16 |        |             |
1952:000 | DONE wsp | na 16 16 |        |             |
1953:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1954:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1955:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1956:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1957:000 | DONE lbl | na 16 16 | 0065cd |             | xt_dump                              
1958:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1959:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1960:000 | DONE ins | na 16 16 | 0065cd | 84 16       |                 sty.d 000216         
1961:000 | DONE wsp | na 16 16 |        |             |
1962:000 | DONE lbl | na 16 16 | 0065cf |             | dump_line_loop                       
1963:000 | DONE ins | na 16 16 | 0065cf | 20 f6 64    |                 jsr 0064f6           
1964:000 | DONE wsp | na 16 16 |        |             |
1965:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1966:000 | DONE ins | na 16 16 | 0065d2 | a0 10 00    |                 ldy.# 0010           
1967:000 | DONE lbl | na 16 16 | 0065d5 |             | dump_byte_loop                       
1968:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1969:000 | DONE ins | na 16 16 | 0065d5 | a5 16       |                 lda.d 000216         
1970:000 | DONE ins | na 16 16 | 0065d7 | f0 11       |                 beq 0065ea           
1971:000 | DONE wsp | na 16 16 |        |             |
1972:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1973:000 | DONE ins | na 16 16 | 0065d9 | a1 00       |                 lda.dxi 00           
1974:000 | DONE ins | na 16 16 | 0065db | 20 a0 71    |                 jsr 0071a0           TODO replace by EMIT
1975:000 | DONE ins | na 16 16 | 0065de | 20 7e 69    |                 jsr 00697e           
1976:000 | DONE wsp | na 16 16 |        |             |
1977:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1978:000 | DONE ins | na 16 16 | 0065e1 | f6 00       |                 inc.dx 00            
1979:000 | DONE wsp | na 16 16 |        |             |
1980:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1981:000 | DONE ins | na 16 16 | 0065e3 | c6 16       |                 dec.d 000216         
1982:000 | DONE ins | na 16 16 | 0065e5 | 88          |                 dey                  
1983:000 | DONE ins | na 16 16 | 0065e6 | d0 ed       |                 bne 0065d5           
1984:000 | DONE ins | na 16 16 | 0065e8 | 80 e5       |                 bra 0065cf           
1985:000 | DONE wsp | na 16 16 |        |             |
1986:000 | DONE lbl | na 16 16 | 0065ea |             | dump_done                            
1987:000 | DONE ins | na 16 16 | 0065ea | 20 f6 64    |                 jsr 0064f6           
1988:000 | DONE wsp | na 16 16 |        |             |
1989:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1990:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1991:000 | DONE ins | na 16 16 | 0065ed | b4 02       |                 ldy.dx 02            
1992:000 | DONE ins | na 16 16 | 0065ef | e8          |                 inx                  
1993:000 | DONE ins | na 16 16 | 0065f0 | e8          |                 inx                  
1994:000 | DONE ins | na 16 16 | 0065f1 | e8          |                 inx                  
1995:000 | DONE ins | na 16 16 | 0065f2 | e8          |                 inx                  
1996:000 | DONE wsp | na 16 16 |        |             |
1997:000 | DONE lbl | na 16 16 | 0065f3 |             | z_dump                               
1997:001 | DONE ins | na 16 16 | 0065f3 | 60          |                 rts                  
1998:000 | DONE wsp | na 16 16 |        |             |
1999:000 | DONE wsp | na 16 16 |        |             |
2000:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2001:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2002:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
2003:000 | DONE wsp | na 16 16 |        |             |
2004:000 | DONE lbl | na 16 16 | 0065f4 |             | xt_dup                               
2005:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2006:000 | DONE ins | na 16 16 | 0065f4 | ca          |                 dex                  
2007:000 | DONE ins | na 16 16 | 0065f5 | ca          |                 dex                  
2008:000 | DONE ins | na 16 16 | 0065f6 | 94 00       |                 sty.dx 00            
2009:000 | DONE wsp | na 16 16 |        |             |
2010:000 | DONE lbl | na 16 16 | 0065f8 |             | z_dup                                
2010:001 | DONE ins | na 16 16 | 0065f8 | 60          |                 rts                  
2011:000 | DONE wsp | na 16 16 |        |             |
2012:000 | DONE wsp | na 16 16 |        |             |
2013:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2014:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
2015:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
2016:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
2017:000 | DONE lbl | na 16 16 | 0065f9 |             | xt_evaluate                          
2018:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
2019:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
2020:000 | DONE ins | na 16 16 | 0065f9 | a5 12       |                 lda.d 000212         >IN
2021:000 | DONE ins | na 16 16 | 0065fb | 48          |                 pha                  
2022:000 | DONE ins | na 16 16 | 0065fc | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
2023:000 | DONE ins | na 16 16 | 0065fe | 48          |                 pha                  
2024:000 | DONE ins | na 16 16 | 0065ff | a5 0c       |                 lda.d 00020c         
2025:000 | DONE ins | na 16 16 | 006601 | 48          |                 pha                  
2026:000 | DONE ins | na 16 16 | 006602 | a5 0e       |                 lda.d 00020e         
2027:000 | DONE ins | na 16 16 | 006604 | 48          |                 pha                  
2028:000 | DONE wsp | na 16 16 |        |             |
2029:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
2030:000 | DONE ins | na 16 16 | 006605 | a9 ff ff    |                 lda.# 0ffff          
2031:000 | DONE ins | na 16 16 | 006608 | 85 0a       |                 sta.d 00020a         
2032:000 | DONE wsp | na 16 16 |        |             |
2033:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
2034:000 | DONE ins | na 16 16 | 00660a | 64 12       |                 stz.d 000212         
2035:000 | DONE wsp | na 16 16 |        |             |
2036:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
2037:000 | DONE ins | na 16 16 | 00660c | 84 0e       |                 sty.d 00020e         
2038:000 | DONE ins | na 16 16 | 00660e | b5 00       |                 lda.dx 00            
2039:000 | DONE ins | na 16 16 | 006610 | 85 0c       |                 sta.d 00020c         
2040:000 | DONE wsp | na 16 16 |        |             |
2041:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
2042:000 | DONE ins | na 16 16 | 006612 | b4 02       |                 ldy.dx 02            
2043:000 | DONE ins | na 16 16 | 006614 | e8          |                 inx                  
2044:000 | DONE ins | na 16 16 | 006615 | e8          |                 inx                  
2045:000 | DONE ins | na 16 16 | 006616 | e8          |                 inx                  
2046:000 | DONE ins | na 16 16 | 006617 | e8          |                 inx                  
2047:000 | DONE wsp | na 16 16 |        |             |
2048:000 | DONE ins | na 16 16 | 006618 | 20 10 71    |                 jsr 007110           
2049:000 | DONE wsp | na 16 16 |        |             |
2050:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
2051:000 | DONE ins | na 16 16 | 00661b | 68          |                 pla                  
2052:000 | DONE ins | na 16 16 | 00661c | 85 0e       |                 sta.d 00020e         
2053:000 | DONE ins | na 16 16 | 00661e | 68          |                 pla                  
2054:000 | DONE ins | na 16 16 | 00661f | 85 0c       |                 sta.d 00020c         
2055:000 | DONE ins | na 16 16 | 006621 | 68          |                 pla                  
2056:000 | DONE ins | na 16 16 | 006622 | 85 0a       |                 sta.d 00020a         
2057:000 | DONE ins | na 16 16 | 006624 | 68          |                 pla                  
2058:000 | DONE ins | na 16 16 | 006625 | 85 12       |                 sta.d 000212         
2059:000 | DONE wsp | na 16 16 |        |             |
2060:000 | DONE lbl | na 16 16 | 006627 |             | z_evaluate                           
2060:001 | DONE ins | na 16 16 | 006627 | 60          |                 rts                  
2061:000 | DONE wsp | na 16 16 |        |             |
2062:000 | DONE wsp | na 16 16 |        |             |
2063:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2064:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2065:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
2066:000 | DONE wsp | na 16 16 |        |             |
2067:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2068:000 | DONE cmt | na 16 16 |        |             | ; range
2069:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2070:000 | DONE lbl | na 16 16 | 006628 |             | execute_ip                           
2070:001 | DONE dir | na 16 16 | 006628 | (3 bytes)   |         .byte 00, 00, 00             
2070:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
2071:000 | DONE wsp | na 16 16 |        |             |
2072:000 | DONE lbl | na 16 16 | 00662b |             | xt_execute                           
2073:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2074:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2075:000 | DONE cmt | na 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
2076:000 | DONE ins | na 16 16 | 00662b | 8c 28 66    |                 sty 006628           
2077:000 | DONE ins | na 16 16 | 00662e | b4 00       |                 ldy.dx 00            
2078:000 | DONE ins | na 16 16 | 006630 | e8          |                 inx                  
2079:000 | DONE ins | na 16 16 | 006631 | e8          |                 inx                  
2080:000 | DONE wsp | na 16 16 |        |             |
2081:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
2082:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
2083:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
2084:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
2085:000 | DONE ins | na 16 16 | 006632 | 6c 28 66    |                 jmp.i 006628         JMP (EXECUTE_IP)
2086:000 | DONE wsp | na 16 16 |        |             |
2087:000 | DONE lbl | na 16 16 | 006635 |             | z_execute                            
2087:001 | DONE ins | na 16 16 | 006635 | ea          |                 nop                  Never reached, see if we need the NOP
2088:000 | DONE wsp | na 16 16 |        |             |
2089:000 | DONE wsp | na 16 16 |        |             |
2090:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2091:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
2092:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
2093:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
2094:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
2095:000 | DONE wsp | na 16 16 |        |             |
2096:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2097:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
2098:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
2099:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
2100:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
2101:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
2102:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2103:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
2104:000 | DONE lbl | na 16 16 | 006636 |             | xt_find-name                         
2105:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
2106:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
2107:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
2108:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
2109:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
2110:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
2111:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
2112:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
2113:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2114:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2115:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
2116:000 | DONE ins | na 16 16 | 006636 | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
2117:000 | DONE wsp | na 16 16 |        |             |
2118:000 | DONE ins | na 16 16 | 006638 | a4 02       |                 ldy.d 000202         
2119:000 | DONE ins | na 16 16 | 00663a | 84 16       |                 sty.d 000216         nt of first Dictionary word
2120:000 | DONE wsp | na 16 16 |        |             |
2121:000 | DONE ins | na 16 16 | 00663c | b4 00       |                 ldy.dx 00            
2122:000 | DONE ins | na 16 16 | 00663e | 84 18       |                 sty.d 000218         address of mystery string, was NOS
2123:000 | DONE wsp | na 16 16 |        |             |
2124:000 | DONE lbl | na 16 16 | 006640 |             | find-name_loop                       
2125:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
2126:000 | DONE ins | na 16 16 | 006640 | b2 16       |                 lda.di 000216        LSB in first header word is length
2127:000 | DONE ins | na 16 16 | 006642 | 29 ff 00    |                 and.# 00ff           
2128:000 | DONE ins | na 16 16 | 006645 | c5 06       |                 cmp.d 000206         we test LSB
2129:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
2130:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
2131:000 | DONE cmt | na 16 16 |        |             |                 ; same
2132:000 | DONE ins | na 16 16 | 006647 | f0 0c       |                 beq 006655           
2133:000 | DONE wsp | na 16 16 |        |             |
2134:000 | DONE lbl | na 16 16 | 006649 |             | find-name_next_entry                 
2135:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
2136:000 | DONE ins | na 16 16 | 006649 | e6 16       |                 inc.d 000216         
2137:000 | DONE ins | na 16 16 | 00664b | e6 16       |                 inc.d 000216         
2138:000 | DONE ins | na 16 16 | 00664d | b2 16       |                 lda.di 000216        LDA (TMP1)
2139:000 | DONE wsp | na 16 16 |        |             |
2140:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
2141:000 | DONE ins | na 16 16 | 00664f | f0 36       |                 beq 006687           
2142:000 | DONE wsp | na 16 16 |        |             |
2143:000 | DONE ins | na 16 16 | 006651 | 85 16       |                 sta.d 000216         new header
2144:000 | DONE ins | na 16 16 | 006653 | 80 eb       |                 bra 006640           
2145:000 | DONE wsp | na 16 16 |        |             |
2146:000 | DONE lbl | na 16 16 | 006655 |             | find-name_chars                      
2147:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
2148:000 | DONE wsp | na 16 16 |        |             |
2149:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
2150:000 | DONE ins | na 16 16 | 006655 | e2 20       |                 sep 20               
2150:001 | DONE ctl | na  8 16 |        |             |         .!a8
2151:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
2152:000 | DONE cmt | na  8 16 |        |             |                 ; header
2153:000 | DONE ins | na  8 16 | 006657 | a0 08 00    |                 ldy.# 0008           
2154:000 | DONE ins | na  8 16 | 00665a | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
2155:000 | DONE ins | na  8 16 | 00665c | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
2156:000 | DONE ins | na  8 16 | 00665e | f0 04       |                 beq 006664           
2157:000 | DONE wsp | na  8 16 |        |             |
2158:000 | DONE lbl | na  8 16 | 006660 |             | find-name_char_nomatcnt_8            
2159:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
2160:000 | DONE ins | na  8 16 | 006660 | c2 20       |                 rep 20               
2160:001 | DONE ctl | na 16 16 |        |             |         .!a16
2161:000 | DONE ins | na 16 16 | 006662 | 80 e5       |                 bra 006649           
2162:000 | DONE wsp | na 16 16 |        |             |
2163:000 | DONE lbl | na 16 16 | 006664 |             | find-name_all_chars                  
2164:000 | DONE dir | na  8 16 |        |             |         .!a8                         
2165:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
2166:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
2167:000 | DONE ins | na  8 16 | 006664 | a4 06       |                 ldy.d 000206         
2168:000 | DONE ins | na  8 16 | 006666 | 88          |                 dey                  faster and shorter than CPY.# 01
2169:000 | DONE ins | na  8 16 | 006667 | f0 18       |                 beq 006681           
2170:000 | DONE wsp | na  8 16 |        |             |
2171:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
2172:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
2173:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
2174:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
2175:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
2176:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
2177:000 | DONE wsp | na  8 16 |        |             |
2178:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
2179:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
2180:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
2181:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
2182:000 | DONE ins | na  8 16 | 006669 | c2 20       |                 rep 20               
2182:001 | DONE ctl | na 16 16 |        |             |         .!a16
2183:000 | DONE ins | na 16 16 | 00666b | a5 16       |                 lda.d 000216         address of Dictionary string
2184:000 | DONE ins | na 16 16 | 00666d | 18          |                 clc                  
2185:000 | DONE ins | na 16 16 | 00666e | 69 08 00    |                 adc.# 0008           
2186:000 | DONE ins | na 16 16 | 006671 | 85 1a       |                 sta.d 00021a         
2187:000 | DONE ins | na 16 16 | 006673 | e2 20       |                 sep 20               
2187:001 | DONE ctl | na  8 16 |        |             |         .!a8
2188:000 | DONE ins | na  8 16 | 006675 | a4 06       |                 ldy.d 000206         get length of strings as loop index
2189:000 | DONE ins | na  8 16 | 006677 | 88          |                 dey                  first index is length minus 1
2190:000 | DONE wsp | na  8 16 |        |             |
2191:000 | DONE lbl | na  8 16 | 006678 |             | @                                    
2192:000 | DONE ins | na  8 16 | 006678 | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
2193:000 | DONE ins | na  8 16 | 00667a | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
2194:000 | DONE ins | na  8 16 | 00667c | d0 e2       |                 bne 006660           
2195:000 | DONE ins | na  8 16 | 00667e | 88          |                 dey                  start of string (Y=0) was already tested
2196:000 | DONE ins | na  8 16 | 00667f | d0 f7       |                 bne 006678           
2197:000 | DONE wsp | na  8 16 |        |             |
2198:000 | DONE lbl | na  8 16 | 006681 |             | find-name_success                    
2199:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
2200:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
2201:000 | DONE ins | na  8 16 | 006681 | c2 20       |                 rep 20               
2201:001 | DONE ctl | na 16 16 |        |             |         .!a16
2202:000 | DONE ins | na 16 16 | 006683 | a4 16       |                 ldy.d 000216         get the correct DP
2203:000 | DONE ins | na 16 16 | 006685 | 80 03       |                 bra 00668a           
2204:000 | DONE wsp | na 16 16 |        |             |
2205:000 | DONE wsp | na 16 16 |        |             |
2206:000 | DONE lbl | na 16 16 | 006687 |             | find-name_failure_16                 
2207:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
2208:000 | DONE cmt | na 16 16 |        |             |                 ; bit
2209:000 | DONE ins | na 16 16 | 006687 | a0 00 00    |                 ldy.# 0000           fall thru
2210:000 | DONE wsp | na 16 16 |        |             |
2211:000 | DONE lbl | na 16 16 | 00668a |             | find-name_done                       
2212:000 | DONE ins | na 16 16 | 00668a | e8          |                 inx                  drop old address (NIP)
2213:000 | DONE ins | na 16 16 | 00668b | e8          |                 inx                  
2214:000 | DONE wsp | na 16 16 |        |             |
2215:000 | DONE lbl | na 16 16 | 00668c |             | z_find-name                          
2215:001 | DONE ins | na 16 16 | 00668c | 60          |                 rts                  
2216:000 | DONE wsp | na 16 16 |        |             |
2217:000 | DONE wsp | na 16 16 |        |             |
2218:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2219:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
2220:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
2221:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
2222:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
2223:000 | DONE lbl | na 16 16 | 00668d |             | xt_immediate                         
2224:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2225:000 | DONE ins | na 16 16 | 00668d | a9 02 00    |                 lda.# IM             Immediate flag
2226:000 | DONE ins | na 16 16 | 006690 | eb          |                 xba                  flags are MSB
2227:000 | DONE ins | na 16 16 | 006691 | 12 02       |                 ora.di 000202        ORA (DP)
2228:000 | DONE ins | na 16 16 | 006693 | 92 02       |                 sta.di 000202        
2229:000 | DONE wsp | na 16 16 |        |             |
2230:000 | DONE lbl | na 16 16 | 006695 |             | z_immediate                          
2230:001 | DONE ins | na 16 16 | 006695 | 60          |                 rts                  
2231:000 | DONE wsp | na 16 16 |        |             |
2232:000 | DONE wsp | na 16 16 |        |             |
2233:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2234:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
2235:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
2236:000 | DONE lbl | na 16 16 | 006696 |             | xt_invert                            
2237:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2238:000 | DONE ins | na 16 16 | 006696 | 98          |                 tya                  
2239:000 | DONE ins | na 16 16 | 006697 | 49 ff ff    |                 eor.# 0ffff          
2240:000 | DONE ins | na 16 16 | 00669a | a8          |                 tay                  
2241:000 | DONE wsp | na 16 16 |        |             |
2242:000 | DONE lbl | na 16 16 | 00669b |             | z_invert                             
2242:001 | DONE ins | na 16 16 | 00669b | 60          |                 rts                  
2243:000 | DONE wsp | na 16 16 |        |             |
2244:000 | DONE wsp | na 16 16 |        |             |
2245:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2246:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
2247:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
2248:000 | DONE lbl | na 16 16 | 00669c |             | xt_here                              
2249:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2250:000 | DONE ins | na 16 16 | 00669c | ca          |                 dex                  
2251:000 | DONE ins | na 16 16 | 00669d | ca          |                 dex                  
2252:000 | DONE ins | na 16 16 | 00669e | 94 00       |                 sty.dx 00            
2253:000 | DONE wsp | na 16 16 |        |             |
2254:000 | DONE ins | na 16 16 | 0066a0 | a4 00       |                 ldy.d 000200         
2255:000 | DONE wsp | na 16 16 |        |             |
2256:000 | DONE lbl | na 16 16 | 0066a2 |             | z_here                               
2256:001 | DONE ins | na 16 16 | 0066a2 | 60          |                 rts                  
2257:000 | DONE wsp | na 16 16 |        |             |
2258:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2259:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
2260:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
2261:000 | DONE lbl | na 16 16 | 0066a3 |             | xt_hex                               
2262:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2263:000 | DONE ins | na 16 16 | 0066a3 | a9 10 00    |                 lda.# 0010           
2264:000 | DONE ins | na 16 16 | 0066a6 | 85 1c       |                 sta.d 00021c         
2265:000 | DONE wsp | na 16 16 |        |             |
2266:000 | DONE lbl | na 16 16 | 0066a8 |             | z_hex                                
2266:001 | DONE ins | na 16 16 | 0066a8 | 60          |                 rts                  
2267:000 | DONE wsp | na 16 16 |        |             |
2268:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2269:000 | DONE cmt | na 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
2270:000 | DONE cmt | na 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
2271:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2272:000 | DONE cmt | na 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
2273:000 | DONE cmt | na 16 16 |        |             | ; tohold instead of HLD.
2274:000 | DONE lbl | na 16 16 | 0066a9 |             | xt_hold                              
2275:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2276:000 | DONE ins | na 16 16 | 0066a9 | c6 28       |                 dec.d 000228         -1 HLD +!
2277:000 | DONE wsp | na 16 16 |        |             |
2278:000 | DONE ins | na 16 16 | 0066ab | 98          |                 tya                  
2279:000 | DONE ins | na 16 16 | 0066ac | e2 20       |                 sep 20               
2279:001 | DONE ctl | na  8 16 |        |             |         .!a8
2280:000 | DONE ins | na  8 16 | 0066ae | 92 28       |                 sta.di 000228        STA (TOHOLD)
2281:000 | DONE ins | na  8 16 | 0066b0 | c2 20       |                 rep 20               
2281:001 | DONE ctl | na 16 16 |        |             |         .!a16
2282:000 | DONE ins | na 16 16 | 0066b2 | b4 00       |                 ldy.dx 00            
2283:000 | DONE ins | na 16 16 | 0066b4 | e8          |                 inx                  
2284:000 | DONE ins | na 16 16 | 0066b5 | e8          |                 inx                  
2285:000 | DONE wsp | na 16 16 |        |             |
2286:000 | DONE lbl | na 16 16 | 0066b6 |             | z_hold                               
2286:001 | DONE ins | na 16 16 | 0066b6 | 60          |                 rts                  
2287:000 | DONE wsp | na 16 16 |        |             |
2288:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2289:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
2290:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
2291:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
2292:000 | DONE cmt | na 16 16 |        |             | ; for instance
2293:000 | DONE lbl | na 16 16 | 0066b7 |             | xt_literal                           
2294:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
2295:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
2296:000 | DONE ins | na 16 16 | 0066b7 | f4 c9 66    |                 phe.# 0066c9         PEA LITERAL_RT
2297:000 | DONE ins | na 16 16 | 0066ba | 20 61 71    |                 jsr 007161           
2298:000 | DONE wsp | na 16 16 |        |             |
2299:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
2300:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
2301:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
2302:000 | DONE ins | na 16 16 | 0066bd | 98          |                 tya                  
2303:000 | DONE ins | na 16 16 | 0066be | 92 00       |                 sta.di 000200        
2304:000 | DONE ins | na 16 16 | 0066c0 | e6 00       |                 inc.d 000200         
2305:000 | DONE ins | na 16 16 | 0066c2 | e6 00       |                 inc.d 000200         
2306:000 | DONE wsp | na 16 16 |        |             |
2307:000 | DONE ins | na 16 16 | 0066c4 | b4 00       |                 ldy.dx 00            DROP
2308:000 | DONE ins | na 16 16 | 0066c6 | e8          |                 inx                  
2309:000 | DONE ins | na 16 16 | 0066c7 | e8          |                 inx                  
2310:000 | DONE wsp | na 16 16 |        |             |
2311:000 | DONE lbl | na 16 16 | 0066c8 |             | z_literal                            
2311:001 | DONE ins | na 16 16 | 0066c8 | 60          |                 rts                  
2312:000 | DONE wsp | na 16 16 |        |             |
2313:000 | DONE lbl | na 16 16 | 0066c9 |             | literal_rt                           
2314:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
2315:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
2316:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
2317:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
2318:000 | DONE wsp | na 16 16 |        |             |
2319:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
2320:000 | DONE ins | na 16 16 | 0066c9 | ca          |                 dex                  
2321:000 | DONE ins | na 16 16 | 0066ca | ca          |                 dex                  
2322:000 | DONE ins | na 16 16 | 0066cb | 94 00       |                 sty.dx 00            
2323:000 | DONE wsp | na 16 16 |        |             |
2324:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
2325:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
2326:000 | DONE ins | na 16 16 | 0066cd | 7a          |                 ply                  
2327:000 | DONE ins | na 16 16 | 0066ce | c8          |                 iny                  
2328:000 | DONE ins | na 16 16 | 0066cf | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
2329:000 | DONE wsp | na 16 16 |        |             |
2330:000 | DONE ins | na 16 16 | 0066d2 | c8          |                 iny                  move return address past data and restore
2331:000 | DONE ins | na 16 16 | 0066d3 | 5a          |                 phy                  so we can get back home
2332:000 | DONE wsp | na 16 16 |        |             |
2333:000 | DONE ins | na 16 16 | 0066d4 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
2334:000 | DONE wsp | na 16 16 |        |             |
2335:000 | DONE ins | na 16 16 | 0066d5 | 60          |                 rts                  
2336:000 | DONE wsp | na 16 16 |        |             |
2337:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2338:000 | DONE cmt | na 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
2339:000 | DONE cmt | na 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
2340:000 | DONE cmt | na 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
2341:000 | DONE cmt | na 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
2342:000 | DONE cmt | na 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
2343:000 | DONE cmt | na 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
2344:000 | DONE lbl | na 16 16 | 0066d6 |             | xt_mstar                             
2345:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2346:000 | DONE cmt | na 16 16 |        |             |                 ; figure out the sign
2347:000 | DONE ins | na 16 16 | 0066d6 | 98          |                 tya                  
2348:000 | DONE ins | na 16 16 | 0066d7 | 55 00       |                 eor.dx 00            
2349:000 | DONE wsp | na 16 16 |        |             |
2350:000 | DONE cmt | na 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
2351:000 | DONE cmt | na 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
2352:000 | DONE ins | na 16 16 | 0066d9 | 48          |                 pha                  
2353:000 | DONE wsp | na 16 16 |        |             |
2354:000 | DONE cmt | na 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
2355:000 | DONE cmt | na 16 16 |        |             |                 ; UM*, which does the real work
2356:000 | DONE ins | na 16 16 | 0066da | 98          |                 tya                  
2357:000 | DONE ins | na 16 16 | 0066db | 10 05       |                 bpl 0066e2           
2358:000 | DONE wsp | na 16 16 |        |             |
2359:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is negative so we have to ABS it
2360:000 | DONE ins | na 16 16 | 0066dd | 49 ff ff    |                 eor.# 0ffff          
2361:000 | DONE ins | na 16 16 | 0066e0 | 1a          |                 inc.a                
2362:000 | DONE ins | na 16 16 | 0066e1 | a8          |                 tay                  
2363:000 | DONE wsp | na 16 16 |        |             |
2364:000 | DONE lbl | na 16 16 | 0066e2 |             | mstar_abs_nos                        
2365:000 | DONE ins | na 16 16 | 0066e2 | b5 00       |                 lda.dx 00            
2366:000 | DONE ins | na 16 16 | 0066e4 | 10 06       |                 bpl 0066ec           
2367:000 | DONE wsp | na 16 16 |        |             |
2368:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is negative so we have to ABS it
2369:000 | DONE ins | na 16 16 | 0066e6 | 49 ff ff    |                 eor.# 0ffff          
2370:000 | DONE ins | na 16 16 | 0066e9 | 1a          |                 inc.a                
2371:000 | DONE ins | na 16 16 | 0066ea | 95 00       |                 sta.dx 00            
2372:000 | DONE wsp | na 16 16 |        |             |
2373:000 | DONE lbl | na 16 16 | 0066ec |             | mstar_umstar                         
2374:000 | DONE ins | na 16 16 | 0066ec | 20 f5 69    |                 jsr 0069f5           now ( d ) on stack
2375:000 | DONE wsp | na 16 16 |        |             |
2376:000 | DONE cmt | na 16 16 |        |             |                 ; handle the sign
2377:000 | DONE ins | na 16 16 | 0066ef | 68          |                 pla                  
2378:000 | DONE wsp | na 16 16 |        |             |
2379:000 | DONE cmt | na 16 16 |        |             |                 ; postive, we don't have to care
2380:000 | DONE ins | na 16 16 | 0066f0 | 10 03       |                 bpl 0066f5           
2381:000 | DONE wsp | na 16 16 |        |             |
2382:000 | DONE ins | na 16 16 | 0066f2 | 20 91 65    |                 jsr 006591           
2383:000 | DONE wsp | na 16 16 |        |             |
2384:000 | DONE lbl | na 16 16 | 0066f5 |             | z_mstar                              
2384:001 | DONE ins | na 16 16 | 0066f5 | 60          |                 rts                  
2385:000 | DONE wsp | na 16 16 |        |             |
2386:000 | DONE wsp | na 16 16 |        |             |
2387:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2388:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
2389:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
2390:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2391:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2392:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2393:000 | DONE lbl | na 16 16 | 0066f6 |             | xt_max                               
2394:000 | DONE ins | na 16 16 | 0066f6 | 98          |                 tya                  
2395:000 | DONE ins | na 16 16 | 0066f7 | d5 00       |                 cmp.dx 00            
2396:000 | DONE wsp | na 16 16 |        |             |
2397:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2398:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2399:000 | DONE ins | na 16 16 | 0066f9 | f0 0b       |                 beq 006706           Faster than DROP because TOS is in Y
2400:000 | DONE wsp | na 16 16 |        |             |
2401:000 | DONE ins | na 16 16 | 0066fb | f5 00       |                 sbc.dx 00            
2402:000 | DONE ins | na 16 16 | 0066fd | 50 03       |                 bvc 006702           no overflow, skip ahead
2403:000 | DONE wsp | na 16 16 |        |             |
2404:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2405:000 | DONE ins | na 16 16 | 0066ff | 49 00 80    |                 eor.# 8000           compliment negative flag
2406:000 | DONE wsp | na 16 16 |        |             |
2407:000 | DONE lbl | na 16 16 | 006702 |             | max_no_ov                            
2408:000 | DONE ins | na 16 16 | 006702 | 10 02       |                 bpl 006706           keep TOS
2409:000 | DONE lbl | na 16 16 | 006704 |             | max_drop                             
2410:000 | DONE ins | na 16 16 | 006704 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2411:000 | DONE lbl | na 16 16 | 006706 |             | max_nip                              
2412:000 | DONE ins | na 16 16 | 006706 | e8          |                 inx                  
2413:000 | DONE ins | na 16 16 | 006707 | e8          |                 inx                  
2414:000 | DONE wsp | na 16 16 |        |             |
2415:000 | DONE lbl | na 16 16 | 006708 |             | z_max                                
2415:001 | DONE ins | na 16 16 | 006708 | 60          |                 rts                  
2416:000 | DONE wsp | na 16 16 |        |             |
2417:000 | DONE wsp | na 16 16 |        |             |
2418:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2419:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
2420:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
2421:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2422:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2423:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2424:000 | DONE lbl | na 16 16 | 006709 |             | xt_min                               
2425:000 | DONE ins | na 16 16 | 006709 | 98          |                 tya                  
2426:000 | DONE ins | na 16 16 | 00670a | d5 00       |                 cmp.dx 00            
2427:000 | DONE wsp | na 16 16 |        |             |
2428:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2429:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2430:000 | DONE ins | na 16 16 | 00670c | f0 0b       |                 beq 006719           Faster than DROP because TOS is in Y
2431:000 | DONE wsp | na 16 16 |        |             |
2432:000 | DONE ins | na 16 16 | 00670e | f5 00       |                 sbc.dx 00            
2433:000 | DONE ins | na 16 16 | 006710 | 50 03       |                 bvc 006715           no overflow, skip ahead
2434:000 | DONE wsp | na 16 16 |        |             |
2435:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2436:000 | DONE ins | na 16 16 | 006712 | 49 00 80    |                 eor.# 8000           compliment negative flag
2437:000 | DONE wsp | na 16 16 |        |             |
2438:000 | DONE lbl | na 16 16 | 006715 |             | min_no_ov                            
2439:000 | DONE ins | na 16 16 | 006715 | 30 02       |                 bmi 006719           keep TOS
2440:000 | DONE lbl | na 16 16 | 006717 |             | min_drop                             
2441:000 | DONE ins | na 16 16 | 006717 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2442:000 | DONE lbl | na 16 16 | 006719 |             | min_nip                              
2443:000 | DONE ins | na 16 16 | 006719 | e8          |                 inx                  
2444:000 | DONE ins | na 16 16 | 00671a | e8          |                 inx                  
2445:000 | DONE wsp | na 16 16 |        |             |
2446:000 | DONE lbl | na 16 16 | 00671b |             | z_min                                
2446:001 | DONE ins | na 16 16 | 00671b | 60          |                 rts                  
2447:000 | DONE wsp | na 16 16 |        |             |
2448:000 | DONE wsp | na 16 16 |        |             |
2449:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2450:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
2451:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
2452:000 | DONE lbl | na 16 16 | 00671c |             | xt_name-int                          
2453:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2454:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2455:000 | DONE cmt | na 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
2456:000 | DONE ins | na 16 16 | 00671c | c8          |                 iny                  
2457:000 | DONE ins | na 16 16 | 00671d | c8          |                 iny                  
2458:000 | DONE ins | na 16 16 | 00671e | c8          |                 iny                  
2459:000 | DONE ins | na 16 16 | 00671f | c8          |                 iny                  
2460:000 | DONE ins | na 16 16 | 006720 | b9 00 00    |                 lda.y 0000           
2461:000 | DONE ins | na 16 16 | 006723 | a8          |                 tay                  
2462:000 | DONE wsp | na 16 16 |        |             |
2463:000 | DONE lbl | na 16 16 | 006724 |             | z_name-int                           
2463:001 | DONE ins | na 16 16 | 006724 | 60          |                 rts                  
2464:000 | DONE wsp | na 16 16 |        |             |
2465:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2466:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
2467:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
2468:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
2469:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
2470:000 | DONE lbl | na 16 16 | 006725 |             | xt_name-string                       
2471:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2472:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2473:000 | DONE ins | na 16 16 | 006725 | ca          |                 dex                  move NOS down one
2474:000 | DONE ins | na 16 16 | 006726 | ca          |                 dex                  
2475:000 | DONE wsp | na 16 16 |        |             |
2476:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
2477:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
2478:000 | DONE ins | na 16 16 | 006727 | 98          |                 tya                  
2479:000 | DONE ins | na 16 16 | 006728 | 18          |                 clc                  
2480:000 | DONE ins | na 16 16 | 006729 | 69 08 00    |                 adc.# 0008           
2481:000 | DONE ins | na 16 16 | 00672c | 95 00       |                 sta.dx 00            NOS
2482:000 | DONE wsp | na 16 16 |        |             |
2483:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
2484:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
2485:000 | DONE ins | na 16 16 | 00672e | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2486:000 | DONE ins | na 16 16 | 006731 | 29 ff 00    |                 and.# 00ff           mask all but length byte
2487:000 | DONE ins | na 16 16 | 006734 | a8          |                 tay                  
2488:000 | DONE wsp | na 16 16 |        |             |
2489:000 | DONE lbl | na 16 16 | 006735 |             | z_name-string                        
2489:001 | DONE ins | na 16 16 | 006735 | 60          |                 rts                  
2490:000 | DONE wsp | na 16 16 |        |             |
2491:000 | DONE wsp | na 16 16 |        |             |
2492:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2493:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
2494:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
2495:000 | DONE lbl | na 16 16 | 006736 |             | xt_negate                            
2496:000 | DONE ins | na 16 16 | 006736 | 98          |                 tya                  
2497:000 | DONE ins | na 16 16 | 006737 | 49 ff ff    |                 eor.# 0ffff          
2498:000 | DONE ins | na 16 16 | 00673a | 1a          |                 inc.a                
2499:000 | DONE ins | na 16 16 | 00673b | a8          |                 tay                  
2500:000 | DONE wsp | na 16 16 |        |             |
2501:000 | DONE lbl | na 16 16 | 00673c |             | z_negate                             
2501:001 | DONE ins | na 16 16 | 00673c | 60          |                 rts                  
2502:000 | DONE wsp | na 16 16 |        |             |
2503:000 | DONE wsp | na 16 16 |        |             |
2504:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2505:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
2506:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
2507:000 | DONE lbl | na 16 16 | 00673d |             | xt_nip                               
2508:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2509:000 | DONE ins | na 16 16 | 00673d | e8          |                 inx                  
2510:000 | DONE ins | na 16 16 | 00673e | e8          |                 inx                  
2511:000 | DONE lbl | na 16 16 | 00673f |             | z_nip                                
2511:001 | DONE ins | na 16 16 | 00673f | 60          |                 rts                  
2512:000 | DONE wsp | na 16 16 |        |             |
2513:000 | DONE wsp | na 16 16 |        |             |
2514:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2515:000 | DONE cmt | na 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
2516:000 | DONE cmt | na 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
2517:000 | DONE cmt | na 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
2518:000 | DONE cmt | na 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
2519:000 | DONE cmt | na 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
2520:000 | DONE cmt | na 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
2521:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
2522:000 | DONE cmt | na 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
2523:000 | DONE cmt | na 16 16 |        |             | ; signal a double cell number is required to be the last character of the
2524:000 | DONE cmt | na 16 16 |        |             | ; string. Uses tmptos, tmp2, tmp3
2525:000 | DONE lbl | na 16 16 | 006740 |             | xt_number                            
2526:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2527:000 | DONE ins | na 16 16 | 006740 | 64 18       |                 stz.d 000218         get sign flag ready (zero means no minus)
2528:000 | DONE ins | na 16 16 | 006742 | 64 1a       |                 stz.d 00021a         get dot flag read (zero means single cell)
2529:000 | DONE ins | na 16 16 | 006744 | 84 06       |                 sty.d 000206         save length of string, freeing Y
2530:000 | DONE wsp | na 16 16 |        |             |
2531:000 | DONE cmt | na 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
2532:000 | DONE cmt | na 16 16 |        |             |                 ; a flag
2533:000 | DONE ins | na 16 16 | 006746 | b4 00       |                 ldy.dx 00            get address of first character
2534:000 | DONE ins | na 16 16 | 006748 | e2 20       |                 sep 20               
2534:001 | DONE ctl | na  8 16 |        |             |         .!a8
2535:000 | DONE ins | na  8 16 | 00674a | b9 00 00    |                 lda.y 0000           get first character
2536:000 | DONE ins | na  8 16 | 00674d | c9 2d       |                 cmp.# 2d             
2537:000 | DONE ins | na  8 16 | 00674f | c2 20       |                 rep 20               
2537:001 | DONE ctl | na 16 16 |        |             |         .!a16
2538:000 | DONE ins | na 16 16 | 006751 | d0 06       |                 bne 006759           
2539:000 | DONE wsp | na 16 16 |        |             |
2540:000 | DONE cmt | na 16 16 |        |             |                 ; we have a minus
2541:000 | DONE ins | na 16 16 | 006753 | 85 18       |                 sta.d 000218         any non-zero means we have minus
2542:000 | DONE ins | na 16 16 | 006755 | f6 00       |                 inc.dx 00            start one character later
2543:000 | DONE ins | na 16 16 | 006757 | c6 06       |                 dec.d 000206         reduce string length by one
2544:000 | DONE wsp | na 16 16 |        |             |
2545:000 | DONE lbl | na 16 16 | 006759 |             | number_dot                           
2546:000 | DONE cmt | na 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
2547:000 | DONE ins | na 16 16 | 006759 | b5 06       |                 lda.dx 000206        get the string length
2548:000 | DONE ins | na 16 16 | 00675b | 3a          |                 dec.a                subtract one to convert length to index
2549:000 | DONE ins | na 16 16 | 00675c | 18          |                 clc                  
2550:000 | DONE ins | na 16 16 | 00675d | 75 00       |                 adc.dx 00            add length of string
2551:000 | DONE ins | na 16 16 | 00675f | a8          |                 tay                  
2552:000 | DONE ins | na 16 16 | 006760 | e2 20       |                 sep 20               
2552:001 | DONE ctl | na  8 16 |        |             |         .!a8
2553:000 | DONE ins | na  8 16 | 006762 | b9 00 00    |                 lda.y 0000           get last character
2554:000 | DONE ins | na  8 16 | 006765 | c9 2e       |                 cmp.# 2e             
2555:000 | DONE ins | na  8 16 | 006767 | c2 20       |                 rep 20               
2555:001 | DONE ctl | na 16 16 |        |             |         .!a16
2556:000 | DONE ins | na 16 16 | 006769 | d0 04       |                 bne 00676f           
2557:000 | DONE wsp | na 16 16 |        |             |
2558:000 | DONE cmt | na 16 16 |        |             |                 ; we have a dot
2559:000 | DONE ins | na 16 16 | 00676b | 85 1a       |                 sta.d 00021a         any non-zero means we have a dot
2560:000 | DONE ins | na 16 16 | 00676d | c6 06       |                 dec.d 000206         reduce string length by one
2561:000 | DONE wsp | na 16 16 |        |             |
2562:000 | DONE lbl | na 16 16 | 00676f |             | number_main                          
2563:000 | DONE cmt | na 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
2564:000 | DONE ins | na 16 16 | 00676f | b5 00       |                 lda.dx 00            get the string address to safety
2565:000 | DONE wsp | na 16 16 |        |             |
2566:000 | DONE ins | na 16 16 | 006771 | 74 00       |                 stz.dx 00            NOS is now zero
2567:000 | DONE ins | na 16 16 | 006773 | ca          |                 dex                  
2568:000 | DONE ins | na 16 16 | 006774 | ca          |                 dex                  
2569:000 | DONE ins | na 16 16 | 006775 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
2570:000 | DONE ins | na 16 16 | 006777 | ca          |                 dex                  
2571:000 | DONE ins | na 16 16 | 006778 | ca          |                 dex                  
2572:000 | DONE wsp | na 16 16 |        |             |
2573:000 | DONE ins | na 16 16 | 006779 | 95 02       |                 sta.dx 02            address is back as NOS
2574:000 | DONE ins | na 16 16 | 00677b | a4 06       |                 ldy.d 000206         length is back as TOS
2575:000 | DONE wsp | na 16 16 |        |             |
2576:000 | DONE lbl | na 16 16 | 00677d |             | number_loop                          
2577:000 | DONE ins | na 16 16 | 00677d | 20 25 61    |                 jsr 006125           ( ud addr u -- ud addr u )
2578:000 | DONE wsp | na 16 16 |        |             |
2579:000 | DONE ins | na 16 16 | 006780 | 98          |                 tya                  test length of returned string, should be 0
2580:000 | DONE ins | na 16 16 | 006781 | f0 06       |                 beq 006789           
2581:000 | DONE wsp | na 16 16 |        |             |
2582:000 | DONE cmt | na 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
2583:000 | DONE cmt | na 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
2584:000 | DONE cmt | na 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
2585:000 | DONE cmt | na 16 16 |        |             |                 ; trouble one way or another
2586:000 | DONE cmt | na 16 16 |        |             |                 ; TODO print offending string
2587:000 | DONE ins | na 16 16 | 006783 | a9 07 78    |                 lda.# 007807         
2588:000 | DONE ins | na 16 16 | 006786 | 4c 82 71    |                 jmp 007182           
2589:000 | DONE wsp | na 16 16 |        |             |
2590:000 | DONE lbl | na 16 16 | 006789 |             | number_ok                            
2591:000 | DONE cmt | na 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
2592:000 | DONE ins | na 16 16 | 006789 | b4 04       |                 ldy.dx 04            
2593:000 | DONE ins | na 16 16 | 00678b | e8          |                 inx                  
2594:000 | DONE ins | na 16 16 | 00678c | e8          |                 inx                  
2595:000 | DONE ins | na 16 16 | 00678d | e8          |                 inx                  
2596:000 | DONE ins | na 16 16 | 00678e | e8          |                 inx                  
2597:000 | DONE wsp | na 16 16 |        |             |
2598:000 | DONE cmt | na 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
2599:000 | DONE cmt | na 16 16 |        |             |                 ; a minus and might actually be single-cell
2600:000 | DONE ins | na 16 16 | 00678f | a5 1a       |                 lda.d 00021a         get flag for cell size
2601:000 | DONE ins | na 16 16 | 006791 | f0 19       |                 beq 0067ac           
2602:000 | DONE wsp | na 16 16 |        |             |
2603:000 | DONE cmt | na 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
2604:000 | DONE cmt | na 16 16 |        |             |                 ; negate it
2605:000 | DONE ins | na 16 16 | 006793 | a5 18       |                 lda.d 000218         
2606:000 | DONE ins | na 16 16 | 006795 | f0 23       |                 beq 0067ba           no minus, all done
2607:000 | DONE wsp | na 16 16 |        |             |
2608:000 | DONE ins | na 16 16 | 006797 | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
2609:000 | DONE ins | na 16 16 | 006799 | 49 ff ff    |                 eor.# 0ffff          
2610:000 | DONE wsp | na 16 16 |        |             |
2611:000 | DONE cmt | na 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
2612:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
2613:000 | DONE ins | na 16 16 | 00679c | 18          |                 clc                  
2614:000 | DONE ins | na 16 16 | 00679d | 69 01 00    |                 adc.# 0001           
2615:000 | DONE ins | na 16 16 | 0067a0 | 95 00       |                 sta.dx 00            
2616:000 | DONE wsp | na 16 16 |        |             |
2617:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
2618:000 | DONE ins | na 16 16 | 0067a2 | 98          |                 tya                  
2619:000 | DONE ins | na 16 16 | 0067a3 | 49 ff ff    |                 eor.# 0ffff          
2620:000 | DONE ins | na 16 16 | 0067a6 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2621:000 | DONE ins | na 16 16 | 0067a9 | a8          |                 tay                  
2622:000 | DONE wsp | na 16 16 |        |             |
2623:000 | DONE ins | na 16 16 | 0067aa | 80 0e       |                 bra 0067ba           
2624:000 | DONE wsp | na 16 16 |        |             |
2625:000 | DONE lbl | na 16 16 | 0067ac |             | number_single                        
2626:000 | DONE cmt | na 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
2627:000 | DONE ins | na 16 16 | 0067ac | b4 00       |                 ldy.dx 00            
2628:000 | DONE ins | na 16 16 | 0067ae | e8          |                 inx                  
2629:000 | DONE ins | na 16 16 | 0067af | e8          |                 inx                  
2630:000 | DONE wsp | na 16 16 |        |             |
2631:000 | DONE cmt | na 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
2632:000 | DONE cmt | na 16 16 |        |             |                 ; doubled for speed
2633:000 | DONE ins | na 16 16 | 0067b0 | a5 18       |                 lda.d 000218         get flag for sign
2634:000 | DONE ins | na 16 16 | 0067b2 | f0 06       |                 beq 0067ba           no minus, all done
2635:000 | DONE wsp | na 16 16 |        |             |
2636:000 | DONE ins | na 16 16 | 0067b4 | 98          |                 tya                  NEGATE
2637:000 | DONE ins | na 16 16 | 0067b5 | 49 ff ff    |                 eor.# 0ffff          
2638:000 | DONE ins | na 16 16 | 0067b8 | 1a          |                 inc.a                
2639:000 | DONE ins | na 16 16 | 0067b9 | a8          |                 tay                  fall through to end
2640:000 | DONE wsp | na 16 16 |        |             |
2641:000 | DONE lbl | na 16 16 | 0067ba |             | z_number                             
2641:001 | DONE ins | na 16 16 | 0067ba | 60          |                 rts                  
2642:000 | DONE wsp | na 16 16 |        |             |
2643:000 | DONE wsp | na 16 16 |        |             |
2644:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2645:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
2646:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
2647:000 | DONE lbl | na 16 16 | 0067bb |             | xt_or                                
2648:000 | DONE ins | na 16 16 | 0067bb | 98          |                 tya                  
2649:000 | DONE ins | na 16 16 | 0067bc | 15 00       |                 ora.dx 00            
2650:000 | DONE ins | na 16 16 | 0067be | a8          |                 tay                  
2651:000 | DONE wsp | na 16 16 |        |             |
2652:000 | DONE ins | na 16 16 | 0067bf | e8          |                 inx                  
2653:000 | DONE ins | na 16 16 | 0067c0 | e8          |                 inx                  
2654:000 | DONE wsp | na 16 16 |        |             |
2655:000 | DONE lbl | na 16 16 | 0067c1 |             | z_or                                 
2655:001 | DONE ins | na 16 16 | 0067c1 | 60          |                 rts                  
2656:000 | DONE wsp | na 16 16 |        |             |
2657:000 | DONE wsp | na 16 16 |        |             |
2658:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2659:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
2660:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
2661:000 | DONE lbl | na 16 16 | 0067c2 |             | xt_over                              
2662:000 | DONE ins | na 16 16 | 0067c2 | ca          |                 dex                  
2663:000 | DONE ins | na 16 16 | 0067c3 | ca          |                 dex                  
2664:000 | DONE ins | na 16 16 | 0067c4 | 94 00       |                 sty.dx 00            
2665:000 | DONE ins | na 16 16 | 0067c6 | b4 02       |                 ldy.dx 02            
2666:000 | DONE wsp | na 16 16 |        |             |
2667:000 | DONE lbl | na 16 16 | 0067c8 |             | z_over                               
2667:001 | DONE ins | na 16 16 | 0067c8 | 60          |                 rts                  
2668:000 | DONE wsp | na 16 16 |        |             |
2669:000 | DONE wsp | na 16 16 |        |             |
2670:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2671:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
2672:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
2673:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
2674:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
2675:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
2676:000 | DONE lbl | na 16 16 | 0067c9 |             | xt_pad                               
2677:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2678:000 | DONE ins | na 16 16 | 0067c9 | ca          |                 dex                  
2679:000 | DONE ins | na 16 16 | 0067ca | ca          |                 dex                  
2680:000 | DONE ins | na 16 16 | 0067cb | 94 00       |                 sty.dx 00            
2681:000 | DONE wsp | na 16 16 |        |             |
2682:000 | DONE ins | na 16 16 | 0067cd | a5 00       |                 lda.d 000200         
2683:000 | DONE ins | na 16 16 | 0067cf | 18          |                 clc                  
2684:000 | DONE ins | na 16 16 | 0067d0 | 69 7f 00    |                 adc.# 00007f         
2685:000 | DONE ins | na 16 16 | 0067d3 | a8          |                 tay                  
2686:000 | DONE wsp | na 16 16 |        |             |
2687:000 | DONE lbl | na 16 16 | 0067d4 |             | z_pad                                
2687:001 | DONE ins | na 16 16 | 0067d4 | 60          |                 rts                  
2688:000 | DONE wsp | na 16 16 |        |             |
2689:000 | DONE wsp | na 16 16 |        |             |
2690:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2691:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
2692:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
2693:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
2694:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
2695:000 | DONE lbl | na 16 16 | 0067d5 |             | xt_page                              
2696:000 | DONE ins | na 16 16 | 0067d5 | a9 16 78    |                 lda.# 007816         
2697:000 | DONE ins | na 16 16 | 0067d8 | 20 88 71    |                 jsr 007188           
2698:000 | DONE wsp | na 16 16 |        |             |
2699:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
2700:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
2701:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
2702:000 | DONE ins | na 16 16 | 0067db | a9 1b 78    |                 lda.# 00781b         
2703:000 | DONE ins | na 16 16 | 0067de | 20 88 71    |                 jsr 007188           
2704:000 | DONE wsp | na 16 16 |        |             |
2705:000 | DONE lbl | na 16 16 | 0067e1 |             | z_page                               
2705:001 | DONE ins | na 16 16 | 0067e1 | 60          |                 rts                  
2706:000 | DONE wsp | na 16 16 |        |             |
2707:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2708:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
2709:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
2710:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
2711:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
2712:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
2713:000 | DONE cmt | na 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
2714:000 | DONE lbl | na 16 16 | 0067e2 |             | xt_parse-name                        
2715:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2716:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2717:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
2718:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
2719:000 | DONE ins | na 16 16 | 0067e2 | 5a          |                 phy                  save TOS for later use
2720:000 | DONE ins | na 16 16 | 0067e3 | a4 12       |                 ldy.d 000212         >IN
2721:000 | DONE ins | na 16 16 | 0067e5 | e2 20       |                 sep 20               
2721:001 | DONE ctl | na  8 16 |        |             |         .!a8
2722:000 | DONE lbl | na  8 16 | 0067e7 |             | parse-name_loop                      
2723:000 | DONE ins | na  8 16 | 0067e7 | c4 0e       |                 cpy.d 00020e         end of line?
2724:000 | DONE ins | na  8 16 | 0067e9 | f0 09       |                 beq 0067f4           
2725:000 | DONE wsp | na  8 16 |        |             |
2726:000 | DONE ins | na  8 16 | 0067eb | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2727:000 | DONE ins | na  8 16 | 0067ed | c9 20       |                 cmp.# AscSP          
2728:000 | DONE ins | na  8 16 | 0067ef | d0 17       |                 bne 006808           
2729:000 | DONE ins | na  8 16 | 0067f1 | c8          |                 iny                  
2730:000 | DONE ins | na  8 16 | 0067f2 | 80 f3       |                 bra 0067e7           
2731:000 | DONE wsp | na  8 16 |        |             |
2732:000 | DONE lbl | na  8 16 | 0067f4 |             | parse-name_empty_line                
2733:000 | DONE ins | na  8 16 | 0067f4 | c2 20       |                 rep 20               
2733:001 | DONE ctl | na 16 16 |        |             |         .!a16
2734:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
2735:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
2736:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
2737:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
2738:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
2739:000 | DONE ins | na 16 16 | 0067f6 | ca          |                 dex                  
2740:000 | DONE ins | na 16 16 | 0067f7 | ca          |                 dex                  
2741:000 | DONE ins | na 16 16 | 0067f8 | ca          |                 dex                  
2742:000 | DONE ins | na 16 16 | 0067f9 | ca          |                 dex                  
2743:000 | DONE wsp | na 16 16 |        |             |
2744:000 | DONE ins | na 16 16 | 0067fa | 7a          |                 ply                  restore old TOS as 3OS
2745:000 | DONE ins | na 16 16 | 0067fb | 94 02       |                 sty.dx 02            
2746:000 | DONE wsp | na 16 16 |        |             |
2747:000 | DONE ins | na 16 16 | 0067fd | a5 0c       |                 lda.d 00020c         
2748:000 | DONE ins | na 16 16 | 0067ff | 18          |                 clc                  
2749:000 | DONE ins | na 16 16 | 006800 | 65 0e       |                 adc.d 00020e         
2750:000 | DONE ins | na 16 16 | 006802 | 95 00       |                 sta.dx 00            Address as NOS
2751:000 | DONE wsp | na 16 16 |        |             |
2752:000 | DONE ins | na 16 16 | 006804 | a0 00 00    |                 ldy.# 0000           TOS
2753:000 | DONE wsp | na 16 16 |        |             |
2754:000 | DONE ins | na 16 16 | 006807 | 60          |                 rts                  don't have to go through PARSE
2755:000 | DONE wsp | na 16 16 |        |             |
2756:000 | DONE lbl | na 16 16 | 006808 |             | parse-name_found                     
2757:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2758:000 | DONE ins | na 16 16 | 006808 | c2 20       |                 rep 20               
2758:001 | DONE ctl | na 16 16 |        |             |         .!a16
2759:000 | DONE ins | na 16 16 | 00680a | 84 12       |                 sty.d 000212         new >IN
2760:000 | DONE wsp | na 16 16 |        |             |
2761:000 | DONE ins | na 16 16 | 00680c | 7a          |                 ply                  recover TOS
2762:000 | DONE ins | na 16 16 | 00680d | ca          |                 dex                  
2763:000 | DONE ins | na 16 16 | 00680e | ca          |                 dex                  
2764:000 | DONE ins | na 16 16 | 00680f | 94 00       |                 sty.dx 00            
2765:000 | DONE wsp | na 16 16 |        |             |
2766:000 | DONE ins | na 16 16 | 006811 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
2767:000 | DONE wsp | na 16 16 |        |             |
2768:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
2769:000 | DONE wsp | na 16 16 |        |             |
2770:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2771:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
2772:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
2773:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
2774:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
2775:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
2776:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
2777:000 | DONE cmt | na 16 16 |        |             | ;
2778:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
2779:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
2780:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
2781:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
2782:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
2783:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
2784:000 | DONE cmt | na 16 16 |        |             | ;
2785:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
2786:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
2787:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
2788:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
2789:000 | DONE lbl | na 16 16 | 006814 |             | xt_parse                             
2790:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2791:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2792:000 | DONE ins | na 16 16 | 006814 | 84 16       |                 sty.d 000216         save delimiter, char is LSB
2793:000 | DONE wsp | na 16 16 |        |             |
2794:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
2795:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
2796:000 | DONE cmt | na 16 16 |        |             |                 ; return
2797:000 | DONE ins | na 16 16 | 006816 | a5 12       |                 lda.d 000212         
2798:000 | DONE ins | na 16 16 | 006818 | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
2799:000 | DONE ins | na 16 16 | 00681a | 18          |                 clc                  
2800:000 | DONE ins | na 16 16 | 00681b | 65 0c       |                 adc.d 00020c         
2801:000 | DONE wsp | na 16 16 |        |             |
2802:000 | DONE ins | na 16 16 | 00681d | ca          |                 dex                  save addr as NOS
2803:000 | DONE ins | na 16 16 | 00681e | ca          |                 dex                  
2804:000 | DONE ins | na 16 16 | 00681f | 95 00       |                 sta.dx 00            
2805:000 | DONE wsp | na 16 16 |        |             |
2806:000 | DONE ins | na 16 16 | 006821 | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
2807:000 | DONE wsp | na 16 16 |        |             |
2808:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
2809:000 | DONE ins | na 16 16 | 006823 | a4 12       |                 ldy.d 000212         
2810:000 | DONE ins | na 16 16 | 006825 | e2 20       |                 sep 20               
2810:001 | DONE ctl | na  8 16 |        |             |         .!a8
2811:000 | DONE wsp | na  8 16 |        |             |
2812:000 | DONE lbl | na  8 16 | 006827 |             | parse_loop                           
2813:000 | DONE ins | na  8 16 | 006827 | c4 0e       |                 cpy.d 00020e         check for EOL first
2814:000 | DONE ins | na  8 16 | 006829 | f0 0d       |                 beq 006838           
2815:000 | DONE wsp | na  8 16 |        |             |
2816:000 | DONE ins | na  8 16 | 00682b | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2817:000 | DONE ins | na  8 16 | 00682d | c5 16       |                 cmp.d 000216         found delimiter?
2818:000 | DONE ins | na  8 16 | 00682f | f0 03       |                 beq 006834           
2819:000 | DONE ins | na  8 16 | 006831 | c8          |                 iny                  
2820:000 | DONE ins | na  8 16 | 006832 | 80 f3       |                 bra 006827           
2821:000 | DONE wsp | na  8 16 |        |             |
2822:000 | DONE lbl | na  8 16 | 006834 |             | parse_found_delimiter                
2823:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
2824:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
2825:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
2826:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
2827:000 | DONE ins | na  8 16 | 006834 | c2 20       |                 rep 20               
2827:001 | DONE ctl | na 16 16 |        |             |         .!a16
2828:000 | DONE ins | na 16 16 | 006836 | e6 18       |                 inc.d 000218         
2829:000 | DONE wsp | na 16 16 |        |             |
2830:000 | DONE lbl | na 16 16 | 006838 |             | parse_reached_eol                    
2831:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
2832:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2833:000 | DONE ins | na 16 16 | 006838 | c2 20       |                 rep 20               
2833:001 | DONE ctl | na 16 16 |        |             |         .!a16
2834:000 | DONE ins | na 16 16 | 00683a | 98          |                 tya                  
2835:000 | DONE ins | na 16 16 | 00683b | 38          |                 sec                  
2836:000 | DONE ins | na 16 16 | 00683c | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
2837:000 | DONE ins | na 16 16 | 00683e | 48          |                 pha                  save so we can manipulate Y
2838:000 | DONE wsp | na 16 16 |        |             |
2839:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
2840:000 | DONE ins | na 16 16 | 00683f | 98          |                 tya                  
2841:000 | DONE ins | na 16 16 | 006840 | 18          |                 clc                  
2842:000 | DONE ins | na 16 16 | 006841 | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
2843:000 | DONE ins | na 16 16 | 006843 | 85 12       |                 sta.d 000212         
2844:000 | DONE wsp | na 16 16 |        |             |
2845:000 | DONE ins | na 16 16 | 006845 | 7a          |                 ply                  length of string in TOS
2846:000 | DONE wsp | na 16 16 |        |             |
2847:000 | DONE lbl | na 16 16 | 006846 |             | z_parse-name                         
2848:000 | DONE lbl | na 16 16 | 006846 |             | z_parse                              
2848:001 | DONE ins | na 16 16 | 006846 | 60          |                 rts                  
2849:000 | DONE wsp | na 16 16 |        |             |
2850:000 | DONE wsp | na 16 16 |        |             |
2851:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2852:000 | DONE cmt | na 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
2853:000 | DONE cmt | na 16 16 |        |             | ; Add NOS to address in TOS
2854:000 | DONE lbl | na 16 16 | 006847 |             | xt_plusstore                         
2855:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2856:000 | DONE ins | na 16 16 | 006847 | b9 00 00    |                 lda.y 0000           
2857:000 | DONE ins | na 16 16 | 00684a | 18          |                 clc                  
2858:000 | DONE ins | na 16 16 | 00684b | 75 00       |                 adc.dx 00            
2859:000 | DONE ins | na 16 16 | 00684d | 99 00 00    |                 sta.y 0000           
2860:000 | DONE wsp | na 16 16 |        |             |
2861:000 | DONE ins | na 16 16 | 006850 | b4 02       |                 ldy.dx 02            
2862:000 | DONE ins | na 16 16 | 006852 | e8          |                 inx                  
2863:000 | DONE ins | na 16 16 | 006853 | e8          |                 inx                  
2864:000 | DONE ins | na 16 16 | 006854 | e8          |                 inx                  
2865:000 | DONE ins | na 16 16 | 006855 | e8          |                 inx                  
2866:000 | DONE wsp | na 16 16 |        |             |
2867:000 | DONE lbl | na 16 16 | 006856 |             | z_plusstore                          
2867:001 | DONE ins | na 16 16 | 006856 | 60          |                 rts                  
2868:000 | DONE wsp | na 16 16 |        |             |
2869:000 | DONE wsp | na 16 16 |        |             |
2870:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2871:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
2872:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
2873:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
2874:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
2875:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
2876:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
2877:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
2878:000 | DONE lbl | na 16 16 | 006857 |             | xt_postpone                          
2879:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
2880:000 | DONE ins | na 16 16 | 006857 | 20 e2 67    |                 jsr 0067e2           ( addr n )
2881:000 | DONE wsp | na 16 16 |        |             |
2882:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
2883:000 | DONE ins | na 16 16 | 00685a | d0 06       |                 bne 006862           
2884:000 | DONE ins | na 16 16 | 00685c | a9 6a 77    |                 lda.# 00776a         
2885:000 | DONE ins | na 16 16 | 00685f | 4c 82 71    |                 jmp 007182           
2886:000 | DONE wsp | na 16 16 |        |             |
2887:000 | DONE lbl | na 16 16 | 006862 |             | pp_got_word                          
2888:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
2889:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
2890:000 | DONE ins | na 16 16 | 006862 | 20 bb 71    |                 jsr 0071bb           
2891:000 | DONE wsp | na 16 16 |        |             |
2892:000 | DONE ins | na 16 16 | 006865 | 20 36 66    |                 jsr 006636           ( nt | 0 )
2893:000 | DONE wsp | na 16 16 |        |             |
2894:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
2895:000 | DONE ins | na 16 16 | 006868 | d0 03       |                 bne 00686d           
2896:000 | DONE ins | na 16 16 | 00686a | a9 07 78    |                 lda.# 007807         
2897:000 | DONE wsp | na 16 16 |        |             |
2898:000 | DONE lbl | na 16 16 | 00686d |             | pp_got_nt                            
2899:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
2900:000 | DONE ins | na 16 16 | 00686d | 84 16       |                 sty.d 000216         
2901:000 | DONE wsp | na 16 16 |        |             |
2902:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
2903:000 | DONE ins | na 16 16 | 00686f | 20 1c 67    |                 jsr 00671c           ( xt )
2904:000 | DONE wsp | na 16 16 |        |             |
2905:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
2906:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
2907:000 | DONE ins | na 16 16 | 006872 | b2 16       |                 lda.di 000216        LDA (TMP1) - get status byte of word
2908:000 | DONE ins | na 16 16 | 006874 | eb          |                 xba                  flags are MSB
2909:000 | DONE ins | na 16 16 | 006875 | 29 02 00    |                 and.# IM             mask everything but Immediate bit
2910:000 | DONE ins | na 16 16 | 006878 | f0 03       |                 beq 00687d           
2911:000 | DONE wsp | na 16 16 |        |             |
2912:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
2913:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
2914:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
2915:000 | DONE ins | na 16 16 | 00687a | 4c ba 64    |                 jmp 0064ba           JSR/RTS
2916:000 | DONE wsp | na 16 16 |        |             |
2917:000 | DONE lbl | na 16 16 | 00687d |             | pp_not_immediate                     
2918:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deffered
2919:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
2920:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
2921:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
2922:000 | DONE ins | na 16 16 | 00687d | f4 c9 66    |                 phe.# 0066c9         PEA LITERAL_RT
2923:000 | DONE ins | na 16 16 | 006880 | 20 61 71    |                 jsr 007161           
2924:000 | DONE wsp | na 16 16 |        |             |
2925:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
2926:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
2927:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
2928:000 | DONE ins | na 16 16 | 006883 | 20 b7 61    |                 jsr 0061b7           
2929:000 | DONE wsp | na 16 16 |        |             |
2930:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
2931:000 | DONE ins | na 16 16 | 006886 | f4 ba 64    |                 phe.# 0064ba         
2932:000 | DONE ins | na 16 16 | 006889 | 4c 61 71    |                 jmp 007161           JSR/RTS
2933:000 | DONE wsp | na 16 16 |        |             |
2934:000 | DONE lbl | na 16 16 | 00688c |             | z_postpone                           ; never reached
2935:000 | DONE wsp | na 16 16 |        |             |
2936:000 | DONE wsp | na 16 16 |        |             |
2937:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2938:000 | DONE cmt | na 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
2939:000 | DONE cmt | na 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
2940:000 | DONE cmt | na 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
2941:000 | DONE cmt | na 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
2942:000 | DONE cmt | na 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
2943:000 | DONE cmt | na 16 16 |        |             | ; actually short enough to make that reasonable
2944:000 | DONE cmt | na 16 16 |        |             | ; TODO consider special case in COMPILE, see there
2945:000 | DONE lbl | na 16 16 | 00688c |             | xt_rfetch                            
2946:000 | DONE cmt | na 16 16 |        |             |                 ; get return address that is on top of the return stack
2947:000 | DONE ins | na 16 16 | 00688c | 68          |                 pla                  
2948:000 | DONE wsp | na 16 16 |        |             |
2949:000 | DONE ins | na 16 16 | 00688d | ca          |                 dex                  
2950:000 | DONE ins | na 16 16 | 00688e | ca          |                 dex                  
2951:000 | DONE ins | na 16 16 | 00688f | 94 00       |                 sty.dx 00            
2952:000 | DONE wsp | na 16 16 |        |             |
2953:000 | DONE ins | na 16 16 | 006891 | 7a          |                 ply                  get top of return stack and push copy back again
2954:000 | DONE ins | na 16 16 | 006892 | 5a          |                 phy                  
2955:000 | DONE wsp | na 16 16 |        |             |
2956:000 | DONE ins | na 16 16 | 006893 | 48          |                 pha                  restore the return address
2957:000 | DONE wsp | na 16 16 |        |             |
2958:000 | DONE lbl | na 16 16 | 006894 |             | z_rfetch                             
2958:001 | DONE ins | na 16 16 | 006894 | 60          |                 rts                  
2959:000 | DONE wsp | na 16 16 |        |             |
2960:000 | DONE wsp | na 16 16 |        |             |
2961:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2962:000 | DONE cmt | na 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
2963:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
2964:000 | DONE cmt | na 16 16 |        |             | ; jump address out of the way first.
2965:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
2966:000 | DONE lbl | na 16 16 | 006895 |             | xt_fromr                             
2967:000 | DONE cmt | na 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
2968:000 | DONE cmt | na 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
2969:000 | DONE cmt | na 16 16 |        |             |                 ; a waste of nine cycles
2970:000 | DONE ins | na 16 16 | 006895 | 68          |                 pla                  
2971:000 | DONE wsp | na 16 16 |        |             |
2972:000 | DONE ins | na 16 16 | 006896 | ca          |                 dex                  
2973:000 | DONE ins | na 16 16 | 006897 | ca          |                 dex                  
2974:000 | DONE ins | na 16 16 | 006898 | 94 00       |                 sty.dx 00            
2975:000 | DONE wsp | na 16 16 |        |             |
2976:000 | DONE ins | na 16 16 | 00689a | 7a          |                 ply                  the actual work
2977:000 | DONE wsp | na 16 16 |        |             |
2978:000 | DONE ins | na 16 16 | 00689b | 48          |                 pha                  get return address back
2979:000 | DONE wsp | na 16 16 |        |             |
2980:000 | DONE lbl | na 16 16 | 00689c |             | z_fromr                              
2980:001 | DONE ins | na 16 16 | 00689c | 60          |                 rts                  
2981:000 | DONE wsp | na 16 16 |        |             |
2982:000 | DONE wsp | na 16 16 |        |             |
2983:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2984:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
2985:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
2986:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
2987:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
2988:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
2989:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
2990:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
2991:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
2992:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
2993:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
2994:000 | DONE lbl | na 16 16 | 00689d |             | xt_refill                            
2995:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2996:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2997:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
2998:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
2999:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
3000:000 | DONE ins | na 16 16 | 00689d | a5 0c       |                 lda.d 00020c         
3001:000 | DONE ins | na 16 16 | 00689f | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
3002:000 | DONE ins | na 16 16 | 0068a2 | 85 0c       |                 sta.d 00020c         
3003:000 | DONE wsp | na 16 16 |        |             |
3004:000 | DONE ins | na 16 16 | 0068a4 | a5 0e       |                 lda.d 00020e         current length is now previous length
3005:000 | DONE ins | na 16 16 | 0068a6 | 85 10       |                 sta.d 000210         
3006:000 | DONE wsp | na 16 16 |        |             |
3007:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
3008:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
3009:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
3010:000 | DONE ins | na 16 16 | 0068a8 | a5 0a       |                 lda.d 00020a         
3011:000 | DONE ins | na 16 16 | 0068aa | d0 14       |                 bne 0068c0           
3012:000 | DONE wsp | na 16 16 |        |             |
3013:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
3014:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
3015:000 | DONE ins | na 16 16 | 0068ac | ca          |                 dex                  push Data Stack down twice
3016:000 | DONE ins | na 16 16 | 0068ad | ca          |                 dex                  
3017:000 | DONE ins | na 16 16 | 0068ae | 94 00       |                 sty.dx 00            
3018:000 | DONE wsp | na 16 16 |        |             |
3019:000 | DONE ins | na 16 16 | 0068b0 | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
3020:000 | DONE ins | na 16 16 | 0068b2 | ca          |                 dex                  
3021:000 | DONE ins | na 16 16 | 0068b3 | ca          |                 dex                  
3022:000 | DONE ins | na 16 16 | 0068b4 | 95 00       |                 sta.dx 00            
3023:000 | DONE wsp | na 16 16 |        |             |
3024:000 | DONE ins | na 16 16 | 0068b6 | a0 ff 00    |                 ldy.# 0000ff         
3025:000 | DONE wsp | na 16 16 |        |             |
3026:000 | DONE ins | na 16 16 | 0068b9 | 20 31 63    |                 jsr 006331           ( addr n1 -- n2)
3027:000 | DONE wsp | na 16 16 |        |             |
3028:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
3029:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
3030:000 | DONE ins | na 16 16 | 0068bc | a0 ff ff    |                 ldy.# 0ffff          
3031:000 | DONE wsp | na 16 16 |        |             |
3032:000 | DONE ins | na 16 16 | 0068bf | 60          |                 rts                  
3033:000 | DONE wsp | na 16 16 |        |             |
3034:000 | DONE lbl | na 16 16 | 0068c0 |             | refill_src_not_kbd                   
3035:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
3036:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
3037:000 | DONE ins | na 16 16 | 0068c0 | 1a          |                 inc.a                
3038:000 | DONE ins | na 16 16 | 0068c1 | d0 06       |                 bne 0068c9           
3039:000 | DONE wsp | na 16 16 |        |             |
3040:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
3041:000 | DONE ins | na 16 16 | 0068c3 | ca          |                 dex                  
3042:000 | DONE ins | na 16 16 | 0068c4 | ca          |                 dex                  
3043:000 | DONE ins | na 16 16 | 0068c5 | 94 00       |                 sty.dx 00            
3044:000 | DONE ins | na 16 16 | 0068c7 | a8          |                 tay                  
3045:000 | DONE wsp | na 16 16 |        |             |
3046:000 | DONE ins | na 16 16 | 0068c8 | 60          |                 rts                  
3047:000 | DONE wsp | na 16 16 |        |             |
3048:000 | DONE lbl | na 16 16 | 0068c9 |             | refill_source_is_not_string          
3049:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
3050:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
3051:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
3052:000 | DONE ins | na 16 16 | 0068c9 | a9 bf 77    |                 lda.# 0077bf         
3053:000 | DONE ins | na 16 16 | 0068cc | 4c 82 71    |                 jmp 007182           
3054:000 | DONE wsp | na 16 16 |        |             |
3055:000 | DONE lbl | na 16 16 | 0068cf |             | z_refill                             
3055:001 | DONE ins | na 16 16 | 0068cf | 60          |                 rts                  dummy for compiling
3056:000 | DONE wsp | na 16 16 |        |             |
3057:000 | DONE wsp | na 16 16 |        |             |
3058:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3059:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
3060:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
3061:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
3062:000 | DONE lbl | na 16 16 | 0068d0 |             | xt_rot                               
3063:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3064:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3065:000 | DONE ins | na 16 16 | 0068d0 | b5 00       |                 lda.dx 00            save b
3066:000 | DONE ins | na 16 16 | 0068d2 | 94 00       |                 sty.dx 00            move c to NOS
3067:000 | DONE ins | na 16 16 | 0068d4 | b4 02       |                 ldy.dx 02            move a to TOS
3068:000 | DONE ins | na 16 16 | 0068d6 | 95 02       |                 sta.dx 02            save b as 3OS
3069:000 | DONE wsp | na 16 16 |        |             |
3070:000 | DONE lbl | na 16 16 | 0068d8 |             | z_rot                                
3070:001 | DONE ins | na 16 16 | 0068d8 | 60          |                 rts                  
3071:000 | DONE wsp | na 16 16 |        |             |
3072:000 | DONE wsp | na 16 16 |        |             |
3073:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3074:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
3075:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
3076:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
3077:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
3078:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
3079:000 | DONE cmt | na 16 16 |        |             | ; want it in code
3080:000 | DONE lbl | na 16 16 | 0068d9 |             | xt_squote                            
3081:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
3082:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
3083:000 | DONE ins | na 16 16 | 0068d9 | ca          |                 dex                  
3084:000 | DONE ins | na 16 16 | 0068da | ca          |                 dex                  
3085:000 | DONE ins | na 16 16 | 0068db | 94 00       |                 sty.dx 00            
3086:000 | DONE wsp | na 16 16 |        |             |
3087:000 | DONE ins | na 16 16 | 0068dd | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
3088:000 | DONE ins | na 16 16 | 0068e0 | 20 14 68    |                 jsr 006814           Returns ( addr u ) of string
3089:000 | DONE wsp | na 16 16 |        |             |
3090:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
3091:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
3092:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
3093:000 | DONE ins | na 16 16 | 0068e3 | a5 14       |                 lda.d 000214         
3094:000 | DONE ins | na 16 16 | 0068e5 | f0 03       |                 beq 0068ea           if we're interpreting, we're done
3095:000 | DONE wsp | na 16 16 |        |             |
3096:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
3097:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
3098:000 | DONE ins | na 16 16 | 0068e7 | 4c 09 69    |                 jmp 006909           JSR/RTS
3099:000 | DONE wsp | na 16 16 |        |             |
3100:000 | DONE lbl | na 16 16 | 0068ea |             | z_squote                             
3100:001 | DONE ins | na 16 16 | 0068ea | 60          |                 rts                  
3101:000 | DONE wsp | na 16 16 |        |             |
3102:000 | DONE wsp | na 16 16 |        |             |
3103:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3104:000 | DONE cmt | na 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
3105:000 | DONE cmt | na 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
3106:000 | DONE lbl | na 16 16 | 0068eb |             | xt_stod                              
3107:000 | DONE ins | na 16 16 | 0068eb | ca          |                 dex                  make room on stack
3108:000 | DONE ins | na 16 16 | 0068ec | ca          |                 dex                  
3109:000 | DONE ins | na 16 16 | 0068ed | 94 00       |                 sty.dx 00            
3110:000 | DONE wsp | na 16 16 |        |             |
3111:000 | DONE ins | na 16 16 | 0068ef | 98          |                 tya                  force flag check
3112:000 | DONE ins | na 16 16 | 0068f0 | 10 05       |                 bpl 0068f7           
3113:000 | DONE wsp | na 16 16 |        |             |
3114:000 | DONE cmt | na 16 16 |        |             |                 ; negative number, extend sign
3115:000 | DONE ins | na 16 16 | 0068f2 | a0 ff ff    |                 ldy.# 0ffff          
3116:000 | DONE ins | na 16 16 | 0068f5 | 80 03       |                 bra 0068fa           
3117:000 | DONE wsp | na 16 16 |        |             |
3118:000 | DONE lbl | na 16 16 | 0068f7 |             | stod_pos                             
3119:000 | DONE cmt | na 16 16 |        |             |                 ; positive number
3120:000 | DONE ins | na 16 16 | 0068f7 | a0 00 00    |                 ldy.# 0000           fall through
3121:000 | DONE wsp | na 16 16 |        |             |
3122:000 | DONE lbl | na 16 16 | 0068fa |             | z_stod                               
3122:001 | DONE ins | na 16 16 | 0068fa | 60          |                 rts                  
3123:000 | DONE wsp | na 16 16 |        |             |
3124:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3125:000 | DONE cmt | na 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
3126:000 | DONE cmt | na 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
3127:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
3128:000 | DONE cmt | na 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
3129:000 | DONE lbl | na 16 16 | 0068fb |             | xt_sign                              
3130:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3131:000 | DONE cmt | na 16 16 |        |             |                 ; See if number is negative
3132:000 | DONE ins | na 16 16 | 0068fb | 98          |                 tya                  force flag check
3133:000 | DONE ins | na 16 16 | 0068fc | 10 06       |                 bpl 006904           
3134:000 | DONE wsp | na 16 16 |        |             |
3135:000 | DONE cmt | na 16 16 |        |             |                 ; We're negative, overwrite number TOS
3136:000 | DONE ins | na 16 16 | 0068fe | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
3137:000 | DONE wsp | na 16 16 |        |             |
3138:000 | DONE ins | na 16 16 | 006901 | 4c a9 66    |                 jmp 0066a9           JSR/RTS, does not fall through
3139:000 | DONE wsp | na 16 16 |        |             |
3140:000 | DONE lbl | na 16 16 | 006904 |             | sign_plus                            
3141:000 | DONE ins | na 16 16 | 006904 | b4 00       |                 ldy.dx 00            get rid of number and leave
3142:000 | DONE ins | na 16 16 | 006906 | e8          |                 inx                  
3143:000 | DONE ins | na 16 16 | 006907 | e8          |                 inx                  
3144:000 | DONE wsp | na 16 16 |        |             |
3145:000 | DONE lbl | na 16 16 | 006908 |             | z_sign                               
3145:001 | DONE ins | na 16 16 | 006908 | 60          |                 rts                  
3146:000 | DONE wsp | na 16 16 |        |             |
3147:000 | DONE wsp | na 16 16 |        |             |
3148:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3149:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
3150:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
3151:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
3152:000 | DONE cmt | na 16 16 |        |             | ; tmp2
3153:000 | DONE lbl | na 16 16 | 006909 |             | xt_sliteral                          
3154:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3155:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
3156:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
3157:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
3158:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
3159:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
3160:000 | DONE ins | na 16 16 | 006909 | b5 00       |                 lda.dx 00            Address of string is NOS
3161:000 | DONE ins | na 16 16 | 00690b | 85 16       |                 sta.d 000216         
3162:000 | DONE ins | na 16 16 | 00690d | 84 18       |                 sty.d 000218         keep copy of string length
3163:000 | DONE wsp | na 16 16 |        |             |
3164:000 | DONE ins | na 16 16 | 00690f | e2 20       |                 sep 20               
3164:001 | DONE ctl | na  8 16 |        |             |         .!a8
3165:000 | DONE ins | na  8 16 | 006911 | a9 4c       |                 lda.# 04c            opcode for JMP
3166:000 | DONE ins | na  8 16 | 006913 | 92 00       |                 sta.di 000200        STA (CP)
3167:000 | DONE ins | na  8 16 | 006915 | c2 20       |                 rep 20               
3167:001 | DONE ctl | na 16 16 |        |             |         .!a16
3168:000 | DONE ins | na 16 16 | 006917 | e6 00       |                 inc.d 000200         
3169:000 | DONE wsp | na 16 16 |        |             |
3170:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
3171:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
3172:000 | DONE ins | na 16 16 | 006919 | a5 18       |                 lda.d 000218         string length
3173:000 | DONE ins | na 16 16 | 00691b | 1a          |                 inc.a                
3174:000 | DONE ins | na 16 16 | 00691c | 1a          |                 inc.a                
3175:000 | DONE wsp | na 16 16 |        |             |
3176:000 | DONE ins | na 16 16 | 00691d | 18          |                 clc                  
3177:000 | DONE ins | na 16 16 | 00691e | 65 00       |                 adc.d 000200         current address
3178:000 | DONE ins | na 16 16 | 006920 | 92 00       |                 sta.di 000200        store jump target
3179:000 | DONE wsp | na 16 16 |        |             |
3180:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
3181:000 | DONE ins | na 16 16 | 006922 | e6 00       |                 inc.d 000200         
3182:000 | DONE ins | na 16 16 | 006924 | e6 00       |                 inc.d 000200         
3183:000 | DONE wsp | na 16 16 |        |             |
3184:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
3185:000 | DONE ins | na 16 16 | 006926 | 88          |                 dey                  last offset is one less than length
3186:000 | DONE ins | na 16 16 | 006927 | e2 20       |                 sep 20               
3186:001 | DONE ctl | na  8 16 |        |             |         .!a8
3187:000 | DONE lbl | na  8 16 | 006929 |             | sl_loop                              
3188:000 | DONE ins | na  8 16 | 006929 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3189:000 | DONE ins | na  8 16 | 00692b | 91 00       |                 sta.diy 000200       STA (CP),Y
3190:000 | DONE ins | na  8 16 | 00692d | 88          |                 dey                  
3191:000 | DONE ins | na  8 16 | 00692e | 10 f9       |                 bpl 006929           
3192:000 | DONE wsp | na  8 16 |        |             |
3193:000 | DONE ins | na  8 16 | 006930 | c2 20       |                 rep 20               
3193:001 | DONE ctl | na 16 16 |        |             |         .!a16
3194:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
3195:000 | DONE ins | na 16 16 | 006932 | a5 00       |                 lda.d 000200         
3196:000 | DONE ins | na 16 16 | 006934 | 85 16       |                 sta.d 000216         overwrites original address
3197:000 | DONE wsp | na 16 16 |        |             |
3198:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
3199:000 | DONE ins | na 16 16 | 006936 | 18          |                 clc                  
3200:000 | DONE ins | na 16 16 | 006937 | 65 18       |                 adc.d 000218         length of string
3201:000 | DONE ins | na 16 16 | 006939 | 85 00       |                 sta.d 000200         
3202:000 | DONE wsp | na 16 16 |        |             |
3203:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
3204:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
3205:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
3206:000 | DONE cmt | na 16 16 |        |             |                 ;
3207:000 | DONE cmt | na 16 16 |        |             |                 ; xt -->    jmp a
3208:000 | DONE cmt | na 16 16 |        |             |                 ;           <string data bytes>
3209:000 | DONE cmt | na 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
3210:000 | DONE cmt | na 16 16 |        |             |                 ;           <string address>
3211:000 | DONE cmt | na 16 16 |        |             |                 ;           <string length>
3212:000 | DONE cmt | na 16 16 |        |             |                 ; rts -->
3213:000 | DONE cmt | na 16 16 |        |             |                 ;
3214:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
3215:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
3216:000 | DONE ins | na 16 16 | 00693b | f4 54 69    |                 phe.# 006954         
3217:000 | DONE ins | na 16 16 | 00693e | 20 61 71    |                 jsr 007161           
3218:000 | DONE wsp | na 16 16 |        |             |
3219:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
3220:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
3221:000 | DONE ins | na 16 16 | 006941 | a5 16       |                 lda.d 000216         new address of string
3222:000 | DONE ins | na 16 16 | 006943 | 48          |                 pha                  
3223:000 | DONE ins | na 16 16 | 006944 | 20 5c 71    |                 jsr 00715c           
3224:000 | DONE wsp | na 16 16 |        |             |
3225:000 | DONE ins | na 16 16 | 006947 | a5 18       |                 lda.d 000218         
3226:000 | DONE ins | na 16 16 | 006949 | 48          |                 pha                  
3227:000 | DONE ins | na 16 16 | 00694a | 20 5c 71    |                 jsr 00715c           
3228:000 | DONE wsp | na 16 16 |        |             |
3229:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
3230:000 | DONE ins | na 16 16 | 00694d | b4 02       |                 ldy.dx 02            2DROP
3231:000 | DONE ins | na 16 16 | 00694f | e8          |                 inx                  
3232:000 | DONE ins | na 16 16 | 006950 | e8          |                 inx                  
3233:000 | DONE ins | na 16 16 | 006951 | e8          |                 inx                  
3234:000 | DONE ins | na 16 16 | 006952 | e8          |                 inx                  
3235:000 | DONE wsp | na 16 16 |        |             |
3236:000 | DONE lbl | na 16 16 | 006953 |             | z_sliteral                           
3236:001 | DONE ins | na 16 16 | 006953 | 60          |                 rts                  
3237:000 | DONE wsp | na 16 16 |        |             |
3238:000 | DONE lbl | na 16 16 | 006954 |             | sliteral_rt                          
3239:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
3240:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
3241:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
3242:000 | DONE wsp | na 16 16 |        |             |
3243:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
3244:000 | DONE ins | na 16 16 | 006954 | ca          |                 dex                  
3245:000 | DONE ins | na 16 16 | 006955 | ca          |                 dex                  
3246:000 | DONE ins | na 16 16 | 006956 | ca          |                 dex                  
3247:000 | DONE ins | na 16 16 | 006957 | ca          |                 dex                  
3248:000 | DONE ins | na 16 16 | 006958 | 94 02       |                 sty.dx 02            
3249:000 | DONE wsp | na 16 16 |        |             |
3250:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
3251:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
3252:000 | DONE ins | na 16 16 | 00695a | 7a          |                 ply                  
3253:000 | DONE ins | na 16 16 | 00695b | c8          |                 iny                  
3254:000 | DONE wsp | na 16 16 |        |             |
3255:000 | DONE ins | na 16 16 | 00695c | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3256:000 | DONE ins | na 16 16 | 00695f | 95 00       |                 sta.dx 00            save string address as NOS
3257:000 | DONE ins | na 16 16 | 006961 | c8          |                 iny                  
3258:000 | DONE ins | na 16 16 | 006962 | c8          |                 iny                  
3259:000 | DONE ins | na 16 16 | 006963 | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
3260:000 | DONE wsp | na 16 16 |        |             |
3261:000 | DONE ins | na 16 16 | 006966 | c8          |                 iny                  ... first, though, repair return jump
3262:000 | DONE ins | na 16 16 | 006967 | 5a          |                 phy                  
3263:000 | DONE wsp | na 16 16 |        |             |
3264:000 | DONE ins | na 16 16 | 006968 | a8          |                 tay                  TOS is now length of string
3265:000 | DONE wsp | na 16 16 |        |             |
3266:000 | DONE ins | na 16 16 | 006969 | 60          |                 rts                  
3267:000 | DONE wsp | na 16 16 |        |             |
3268:000 | DONE wsp | na 16 16 |        |             |
3269:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3270:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
3271:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
3272:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
3273:000 | DONE wsp | na 16 16 |        |             |
3274:000 | DONE lbl | na 16 16 | 00696a |             | xt_source                            
3275:000 | DONE ins | na 16 16 | 00696a | ca          |                 dex                  make room on Data Stack
3276:000 | DONE ins | na 16 16 | 00696b | ca          |                 dex                  
3277:000 | DONE ins | na 16 16 | 00696c | ca          |                 dex                  
3278:000 | DONE ins | na 16 16 | 00696d | ca          |                 dex                  
3279:000 | DONE ins | na 16 16 | 00696e | 94 02       |                 sty.dx 02            
3280:000 | DONE wsp | na 16 16 |        |             |
3281:000 | DONE ins | na 16 16 | 006970 | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
3282:000 | DONE ins | na 16 16 | 006972 | 95 00       |                 sta.dx 00            
3283:000 | DONE wsp | na 16 16 |        |             |
3284:000 | DONE ins | na 16 16 | 006974 | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
3285:000 | DONE wsp | na 16 16 |        |             |
3286:000 | DONE lbl | na 16 16 | 006976 |             | z_source                             
3286:001 | DONE ins | na 16 16 | 006976 | 60          |                 rts                  
3287:000 | DONE wsp | na 16 16 |        |             |
3288:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3289:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
3290:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
3291:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
3292:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
3293:000 | DONE lbl | na 16 16 | 006977 |             | xt_source-id                         
3294:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3295:000 | DONE ins | na 16 16 | 006977 | ca          |                 dex                  
3296:000 | DONE ins | na 16 16 | 006978 | ca          |                 dex                  
3297:000 | DONE ins | na 16 16 | 006979 | 94 00       |                 sty.dx 00            
3298:000 | DONE ins | na 16 16 | 00697b | a4 0a       |                 ldy.d 00020a         
3299:000 | DONE wsp | na 16 16 |        |             |
3300:000 | DONE lbl | na 16 16 | 00697d |             | z_source-id                          
3300:001 | DONE ins | na 16 16 | 00697d | 60          |                 rts                  
3301:000 | DONE wsp | na 16 16 |        |             |
3302:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3303:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
3304:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
3305:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
3306:000 | DONE lbl | na 16 16 | 00697e |             | xt_space                             
3307:000 | DONE ins | na 16 16 | 00697e | a9 20 00    |                 lda.# AscSP          
3308:000 | DONE ins | na 16 16 | 006981 | 20 36 60    |                 jsr 006036           
3309:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3310:000 | DONE wsp | na 16 16 |        |             |
3311:000 | DONE lbl | na 16 16 | 006984 |             | z_space                              
3311:001 | DONE ins | na 16 16 | 006984 | 60          |                 rts                  
3312:000 | DONE wsp | na 16 16 |        |             |
3313:000 | DONE wsp | na 16 16 |        |             |
3314:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3315:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
3316:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
3317:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
3318:000 | DONE lbl | na 16 16 | 006985 |             | xt_spaces                            
3319:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3320:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3321:000 | DONE lbl | na 16 16 | 006985 |             | @                                    
3322:000 | DONE ins | na 16 16 | 006985 | 88          |                 dey                  this also handles case u=0
3323:000 | DONE ins | na 16 16 | 006986 | 30 05       |                 bmi 00698d           
3324:000 | DONE wsp | na 16 16 |        |             |
3325:000 | DONE ins | na 16 16 | 006988 | 20 7e 69    |                 jsr 00697e           
3326:000 | DONE ins | na 16 16 | 00698b | 80 f8       |                 bra 006985           
3327:000 | DONE wsp | na 16 16 |        |             |
3328:000 | DONE lbl | na 16 16 | 00698d |             | spaces_done                          
3329:000 | DONE ins | na 16 16 | 00698d | b4 00       |                 ldy.dx 00            DROP
3330:000 | DONE ins | na 16 16 | 00698f | e8          |                 inx                  
3331:000 | DONE ins | na 16 16 | 006990 | e8          |                 inx                  
3332:000 | DONE wsp | na 16 16 |        |             |
3333:000 | DONE lbl | na 16 16 | 006991 |             | z_spaces                             
3333:001 | DONE ins | na 16 16 | 006991 | 60          |                 rts                  
3334:000 | DONE wsp | na 16 16 |        |             |
3335:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3336:000 | DONE cmt | na 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
3337:000 | DONE cmt | na 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
3338:000 | DONE cmt | na 16 16 |        |             | ; more than UM* DROP
3339:000 | DONE lbl | na 16 16 | 006992 |             | xt_star                              
3340:000 | DONE ins | na 16 16 | 006992 | 20 f5 69    |                 jsr 0069f5           
3341:000 | DONE ins | na 16 16 | 006995 | b4 00       |                 ldy.dx 00            DROP
3342:000 | DONE ins | na 16 16 | 006997 | e8          |                 inx                  
3343:000 | DONE ins | na 16 16 | 006998 | e8          |                 inx                  
3344:000 | DONE wsp | na 16 16 |        |             |
3345:000 | DONE lbl | na 16 16 | 006999 |             | z_star                               
3345:001 | DONE ins | na 16 16 | 006999 | 60          |                 rts                  
3346:000 | DONE wsp | na 16 16 |        |             |
3347:000 | DONE wsp | na 16 16 |        |             |
3348:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3349:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
3350:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
3351:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
3352:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
3353:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
3354:000 | DONE lbl | na 16 16 | 00699a |             | xt_state                             
3355:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3356:000 | DONE ins | na 16 16 | 00699a | ca          |                 dex                  
3357:000 | DONE ins | na 16 16 | 00699b | ca          |                 dex                  
3358:000 | DONE ins | na 16 16 | 00699c | 94 00       |                 sty.dx 00            
3359:000 | DONE ins | na 16 16 | 00699e | a0 14 02    |                 ldy.# 000214         
3360:000 | DONE wsp | na 16 16 |        |             |
3361:000 | DONE lbl | na 16 16 | 0069a1 |             | z_state                              
3361:001 | DONE ins | na 16 16 | 0069a1 | 60          |                 rts                  
3362:000 | DONE wsp | na 16 16 |        |             |
3363:000 | DONE wsp | na 16 16 |        |             |
3364:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3365:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
3366:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
3367:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
3368:000 | DONE lbl | na 16 16 | 0069a2 |             | xt_swap                              
3369:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3370:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3371:000 | DONE ins | na 16 16 | 0069a2 | b5 00       |                 lda.dx 00            
3372:000 | DONE ins | na 16 16 | 0069a4 | 94 00       |                 sty.dx 00            
3373:000 | DONE ins | na 16 16 | 0069a6 | a8          |                 tay                  
3374:000 | DONE wsp | na 16 16 |        |             |
3375:000 | DONE lbl | na 16 16 | 0069a7 |             | z_swap                               
3375:001 | DONE ins | na 16 16 | 0069a7 | 60          |                 rts                  
3376:000 | DONE wsp | na 16 16 |        |             |
3377:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3378:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
3379:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
3380:000 | DONE lbl | na 16 16 | 0069a8 |             | xt_true                              
3381:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3382:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3383:000 | DONE ins | na 16 16 | 0069a8 | ca          |                 dex                  
3384:000 | DONE ins | na 16 16 | 0069a9 | ca          |                 dex                  
3385:000 | DONE ins | na 16 16 | 0069aa | 94 00       |                 sty.dx 00            
3386:000 | DONE ins | na 16 16 | 0069ac | a0 ff ff    |                 ldy.# 0ffff          
3387:000 | DONE wsp | na 16 16 |        |             |
3388:000 | DONE lbl | na 16 16 | 0069af |             | z_true                               
3388:001 | DONE ins | na 16 16 | 0069af | 60          |                 rts                  
3389:000 | DONE wsp | na 16 16 |        |             |
3390:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3391:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
3392:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
3393:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
3394:000 | DONE lbl | na 16 16 | 0069b0 |             | xt_tuck                              
3395:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3396:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3397:000 | DONE ins | na 16 16 | 0069b0 | ca          |                 dex                  
3398:000 | DONE ins | na 16 16 | 0069b1 | ca          |                 dex                  
3399:000 | DONE ins | na 16 16 | 0069b2 | b5 02       |                 lda.dx 2             
3400:000 | DONE ins | na 16 16 | 0069b4 | 95 00       |                 sta.dx 0             
3401:000 | DONE ins | na 16 16 | 0069b6 | 94 02       |                 sty.dx 2             
3402:000 | DONE wsp | na 16 16 |        |             |
3403:000 | DONE lbl | na 16 16 | 0069b8 |             | z_tuck                               
3403:001 | DONE ins | na 16 16 | 0069b8 | 60          |                 rts                  
3404:000 | DONE wsp | na 16 16 |        |             |
3405:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3406:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
3407:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
3408:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
3409:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
3410:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
3411:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
3412:000 | DONE cmt | na 16 16 |        |             | ; running.
3413:000 | DONE lbl | na 16 16 | 0069b9 |             | xt_type                              
3414:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3415:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3416:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
3417:000 | DONE ins | na 16 16 | 0069b9 | 98          |                 tya                  force flag check of TOS
3418:000 | DONE ins | na 16 16 | 0069ba | f0 17       |                 beq 0069d3           
3419:000 | DONE wsp | na 16 16 |        |             |
3420:000 | DONE ins | na 16 16 | 0069bc | b5 00       |                 lda.dx 00            get address from NOS
3421:000 | DONE ins | na 16 16 | 0069be | 85 16       |                 sta.d 000216         
3422:000 | DONE ins | na 16 16 | 0069c0 | 84 18       |                 sty.d 000218         number of chars is TOS
3423:000 | DONE ins | na 16 16 | 0069c2 | a0 00 00    |                 ldy.# 0000           
3424:000 | DONE ins | na 16 16 | 0069c5 | e2 20       |                 sep 20               
3424:001 | DONE ctl | na  8 16 |        |             |         .!a8
3425:000 | DONE lbl | na  8 16 | 0069c7 |             | type_loop                            
3426:000 | DONE ins | na  8 16 | 0069c7 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3427:000 | DONE ins | na  8 16 | 0069c9 | 20 36 60    |                 jsr 006036           
3428:000 | DONE ins | na  8 16 | 0069cc | c8          |                 iny                  
3429:000 | DONE ins | na  8 16 | 0069cd | c4 18       |                 cpy.d 000218         
3430:000 | DONE ins | na  8 16 | 0069cf | d0 f6       |                 bne 0069c7           
3431:000 | DONE wsp | na  8 16 |        |             |
3432:000 | DONE ins | na  8 16 | 0069d1 | c2 20       |                 rep 20               
3432:001 | DONE ctl | na 16 16 |        |             |         .!a16
3433:000 | DONE lbl | na 16 16 | 0069d3 |             | type_done                            
3434:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
3435:000 | DONE ins | na 16 16 | 0069d3 | b4 02       |                 ldy.dx 02            
3436:000 | DONE ins | na 16 16 | 0069d5 | e8          |                 inx                  
3437:000 | DONE ins | na 16 16 | 0069d6 | e8          |                 inx                  
3438:000 | DONE ins | na 16 16 | 0069d7 | e8          |                 inx                  
3439:000 | DONE ins | na 16 16 | 0069d8 | e8          |                 inx                  
3440:000 | DONE wsp | na 16 16 |        |             |
3441:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
3442:000 | DONE wsp | na 16 16 |        |             |
3443:000 | DONE lbl | na 16 16 | 0069d9 |             | z_type                               
3443:001 | DONE ins | na 16 16 | 0069d9 | 60          |                 rts                  
3444:000 | DONE wsp | na 16 16 |        |             |
3445:000 | DONE wsp | na 16 16 |        |             |
3446:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3447:000 | DONE cmt | na 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
3448:000 | DONE cmt | na 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
3449:000 | DONE cmt | na 16 16 |        |             | ; result and a single-cell remainder. Based on
3450:000 | DONE cmt | na 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
3451:000 | DONE cmt | na 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
3452:000 | DONE cmt | na 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
3453:000 | DONE cmt | na 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
3454:000 | DONE cmt | na 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
3455:000 | DONE lbl | na 16 16 | 0069da |             | xt_udmod                             
3456:000 | DONE ins | na 16 16 | 0069da | 20 26 61    |                 jsr 006126           
3457:000 | DONE ins | na 16 16 | 0069dd | 20 8c 62    |                 jsr 00628c           
3458:000 | DONE ins | na 16 16 | 0069e0 | 20 8c 68    |                 jsr 00688c           
3459:000 | DONE ins | na 16 16 | 0069e3 | 20 54 6a    |                 jsr 006a54           
3460:000 | DONE ins | na 16 16 | 0069e6 | 20 d0 68    |                 jsr 0068d0           
3461:000 | DONE ins | na 16 16 | 0069e9 | 20 d0 68    |                 jsr 0068d0           
3462:000 | DONE ins | na 16 16 | 0069ec | 20 95 68    |                 jsr 006895           
3463:000 | DONE ins | na 16 16 | 0069ef | 20 54 6a    |                 jsr 006a54           
3464:000 | DONE ins | na 16 16 | 0069f2 | 4c d0 68    |                 jmp 0068d0           JSR/RTS
3465:000 | DONE lbl | na 16 16 | 0069f5 |             | z_udmod                              
3466:000 | DONE wsp | na 16 16 |        |             |
3467:000 | DONE wsp | na 16 16 |        |             |
3468:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3469:000 | DONE cmt | na 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
3470:000 | DONE cmt | na 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
3471:000 | DONE cmt | na 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
3472:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
3473:000 | DONE cmt | na 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
3474:000 | DONE cmt | na 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
3475:000 | DONE cmt | na 16 16 |        |             | ; call this "U*"
3476:000 | DONE wsp | na 16 16 |        |             |
3477:000 | DONE cmt | na 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
3478:000 | DONE cmt | na 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
3479:000 | DONE cmt | na 16 16 |        |             | ; consider switching to a table-supported version based on
3480:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
3481:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
3482:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
3483:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
3484:000 | DONE cmt | na 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
3485:000 | DONE wsp | na 16 16 |        |             |
3486:000 | DONE lbl | na 16 16 | 0069f5 |             | xt_umstar                            
3487:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3488:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
3489:000 | DONE ins | na 16 16 | 0069f5 | 98          |                 tya                  
3490:000 | DONE ins | na 16 16 | 0069f6 | f0 3d       |                 beq 006a35           
3491:000 | DONE ins | na 16 16 | 0069f8 | b5 00       |                 lda.dx 00            
3492:000 | DONE ins | na 16 16 | 0069fa | f0 39       |                 beq 006a35           
3493:000 | DONE wsp | na 16 16 |        |             |
3494:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
3495:000 | DONE cmt | na 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
3496:000 | DONE cmt | na 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
3497:000 | DONE cmt | na 16 16 |        |             |                 ; answer
3498:000 | DONE ins | na 16 16 | 0069fc | c0 01 00    |                 cpy.# 0001           non-distructively
3499:000 | DONE ins | na 16 16 | 0069ff | f0 3b       |                 beq 006a3c           
3500:000 | DONE ins | na 16 16 | 006a01 | b5 00       |                 lda.dx 00            
3501:000 | DONE ins | na 16 16 | 006a03 | 3a          |                 dec.a                don't care about distruction
3502:000 | DONE ins | na 16 16 | 006a04 | f0 39       |                 beq 006a3f           
3503:000 | DONE wsp | na 16 16 |        |             |
3504:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
3505:000 | DONE ins | na 16 16 | 006a06 | c0 02 00    |                 cpy.# 0002           
3506:000 | DONE ins | na 16 16 | 006a09 | f0 3b       |                 beq 006a46           
3507:000 | DONE wsp | na 16 16 |        |             |
3508:000 | DONE ins | na 16 16 | 006a0b | b5 00       |                 lda.dx 00            
3509:000 | DONE ins | na 16 16 | 006a0d | c9 02 00    |                 cmp.# 0002           
3510:000 | DONE ins | na 16 16 | 006a10 | f0 38       |                 beq 006a4a           
3511:000 | DONE wsp | na 16 16 |        |             |
3512:000 | DONE cmt | na 16 16 |        |             |                 ; NO SPECIAL CASE ("THE HARD WAY")
3513:000 | DONE ins | na 16 16 | 006a12 | 84 16       |                 sty.d 000216         TOS number  "40"
3514:000 | DONE ins | na 16 16 | 006a14 | 85 18       |                 sta.d 000218         NOS number  "41"
3515:000 | DONE ins | na 16 16 | 006a16 | a0 10 00    |                 ldy.# &16            loop counter
3516:000 | DONE wsp | na 16 16 |        |             |
3517:000 | DONE ins | na 16 16 | 006a19 | a9 00 00    |                 lda.# 0000           
3518:000 | DONE ins | na 16 16 | 006a1c | 85 1a       |                 sta.d 00021a         Most Significat Word (MSW) of result
3519:000 | DONE wsp | na 16 16 |        |             |
3520:000 | DONE lbl | na 16 16 | 006a1e |             | umstar_loop                          
3521:000 | DONE ins | na 16 16 | 006a1e | 0a          |                 asl.a                useless for first iteration
3522:000 | DONE ins | na 16 16 | 006a1f | 26 1a       |                 rol.d 00021a         move carry into MSB, useless first iteration
3523:000 | DONE ins | na 16 16 | 006a21 | 06 18       |                 asl.d 000218         move bit of NOS number into carry
3524:000 | DONE wsp | na 16 16 |        |             |
3525:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
3526:000 | DONE cmt | na 16 16 |        |             |                 ; the next bit
3527:000 | DONE ins | na 16 16 | 006a23 | 90 07       |                 bcc 006a2c           
3528:000 | DONE wsp | na 16 16 |        |             |
3529:000 | DONE ins | na 16 16 | 006a25 | 18          |                 clc                  
3530:000 | DONE ins | na 16 16 | 006a26 | 65 16       |                 adc.d 000216         we have a set bit, so add TOS
3531:000 | DONE wsp | na 16 16 |        |             |
3532:000 | DONE cmt | na 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
3533:000 | DONE ins | na 16 16 | 006a28 | 90 02       |                 bcc 006a2c           
3534:000 | DONE ins | na 16 16 | 006a2a | e6 1a       |                 inc.d 00021a         
3535:000 | DONE wsp | na 16 16 |        |             |
3536:000 | DONE lbl | na 16 16 | 006a2c |             | umstar_counter                       
3537:000 | DONE ins | na 16 16 | 006a2c | 88          |                 dey                  
3538:000 | DONE ins | na 16 16 | 006a2d | d0 ef       |                 bne 006a1e           
3539:000 | DONE wsp | na 16 16 |        |             |
3540:000 | DONE cmt | na 16 16 |        |             |                 ; We're all done, clean up and leave
3541:000 | DONE ins | na 16 16 | 006a2f | 95 00       |                 sta.dx 00            store lower cell of number in NOS
3542:000 | DONE ins | na 16 16 | 006a31 | a4 1a       |                 ldy.d 00021a         store MSB in TOS as double cell
3543:000 | DONE wsp | na 16 16 |        |             |
3544:000 | DONE ins | na 16 16 | 006a33 | 80 1e       |                 bra 006a53           don't use RTS so we can natively compile
3545:000 | DONE wsp | na 16 16 |        |             |
3546:000 | DONE lbl | na 16 16 | 006a35 |             | umstar_zero                          
3547:000 | DONE cmt | na 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
3548:000 | DONE ins | na 16 16 | 006a35 | a0 00 00    |                 ldy.# 0000           
3549:000 | DONE ins | na 16 16 | 006a38 | 94 00       |                 sty.dx 00            
3550:000 | DONE ins | na 16 16 | 006a3a | 80 17       |                 bra 006a53           
3551:000 | DONE wsp | na 16 16 |        |             |
3552:000 | DONE lbl | na 16 16 | 006a3c |             | umstar_one_tos                       
3553:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is one, life is easy
3554:000 | DONE ins | na 16 16 | 006a3c | 88          |                 dey                  NOS is LSW, TOS becomes zero
3555:000 | DONE ins | na 16 16 | 006a3d | 80 14       |                 bra 006a53           
3556:000 | DONE lbl | na 16 16 | 006a3f |             | umstar_one_nos                       
3557:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is one, life is easy
3558:000 | DONE ins | na 16 16 | 006a3f | 94 00       |                 sty.dx 00            
3559:000 | DONE ins | na 16 16 | 006a41 | a0 00 00    |                 ldy.# 0000           
3560:000 | DONE ins | na 16 16 | 006a44 | 80 0d       |                 bra 006a53           
3561:000 | DONE wsp | na 16 16 |        |             |
3562:000 | DONE lbl | na 16 16 | 006a46 |             | umstar_two_tos                       
3563:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is two, life is easy
3564:000 | DONE ins | na 16 16 | 006a46 | b5 00       |                 lda.dx 00            
3565:000 | DONE ins | na 16 16 | 006a48 | 80 01       |                 bra 006a4b           
3566:000 | DONE lbl | na 16 16 | 006a4a |             | umstar_two_nos                       
3567:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is two, life is still easy
3568:000 | DONE ins | na 16 16 | 006a4a | 98          |                 tya                  
3569:000 | DONE lbl | na 16 16 | 006a4b |             | umstar_two_common                    
3570:000 | DONE ins | na 16 16 | 006a4b | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
3571:000 | DONE ins | na 16 16 | 006a4c | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
3572:000 | DONE wsp | na 16 16 |        |             |
3573:000 | DONE ins | na 16 16 | 006a4e | a9 00 00    |                 lda.# 0000           
3574:000 | DONE ins | na 16 16 | 006a51 | 2a          |                 rol.a                Rotate any Carry Flag into MSW
3575:000 | DONE ins | na 16 16 | 006a52 | a8          |                 tay                  
3576:000 | DONE wsp | na 16 16 |        |             |
3577:000 | DONE lbl | na 16 16 | 006a53 |             | z_umstar                             
3577:001 | DONE ins | na 16 16 | 006a53 | 60          |                 rts                  
3578:000 | DONE wsp | na 16 16 |        |             |
3579:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3580:000 | DONE cmt | na 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
3581:000 | DONE cmt | na 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
3582:000 | DONE cmt | na 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
3583:000 | DONE cmt | na 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
3584:000 | DONE cmt | na 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
3585:000 | DONE cmt | na 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
3586:000 | DONE lbl | na 16 16 | 006a54 |             | xt_ummod                             
3587:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3588:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3589:000 | DONE cmt | na 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
3590:000 | DONE cmt | na 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
3591:000 | DONE cmt | na 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
3592:000 | DONE cmt | na 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
3593:000 | DONE cmt | na 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
3594:000 | DONE cmt | na 16 16 |        |             |                 ;
3595:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3596:000 | DONE cmt | na 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
3597:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
3598:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
3599:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3600:000 | DONE cmt | na 16 16 |        |             |                 ;
3601:000 | DONE cmt | na 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
3602:000 | DONE cmt | na 16 16 |        |             |                 ; and low cell in 3OS
3603:000 | DONE wsp | na 16 16 |        |             |
3604:000 | DONE cmt | na 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
3605:000 | DONE cmt | na 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
3606:000 | DONE cmt | na 16 16 |        |             |                 ; to appear like in Gforth
3607:000 | DONE ins | na 16 16 | 006a54 | 98          |                 tya                  force flag test
3608:000 | DONE ins | na 16 16 | 006a55 | d0 06       |                 bne 006a5d           
3609:000 | DONE wsp | na 16 16 |        |             |
3610:000 | DONE ins | na 16 16 | 006a57 | a9 37 77    |                 lda.# 007737         
3611:000 | DONE ins | na 16 16 | 006a5a | 4c 82 71    |                 jmp 007182           
3612:000 | DONE wsp | na 16 16 |        |             |
3613:000 | DONE lbl | na 16 16 | 006a5d |             | ummod_notzero                        
3614:000 | DONE ins | na 16 16 | 006a5d | 84 20       |                 sty.d 000220         Y is now free
3615:000 | DONE ins | na 16 16 | 006a5f | b5 00       |                 lda.dx 00            high cell of dividend
3616:000 | DONE ins | na 16 16 | 006a61 | 85 22       |                 sta.d 000222         
3617:000 | DONE ins | na 16 16 | 006a63 | b5 02       |                 lda.dx 02            low cell of dividend
3618:000 | DONE ins | na 16 16 | 006a65 | 85 24       |                 sta.d 000224         
3619:000 | DONE wsp | na 16 16 |        |             |
3620:000 | DONE cmt | na 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
3621:000 | DONE cmt | na 16 16 |        |             |                 ; Pointer, freeing X for index duty
3622:000 | DONE ins | na 16 16 | 006a67 | e8          |                 inx                  
3623:000 | DONE ins | na 16 16 | 006a68 | e8          |                 inx                  
3624:000 | DONE ins | na 16 16 | 006a69 | 86 04       |                 stx.d 000204         
3625:000 | DONE wsp | na 16 16 |        |             |
3626:000 | DONE cmt | na 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
3627:000 | DONE cmt | na 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
3628:000 | DONE cmt | na 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
3629:000 | DONE cmt | na 16 16 |        |             |                 ; we did that already in a separate step
3630:000 | DONE ins | na 16 16 | 006a6b | 38          |                 sec                  
3631:000 | DONE ins | na 16 16 | 006a6c | a5 22       |                 lda.d 000222         
3632:000 | DONE ins | na 16 16 | 006a6e | e5 20       |                 sbc.d 000220         
3633:000 | DONE ins | na 16 16 | 006a70 | b0 21       |                 bcs 006a93           
3634:000 | DONE wsp | na 16 16 |        |             |
3635:000 | DONE cmt | na 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
3636:000 | DONE cmt | na 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
3637:000 | DONE cmt | na 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
3638:000 | DONE cmt | na 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
3639:000 | DONE cmt | na 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
3640:000 | DONE cmt | na 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
3641:000 | DONE ins | na 16 16 | 006a72 | a2 11 00    |                 ldx.# &17            
3642:000 | DONE wsp | na 16 16 |        |             |
3643:000 | DONE lbl | na 16 16 | 006a75 |             | ummod_shift                          
3644:000 | DONE cmt | na 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
3645:000 | DONE cmt | na 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
3646:000 | DONE cmt | na 16 16 |        |             |                 ; pushed off the other end in the last rotation
3647:000 | DONE ins | na 16 16 | 006a75 | 26 24       |                 rol.d 000224         
3648:000 | DONE wsp | na 16 16 |        |             |
3649:000 | DONE cmt | na 16 16 |        |             |                 ; loop control
3650:000 | DONE ins | na 16 16 | 006a77 | ca          |                 dex                  
3651:000 | DONE ins | na 16 16 | 006a78 | f0 22       |                 beq 006a9c           
3652:000 | DONE wsp | na 16 16 |        |             |
3653:000 | DONE cmt | na 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
3654:000 | DONE cmt | na 16 16 |        |             |                 ; next bit in from high bit of low cell
3655:000 | DONE ins | na 16 16 | 006a7a | 26 22       |                 rol.d 000222         
3656:000 | DONE ins | na 16 16 | 006a7c | a9 00 00    |                 lda.# 0000           
3657:000 | DONE ins | na 16 16 | 006a7f | 2a          |                 rol.a                
3658:000 | DONE ins | na 16 16 | 006a80 | 85 26       |                 sta.d 000226         store old high bit of dividend
3659:000 | DONE wsp | na 16 16 |        |             |
3660:000 | DONE cmt | na 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
3661:000 | DONE cmt | na 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
3662:000 | DONE cmt | na 16 16 |        |             |                 ; cleared, divisor did not fit
3663:000 | DONE ins | na 16 16 | 006a82 | 38          |                 sec                  
3664:000 | DONE ins | na 16 16 | 006a83 | a5 22       |                 lda.d 000222         
3665:000 | DONE ins | na 16 16 | 006a85 | e5 20       |                 sbc.d 000220         
3666:000 | DONE ins | na 16 16 | 006a87 | a8          |                 tay                  save difference in Y until we know if we need it
3667:000 | DONE wsp | na 16 16 |        |             |
3668:000 | DONE cmt | na 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
3669:000 | DONE cmt | na 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
3670:000 | DONE cmt | na 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
3671:000 | DONE cmt | na 16 16 |        |             |                 ; remains set
3672:000 | DONE ins | na 16 16 | 006a88 | a5 26       |                 lda.d 000226         
3673:000 | DONE ins | na 16 16 | 006a8a | e9 00 00    |                 sbc.# 0000           
3674:000 | DONE ins | na 16 16 | 006a8d | 90 e6       |                 bcc 006a75           
3675:000 | DONE wsp | na 16 16 |        |             |
3676:000 | DONE cmt | na 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
3677:000 | DONE cmt | na 16 16 |        |             |                 ; cell to what it would be after subtraction
3678:000 | DONE ins | na 16 16 | 006a8f | 84 22       |                 sty.d 000222         
3679:000 | DONE ins | na 16 16 | 006a91 | 80 e2       |                 bra 006a75           
3680:000 | DONE wsp | na 16 16 |        |             |
3681:000 | DONE lbl | na 16 16 | 006a93 |             | ummod_overflow                       
3682:000 | DONE cmt | na 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
3683:000 | DONE cmt | na 16 16 |        |             |                 ; in both the quotient and remainder
3684:000 | DONE ins | na 16 16 | 006a93 | a6 04       |                 ldx.d 000204         restore DSP
3685:000 | DONE ins | na 16 16 | 006a95 | a0 ff ff    |                 ldy.# 0ffff          
3686:000 | DONE ins | na 16 16 | 006a98 | 94 00       |                 sty.dx 00            
3687:000 | DONE ins | na 16 16 | 006a9a | 80 08       |                 bra 006aa4           go to end to enable native coding
3688:000 | DONE wsp | na 16 16 |        |             |
3689:000 | DONE lbl | na 16 16 | 006a9c |             | ummod_complete                       
3690:000 | DONE ins | na 16 16 | 006a9c | a6 04       |                 ldx.d 000204         restore DSP
3691:000 | DONE ins | na 16 16 | 006a9e | a4 24       |                 ldy.d 000224         quotient is TOS
3692:000 | DONE ins | na 16 16 | 006aa0 | a5 22       |                 lda.d 000222         remainder is NOS
3693:000 | DONE ins | na 16 16 | 006aa2 | 95 00       |                 sta.dx 00            
3694:000 | DONE wsp | na 16 16 |        |             |
3695:000 | DONE lbl | na 16 16 | 006aa4 |             | z_ummod                              
3695:001 | DONE ins | na 16 16 | 006aa4 | 60          |                 rts                  
3696:000 | DONE wsp | na 16 16 |        |             |
3697:000 | DONE wsp | na 16 16 |        |             |
3698:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3699:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
3700:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
3701:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
3702:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
3703:000 | DONE lbl | na 16 16 | 006aa5 |             | xt_unused                            
3704:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3705:000 | DONE ins | na 16 16 | 006aa5 | a9 ff 7b    |                 lda.# 007bff         
3706:000 | DONE ins | na 16 16 | 006aa8 | 38          |                 sec                  
3707:000 | DONE ins | na 16 16 | 006aa9 | e5 00       |                 sbc.d 000200         current compile pointer
3708:000 | DONE wsp | na 16 16 |        |             |
3709:000 | DONE ins | na 16 16 | 006aab | ca          |                 dex                  
3710:000 | DONE ins | na 16 16 | 006aac | ca          |                 dex                  
3711:000 | DONE ins | na 16 16 | 006aad | 94 00       |                 sty.dx 00            
3712:000 | DONE wsp | na 16 16 |        |             |
3713:000 | DONE ins | na 16 16 | 006aaf | a8          |                 tay                  
3714:000 | DONE wsp | na 16 16 |        |             |
3715:000 | DONE lbl | na 16 16 | 006ab0 |             | z_unused                             
3715:001 | DONE ins | na 16 16 | 006ab0 | 60          |                 rts                  
3716:000 | DONE wsp | na 16 16 |        |             |
3717:000 | DONE wsp | na 16 16 |        |             |
3718:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3719:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
3720:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
3721:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
3722:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
3723:000 | DONE lbl | na 16 16 | 006ab1 |             | xt_variable                          
3724:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
3725:000 | DONE ins | na 16 16 | 006ab1 | 20 fd 64    |                 jsr 0064fd           
3726:000 | DONE wsp | na 16 16 |        |             |
3727:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
3728:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
3729:000 | DONE ins | na 16 16 | 006ab4 | a9 00 00    |                 lda.# 0000           
3730:000 | DONE ins | na 16 16 | 006ab7 | 92 00       |                 sta.di 000200        STA (CP)
3731:000 | DONE wsp | na 16 16 |        |             |
3732:000 | DONE ins | na 16 16 | 006ab9 | e6 00       |                 inc.d 000200         direct COMMA
3733:000 | DONE ins | na 16 16 | 006abb | e6 00       |                 inc.d 000200         
3734:000 | DONE wsp | na 16 16 |        |             |
3735:000 | DONE lbl | na 16 16 | 006abd |             | z_variable                           
3735:001 | DONE ins | na 16 16 | 006abd | 60          |                 rts                  
3736:000 | DONE wsp | na 16 16 |        |             |
3737:000 | DONE wsp | na 16 16 |        |             |
3738:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3739:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
3740:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
3741:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
3742:000 | DONE lbl | na 16 16 | 006abe |             | xt_words                             
3743:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3744:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3745:000 | DONE ins | na 16 16 | 006abe | 20 f6 64    |                 jsr 0064f6           start on next line, this is a style choice
3746:000 | DONE wsp | na 16 16 |        |             |
3747:000 | DONE ins | na 16 16 | 006ac1 | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
3748:000 | DONE ins | na 16 16 | 006ac3 | 48          |                 pha                  
3749:000 | DONE wsp | na 16 16 |        |             |
3750:000 | DONE ins | na 16 16 | 006ac4 | ca          |                 dex                  create room on TOS
3751:000 | DONE ins | na 16 16 | 006ac5 | ca          |                 dex                  
3752:000 | DONE ins | na 16 16 | 006ac6 | 94 00       |                 sty.dx 00            
3753:000 | DONE wsp | na 16 16 |        |             |
3754:000 | DONE lbl | na 16 16 | 006ac8 |             | words_loop                           
3755:000 | DONE ins | na 16 16 | 006ac8 | a8          |                 tay                  ( nt )
3756:000 | DONE ins | na 16 16 | 006ac9 | 20 25 67    |                 jsr 006725           ( nt -- addr u )
3757:000 | DONE ins | na 16 16 | 006acc | 20 b9 69    |                 jsr 0069b9           ( addr u -- )
3758:000 | DONE ins | na 16 16 | 006acf | 20 7e 69    |                 jsr 00697e           
3759:000 | DONE wsp | na 16 16 |        |             |
3760:000 | DONE ins | na 16 16 | 006ad2 | 68          |                 pla                  get back first entry in Dictionary
3761:000 | DONE wsp | na 16 16 |        |             |
3762:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
3763:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
3764:000 | DONE ins | na 16 16 | 006ad3 | 1a          |                 inc.a                
3765:000 | DONE ins | na 16 16 | 006ad4 | 1a          |                 inc.a                
3766:000 | DONE wsp | na 16 16 |        |             |
3767:000 | DONE ins | na 16 16 | 006ad5 | ca          |                 dex                  
3768:000 | DONE ins | na 16 16 | 006ad6 | ca          |                 dex                  
3769:000 | DONE ins | na 16 16 | 006ad7 | 94 00       |                 sty.dx 00            
3770:000 | DONE wsp | na 16 16 |        |             |
3771:000 | DONE ins | na 16 16 | 006ad9 | a8          |                 tay                  
3772:000 | DONE ins | na 16 16 | 006ada | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3773:000 | DONE ins | na 16 16 | 006add | 48          |                 pha                  
3774:000 | DONE ins | na 16 16 | 006ade | d0 e8       |                 bne 006ac8           zero entry signals end of Dictionary
3775:000 | DONE wsp | na 16 16 |        |             |
3776:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
3777:000 | DONE ins | na 16 16 | 006ae0 | 68          |                 pla                  balance MPU stack, value discarded
3778:000 | DONE wsp | na 16 16 |        |             |
3779:000 | DONE ins | na 16 16 | 006ae1 | b4 00       |                 ldy.dx 00            
3780:000 | DONE ins | na 16 16 | 006ae3 | e8          |                 inx                  
3781:000 | DONE ins | na 16 16 | 006ae4 | e8          |                 inx                  
3782:000 | DONE wsp | na 16 16 |        |             |
3783:000 | DONE lbl | na 16 16 | 006ae5 |             | z_words                              
3783:001 | DONE ins | na 16 16 | 006ae5 | 60          |                 rts                  
3784:000 | DONE wsp | na 16 16 |        |             |
3785:000 | DONE wsp | na 16 16 |        |             |
3786:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3787:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
3788:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
3789:000 | DONE lbl | na 16 16 | 006ae6 |             | xt_xor                               
3790:000 | DONE ins | na 16 16 | 006ae6 | 98          |                 tya                  
3791:000 | DONE ins | na 16 16 | 006ae7 | 55 00       |                 eor.dx 00            
3792:000 | DONE ins | na 16 16 | 006ae9 | a8          |                 tay                  
3793:000 | DONE wsp | na 16 16 |        |             |
3794:000 | DONE ins | na 16 16 | 006aea | e8          |                 inx                  
3795:000 | DONE ins | na 16 16 | 006aeb | e8          |                 inx                  
3796:000 | DONE wsp | na 16 16 |        |             |
3797:000 | DONE lbl | na 16 16 | 006aec |             | z_xor                                
3797:001 | DONE ins | na 16 16 | 006aec | 60          |                 rts                  
3798:000 | DONE wsp | na 16 16 |        |             |
3799:000 | DONE wsp | na 16 16 |        |             |
3800:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3801:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
3802:000 | DONE wsp | na 16 16 |        |             |
3803:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
3803:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
3803:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
3803:003 | DONE cmt | na 16 16 |        |             | ; This version: 21. Feb 2017
3803:004 | DONE wsp | na 16 16 |        |             |
3803:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
3803:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
3803:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
3803:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
3803:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
3803:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
3803:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
3803:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
3803:013 | DONE cmt | na 16 16 |        |             | ;
3803:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
3803:015 | DONE cmt | na 16 16 |        |             | ;
3803:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
3803:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
3803:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
3803:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
3803:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
3803:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
3803:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
3803:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
3803:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
3803:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
3803:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
3803:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
3803:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
3803:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
3803:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
3803:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
3803:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
3803:033 | DONE cmt | na 16 16 |        |             | ;
3803:034 | DONE cmt | na 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
3803:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
3803:036 | DONE cmt | na 16 16 |        |             | ;
3803:037 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
3803:038 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
3803:039 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
3803:040 | DONE wsp | na 16 16 |        |             |
3803:041 | DONE cmt | na 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
3803:042 | DONE cmt | na 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
3803:043 | DONE cmt | na 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
3803:044 | DONE cmt | na 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
3803:045 | DONE cmt | na 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
3803:046 | DONE cmt | na 16 16 |        |             | ; involved.
3803:047 | DONE wsp | na 16 16 |        |             |
3803:048 | DONE lbl | na 16 16 | 006aed |             | nt_bye                               
3803:049 | DONE dir | na 16 16 | 006aed | (1 bytes)   |         .byte 03                     length of word string
3803:049 | DONE dir | na 16 16 |        |             |                 03                       --  .
3803:050 | DONE dir | na 16 16 | 006aee | (1 bytes)   |         .byte { NC }                 status byte
3803:050 | DONE dir | na 16 16 |        |             |                 01                       --  .
3803:051 | DONE dir | na 16 16 | 006aef | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
3803:051 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
3803:052 | DONE dir | na 16 16 | 006af1 | (2 bytes)   |         .word 00642f                 start of code, the xt of this word
3803:052 | DONE dir | na 16 16 |        |             |                 2f 64                    --  / d
3803:053 | DONE dir | na 16 16 | 006af3 | (2 bytes)   |         .word 006432                 end of code (points to RTS)
3803:053 | DONE dir | na 16 16 |        |             |                 32 64                    --  2 d
3803:054 | DONE dir | na 16 16 | 006af5 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
3803:054 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
3803:055 | DONE wsp | na 16 16 |        |             |
3803:056 | DONE lbl | na 16 16 | 006af8 |             | nt_cold                              
3803:057 | DONE dir | na 16 16 | 006af8 | (2 bytes)   |         .byte 4, 00                  
3803:057 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3803:058 | DONE dir | na 16 16 | 006afa | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
3803:058 | DONE dir | na 16 16 |        |             |                 ed 6a 63 60 de 60        --  . j c ` . `
3803:059 | DONE dir | na 16 16 | 006b00 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
3803:059 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
3803:060 | DONE wsp | na 16 16 |        |             |
3803:061 | DONE lbl | na 16 16 | 006b04 |             | nt_words                             
3803:062 | DONE dir | na 16 16 | 006b04 | (2 bytes)   |         .byte 5, { NC }              
3803:062 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3803:063 | DONE dir | na 16 16 | 006b06 | (6 bytes)   |         .word nt_cold, xt_words, 006ae5 
3803:063 | DONE dir | na 16 16 |        |             |                 f8 6a be 6a e5 6a        --  . j . j . j
3803:064 | DONE dir | na 16 16 | 006b0c | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
3803:064 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
3803:065 | DONE wsp | na 16 16 |        |             |
3803:066 | DONE lbl | na 16 16 | 006b11 |             | nt_dump                              
3803:067 | DONE dir | na 16 16 | 006b11 | (2 bytes)   |         .byte 4, { NC }              
3803:067 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:068 | DONE dir | na 16 16 | 006b13 | (6 bytes)   |         .word nt_words, xt_dump, 0065f3 
3803:068 | DONE dir | na 16 16 |        |             |                 04 6b cd 65 f3 65        --  . k . e . e
3803:069 | DONE dir | na 16 16 | 006b19 | (4 bytes)   |         .byte 64, 75, 6d, 70         
3803:069 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
3803:070 | DONE wsp | na 16 16 |        |             |
3803:071 | DONE lbl | na 16 16 | 006b1d |             | nt_bell                              
3803:072 | DONE dir | na 16 16 | 006b1d | (2 bytes)   |         .byte 4, { NC }              
3803:072 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:073 | DONE dir | na 16 16 | 006b1f | (6 bytes)   |         .word nt_dump, xt_bell, 006409 
3803:073 | DONE dir | na 16 16 |        |             |                 11 6b 03 64 09 64        --  . k . d 	 d
3803:074 | DONE dir | na 16 16 | 006b25 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
3803:074 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
3803:075 | DONE wsp | na 16 16 |        |             |
3803:076 | DONE lbl | na 16 16 | 006b29 |             | nt_decimal                           
3803:077 | DONE dir | na 16 16 | 006b29 | (2 bytes)   |         .byte 7, { NC }              
3803:077 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3803:078 | DONE dir | na 16 16 | 006b2b | (6 bytes)   |         .word nt_bell, xt_decimal, 006581 
3803:078 | DONE dir | na 16 16 |        |             |                 1d 6b 7c 65 81 65        --  . k | e . e
3803:079 | DONE dir | na 16 16 | 006b31 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
3803:079 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
3803:080 | DONE wsp | na 16 16 |        |             |
3803:081 | DONE lbl | na 16 16 | 006b38 |             | nt_hex                               
3803:082 | DONE dir | na 16 16 | 006b38 | (2 bytes)   |         .byte 3, { NC }              
3803:082 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:083 | DONE dir | na 16 16 | 006b3a | (6 bytes)   |         .word nt_decimal, xt_hex, 0066a8 
3803:083 | DONE dir | na 16 16 |        |             |                 29 6b a3 66 a8 66        --  ) k . f . f
3803:084 | DONE dir | na 16 16 | 006b40 | (3 bytes)   |         .byte 68, 65, 78             
3803:084 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
3803:085 | DONE wsp | na 16 16 |        |             |
3803:086 | DONE lbl | na 16 16 | 006b43 |             | nt_unused                            
3803:087 | DONE dir | na 16 16 | 006b43 | (2 bytes)   |         .byte 6, { NC }              
3803:087 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3803:088 | DONE dir | na 16 16 | 006b45 | (6 bytes)   |         .word nt_hex, xt_unused, 006ab0 
3803:088 | DONE dir | na 16 16 |        |             |                 38 6b a5 6a b0 6a        --  8 k . j . j
3803:089 | DONE dir | na 16 16 | 006b4b | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
3803:089 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
3803:090 | DONE wsp | na 16 16 |        |             |
3803:091 | DONE lbl | na 16 16 | 006b51 |             | nt_page                              
3803:092 | DONE dir | na 16 16 | 006b51 | (2 bytes)   |         .byte 4, { NC }              
3803:092 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:093 | DONE dir | na 16 16 | 006b53 | (6 bytes)   |         .word nt_unused, xt_page, 0067e1 
3803:093 | DONE dir | na 16 16 |        |             |                 43 6b d5 67 e1 67        --  C k . g . g
3803:094 | DONE dir | na 16 16 | 006b59 | (4 bytes)   |         .byte 70, 61, 67, 65         
3803:094 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
3803:095 | DONE wsp | na 16 16 |        |             |
3803:096 | DONE lbl | na 16 16 | 006b5d |             | nt_dabs                              
3803:097 | DONE dir | na 16 16 | 006b5d | (2 bytes)   |         .byte 4, { NC }              
3803:097 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:098 | DONE dir | na 16 16 | 006b5f | (6 bytes)   |         .word nt_page, xt_dabs, 00657b 
3803:098 | DONE dir | na 16 16 |        |             |                 51 6b 75 65 7b 65        --  Q k u e { e
3803:099 | DONE dir | na 16 16 | 006b65 | (4 bytes)   |         .byte 64, 61, 62, 73         
3803:099 | DONE dir | na 16 16 |        |             |                 64 61 62 73              --  d a b s
3803:100 | DONE wsp | na 16 16 |        |             |
3803:101 | DONE lbl | na 16 16 | 006b69 |             | nt_dnegate                           
3803:102 | DONE dir | na 16 16 | 006b69 | (2 bytes)   |         .byte 7, { NC }              
3803:102 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3803:103 | DONE dir | na 16 16 | 006b6b | (6 bytes)   |         .word nt_dabs, xt_dnegate, 0065a4 
3803:103 | DONE dir | na 16 16 |        |             |                 5d 6b 91 65 a4 65        --  ] k . e . e
3803:104 | DONE dir | na 16 16 | 006b71 | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
3803:104 | DONE dir | na 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
3803:105 | DONE wsp | na 16 16 |        |             |
3803:106 | DONE lbl | na 16 16 | 006b78 |             | nt_dtos                              
3803:107 | DONE dir | na 16 16 | 006b78 | (2 bytes)   |         .byte 3, { NC }              
3803:107 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:108 | DONE dir | na 16 16 | 006b7a | (6 bytes)   |         .word nt_dnegate, xt_dtos, 006574 
3803:108 | DONE dir | na 16 16 |        |             |                 69 6b 70 65 74 65        --  i k p e t e
3803:109 | DONE dir | na 16 16 | 006b80 | (3 bytes)   |         .byte 64, 3e, 73             
3803:109 | DONE dir | na 16 16 |        |             |                 64 3e 73                 --  d > s
3803:110 | DONE wsp | na 16 16 |        |             |
3803:111 | DONE lbl | na 16 16 | 006b83 |             | nt_stod                              
3803:112 | DONE dir | na 16 16 | 006b83 | (2 bytes)   |         .byte 3, { NC }              
3803:112 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:113 | DONE dir | na 16 16 | 006b85 | (6 bytes)   |         .word nt_dtos, xt_stod, 0068fa 
3803:113 | DONE dir | na 16 16 |        |             |                 78 6b eb 68 fa 68        --  x k . h . h
3803:114 | DONE dir | na 16 16 | 006b8b | (3 bytes)   |         .byte 73, 3e, 64             
3803:114 | DONE dir | na 16 16 |        |             |                 73 3e 64                 --  s > d
3803:115 | DONE wsp | na 16 16 |        |             |
3803:116 | DONE lbl | na 16 16 | 006b8e |             | nt_udmod                             
3803:117 | DONE dir | na 16 16 | 006b8e | (2 bytes)   |         .byte 6, { NC }              
3803:117 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3803:118 | DONE dir | na 16 16 | 006b90 | (6 bytes)   |         .word nt_stod, xt_udmod, 0069f5 
3803:118 | DONE dir | na 16 16 |        |             |                 83 6b da 69 f5 69        --  . k . i . i
3803:119 | DONE dir | na 16 16 | 006b96 | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
3803:119 | DONE dir | na 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
3803:120 | DONE wsp | na 16 16 |        |             |
3803:121 | DONE lbl | na 16 16 | 006b9c |             | nt_ummod                             
3803:122 | DONE dir | na 16 16 | 006b9c | (2 bytes)   |         .byte 6, { NC }              
3803:122 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3803:123 | DONE dir | na 16 16 | 006b9e | (6 bytes)   |         .word nt_udmod, xt_ummod, 006aa4 
3803:123 | DONE dir | na 16 16 |        |             |                 8e 6b 54 6a a4 6a        --  . k T j . j
3803:124 | DONE dir | na 16 16 | 006ba4 | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
3803:124 | DONE dir | na 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
3803:125 | DONE wsp | na 16 16 |        |             |
3803:126 | DONE lbl | na 16 16 | 006baa |             | nt_star                              
3803:127 | DONE dir | na 16 16 | 006baa | (2 bytes)   |         .byte 1, { NC }              
3803:127 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:128 | DONE dir | na 16 16 | 006bac | (6 bytes)   |         .word nt_ummod, xt_star, 006999 
3803:128 | DONE dir | na 16 16 |        |             |                 9c 6b 92 69 99 69        --  . k . i . i
3803:129 | DONE dir | na 16 16 | 006bb2 | (1 bytes)   |         .byte 2a                     
3803:129 | DONE dir | na 16 16 |        |             |                 2a                       --  *
3803:130 | DONE wsp | na 16 16 |        |             |
3803:131 | DONE lbl | na 16 16 | 006bb3 |             | nt_mstar                             
3803:132 | DONE dir | na 16 16 | 006bb3 | (2 bytes)   |         .byte 2, { NC }              
3803:132 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:133 | DONE dir | na 16 16 | 006bb5 | (6 bytes)   |         .word nt_star, xt_mstar, 0066f5 
3803:133 | DONE dir | na 16 16 |        |             |                 aa 6b d6 66 f5 66        --  . k . f . f
3803:134 | DONE dir | na 16 16 | 006bbb | (2 bytes)   |         .byte 6d, 2a                 
3803:134 | DONE dir | na 16 16 |        |             |                 6d 2a                    --  m *
3803:135 | DONE wsp | na 16 16 |        |             |
3803:136 | DONE lbl | na 16 16 | 006bbd |             | nt_umstar                            
3803:137 | DONE dir | na 16 16 | 006bbd | (2 bytes)   |         .byte 3, { NC }              
3803:137 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:138 | DONE dir | na 16 16 | 006bbf | (6 bytes)   |         .word nt_mstar, xt_umstar, 006a53 
3803:138 | DONE dir | na 16 16 |        |             |                 b3 6b f5 69 53 6a        --  . k . i S j
3803:139 | DONE dir | na 16 16 | 006bc5 | (3 bytes)   |         .byte 75, 6d, 2a             
3803:139 | DONE dir | na 16 16 |        |             |                 75 6d 2a                 --  u m *
3803:140 | DONE wsp | na 16 16 |        |             |
3803:141 | DONE lbl | na 16 16 | 006bc8 |             | nt_count                             
3803:142 | DONE dir | na 16 16 | 006bc8 | (2 bytes)   |         .byte 5, { NC }              
3803:142 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3803:143 | DONE dir | na 16 16 | 006bca | (6 bytes)   |         .word nt_umstar, xt_count, 0064f5 
3803:143 | DONE dir | na 16 16 |        |             |                 bd 6b e7 64 f5 64        --  . k . d . d
3803:144 | DONE dir | na 16 16 | 006bd0 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
3803:144 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
3803:145 | DONE wsp | na 16 16 |        |             |
3803:146 | DONE lbl | na 16 16 | 006bd5 |             | nt_abort                             
3803:147 | DONE dir | na 16 16 | 006bd5 | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
3803:147 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
3803:148 | DONE dir | na 16 16 | 006bd7 | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
3803:148 | DONE dir | na 16 16 |        |             |                 c8 6b 97 60 de 60        --  . k . ` . `
3803:149 | DONE dir | na 16 16 | 006bdd | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
3803:149 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
3803:150 | DONE wsp | na 16 16 |        |             |
3803:151 | DONE lbl | na 16 16 | 006be2 |             | nt_parse                             
3803:152 | DONE dir | na 16 16 | 006be2 | (2 bytes)   |         .byte 5, 00                  
3803:152 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
3803:153 | DONE dir | na 16 16 | 006be4 | (6 bytes)   |         .word nt_abort, xt_parse, 006846 
3803:153 | DONE dir | na 16 16 |        |             |                 d5 6b 14 68 46 68        --  . k . h F h
3803:154 | DONE dir | na 16 16 | 006bea | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
3803:154 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
3803:155 | DONE wsp | na 16 16 |        |             |
3803:156 | DONE lbl | na 16 16 | 006bef |             | nt_quit                              
3803:157 | DONE dir | na 16 16 | 006bef | (2 bytes)   |         .byte 4, 00                  
3803:157 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3803:158 | DONE dir | na 16 16 | 006bf1 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
3803:158 | DONE dir | na 16 16 |        |             |                 e2 6b 9f 60 de 60        --  . k . ` . `
3803:159 | DONE dir | na 16 16 | 006bf7 | (4 bytes)   |         .byte 71, 75, 69, 74         
3803:159 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
3803:160 | DONE wsp | na 16 16 |        |             |
3803:161 | DONE lbl | na 16 16 | 006bfb |             | nt_question                          
3803:162 | DONE dir | na 16 16 | 006bfb | (2 bytes)   |         .byte 1, { NC }              
3803:162 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:163 | DONE dir | na 16 16 | 006bfd | (6 bytes)   |         .word nt_quit, xt_question, 006237 
3803:163 | DONE dir | na 16 16 |        |             |                 ef 6b 31 62 37 62        --  . k 1 b 7 b
3803:164 | DONE dir | na 16 16 | 006c03 | (1 bytes)   |         .byte 3f                     
3803:164 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
3803:165 | DONE wsp | na 16 16 |        |             |
3803:166 | DONE lbl | na 16 16 | 006c04 |             | nt_name-int                          
3803:167 | DONE dir | na 16 16 | 006c04 | (2 bytes)   |         .byte 8, { NC }              
3803:167 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3803:168 | DONE dir | na 16 16 | 006c06 | (6 bytes)   |         .word nt_question, xt_name-int, 006724 
3803:168 | DONE dir | na 16 16 |        |             |                 fb 6b 1c 67 24 67        --  . k . g $ g
3803:169 | DONE dir | na 16 16 | 006c0c | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
3803:169 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
3803:169 | DONE dir | na 16 16 |        |             |                                          -- 
3803:170 | DONE wsp | na 16 16 |        |             |
3803:171 | DONE lbl | na 16 16 | 006c14 |             | nt_cr                                
3803:172 | DONE dir | na 16 16 | 006c14 | (2 bytes)   |         .byte 2, { NC }              
3803:172 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:173 | DONE dir | na 16 16 | 006c16 | (6 bytes)   |         .word nt_name-int, xt_cr, 0064fc 
3803:173 | DONE dir | na 16 16 |        |             |                 04 6c f6 64 fc 64        --  . l . d . d
3803:174 | DONE dir | na 16 16 | 006c1c | (2 bytes)   |         .byte 63, 72                 
3803:174 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
3803:175 | DONE wsp | na 16 16 |        |             |
3803:176 | DONE lbl | na 16 16 | 006c1e |             | nt_numbermore                        
3803:177 | DONE dir | na 16 16 | 006c1e | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
3803:177 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:178 | DONE dir | na 16 16 | 006c20 | (6 bytes)   |         .word nt_cr, xt_numbermore, 006227 
3803:178 | DONE dir | na 16 16 |        |             |                 14 6c 19 62 27 62        --  . l . b ' b
3803:179 | DONE dir | na 16 16 | 006c26 | (2 bytes)   |         .byte 23, 3e                 
3803:179 | DONE dir | na 16 16 |        |             |                 23 3e                    --  # >
3803:180 | DONE wsp | na 16 16 |        |             |
3803:181 | DONE lbl | na 16 16 | 006c28 |             | nt_hold                              
3803:182 | DONE dir | na 16 16 | 006c28 | (2 bytes)   |         .byte 4, { NC }              
3803:182 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:183 | DONE dir | na 16 16 | 006c2a | (6 bytes)   |         .word nt_numbermore, xt_hold, 0066b6 
3803:183 | DONE dir | na 16 16 |        |             |                 1e 6c a9 66 b6 66        --  . l . f . f
3803:184 | DONE dir | na 16 16 | 006c30 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
3803:184 | DONE dir | na 16 16 |        |             |                 68 6f 6c 64              --  h o l d
3803:185 | DONE wsp | na 16 16 |        |             |
3803:186 | DONE lbl | na 16 16 | 006c34 |             | nt_hashs                             
3803:187 | DONE dir | na 16 16 | 006c34 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
3803:187 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:188 | DONE dir | na 16 16 | 006c36 | (6 bytes)   |         .word nt_hold, xt_hashs, 006230 
3803:188 | DONE dir | na 16 16 |        |             |                 28 6c 28 62 30 62        --  ( l ( b 0 b
3803:189 | DONE dir | na 16 16 | 006c3c | (2 bytes)   |         .byte 23, 73                 
3803:189 | DONE dir | na 16 16 |        |             |                 23 73                    --  # s
3803:190 | DONE wsp | na 16 16 |        |             |
3803:191 | DONE lbl | na 16 16 | 006c3e |             | nt_sign                              
3803:192 | DONE dir | na 16 16 | 006c3e | (2 bytes)   |         .byte 4, { NC }              
3803:192 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:193 | DONE dir | na 16 16 | 006c40 | (6 bytes)   |         .word nt_hashs, xt_sign, 006908 
3803:193 | DONE dir | na 16 16 |        |             |                 34 6c fb 68 08 69        --  4 l . h . i
3803:194 | DONE dir | na 16 16 | 006c46 | (4 bytes)   |         .byte 73, 69, 67, 6e         
3803:194 | DONE dir | na 16 16 |        |             |                 73 69 67 6e              --  s i g n
3803:195 | DONE wsp | na 16 16 |        |             |
3803:196 | DONE lbl | na 16 16 | 006c4a |             | nt_hash                              
3803:197 | DONE dir | na 16 16 | 006c4a | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
3803:197 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:198 | DONE dir | na 16 16 | 006c4c | (6 bytes)   |         .word nt_sign, xt_hash, 006218 
3803:198 | DONE dir | na 16 16 |        |             |                 3e 6c fe 61 18 62        --  > l . a . b
3803:199 | DONE dir | na 16 16 | 006c52 | (1 bytes)   |         .byte 23                     
3803:199 | DONE dir | na 16 16 |        |             |                 23                       --  #
3803:200 | DONE wsp | na 16 16 |        |             |
3803:201 | DONE lbl | na 16 16 | 006c53 |             | nt_lessnumber                        
3803:202 | DONE dir | na 16 16 | 006c53 | (2 bytes)   |         .byte 2, { NC }              
3803:202 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:203 | DONE dir | na 16 16 | 006c55 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 006108 
3803:203 | DONE dir | na 16 16 |        |             |                 4a 6c ff 60 08 61        --  J l . ` . a
3803:204 | DONE dir | na 16 16 | 006c5b | (2 bytes)   |         .byte 3c, 23                 
3803:204 | DONE dir | na 16 16 |        |             |                 3c 23                    --  < #
3803:205 | DONE wsp | na 16 16 |        |             |
3803:206 | DONE lbl | na 16 16 | 006c5d |             | nt_bl                                
3803:207 | DONE dir | na 16 16 | 006c5d | (2 bytes)   |         .byte 2, { NC }              
3803:207 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:208 | DONE dir | na 16 16 | 006c5f | (6 bytes)   |         .word nt_lessnumber, xt_bl, 006418 
3803:208 | DONE dir | na 16 16 |        |             |                 53 6c 11 64 18 64        --  S l . d . d
3803:209 | DONE dir | na 16 16 | 006c65 | (2 bytes)   |         .byte 62, 6c                 
3803:209 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
3803:210 | DONE wsp | na 16 16 |        |             |
3803:211 | DONE lbl | na 16 16 | 006c67 |             | nt_spaces                            
3803:212 | DONE dir | na 16 16 | 006c67 | (2 bytes)   |         .byte 6, { NC }              
3803:212 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3803:213 | DONE dir | na 16 16 | 006c69 | (6 bytes)   |         .word nt_bl, xt_spaces, 006991 
3803:213 | DONE dir | na 16 16 |        |             |                 5d 6c 85 69 91 69        --  ] l . i . i
3803:214 | DONE dir | na 16 16 | 006c6f | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
3803:214 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
3803:215 | DONE wsp | na 16 16 |        |             |
3803:216 | DONE lbl | na 16 16 | 006c75 |             | nt_space                             
3803:217 | DONE dir | na 16 16 | 006c75 | (2 bytes)   |         .byte 5, { NC }              
3803:217 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3803:218 | DONE dir | na 16 16 | 006c77 | (6 bytes)   |         .word nt_spaces, xt_space, 006984 
3803:218 | DONE dir | na 16 16 |        |             |                 67 6c 7e 69 84 69        --  g l ~ i . i
3803:219 | DONE dir | na 16 16 | 006c7d | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
3803:219 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
3803:220 | DONE wsp | na 16 16 |        |             |
3803:221 | DONE lbl | na 16 16 | 006c82 |             | nt_dots                              
3803:222 | DONE dir | na 16 16 | 006c82 | (2 bytes)   |         .byte 2, { NC }              
3803:222 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:223 | DONE dir | na 16 16 | 006c84 | (6 bytes)   |         .word nt_space, xt_dots, 0061b6 
3803:223 | DONE dir | na 16 16 |        |             |                 75 6c 6f 61 b6 61        --  u l o a . a
3803:224 | DONE dir | na 16 16 | 006c8a | (2 bytes)   |         .byte 2e, 73                 
3803:224 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
3803:225 | DONE wsp | na 16 16 |        |             |
3803:226 | DONE lbl | na 16 16 | 006c8c |             | nt_type                              
3803:227 | DONE dir | na 16 16 | 006c8c | (2 bytes)   |         .byte 4, 0                   
3803:227 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3803:228 | DONE dir | na 16 16 | 006c8e | (6 bytes)   |         .word nt_dots, xt_type, 0069d9 
3803:228 | DONE dir | na 16 16 |        |             |                 82 6c b9 69 d9 69        --  . l . i . i
3803:229 | DONE dir | na 16 16 | 006c94 | (4 bytes)   |         .byte 74, 79, 70, 65         
3803:229 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
3803:230 | DONE wsp | na 16 16 |        |             |
3803:231 | DONE lbl | na 16 16 | 006c98 |             | nt_dot                               
3803:232 | DONE dir | na 16 16 | 006c98 | (2 bytes)   |         .byte 1, { NC }              
3803:232 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:233 | DONE dir | na 16 16 | 006c9a | (6 bytes)   |         .word nt_type, xt_dot, 00614c 
3803:233 | DONE dir | na 16 16 |        |             |                 8c 6c 2e 61 4c 61        --  . l . a L a
3803:234 | DONE dir | na 16 16 | 006ca0 | (1 bytes)   |         .byte 2e                     
3803:234 | DONE dir | na 16 16 |        |             |                 2e                       --  .
3803:235 | DONE wsp | na 16 16 |        |             |
3803:236 | DONE lbl | na 16 16 | 006ca1 |             | nt_pad                               
3803:237 | DONE dir | na 16 16 | 006ca1 | (2 bytes)   |         .byte 3, { NC }              
3803:237 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:238 | DONE dir | na 16 16 | 006ca3 | (6 bytes)   |         .word nt_dot, xt_pad, 0067d4 
3803:238 | DONE dir | na 16 16 |        |             |                 98 6c c9 67 d4 67        --  . l . g . g
3803:239 | DONE dir | na 16 16 | 006ca9 | (3 bytes)   |         .byte 70, 61, 64             
3803:239 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
3803:240 | DONE wsp | na 16 16 |        |             |
3803:241 | DONE lbl | na 16 16 | 006cac |             | nt_base                              
3803:242 | DONE dir | na 16 16 | 006cac | (2 bytes)   |         .byte 4, { NC }              
3803:242 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:243 | DONE dir | na 16 16 | 006cae | (6 bytes)   |         .word nt_pad, xt_base, 006402 
3803:243 | DONE dir | na 16 16 |        |             |                 a1 6c fb 63 02 64        --  . l . c . d
3803:244 | DONE dir | na 16 16 | 006cb4 | (4 bytes)   |         .byte 62, 61, 73, 65         
3803:244 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
3803:245 | DONE wsp | na 16 16 |        |             |
3803:246 | DONE lbl | na 16 16 | 006cb8 |             | nt_evaluate                          
3803:247 | DONE dir | na 16 16 | 006cb8 | (2 bytes)   |         .byte 8, { NC }              
3803:247 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3803:248 | DONE dir | na 16 16 | 006cba | (6 bytes)   |         .word nt_base, xt_evaluate, 006627 
3803:248 | DONE dir | na 16 16 |        |             |                 ac 6c f9 65 27 66        --  . l . e ' f
3803:249 | DONE dir | na 16 16 | 006cc0 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
3803:249 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
3803:249 | DONE dir | na 16 16 |        |             |                                          -- 
3803:250 | DONE wsp | na 16 16 |        |             |
3803:251 | DONE lbl | na 16 16 | 006cc8 |             | nt_cells                             
3803:252 | DONE dir | na 16 16 | 006cc8 | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
3803:252 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3803:253 | DONE dir | na 16 16 | 006cca | (6 bytes)   |         .word nt_evaluate, xt_two-star, 0062f9 
3803:253 | DONE dir | na 16 16 |        |             |                 b8 6c f6 62 f9 62        --  . l . b . b
3803:254 | DONE dir | na 16 16 | 006cd0 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
3803:254 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
3803:255 | DONE wsp | na 16 16 |        |             |
3803:256 | DONE lbl | na 16 16 | 006cd5 |             | nt_dotquote                          
3803:257 | DONE dir | na 16 16 | 006cd5 | (2 bytes)   |         .byte 2, { CO + NC + IM }    
3803:257 | DONE dir | na 16 16 |        |             |                 02 07                    --  . .
3803:258 | DONE dir | na 16 16 | 006cd7 | (6 bytes)   |         .word nt_cells, xt_dotquote, 00616f 
3803:258 | DONE dir | na 16 16 |        |             |                 c8 6c 5b 61 6f 61        --  . l [ a o a
3803:259 | DONE dir | na 16 16 | 006cdd | (2 bytes)   |         .byte 2e, &34                
3803:259 | DONE dir | na 16 16 |        |             |                 2e 22                    --  . "
3803:260 | DONE wsp | na 16 16 |        |             |
3803:261 | DONE lbl | na 16 16 | 006cdf |             | nt_squote                            
3803:262 | DONE dir | na 16 16 | 006cdf | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
3803:262 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
3803:263 | DONE dir | na 16 16 | 006ce1 | (6 bytes)   |         .word nt_dotquote, xt_squote, 0068ea 
3803:263 | DONE dir | na 16 16 |        |             |                 d5 6c d9 68 ea 68        --  . l . h . h
3803:264 | DONE dir | na 16 16 | 006ce7 | (2 bytes)   |         .byte 73, &34                
3803:264 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
3803:265 | DONE wsp | na 16 16 |        |             |
3803:266 | DONE lbl | na 16 16 | 006ce9 |             | nt_sliteral                          
3803:267 | DONE dir | na 16 16 | 006ce9 | (2 bytes)   |         .byte 8, { IM + CO }         
3803:267 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
3803:268 | DONE dir | na 16 16 | 006ceb | (6 bytes)   |         .word nt_squote, xt_sliteral, 006953 
3803:268 | DONE dir | na 16 16 |        |             |                 df 6c 09 69 53 69        --  . l 	 i S i
3803:269 | DONE dir | na 16 16 | 006cf1 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
3803:269 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
3803:269 | DONE dir | na 16 16 |        |             |                                          -- 
3803:270 | DONE wsp | na 16 16 |        |             |
3803:271 | DONE lbl | na 16 16 | 006cf9 |             | nt_brackettick                       
3803:272 | DONE dir | na 16 16 | 006cf9 | (2 bytes)   |         .byte 3, { IM + CO }         
3803:272 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
3803:273 | DONE dir | na 16 16 | 006cfb | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 00624f 
3803:273 | DONE dir | na 16 16 |        |             |                 e9 6c 49 62 4f 62        --  . l I b O b
3803:274 | DONE dir | na 16 16 | 006d01 | (3 bytes)   |         .byte 5b, 27, 5d             
3803:274 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
3803:275 | DONE wsp | na 16 16 |        |             |
3803:276 | DONE lbl | na 16 16 | 006d04 |             | nt_bracketchar                       
3803:277 | DONE dir | na 16 16 | 006d04 | (2 bytes)   |         .byte 6, { IM + CO }         
3803:277 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
3803:278 | DONE dir | na 16 16 | 006d06 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 00625e 
3803:278 | DONE dir | na 16 16 |        |             |                 f9 6c 58 62 5e 62        --  . l X b ^ b
3803:279 | DONE dir | na 16 16 | 006d0c | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
3803:279 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
3803:280 | DONE wsp | na 16 16 |        |             |
3803:281 | DONE lbl | na 16 16 | 006d12 |             | nt_literal                           
3803:282 | DONE dir | na 16 16 | 006d12 | (2 bytes)   |         .byte 7, { IM + CO }         
3803:282 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
3803:283 | DONE dir | na 16 16 | 006d14 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 0066c8 
3803:283 | DONE dir | na 16 16 |        |             |                 04 6d b7 66 c8 66        --  . m . f . f
3803:284 | DONE dir | na 16 16 | 006d1a | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
3803:284 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
3803:285 | DONE wsp | na 16 16 |        |             |
3803:286 | DONE lbl | na 16 16 | 006d21 |             | nt_compile-only                      
3803:287 | DONE dir | na 16 16 | 006d21 | (2 bytes)   |         .byte 0c, { NC }             
3803:287 | DONE dir | na 16 16 |        |             |                 0c 01                    --   .
3803:288 | DONE dir | na 16 16 | 006d23 | (6 bytes)   |         .word nt_literal, xt_compile-only, 0064b9 
3803:288 | DONE dir | na 16 16 |        |             |                 12 6d b1 64 b9 64        --  . m . d . d
3803:289 | DONE dir | na 16 16 | 006d29 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
3803:289 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
3803:289 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
3803:290 | DONE wsp | na 16 16 |        |             |
3803:291 | DONE lbl | na 16 16 | 006d35 |             | nt_immediate                         
3803:292 | DONE dir | na 16 16 | 006d35 | (2 bytes)   |         .byte 9, { NC }              
3803:292 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
3803:293 | DONE dir | na 16 16 | 006d37 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 006695 
3803:293 | DONE dir | na 16 16 |        |             |                 21 6d 8d 66 95 66        --  ! m . f . f
3803:294 | DONE dir | na 16 16 | 006d3d | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
3803:294 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
3803:294 | DONE dir | na 16 16 |        |             |                 65                       --  e
3803:295 | DONE wsp | na 16 16 |        |             |
3803:296 | DONE lbl | na 16 16 | 006d46 |             | nt_postpone                          
3803:297 | DONE dir | na 16 16 | 006d46 | (2 bytes)   |         .byte 8, { IM + CO }         
3803:297 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
3803:298 | DONE dir | na 16 16 | 006d48 | (6 bytes)   |         .word nt_immediate, xt_postpone, 00688c 
3803:298 | DONE dir | na 16 16 |        |             |                 35 6d 57 68 8c 68        --  5 m W h . h
3803:299 | DONE dir | na 16 16 | 006d4e | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
3803:299 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3803:299 | DONE dir | na 16 16 |        |             |                                          -- 
3803:300 | DONE wsp | na 16 16 |        |             |
3803:301 | DONE lbl | na 16 16 | 006d56 |             | nt_rightbracket                      
3803:302 | DONE dir | na 16 16 | 006d56 | (2 bytes)   |         .byte 1, { NC }              
3803:302 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:303 | DONE dir | na 16 16 | 006d58 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 006257 
3803:303 | DONE dir | na 16 16 |        |             |                 46 6d 52 62 57 62        --  F m R b W b
3803:304 | DONE dir | na 16 16 | 006d5e | (1 bytes)   |         .byte 5d                     
3803:304 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
3803:305 | DONE wsp | na 16 16 |        |             |
3803:306 | DONE lbl | na 16 16 | 006d5f |             | nt_leftbracket                       
3803:307 | DONE dir | na 16 16 | 006d5f | (2 bytes)   |         .byte 1, { IM + CO }         
3803:307 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
3803:308 | DONE dir | na 16 16 | 006d61 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 006251 
3803:308 | DONE dir | na 16 16 |        |             |                 56 6d 4f 62 51 62        --  V m O b Q b
3803:309 | DONE dir | na 16 16 | 006d67 | (1 bytes)   |         .byte 5b                     
3803:309 | DONE dir | na 16 16 |        |             |                 5b                       --  [
3803:310 | DONE wsp | na 16 16 |        |             |
3803:311 | DONE lbl | na 16 16 | 006d68 |             | nt_zbranch                           
3803:312 | DONE dir | na 16 16 | 006d68 | (2 bytes)   |         .byte 7, { IM + CO }         
3803:312 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
3803:313 | DONE dir | na 16 16 | 006d6a | (6 bytes)   |         .word nt_leftbracket, xt_zbranch, 0062c9 
3803:313 | DONE dir | na 16 16 |        |             |                 5f 6d c3 62 c9 62        --  _ m . b . b
3803:314 | DONE dir | na 16 16 | 006d70 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
3803:314 | DONE dir | na 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
3803:315 | DONE wsp | na 16 16 |        |             |
3803:316 | DONE lbl | na 16 16 | 006d77 |             | nt_branch                            
3803:317 | DONE dir | na 16 16 | 006d77 | (2 bytes)   |         .byte 6, { IM + CO }         
3803:317 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
3803:318 | DONE dir | na 16 16 | 006d79 | (6 bytes)   |         .word nt_zbranch, xt_branch, 00641f 
3803:318 | DONE dir | na 16 16 |        |             |                 68 6d 19 64 1f 64        --  h m . d . d
3803:319 | DONE dir | na 16 16 | 006d7f | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
3803:319 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
3803:320 | DONE wsp | na 16 16 |        |             |
3803:321 | DONE lbl | na 16 16 | 006d85 |             | nt_again                             
3803:322 | DONE dir | na 16 16 | 006d85 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
3803:322 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
3803:323 | DONE dir | na 16 16 | 006d87 | (6 bytes)   |         .word nt_branch, xt_again, 0063ca 
3803:323 | DONE dir | na 16 16 |        |             |                 77 6d b5 63 ca 63        --  w m . c . c
3803:324 | DONE dir | na 16 16 | 006d8d | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
3803:324 | DONE dir | na 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
3803:325 | DONE wsp | na 16 16 |        |             |
3803:326 | DONE lbl | na 16 16 | 006d92 |             | nt_begin                             
3803:327 | DONE dir | na 16 16 | 006d92 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
3803:327 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
3803:328 | DONE dir | na 16 16 | 006d94 | (6 bytes)   |         .word nt_again, xt_begin, 006410 
3803:328 | DONE dir | na 16 16 |        |             |                 85 6d 0a 64 10 64        --  . m 
 d . d
3803:329 | DONE dir | na 16 16 | 006d9a | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
3803:329 | DONE dir | na 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
3803:330 | DONE wsp | na 16 16 |        |             |
3803:331 | DONE lbl | na 16 16 | 006d9f |             | nt_compilecomma                      
3803:332 | DONE dir | na 16 16 | 006d9f | (2 bytes)   |         .byte 08, { CO }             
3803:332 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
3803:333 | DONE dir | na 16 16 | 006da1 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 0064cc 
3803:333 | DONE dir | na 16 16 |        |             |                 92 6d ba 64 cc 64        --  . m . d . d
3803:334 | DONE dir | na 16 16 | 006da7 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
3803:334 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
3803:334 | DONE dir | na 16 16 |        |             |                                          -- 
3803:335 | DONE wsp | na 16 16 |        |             |
3803:336 | DONE lbl | na 16 16 | 006daf |             | nt_semicolon                         
3803:337 | DONE dir | na 16 16 | 006daf | (2 bytes)   |         .byte 1, { CO + IM }         
3803:337 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
3803:338 | DONE dir | na 16 16 | 006db1 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 0061fd 
3803:338 | DONE dir | na 16 16 |        |             |                 9f 6d e5 61 fd 61        --  . m . a . a
3803:339 | DONE dir | na 16 16 | 006db7 | (1 bytes)   |         .byte 3b                     
3803:339 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
3803:340 | DONE wsp | na 16 16 |        |             |
3803:341 | DONE lbl | na 16 16 | 006db8 |             | nt_colon                             
3803:342 | DONE dir | na 16 16 | 006db8 | (2 bytes)   |         .byte 1, { NC }              
3803:342 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:343 | DONE dir | na 16 16 | 006dba | (6 bytes)   |         .word nt_semicolon, xt_colon, 0061e4 
3803:343 | DONE dir | na 16 16 |        |             |                 af 6d c3 61 e4 61        --  . m . a . a
3803:344 | DONE dir | na 16 16 | 006dc0 | (1 bytes)   |         .byte 3a                     
3803:344 | DONE dir | na 16 16 |        |             |                 3a                       --  :
3803:345 | DONE wsp | na 16 16 |        |             |
3803:346 | DONE lbl | na 16 16 | 006dc1 |             | nt_allot                             
3803:347 | DONE dir | na 16 16 | 006dc1 | (2 bytes)   |         .byte 5, { NC }              
3803:347 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3803:348 | DONE dir | na 16 16 | 006dc3 | (6 bytes)   |         .word nt_colon, xt_allot, 0063f3 
3803:348 | DONE dir | na 16 16 |        |             |                 b8 6d cb 63 f3 63        --  . m . c . c
3803:349 | DONE dir | na 16 16 | 006dc9 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
3803:349 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
3803:350 | DONE wsp | na 16 16 |        |             |
3803:351 | DONE lbl | na 16 16 | 006dce |             | nt_does                              
3803:352 | DONE dir | na 16 16 | 006dce | (2 bytes)   |         .byte 5, { IM + CO }         
3803:352 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
3803:353 | DONE dir | na 16 16 | 006dd0 | (6 bytes)   |         .word nt_allot, xt_does, 0065b1 
3803:353 | DONE dir | na 16 16 |        |             |                 c1 6d a5 65 b1 65        --  . m . e . e
3803:354 | DONE dir | na 16 16 | 006dd6 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
3803:354 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
3803:355 | DONE wsp | na 16 16 |        |             |
3803:356 | DONE lbl | na 16 16 | 006ddb |             | nt_create                            
3803:357 | DONE dir | na 16 16 | 006ddb | (2 bytes)   |         .byte 6, { NC }              
3803:357 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3803:358 | DONE dir | na 16 16 | 006ddd | (6 bytes)   |         .word nt_does, xt_create, 00656f 
3803:358 | DONE dir | na 16 16 |        |             |                 ce 6d fd 64 6f 65        --  . m . d o e
3803:359 | DONE dir | na 16 16 | 006de3 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
3803:359 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
3803:360 | DONE wsp | na 16 16 |        |             |
3803:361 | DONE lbl | na 16 16 | 006de9 |             | nt_name-string                       
3803:362 | DONE dir | na 16 16 | 006de9 | (2 bytes)   |         .byte 0b, { NC }             
3803:362 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
3803:363 | DONE dir | na 16 16 | 006deb | (6 bytes)   |         .word nt_create, xt_name-string, 006735 
3803:363 | DONE dir | na 16 16 |        |             |                 db 6d 25 67 35 67        --  . m % g 5 g
3803:364 | DONE dir | na 16 16 | 006df1 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
3803:364 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
3803:364 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
3803:365 | DONE wsp | na 16 16 |        |             |
3803:366 | DONE lbl | na 16 16 | 006dfc |             | nt_2dup                              
3803:367 | DONE dir | na 16 16 | 006dfc | (2 bytes)   |         .byte 4, { NC }              
3803:367 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:368 | DONE dir | na 16 16 | 006dfe | (6 bytes)   |         .word nt_name-string, xt_2dup, 00630b 
3803:368 | DONE dir | na 16 16 |        |             |                 e9 6d 01 63 0b 63        --  . m . c  c
3803:369 | DONE dir | na 16 16 | 006e04 | (4 bytes)   |         .byte 32, 64, 75, 70         
3803:369 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
3803:370 | DONE wsp | na 16 16 |        |             |
3803:371 | DONE lbl | na 16 16 | 006e08 |             | nt_abs                               
3803:372 | DONE dir | na 16 16 | 006e08 | (2 bytes)   |         .byte 3, { NC }              
3803:372 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:373 | DONE dir | na 16 16 | 006e0a | (6 bytes)   |         .word nt_2dup, xt_abs, 006330 
3803:373 | DONE dir | na 16 16 |        |             |                 fc 6d 28 63 30 63        --  . m ( c 0 c
3803:374 | DONE dir | na 16 16 | 006e10 | (3 bytes)   |         .byte 61, 62, 73             
3803:374 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
3803:375 | DONE wsp | na 16 16 |        |             |
3803:376 | DONE lbl | na 16 16 | 006e13 |             | nt_state                             
3803:377 | DONE dir | na 16 16 | 006e13 | (2 bytes)   |         .byte 5, { NC }              
3803:377 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3803:378 | DONE dir | na 16 16 | 006e15 | (6 bytes)   |         .word nt_abs, xt_state, 0069a1 
3803:378 | DONE dir | na 16 16 |        |             |                 08 6e 9a 69 a1 69        --  . n . i . i
3803:379 | DONE dir | na 16 16 | 006e1b | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
3803:379 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
3803:380 | DONE wsp | na 16 16 |        |             |
3803:381 | DONE lbl | na 16 16 | 006e20 |             | nt_to-in                             
3803:382 | DONE dir | na 16 16 | 006e20 | (2 bytes)   |         .byte 3, { NC }              
3803:382 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:383 | DONE dir | na 16 16 | 006e22 | (6 bytes)   |         .word nt_state, xt_to-in, 006124 
3803:383 | DONE dir | na 16 16 |        |             |                 13 6e 1d 61 24 61        --  . n . a $ a
3803:384 | DONE dir | na 16 16 | 006e28 | (3 bytes)   |         .byte 3e, 69, 6e             
3803:384 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
3803:385 | DONE wsp | na 16 16 |        |             |
3803:386 | DONE lbl | na 16 16 | 006e2b |             | nt_source                            
3803:387 | DONE dir | na 16 16 | 006e2b | (2 bytes)   |         .byte 6, { NC }              
3803:387 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3803:388 | DONE dir | na 16 16 | 006e2d | (6 bytes)   |         .word nt_to-in, xt_source, 006976 
3803:388 | DONE dir | na 16 16 |        |             |                 20 6e 6a 69 76 69        --    n j i v i
3803:389 | DONE dir | na 16 16 | 006e33 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
3803:389 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
3803:390 | DONE wsp | na 16 16 |        |             |
3803:391 | DONE lbl | na 16 16 | 006e39 |             | nt_depth                             
3803:392 | DONE dir | na 16 16 | 006e39 | (2 bytes)   |         .byte 5, { NC }              
3803:392 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3803:393 | DONE dir | na 16 16 | 006e3b | (6 bytes)   |         .word nt_source, xt_depth, 006590 
3803:393 | DONE dir | na 16 16 |        |             |                 2b 6e 82 65 90 65        --  + n . e . e
3803:394 | DONE dir | na 16 16 | 006e41 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
3803:394 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
3803:395 | DONE wsp | na 16 16 |        |             |
3803:396 | DONE lbl | na 16 16 | 006e46 |             | nt_constant                          
3803:397 | DONE dir | na 16 16 | 006e46 | (2 bytes)   |         .byte 8, { NC }              
3803:397 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3803:398 | DONE dir | na 16 16 | 006e48 | (6 bytes)   |         .word nt_depth, xt_constant, 0064e6 
3803:398 | DONE dir | na 16 16 |        |             |                 39 6e cd 64 e6 64        --  9 n . d . d
3803:399 | DONE dir | na 16 16 | 006e4e | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
3803:399 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
3803:399 | DONE dir | na 16 16 |        |             |                                          -- 
3803:400 | DONE wsp | na 16 16 |        |             |
3803:401 | DONE lbl | na 16 16 | 006e56 |             | nt_variable                          
3803:402 | DONE dir | na 16 16 | 006e56 | (2 bytes)   |         .byte 8, { NC }              
3803:402 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3803:403 | DONE dir | na 16 16 | 006e58 | (6 bytes)   |         .word nt_constant, xt_variable, 006abd 
3803:403 | DONE dir | na 16 16 |        |             |                 46 6e b1 6a bd 6a        --  F n . j . j
3803:404 | DONE dir | na 16 16 | 006e5e | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
3803:404 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
3803:404 | DONE dir | na 16 16 |        |             |                                          -- 
3803:405 | DONE wsp | na 16 16 |        |             |
3803:406 | DONE lbl | na 16 16 | 006e66 |             | nt_tick                              
3803:407 | DONE dir | na 16 16 | 006e66 | (2 bytes)   |         .byte 1, { NC }              
3803:407 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:408 | DONE dir | na 16 16 | 006e68 | (6 bytes)   |         .word nt_variable, xt_tick, 006327 
3803:408 | DONE dir | na 16 16 |        |             |                 56 6e 0c 63 27 63        --  V n  c ' c
3803:409 | DONE dir | na 16 16 | 006e6e | (1 bytes)   |         .byte 27                     hex for "'"
3803:409 | DONE dir | na 16 16 |        |             |                 27                       --  '
3803:410 | DONE wsp | na 16 16 |        |             |
3803:411 | DONE lbl | na 16 16 | 006e6f |             | nt_min                               
3803:412 | DONE dir | na 16 16 | 006e6f | (2 bytes)   |         .byte 3, { NC }              
3803:412 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:413 | DONE dir | na 16 16 | 006e71 | (6 bytes)   |         .word nt_tick, xt_min, 00671b 
3803:413 | DONE dir | na 16 16 |        |             |                 66 6e 09 67 1b 67        --  f n 	 g . g
3803:414 | DONE dir | na 16 16 | 006e77 | (3 bytes)   |         .byte 6d, 69, 6e             
3803:414 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
3803:415 | DONE wsp | na 16 16 |        |             |
3803:416 | DONE lbl | na 16 16 | 006e7a |             | nt_max                               
3803:417 | DONE dir | na 16 16 | 006e7a | (2 bytes)   |         .byte 3, { NC }              
3803:417 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:418 | DONE dir | na 16 16 | 006e7c | (6 bytes)   |         .word nt_min, xt_max, 006708 
3803:418 | DONE dir | na 16 16 |        |             |                 6f 6e f6 66 08 67        --  o n . f . g
3803:419 | DONE dir | na 16 16 | 006e82 | (3 bytes)   |         .byte 6d, 61, 78             
3803:419 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
3803:420 | DONE wsp | na 16 16 |        |             |
3803:421 | DONE lbl | na 16 16 | 006e85 |             | nt_negate                            
3803:422 | DONE dir | na 16 16 | 006e85 | (2 bytes)   |         .byte 6, { NC }              
3803:422 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3803:423 | DONE dir | na 16 16 | 006e87 | (6 bytes)   |         .word nt_max, xt_negate, 00673c 
3803:423 | DONE dir | na 16 16 |        |             |                 7a 6e 36 67 3c 67        --  z n 6 g < g
3803:424 | DONE dir | na 16 16 | 006e8d | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
3803:424 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
3803:425 | DONE wsp | na 16 16 |        |             |
3803:426 | DONE lbl | na 16 16 | 006e93 |             | nt_invert                            
3803:427 | DONE dir | na 16 16 | 006e93 | (2 bytes)   |         .byte 6, { NC }              
3803:427 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3803:428 | DONE dir | na 16 16 | 006e95 | (6 bytes)   |         .word nt_negate, xt_invert, 00669b 
3803:428 | DONE dir | na 16 16 |        |             |                 85 6e 96 66 9b 66        --  . n . f . f
3803:429 | DONE dir | na 16 16 | 006e9b | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
3803:429 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
3803:430 | DONE wsp | na 16 16 |        |             |
3803:431 | DONE lbl | na 16 16 | 006ea1 |             | nt_char                              
3803:432 | DONE dir | na 16 16 | 006ea1 | (2 bytes)   |         .byte 4, { NC }              
3803:432 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:433 | DONE dir | na 16 16 | 006ea3 | (6 bytes)   |         .word nt_invert, xt_char, 006474 
3803:433 | DONE dir | na 16 16 |        |             |                 93 6e 5d 64 74 64        --  . n ] d t d
3803:434 | DONE dir | na 16 16 | 006ea9 | (4 bytes)   |         .byte 63, 68, 61, 72         
3803:434 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
3803:435 | DONE wsp | na 16 16 |        |             |
3803:436 | DONE lbl | na 16 16 | 006ead |             | nt_xor                               
3803:437 | DONE dir | na 16 16 | 006ead | (2 bytes)   |         .byte 3, { NC }              
3803:437 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:438 | DONE dir | na 16 16 | 006eaf | (6 bytes)   |         .word nt_char, xt_xor, 006aec 
3803:438 | DONE dir | na 16 16 |        |             |                 a1 6e e6 6a ec 6a        --  . n . j . j
3803:439 | DONE dir | na 16 16 | 006eb5 | (3 bytes)   |         .byte 78, 6f, 72             
3803:439 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
3803:440 | DONE wsp | na 16 16 |        |             |
3803:441 | DONE lbl | na 16 16 | 006eb8 |             | nt_or                                
3803:442 | DONE dir | na 16 16 | 006eb8 | (2 bytes)   |         .byte 2, { NC }              
3803:442 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:443 | DONE dir | na 16 16 | 006eba | (6 bytes)   |         .word nt_xor, xt_or, 0067c1  
3803:443 | DONE dir | na 16 16 |        |             |                 ad 6e bb 67 c1 67        --  . n . g . g
3803:444 | DONE dir | na 16 16 | 006ec0 | (2 bytes)   |         .byte 6f, 72                 
3803:444 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
3803:445 | DONE wsp | na 16 16 |        |             |
3803:446 | DONE lbl | na 16 16 | 006ec2 |             | nt_and                               
3803:447 | DONE dir | na 16 16 | 006ec2 | (2 bytes)   |         .byte 3, { NC }              
3803:447 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:448 | DONE dir | na 16 16 | 006ec4 | (6 bytes)   |         .word nt_or, xt_and, 0063fa  
3803:448 | DONE dir | na 16 16 |        |             |                 b8 6e f4 63 fa 63        --  . n . c . c
3803:449 | DONE dir | na 16 16 | 006eca | (3 bytes)   |         .byte 61, 6e, 64             
3803:449 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
3803:450 | DONE wsp | na 16 16 |        |             |
3803:451 | DONE lbl | na 16 16 | 006ecd |             | nt_plusstore                         
3803:452 | DONE dir | na 16 16 | 006ecd | (2 bytes)   |         .byte 2, { NC }              
3803:452 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:453 | DONE dir | na 16 16 | 006ecf | (6 bytes)   |         .word nt_and, xt_plusstore, 006856 
3803:453 | DONE dir | na 16 16 |        |             |                 c2 6e 47 68 56 68        --  . n G h V h
3803:454 | DONE dir | na 16 16 | 006ed5 | (2 bytes)   |         .byte 2b, 21                 
3803:454 | DONE dir | na 16 16 |        |             |                 2b 21                    --  + !
3803:455 | DONE wsp | na 16 16 |        |             |
3803:456 | DONE lbl | na 16 16 | 006ed7 |             | nt_c-comma                           
3803:457 | DONE dir | na 16 16 | 006ed7 | (2 bytes)   |         .byte 2, { NC }              
3803:457 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:458 | DONE dir | na 16 16 | 006ed9 | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 006440 
3803:458 | DONE dir | na 16 16 |        |             |                 cd 6e 33 64 40 64        --  . n 3 d @ d
3803:459 | DONE dir | na 16 16 | 006edf | (2 bytes)   |         .byte 63, 2c                 
3803:459 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
3803:460 | DONE wsp | na 16 16 |        |             |
3803:461 | DONE lbl | na 16 16 | 006ee1 |             | nt_c-fetch                           
3803:462 | DONE dir | na 16 16 | 006ee1 | (2 bytes)   |         .byte 2, { NC }              
3803:462 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:463 | DONE dir | na 16 16 | 006ee3 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 00644c 
3803:463 | DONE dir | na 16 16 |        |             |                 d7 6e 41 64 4c 64        --  . n A d L d
3803:464 | DONE dir | na 16 16 | 006ee9 | (2 bytes)   |         .byte 63, 40                 
3803:464 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
3803:465 | DONE wsp | na 16 16 |        |             |
3803:466 | DONE lbl | na 16 16 | 006eeb |             | nt_c-store                           
3803:467 | DONE dir | na 16 16 | 006eeb | (2 bytes)   |         .byte 2, { NC }              
3803:467 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:468 | DONE dir | na 16 16 | 006eed | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 00645c 
3803:468 | DONE dir | na 16 16 |        |             |                 e1 6e 4d 64 5c 64        --  . n M d \ d
3803:469 | DONE dir | na 16 16 | 006ef3 | (2 bytes)   |         .byte 63, 21                 
3803:469 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
3803:470 | DONE wsp | na 16 16 |        |             |
3803:471 | DONE lbl | na 16 16 | 006ef5 |             | nt_two-star                          
3803:472 | DONE dir | na 16 16 | 006ef5 | (2 bytes)   |         .byte 2, { NC }              
3803:472 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:473 | DONE dir | na 16 16 | 006ef7 | (6 bytes)   |         .word nt_c-store, xt_two-star, 0062f9 
3803:473 | DONE dir | na 16 16 |        |             |                 eb 6e f6 62 f9 62        --  . n . b . b
3803:474 | DONE dir | na 16 16 | 006efd | (2 bytes)   |         .byte 32, 2a                 
3803:474 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
3803:475 | DONE wsp | na 16 16 |        |             |
3803:476 | DONE lbl | na 16 16 | 006eff |             | nt_minus                             
3803:477 | DONE dir | na 16 16 | 006eff | (2 bytes)   |         .byte 1, { NC }              
3803:477 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:478 | DONE dir | na 16 16 | 006f01 | (6 bytes)   |         .word nt_two-star, xt_minus, 006276 
3803:478 | DONE dir | na 16 16 |        |             |                 f5 6e 6c 62 76 62        --  . n l b v b
3803:479 | DONE dir | na 16 16 | 006f07 | (1 bytes)   |         .byte 2d                     
3803:479 | DONE dir | na 16 16 |        |             |                 2d                       --  -
3803:480 | DONE wsp | na 16 16 |        |             |
3803:481 | DONE lbl | na 16 16 | 006f08 |             | nt_plus                              
3803:482 | DONE dir | na 16 16 | 006f08 | (2 bytes)   |         .byte 1, { NC }              
3803:482 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:483 | DONE dir | na 16 16 | 006f0a | (6 bytes)   |         .word nt_minus, xt_plus, 00626b 
3803:483 | DONE dir | na 16 16 |        |             |                 ff 6e 64 62 6b 62        --  . n d b k b
3803:484 | DONE dir | na 16 16 | 006f10 | (1 bytes)   |         .byte 2b                     
3803:484 | DONE dir | na 16 16 |        |             |                 2b                       --  +
3803:485 | DONE wsp | na 16 16 |        |             |
3803:486 | DONE lbl | na 16 16 | 006f11 |             | nt_one-minus                         
3803:487 | DONE dir | na 16 16 | 006f11 | (2 bytes)   |         .byte 2, { NC }              
3803:487 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:488 | DONE dir | na 16 16 | 006f13 | (6 bytes)   |         .word nt_plus, xt_one-minus, 0062eb 
3803:488 | DONE dir | na 16 16 |        |             |                 08 6f ea 62 eb 62        --  . o . b . b
3803:489 | DONE dir | na 16 16 | 006f19 | (2 bytes)   |         .byte 31, 2d                 
3803:489 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
3803:490 | DONE wsp | na 16 16 |        |             |
3803:491 | DONE lbl | na 16 16 | 006f1b |             | nt_one-plus                          
3803:492 | DONE dir | na 16 16 | 006f1b | (2 bytes)   |         .byte 2, { NC }              
3803:492 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:493 | DONE dir | na 16 16 | 006f1d | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 0062ed 
3803:493 | DONE dir | na 16 16 |        |             |                 11 6f ec 62 ed 62        --  . o . b . b
3803:494 | DONE dir | na 16 16 | 006f23 | (2 bytes)   |         .byte 31, 2b                 
3803:494 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
3803:495 | DONE wsp | na 16 16 |        |             |
3803:496 | DONE lbl | na 16 16 | 006f25 |             | nt_zero-notequal                     
3803:497 | DONE dir | na 16 16 | 006f25 | (2 bytes)   |         .byte 3, { NC }              
3803:497 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:498 | DONE dir | na 16 16 | 006f27 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 0062b7 
3803:498 | DONE dir | na 16 16 |        |             |                 1b 6f ac 62 b7 62        --  . o . b . b
3803:499 | DONE dir | na 16 16 | 006f2d | (3 bytes)   |         .byte 30, 3c, 3e             
3803:499 | DONE dir | na 16 16 |        |             |                 30 3c 3e                 --  0 < >
3803:500 | DONE wsp | na 16 16 |        |             |
3803:501 | DONE lbl | na 16 16 | 006f30 |             | nt_zero-more                         
3803:502 | DONE dir | na 16 16 | 006f30 | (2 bytes)   |         .byte 2, { NC }              
3803:502 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:503 | DONE dir | na 16 16 | 006f32 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 0062c2 
3803:503 | DONE dir | na 16 16 |        |             |                 25 6f b8 62 c2 62        --  % o . b . b
3803:504 | DONE dir | na 16 16 | 006f38 | (2 bytes)   |         .byte 30, 3e                 
3803:504 | DONE dir | na 16 16 |        |             |                 30 3e                    --  0 >
3803:505 | DONE wsp | na 16 16 |        |             |
3803:506 | DONE lbl | na 16 16 | 006f3a |             | nt_zero-less                         
3803:507 | DONE dir | na 16 16 | 006f3a | (2 bytes)   |         .byte 2, { NC }              
3803:507 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:508 | DONE dir | na 16 16 | 006f3c | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 0062ab 
3803:508 | DONE dir | na 16 16 |        |             |                 30 6f a0 62 ab 62        --  0 o . b . b
3803:509 | DONE dir | na 16 16 | 006f42 | (2 bytes)   |         .byte 30, 3c                 
3803:509 | DONE dir | na 16 16 |        |             |                 30 3c                    --  0 <
3803:510 | DONE wsp | na 16 16 |        |             |
3803:511 | DONE lbl | na 16 16 | 006f44 |             | nt_greater                           
3803:512 | DONE dir | na 16 16 | 006f44 | (2 bytes)   |         .byte 1, { NC }              
3803:512 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:513 | DONE dir | na 16 16 | 006f46 | (6 bytes)   |         .word nt_zero-less, xt_greater, 00611c 
3803:513 | DONE dir | na 16 16 |        |             |                 3a 6f 09 61 1c 61        --  : o 	 a . a
3803:514 | DONE dir | na 16 16 | 006f4c | (1 bytes)   |         .byte 3e                     
3803:514 | DONE dir | na 16 16 |        |             |                 3e                       --  >
3803:515 | DONE wsp | na 16 16 |        |             |
3803:516 | DONE lbl | na 16 16 | 006f4d |             | nt_less                              
3803:517 | DONE dir | na 16 16 | 006f4d | (2 bytes)   |         .byte 1, { NC }              
3803:517 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:518 | DONE dir | na 16 16 | 006f4f | (6 bytes)   |         .word nt_greater, xt_less, 0060f2 
3803:518 | DONE dir | na 16 16 |        |             |                 44 6f df 60 f2 60        --  D o . ` . `
3803:519 | DONE dir | na 16 16 | 006f55 | (1 bytes)   |         .byte 3c                     
3803:519 | DONE dir | na 16 16 |        |             |                 3c                       --  <
3803:520 | DONE wsp | na 16 16 |        |             |
3803:521 | DONE lbl | na 16 16 | 006f56 |             | nt_zero-equal                        
3803:522 | DONE dir | na 16 16 | 006f56 | (2 bytes)   |         .byte 2, { NC }              
3803:522 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:523 | DONE dir | na 16 16 | 006f58 | (6 bytes)   |         .word nt_less, xt_zero-equal, 00629f 
3803:523 | DONE dir | na 16 16 |        |             |                 4d 6f 94 62 9f 62        --  M o . b . b
3803:524 | DONE dir | na 16 16 | 006f5e | (2 bytes)   |         .byte 30, 3d                 
3803:524 | DONE dir | na 16 16 |        |             |                 30 3d                    --  0 =
3803:525 | DONE wsp | na 16 16 |        |             |
3803:526 | DONE lbl | na 16 16 | 006f60 |             | nt_not-equal                         
3803:527 | DONE dir | na 16 16 | 006f60 | (2 bytes)   |         .byte 2, { NC }              
3803:527 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3803:528 | DONE dir | na 16 16 | 006f62 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 0060fe 
3803:528 | DONE dir | na 16 16 |        |             |                 56 6f f3 60 fe 60        --  V o . ` . `
3803:529 | DONE dir | na 16 16 | 006f68 | (2 bytes)   |         .byte 3c, 3e                 
3803:529 | DONE dir | na 16 16 |        |             |                 3c 3e                    --  < >
3803:530 | DONE wsp | na 16 16 |        |             |
3803:531 | DONE lbl | na 16 16 | 006f6a |             | nt_equal                             
3803:532 | DONE dir | na 16 16 | 006f6a | (2 bytes)   |         .byte 1, { NC }              
3803:532 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:533 | DONE dir | na 16 16 | 006f6c | (6 bytes)   |         .word nt_not-equal, xt_equal, 00628b 
3803:533 | DONE dir | na 16 16 |        |             |                 60 6f 80 62 8b 62        --  ` o . b . b
3803:534 | DONE dir | na 16 16 | 006f72 | (1 bytes)   |         .byte 3d                     
3803:534 | DONE dir | na 16 16 |        |             |                 3d                       --  =
3803:535 | DONE wsp | na 16 16 |        |             |
3803:536 | DONE lbl | na 16 16 | 006f73 |             | nt_false                             
3803:537 | DONE dir | na 16 16 | 006f73 | (2 bytes)   |         .byte 5, { NC }              
3803:537 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3803:538 | DONE dir | na 16 16 | 006f75 | (6 bytes)   |         .word nt_equal, xt_zero, 006293 
3803:538 | DONE dir | na 16 16 |        |             |                 6a 6f 8c 62 93 62        --  j o . b . b
3803:539 | DONE dir | na 16 16 | 006f7b | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
3803:539 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
3803:540 | DONE wsp | na 16 16 |        |             |
3803:541 | DONE lbl | na 16 16 | 006f80 |             | nt_true                              
3803:542 | DONE dir | na 16 16 | 006f80 | (2 bytes)   |         .byte 4, { NC }              
3803:542 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:543 | DONE dir | na 16 16 | 006f82 | (6 bytes)   |         .word nt_false, xt_true, 0069af 
3803:543 | DONE dir | na 16 16 |        |             |                 73 6f a8 69 af 69        --  s o . i . i
3803:544 | DONE dir | na 16 16 | 006f88 | (4 bytes)   |         .byte 74, 72, 75, 65         
3803:544 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
3803:545 | DONE wsp | na 16 16 |        |             |
3803:546 | DONE lbl | na 16 16 | 006f8c |             | nt_gtnumber                          
3803:547 | DONE dir | na 16 16 | 006f8c | (2 bytes)   |         .byte 7, { NC }              see if actually NC
3803:547 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3803:548 | DONE dir | na 16 16 | 006f8e | (6 bytes)   |         .word nt_true, xt_gtnumber, 006125 
3803:548 | DONE dir | na 16 16 |        |             |                 80 6f 25 61 25 61        --  . o % a % a
3803:549 | DONE dir | na 16 16 | 006f94 | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
3803:549 | DONE dir | na 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
3803:550 | DONE wsp | na 16 16 |        |             |
3803:551 | DONE lbl | na 16 16 | 006f9b |             | nt_number                            
3803:552 | DONE dir | na 16 16 | 006f9b | (2 bytes)   |         .byte 6, { NC }              see if actually NC
3803:552 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3803:553 | DONE dir | na 16 16 | 006f9d | (6 bytes)   |         .word nt_gtnumber, xt_number, 0067ba 
3803:553 | DONE dir | na 16 16 |        |             |                 8c 6f 40 67 ba 67        --  . o @ g . g
3803:554 | DONE dir | na 16 16 | 006fa3 | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
3803:554 | DONE dir | na 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
3803:555 | DONE wsp | na 16 16 |        |             |
3803:556 | DONE lbl | na 16 16 | 006fa9 |             | nt_two                               
3803:557 | DONE dir | na 16 16 | 006fa9 | (2 bytes)   |         .byte 1, { NC }              
3803:557 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:558 | DONE dir | na 16 16 | 006fab | (6 bytes)   |         .word nt_number, xt_two, 0062f5 
3803:558 | DONE dir | na 16 16 |        |             |                 9b 6f ee 62 f5 62        --  . o . b . b
3803:559 | DONE dir | na 16 16 | 006fb1 | (1 bytes)   |         .byte 32                     
3803:559 | DONE dir | na 16 16 |        |             |                 32                       --  2
3803:560 | DONE wsp | na 16 16 |        |             |
3803:561 | DONE lbl | na 16 16 | 006fb2 |             | nt_one                               
3803:562 | DONE dir | na 16 16 | 006fb2 | (2 bytes)   |         .byte 1, { NC }              
3803:562 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:563 | DONE dir | na 16 16 | 006fb4 | (6 bytes)   |         .word nt_two, xt_one, 0062e9 
3803:563 | DONE dir | na 16 16 |        |             |                 a9 6f e2 62 e9 62        --  . o . b . b
3803:564 | DONE dir | na 16 16 | 006fba | (1 bytes)   |         .byte 31                     
3803:564 | DONE dir | na 16 16 |        |             |                 31                       --  1
3803:565 | DONE wsp | na 16 16 |        |             |
3803:566 | DONE lbl | na 16 16 | 006fbb |             | nt_zero                              
3803:567 | DONE dir | na 16 16 | 006fbb | (2 bytes)   |         .byte 1, { NC }              
3803:567 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:568 | DONE dir | na 16 16 | 006fbd | (6 bytes)   |         .word nt_one, xt_zero, 006293 
3803:568 | DONE dir | na 16 16 |        |             |                 b2 6f 8c 62 93 62        --  . o . b . b
3803:569 | DONE dir | na 16 16 | 006fc3 | (1 bytes)   |         .byte 30                     
3803:569 | DONE dir | na 16 16 |        |             |                 30                       --  0
3803:570 | DONE wsp | na 16 16 |        |             |
3803:571 | DONE lbl | na 16 16 | 006fc4 |             | nt_find-name                         
3803:572 | DONE dir | na 16 16 | 006fc4 | (2 bytes)   |         .byte 9, 0                   
3803:572 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
3803:573 | DONE dir | na 16 16 | 006fc6 | (6 bytes)   |         .word nt_zero, xt_find-name, 00668c 
3803:573 | DONE dir | na 16 16 |        |             |                 bb 6f 36 66 8c 66        --  . o 6 f . f
3803:574 | DONE dir | na 16 16 | 006fcc | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
3803:574 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
3803:574 | DONE dir | na 16 16 |        |             |                 65                       --  e
3803:575 | DONE wsp | na 16 16 |        |             |
3803:576 | DONE lbl | na 16 16 | 006fd5 |             | nt_refill                            
3803:577 | DONE dir | na 16 16 | 006fd5 | (2 bytes)   |         .byte 6, 0                   TODO check flags
3803:577 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
3803:578 | DONE dir | na 16 16 | 006fd7 | (6 bytes)   |         .word nt_find-name, xt_refill, 0068cf 
3803:578 | DONE dir | na 16 16 |        |             |                 c4 6f 9d 68 cf 68        --  . o . h . h
3803:579 | DONE dir | na 16 16 | 006fdd | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
3803:579 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
3803:580 | DONE wsp | na 16 16 |        |             |
3803:581 | DONE lbl | na 16 16 | 006fe3 |             | nt_parse-name                        
3803:582 | DONE dir | na 16 16 | 006fe3 | (2 bytes)   |         .byte &10, 0                 
3803:582 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
3803:583 | DONE dir | na 16 16 | 006fe5 | (6 bytes)   |         .word nt_refill, xt_parse-name, 006846 
3803:583 | DONE dir | na 16 16 |        |             |                 d5 6f e2 67 46 68        --  . o . g F h
3803:584 | DONE dir | na 16 16 | 006feb | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
3803:584 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
3803:584 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
3803:585 | DONE wsp | na 16 16 |        |             |
3803:586 | DONE lbl | na 16 16 | 006ff5 |             | nt_source-id                         
3803:587 | DONE dir | na 16 16 | 006ff5 | (2 bytes)   |         .byte 9, { NC }              
3803:587 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
3803:588 | DONE dir | na 16 16 | 006ff7 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 00697d 
3803:588 | DONE dir | na 16 16 |        |             |                 e3 6f 77 69 7d 69        --  . o w i } i
3803:589 | DONE dir | na 16 16 | 006ffd | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
3803:589 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
3803:589 | DONE dir | na 16 16 |        |             |                 64                       --  d
3803:590 | DONE wsp | na 16 16 |        |             |
3803:591 | DONE lbl | na 16 16 | 007006 |             | nt_comma                             
3803:592 | DONE dir | na 16 16 | 007006 | (2 bytes)   |         .byte 1, { NC }              
3803:592 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:593 | DONE dir | na 16 16 | 007008 | (6 bytes)   |         .word nt_source-id, xt_comma, 0061c2 
3803:593 | DONE dir | na 16 16 |        |             |                 f5 6f b7 61 c2 61        --  . o . a . a
3803:594 | DONE dir | na 16 16 | 00700e | (1 bytes)   |         .byte 2c                     
3803:594 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
3803:595 | DONE wsp | na 16 16 |        |             |
3803:596 | DONE lbl | na 16 16 | 00700f |             | nt_accept                            
3803:597 | DONE dir | na 16 16 | 00700f | (2 bytes)   |         .byte 6, 00                  TODO check flags
3803:597 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
3803:598 | DONE dir | na 16 16 | 007011 | (6 bytes)   |         .word nt_comma, xt_accept, 0063b4 
3803:598 | DONE dir | na 16 16 |        |             |                 06 70 31 63 b4 63        --  . p 1 c . c
3803:599 | DONE dir | na 16 16 | 007017 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
3803:599 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
3803:600 | DONE wsp | na 16 16 |        |             |
3803:601 | DONE lbl | na 16 16 | 00701d |             | nt_backslash                         
3803:602 | DONE dir | na 16 16 | 00701d | (2 bytes)   |         .byte 1, { NC }              
3803:602 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:603 | DONE dir | na 16 16 | 00701f | (6 bytes)   |         .word nt_accept, xt_backslash, 006263 
3803:603 | DONE dir | na 16 16 |        |             |                 0f 70 5f 62 63 62        --  . p _ b c b
3803:604 | DONE dir | na 16 16 | 007025 | (1 bytes)   |         .byte 5c                     
3803:604 | DONE dir | na 16 16 |        |             |                 5c                       --  \
3803:605 | DONE wsp | na 16 16 |        |             |
3803:606 | DONE lbl | na 16 16 | 007026 |             | nt_tuck                              
3803:607 | DONE dir | na 16 16 | 007026 | (2 bytes)   |         .byte 4, { NC }              
3803:607 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:608 | DONE dir | na 16 16 | 007028 | (6 bytes)   |         .word nt_backslash, xt_tuck, 0069b8 
3803:608 | DONE dir | na 16 16 |        |             |                 1d 70 b0 69 b8 69        --  . p . i . i
3803:609 | DONE dir | na 16 16 | 00702e | (4 bytes)   |         .byte 74, 75, 63, 6b         
3803:609 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
3803:610 | DONE wsp | na 16 16 |        |             |
3803:611 | DONE lbl | na 16 16 | 007032 |             | nt_nip                               
3803:612 | DONE dir | na 16 16 | 007032 | (2 bytes)   |         .byte 3, { NC }              
3803:612 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:613 | DONE dir | na 16 16 | 007034 | (6 bytes)   |         .word nt_tuck, xt_nip, 00673f 
3803:613 | DONE dir | na 16 16 |        |             |                 26 70 3d 67 3f 67        --  & p = g ? g
3803:614 | DONE dir | na 16 16 | 00703a | (3 bytes)   |         .byte 6e, 69, 70             
3803:614 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
3803:615 | DONE wsp | na 16 16 |        |             |
3803:616 | DONE lbl | na 16 16 | 00703d |             | nt_mrot                              
3803:617 | DONE dir | na 16 16 | 00703d | (2 bytes)   |         .byte 4, { NC }              
3803:617 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:618 | DONE dir | na 16 16 | 00703f | (6 bytes)   |         .word nt_nip, xt_mrot, 00627f 
3803:618 | DONE dir | na 16 16 |        |             |                 32 70 77 62 7f 62        --  2 p w b . b
3803:619 | DONE dir | na 16 16 | 007045 | (4 bytes)   |         .byte 2d, 72, 6f, 74         
3803:619 | DONE dir | na 16 16 |        |             |                 2d 72 6f 74              --  - r o t
3803:620 | DONE wsp | na 16 16 |        |             |
3803:621 | DONE lbl | na 16 16 | 007049 |             | nt_rot                               
3803:622 | DONE dir | na 16 16 | 007049 | (2 bytes)   |         .byte 3, { NC }              
3803:622 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:623 | DONE dir | na 16 16 | 00704b | (6 bytes)   |         .word nt_mrot, xt_rot, 0068d8 
3803:623 | DONE dir | na 16 16 |        |             |                 3d 70 d0 68 d8 68        --  = p . h . h
3803:624 | DONE dir | na 16 16 | 007051 | (3 bytes)   |         .byte 72, 6f, 74             
3803:624 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
3803:625 | DONE wsp | na 16 16 |        |             |
3803:626 | DONE lbl | na 16 16 | 007054 |             | nt_execute                           
3803:627 | DONE dir | na 16 16 | 007054 | (2 bytes)   |         .byte 7, { NC }              
3803:627 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3803:628 | DONE dir | na 16 16 | 007056 | (6 bytes)   |         .word nt_rot, xt_execute, 006635 
3803:628 | DONE dir | na 16 16 |        |             |                 49 70 2b 66 35 66        --  I p + f 5 f
3803:629 | DONE dir | na 16 16 | 00705c | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
3803:629 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
3803:630 | DONE wsp | na 16 16 |        |             |
3803:631 | DONE lbl | na 16 16 | 007063 |             | nt_here                              
3803:632 | DONE dir | na 16 16 | 007063 | (2 bytes)   |         .byte 4, { NC }              
3803:632 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:633 | DONE dir | na 16 16 | 007065 | (6 bytes)   |         .word nt_execute, xt_here, 0066a2 
3803:633 | DONE dir | na 16 16 |        |             |                 54 70 9c 66 a2 66        --  T p . f . f
3803:634 | DONE dir | na 16 16 | 00706b | (4 bytes)   |         .byte 68, 65, 72, 65         
3803:634 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
3803:635 | DONE wsp | na 16 16 |        |             |
3803:636 | DONE lbl | na 16 16 | 00706f |             | nt_2drop                             
3803:637 | DONE dir | na 16 16 | 00706f | (2 bytes)   |         .byte 5, { NC }              
3803:637 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3803:638 | DONE dir | na 16 16 | 007071 | (6 bytes)   |         .word nt_here, xt_2drop, 006300 
3803:638 | DONE dir | na 16 16 |        |             |                 63 70 fa 62 00 63        --  c p . b . c
3803:639 | DONE dir | na 16 16 | 007077 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
3803:639 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
3803:640 | DONE wsp | na 16 16 |        |             |
3803:641 | DONE lbl | na 16 16 | 00707c |             | nt_rfetch                            
3803:642 | DONE dir | na 16 16 | 00707c | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
3803:642 | DONE dir | na 16 16 |        |             |                 02 00                    --  . .
3803:643 | DONE dir | na 16 16 | 00707e | (6 bytes)   |         .word nt_2drop, xt_rfetch, 006894 
3803:643 | DONE dir | na 16 16 |        |             |                 6f 70 8c 68 94 68        --  o p . h . h
3803:644 | DONE dir | na 16 16 | 007084 | (2 bytes)   |         .byte 72, 40                 
3803:644 | DONE dir | na 16 16 |        |             |                 72 40                    --  r @
3803:645 | DONE wsp | na 16 16 |        |             |
3803:646 | DONE lbl | na 16 16 | 007086 |             | nt_fromr                             
3803:647 | DONE dir | na 16 16 | 007086 | (2 bytes)   |         .byte 2, { CO }              
3803:647 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
3803:648 | DONE dir | na 16 16 | 007088 | (6 bytes)   |         .word nt_rfetch, xt_fromr, 00689c 
3803:648 | DONE dir | na 16 16 |        |             |                 7c 70 95 68 9c 68        --  | p . h . h
3803:649 | DONE dir | na 16 16 | 00708e | (2 bytes)   |         .byte 72, 3e                 
3803:649 | DONE dir | na 16 16 |        |             |                 72 3e                    --  r >
3803:650 | DONE wsp | na 16 16 |        |             |
3803:651 | DONE lbl | na 16 16 | 007090 |             | nt_tor                               
3803:652 | DONE dir | na 16 16 | 007090 | (2 bytes)   |         .byte 2, { CO }              
3803:652 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
3803:653 | DONE dir | na 16 16 | 007092 | (6 bytes)   |         .word nt_fromr, xt_tor, 00612d 
3803:653 | DONE dir | na 16 16 |        |             |                 86 70 26 61 2d 61        --  . p & a - a
3803:654 | DONE dir | na 16 16 | 007098 | (2 bytes)   |         .byte 3e, 72                 
3803:654 | DONE dir | na 16 16 |        |             |                 3e 72                    --  > r
3803:655 | DONE wsp | na 16 16 |        |             |
3803:656 | DONE lbl | na 16 16 | 00709a |             | nt_char-num                          
3803:657 | DONE dir | na 16 16 | 00709a | (2 bytes)   |         .byte &11, { NC }            
3803:657 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
3803:658 | DONE dir | na 16 16 | 00709c | (6 bytes)   |         .word nt_tor, xt_char-num, 0064b0 
3803:658 | DONE dir | na 16 16 |        |             |                 90 70 75 64 b0 64        --  . p u d . d
3803:659 | DONE dir | na 16 16 | 0070a2 | (11 bytes)  |         .byte 63, 68, 61, 72, 3e, 6e, 75, 6d, 62, 65, 72 
3803:659 | DONE dir | na 16 16 |        |             |                 63 68 61 72 3e 6e 75 6d  --  c h a r > n u m
3803:659 | DONE dir | na 16 16 |        |             |                 62 65 72                 --  b e r
3803:660 | DONE wsp | na 16 16 |        |             |
3803:661 | DONE lbl | na 16 16 | 0070ad |             | nt_over                              
3803:662 | DONE dir | na 16 16 | 0070ad | (2 bytes)   |         .byte 4, { NC }              
3803:662 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:663 | DONE dir | na 16 16 | 0070af | (6 bytes)   |         .word nt_char-num, xt_over, 0067c8 
3803:663 | DONE dir | na 16 16 |        |             |                 9a 70 c2 67 c8 67        --  . p . g . g
3803:664 | DONE dir | na 16 16 | 0070b5 | (4 bytes)   |         .byte 6f, 76, 65, 72         
3803:664 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
3803:665 | DONE wsp | na 16 16 |        |             |
3803:666 | DONE lbl | na 16 16 | 0070b9 |             | nt_fetch                             
3803:667 | DONE dir | na 16 16 | 0070b9 | (2 bytes)   |         .byte 1, { NC }              
3803:667 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:668 | DONE dir | na 16 16 | 0070bb | (6 bytes)   |         .word nt_over, xt_fetch, 006248 
3803:668 | DONE dir | na 16 16 |        |             |                 ad 70 44 62 48 62        --  . p D b H b
3803:669 | DONE dir | na 16 16 | 0070c1 | (1 bytes)   |         .byte 40                     
3803:669 | DONE dir | na 16 16 |        |             |                 40                       --  @
3803:670 | DONE wsp | na 16 16 |        |             |
3803:671 | DONE lbl | na 16 16 | 0070c2 |             | nt_store                             
3803:672 | DONE dir | na 16 16 | 0070c2 | (2 bytes)   |         .byte 1, { NC }              
3803:672 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3803:673 | DONE dir | na 16 16 | 0070c4 | (6 bytes)   |         .word nt_fetch, xt_store, 006243 
3803:673 | DONE dir | na 16 16 |        |             |                 b9 70 38 62 43 62        --  . p 8 b C b
3803:674 | DONE dir | na 16 16 | 0070ca | (1 bytes)   |         .byte 21                     
3803:674 | DONE dir | na 16 16 |        |             |                 21                       --  !
3803:675 | DONE wsp | na 16 16 |        |             |
3803:676 | DONE lbl | na 16 16 | 0070cb |             | nt_swap                              
3803:677 | DONE dir | na 16 16 | 0070cb | (2 bytes)   |         .byte 4, { NC }              
3803:677 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:678 | DONE dir | na 16 16 | 0070cd | (6 bytes)   |         .word nt_store, xt_swap, 0069a7 
3803:678 | DONE dir | na 16 16 |        |             |                 c2 70 a2 69 a7 69        --  . p . i . i
3803:679 | DONE dir | na 16 16 | 0070d3 | (4 bytes)   |         .byte 73, 77, 61, 70         
3803:679 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
3803:680 | DONE wsp | na 16 16 |        |             |
3803:681 | DONE lbl | na 16 16 | 0070d7 |             | nt_dup                               
3803:682 | DONE dir | na 16 16 | 0070d7 | (2 bytes)   |         .byte 3, { NC }              
3803:682 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3803:683 | DONE dir | na 16 16 | 0070d9 | (6 bytes)   |         .word nt_swap, xt_dup, 0065f8 
3803:683 | DONE dir | na 16 16 |        |             |                 cb 70 f4 65 f8 65        --  . p . e . e
3803:684 | DONE dir | na 16 16 | 0070df | (3 bytes)   |         .byte 64, 75, 70             
3803:684 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
3803:685 | DONE wsp | na 16 16 |        |             |
3803:686 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
3803:687 | DONE lbl | na 16 16 | 0070e2 |             | nt_drop                              
3803:688 | DONE dir | na 16 16 | 0070e2 | (2 bytes)   |         .byte 4, { NC }              
3803:688 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3803:689 | DONE dir | na 16 16 | 0070e4 | (6 bytes)   |         .word nt_dup, xt_drop, 0065cc 
3803:689 | DONE dir | na 16 16 |        |             |                 d7 70 c8 65 cc 65        --  . p . e . e
3803:690 | DONE dir | na 16 16 | 0070ea | (4 bytes)   |         .byte 64, 72, 6f, 70         
3803:690 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
3803:691 | DONE wsp | na 16 16 |        |             |
3803:692 | DONE cmt | na 16 16 |        |             | ; END
3804:000 | DONE wsp | na 16 16 |        |             |
3805:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3806:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
3807:000 | DONE wsp | na 16 16 |        |             |
3808:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3809:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
3810:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
3811:000 | DONE cmt | na 16 16 |        |             | ; the stack
3812:000 | DONE lbl | na 16 16 | 0070ee |             | doconst                              
3813:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3814:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3815:000 | DONE ins | na 16 16 | 0070ee | ca          |                 dex                  make room on Data Stack
3816:000 | DONE ins | na 16 16 | 0070ef | ca          |                 dex                  
3817:000 | DONE ins | na 16 16 | 0070f0 | 94 00       |                 sty.dx 00            
3818:000 | DONE wsp | na 16 16 |        |             |
3819:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
3820:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
3821:000 | DONE ins | na 16 16 | 0070f2 | 68          |                 pla                  get the return address
3822:000 | DONE ins | na 16 16 | 0070f3 | 85 16       |                 sta.d 000216         
3823:000 | DONE wsp | na 16 16 |        |             |
3824:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
3825:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
3826:000 | DONE ins | na 16 16 | 0070f5 | a0 01 00    |                 ldy.# 0001           
3827:000 | DONE ins | na 16 16 | 0070f8 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3828:000 | DONE ins | na 16 16 | 0070fa | a8          |                 tay                  
3829:000 | DONE wsp | na 16 16 |        |             |
3830:000 | DONE ins | na 16 16 | 0070fb | 60          |                 rts                  takes us to original caller
3831:000 | DONE wsp | na 16 16 |        |             |
3832:000 | DONE wsp | na 16 16 |        |             |
3833:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3834:000 | DONE cmt | na 16 16 |        |             | ; DODOES
3835:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
3836:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
3837:000 | DONE lbl | na 16 16 | 0070fc |             | dodoes                               
3838:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
3839:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
3840:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
3841:000 | DONE cmt | na 16 16 |        |             |                 ; works
3842:000 | DONE ins | na 16 16 | 0070fc | 68          |                 pla                  
3843:000 | DONE ins | na 16 16 | 0070fd | 1a          |                 inc.a                
3844:000 | DONE ins | na 16 16 | 0070fe | 85 1a       |                 sta.d 00021a         
3845:000 | DONE wsp | na 16 16 |        |             |
3846:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
3847:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
3848:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
3849:000 | DONE ins | na 16 16 | 007100 | ca          |                 dex                  
3850:000 | DONE ins | na 16 16 | 007101 | ca          |                 dex                  
3851:000 | DONE ins | na 16 16 | 007102 | 94 00       |                 sty.dx 00            
3852:000 | DONE wsp | na 16 16 |        |             |
3853:000 | DONE ins | na 16 16 | 007104 | 7a          |                 ply                  
3854:000 | DONE ins | na 16 16 | 007105 | c8          |                 iny                  
3855:000 | DONE wsp | na 16 16 |        |             |
3856:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
3857:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
3858:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
3859:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
3860:000 | DONE ins | na 16 16 | 007106 | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
3861:000 | DONE wsp | na 16 16 |        |             |
3862:000 | DONE wsp | na 16 16 |        |             |
3863:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3864:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
3865:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
3866:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
3867:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
3868:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
3869:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
3870:000 | DONE lbl | na 16 16 | 007109 |             | dovar                                
3871:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3872:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3873:000 | DONE ins | na 16 16 | 007109 | ca          |                 dex                  make room on Data Stack
3874:000 | DONE ins | na 16 16 | 00710a | ca          |                 dex                  
3875:000 | DONE ins | na 16 16 | 00710b | 94 00       |                 sty.dx 00            
3876:000 | DONE wsp | na 16 16 |        |             |
3877:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
3878:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
3879:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
3880:000 | DONE ins | na 16 16 | 00710d | 7a          |                 ply                  value is now TOS
3881:000 | DONE ins | na 16 16 | 00710e | c8          |                 iny                  add one because of 65816's address handling
3882:000 | DONE wsp | na 16 16 |        |             |
3883:000 | DONE ins | na 16 16 | 00710f | 60          |                 rts                  takes us to original caller
3884:000 | DONE wsp | na 16 16 |        |             |
3885:000 | DONE wsp | na 16 16 |        |             |
3886:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3887:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
3888:000 | DONE wsp | na 16 16 |        |             |
3889:000 | DONE wsp | na 16 16 |        |             |
3890:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3891:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (AKA INTERPRET)
3892:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
3893:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
3894:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
3895:000 | DONE lbl | na 16 16 | 007110 |             | compex                               
3896:000 | DONE lbl | na 16 16 | 007110 |             | compex_loop                          
3897:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3898:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3899:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
3900:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
3901:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
3902:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
3903:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
3904:000 | DONE ins | na 16 16 | 007110 | 20 e2 67    |                 jsr 0067e2           ( "string" -- addr u )
3905:000 | DONE wsp | na 16 16 |        |             |
3906:000 | DONE cmt | na 16 16 |        |             |                 ; TODO decide if we want to make a copy of the string here so
3907:000 | DONE cmt | na 16 16 |        |             |                 ; that we can provide a better error message
3908:000 | DONE wsp | na 16 16 |        |             |
3909:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
3910:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
3911:000 | DONE ins | na 16 16 | 007113 | 98          |                 tya                  force flag check
3912:000 | DONE ins | na 16 16 | 007114 | f0 3f       |                 beq 007155           
3913:000 | DONE wsp | na 16 16 |        |             |
3914:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
3915:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
3916:000 | DONE ins | na 16 16 | 007116 | 20 bb 71    |                 jsr 0071bb           
3917:000 | DONE wsp | na 16 16 |        |             |
3918:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know
3919:000 | DONE ins | na 16 16 | 007119 | 20 36 66    |                 jsr 006636           ( addr u -- nt | 0 )
3920:000 | DONE wsp | na 16 16 |        |             |
3921:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
3922:000 | DONE ins | na 16 16 | 00711c | 98          |                 tya                  
3923:000 | DONE ins | na 16 16 | 00711d | d0 06       |                 bne 007125           
3924:000 | DONE wsp | na 16 16 |        |             |
3925:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
3926:000 | DONE wsp | na 16 16 |        |             |
3927:000 | DONE cmt | na 16 16 |        |             |                 ; Number conversion has failed, which means the user screwed up,
3928:000 | DONE cmt | na 16 16 |        |             |                 ; so complain and abort
3929:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print the offending string first
3930:000 | DONE ins | na 16 16 | 00711f | a9 07 78    |                 lda.# 007807         "Unknown word"
3931:000 | DONE ins | na 16 16 | 007122 | 4c 82 71    |                 jmp 007182           
3932:000 | DONE wsp | na 16 16 |        |             |
3933:000 | DONE lbl | na 16 16 | 007125 |             | compex_got_name_token                
3934:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
3935:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down. This is a quicker
3936:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
3937:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
3938:000 | DONE ins | na 16 16 | 007125 | 84 16       |                 sty.d 000216         
3939:000 | DONE ins | na 16 16 | 007127 | c8          |                 iny                  
3940:000 | DONE ins | na 16 16 | 007128 | c8          |                 iny                  
3941:000 | DONE ins | na 16 16 | 007129 | c8          |                 iny                  
3942:000 | DONE ins | na 16 16 | 00712a | c8          |                 iny                  
3943:000 | DONE ins | na 16 16 | 00712b | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3944:000 | DONE ins | na 16 16 | 00712e | a8          |                 tay                  xt is TOS
3945:000 | DONE wsp | na 16 16 |        |             |
3946:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
3947:000 | DONE ins | na 16 16 | 00712f | a5 14       |                 lda.d 000214         
3948:000 | DONE ins | na 16 16 | 007131 | d0 14       |                 bne 007147           
3949:000 | DONE wsp | na 16 16 |        |             |
3950:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
3951:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
3952:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
3953:000 | DONE ins | na 16 16 | 007133 | b2 16       |                 lda.di 000216        
3954:000 | DONE ins | na 16 16 | 007135 | eb          |                 xba                  flags are MSB
3955:000 | DONE ins | na 16 16 | 007136 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
3956:000 | DONE ins | na 16 16 | 007139 | f0 06       |                 beq 007141           
3957:000 | DONE wsp | na 16 16 |        |             |
3958:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
3959:000 | DONE ins | na 16 16 | 00713b | a9 f9 76    |                 lda.# 0076f9         
3960:000 | DONE ins | na 16 16 | 00713e | 4c 82 71    |                 jmp 007182           
3961:000 | DONE wsp | na 16 16 |        |             |
3962:000 | DONE lbl | na 16 16 | 007141 |             | compex_interpret                     
3963:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
3964:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
3965:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
3966:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
3967:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
3968:000 | DONE ins | na 16 16 | 007141 | 20 2b 66    |                 jsr 00662b           
3969:000 | DONE wsp | na 16 16 |        |             |
3970:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
3971:000 | DONE ins | na 16 16 | 007144 | 4c 10 71    |                 jmp 007110           
3972:000 | DONE wsp | na 16 16 |        |             |
3973:000 | DONE lbl | na 16 16 | 007147 |             | compex_compile                       
3974:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
3975:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
3976:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
3977:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
3978:000 | DONE ins | na 16 16 | 007147 | b2 16       |                 lda.di 000216        
3979:000 | DONE ins | na 16 16 | 007149 | eb          |                 xba                  flags are MSB
3980:000 | DONE ins | na 16 16 | 00714a | 29 02 00    |                 and.# IM             Mask all but IM bit
3981:000 | DONE ins | na 16 16 | 00714d | d0 f2       |                 bne 007141           IMMEDIATE word, execute right now
3982:000 | DONE wsp | na 16 16 |        |             |
3983:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
3984:000 | DONE ins | na 16 16 | 00714f | 20 ba 64    |                 jsr 0064ba           
3985:000 | DONE wsp | na 16 16 |        |             |
3986:000 | DONE ins | na 16 16 | 007152 | 4c 10 71    |                 jmp 007110           
3987:000 | DONE wsp | na 16 16 |        |             |
3988:000 | DONE lbl | na 16 16 | 007155 |             | compex_line_done                     
3989:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
3990:000 | DONE ins | na 16 16 | 007155 | b4 02       |                 ldy.dx 02            
3991:000 | DONE ins | na 16 16 | 007157 | e8          |                 inx                  
3992:000 | DONE ins | na 16 16 | 007158 | e8          |                 inx                  
3993:000 | DONE ins | na 16 16 | 007159 | e8          |                 inx                  
3994:000 | DONE ins | na 16 16 | 00715a | e8          |                 inx                  
3995:000 | DONE wsp | na 16 16 |        |             |
3996:000 | DONE ins | na 16 16 | 00715b | 60          |                 rts                  
3997:000 | DONE wsp | na 16 16 |        |             |
3998:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3999:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
4000:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
4001:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
4002:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
4003:000 | DONE cmt | na 16 16 |        |             | ;
4004:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
4005:000 | DONE cmt | na 16 16 |        |             | ;
4006:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
4007:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
4008:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
4009:000 | DONE cmt | na 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
4010:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
4011:000 | DONE wsp | na 16 16 |        |             |
4012:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
4013:000 | DONE lbl | na 16 16 | 00715c |             | cmpl_word                            
4014:000 | DONE ins | na 16 16 | 00715c | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
4015:000 | DONE ins | na 16 16 | 00715f | 80 08       |                 bra 007169           
4016:000 | DONE lbl | na 16 16 | 007161 |             | cmpl_subroutine                      
4017:000 | DONE ins | na 16 16 | 007161 | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
4018:000 | DONE ins | na 16 16 | 007164 | 80 03       |                 bra 007169           
4019:000 | DONE lbl | na 16 16 | 007166 |             | cmpl_jump                            
4020:000 | DONE ins | na 16 16 | 007166 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
4021:000 | DONE lbl | na 16 16 | 007169 |             | cmpl_common                          
4022:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
4023:000 | DONE ins | na 16 16 | 007169 | 84 06       |                 sty.d 000206         
4024:000 | DONE wsp | na 16 16 |        |             |
4025:000 | DONE ins | na 16 16 | 00716b | a8          |                 tay                  force flag check
4026:000 | DONE ins | na 16 16 | 00716c | f0 08       |                 beq 007176           came in through cmpl_word, just compile body
4027:000 | DONE wsp | na 16 16 |        |             |
4028:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
4029:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
4030:000 | DONE ins | na 16 16 | 00716e | e2 20       |                 sep 20               
4030:001 | DONE ctl | na  8 16 |        |             |         .!a8
4031:000 | DONE ins | na  8 16 | 007170 | 92 00       |                 sta.di 000200        STA (CP)
4032:000 | DONE ins | na  8 16 | 007172 | c2 20       |                 rep 20               
4032:001 | DONE ctl | na 16 16 |        |             |         .!a16
4033:000 | DONE ins | na 16 16 | 007174 | e6 00       |                 inc.d 000200         fall through to cmpl_body
4034:000 | DONE lbl | na 16 16 | 007176 |             | cmpl_body                            
4035:000 | DONE ins | na 16 16 | 007176 | 7a          |                 ply                  the return address we'll need later
4036:000 | DONE wsp | na 16 16 |        |             |
4037:000 | DONE ins | na 16 16 | 007177 | 68          |                 pla                  next value on stack is the word to compile
4038:000 | DONE ins | na 16 16 | 007178 | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
4039:000 | DONE ins | na 16 16 | 00717a | e6 00       |                 inc.d 000200         
4040:000 | DONE ins | na 16 16 | 00717c | e6 00       |                 inc.d 000200         
4041:000 | DONE wsp | na 16 16 |        |             |
4042:000 | DONE ins | na 16 16 | 00717e | 5a          |                 phy                  make sure we can get back home
4043:000 | DONE wsp | na 16 16 |        |             |
4044:000 | DONE ins | na 16 16 | 00717f | a4 06       |                 ldy.d 000206         restore Data Stack
4045:000 | DONE wsp | na 16 16 |        |             |
4046:000 | DONE ins | na 16 16 | 007181 | 60          |                 rts                  
4047:000 | DONE wsp | na 16 16 |        |             |
4048:000 | DONE wsp | na 16 16 |        |             |
4049:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4050:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
4051:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
4052:000 | DONE lbl | na 16 16 | 007182 |             | error                                
4053:000 | DONE ins | na 16 16 | 007182 | 20 88 71    |                 jsr 007188           
4054:000 | DONE ins | na 16 16 | 007185 | 4c 97 60    |                 jmp 006097           
4055:000 | DONE wsp | na 16 16 |        |             |
4056:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4057:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
4058:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
4059:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
4060:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
4061:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
4062:000 | DONE lbl | na 16 16 | 007188 |             | print_string                         
4063:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4064:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4065:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
4066:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
4067:000 | DONE ins | na 16 16 | 007188 | da          |                 phx                  
4068:000 | DONE ins | na 16 16 | 007189 | aa          |                 tax                  x16 contains address of string
4069:000 | DONE lbl | na 16 16 | 00718a |             | @                                    
4070:000 | DONE ins | na 16 16 | 00718a | e2 20       |                 sep 20               
4070:001 | DONE ctl | na  8 16 |        |             |         .!a8
4071:000 | DONE ins | na  8 16 | 00718c | bd 00 00    |                 lda.x 0000           LDA $0000,X
4072:000 | DONE ins | na  8 16 | 00718f | f0 06       |                 beq 007197           
4073:000 | DONE ins | na  8 16 | 007191 | 20 36 60    |                 jsr 006036           
4074:000 | DONE ins | na  8 16 | 007194 | e8          |                 inx                  
4075:000 | DONE ins | na  8 16 | 007195 | 80 f3       |                 bra 00718a           
4076:000 | DONE wsp | na  8 16 |        |             |
4077:000 | DONE lbl | na  8 16 | 007197 |             | print_string_done                    
4078:000 | DONE ins | na  8 16 | 007197 | a9 0a       |                 lda.# AscLF          should be CR on some systems
4079:000 | DONE ins | na  8 16 | 007199 | 20 36 60    |                 jsr 006036           
4080:000 | DONE ins | na  8 16 | 00719c | c2 20       |                 rep 20               
4080:001 | DONE ctl | na 16 16 |        |             |         .!a16
4081:000 | DONE ins | na 16 16 | 00719e | fa          |                 plx                  
4082:000 | DONE ins | na 16 16 | 00719f | 60          |                 rts                  
4083:000 | DONE wsp | na 16 16 |        |             |
4084:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4085:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
4086:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
4087:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
4088:000 | DONE lbl | na 16 16 | 0071a0 |             | byte_to_ascii                        
4089:000 | DONE ins | na 16 16 | 0071a0 | 48          |                 pha                  
4090:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
4091:000 | DONE ins | na 16 16 | 0071a1 | 4a          |                 lsr.a                
4092:000 | DONE ins | na 16 16 | 0071a2 | 4a          |                 lsr.a                
4093:000 | DONE ins | na 16 16 | 0071a3 | 4a          |                 lsr.a                
4094:000 | DONE ins | na 16 16 | 0071a4 | 4a          |                 lsr.a                
4095:000 | DONE ins | na 16 16 | 0071a5 | 20 a9 71    |                 jsr 0071a9           
4096:000 | DONE wsp | na 16 16 |        |             |
4097:000 | DONE ins | na 16 16 | 0071a8 | 68          |                 pla                  
4098:000 | DONE wsp | na 16 16 |        |             |
4099:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
4100:000 | DONE wsp | na 16 16 |        |             |
4101:000 | DONE wsp | na 16 16 |        |             |
4102:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4103:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
4104:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
4105:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
4106:000 | DONE lbl | na 16 16 | 0071a9 |             | nibble_to_ascii                      
4107:000 | DONE ins | na 16 16 | 0071a9 | 29 0f 00    |                 and.# 000f           
4108:000 | DONE ins | na 16 16 | 0071ac | 09 30 00    |                 ora.# 30             
4109:000 | DONE ins | na 16 16 | 0071af | c9 3a 00    |                 cmp.# 003a           '9' + 1
4110:000 | DONE ins | na 16 16 | 0071b2 | 90 03       |                 bcc 0071b7           
4111:000 | DONE ins | na 16 16 | 0071b4 | 69 06 00    |                 adc.# 0006           
4112:000 | DONE lbl | na 16 16 | 0071b7 |             | @                                    
4113:000 | DONE ins | na 16 16 | 0071b7 | 20 36 60    |                 jsr 006036           
4114:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4115:000 | DONE ins | na 16 16 | 0071ba | 60          |                 rts                  
4116:000 | DONE wsp | na 16 16 |        |             |
4117:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4118:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
4119:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
4120:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
4121:000 | DONE lbl | na 16 16 | 0071bb |             | string_to_lowercase                  
4122:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
4123:000 | DONE ins | na 16 16 | 0071bb | 60          |                 rts                  
4124:000 | DONE wsp | na 16 16 |        |             |
4125:000 | DONE wsp | na 16 16 |        |             |
4126:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4127:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
4128:000 | DONE wsp | na 16 16 |        |             |
4129:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
4130:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
4131:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
4132:000 | DONE lbl | na 16 16 | 0071bc |             | hi-start                             
4133:000 | DONE cmt | na 16 16 |        |             |         ; High level definitions
4134:000 | DONE dir | na 16 16 | 0071bc | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) ( "parens"
4134:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
4134:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
4134:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
4134:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
4134:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
4135:000 | DONE dir | na 16 16 | 0071e1 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) .( "dotparens"
4135:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
4135:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
4135:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
4135:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
4135:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
4136:000 | DONE dir | na 16 16 | 007206 | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) IF
4136:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
4136:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
4136:000 | DONE dir | na 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
4136:000 | DONE dir | na 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
4136:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
4136:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
4136:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
4136:000 | DONE dir | na 16 16 |        |             |                                          -- 
4137:000 | DONE dir | na 16 16 | 00723e | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) THEN
4137:000 | DONE dir | na 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
4137:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
4137:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
4137:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4137:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4137:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4138:000 | DONE dir | na 16 16 | 00726a | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) ELSE
4138:000 | DONE dir | na 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
4138:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
4138:000 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
4138:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
4138:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
4138:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
4138:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4138:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4138:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4139:000 | DONE dir | na 16 16 | 0072ae | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) REPEAT
4139:000 | DONE dir | na 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
4139:000 | DONE dir | na 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
4139:000 | DONE dir | na 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
4139:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
4139:000 | DONE dir | na 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
4139:000 | DONE dir | na 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
4139:000 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
4139:000 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
4140:000 | DONE dir | na 16 16 | 0072eb | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) UNTIL
4140:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
4140:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4140:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
4140:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
4140:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4140:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4140:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4141:000 | DONE dir | na 16 16 | 00731f | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) WHILE
4141:000 | DONE dir | na 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
4141:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4141:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
4141:000 | DONE dir | na 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
4141:000 | DONE dir | na 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
4141:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
4141:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
4141:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
4141:000 | DONE dir | na 16 16 |        |             |                                          -- 
4142:000 | DONE wsp | na 16 16 |        |             |
4143:000 | DONE cmt | na 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
4144:000 | DONE cmt | na 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
4145:000 | DONE cmt | na 16 16 |        |             |         ; stuff anyway. Definitions for SM/REM and FM/MOD taken von Gforth
4146:000 | DONE cmt | na 16 16 |        |             |         ; sources, see
4147:000 | DONE cmt | na 16 16 |        |             |         ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4148:000 | DONE dir | na 16 16 | 00735f | (59 bytes)  |         .byte 3a, 20, 73, 6d, 2f, 72, 65, 6d, 20, 6f, 76, 65, 72, (...) 
4148:000 | DONE dir | na 16 16 |        |             |                 3a 20 73 6d 2f 72 65 6d  --  :   s m / r e m
4148:000 | DONE dir | na 16 16 |        |             |                 20 6f 76 65 72 20 3e 72  --    o v e r   > r
4148:000 | DONE dir | na 16 16 |        |             |                 20 64 75 70 20 3e 72 20  --    d u p   > r  
4148:000 | DONE dir | na 16 16 |        |             |                 61 62 73 20 2d 72 6f 74  --  a b s   - r o t
4148:000 | DONE dir | na 16 16 |        |             |                 20 64 61 62 73 20 72 6f  --    d a b s   r o
4148:000 | DONE dir | na 16 16 |        |             |                 74 20 75 6d 2f 6d 6f 64  --  t   u m / m o d
4148:000 | DONE dir | na 16 16 |        |             |                 20 72 3e 20 72 40 20 78  --    r >   r @   x
4148:000 | DONE dir | na 16 16 |        |             |                 6f 72 20                 --  o r  
4149:000 | DONE dir | na 16 16 | 00739a | (51 bytes)  |         .byte 30, 3c, 20, 69, 66, 20, 6e, 65, 67, 61, 74, 65, 20, (...) 
4149:000 | DONE dir | na 16 16 |        |             |                 30 3c 20 69 66 20 6e 65  --  0 <   i f   n e
4149:000 | DONE dir | na 16 16 |        |             |                 67 61 74 65 20 74 68 65  --  g a t e   t h e
4149:000 | DONE dir | na 16 16 |        |             |                 6e 20 72 3e 20 30 3c 20  --  n   r >   0 <  
4149:000 | DONE dir | na 16 16 |        |             |                 69 66 20 73 77 61 70 20  --  i f   s w a p  
4149:000 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65 20 73  --  n e g a t e   s
4149:000 | DONE dir | na 16 16 |        |             |                 77 61 70 20 74 68 65 6e  --  w a p   t h e n
4149:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
4150:000 | DONE dir | na 16 16 | 0073cd | (57 bytes)  |         .byte 3a, 20, 66, 6d, 2f, 6d, 6f, 64, 20, 64, 75, 70, 20, (...) 
4150:000 | DONE dir | na 16 16 |        |             |                 3a 20 66 6d 2f 6d 6f 64  --  :   f m / m o d
4150:000 | DONE dir | na 16 16 |        |             |                 20 64 75 70 20 3e 72 20  --    d u p   > r  
4150:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 30 3c 20 69  --  d u p   0 <   i
4150:000 | DONE dir | na 16 16 |        |             |                 66 20 6e 65 67 61 74 65  --  f   n e g a t e
4150:000 | DONE dir | na 16 16 |        |             |                 20 3e 72 20 64 6e 65 67  --    > r   d n e g
4150:000 | DONE dir | na 16 16 |        |             |                 61 74 65 20 72 3e 20 74  --  a t e   r >   t
4150:000 | DONE dir | na 16 16 |        |             |                 68 65 6e 20 6f 76 65 72  --  h e n   o v e r
4150:000 | DONE dir | na 16 16 |        |             |                 20                       --   
4151:000 | DONE dir | na 16 16 | 007406 | (63 bytes)  |         .byte 30, 3c, 20, 69, 66, 20, 74, 75, 63, 6b, 20, 2b, 20, (...) 
4151:000 | DONE dir | na 16 16 |        |             |                 30 3c 20 69 66 20 74 75  --  0 <   i f   t u
4151:000 | DONE dir | na 16 16 |        |             |                 63 6b 20 2b 20 73 77 61  --  c k   +   s w a
4151:000 | DONE dir | na 16 16 |        |             |                 70 20 74 68 65 6e 20 75  --  p   t h e n   u
4151:000 | DONE dir | na 16 16 |        |             |                 6d 2f 6d 6f 64 20 72 3e  --  m / m o d   r >
4151:000 | DONE dir | na 16 16 |        |             |                 20 30 3c 20 69 66 20 73  --    0 <   i f   s
4151:000 | DONE dir | na 16 16 |        |             |                 77 61 70 20 6e 65 67 61  --  w a p   n e g a
4151:000 | DONE dir | na 16 16 |        |             |                 74 65 20 73 77 61 70 20  --  t e   s w a p  
4151:000 | DONE dir | na 16 16 |        |             |                 74 68 65 6e 20 3b 20     --  t h e n   ;  
4152:000 | DONE dir | na 16 16 | 007445 | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
4152:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
4152:000 | DONE dir | na 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
4152:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
4152:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
4152:000 | DONE dir | na 16 16 |        |             |                 20                       --   
4153:000 | DONE dir | na 16 16 | 007466 | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
4153:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
4153:000 | DONE dir | na 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
4153:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
4153:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
4154:000 | DONE dir | na 16 16 | 007480 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
4154:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
4154:000 | DONE dir | na 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
4154:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
4154:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
4154:000 | DONE dir | na 16 16 |        |             |                 20                       --   
4155:000 | DONE dir | na 16 16 | 0074a1 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
4155:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
4155:000 | DONE dir | na 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
4155:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
4155:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
4156:000 | DONE wsp | na 16 16 |        |             |
4157:000 | DONE cmt | na 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
4158:000 | DONE cmt | na 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
4159:000 | DONE cmt | na 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
4160:000 | DONE dir | na 16 16 | 0074bb | (29 bytes)  |         .byte 3a, 20, 75, 2e, 20, 30, 20, 3c, 23, 20, 23, 73, 20, (...) 
4160:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 20 30 20 3c  --  :   u .   0   <
4160:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 23 3e 20  --  #   # s   # >  
4160:000 | DONE dir | na 16 16 |        |             |                 74 79 70 65 20 73 70 61  --  t y p e   s p a
4160:000 | DONE dir | na 16 16 |        |             |                 63 65 20 3b 20           --  c e   ;  
4161:000 | DONE dir | na 16 16 | 0074d8 | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
4161:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
4161:000 | DONE dir | na 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
4161:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
4161:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
4161:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
4161:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4162:000 | DONE dir | na 16 16 | 007504 | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
4162:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
4162:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
4162:000 | DONE dir | na 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
4162:000 | DONE dir | na 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
4162:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
4162:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
4162:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
4162:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4163:000 | DONE dir | na 16 16 | 007540 | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
4163:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
4163:000 | DONE dir | na 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
4163:000 | DONE dir | na 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
4163:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4164:000 | DONE dir | na 16 16 | 00755c | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
4164:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
4164:000 | DONE dir | na 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
4164:000 | DONE dir | na 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
4164:000 | DONE dir | na 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
4164:000 | DONE dir | na 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
4164:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
4165:000 | DONE dir | na 16 16 | 007587 | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
4165:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
4165:000 | DONE dir | na 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
4165:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
4165:000 | DONE dir | na 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
4165:000 | DONE dir | na 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
4165:000 | DONE dir | na 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
4166:000 | DONE dir | na 16 16 | 0075b5 | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
4166:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
4166:000 | DONE dir | na 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
4166:000 | DONE dir | na 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
4166:000 | DONE dir | na 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
4166:000 | DONE dir | na 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
4166:000 | DONE dir | na 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
4166:000 | DONE dir | na 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
4166:000 | DONE dir | na 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
4167:000 | DONE cmt | na 16 16 |        |             | ;       .byte ": . dup abs 0 <# #s rot sign #> type space ; "
4168:000 | DONE wsp | na 16 16 |        |             |
4169:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
4170:000 | DONE cmt | na 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
4171:000 | DONE cmt | na 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
4172:000 | DONE dir | na 16 16 | 0075f2 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
4172:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
4172:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
4172:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
4172:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
4172:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
4173:000 | DONE dir | na 16 16 | 007615 | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
4173:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
4173:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
4173:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
4173:000 | DONE dir | na 16 16 |        |             |                 32 31 2e 20 46 65 62 20  --  2 1 .   F e b  
4173:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
4174:000 | DONE dir | na 16 16 | 00763a | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
4174:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
4174:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
4174:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
4174:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
4174:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
4174:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
4174:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
4175:000 | DONE dir | na 16 16 | 00766d | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
4175:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
4175:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
4175:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
4175:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
4175:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
4175:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
4175:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
4176:000 | DONE dir | na 16 16 | 0076a1 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
4176:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
4176:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
4176:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
4176:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
4177:000 | DONE lbl | na 16 16 | 0076bd |             | hi-end                               
4178:000 | DONE wsp | na 16 16 |        |             |
4179:000 | DONE wsp | na 16 16 |        |             |
4180:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4181:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
4182:000 | DONE wsp | na 16 16 |        |             |
4183:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
4183:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
4183:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
4183:003 | DONE cmt | na 16 16 |        |             | ; This version:  21. Feb 2017
4183:004 | DONE wsp | na 16 16 |        |             |
4183:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
4183:006 | DONE wsp | na 16 16 |        |             |
4183:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4183:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
4183:009 | DONE wsp | na 16 16 |        |             |
4183:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
4183:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
4183:012 | DONE cmt | na 16 16 |        |             | ; character
4183:013 | DONE wsp | na 16 16 |        |             |
4183:014 | DONE lbl | na 16 16 | 0076bd |             | s_ok                                 
4183:015 | DONE dir | na 16 16 | 0076bd | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
4183:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
4183:016 | DONE lbl | na 16 16 | 0076c1 |             | s_compiled                           
4183:017 | DONE dir | na 16 16 | 0076c1 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
4183:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
4183:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
4183:018 | DONE wsp | na 16 16 |        |             |
4183:019 | DONE wsp | na 16 16 |        |             |
4183:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4183:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
4183:022 | DONE wsp | na 16 16 |        |             |
4183:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
4183:024 | DONE wsp | na 16 16 |        |             |
4183:025 | DONE lbl | na 16 16 | 0076cb |             | es_allot                             
4183:026 | DONE dir | na 16 16 | 0076cb | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
4183:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
4183:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
4183:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
4183:027 | DONE lbl | na 16 16 | 0076df |             | es_channel                           
4183:028 | DONE dir | na 16 16 | 0076df | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
4183:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
4183:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
4183:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
4183:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
4183:029 | DONE lbl | na 16 16 | 0076f9 |             | es_componly                          
4183:030 | DONE dir | na 16 16 | 0076f9 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
4183:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
4183:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
4183:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4183:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
4183:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
4183:031 | DONE lbl | na 16 16 | 00771a |             | es_defer                             
4183:032 | DONE dir | na 16 16 | 00771a | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
4183:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
4183:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
4183:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
4183:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
4183:033 | DONE lbl | na 16 16 | 007737 |             | es_divzero                           
4183:034 | DONE dir | na 16 16 | 007737 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
4183:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
4183:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
4183:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
4183:035 | DONE lbl | na 16 16 | 007748 |             | es_error                             
4183:036 | DONE dir | na 16 16 | 007748 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
4183:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
4183:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
4183:037 | DONE lbl | na 16 16 | 007754 |             | es_intonly                           
4183:038 | DONE dir | na 16 16 | 007754 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
4183:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
4183:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
4183:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
4183:039 | DONE lbl | na 16 16 | 00776a |             | es_noname                            
4183:040 | DONE dir | na 16 16 | 00776a | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
4183:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
4183:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
4183:040 | DONE dir | na 16 16 |        |             |                                          -- 
4183:041 | DONE lbl | na 16 16 | 00777a |             | es_radix                             
4183:042 | DONE dir | na 16 16 | 00777a | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
4183:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
4183:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
4183:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
4183:043 | DONE lbl | na 16 16 | 007791 |             | es_refill1                           
4183:044 | DONE dir | na 16 16 | 007791 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
4183:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
4183:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
4183:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
4183:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
4183:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
4183:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
4183:045 | DONE lbl | na 16 16 | 0077bf |             | es_refill2                           
4183:046 | DONE dir | na 16 16 | 0077bf | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
4183:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
4183:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
4183:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
4183:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
4183:046 | DONE dir | na 16 16 |        |             |                                          -- 
4183:047 | DONE lbl | na 16 16 | 0077df |             | es_state                             
4183:048 | DONE dir | na 16 16 | 0077df | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
4183:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
4183:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
4183:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
4183:048 | DONE dir | na 16 16 |        |             |                                          -- 
4183:049 | DONE lbl | na 16 16 | 0077f7 |             | es_underflow                         
4183:050 | DONE dir | na 16 16 | 0077f7 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
4183:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
4183:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
4183:050 | DONE dir | na 16 16 |        |             |                                          -- 
4183:051 | DONE lbl | na 16 16 | 007807 |             | es_syntax                            
4183:052 | DONE dir | na 16 16 | 007807 | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
4183:052 | DONE dir | na 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
4183:052 | DONE dir | na 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
4183:053 | DONE wsp | na 16 16 |        |             |
4183:054 | DONE wsp | na 16 16 |        |             |
4183:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4183:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
4183:057 | DONE wsp | na 16 16 |        |             |
4183:058 | DONE lbl | na 16 16 | 007816 |             | vt100_page                           
4183:059 | DONE dir | na 16 16 | 007816 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
4183:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
4183:060 | DONE lbl | na 16 16 | 00781b |             | vt100_home                           
4183:061 | DONE dir | na 16 16 | 00781b | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
4183:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
4183:062 | DONE wsp | na 16 16 |        |             |
4183:063 | DONE wsp | na 16 16 |        |             |
4183:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4183:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
4183:066 | DONE wsp | na 16 16 |        |             |
4183:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
4183:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
4183:069 | DONE wsp | na 16 16 |        |             |
4183:070 | DONE lbl | na 16 16 | 00781f |             | tests_prev_cmd                       
4183:071 | DONE dir | na 16 16 | 00781f | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
4183:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
4183:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
4183:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
4183:072 | DONE lbl | na 16 16 | 007832 |             | tests_next_cmd                       
4183:073 | DONE dir | na 16 16 | 007832 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
4183:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
4183:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
4183:074 | DONE wsp | na 16 16 |        |             |
4183:075 | DONE wsp | na 16 16 |        |             |
4183:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4183:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
4183:078 | DONE wsp | na 16 16 |        |             |
4183:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
4183:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
4183:081 | DONE wsp | na 16 16 |        |             |
4183:082 | DONE lbl | na 16 16 | 007841 |             | alphastring                          
4183:083 | DONE dir | na 16 16 | 007841 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
4183:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
4183:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
4183:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
4183:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
4183:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
4184:000 | DONE wsp | na 16 16 |        |             |
4185:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4186:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
4187:000 | DONE wsp | na 16 16 |        |             |
4188:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
4189:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
4190:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
4191:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
4192:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
4193:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
4194:000 | DONE wsp | na 16 16 |        |             |
4195:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
4196:000 | DONE cmt | na 16 16 |        |             |                 ; tya
4197:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
4198:000 | DONE cmt | na 16 16 |        |             |                 ; xba
4199:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
4200:000 | DONE cmt | na 16 16 |        |             |                 ; tya
4201:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
4202:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
4203:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
4204:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
4205:000 | DONE wsp | na 16 16 |        |             |
4206:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
4207:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
4208:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
4209:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
4210:000 | DONE wsp | na 16 16 |        |             |
4211:000 | DONE wsp | na 16 16 |        |             |
4212:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4213:000 | DONE cmt | na 16 16 |        |             | ; END
4214:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 006397
- accept_eol                  : 00638f
- accept_loop                 : 006344
- accept_nonzero              : 006337
- allot_done                  : 0063ed
- allot_error                 : 0063dc
- allot_minus                 : 0063e2
- allot_real_gone             : 0063ef
- alphastring                 : 007841
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- branch_rt                   : 006420
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 0071a0
- char_got_char               : 006469
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 007176
- cmpl_common                 : 007169
- cmpl_jump                   : 007166
- cmpl_subroutine             : 007161
- cmpl_word                   : 00715c
- cn_case_done                : 006492
- cn_checkbase                : 006495
- cn_notdigit                 : 00649c
- cn_success                  : 0064a7
- co                          : 000004
- compex                      : 007110
- compex_compile              : 007147
- compex_got_name_token       : 007125
- compex_interpret            : 007141
- compex_line_done            : 007155
- compex_loop                 : 007110
- compile_as_code             : 0064ba
- compile_as_jump             : 0064ba
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006508
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 0070ee
- dodoes                      : 0070fc
- does_rt                     : 0065b2
- dots_done                   : 0061b3
- dots_loop                   : 006199
- dots_not_empty              : 006193
- dovar                       : 007109
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 0065d5
- dump_done                   : 0065ea
- dump_line_loop              : 0065cf
- equal_not                   : 006289
- error                       : 007182
- es_allot                    : 0076cb
- es_channel                  : 0076df
- es_componly                 : 0076f9
- es_defer                    : 00771a
- es_divzero                  : 007737
- es_error                    : 007748
- es_intonly                  : 007754
- es_noname                   : 00776a
- es_radix                    : 00777a
- es_refill1                  : 007791
- es_refill2                  : 0077bf
- es_state                    : 0077df
- es_syntax                   : 007807
- es_underflow                : 0077f7
- execute_ip                  : 006628
- find-name_all_chars         : 006664
- find-name_char_nomatcnt_8   : 006660
- find-name_chars             : 006655
- find-name_done              : 00668a
- find-name_failure_16        : 006687
- find-name_loop              : 006640
- find-name_next_entry        : 006649
- find-name_success           : 006681
- get_chr                     : 006047
- get_chr_wait                : 00604c
- hashs_loop                  : 006228
- have_chr?                   : 006056
- hi-end                      : 0076bd
- hi-start                    : 0071bc
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- literal_rt                  : 0066c9
- max_drop                    : 006704
- max_nip                     : 006706
- max_no_ov                   : 006702
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 006717
- min_nip                     : 006719
- min_no_ov                   : 006715
- mstar_abs_nos               : 0066e2
- mstar_umstar                : 0066ec
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 0071a9
- not-equal_equal             : 0060fc
- nt_2drop                    : 00706f
- nt_2dup                     : 006dfc
- nt_abort                    : 006bd5
- nt_abs                      : 006e08
- nt_accept                   : 00700f
- nt_again                    : 006d85
- nt_allot                    : 006dc1
- nt_and                      : 006ec2
- nt_backslash                : 00701d
- nt_base                     : 006cac
- nt_begin                    : 006d92
- nt_bell                     : 006b1d
- nt_bl                       : 006c5d
- nt_bracketchar              : 006d04
- nt_brackettick              : 006cf9
- nt_branch                   : 006d77
- nt_bye                      : 006aed
- nt_c-comma                  : 006ed7
- nt_c-fetch                  : 006ee1
- nt_c-store                  : 006eeb
- nt_cells                    : 006cc8
- nt_char                     : 006ea1
- nt_char-num                 : 00709a
- nt_cold                     : 006af8
- nt_colon                    : 006db8
- nt_comma                    : 007006
- nt_compile-only             : 006d21
- nt_compilecomma             : 006d9f
- nt_constant                 : 006e46
- nt_count                    : 006bc8
- nt_cr                       : 006c14
- nt_create                   : 006ddb
- nt_dabs                     : 006b5d
- nt_decimal                  : 006b29
- nt_depth                    : 006e39
- nt_dnegate                  : 006b69
- nt_does                     : 006dce
- nt_dot                      : 006c98
- nt_dotquote                 : 006cd5
- nt_dots                     : 006c82
- nt_drop                     : 0070e2
- nt_dtos                     : 006b78
- nt_dump                     : 006b11
- nt_dup                      : 0070d7
- nt_equal                    : 006f6a
- nt_evaluate                 : 006cb8
- nt_execute                  : 007054
- nt_false                    : 006f73
- nt_fetch                    : 0070b9
- nt_find-name                : 006fc4
- nt_fromr                    : 007086
- nt_greater                  : 006f44
- nt_gtnumber                 : 006f8c
- nt_hash                     : 006c4a
- nt_hashs                    : 006c34
- nt_here                     : 007063
- nt_hex                      : 006b38
- nt_hold                     : 006c28
- nt_immediate                : 006d35
- nt_invert                   : 006e93
- nt_leftbracket              : 006d5f
- nt_less                     : 006f4d
- nt_lessnumber               : 006c53
- nt_literal                  : 006d12
- nt_max                      : 006e7a
- nt_min                      : 006e6f
- nt_minus                    : 006eff
- nt_mrot                     : 00703d
- nt_mstar                    : 006bb3
- nt_name-int                 : 006c04
- nt_name-string              : 006de9
- nt_negate                   : 006e85
- nt_nip                      : 007032
- nt_not-equal                : 006f60
- nt_number                   : 006f9b
- nt_numbermore               : 006c1e
- nt_one                      : 006fb2
- nt_one-minus                : 006f11
- nt_one-plus                 : 006f1b
- nt_or                       : 006eb8
- nt_over                     : 0070ad
- nt_pad                      : 006ca1
- nt_page                     : 006b51
- nt_parse                    : 006be2
- nt_parse-name               : 006fe3
- nt_plus                     : 006f08
- nt_plusstore                : 006ecd
- nt_postpone                 : 006d46
- nt_question                 : 006bfb
- nt_quit                     : 006bef
- nt_refill                   : 006fd5
- nt_rfetch                   : 00707c
- nt_rightbracket             : 006d56
- nt_rot                      : 007049
- nt_semicolon                : 006daf
- nt_sign                     : 006c3e
- nt_sliteral                 : 006ce9
- nt_source                   : 006e2b
- nt_source-id                : 006ff5
- nt_space                    : 006c75
- nt_spaces                   : 006c67
- nt_squote                   : 006cdf
- nt_star                     : 006baa
- nt_state                    : 006e13
- nt_stod                     : 006b83
- nt_store                    : 0070c2
- nt_swap                     : 0070cb
- nt_tick                     : 006e66
- nt_to-in                    : 006e20
- nt_tor                      : 007090
- nt_true                     : 006f80
- nt_tuck                     : 007026
- nt_two                      : 006fa9
- nt_two-star                 : 006ef5
- nt_type                     : 006c8c
- nt_udmod                    : 006b8e
- nt_ummod                    : 006b9c
- nt_umstar                   : 006bbd
- nt_unused                   : 006b43
- nt_variable                 : 006e56
- nt_words                    : 006b04
- nt_xor                      : 006ead
- nt_zbranch                  : 006d68
- nt_zero                     : 006fbb
- nt_zero-equal               : 006f56
- nt_zero-less                : 006f3a
- nt_zero-more                : 006f30
- nt_zero-notequal            : 006f25
- number_dot                  : 006759
- number_loop                 : 00677d
- number_main                 : 00676f
- number_ok                   : 006789
- number_single               : 0067ac
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 0067f4
- parse-name_found            : 006808
- parse-name_loop             : 0067e7
- parse_found_delimiter       : 006834
- parse_loop                  : 006827
- parse_reached_eol           : 006838
- physicalram                 : 007fff
- piblen                      : 000210
- pp_got_nt                   : 00686d
- pp_got_word                 : 006862
- pp_not_immediate            : 00687d
- print_string                : 007188
- print_string_done           : 007197
- put_chr                     : 006036
- put_chr_wait                : 00603c
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 0068c9
- refill_src_not_kbd          : 0068c0
- reset_hardware              : 006000
- s_compiled                  : 0076c1
- s_ok                        : 0076bd
- scratch                     : 000220
- sign_plus                   : 006904
- sl_loop                     : 006929
- sliteral_rt                 : 006954
- spaces_done                 : 00698d
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- stod_pos                    : 0068f7
- string_to_lowercase         : 0071bb
- tests_next_cmd              : 007832
- tests_prev_cmd              : 00781f
- tick_have_nt                : 006324
- tick_have_word              : 006318
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- tohold                      : 000228
- toin                        : 000212
- type_done                   : 0069d3
- type_loop                   : 0069c7
- ummod_complete              : 006a9c
- ummod_notzero               : 006a5d
- ummod_overflow              : 006a93
- ummod_shift                 : 006a75
- umstar_counter              : 006a2c
- umstar_loop                 : 006a1e
- umstar_one_nos              : 006a3f
- umstar_one_tos              : 006a3c
- umstar_two_common           : 006a4b
- umstar_two_nos              : 006a4a
- umstar_two_tos              : 006a46
- umstar_zero                 : 006a35
- vt100_home                  : 00781b
- vt100_page                  : 007816
- words_loop                  : 006ac8
- workword                    : 00021e
- xt_2drop                    : 0062fa
- xt_2dup                     : 006301
- xt_abort                    : 006097
- xt_abs                      : 006328
- xt_accept                   : 006331
- xt_again                    : 0063b5
- xt_allot                    : 0063cb
- xt_and                      : 0063f4
- xt_backslash                : 00625f
- xt_base                     : 0063fb
- xt_begin                    : 00640a
- xt_bell                     : 006403
- xt_bl                       : 006411
- xt_bracketchar              : 006258
- xt_brackettick              : 006249
- xt_branch                   : 006419
- xt_bye                      : 00642f
- xt_c-comma                  : 006433
- xt_c-fetch                  : 006441
- xt_c-store                  : 00644d
- xt_char                     : 00645d
- xt_char-num                 : 006475
- xt_cold                     : 006063
- xt_colon                    : 0061c3
- xt_comma                    : 0061b7
- xt_compile-only             : 0064b1
- xt_compilecomma             : 0064ba
- xt_constant                 : 0064cd
- xt_count                    : 0064e7
- xt_cr                       : 0064f6
- xt_create                   : 0064fd
- xt_dabs                     : 006575
- xt_decimal                  : 00657c
- xt_depth                    : 006582
- xt_dnegate                  : 006591
- xt_does                     : 0065a5
- xt_dot                      : 00612e
- xt_dotparen                 : 00614d
- xt_dotquote                 : 00615b
- xt_dots                     : 00616f
- xt_drop                     : 0065c8
- xt_dtos                     : 006570
- xt_dump                     : 0065cd
- xt_dup                      : 0065f4
- xt_equal                    : 006280
- xt_evaluate                 : 0065f9
- xt_execute                  : 00662b
- xt_fetch                    : 006244
- xt_find-name                : 006636
- xt_fromr                    : 006895
- xt_greater                  : 006109
- xt_greater_nip              : 00611a
- xt_greater_no_ov            : 006117
- xt_gtnumber                 : 006125
- xt_hash                     : 0061fe
- xt_hashs                    : 006228
- xt_here                     : 00669c
- xt_hex                      : 0066a3
- xt_hold                     : 0066a9
- xt_immediate                : 00668d
- xt_invert                   : 006696
- xt_leftbracket              : 00624f
- xt_less                     : 0060df
- xt_less_nip                 : 0060f0
- xt_less_no_ov               : 0060ed
- xt_lessnumber               : 0060ff
- xt_literal                  : 0066b7
- xt_max                      : 0066f6
- xt_min                      : 006709
- xt_minus                    : 00626c
- xt_mrot                     : 006277
- xt_mstar                    : 0066d6
- xt_name-int                 : 00671c
- xt_name-string              : 006725
- xt_negate                   : 006736
- xt_nip                      : 00673d
- xt_not-equal                : 0060f3
- xt_number                   : 006740
- xt_numbermore               : 006219
- xt_one                      : 0062e2
- xt_one-minus                : 0062ea
- xt_one-plus                 : 0062ec
- xt_or                       : 0067bb
- xt_over                     : 0067c2
- xt_pad                      : 0067c9
- xt_page                     : 0067d5
- xt_parse                    : 006814
- xt_parse-name               : 0067e2
- xt_plus                     : 006264
- xt_plusstore                : 006847
- xt_postpone                 : 006857
- xt_question                 : 006231
- xt_quit                     : 00609f
- xt_refill                   : 00689d
- xt_rfetch                   : 00688c
- xt_rightbracket             : 006252
- xt_rot                      : 0068d0
- xt_semicolon                : 0061e5
- xt_sign                     : 0068fb
- xt_sliteral                 : 006909
- xt_source                   : 00696a
- xt_source-id                : 006977
- xt_space                    : 00697e
- xt_spaces                   : 006985
- xt_squote                   : 0068d9
- xt_star                     : 006992
- xt_state                    : 00699a
- xt_stod                     : 0068eb
- xt_store                    : 006238
- xt_swap                     : 0069a2
- xt_tick                     : 00630c
- xt_to-in                    : 00611d
- xt_tor                      : 006126
- xt_true                     : 0069a8
- xt_tuck                     : 0069b0
- xt_two                      : 0062ee
- xt_two-star                 : 0062f6
- xt_type                     : 0069b9
- xt_udmod                    : 0069da
- xt_ummod                    : 006a54
- xt_umstar                   : 0069f5
- xt_unused                   : 006aa5
- xt_variable                 : 006ab1
- xt_words                    : 006abe
- xt_xor                      : 006ae6
- xt_zbranch                  : 0062c3
- xt_zero                     : 00628c
- xt_zero-equal               : 006294
- xt_zero-less                : 0062a0
- xt_zero-more                : 0062b8
- xt_zero-notequal            : 0062ac
- z_2drop                     : 006300
- z_2dup                      : 00630b
- z_abort                     : 0060de
- z_abs                       : 006330
- z_accept                    : 0063b4
- z_again                     : 0063ca
- z_allot                     : 0063f3
- z_and                       : 0063fa
- z_backslash                 : 006263
- z_base                      : 006402
- z_begin                     : 006410
- z_bell                      : 006409
- z_bl                        : 006418
- z_bracketchar               : 00625e
- z_brackettick               : 00624f
- z_branch                    : 00641f
- z_bye                       : 006432
- z_c-comma                   : 006440
- z_c-fetch                   : 00644c
- z_c-store                   : 00645c
- z_char                      : 006474
- z_char-num                  : 0064b0
- z_cold                      : 0060de
- z_colon                     : 0061e4
- z_comma                     : 0061c2
- z_compile-only              : 0064b9
- z_compilecomma              : 0064cc
- z_constant                  : 0064e6
- z_count                     : 0064f5
- z_cr                        : 0064fc
- z_create                    : 00656f
- z_dabs                      : 00657b
- z_decimal                   : 006581
- z_depth                     : 006590
- z_dnegate                   : 0065a4
- z_does                      : 0065b1
- z_dot                       : 00614c
- z_dotparen                  : 00615a
- z_dotquote                  : 00616f
- z_dots                      : 0061b6
- z_drop                      : 0065cc
- z_dtos                      : 006574
- z_dump                      : 0065f3
- z_dup                       : 0065f8
- z_equal                     : 00628b
- z_evaluate                  : 006627
- z_execute                   : 006635
- z_fetch                     : 006248
- z_find-name                 : 00668c
- z_fromr                     : 00689c
- z_greater                   : 00611c
- z_gtnumber                  : 006125
- z_hash                      : 006218
- z_hashs                     : 006230
- z_here                      : 0066a2
- z_hex                       : 0066a8
- z_hold                      : 0066b6
- z_immediate                 : 006695
- z_invert                    : 00669b
- z_leftbracket               : 006251
- z_less                      : 0060f2
- z_lessnumber                : 006108
- z_literal                   : 0066c8
- z_max                       : 006708
- z_min                       : 00671b
- z_minus                     : 006276
- z_mrot                      : 00627f
- z_mstar                     : 0066f5
- z_name-int                  : 006724
- z_name-string               : 006735
- z_negate                    : 00673c
- z_nip                       : 00673f
- z_not-equal                 : 0060fe
- z_number                    : 0067ba
- z_numbermore                : 006227
- z_one                       : 0062e9
- z_one-minus                 : 0062eb
- z_one-plus                  : 0062ed
- z_or                        : 0067c1
- z_over                      : 0067c8
- z_pad                       : 0067d4
- z_page                      : 0067e1
- z_parse                     : 006846
- z_parse-name                : 006846
- z_plus                      : 00626b
- z_plusstore                 : 006856
- z_postpone                  : 00688c
- z_question                  : 006237
- z_quit                      : 0060de
- z_refill                    : 0068cf
- z_rfetch                    : 006894
- z_rightbracket              : 006257
- z_rot                       : 0068d8
- z_semicolon                 : 0061fd
- z_sign                      : 006908
- z_sliteral                  : 006953
- z_source                    : 006976
- z_source-id                 : 00697d
- z_space                     : 006984
- z_spaces                    : 006991
- z_squote                    : 0068ea
- z_star                      : 006999
- z_state                     : 0069a1
- z_stod                      : 0068fa
- z_store                     : 006243
- z_swap                      : 0069a7
- z_tick                      : 006327
- z_to-in                     : 006124
- z_tor                       : 00612d
- z_true                      : 0069af
- z_tuck                      : 0069b8
- z_two                       : 0062f5
- z_two-star                  : 0062f9
- z_type                      : 0069d9
- z_udmod                     : 0069f5
- z_ummod                     : 006aa4
- z_umstar                    : 006a53
- z_unused                    : 006ab0
- z_variable                  : 006abd
- z_words                     : 006ae5
- z_xor                       : 006aec
- z_zbranch                   : 0062c9
- z_zero                      : 006293
- z_zero-equal                : 00629f
- z_zero-less                 : 0062ab
- z_zero-more                 : 0062c2
- z_zero-notequal             : 0062b7
- zb_done                     : 0062dc
- zb_zero                     : 0062d6
- zbranch_rt                  : 0062ca
- ze_not_zero                 : 00629c
- zero-less-is-less           : 0062a8
- zero-more_done              : 0062c1
- zero-more_true              : 0062c0
- zne_is_zero                 : 0062b4
