A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Wed Mar  1 04:06:57 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.16194 seconds
Code origin: 006000
Bytes of machine code: 6780

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 01. Mar 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 01. Mar 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: -1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE dir | em  8  8 |        |             |         .equ scratch { 000200 + &32 } 8 byte scratchpad (see UM/MOD)
  16:074 | DONE dir | em  8  8 |        |             |         .equ tohold { 000200 + &40 } Pointer for formatted output
  16:075 | DONE dir | em  8  8 |        |             |         .equ tmpbranch { 000200 + &42 } temp storage for 0BRANCH, BRANCH only
  16:076 | DONE wsp | em  8  8 |        |             |
  16:077 | DONE wsp | em  8  8 |        |             |
  16:078 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:079 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:080 | DONE wsp | em  8  8 |        |             |
  16:081 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:089 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:090 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:091 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:092 | DONE wsp | em  8  8 |        |             |
  16:093 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:094 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:095 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:096 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  16:097 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 22 66    |                 jsr 006622           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  57:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  58:000 | DONE ins | na 16 16 | 00606a | a9 e5 72    |                 lda.# 0072e5         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  70:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  71:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  72:000 | DONE wsp | na 16 16 |        |             |
  73:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  74:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  75:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  78:000 | DONE ins | na 16 16 | 006085 | 20 9c 68    |                 jsr 00689c           
  79:000 | DONE wsp | na 16 16 |        |             |
  80:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  81:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  82:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  83:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  84:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608c | a9 c8 73    |                 lda.# 0073c8         
  88:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  89:000 | DONE ins | na 16 16 | 006091 | a0 0d 05    |                 ldy.# 00050d         length goes in TOS
  90:000 | DONE wsp | na 16 16 |        |             |
  91:000 | DONE ins | na 16 16 | 006094 | 20 9f 66    |                 jsr 00669f           
  92:000 | DONE wsp | na 16 16 |        |             |
  93:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  96:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  97:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  98:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  99:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 100:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 101:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 102:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 102:001 | DONE ctl | na 16 16 |        |             |         .!a16
 103:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 104:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 105:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 106:000 | DONE wsp | na 16 16 |        |             |
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 109:000 | DONE wsp | na 16 16 |        |             |
 110:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 111:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 112:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 113:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 114:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 115:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 116:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 117:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 118:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 119:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 120:000 | DONE wsp | na 16 16 |        |             |
 121:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 122:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 123:000 | DONE ins | na 16 16 | 0060a3 | 9c ce 66    |                 stz 0066ce           
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 126:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 129:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 130:000 | DONE wsp | na 16 16 |        |             |
 131:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 132:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 133:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 134:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 137:000 | DONE ins | na 16 16 | 0060ac | 20 65 69    |                 jsr 006965           ( -- f )
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 140:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 143:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 145:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 146:000 | DONE ins | na 16 16 | 0060b2 | a9 a9 79    |                 lda.# 0079a9         
 147:000 | DONE ins | na 16 16 | 0060b5 | 4c 8e 73    |                 jmp 00738e           
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 151:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 152:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 153:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 154:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 155:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 156:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 157:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 160:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 163:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 164:000 | DONE ins | na 16 16 | 0060be | 20 13 73    |                 jsr 007313           
 165:000 | DONE wsp | na 16 16 |        |             |
 166:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 167:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 168:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 169:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 170:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE ins | na 16 16 | 0060c6 | a9 0f 7a    |                 lda.# 007a0f         
 173:000 | DONE ins | na 16 16 | 0060c9 | 4c 8e 73    |                 jmp 00738e           
 174:000 | DONE wsp | na 16 16 |        |             |
 175:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 176:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 177:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 178:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 179:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE ins | na 16 16 | 0060d0 | a9 d5 78    |                 lda.# 0078d5         
 182:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 183:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 184:000 | DONE ins | na 16 16 | 0060d5 | a9 d9 78    |                 lda.# 0078d9         fall through to quit_print
 185:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 186:000 | DONE ins | na 16 16 | 0060d8 | 20 94 73    |                 jsr 007394           
 187:000 | DONE wsp | na 16 16 |        |             |
 188:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 189:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 193:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 194:000 | DONE wsp | na 16 16 |        |             |
 195:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 196:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 197:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 198:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 199:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 200:000 | DONE lbl | na 16 16 | 0060df |             | xt_less                              
 201:000 | DONE ins | na 16 16 | 0060df | 98          |                 tya                  
 202:000 | DONE ins | na 16 16 | 0060e0 | a0 00 00    |                 ldy.# 0000           default is false
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | 38          |                 sec                  
 205:000 | DONE ins | na 16 16 | 0060e4 | f5 00       |                 sbc.dx 00            
 206:000 | DONE ins | na 16 16 | 0060e6 | f0 08       |                 beq 0060f0           the same is not greater
 207:000 | DONE ins | na 16 16 | 0060e8 | 50 03       |                 bvc 0060ed           no overflow, skip ahead
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 210:000 | DONE ins | na 16 16 | 0060ea | 49 00 80    |                 eor.# 8000           compliment negative flag
 211:000 | DONE wsp | na 16 16 |        |             |
 212:000 | DONE lbl | na 16 16 | 0060ed |             | xt_less_no_ov                        
 213:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 214:000 | DONE ins | na 16 16 | 0060ed | 30 01       |                 bmi 0060f0           
 215:000 | DONE ins | na 16 16 | 0060ef | 88          |                 dey                  
 216:000 | DONE lbl | na 16 16 | 0060f0 |             | xt_less_nip                          
 217:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 218:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 219:000 | DONE wsp | na 16 16 |        |             |
 220:000 | DONE lbl | na 16 16 | 0060f2 |             | z_less                               
 220:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 224:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 225:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 226:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 227:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_not-equal                         
 228:000 | DONE ins | na 16 16 | 0060f3 | 98          |                 tya                  
 229:000 | DONE ins | na 16 16 | 0060f4 | a0 00 00    |                 ldy.# 0000           default value is false
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE ins | na 16 16 | 0060f7 | d5 00       |                 cmp.dx 00            
 232:000 | DONE ins | na 16 16 | 0060f9 | f0 01       |                 beq 0060fc           
 233:000 | DONE ins | na 16 16 | 0060fb | 88          |                 dey                  wraps to 0FFFF (true)
 234:000 | DONE wsp | na 16 16 |        |             |
 235:000 | DONE lbl | na 16 16 | 0060fc |             | not-equal_equal                      ; yes, this is a silly name
 236:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 237:000 | DONE ins | na 16 16 | 0060fd | e8          |                 inx                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 0060fe |             | z_not-equal                          
 239:001 | DONE ins | na 16 16 | 0060fe | 60          |                 rts                  
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 243:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 244:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 245:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 246:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 247:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 248:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 249:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 250:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 251:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 252:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 253:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 254:000 | DONE lbl | na 16 16 | 0060ff |             | xt_lessnumber                        
 255:000 | DONE ins | na 16 16 | 0060ff | 20 90 68    |                 jsr 006890           
 256:000 | DONE ins | na 16 16 | 006102 | 84 28       |                 sty.d 000228         
 257:000 | DONE ins | na 16 16 | 006104 | b4 00       |                 ldy.dx 00            
 258:000 | DONE ins | na 16 16 | 006106 | e8          |                 inx                  
 259:000 | DONE ins | na 16 16 | 006107 | e8          |                 inx                  
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE lbl | na 16 16 | 006108 |             | z_lessnumber                         
 261:001 | DONE ins | na 16 16 | 006108 | 60          |                 rts                  
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE wsp | na 16 16 |        |             |
 264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 265:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 266:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 267:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 268:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 269:000 | DONE lbl | na 16 16 | 006109 |             | xt_greater                           
 270:000 | DONE ins | na 16 16 | 006109 | 98          |                 tya                  
 271:000 | DONE ins | na 16 16 | 00610a | a0 00 00    |                 ldy.# 0000           default is false
 272:000 | DONE wsp | na 16 16 |        |             |
 273:000 | DONE ins | na 16 16 | 00610d | 38          |                 sec                  
 274:000 | DONE ins | na 16 16 | 00610e | f5 00       |                 sbc.dx 00            
 275:000 | DONE ins | na 16 16 | 006110 | f0 08       |                 beq 00611a           the same is not greater
 276:000 | DONE ins | na 16 16 | 006112 | 50 03       |                 bvc 006117           no overflow, skip ahead
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 279:000 | DONE ins | na 16 16 | 006114 | 49 00 80    |                 eor.# 8000           compliment negative flag
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE lbl | na 16 16 | 006117 |             | xt_greater_no_ov                     
 282:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 283:000 | DONE ins | na 16 16 | 006117 | 10 01       |                 bpl 00611a           
 284:000 | DONE ins | na 16 16 | 006119 | 88          |                 dey                  
 285:000 | DONE lbl | na 16 16 | 00611a |             | xt_greater_nip                       
 286:000 | DONE ins | na 16 16 | 00611a | e8          |                 inx                  
 287:000 | DONE ins | na 16 16 | 00611b | e8          |                 inx                  
 288:000 | DONE wsp | na 16 16 |        |             |
 289:000 | DONE lbl | na 16 16 | 00611c |             | z_greater                            
 289:001 | DONE ins | na 16 16 | 00611c | 60          |                 rts                  
 290:000 | DONE wsp | na 16 16 |        |             |
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 293:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 294:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 295:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 296:000 | DONE cmt | na 16 16 |        |             | ; after CREATE
 297:000 | DONE lbl | na 16 16 | 00611d |             | xt_tobody                            
 298:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 299:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR. We just need to move xt
 300:000 | DONE cmt | na 16 16 |        |             |                 ; down by three bytes
 301:000 | DONE ins | na 16 16 | 00611d | c8          |                 iny                  
 302:000 | DONE ins | na 16 16 | 00611e | c8          |                 iny                  
 303:000 | DONE ins | na 16 16 | 00611f | c8          |                 iny                  
 304:000 | DONE wsp | na 16 16 |        |             |
 305:000 | DONE lbl | na 16 16 | 006120 |             | z_tobody                             
 305:001 | DONE ins | na 16 16 | 006120 | 60          |                 rts                  
 306:000 | DONE wsp | na 16 16 |        |             |
 307:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 308:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 309:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 310:000 | DONE lbl | na 16 16 | 006121 |             | xt_to-in                             
 311:000 | DONE ins | na 16 16 | 006121 | ca          |                 dex                  
 312:000 | DONE ins | na 16 16 | 006122 | ca          |                 dex                  
 313:000 | DONE ins | na 16 16 | 006123 | 94 00       |                 sty.dx 00            
 314:000 | DONE wsp | na 16 16 |        |             |
 315:000 | DONE ins | na 16 16 | 006125 | a0 12 02    |                 ldy.# 000212         >IN
 316:000 | DONE lbl | na 16 16 | 006128 |             | z_to-in                              
 316:001 | DONE ins | na 16 16 | 006128 | 60          |                 rts                  
 317:000 | DONE wsp | na 16 16 |        |             |
 318:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 319:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 320:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 321:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 322:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the origional
 323:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 324:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 325:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 326:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 327:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 328:000 | DONE lbl | na 16 16 | 006129 |             | xt_tonumber                          
 329:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 330:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 331:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 332:000 | DONE cmt | na 16 16 |        |             |                 ;
 333:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 334:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 335:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 336:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 337:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 338:000 | DONE wsp | na 16 16 |        |             |
 339:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 340:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 341:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 342:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 343:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 344:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 345:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 346:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 347:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 348:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 349:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 350:000 | DONE wsp | na 16 16 |        |             |
 351:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 352:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 353:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 354:000 | DONE ins | na 16 16 | 006129 | b5 04       |                 lda.dx 04            ud-lo
 355:000 | DONE ins | na 16 16 | 00612b | 85 20       |                 sta.d 000220         
 356:000 | DONE ins | na 16 16 | 00612d | b5 02       |                 lda.dx 02            ud-hi
 357:000 | DONE ins | na 16 16 | 00612f | 85 22       |                 sta.d 000222         
 358:000 | DONE wsp | na 16 16 |        |             |
 359:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 360:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 361:000 | DONE ins | na 16 16 | 006131 | ca          |                 dex                  
 362:000 | DONE ins | na 16 16 | 006132 | ca          |                 dex                  
 363:000 | DONE ins | na 16 16 | 006133 | 94 00       |                 sty.dx 00            
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE lbl | na 16 16 | 006135 |             | tonumber_loop                        
 366:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 367:000 | DONE ins | na 16 16 | 006135 | a1 02       |                 lda.dxi 02           
 368:000 | DONE ins | na 16 16 | 006137 | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 369:000 | DONE wsp | na 16 16 |        |             |
 370:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 371:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 372:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 373:000 | DONE ins | na 16 16 | 006138 | 20 c8 65    |                 jsr 0065c8           ( char -- n -1 | char 0 )
 374:000 | DONE wsp | na 16 16 |        |             |
 375:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 376:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 377:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 378:000 | DONE ins | na 16 16 | 00613b | 98          |                 tya                  
 379:000 | DONE ins | na 16 16 | 00613c | d0 06       |                 bne 006144           
 380:000 | DONE wsp | na 16 16 |        |             |
 381:000 | DONE ins | na 16 16 | 00613e | b4 00       |                 ldy.dx 00            
 382:000 | DONE ins | na 16 16 | 006140 | e8          |                 inx                  
 383:000 | DONE ins | na 16 16 | 006141 | e8          |                 inx                  
 384:000 | DONE ins | na 16 16 | 006142 | 80 35       |                 bra 006179           
 385:000 | DONE wsp | na 16 16 |        |             |
 386:000 | DONE lbl | na 16 16 | 006144 |             | tonumber_ok                          
 387:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 388:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 389:000 | DONE wsp | na 16 16 |        |             |
 390:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 391:000 | DONE ins | na 16 16 | 006144 | b5 00       |                 lda.dx 00            
 392:000 | DONE ins | na 16 16 | 006146 | 85 24       |                 sta.d 000224         
 393:000 | DONE wsp | na 16 16 |        |             |
 394:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 395:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 396:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 397:000 | DONE ins | na 16 16 | 006148 | a5 22       |                 lda.d 000222         
 398:000 | DONE ins | na 16 16 | 00614a | 95 00       |                 sta.dx 00            
 399:000 | DONE ins | na 16 16 | 00614c | a4 1c       |                 ldy.d 00021c         ( ud-lo ud-hi addr u ud-hi base )
 400:000 | DONE wsp | na 16 16 |        |             |
 401:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 402:000 | DONE ins | na 16 16 | 00614e | 20 17 6b    |                 jsr 006b17           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 403:000 | DONE wsp | na 16 16 |        |             |
 404:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 405:000 | DONE ins | na 16 16 | 006151 | b5 00       |                 lda.dx 00            ud-hi-lo
 406:000 | DONE ins | na 16 16 | 006153 | 85 26       |                 sta.d 000226         
 407:000 | DONE wsp | na 16 16 |        |             |
 408:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 409:000 | DONE ins | na 16 16 | 006155 | a5 20       |                 lda.d 000220         
 410:000 | DONE ins | na 16 16 | 006157 | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 411:000 | DONE ins | na 16 16 | 006159 | a4 1c       |                 ldy.d 00021c         ( ud-lo ud-hi addr u ud-lo base )
 412:000 | DONE wsp | na 16 16 |        |             |
 413:000 | DONE ins | na 16 16 | 00615b | 20 17 6b    |                 jsr 006b17           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 414:000 | DONE ins | na 16 16 | 00615e | 84 22       |                 sty.d 000222         
 415:000 | DONE ins | na 16 16 | 006160 | b5 00       |                 lda.dx 00            
 416:000 | DONE ins | na 16 16 | 006162 | 85 20       |                 sta.d 000220         
 417:000 | DONE wsp | na 16 16 |        |             |
 418:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 419:000 | DONE ins | na 16 16 | 006164 | a5 20       |                 lda.d 000220         
 420:000 | DONE ins | na 16 16 | 006166 | 18          |                 clc                  
 421:000 | DONE ins | na 16 16 | 006167 | 65 24       |                 adc.d 000224         
 422:000 | DONE ins | na 16 16 | 006169 | 85 20       |                 sta.d 000220         this is the new ud-lo
 423:000 | DONE ins | na 16 16 | 00616b | a5 22       |                 lda.d 000222         
 424:000 | DONE ins | na 16 16 | 00616d | 65 26       |                 adc.d 000226         
 425:000 | DONE ins | na 16 16 | 00616f | 85 22       |                 sta.d 000222         this is the new ud-hi
 426:000 | DONE wsp | na 16 16 |        |             |
 427:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 428:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 429:000 | DONE ins | na 16 16 | 006171 | e8          |                 inx                  
 430:000 | DONE ins | na 16 16 | 006172 | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 431:000 | DONE wsp | na 16 16 |        |             |
 432:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 433:000 | DONE ins | na 16 16 | 006173 | f6 02       |                 inc.dx 02            increase address
 434:000 | DONE ins | na 16 16 | 006175 | d6 00       |                 dec.dx 00            decrease length
 435:000 | DONE wsp | na 16 16 |        |             |
 436:000 | DONE ins | na 16 16 | 006177 | d0 bc       |                 bne 006135           
 437:000 | DONE wsp | na 16 16 |        |             |
 438:000 | DONE lbl | na 16 16 | 006179 |             | tonumber_done                        
 439:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 440:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 441:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 442:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 443:000 | DONE ins | na 16 16 | 006179 | b4 00       |                 ldy.dx 00            
 444:000 | DONE ins | na 16 16 | 00617b | e8          |                 inx                  
 445:000 | DONE ins | na 16 16 | 00617c | e8          |                 inx                  ( ud-lo ud-hi addr u )
 446:000 | DONE wsp | na 16 16 |        |             |
 447:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 448:000 | DONE ins | na 16 16 | 00617d | a5 20       |                 lda.d 000220         new ud-lo
 449:000 | DONE ins | na 16 16 | 00617f | 95 04       |                 sta.dx 04            
 450:000 | DONE ins | na 16 16 | 006181 | a5 22       |                 lda.d 000222         
 451:000 | DONE ins | na 16 16 | 006183 | 95 02       |                 sta.dx 02            new ud-hi
 452:000 | DONE wsp | na 16 16 |        |             |
 453:000 | DONE lbl | na 16 16 | 006185 |             | z_tonumber                           
 453:001 | DONE ins | na 16 16 | 006185 | 60          |                 rts                  
 454:000 | DONE wsp | na 16 16 |        |             |
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 457:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 458:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 459:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 460:000 | DONE lbl | na 16 16 | 006186 |             | xt_tor                               
 461:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 462:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 463:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 464:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 465:000 | DONE ins | na 16 16 | 006186 | 68          |                 pla                  
 466:000 | DONE wsp | na 16 16 |        |             |
 467:000 | DONE ins | na 16 16 | 006187 | 5a          |                 phy                  the actual work
 468:000 | DONE wsp | na 16 16 |        |             |
 469:000 | DONE ins | na 16 16 | 006188 | b4 00       |                 ldy.dx 00            DROP
 470:000 | DONE ins | na 16 16 | 00618a | e8          |                 inx                  
 471:000 | DONE ins | na 16 16 | 00618b | e8          |                 inx                  
 472:000 | DONE wsp | na 16 16 |        |             |
 473:000 | DONE ins | na 16 16 | 00618c | 48          |                 pha                  put return address back in place
 474:000 | DONE wsp | na 16 16 |        |             |
 475:000 | DONE lbl | na 16 16 | 00618d |             | z_tor                                
 475:001 | DONE ins | na 16 16 | 00618d | 60          |                 rts                  
 476:000 | DONE wsp | na 16 16 |        |             |
 477:000 | DONE wsp | na 16 16 |        |             |
 478:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 479:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 480:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 481:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE  Based on
 482:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 483:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 484:000 | DONE cmt | na 16 16 |        |             | ; focus on size.
 485:000 | DONE cmt | na 16 16 |        |             | ; TODO Once we know this works, move to assembler
 486:000 | DONE lbl | na 16 16 | 00618e |             | xt_dot                               
 487:000 | DONE ins | na 16 16 | 00618e | 20 9a 66    |                 jsr 00669a           ( n n )
 488:000 | DONE ins | na 16 16 | 006191 | 20 ac 63    |                 jsr 0063ac           ( n n )
 489:000 | DONE ins | na 16 16 | 006194 | 20 f4 62    |                 jsr 0062f4           ( n n 0 )
 490:000 | DONE ins | na 16 16 | 006197 | 20 ff 60    |                 jsr 0060ff           ( n n 0 )
 491:000 | DONE ins | na 16 16 | 00619a | 20 88 62    |                 jsr 006288           ( n ud )
 492:000 | DONE ins | na 16 16 | 00619d | 20 98 69    |                 jsr 006998           ( ud n )
 493:000 | DONE ins | na 16 16 | 0061a0 | 20 c3 69    |                 jsr 0069c3           ( ud )
 494:000 | DONE ins | na 16 16 | 0061a3 | 20 79 62    |                 jsr 006279           
 495:000 | DONE ins | na 16 16 | 0061a6 | 20 db 6a    |                 jsr 006adb           
 496:000 | DONE ins | na 16 16 | 0061a9 | 20 a0 6a    |                 jsr 006aa0           
 497:000 | DONE wsp | na 16 16 |        |             |
 498:000 | DONE lbl | na 16 16 | 0061ac |             | z_dot                                
 498:001 | DONE ins | na 16 16 | 0061ac | 60          |                 rts                  
 499:000 | DONE wsp | na 16 16 |        |             |
 500:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 501:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 502:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 503:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 504:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 505:000 | DONE lbl | na 16 16 | 0061ad |             | xt_dotparen                          
 506:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 507:000 | DONE ins | na 16 16 | 0061ad | ca          |                 dex                  
 508:000 | DONE ins | na 16 16 | 0061ae | ca          |                 dex                  
 509:000 | DONE ins | na 16 16 | 0061af | 94 00       |                 sty.dx 00            
 510:000 | DONE ins | na 16 16 | 0061b1 | a0 29 00    |                 ldy.# 29             
 511:000 | DONE wsp | na 16 16 |        |             |
 512:000 | DONE ins | na 16 16 | 0061b4 | 20 db 68    |                 jsr 0068db           ( -- addr u)
 513:000 | DONE ins | na 16 16 | 0061b7 | 20 db 6a    |                 jsr 006adb           
 514:000 | DONE wsp | na 16 16 |        |             |
 515:000 | DONE lbl | na 16 16 | 0061ba |             | z_dotparen                           
 515:001 | DONE ins | na 16 16 | 0061ba | 60          |                 rts                  
 516:000 | DONE wsp | na 16 16 |        |             |
 517:000 | DONE wsp | na 16 16 |        |             |
 518:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 519:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 520:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 521:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 522:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 523:000 | DONE lbl | na 16 16 | 0061bb |             | xt_dotquote                          
 524:000 | DONE ins | na 16 16 | 0061bb | ca          |                 dex                  
 525:000 | DONE ins | na 16 16 | 0061bc | ca          |                 dex                  
 526:000 | DONE ins | na 16 16 | 0061bd | 94 00       |                 sty.dx 00            
 527:000 | DONE ins | na 16 16 | 0061bf | a0 22 00    |                 ldy.# 0022           ASCII for "
 528:000 | DONE wsp | na 16 16 |        |             |
 529:000 | DONE ins | na 16 16 | 0061c2 | 20 db 68    |                 jsr 0068db           
 530:000 | DONE ins | na 16 16 | 0061c5 | 20 d1 69    |                 jsr 0069d1           
 531:000 | DONE wsp | na 16 16 |        |             |
 532:000 | DONE ins | na 16 16 | 0061c8 | f4 db 6a    |                 phe.# 006adb         
 533:000 | DONE ins | na 16 16 | 0061cb | 20 6d 73    |                 jsr 00736d           
 534:000 | DONE wsp | na 16 16 |        |             |
 535:000 | DONE ins | na 16 16 | 0061ce | 60          |                 rts                  
 536:000 | DONE lbl | na 16 16 | 0061cf |             | z_dotquote                           
 537:000 | DONE wsp | na 16 16 |        |             |
 538:000 | DONE wsp | na 16 16 |        |             |
 539:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 540:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 541:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 542:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 543:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 544:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 545:000 | DONE lbl | na 16 16 | 0061cf |             | xt_dots                              
 546:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 547:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 548:000 | DONE ins | na 16 16 | 0061cf | 20 28 66    |                 jsr 006628           ( -- u)
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 551:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 552:000 | DONE ins | na 16 16 | 0061d2 | a9 3c 00    |                 lda.# 3c             
 553:000 | DONE ins | na 16 16 | 0061d5 | 20 36 60    |                 jsr 006036           
 554:000 | DONE wsp | na 16 16 |        |             |
 555:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 556:000 | DONE ins | na 16 16 | 0061d8 | 98          |                 tya                  
 557:000 | DONE ins | na 16 16 | 0061d9 | 29 00 ff    |                 and.# 0ff00          
 558:000 | DONE ins | na 16 16 | 0061dc | eb          |                 xba                  
 559:000 | DONE ins | na 16 16 | 0061dd | 20 ac 73    |                 jsr 0073ac           
 560:000 | DONE ins | na 16 16 | 0061e0 | 98          |                 tya                  
 561:000 | DONE ins | na 16 16 | 0061e1 | 29 ff 00    |                 and.# 00ff           
 562:000 | DONE ins | na 16 16 | 0061e4 | 20 ac 73    |                 jsr 0073ac           
 563:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 564:000 | DONE wsp | na 16 16 |        |             |
 565:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 566:000 | DONE ins | na 16 16 | 0061e7 | a9 3e 00    |                 lda.# 3e             
 567:000 | DONE ins | na 16 16 | 0061ea | 20 36 60    |                 jsr 006036           
 568:000 | DONE ins | na 16 16 | 0061ed | 20 a0 6a    |                 jsr 006aa0           
 569:000 | DONE wsp | na 16 16 |        |             |
 570:000 | DONE wsp | na 16 16 |        |             |
 571:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 572:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 573:000 | DONE ins | na 16 16 | 0061f0 | 98          |                 tya                  force flag test
 574:000 | DONE ins | na 16 16 | 0061f1 | f0 20       |                 beq 006213           
 575:000 | DONE wsp | na 16 16 |        |             |
 576:000 | DONE lbl | na 16 16 | 0061f3 |             | dots_not_empty                       
 577:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 578:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 579:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 580:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 581:000 | DONE wsp | na 16 16 |        |             |
 582:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 583:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 584:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 585:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 586:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles), and we save the two bytes.
 587:000 | DONE ins | na 16 16 | 0061f3 | da          |                 phx                  
 588:000 | DONE wsp | na 16 16 |        |             |
 589:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 590:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped.
 591:000 | DONE cmt | na 16 16 |        |             |                 ; See docs/INTERNALS.md for details
 592:000 | DONE ins | na 16 16 | 0061f4 | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
 593:000 | DONE ins | na 16 16 | 0061f7 | ca          |                 dex                  
 594:000 | DONE ins | na 16 16 | 0061f8 | ca          |                 dex                  points to dsp0-2, which is also garbage
 595:000 | DONE wsp | na 16 16 |        |             |
 596:000 | DONE lbl | na 16 16 | 0061f9 |             | dots_loop                            
 597:000 | DONE ins | na 16 16 | 0061f9 | ca          |                 dex                  get next element on DS, initially dsp0-4
 598:000 | DONE ins | na 16 16 | 0061fa | ca          |                 dex                  
 599:000 | DONE wsp | na 16 16 |        |             |
 600:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 601:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 602:000 | DONE ins | na 16 16 | 0061fb | b5 00       |                 lda.dx 00            
 603:000 | DONE ins | na 16 16 | 0061fd | 29 00 ff    |                 and.# 0ff00          
 604:000 | DONE ins | na 16 16 | 006200 | eb          |                 xba                  
 605:000 | DONE ins | na 16 16 | 006201 | 20 ac 73    |                 jsr 0073ac           
 606:000 | DONE ins | na 16 16 | 006204 | b5 00       |                 lda.dx 00            
 607:000 | DONE ins | na 16 16 | 006206 | 29 ff 00    |                 and.# 00ff           
 608:000 | DONE ins | na 16 16 | 006209 | 20 ac 73    |                 jsr 0073ac           
 609:000 | DONE ins | na 16 16 | 00620c | 20 a0 6a    |                 jsr 006aa0           
 610:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 611:000 | DONE wsp | na 16 16 |        |             |
 612:000 | DONE ins | na 16 16 | 00620f | 88          |                 dey                  
 613:000 | DONE ins | na 16 16 | 006210 | d0 e7       |                 bne 0061f9           
 614:000 | DONE wsp | na 16 16 |        |             |
 615:000 | DONE ins | na 16 16 | 006212 | fa          |                 plx                  restore original DSP
 616:000 | DONE wsp | na 16 16 |        |             |
 617:000 | DONE lbl | na 16 16 | 006213 |             | dots_done                            
 618:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 619:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 620:000 | DONE ins | na 16 16 | 006213 | 20 6e 66    |                 jsr 00666e           
 621:000 | DONE wsp | na 16 16 |        |             |
 622:000 | DONE lbl | na 16 16 | 006216 |             | z_dots                               
 622:001 | DONE ins | na 16 16 | 006216 | 60          |                 rts                  
 623:000 | DONE wsp | na 16 16 |        |             |
 624:000 | DONE wsp | na 16 16 |        |             |
 625:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 626:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 627:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 628:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 629:000 | DONE cmt | na 16 16 |        |             | ; aligned
 630:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 631:000 | DONE cmt | na 16 16 |        |             | ;               tya
 632:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 633:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 634:000 | DONE cmt | na 16 16 |        |             | ;               iny
 635:000 | DONE cmt | na 16 16 |        |             | ;               iny
 636:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 637:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 638:000 | DONE cmt | na 16 16 |        |             | ;               inx
 639:000 | DONE cmt | na 16 16 |        |             | ;               inx
 640:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 641:000 | DONE lbl | na 16 16 | 006217 |             | xt_comma                             
 642:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 643:000 | DONE ins | na 16 16 | 006217 | 98          |                 tya                  
 644:000 | DONE ins | na 16 16 | 006218 | 92 00       |                 sta.di 000200        STA (CP)
 645:000 | DONE ins | na 16 16 | 00621a | e6 00       |                 inc.d 000200         
 646:000 | DONE ins | na 16 16 | 00621c | e6 00       |                 inc.d 000200         
 647:000 | DONE wsp | na 16 16 |        |             |
 648:000 | DONE ins | na 16 16 | 00621e | b4 00       |                 ldy.dx 00            
 649:000 | DONE ins | na 16 16 | 006220 | e8          |                 inx                  
 650:000 | DONE ins | na 16 16 | 006221 | e8          |                 inx                  
 651:000 | DONE wsp | na 16 16 |        |             |
 652:000 | DONE lbl | na 16 16 | 006222 |             | z_comma                              
 652:001 | DONE ins | na 16 16 | 006222 | 60          |                 rts                  
 653:000 | DONE wsp | na 16 16 |        |             |
 654:000 | DONE wsp | na 16 16 |        |             |
 655:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 656:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 657:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 658:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 659:000 | DONE lbl | na 16 16 | 006223 |             | xt_colon                             
 660:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 661:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 662:000 | DONE ins | na 16 16 | 006223 | a5 14       |                 lda.d 000214         
 663:000 | DONE ins | na 16 16 | 006225 | f0 06       |                 beq 00622d           
 664:000 | DONE wsp | na 16 16 |        |             |
 665:000 | DONE ins | na 16 16 | 006227 | a9 f7 79    |                 lda.# 0079f7         
 666:000 | DONE ins | na 16 16 | 00622a | 4c 8e 73    |                 jmp 00738e           
 667:000 | DONE lbl | na 16 16 | 00622d |             | @                                    
 668:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 669:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 670:000 | DONE ins | na 16 16 | 00622d | e6 14       |                 inc.d 000214         
 671:000 | DONE wsp | na 16 16 |        |             |
 672:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 673:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 674:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 675:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 676:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 677:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 678:000 | DONE ins | na 16 16 | 00622f | a5 02       |                 lda.d 000202         
 679:000 | DONE ins | na 16 16 | 006231 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 680:000 | DONE wsp | na 16 16 |        |             |
 681:000 | DONE ins | na 16 16 | 006232 | 20 55 65    |                 jsr 006555           
 682:000 | DONE wsp | na 16 16 |        |             |
 683:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 684:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 685:000 | DONE ins | na 16 16 | 006235 | a5 02       |                 lda.d 000202         
 686:000 | DONE ins | na 16 16 | 006237 | 85 1e       |                 sta.d 00021e         
 687:000 | DONE ins | na 16 16 | 006239 | 68          |                 pla                  
 688:000 | DONE ins | na 16 16 | 00623a | 85 02       |                 sta.d 000202         
 689:000 | DONE wsp | na 16 16 |        |             |
 690:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 691:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 692:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 693:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 694:000 | DONE ins | na 16 16 | 00623c | a5 00       |                 lda.d 000200         
 695:000 | DONE ins | na 16 16 | 00623e | 38          |                 sec                  
 696:000 | DONE ins | na 16 16 | 00623f | e9 03 00    |                 sbc.# 0003           
 697:000 | DONE ins | na 16 16 | 006242 | 85 00       |                 sta.d 000200         
 698:000 | DONE wsp | na 16 16 |        |             |
 699:000 | DONE lbl | na 16 16 | 006244 |             | z_colon                              
 699:001 | DONE ins | na 16 16 | 006244 | 60          |                 rts                  
 700:000 | DONE wsp | na 16 16 |        |             |
 701:000 | DONE wsp | na 16 16 |        |             |
 702:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 703:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 704:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 705:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 706:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 707:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 708:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 709:000 | DONE lbl | na 16 16 | 006245 |             | xt_semicolon                         
 710:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 711:000 | DONE ins | na 16 16 | 006245 | 84 06       |                 sty.d 000206         
 712:000 | DONE wsp | na 16 16 |        |             |
 713:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 714:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 715:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 716:000 | DONE ins | na 16 16 | 006247 | a0 06 00    |                 ldy.# 0006           
 717:000 | DONE ins | na 16 16 | 00624a | a5 00       |                 lda.d 000200         
 718:000 | DONE ins | na 16 16 | 00624c | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 719:000 | DONE wsp | na 16 16 |        |             |
 720:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 721:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 722:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 723:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 724:000 | DONE ins | na 16 16 | 00624e | a9 60 00    |                 lda.# 60             opcode for RTS
 725:000 | DONE ins | na 16 16 | 006251 | 92 00       |                 sta.di 000200        STA (CP)
 726:000 | DONE ins | na 16 16 | 006253 | e6 00       |                 inc.d 000200         MSB will be overwritten
 727:000 | DONE wsp | na 16 16 |        |             |
 728:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 729:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 730:000 | DONE ins | na 16 16 | 006255 | a5 1e       |                 lda.d 00021e         
 731:000 | DONE ins | na 16 16 | 006257 | 85 02       |                 sta.d 000202         
 732:000 | DONE wsp | na 16 16 |        |             |
 733:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 734:000 | DONE ins | na 16 16 | 006259 | a4 06       |                 ldy.d 000206         
 735:000 | DONE wsp | na 16 16 |        |             |
 736:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 737:000 | DONE ins | na 16 16 | 00625b | 64 14       |                 stz.d 000214         
 738:000 | DONE wsp | na 16 16 |        |             |
 739:000 | DONE lbl | na 16 16 | 00625d |             | z_semicolon                          
 739:001 | DONE ins | na 16 16 | 00625d | 60          |                 rts                  
 740:000 | DONE wsp | na 16 16 |        |             |
 741:000 | DONE wsp | na 16 16 |        |             |
 742:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 743:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 744:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 745:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 746:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 747:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 748:000 | DONE lbl | na 16 16 | 00625e |             | xt_hash                              
 749:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 750:000 | DONE ins | na 16 16 | 00625e | 20 7f 64    |                 jsr 00647f           ( ud addr )
 751:000 | DONE ins | na 16 16 | 006261 | 20 ac 62    |                 jsr 0062ac           ( ud u )
 752:000 | DONE ins | na 16 16 | 006264 | 20 fc 6a    |                 jsr 006afc           ( rem ud )
 753:000 | DONE ins | na 16 16 | 006267 | 20 98 69    |                 jsr 006998           ( ud rem )
 754:000 | DONE wsp | na 16 16 |        |             |
 755:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 756:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed
 757:000 | DONE ins | na 16 16 | 00626a | e2 20       |                 sep 20               
 757:001 | DONE ctl | na  8 16 |        |             |         .!a8
 758:000 | DONE ins | na  8 16 | 00626c | b9 59 7a    |                 lda.y 007a59         
 759:000 | DONE ins | na  8 16 | 00626f | c2 20       |                 rep 20               
 759:001 | DONE ctl | na 16 16 |        |             |         .!a16
 760:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 761:000 | DONE ins | na 16 16 | 006271 | 29 ff 00    |                 and.# 00ff           
 762:000 | DONE ins | na 16 16 | 006274 | a8          |                 tay                  ( ud char )
 763:000 | DONE wsp | na 16 16 |        |             |
 764:000 | DONE ins | na 16 16 | 006275 | 20 4f 67    |                 jsr 00674f           JSR/RTS
 765:000 | DONE wsp | na 16 16 |        |             |
 766:000 | DONE lbl | na 16 16 | 006278 |             | z_hash                               
 766:001 | DONE ins | na 16 16 | 006278 | 60          |                 rts                  
 767:000 | DONE wsp | na 16 16 |        |             |
 768:000 | DONE wsp | na 16 16 |        |             |
 769:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 770:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 771:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 772:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 773:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 774:000 | DONE lbl | na 16 16 | 006279 |             | xt_numbermore                        
 775:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 776:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 777:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 778:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 779:000 | DONE ins | na 16 16 | 006279 | a4 28       |                 ldy.d 000228         
 780:000 | DONE ins | na 16 16 | 00627b | 94 00       |                 sty.dx 00            ( addr addr )
 781:000 | DONE wsp | na 16 16 |        |             |
 782:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 783:000 | DONE ins | na 16 16 | 00627d | 20 90 68    |                 jsr 006890           ( addr addr pad )
 784:000 | DONE wsp | na 16 16 |        |             |
 785:000 | DONE ins | na 16 16 | 006280 | 38          |                 sec                  
 786:000 | DONE ins | na 16 16 | 006281 | 98          |                 tya                  
 787:000 | DONE ins | na 16 16 | 006282 | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 788:000 | DONE ins | na 16 16 | 006284 | a8          |                 tay                  ( addr addr n )
 789:000 | DONE wsp | na 16 16 |        |             |
 790:000 | DONE ins | na 16 16 | 006285 | e8          |                 inx                  NIP
 791:000 | DONE ins | na 16 16 | 006286 | e8          |                 inx                  
 792:000 | DONE wsp | na 16 16 |        |             |
 793:000 | DONE lbl | na 16 16 | 006287 |             | z_numbermore                         
 793:001 | DONE ins | na 16 16 | 006287 | 60          |                 rts                  
 794:000 | DONE wsp | na 16 16 |        |             |
 795:000 | DONE wsp | na 16 16 |        |             |
 796:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 797:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 798:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 799:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 800:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 801:000 | DONE lbl | na 16 16 | 006288 |             | xt_hashs                             
 802:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 803:000 | DONE lbl | na 16 16 | 006288 |             | hashs_loop                           
 804:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 805:000 | DONE ins | na 16 16 | 006288 | 20 5e 62    |                 jsr 00625e           ( ud -- ud )
 806:000 | DONE wsp | na 16 16 |        |             |
 807:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 808:000 | DONE ins | na 16 16 | 00628b | 98          |                 tya                  
 809:000 | DONE ins | na 16 16 | 00628c | 15 00       |                 ora.dx 00            
 810:000 | DONE ins | na 16 16 | 00628e | d0 f8       |                 bne 006288           
 811:000 | DONE wsp | na 16 16 |        |             |
 812:000 | DONE lbl | na 16 16 | 006290 |             | z_hashs                              
 812:001 | DONE ins | na 16 16 | 006290 | 60          |                 rts                  
 813:000 | DONE wsp | na 16 16 |        |             |
 814:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 815:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 816:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 817:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 818:000 | DONE lbl | na 16 16 | 006291 |             | xt_question                          
 819:000 | DONE ins | na 16 16 | 006291 | 20 ac 62    |                 jsr 0062ac           
 820:000 | DONE ins | na 16 16 | 006294 | 20 8e 61    |                 jsr 00618e           
 821:000 | DONE wsp | na 16 16 |        |             |
 822:000 | DONE lbl | na 16 16 | 006297 |             | z_question                           
 822:001 | DONE ins | na 16 16 | 006297 | 60          |                 rts                  
 823:000 | DONE wsp | na 16 16 |        |             |
 824:000 | DONE wsp | na 16 16 |        |             |
 825:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 826:000 | DONE cmt | na 16 16 |        |             | ; QDUP ( n -- 0 | n n ) X bytes / X cycles
 827:000 | DONE cmt | na 16 16 |        |             | ; If top element on Data Stack is not zero, duplicate it
 828:000 | DONE lbl | na 16 16 | 006298 |             | xt_qdup                              
 829:000 | DONE ins | na 16 16 | 006298 | 98          |                 tya                  
 830:000 | DONE ins | na 16 16 | 006299 | f0 04       |                 beq 00629f           
 831:000 | DONE wsp | na 16 16 |        |             |
 832:000 | DONE ins | na 16 16 | 00629b | ca          |                 dex                  
 833:000 | DONE ins | na 16 16 | 00629c | ca          |                 dex                  
 834:000 | DONE ins | na 16 16 | 00629d | 94 00       |                 sty.dx 00            
 835:000 | DONE wsp | na 16 16 |        |             |
 836:000 | DONE lbl | na 16 16 | 00629f |             | z_qdup                               
 836:001 | DONE ins | na 16 16 | 00629f | 60          |                 rts                  
 837:000 | DONE wsp | na 16 16 |        |             |
 838:000 | DONE wsp | na 16 16 |        |             |
 839:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 840:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 841:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 842:000 | DONE lbl | na 16 16 | 0062a0 |             | xt_store                             
 843:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 844:000 | DONE ins | na 16 16 | 0062a0 | b5 00       |                 lda.dx 00            NOS has value
 845:000 | DONE ins | na 16 16 | 0062a2 | 99 00 00    |                 sta.y 0000           
 846:000 | DONE wsp | na 16 16 |        |             |
 847:000 | DONE ins | na 16 16 | 0062a5 | b4 02       |                 ldy.dx 02            
 848:000 | DONE ins | na 16 16 | 0062a7 | e8          |                 inx                  
 849:000 | DONE ins | na 16 16 | 0062a8 | e8          |                 inx                  
 850:000 | DONE ins | na 16 16 | 0062a9 | e8          |                 inx                  
 851:000 | DONE ins | na 16 16 | 0062aa | e8          |                 inx                  
 852:000 | DONE wsp | na 16 16 |        |             |
 853:000 | DONE lbl | na 16 16 | 0062ab |             | z_store                              
 853:001 | DONE ins | na 16 16 | 0062ab | 60          |                 rts                  
 854:000 | DONE wsp | na 16 16 |        |             |
 855:000 | DONE wsp | na 16 16 |        |             |
 856:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 857:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 858:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 859:000 | DONE lbl | na 16 16 | 0062ac |             | xt_fetch                             
 860:000 | DONE ins | na 16 16 | 0062ac | b9 00 00    |                 lda.y 0000           
 861:000 | DONE ins | na 16 16 | 0062af | a8          |                 tay                  
 862:000 | DONE wsp | na 16 16 |        |             |
 863:000 | DONE lbl | na 16 16 | 0062b0 |             | z_fetch                              
 863:001 | DONE ins | na 16 16 | 0062b0 | 60          |                 rts                  
 864:000 | DONE wsp | na 16 16 |        |             |
 865:000 | DONE wsp | na 16 16 |        |             |
 866:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 867:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 868:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 869:000 | DONE lbl | na 16 16 | 0062b1 |             | xt_brackettick                       
 870:000 | DONE ins | na 16 16 | 0062b1 | 20 73 63    |                 jsr 006373           
 871:000 | DONE ins | na 16 16 | 0062b4 | 4c 75 67    |                 jmp 006775           JSR/RTS
 872:000 | DONE lbl | na 16 16 | 0062b7 |             | z_brackettick                        
 873:000 | DONE wsp | na 16 16 |        |             |
 874:000 | DONE wsp | na 16 16 |        |             |
 875:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 876:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 877:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 878:000 | DONE lbl | na 16 16 | 0062b7 |             | xt_leftbracket                       
 879:000 | DONE ins | na 16 16 | 0062b7 | 64 14       |                 stz.d 000214         
 880:000 | DONE lbl | na 16 16 | 0062b9 |             | z_leftbracket                        
 880:001 | DONE ins | na 16 16 | 0062b9 | 60          |                 rts                  
 881:000 | DONE wsp | na 16 16 |        |             |
 882:000 | DONE wsp | na 16 16 |        |             |
 883:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 884:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 885:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 886:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 887:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 888:000 | DONE lbl | na 16 16 | 0062ba |             | xt_rightbracket                      
 889:000 | DONE ins | na 16 16 | 0062ba | a9 01 00    |                 lda.# 0001           
 890:000 | DONE ins | na 16 16 | 0062bd | 85 14       |                 sta.d 000214         
 891:000 | DONE wsp | na 16 16 |        |             |
 892:000 | DONE lbl | na 16 16 | 0062bf |             | z_rightbracket                       
 892:001 | DONE ins | na 16 16 | 0062bf | 60          |                 rts                  
 893:000 | DONE wsp | na 16 16 |        |             |
 894:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 895:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
 896:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 897:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
 898:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
 899:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
 900:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 901:000 | DONE lbl | na 16 16 | 0062c0 |             | xt_bracketchar                       
 902:000 | DONE ins | na 16 16 | 0062c0 | 20 ec 64    |                 jsr 0064ec           
 903:000 | DONE ins | na 16 16 | 0062c3 | 20 75 67    |                 jsr 006775           
 904:000 | DONE wsp | na 16 16 |        |             |
 905:000 | DONE lbl | na 16 16 | 0062c6 |             | z_bracketchar                        
 905:001 | DONE ins | na 16 16 | 0062c6 | 60          |                 rts                  
 906:000 | DONE wsp | na 16 16 |        |             |
 907:000 | DONE wsp | na 16 16 |        |             |
 908:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 909:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
 910:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
 911:000 | DONE lbl | na 16 16 | 0062c7 |             | xt_backslash                         
 912:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 913:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
 914:000 | DONE ins | na 16 16 | 0062c7 | a5 0e       |                 lda.d 00020e         
 915:000 | DONE ins | na 16 16 | 0062c9 | 85 12       |                 sta.d 000212         
 916:000 | DONE wsp | na 16 16 |        |             |
 917:000 | DONE lbl | na 16 16 | 0062cb |             | z_backslash                          
 917:001 | DONE ins | na 16 16 | 0062cb | 60          |                 rts                  
 918:000 | DONE wsp | na 16 16 |        |             |
 919:000 | DONE wsp | na 16 16 |        |             |
 920:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 921:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 922:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 923:000 | DONE lbl | na 16 16 | 0062cc |             | xt_plus                              
 924:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 925:000 | DONE ins | na 16 16 | 0062cc | 98          |                 tya                  
 926:000 | DONE ins | na 16 16 | 0062cd | 18          |                 clc                  
 927:000 | DONE ins | na 16 16 | 0062ce | 75 00       |                 adc.dx 00            
 928:000 | DONE ins | na 16 16 | 0062d0 | a8          |                 tay                  
 929:000 | DONE ins | na 16 16 | 0062d1 | e8          |                 inx                  
 930:000 | DONE ins | na 16 16 | 0062d2 | e8          |                 inx                  
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE lbl | na 16 16 | 0062d3 |             | z_plus                               
 932:001 | DONE ins | na 16 16 | 0062d3 | 60          |                 rts                  
 933:000 | DONE wsp | na 16 16 |        |             |
 934:000 | DONE wsp | na 16 16 |        |             |
 935:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 936:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 937:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 938:000 | DONE lbl | na 16 16 | 0062d4 |             | xt_minus                             
 939:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 940:000 | DONE ins | na 16 16 | 0062d4 | 98          |                 tya                  
 941:000 | DONE ins | na 16 16 | 0062d5 | 49 ff ff    |                 eor.# 0ffff          
 942:000 | DONE wsp | na 16 16 |        |             |
 943:000 | DONE ins | na 16 16 | 0062d8 | 38          |                 sec                  not CLC
 944:000 | DONE ins | na 16 16 | 0062d9 | 75 00       |                 adc.dx 00            
 945:000 | DONE wsp | na 16 16 |        |             |
 946:000 | DONE ins | na 16 16 | 0062db | a8          |                 tay                  
 947:000 | DONE ins | na 16 16 | 0062dc | e8          |                 inx                  
 948:000 | DONE ins | na 16 16 | 0062dd | e8          |                 inx                  
 949:000 | DONE wsp | na 16 16 |        |             |
 950:000 | DONE lbl | na 16 16 | 0062de |             | z_minus                              
 950:001 | DONE ins | na 16 16 | 0062de | 60          |                 rts                  
 951:000 | DONE wsp | na 16 16 |        |             |
 952:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 953:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
 954:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
 955:000 | DONE lbl | na 16 16 | 0062df |             | xt_mrot                              
 956:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 957:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 958:000 | DONE ins | na 16 16 | 0062df | b5 02       |                 lda.dx 02            save a
 959:000 | DONE ins | na 16 16 | 0062e1 | 94 02       |                 sty.dx 02            move c to 3OS
 960:000 | DONE ins | na 16 16 | 0062e3 | b4 00       |                 ldy.dx 00            move b to TOS
 961:000 | DONE ins | na 16 16 | 0062e5 | 95 00       |                 sta.dx 00            save a as NOS
 962:000 | DONE wsp | na 16 16 |        |             |
 963:000 | DONE lbl | na 16 16 | 0062e7 |             | z_mrot                               
 963:001 | DONE ins | na 16 16 | 0062e7 | 60          |                 rts                  
 964:000 | DONE wsp | na 16 16 |        |             |
 965:000 | DONE wsp | na 16 16 |        |             |
 966:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 967:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
 968:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
 969:000 | DONE lbl | na 16 16 | 0062e8 |             | xt_equal                             
 970:000 | DONE ins | na 16 16 | 0062e8 | 98          |                 tya                  
 971:000 | DONE ins | na 16 16 | 0062e9 | a0 00 00    |                 ldy.# 0000           default value is false
 972:000 | DONE wsp | na 16 16 |        |             |
 973:000 | DONE ins | na 16 16 | 0062ec | d5 00       |                 cmp.dx 00            
 974:000 | DONE ins | na 16 16 | 0062ee | d0 01       |                 bne 0062f1           
 975:000 | DONE ins | na 16 16 | 0062f0 | 88          |                 dey                  wraps to 0FFFF (true)
 976:000 | DONE wsp | na 16 16 |        |             |
 977:000 | DONE lbl | na 16 16 | 0062f1 |             | equal_not                            
 978:000 | DONE ins | na 16 16 | 0062f1 | e8          |                 inx                  
 979:000 | DONE ins | na 16 16 | 0062f2 | e8          |                 inx                  
 980:000 | DONE wsp | na 16 16 |        |             |
 981:000 | DONE lbl | na 16 16 | 0062f3 |             | z_equal                              
 981:001 | DONE ins | na 16 16 | 0062f3 | 60          |                 rts                  
 982:000 | DONE wsp | na 16 16 |        |             |
 983:000 | DONE wsp | na 16 16 |        |             |
 984:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 985:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 986:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 987:000 | DONE lbl | na 16 16 | 0062f4 |             | xt_zero                              
 988:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 989:000 | DONE ins | na 16 16 | 0062f4 | ca          |                 dex                  
 990:000 | DONE ins | na 16 16 | 0062f5 | ca          |                 dex                  
 991:000 | DONE ins | na 16 16 | 0062f6 | 94 00       |                 sty.dx 00            
 992:000 | DONE ins | na 16 16 | 0062f8 | a0 00 00    |                 ldy.# 0000           
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE lbl | na 16 16 | 0062fb |             | z_zero                               
 994:001 | DONE ins | na 16 16 | 0062fb | 60          |                 rts                  
 995:000 | DONE wsp | na 16 16 |        |             |
 996:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 997:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
 998:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
 999:000 | DONE lbl | na 16 16 | 0062fc |             | xt_zero-equal                        
1000:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1001:000 | DONE ins | na 16 16 | 0062fc | 98          |                 tya                  force flag check
1002:000 | DONE ins | na 16 16 | 0062fd | d0 05       |                 bne 006304           
1003:000 | DONE wsp | na 16 16 |        |             |
1004:000 | DONE ins | na 16 16 | 0062ff | a0 ff ff    |                 ldy.# 0ffff          
1005:000 | DONE ins | na 16 16 | 006302 | 80 03       |                 bra 006307           
1006:000 | DONE lbl | na 16 16 | 006304 |             | ze_not_zero                          
1007:000 | DONE ins | na 16 16 | 006304 | a0 00 00    |                 ldy.# 0000           
1008:000 | DONE wsp | na 16 16 |        |             |
1009:000 | DONE lbl | na 16 16 | 006307 |             | z_zero-equal                         
1009:001 | DONE ins | na 16 16 | 006307 | 60          |                 rts                  
1010:000 | DONE wsp | na 16 16 |        |             |
1011:000 | DONE wsp | na 16 16 |        |             |
1012:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1013:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1014:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1015:000 | DONE lbl | na 16 16 | 006308 |             | xt_zero-less                         
1016:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1017:000 | DONE ins | na 16 16 | 006308 | 98          |                 tya                  force flag check
1018:000 | DONE ins | na 16 16 | 006309 | 30 05       |                 bmi 006310           
1019:000 | DONE wsp | na 16 16 |        |             |
1020:000 | DONE ins | na 16 16 | 00630b | a0 00 00    |                 ldy.# 0000           
1021:000 | DONE ins | na 16 16 | 00630e | 80 03       |                 bra 006313           
1022:000 | DONE wsp | na 16 16 |        |             |
1023:000 | DONE lbl | na 16 16 | 006310 |             | zero-less-is-less                    
1024:000 | DONE ins | na 16 16 | 006310 | a0 ff ff    |                 ldy.# 0ffff          
1025:000 | DONE wsp | na 16 16 |        |             |
1026:000 | DONE lbl | na 16 16 | 006313 |             | z_zero-less                          
1026:001 | DONE ins | na 16 16 | 006313 | 60          |                 rts                  
1027:000 | DONE wsp | na 16 16 |        |             |
1028:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1029:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1030:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1031:000 | DONE lbl | na 16 16 | 006314 |             | xt_zero-notequal                     
1032:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1033:000 | DONE ins | na 16 16 | 006314 | 98          |                 tya                  force flag check
1034:000 | DONE ins | na 16 16 | 006315 | f0 05       |                 beq 00631c           
1035:000 | DONE ins | na 16 16 | 006317 | a0 ff ff    |                 ldy.# 0ffff          
1036:000 | DONE ins | na 16 16 | 00631a | 80 03       |                 bra 00631f           
1037:000 | DONE lbl | na 16 16 | 00631c |             | zne_is_zero                          
1038:000 | DONE ins | na 16 16 | 00631c | a0 00 00    |                 ldy.# 0000           
1039:000 | DONE lbl | na 16 16 | 00631f |             | z_zero-notequal                      
1040:000 | DONE ins | na 16 16 | 00631f | 60          |                 rts                  
1041:000 | DONE wsp | na 16 16 |        |             |
1042:000 | DONE wsp | na 16 16 |        |             |
1043:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1044:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1045:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1046:000 | DONE lbl | na 16 16 | 006320 |             | xt_zero-more                         
1047:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1048:000 | DONE ins | na 16 16 | 006320 | a9 00 00    |                 lda.# 0000           default is false
1049:000 | DONE wsp | na 16 16 |        |             |
1050:000 | DONE ins | na 16 16 | 006323 | 88          |                 dey                  
1051:000 | DONE ins | na 16 16 | 006324 | 10 02       |                 bpl 006328           was at least 1
1052:000 | DONE wsp | na 16 16 |        |             |
1053:000 | DONE ins | na 16 16 | 006326 | 80 01       |                 bra 006329           nope, stays false
1054:000 | DONE wsp | na 16 16 |        |             |
1055:000 | DONE lbl | na 16 16 | 006328 |             | zero-more_true                       
1056:000 | DONE ins | na 16 16 | 006328 | 3a          |                 dec.a                wraps to 0ffff, true
1057:000 | DONE lbl | na 16 16 | 006329 |             | zero-more_done                       
1058:000 | DONE ins | na 16 16 | 006329 | a8          |                 tay                  
1059:000 | DONE wsp | na 16 16 |        |             |
1060:000 | DONE lbl | na 16 16 | 00632a |             | z_zero-more                          
1060:001 | DONE ins | na 16 16 | 00632a | 60          |                 rts                  
1061:000 | DONE wsp | na 16 16 |        |             |
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1064:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1065:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1066:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1067:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1068:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmpbranch
1069:000 | DONE lbl | na 16 16 | 00632b |             | xt_zbranch                           
1070:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1071:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1072:000 | DONE ins | na 16 16 | 00632b | f4 32 63    |                 phe.# 006332         
1073:000 | DONE ins | na 16 16 | 00632e | 20 6d 73    |                 jsr 00736d           
1074:000 | DONE wsp | na 16 16 |        |             |
1075:000 | DONE lbl | na 16 16 | 006331 |             | z_zbranch                            
1075:001 | DONE ins | na 16 16 | 006331 | 60          |                 rts                  
1076:000 | DONE wsp | na 16 16 |        |             |
1077:000 | DONE lbl | na 16 16 | 006332 |             | zbranch_rt                           
1078:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1079:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1080:000 | DONE ins | na 16 16 | 006332 | 98          |                 tya                  force flag check
1081:000 | DONE ins | na 16 16 | 006333 | f0 05       |                 beq 00633a           flag is false (zero), so we branch
1082:000 | DONE wsp | na 16 16 |        |             |
1083:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1084:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1085:000 | DONE ins | na 16 16 | 006335 | 68          |                 pla                  
1086:000 | DONE ins | na 16 16 | 006336 | 1a          |                 inc.a                
1087:000 | DONE ins | na 16 16 | 006337 | 1a          |                 inc.a                
1088:000 | DONE wsp | na 16 16 |        |             |
1089:000 | DONE ins | na 16 16 | 006338 | 80 09       |                 bra 006343           
1090:000 | DONE wsp | na 16 16 |        |             |
1091:000 | DONE lbl | na 16 16 | 00633a |             | zb_zero                              
1092:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1093:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1094:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1095:000 | DONE ins | na 16 16 | 00633a | 68          |                 pla                  
1096:000 | DONE ins | na 16 16 | 00633b | 85 2a       |                 sta.d 00022a         
1097:000 | DONE ins | na 16 16 | 00633d | a0 01 00    |                 ldy.# 0001           
1098:000 | DONE ins | na 16 16 | 006340 | b1 2a       |                 lda.diy 00022a       
1099:000 | DONE wsp | na 16 16 |        |             |
1100:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1101:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1102:000 | DONE ins | na 16 16 | 006342 | 3a          |                 dec.a                
1103:000 | DONE wsp | na 16 16 |        |             |
1104:000 | DONE lbl | na 16 16 | 006343 |             | zb_done                              
1105:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1106:000 | DONE ins | na 16 16 | 006343 | 48          |                 pha                  
1107:000 | DONE wsp | na 16 16 |        |             |
1108:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1109:000 | DONE ins | na 16 16 | 006344 | b4 00       |                 ldy.dx 00            
1110:000 | DONE ins | na 16 16 | 006346 | e8          |                 inx                  
1111:000 | DONE ins | na 16 16 | 006347 | e8          |                 inx                  
1112:000 | DONE wsp | na 16 16 |        |             |
1113:000 | DONE ins | na 16 16 | 006348 | 60          |                 rts                  
1114:000 | DONE wsp | na 16 16 |        |             |
1115:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1116:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1117:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1118:000 | DONE lbl | na 16 16 | 006349 |             | xt_one                               
1119:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1120:000 | DONE ins | na 16 16 | 006349 | ca          |                 dex                  
1121:000 | DONE ins | na 16 16 | 00634a | ca          |                 dex                  
1122:000 | DONE ins | na 16 16 | 00634b | 94 00       |                 sty.dx 00            
1123:000 | DONE ins | na 16 16 | 00634d | a0 01 00    |                 ldy.# 0001           
1124:000 | DONE wsp | na 16 16 |        |             |
1125:000 | DONE lbl | na 16 16 | 006350 |             | z_one                                
1125:001 | DONE ins | na 16 16 | 006350 | 60          |                 rts                  
1126:000 | DONE wsp | na 16 16 |        |             |
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1129:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1130:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1131:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1132:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1133:000 | DONE lbl | na 16 16 | 006351 |             | xt_one-minus                         
1134:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1135:000 | DONE ins | na 16 16 | 006351 | 88          |                 dey                  
1136:000 | DONE lbl | na 16 16 | 006352 |             | z_one-minus                          
1136:001 | DONE ins | na 16 16 | 006352 | 60          |                 rts                  
1137:000 | DONE wsp | na 16 16 |        |             |
1138:000 | DONE wsp | na 16 16 |        |             |
1139:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1140:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1141:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1142:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1143:000 | DONE lbl | na 16 16 | 006353 |             | xt_one-plus                          
1144:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1145:000 | DONE ins | na 16 16 | 006353 | c8          |                 iny                  
1146:000 | DONE lbl | na 16 16 | 006354 |             | z_one-plus                           
1146:001 | DONE ins | na 16 16 | 006354 | 60          |                 rts                  
1147:000 | DONE wsp | na 16 16 |        |             |
1148:000 | DONE wsp | na 16 16 |        |             |
1149:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1150:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1151:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1152:000 | DONE lbl | na 16 16 | 006355 |             | xt_two                               
1153:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1154:000 | DONE ins | na 16 16 | 006355 | ca          |                 dex                  
1155:000 | DONE ins | na 16 16 | 006356 | ca          |                 dex                  
1156:000 | DONE ins | na 16 16 | 006357 | 94 00       |                 sty.dx 00            
1157:000 | DONE ins | na 16 16 | 006359 | a0 02 00    |                 ldy.# 0002           
1158:000 | DONE wsp | na 16 16 |        |             |
1159:000 | DONE lbl | na 16 16 | 00635c |             | z_two                                
1159:001 | DONE ins | na 16 16 | 00635c | 60          |                 rts                  
1160:000 | DONE wsp | na 16 16 |        |             |
1161:000 | DONE wsp | na 16 16 |        |             |
1162:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1163:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1164:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1165:000 | DONE lbl | na 16 16 | 00635d |             | xt_two-star                          
1166:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1167:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1168:000 | DONE ins | na 16 16 | 00635d | 98          |                 tya                  
1169:000 | DONE ins | na 16 16 | 00635e | 0a          |                 asl.a                
1170:000 | DONE ins | na 16 16 | 00635f | a8          |                 tay                  
1171:000 | DONE wsp | na 16 16 |        |             |
1172:000 | DONE lbl | na 16 16 | 006360 |             | z_two-star                           
1172:001 | DONE ins | na 16 16 | 006360 | 60          |                 rts                  
1173:000 | DONE wsp | na 16 16 |        |             |
1174:000 | DONE wsp | na 16 16 |        |             |
1175:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1176:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1177:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1178:000 | DONE lbl | na 16 16 | 006361 |             | xt_2drop                             
1179:000 | DONE ins | na 16 16 | 006361 | b4 02       |                 ldy.dx 02            
1180:000 | DONE ins | na 16 16 | 006363 | e8          |                 inx                  
1181:000 | DONE ins | na 16 16 | 006364 | e8          |                 inx                  
1182:000 | DONE ins | na 16 16 | 006365 | e8          |                 inx                  
1183:000 | DONE ins | na 16 16 | 006366 | e8          |                 inx                  
1184:000 | DONE wsp | na 16 16 |        |             |
1185:000 | DONE lbl | na 16 16 | 006367 |             | z_2drop                              
1185:001 | DONE ins | na 16 16 | 006367 | 60          |                 rts                  
1186:000 | DONE wsp | na 16 16 |        |             |
1187:000 | DONE wsp | na 16 16 |        |             |
1188:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1189:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1190:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1191:000 | DONE wsp | na 16 16 |        |             |
1192:000 | DONE lbl | na 16 16 | 006368 |             | xt_2dup                              
1193:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1194:000 | DONE ins | na 16 16 | 006368 | ca          |                 dex                  
1195:000 | DONE ins | na 16 16 | 006369 | ca          |                 dex                  
1196:000 | DONE ins | na 16 16 | 00636a | ca          |                 dex                  
1197:000 | DONE ins | na 16 16 | 00636b | ca          |                 dex                  
1198:000 | DONE ins | na 16 16 | 00636c | 94 02       |                 sty.dx 02            
1199:000 | DONE ins | na 16 16 | 00636e | b5 04       |                 lda.dx 04            
1200:000 | DONE ins | na 16 16 | 006370 | 95 00       |                 sta.dx 00            
1201:000 | DONE wsp | na 16 16 |        |             |
1202:000 | DONE lbl | na 16 16 | 006372 |             | z_2dup                               
1202:001 | DONE ins | na 16 16 | 006372 | 60          |                 rts                  
1203:000 | DONE wsp | na 16 16 |        |             |
1204:000 | DONE wsp | na 16 16 |        |             |
1205:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1206:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1207:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1208:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1209:000 | DONE lbl | na 16 16 | 006373 |             | xt_tick                              
1210:000 | DONE ins | na 16 16 | 006373 | 20 a9 68    |                 jsr 0068a9           ( -- addr u )
1211:000 | DONE wsp | na 16 16 |        |             |
1212:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1213:000 | DONE ins | na 16 16 | 006376 | 98          |                 tya                  force flag check
1214:000 | DONE ins | na 16 16 | 006377 | d0 06       |                 bne 00637f           
1215:000 | DONE wsp | na 16 16 |        |             |
1216:000 | DONE ins | na 16 16 | 006379 | a9 82 79    |                 lda.# 007982         
1217:000 | DONE ins | na 16 16 | 00637c | 4c 8e 73    |                 jmp 00738e           
1218:000 | DONE wsp | na 16 16 |        |             |
1219:000 | DONE lbl | na 16 16 | 00637f |             | tick_have_word                       
1220:000 | DONE ins | na 16 16 | 00637f | 20 dc 66    |                 jsr 0066dc           ( addr u -- nt)
1221:000 | DONE ins | na 16 16 | 006382 | 98          |                 tya                  force flag check
1222:000 | DONE wsp | na 16 16 |        |             |
1223:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1224:000 | DONE ins | na 16 16 | 006383 | d0 06       |                 bne 00638b           
1225:000 | DONE wsp | na 16 16 |        |             |
1226:000 | DONE ins | na 16 16 | 006385 | a9 1f 7a    |                 lda.# 007a1f         
1227:000 | DONE ins | na 16 16 | 006388 | 4c 8e 73    |                 jmp 00738e           
1228:000 | DONE wsp | na 16 16 |        |             |
1229:000 | DONE lbl | na 16 16 | 00638b |             | tick_have_nt                         
1230:000 | DONE ins | na 16 16 | 00638b | 20 da 67    |                 jsr 0067da           ( nt -- xt )
1231:000 | DONE wsp | na 16 16 |        |             |
1232:000 | DONE lbl | na 16 16 | 00638e |             | z_tick                               
1232:001 | DONE ins | na 16 16 | 00638e | 60          |                 rts                  
1233:000 | DONE wsp | na 16 16 |        |             |
1234:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1235:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1236:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1237:000 | DONE lbl | na 16 16 | 00638f |             | xt_abortq                            
1238:000 | DONE ins | na 16 16 | 00638f | 20 a1 69    |                 jsr 0069a1           save string
1239:000 | DONE wsp | na 16 16 |        |             |
1240:000 | DONE ins | na 16 16 | 006392 | f4 99 63    |                 phe.# 006399         compile run-time aspect
1241:000 | DONE ins | na 16 16 | 006395 | 20 6d 73    |                 jsr 00736d           
1242:000 | DONE wsp | na 16 16 |        |             |
1243:000 | DONE ins | na 16 16 | 006398 | 60          |                 rts                  
1244:000 | DONE wsp | na 16 16 |        |             |
1245:000 | DONE lbl | na 16 16 | 006399 |             | abortq_rt                            
1246:000 | DONE cmt | na 16 16 |        |             |                 ; we land here with ( f addr u )
1247:000 | DONE ins | na 16 16 | 006399 | b5 02       |                 lda.dx 02            get 3OS
1248:000 | DONE ins | na 16 16 | 00639b | f0 06       |                 beq 0063a3           if FALSE, we're done
1249:000 | DONE wsp | na 16 16 |        |             |
1250:000 | DONE cmt | na 16 16 |        |             |                 ; nope, we print string and ABORT
1251:000 | DONE ins | na 16 16 | 00639d | 20 db 6a    |                 jsr 006adb           
1252:000 | DONE ins | na 16 16 | 0063a0 | 4c 97 60    |                 jmp 006097           not JSR because we never come back
1253:000 | DONE wsp | na 16 16 |        |             |
1254:000 | DONE lbl | na 16 16 | 0063a3 |             | abortq_done                          
1255:000 | DONE cmt | na 16 16 |        |             |                 ; drop the three entries from the Data Stack
1256:000 | DONE ins | na 16 16 | 0063a3 | b4 04       |                 ldy.dx 04            fourth on the stack
1257:000 | DONE wsp | na 16 16 |        |             |
1258:000 | DONE cmt | na 16 16 |        |             |                 ; this is the same size, but three cycles faster than six INX
1259:000 | DONE cmt | na 16 16 |        |             |                 ; instructions
1260:000 | DONE ins | na 16 16 | 0063a5 | 8a          |                 txa                  
1261:000 | DONE ins | na 16 16 | 0063a6 | 38          |                 sec                  
1262:000 | DONE ins | na 16 16 | 0063a7 | e9 06 00    |                 sbc.# 0006           
1263:000 | DONE ins | na 16 16 | 0063aa | aa          |                 tax                  
1264:000 | DONE wsp | na 16 16 |        |             |
1265:000 | DONE lbl | na 16 16 | 0063ab |             | z_abortq                             
1265:001 | DONE ins | na 16 16 | 0063ab | 60          |                 rts                  
1266:000 | DONE wsp | na 16 16 |        |             |
1267:000 | DONE wsp | na 16 16 |        |             |
1268:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1269:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1270:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1271:000 | DONE lbl | na 16 16 | 0063ac |             | xt_abs                               
1272:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1273:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1274:000 | DONE ins | na 16 16 | 0063ac | 98          |                 tya                  force flag test
1275:000 | DONE ins | na 16 16 | 0063ad | 10 05       |                 bpl 0063b4           positive number is easy
1276:000 | DONE wsp | na 16 16 |        |             |
1277:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1278:000 | DONE ins | na 16 16 | 0063af | 49 ff ff    |                 eor.# 0ffff          
1279:000 | DONE ins | na 16 16 | 0063b2 | 1a          |                 inc.a                
1280:000 | DONE ins | na 16 16 | 0063b3 | a8          |                 tay                  
1281:000 | DONE wsp | na 16 16 |        |             |
1282:000 | DONE lbl | na 16 16 | 0063b4 |             | z_abs                                
1282:001 | DONE ins | na 16 16 | 0063b4 | 60          |                 rts                  
1283:000 | DONE wsp | na 16 16 |        |             |
1284:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1285:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1286:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1287:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1288:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1289:000 | DONE lbl | na 16 16 | 0063b5 |             | xt_accept                            
1290:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1291:000 | DONE ins | na 16 16 | 0063b5 | 98          |                 tya                  force flag test
1292:000 | DONE ins | na 16 16 | 0063b6 | d0 03       |                 bne 0063bb           
1293:000 | DONE wsp | na 16 16 |        |             |
1294:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1295:000 | DONE ins | na 16 16 | 0063b8 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1296:000 | DONE ins | na 16 16 | 0063b9 | e8          |                 inx                  
1297:000 | DONE wsp | na 16 16 |        |             |
1298:000 | DONE ins | na 16 16 | 0063ba | 60          |                 rts                  
1299:000 | DONE wsp | na 16 16 |        |             |
1300:000 | DONE lbl | na 16 16 | 0063bb |             | accept_nonzero                       
1301:000 | DONE ins | na 16 16 | 0063bb | b5 00       |                 lda.dx 00            address of buffer is NOS
1302:000 | DONE ins | na 16 16 | 0063bd | 85 16       |                 sta.d 000216         
1303:000 | DONE ins | na 16 16 | 0063bf | e8          |                 inx                  NIP
1304:000 | DONE ins | na 16 16 | 0063c0 | e8          |                 inx                  
1305:000 | DONE wsp | na 16 16 |        |             |
1306:000 | DONE ins | na 16 16 | 0063c1 | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
1307:000 | DONE ins | na 16 16 | 0063c3 | a0 00 00    |                 ldy.# 0000           Use Y as counter
1308:000 | DONE ins | na 16 16 | 0063c6 | e2 20       |                 sep 20               
1308:001 | DONE ctl | na  8 16 |        |             |         .!a8
1309:000 | DONE wsp | na  8 16 |        |             |
1310:000 | DONE lbl | na  8 16 | 0063c8 |             | accept_loop                          
1311:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
1312:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1313:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
1314:000 | DONE ins | na  8 16 | 0063c8 | 20 47 60    |                 jsr 006047           
1315:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1316:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
1317:000 | DONE ins | na  8 16 | 0063cb | c9 0a       |                 cmp.# AscLF          
1318:000 | DONE ins | na  8 16 | 0063cd | f0 44       |                 beq 006413           
1319:000 | DONE ins | na  8 16 | 0063cf | c9 0d       |                 cmp.# AscCR          
1320:000 | DONE ins | na  8 16 | 0063d1 | f0 40       |                 beq 006413           
1321:000 | DONE wsp | na  8 16 |        |             |
1322:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
1323:000 | DONE ins | na  8 16 | 0063d3 | c9 08       |                 cmp.# AscBS          
1324:000 | DONE ins | na  8 16 | 0063d5 | f0 44       |                 beq 00641b           
1325:000 | DONE ins | na  8 16 | 0063d7 | c9 7f       |                 cmp.# AscDEL         
1326:000 | DONE ins | na  8 16 | 0063d9 | f0 40       |                 beq 00641b           
1327:000 | DONE wsp | na  8 16 |        |             |
1328:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1329:000 | DONE ins | na  8 16 | 0063db | c9 03       |                 cmp.# AscCC          
1330:000 | DONE ins | na  8 16 | 0063dd | d0 03       |                 bne 0063e2           
1331:000 | DONE ins | na  8 16 | 0063df | 4c 97 60    |                 jmp 006097           
1332:000 | DONE lbl | na  8 16 | 0063e2 |             | @                                    
1333:000 | DONE ins | na  8 16 | 0063e2 | c9 1b       |                 cmp.# AscESC         
1334:000 | DONE ins | na  8 16 | 0063e4 | d0 03       |                 bne 0063e9           
1335:000 | DONE ins | na  8 16 | 0063e6 | 4c 97 60    |                 jmp 006097           
1336:000 | DONE lbl | na  8 16 | 0063e9 |             | @                                    
1337:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1338:000 | DONE ins | na  8 16 | 0063e9 | c9 10       |                 cmp.# AscCP          
1339:000 | DONE ins | na  8 16 | 0063eb | d0 0c       |                 bne 0063f9           
1340:000 | DONE ins | na  8 16 | 0063ed | c2 20       |                 rep 20               
1340:001 | DONE ctl | na 16 16 |        |             |         .!a16
1341:000 | DONE ins | na 16 16 | 0063ef | a9 37 7a    |                 lda.# 007a37         
1342:000 | DONE ins | na 16 16 | 0063f2 | 20 94 73    |                 jsr 007394           
1343:000 | DONE ins | na 16 16 | 0063f5 | e2 20       |                 sep 20               
1343:001 | DONE ctl | na  8 16 |        |             |         .!a8
1344:000 | DONE ins | na  8 16 | 0063f7 | 80 cf       |                 bra 0063c8           
1345:000 | DONE lbl | na  8 16 | 0063f9 |             | @                                    
1346:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1347:000 | DONE ins | na  8 16 | 0063f9 | c9 0e       |                 cmp.# AscCN          
1348:000 | DONE ins | na  8 16 | 0063fb | d0 0c       |                 bne 006409           
1349:000 | DONE ins | na  8 16 | 0063fd | c2 20       |                 rep 20               
1349:001 | DONE ctl | na 16 16 |        |             |         .!a16
1350:000 | DONE ins | na 16 16 | 0063ff | a9 4a 7a    |                 lda.# 007a4a         
1351:000 | DONE ins | na 16 16 | 006402 | 20 94 73    |                 jsr 007394           
1352:000 | DONE ins | na 16 16 | 006405 | e2 20       |                 sep 20               
1352:001 | DONE ctl | na  8 16 |        |             |         .!a8
1353:000 | DONE ins | na  8 16 | 006407 | 80 bf       |                 bra 0063c8           
1354:000 | DONE wsp | na  8 16 |        |             |
1355:000 | DONE lbl | na  8 16 | 006409 |             | @                                    
1356:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
1357:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
1358:000 | DONE ins | na  8 16 | 006409 | 20 36 60    |                 jsr 006036           echo character
1359:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1360:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
1361:000 | DONE wsp | na  8 16 |        |             |
1362:000 | DONE ins | na  8 16 | 00640c | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
1363:000 | DONE ins | na  8 16 | 00640e | c8          |                 iny                  
1364:000 | DONE ins | na  8 16 | 00640f | c4 18       |                 cpy.d 000218         reached character limit?
1365:000 | DONE ins | na  8 16 | 006411 | d0 b5       |                 bne 0063c8           fall thru if buffer limit reached
1366:000 | DONE wsp | na  8 16 |        |             |
1367:000 | DONE lbl | na  8 16 | 006413 |             | accept_eol                           
1368:000 | DONE ins | na  8 16 | 006413 | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
1369:000 | DONE ins | na  8 16 | 006415 | c2 20       |                 rep 20               
1369:001 | DONE ctl | na 16 16 |        |             |         .!a16
1370:000 | DONE ins | na 16 16 | 006417 | 20 a0 6a    |                 jsr 006aa0           print final space
1371:000 | DONE ins | na 16 16 | 00641a | 60          |                 rts                  this is the actual return of the routine
1372:000 | DONE wsp | na 16 16 |        |             |
1373:000 | DONE lbl | na 16 16 | 00641b |             | accept_bs                            
1374:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1375:000 | DONE ins | na  8 16 | 00641b | c0 00 00    |                 cpy.# 0000           buffer empty?
1376:000 | DONE ins | na  8 16 | 00641e | d0 06       |                 bne 006426           
1377:000 | DONE wsp | na  8 16 |        |             |
1378:000 | DONE ins | na  8 16 | 006420 | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
1379:000 | DONE ins | na  8 16 | 006422 | 20 36 60    |                 jsr 006036           
1380:000 | DONE ins | na  8 16 | 006425 | c8          |                 iny                  
1381:000 | DONE lbl | na  8 16 | 006426 |             | @                                    
1382:000 | DONE ins | na  8 16 | 006426 | 88          |                 dey                  
1383:000 | DONE ins | na  8 16 | 006427 | a9 08       |                 lda.# AscBS          move back one
1384:000 | DONE ins | na  8 16 | 006429 | 20 36 60    |                 jsr 006036           
1385:000 | DONE ins | na  8 16 | 00642c | a9 20       |                 lda.# AscSP          print a space (rubout)
1386:000 | DONE ins | na  8 16 | 00642e | 20 36 60    |                 jsr 006036           
1387:000 | DONE ins | na  8 16 | 006431 | a9 08       |                 lda.# AscBS          move back over space
1388:000 | DONE ins | na  8 16 | 006433 | 20 36 60    |                 jsr 006036           
1389:000 | DONE wsp | na  8 16 |        |             |
1390:000 | DONE ins | na  8 16 | 006436 | 80 90       |                 bra 0063c8           
1391:000 | DONE wsp | na  8 16 |        |             |
1392:000 | DONE lbl | na  8 16 | 006438 |             | z_accept                             
1392:001 | DONE ins | na  8 16 | 006438 | 60          |                 rts                  
1393:000 | DONE wsp | na  8 16 |        |             |
1394:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1395:000 | DONE cmt | na  8 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1396:000 | DONE cmt | na  8 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1397:000 | DONE cmt | na  8 16 |        |             | ; instead of BRA to make sure we have the range.
1398:000 | DONE cmt | na  8 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1399:000 | DONE lbl | na  8 16 | 006439 |             | xt_again                             
1400:000 | DONE wsp | na  8 16 |        |             |
1401:000 | DONE cmt | na  8 16 |        |             |                 ; Add the opcode for a JMP
1402:000 | DONE ins | na  8 16 | 006439 | e2 20       |                 sep 20               
1402:001 | DONE ctl | na  8 16 |        |             |         .!a8
1403:000 | DONE ins | na  8 16 | 00643b | a9 4c       |                 lda.# 4c             
1404:000 | DONE ins | na  8 16 | 00643d | 92 00       |                 sta.di 000200        STA (CP)
1405:000 | DONE ins | na  8 16 | 00643f | c2 20       |                 rep 20               
1405:001 | DONE ctl | na 16 16 |        |             |         .!a16
1406:000 | DONE ins | na 16 16 | 006441 | e6 00       |                 inc.d 000200         
1407:000 | DONE wsp | na 16 16 |        |             |
1408:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1409:000 | DONE ins | na 16 16 | 006443 | 98          |                 tya                  
1410:000 | DONE ins | na 16 16 | 006444 | 92 00       |                 sta.di 000200        
1411:000 | DONE ins | na 16 16 | 006446 | e6 00       |                 inc.d 000200         
1412:000 | DONE ins | na 16 16 | 006448 | e6 00       |                 inc.d 000200         
1413:000 | DONE wsp | na 16 16 |        |             |
1414:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1415:000 | DONE ins | na 16 16 | 00644a | b4 00       |                 ldy.dx 00            
1416:000 | DONE ins | na 16 16 | 00644c | e8          |                 inx                  
1417:000 | DONE ins | na 16 16 | 00644d | e8          |                 inx                  
1418:000 | DONE wsp | na 16 16 |        |             |
1419:000 | DONE lbl | na 16 16 | 00644e |             | z_again                              
1419:001 | DONE ins | na 16 16 | 00644e | 60          |                 rts                  
1420:000 | DONE wsp | na 16 16 |        |             |
1421:000 | DONE wsp | na 16 16 |        |             |
1422:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1423:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1424:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1425:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1426:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1427:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1428:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1429:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1430:000 | DONE lbl | na 16 16 | 00644f |             | xt_allot                             
1431:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1432:000 | DONE ins | na 16 16 | 00644f | 98          |                 tya                  force flag check
1433:000 | DONE ins | na 16 16 | 006450 | f0 21       |                 beq 006473           zero bytes, don't do anything
1434:000 | DONE ins | na 16 16 | 006452 | 30 12       |                 bmi 006466           free memory instead of reserving it
1435:000 | DONE wsp | na 16 16 |        |             |
1436:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1437:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1438:000 | DONE ins | na 16 16 | 006454 | 18          |                 clc                  
1439:000 | DONE ins | na 16 16 | 006455 | 65 00       |                 adc.d 000200         create new CP
1440:000 | DONE ins | na 16 16 | 006457 | b0 07       |                 bcs 006460           oops, we've wrapped
1441:000 | DONE wsp | na 16 16 |        |             |
1442:000 | DONE ins | na 16 16 | 006459 | a8          |                 tay                  save copy of new CP
1443:000 | DONE wsp | na 16 16 |        |             |
1444:000 | DONE ins | na 16 16 | 00645a | 38          |                 sec                  
1445:000 | DONE ins | na 16 16 | 00645b | e9 ff 7b    |                 sbc.# 007bff         
1446:000 | DONE ins | na 16 16 | 00645e | 30 11       |                 bmi 006471           oops, fall thru if beyond max RAM
1447:000 | DONE wsp | na 16 16 |        |             |
1448:000 | DONE lbl | na 16 16 | 006460 |             | allot_error                          
1449:000 | DONE ins | na 16 16 | 006460 | a9 e3 78    |                 lda.# 0078e3         
1450:000 | DONE ins | na 16 16 | 006463 | 4c 8e 73    |                 jmp 00738e           
1451:000 | DONE wsp | na 16 16 |        |             |
1452:000 | DONE lbl | na 16 16 | 006466 |             | allot_minus                          
1453:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1454:000 | DONE ins | na 16 16 | 006466 | 38          |                 sec                  
1455:000 | DONE ins | na 16 16 | 006467 | e5 00       |                 sbc.d 000200         
1456:000 | DONE ins | na 16 16 | 006469 | 90 f5       |                 bcc 006460           oops, we've wrapped
1457:000 | DONE wsp | na 16 16 |        |             |
1458:000 | DONE ins | na 16 16 | 00646b | a8          |                 tay                  
1459:000 | DONE wsp | na 16 16 |        |             |
1460:000 | DONE ins | na 16 16 | 00646c | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1461:000 | DONE ins | na 16 16 | 00646f | 30 ef       |                 bmi 006460           oops, gone too far back
1462:000 | DONE wsp | na 16 16 |        |             |
1463:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1464:000 | DONE lbl | na 16 16 | 006471 |             | allot_done                           
1465:000 | DONE ins | na 16 16 | 006471 | 84 00       |                 sty.d 000200         new compiler pointer
1466:000 | DONE lbl | na 16 16 | 006473 |             | allot_real_gone                      
1467:000 | DONE ins | na 16 16 | 006473 | b4 00       |                 ldy.dx 00            DROP
1468:000 | DONE ins | na 16 16 | 006475 | e8          |                 inx                  
1469:000 | DONE ins | na 16 16 | 006476 | e8          |                 inx                  
1470:000 | DONE wsp | na 16 16 |        |             |
1471:000 | DONE lbl | na 16 16 | 006477 |             | z_allot                              
1471:001 | DONE ins | na 16 16 | 006477 | 60          |                 rts                  
1472:000 | DONE wsp | na 16 16 |        |             |
1473:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1474:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1475:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1476:000 | DONE lbl | na 16 16 | 006478 |             | xt_and                               
1477:000 | DONE ins | na 16 16 | 006478 | 98          |                 tya                  
1478:000 | DONE ins | na 16 16 | 006479 | 35 00       |                 and.dx 00            
1479:000 | DONE ins | na 16 16 | 00647b | a8          |                 tay                  
1480:000 | DONE wsp | na 16 16 |        |             |
1481:000 | DONE ins | na 16 16 | 00647c | e8          |                 inx                  NIP
1482:000 | DONE ins | na 16 16 | 00647d | e8          |                 inx                  
1483:000 | DONE wsp | na 16 16 |        |             |
1484:000 | DONE lbl | na 16 16 | 00647e |             | z_and                                
1484:001 | DONE ins | na 16 16 | 00647e | 60          |                 rts                  
1485:000 | DONE wsp | na 16 16 |        |             |
1486:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1487:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1488:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1489:000 | DONE lbl | na 16 16 | 00647f |             | xt_base                              
1490:000 | DONE ins | na 16 16 | 00647f | ca          |                 dex                  
1491:000 | DONE ins | na 16 16 | 006480 | ca          |                 dex                  
1492:000 | DONE ins | na 16 16 | 006481 | 94 00       |                 sty.dx 00            
1493:000 | DONE wsp | na 16 16 |        |             |
1494:000 | DONE ins | na 16 16 | 006483 | a0 1c 02    |                 ldy.# 00021c         
1495:000 | DONE wsp | na 16 16 |        |             |
1496:000 | DONE lbl | na 16 16 | 006486 |             | z_base                               
1496:001 | DONE ins | na 16 16 | 006486 | 60          |                 rts                  
1497:000 | DONE wsp | na 16 16 |        |             |
1498:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1499:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1500:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1501:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1502:000 | DONE lbl | na 16 16 | 006487 |             | xt_bell                              
1503:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1504:000 | DONE ins | na 16 16 | 006487 | a9 07 00    |                 lda.# AscBELL        
1505:000 | DONE ins | na 16 16 | 00648a | 20 36 60    |                 jsr 006036           
1506:000 | DONE wsp | na 16 16 |        |             |
1507:000 | DONE lbl | na 16 16 | 00648d |             | z_bell                               
1507:001 | DONE ins | na 16 16 | 00648d | 60          |                 rts                  
1508:000 | DONE wsp | na 16 16 |        |             |
1509:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1510:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1511:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1512:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1513:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1514:000 | DONE lbl | na 16 16 | 00648e |             | xt_begin                             
1515:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1516:000 | DONE ins | na 16 16 | 00648e | ca          |                 dex                  
1517:000 | DONE ins | na 16 16 | 00648f | ca          |                 dex                  
1518:000 | DONE ins | na 16 16 | 006490 | 94 00       |                 sty.dx 00            
1519:000 | DONE wsp | na 16 16 |        |             |
1520:000 | DONE ins | na 16 16 | 006492 | a4 00       |                 ldy.d 000200         
1521:000 | DONE wsp | na 16 16 |        |             |
1522:000 | DONE lbl | na 16 16 | 006494 |             | z_begin                              
1522:001 | DONE ins | na 16 16 | 006494 | 60          |                 rts                  
1523:000 | DONE wsp | na 16 16 |        |             |
1524:000 | DONE wsp | na 16 16 |        |             |
1525:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1526:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1527:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1528:000 | DONE lbl | na 16 16 | 006495 |             | xt_bl                                
1529:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1530:000 | DONE ins | na 16 16 | 006495 | ca          |                 dex                  
1531:000 | DONE ins | na 16 16 | 006496 | ca          |                 dex                  
1532:000 | DONE ins | na 16 16 | 006497 | 94 00       |                 sty.dx 00            
1533:000 | DONE ins | na 16 16 | 006499 | a0 20 00    |                 ldy.# AscSP          
1534:000 | DONE wsp | na 16 16 |        |             |
1535:000 | DONE lbl | na 16 16 | 00649c |             | z_bl                                 
1535:001 | DONE ins | na 16 16 | 00649c | 60          |                 rts                  
1536:000 | DONE wsp | na 16 16 |        |             |
1537:000 | DONE wsp | na 16 16 |        |             |
1538:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1539:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1540:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1541:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1542:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler. Uses tmptos
1543:000 | DONE lbl | na 16 16 | 00649d |             | xt_bounds                            
1544:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1545:000 | DONE ins | na 16 16 | 00649d | 84 06       |                 sty.d 000206         
1546:000 | DONE ins | na 16 16 | 00649f | b4 00       |                 ldy.dx 00            addr now TOS
1547:000 | DONE wsp | na 16 16 |        |             |
1548:000 | DONE ins | na 16 16 | 0064a1 | 18          |                 clc                  
1549:000 | DONE ins | na 16 16 | 0064a2 | 65 06       |                 adc.d 000206         
1550:000 | DONE ins | na 16 16 | 0064a4 | 95 00       |                 sta.dx 00            addr+u now NOS
1551:000 | DONE wsp | na 16 16 |        |             |
1552:000 | DONE lbl | na 16 16 | 0064a6 |             | z_bounds                             
1552:001 | DONE ins | na 16 16 | 0064a6 | 60          |                 rts                  
1553:000 | DONE wsp | na 16 16 |        |             |
1554:000 | DONE wsp | na 16 16 |        |             |
1555:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1556:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1557:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. This word was adapted from Tali Forth. It
1558:000 | DONE cmt | na 16 16 |        |             | ; uses tmpbranch
1559:000 | DONE lbl | na 16 16 | 0064a7 |             | xt_branch                            
1560:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1561:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1562:000 | DONE ins | na 16 16 | 0064a7 | f4 ae 64    |                 phe.# 0064ae         
1563:000 | DONE ins | na 16 16 | 0064aa | 20 6d 73    |                 jsr 00736d           
1564:000 | DONE wsp | na 16 16 |        |             |
1565:000 | DONE lbl | na 16 16 | 0064ad |             | z_branch                             
1565:001 | DONE ins | na 16 16 | 0064ad | 60          |                 rts                  
1566:000 | DONE wsp | na 16 16 |        |             |
1567:000 | DONE lbl | na 16 16 | 0064ae |             | branch_rt                            
1568:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1569:000 | DONE ins | na 16 16 | 0064ae | 68          |                 pla                  
1570:000 | DONE ins | na 16 16 | 0064af | 85 2a       |                 sta.d 00022a         
1571:000 | DONE wsp | na 16 16 |        |             |
1572:000 | DONE ins | na 16 16 | 0064b1 | 5a          |                 phy                  avoid using temp variables
1573:000 | DONE ins | na 16 16 | 0064b2 | a0 01 00    |                 ldy.# 0001           
1574:000 | DONE ins | na 16 16 | 0064b5 | b1 2a       |                 lda.diy 00022a       LDA (TMPBRANCH),Y
1575:000 | DONE ins | na 16 16 | 0064b7 | 7a          |                 ply                  
1576:000 | DONE wsp | na 16 16 |        |             |
1577:000 | DONE ins | na 16 16 | 0064b8 | 3a          |                 dec.a                
1578:000 | DONE ins | na 16 16 | 0064b9 | 48          |                 pha                  put target address back on Return Stack
1579:000 | DONE wsp | na 16 16 |        |             |
1580:000 | DONE ins | na 16 16 | 0064ba | 60          |                 rts                  
1581:000 | DONE wsp | na 16 16 |        |             |
1582:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1583:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1584:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1585:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
1586:000 | DONE lbl | na 16 16 | 0064bb |             | xt_bye                               
1587:000 | DONE ins | na 16 16 | 0064bb | 58          |                 cli                  
1588:000 | DONE ins | na 16 16 | 0064bc | 00 00       |                 brk 00               status byte 00 required for assembler
1589:000 | DONE wsp | na 16 16 |        |             |
1590:000 | DONE lbl | na 16 16 | 0064be |             | z_bye                                
1590:001 | DONE ins | na 16 16 | 0064be | 60          |                 rts                  dummy for compiling, never reached
1591:000 | DONE wsp | na 16 16 |        |             |
1592:000 | DONE wsp | na 16 16 |        |             |
1593:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1594:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1595:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
1596:000 | DONE lbl | na 16 16 | 0064bf |             | xt_c-comma                           
1597:000 | DONE ins | na 16 16 | 0064bf | 98          |                 tya                  
1598:000 | DONE ins | na 16 16 | 0064c0 | e2 20       |                 sep 20               
1598:001 | DONE ctl | na  8 16 |        |             |         .!a8
1599:000 | DONE ins | na  8 16 | 0064c2 | 92 00       |                 sta.di 000200        STA (CP)
1600:000 | DONE ins | na  8 16 | 0064c4 | c2 20       |                 rep 20               
1600:001 | DONE ctl | na 16 16 |        |             |         .!a16
1601:000 | DONE ins | na 16 16 | 0064c6 | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
1602:000 | DONE wsp | na 16 16 |        |             |
1603:000 | DONE ins | na 16 16 | 0064c8 | b4 00       |                 ldy.dx 00            
1604:000 | DONE ins | na 16 16 | 0064ca | e8          |                 inx                  
1605:000 | DONE ins | na 16 16 | 0064cb | e8          |                 inx                  
1606:000 | DONE wsp | na 16 16 |        |             |
1607:000 | DONE lbl | na 16 16 | 0064cc |             | z_c-comma                            
1607:001 | DONE ins | na 16 16 | 0064cc | 60          |                 rts                  
1608:000 | DONE wsp | na 16 16 |        |             |
1609:000 | DONE wsp | na 16 16 |        |             |
1610:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1611:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1612:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
1613:000 | DONE lbl | na 16 16 | 0064cd |             | xt_c-fetch                           
1614:000 | DONE ins | na 16 16 | 0064cd | e2 20       |                 sep 20               
1614:001 | DONE ctl | na  8 16 |        |             |         .!a8
1615:000 | DONE ins | na  8 16 | 0064cf | b9 00 00    |                 lda.y 0000           
1616:000 | DONE ins | na  8 16 | 0064d2 | c2 20       |                 rep 20               
1616:001 | DONE ctl | na 16 16 |        |             |         .!a16
1617:000 | DONE ins | na 16 16 | 0064d4 | 29 ff 00    |                 and.# 00ff           
1618:000 | DONE ins | na 16 16 | 0064d7 | a8          |                 tay                  
1619:000 | DONE wsp | na 16 16 |        |             |
1620:000 | DONE lbl | na 16 16 | 0064d8 |             | z_c-fetch                            
1620:001 | DONE ins | na 16 16 | 0064d8 | 60          |                 rts                  
1621:000 | DONE wsp | na 16 16 |        |             |
1622:000 | DONE wsp | na 16 16 |        |             |
1623:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1624:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1625:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
1626:000 | DONE lbl | na 16 16 | 0064d9 |             | xt_c-store                           
1627:000 | DONE ins | na 16 16 | 0064d9 | b5 00       |                 lda.dx 00            
1628:000 | DONE ins | na 16 16 | 0064db | e2 20       |                 sep 20               
1628:001 | DONE ctl | na  8 16 |        |             |         .!a8
1629:000 | DONE ins | na  8 16 | 0064dd | 99 00 00    |                 sta.y 0000           
1630:000 | DONE ins | na  8 16 | 0064e0 | c2 20       |                 rep 20               
1630:001 | DONE ctl | na 16 16 |        |             |         .!a16
1631:000 | DONE ins | na 16 16 | 0064e2 | b4 02       |                 ldy.dx 02            
1632:000 | DONE ins | na 16 16 | 0064e4 | e8          |                 inx                  
1633:000 | DONE ins | na 16 16 | 0064e5 | e8          |                 inx                  
1634:000 | DONE ins | na 16 16 | 0064e6 | e8          |                 inx                  
1635:000 | DONE ins | na 16 16 | 0064e7 | e8          |                 inx                  
1636:000 | DONE wsp | na 16 16 |        |             |
1637:000 | DONE lbl | na 16 16 | 0064e8 |             | z_c-store                            
1637:001 | DONE ins | na 16 16 | 0064e8 | 60          |                 rts                  
1638:000 | DONE wsp | na 16 16 |        |             |
1639:000 | DONE wsp | na 16 16 |        |             |
1640:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1641:000 | DONE cmt | na 16 16 |        |             | ; CELL+ ( u -- u+2 ) X bytes / X cycles
1642:000 | DONE cmt | na 16 16 |        |             | ; Add the size of one cell to the value on top of the stack. Since this is
1643:000 | DONE cmt | na 16 16 |        |             | ; a 16-bit cell size, we add two
1644:000 | DONE lbl | na 16 16 | 0064e9 |             | xt_cellplus                          
1645:000 | DONE ins | na 16 16 | 0064e9 | c8          |                 iny                  
1646:000 | DONE ins | na 16 16 | 0064ea | c8          |                 iny                  
1647:000 | DONE lbl | na 16 16 | 0064eb |             | z_cellplus                           
1647:001 | DONE ins | na 16 16 | 0064eb | 60          |                 rts                  
1648:000 | DONE wsp | na 16 16 |        |             |
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1651:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1652:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1653:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1654:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
1655:000 | DONE wsp | na 16 16 |        |             |
1656:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1657:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1658:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
1659:000 | DONE lbl | na 16 16 | 0064ec |             | xt_char                              
1660:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1661:000 | DONE ins | na 16 16 | 0064ec | 20 a9 68    |                 jsr 0068a9           ( -- addr u )
1662:000 | DONE wsp | na 16 16 |        |             |
1663:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
1664:000 | DONE ins | na 16 16 | 0064ef | 98          |                 tya                  force flag check
1665:000 | DONE ins | na 16 16 | 0064f0 | d0 06       |                 bne 0064f8           
1666:000 | DONE wsp | na 16 16 |        |             |
1667:000 | DONE ins | na 16 16 | 0064f2 | a9 82 79    |                 lda.# 007982         
1668:000 | DONE ins | na 16 16 | 0064f5 | 4c 8e 73    |                 jmp 00738e           
1669:000 | DONE wsp | na 16 16 |        |             |
1670:000 | DONE lbl | na 16 16 | 0064f8 |             | char_got_char                        
1671:000 | DONE ins | na 16 16 | 0064f8 | b4 00       |                 ldy.dx 00            get addr from NOS
1672:000 | DONE ins | na 16 16 | 0064fa | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1673:000 | DONE ins | na 16 16 | 0064fd | 29 ff 00    |                 and.# 00ff           
1674:000 | DONE ins | na 16 16 | 006500 | a8          |                 tay                  
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE ins | na 16 16 | 006501 | e8          |                 inx                  
1677:000 | DONE ins | na 16 16 | 006502 | e8          |                 inx                  
1678:000 | DONE wsp | na 16 16 |        |             |
1679:000 | DONE lbl | na 16 16 | 006503 |             | z_char                               
1679:001 | DONE ins | na 16 16 | 006503 | 60          |                 rts                  
1680:000 | DONE wsp | na 16 16 |        |             |
1681:000 | DONE wsp | na 16 16 |        |             |
1682:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1683:000 | DONE cmt | na 16 16 |        |             | ; CHARPLUS ( u -- u+1 ) X bytes / X cycles
1684:000 | DONE cmt | na 16 16 |        |             | ; Adds the size of a character to the value on top of the stack. Since our
1685:000 | DONE cmt | na 16 16 |        |             | ; character size is one, this is the same code as 1+, see there
1686:000 | DONE wsp | na 16 16 |        |             |
1687:000 | DONE wsp | na 16 16 |        |             |
1688:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1689:000 | DONE cmt | na 16 16 |        |             | ; CHARS ( u -- u ) X bytes / X cycles
1690:000 | DONE cmt | na 16 16 |        |             | ; Return the size in bytes of the number of characters on the top of the stack.
1691:000 | DONE cmt | na 16 16 |        |             | ; In this case, does nothing
1692:000 | DONE lbl | na 16 16 | 006504 |             | xt_chars                             
1693:000 | DONE wsp | na 16 16 |        |             |
1694:000 | DONE ins | na 16 16 | 006504 | ea          |                 nop                  
1695:000 | DONE lbl | na 16 16 | 006505 |             | z_chars                              
1695:001 | DONE ins | na 16 16 | 006505 | 60          |                 rts                  
1696:000 | DONE wsp | na 16 16 |        |             |
1697:000 | DONE wsp | na 16 16 |        |             |
1698:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1699:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1700:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1701:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1702:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1703:000 | DONE lbl | na 16 16 | 006506 |             | xt_compile-only                      
1704:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1705:000 | DONE ins | na 16 16 | 006506 | a9 04 00    |                 lda.# CO             
1706:000 | DONE ins | na 16 16 | 006509 | eb          |                 xba                  flags are MSB
1707:000 | DONE ins | na 16 16 | 00650a | 12 02       |                 ora.di 000202        ORA (DP)
1708:000 | DONE ins | na 16 16 | 00650c | 92 02       |                 sta.di 000202        
1709:000 | DONE wsp | na 16 16 |        |             |
1710:000 | DONE lbl | na 16 16 | 00650e |             | z_compile-only                       
1710:001 | DONE ins | na 16 16 | 00650e | 60          |                 rts                  
1711:000 | DONE wsp | na 16 16 |        |             |
1712:000 | DONE wsp | na 16 16 |        |             |
1713:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1714:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1715:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1716:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1717:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1718:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1719:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1720:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1721:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1722:000 | DONE cmt | na 16 16 |        |             | ; TODO currently just compiles subroutine jumps
1723:000 | DONE lbl | na 16 16 | 00650f |             | xt_compilecomma                      
1724:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1725:000 | DONE wsp | na 16 16 |        |             |
1726:000 | DONE lbl | na 16 16 | 00650f |             | compile_as_code                      
1727:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1728:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1729:000 | DONE cmt | na 16 16 |        |             |                 ; TODO consider special cases:
1730:000 | DONE cmt | na 16 16 |        |             |                 ;  - >R R> R@ should strip PLA/PHA if native compiled
1731:000 | DONE cmt | na 16 16 |        |             |                 ;  - Don't compile comments
1732:000 | DONE wsp | na 16 16 |        |             |
1733:000 | DONE lbl | na 16 16 | 00650f |             | compile_as_jump                      
1734:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump.
1735:000 | DONE ins | na 16 16 | 00650f | e2 20       |                 sep 20               
1735:001 | DONE ctl | na  8 16 |        |             |         .!a8
1736:000 | DONE ins | na  8 16 | 006511 | a9 20       |                 lda.# 20             opcode for JSR
1737:000 | DONE ins | na  8 16 | 006513 | 92 00       |                 sta.di 000200        STA (CP)
1738:000 | DONE ins | na  8 16 | 006515 | c2 20       |                 rep 20               
1738:001 | DONE ctl | na 16 16 |        |             |         .!a16
1739:000 | DONE ins | na 16 16 | 006517 | e6 00       |                 inc.d 000200         
1740:000 | DONE wsp | na 16 16 |        |             |
1741:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1742:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1743:000 | DONE ins | na 16 16 | 006519 | 98          |                 tya                  
1744:000 | DONE ins | na 16 16 | 00651a | 92 00       |                 sta.di 000200        
1745:000 | DONE ins | na 16 16 | 00651c | e6 00       |                 inc.d 000200         
1746:000 | DONE ins | na 16 16 | 00651e | e6 00       |                 inc.d 000200         
1747:000 | DONE wsp | na 16 16 |        |             |
1748:000 | DONE ins | na 16 16 | 006520 | b4 00       |                 ldy.dx 00            
1749:000 | DONE ins | na 16 16 | 006522 | e8          |                 inx                  
1750:000 | DONE ins | na 16 16 | 006523 | e8          |                 inx                  
1751:000 | DONE wsp | na 16 16 |        |             |
1752:000 | DONE lbl | na 16 16 | 006524 |             | z_compilecomma                       
1752:001 | DONE ins | na 16 16 | 006524 | 60          |                 rts                  
1753:000 | DONE wsp | na 16 16 |        |             |
1754:000 | DONE wsp | na 16 16 |        |             |
1755:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1756:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1757:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1758:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1759:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1760:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1761:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1762:000 | DONE lbl | na 16 16 | 006525 |             | xt_constant                          
1763:000 | DONE ins | na 16 16 | 006525 | 20 55 65    |                 jsr 006555           
1764:000 | DONE wsp | na 16 16 |        |             |
1765:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1766:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1767:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1768:000 | DONE ins | na 16 16 | 006528 | a5 00       |                 lda.d 000200         
1769:000 | DONE ins | na 16 16 | 00652a | 3a          |                 dec.a                
1770:000 | DONE ins | na 16 16 | 00652b | 3a          |                 dec.a                
1771:000 | DONE ins | na 16 16 | 00652c | 85 16       |                 sta.d 000216         
1772:000 | DONE wsp | na 16 16 |        |             |
1773:000 | DONE ins | na 16 16 | 00652e | a9 f1 72    |                 lda.# 0072f1         
1774:000 | DONE ins | na 16 16 | 006531 | 92 16       |                 sta.di 000216        STA (TMP1)
1775:000 | DONE wsp | na 16 16 |        |             |
1776:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1777:000 | DONE ins | na 16 16 | 006533 | 98          |                 tya                  there is no "sty.di cp"
1778:000 | DONE ins | na 16 16 | 006534 | 92 00       |                 sta.di 000200        
1779:000 | DONE ins | na 16 16 | 006536 | e6 00       |                 inc.d 000200         
1780:000 | DONE ins | na 16 16 | 006538 | e6 00       |                 inc.d 000200         
1781:000 | DONE wsp | na 16 16 |        |             |
1782:000 | DONE ins | na 16 16 | 00653a | b4 00       |                 ldy.dx 00            DROP
1783:000 | DONE ins | na 16 16 | 00653c | e8          |                 inx                  
1784:000 | DONE ins | na 16 16 | 00653d | e8          |                 inx                  
1785:000 | DONE wsp | na 16 16 |        |             |
1786:000 | DONE lbl | na 16 16 | 00653e |             | z_constant                           
1786:001 | DONE ins | na 16 16 | 00653e | 60          |                 rts                  
1787:000 | DONE wsp | na 16 16 |        |             |
1788:000 | DONE wsp | na 16 16 |        |             |
1789:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1790:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1791:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1792:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
1793:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
1794:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
1795:000 | DONE lbl | na 16 16 | 00653f |             | xt_count                             
1796:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1797:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1798:000 | DONE ins | na 16 16 | 00653f | 98          |                 tya                  
1799:000 | DONE ins | na 16 16 | 006540 | 1a          |                 inc.a                String address starts one char later
1800:000 | DONE wsp | na 16 16 |        |             |
1801:000 | DONE ins | na 16 16 | 006541 | ca          |                 dex                  
1802:000 | DONE ins | na 16 16 | 006542 | ca          |                 dex                  
1803:000 | DONE ins | na 16 16 | 006543 | 95 00       |                 sta.dx 00            NOS
1804:000 | DONE wsp | na 16 16 |        |             |
1805:000 | DONE ins | na 16 16 | 006545 | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
1806:000 | DONE ins | na 16 16 | 006548 | eb          |                 xba                  move length to LSB
1807:000 | DONE ins | na 16 16 | 006549 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
1808:000 | DONE ins | na 16 16 | 00654c | a8          |                 tay                  TOS
1809:000 | DONE wsp | na 16 16 |        |             |
1810:000 | DONE lbl | na 16 16 | 00654d |             | z_count                              
1810:001 | DONE ins | na 16 16 | 00654d | 60          |                 rts                  
1811:000 | DONE wsp | na 16 16 |        |             |
1812:000 | DONE wsp | na 16 16 |        |             |
1813:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1814:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
1815:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
1816:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1817:000 | DONE lbl | na 16 16 | 00654e |             | xt_cr                                
1818:000 | DONE ins | na 16 16 | 00654e | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
1819:000 | DONE ins | na 16 16 | 006551 | 20 36 60    |                 jsr 006036           
1820:000 | DONE wsp | na 16 16 |        |             |
1821:000 | DONE lbl | na 16 16 | 006554 |             | z_cr                                 
1821:001 | DONE ins | na 16 16 | 006554 | 60          |                 rts                  
1822:000 | DONE wsp | na 16 16 |        |             |
1823:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1824:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
1825:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
1826:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
1827:000 | DONE cmt | na 16 16 |        |             | ; address.
1828:000 | DONE lbl | na 16 16 | 006555 |             | xt_create                            
1829:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1830:000 | DONE ins | na 16 16 | 006555 | 20 a9 68    |                 jsr 0068a9           ( -- addr u )
1831:000 | DONE ins | na 16 16 | 006558 | d0 06       |                 bne 006560           
1832:000 | DONE wsp | na 16 16 |        |             |
1833:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1834:000 | DONE ins | na 16 16 | 00655a | a9 82 79    |                 lda.# 007982         
1835:000 | DONE ins | na 16 16 | 00655d | 4c 8e 73    |                 jmp 00738e           
1836:000 | DONE wsp | na 16 16 |        |             |
1837:000 | DONE lbl | na 16 16 | 006560 |             | create_got_name                      
1838:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1839:000 | DONE ins | na 16 16 | 006560 | 20 c7 73    |                 jsr 0073c7           
1840:000 | DONE wsp | na 16 16 |        |             |
1841:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1842:000 | DONE cmt | na 16 16 |        |             |                 ; word
1843:000 | DONE ins | na 16 16 | 006563 | a5 00       |                 lda.d 000200         
1844:000 | DONE ins | na 16 16 | 006565 | 85 16       |                 sta.d 000216         save start of new word
1845:000 | DONE wsp | na 16 16 |        |             |
1846:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1847:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1848:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1849:000 | DONE ins | na 16 16 | 006567 | 98          |                 tya                  
1850:000 | DONE ins | na 16 16 | 006568 | 29 ff 00    |                 and.# 00ff           
1851:000 | DONE ins | na 16 16 | 00656b | 85 18       |                 sta.d 000218         save length of name string
1852:000 | DONE wsp | na 16 16 |        |             |
1853:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1854:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1855:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1856:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1857:000 | DONE ins | na 16 16 | 00656d | 18          |                 clc                  
1858:000 | DONE ins | na 16 16 | 00656e | 69 08 00    |                 adc.# 0008           
1859:000 | DONE ins | na 16 16 | 006571 | 85 1a       |                 sta.d 00021a         total bytes required for header
1860:000 | DONE wsp | na 16 16 |        |             |
1861:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1862:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1863:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1864:000 | DONE ins | na 16 16 | 006573 | 1a          |                 inc.a                
1865:000 | DONE ins | na 16 16 | 006574 | 1a          |                 inc.a                
1866:000 | DONE ins | na 16 16 | 006575 | 1a          |                 inc.a                
1867:000 | DONE wsp | na 16 16 |        |             |
1868:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1869:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1870:000 | DONE ins | na 16 16 | 006576 | 18          |                 clc                  
1871:000 | DONE ins | na 16 16 | 006577 | 65 00       |                 adc.d 000200         
1872:000 | DONE ins | na 16 16 | 006579 | 85 00       |                 sta.d 000200         
1873:000 | DONE wsp | na 16 16 |        |             |
1874:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1875:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1876:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1877:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1878:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1879:000 | DONE ins | na 16 16 | 00657b | b5 00       |                 lda.dx 00            
1880:000 | DONE ins | na 16 16 | 00657d | 48          |                 pha                  
1881:000 | DONE wsp | na 16 16 |        |             |
1882:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1883:000 | DONE ins | na 16 16 | 00657e | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1884:000 | DONE ins | na 16 16 | 006581 | a5 18       |                 lda.d 000218         get length byte
1885:000 | DONE ins | na 16 16 | 006583 | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1886:000 | DONE ins | na 16 16 | 006585 | c8          |                 iny                  
1887:000 | DONE ins | na 16 16 | 006586 | c8          |                 iny                  
1888:000 | DONE wsp | na 16 16 |        |             |
1889:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1890:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1891:000 | DONE ins | na 16 16 | 006587 | a5 02       |                 lda.d 000202         
1892:000 | DONE ins | na 16 16 | 006589 | 91 16       |                 sta.diy 000216       
1893:000 | DONE ins | na 16 16 | 00658b | c8          |                 iny                  
1894:000 | DONE ins | na 16 16 | 00658c | c8          |                 iny                  
1895:000 | DONE wsp | na 16 16 |        |             |
1896:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1897:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1898:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1899:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1900:000 | DONE ins | na 16 16 | 00658d | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1901:000 | DONE ins | na 16 16 | 00658f | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1902:000 | DONE wsp | na 16 16 |        |             |
1903:000 | DONE ins | na 16 16 | 006591 | 18          |                 clc                  
1904:000 | DONE ins | na 16 16 | 006592 | 65 1a       |                 adc.d 00021a         total header length
1905:000 | DONE ins | na 16 16 | 006594 | 91 16       |                 sta.diy 000216       
1906:000 | DONE ins | na 16 16 | 006596 | c8          |                 iny                  
1907:000 | DONE ins | na 16 16 | 006597 | c8          |                 iny                  
1908:000 | DONE wsp | na 16 16 |        |             |
1909:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1910:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1911:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1912:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1913:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1914:000 | DONE ins | na 16 16 | 006598 | 1a          |                 inc.a                
1915:000 | DONE ins | na 16 16 | 006599 | 1a          |                 inc.a                
1916:000 | DONE ins | na 16 16 | 00659a | 1a          |                 inc.a                
1917:000 | DONE ins | na 16 16 | 00659b | 91 16       |                 sta.diy 000216       
1918:000 | DONE ins | na 16 16 | 00659d | c8          |                 iny                  
1919:000 | DONE ins | na 16 16 | 00659e | c8          |                 iny                  
1920:000 | DONE wsp | na 16 16 |        |             |
1921:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1922:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1923:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1924:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1925:000 | DONE ins | na 16 16 | 00659f | 68          |                 pla                  get back string address
1926:000 | DONE ins | na 16 16 | 0065a0 | 38          |                 sec                  
1927:000 | DONE ins | na 16 16 | 0065a1 | e9 08 00    |                 sbc.# 0008           
1928:000 | DONE ins | na 16 16 | 0065a4 | 85 1a       |                 sta.d 00021a         
1929:000 | DONE ins | na 16 16 | 0065a6 | e2 20       |                 sep 20               
1929:001 | DONE ctl | na  8 16 |        |             |         .!a8
1930:000 | DONE lbl | na  8 16 | 0065a8 |             | @                                    
1931:000 | DONE ins | na  8 16 | 0065a8 | b1 1a       |                 lda.diy 00021a       
1932:000 | DONE ins | na  8 16 | 0065aa | 91 16       |                 sta.diy 000216       
1933:000 | DONE ins | na  8 16 | 0065ac | c8          |                 iny                  
1934:000 | DONE ins | na  8 16 | 0065ad | c6 18       |                 dec.d 000218         
1935:000 | DONE ins | na  8 16 | 0065af | d0 f7       |                 bne 0065a8           
1936:000 | DONE wsp | na  8 16 |        |             |
1937:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1938:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1939:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1940:000 | DONE cmt | na  8 16 |        |             |                 ; good
1941:000 | DONE ins | na  8 16 | 0065b1 | a9 20       |                 lda.# 20             opcode of JSR
1942:000 | DONE ins | na  8 16 | 0065b3 | 91 16       |                 sta.diy 000216       
1943:000 | DONE ins | na  8 16 | 0065b5 | c8          |                 iny                  single increase only because we have 8-bit A
1944:000 | DONE wsp | na  8 16 |        |             |
1945:000 | DONE ins | na  8 16 | 0065b6 | a9 0c       |                 lda.# .lsb 00730c    
1946:000 | DONE ins | na  8 16 | 0065b8 | 91 16       |                 sta.diy 000216       
1947:000 | DONE ins | na  8 16 | 0065ba | c8          |                 iny                  
1948:000 | DONE wsp | na  8 16 |        |             |
1949:000 | DONE ins | na  8 16 | 0065bb | a9 73       |                 lda.# .msb 00730c    
1950:000 | DONE ins | na  8 16 | 0065bd | 91 16       |                 sta.diy 000216       
1951:000 | DONE wsp | na  8 16 |        |             |
1952:000 | DONE ins | na  8 16 | 0065bf | c2 20       |                 rep 20               
1952:001 | DONE ctl | na 16 16 |        |             |         .!a16
1953:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1954:000 | DONE ins | na 16 16 | 0065c1 | b4 02       |                 ldy.dx 02            
1955:000 | DONE ins | na 16 16 | 0065c3 | e8          |                 inx                  
1956:000 | DONE ins | na 16 16 | 0065c4 | e8          |                 inx                  
1957:000 | DONE ins | na 16 16 | 0065c5 | e8          |                 inx                  
1958:000 | DONE ins | na 16 16 | 0065c6 | e8          |                 inx                  
1959:000 | DONE wsp | na 16 16 |        |             |
1960:000 | DONE lbl | na 16 16 | 0065c7 |             | z_create                             
1960:001 | DONE ins | na 16 16 | 0065c7 | 60          |                 rts                  
1961:000 | DONE wsp | na 16 16 |        |             |
1962:000 | DONE wsp | na 16 16 |        |             |
1963:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1964:000 | DONE cmt | na 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
1965:000 | DONE cmt | na 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
1966:000 | DONE cmt | na 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
1967:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
1968:000 | DONE cmt | na 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
1969:000 | DONE cmt | na 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
1970:000 | DONE cmt | na 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
1971:000 | DONE cmt | na 16 16 |        |             | ; following pForth and Gforth.
1972:000 | DONE lbl | na 16 16 | 0065c8 |             | xt_digitq                            
1973:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1974:000 | DONE ins | na 16 16 | 0065c8 | 98          |                 tya                  
1975:000 | DONE ins | na 16 16 | 0065c9 | 29 ff 00    |                 and.# 00ff           paranoid
1976:000 | DONE wsp | na 16 16 |        |             |
1977:000 | DONE ins | na 16 16 | 0065cc | e2 20       |                 sep 20               
1977:001 | DONE ctl | na  8 16 |        |             |         .!a8
1978:000 | DONE cmt | na  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
1979:000 | DONE ins | na  8 16 | 0065ce | c9 30       |                 cmp.# 30             
1980:000 | DONE ins | na  8 16 | 0065d0 | 90 1d       |                 bcc 0065ef           
1981:000 | DONE wsp | na  8 16 |        |             |
1982:000 | DONE cmt | na  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
1983:000 | DONE cmt | na  8 16 |        |             |                 ; a normal number
1984:000 | DONE ins | na  8 16 | 0065d2 | c9 3a       |                 cmp.# 00003a         This is ':'
1985:000 | DONE ins | na  8 16 | 0065d4 | 90 12       |                 bcc 0065e8           
1986:000 | DONE wsp | na  8 16 |        |             |
1987:000 | DONE cmt | na  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
1988:000 | DONE cmt | na  8 16 |        |             |                 ; we can treat the whole range as a number
1989:000 | DONE ins | na  8 16 | 0065d6 | c9 40       |                 cmp.# 000040         This is '@'
1990:000 | DONE ins | na  8 16 | 0065d8 | 90 15       |                 bcc 0065ef           
1991:000 | DONE wsp | na  8 16 |        |             |
1992:000 | DONE cmt | na  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
1993:000 | DONE ins | na  8 16 | 0065da | c9 61       |                 cmp.# 61             
1994:000 | DONE ins | na  8 16 | 0065dc | 90 07       |                 bcc 0065e5           not lower case, too low
1995:000 | DONE ins | na  8 16 | 0065de | c9 7b       |                 cmp.# 00007b         
1996:000 | DONE ins | na  8 16 | 0065e0 | b0 03       |                 bcs 0065e5           not lower case, too high
1997:000 | DONE wsp | na  8 16 |        |             |
1998:000 | DONE ins | na  8 16 | 0065e2 | 18          |                 clc                  just right
1999:000 | DONE ins | na  8 16 | 0065e3 | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
2000:000 | DONE wsp | na  8 16 |        |             |
2001:000 | DONE lbl | na  8 16 | 0065e5 |             | dq_case_done                         
2002:000 | DONE cmt | na  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
2003:000 | DONE cmt | na  8 16 |        |             |                 ; whole range as one number
2004:000 | DONE ins | na  8 16 | 0065e5 | 38          |                 sec                  
2005:000 | DONE ins | na  8 16 | 0065e6 | e9 07       |                 sbc.# 07             fall through to dq_checkbase
2006:000 | DONE wsp | na  8 16 |        |             |
2007:000 | DONE lbl | na  8 16 | 0065e8 |             | dq_checkbase                         
2008:000 | DONE cmt | na  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
2009:000 | DONE ins | na  8 16 | 0065e8 | 38          |                 sec                  
2010:000 | DONE ins | na  8 16 | 0065e9 | e9 30       |                 sbc.# 30             This is also the actual conversion step
2011:000 | DONE ins | na  8 16 | 0065eb | c5 1c       |                 cmp.d 00021c         
2012:000 | DONE ins | na  8 16 | 0065ed | 90 0b       |                 bcc 0065fa           
2013:000 | DONE wsp | na  8 16 |        |             |
2014:000 | DONE lbl | na  8 16 | 0065ef |             | dq_notdigit                          
2015:000 | DONE cmt | na  8 16 |        |             |                 ; not a digit, add a false flag
2016:000 | DONE ins | na  8 16 | 0065ef | ca          |                 dex                  
2017:000 | DONE ins | na  8 16 | 0065f0 | ca          |                 dex                  
2018:000 | DONE ins | na  8 16 | 0065f1 | 94 00       |                 sty.dx 00            keep the offending character in NOS
2019:000 | DONE ins | na  8 16 | 0065f3 | a0 00 00    |                 ldy.# 0000           
2020:000 | DONE ins | na  8 16 | 0065f6 | c2 20       |                 rep 20               
2020:001 | DONE ctl | na 16 16 |        |             |         .!a16
2021:000 | DONE ins | na 16 16 | 0065f8 | 80 09       |                 bra 006603           
2022:000 | DONE wsp | na 16 16 |        |             |
2023:000 | DONE lbl | na 16 16 | 0065fa |             | dq_success                           
2024:000 | DONE ins | na 16 16 | 0065fa | ca          |                 dex                  
2025:000 | DONE ins | na 16 16 | 0065fb | ca          |                 dex                  
2026:000 | DONE ins | na 16 16 | 0065fc | c2 20       |                 rep 20               
2026:001 | DONE ctl | na 16 16 |        |             |         .!a16
2027:000 | DONE ins | na 16 16 | 0065fe | 95 00       |                 sta.dx 00            put the number in NOS
2028:000 | DONE ins | na 16 16 | 006600 | a0 ff ff    |                 ldy.# 0ffff          
2029:000 | DONE wsp | na 16 16 |        |             |
2030:000 | DONE lbl | na 16 16 | 006603 |             | z_digitq                             
2030:001 | DONE ins | na 16 16 | 006603 | 60          |                 rts                  
2031:000 | DONE wsp | na 16 16 |        |             |
2032:000 | DONE wsp | na 16 16 |        |             |
2033:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2034:000 | DONE cmt | na 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
2035:000 | DONE cmt | na 16 16 |        |             | ; Add two double cell numbers.
2036:000 | DONE lbl | na 16 16 | 006604 |             | xt_dplus                             
2037:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2038:000 | DONE ins | na 16 16 | 006604 | 5a          |                 phy                  save hi word of first number, frees Y
2039:000 | DONE ins | na 16 16 | 006605 | b5 00       |                 lda.dx 00            lo word of first number
2040:000 | DONE ins | na 16 16 | 006607 | 18          |                 clc                  
2041:000 | DONE ins | na 16 16 | 006608 | 75 04       |                 adc.dx 04            add lo word of second number
2042:000 | DONE ins | na 16 16 | 00660a | a8          |                 tay                  
2043:000 | DONE wsp | na 16 16 |        |             |
2044:000 | DONE ins | na 16 16 | 00660b | 68          |                 pla                  get hi word of first number
2045:000 | DONE ins | na 16 16 | 00660c | 75 02       |                 adc.dx 02            add hi word of second number
2046:000 | DONE wsp | na 16 16 |        |             |
2047:000 | DONE ins | na 16 16 | 00660e | e8          |                 inx                  
2048:000 | DONE ins | na 16 16 | 00660f | e8          |                 inx                  
2049:000 | DONE ins | na 16 16 | 006610 | e8          |                 inx                  
2050:000 | DONE ins | na 16 16 | 006611 | e8          |                 inx                  
2051:000 | DONE wsp | na 16 16 |        |             |
2052:000 | DONE ins | na 16 16 | 006612 | 94 00       |                 sty.dx 00            lo result goes NOS
2053:000 | DONE ins | na 16 16 | 006614 | a8          |                 tay                  to result goes TOS
2054:000 | DONE wsp | na 16 16 |        |             |
2055:000 | DONE lbl | na 16 16 | 006615 |             | z_dplus                              
2055:001 | DONE ins | na 16 16 | 006615 | 60          |                 rts                  
2056:000 | DONE wsp | na 16 16 |        |             |
2057:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2058:000 | DONE cmt | na 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2059:000 | DONE cmt | na 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2060:000 | DONE cmt | na 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2061:000 | DONE cmt | na 16 16 |        |             | ; TODO make this work the way Gforth's does
2062:000 | DONE lbl | na 16 16 | 006616 |             | xt_dtos                              
2063:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2064:000 | DONE ins | na 16 16 | 006616 | b4 00       |                 ldy.dx 00            
2065:000 | DONE ins | na 16 16 | 006618 | e8          |                 inx                  
2066:000 | DONE ins | na 16 16 | 006619 | e8          |                 inx                  
2067:000 | DONE wsp | na 16 16 |        |             |
2068:000 | DONE lbl | na 16 16 | 00661a |             | z_dtos                               
2068:001 | DONE ins | na 16 16 | 00661a | 60          |                 rts                  
2069:000 | DONE wsp | na 16 16 |        |             |
2070:000 | DONE wsp | na 16 16 |        |             |
2071:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2072:000 | DONE cmt | na 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2073:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a double number
2074:000 | DONE cmt | na 16 16 |        |             | ; TODO recode in assembler
2075:000 | DONE lbl | na 16 16 | 00661b |             | xt_dabs                              
2076:000 | DONE cmt | na 16 16 |        |             |                 ; double cell is TOS
2077:000 | DONE ins | na 16 16 | 00661b | 98          |                 tya                  force flag test
2078:000 | DONE ins | na 16 16 | 00661c | f0 03       |                 beq 006621           already positive, life is good
2079:000 | DONE wsp | na 16 16 |        |             |
2080:000 | DONE ins | na 16 16 | 00661e | 20 37 66    |                 jsr 006637           
2081:000 | DONE wsp | na 16 16 |        |             |
2082:000 | DONE lbl | na 16 16 | 006621 |             | z_dabs                               
2082:001 | DONE ins | na 16 16 | 006621 | 60          |                 rts                  
2083:000 | DONE wsp | na 16 16 |        |             |
2084:000 | DONE wsp | na 16 16 |        |             |
2085:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2086:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2087:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
2088:000 | DONE lbl | na 16 16 | 006622 |             | xt_decimal                           
2089:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2090:000 | DONE ins | na 16 16 | 006622 | a9 0a 00    |                 lda.# 000a           
2091:000 | DONE ins | na 16 16 | 006625 | 85 1c       |                 sta.d 00021c         
2092:000 | DONE wsp | na 16 16 |        |             |
2093:000 | DONE lbl | na 16 16 | 006627 |             | z_decimal                            
2093:001 | DONE ins | na 16 16 | 006627 | 60          |                 rts                  
2094:000 | DONE wsp | na 16 16 |        |             |
2095:000 | DONE wsp | na 16 16 |        |             |
2096:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2097:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2098:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2099:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
2100:000 | DONE lbl | na 16 16 | 006628 |             | xt_depth                             
2101:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2102:000 | DONE cmt | na 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2103:000 | DONE ins | na 16 16 | 006628 | 86 04       |                 stx.d 000204         
2104:000 | DONE ins | na 16 16 | 00662a | a9 f8 02    |                 lda.# 0002f8         
2105:000 | DONE ins | na 16 16 | 00662d | 38          |                 sec                  
2106:000 | DONE ins | na 16 16 | 00662e | e5 04       |                 sbc.d 000204         
2107:000 | DONE wsp | na 16 16 |        |             |
2108:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2109:000 | DONE ins | na 16 16 | 006630 | 4a          |                 lsr.a                
2110:000 | DONE wsp | na 16 16 |        |             |
2111:000 | DONE ins | na 16 16 | 006631 | ca          |                 dex                  
2112:000 | DONE ins | na 16 16 | 006632 | ca          |                 dex                  
2113:000 | DONE ins | na 16 16 | 006633 | 94 00       |                 sty.dx 00            
2114:000 | DONE wsp | na 16 16 |        |             |
2115:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
2116:000 | DONE ins | na 16 16 | 006635 | a8          |                 tay                  
2117:000 | DONE wsp | na 16 16 |        |             |
2118:000 | DONE lbl | na 16 16 | 006636 |             | z_depth                              
2118:001 | DONE ins | na 16 16 | 006636 | 60          |                 rts                  
2119:000 | DONE wsp | na 16 16 |        |             |
2120:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2121:000 | DONE cmt | na 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2122:000 | DONE cmt | na 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2123:000 | DONE lbl | na 16 16 | 006637 |             | xt_dnegate                           
2124:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2125:000 | DONE cmt | na 16 16 |        |             |                 ; start off with LSW (in NOS)
2126:000 | DONE ins | na 16 16 | 006637 | b5 00       |                 lda.dx 00            
2127:000 | DONE ins | na 16 16 | 006639 | 49 ff ff    |                 eor.# 0ffff          
2128:000 | DONE wsp | na 16 16 |        |             |
2129:000 | DONE cmt | na 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2130:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
2131:000 | DONE ins | na 16 16 | 00663c | 18          |                 clc                  
2132:000 | DONE ins | na 16 16 | 00663d | 69 01 00    |                 adc.# 0001           
2133:000 | DONE ins | na 16 16 | 006640 | 95 00       |                 sta.dx 00            
2134:000 | DONE wsp | na 16 16 |        |             |
2135:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
2136:000 | DONE ins | na 16 16 | 006642 | 98          |                 tya                  
2137:000 | DONE ins | na 16 16 | 006643 | 49 ff ff    |                 eor.# 0ffff          
2138:000 | DONE ins | na 16 16 | 006646 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2139:000 | DONE ins | na 16 16 | 006649 | a8          |                 tay                  
2140:000 | DONE wsp | na 16 16 |        |             |
2141:000 | DONE lbl | na 16 16 | 00664a |             | z_dnegate                            
2141:001 | DONE ins | na 16 16 | 00664a | 60          |                 rts                  
2142:000 | DONE wsp | na 16 16 |        |             |
2143:000 | DONE wsp | na 16 16 |        |             |
2144:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2145:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2146:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2147:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
2148:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2149:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2150:000 | DONE lbl | na 16 16 | 00664b |             | xt_does                              
2151:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2152:000 | DONE ins | na 16 16 | 00664b | f4 58 66    |                 phe.# 006658         
2153:000 | DONE ins | na 16 16 | 00664e | 20 6d 73    |                 jsr 00736d           
2154:000 | DONE wsp | na 16 16 |        |             |
2155:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2156:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2157:000 | DONE ins | na 16 16 | 006651 | f4 ff 72    |                 phe.# 0072ff         
2158:000 | DONE ins | na 16 16 | 006654 | 20 6d 73    |                 jsr 00736d           
2159:000 | DONE wsp | na 16 16 |        |             |
2160:000 | DONE lbl | na 16 16 | 006657 |             | z_does                               
2160:001 | DONE ins | na 16 16 | 006657 | 60          |                 rts                  
2161:000 | DONE wsp | na 16 16 |        |             |
2162:000 | DONE lbl | na 16 16 | 006658 |             | does_rt                              
2163:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2164:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2165:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2166:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2167:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
2168:000 | DONE ins | na 16 16 | 006658 | 68          |                 pla                  
2169:000 | DONE ins | na 16 16 | 006659 | 1a          |                 inc.a                increase by one because of RTS mechanics
2170:000 | DONE ins | na 16 16 | 00665a | 85 16       |                 sta.d 000216         
2171:000 | DONE wsp | na 16 16 |        |             |
2172:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2173:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2174:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2175:000 | DONE cmt | na 16 16 |        |             |                 ; now.
2176:000 | DONE ins | na 16 16 | 00665c | a5 02       |                 lda.d 000202         
2177:000 | DONE wsp | na 16 16 |        |             |
2178:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2179:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
2180:000 | DONE ins | na 16 16 | 00665e | 18          |                 clc                  
2181:000 | DONE ins | na 16 16 | 00665f | 69 04 00    |                 adc.# 0004           
2182:000 | DONE ins | na 16 16 | 006662 | 85 18       |                 sta.d 000218         
2183:000 | DONE wsp | na 16 16 |        |             |
2184:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2185:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
2186:000 | DONE ins | na 16 16 | 006664 | b2 18       |                 lda.di 000218        LDA (TMP2)
2187:000 | DONE ins | na 16 16 | 006666 | 1a          |                 inc.a                
2188:000 | DONE ins | na 16 16 | 006667 | 85 18       |                 sta.d 000218         Points to address to be replaced
2189:000 | DONE wsp | na 16 16 |        |             |
2190:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
2191:000 | DONE ins | na 16 16 | 006669 | a5 16       |                 lda.d 000216         
2192:000 | DONE ins | na 16 16 | 00666b | 92 18       |                 sta.di 000218        STA (TMP2)
2193:000 | DONE wsp | na 16 16 |        |             |
2194:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2195:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2196:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2197:000 | DONE ins | na 16 16 | 00666d | 60          |                 rts                  
2198:000 | DONE wsp | na 16 16 |        |             |
2199:000 | DONE wsp | na 16 16 |        |             |
2200:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2201:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2202:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
2203:000 | DONE wsp | na 16 16 |        |             |
2204:000 | DONE lbl | na 16 16 | 00666e |             | xt_drop                              
2205:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2206:000 | DONE ins | na 16 16 | 00666e | b4 00       |                 ldy.dx 00            
2207:000 | DONE ins | na 16 16 | 006670 | e8          |                 inx                  
2208:000 | DONE ins | na 16 16 | 006671 | e8          |                 inx                  
2209:000 | DONE wsp | na 16 16 |        |             |
2210:000 | DONE lbl | na 16 16 | 006672 |             | z_drop                               
2210:001 | DONE ins | na 16 16 | 006672 | 60          |                 rts                  
2211:000 | DONE wsp | na 16 16 |        |             |
2212:000 | DONE wsp | na 16 16 |        |             |
2213:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2214:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2215:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
2216:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
2217:000 | DONE lbl | na 16 16 | 006673 |             | xt_dump                              
2218:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
2219:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
2220:000 | DONE ins | na 16 16 | 006673 | 84 16       |                 sty.d 000216         
2221:000 | DONE wsp | na 16 16 |        |             |
2222:000 | DONE lbl | na 16 16 | 006675 |             | dump_line_loop                       
2223:000 | DONE ins | na 16 16 | 006675 | 20 4e 65    |                 jsr 00654e           
2224:000 | DONE wsp | na 16 16 |        |             |
2225:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
2226:000 | DONE ins | na 16 16 | 006678 | a0 10 00    |                 ldy.# 0010           
2227:000 | DONE lbl | na 16 16 | 00667b |             | dump_byte_loop                       
2228:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
2229:000 | DONE ins | na 16 16 | 00667b | a5 16       |                 lda.d 000216         
2230:000 | DONE ins | na 16 16 | 00667d | f0 11       |                 beq 006690           
2231:000 | DONE wsp | na 16 16 |        |             |
2232:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
2233:000 | DONE ins | na 16 16 | 00667f | a1 00       |                 lda.dxi 00           
2234:000 | DONE ins | na 16 16 | 006681 | 20 ac 73    |                 jsr 0073ac           TODO replace by EMIT
2235:000 | DONE ins | na 16 16 | 006684 | 20 a0 6a    |                 jsr 006aa0           
2236:000 | DONE wsp | na 16 16 |        |             |
2237:000 | DONE cmt | na 16 16 |        |             |                 ; next character
2238:000 | DONE ins | na 16 16 | 006687 | f6 00       |                 inc.dx 00            
2239:000 | DONE wsp | na 16 16 |        |             |
2240:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
2241:000 | DONE ins | na 16 16 | 006689 | c6 16       |                 dec.d 000216         
2242:000 | DONE ins | na 16 16 | 00668b | 88          |                 dey                  
2243:000 | DONE ins | na 16 16 | 00668c | d0 ed       |                 bne 00667b           
2244:000 | DONE ins | na 16 16 | 00668e | 80 e5       |                 bra 006675           
2245:000 | DONE wsp | na 16 16 |        |             |
2246:000 | DONE lbl | na 16 16 | 006690 |             | dump_done                            
2247:000 | DONE ins | na 16 16 | 006690 | 20 4e 65    |                 jsr 00654e           
2248:000 | DONE wsp | na 16 16 |        |             |
2249:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
2250:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
2251:000 | DONE ins | na 16 16 | 006693 | b4 02       |                 ldy.dx 02            
2252:000 | DONE ins | na 16 16 | 006695 | e8          |                 inx                  
2253:000 | DONE ins | na 16 16 | 006696 | e8          |                 inx                  
2254:000 | DONE ins | na 16 16 | 006697 | e8          |                 inx                  
2255:000 | DONE ins | na 16 16 | 006698 | e8          |                 inx                  
2256:000 | DONE wsp | na 16 16 |        |             |
2257:000 | DONE lbl | na 16 16 | 006699 |             | z_dump                               
2257:001 | DONE ins | na 16 16 | 006699 | 60          |                 rts                  
2258:000 | DONE wsp | na 16 16 |        |             |
2259:000 | DONE wsp | na 16 16 |        |             |
2260:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2261:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2262:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
2263:000 | DONE wsp | na 16 16 |        |             |
2264:000 | DONE lbl | na 16 16 | 00669a |             | xt_dup                               
2265:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2266:000 | DONE ins | na 16 16 | 00669a | ca          |                 dex                  
2267:000 | DONE ins | na 16 16 | 00669b | ca          |                 dex                  
2268:000 | DONE ins | na 16 16 | 00669c | 94 00       |                 sty.dx 00            
2269:000 | DONE wsp | na 16 16 |        |             |
2270:000 | DONE lbl | na 16 16 | 00669e |             | z_dup                                
2270:001 | DONE ins | na 16 16 | 00669e | 60          |                 rts                  
2271:000 | DONE wsp | na 16 16 |        |             |
2272:000 | DONE wsp | na 16 16 |        |             |
2273:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2274:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
2275:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
2276:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
2277:000 | DONE lbl | na 16 16 | 00669f |             | xt_evaluate                          
2278:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
2279:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
2280:000 | DONE ins | na 16 16 | 00669f | a5 12       |                 lda.d 000212         >IN
2281:000 | DONE ins | na 16 16 | 0066a1 | 48          |                 pha                  
2282:000 | DONE ins | na 16 16 | 0066a2 | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
2283:000 | DONE ins | na 16 16 | 0066a4 | 48          |                 pha                  
2284:000 | DONE ins | na 16 16 | 0066a5 | a5 0c       |                 lda.d 00020c         
2285:000 | DONE ins | na 16 16 | 0066a7 | 48          |                 pha                  
2286:000 | DONE ins | na 16 16 | 0066a8 | a5 0e       |                 lda.d 00020e         
2287:000 | DONE ins | na 16 16 | 0066aa | 48          |                 pha                  
2288:000 | DONE wsp | na 16 16 |        |             |
2289:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
2290:000 | DONE ins | na 16 16 | 0066ab | a9 ff ff    |                 lda.# 0ffff          
2291:000 | DONE ins | na 16 16 | 0066ae | 85 0a       |                 sta.d 00020a         
2292:000 | DONE wsp | na 16 16 |        |             |
2293:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
2294:000 | DONE ins | na 16 16 | 0066b0 | 64 12       |                 stz.d 000212         
2295:000 | DONE wsp | na 16 16 |        |             |
2296:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
2297:000 | DONE ins | na 16 16 | 0066b2 | 84 0e       |                 sty.d 00020e         
2298:000 | DONE ins | na 16 16 | 0066b4 | b5 00       |                 lda.dx 00            
2299:000 | DONE ins | na 16 16 | 0066b6 | 85 0c       |                 sta.d 00020c         
2300:000 | DONE wsp | na 16 16 |        |             |
2301:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
2302:000 | DONE ins | na 16 16 | 0066b8 | b4 02       |                 ldy.dx 02            
2303:000 | DONE ins | na 16 16 | 0066ba | e8          |                 inx                  
2304:000 | DONE ins | na 16 16 | 0066bb | e8          |                 inx                  
2305:000 | DONE ins | na 16 16 | 0066bc | e8          |                 inx                  
2306:000 | DONE ins | na 16 16 | 0066bd | e8          |                 inx                  
2307:000 | DONE wsp | na 16 16 |        |             |
2308:000 | DONE ins | na 16 16 | 0066be | 20 13 73    |                 jsr 007313           
2309:000 | DONE wsp | na 16 16 |        |             |
2310:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
2311:000 | DONE ins | na 16 16 | 0066c1 | 68          |                 pla                  
2312:000 | DONE ins | na 16 16 | 0066c2 | 85 0e       |                 sta.d 00020e         
2313:000 | DONE ins | na 16 16 | 0066c4 | 68          |                 pla                  
2314:000 | DONE ins | na 16 16 | 0066c5 | 85 0c       |                 sta.d 00020c         
2315:000 | DONE ins | na 16 16 | 0066c7 | 68          |                 pla                  
2316:000 | DONE ins | na 16 16 | 0066c8 | 85 0a       |                 sta.d 00020a         
2317:000 | DONE ins | na 16 16 | 0066ca | 68          |                 pla                  
2318:000 | DONE ins | na 16 16 | 0066cb | 85 12       |                 sta.d 000212         
2319:000 | DONE wsp | na 16 16 |        |             |
2320:000 | DONE lbl | na 16 16 | 0066cd |             | z_evaluate                           
2320:001 | DONE ins | na 16 16 | 0066cd | 60          |                 rts                  
2321:000 | DONE wsp | na 16 16 |        |             |
2322:000 | DONE wsp | na 16 16 |        |             |
2323:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2324:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2325:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
2326:000 | DONE wsp | na 16 16 |        |             |
2327:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2328:000 | DONE cmt | na 16 16 |        |             | ; range
2329:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2330:000 | DONE lbl | na 16 16 | 0066ce |             | execute_ip                           
2330:001 | DONE dir | na 16 16 | 0066ce | (3 bytes)   |         .byte 00, 00, 00             
2330:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
2331:000 | DONE wsp | na 16 16 |        |             |
2332:000 | DONE lbl | na 16 16 | 0066d1 |             | xt_execute                           
2333:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2334:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2335:000 | DONE cmt | na 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
2336:000 | DONE ins | na 16 16 | 0066d1 | 8c ce 66    |                 sty 0066ce           
2337:000 | DONE ins | na 16 16 | 0066d4 | b4 00       |                 ldy.dx 00            
2338:000 | DONE ins | na 16 16 | 0066d6 | e8          |                 inx                  
2339:000 | DONE ins | na 16 16 | 0066d7 | e8          |                 inx                  
2340:000 | DONE wsp | na 16 16 |        |             |
2341:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
2342:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
2343:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
2344:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
2345:000 | DONE ins | na 16 16 | 0066d8 | 6c ce 66    |                 jmp.i 0066ce         JMP (EXECUTE_IP)
2346:000 | DONE wsp | na 16 16 |        |             |
2347:000 | DONE lbl | na 16 16 | 0066db |             | z_execute                            
2347:001 | DONE ins | na 16 16 | 0066db | ea          |                 nop                  Never reached, see if we need the NOP
2348:000 | DONE wsp | na 16 16 |        |             |
2349:000 | DONE wsp | na 16 16 |        |             |
2350:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2351:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
2352:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
2353:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
2354:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
2355:000 | DONE wsp | na 16 16 |        |             |
2356:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2357:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
2358:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
2359:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
2360:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
2361:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
2362:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2363:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
2364:000 | DONE lbl | na 16 16 | 0066dc |             | xt_find-name                         
2365:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
2366:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
2367:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
2368:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
2369:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
2370:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
2371:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
2372:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
2373:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2374:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2375:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
2376:000 | DONE ins | na 16 16 | 0066dc | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
2377:000 | DONE wsp | na 16 16 |        |             |
2378:000 | DONE ins | na 16 16 | 0066de | a4 02       |                 ldy.d 000202         
2379:000 | DONE ins | na 16 16 | 0066e0 | 84 16       |                 sty.d 000216         nt of first Dictionary word
2380:000 | DONE wsp | na 16 16 |        |             |
2381:000 | DONE ins | na 16 16 | 0066e2 | b4 00       |                 ldy.dx 00            
2382:000 | DONE ins | na 16 16 | 0066e4 | 84 18       |                 sty.d 000218         address of mystery string, was NOS
2383:000 | DONE wsp | na 16 16 |        |             |
2384:000 | DONE lbl | na 16 16 | 0066e6 |             | find-name_loop                       
2385:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
2386:000 | DONE ins | na 16 16 | 0066e6 | b2 16       |                 lda.di 000216        LSB in first header word is length
2387:000 | DONE ins | na 16 16 | 0066e8 | 29 ff 00    |                 and.# 00ff           
2388:000 | DONE ins | na 16 16 | 0066eb | c5 06       |                 cmp.d 000206         we test LSB
2389:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
2390:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
2391:000 | DONE cmt | na 16 16 |        |             |                 ; same
2392:000 | DONE ins | na 16 16 | 0066ed | f0 0c       |                 beq 0066fb           
2393:000 | DONE wsp | na 16 16 |        |             |
2394:000 | DONE lbl | na 16 16 | 0066ef |             | find-name_next_entry                 
2395:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
2396:000 | DONE ins | na 16 16 | 0066ef | e6 16       |                 inc.d 000216         
2397:000 | DONE ins | na 16 16 | 0066f1 | e6 16       |                 inc.d 000216         
2398:000 | DONE ins | na 16 16 | 0066f3 | b2 16       |                 lda.di 000216        LDA (TMP1)
2399:000 | DONE wsp | na 16 16 |        |             |
2400:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
2401:000 | DONE ins | na 16 16 | 0066f5 | f0 36       |                 beq 00672d           
2402:000 | DONE wsp | na 16 16 |        |             |
2403:000 | DONE ins | na 16 16 | 0066f7 | 85 16       |                 sta.d 000216         new header
2404:000 | DONE ins | na 16 16 | 0066f9 | 80 eb       |                 bra 0066e6           
2405:000 | DONE wsp | na 16 16 |        |             |
2406:000 | DONE lbl | na 16 16 | 0066fb |             | find-name_chars                      
2407:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
2408:000 | DONE wsp | na 16 16 |        |             |
2409:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
2410:000 | DONE ins | na 16 16 | 0066fb | e2 20       |                 sep 20               
2410:001 | DONE ctl | na  8 16 |        |             |         .!a8
2411:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
2412:000 | DONE cmt | na  8 16 |        |             |                 ; header
2413:000 | DONE ins | na  8 16 | 0066fd | a0 08 00    |                 ldy.# 0008           
2414:000 | DONE ins | na  8 16 | 006700 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
2415:000 | DONE ins | na  8 16 | 006702 | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
2416:000 | DONE ins | na  8 16 | 006704 | f0 04       |                 beq 00670a           
2417:000 | DONE wsp | na  8 16 |        |             |
2418:000 | DONE lbl | na  8 16 | 006706 |             | find-name_char_nomatcnt_8            
2419:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
2420:000 | DONE ins | na  8 16 | 006706 | c2 20       |                 rep 20               
2420:001 | DONE ctl | na 16 16 |        |             |         .!a16
2421:000 | DONE ins | na 16 16 | 006708 | 80 e5       |                 bra 0066ef           
2422:000 | DONE wsp | na 16 16 |        |             |
2423:000 | DONE lbl | na 16 16 | 00670a |             | find-name_all_chars                  
2424:000 | DONE dir | na  8 16 |        |             |         .!a8                         
2425:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
2426:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
2427:000 | DONE ins | na  8 16 | 00670a | a4 06       |                 ldy.d 000206         
2428:000 | DONE ins | na  8 16 | 00670c | 88          |                 dey                  faster and shorter than CPY.# 01
2429:000 | DONE ins | na  8 16 | 00670d | f0 18       |                 beq 006727           
2430:000 | DONE wsp | na  8 16 |        |             |
2431:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
2432:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
2433:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
2434:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
2435:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
2436:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
2437:000 | DONE wsp | na  8 16 |        |             |
2438:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
2439:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
2440:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
2441:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
2442:000 | DONE ins | na  8 16 | 00670f | c2 20       |                 rep 20               
2442:001 | DONE ctl | na 16 16 |        |             |         .!a16
2443:000 | DONE ins | na 16 16 | 006711 | a5 16       |                 lda.d 000216         address of Dictionary string
2444:000 | DONE ins | na 16 16 | 006713 | 18          |                 clc                  
2445:000 | DONE ins | na 16 16 | 006714 | 69 08 00    |                 adc.# 0008           
2446:000 | DONE ins | na 16 16 | 006717 | 85 1a       |                 sta.d 00021a         
2447:000 | DONE ins | na 16 16 | 006719 | e2 20       |                 sep 20               
2447:001 | DONE ctl | na  8 16 |        |             |         .!a8
2448:000 | DONE ins | na  8 16 | 00671b | a4 06       |                 ldy.d 000206         get length of strings as loop index
2449:000 | DONE ins | na  8 16 | 00671d | 88          |                 dey                  first index is length minus 1
2450:000 | DONE wsp | na  8 16 |        |             |
2451:000 | DONE lbl | na  8 16 | 00671e |             | @                                    
2452:000 | DONE ins | na  8 16 | 00671e | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
2453:000 | DONE ins | na  8 16 | 006720 | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
2454:000 | DONE ins | na  8 16 | 006722 | d0 e2       |                 bne 006706           
2455:000 | DONE ins | na  8 16 | 006724 | 88          |                 dey                  start of string (Y=0) was already tested
2456:000 | DONE ins | na  8 16 | 006725 | d0 f7       |                 bne 00671e           
2457:000 | DONE wsp | na  8 16 |        |             |
2458:000 | DONE lbl | na  8 16 | 006727 |             | find-name_success                    
2459:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
2460:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
2461:000 | DONE ins | na  8 16 | 006727 | c2 20       |                 rep 20               
2461:001 | DONE ctl | na 16 16 |        |             |         .!a16
2462:000 | DONE ins | na 16 16 | 006729 | a4 16       |                 ldy.d 000216         get the correct DP
2463:000 | DONE ins | na 16 16 | 00672b | 80 03       |                 bra 006730           
2464:000 | DONE wsp | na 16 16 |        |             |
2465:000 | DONE wsp | na 16 16 |        |             |
2466:000 | DONE lbl | na 16 16 | 00672d |             | find-name_failure_16                 
2467:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
2468:000 | DONE cmt | na 16 16 |        |             |                 ; bit
2469:000 | DONE ins | na 16 16 | 00672d | a0 00 00    |                 ldy.# 0000           fall thru
2470:000 | DONE wsp | na 16 16 |        |             |
2471:000 | DONE lbl | na 16 16 | 006730 |             | find-name_done                       
2472:000 | DONE ins | na 16 16 | 006730 | e8          |                 inx                  drop old address (NIP)
2473:000 | DONE ins | na 16 16 | 006731 | e8          |                 inx                  
2474:000 | DONE wsp | na 16 16 |        |             |
2475:000 | DONE lbl | na 16 16 | 006732 |             | z_find-name                          
2475:001 | DONE ins | na 16 16 | 006732 | 60          |                 rts                  
2476:000 | DONE wsp | na 16 16 |        |             |
2477:000 | DONE wsp | na 16 16 |        |             |
2478:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2479:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
2480:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
2481:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
2482:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
2483:000 | DONE lbl | na 16 16 | 006733 |             | xt_immediate                         
2484:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2485:000 | DONE ins | na 16 16 | 006733 | a9 02 00    |                 lda.# IM             Immediate flag
2486:000 | DONE ins | na 16 16 | 006736 | eb          |                 xba                  flags are MSB
2487:000 | DONE ins | na 16 16 | 006737 | 12 02       |                 ora.di 000202        ORA (DP)
2488:000 | DONE ins | na 16 16 | 006739 | 92 02       |                 sta.di 000202        
2489:000 | DONE wsp | na 16 16 |        |             |
2490:000 | DONE lbl | na 16 16 | 00673b |             | z_immediate                          
2490:001 | DONE ins | na 16 16 | 00673b | 60          |                 rts                  
2491:000 | DONE wsp | na 16 16 |        |             |
2492:000 | DONE wsp | na 16 16 |        |             |
2493:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2494:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
2495:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
2496:000 | DONE lbl | na 16 16 | 00673c |             | xt_invert                            
2497:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2498:000 | DONE ins | na 16 16 | 00673c | 98          |                 tya                  
2499:000 | DONE ins | na 16 16 | 00673d | 49 ff ff    |                 eor.# 0ffff          
2500:000 | DONE ins | na 16 16 | 006740 | a8          |                 tay                  
2501:000 | DONE wsp | na 16 16 |        |             |
2502:000 | DONE lbl | na 16 16 | 006741 |             | z_invert                             
2502:001 | DONE ins | na 16 16 | 006741 | 60          |                 rts                  
2503:000 | DONE wsp | na 16 16 |        |             |
2504:000 | DONE wsp | na 16 16 |        |             |
2505:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2506:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
2507:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
2508:000 | DONE lbl | na 16 16 | 006742 |             | xt_here                              
2509:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2510:000 | DONE ins | na 16 16 | 006742 | ca          |                 dex                  
2511:000 | DONE ins | na 16 16 | 006743 | ca          |                 dex                  
2512:000 | DONE ins | na 16 16 | 006744 | 94 00       |                 sty.dx 00            
2513:000 | DONE wsp | na 16 16 |        |             |
2514:000 | DONE ins | na 16 16 | 006746 | a4 00       |                 ldy.d 000200         
2515:000 | DONE wsp | na 16 16 |        |             |
2516:000 | DONE lbl | na 16 16 | 006748 |             | z_here                               
2516:001 | DONE ins | na 16 16 | 006748 | 60          |                 rts                  
2517:000 | DONE wsp | na 16 16 |        |             |
2518:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2519:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
2520:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
2521:000 | DONE lbl | na 16 16 | 006749 |             | xt_hex                               
2522:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2523:000 | DONE ins | na 16 16 | 006749 | a9 10 00    |                 lda.# 0010           
2524:000 | DONE ins | na 16 16 | 00674c | 85 1c       |                 sta.d 00021c         
2525:000 | DONE wsp | na 16 16 |        |             |
2526:000 | DONE lbl | na 16 16 | 00674e |             | z_hex                                
2526:001 | DONE ins | na 16 16 | 00674e | 60          |                 rts                  
2527:000 | DONE wsp | na 16 16 |        |             |
2528:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2529:000 | DONE cmt | na 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
2530:000 | DONE cmt | na 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
2531:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2532:000 | DONE cmt | na 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
2533:000 | DONE cmt | na 16 16 |        |             | ; tohold instead of HLD.
2534:000 | DONE lbl | na 16 16 | 00674f |             | xt_hold                              
2535:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2536:000 | DONE ins | na 16 16 | 00674f | c6 28       |                 dec.d 000228         -1 HLD +!
2537:000 | DONE wsp | na 16 16 |        |             |
2538:000 | DONE ins | na 16 16 | 006751 | 98          |                 tya                  
2539:000 | DONE ins | na 16 16 | 006752 | e2 20       |                 sep 20               
2539:001 | DONE ctl | na  8 16 |        |             |         .!a8
2540:000 | DONE ins | na  8 16 | 006754 | 92 28       |                 sta.di 000228        STA (TOHOLD)
2541:000 | DONE ins | na  8 16 | 006756 | c2 20       |                 rep 20               
2541:001 | DONE ctl | na 16 16 |        |             |         .!a16
2542:000 | DONE ins | na 16 16 | 006758 | b4 00       |                 ldy.dx 00            
2543:000 | DONE ins | na 16 16 | 00675a | e8          |                 inx                  
2544:000 | DONE ins | na 16 16 | 00675b | e8          |                 inx                  
2545:000 | DONE wsp | na 16 16 |        |             |
2546:000 | DONE lbl | na 16 16 | 00675c |             | z_hold                               
2546:001 | DONE ins | na 16 16 | 00675c | 60          |                 rts                  
2547:000 | DONE wsp | na 16 16 |        |             |
2548:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2549:000 | DONE cmt | na 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
2550:000 | DONE cmt | na 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
2551:000 | DONE cmt | na 16 16 |        |             | ; version of this word is called LATEST.
2552:000 | DONE lbl | na 16 16 | 00675d |             | xt_latestnt                          
2553:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2554:000 | DONE ins | na 16 16 | 00675d | ca          |                 dex                  make room on Data Stack
2555:000 | DONE ins | na 16 16 | 00675e | ca          |                 dex                  
2556:000 | DONE ins | na 16 16 | 00675f | 94 00       |                 sty.dx 00            
2557:000 | DONE wsp | na 16 16 |        |             |
2558:000 | DONE ins | na 16 16 | 006761 | a5 02       |                 lda.d 000202         
2559:000 | DONE ins | na 16 16 | 006763 | a8          |                 tay                  
2560:000 | DONE wsp | na 16 16 |        |             |
2561:000 | DONE lbl | na 16 16 | 006764 |             | z_latestnt                           
2561:001 | DONE ins | na 16 16 | 006764 | 60          |                 rts                  
2562:000 | DONE wsp | na 16 16 |        |             |
2563:000 | DONE wsp | na 16 16 |        |             |
2564:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2565:000 | DONE cmt | na 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
2566:000 | DONE cmt | na 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
2567:000 | DONE cmt | na 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
2568:000 | DONE lbl | na 16 16 | 006765 |             | xt_latestxt                          
2569:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2570:000 | DONE ins | na 16 16 | 006765 | ca          |                 dex                  make room on Data Stack
2571:000 | DONE ins | na 16 16 | 006766 | ca          |                 dex                  
2572:000 | DONE ins | na 16 16 | 006767 | 94 00       |                 sty.dx 00            
2573:000 | DONE wsp | na 16 16 |        |             |
2574:000 | DONE ins | na 16 16 | 006769 | a5 02       |                 lda.d 000202         
2575:000 | DONE wsp | na 16 16 |        |             |
2576:000 | DONE ins | na 16 16 | 00676b | 18          |                 clc                  xt is stored four bytes below nt in header
2577:000 | DONE ins | na 16 16 | 00676c | 69 04 00    |                 adc.# 0004           
2578:000 | DONE ins | na 16 16 | 00676f | a8          |                 tay                  
2579:000 | DONE wsp | na 16 16 |        |             |
2580:000 | DONE ins | na 16 16 | 006770 | b9 00 00    |                 lda.y 0000           FETCH
2581:000 | DONE ins | na 16 16 | 006773 | a8          |                 tay                  
2582:000 | DONE wsp | na 16 16 |        |             |
2583:000 | DONE lbl | na 16 16 | 006774 |             | z_latestxt                           
2583:001 | DONE ins | na 16 16 | 006774 | 60          |                 rts                  
2584:000 | DONE wsp | na 16 16 |        |             |
2585:000 | DONE wsp | na 16 16 |        |             |
2586:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2587:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
2588:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
2589:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
2590:000 | DONE cmt | na 16 16 |        |             | ; for instance
2591:000 | DONE lbl | na 16 16 | 006775 |             | xt_literal                           
2592:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
2593:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
2594:000 | DONE ins | na 16 16 | 006775 | f4 87 67    |                 phe.# 006787         PEA LITERAL_RT
2595:000 | DONE ins | na 16 16 | 006778 | 20 6d 73    |                 jsr 00736d           
2596:000 | DONE wsp | na 16 16 |        |             |
2597:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
2598:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
2599:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
2600:000 | DONE ins | na 16 16 | 00677b | 98          |                 tya                  
2601:000 | DONE ins | na 16 16 | 00677c | 92 00       |                 sta.di 000200        
2602:000 | DONE ins | na 16 16 | 00677e | e6 00       |                 inc.d 000200         
2603:000 | DONE ins | na 16 16 | 006780 | e6 00       |                 inc.d 000200         
2604:000 | DONE wsp | na 16 16 |        |             |
2605:000 | DONE ins | na 16 16 | 006782 | b4 00       |                 ldy.dx 00            DROP
2606:000 | DONE ins | na 16 16 | 006784 | e8          |                 inx                  
2607:000 | DONE ins | na 16 16 | 006785 | e8          |                 inx                  
2608:000 | DONE wsp | na 16 16 |        |             |
2609:000 | DONE lbl | na 16 16 | 006786 |             | z_literal                            
2609:001 | DONE ins | na 16 16 | 006786 | 60          |                 rts                  
2610:000 | DONE wsp | na 16 16 |        |             |
2611:000 | DONE lbl | na 16 16 | 006787 |             | literal_rt                           
2612:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
2613:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
2614:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
2615:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
2616:000 | DONE wsp | na 16 16 |        |             |
2617:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
2618:000 | DONE ins | na 16 16 | 006787 | ca          |                 dex                  
2619:000 | DONE ins | na 16 16 | 006788 | ca          |                 dex                  
2620:000 | DONE ins | na 16 16 | 006789 | 94 00       |                 sty.dx 00            
2621:000 | DONE wsp | na 16 16 |        |             |
2622:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
2623:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
2624:000 | DONE ins | na 16 16 | 00678b | 7a          |                 ply                  
2625:000 | DONE ins | na 16 16 | 00678c | c8          |                 iny                  
2626:000 | DONE ins | na 16 16 | 00678d | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
2627:000 | DONE wsp | na 16 16 |        |             |
2628:000 | DONE ins | na 16 16 | 006790 | c8          |                 iny                  move return address past data and restore
2629:000 | DONE ins | na 16 16 | 006791 | 5a          |                 phy                  so we can get back home
2630:000 | DONE wsp | na 16 16 |        |             |
2631:000 | DONE ins | na 16 16 | 006792 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
2632:000 | DONE wsp | na 16 16 |        |             |
2633:000 | DONE ins | na 16 16 | 006793 | 60          |                 rts                  
2634:000 | DONE wsp | na 16 16 |        |             |
2635:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2636:000 | DONE cmt | na 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
2637:000 | DONE cmt | na 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
2638:000 | DONE cmt | na 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
2639:000 | DONE cmt | na 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
2640:000 | DONE cmt | na 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
2641:000 | DONE cmt | na 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
2642:000 | DONE lbl | na 16 16 | 006794 |             | xt_mstar                             
2643:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2644:000 | DONE cmt | na 16 16 |        |             |                 ; figure out the sign
2645:000 | DONE ins | na 16 16 | 006794 | 98          |                 tya                  
2646:000 | DONE ins | na 16 16 | 006795 | 55 00       |                 eor.dx 00            
2647:000 | DONE wsp | na 16 16 |        |             |
2648:000 | DONE cmt | na 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
2649:000 | DONE cmt | na 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
2650:000 | DONE ins | na 16 16 | 006797 | 48          |                 pha                  
2651:000 | DONE wsp | na 16 16 |        |             |
2652:000 | DONE cmt | na 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
2653:000 | DONE cmt | na 16 16 |        |             |                 ; UM*, which does the real work
2654:000 | DONE ins | na 16 16 | 006798 | 98          |                 tya                  
2655:000 | DONE ins | na 16 16 | 006799 | 10 05       |                 bpl 0067a0           
2656:000 | DONE wsp | na 16 16 |        |             |
2657:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is negative so we have to ABS it
2658:000 | DONE ins | na 16 16 | 00679b | 49 ff ff    |                 eor.# 0ffff          
2659:000 | DONE ins | na 16 16 | 00679e | 1a          |                 inc.a                
2660:000 | DONE ins | na 16 16 | 00679f | a8          |                 tay                  
2661:000 | DONE wsp | na 16 16 |        |             |
2662:000 | DONE lbl | na 16 16 | 0067a0 |             | mstar_abs_nos                        
2663:000 | DONE ins | na 16 16 | 0067a0 | b5 00       |                 lda.dx 00            
2664:000 | DONE ins | na 16 16 | 0067a2 | 10 06       |                 bpl 0067aa           
2665:000 | DONE wsp | na 16 16 |        |             |
2666:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is negative so we have to ABS it
2667:000 | DONE ins | na 16 16 | 0067a4 | 49 ff ff    |                 eor.# 0ffff          
2668:000 | DONE ins | na 16 16 | 0067a7 | 1a          |                 inc.a                
2669:000 | DONE ins | na 16 16 | 0067a8 | 95 00       |                 sta.dx 00            
2670:000 | DONE wsp | na 16 16 |        |             |
2671:000 | DONE lbl | na 16 16 | 0067aa |             | mstar_umstar                         
2672:000 | DONE ins | na 16 16 | 0067aa | 20 17 6b    |                 jsr 006b17           now ( d ) on stack
2673:000 | DONE wsp | na 16 16 |        |             |
2674:000 | DONE cmt | na 16 16 |        |             |                 ; handle the sign
2675:000 | DONE ins | na 16 16 | 0067ad | 68          |                 pla                  
2676:000 | DONE wsp | na 16 16 |        |             |
2677:000 | DONE cmt | na 16 16 |        |             |                 ; postive, we don't have to care
2678:000 | DONE ins | na 16 16 | 0067ae | 10 03       |                 bpl 0067b3           
2679:000 | DONE wsp | na 16 16 |        |             |
2680:000 | DONE ins | na 16 16 | 0067b0 | 20 37 66    |                 jsr 006637           
2681:000 | DONE wsp | na 16 16 |        |             |
2682:000 | DONE lbl | na 16 16 | 0067b3 |             | z_mstar                              
2682:001 | DONE ins | na 16 16 | 0067b3 | 60          |                 rts                  
2683:000 | DONE wsp | na 16 16 |        |             |
2684:000 | DONE wsp | na 16 16 |        |             |
2685:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2686:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
2687:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
2688:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2689:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2690:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2691:000 | DONE lbl | na 16 16 | 0067b4 |             | xt_max                               
2692:000 | DONE ins | na 16 16 | 0067b4 | 98          |                 tya                  
2693:000 | DONE ins | na 16 16 | 0067b5 | d5 00       |                 cmp.dx 00            
2694:000 | DONE wsp | na 16 16 |        |             |
2695:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2696:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2697:000 | DONE ins | na 16 16 | 0067b7 | f0 0b       |                 beq 0067c4           Faster than DROP because TOS is in Y
2698:000 | DONE wsp | na 16 16 |        |             |
2699:000 | DONE ins | na 16 16 | 0067b9 | f5 00       |                 sbc.dx 00            
2700:000 | DONE ins | na 16 16 | 0067bb | 50 03       |                 bvc 0067c0           no overflow, skip ahead
2701:000 | DONE wsp | na 16 16 |        |             |
2702:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2703:000 | DONE ins | na 16 16 | 0067bd | 49 00 80    |                 eor.# 8000           compliment negative flag
2704:000 | DONE wsp | na 16 16 |        |             |
2705:000 | DONE lbl | na 16 16 | 0067c0 |             | max_no_ov                            
2706:000 | DONE ins | na 16 16 | 0067c0 | 10 02       |                 bpl 0067c4           keep TOS
2707:000 | DONE lbl | na 16 16 | 0067c2 |             | max_drop                             
2708:000 | DONE ins | na 16 16 | 0067c2 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2709:000 | DONE lbl | na 16 16 | 0067c4 |             | max_nip                              
2710:000 | DONE ins | na 16 16 | 0067c4 | e8          |                 inx                  
2711:000 | DONE ins | na 16 16 | 0067c5 | e8          |                 inx                  
2712:000 | DONE wsp | na 16 16 |        |             |
2713:000 | DONE lbl | na 16 16 | 0067c6 |             | z_max                                
2713:001 | DONE ins | na 16 16 | 0067c6 | 60          |                 rts                  
2714:000 | DONE wsp | na 16 16 |        |             |
2715:000 | DONE wsp | na 16 16 |        |             |
2716:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2717:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
2718:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
2719:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2720:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2721:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2722:000 | DONE lbl | na 16 16 | 0067c7 |             | xt_min                               
2723:000 | DONE ins | na 16 16 | 0067c7 | 98          |                 tya                  
2724:000 | DONE ins | na 16 16 | 0067c8 | d5 00       |                 cmp.dx 00            
2725:000 | DONE wsp | na 16 16 |        |             |
2726:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2727:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2728:000 | DONE ins | na 16 16 | 0067ca | f0 0b       |                 beq 0067d7           Faster than DROP because TOS is in Y
2729:000 | DONE wsp | na 16 16 |        |             |
2730:000 | DONE ins | na 16 16 | 0067cc | f5 00       |                 sbc.dx 00            
2731:000 | DONE ins | na 16 16 | 0067ce | 50 03       |                 bvc 0067d3           no overflow, skip ahead
2732:000 | DONE wsp | na 16 16 |        |             |
2733:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2734:000 | DONE ins | na 16 16 | 0067d0 | 49 00 80    |                 eor.# 8000           compliment negative flag
2735:000 | DONE wsp | na 16 16 |        |             |
2736:000 | DONE lbl | na 16 16 | 0067d3 |             | min_no_ov                            
2737:000 | DONE ins | na 16 16 | 0067d3 | 30 02       |                 bmi 0067d7           keep TOS
2738:000 | DONE lbl | na 16 16 | 0067d5 |             | min_drop                             
2739:000 | DONE ins | na 16 16 | 0067d5 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2740:000 | DONE lbl | na 16 16 | 0067d7 |             | min_nip                              
2741:000 | DONE ins | na 16 16 | 0067d7 | e8          |                 inx                  
2742:000 | DONE ins | na 16 16 | 0067d8 | e8          |                 inx                  
2743:000 | DONE wsp | na 16 16 |        |             |
2744:000 | DONE lbl | na 16 16 | 0067d9 |             | z_min                                
2744:001 | DONE ins | na 16 16 | 0067d9 | 60          |                 rts                  
2745:000 | DONE wsp | na 16 16 |        |             |
2746:000 | DONE wsp | na 16 16 |        |             |
2747:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2748:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
2749:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
2750:000 | DONE lbl | na 16 16 | 0067da |             | xt_name-int                          
2751:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2752:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2753:000 | DONE cmt | na 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
2754:000 | DONE ins | na 16 16 | 0067da | c8          |                 iny                  
2755:000 | DONE ins | na 16 16 | 0067db | c8          |                 iny                  
2756:000 | DONE ins | na 16 16 | 0067dc | c8          |                 iny                  
2757:000 | DONE ins | na 16 16 | 0067dd | c8          |                 iny                  
2758:000 | DONE ins | na 16 16 | 0067de | b9 00 00    |                 lda.y 0000           
2759:000 | DONE ins | na 16 16 | 0067e1 | a8          |                 tay                  
2760:000 | DONE wsp | na 16 16 |        |             |
2761:000 | DONE lbl | na 16 16 | 0067e2 |             | z_name-int                           
2761:001 | DONE ins | na 16 16 | 0067e2 | 60          |                 rts                  
2762:000 | DONE wsp | na 16 16 |        |             |
2763:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2764:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
2765:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
2766:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
2767:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
2768:000 | DONE lbl | na 16 16 | 0067e3 |             | xt_name-string                       
2769:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2770:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2771:000 | DONE ins | na 16 16 | 0067e3 | ca          |                 dex                  move NOS down one
2772:000 | DONE ins | na 16 16 | 0067e4 | ca          |                 dex                  
2773:000 | DONE wsp | na 16 16 |        |             |
2774:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
2775:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
2776:000 | DONE ins | na 16 16 | 0067e5 | 98          |                 tya                  
2777:000 | DONE ins | na 16 16 | 0067e6 | 18          |                 clc                  
2778:000 | DONE ins | na 16 16 | 0067e7 | 69 08 00    |                 adc.# 0008           
2779:000 | DONE ins | na 16 16 | 0067ea | 95 00       |                 sta.dx 00            NOS
2780:000 | DONE wsp | na 16 16 |        |             |
2781:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
2782:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
2783:000 | DONE ins | na 16 16 | 0067ec | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2784:000 | DONE ins | na 16 16 | 0067ef | 29 ff 00    |                 and.# 00ff           mask all but length byte
2785:000 | DONE ins | na 16 16 | 0067f2 | a8          |                 tay                  
2786:000 | DONE wsp | na 16 16 |        |             |
2787:000 | DONE lbl | na 16 16 | 0067f3 |             | z_name-string                        
2787:001 | DONE ins | na 16 16 | 0067f3 | 60          |                 rts                  
2788:000 | DONE wsp | na 16 16 |        |             |
2789:000 | DONE wsp | na 16 16 |        |             |
2790:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2791:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
2792:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
2793:000 | DONE lbl | na 16 16 | 0067f4 |             | xt_negate                            
2794:000 | DONE ins | na 16 16 | 0067f4 | 98          |                 tya                  
2795:000 | DONE ins | na 16 16 | 0067f5 | 49 ff ff    |                 eor.# 0ffff          
2796:000 | DONE ins | na 16 16 | 0067f8 | 1a          |                 inc.a                
2797:000 | DONE ins | na 16 16 | 0067f9 | a8          |                 tay                  
2798:000 | DONE wsp | na 16 16 |        |             |
2799:000 | DONE lbl | na 16 16 | 0067fa |             | z_negate                             
2799:001 | DONE ins | na 16 16 | 0067fa | 60          |                 rts                  
2800:000 | DONE wsp | na 16 16 |        |             |
2801:000 | DONE wsp | na 16 16 |        |             |
2802:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2803:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
2804:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
2805:000 | DONE lbl | na 16 16 | 0067fb |             | xt_nip                               
2806:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2807:000 | DONE ins | na 16 16 | 0067fb | e8          |                 inx                  
2808:000 | DONE ins | na 16 16 | 0067fc | e8          |                 inx                  
2809:000 | DONE lbl | na 16 16 | 0067fd |             | z_nip                                
2809:001 | DONE ins | na 16 16 | 0067fd | 60          |                 rts                  
2810:000 | DONE wsp | na 16 16 |        |             |
2811:000 | DONE wsp | na 16 16 |        |             |
2812:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2813:000 | DONE cmt | na 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
2814:000 | DONE cmt | na 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
2815:000 | DONE cmt | na 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
2816:000 | DONE cmt | na 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
2817:000 | DONE cmt | na 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
2818:000 | DONE cmt | na 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
2819:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
2820:000 | DONE cmt | na 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
2821:000 | DONE cmt | na 16 16 |        |             | ; signal a double cell number is required to be the last character of the
2822:000 | DONE cmt | na 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
2823:000 | DONE cmt | na 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
2824:000 | DONE lbl | na 16 16 | 0067fe |             | xt_number                            
2825:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2826:000 | DONE cmt | na 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
2827:000 | DONE cmt | na 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
2828:000 | DONE cmt | na 16 16 |        |             |                 ; for double
2829:000 | DONE ins | na 16 16 | 0067fe | f4 00 00    |                 phe.# 0000           
2830:000 | DONE wsp | na 16 16 |        |             |
2831:000 | DONE ins | na 16 16 | 006801 | 84 06       |                 sty.d 000206         save length of string, freeing Y
2832:000 | DONE wsp | na 16 16 |        |             |
2833:000 | DONE cmt | na 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
2834:000 | DONE cmt | na 16 16 |        |             |                 ; a flag
2835:000 | DONE ins | na 16 16 | 006803 | e2 20       |                 sep 20               
2835:001 | DONE ctl | na  8 16 |        |             |         .!a8
2836:000 | DONE ins | na  8 16 | 006805 | a1 00       |                 lda.dxi 00           get first character
2837:000 | DONE ins | na  8 16 | 006807 | c9 2d       |                 cmp.# 2d             
2838:000 | DONE ins | na  8 16 | 006809 | c2 20       |                 rep 20               
2838:001 | DONE ctl | na 16 16 |        |             |         .!a16
2839:000 | DONE ins | na 16 16 | 00680b | d0 09       |                 bne 006816           
2840:000 | DONE wsp | na 16 16 |        |             |
2841:000 | DONE cmt | na 16 16 |        |             |                 ; We have a minus.
2842:000 | DONE ins | na 16 16 | 00680d | 68          |                 pla                  
2843:000 | DONE ins | na 16 16 | 00680e | 09 00 ff    |                 ora.# 0ff00          MSB is minus
2844:000 | DONE ins | na 16 16 | 006811 | 48          |                 pha                  
2845:000 | DONE wsp | na 16 16 |        |             |
2846:000 | DONE ins | na 16 16 | 006812 | f6 00       |                 inc.dx 00            start one character later
2847:000 | DONE ins | na 16 16 | 006814 | c6 06       |                 dec.d 000206         reduce string length by one
2848:000 | DONE wsp | na 16 16 |        |             |
2849:000 | DONE lbl | na 16 16 | 006816 |             | number_dot                           
2850:000 | DONE cmt | na 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
2851:000 | DONE ins | na 16 16 | 006816 | a5 06       |                 lda.d 000206         get the string length
2852:000 | DONE ins | na 16 16 | 006818 | 3a          |                 dec.a                subtract one to convert length to index
2853:000 | DONE ins | na 16 16 | 006819 | 18          |                 clc                  
2854:000 | DONE ins | na 16 16 | 00681a | 75 00       |                 adc.dx 00            add length of string
2855:000 | DONE ins | na 16 16 | 00681c | a8          |                 tay                  
2856:000 | DONE ins | na 16 16 | 00681d | e2 20       |                 sep 20               
2856:001 | DONE ctl | na  8 16 |        |             |         .!a8
2857:000 | DONE ins | na  8 16 | 00681f | b9 00 00    |                 lda.y 0000           get last character
2858:000 | DONE ins | na  8 16 | 006822 | c9 2e       |                 cmp.# 2e             
2859:000 | DONE ins | na  8 16 | 006824 | c2 20       |                 rep 20               
2859:001 | DONE ctl | na 16 16 |        |             |         .!a16
2860:000 | DONE ins | na 16 16 | 006826 | d0 07       |                 bne 00682f           
2861:000 | DONE wsp | na 16 16 |        |             |
2862:000 | DONE cmt | na 16 16 |        |             |                 ; we have a dot
2863:000 | DONE ins | na 16 16 | 006828 | 68          |                 pla                  get the flag back
2864:000 | DONE ins | na 16 16 | 006829 | 09 ff 00    |                 ora.# 00ff           LSB is double
2865:000 | DONE ins | na 16 16 | 00682c | 48          |                 pha                  
2866:000 | DONE wsp | na 16 16 |        |             |
2867:000 | DONE ins | na 16 16 | 00682d | c6 06       |                 dec.d 000206         reduce string length by one
2868:000 | DONE wsp | na 16 16 |        |             |
2869:000 | DONE lbl | na 16 16 | 00682f |             | number_main                          
2870:000 | DONE cmt | na 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
2871:000 | DONE ins | na 16 16 | 00682f | b5 00       |                 lda.dx 00            get the string address to safety
2872:000 | DONE ins | na 16 16 | 006831 | 74 00       |                 stz.dx 00            NOS is now zero
2873:000 | DONE ins | na 16 16 | 006833 | ca          |                 dex                  
2874:000 | DONE ins | na 16 16 | 006834 | ca          |                 dex                  
2875:000 | DONE ins | na 16 16 | 006835 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
2876:000 | DONE ins | na 16 16 | 006837 | ca          |                 dex                  
2877:000 | DONE ins | na 16 16 | 006838 | ca          |                 dex                  
2878:000 | DONE wsp | na 16 16 |        |             |
2879:000 | DONE ins | na 16 16 | 006839 | 95 00       |                 sta.dx 00            address is back as NOS
2880:000 | DONE ins | na 16 16 | 00683b | a4 06       |                 ldy.d 000206         length is back as TOS
2881:000 | DONE wsp | na 16 16 |        |             |
2882:000 | DONE lbl | na 16 16 | 00683d |             | number_loop                          
2883:000 | DONE ins | na 16 16 | 00683d | 20 29 61    |                 jsr 006129           ( ud addr u -- ud addr u )
2884:000 | DONE wsp | na 16 16 |        |             |
2885:000 | DONE ins | na 16 16 | 006840 | 98          |                 tya                  test length of returned string, should be 0
2886:000 | DONE ins | na 16 16 | 006841 | f0 06       |                 beq 006849           
2887:000 | DONE wsp | na 16 16 |        |             |
2888:000 | DONE cmt | na 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
2889:000 | DONE cmt | na 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
2890:000 | DONE cmt | na 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
2891:000 | DONE cmt | na 16 16 |        |             |                 ; trouble one way or another
2892:000 | DONE cmt | na 16 16 |        |             |                 ; TODO print offending string
2893:000 | DONE ins | na 16 16 | 006843 | a9 1f 7a    |                 lda.# 007a1f         
2894:000 | DONE ins | na 16 16 | 006846 | 4c 8e 73    |                 jmp 00738e           
2895:000 | DONE wsp | na 16 16 |        |             |
2896:000 | DONE lbl | na 16 16 | 006849 |             | number_ok                            
2897:000 | DONE cmt | na 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
2898:000 | DONE ins | na 16 16 | 006849 | b4 02       |                 ldy.dx 02            
2899:000 | DONE ins | na 16 16 | 00684b | e8          |                 inx                  
2900:000 | DONE ins | na 16 16 | 00684c | e8          |                 inx                  
2901:000 | DONE ins | na 16 16 | 00684d | e8          |                 inx                  
2902:000 | DONE ins | na 16 16 | 00684e | e8          |                 inx                  
2903:000 | DONE wsp | na 16 16 |        |             |
2904:000 | DONE cmt | na 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
2905:000 | DONE cmt | na 16 16 |        |             |                 ; a minus and might actually be single-cell
2906:000 | DONE ins | na 16 16 | 00684f | 68          |                 pla                  get copy of the flags
2907:000 | DONE ins | na 16 16 | 006850 | 48          |                 pha                  
2908:000 | DONE ins | na 16 16 | 006851 | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
2909:000 | DONE ins | na 16 16 | 006854 | f0 1b       |                 beq 006871           
2910:000 | DONE wsp | na 16 16 |        |             |
2911:000 | DONE cmt | na 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
2912:000 | DONE cmt | na 16 16 |        |             |                 ; negate it
2913:000 | DONE ins | na 16 16 | 006856 | 68          |                 pla                  
2914:000 | DONE ins | na 16 16 | 006857 | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
2915:000 | DONE ins | na 16 16 | 00685a | f0 25       |                 beq 006881           no minus, all done
2916:000 | DONE wsp | na 16 16 |        |             |
2917:000 | DONE ins | na 16 16 | 00685c | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
2918:000 | DONE ins | na 16 16 | 00685e | 49 ff ff    |                 eor.# 0ffff          
2919:000 | DONE wsp | na 16 16 |        |             |
2920:000 | DONE cmt | na 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
2921:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
2922:000 | DONE ins | na 16 16 | 006861 | 18          |                 clc                  
2923:000 | DONE ins | na 16 16 | 006862 | 69 01 00    |                 adc.# 0001           
2924:000 | DONE ins | na 16 16 | 006865 | 95 00       |                 sta.dx 00            
2925:000 | DONE wsp | na 16 16 |        |             |
2926:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
2927:000 | DONE ins | na 16 16 | 006867 | 98          |                 tya                  
2928:000 | DONE ins | na 16 16 | 006868 | 49 ff ff    |                 eor.# 0ffff          
2929:000 | DONE ins | na 16 16 | 00686b | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2930:000 | DONE ins | na 16 16 | 00686e | a8          |                 tay                  
2931:000 | DONE wsp | na 16 16 |        |             |
2932:000 | DONE ins | na 16 16 | 00686f | 80 10       |                 bra 006881           
2933:000 | DONE wsp | na 16 16 |        |             |
2934:000 | DONE lbl | na 16 16 | 006871 |             | number_single                        
2935:000 | DONE cmt | na 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
2936:000 | DONE ins | na 16 16 | 006871 | b4 00       |                 ldy.dx 00            
2937:000 | DONE ins | na 16 16 | 006873 | e8          |                 inx                  
2938:000 | DONE ins | na 16 16 | 006874 | e8          |                 inx                  
2939:000 | DONE wsp | na 16 16 |        |             |
2940:000 | DONE cmt | na 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
2941:000 | DONE cmt | na 16 16 |        |             |                 ; doubled for speed
2942:000 | DONE ins | na 16 16 | 006875 | 68          |                 pla                  
2943:000 | DONE ins | na 16 16 | 006876 | 29 00 ff    |                 and.# 0ff00          
2944:000 | DONE ins | na 16 16 | 006879 | f0 06       |                 beq 006881           no minus, all done
2945:000 | DONE wsp | na 16 16 |        |             |
2946:000 | DONE ins | na 16 16 | 00687b | 98          |                 tya                  NEGATE
2947:000 | DONE ins | na 16 16 | 00687c | 49 ff ff    |                 eor.# 0ffff          
2948:000 | DONE ins | na 16 16 | 00687f | 1a          |                 inc.a                
2949:000 | DONE ins | na 16 16 | 006880 | a8          |                 tay                  fall through to end
2950:000 | DONE wsp | na 16 16 |        |             |
2951:000 | DONE lbl | na 16 16 | 006881 |             | z_number                             
2951:001 | DONE ins | na 16 16 | 006881 | 60          |                 rts                  
2952:000 | DONE wsp | na 16 16 |        |             |
2953:000 | DONE wsp | na 16 16 |        |             |
2954:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2955:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
2956:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
2957:000 | DONE lbl | na 16 16 | 006882 |             | xt_or                                
2958:000 | DONE ins | na 16 16 | 006882 | 98          |                 tya                  
2959:000 | DONE ins | na 16 16 | 006883 | 15 00       |                 ora.dx 00            
2960:000 | DONE ins | na 16 16 | 006885 | a8          |                 tay                  
2961:000 | DONE wsp | na 16 16 |        |             |
2962:000 | DONE ins | na 16 16 | 006886 | e8          |                 inx                  
2963:000 | DONE ins | na 16 16 | 006887 | e8          |                 inx                  
2964:000 | DONE wsp | na 16 16 |        |             |
2965:000 | DONE lbl | na 16 16 | 006888 |             | z_or                                 
2965:001 | DONE ins | na 16 16 | 006888 | 60          |                 rts                  
2966:000 | DONE wsp | na 16 16 |        |             |
2967:000 | DONE wsp | na 16 16 |        |             |
2968:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2969:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
2970:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
2971:000 | DONE lbl | na 16 16 | 006889 |             | xt_over                              
2972:000 | DONE ins | na 16 16 | 006889 | ca          |                 dex                  
2973:000 | DONE ins | na 16 16 | 00688a | ca          |                 dex                  
2974:000 | DONE ins | na 16 16 | 00688b | 94 00       |                 sty.dx 00            
2975:000 | DONE ins | na 16 16 | 00688d | b4 02       |                 ldy.dx 02            
2976:000 | DONE wsp | na 16 16 |        |             |
2977:000 | DONE lbl | na 16 16 | 00688f |             | z_over                               
2977:001 | DONE ins | na 16 16 | 00688f | 60          |                 rts                  
2978:000 | DONE wsp | na 16 16 |        |             |
2979:000 | DONE wsp | na 16 16 |        |             |
2980:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2981:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
2982:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
2983:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
2984:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
2985:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
2986:000 | DONE lbl | na 16 16 | 006890 |             | xt_pad                               
2987:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2988:000 | DONE ins | na 16 16 | 006890 | ca          |                 dex                  
2989:000 | DONE ins | na 16 16 | 006891 | ca          |                 dex                  
2990:000 | DONE ins | na 16 16 | 006892 | 94 00       |                 sty.dx 00            
2991:000 | DONE wsp | na 16 16 |        |             |
2992:000 | DONE ins | na 16 16 | 006894 | a5 00       |                 lda.d 000200         
2993:000 | DONE ins | na 16 16 | 006896 | 18          |                 clc                  
2994:000 | DONE ins | na 16 16 | 006897 | 69 7f 00    |                 adc.# 00007f         
2995:000 | DONE ins | na 16 16 | 00689a | a8          |                 tay                  
2996:000 | DONE wsp | na 16 16 |        |             |
2997:000 | DONE lbl | na 16 16 | 00689b |             | z_pad                                
2997:001 | DONE ins | na 16 16 | 00689b | 60          |                 rts                  
2998:000 | DONE wsp | na 16 16 |        |             |
2999:000 | DONE wsp | na 16 16 |        |             |
3000:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3001:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
3002:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
3003:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
3004:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
3005:000 | DONE lbl | na 16 16 | 00689c |             | xt_page                              
3006:000 | DONE ins | na 16 16 | 00689c | a9 2e 7a    |                 lda.# 007a2e         
3007:000 | DONE ins | na 16 16 | 00689f | 20 94 73    |                 jsr 007394           
3008:000 | DONE wsp | na 16 16 |        |             |
3009:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
3010:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
3011:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
3012:000 | DONE ins | na 16 16 | 0068a2 | a9 33 7a    |                 lda.# 007a33         
3013:000 | DONE ins | na 16 16 | 0068a5 | 20 94 73    |                 jsr 007394           
3014:000 | DONE wsp | na 16 16 |        |             |
3015:000 | DONE lbl | na 16 16 | 0068a8 |             | z_page                               
3015:001 | DONE ins | na 16 16 | 0068a8 | 60          |                 rts                  
3016:000 | DONE wsp | na 16 16 |        |             |
3017:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3018:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
3019:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
3020:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
3021:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
3022:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
3023:000 | DONE cmt | na 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
3024:000 | DONE lbl | na 16 16 | 0068a9 |             | xt_parse-name                        
3025:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3026:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3027:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
3028:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
3029:000 | DONE ins | na 16 16 | 0068a9 | 5a          |                 phy                  save TOS for later use
3030:000 | DONE ins | na 16 16 | 0068aa | a4 12       |                 ldy.d 000212         >IN
3031:000 | DONE ins | na 16 16 | 0068ac | e2 20       |                 sep 20               
3031:001 | DONE ctl | na  8 16 |        |             |         .!a8
3032:000 | DONE lbl | na  8 16 | 0068ae |             | parse-name_loop                      
3033:000 | DONE ins | na  8 16 | 0068ae | c4 0e       |                 cpy.d 00020e         end of line?
3034:000 | DONE ins | na  8 16 | 0068b0 | f0 09       |                 beq 0068bb           
3035:000 | DONE wsp | na  8 16 |        |             |
3036:000 | DONE ins | na  8 16 | 0068b2 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
3037:000 | DONE ins | na  8 16 | 0068b4 | c9 20       |                 cmp.# AscSP          
3038:000 | DONE ins | na  8 16 | 0068b6 | d0 17       |                 bne 0068cf           
3039:000 | DONE ins | na  8 16 | 0068b8 | c8          |                 iny                  
3040:000 | DONE ins | na  8 16 | 0068b9 | 80 f3       |                 bra 0068ae           
3041:000 | DONE wsp | na  8 16 |        |             |
3042:000 | DONE lbl | na  8 16 | 0068bb |             | parse-name_empty_line                
3043:000 | DONE ins | na  8 16 | 0068bb | c2 20       |                 rep 20               
3043:001 | DONE ctl | na 16 16 |        |             |         .!a16
3044:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
3045:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
3046:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
3047:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
3048:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
3049:000 | DONE ins | na 16 16 | 0068bd | ca          |                 dex                  
3050:000 | DONE ins | na 16 16 | 0068be | ca          |                 dex                  
3051:000 | DONE ins | na 16 16 | 0068bf | ca          |                 dex                  
3052:000 | DONE ins | na 16 16 | 0068c0 | ca          |                 dex                  
3053:000 | DONE wsp | na 16 16 |        |             |
3054:000 | DONE ins | na 16 16 | 0068c1 | 7a          |                 ply                  restore old TOS as 3OS
3055:000 | DONE ins | na 16 16 | 0068c2 | 94 02       |                 sty.dx 02            
3056:000 | DONE wsp | na 16 16 |        |             |
3057:000 | DONE ins | na 16 16 | 0068c4 | a5 0c       |                 lda.d 00020c         
3058:000 | DONE ins | na 16 16 | 0068c6 | 18          |                 clc                  
3059:000 | DONE ins | na 16 16 | 0068c7 | 65 0e       |                 adc.d 00020e         
3060:000 | DONE ins | na 16 16 | 0068c9 | 95 00       |                 sta.dx 00            Address as NOS
3061:000 | DONE wsp | na 16 16 |        |             |
3062:000 | DONE ins | na 16 16 | 0068cb | a0 00 00    |                 ldy.# 0000           TOS
3063:000 | DONE wsp | na 16 16 |        |             |
3064:000 | DONE ins | na 16 16 | 0068ce | 60          |                 rts                  don't have to go through PARSE
3065:000 | DONE wsp | na 16 16 |        |             |
3066:000 | DONE lbl | na 16 16 | 0068cf |             | parse-name_found                     
3067:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3068:000 | DONE ins | na 16 16 | 0068cf | c2 20       |                 rep 20               
3068:001 | DONE ctl | na 16 16 |        |             |         .!a16
3069:000 | DONE ins | na 16 16 | 0068d1 | 84 12       |                 sty.d 000212         new >IN
3070:000 | DONE wsp | na 16 16 |        |             |
3071:000 | DONE ins | na 16 16 | 0068d3 | 7a          |                 ply                  recover TOS
3072:000 | DONE ins | na 16 16 | 0068d4 | ca          |                 dex                  
3073:000 | DONE ins | na 16 16 | 0068d5 | ca          |                 dex                  
3074:000 | DONE ins | na 16 16 | 0068d6 | 94 00       |                 sty.dx 00            
3075:000 | DONE wsp | na 16 16 |        |             |
3076:000 | DONE ins | na 16 16 | 0068d8 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
3077:000 | DONE wsp | na 16 16 |        |             |
3078:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
3079:000 | DONE wsp | na 16 16 |        |             |
3080:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3081:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
3082:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
3083:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
3084:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
3085:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
3086:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
3087:000 | DONE cmt | na 16 16 |        |             | ;
3088:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
3089:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
3090:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
3091:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
3092:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
3093:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
3094:000 | DONE cmt | na 16 16 |        |             | ;
3095:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
3096:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
3097:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
3098:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
3099:000 | DONE lbl | na 16 16 | 0068db |             | xt_parse                             
3100:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3101:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3102:000 | DONE ins | na 16 16 | 0068db | 84 16       |                 sty.d 000216         save delimiter, char is LSB
3103:000 | DONE wsp | na 16 16 |        |             |
3104:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
3105:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
3106:000 | DONE cmt | na 16 16 |        |             |                 ; return
3107:000 | DONE ins | na 16 16 | 0068dd | a5 12       |                 lda.d 000212         
3108:000 | DONE ins | na 16 16 | 0068df | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
3109:000 | DONE ins | na 16 16 | 0068e1 | 18          |                 clc                  
3110:000 | DONE ins | na 16 16 | 0068e2 | 65 0c       |                 adc.d 00020c         
3111:000 | DONE wsp | na 16 16 |        |             |
3112:000 | DONE ins | na 16 16 | 0068e4 | ca          |                 dex                  save addr as NOS
3113:000 | DONE ins | na 16 16 | 0068e5 | ca          |                 dex                  
3114:000 | DONE ins | na 16 16 | 0068e6 | 95 00       |                 sta.dx 00            
3115:000 | DONE wsp | na 16 16 |        |             |
3116:000 | DONE ins | na 16 16 | 0068e8 | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
3117:000 | DONE wsp | na 16 16 |        |             |
3118:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
3119:000 | DONE ins | na 16 16 | 0068ea | a4 12       |                 ldy.d 000212         
3120:000 | DONE ins | na 16 16 | 0068ec | e2 20       |                 sep 20               
3120:001 | DONE ctl | na  8 16 |        |             |         .!a8
3121:000 | DONE wsp | na  8 16 |        |             |
3122:000 | DONE lbl | na  8 16 | 0068ee |             | parse_loop                           
3123:000 | DONE ins | na  8 16 | 0068ee | c4 0e       |                 cpy.d 00020e         check for EOL first
3124:000 | DONE ins | na  8 16 | 0068f0 | f0 0d       |                 beq 0068ff           
3125:000 | DONE wsp | na  8 16 |        |             |
3126:000 | DONE ins | na  8 16 | 0068f2 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
3127:000 | DONE ins | na  8 16 | 0068f4 | c5 16       |                 cmp.d 000216         found delimiter?
3128:000 | DONE ins | na  8 16 | 0068f6 | f0 03       |                 beq 0068fb           
3129:000 | DONE ins | na  8 16 | 0068f8 | c8          |                 iny                  
3130:000 | DONE ins | na  8 16 | 0068f9 | 80 f3       |                 bra 0068ee           
3131:000 | DONE wsp | na  8 16 |        |             |
3132:000 | DONE lbl | na  8 16 | 0068fb |             | parse_found_delimiter                
3133:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
3134:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
3135:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
3136:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
3137:000 | DONE ins | na  8 16 | 0068fb | c2 20       |                 rep 20               
3137:001 | DONE ctl | na 16 16 |        |             |         .!a16
3138:000 | DONE ins | na 16 16 | 0068fd | e6 18       |                 inc.d 000218         
3139:000 | DONE wsp | na 16 16 |        |             |
3140:000 | DONE lbl | na 16 16 | 0068ff |             | parse_reached_eol                    
3141:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
3142:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3143:000 | DONE ins | na 16 16 | 0068ff | c2 20       |                 rep 20               
3143:001 | DONE ctl | na 16 16 |        |             |         .!a16
3144:000 | DONE ins | na 16 16 | 006901 | 98          |                 tya                  
3145:000 | DONE ins | na 16 16 | 006902 | 38          |                 sec                  
3146:000 | DONE ins | na 16 16 | 006903 | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
3147:000 | DONE ins | na 16 16 | 006905 | 48          |                 pha                  save so we can manipulate Y
3148:000 | DONE wsp | na 16 16 |        |             |
3149:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
3150:000 | DONE ins | na 16 16 | 006906 | 98          |                 tya                  
3151:000 | DONE ins | na 16 16 | 006907 | 18          |                 clc                  
3152:000 | DONE ins | na 16 16 | 006908 | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
3153:000 | DONE ins | na 16 16 | 00690a | 85 12       |                 sta.d 000212         
3154:000 | DONE wsp | na 16 16 |        |             |
3155:000 | DONE ins | na 16 16 | 00690c | 7a          |                 ply                  length of string in TOS
3156:000 | DONE wsp | na 16 16 |        |             |
3157:000 | DONE lbl | na 16 16 | 00690d |             | z_parse-name                         
3158:000 | DONE lbl | na 16 16 | 00690d |             | z_parse                              
3158:001 | DONE ins | na 16 16 | 00690d | 60          |                 rts                  
3159:000 | DONE wsp | na 16 16 |        |             |
3160:000 | DONE wsp | na 16 16 |        |             |
3161:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3162:000 | DONE cmt | na 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
3163:000 | DONE cmt | na 16 16 |        |             | ; Add NOS to address in TOS
3164:000 | DONE lbl | na 16 16 | 00690e |             | xt_plusstore                         
3165:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3166:000 | DONE ins | na 16 16 | 00690e | b9 00 00    |                 lda.y 0000           
3167:000 | DONE ins | na 16 16 | 006911 | 18          |                 clc                  
3168:000 | DONE ins | na 16 16 | 006912 | 75 00       |                 adc.dx 00            
3169:000 | DONE ins | na 16 16 | 006914 | 99 00 00    |                 sta.y 0000           
3170:000 | DONE wsp | na 16 16 |        |             |
3171:000 | DONE ins | na 16 16 | 006917 | b4 02       |                 ldy.dx 02            
3172:000 | DONE ins | na 16 16 | 006919 | e8          |                 inx                  
3173:000 | DONE ins | na 16 16 | 00691a | e8          |                 inx                  
3174:000 | DONE ins | na 16 16 | 00691b | e8          |                 inx                  
3175:000 | DONE ins | na 16 16 | 00691c | e8          |                 inx                  
3176:000 | DONE wsp | na 16 16 |        |             |
3177:000 | DONE lbl | na 16 16 | 00691d |             | z_plusstore                          
3177:001 | DONE ins | na 16 16 | 00691d | 60          |                 rts                  
3178:000 | DONE wsp | na 16 16 |        |             |
3179:000 | DONE wsp | na 16 16 |        |             |
3180:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3181:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
3182:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
3183:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
3184:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
3185:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
3186:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
3187:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
3188:000 | DONE lbl | na 16 16 | 00691e |             | xt_postpone                          
3189:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
3190:000 | DONE ins | na 16 16 | 00691e | 20 a9 68    |                 jsr 0068a9           ( addr n )
3191:000 | DONE wsp | na 16 16 |        |             |
3192:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
3193:000 | DONE ins | na 16 16 | 006921 | d0 06       |                 bne 006929           
3194:000 | DONE ins | na 16 16 | 006923 | a9 82 79    |                 lda.# 007982         
3195:000 | DONE ins | na 16 16 | 006926 | 4c 8e 73    |                 jmp 00738e           
3196:000 | DONE wsp | na 16 16 |        |             |
3197:000 | DONE lbl | na 16 16 | 006929 |             | pp_got_word                          
3198:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
3199:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
3200:000 | DONE ins | na 16 16 | 006929 | 20 c7 73    |                 jsr 0073c7           
3201:000 | DONE wsp | na 16 16 |        |             |
3202:000 | DONE ins | na 16 16 | 00692c | 20 dc 66    |                 jsr 0066dc           ( nt | 0 )
3203:000 | DONE wsp | na 16 16 |        |             |
3204:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
3205:000 | DONE ins | na 16 16 | 00692f | d0 03       |                 bne 006934           
3206:000 | DONE ins | na 16 16 | 006931 | a9 1f 7a    |                 lda.# 007a1f         
3207:000 | DONE wsp | na 16 16 |        |             |
3208:000 | DONE lbl | na 16 16 | 006934 |             | pp_got_nt                            
3209:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
3210:000 | DONE ins | na 16 16 | 006934 | 84 16       |                 sty.d 000216         
3211:000 | DONE wsp | na 16 16 |        |             |
3212:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
3213:000 | DONE ins | na 16 16 | 006936 | 20 da 67    |                 jsr 0067da           NAME>INT ( nt -- xt )
3214:000 | DONE wsp | na 16 16 |        |             |
3215:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
3216:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
3217:000 | DONE ins | na 16 16 | 006939 | b2 16       |                 lda.di 000216        LDA (TMP1) - get status byte of word
3218:000 | DONE ins | na 16 16 | 00693b | eb          |                 xba                  flags are MSB
3219:000 | DONE ins | na 16 16 | 00693c | 29 02 00    |                 and.# IM             mask everything but Immediate bit
3220:000 | DONE ins | na 16 16 | 00693f | f0 03       |                 beq 006944           
3221:000 | DONE wsp | na 16 16 |        |             |
3222:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
3223:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
3224:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
3225:000 | DONE ins | na 16 16 | 006941 | 4c 0f 65    |                 jmp 00650f           JSR/RTS
3226:000 | DONE wsp | na 16 16 |        |             |
3227:000 | DONE lbl | na 16 16 | 006944 |             | pp_not_immediate                     
3228:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deferred
3229:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
3230:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
3231:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
3232:000 | DONE ins | na 16 16 | 006944 | f4 87 67    |                 phe.# 006787         PEA LITERAL_RT
3233:000 | DONE ins | na 16 16 | 006947 | 20 6d 73    |                 jsr 00736d           
3234:000 | DONE wsp | na 16 16 |        |             |
3235:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
3236:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
3237:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
3238:000 | DONE ins | na 16 16 | 00694a | 20 17 62    |                 jsr 006217           
3239:000 | DONE wsp | na 16 16 |        |             |
3240:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
3241:000 | DONE ins | na 16 16 | 00694d | f4 0f 65    |                 phe.# 00650f         
3242:000 | DONE ins | na 16 16 | 006950 | 20 6d 73    |                 jsr 00736d           JSR/RTS
3243:000 | DONE wsp | na 16 16 |        |             |
3244:000 | DONE lbl | na 16 16 | 006953 |             | z_postpone                           
3244:001 | DONE ins | na 16 16 | 006953 | 60          |                 rts                  
3245:000 | DONE wsp | na 16 16 |        |             |
3246:000 | DONE wsp | na 16 16 |        |             |
3247:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3248:000 | DONE cmt | na 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
3249:000 | DONE cmt | na 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
3250:000 | DONE cmt | na 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
3251:000 | DONE cmt | na 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
3252:000 | DONE cmt | na 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
3253:000 | DONE cmt | na 16 16 |        |             | ; actually short enough to make that reasonable
3254:000 | DONE cmt | na 16 16 |        |             | ; TODO consider special case in COMPILE, see there
3255:000 | DONE lbl | na 16 16 | 006954 |             | xt_rfetch                            
3256:000 | DONE cmt | na 16 16 |        |             |                 ; get return address that is on top of the return stack
3257:000 | DONE ins | na 16 16 | 006954 | 68          |                 pla                  
3258:000 | DONE wsp | na 16 16 |        |             |
3259:000 | DONE ins | na 16 16 | 006955 | ca          |                 dex                  
3260:000 | DONE ins | na 16 16 | 006956 | ca          |                 dex                  
3261:000 | DONE ins | na 16 16 | 006957 | 94 00       |                 sty.dx 00            
3262:000 | DONE wsp | na 16 16 |        |             |
3263:000 | DONE ins | na 16 16 | 006959 | 7a          |                 ply                  get top of return stack and push copy back again
3264:000 | DONE ins | na 16 16 | 00695a | 5a          |                 phy                  
3265:000 | DONE wsp | na 16 16 |        |             |
3266:000 | DONE ins | na 16 16 | 00695b | 48          |                 pha                  restore the return address
3267:000 | DONE wsp | na 16 16 |        |             |
3268:000 | DONE lbl | na 16 16 | 00695c |             | z_rfetch                             
3268:001 | DONE ins | na 16 16 | 00695c | 60          |                 rts                  
3269:000 | DONE wsp | na 16 16 |        |             |
3270:000 | DONE wsp | na 16 16 |        |             |
3271:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3272:000 | DONE cmt | na 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
3273:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
3274:000 | DONE cmt | na 16 16 |        |             | ; jump address out of the way first.
3275:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
3276:000 | DONE lbl | na 16 16 | 00695d |             | xt_fromr                             
3277:000 | DONE cmt | na 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
3278:000 | DONE cmt | na 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
3279:000 | DONE cmt | na 16 16 |        |             |                 ; a waste of nine cycles
3280:000 | DONE ins | na 16 16 | 00695d | 68          |                 pla                  
3281:000 | DONE wsp | na 16 16 |        |             |
3282:000 | DONE ins | na 16 16 | 00695e | ca          |                 dex                  
3283:000 | DONE ins | na 16 16 | 00695f | ca          |                 dex                  
3284:000 | DONE ins | na 16 16 | 006960 | 94 00       |                 sty.dx 00            
3285:000 | DONE wsp | na 16 16 |        |             |
3286:000 | DONE ins | na 16 16 | 006962 | 7a          |                 ply                  the actual work
3287:000 | DONE wsp | na 16 16 |        |             |
3288:000 | DONE ins | na 16 16 | 006963 | 48          |                 pha                  get return address back
3289:000 | DONE wsp | na 16 16 |        |             |
3290:000 | DONE lbl | na 16 16 | 006964 |             | z_fromr                              
3290:001 | DONE ins | na 16 16 | 006964 | 60          |                 rts                  
3291:000 | DONE wsp | na 16 16 |        |             |
3292:000 | DONE wsp | na 16 16 |        |             |
3293:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3294:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
3295:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
3296:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
3297:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
3298:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
3299:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
3300:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
3301:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
3302:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
3303:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
3304:000 | DONE lbl | na 16 16 | 006965 |             | xt_refill                            
3305:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3306:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3307:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
3308:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
3309:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
3310:000 | DONE ins | na 16 16 | 006965 | a5 0c       |                 lda.d 00020c         
3311:000 | DONE ins | na 16 16 | 006967 | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
3312:000 | DONE ins | na 16 16 | 00696a | 85 0c       |                 sta.d 00020c         
3313:000 | DONE wsp | na 16 16 |        |             |
3314:000 | DONE ins | na 16 16 | 00696c | a5 0e       |                 lda.d 00020e         current length is now previous length
3315:000 | DONE ins | na 16 16 | 00696e | 85 10       |                 sta.d 000210         
3316:000 | DONE wsp | na 16 16 |        |             |
3317:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
3318:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
3319:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
3320:000 | DONE ins | na 16 16 | 006970 | a5 0a       |                 lda.d 00020a         
3321:000 | DONE ins | na 16 16 | 006972 | d0 14       |                 bne 006988           
3322:000 | DONE wsp | na 16 16 |        |             |
3323:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
3324:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
3325:000 | DONE ins | na 16 16 | 006974 | ca          |                 dex                  push Data Stack down twice
3326:000 | DONE ins | na 16 16 | 006975 | ca          |                 dex                  
3327:000 | DONE ins | na 16 16 | 006976 | 94 00       |                 sty.dx 00            
3328:000 | DONE wsp | na 16 16 |        |             |
3329:000 | DONE ins | na 16 16 | 006978 | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
3330:000 | DONE ins | na 16 16 | 00697a | ca          |                 dex                  
3331:000 | DONE ins | na 16 16 | 00697b | ca          |                 dex                  
3332:000 | DONE ins | na 16 16 | 00697c | 95 00       |                 sta.dx 00            
3333:000 | DONE wsp | na 16 16 |        |             |
3334:000 | DONE ins | na 16 16 | 00697e | a0 ff 00    |                 ldy.# 0000ff         
3335:000 | DONE wsp | na 16 16 |        |             |
3336:000 | DONE ins | na 16 16 | 006981 | 20 b5 63    |                 jsr 0063b5           ( addr n1 -- n2)
3337:000 | DONE wsp | na 16 16 |        |             |
3338:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
3339:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
3340:000 | DONE ins | na 16 16 | 006984 | a0 ff ff    |                 ldy.# 0ffff          
3341:000 | DONE wsp | na 16 16 |        |             |
3342:000 | DONE ins | na 16 16 | 006987 | 60          |                 rts                  
3343:000 | DONE wsp | na 16 16 |        |             |
3344:000 | DONE lbl | na 16 16 | 006988 |             | refill_src_not_kbd                   
3345:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
3346:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
3347:000 | DONE ins | na 16 16 | 006988 | 1a          |                 inc.a                
3348:000 | DONE ins | na 16 16 | 006989 | d0 06       |                 bne 006991           
3349:000 | DONE wsp | na 16 16 |        |             |
3350:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
3351:000 | DONE ins | na 16 16 | 00698b | ca          |                 dex                  
3352:000 | DONE ins | na 16 16 | 00698c | ca          |                 dex                  
3353:000 | DONE ins | na 16 16 | 00698d | 94 00       |                 sty.dx 00            
3354:000 | DONE ins | na 16 16 | 00698f | a8          |                 tay                  
3355:000 | DONE wsp | na 16 16 |        |             |
3356:000 | DONE ins | na 16 16 | 006990 | 60          |                 rts                  
3357:000 | DONE wsp | na 16 16 |        |             |
3358:000 | DONE lbl | na 16 16 | 006991 |             | refill_source_is_not_string          
3359:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
3360:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
3361:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
3362:000 | DONE ins | na 16 16 | 006991 | a9 d7 79    |                 lda.# 0079d7         
3363:000 | DONE ins | na 16 16 | 006994 | 4c 8e 73    |                 jmp 00738e           
3364:000 | DONE wsp | na 16 16 |        |             |
3365:000 | DONE lbl | na 16 16 | 006997 |             | z_refill                             
3365:001 | DONE ins | na 16 16 | 006997 | 60          |                 rts                  dummy for compiling
3366:000 | DONE wsp | na 16 16 |        |             |
3367:000 | DONE wsp | na 16 16 |        |             |
3368:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3369:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
3370:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
3371:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
3372:000 | DONE lbl | na 16 16 | 006998 |             | xt_rot                               
3373:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3374:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3375:000 | DONE ins | na 16 16 | 006998 | b5 00       |                 lda.dx 00            save b
3376:000 | DONE ins | na 16 16 | 00699a | 94 00       |                 sty.dx 00            move c to NOS
3377:000 | DONE ins | na 16 16 | 00699c | b4 02       |                 ldy.dx 02            move a to TOS
3378:000 | DONE ins | na 16 16 | 00699e | 95 02       |                 sta.dx 02            save b as 3OS
3379:000 | DONE wsp | na 16 16 |        |             |
3380:000 | DONE lbl | na 16 16 | 0069a0 |             | z_rot                                
3380:001 | DONE ins | na 16 16 | 0069a0 | 60          |                 rts                  
3381:000 | DONE wsp | na 16 16 |        |             |
3382:000 | DONE wsp | na 16 16 |        |             |
3383:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3384:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
3385:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
3386:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
3387:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
3388:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
3389:000 | DONE cmt | na 16 16 |        |             | ; want it in code
3390:000 | DONE lbl | na 16 16 | 0069a1 |             | xt_squote                            
3391:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
3392:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
3393:000 | DONE ins | na 16 16 | 0069a1 | ca          |                 dex                  
3394:000 | DONE ins | na 16 16 | 0069a2 | ca          |                 dex                  
3395:000 | DONE ins | na 16 16 | 0069a3 | 94 00       |                 sty.dx 00            
3396:000 | DONE wsp | na 16 16 |        |             |
3397:000 | DONE ins | na 16 16 | 0069a5 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
3398:000 | DONE ins | na 16 16 | 0069a8 | 20 db 68    |                 jsr 0068db           Returns ( addr u ) of string
3399:000 | DONE wsp | na 16 16 |        |             |
3400:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
3401:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
3402:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
3403:000 | DONE ins | na 16 16 | 0069ab | a5 14       |                 lda.d 000214         
3404:000 | DONE ins | na 16 16 | 0069ad | f0 03       |                 beq 0069b2           if we're interpreting, we're done
3405:000 | DONE wsp | na 16 16 |        |             |
3406:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
3407:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
3408:000 | DONE ins | na 16 16 | 0069af | 4c d1 69    |                 jmp 0069d1           JSR/RTS
3409:000 | DONE wsp | na 16 16 |        |             |
3410:000 | DONE lbl | na 16 16 | 0069b2 |             | z_squote                             
3410:001 | DONE ins | na 16 16 | 0069b2 | 60          |                 rts                  
3411:000 | DONE wsp | na 16 16 |        |             |
3412:000 | DONE wsp | na 16 16 |        |             |
3413:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3414:000 | DONE cmt | na 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
3415:000 | DONE cmt | na 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
3416:000 | DONE lbl | na 16 16 | 0069b3 |             | xt_stod                              
3417:000 | DONE ins | na 16 16 | 0069b3 | ca          |                 dex                  make room on stack
3418:000 | DONE ins | na 16 16 | 0069b4 | ca          |                 dex                  
3419:000 | DONE ins | na 16 16 | 0069b5 | 94 00       |                 sty.dx 00            
3420:000 | DONE wsp | na 16 16 |        |             |
3421:000 | DONE ins | na 16 16 | 0069b7 | 98          |                 tya                  force flag check
3422:000 | DONE ins | na 16 16 | 0069b8 | 10 05       |                 bpl 0069bf           
3423:000 | DONE wsp | na 16 16 |        |             |
3424:000 | DONE cmt | na 16 16 |        |             |                 ; negative number, extend sign
3425:000 | DONE ins | na 16 16 | 0069ba | a0 ff ff    |                 ldy.# 0ffff          
3426:000 | DONE ins | na 16 16 | 0069bd | 80 03       |                 bra 0069c2           
3427:000 | DONE wsp | na 16 16 |        |             |
3428:000 | DONE lbl | na 16 16 | 0069bf |             | stod_pos                             
3429:000 | DONE cmt | na 16 16 |        |             |                 ; positive number
3430:000 | DONE ins | na 16 16 | 0069bf | a0 00 00    |                 ldy.# 0000           fall through
3431:000 | DONE wsp | na 16 16 |        |             |
3432:000 | DONE lbl | na 16 16 | 0069c2 |             | z_stod                               
3432:001 | DONE ins | na 16 16 | 0069c2 | 60          |                 rts                  
3433:000 | DONE wsp | na 16 16 |        |             |
3434:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3435:000 | DONE cmt | na 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
3436:000 | DONE cmt | na 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
3437:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
3438:000 | DONE cmt | na 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
3439:000 | DONE lbl | na 16 16 | 0069c3 |             | xt_sign                              
3440:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3441:000 | DONE cmt | na 16 16 |        |             |                 ; See if number is negative
3442:000 | DONE ins | na 16 16 | 0069c3 | 98          |                 tya                  force flag check
3443:000 | DONE ins | na 16 16 | 0069c4 | 10 06       |                 bpl 0069cc           
3444:000 | DONE wsp | na 16 16 |        |             |
3445:000 | DONE cmt | na 16 16 |        |             |                 ; We're negative, overwrite number TOS
3446:000 | DONE ins | na 16 16 | 0069c6 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
3447:000 | DONE wsp | na 16 16 |        |             |
3448:000 | DONE ins | na 16 16 | 0069c9 | 4c 4f 67    |                 jmp 00674f           JSR/RTS, does not fall through
3449:000 | DONE wsp | na 16 16 |        |             |
3450:000 | DONE lbl | na 16 16 | 0069cc |             | sign_plus                            
3451:000 | DONE ins | na 16 16 | 0069cc | b4 00       |                 ldy.dx 00            get rid of number and leave
3452:000 | DONE ins | na 16 16 | 0069ce | e8          |                 inx                  
3453:000 | DONE ins | na 16 16 | 0069cf | e8          |                 inx                  
3454:000 | DONE wsp | na 16 16 |        |             |
3455:000 | DONE lbl | na 16 16 | 0069d0 |             | z_sign                               
3455:001 | DONE ins | na 16 16 | 0069d0 | 60          |                 rts                  
3456:000 | DONE wsp | na 16 16 |        |             |
3457:000 | DONE wsp | na 16 16 |        |             |
3458:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3459:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
3460:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
3461:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
3462:000 | DONE cmt | na 16 16 |        |             | ; tmp2
3463:000 | DONE lbl | na 16 16 | 0069d1 |             | xt_sliteral                          
3464:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3465:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
3466:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
3467:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
3468:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
3469:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
3470:000 | DONE ins | na 16 16 | 0069d1 | b5 00       |                 lda.dx 00            Address of string is NOS
3471:000 | DONE ins | na 16 16 | 0069d3 | 85 16       |                 sta.d 000216         
3472:000 | DONE ins | na 16 16 | 0069d5 | 84 18       |                 sty.d 000218         keep copy of string length
3473:000 | DONE wsp | na 16 16 |        |             |
3474:000 | DONE ins | na 16 16 | 0069d7 | e2 20       |                 sep 20               
3474:001 | DONE ctl | na  8 16 |        |             |         .!a8
3475:000 | DONE ins | na  8 16 | 0069d9 | a9 4c       |                 lda.# 04c            opcode for JMP
3476:000 | DONE ins | na  8 16 | 0069db | 92 00       |                 sta.di 000200        STA (CP)
3477:000 | DONE ins | na  8 16 | 0069dd | c2 20       |                 rep 20               
3477:001 | DONE ctl | na 16 16 |        |             |         .!a16
3478:000 | DONE ins | na 16 16 | 0069df | e6 00       |                 inc.d 000200         
3479:000 | DONE wsp | na 16 16 |        |             |
3480:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
3481:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
3482:000 | DONE ins | na 16 16 | 0069e1 | a5 18       |                 lda.d 000218         string length
3483:000 | DONE ins | na 16 16 | 0069e3 | 1a          |                 inc.a                
3484:000 | DONE ins | na 16 16 | 0069e4 | 1a          |                 inc.a                
3485:000 | DONE wsp | na 16 16 |        |             |
3486:000 | DONE ins | na 16 16 | 0069e5 | 18          |                 clc                  
3487:000 | DONE ins | na 16 16 | 0069e6 | 65 00       |                 adc.d 000200         current address
3488:000 | DONE ins | na 16 16 | 0069e8 | 92 00       |                 sta.di 000200        store jump target
3489:000 | DONE wsp | na 16 16 |        |             |
3490:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
3491:000 | DONE ins | na 16 16 | 0069ea | e6 00       |                 inc.d 000200         
3492:000 | DONE ins | na 16 16 | 0069ec | e6 00       |                 inc.d 000200         
3493:000 | DONE wsp | na 16 16 |        |             |
3494:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
3495:000 | DONE ins | na 16 16 | 0069ee | 88          |                 dey                  last offset is one less than length
3496:000 | DONE ins | na 16 16 | 0069ef | e2 20       |                 sep 20               
3496:001 | DONE ctl | na  8 16 |        |             |         .!a8
3497:000 | DONE lbl | na  8 16 | 0069f1 |             | sl_loop                              
3498:000 | DONE ins | na  8 16 | 0069f1 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3499:000 | DONE ins | na  8 16 | 0069f3 | 91 00       |                 sta.diy 000200       STA (CP),Y
3500:000 | DONE ins | na  8 16 | 0069f5 | 88          |                 dey                  
3501:000 | DONE ins | na  8 16 | 0069f6 | 10 f9       |                 bpl 0069f1           
3502:000 | DONE wsp | na  8 16 |        |             |
3503:000 | DONE ins | na  8 16 | 0069f8 | c2 20       |                 rep 20               
3503:001 | DONE ctl | na 16 16 |        |             |         .!a16
3504:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
3505:000 | DONE ins | na 16 16 | 0069fa | a5 00       |                 lda.d 000200         
3506:000 | DONE ins | na 16 16 | 0069fc | 85 16       |                 sta.d 000216         overwrites original address
3507:000 | DONE wsp | na 16 16 |        |             |
3508:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
3509:000 | DONE ins | na 16 16 | 0069fe | 18          |                 clc                  
3510:000 | DONE ins | na 16 16 | 0069ff | 65 18       |                 adc.d 000218         length of string
3511:000 | DONE ins | na 16 16 | 006a01 | 85 00       |                 sta.d 000200         
3512:000 | DONE wsp | na 16 16 |        |             |
3513:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
3514:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
3515:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
3516:000 | DONE cmt | na 16 16 |        |             |                 ;
3517:000 | DONE cmt | na 16 16 |        |             |                 ; xt -->    jmp a
3518:000 | DONE cmt | na 16 16 |        |             |                 ;           <string data bytes>
3519:000 | DONE cmt | na 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
3520:000 | DONE cmt | na 16 16 |        |             |                 ;           <string address>
3521:000 | DONE cmt | na 16 16 |        |             |                 ;           <string length>
3522:000 | DONE cmt | na 16 16 |        |             |                 ; rts -->
3523:000 | DONE cmt | na 16 16 |        |             |                 ;
3524:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
3525:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
3526:000 | DONE ins | na 16 16 | 006a03 | f4 1c 6a    |                 phe.# 006a1c         
3527:000 | DONE ins | na 16 16 | 006a06 | 20 6d 73    |                 jsr 00736d           
3528:000 | DONE wsp | na 16 16 |        |             |
3529:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
3530:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
3531:000 | DONE ins | na 16 16 | 006a09 | a5 16       |                 lda.d 000216         new address of string
3532:000 | DONE ins | na 16 16 | 006a0b | 48          |                 pha                  
3533:000 | DONE ins | na 16 16 | 006a0c | 20 68 73    |                 jsr 007368           
3534:000 | DONE wsp | na 16 16 |        |             |
3535:000 | DONE ins | na 16 16 | 006a0f | a5 18       |                 lda.d 000218         
3536:000 | DONE ins | na 16 16 | 006a11 | 48          |                 pha                  
3537:000 | DONE ins | na 16 16 | 006a12 | 20 68 73    |                 jsr 007368           
3538:000 | DONE wsp | na 16 16 |        |             |
3539:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
3540:000 | DONE ins | na 16 16 | 006a15 | b4 02       |                 ldy.dx 02            2DROP
3541:000 | DONE ins | na 16 16 | 006a17 | e8          |                 inx                  
3542:000 | DONE ins | na 16 16 | 006a18 | e8          |                 inx                  
3543:000 | DONE ins | na 16 16 | 006a19 | e8          |                 inx                  
3544:000 | DONE ins | na 16 16 | 006a1a | e8          |                 inx                  
3545:000 | DONE wsp | na 16 16 |        |             |
3546:000 | DONE lbl | na 16 16 | 006a1b |             | z_sliteral                           
3546:001 | DONE ins | na 16 16 | 006a1b | 60          |                 rts                  
3547:000 | DONE wsp | na 16 16 |        |             |
3548:000 | DONE lbl | na 16 16 | 006a1c |             | sliteral_rt                          
3549:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
3550:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
3551:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
3552:000 | DONE wsp | na 16 16 |        |             |
3553:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
3554:000 | DONE ins | na 16 16 | 006a1c | ca          |                 dex                  
3555:000 | DONE ins | na 16 16 | 006a1d | ca          |                 dex                  
3556:000 | DONE ins | na 16 16 | 006a1e | ca          |                 dex                  
3557:000 | DONE ins | na 16 16 | 006a1f | ca          |                 dex                  
3558:000 | DONE ins | na 16 16 | 006a20 | 94 02       |                 sty.dx 02            
3559:000 | DONE wsp | na 16 16 |        |             |
3560:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
3561:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
3562:000 | DONE ins | na 16 16 | 006a22 | 7a          |                 ply                  
3563:000 | DONE ins | na 16 16 | 006a23 | c8          |                 iny                  
3564:000 | DONE wsp | na 16 16 |        |             |
3565:000 | DONE ins | na 16 16 | 006a24 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3566:000 | DONE ins | na 16 16 | 006a27 | 95 00       |                 sta.dx 00            save string address as NOS
3567:000 | DONE ins | na 16 16 | 006a29 | c8          |                 iny                  
3568:000 | DONE ins | na 16 16 | 006a2a | c8          |                 iny                  
3569:000 | DONE ins | na 16 16 | 006a2b | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
3570:000 | DONE wsp | na 16 16 |        |             |
3571:000 | DONE ins | na 16 16 | 006a2e | c8          |                 iny                  ... first, though, repair return jump
3572:000 | DONE ins | na 16 16 | 006a2f | 5a          |                 phy                  
3573:000 | DONE wsp | na 16 16 |        |             |
3574:000 | DONE ins | na 16 16 | 006a30 | a8          |                 tay                  TOS is now length of string
3575:000 | DONE wsp | na 16 16 |        |             |
3576:000 | DONE ins | na 16 16 | 006a31 | 60          |                 rts                  
3577:000 | DONE wsp | na 16 16 |        |             |
3578:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3579:000 | DONE cmt | na 16 16 |        |             | ; SM/REM ( d n1 -- n2 n3) X bytes / X cycles
3580:000 | DONE cmt | na 16 16 |        |             | ; Symmetic signed division. Compare FM/MOD. Code from Gforth, see
3581:000 | DONE cmt | na 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
3582:000 | DONE cmt | na 16 16 |        |             | ; and http://git.savannah.gnu.org/cgit/gforth.git/tree/prim ; see
3583:000 | DONE cmt | na 16 16 |        |             | ; http://www.figuk.plus.com/build/arith.htm for variants. Forth is
3584:000 | DONE cmt | na 16 16 |        |             | ; SM/REM OVER >R DUP >R ABS -ROT DABS ROT UM/MOD R>
3585:000 | DONE cmt | na 16 16 |        |             | ; R@ XOR 0< IF NEGATE THEN R> 0< IF SWAP NEGATE SWAP THEN ;
3586:000 | DONE cmt | na 16 16 |        |             | ; TODO optimize in assembler
3587:000 | DONE lbl | na 16 16 | 006a32 |             | xt_smrem                             
3588:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3589:000 | DONE ins | na 16 16 | 006a32 | 20 89 68    |                 jsr 006889           
3590:000 | DONE wsp | na 16 16 |        |             |
3591:000 | DONE ins | na 16 16 | 006a35 | 5a          |                 phy                  >R
3592:000 | DONE ins | na 16 16 | 006a36 | b4 00       |                 ldy.dx 00            
3593:000 | DONE ins | na 16 16 | 006a38 | e8          |                 inx                  
3594:000 | DONE ins | na 16 16 | 006a39 | e8          |                 inx                  
3595:000 | DONE wsp | na 16 16 |        |             |
3596:000 | DONE ins | na 16 16 | 006a3a | ca          |                 dex                  DUP
3597:000 | DONE ins | na 16 16 | 006a3b | ca          |                 dex                  
3598:000 | DONE ins | na 16 16 | 006a3c | 94 00       |                 sty.dx 00            
3599:000 | DONE wsp | na 16 16 |        |             |
3600:000 | DONE ins | na 16 16 | 006a3e | 5a          |                 phy                  >R
3601:000 | DONE ins | na 16 16 | 006a3f | b4 00       |                 ldy.dx 00            
3602:000 | DONE ins | na 16 16 | 006a41 | e8          |                 inx                  
3603:000 | DONE ins | na 16 16 | 006a42 | e8          |                 inx                  
3604:000 | DONE wsp | na 16 16 |        |             |
3605:000 | DONE ins | na 16 16 | 006a43 | 20 ac 63    |                 jsr 0063ac           ABS
3606:000 | DONE ins | na 16 16 | 006a46 | 20 df 62    |                 jsr 0062df           -ROT
3607:000 | DONE ins | na 16 16 | 006a49 | 20 1b 66    |                 jsr 00661b           DABS
3608:000 | DONE ins | na 16 16 | 006a4c | 20 98 69    |                 jsr 006998           ROT
3609:000 | DONE ins | na 16 16 | 006a4f | 20 76 6b    |                 jsr 006b76           UM/MOD
3610:000 | DONE wsp | na 16 16 |        |             |
3611:000 | DONE ins | na 16 16 | 006a52 | ca          |                 dex                  R>
3612:000 | DONE ins | na 16 16 | 006a53 | ca          |                 dex                  
3613:000 | DONE ins | na 16 16 | 006a54 | 94 00       |                 sty.dx 00            
3614:000 | DONE ins | na 16 16 | 006a56 | 7a          |                 ply                  
3615:000 | DONE wsp | na 16 16 |        |             |
3616:000 | DONE ins | na 16 16 | 006a57 | ca          |                 dex                  R@
3617:000 | DONE ins | na 16 16 | 006a58 | ca          |                 dex                  
3618:000 | DONE ins | na 16 16 | 006a59 | 94 00       |                 sty.dx 00            
3619:000 | DONE ins | na 16 16 | 006a5b | 7a          |                 ply                  
3620:000 | DONE ins | na 16 16 | 006a5c | 5a          |                 phy                  
3621:000 | DONE wsp | na 16 16 |        |             |
3622:000 | DONE ins | na 16 16 | 006a5d | 20 37 6c    |                 jsr 006c37           XOR
3623:000 | DONE wsp | na 16 16 |        |             |
3624:000 | DONE ins | na 16 16 | 006a60 | 98          |                 tya                  0< IF
3625:000 | DONE ins | na 16 16 | 006a61 | 10 09       |                 bpl 006a6c           
3626:000 | DONE wsp | na 16 16 |        |             |
3627:000 | DONE ins | na 16 16 | 006a63 | b4 00       |                 ldy.dx 00            from IF
3628:000 | DONE ins | na 16 16 | 006a65 | e8          |                 inx                  
3629:000 | DONE ins | na 16 16 | 006a66 | e8          |                 inx                  
3630:000 | DONE wsp | na 16 16 |        |             |
3631:000 | DONE ins | na 16 16 | 006a67 | 20 f4 67    |                 jsr 0067f4           NEGATE
3632:000 | DONE ins | na 16 16 | 006a6a | 80 04       |                 bra 006a70           
3633:000 | DONE lbl | na 16 16 | 006a6c |             | smrem_1                              
3634:000 | DONE ins | na 16 16 | 006a6c | b4 00       |                 ldy.dx 00            from IF
3635:000 | DONE ins | na 16 16 | 006a6e | e8          |                 inx                  
3636:000 | DONE ins | na 16 16 | 006a6f | e8          |                 inx                  
3637:000 | DONE wsp | na 16 16 |        |             |
3638:000 | DONE lbl | na 16 16 | 006a70 |             | smrem_1_1                            
3639:000 | DONE ins | na 16 16 | 006a70 | ca          |                 dex                  R>
3640:000 | DONE ins | na 16 16 | 006a71 | ca          |                 dex                  
3641:000 | DONE ins | na 16 16 | 006a72 | 94 00       |                 sty.dx 00            
3642:000 | DONE ins | na 16 16 | 006a74 | 7a          |                 ply                  
3643:000 | DONE wsp | na 16 16 |        |             |
3644:000 | DONE ins | na 16 16 | 006a75 | 98          |                 tya                  0< IF
3645:000 | DONE ins | na 16 16 | 006a76 | 10 0f       |                 bpl 006a87           
3646:000 | DONE wsp | na 16 16 |        |             |
3647:000 | DONE ins | na 16 16 | 006a78 | b4 00       |                 ldy.dx 00            from IF
3648:000 | DONE ins | na 16 16 | 006a7a | e8          |                 inx                  
3649:000 | DONE ins | na 16 16 | 006a7b | e8          |                 inx                  
3650:000 | DONE wsp | na 16 16 |        |             |
3651:000 | DONE ins | na 16 16 | 006a7c | 20 c4 6a    |                 jsr 006ac4           
3652:000 | DONE ins | na 16 16 | 006a7f | 20 f4 67    |                 jsr 0067f4           
3653:000 | DONE ins | na 16 16 | 006a82 | 20 c4 6a    |                 jsr 006ac4           
3654:000 | DONE ins | na 16 16 | 006a85 | 80 04       |                 bra 006a8b           
3655:000 | DONE wsp | na 16 16 |        |             |
3656:000 | DONE lbl | na 16 16 | 006a87 |             | smrem_2                              
3657:000 | DONE ins | na 16 16 | 006a87 | b4 00       |                 ldy.dx 00            
3658:000 | DONE ins | na 16 16 | 006a89 | e8          |                 inx                  
3659:000 | DONE ins | na 16 16 | 006a8a | e8          |                 inx                  
3660:000 | DONE wsp | na 16 16 |        |             |
3661:000 | DONE wsp | na 16 16 |        |             |
3662:000 | DONE lbl | na 16 16 | 006a8b |             | smrem_2_1                            
3663:000 | DONE wsp | na 16 16 |        |             |
3664:000 | DONE lbl | na 16 16 | 006a8b |             | z_smrem                              
3664:001 | DONE ins | na 16 16 | 006a8b | 60          |                 rts                  
3665:000 | DONE wsp | na 16 16 |        |             |
3666:000 | DONE wsp | na 16 16 |        |             |
3667:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3668:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
3669:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
3670:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
3671:000 | DONE wsp | na 16 16 |        |             |
3672:000 | DONE lbl | na 16 16 | 006a8c |             | xt_source                            
3673:000 | DONE ins | na 16 16 | 006a8c | ca          |                 dex                  make room on Data Stack
3674:000 | DONE ins | na 16 16 | 006a8d | ca          |                 dex                  
3675:000 | DONE ins | na 16 16 | 006a8e | ca          |                 dex                  
3676:000 | DONE ins | na 16 16 | 006a8f | ca          |                 dex                  
3677:000 | DONE ins | na 16 16 | 006a90 | 94 02       |                 sty.dx 02            
3678:000 | DONE wsp | na 16 16 |        |             |
3679:000 | DONE ins | na 16 16 | 006a92 | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
3680:000 | DONE ins | na 16 16 | 006a94 | 95 00       |                 sta.dx 00            
3681:000 | DONE wsp | na 16 16 |        |             |
3682:000 | DONE ins | na 16 16 | 006a96 | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
3683:000 | DONE wsp | na 16 16 |        |             |
3684:000 | DONE lbl | na 16 16 | 006a98 |             | z_source                             
3684:001 | DONE ins | na 16 16 | 006a98 | 60          |                 rts                  
3685:000 | DONE wsp | na 16 16 |        |             |
3686:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3687:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
3688:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
3689:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
3690:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
3691:000 | DONE lbl | na 16 16 | 006a99 |             | xt_source-id                         
3692:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3693:000 | DONE ins | na 16 16 | 006a99 | ca          |                 dex                  
3694:000 | DONE ins | na 16 16 | 006a9a | ca          |                 dex                  
3695:000 | DONE ins | na 16 16 | 006a9b | 94 00       |                 sty.dx 00            
3696:000 | DONE ins | na 16 16 | 006a9d | a4 0a       |                 ldy.d 00020a         
3697:000 | DONE wsp | na 16 16 |        |             |
3698:000 | DONE lbl | na 16 16 | 006a9f |             | z_source-id                          
3698:001 | DONE ins | na 16 16 | 006a9f | 60          |                 rts                  
3699:000 | DONE wsp | na 16 16 |        |             |
3700:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3701:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
3702:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
3703:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
3704:000 | DONE lbl | na 16 16 | 006aa0 |             | xt_space                             
3705:000 | DONE ins | na 16 16 | 006aa0 | a9 20 00    |                 lda.# AscSP          
3706:000 | DONE ins | na 16 16 | 006aa3 | 20 36 60    |                 jsr 006036           
3707:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3708:000 | DONE wsp | na 16 16 |        |             |
3709:000 | DONE lbl | na 16 16 | 006aa6 |             | z_space                              
3709:001 | DONE ins | na 16 16 | 006aa6 | 60          |                 rts                  
3710:000 | DONE wsp | na 16 16 |        |             |
3711:000 | DONE wsp | na 16 16 |        |             |
3712:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3713:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
3714:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
3715:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
3716:000 | DONE lbl | na 16 16 | 006aa7 |             | xt_spaces                            
3717:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3718:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3719:000 | DONE lbl | na 16 16 | 006aa7 |             | @                                    
3720:000 | DONE ins | na 16 16 | 006aa7 | 88          |                 dey                  this also handles case u=0
3721:000 | DONE ins | na 16 16 | 006aa8 | 30 05       |                 bmi 006aaf           
3722:000 | DONE wsp | na 16 16 |        |             |
3723:000 | DONE ins | na 16 16 | 006aaa | 20 a0 6a    |                 jsr 006aa0           
3724:000 | DONE ins | na 16 16 | 006aad | 80 f8       |                 bra 006aa7           
3725:000 | DONE wsp | na 16 16 |        |             |
3726:000 | DONE lbl | na 16 16 | 006aaf |             | spaces_done                          
3727:000 | DONE ins | na 16 16 | 006aaf | b4 00       |                 ldy.dx 00            DROP
3728:000 | DONE ins | na 16 16 | 006ab1 | e8          |                 inx                  
3729:000 | DONE ins | na 16 16 | 006ab2 | e8          |                 inx                  
3730:000 | DONE wsp | na 16 16 |        |             |
3731:000 | DONE lbl | na 16 16 | 006ab3 |             | z_spaces                             
3731:001 | DONE ins | na 16 16 | 006ab3 | 60          |                 rts                  
3732:000 | DONE wsp | na 16 16 |        |             |
3733:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3734:000 | DONE cmt | na 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
3735:000 | DONE cmt | na 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
3736:000 | DONE cmt | na 16 16 |        |             | ; more than UM* DROP
3737:000 | DONE lbl | na 16 16 | 006ab4 |             | xt_star                              
3738:000 | DONE ins | na 16 16 | 006ab4 | 20 17 6b    |                 jsr 006b17           
3739:000 | DONE ins | na 16 16 | 006ab7 | b4 00       |                 ldy.dx 00            DROP
3740:000 | DONE ins | na 16 16 | 006ab9 | e8          |                 inx                  
3741:000 | DONE ins | na 16 16 | 006aba | e8          |                 inx                  
3742:000 | DONE wsp | na 16 16 |        |             |
3743:000 | DONE lbl | na 16 16 | 006abb |             | z_star                               
3743:001 | DONE ins | na 16 16 | 006abb | 60          |                 rts                  
3744:000 | DONE wsp | na 16 16 |        |             |
3745:000 | DONE wsp | na 16 16 |        |             |
3746:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3747:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
3748:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
3749:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
3750:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
3751:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
3752:000 | DONE lbl | na 16 16 | 006abc |             | xt_state                             
3753:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3754:000 | DONE ins | na 16 16 | 006abc | ca          |                 dex                  
3755:000 | DONE ins | na 16 16 | 006abd | ca          |                 dex                  
3756:000 | DONE ins | na 16 16 | 006abe | 94 00       |                 sty.dx 00            
3757:000 | DONE ins | na 16 16 | 006ac0 | a0 14 02    |                 ldy.# 000214         
3758:000 | DONE wsp | na 16 16 |        |             |
3759:000 | DONE lbl | na 16 16 | 006ac3 |             | z_state                              
3759:001 | DONE ins | na 16 16 | 006ac3 | 60          |                 rts                  
3760:000 | DONE wsp | na 16 16 |        |             |
3761:000 | DONE wsp | na 16 16 |        |             |
3762:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3763:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
3764:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
3765:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
3766:000 | DONE lbl | na 16 16 | 006ac4 |             | xt_swap                              
3767:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3768:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3769:000 | DONE ins | na 16 16 | 006ac4 | b5 00       |                 lda.dx 00            
3770:000 | DONE ins | na 16 16 | 006ac6 | 94 00       |                 sty.dx 00            
3771:000 | DONE ins | na 16 16 | 006ac8 | a8          |                 tay                  
3772:000 | DONE wsp | na 16 16 |        |             |
3773:000 | DONE lbl | na 16 16 | 006ac9 |             | z_swap                               
3773:001 | DONE ins | na 16 16 | 006ac9 | 60          |                 rts                  
3774:000 | DONE wsp | na 16 16 |        |             |
3775:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3776:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
3777:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
3778:000 | DONE lbl | na 16 16 | 006aca |             | xt_true                              
3779:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3780:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3781:000 | DONE ins | na 16 16 | 006aca | ca          |                 dex                  
3782:000 | DONE ins | na 16 16 | 006acb | ca          |                 dex                  
3783:000 | DONE ins | na 16 16 | 006acc | 94 00       |                 sty.dx 00            
3784:000 | DONE ins | na 16 16 | 006ace | a0 ff ff    |                 ldy.# 0ffff          
3785:000 | DONE wsp | na 16 16 |        |             |
3786:000 | DONE lbl | na 16 16 | 006ad1 |             | z_true                               
3786:001 | DONE ins | na 16 16 | 006ad1 | 60          |                 rts                  
3787:000 | DONE wsp | na 16 16 |        |             |
3788:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3789:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
3790:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
3791:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
3792:000 | DONE lbl | na 16 16 | 006ad2 |             | xt_tuck                              
3793:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3794:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3795:000 | DONE ins | na 16 16 | 006ad2 | ca          |                 dex                  
3796:000 | DONE ins | na 16 16 | 006ad3 | ca          |                 dex                  
3797:000 | DONE ins | na 16 16 | 006ad4 | b5 02       |                 lda.dx 2             
3798:000 | DONE ins | na 16 16 | 006ad6 | 95 00       |                 sta.dx 0             
3799:000 | DONE ins | na 16 16 | 006ad8 | 94 02       |                 sty.dx 2             
3800:000 | DONE wsp | na 16 16 |        |             |
3801:000 | DONE lbl | na 16 16 | 006ada |             | z_tuck                               
3801:001 | DONE ins | na 16 16 | 006ada | 60          |                 rts                  
3802:000 | DONE wsp | na 16 16 |        |             |
3803:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3804:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
3805:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
3806:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
3807:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
3808:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
3809:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
3810:000 | DONE cmt | na 16 16 |        |             | ; running.
3811:000 | DONE lbl | na 16 16 | 006adb |             | xt_type                              
3812:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3813:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3814:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
3815:000 | DONE ins | na 16 16 | 006adb | 98          |                 tya                  force flag check of TOS
3816:000 | DONE ins | na 16 16 | 006adc | f0 17       |                 beq 006af5           
3817:000 | DONE wsp | na 16 16 |        |             |
3818:000 | DONE ins | na 16 16 | 006ade | b5 00       |                 lda.dx 00            get address from NOS
3819:000 | DONE ins | na 16 16 | 006ae0 | 85 16       |                 sta.d 000216         
3820:000 | DONE ins | na 16 16 | 006ae2 | 84 18       |                 sty.d 000218         number of chars is TOS
3821:000 | DONE ins | na 16 16 | 006ae4 | a0 00 00    |                 ldy.# 0000           
3822:000 | DONE ins | na 16 16 | 006ae7 | e2 20       |                 sep 20               
3822:001 | DONE ctl | na  8 16 |        |             |         .!a8
3823:000 | DONE lbl | na  8 16 | 006ae9 |             | type_loop                            
3824:000 | DONE ins | na  8 16 | 006ae9 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3825:000 | DONE ins | na  8 16 | 006aeb | 20 36 60    |                 jsr 006036           
3826:000 | DONE ins | na  8 16 | 006aee | c8          |                 iny                  
3827:000 | DONE ins | na  8 16 | 006aef | c4 18       |                 cpy.d 000218         
3828:000 | DONE ins | na  8 16 | 006af1 | d0 f6       |                 bne 006ae9           
3829:000 | DONE wsp | na  8 16 |        |             |
3830:000 | DONE ins | na  8 16 | 006af3 | c2 20       |                 rep 20               
3830:001 | DONE ctl | na 16 16 |        |             |         .!a16
3831:000 | DONE lbl | na 16 16 | 006af5 |             | type_done                            
3832:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
3833:000 | DONE ins | na 16 16 | 006af5 | b4 02       |                 ldy.dx 02            
3834:000 | DONE ins | na 16 16 | 006af7 | e8          |                 inx                  
3835:000 | DONE ins | na 16 16 | 006af8 | e8          |                 inx                  
3836:000 | DONE ins | na 16 16 | 006af9 | e8          |                 inx                  
3837:000 | DONE ins | na 16 16 | 006afa | e8          |                 inx                  
3838:000 | DONE wsp | na 16 16 |        |             |
3839:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
3840:000 | DONE wsp | na 16 16 |        |             |
3841:000 | DONE lbl | na 16 16 | 006afb |             | z_type                               
3841:001 | DONE ins | na 16 16 | 006afb | 60          |                 rts                  
3842:000 | DONE wsp | na 16 16 |        |             |
3843:000 | DONE wsp | na 16 16 |        |             |
3844:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3845:000 | DONE cmt | na 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
3846:000 | DONE cmt | na 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
3847:000 | DONE cmt | na 16 16 |        |             | ; result and a single-cell remainder. Based on
3848:000 | DONE cmt | na 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
3849:000 | DONE cmt | na 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
3850:000 | DONE cmt | na 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
3851:000 | DONE cmt | na 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
3852:000 | DONE cmt | na 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
3853:000 | DONE lbl | na 16 16 | 006afc |             | xt_udmod                             
3854:000 | DONE ins | na 16 16 | 006afc | 20 86 61    |                 jsr 006186           
3855:000 | DONE ins | na 16 16 | 006aff | 20 f4 62    |                 jsr 0062f4           
3856:000 | DONE ins | na 16 16 | 006b02 | 20 54 69    |                 jsr 006954           
3857:000 | DONE ins | na 16 16 | 006b05 | 20 76 6b    |                 jsr 006b76           
3858:000 | DONE ins | na 16 16 | 006b08 | 20 98 69    |                 jsr 006998           
3859:000 | DONE ins | na 16 16 | 006b0b | 20 98 69    |                 jsr 006998           
3860:000 | DONE ins | na 16 16 | 006b0e | 20 5d 69    |                 jsr 00695d           
3861:000 | DONE ins | na 16 16 | 006b11 | 20 76 6b    |                 jsr 006b76           
3862:000 | DONE ins | na 16 16 | 006b14 | 4c 98 69    |                 jmp 006998           JSR/RTS
3863:000 | DONE lbl | na 16 16 | 006b17 |             | z_udmod                              
3864:000 | DONE wsp | na 16 16 |        |             |
3865:000 | DONE wsp | na 16 16 |        |             |
3866:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3867:000 | DONE cmt | na 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
3868:000 | DONE cmt | na 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
3869:000 | DONE cmt | na 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
3870:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
3871:000 | DONE cmt | na 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
3872:000 | DONE cmt | na 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
3873:000 | DONE cmt | na 16 16 |        |             | ; call this "U*"
3874:000 | DONE wsp | na 16 16 |        |             |
3875:000 | DONE cmt | na 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
3876:000 | DONE cmt | na 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
3877:000 | DONE cmt | na 16 16 |        |             | ; consider switching to a table-supported version based on
3878:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
3879:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
3880:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
3881:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
3882:000 | DONE cmt | na 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
3883:000 | DONE lbl | na 16 16 | 006b17 |             | xt_umstar                            
3884:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3885:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
3886:000 | DONE ins | na 16 16 | 006b17 | 98          |                 tya                  
3887:000 | DONE ins | na 16 16 | 006b18 | f0 3d       |                 beq 006b57           
3888:000 | DONE ins | na 16 16 | 006b1a | b5 00       |                 lda.dx 00            
3889:000 | DONE ins | na 16 16 | 006b1c | f0 39       |                 beq 006b57           
3890:000 | DONE wsp | na 16 16 |        |             |
3891:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
3892:000 | DONE cmt | na 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
3893:000 | DONE cmt | na 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
3894:000 | DONE cmt | na 16 16 |        |             |                 ; answer
3895:000 | DONE ins | na 16 16 | 006b1e | c0 01 00    |                 cpy.# 0001           non-distructively
3896:000 | DONE ins | na 16 16 | 006b21 | f0 3b       |                 beq 006b5e           
3897:000 | DONE ins | na 16 16 | 006b23 | b5 00       |                 lda.dx 00            
3898:000 | DONE ins | na 16 16 | 006b25 | 3a          |                 dec.a                don't care about distruction
3899:000 | DONE ins | na 16 16 | 006b26 | f0 39       |                 beq 006b61           
3900:000 | DONE wsp | na 16 16 |        |             |
3901:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
3902:000 | DONE ins | na 16 16 | 006b28 | c0 02 00    |                 cpy.# 0002           
3903:000 | DONE ins | na 16 16 | 006b2b | f0 3b       |                 beq 006b68           
3904:000 | DONE wsp | na 16 16 |        |             |
3905:000 | DONE ins | na 16 16 | 006b2d | b5 00       |                 lda.dx 00            
3906:000 | DONE ins | na 16 16 | 006b2f | c9 02 00    |                 cmp.# 0002           
3907:000 | DONE ins | na 16 16 | 006b32 | f0 38       |                 beq 006b6c           
3908:000 | DONE wsp | na 16 16 |        |             |
3909:000 | DONE cmt | na 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
3910:000 | DONE ins | na 16 16 | 006b34 | 84 16       |                 sty.d 000216         TOS number  "40"
3911:000 | DONE ins | na 16 16 | 006b36 | 85 18       |                 sta.d 000218         NOS number  "41"
3912:000 | DONE ins | na 16 16 | 006b38 | a0 10 00    |                 ldy.# &16            loop counter
3913:000 | DONE wsp | na 16 16 |        |             |
3914:000 | DONE ins | na 16 16 | 006b3b | a9 00 00    |                 lda.# 0000           
3915:000 | DONE ins | na 16 16 | 006b3e | 85 1a       |                 sta.d 00021a         Most Significat Word (MSW) of result
3916:000 | DONE wsp | na 16 16 |        |             |
3917:000 | DONE lbl | na 16 16 | 006b40 |             | umstar_loop                          
3918:000 | DONE ins | na 16 16 | 006b40 | 0a          |                 asl.a                useless for first iteration
3919:000 | DONE ins | na 16 16 | 006b41 | 26 1a       |                 rol.d 00021a         move carry into MSB, useless first iteration
3920:000 | DONE ins | na 16 16 | 006b43 | 06 18       |                 asl.d 000218         move bit of NOS number into carry
3921:000 | DONE wsp | na 16 16 |        |             |
3922:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
3923:000 | DONE cmt | na 16 16 |        |             |                 ; the next bit
3924:000 | DONE ins | na 16 16 | 006b45 | 90 07       |                 bcc 006b4e           
3925:000 | DONE wsp | na 16 16 |        |             |
3926:000 | DONE ins | na 16 16 | 006b47 | 18          |                 clc                  
3927:000 | DONE ins | na 16 16 | 006b48 | 65 16       |                 adc.d 000216         we have a set bit, so add TOS
3928:000 | DONE wsp | na 16 16 |        |             |
3929:000 | DONE cmt | na 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
3930:000 | DONE ins | na 16 16 | 006b4a | 90 02       |                 bcc 006b4e           
3931:000 | DONE ins | na 16 16 | 006b4c | e6 1a       |                 inc.d 00021a         
3932:000 | DONE wsp | na 16 16 |        |             |
3933:000 | DONE lbl | na 16 16 | 006b4e |             | umstar_counter                       
3934:000 | DONE ins | na 16 16 | 006b4e | 88          |                 dey                  
3935:000 | DONE ins | na 16 16 | 006b4f | d0 ef       |                 bne 006b40           
3936:000 | DONE wsp | na 16 16 |        |             |
3937:000 | DONE cmt | na 16 16 |        |             |                 ; We're all done, clean up and leave
3938:000 | DONE ins | na 16 16 | 006b51 | 95 00       |                 sta.dx 00            store lower cell of number in NOS
3939:000 | DONE ins | na 16 16 | 006b53 | a4 1a       |                 ldy.d 00021a         store MSB in TOS as double cell
3940:000 | DONE wsp | na 16 16 |        |             |
3941:000 | DONE ins | na 16 16 | 006b55 | 80 1e       |                 bra 006b75           don't use RTS so we can natively compile
3942:000 | DONE wsp | na 16 16 |        |             |
3943:000 | DONE lbl | na 16 16 | 006b57 |             | umstar_zero                          
3944:000 | DONE cmt | na 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
3945:000 | DONE ins | na 16 16 | 006b57 | a0 00 00    |                 ldy.# 0000           
3946:000 | DONE ins | na 16 16 | 006b5a | 94 00       |                 sty.dx 00            
3947:000 | DONE ins | na 16 16 | 006b5c | 80 17       |                 bra 006b75           
3948:000 | DONE wsp | na 16 16 |        |             |
3949:000 | DONE lbl | na 16 16 | 006b5e |             | umstar_one_tos                       
3950:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is one, life is easy
3951:000 | DONE ins | na 16 16 | 006b5e | 88          |                 dey                  NOS is LSW, TOS becomes zero
3952:000 | DONE ins | na 16 16 | 006b5f | 80 14       |                 bra 006b75           
3953:000 | DONE lbl | na 16 16 | 006b61 |             | umstar_one_nos                       
3954:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is one, life is easy
3955:000 | DONE ins | na 16 16 | 006b61 | 94 00       |                 sty.dx 00            
3956:000 | DONE ins | na 16 16 | 006b63 | a0 00 00    |                 ldy.# 0000           
3957:000 | DONE ins | na 16 16 | 006b66 | 80 0d       |                 bra 006b75           
3958:000 | DONE wsp | na 16 16 |        |             |
3959:000 | DONE lbl | na 16 16 | 006b68 |             | umstar_two_tos                       
3960:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is two, life is easy
3961:000 | DONE ins | na 16 16 | 006b68 | b5 00       |                 lda.dx 00            
3962:000 | DONE ins | na 16 16 | 006b6a | 80 01       |                 bra 006b6d           
3963:000 | DONE lbl | na 16 16 | 006b6c |             | umstar_two_nos                       
3964:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is two, life is still easy
3965:000 | DONE ins | na 16 16 | 006b6c | 98          |                 tya                  
3966:000 | DONE lbl | na 16 16 | 006b6d |             | umstar_two_common                    
3967:000 | DONE ins | na 16 16 | 006b6d | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
3968:000 | DONE ins | na 16 16 | 006b6e | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
3969:000 | DONE wsp | na 16 16 |        |             |
3970:000 | DONE ins | na 16 16 | 006b70 | a9 00 00    |                 lda.# 0000           
3971:000 | DONE ins | na 16 16 | 006b73 | 2a          |                 rol.a                Rotate any Carry Flag into MSW
3972:000 | DONE ins | na 16 16 | 006b74 | a8          |                 tay                  
3973:000 | DONE wsp | na 16 16 |        |             |
3974:000 | DONE lbl | na 16 16 | 006b75 |             | z_umstar                             
3974:001 | DONE ins | na 16 16 | 006b75 | 60          |                 rts                  
3975:000 | DONE wsp | na 16 16 |        |             |
3976:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3977:000 | DONE cmt | na 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
3978:000 | DONE cmt | na 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
3979:000 | DONE cmt | na 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
3980:000 | DONE cmt | na 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
3981:000 | DONE cmt | na 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
3982:000 | DONE cmt | na 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
3983:000 | DONE lbl | na 16 16 | 006b76 |             | xt_ummod                             
3984:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3985:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3986:000 | DONE cmt | na 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
3987:000 | DONE cmt | na 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
3988:000 | DONE cmt | na 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
3989:000 | DONE cmt | na 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
3990:000 | DONE cmt | na 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
3991:000 | DONE cmt | na 16 16 |        |             |                 ;
3992:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3993:000 | DONE cmt | na 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
3994:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
3995:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
3996:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3997:000 | DONE cmt | na 16 16 |        |             |                 ;
3998:000 | DONE cmt | na 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
3999:000 | DONE cmt | na 16 16 |        |             |                 ; and low cell in 3OS
4000:000 | DONE wsp | na 16 16 |        |             |
4001:000 | DONE cmt | na 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
4002:000 | DONE cmt | na 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
4003:000 | DONE cmt | na 16 16 |        |             |                 ; to appear like in Gforth
4004:000 | DONE ins | na 16 16 | 006b76 | 98          |                 tya                  force flag test
4005:000 | DONE ins | na 16 16 | 006b77 | d0 06       |                 bne 006b7f           
4006:000 | DONE wsp | na 16 16 |        |             |
4007:000 | DONE ins | na 16 16 | 006b79 | a9 4f 79    |                 lda.# 00794f         
4008:000 | DONE ins | na 16 16 | 006b7c | 4c 8e 73    |                 jmp 00738e           
4009:000 | DONE wsp | na 16 16 |        |             |
4010:000 | DONE lbl | na 16 16 | 006b7f |             | ummod_notzero                        
4011:000 | DONE ins | na 16 16 | 006b7f | 84 20       |                 sty.d 000220         Y is now free
4012:000 | DONE ins | na 16 16 | 006b81 | b5 00       |                 lda.dx 00            high cell of dividend
4013:000 | DONE ins | na 16 16 | 006b83 | 85 22       |                 sta.d 000222         
4014:000 | DONE ins | na 16 16 | 006b85 | b5 02       |                 lda.dx 02            low cell of dividend
4015:000 | DONE ins | na 16 16 | 006b87 | 85 24       |                 sta.d 000224         
4016:000 | DONE wsp | na 16 16 |        |             |
4017:000 | DONE cmt | na 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
4018:000 | DONE cmt | na 16 16 |        |             |                 ; Pointer, freeing X for index duty
4019:000 | DONE ins | na 16 16 | 006b89 | e8          |                 inx                  
4020:000 | DONE ins | na 16 16 | 006b8a | e8          |                 inx                  
4021:000 | DONE ins | na 16 16 | 006b8b | 86 04       |                 stx.d 000204         
4022:000 | DONE wsp | na 16 16 |        |             |
4023:000 | DONE cmt | na 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
4024:000 | DONE cmt | na 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
4025:000 | DONE cmt | na 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
4026:000 | DONE cmt | na 16 16 |        |             |                 ; we did that already in a separate step
4027:000 | DONE ins | na 16 16 | 006b8d | 38          |                 sec                  
4028:000 | DONE ins | na 16 16 | 006b8e | a5 22       |                 lda.d 000222         
4029:000 | DONE ins | na 16 16 | 006b90 | e5 20       |                 sbc.d 000220         
4030:000 | DONE ins | na 16 16 | 006b92 | b0 21       |                 bcs 006bb5           
4031:000 | DONE wsp | na 16 16 |        |             |
4032:000 | DONE cmt | na 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
4033:000 | DONE cmt | na 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
4034:000 | DONE cmt | na 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
4035:000 | DONE cmt | na 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
4036:000 | DONE cmt | na 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
4037:000 | DONE cmt | na 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
4038:000 | DONE ins | na 16 16 | 006b94 | a2 11 00    |                 ldx.# &17            
4039:000 | DONE wsp | na 16 16 |        |             |
4040:000 | DONE lbl | na 16 16 | 006b97 |             | ummod_shift                          
4041:000 | DONE cmt | na 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
4042:000 | DONE cmt | na 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
4043:000 | DONE cmt | na 16 16 |        |             |                 ; pushed off the other end in the last rotation
4044:000 | DONE ins | na 16 16 | 006b97 | 26 24       |                 rol.d 000224         
4045:000 | DONE wsp | na 16 16 |        |             |
4046:000 | DONE cmt | na 16 16 |        |             |                 ; loop control
4047:000 | DONE ins | na 16 16 | 006b99 | ca          |                 dex                  
4048:000 | DONE ins | na 16 16 | 006b9a | f0 22       |                 beq 006bbe           
4049:000 | DONE wsp | na 16 16 |        |             |
4050:000 | DONE cmt | na 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
4051:000 | DONE cmt | na 16 16 |        |             |                 ; next bit in from high bit of low cell
4052:000 | DONE ins | na 16 16 | 006b9c | 26 22       |                 rol.d 000222         
4053:000 | DONE ins | na 16 16 | 006b9e | a9 00 00    |                 lda.# 0000           
4054:000 | DONE ins | na 16 16 | 006ba1 | 2a          |                 rol.a                
4055:000 | DONE ins | na 16 16 | 006ba2 | 85 26       |                 sta.d 000226         store old high bit of dividend
4056:000 | DONE wsp | na 16 16 |        |             |
4057:000 | DONE cmt | na 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
4058:000 | DONE cmt | na 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
4059:000 | DONE cmt | na 16 16 |        |             |                 ; cleared, divisor did not fit
4060:000 | DONE ins | na 16 16 | 006ba4 | 38          |                 sec                  
4061:000 | DONE ins | na 16 16 | 006ba5 | a5 22       |                 lda.d 000222         
4062:000 | DONE ins | na 16 16 | 006ba7 | e5 20       |                 sbc.d 000220         
4063:000 | DONE ins | na 16 16 | 006ba9 | a8          |                 tay                  save difference in Y until we know if we need it
4064:000 | DONE wsp | na 16 16 |        |             |
4065:000 | DONE cmt | na 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
4066:000 | DONE cmt | na 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
4067:000 | DONE cmt | na 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
4068:000 | DONE cmt | na 16 16 |        |             |                 ; remains set
4069:000 | DONE ins | na 16 16 | 006baa | a5 26       |                 lda.d 000226         
4070:000 | DONE ins | na 16 16 | 006bac | e9 00 00    |                 sbc.# 0000           
4071:000 | DONE ins | na 16 16 | 006baf | 90 e6       |                 bcc 006b97           
4072:000 | DONE wsp | na 16 16 |        |             |
4073:000 | DONE cmt | na 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
4074:000 | DONE cmt | na 16 16 |        |             |                 ; cell to what it would be after subtraction
4075:000 | DONE ins | na 16 16 | 006bb1 | 84 22       |                 sty.d 000222         
4076:000 | DONE ins | na 16 16 | 006bb3 | 80 e2       |                 bra 006b97           
4077:000 | DONE wsp | na 16 16 |        |             |
4078:000 | DONE lbl | na 16 16 | 006bb5 |             | ummod_overflow                       
4079:000 | DONE cmt | na 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
4080:000 | DONE cmt | na 16 16 |        |             |                 ; in both the quotient and remainder
4081:000 | DONE ins | na 16 16 | 006bb5 | a6 04       |                 ldx.d 000204         restore DSP
4082:000 | DONE ins | na 16 16 | 006bb7 | a0 ff ff    |                 ldy.# 0ffff          
4083:000 | DONE ins | na 16 16 | 006bba | 94 00       |                 sty.dx 00            
4084:000 | DONE ins | na 16 16 | 006bbc | 80 08       |                 bra 006bc6           go to end to enable native coding
4085:000 | DONE wsp | na 16 16 |        |             |
4086:000 | DONE lbl | na 16 16 | 006bbe |             | ummod_complete                       
4087:000 | DONE ins | na 16 16 | 006bbe | a6 04       |                 ldx.d 000204         restore DSP
4088:000 | DONE ins | na 16 16 | 006bc0 | a4 24       |                 ldy.d 000224         quotient is TOS
4089:000 | DONE ins | na 16 16 | 006bc2 | a5 22       |                 lda.d 000222         remainder is NOS
4090:000 | DONE ins | na 16 16 | 006bc4 | 95 00       |                 sta.dx 00            
4091:000 | DONE wsp | na 16 16 |        |             |
4092:000 | DONE lbl | na 16 16 | 006bc6 |             | z_ummod                              
4092:001 | DONE ins | na 16 16 | 006bc6 | 60          |                 rts                  
4093:000 | DONE wsp | na 16 16 |        |             |
4094:000 | DONE wsp | na 16 16 |        |             |
4095:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4096:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
4097:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
4098:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
4099:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
4100:000 | DONE lbl | na 16 16 | 006bc7 |             | xt_unused                            
4101:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4102:000 | DONE ins | na 16 16 | 006bc7 | a9 ff 7b    |                 lda.# 007bff         
4103:000 | DONE ins | na 16 16 | 006bca | 38          |                 sec                  
4104:000 | DONE ins | na 16 16 | 006bcb | e5 00       |                 sbc.d 000200         current compile pointer
4105:000 | DONE wsp | na 16 16 |        |             |
4106:000 | DONE ins | na 16 16 | 006bcd | ca          |                 dex                  
4107:000 | DONE ins | na 16 16 | 006bce | ca          |                 dex                  
4108:000 | DONE ins | na 16 16 | 006bcf | 94 00       |                 sty.dx 00            
4109:000 | DONE wsp | na 16 16 |        |             |
4110:000 | DONE ins | na 16 16 | 006bd1 | a8          |                 tay                  
4111:000 | DONE wsp | na 16 16 |        |             |
4112:000 | DONE lbl | na 16 16 | 006bd2 |             | z_unused                             
4112:001 | DONE ins | na 16 16 | 006bd2 | 60          |                 rts                  
4113:000 | DONE wsp | na 16 16 |        |             |
4114:000 | DONE wsp | na 16 16 |        |             |
4115:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4116:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
4117:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
4118:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
4119:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
4120:000 | DONE lbl | na 16 16 | 006bd3 |             | xt_variable                          
4121:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
4122:000 | DONE ins | na 16 16 | 006bd3 | 20 55 65    |                 jsr 006555           
4123:000 | DONE wsp | na 16 16 |        |             |
4124:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
4125:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
4126:000 | DONE ins | na 16 16 | 006bd6 | a9 00 00    |                 lda.# 0000           
4127:000 | DONE ins | na 16 16 | 006bd9 | 92 00       |                 sta.di 000200        STA (CP)
4128:000 | DONE wsp | na 16 16 |        |             |
4129:000 | DONE ins | na 16 16 | 006bdb | e6 00       |                 inc.d 000200         direct COMMA
4130:000 | DONE ins | na 16 16 | 006bdd | e6 00       |                 inc.d 000200         
4131:000 | DONE wsp | na 16 16 |        |             |
4132:000 | DONE lbl | na 16 16 | 006bdf |             | z_variable                           
4132:001 | DONE ins | na 16 16 | 006bdf | 60          |                 rts                  
4133:000 | DONE wsp | na 16 16 |        |             |
4134:000 | DONE wsp | na 16 16 |        |             |
4135:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4136:000 | DONE cmt | na 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
4137:000 | DONE cmt | na 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
4138:000 | DONE cmt | na 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
4139:000 | DONE cmt | na 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
4140:000 | DONE lbl | na 16 16 | 006be0 |             | xt_wordsnsizes                       
4141:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4142:000 | DONE ins | na 16 16 | 006be0 | a9 ff ff    |                 lda.# 0ffff          
4143:000 | DONE ins | na 16 16 | 006be3 | 85 1a       |                 sta.d 00021a         set flag that we want sizes, too
4144:000 | DONE wsp | na 16 16 |        |             |
4145:000 | DONE cmt | na 16 16 |        |             |                 ; continue with WORDS
4146:000 | DONE ins | na 16 16 | 006be5 | 80 02       |                 bra 006be9           
4147:000 | DONE wsp | na 16 16 |        |             |
4148:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4149:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
4150:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
4151:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
4152:000 | DONE cmt | na 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
4153:000 | DONE cmt | na 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
4154:000 | DONE lbl | na 16 16 | 006be7 |             | xt_words                             
4155:000 | DONE ins | na 16 16 | 006be7 | 64 1a       |                 stz.d 00021a         store flag that we don't want to print sizes
4156:000 | DONE wsp | na 16 16 |        |             |
4157:000 | DONE lbl | na 16 16 | 006be9 |             | words_common                         
4158:000 | DONE cmt | na 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
4159:000 | DONE ins | na 16 16 | 006be9 | 20 4e 65    |                 jsr 00654e           start on next line, this is a style choice
4160:000 | DONE wsp | na 16 16 |        |             |
4161:000 | DONE ins | na 16 16 | 006bec | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
4162:000 | DONE ins | na 16 16 | 006bee | 48          |                 pha                  
4163:000 | DONE wsp | na 16 16 |        |             |
4164:000 | DONE ins | na 16 16 | 006bef | ca          |                 dex                  create room on TOS
4165:000 | DONE ins | na 16 16 | 006bf0 | ca          |                 dex                  
4166:000 | DONE ins | na 16 16 | 006bf1 | 94 00       |                 sty.dx 00            
4167:000 | DONE wsp | na 16 16 |        |             |
4168:000 | DONE lbl | na 16 16 | 006bf3 |             | words_loop                           
4169:000 | DONE ins | na 16 16 | 006bf3 | a8          |                 tay                  ( nt )
4170:000 | DONE ins | na 16 16 | 006bf4 | 20 e3 67    |                 jsr 0067e3           ( nt -- addr u )
4171:000 | DONE ins | na 16 16 | 006bf7 | 20 db 6a    |                 jsr 006adb           ( addr u -- )
4172:000 | DONE ins | na 16 16 | 006bfa | 20 a0 6a    |                 jsr 006aa0           
4173:000 | DONE wsp | na 16 16 |        |             |
4174:000 | DONE cmt | na 16 16 |        |             |                 ; If the user wants sizes as well, print them
4175:000 | DONE ins | na 16 16 | 006bfd | a5 1a       |                 lda.d 00021a         
4176:000 | DONE ins | na 16 16 | 006bff | f0 0f       |                 beq 006c10           
4177:000 | DONE wsp | na 16 16 |        |             |
4178:000 | DONE cmt | na 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
4179:000 | DONE cmt | na 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
4180:000 | DONE ins | na 16 16 | 006c01 | ca          |                 dex                  
4181:000 | DONE ins | na 16 16 | 006c02 | ca          |                 dex                  
4182:000 | DONE ins | na 16 16 | 006c03 | 94 00       |                 sty.dx 00            
4183:000 | DONE wsp | na 16 16 |        |             |
4184:000 | DONE ins | na 16 16 | 006c05 | 7a          |                 ply                  get nt back again
4185:000 | DONE ins | na 16 16 | 006c06 | 5a          |                 phy                  
4186:000 | DONE ins | na 16 16 | 006c07 | 20 24 6c    |                 jsr 006c24           ( u )
4187:000 | DONE ins | na 16 16 | 006c0a | 20 8e 61    |                 jsr 00618e           
4188:000 | DONE ins | na 16 16 | 006c0d | 20 a0 6a    |                 jsr 006aa0           
4189:000 | DONE wsp | na 16 16 |        |             |
4190:000 | DONE lbl | na 16 16 | 006c10 |             | words_nosizes                        
4191:000 | DONE ins | na 16 16 | 006c10 | 68          |                 pla                  get back first entry in Dictionary
4192:000 | DONE wsp | na 16 16 |        |             |
4193:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
4194:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
4195:000 | DONE ins | na 16 16 | 006c11 | 1a          |                 inc.a                
4196:000 | DONE ins | na 16 16 | 006c12 | 1a          |                 inc.a                
4197:000 | DONE wsp | na 16 16 |        |             |
4198:000 | DONE ins | na 16 16 | 006c13 | ca          |                 dex                  
4199:000 | DONE ins | na 16 16 | 006c14 | ca          |                 dex                  
4200:000 | DONE ins | na 16 16 | 006c15 | 94 00       |                 sty.dx 00            
4201:000 | DONE wsp | na 16 16 |        |             |
4202:000 | DONE ins | na 16 16 | 006c17 | a8          |                 tay                  
4203:000 | DONE ins | na 16 16 | 006c18 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4204:000 | DONE ins | na 16 16 | 006c1b | 48          |                 pha                  
4205:000 | DONE ins | na 16 16 | 006c1c | d0 d5       |                 bne 006bf3           zero entry signals end of Dictionary
4206:000 | DONE wsp | na 16 16 |        |             |
4207:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
4208:000 | DONE ins | na 16 16 | 006c1e | 68          |                 pla                  balance MPU stack, value discarded
4209:000 | DONE wsp | na 16 16 |        |             |
4210:000 | DONE ins | na 16 16 | 006c1f | b4 00       |                 ldy.dx 00            
4211:000 | DONE ins | na 16 16 | 006c21 | e8          |                 inx                  
4212:000 | DONE ins | na 16 16 | 006c22 | e8          |                 inx                  
4213:000 | DONE wsp | na 16 16 |        |             |
4214:000 | DONE lbl | na 16 16 | 006c23 |             | z_words                              
4215:000 | DONE lbl | na 16 16 | 006c23 |             | z_wordsnsizes                        
4215:001 | DONE ins | na 16 16 | 006c23 | 60          |                 rts                  
4216:000 | DONE wsp | na 16 16 |        |             |
4217:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4218:000 | DONE cmt | na 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
4219:000 | DONE cmt | na 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
4220:000 | DONE cmt | na 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
4221:000 | DONE cmt | na 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
4222:000 | DONE lbl | na 16 16 | 006c24 |             | xt_wordsize                          
4223:000 | DONE cmt | na 16 16 |        |             |                 ; We get the beginning address of the code from the word's
4224:000 | DONE cmt | na 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
4225:000 | DONE cmt | na 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
4226:000 | DONE ins | na 16 16 | 006c24 | c8          |                 iny                  
4227:000 | DONE ins | na 16 16 | 006c25 | c8          |                 iny                  
4228:000 | DONE ins | na 16 16 | 006c26 | c8          |                 iny                  
4229:000 | DONE ins | na 16 16 | 006c27 | c8          |                 iny                  nt+4, location of xt
4230:000 | DONE ins | na 16 16 | 006c28 | b9 00 00    |                 lda.y 0000           get xt
4231:000 | DONE ins | na 16 16 | 006c2b | 85 18       |                 sta.d 000218         
4232:000 | DONE wsp | na 16 16 |        |             |
4233:000 | DONE ins | na 16 16 | 006c2d | c8          |                 iny                  
4234:000 | DONE ins | na 16 16 | 006c2e | c8          |                 iny                  nt+6, location of z_word
4235:000 | DONE ins | na 16 16 | 006c2f | b9 00 00    |                 lda.y 0000           
4236:000 | DONE wsp | na 16 16 |        |             |
4237:000 | DONE ins | na 16 16 | 006c32 | 38          |                 sec                  (z_word - xt_word)
4238:000 | DONE ins | na 16 16 | 006c33 | e5 18       |                 sbc.d 000218         
4239:000 | DONE ins | na 16 16 | 006c35 | a8          |                 tay                  
4240:000 | DONE wsp | na 16 16 |        |             |
4241:000 | DONE lbl | na 16 16 | 006c36 |             | z_wordsize                           
4241:001 | DONE ins | na 16 16 | 006c36 | 60          |                 rts                  
4242:000 | DONE wsp | na 16 16 |        |             |
4243:000 | DONE wsp | na 16 16 |        |             |
4244:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4245:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
4246:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
4247:000 | DONE lbl | na 16 16 | 006c37 |             | xt_xor                               
4248:000 | DONE ins | na 16 16 | 006c37 | 98          |                 tya                  
4249:000 | DONE ins | na 16 16 | 006c38 | 55 00       |                 eor.dx 00            
4250:000 | DONE ins | na 16 16 | 006c3a | a8          |                 tay                  
4251:000 | DONE wsp | na 16 16 |        |             |
4252:000 | DONE ins | na 16 16 | 006c3b | e8          |                 inx                  
4253:000 | DONE ins | na 16 16 | 006c3c | e8          |                 inx                  
4254:000 | DONE wsp | na 16 16 |        |             |
4255:000 | DONE lbl | na 16 16 | 006c3d |             | z_xor                                
4255:001 | DONE ins | na 16 16 | 006c3d | 60          |                 rts                  
4256:000 | DONE wsp | na 16 16 |        |             |
4257:000 | DONE wsp | na 16 16 |        |             |
4258:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4259:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
4260:000 | DONE wsp | na 16 16 |        |             |
4261:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
4261:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
4261:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
4261:003 | DONE cmt | na 16 16 |        |             | ; This version: 28. Feb 2017
4261:004 | DONE wsp | na 16 16 |        |             |
4261:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
4261:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
4261:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
4261:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
4261:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
4261:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
4261:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
4261:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
4261:013 | DONE cmt | na 16 16 |        |             | ;
4261:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
4261:015 | DONE cmt | na 16 16 |        |             | ;
4261:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
4261:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
4261:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
4261:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
4261:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
4261:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
4261:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
4261:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
4261:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
4261:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
4261:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
4261:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
4261:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
4261:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
4261:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
4261:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
4261:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
4261:033 | DONE cmt | na 16 16 |        |             | ;
4261:034 | DONE cmt | na 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
4261:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
4261:036 | DONE cmt | na 16 16 |        |             | ;
4261:037 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
4261:038 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
4261:039 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
4261:040 | DONE wsp | na 16 16 |        |             |
4261:041 | DONE cmt | na 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
4261:042 | DONE cmt | na 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
4261:043 | DONE cmt | na 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
4261:044 | DONE cmt | na 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
4261:045 | DONE cmt | na 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
4261:046 | DONE cmt | na 16 16 |        |             | ; involved.
4261:047 | DONE wsp | na 16 16 |        |             |
4261:048 | DONE lbl | na 16 16 | 006c3e |             | nt_bye                               
4261:049 | DONE dir | na 16 16 | 006c3e | (1 bytes)   |         .byte 03                     length of word string
4261:049 | DONE dir | na 16 16 |        |             |                 03                       --  .
4261:050 | DONE dir | na 16 16 | 006c3f | (1 bytes)   |         .byte { NC }                 status byte
4261:050 | DONE dir | na 16 16 |        |             |                 01                       --  .
4261:051 | DONE dir | na 16 16 | 006c40 | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
4261:051 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
4261:052 | DONE dir | na 16 16 | 006c42 | (2 bytes)   |         .word 0064bb                 start of code, the xt of this word
4261:052 | DONE dir | na 16 16 |        |             |                 bb 64                    --  . d
4261:053 | DONE dir | na 16 16 | 006c44 | (2 bytes)   |         .word 0064be                 end of code (points to RTS)
4261:053 | DONE dir | na 16 16 |        |             |                 be 64                    --  . d
4261:054 | DONE dir | na 16 16 | 006c46 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
4261:054 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
4261:055 | DONE wsp | na 16 16 |        |             |
4261:056 | DONE lbl | na 16 16 | 006c49 |             | nt_cold                              
4261:057 | DONE dir | na 16 16 | 006c49 | (2 bytes)   |         .byte 4, 00                  
4261:057 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4261:058 | DONE dir | na 16 16 | 006c4b | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
4261:058 | DONE dir | na 16 16 |        |             |                 3e 6c 63 60 de 60        --  > l c ` . `
4261:059 | DONE dir | na 16 16 | 006c51 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
4261:059 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
4261:060 | DONE wsp | na 16 16 |        |             |
4261:061 | DONE lbl | na 16 16 | 006c55 |             | nt_wordsnsizes                       
4261:062 | DONE dir | na 16 16 | 006c55 | (2 bytes)   |         .byte 0b, { NC }             
4261:062 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
4261:063 | DONE dir | na 16 16 | 006c57 | (6 bytes)   |         .word nt_cold, xt_wordsnsizes, 006c23 
4261:063 | DONE dir | na 16 16 |        |             |                 49 6c e0 6b 23 6c        --  I l . k # l
4261:064 | DONE dir | na 16 16 | 006c5d | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
4261:064 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
4261:064 | DONE dir | na 16 16 |        |             |                 7a 65 73                 --  z e s
4261:065 | DONE wsp | na 16 16 |        |             |
4261:066 | DONE lbl | na 16 16 | 006c68 |             | nt_words                             
4261:067 | DONE dir | na 16 16 | 006c68 | (2 bytes)   |         .byte 5, { NC }              
4261:067 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:068 | DONE dir | na 16 16 | 006c6a | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 006c23 
4261:068 | DONE dir | na 16 16 |        |             |                 55 6c e7 6b 23 6c        --  U l . k # l
4261:069 | DONE dir | na 16 16 | 006c70 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
4261:069 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
4261:070 | DONE wsp | na 16 16 |        |             |
4261:071 | DONE lbl | na 16 16 | 006c75 |             | nt_dump                              
4261:072 | DONE dir | na 16 16 | 006c75 | (2 bytes)   |         .byte 4, { NC }              
4261:072 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:073 | DONE dir | na 16 16 | 006c77 | (6 bytes)   |         .word nt_words, xt_dump, 006699 
4261:073 | DONE dir | na 16 16 |        |             |                 68 6c 73 66 99 66        --  h l s f . f
4261:074 | DONE dir | na 16 16 | 006c7d | (4 bytes)   |         .byte 64, 75, 6d, 70         
4261:074 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
4261:075 | DONE wsp | na 16 16 |        |             |
4261:076 | DONE lbl | na 16 16 | 006c81 |             | nt_wordsize                          
4261:077 | DONE dir | na 16 16 | 006c81 | (2 bytes)   |         .byte 8, { NC }              
4261:077 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4261:078 | DONE dir | na 16 16 | 006c83 | (6 bytes)   |         .word nt_dump, xt_wordsize, 006c36 
4261:078 | DONE dir | na 16 16 |        |             |                 75 6c 24 6c 36 6c        --  u l $ l 6 l
4261:079 | DONE dir | na 16 16 | 006c89 | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
4261:079 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
4261:079 | DONE dir | na 16 16 |        |             |                                          -- 
4261:080 | DONE wsp | na 16 16 |        |             |
4261:081 | DONE lbl | na 16 16 | 006c91 |             | nt_bell                              
4261:082 | DONE dir | na 16 16 | 006c91 | (2 bytes)   |         .byte 4, { NC }              
4261:082 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:083 | DONE dir | na 16 16 | 006c93 | (6 bytes)   |         .word nt_wordsize, xt_bell, 00648d 
4261:083 | DONE dir | na 16 16 |        |             |                 81 6c 87 64 8d 64        --  . l . d . d
4261:084 | DONE dir | na 16 16 | 006c99 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
4261:084 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
4261:085 | DONE wsp | na 16 16 |        |             |
4261:086 | DONE lbl | na 16 16 | 006c9d |             | nt_chars                             
4261:087 | DONE dir | na 16 16 | 006c9d | (2 bytes)   |         .byte 5, { NC }              
4261:087 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:088 | DONE dir | na 16 16 | 006c9f | (6 bytes)   |         .word nt_bell, xt_chars, 006505 
4261:088 | DONE dir | na 16 16 |        |             |                 91 6c 04 65 05 65        --  . l . e . e
4261:089 | DONE dir | na 16 16 | 006ca5 | (5 bytes)   |         .byte 63, 68, 61, 72, 73     
4261:089 | DONE dir | na 16 16 |        |             |                 63 68 61 72 73           --  c h a r s
4261:090 | DONE wsp | na 16 16 |        |             |
4261:091 | DONE lbl | na 16 16 | 006caa |             | nt_cellplus                          
4261:092 | DONE dir | na 16 16 | 006caa | (2 bytes)   |         .byte 5, { NC }              
4261:092 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:093 | DONE dir | na 16 16 | 006cac | (6 bytes)   |         .word nt_chars, xt_cellplus, 0064eb 
4261:093 | DONE dir | na 16 16 |        |             |                 9d 6c e9 64 eb 64        --  . l . d . d
4261:094 | DONE dir | na 16 16 | 006cb2 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 2b     
4261:094 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 2b           --  c e l l +
4261:095 | DONE wsp | na 16 16 |        |             |
4261:096 | DONE lbl | na 16 16 | 006cb7 |             | nt_charplus                          
4261:097 | DONE dir | na 16 16 | 006cb7 | (2 bytes)   |         .byte 5, { NC }              uses code of 1+
4261:097 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:098 | DONE dir | na 16 16 | 006cb9 | (6 bytes)   |         .word nt_cellplus, xt_one-plus, 006354 
4261:098 | DONE dir | na 16 16 |        |             |                 aa 6c 53 63 54 63        --  . l S c T c
4261:099 | DONE dir | na 16 16 | 006cbf | (5 bytes)   |         .byte 63, 68, 61, 72, 2b     
4261:099 | DONE dir | na 16 16 |        |             |                 63 68 61 72 2b           --  c h a r +
4261:100 | DONE wsp | na 16 16 |        |             |
4261:101 | DONE lbl | na 16 16 | 006cc4 |             | nt_decimal                           
4261:102 | DONE dir | na 16 16 | 006cc4 | (2 bytes)   |         .byte 7, { NC }              
4261:102 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4261:103 | DONE dir | na 16 16 | 006cc6 | (6 bytes)   |         .word nt_charplus, xt_decimal, 006627 
4261:103 | DONE dir | na 16 16 |        |             |                 b7 6c 22 66 27 66        --  . l " f ' f
4261:104 | DONE dir | na 16 16 | 006ccc | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
4261:104 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
4261:105 | DONE wsp | na 16 16 |        |             |
4261:106 | DONE lbl | na 16 16 | 006cd3 |             | nt_hex                               
4261:107 | DONE dir | na 16 16 | 006cd3 | (2 bytes)   |         .byte 3, { NC }              
4261:107 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:108 | DONE dir | na 16 16 | 006cd5 | (6 bytes)   |         .word nt_decimal, xt_hex, 00674e 
4261:108 | DONE dir | na 16 16 |        |             |                 c4 6c 49 67 4e 67        --  . l I g N g
4261:109 | DONE dir | na 16 16 | 006cdb | (3 bytes)   |         .byte 68, 65, 78             
4261:109 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
4261:110 | DONE wsp | na 16 16 |        |             |
4261:111 | DONE lbl | na 16 16 | 006cde |             | nt_unused                            
4261:112 | DONE dir | na 16 16 | 006cde | (2 bytes)   |         .byte 6, { NC }              
4261:112 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:113 | DONE dir | na 16 16 | 006ce0 | (6 bytes)   |         .word nt_hex, xt_unused, 006bd2 
4261:113 | DONE dir | na 16 16 |        |             |                 d3 6c c7 6b d2 6b        --  . l . k . k
4261:114 | DONE dir | na 16 16 | 006ce6 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
4261:114 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
4261:115 | DONE wsp | na 16 16 |        |             |
4261:116 | DONE lbl | na 16 16 | 006cec |             | nt_page                              
4261:117 | DONE dir | na 16 16 | 006cec | (2 bytes)   |         .byte 4, { NC }              
4261:117 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:118 | DONE dir | na 16 16 | 006cee | (6 bytes)   |         .word nt_unused, xt_page, 0068a8 
4261:118 | DONE dir | na 16 16 |        |             |                 de 6c 9c 68 a8 68        --  . l . h . h
4261:119 | DONE dir | na 16 16 | 006cf4 | (4 bytes)   |         .byte 70, 61, 67, 65         
4261:119 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
4261:120 | DONE wsp | na 16 16 |        |             |
4261:121 | DONE lbl | na 16 16 | 006cf8 |             | nt_dabs                              
4261:122 | DONE dir | na 16 16 | 006cf8 | (2 bytes)   |         .byte 4, { NC }              
4261:122 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:123 | DONE dir | na 16 16 | 006cfa | (6 bytes)   |         .word nt_page, xt_dabs, 006621 
4261:123 | DONE dir | na 16 16 |        |             |                 ec 6c 1b 66 21 66        --  . l . f ! f
4261:124 | DONE dir | na 16 16 | 006d00 | (4 bytes)   |         .byte 64, 61, 62, 73         
4261:124 | DONE dir | na 16 16 |        |             |                 64 61 62 73              --  d a b s
4261:125 | DONE wsp | na 16 16 |        |             |
4261:126 | DONE lbl | na 16 16 | 006d04 |             | nt_dnegate                           
4261:127 | DONE dir | na 16 16 | 006d04 | (2 bytes)   |         .byte 7, { NC }              
4261:127 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4261:128 | DONE dir | na 16 16 | 006d06 | (6 bytes)   |         .word nt_dabs, xt_dnegate, 00664a 
4261:128 | DONE dir | na 16 16 |        |             |                 f8 6c 37 66 4a 66        --  . l 7 f J f
4261:129 | DONE dir | na 16 16 | 006d0c | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
4261:129 | DONE dir | na 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
4261:130 | DONE wsp | na 16 16 |        |             |
4261:131 | DONE lbl | na 16 16 | 006d13 |             | nt_dtos                              
4261:132 | DONE dir | na 16 16 | 006d13 | (2 bytes)   |         .byte 3, { NC }              
4261:132 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:133 | DONE dir | na 16 16 | 006d15 | (6 bytes)   |         .word nt_dnegate, xt_dtos, 00661a 
4261:133 | DONE dir | na 16 16 |        |             |                 04 6d 16 66 1a 66        --  . m . f . f
4261:134 | DONE dir | na 16 16 | 006d1b | (3 bytes)   |         .byte 64, 3e, 73             
4261:134 | DONE dir | na 16 16 |        |             |                 64 3e 73                 --  d > s
4261:135 | DONE wsp | na 16 16 |        |             |
4261:136 | DONE lbl | na 16 16 | 006d1e |             | nt_stod                              
4261:137 | DONE dir | na 16 16 | 006d1e | (2 bytes)   |         .byte 3, { NC }              
4261:137 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:138 | DONE dir | na 16 16 | 006d20 | (6 bytes)   |         .word nt_dtos, xt_stod, 0069c2 
4261:138 | DONE dir | na 16 16 |        |             |                 13 6d b3 69 c2 69        --  . m . i . i
4261:139 | DONE dir | na 16 16 | 006d26 | (3 bytes)   |         .byte 73, 3e, 64             
4261:139 | DONE dir | na 16 16 |        |             |                 73 3e 64                 --  s > d
4261:140 | DONE wsp | na 16 16 |        |             |
4261:141 | DONE lbl | na 16 16 | 006d29 |             | nt_dplus                             
4261:142 | DONE dir | na 16 16 | 006d29 | (2 bytes)   |         .byte 2, { NC }              
4261:142 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:143 | DONE dir | na 16 16 | 006d2b | (6 bytes)   |         .word nt_stod, xt_dplus, 006615 
4261:143 | DONE dir | na 16 16 |        |             |                 1e 6d 04 66 15 66        --  . m . f . f
4261:144 | DONE dir | na 16 16 | 006d31 | (2 bytes)   |         .byte 64, 2b                 
4261:144 | DONE dir | na 16 16 |        |             |                 64 2b                    --  d +
4261:145 | DONE wsp | na 16 16 |        |             |
4261:146 | DONE lbl | na 16 16 | 006d33 |             | nt_smrem                             
4261:147 | DONE dir | na 16 16 | 006d33 | (2 bytes)   |         .byte 6, { NC }              
4261:147 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:148 | DONE dir | na 16 16 | 006d35 | (6 bytes)   |         .word nt_dplus, xt_smrem, 006a8b 
4261:148 | DONE dir | na 16 16 |        |             |                 29 6d 32 6a 8b 6a        --  ) m 2 j . j
4261:149 | DONE dir | na 16 16 | 006d3b | (6 bytes)   |         .byte 73, 6d, 2f, 72, 65, 6d 
4261:149 | DONE dir | na 16 16 |        |             |                 73 6d 2f 72 65 6d        --  s m / r e m
4261:150 | DONE wsp | na 16 16 |        |             |
4261:151 | DONE lbl | na 16 16 | 006d41 |             | nt_udmod                             
4261:152 | DONE dir | na 16 16 | 006d41 | (2 bytes)   |         .byte 6, { NC }              
4261:152 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:153 | DONE dir | na 16 16 | 006d43 | (6 bytes)   |         .word nt_smrem, xt_udmod, 006b17 
4261:153 | DONE dir | na 16 16 |        |             |                 33 6d fc 6a 17 6b        --  3 m . j . k
4261:154 | DONE dir | na 16 16 | 006d49 | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
4261:154 | DONE dir | na 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
4261:155 | DONE wsp | na 16 16 |        |             |
4261:156 | DONE lbl | na 16 16 | 006d4f |             | nt_ummod                             
4261:157 | DONE dir | na 16 16 | 006d4f | (2 bytes)   |         .byte 6, { NC }              
4261:157 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:158 | DONE dir | na 16 16 | 006d51 | (6 bytes)   |         .word nt_udmod, xt_ummod, 006bc6 
4261:158 | DONE dir | na 16 16 |        |             |                 41 6d 76 6b c6 6b        --  A m v k . k
4261:159 | DONE dir | na 16 16 | 006d57 | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
4261:159 | DONE dir | na 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
4261:160 | DONE wsp | na 16 16 |        |             |
4261:161 | DONE lbl | na 16 16 | 006d5d |             | nt_star                              
4261:162 | DONE dir | na 16 16 | 006d5d | (2 bytes)   |         .byte 1, { NC }              
4261:162 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:163 | DONE dir | na 16 16 | 006d5f | (6 bytes)   |         .word nt_ummod, xt_star, 006abb 
4261:163 | DONE dir | na 16 16 |        |             |                 4f 6d b4 6a bb 6a        --  O m . j . j
4261:164 | DONE dir | na 16 16 | 006d65 | (1 bytes)   |         .byte 2a                     
4261:164 | DONE dir | na 16 16 |        |             |                 2a                       --  *
4261:165 | DONE wsp | na 16 16 |        |             |
4261:166 | DONE lbl | na 16 16 | 006d66 |             | nt_mstar                             
4261:167 | DONE dir | na 16 16 | 006d66 | (2 bytes)   |         .byte 2, { NC }              
4261:167 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:168 | DONE dir | na 16 16 | 006d68 | (6 bytes)   |         .word nt_star, xt_mstar, 0067b3 
4261:168 | DONE dir | na 16 16 |        |             |                 5d 6d 94 67 b3 67        --  ] m . g . g
4261:169 | DONE dir | na 16 16 | 006d6e | (2 bytes)   |         .byte 6d, 2a                 
4261:169 | DONE dir | na 16 16 |        |             |                 6d 2a                    --  m *
4261:170 | DONE wsp | na 16 16 |        |             |
4261:171 | DONE lbl | na 16 16 | 006d70 |             | nt_umstar                            
4261:172 | DONE dir | na 16 16 | 006d70 | (2 bytes)   |         .byte 3, { NC }              
4261:172 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:173 | DONE dir | na 16 16 | 006d72 | (6 bytes)   |         .word nt_mstar, xt_umstar, 006b75 
4261:173 | DONE dir | na 16 16 |        |             |                 66 6d 17 6b 75 6b        --  f m . k u k
4261:174 | DONE dir | na 16 16 | 006d78 | (3 bytes)   |         .byte 75, 6d, 2a             
4261:174 | DONE dir | na 16 16 |        |             |                 75 6d 2a                 --  u m *
4261:175 | DONE wsp | na 16 16 |        |             |
4261:176 | DONE lbl | na 16 16 | 006d7b |             | nt_count                             
4261:177 | DONE dir | na 16 16 | 006d7b | (2 bytes)   |         .byte 5, { NC }              
4261:177 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:178 | DONE dir | na 16 16 | 006d7d | (6 bytes)   |         .word nt_umstar, xt_count, 00654d 
4261:178 | DONE dir | na 16 16 |        |             |                 70 6d 3f 65 4d 65        --  p m ? e M e
4261:179 | DONE dir | na 16 16 | 006d83 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
4261:179 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
4261:180 | DONE wsp | na 16 16 |        |             |
4261:181 | DONE lbl | na 16 16 | 006d88 |             | nt_abortq                            
4261:182 | DONE dir | na 16 16 | 006d88 | (2 bytes)   |         .byte 6, { CO + IM }         
4261:182 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4261:183 | DONE dir | na 16 16 | 006d8a | (6 bytes)   |         .word nt_count, xt_abortq, 0063ab 
4261:183 | DONE dir | na 16 16 |        |             |                 7b 6d 8f 63 ab 63        --  { m . c . c
4261:184 | DONE dir | na 16 16 | 006d90 | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
4261:184 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
4261:185 | DONE wsp | na 16 16 |        |             |
4261:186 | DONE lbl | na 16 16 | 006d96 |             | nt_abort                             
4261:187 | DONE dir | na 16 16 | 006d96 | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
4261:187 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
4261:188 | DONE dir | na 16 16 | 006d98 | (6 bytes)   |         .word nt_abortq, xt_abort, 0060de 
4261:188 | DONE dir | na 16 16 |        |             |                 88 6d 97 60 de 60        --  . m . ` . `
4261:189 | DONE dir | na 16 16 | 006d9e | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
4261:189 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
4261:190 | DONE wsp | na 16 16 |        |             |
4261:191 | DONE lbl | na 16 16 | 006da3 |             | nt_parse                             
4261:192 | DONE dir | na 16 16 | 006da3 | (2 bytes)   |         .byte 5, 00                  
4261:192 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
4261:193 | DONE dir | na 16 16 | 006da5 | (6 bytes)   |         .word nt_abort, xt_parse, 00690d 
4261:193 | DONE dir | na 16 16 |        |             |                 96 6d db 68 0d 69        --  . m . h  i
4261:194 | DONE dir | na 16 16 | 006dab | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
4261:194 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
4261:195 | DONE wsp | na 16 16 |        |             |
4261:196 | DONE lbl | na 16 16 | 006db0 |             | nt_quit                              
4261:197 | DONE dir | na 16 16 | 006db0 | (2 bytes)   |         .byte 4, 00                  
4261:197 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4261:198 | DONE dir | na 16 16 | 006db2 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
4261:198 | DONE dir | na 16 16 |        |             |                 a3 6d 9f 60 de 60        --  . m . ` . `
4261:199 | DONE dir | na 16 16 | 006db8 | (4 bytes)   |         .byte 71, 75, 69, 74         
4261:199 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
4261:200 | DONE wsp | na 16 16 |        |             |
4261:201 | DONE lbl | na 16 16 | 006dbc |             | nt_question                          
4261:202 | DONE dir | na 16 16 | 006dbc | (2 bytes)   |         .byte 1, { NC }              
4261:202 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:203 | DONE dir | na 16 16 | 006dbe | (6 bytes)   |         .word nt_quit, xt_question, 006297 
4261:203 | DONE dir | na 16 16 |        |             |                 b0 6d 91 62 97 62        --  . m . b . b
4261:204 | DONE dir | na 16 16 | 006dc4 | (1 bytes)   |         .byte 3f                     
4261:204 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
4261:205 | DONE wsp | na 16 16 |        |             |
4261:206 | DONE lbl | na 16 16 | 006dc5 |             | nt_name-int                          
4261:207 | DONE dir | na 16 16 | 006dc5 | (2 bytes)   |         .byte 8, { NC }              
4261:207 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4261:208 | DONE dir | na 16 16 | 006dc7 | (6 bytes)   |         .word nt_question, xt_name-int, 0067e2 
4261:208 | DONE dir | na 16 16 |        |             |                 bc 6d da 67 e2 67        --  . m . g . g
4261:209 | DONE dir | na 16 16 | 006dcd | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
4261:209 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
4261:209 | DONE dir | na 16 16 |        |             |                                          -- 
4261:210 | DONE wsp | na 16 16 |        |             |
4261:211 | DONE lbl | na 16 16 | 006dd5 |             | nt_cr                                
4261:212 | DONE dir | na 16 16 | 006dd5 | (2 bytes)   |         .byte 2, { NC }              
4261:212 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:213 | DONE dir | na 16 16 | 006dd7 | (6 bytes)   |         .word nt_name-int, xt_cr, 006554 
4261:213 | DONE dir | na 16 16 |        |             |                 c5 6d 4e 65 54 65        --  . m N e T e
4261:214 | DONE dir | na 16 16 | 006ddd | (2 bytes)   |         .byte 63, 72                 
4261:214 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
4261:215 | DONE wsp | na 16 16 |        |             |
4261:216 | DONE lbl | na 16 16 | 006ddf |             | nt_numbermore                        
4261:217 | DONE dir | na 16 16 | 006ddf | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
4261:217 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:218 | DONE dir | na 16 16 | 006de1 | (6 bytes)   |         .word nt_cr, xt_numbermore, 006287 
4261:218 | DONE dir | na 16 16 |        |             |                 d5 6d 79 62 87 62        --  . m y b . b
4261:219 | DONE dir | na 16 16 | 006de7 | (2 bytes)   |         .byte 23, 3e                 
4261:219 | DONE dir | na 16 16 |        |             |                 23 3e                    --  # >
4261:220 | DONE wsp | na 16 16 |        |             |
4261:221 | DONE lbl | na 16 16 | 006de9 |             | nt_hold                              
4261:222 | DONE dir | na 16 16 | 006de9 | (2 bytes)   |         .byte 4, { NC }              
4261:222 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:223 | DONE dir | na 16 16 | 006deb | (6 bytes)   |         .word nt_numbermore, xt_hold, 00675c 
4261:223 | DONE dir | na 16 16 |        |             |                 df 6d 4f 67 5c 67        --  . m O g \ g
4261:224 | DONE dir | na 16 16 | 006df1 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
4261:224 | DONE dir | na 16 16 |        |             |                 68 6f 6c 64              --  h o l d
4261:225 | DONE wsp | na 16 16 |        |             |
4261:226 | DONE lbl | na 16 16 | 006df5 |             | nt_hashs                             
4261:227 | DONE dir | na 16 16 | 006df5 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
4261:227 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:228 | DONE dir | na 16 16 | 006df7 | (6 bytes)   |         .word nt_hold, xt_hashs, 006290 
4261:228 | DONE dir | na 16 16 |        |             |                 e9 6d 88 62 90 62        --  . m . b . b
4261:229 | DONE dir | na 16 16 | 006dfd | (2 bytes)   |         .byte 23, 73                 
4261:229 | DONE dir | na 16 16 |        |             |                 23 73                    --  # s
4261:230 | DONE wsp | na 16 16 |        |             |
4261:231 | DONE lbl | na 16 16 | 006dff |             | nt_sign                              
4261:232 | DONE dir | na 16 16 | 006dff | (2 bytes)   |         .byte 4, { NC }              
4261:232 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:233 | DONE dir | na 16 16 | 006e01 | (6 bytes)   |         .word nt_hashs, xt_sign, 0069d0 
4261:233 | DONE dir | na 16 16 |        |             |                 f5 6d c3 69 d0 69        --  . m . i . i
4261:234 | DONE dir | na 16 16 | 006e07 | (4 bytes)   |         .byte 73, 69, 67, 6e         
4261:234 | DONE dir | na 16 16 |        |             |                 73 69 67 6e              --  s i g n
4261:235 | DONE wsp | na 16 16 |        |             |
4261:236 | DONE lbl | na 16 16 | 006e0b |             | nt_hash                              
4261:237 | DONE dir | na 16 16 | 006e0b | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
4261:237 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:238 | DONE dir | na 16 16 | 006e0d | (6 bytes)   |         .word nt_sign, xt_hash, 006278 
4261:238 | DONE dir | na 16 16 |        |             |                 ff 6d 5e 62 78 62        --  . m ^ b x b
4261:239 | DONE dir | na 16 16 | 006e13 | (1 bytes)   |         .byte 23                     
4261:239 | DONE dir | na 16 16 |        |             |                 23                       --  #
4261:240 | DONE wsp | na 16 16 |        |             |
4261:241 | DONE lbl | na 16 16 | 006e14 |             | nt_lessnumber                        
4261:242 | DONE dir | na 16 16 | 006e14 | (2 bytes)   |         .byte 2, { NC }              
4261:242 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:243 | DONE dir | na 16 16 | 006e16 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 006108 
4261:243 | DONE dir | na 16 16 |        |             |                 0b 6e ff 60 08 61        --   n . ` . a
4261:244 | DONE dir | na 16 16 | 006e1c | (2 bytes)   |         .byte 3c, 23                 
4261:244 | DONE dir | na 16 16 |        |             |                 3c 23                    --  < #
4261:245 | DONE wsp | na 16 16 |        |             |
4261:246 | DONE lbl | na 16 16 | 006e1e |             | nt_bl                                
4261:247 | DONE dir | na 16 16 | 006e1e | (2 bytes)   |         .byte 2, { NC }              
4261:247 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:248 | DONE dir | na 16 16 | 006e20 | (6 bytes)   |         .word nt_lessnumber, xt_bl, 00649c 
4261:248 | DONE dir | na 16 16 |        |             |                 14 6e 95 64 9c 64        --  . n . d . d
4261:249 | DONE dir | na 16 16 | 006e26 | (2 bytes)   |         .byte 62, 6c                 
4261:249 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
4261:250 | DONE wsp | na 16 16 |        |             |
4261:251 | DONE lbl | na 16 16 | 006e28 |             | nt_spaces                            
4261:252 | DONE dir | na 16 16 | 006e28 | (2 bytes)   |         .byte 6, { NC }              
4261:252 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:253 | DONE dir | na 16 16 | 006e2a | (6 bytes)   |         .word nt_bl, xt_spaces, 006ab3 
4261:253 | DONE dir | na 16 16 |        |             |                 1e 6e a7 6a b3 6a        --  . n . j . j
4261:254 | DONE dir | na 16 16 | 006e30 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
4261:254 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
4261:255 | DONE wsp | na 16 16 |        |             |
4261:256 | DONE lbl | na 16 16 | 006e36 |             | nt_space                             
4261:257 | DONE dir | na 16 16 | 006e36 | (2 bytes)   |         .byte 5, { NC }              
4261:257 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:258 | DONE dir | na 16 16 | 006e38 | (6 bytes)   |         .word nt_spaces, xt_space, 006aa6 
4261:258 | DONE dir | na 16 16 |        |             |                 28 6e a0 6a a6 6a        --  ( n . j . j
4261:259 | DONE dir | na 16 16 | 006e3e | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
4261:259 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
4261:260 | DONE wsp | na 16 16 |        |             |
4261:261 | DONE lbl | na 16 16 | 006e43 |             | nt_dots                              
4261:262 | DONE dir | na 16 16 | 006e43 | (2 bytes)   |         .byte 2, { NC }              
4261:262 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:263 | DONE dir | na 16 16 | 006e45 | (6 bytes)   |         .word nt_space, xt_dots, 006216 
4261:263 | DONE dir | na 16 16 |        |             |                 36 6e cf 61 16 62        --  6 n . a . b
4261:264 | DONE dir | na 16 16 | 006e4b | (2 bytes)   |         .byte 2e, 73                 
4261:264 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
4261:265 | DONE wsp | na 16 16 |        |             |
4261:266 | DONE lbl | na 16 16 | 006e4d |             | nt_type                              
4261:267 | DONE dir | na 16 16 | 006e4d | (2 bytes)   |         .byte 4, 0                   
4261:267 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4261:268 | DONE dir | na 16 16 | 006e4f | (6 bytes)   |         .word nt_dots, xt_type, 006afb 
4261:268 | DONE dir | na 16 16 |        |             |                 43 6e db 6a fb 6a        --  C n . j . j
4261:269 | DONE dir | na 16 16 | 006e55 | (4 bytes)   |         .byte 74, 79, 70, 65         
4261:269 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
4261:270 | DONE wsp | na 16 16 |        |             |
4261:271 | DONE lbl | na 16 16 | 006e59 |             | nt_dot                               
4261:272 | DONE dir | na 16 16 | 006e59 | (2 bytes)   |         .byte 1, { NC }              
4261:272 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:273 | DONE dir | na 16 16 | 006e5b | (6 bytes)   |         .word nt_type, xt_dot, 0061ac 
4261:273 | DONE dir | na 16 16 |        |             |                 4d 6e 8e 61 ac 61        --  M n . a . a
4261:274 | DONE dir | na 16 16 | 006e61 | (1 bytes)   |         .byte 2e                     
4261:274 | DONE dir | na 16 16 |        |             |                 2e                       --  .
4261:275 | DONE wsp | na 16 16 |        |             |
4261:276 | DONE lbl | na 16 16 | 006e62 |             | nt_pad                               
4261:277 | DONE dir | na 16 16 | 006e62 | (2 bytes)   |         .byte 3, { NC }              
4261:277 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:278 | DONE dir | na 16 16 | 006e64 | (6 bytes)   |         .word nt_dot, xt_pad, 00689b 
4261:278 | DONE dir | na 16 16 |        |             |                 59 6e 90 68 9b 68        --  Y n . h . h
4261:279 | DONE dir | na 16 16 | 006e6a | (3 bytes)   |         .byte 70, 61, 64             
4261:279 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
4261:280 | DONE wsp | na 16 16 |        |             |
4261:281 | DONE lbl | na 16 16 | 006e6d |             | nt_base                              
4261:282 | DONE dir | na 16 16 | 006e6d | (2 bytes)   |         .byte 4, { NC }              
4261:282 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:283 | DONE dir | na 16 16 | 006e6f | (6 bytes)   |         .word nt_pad, xt_base, 006486 
4261:283 | DONE dir | na 16 16 |        |             |                 62 6e 7f 64 86 64        --  b n . d . d
4261:284 | DONE dir | na 16 16 | 006e75 | (4 bytes)   |         .byte 62, 61, 73, 65         
4261:284 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
4261:285 | DONE wsp | na 16 16 |        |             |
4261:286 | DONE lbl | na 16 16 | 006e79 |             | nt_evaluate                          
4261:287 | DONE dir | na 16 16 | 006e79 | (2 bytes)   |         .byte 8, { NC }              
4261:287 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4261:288 | DONE dir | na 16 16 | 006e7b | (6 bytes)   |         .word nt_base, xt_evaluate, 0066cd 
4261:288 | DONE dir | na 16 16 |        |             |                 6d 6e 9f 66 cd 66        --  m n . f . f
4261:289 | DONE dir | na 16 16 | 006e81 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
4261:289 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
4261:289 | DONE dir | na 16 16 |        |             |                                          -- 
4261:290 | DONE wsp | na 16 16 |        |             |
4261:291 | DONE lbl | na 16 16 | 006e89 |             | nt_cells                             
4261:292 | DONE dir | na 16 16 | 006e89 | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
4261:292 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:293 | DONE dir | na 16 16 | 006e8b | (6 bytes)   |         .word nt_evaluate, xt_two-star, 006360 
4261:293 | DONE dir | na 16 16 |        |             |                 79 6e 5d 63 60 63        --  y n ] c ` c
4261:294 | DONE dir | na 16 16 | 006e91 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
4261:294 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
4261:295 | DONE wsp | na 16 16 |        |             |
4261:296 | DONE lbl | na 16 16 | 006e96 |             | nt_dotquote                          
4261:297 | DONE dir | na 16 16 | 006e96 | (2 bytes)   |         .byte 2, { CO + NC + IM }    
4261:297 | DONE dir | na 16 16 |        |             |                 02 07                    --  . .
4261:298 | DONE dir | na 16 16 | 006e98 | (6 bytes)   |         .word nt_cells, xt_dotquote, 0061cf 
4261:298 | DONE dir | na 16 16 |        |             |                 89 6e bb 61 cf 61        --  . n . a . a
4261:299 | DONE dir | na 16 16 | 006e9e | (2 bytes)   |         .byte 2e, &34                
4261:299 | DONE dir | na 16 16 |        |             |                 2e 22                    --  . "
4261:300 | DONE wsp | na 16 16 |        |             |
4261:301 | DONE lbl | na 16 16 | 006ea0 |             | nt_squote                            
4261:302 | DONE dir | na 16 16 | 006ea0 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
4261:302 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
4261:303 | DONE dir | na 16 16 | 006ea2 | (6 bytes)   |         .word nt_dotquote, xt_squote, 0069b2 
4261:303 | DONE dir | na 16 16 |        |             |                 96 6e a1 69 b2 69        --  . n . i . i
4261:304 | DONE dir | na 16 16 | 006ea8 | (2 bytes)   |         .byte 73, &34                
4261:304 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
4261:305 | DONE wsp | na 16 16 |        |             |
4261:306 | DONE lbl | na 16 16 | 006eaa |             | nt_sliteral                          
4261:307 | DONE dir | na 16 16 | 006eaa | (2 bytes)   |         .byte 8, { IM + CO }         
4261:307 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
4261:308 | DONE dir | na 16 16 | 006eac | (6 bytes)   |         .word nt_squote, xt_sliteral, 006a1b 
4261:308 | DONE dir | na 16 16 |        |             |                 a0 6e d1 69 1b 6a        --  . n . i . j
4261:309 | DONE dir | na 16 16 | 006eb2 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
4261:309 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
4261:309 | DONE dir | na 16 16 |        |             |                                          -- 
4261:310 | DONE wsp | na 16 16 |        |             |
4261:311 | DONE lbl | na 16 16 | 006eba |             | nt_brackettick                       
4261:312 | DONE dir | na 16 16 | 006eba | (2 bytes)   |         .byte 3, { IM + CO }         
4261:312 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
4261:313 | DONE dir | na 16 16 | 006ebc | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 0062b7 
4261:313 | DONE dir | na 16 16 |        |             |                 aa 6e b1 62 b7 62        --  . n . b . b
4261:314 | DONE dir | na 16 16 | 006ec2 | (3 bytes)   |         .byte 5b, 27, 5d             
4261:314 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
4261:315 | DONE wsp | na 16 16 |        |             |
4261:316 | DONE lbl | na 16 16 | 006ec5 |             | nt_bracketchar                       
4261:317 | DONE dir | na 16 16 | 006ec5 | (2 bytes)   |         .byte 6, { IM + CO }         
4261:317 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4261:318 | DONE dir | na 16 16 | 006ec7 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 0062c6 
4261:318 | DONE dir | na 16 16 |        |             |                 ba 6e c0 62 c6 62        --  . n . b . b
4261:319 | DONE dir | na 16 16 | 006ecd | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
4261:319 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
4261:320 | DONE wsp | na 16 16 |        |             |
4261:321 | DONE lbl | na 16 16 | 006ed3 |             | nt_literal                           
4261:322 | DONE dir | na 16 16 | 006ed3 | (2 bytes)   |         .byte 7, { IM + CO }         
4261:322 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
4261:323 | DONE dir | na 16 16 | 006ed5 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 006786 
4261:323 | DONE dir | na 16 16 |        |             |                 c5 6e 75 67 86 67        --  . n u g . g
4261:324 | DONE dir | na 16 16 | 006edb | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
4261:324 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
4261:325 | DONE wsp | na 16 16 |        |             |
4261:326 | DONE lbl | na 16 16 | 006ee2 |             | nt_compile-only                      
4261:327 | DONE dir | na 16 16 | 006ee2 | (2 bytes)   |         .byte 0c, { NC }             
4261:327 | DONE dir | na 16 16 |        |             |                 0c 01                    --   .
4261:328 | DONE dir | na 16 16 | 006ee4 | (6 bytes)   |         .word nt_literal, xt_compile-only, 00650e 
4261:328 | DONE dir | na 16 16 |        |             |                 d3 6e 06 65 0e 65        --  . n . e . e
4261:329 | DONE dir | na 16 16 | 006eea | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
4261:329 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
4261:329 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
4261:330 | DONE wsp | na 16 16 |        |             |
4261:331 | DONE lbl | na 16 16 | 006ef6 |             | nt_immediate                         
4261:332 | DONE dir | na 16 16 | 006ef6 | (2 bytes)   |         .byte 9, { NC }              
4261:332 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4261:333 | DONE dir | na 16 16 | 006ef8 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 00673b 
4261:333 | DONE dir | na 16 16 |        |             |                 e2 6e 33 67 3b 67        --  . n 3 g ; g
4261:334 | DONE dir | na 16 16 | 006efe | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
4261:334 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
4261:334 | DONE dir | na 16 16 |        |             |                 65                       --  e
4261:335 | DONE wsp | na 16 16 |        |             |
4261:336 | DONE lbl | na 16 16 | 006f07 |             | nt_postpone                          
4261:337 | DONE dir | na 16 16 | 006f07 | (2 bytes)   |         .byte 8, { IM + CO }         
4261:337 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
4261:338 | DONE dir | na 16 16 | 006f09 | (6 bytes)   |         .word nt_immediate, xt_postpone, 006953 
4261:338 | DONE dir | na 16 16 |        |             |                 f6 6e 1e 69 53 69        --  . n . i S i
4261:339 | DONE dir | na 16 16 | 006f0f | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
4261:339 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4261:339 | DONE dir | na 16 16 |        |             |                                          -- 
4261:340 | DONE wsp | na 16 16 |        |             |
4261:341 | DONE lbl | na 16 16 | 006f17 |             | nt_rightbracket                      
4261:342 | DONE dir | na 16 16 | 006f17 | (2 bytes)   |         .byte 1, { NC }              
4261:342 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:343 | DONE dir | na 16 16 | 006f19 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 0062bf 
4261:343 | DONE dir | na 16 16 |        |             |                 07 6f ba 62 bf 62        --  . o . b . b
4261:344 | DONE dir | na 16 16 | 006f1f | (1 bytes)   |         .byte 5d                     
4261:344 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
4261:345 | DONE wsp | na 16 16 |        |             |
4261:346 | DONE lbl | na 16 16 | 006f20 |             | nt_leftbracket                       
4261:347 | DONE dir | na 16 16 | 006f20 | (2 bytes)   |         .byte 1, { IM + CO }         
4261:347 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
4261:348 | DONE dir | na 16 16 | 006f22 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 0062b9 
4261:348 | DONE dir | na 16 16 |        |             |                 17 6f b7 62 b9 62        --  . o . b . b
4261:349 | DONE dir | na 16 16 | 006f28 | (1 bytes)   |         .byte 5b                     
4261:349 | DONE dir | na 16 16 |        |             |                 5b                       --  [
4261:350 | DONE wsp | na 16 16 |        |             |
4261:351 | DONE lbl | na 16 16 | 006f29 |             | nt_latestnt                          
4261:352 | DONE dir | na 16 16 | 006f29 | (2 bytes)   |         .byte 8, { NC }              
4261:352 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4261:353 | DONE dir | na 16 16 | 006f2b | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 006764 
4261:353 | DONE dir | na 16 16 |        |             |                 20 6f 5d 67 64 67        --    o ] g d g
4261:354 | DONE dir | na 16 16 | 006f31 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
4261:354 | DONE dir | na 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
4261:354 | DONE dir | na 16 16 |        |             |                                          -- 
4261:355 | DONE wsp | na 16 16 |        |             |
4261:356 | DONE lbl | na 16 16 | 006f39 |             | nt_latestxt                          
4261:357 | DONE dir | na 16 16 | 006f39 | (2 bytes)   |         .byte 8, { NC }              
4261:357 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4261:358 | DONE dir | na 16 16 | 006f3b | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 006774 
4261:358 | DONE dir | na 16 16 |        |             |                 29 6f 65 67 74 67        --  ) o e g t g
4261:359 | DONE dir | na 16 16 | 006f41 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
4261:359 | DONE dir | na 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
4261:359 | DONE dir | na 16 16 |        |             |                                          -- 
4261:360 | DONE wsp | na 16 16 |        |             |
4261:361 | DONE lbl | na 16 16 | 006f49 |             | nt_zbranch                           
4261:362 | DONE dir | na 16 16 | 006f49 | (2 bytes)   |         .byte 7, { IM + CO }         
4261:362 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
4261:363 | DONE dir | na 16 16 | 006f4b | (6 bytes)   |         .word nt_latestxt, xt_zbranch, 006331 
4261:363 | DONE dir | na 16 16 |        |             |                 39 6f 2b 63 31 63        --  9 o + c 1 c
4261:364 | DONE dir | na 16 16 | 006f51 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
4261:364 | DONE dir | na 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
4261:365 | DONE wsp | na 16 16 |        |             |
4261:366 | DONE lbl | na 16 16 | 006f58 |             | nt_branch                            
4261:367 | DONE dir | na 16 16 | 006f58 | (2 bytes)   |         .byte 6, { IM + CO }         
4261:367 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4261:368 | DONE dir | na 16 16 | 006f5a | (6 bytes)   |         .word nt_zbranch, xt_branch, 0064ad 
4261:368 | DONE dir | na 16 16 |        |             |                 49 6f a7 64 ad 64        --  I o . d . d
4261:369 | DONE dir | na 16 16 | 006f60 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
4261:369 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
4261:370 | DONE wsp | na 16 16 |        |             |
4261:371 | DONE lbl | na 16 16 | 006f66 |             | nt_again                             
4261:372 | DONE dir | na 16 16 | 006f66 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
4261:372 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
4261:373 | DONE dir | na 16 16 | 006f68 | (6 bytes)   |         .word nt_branch, xt_again, 00644e 
4261:373 | DONE dir | na 16 16 |        |             |                 58 6f 39 64 4e 64        --  X o 9 d N d
4261:374 | DONE dir | na 16 16 | 006f6e | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
4261:374 | DONE dir | na 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
4261:375 | DONE wsp | na 16 16 |        |             |
4261:376 | DONE lbl | na 16 16 | 006f73 |             | nt_begin                             
4261:377 | DONE dir | na 16 16 | 006f73 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
4261:377 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
4261:378 | DONE dir | na 16 16 | 006f75 | (6 bytes)   |         .word nt_again, xt_begin, 006494 
4261:378 | DONE dir | na 16 16 |        |             |                 66 6f 8e 64 94 64        --  f o . d . d
4261:379 | DONE dir | na 16 16 | 006f7b | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
4261:379 | DONE dir | na 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
4261:380 | DONE wsp | na 16 16 |        |             |
4261:381 | DONE lbl | na 16 16 | 006f80 |             | nt_compilecomma                      
4261:382 | DONE dir | na 16 16 | 006f80 | (2 bytes)   |         .byte 08, { CO }             
4261:382 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
4261:383 | DONE dir | na 16 16 | 006f82 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 006524 
4261:383 | DONE dir | na 16 16 |        |             |                 73 6f 0f 65 24 65        --  s o . e $ e
4261:384 | DONE dir | na 16 16 | 006f88 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
4261:384 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
4261:384 | DONE dir | na 16 16 |        |             |                                          -- 
4261:385 | DONE wsp | na 16 16 |        |             |
4261:386 | DONE lbl | na 16 16 | 006f90 |             | nt_semicolon                         
4261:387 | DONE dir | na 16 16 | 006f90 | (2 bytes)   |         .byte 1, { CO + IM }         
4261:387 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
4261:388 | DONE dir | na 16 16 | 006f92 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 00625d 
4261:388 | DONE dir | na 16 16 |        |             |                 80 6f 45 62 5d 62        --  . o E b ] b
4261:389 | DONE dir | na 16 16 | 006f98 | (1 bytes)   |         .byte 3b                     
4261:389 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
4261:390 | DONE wsp | na 16 16 |        |             |
4261:391 | DONE lbl | na 16 16 | 006f99 |             | nt_colon                             
4261:392 | DONE dir | na 16 16 | 006f99 | (2 bytes)   |         .byte 1, { NC }              
4261:392 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:393 | DONE dir | na 16 16 | 006f9b | (6 bytes)   |         .word nt_semicolon, xt_colon, 006244 
4261:393 | DONE dir | na 16 16 |        |             |                 90 6f 23 62 44 62        --  . o # b D b
4261:394 | DONE dir | na 16 16 | 006fa1 | (1 bytes)   |         .byte 3a                     
4261:394 | DONE dir | na 16 16 |        |             |                 3a                       --  :
4261:395 | DONE wsp | na 16 16 |        |             |
4261:396 | DONE lbl | na 16 16 | 006fa2 |             | nt_allot                             
4261:397 | DONE dir | na 16 16 | 006fa2 | (2 bytes)   |         .byte 5, { NC }              
4261:397 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:398 | DONE dir | na 16 16 | 006fa4 | (6 bytes)   |         .word nt_colon, xt_allot, 006477 
4261:398 | DONE dir | na 16 16 |        |             |                 99 6f 4f 64 77 64        --  . o O d w d
4261:399 | DONE dir | na 16 16 | 006faa | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
4261:399 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
4261:400 | DONE wsp | na 16 16 |        |             |
4261:401 | DONE lbl | na 16 16 | 006faf |             | nt_tobody                            
4261:402 | DONE dir | na 16 16 | 006faf | (2 bytes)   |         .byte 5, { NC }              
4261:402 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:403 | DONE dir | na 16 16 | 006fb1 | (6 bytes)   |         .word nt_allot, xt_tobody, 006120 
4261:403 | DONE dir | na 16 16 |        |             |                 a2 6f 1d 61 20 61        --  . o . a   a
4261:404 | DONE dir | na 16 16 | 006fb7 | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
4261:404 | DONE dir | na 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
4261:405 | DONE wsp | na 16 16 |        |             |
4261:406 | DONE lbl | na 16 16 | 006fbc |             | nt_does                              
4261:407 | DONE dir | na 16 16 | 006fbc | (2 bytes)   |         .byte 5, { IM + CO }         
4261:407 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
4261:408 | DONE dir | na 16 16 | 006fbe | (6 bytes)   |         .word nt_tobody, xt_does, 006657 
4261:408 | DONE dir | na 16 16 |        |             |                 af 6f 4b 66 57 66        --  . o K f W f
4261:409 | DONE dir | na 16 16 | 006fc4 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
4261:409 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
4261:410 | DONE wsp | na 16 16 |        |             |
4261:411 | DONE lbl | na 16 16 | 006fc9 |             | nt_create                            
4261:412 | DONE dir | na 16 16 | 006fc9 | (2 bytes)   |         .byte 6, { NC }              
4261:412 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:413 | DONE dir | na 16 16 | 006fcb | (6 bytes)   |         .word nt_does, xt_create, 0065c7 
4261:413 | DONE dir | na 16 16 |        |             |                 bc 6f 55 65 c7 65        --  . o U e . e
4261:414 | DONE dir | na 16 16 | 006fd1 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
4261:414 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
4261:415 | DONE wsp | na 16 16 |        |             |
4261:416 | DONE lbl | na 16 16 | 006fd7 |             | nt_name-string                       
4261:417 | DONE dir | na 16 16 | 006fd7 | (2 bytes)   |         .byte 0b, { NC }             
4261:417 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
4261:418 | DONE dir | na 16 16 | 006fd9 | (6 bytes)   |         .word nt_create, xt_name-string, 0067f3 
4261:418 | DONE dir | na 16 16 |        |             |                 c9 6f e3 67 f3 67        --  . o . g . g
4261:419 | DONE dir | na 16 16 | 006fdf | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
4261:419 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
4261:419 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
4261:420 | DONE wsp | na 16 16 |        |             |
4261:421 | DONE lbl | na 16 16 | 006fea |             | nt_2dup                              
4261:422 | DONE dir | na 16 16 | 006fea | (2 bytes)   |         .byte 4, { NC }              
4261:422 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:423 | DONE dir | na 16 16 | 006fec | (6 bytes)   |         .word nt_name-string, xt_2dup, 006372 
4261:423 | DONE dir | na 16 16 |        |             |                 d7 6f 68 63 72 63        --  . o h c r c
4261:424 | DONE dir | na 16 16 | 006ff2 | (4 bytes)   |         .byte 32, 64, 75, 70         
4261:424 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
4261:425 | DONE wsp | na 16 16 |        |             |
4261:426 | DONE lbl | na 16 16 | 006ff6 |             | nt_abs                               
4261:427 | DONE dir | na 16 16 | 006ff6 | (2 bytes)   |         .byte 3, { NC }              
4261:427 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:428 | DONE dir | na 16 16 | 006ff8 | (6 bytes)   |         .word nt_2dup, xt_abs, 0063b4 
4261:428 | DONE dir | na 16 16 |        |             |                 ea 6f ac 63 b4 63        --  . o . c . c
4261:429 | DONE dir | na 16 16 | 006ffe | (3 bytes)   |         .byte 61, 62, 73             
4261:429 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
4261:430 | DONE wsp | na 16 16 |        |             |
4261:431 | DONE lbl | na 16 16 | 007001 |             | nt_state                             
4261:432 | DONE dir | na 16 16 | 007001 | (2 bytes)   |         .byte 5, { NC }              
4261:432 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:433 | DONE dir | na 16 16 | 007003 | (6 bytes)   |         .word nt_abs, xt_state, 006ac3 
4261:433 | DONE dir | na 16 16 |        |             |                 f6 6f bc 6a c3 6a        --  . o . j . j
4261:434 | DONE dir | na 16 16 | 007009 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
4261:434 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
4261:435 | DONE wsp | na 16 16 |        |             |
4261:436 | DONE lbl | na 16 16 | 00700e |             | nt_to-in                             
4261:437 | DONE dir | na 16 16 | 00700e | (2 bytes)   |         .byte 3, { NC }              
4261:437 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:438 | DONE dir | na 16 16 | 007010 | (6 bytes)   |         .word nt_state, xt_to-in, 006128 
4261:438 | DONE dir | na 16 16 |        |             |                 01 70 21 61 28 61        --  . p ! a ( a
4261:439 | DONE dir | na 16 16 | 007016 | (3 bytes)   |         .byte 3e, 69, 6e             
4261:439 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
4261:440 | DONE wsp | na 16 16 |        |             |
4261:441 | DONE lbl | na 16 16 | 007019 |             | nt_source                            
4261:442 | DONE dir | na 16 16 | 007019 | (2 bytes)   |         .byte 6, { NC }              
4261:442 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:443 | DONE dir | na 16 16 | 00701b | (6 bytes)   |         .word nt_to-in, xt_source, 006a98 
4261:443 | DONE dir | na 16 16 |        |             |                 0e 70 8c 6a 98 6a        --  . p . j . j
4261:444 | DONE dir | na 16 16 | 007021 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
4261:444 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
4261:445 | DONE wsp | na 16 16 |        |             |
4261:446 | DONE lbl | na 16 16 | 007027 |             | nt_depth                             
4261:447 | DONE dir | na 16 16 | 007027 | (2 bytes)   |         .byte 5, { NC }              
4261:447 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:448 | DONE dir | na 16 16 | 007029 | (6 bytes)   |         .word nt_source, xt_depth, 006636 
4261:448 | DONE dir | na 16 16 |        |             |                 19 70 28 66 36 66        --  . p ( f 6 f
4261:449 | DONE dir | na 16 16 | 00702f | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
4261:449 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
4261:450 | DONE wsp | na 16 16 |        |             |
4261:451 | DONE lbl | na 16 16 | 007034 |             | nt_constant                          
4261:452 | DONE dir | na 16 16 | 007034 | (2 bytes)   |         .byte 8, { NC }              
4261:452 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4261:453 | DONE dir | na 16 16 | 007036 | (6 bytes)   |         .word nt_depth, xt_constant, 00653e 
4261:453 | DONE dir | na 16 16 |        |             |                 27 70 25 65 3e 65        --  ' p % e > e
4261:454 | DONE dir | na 16 16 | 00703c | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
4261:454 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
4261:454 | DONE dir | na 16 16 |        |             |                                          -- 
4261:455 | DONE wsp | na 16 16 |        |             |
4261:456 | DONE lbl | na 16 16 | 007044 |             | nt_variable                          
4261:457 | DONE dir | na 16 16 | 007044 | (2 bytes)   |         .byte 8, { NC }              
4261:457 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4261:458 | DONE dir | na 16 16 | 007046 | (6 bytes)   |         .word nt_constant, xt_variable, 006bdf 
4261:458 | DONE dir | na 16 16 |        |             |                 34 70 d3 6b df 6b        --  4 p . k . k
4261:459 | DONE dir | na 16 16 | 00704c | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
4261:459 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
4261:459 | DONE dir | na 16 16 |        |             |                                          -- 
4261:460 | DONE wsp | na 16 16 |        |             |
4261:461 | DONE lbl | na 16 16 | 007054 |             | nt_tick                              
4261:462 | DONE dir | na 16 16 | 007054 | (2 bytes)   |         .byte 1, { NC }              
4261:462 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:463 | DONE dir | na 16 16 | 007056 | (6 bytes)   |         .word nt_variable, xt_tick, 00638e 
4261:463 | DONE dir | na 16 16 |        |             |                 44 70 73 63 8e 63        --  D p s c . c
4261:464 | DONE dir | na 16 16 | 00705c | (1 bytes)   |         .byte 27                     hex for "'"
4261:464 | DONE dir | na 16 16 |        |             |                 27                       --  '
4261:465 | DONE wsp | na 16 16 |        |             |
4261:466 | DONE lbl | na 16 16 | 00705d |             | nt_min                               
4261:467 | DONE dir | na 16 16 | 00705d | (2 bytes)   |         .byte 3, { NC }              
4261:467 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:468 | DONE dir | na 16 16 | 00705f | (6 bytes)   |         .word nt_tick, xt_min, 0067d9 
4261:468 | DONE dir | na 16 16 |        |             |                 54 70 c7 67 d9 67        --  T p . g . g
4261:469 | DONE dir | na 16 16 | 007065 | (3 bytes)   |         .byte 6d, 69, 6e             
4261:469 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
4261:470 | DONE wsp | na 16 16 |        |             |
4261:471 | DONE lbl | na 16 16 | 007068 |             | nt_max                               
4261:472 | DONE dir | na 16 16 | 007068 | (2 bytes)   |         .byte 3, { NC }              
4261:472 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:473 | DONE dir | na 16 16 | 00706a | (6 bytes)   |         .word nt_min, xt_max, 0067c6 
4261:473 | DONE dir | na 16 16 |        |             |                 5d 70 b4 67 c6 67        --  ] p . g . g
4261:474 | DONE dir | na 16 16 | 007070 | (3 bytes)   |         .byte 6d, 61, 78             
4261:474 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
4261:475 | DONE wsp | na 16 16 |        |             |
4261:476 | DONE lbl | na 16 16 | 007073 |             | nt_negate                            
4261:477 | DONE dir | na 16 16 | 007073 | (2 bytes)   |         .byte 6, { NC }              
4261:477 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:478 | DONE dir | na 16 16 | 007075 | (6 bytes)   |         .word nt_max, xt_negate, 0067fa 
4261:478 | DONE dir | na 16 16 |        |             |                 68 70 f4 67 fa 67        --  h p . g . g
4261:479 | DONE dir | na 16 16 | 00707b | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
4261:479 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
4261:480 | DONE wsp | na 16 16 |        |             |
4261:481 | DONE lbl | na 16 16 | 007081 |             | nt_invert                            
4261:482 | DONE dir | na 16 16 | 007081 | (2 bytes)   |         .byte 6, { NC }              
4261:482 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:483 | DONE dir | na 16 16 | 007083 | (6 bytes)   |         .word nt_negate, xt_invert, 006741 
4261:483 | DONE dir | na 16 16 |        |             |                 73 70 3c 67 41 67        --  s p < g A g
4261:484 | DONE dir | na 16 16 | 007089 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
4261:484 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
4261:485 | DONE wsp | na 16 16 |        |             |
4261:486 | DONE lbl | na 16 16 | 00708f |             | nt_char                              
4261:487 | DONE dir | na 16 16 | 00708f | (2 bytes)   |         .byte 4, { NC }              
4261:487 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:488 | DONE dir | na 16 16 | 007091 | (6 bytes)   |         .word nt_invert, xt_char, 006503 
4261:488 | DONE dir | na 16 16 |        |             |                 81 70 ec 64 03 65        --  . p . d . e
4261:489 | DONE dir | na 16 16 | 007097 | (4 bytes)   |         .byte 63, 68, 61, 72         
4261:489 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
4261:490 | DONE wsp | na 16 16 |        |             |
4261:491 | DONE lbl | na 16 16 | 00709b |             | nt_xor                               
4261:492 | DONE dir | na 16 16 | 00709b | (2 bytes)   |         .byte 3, { NC }              
4261:492 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:493 | DONE dir | na 16 16 | 00709d | (6 bytes)   |         .word nt_char, xt_xor, 006c3d 
4261:493 | DONE dir | na 16 16 |        |             |                 8f 70 37 6c 3d 6c        --  . p 7 l = l
4261:494 | DONE dir | na 16 16 | 0070a3 | (3 bytes)   |         .byte 78, 6f, 72             
4261:494 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
4261:495 | DONE wsp | na 16 16 |        |             |
4261:496 | DONE lbl | na 16 16 | 0070a6 |             | nt_or                                
4261:497 | DONE dir | na 16 16 | 0070a6 | (2 bytes)   |         .byte 2, { NC }              
4261:497 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:498 | DONE dir | na 16 16 | 0070a8 | (6 bytes)   |         .word nt_xor, xt_or, 006888  
4261:498 | DONE dir | na 16 16 |        |             |                 9b 70 82 68 88 68        --  . p . h . h
4261:499 | DONE dir | na 16 16 | 0070ae | (2 bytes)   |         .byte 6f, 72                 
4261:499 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
4261:500 | DONE wsp | na 16 16 |        |             |
4261:501 | DONE lbl | na 16 16 | 0070b0 |             | nt_and                               
4261:502 | DONE dir | na 16 16 | 0070b0 | (2 bytes)   |         .byte 3, { NC }              
4261:502 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:503 | DONE dir | na 16 16 | 0070b2 | (6 bytes)   |         .word nt_or, xt_and, 00647e  
4261:503 | DONE dir | na 16 16 |        |             |                 a6 70 78 64 7e 64        --  . p x d ~ d
4261:504 | DONE dir | na 16 16 | 0070b8 | (3 bytes)   |         .byte 61, 6e, 64             
4261:504 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
4261:505 | DONE wsp | na 16 16 |        |             |
4261:506 | DONE lbl | na 16 16 | 0070bb |             | nt_plusstore                         
4261:507 | DONE dir | na 16 16 | 0070bb | (2 bytes)   |         .byte 2, { NC }              
4261:507 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:508 | DONE dir | na 16 16 | 0070bd | (6 bytes)   |         .word nt_and, xt_plusstore, 00691d 
4261:508 | DONE dir | na 16 16 |        |             |                 b0 70 0e 69 1d 69        --  . p . i . i
4261:509 | DONE dir | na 16 16 | 0070c3 | (2 bytes)   |         .byte 2b, 21                 
4261:509 | DONE dir | na 16 16 |        |             |                 2b 21                    --  + !
4261:510 | DONE wsp | na 16 16 |        |             |
4261:511 | DONE lbl | na 16 16 | 0070c5 |             | nt_c-comma                           
4261:512 | DONE dir | na 16 16 | 0070c5 | (2 bytes)   |         .byte 2, { NC }              
4261:512 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:513 | DONE dir | na 16 16 | 0070c7 | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 0064cc 
4261:513 | DONE dir | na 16 16 |        |             |                 bb 70 bf 64 cc 64        --  . p . d . d
4261:514 | DONE dir | na 16 16 | 0070cd | (2 bytes)   |         .byte 63, 2c                 
4261:514 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
4261:515 | DONE wsp | na 16 16 |        |             |
4261:516 | DONE lbl | na 16 16 | 0070cf |             | nt_c-fetch                           
4261:517 | DONE dir | na 16 16 | 0070cf | (2 bytes)   |         .byte 2, { NC }              
4261:517 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:518 | DONE dir | na 16 16 | 0070d1 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 0064d8 
4261:518 | DONE dir | na 16 16 |        |             |                 c5 70 cd 64 d8 64        --  . p . d . d
4261:519 | DONE dir | na 16 16 | 0070d7 | (2 bytes)   |         .byte 63, 40                 
4261:519 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
4261:520 | DONE wsp | na 16 16 |        |             |
4261:521 | DONE lbl | na 16 16 | 0070d9 |             | nt_c-store                           
4261:522 | DONE dir | na 16 16 | 0070d9 | (2 bytes)   |         .byte 2, { NC }              
4261:522 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:523 | DONE dir | na 16 16 | 0070db | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0064e8 
4261:523 | DONE dir | na 16 16 |        |             |                 cf 70 d9 64 e8 64        --  . p . d . d
4261:524 | DONE dir | na 16 16 | 0070e1 | (2 bytes)   |         .byte 63, 21                 
4261:524 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
4261:525 | DONE wsp | na 16 16 |        |             |
4261:526 | DONE lbl | na 16 16 | 0070e3 |             | nt_two-star                          
4261:527 | DONE dir | na 16 16 | 0070e3 | (2 bytes)   |         .byte 2, { NC }              
4261:527 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:528 | DONE dir | na 16 16 | 0070e5 | (6 bytes)   |         .word nt_c-store, xt_two-star, 006360 
4261:528 | DONE dir | na 16 16 |        |             |                 d9 70 5d 63 60 63        --  . p ] c ` c
4261:529 | DONE dir | na 16 16 | 0070eb | (2 bytes)   |         .byte 32, 2a                 
4261:529 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
4261:530 | DONE wsp | na 16 16 |        |             |
4261:531 | DONE lbl | na 16 16 | 0070ed |             | nt_minus                             
4261:532 | DONE dir | na 16 16 | 0070ed | (2 bytes)   |         .byte 1, { NC }              
4261:532 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:533 | DONE dir | na 16 16 | 0070ef | (6 bytes)   |         .word nt_two-star, xt_minus, 0062de 
4261:533 | DONE dir | na 16 16 |        |             |                 e3 70 d4 62 de 62        --  . p . b . b
4261:534 | DONE dir | na 16 16 | 0070f5 | (1 bytes)   |         .byte 2d                     
4261:534 | DONE dir | na 16 16 |        |             |                 2d                       --  -
4261:535 | DONE wsp | na 16 16 |        |             |
4261:536 | DONE lbl | na 16 16 | 0070f6 |             | nt_plus                              
4261:537 | DONE dir | na 16 16 | 0070f6 | (2 bytes)   |         .byte 1, { NC }              
4261:537 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:538 | DONE dir | na 16 16 | 0070f8 | (6 bytes)   |         .word nt_minus, xt_plus, 0062d3 
4261:538 | DONE dir | na 16 16 |        |             |                 ed 70 cc 62 d3 62        --  . p . b . b
4261:539 | DONE dir | na 16 16 | 0070fe | (1 bytes)   |         .byte 2b                     
4261:539 | DONE dir | na 16 16 |        |             |                 2b                       --  +
4261:540 | DONE wsp | na 16 16 |        |             |
4261:541 | DONE lbl | na 16 16 | 0070ff |             | nt_one-minus                         
4261:542 | DONE dir | na 16 16 | 0070ff | (2 bytes)   |         .byte 2, { NC }              
4261:542 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:543 | DONE dir | na 16 16 | 007101 | (6 bytes)   |         .word nt_plus, xt_one-minus, 006352 
4261:543 | DONE dir | na 16 16 |        |             |                 f6 70 51 63 52 63        --  . p Q c R c
4261:544 | DONE dir | na 16 16 | 007107 | (2 bytes)   |         .byte 31, 2d                 
4261:544 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
4261:545 | DONE wsp | na 16 16 |        |             |
4261:546 | DONE lbl | na 16 16 | 007109 |             | nt_one-plus                          
4261:547 | DONE dir | na 16 16 | 007109 | (2 bytes)   |         .byte 2, { NC }              
4261:547 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:548 | DONE dir | na 16 16 | 00710b | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 006354 
4261:548 | DONE dir | na 16 16 |        |             |                 ff 70 53 63 54 63        --  . p S c T c
4261:549 | DONE dir | na 16 16 | 007111 | (2 bytes)   |         .byte 31, 2b                 
4261:549 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
4261:550 | DONE wsp | na 16 16 |        |             |
4261:551 | DONE lbl | na 16 16 | 007113 |             | nt_zero-notequal                     
4261:552 | DONE dir | na 16 16 | 007113 | (2 bytes)   |         .byte 3, { NC }              
4261:552 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:553 | DONE dir | na 16 16 | 007115 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 00631f 
4261:553 | DONE dir | na 16 16 |        |             |                 09 71 14 63 1f 63        --  	 q . c . c
4261:554 | DONE dir | na 16 16 | 00711b | (3 bytes)   |         .byte 30, 3c, 3e             
4261:554 | DONE dir | na 16 16 |        |             |                 30 3c 3e                 --  0 < >
4261:555 | DONE wsp | na 16 16 |        |             |
4261:556 | DONE lbl | na 16 16 | 00711e |             | nt_zero-more                         
4261:557 | DONE dir | na 16 16 | 00711e | (2 bytes)   |         .byte 2, { NC }              
4261:557 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:558 | DONE dir | na 16 16 | 007120 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 00632a 
4261:558 | DONE dir | na 16 16 |        |             |                 13 71 20 63 2a 63        --  . q   c * c
4261:559 | DONE dir | na 16 16 | 007126 | (2 bytes)   |         .byte 30, 3e                 
4261:559 | DONE dir | na 16 16 |        |             |                 30 3e                    --  0 >
4261:560 | DONE wsp | na 16 16 |        |             |
4261:561 | DONE lbl | na 16 16 | 007128 |             | nt_zero-less                         
4261:562 | DONE dir | na 16 16 | 007128 | (2 bytes)   |         .byte 2, { NC }              
4261:562 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:563 | DONE dir | na 16 16 | 00712a | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 006313 
4261:563 | DONE dir | na 16 16 |        |             |                 1e 71 08 63 13 63        --  . q . c . c
4261:564 | DONE dir | na 16 16 | 007130 | (2 bytes)   |         .byte 30, 3c                 
4261:564 | DONE dir | na 16 16 |        |             |                 30 3c                    --  0 <
4261:565 | DONE wsp | na 16 16 |        |             |
4261:566 | DONE lbl | na 16 16 | 007132 |             | nt_greater                           
4261:567 | DONE dir | na 16 16 | 007132 | (2 bytes)   |         .byte 1, { NC }              
4261:567 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:568 | DONE dir | na 16 16 | 007134 | (6 bytes)   |         .word nt_zero-less, xt_greater, 00611c 
4261:568 | DONE dir | na 16 16 |        |             |                 28 71 09 61 1c 61        --  ( q 	 a . a
4261:569 | DONE dir | na 16 16 | 00713a | (1 bytes)   |         .byte 3e                     
4261:569 | DONE dir | na 16 16 |        |             |                 3e                       --  >
4261:570 | DONE wsp | na 16 16 |        |             |
4261:571 | DONE lbl | na 16 16 | 00713b |             | nt_less                              
4261:572 | DONE dir | na 16 16 | 00713b | (2 bytes)   |         .byte 1, { NC }              
4261:572 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:573 | DONE dir | na 16 16 | 00713d | (6 bytes)   |         .word nt_greater, xt_less, 0060f2 
4261:573 | DONE dir | na 16 16 |        |             |                 32 71 df 60 f2 60        --  2 q . ` . `
4261:574 | DONE dir | na 16 16 | 007143 | (1 bytes)   |         .byte 3c                     
4261:574 | DONE dir | na 16 16 |        |             |                 3c                       --  <
4261:575 | DONE wsp | na 16 16 |        |             |
4261:576 | DONE lbl | na 16 16 | 007144 |             | nt_zero-equal                        
4261:577 | DONE dir | na 16 16 | 007144 | (2 bytes)   |         .byte 2, { NC }              
4261:577 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:578 | DONE dir | na 16 16 | 007146 | (6 bytes)   |         .word nt_less, xt_zero-equal, 006307 
4261:578 | DONE dir | na 16 16 |        |             |                 3b 71 fc 62 07 63        --  ; q . b . c
4261:579 | DONE dir | na 16 16 | 00714c | (2 bytes)   |         .byte 30, 3d                 
4261:579 | DONE dir | na 16 16 |        |             |                 30 3d                    --  0 =
4261:580 | DONE wsp | na 16 16 |        |             |
4261:581 | DONE lbl | na 16 16 | 00714e |             | nt_not-equal                         
4261:582 | DONE dir | na 16 16 | 00714e | (2 bytes)   |         .byte 2, { NC }              
4261:582 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4261:583 | DONE dir | na 16 16 | 007150 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 0060fe 
4261:583 | DONE dir | na 16 16 |        |             |                 44 71 f3 60 fe 60        --  D q . ` . `
4261:584 | DONE dir | na 16 16 | 007156 | (2 bytes)   |         .byte 3c, 3e                 
4261:584 | DONE dir | na 16 16 |        |             |                 3c 3e                    --  < >
4261:585 | DONE wsp | na 16 16 |        |             |
4261:586 | DONE lbl | na 16 16 | 007158 |             | nt_equal                             
4261:587 | DONE dir | na 16 16 | 007158 | (2 bytes)   |         .byte 1, { NC }              
4261:587 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:588 | DONE dir | na 16 16 | 00715a | (6 bytes)   |         .word nt_not-equal, xt_equal, 0062f3 
4261:588 | DONE dir | na 16 16 |        |             |                 4e 71 e8 62 f3 62        --  N q . b . b
4261:589 | DONE dir | na 16 16 | 007160 | (1 bytes)   |         .byte 3d                     
4261:589 | DONE dir | na 16 16 |        |             |                 3d                       --  =
4261:590 | DONE wsp | na 16 16 |        |             |
4261:591 | DONE lbl | na 16 16 | 007161 |             | nt_false                             
4261:592 | DONE dir | na 16 16 | 007161 | (2 bytes)   |         .byte 5, { NC }              
4261:592 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:593 | DONE dir | na 16 16 | 007163 | (6 bytes)   |         .word nt_equal, xt_zero, 0062fb 
4261:593 | DONE dir | na 16 16 |        |             |                 58 71 f4 62 fb 62        --  X q . b . b
4261:594 | DONE dir | na 16 16 | 007169 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
4261:594 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
4261:595 | DONE wsp | na 16 16 |        |             |
4261:596 | DONE lbl | na 16 16 | 00716e |             | nt_true                              
4261:597 | DONE dir | na 16 16 | 00716e | (2 bytes)   |         .byte 4, { NC }              
4261:597 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:598 | DONE dir | na 16 16 | 007170 | (6 bytes)   |         .word nt_false, xt_true, 006ad1 
4261:598 | DONE dir | na 16 16 |        |             |                 61 71 ca 6a d1 6a        --  a q . j . j
4261:599 | DONE dir | na 16 16 | 007176 | (4 bytes)   |         .byte 74, 72, 75, 65         
4261:599 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
4261:600 | DONE wsp | na 16 16 |        |             |
4261:601 | DONE lbl | na 16 16 | 00717a |             | nt_tonumber                          
4261:602 | DONE dir | na 16 16 | 00717a | (2 bytes)   |         .byte 7, { NC }              see if actually NC
4261:602 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4261:603 | DONE dir | na 16 16 | 00717c | (6 bytes)   |         .word nt_true, xt_tonumber, 006185 
4261:603 | DONE dir | na 16 16 |        |             |                 6e 71 29 61 85 61        --  n q ) a . a
4261:604 | DONE dir | na 16 16 | 007182 | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
4261:604 | DONE dir | na 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
4261:605 | DONE wsp | na 16 16 |        |             |
4261:606 | DONE lbl | na 16 16 | 007189 |             | nt_number                            
4261:607 | DONE dir | na 16 16 | 007189 | (2 bytes)   |         .byte 6, { NC }              see if actually NC
4261:607 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:608 | DONE dir | na 16 16 | 00718b | (6 bytes)   |         .word nt_tonumber, xt_number, 006881 
4261:608 | DONE dir | na 16 16 |        |             |                 7a 71 fe 67 81 68        --  z q . g . h
4261:609 | DONE dir | na 16 16 | 007191 | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
4261:609 | DONE dir | na 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
4261:610 | DONE wsp | na 16 16 |        |             |
4261:611 | DONE lbl | na 16 16 | 007197 |             | nt_two                               
4261:612 | DONE dir | na 16 16 | 007197 | (2 bytes)   |         .byte 1, { NC }              
4261:612 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:613 | DONE dir | na 16 16 | 007199 | (6 bytes)   |         .word nt_number, xt_two, 00635c 
4261:613 | DONE dir | na 16 16 |        |             |                 89 71 55 63 5c 63        --  . q U c \ c
4261:614 | DONE dir | na 16 16 | 00719f | (1 bytes)   |         .byte 32                     
4261:614 | DONE dir | na 16 16 |        |             |                 32                       --  2
4261:615 | DONE wsp | na 16 16 |        |             |
4261:616 | DONE lbl | na 16 16 | 0071a0 |             | nt_one                               
4261:617 | DONE dir | na 16 16 | 0071a0 | (2 bytes)   |         .byte 1, { NC }              
4261:617 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:618 | DONE dir | na 16 16 | 0071a2 | (6 bytes)   |         .word nt_two, xt_one, 006350 
4261:618 | DONE dir | na 16 16 |        |             |                 97 71 49 63 50 63        --  . q I c P c
4261:619 | DONE dir | na 16 16 | 0071a8 | (1 bytes)   |         .byte 31                     
4261:619 | DONE dir | na 16 16 |        |             |                 31                       --  1
4261:620 | DONE wsp | na 16 16 |        |             |
4261:621 | DONE lbl | na 16 16 | 0071a9 |             | nt_zero                              
4261:622 | DONE dir | na 16 16 | 0071a9 | (2 bytes)   |         .byte 1, { NC }              
4261:622 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:623 | DONE dir | na 16 16 | 0071ab | (6 bytes)   |         .word nt_one, xt_zero, 0062fb 
4261:623 | DONE dir | na 16 16 |        |             |                 a0 71 f4 62 fb 62        --  . q . b . b
4261:624 | DONE dir | na 16 16 | 0071b1 | (1 bytes)   |         .byte 30                     
4261:624 | DONE dir | na 16 16 |        |             |                 30                       --  0
4261:625 | DONE wsp | na 16 16 |        |             |
4261:626 | DONE lbl | na 16 16 | 0071b2 |             | nt_find-name                         
4261:627 | DONE dir | na 16 16 | 0071b2 | (2 bytes)   |         .byte 9, 0                   
4261:627 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
4261:628 | DONE dir | na 16 16 | 0071b4 | (6 bytes)   |         .word nt_zero, xt_find-name, 006732 
4261:628 | DONE dir | na 16 16 |        |             |                 a9 71 dc 66 32 67        --  . q . f 2 g
4261:629 | DONE dir | na 16 16 | 0071ba | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
4261:629 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
4261:629 | DONE dir | na 16 16 |        |             |                 65                       --  e
4261:630 | DONE wsp | na 16 16 |        |             |
4261:631 | DONE lbl | na 16 16 | 0071c3 |             | nt_refill                            
4261:632 | DONE dir | na 16 16 | 0071c3 | (2 bytes)   |         .byte 6, 0                   TODO check flags
4261:632 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
4261:633 | DONE dir | na 16 16 | 0071c5 | (6 bytes)   |         .word nt_find-name, xt_refill, 006997 
4261:633 | DONE dir | na 16 16 |        |             |                 b2 71 65 69 97 69        --  . q e i . i
4261:634 | DONE dir | na 16 16 | 0071cb | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
4261:634 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
4261:635 | DONE wsp | na 16 16 |        |             |
4261:636 | DONE lbl | na 16 16 | 0071d1 |             | nt_parse-name                        
4261:637 | DONE dir | na 16 16 | 0071d1 | (2 bytes)   |         .byte &10, 0                 
4261:637 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
4261:638 | DONE dir | na 16 16 | 0071d3 | (6 bytes)   |         .word nt_refill, xt_parse-name, 00690d 
4261:638 | DONE dir | na 16 16 |        |             |                 c3 71 a9 68 0d 69        --  . q . h  i
4261:639 | DONE dir | na 16 16 | 0071d9 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
4261:639 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
4261:639 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
4261:640 | DONE wsp | na 16 16 |        |             |
4261:641 | DONE lbl | na 16 16 | 0071e3 |             | nt_source-id                         
4261:642 | DONE dir | na 16 16 | 0071e3 | (2 bytes)   |         .byte 9, { NC }              
4261:642 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4261:643 | DONE dir | na 16 16 | 0071e5 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 006a9f 
4261:643 | DONE dir | na 16 16 |        |             |                 d1 71 99 6a 9f 6a        --  . q . j . j
4261:644 | DONE dir | na 16 16 | 0071eb | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
4261:644 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
4261:644 | DONE dir | na 16 16 |        |             |                 64                       --  d
4261:645 | DONE wsp | na 16 16 |        |             |
4261:646 | DONE lbl | na 16 16 | 0071f4 |             | nt_comma                             
4261:647 | DONE dir | na 16 16 | 0071f4 | (2 bytes)   |         .byte 1, { NC }              
4261:647 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:648 | DONE dir | na 16 16 | 0071f6 | (6 bytes)   |         .word nt_source-id, xt_comma, 006222 
4261:648 | DONE dir | na 16 16 |        |             |                 e3 71 17 62 22 62        --  . q . b " b
4261:649 | DONE dir | na 16 16 | 0071fc | (1 bytes)   |         .byte 2c                     
4261:649 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
4261:650 | DONE wsp | na 16 16 |        |             |
4261:651 | DONE lbl | na 16 16 | 0071fd |             | nt_accept                            
4261:652 | DONE dir | na 16 16 | 0071fd | (2 bytes)   |         .byte 6, 00                  TODO check flags
4261:652 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
4261:653 | DONE dir | na 16 16 | 0071ff | (6 bytes)   |         .word nt_comma, xt_accept, 006438 
4261:653 | DONE dir | na 16 16 |        |             |                 f4 71 b5 63 38 64        --  . q . c 8 d
4261:654 | DONE dir | na 16 16 | 007205 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
4261:654 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
4261:655 | DONE wsp | na 16 16 |        |             |
4261:656 | DONE lbl | na 16 16 | 00720b |             | nt_backslash                         
4261:657 | DONE dir | na 16 16 | 00720b | (2 bytes)   |         .byte 1, { NC }              
4261:657 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:658 | DONE dir | na 16 16 | 00720d | (6 bytes)   |         .word nt_accept, xt_backslash, 0062cb 
4261:658 | DONE dir | na 16 16 |        |             |                 fd 71 c7 62 cb 62        --  . q . b . b
4261:659 | DONE dir | na 16 16 | 007213 | (1 bytes)   |         .byte 5c                     
4261:659 | DONE dir | na 16 16 |        |             |                 5c                       --  \
4261:660 | DONE wsp | na 16 16 |        |             |
4261:661 | DONE lbl | na 16 16 | 007214 |             | nt_qdup                              
4261:662 | DONE dir | na 16 16 | 007214 | (2 bytes)   |         .byte 4, { NC }              
4261:662 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:663 | DONE dir | na 16 16 | 007216 | (6 bytes)   |         .word nt_backslash, xt_qdup, 00629f 
4261:663 | DONE dir | na 16 16 |        |             |                 0b 72 98 62 9f 62        --   r . b . b
4261:664 | DONE dir | na 16 16 | 00721c | (4 bytes)   |         .byte 3f, 64, 75, 70         
4261:664 | DONE dir | na 16 16 |        |             |                 3f 64 75 70              --  ? d u p
4261:665 | DONE wsp | na 16 16 |        |             |
4261:666 | DONE lbl | na 16 16 | 007220 |             | nt_tuck                              
4261:667 | DONE dir | na 16 16 | 007220 | (2 bytes)   |         .byte 4, { NC }              
4261:667 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:668 | DONE dir | na 16 16 | 007222 | (6 bytes)   |         .word nt_qdup, xt_tuck, 006ada 
4261:668 | DONE dir | na 16 16 |        |             |                 14 72 d2 6a da 6a        --  . r . j . j
4261:669 | DONE dir | na 16 16 | 007228 | (4 bytes)   |         .byte 74, 75, 63, 6b         
4261:669 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
4261:670 | DONE wsp | na 16 16 |        |             |
4261:671 | DONE lbl | na 16 16 | 00722c |             | nt_nip                               
4261:672 | DONE dir | na 16 16 | 00722c | (2 bytes)   |         .byte 3, { NC }              
4261:672 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:673 | DONE dir | na 16 16 | 00722e | (6 bytes)   |         .word nt_tuck, xt_nip, 0067fd 
4261:673 | DONE dir | na 16 16 |        |             |                 20 72 fb 67 fd 67        --    r . g . g
4261:674 | DONE dir | na 16 16 | 007234 | (3 bytes)   |         .byte 6e, 69, 70             
4261:674 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
4261:675 | DONE wsp | na 16 16 |        |             |
4261:676 | DONE lbl | na 16 16 | 007237 |             | nt_mrot                              
4261:677 | DONE dir | na 16 16 | 007237 | (2 bytes)   |         .byte 4, { NC }              
4261:677 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:678 | DONE dir | na 16 16 | 007239 | (6 bytes)   |         .word nt_nip, xt_mrot, 0062e7 
4261:678 | DONE dir | na 16 16 |        |             |                 2c 72 df 62 e7 62        --  , r . b . b
4261:679 | DONE dir | na 16 16 | 00723f | (4 bytes)   |         .byte 2d, 72, 6f, 74         
4261:679 | DONE dir | na 16 16 |        |             |                 2d 72 6f 74              --  - r o t
4261:680 | DONE wsp | na 16 16 |        |             |
4261:681 | DONE lbl | na 16 16 | 007243 |             | nt_rot                               
4261:682 | DONE dir | na 16 16 | 007243 | (2 bytes)   |         .byte 3, { NC }              
4261:682 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:683 | DONE dir | na 16 16 | 007245 | (6 bytes)   |         .word nt_mrot, xt_rot, 0069a0 
4261:683 | DONE dir | na 16 16 |        |             |                 37 72 98 69 a0 69        --  7 r . i . i
4261:684 | DONE dir | na 16 16 | 00724b | (3 bytes)   |         .byte 72, 6f, 74             
4261:684 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
4261:685 | DONE wsp | na 16 16 |        |             |
4261:686 | DONE lbl | na 16 16 | 00724e |             | nt_execute                           
4261:687 | DONE dir | na 16 16 | 00724e | (2 bytes)   |         .byte 7, { NC }              
4261:687 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4261:688 | DONE dir | na 16 16 | 007250 | (6 bytes)   |         .word nt_rot, xt_execute, 0066db 
4261:688 | DONE dir | na 16 16 |        |             |                 43 72 d1 66 db 66        --  C r . f . f
4261:689 | DONE dir | na 16 16 | 007256 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
4261:689 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
4261:690 | DONE wsp | na 16 16 |        |             |
4261:691 | DONE lbl | na 16 16 | 00725d |             | nt_here                              
4261:692 | DONE dir | na 16 16 | 00725d | (2 bytes)   |         .byte 4, { NC }              
4261:692 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:693 | DONE dir | na 16 16 | 00725f | (6 bytes)   |         .word nt_execute, xt_here, 006748 
4261:693 | DONE dir | na 16 16 |        |             |                 4e 72 42 67 48 67        --  N r B g H g
4261:694 | DONE dir | na 16 16 | 007265 | (4 bytes)   |         .byte 68, 65, 72, 65         
4261:694 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
4261:695 | DONE wsp | na 16 16 |        |             |
4261:696 | DONE lbl | na 16 16 | 007269 |             | nt_2drop                             
4261:697 | DONE dir | na 16 16 | 007269 | (2 bytes)   |         .byte 5, { NC }              
4261:697 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4261:698 | DONE dir | na 16 16 | 00726b | (6 bytes)   |         .word nt_here, xt_2drop, 006367 
4261:698 | DONE dir | na 16 16 |        |             |                 5d 72 61 63 67 63        --  ] r a c g c
4261:699 | DONE dir | na 16 16 | 007271 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
4261:699 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
4261:700 | DONE wsp | na 16 16 |        |             |
4261:701 | DONE lbl | na 16 16 | 007276 |             | nt_rfetch                            
4261:702 | DONE dir | na 16 16 | 007276 | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
4261:702 | DONE dir | na 16 16 |        |             |                 02 00                    --  . .
4261:703 | DONE dir | na 16 16 | 007278 | (6 bytes)   |         .word nt_2drop, xt_rfetch, 00695c 
4261:703 | DONE dir | na 16 16 |        |             |                 69 72 54 69 5c 69        --  i r T i \ i
4261:704 | DONE dir | na 16 16 | 00727e | (2 bytes)   |         .byte 72, 40                 
4261:704 | DONE dir | na 16 16 |        |             |                 72 40                    --  r @
4261:705 | DONE wsp | na 16 16 |        |             |
4261:706 | DONE lbl | na 16 16 | 007280 |             | nt_fromr                             
4261:707 | DONE dir | na 16 16 | 007280 | (2 bytes)   |         .byte 2, { CO }              
4261:707 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
4261:708 | DONE dir | na 16 16 | 007282 | (6 bytes)   |         .word nt_rfetch, xt_fromr, 006964 
4261:708 | DONE dir | na 16 16 |        |             |                 76 72 5d 69 64 69        --  v r ] i d i
4261:709 | DONE dir | na 16 16 | 007288 | (2 bytes)   |         .byte 72, 3e                 
4261:709 | DONE dir | na 16 16 |        |             |                 72 3e                    --  r >
4261:710 | DONE wsp | na 16 16 |        |             |
4261:711 | DONE lbl | na 16 16 | 00728a |             | nt_tor                               
4261:712 | DONE dir | na 16 16 | 00728a | (2 bytes)   |         .byte 2, { CO }              
4261:712 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
4261:713 | DONE dir | na 16 16 | 00728c | (6 bytes)   |         .word nt_fromr, xt_tor, 00618d 
4261:713 | DONE dir | na 16 16 |        |             |                 80 72 86 61 8d 61        --  . r . a . a
4261:714 | DONE dir | na 16 16 | 007292 | (2 bytes)   |         .byte 3e, 72                 
4261:714 | DONE dir | na 16 16 |        |             |                 3e 72                    --  > r
4261:715 | DONE wsp | na 16 16 |        |             |
4261:716 | DONE lbl | na 16 16 | 007294 |             | nt_digitq                            
4261:717 | DONE dir | na 16 16 | 007294 | (2 bytes)   |         .byte 6, { NC }              
4261:717 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:718 | DONE dir | na 16 16 | 007296 | (6 bytes)   |         .word nt_tor, xt_digitq, 006603 
4261:718 | DONE dir | na 16 16 |        |             |                 8a 72 c8 65 03 66        --  . r . e . f
4261:719 | DONE dir | na 16 16 | 00729c | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
4261:719 | DONE dir | na 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
4261:720 | DONE wsp | na 16 16 |        |             |
4261:721 | DONE lbl | na 16 16 | 0072a2 |             | nt_bounds                            
4261:722 | DONE dir | na 16 16 | 0072a2 | (2 bytes)   |         .byte 6, { NC }              
4261:722 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4261:723 | DONE dir | na 16 16 | 0072a4 | (6 bytes)   |         .word nt_digitq, xt_bounds, 0064a6 
4261:723 | DONE dir | na 16 16 |        |             |                 94 72 9d 64 a6 64        --  . r . d . d
4261:724 | DONE dir | na 16 16 | 0072aa | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
4261:724 | DONE dir | na 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
4261:725 | DONE wsp | na 16 16 |        |             |
4261:726 | DONE lbl | na 16 16 | 0072b0 |             | nt_over                              
4261:727 | DONE dir | na 16 16 | 0072b0 | (2 bytes)   |         .byte 4, { NC }              
4261:727 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:728 | DONE dir | na 16 16 | 0072b2 | (6 bytes)   |         .word nt_bounds, xt_over, 00688f 
4261:728 | DONE dir | na 16 16 |        |             |                 a2 72 89 68 8f 68        --  . r . h . h
4261:729 | DONE dir | na 16 16 | 0072b8 | (4 bytes)   |         .byte 6f, 76, 65, 72         
4261:729 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
4261:730 | DONE wsp | na 16 16 |        |             |
4261:731 | DONE lbl | na 16 16 | 0072bc |             | nt_fetch                             
4261:732 | DONE dir | na 16 16 | 0072bc | (2 bytes)   |         .byte 1, { NC }              
4261:732 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:733 | DONE dir | na 16 16 | 0072be | (6 bytes)   |         .word nt_over, xt_fetch, 0062b0 
4261:733 | DONE dir | na 16 16 |        |             |                 b0 72 ac 62 b0 62        --  . r . b . b
4261:734 | DONE dir | na 16 16 | 0072c4 | (1 bytes)   |         .byte 40                     
4261:734 | DONE dir | na 16 16 |        |             |                 40                       --  @
4261:735 | DONE wsp | na 16 16 |        |             |
4261:736 | DONE lbl | na 16 16 | 0072c5 |             | nt_store                             
4261:737 | DONE dir | na 16 16 | 0072c5 | (2 bytes)   |         .byte 1, { NC }              
4261:737 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4261:738 | DONE dir | na 16 16 | 0072c7 | (6 bytes)   |         .word nt_fetch, xt_store, 0062ab 
4261:738 | DONE dir | na 16 16 |        |             |                 bc 72 a0 62 ab 62        --  . r . b . b
4261:739 | DONE dir | na 16 16 | 0072cd | (1 bytes)   |         .byte 21                     
4261:739 | DONE dir | na 16 16 |        |             |                 21                       --  !
4261:740 | DONE wsp | na 16 16 |        |             |
4261:741 | DONE lbl | na 16 16 | 0072ce |             | nt_swap                              
4261:742 | DONE dir | na 16 16 | 0072ce | (2 bytes)   |         .byte 4, { NC }              
4261:742 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:743 | DONE dir | na 16 16 | 0072d0 | (6 bytes)   |         .word nt_store, xt_swap, 006ac9 
4261:743 | DONE dir | na 16 16 |        |             |                 c5 72 c4 6a c9 6a        --  . r . j . j
4261:744 | DONE dir | na 16 16 | 0072d6 | (4 bytes)   |         .byte 73, 77, 61, 70         
4261:744 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
4261:745 | DONE wsp | na 16 16 |        |             |
4261:746 | DONE lbl | na 16 16 | 0072da |             | nt_dup                               
4261:747 | DONE dir | na 16 16 | 0072da | (2 bytes)   |         .byte 3, { NC }              
4261:747 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4261:748 | DONE dir | na 16 16 | 0072dc | (6 bytes)   |         .word nt_swap, xt_dup, 00669e 
4261:748 | DONE dir | na 16 16 |        |             |                 ce 72 9a 66 9e 66        --  . r . f . f
4261:749 | DONE dir | na 16 16 | 0072e2 | (3 bytes)   |         .byte 64, 75, 70             
4261:749 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
4261:750 | DONE wsp | na 16 16 |        |             |
4261:751 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
4261:752 | DONE lbl | na 16 16 | 0072e5 |             | nt_drop                              
4261:753 | DONE dir | na 16 16 | 0072e5 | (2 bytes)   |         .byte 4, { NC }              
4261:753 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4261:754 | DONE dir | na 16 16 | 0072e7 | (6 bytes)   |         .word nt_dup, xt_drop, 006672 
4261:754 | DONE dir | na 16 16 |        |             |                 da 72 6e 66 72 66        --  . r n f r f
4261:755 | DONE dir | na 16 16 | 0072ed | (4 bytes)   |         .byte 64, 72, 6f, 70         
4261:755 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
4261:756 | DONE wsp | na 16 16 |        |             |
4261:757 | DONE cmt | na 16 16 |        |             | ; END
4262:000 | DONE wsp | na 16 16 |        |             |
4263:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4264:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
4265:000 | DONE wsp | na 16 16 |        |             |
4266:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4267:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
4268:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
4269:000 | DONE cmt | na 16 16 |        |             | ; the stack
4270:000 | DONE lbl | na 16 16 | 0072f1 |             | doconst                              
4271:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4272:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4273:000 | DONE ins | na 16 16 | 0072f1 | ca          |                 dex                  make room on Data Stack
4274:000 | DONE ins | na 16 16 | 0072f2 | ca          |                 dex                  
4275:000 | DONE ins | na 16 16 | 0072f3 | 94 00       |                 sty.dx 00            
4276:000 | DONE wsp | na 16 16 |        |             |
4277:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
4278:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
4279:000 | DONE ins | na 16 16 | 0072f5 | 68          |                 pla                  get the return address
4280:000 | DONE ins | na 16 16 | 0072f6 | 85 16       |                 sta.d 000216         
4281:000 | DONE wsp | na 16 16 |        |             |
4282:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
4283:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
4284:000 | DONE ins | na 16 16 | 0072f8 | a0 01 00    |                 ldy.# 0001           
4285:000 | DONE ins | na 16 16 | 0072fb | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
4286:000 | DONE ins | na 16 16 | 0072fd | a8          |                 tay                  
4287:000 | DONE wsp | na 16 16 |        |             |
4288:000 | DONE ins | na 16 16 | 0072fe | 60          |                 rts                  takes us to original caller
4289:000 | DONE wsp | na 16 16 |        |             |
4290:000 | DONE wsp | na 16 16 |        |             |
4291:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4292:000 | DONE cmt | na 16 16 |        |             | ; DODOES
4293:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
4294:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
4295:000 | DONE lbl | na 16 16 | 0072ff |             | dodoes                               
4296:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
4297:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
4298:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
4299:000 | DONE cmt | na 16 16 |        |             |                 ; works
4300:000 | DONE ins | na 16 16 | 0072ff | 68          |                 pla                  
4301:000 | DONE ins | na 16 16 | 007300 | 1a          |                 inc.a                
4302:000 | DONE ins | na 16 16 | 007301 | 85 1a       |                 sta.d 00021a         
4303:000 | DONE wsp | na 16 16 |        |             |
4304:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
4305:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
4306:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
4307:000 | DONE ins | na 16 16 | 007303 | ca          |                 dex                  
4308:000 | DONE ins | na 16 16 | 007304 | ca          |                 dex                  
4309:000 | DONE ins | na 16 16 | 007305 | 94 00       |                 sty.dx 00            
4310:000 | DONE wsp | na 16 16 |        |             |
4311:000 | DONE ins | na 16 16 | 007307 | 7a          |                 ply                  
4312:000 | DONE ins | na 16 16 | 007308 | c8          |                 iny                  
4313:000 | DONE wsp | na 16 16 |        |             |
4314:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
4315:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
4316:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
4317:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
4318:000 | DONE ins | na 16 16 | 007309 | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
4319:000 | DONE wsp | na 16 16 |        |             |
4320:000 | DONE wsp | na 16 16 |        |             |
4321:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4322:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
4323:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
4324:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
4325:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
4326:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
4327:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
4328:000 | DONE lbl | na 16 16 | 00730c |             | dovar                                
4329:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4330:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4331:000 | DONE ins | na 16 16 | 00730c | ca          |                 dex                  make room on Data Stack
4332:000 | DONE ins | na 16 16 | 00730d | ca          |                 dex                  
4333:000 | DONE ins | na 16 16 | 00730e | 94 00       |                 sty.dx 00            
4334:000 | DONE wsp | na 16 16 |        |             |
4335:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
4336:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
4337:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
4338:000 | DONE ins | na 16 16 | 007310 | 7a          |                 ply                  value is now TOS
4339:000 | DONE ins | na 16 16 | 007311 | c8          |                 iny                  add one because of 65816's address handling
4340:000 | DONE wsp | na 16 16 |        |             |
4341:000 | DONE ins | na 16 16 | 007312 | 60          |                 rts                  takes us to original caller
4342:000 | DONE wsp | na 16 16 |        |             |
4343:000 | DONE wsp | na 16 16 |        |             |
4344:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4345:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
4346:000 | DONE wsp | na 16 16 |        |             |
4347:000 | DONE wsp | na 16 16 |        |             |
4348:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4349:000 | DONE cmt | na 16 16 |        |             | ; INTERPRET
4350:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
4351:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
4352:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
4353:000 | DONE lbl | na 16 16 | 007313 |             | interpret                            
4354:000 | DONE lbl | na 16 16 | 007313 |             | interpret_loop                       
4355:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4356:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4357:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
4358:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
4359:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
4360:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
4361:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
4362:000 | DONE ins | na 16 16 | 007313 | 20 a9 68    |                 jsr 0068a9           ( "string" -- addr u )
4363:000 | DONE wsp | na 16 16 |        |             |
4364:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
4365:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
4366:000 | DONE ins | na 16 16 | 007316 | 98          |                 tya                  force flag check
4367:000 | DONE ins | na 16 16 | 007317 | f0 48       |                 beq 007361           
4368:000 | DONE wsp | na 16 16 |        |             |
4369:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
4370:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
4371:000 | DONE ins | na 16 16 | 007319 | 20 c7 73    |                 jsr 0073c7           
4372:000 | DONE wsp | na 16 16 |        |             |
4373:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
4374:000 | DONE cmt | na 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
4375:000 | DONE cmt | na 16 16 |        |             |                 ; we have to go see if it is a number
4376:000 | DONE ins | na 16 16 | 00731c | 20 68 63    |                 jsr 006368           TODO convert this to assembler
4377:000 | DONE ins | na 16 16 | 00731f | 20 dc 66    |                 jsr 0066dc           ( addr u -- nt | 0 )
4378:000 | DONE wsp | na 16 16 |        |             |
4379:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
4380:000 | DONE ins | na 16 16 | 007322 | 98          |                 tya                  
4381:000 | DONE ins | na 16 16 | 007323 | d0 08       |                 bne 00732d           
4382:000 | DONE wsp | na 16 16 |        |             |
4383:000 | DONE cmt | na 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
4384:000 | DONE cmt | na 16 16 |        |             |                 ; a number.
4385:000 | DONE ins | na 16 16 | 007325 | 20 6e 66    |                 jsr 00666e           TODO convert this to assembler
4386:000 | DONE wsp | na 16 16 |        |             |
4387:000 | DONE wsp | na 16 16 |        |             |
4388:000 | DONE cmt | na 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
4389:000 | DONE cmt | na 16 16 |        |             |                 ; complaining for us
4390:000 | DONE ins | na 16 16 | 007328 | 20 fe 67    |                 jsr 0067fe           ( addr u -- u | d )
4391:000 | DONE wsp | na 16 16 |        |             |
4392:000 | DONE cmt | na 16 16 |        |             |                 ; That was so much fun we should do it again!
4393:000 | DONE ins | na 16 16 | 00732b | 80 e6       |                 bra 007313           
4394:000 | DONE wsp | na 16 16 |        |             |
4395:000 | DONE lbl | na 16 16 | 00732d |             | interpret_got_name_token             
4396:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
4397:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four bytes father down.
4398:000 | DONE wsp | na 16 16 |        |             |
4399:000 | DONE cmt | na 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
4400:000 | DONE cmt | na 16 16 |        |             |                 ; really fast if Y is TOS
4401:000 | DONE ins | na 16 16 | 00732d | e8          |                 inx                  
4402:000 | DONE ins | na 16 16 | 00732e | e8          |                 inx                  
4403:000 | DONE ins | na 16 16 | 00732f | e8          |                 inx                  
4404:000 | DONE ins | na 16 16 | 007330 | e8          |                 inx                  
4405:000 | DONE wsp | na 16 16 |        |             |
4406:000 | DONE cmt | na 16 16 |        |             |                 ; This is a quicker
4407:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
4408:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
4409:000 | DONE ins | na 16 16 | 007331 | 84 2a       |                 sty.d 00022a         
4410:000 | DONE ins | na 16 16 | 007333 | c8          |                 iny                  
4411:000 | DONE ins | na 16 16 | 007334 | c8          |                 iny                  
4412:000 | DONE ins | na 16 16 | 007335 | c8          |                 iny                  
4413:000 | DONE ins | na 16 16 | 007336 | c8          |                 iny                  
4414:000 | DONE ins | na 16 16 | 007337 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4415:000 | DONE ins | na 16 16 | 00733a | a8          |                 tay                  xt is TOS
4416:000 | DONE wsp | na 16 16 |        |             |
4417:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
4418:000 | DONE ins | na 16 16 | 00733b | a5 14       |                 lda.d 000214         
4419:000 | DONE ins | na 16 16 | 00733d | d0 14       |                 bne 007353           
4420:000 | DONE wsp | na 16 16 |        |             |
4421:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
4422:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
4423:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
4424:000 | DONE ins | na 16 16 | 00733f | b2 2a       |                 lda.di 00022a        
4425:000 | DONE ins | na 16 16 | 007341 | eb          |                 xba                  flags are MSB
4426:000 | DONE ins | na 16 16 | 007342 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
4427:000 | DONE ins | na 16 16 | 007345 | f0 06       |                 beq 00734d           
4428:000 | DONE wsp | na 16 16 |        |             |
4429:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
4430:000 | DONE ins | na 16 16 | 007347 | a9 11 79    |                 lda.# 007911         
4431:000 | DONE ins | na 16 16 | 00734a | 4c 8e 73    |                 jmp 00738e           
4432:000 | DONE wsp | na 16 16 |        |             |
4433:000 | DONE lbl | na 16 16 | 00734d |             | interpret_interpret                  
4434:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
4435:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
4436:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
4437:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
4438:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
4439:000 | DONE ins | na 16 16 | 00734d | 20 d1 66    |                 jsr 0066d1           
4440:000 | DONE wsp | na 16 16 |        |             |
4441:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
4442:000 | DONE ins | na 16 16 | 007350 | 4c 13 73    |                 jmp 007313           
4443:000 | DONE wsp | na 16 16 |        |             |
4444:000 | DONE lbl | na 16 16 | 007353 |             | interpret_compile                    
4445:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
4446:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
4447:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
4448:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
4449:000 | DONE ins | na 16 16 | 007353 | b2 2a       |                 lda.di 00022a        
4450:000 | DONE ins | na 16 16 | 007355 | eb          |                 xba                  flags are MSB
4451:000 | DONE ins | na 16 16 | 007356 | 29 02 00    |                 and.# IM             Mask all but IM bit
4452:000 | DONE ins | na 16 16 | 007359 | d0 f2       |                 bne 00734d           IMMEDIATE word, execute right now
4453:000 | DONE wsp | na 16 16 |        |             |
4454:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
4455:000 | DONE ins | na 16 16 | 00735b | 20 0f 65    |                 jsr 00650f           
4456:000 | DONE ins | na 16 16 | 00735e | 4c 13 73    |                 jmp 007313           
4457:000 | DONE wsp | na 16 16 |        |             |
4458:000 | DONE lbl | na 16 16 | 007361 |             | interpret_line_done                  
4459:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
4460:000 | DONE ins | na 16 16 | 007361 | b4 02       |                 ldy.dx 02            
4461:000 | DONE ins | na 16 16 | 007363 | e8          |                 inx                  
4462:000 | DONE ins | na 16 16 | 007364 | e8          |                 inx                  
4463:000 | DONE ins | na 16 16 | 007365 | e8          |                 inx                  
4464:000 | DONE ins | na 16 16 | 007366 | e8          |                 inx                  
4465:000 | DONE wsp | na 16 16 |        |             |
4466:000 | DONE ins | na 16 16 | 007367 | 60          |                 rts                  
4467:000 | DONE wsp | na 16 16 |        |             |
4468:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4469:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
4470:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
4471:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
4472:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
4473:000 | DONE cmt | na 16 16 |        |             | ;
4474:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
4475:000 | DONE cmt | na 16 16 |        |             | ;
4476:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
4477:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
4478:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
4479:000 | DONE cmt | na 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
4480:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
4481:000 | DONE wsp | na 16 16 |        |             |
4482:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
4483:000 | DONE lbl | na 16 16 | 007368 |             | cmpl_word                            
4484:000 | DONE ins | na 16 16 | 007368 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
4485:000 | DONE ins | na 16 16 | 00736b | 80 08       |                 bra 007375           
4486:000 | DONE lbl | na 16 16 | 00736d |             | cmpl_subroutine                      
4487:000 | DONE ins | na 16 16 | 00736d | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
4488:000 | DONE ins | na 16 16 | 007370 | 80 03       |                 bra 007375           
4489:000 | DONE lbl | na 16 16 | 007372 |             | cmpl_jump                            
4490:000 | DONE ins | na 16 16 | 007372 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
4491:000 | DONE lbl | na 16 16 | 007375 |             | cmpl_common                          
4492:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
4493:000 | DONE ins | na 16 16 | 007375 | 84 06       |                 sty.d 000206         
4494:000 | DONE wsp | na 16 16 |        |             |
4495:000 | DONE ins | na 16 16 | 007377 | a8          |                 tay                  force flag check
4496:000 | DONE ins | na 16 16 | 007378 | f0 08       |                 beq 007382           came in through cmpl_word, just compile body
4497:000 | DONE wsp | na 16 16 |        |             |
4498:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
4499:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
4500:000 | DONE ins | na 16 16 | 00737a | e2 20       |                 sep 20               
4500:001 | DONE ctl | na  8 16 |        |             |         .!a8
4501:000 | DONE ins | na  8 16 | 00737c | 92 00       |                 sta.di 000200        STA (CP)
4502:000 | DONE ins | na  8 16 | 00737e | c2 20       |                 rep 20               
4502:001 | DONE ctl | na 16 16 |        |             |         .!a16
4503:000 | DONE ins | na 16 16 | 007380 | e6 00       |                 inc.d 000200         fall through to cmpl_body
4504:000 | DONE lbl | na 16 16 | 007382 |             | cmpl_body                            
4505:000 | DONE ins | na 16 16 | 007382 | 7a          |                 ply                  the return address we'll need later
4506:000 | DONE wsp | na 16 16 |        |             |
4507:000 | DONE ins | na 16 16 | 007383 | 68          |                 pla                  next value on stack is the word to compile
4508:000 | DONE ins | na 16 16 | 007384 | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
4509:000 | DONE ins | na 16 16 | 007386 | e6 00       |                 inc.d 000200         
4510:000 | DONE ins | na 16 16 | 007388 | e6 00       |                 inc.d 000200         
4511:000 | DONE wsp | na 16 16 |        |             |
4512:000 | DONE ins | na 16 16 | 00738a | 5a          |                 phy                  make sure we can get back home
4513:000 | DONE wsp | na 16 16 |        |             |
4514:000 | DONE ins | na 16 16 | 00738b | a4 06       |                 ldy.d 000206         restore Data Stack
4515:000 | DONE wsp | na 16 16 |        |             |
4516:000 | DONE ins | na 16 16 | 00738d | 60          |                 rts                  
4517:000 | DONE wsp | na 16 16 |        |             |
4518:000 | DONE wsp | na 16 16 |        |             |
4519:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4520:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
4521:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
4522:000 | DONE lbl | na 16 16 | 00738e |             | error                                
4523:000 | DONE ins | na 16 16 | 00738e | 20 94 73    |                 jsr 007394           
4524:000 | DONE ins | na 16 16 | 007391 | 4c 97 60    |                 jmp 006097           
4525:000 | DONE wsp | na 16 16 |        |             |
4526:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4527:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
4528:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
4529:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
4530:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
4531:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
4532:000 | DONE lbl | na 16 16 | 007394 |             | print_string                         
4533:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4534:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4535:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
4536:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
4537:000 | DONE ins | na 16 16 | 007394 | da          |                 phx                  
4538:000 | DONE ins | na 16 16 | 007395 | aa          |                 tax                  x16 contains address of string
4539:000 | DONE lbl | na 16 16 | 007396 |             | @                                    
4540:000 | DONE ins | na 16 16 | 007396 | e2 20       |                 sep 20               
4540:001 | DONE ctl | na  8 16 |        |             |         .!a8
4541:000 | DONE ins | na  8 16 | 007398 | bd 00 00    |                 lda.x 0000           LDA $0000,X
4542:000 | DONE ins | na  8 16 | 00739b | f0 06       |                 beq 0073a3           
4543:000 | DONE ins | na  8 16 | 00739d | 20 36 60    |                 jsr 006036           
4544:000 | DONE ins | na  8 16 | 0073a0 | e8          |                 inx                  
4545:000 | DONE ins | na  8 16 | 0073a1 | 80 f3       |                 bra 007396           
4546:000 | DONE wsp | na  8 16 |        |             |
4547:000 | DONE lbl | na  8 16 | 0073a3 |             | print_string_done                    
4548:000 | DONE ins | na  8 16 | 0073a3 | a9 0a       |                 lda.# AscLF          should be CR on some systems
4549:000 | DONE ins | na  8 16 | 0073a5 | 20 36 60    |                 jsr 006036           
4550:000 | DONE ins | na  8 16 | 0073a8 | c2 20       |                 rep 20               
4550:001 | DONE ctl | na 16 16 |        |             |         .!a16
4551:000 | DONE ins | na 16 16 | 0073aa | fa          |                 plx                  
4552:000 | DONE ins | na 16 16 | 0073ab | 60          |                 rts                  
4553:000 | DONE wsp | na 16 16 |        |             |
4554:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4555:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
4556:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
4557:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
4558:000 | DONE lbl | na 16 16 | 0073ac |             | byte_to_ascii                        
4559:000 | DONE ins | na 16 16 | 0073ac | 48          |                 pha                  
4560:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
4561:000 | DONE ins | na 16 16 | 0073ad | 4a          |                 lsr.a                
4562:000 | DONE ins | na 16 16 | 0073ae | 4a          |                 lsr.a                
4563:000 | DONE ins | na 16 16 | 0073af | 4a          |                 lsr.a                
4564:000 | DONE ins | na 16 16 | 0073b0 | 4a          |                 lsr.a                
4565:000 | DONE ins | na 16 16 | 0073b1 | 20 b5 73    |                 jsr 0073b5           
4566:000 | DONE wsp | na 16 16 |        |             |
4567:000 | DONE ins | na 16 16 | 0073b4 | 68          |                 pla                  
4568:000 | DONE wsp | na 16 16 |        |             |
4569:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
4570:000 | DONE wsp | na 16 16 |        |             |
4571:000 | DONE wsp | na 16 16 |        |             |
4572:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4573:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
4574:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
4575:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
4576:000 | DONE lbl | na 16 16 | 0073b5 |             | nibble_to_ascii                      
4577:000 | DONE ins | na 16 16 | 0073b5 | 29 0f 00    |                 and.# 000f           
4578:000 | DONE ins | na 16 16 | 0073b8 | 09 30 00    |                 ora.# 30             
4579:000 | DONE ins | na 16 16 | 0073bb | c9 3a 00    |                 cmp.# 003a           '9' + 1
4580:000 | DONE ins | na 16 16 | 0073be | 90 03       |                 bcc 0073c3           
4581:000 | DONE ins | na 16 16 | 0073c0 | 69 06 00    |                 adc.# 0006           
4582:000 | DONE lbl | na 16 16 | 0073c3 |             | @                                    
4583:000 | DONE ins | na 16 16 | 0073c3 | 20 36 60    |                 jsr 006036           
4584:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4585:000 | DONE ins | na 16 16 | 0073c6 | 60          |                 rts                  
4586:000 | DONE wsp | na 16 16 |        |             |
4587:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4588:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
4589:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
4590:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
4591:000 | DONE lbl | na 16 16 | 0073c7 |             | string_to_lowercase                  
4592:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
4593:000 | DONE ins | na 16 16 | 0073c7 | 60          |                 rts                  
4594:000 | DONE wsp | na 16 16 |        |             |
4595:000 | DONE wsp | na 16 16 |        |             |
4596:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4597:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
4598:000 | DONE wsp | na 16 16 |        |             |
4599:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
4600:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
4601:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
4602:000 | DONE lbl | na 16 16 | 0073c8 |             | hi-start                             
4603:000 | DONE dir | na 16 16 | 0073c8 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) 
4603:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
4603:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
4603:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
4603:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
4603:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
4604:000 | DONE dir | na 16 16 | 0073ed | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) 
4604:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
4604:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
4604:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
4604:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
4604:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
4605:000 | DONE wsp | na 16 16 |        |             |
4606:000 | DONE cmt | na 16 16 |        |             |         ; High flow control. Some of these can be realized with CS-ROLL and
4607:000 | DONE cmt | na 16 16 |        |             |         ; CS-PICK instead
4608:000 | DONE dir | na 16 16 | 007412 | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) 
4608:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
4608:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
4608:000 | DONE dir | na 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
4608:000 | DONE dir | na 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
4608:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
4608:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
4608:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
4608:000 | DONE dir | na 16 16 |        |             |                                          -- 
4609:000 | DONE dir | na 16 16 | 00744a | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) 
4609:000 | DONE dir | na 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
4609:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
4609:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
4609:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4609:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4609:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4610:000 | DONE dir | na 16 16 | 007476 | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) 
4610:000 | DONE dir | na 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
4610:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
4610:000 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
4610:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
4610:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
4610:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
4610:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4610:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4610:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4611:000 | DONE dir | na 16 16 | 0074ba | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) 
4611:000 | DONE dir | na 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
4611:000 | DONE dir | na 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
4611:000 | DONE dir | na 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
4611:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
4611:000 | DONE dir | na 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
4611:000 | DONE dir | na 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
4611:000 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
4611:000 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
4612:000 | DONE dir | na 16 16 | 0074f7 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) 
4612:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
4612:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4612:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
4612:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
4612:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4612:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4612:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4613:000 | DONE dir | na 16 16 | 00752b | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) 
4613:000 | DONE dir | na 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
4613:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4613:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
4613:000 | DONE dir | na 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
4613:000 | DONE dir | na 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
4613:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
4613:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
4613:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
4613:000 | DONE dir | na 16 16 |        |             |                                          -- 
4614:000 | DONE wsp | na 16 16 |        |             |
4615:000 | DONE cmt | na 16 16 |        |             |         ; DEFER and friends. Code taken from ANSI Forth specifications. Many of
4616:000 | DONE cmt | na 16 16 |        |             |         ; these will be moved to assembler code in due course
4617:000 | DONE dir | na 16 16 | 00756b | (45 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 20, 63, 72, 65, 61, 74, (...) 
4617:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 65 66 65 72 20  --  :   d e f e r  
4617:000 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65 20 5b  --  c r e a t e   [
4617:000 | DONE dir | na 16 16 |        |             |                 27 5d 20 61 62 6f 72 74  --  ' ]   a b o r t
4617:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 64 6f 65 73 3e  --    ,   d o e s >
4617:000 | DONE dir | na 16 16 |        |             |                 20 40 20 65 78 65 63 75  --    @   e x e c u
4617:000 | DONE dir | na 16 16 |        |             |                 74 65 20 3b 20           --  t e   ;  
4618:000 | DONE dir | na 16 16 | 007598 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 21, 20, 3e, 62, 6f, 64, (...) 
4618:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 65 66 65 72 21  --  :   d e f e r !
4618:000 | DONE dir | na 16 16 |        |             |                 20 3e 62 6f 64 79 20 21  --    > b o d y   !
4618:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
4619:000 | DONE dir | na 16 16 | 0075ab | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 40, 20, 3e, 62, 6f, 64, (...) 
4619:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 65 66 65 72 40  --  :   d e f e r @
4619:000 | DONE dir | na 16 16 |        |             |                 20 3e 62 6f 64 79 20 40  --    > b o d y   @
4619:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
4620:000 | DONE dir | na 16 16 | 0075be | (76 bytes)  |         .byte 3a, 20, 69, 73, 20, 73, 74, 61, 74, 65, 20, 40, 20, (...) 
4620:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 73 20 73 74 61  --  :   i s   s t a
4620:000 | DONE dir | na 16 16 |        |             |                 74 65 20 40 20 69 66 20  --  t e   @   i f  
4620:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4620:000 | DONE dir | na 16 16 |        |             |                 20 5b 27 5d 20 70 6f 73  --    [ ' ]   p o s
4620:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 64 65  --  t p o n e   d e
4620:000 | DONE dir | na 16 16 |        |             |                 66 65 72 21 20 65 6c 73  --  f e r !   e l s
4620:000 | DONE dir | na 16 16 |        |             |                 65 20 27 20 64 65 66 65  --  e   '   d e f e
4620:000 | DONE dir | na 16 16 |        |             |                 72 21 20 74 68 65 6e 20  --  r !   t h e n  
4620:000 | DONE dir | na 16 16 |        |             |                 3b 20 69 6d 6d 65 64 69  --  ;   i m m e d i
4620:000 | DONE dir | na 16 16 |        |             |                 61 74 65 20              --  a t e  
4621:000 | DONE dir | na 16 16 | 00760a | (83 bytes)  |         .byte 3a, 20, 61, 63, 74, 69, 6f, 6e, 2d, 6f, 66, 20, 73, (...) 
4621:000 | DONE dir | na 16 16 |        |             |                 3a 20 61 63 74 69 6f 6e  --  :   a c t i o n
4621:000 | DONE dir | na 16 16 |        |             |                 2d 6f 66 20 73 74 61 74  --  - o f   s t a t
4621:000 | DONE dir | na 16 16 |        |             |                 65 20 40 20 69 66 20 70  --  e   @   i f   p
4621:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
4621:000 | DONE dir | na 16 16 |        |             |                 5b 27 5d 20 70 6f 73 74  --  [ ' ]   p o s t
4621:000 | DONE dir | na 16 16 |        |             |                 70 6f 6e 65 20 64 65 66  --  p o n e   d e f
4621:000 | DONE dir | na 16 16 |        |             |                 65 72 40 20 65 6c 73 65  --  e r @   e l s e
4621:000 | DONE dir | na 16 16 |        |             |                 20 27 20 64 65 66 65 72  --    '   d e f e r
4621:000 | DONE dir | na 16 16 |        |             |                 40 20 74 68 65 6e 20 3b  --  @   t h e n   ;
4621:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
4621:000 | DONE dir | na 16 16 |        |             |                 74 65 20                 --  t e  
4622:000 | DONE wsp | na 16 16 |        |             |
4623:000 | DONE cmt | na 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
4624:000 | DONE cmt | na 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
4625:000 | DONE cmt | na 16 16 |        |             |         ; stuff
4626:000 | DONE cmt | na 16 16 |        |             | ;       .byte ": fm/mod dup >r sm/rem dup 0< if swap r> + swap 1+ else r> drop "
4627:000 | DONE cmt | na 16 16 |        |             | ;       .byte "then ; "
4628:000 | DONE dir | na 16 16 | 00765d | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
4628:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
4628:000 | DONE dir | na 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
4628:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
4628:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
4628:000 | DONE dir | na 16 16 |        |             |                 20                       --   
4629:000 | DONE dir | na 16 16 | 00767e | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
4629:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
4629:000 | DONE dir | na 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
4629:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
4629:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
4630:000 | DONE dir | na 16 16 | 007698 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
4630:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
4630:000 | DONE dir | na 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
4630:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
4630:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
4630:000 | DONE dir | na 16 16 |        |             |                 20                       --   
4631:000 | DONE dir | na 16 16 | 0076b9 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
4631:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
4631:000 | DONE dir | na 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
4631:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
4631:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
4632:000 | DONE wsp | na 16 16 |        |             |
4633:000 | DONE cmt | na 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
4634:000 | DONE cmt | na 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
4635:000 | DONE cmt | na 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
4636:000 | DONE dir | na 16 16 | 0076d3 | (29 bytes)  |         .byte 3a, 20, 75, 2e, 20, 30, 20, 3c, 23, 20, 23, 73, 20, (...) 
4636:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 20 30 20 3c  --  :   u .   0   <
4636:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 23 3e 20  --  #   # s   # >  
4636:000 | DONE dir | na 16 16 |        |             |                 74 79 70 65 20 73 70 61  --  t y p e   s p a
4636:000 | DONE dir | na 16 16 |        |             |                 63 65 20 3b 20           --  c e   ;  
4637:000 | DONE dir | na 16 16 | 0076f0 | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
4637:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
4637:000 | DONE dir | na 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
4637:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
4637:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
4637:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
4637:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4638:000 | DONE dir | na 16 16 | 00771c | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
4638:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
4638:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
4638:000 | DONE dir | na 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
4638:000 | DONE dir | na 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
4638:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
4638:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
4638:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
4638:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4639:000 | DONE dir | na 16 16 | 007758 | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
4639:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
4639:000 | DONE dir | na 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
4639:000 | DONE dir | na 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
4639:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4640:000 | DONE dir | na 16 16 | 007774 | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
4640:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
4640:000 | DONE dir | na 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
4640:000 | DONE dir | na 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
4640:000 | DONE dir | na 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
4640:000 | DONE dir | na 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
4640:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
4641:000 | DONE dir | na 16 16 | 00779f | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
4641:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
4641:000 | DONE dir | na 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
4641:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
4641:000 | DONE dir | na 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
4641:000 | DONE dir | na 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
4641:000 | DONE dir | na 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
4642:000 | DONE dir | na 16 16 | 0077cd | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
4642:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
4642:000 | DONE dir | na 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
4642:000 | DONE dir | na 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
4642:000 | DONE dir | na 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
4642:000 | DONE dir | na 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
4642:000 | DONE dir | na 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
4642:000 | DONE dir | na 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
4642:000 | DONE dir | na 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
4643:000 | DONE cmt | na 16 16 |        |             | ;       .byte ": . dup abs 0 <# #s rot sign #> type space ; "
4644:000 | DONE wsp | na 16 16 |        |             |
4645:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
4646:000 | DONE cmt | na 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
4647:000 | DONE cmt | na 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
4648:000 | DONE dir | na 16 16 | 00780a | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
4648:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
4648:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
4648:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
4648:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
4648:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
4649:000 | DONE dir | na 16 16 | 00782d | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
4649:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
4649:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
4649:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
4649:000 | DONE dir | na 16 16 |        |             |                 32 38 2e 20 46 65 62 20  --  2 8 .   F e b  
4649:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
4650:000 | DONE dir | na 16 16 | 007852 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
4650:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
4650:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
4650:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
4650:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
4650:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
4650:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
4650:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
4651:000 | DONE dir | na 16 16 | 007885 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
4651:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
4651:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
4651:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
4651:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
4651:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
4651:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
4651:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
4652:000 | DONE dir | na 16 16 | 0078b9 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
4652:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
4652:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
4652:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
4652:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
4653:000 | DONE lbl | na 16 16 | 0078d5 |             | hi-end                               
4654:000 | DONE wsp | na 16 16 |        |             |
4655:000 | DONE wsp | na 16 16 |        |             |
4656:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4657:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
4658:000 | DONE wsp | na 16 16 |        |             |
4659:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
4659:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
4659:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
4659:003 | DONE cmt | na 16 16 |        |             | ; This version:  21. Feb 2017
4659:004 | DONE wsp | na 16 16 |        |             |
4659:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
4659:006 | DONE wsp | na 16 16 |        |             |
4659:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4659:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
4659:009 | DONE wsp | na 16 16 |        |             |
4659:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
4659:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
4659:012 | DONE cmt | na 16 16 |        |             | ; character
4659:013 | DONE wsp | na 16 16 |        |             |
4659:014 | DONE lbl | na 16 16 | 0078d5 |             | s_ok                                 
4659:015 | DONE dir | na 16 16 | 0078d5 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
4659:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
4659:016 | DONE lbl | na 16 16 | 0078d9 |             | s_compiled                           
4659:017 | DONE dir | na 16 16 | 0078d9 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
4659:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
4659:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
4659:018 | DONE wsp | na 16 16 |        |             |
4659:019 | DONE wsp | na 16 16 |        |             |
4659:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4659:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
4659:022 | DONE wsp | na 16 16 |        |             |
4659:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
4659:024 | DONE wsp | na 16 16 |        |             |
4659:025 | DONE lbl | na 16 16 | 0078e3 |             | es_allot                             
4659:026 | DONE dir | na 16 16 | 0078e3 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
4659:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
4659:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
4659:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
4659:027 | DONE lbl | na 16 16 | 0078f7 |             | es_channel                           
4659:028 | DONE dir | na 16 16 | 0078f7 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
4659:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
4659:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
4659:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
4659:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
4659:029 | DONE lbl | na 16 16 | 007911 |             | es_componly                          
4659:030 | DONE dir | na 16 16 | 007911 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
4659:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
4659:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
4659:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4659:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
4659:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
4659:031 | DONE lbl | na 16 16 | 007932 |             | es_defer                             
4659:032 | DONE dir | na 16 16 | 007932 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
4659:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
4659:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
4659:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
4659:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
4659:033 | DONE lbl | na 16 16 | 00794f |             | es_divzero                           
4659:034 | DONE dir | na 16 16 | 00794f | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
4659:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
4659:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
4659:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
4659:035 | DONE lbl | na 16 16 | 007960 |             | es_error                             
4659:036 | DONE dir | na 16 16 | 007960 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
4659:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
4659:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
4659:037 | DONE lbl | na 16 16 | 00796c |             | es_intonly                           
4659:038 | DONE dir | na 16 16 | 00796c | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
4659:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
4659:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
4659:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
4659:039 | DONE lbl | na 16 16 | 007982 |             | es_noname                            
4659:040 | DONE dir | na 16 16 | 007982 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
4659:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
4659:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
4659:040 | DONE dir | na 16 16 |        |             |                                          -- 
4659:041 | DONE lbl | na 16 16 | 007992 |             | es_radix                             
4659:042 | DONE dir | na 16 16 | 007992 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
4659:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
4659:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
4659:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
4659:043 | DONE lbl | na 16 16 | 0079a9 |             | es_refill1                           
4659:044 | DONE dir | na 16 16 | 0079a9 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
4659:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
4659:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
4659:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
4659:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
4659:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
4659:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
4659:045 | DONE lbl | na 16 16 | 0079d7 |             | es_refill2                           
4659:046 | DONE dir | na 16 16 | 0079d7 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
4659:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
4659:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
4659:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
4659:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
4659:046 | DONE dir | na 16 16 |        |             |                                          -- 
4659:047 | DONE lbl | na 16 16 | 0079f7 |             | es_state                             
4659:048 | DONE dir | na 16 16 | 0079f7 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
4659:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
4659:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
4659:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
4659:048 | DONE dir | na 16 16 |        |             |                                          -- 
4659:049 | DONE lbl | na 16 16 | 007a0f |             | es_underflow                         
4659:050 | DONE dir | na 16 16 | 007a0f | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
4659:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
4659:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
4659:050 | DONE dir | na 16 16 |        |             |                                          -- 
4659:051 | DONE lbl | na 16 16 | 007a1f |             | es_syntax                            
4659:052 | DONE dir | na 16 16 | 007a1f | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
4659:052 | DONE dir | na 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
4659:052 | DONE dir | na 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
4659:053 | DONE wsp | na 16 16 |        |             |
4659:054 | DONE wsp | na 16 16 |        |             |
4659:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4659:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
4659:057 | DONE wsp | na 16 16 |        |             |
4659:058 | DONE lbl | na 16 16 | 007a2e |             | vt100_page                           
4659:059 | DONE dir | na 16 16 | 007a2e | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
4659:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
4659:060 | DONE lbl | na 16 16 | 007a33 |             | vt100_home                           
4659:061 | DONE dir | na 16 16 | 007a33 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
4659:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
4659:062 | DONE wsp | na 16 16 |        |             |
4659:063 | DONE wsp | na 16 16 |        |             |
4659:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4659:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
4659:066 | DONE wsp | na 16 16 |        |             |
4659:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
4659:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
4659:069 | DONE wsp | na 16 16 |        |             |
4659:070 | DONE lbl | na 16 16 | 007a37 |             | tests_prev_cmd                       
4659:071 | DONE dir | na 16 16 | 007a37 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
4659:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
4659:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
4659:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
4659:072 | DONE lbl | na 16 16 | 007a4a |             | tests_next_cmd                       
4659:073 | DONE dir | na 16 16 | 007a4a | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
4659:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
4659:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
4659:074 | DONE wsp | na 16 16 |        |             |
4659:075 | DONE wsp | na 16 16 |        |             |
4659:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4659:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
4659:078 | DONE wsp | na 16 16 |        |             |
4659:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
4659:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
4659:081 | DONE wsp | na 16 16 |        |             |
4659:082 | DONE lbl | na 16 16 | 007a59 |             | alphastring                          
4659:083 | DONE dir | na 16 16 | 007a59 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
4659:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
4659:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
4659:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
4659:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
4659:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
4660:000 | DONE wsp | na 16 16 |        |             |
4661:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4662:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
4663:000 | DONE wsp | na 16 16 |        |             |
4664:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
4665:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
4666:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
4667:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
4668:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
4669:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
4670:000 | DONE wsp | na 16 16 |        |             |
4671:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
4672:000 | DONE cmt | na 16 16 |        |             |                 ; tya
4673:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
4674:000 | DONE cmt | na 16 16 |        |             |                 ; xba
4675:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
4676:000 | DONE cmt | na 16 16 |        |             |                 ; tya
4677:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
4678:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
4679:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
4680:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
4681:000 | DONE wsp | na 16 16 |        |             |
4682:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
4683:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
4684:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
4685:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
4686:000 | DONE wsp | na 16 16 |        |             |
4687:000 | DONE wsp | na 16 16 |        |             |
4688:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4689:000 | DONE cmt | na 16 16 |        |             | ; END
4690:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abortq_done                 : 0063a3
- abortq_rt                   : 006399
- accept_bs                   : 00641b
- accept_eol                  : 006413
- accept_loop                 : 0063c8
- accept_nonzero              : 0063bb
- allot_done                  : 006471
- allot_error                 : 006460
- allot_minus                 : 006466
- allot_real_gone             : 006473
- alphastring                 : 007a59
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- branch_rt                   : 0064ae
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 0073ac
- char_got_char               : 0064f8
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 007382
- cmpl_common                 : 007375
- cmpl_jump                   : 007372
- cmpl_subroutine             : 00736d
- cmpl_word                   : 007368
- co                          : 000004
- compile_as_code             : 00650f
- compile_as_jump             : 00650f
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006560
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 0072f1
- dodoes                      : 0072ff
- does_rt                     : 006658
- dots_done                   : 006213
- dots_loop                   : 0061f9
- dots_not_empty              : 0061f3
- dovar                       : 00730c
- dp                          : 000202
- dq_case_done                : 0065e5
- dq_checkbase                : 0065e8
- dq_notdigit                 : 0065ef
- dq_success                  : 0065fa
- dsp0                        : 0002f8
- dump_byte_loop              : 00667b
- dump_done                   : 006690
- dump_line_loop              : 006675
- equal_not                   : 0062f1
- error                       : 00738e
- es_allot                    : 0078e3
- es_channel                  : 0078f7
- es_componly                 : 007911
- es_defer                    : 007932
- es_divzero                  : 00794f
- es_error                    : 007960
- es_intonly                  : 00796c
- es_noname                   : 007982
- es_radix                    : 007992
- es_refill1                  : 0079a9
- es_refill2                  : 0079d7
- es_state                    : 0079f7
- es_syntax                   : 007a1f
- es_underflow                : 007a0f
- execute_ip                  : 0066ce
- find-name_all_chars         : 00670a
- find-name_char_nomatcnt_8   : 006706
- find-name_chars             : 0066fb
- find-name_done              : 006730
- find-name_failure_16        : 00672d
- find-name_loop              : 0066e6
- find-name_next_entry        : 0066ef
- find-name_success           : 006727
- get_chr                     : 006047
- get_chr_wait                : 00604c
- hashs_loop                  : 006288
- have_chr?                   : 006056
- hi-end                      : 0078d5
- hi-start                    : 0073c8
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- interpret                   : 007313
- interpret_compile           : 007353
- interpret_got_name_token    : 00732d
- interpret_interpret         : 00734d
- interpret_line_done         : 007361
- interpret_loop              : 007313
- literal_rt                  : 006787
- max_drop                    : 0067c2
- max_nip                     : 0067c4
- max_no_ov                   : 0067c0
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 0067d5
- min_nip                     : 0067d7
- min_no_ov                   : 0067d3
- mstar_abs_nos               : 0067a0
- mstar_umstar                : 0067aa
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 0073b5
- not-equal_equal             : 0060fc
- nt_2drop                    : 007269
- nt_2dup                     : 006fea
- nt_abort                    : 006d96
- nt_abortq                   : 006d88
- nt_abs                      : 006ff6
- nt_accept                   : 0071fd
- nt_again                    : 006f66
- nt_allot                    : 006fa2
- nt_and                      : 0070b0
- nt_backslash                : 00720b
- nt_base                     : 006e6d
- nt_begin                    : 006f73
- nt_bell                     : 006c91
- nt_bl                       : 006e1e
- nt_bounds                   : 0072a2
- nt_bracketchar              : 006ec5
- nt_brackettick              : 006eba
- nt_branch                   : 006f58
- nt_bye                      : 006c3e
- nt_c-comma                  : 0070c5
- nt_c-fetch                  : 0070cf
- nt_c-store                  : 0070d9
- nt_cellplus                 : 006caa
- nt_cells                    : 006e89
- nt_char                     : 00708f
- nt_charplus                 : 006cb7
- nt_chars                    : 006c9d
- nt_cold                     : 006c49
- nt_colon                    : 006f99
- nt_comma                    : 0071f4
- nt_compile-only             : 006ee2
- nt_compilecomma             : 006f80
- nt_constant                 : 007034
- nt_count                    : 006d7b
- nt_cr                       : 006dd5
- nt_create                   : 006fc9
- nt_dabs                     : 006cf8
- nt_decimal                  : 006cc4
- nt_depth                    : 007027
- nt_digitq                   : 007294
- nt_dnegate                  : 006d04
- nt_does                     : 006fbc
- nt_dot                      : 006e59
- nt_dotquote                 : 006e96
- nt_dots                     : 006e43
- nt_dplus                    : 006d29
- nt_drop                     : 0072e5
- nt_dtos                     : 006d13
- nt_dump                     : 006c75
- nt_dup                      : 0072da
- nt_equal                    : 007158
- nt_evaluate                 : 006e79
- nt_execute                  : 00724e
- nt_false                    : 007161
- nt_fetch                    : 0072bc
- nt_find-name                : 0071b2
- nt_fromr                    : 007280
- nt_greater                  : 007132
- nt_hash                     : 006e0b
- nt_hashs                    : 006df5
- nt_here                     : 00725d
- nt_hex                      : 006cd3
- nt_hold                     : 006de9
- nt_immediate                : 006ef6
- nt_invert                   : 007081
- nt_latestnt                 : 006f29
- nt_latestxt                 : 006f39
- nt_leftbracket              : 006f20
- nt_less                     : 00713b
- nt_lessnumber               : 006e14
- nt_literal                  : 006ed3
- nt_max                      : 007068
- nt_min                      : 00705d
- nt_minus                    : 0070ed
- nt_mrot                     : 007237
- nt_mstar                    : 006d66
- nt_name-int                 : 006dc5
- nt_name-string              : 006fd7
- nt_negate                   : 007073
- nt_nip                      : 00722c
- nt_not-equal                : 00714e
- nt_number                   : 007189
- nt_numbermore               : 006ddf
- nt_one                      : 0071a0
- nt_one-minus                : 0070ff
- nt_one-plus                 : 007109
- nt_or                       : 0070a6
- nt_over                     : 0072b0
- nt_pad                      : 006e62
- nt_page                     : 006cec
- nt_parse                    : 006da3
- nt_parse-name               : 0071d1
- nt_plus                     : 0070f6
- nt_plusstore                : 0070bb
- nt_postpone                 : 006f07
- nt_qdup                     : 007214
- nt_question                 : 006dbc
- nt_quit                     : 006db0
- nt_refill                   : 0071c3
- nt_rfetch                   : 007276
- nt_rightbracket             : 006f17
- nt_rot                      : 007243
- nt_semicolon                : 006f90
- nt_sign                     : 006dff
- nt_sliteral                 : 006eaa
- nt_smrem                    : 006d33
- nt_source                   : 007019
- nt_source-id                : 0071e3
- nt_space                    : 006e36
- nt_spaces                   : 006e28
- nt_squote                   : 006ea0
- nt_star                     : 006d5d
- nt_state                    : 007001
- nt_stod                     : 006d1e
- nt_store                    : 0072c5
- nt_swap                     : 0072ce
- nt_tick                     : 007054
- nt_to-in                    : 00700e
- nt_tobody                   : 006faf
- nt_tonumber                 : 00717a
- nt_tor                      : 00728a
- nt_true                     : 00716e
- nt_tuck                     : 007220
- nt_two                      : 007197
- nt_two-star                 : 0070e3
- nt_type                     : 006e4d
- nt_udmod                    : 006d41
- nt_ummod                    : 006d4f
- nt_umstar                   : 006d70
- nt_unused                   : 006cde
- nt_variable                 : 007044
- nt_words                    : 006c68
- nt_wordsize                 : 006c81
- nt_wordsnsizes              : 006c55
- nt_xor                      : 00709b
- nt_zbranch                  : 006f49
- nt_zero                     : 0071a9
- nt_zero-equal               : 007144
- nt_zero-less                : 007128
- nt_zero-more                : 00711e
- nt_zero-notequal            : 007113
- number_dot                  : 006816
- number_loop                 : 00683d
- number_main                 : 00682f
- number_ok                   : 006849
- number_single               : 006871
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 0068bb
- parse-name_found            : 0068cf
- parse-name_loop             : 0068ae
- parse_found_delimiter       : 0068fb
- parse_loop                  : 0068ee
- parse_reached_eol           : 0068ff
- physicalram                 : 007fff
- piblen                      : 000210
- pp_got_nt                   : 006934
- pp_got_word                 : 006929
- pp_not_immediate            : 006944
- print_string                : 007394
- print_string_done           : 0073a3
- put_chr                     : 006036
- put_chr_wait                : 00603c
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 006991
- refill_src_not_kbd          : 006988
- reset_hardware              : 006000
- s_compiled                  : 0078d9
- s_ok                        : 0078d5
- scratch                     : 000220
- sign_plus                   : 0069cc
- sl_loop                     : 0069f1
- sliteral_rt                 : 006a1c
- smrem_1                     : 006a6c
- smrem_1_1                   : 006a70
- smrem_2                     : 006a87
- smrem_2_1                   : 006a8b
- spaces_done                 : 006aaf
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- stod_pos                    : 0069bf
- string_to_lowercase         : 0073c7
- tests_next_cmd              : 007a4a
- tests_prev_cmd              : 007a37
- tick_have_nt                : 00638b
- tick_have_word              : 00637f
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpbranch                   : 00022a
- tmpdsp                      : 000204
- tmptos                      : 000206
- tohold                      : 000228
- toin                        : 000212
- tonumber_done               : 006179
- tonumber_loop               : 006135
- tonumber_ok                 : 006144
- type_done                   : 006af5
- type_loop                   : 006ae9
- ummod_complete              : 006bbe
- ummod_notzero               : 006b7f
- ummod_overflow              : 006bb5
- ummod_shift                 : 006b97
- umstar_counter              : 006b4e
- umstar_loop                 : 006b40
- umstar_one_nos              : 006b61
- umstar_one_tos              : 006b5e
- umstar_two_common           : 006b6d
- umstar_two_nos              : 006b6c
- umstar_two_tos              : 006b68
- umstar_zero                 : 006b57
- vt100_home                  : 007a33
- vt100_page                  : 007a2e
- words_common                : 006be9
- words_loop                  : 006bf3
- words_nosizes               : 006c10
- workword                    : 00021e
- xt_2drop                    : 006361
- xt_2dup                     : 006368
- xt_abort                    : 006097
- xt_abortq                   : 00638f
- xt_abs                      : 0063ac
- xt_accept                   : 0063b5
- xt_again                    : 006439
- xt_allot                    : 00644f
- xt_and                      : 006478
- xt_backslash                : 0062c7
- xt_base                     : 00647f
- xt_begin                    : 00648e
- xt_bell                     : 006487
- xt_bl                       : 006495
- xt_bounds                   : 00649d
- xt_bracketchar              : 0062c0
- xt_brackettick              : 0062b1
- xt_branch                   : 0064a7
- xt_bye                      : 0064bb
- xt_c-comma                  : 0064bf
- xt_c-fetch                  : 0064cd
- xt_c-store                  : 0064d9
- xt_cellplus                 : 0064e9
- xt_char                     : 0064ec
- xt_chars                    : 006504
- xt_cold                     : 006063
- xt_colon                    : 006223
- xt_comma                    : 006217
- xt_compile-only             : 006506
- xt_compilecomma             : 00650f
- xt_constant                 : 006525
- xt_count                    : 00653f
- xt_cr                       : 00654e
- xt_create                   : 006555
- xt_dabs                     : 00661b
- xt_decimal                  : 006622
- xt_depth                    : 006628
- xt_digitq                   : 0065c8
- xt_dnegate                  : 006637
- xt_does                     : 00664b
- xt_dot                      : 00618e
- xt_dotparen                 : 0061ad
- xt_dotquote                 : 0061bb
- xt_dots                     : 0061cf
- xt_dplus                    : 006604
- xt_drop                     : 00666e
- xt_dtos                     : 006616
- xt_dump                     : 006673
- xt_dup                      : 00669a
- xt_equal                    : 0062e8
- xt_evaluate                 : 00669f
- xt_execute                  : 0066d1
- xt_fetch                    : 0062ac
- xt_find-name                : 0066dc
- xt_fromr                    : 00695d
- xt_greater                  : 006109
- xt_greater_nip              : 00611a
- xt_greater_no_ov            : 006117
- xt_hash                     : 00625e
- xt_hashs                    : 006288
- xt_here                     : 006742
- xt_hex                      : 006749
- xt_hold                     : 00674f
- xt_immediate                : 006733
- xt_invert                   : 00673c
- xt_latestnt                 : 00675d
- xt_latestxt                 : 006765
- xt_leftbracket              : 0062b7
- xt_less                     : 0060df
- xt_less_nip                 : 0060f0
- xt_less_no_ov               : 0060ed
- xt_lessnumber               : 0060ff
- xt_literal                  : 006775
- xt_max                      : 0067b4
- xt_min                      : 0067c7
- xt_minus                    : 0062d4
- xt_mrot                     : 0062df
- xt_mstar                    : 006794
- xt_name-int                 : 0067da
- xt_name-string              : 0067e3
- xt_negate                   : 0067f4
- xt_nip                      : 0067fb
- xt_not-equal                : 0060f3
- xt_number                   : 0067fe
- xt_numbermore               : 006279
- xt_one                      : 006349
- xt_one-minus                : 006351
- xt_one-plus                 : 006353
- xt_or                       : 006882
- xt_over                     : 006889
- xt_pad                      : 006890
- xt_page                     : 00689c
- xt_parse                    : 0068db
- xt_parse-name               : 0068a9
- xt_plus                     : 0062cc
- xt_plusstore                : 00690e
- xt_postpone                 : 00691e
- xt_qdup                     : 006298
- xt_question                 : 006291
- xt_quit                     : 00609f
- xt_refill                   : 006965
- xt_rfetch                   : 006954
- xt_rightbracket             : 0062ba
- xt_rot                      : 006998
- xt_semicolon                : 006245
- xt_sign                     : 0069c3
- xt_sliteral                 : 0069d1
- xt_smrem                    : 006a32
- xt_source                   : 006a8c
- xt_source-id                : 006a99
- xt_space                    : 006aa0
- xt_spaces                   : 006aa7
- xt_squote                   : 0069a1
- xt_star                     : 006ab4
- xt_state                    : 006abc
- xt_stod                     : 0069b3
- xt_store                    : 0062a0
- xt_swap                     : 006ac4
- xt_tick                     : 006373
- xt_to-in                    : 006121
- xt_tobody                   : 00611d
- xt_tonumber                 : 006129
- xt_tor                      : 006186
- xt_true                     : 006aca
- xt_tuck                     : 006ad2
- xt_two                      : 006355
- xt_two-star                 : 00635d
- xt_type                     : 006adb
- xt_udmod                    : 006afc
- xt_ummod                    : 006b76
- xt_umstar                   : 006b17
- xt_unused                   : 006bc7
- xt_variable                 : 006bd3
- xt_words                    : 006be7
- xt_wordsize                 : 006c24
- xt_wordsnsizes              : 006be0
- xt_xor                      : 006c37
- xt_zbranch                  : 00632b
- xt_zero                     : 0062f4
- xt_zero-equal               : 0062fc
- xt_zero-less                : 006308
- xt_zero-more                : 006320
- xt_zero-notequal            : 006314
- z_2drop                     : 006367
- z_2dup                      : 006372
- z_abort                     : 0060de
- z_abortq                    : 0063ab
- z_abs                       : 0063b4
- z_accept                    : 006438
- z_again                     : 00644e
- z_allot                     : 006477
- z_and                       : 00647e
- z_backslash                 : 0062cb
- z_base                      : 006486
- z_begin                     : 006494
- z_bell                      : 00648d
- z_bl                        : 00649c
- z_bounds                    : 0064a6
- z_bracketchar               : 0062c6
- z_brackettick               : 0062b7
- z_branch                    : 0064ad
- z_bye                       : 0064be
- z_c-comma                   : 0064cc
- z_c-fetch                   : 0064d8
- z_c-store                   : 0064e8
- z_cellplus                  : 0064eb
- z_char                      : 006503
- z_chars                     : 006505
- z_cold                      : 0060de
- z_colon                     : 006244
- z_comma                     : 006222
- z_compile-only              : 00650e
- z_compilecomma              : 006524
- z_constant                  : 00653e
- z_count                     : 00654d
- z_cr                        : 006554
- z_create                    : 0065c7
- z_dabs                      : 006621
- z_decimal                   : 006627
- z_depth                     : 006636
- z_digitq                    : 006603
- z_dnegate                   : 00664a
- z_does                      : 006657
- z_dot                       : 0061ac
- z_dotparen                  : 0061ba
- z_dotquote                  : 0061cf
- z_dots                      : 006216
- z_dplus                     : 006615
- z_drop                      : 006672
- z_dtos                      : 00661a
- z_dump                      : 006699
- z_dup                       : 00669e
- z_equal                     : 0062f3
- z_evaluate                  : 0066cd
- z_execute                   : 0066db
- z_fetch                     : 0062b0
- z_find-name                 : 006732
- z_fromr                     : 006964
- z_greater                   : 00611c
- z_hash                      : 006278
- z_hashs                     : 006290
- z_here                      : 006748
- z_hex                       : 00674e
- z_hold                      : 00675c
- z_immediate                 : 00673b
- z_invert                    : 006741
- z_latestnt                  : 006764
- z_latestxt                  : 006774
- z_leftbracket               : 0062b9
- z_less                      : 0060f2
- z_lessnumber                : 006108
- z_literal                   : 006786
- z_max                       : 0067c6
- z_min                       : 0067d9
- z_minus                     : 0062de
- z_mrot                      : 0062e7
- z_mstar                     : 0067b3
- z_name-int                  : 0067e2
- z_name-string               : 0067f3
- z_negate                    : 0067fa
- z_nip                       : 0067fd
- z_not-equal                 : 0060fe
- z_number                    : 006881
- z_numbermore                : 006287
- z_one                       : 006350
- z_one-minus                 : 006352
- z_one-plus                  : 006354
- z_or                        : 006888
- z_over                      : 00688f
- z_pad                       : 00689b
- z_page                      : 0068a8
- z_parse                     : 00690d
- z_parse-name                : 00690d
- z_plus                      : 0062d3
- z_plusstore                 : 00691d
- z_postpone                  : 006953
- z_qdup                      : 00629f
- z_question                  : 006297
- z_quit                      : 0060de
- z_refill                    : 006997
- z_rfetch                    : 00695c
- z_rightbracket              : 0062bf
- z_rot                       : 0069a0
- z_semicolon                 : 00625d
- z_sign                      : 0069d0
- z_sliteral                  : 006a1b
- z_smrem                     : 006a8b
- z_source                    : 006a98
- z_source-id                 : 006a9f
- z_space                     : 006aa6
- z_spaces                    : 006ab3
- z_squote                    : 0069b2
- z_star                      : 006abb
- z_state                     : 006ac3
- z_stod                      : 0069c2
- z_store                     : 0062ab
- z_swap                      : 006ac9
- z_tick                      : 00638e
- z_to-in                     : 006128
- z_tobody                    : 006120
- z_tonumber                  : 006185
- z_tor                       : 00618d
- z_true                      : 006ad1
- z_tuck                      : 006ada
- z_two                       : 00635c
- z_two-star                  : 006360
- z_type                      : 006afb
- z_udmod                     : 006b17
- z_ummod                     : 006bc6
- z_umstar                    : 006b75
- z_unused                    : 006bd2
- z_variable                  : 006bdf
- z_words                     : 006c23
- z_wordsize                  : 006c36
- z_wordsnsizes               : 006c23
- z_xor                       : 006c3d
- z_zbranch                   : 006331
- z_zero                      : 0062fb
- z_zero-equal                : 006307
- z_zero-less                 : 006313
- z_zero-more                 : 00632a
- z_zero-notequal             : 00631f
- zb_done                     : 006343
- zb_zero                     : 00633a
- zbranch_rt                  : 006332
- ze_not_zero                 : 006304
- zero-less-is-less           : 006310
- zero-more_done              : 006329
- zero-more_true              : 006328
- zne_is_zero                 : 00631c
