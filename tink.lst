A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 24. January 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sun Feb 12 23:32:12 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.03902 seconds
Code origin: 006000
Bytes of machine code: 2752

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 12. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 ; start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 12. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   ; start of available RAM for Dictionary
  16:017 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   ; end of installed RAM
  16:018 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   ; end of available RAM (single task mode)
  16:019 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   ; end of available RAM (multitask mode)
  16:020 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           ; buffer area start
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:023 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         ; maximum size for input buffers
  16:026 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         ; start of 256 byte input buffer 1
  16:027 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         ; start of 256 byte input buffer 2
  16:028 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         ; size of PAD, must be > &84
  16:029 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         ; distance from CP to PAD (holds number strings)
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:032 | DONE wsp | em  8  8 |        |             |
  16:033 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 ; single task Direct Page (DP) start
  16:034 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 ; multitask Stack (S) area start
  16:035 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 ; multitask Direct Page (DP) area start
  16:036 | DONE wsp | em  8  8 |        |             |
  16:037 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:038 | DONE wsp | em  8  8 |        |             |
  16:039 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             ; single task Stack (S) start (bottom)
  16:040 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f0             ; initial Data Stack Pointer (X)
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:043 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:044 | DONE wsp | em  8  8 |        |             |
  16:045 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:046 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      ; Compiler Pointer, 2 bytes
  16:049 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      ; Dictionary Pointer, 2 bytes
  16:050 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  ; Temporary DSP (X) storage, 2 bytes
  16:051 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  ; Temporary TOS (Y) storage, 2 bytes
  16:052 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  ; Address where output is constructed
  16:053 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  ; Input Source for SOURCE-ID
  16:054 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    ; Current Input Buffer, 7c00 or 7d00
  16:055 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } ; Length of current input buffer
  16:056 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } ; Length of previous input buffer
  16:057 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   ; Pointer to CIB (>IN in Forth)
  16:058 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  ; STATE: 1 compile, 0 interpret
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   ; Temporary storage, usually address
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   ; Temporary storage, usually counter
  16:061 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   ; Temporary storage
  16:062 | DONE wsp | em  8  8 |        |             |
  16:063 | DONE wsp | em  8  8 |        |             |
  16:064 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:065 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:066 | DONE wsp | em  8  8 |        |             |
  16:067 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:068 | DONE wsp | em  8  8 |        |             |
  16:069 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              ; break (Control-C) ASCII character
  16:070 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ; ACSCII bell sound
  16:071 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              ; backspace ASCII character
  16:072 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              ; line feed ASCII character
  16:073 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              ; carriage return ASCII character
  16:074 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ; ASCII CNTR-n (for next command)
  16:075 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ; ASCII CNTR-p (for previous command)
  16:076 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              ; Escape ASCII character
  16:077 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              ; space ASCII character
  16:078 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              ; DEL ASCII character
  16:079 | DONE wsp | em  8  8 |        |             |
  16:080 | DONE cmt | em  8  8 |        |             | ; Dictionary flags
  16:081 | DONE wsp | em  8  8 |        |             |
  16:082 | DONE dir | em  8  8 |        |             |         .equ PW %10000000            ; Primitive (Native) Word
  16:083 | DONE dir | em  8  8 |        |             |         .equ CO %01000000            ; Compile Only
  16:084 | DONE dir | em  8  8 |        |             |         .equ IM %00100000            ; Immediate Word
  16:085 | DONE dir | em  8  8 |        |             |         .equ NC %00010000            ; Native (inline) Compile
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 29. Jan 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           ; 19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           ; Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           ; Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           ; Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           ; Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           ; Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           ; Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           ; Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           ; Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           ; Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           ; Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           ; Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           ; Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           ; Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           ; Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           ; Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           ; Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           ; Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           ; System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           ; Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           ; Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           ; Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           ; Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           ; Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           ; Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           ; UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           ; UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           ; Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           ; Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           ; Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           ; Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           ; Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           ; Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           ; Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           ; Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           ; Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           ; Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           ; Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           ; Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           ; Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           ; Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           ; Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           ; Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          ; UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          ; UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          ; UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          ; UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          ; UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          ; UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          ; UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          ; UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:109 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:110 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:111 | DONE wsp | na  8 16 |        |             |
  23:112 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           ; UART Interrupt Enable Register (UIER)
  23:113 | DONE wsp | na  8 16 |        |             |
  23:114 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            ; Ensure A15/AMS are output
  23:115 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           ; Port 4 Data Direction Register (PDD4)
  23:116 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           ; Select bank 0 (Port 4 Data Register, PD4)
  23:117 | DONE wsp | na  8 16 |        |             |
  23:118 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      ; Set UART0 to use timer 3
  23:119 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           ; Timer Control Register (TCR)
  23:120 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    ; And set baud rate
  23:121 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           ; Timer 3 Counter Low (T3CL)
  23:122 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:123 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           ; Timer 3 Counter High (T3CH)
  23:124 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             ; Enable timer 3 (1<<3)
  23:125 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           ; Timer Enable Register (TER)
  23:126 | DONE wsp | na  8 16 |        |             |
  23:127 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      ; Set UART0 for 8-N-1
  23:128 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           ; UART 0 Control/Status Register (ACSR0)
  23:129 | DONE wsp | na  8 16 |        |             |
  23:130 | DONE ins | na  8 16 | 00602d | 4c 60 60    |                 jmp 006060           ; we return with A as 8 bits
  23:131 | DONE wsp | na  8 16 |        |             |
  23:132 | DONE wsp | na  8 16 |        |             |
  23:133 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:134 | DONE cmt | na  8 16 |        |             | ; PUT_CHR
  23:135 | DONE cmt | na  8 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:136 | DONE cmt | na  8 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:137 | DONE lbl | na  8 16 | 006030 |             | put_chr                              
  23:138 | DONE ins | na  8 16 | 006030 | 08          |                 php                  ; save register sizes
  23:139 | DONE ins | na  8 16 | 006031 | e2 20       |                 sep 20               
  23:140 | DONE ctl | na  8 16 |        |             |         .!a8
  23:141 | DONE ins | na  8 16 | 006033 | 48          |                 pha                  
  23:142 | DONE ins | na  8 16 | 006034 | a9 02       |                 lda.# 02             ; (1<<1)
  23:143 | DONE wsp | na  8 16 |        |             |
  23:144 | DONE lbl | na  8 16 | 006036 |             | put_chr_wait                         
  23:145 | DONE ins | na  8 16 | 006036 | 2c 48 df    |                 bit 00df48           ; timer finished?
  23:146 | DONE ins | na  8 16 | 006039 | f0 fb       |                 beq 006036           
  23:147 | DONE wsp | na  8 16 |        |             |
  23:148 | DONE ins | na  8 16 | 00603b | 68          |                 pla                  
  23:149 | DONE ins | na  8 16 | 00603c | 8d 71 df    |                 sta 00df71           ; transmit char
  23:150 | DONE ins | na  8 16 | 00603f | 28          |                 plp                  
  23:151 | DONE wsp | na  8 16 |        |             |
  23:152 | DONE ins | na  8 16 | 006040 | 60          |                 rts                  
  23:153 | DONE wsp | na  8 16 |        |             |
  23:154 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:155 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:156 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:157 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:158 | DONE lbl | na  8 16 | 006041 |             | get_chr                              
  23:159 | DONE ins | na  8 16 | 006041 | 08          |                 php                  ; Save register sizes
  23:160 | DONE ins | na  8 16 | 006042 | e2 20       |                 sep 20               
  23:161 | DONE ctl | na  8 16 |        |             |         .!a8
  23:162 | DONE ins | na  8 16 | 006044 | a9 01       |                 lda.# 01             ; (1<<0)
  23:163 | DONE wsp | na  8 16 |        |             |
  23:164 | DONE lbl | na  8 16 | 006046 |             | get_chr_wait                         
  23:165 | DONE ins | na  8 16 | 006046 | 2c 48 df    |                 bit 00df48           ; Any data in RX buffer?
  23:166 | DONE ins | na  8 16 | 006049 | f0 fb       |                 beq 006046           ; No, keep waiting
  23:167 | DONE ins | na  8 16 | 00604b | ad 71 df    |                 lda 00df71           ; Yes, read it
  23:168 | DONE ins | na  8 16 | 00604e | 28          |                 plp                  
  23:169 | DONE wsp | na  8 16 |        |             |
  23:170 | DONE ins | na  8 16 | 00604f | 60          |                 rts                  
  23:171 | DONE wsp | na  8 16 |        |             |
  23:172 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:173 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:174 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:175 | DONE cmt | na  8 16 |        |             | ; some.
  23:176 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:177 | DONE wsp | na  8 16 |        |             |
  23:178 | DONE lbl | na  8 16 | 006050 |             | have_chr?                            
  23:179 | DONE ins | na  8 16 | 006050 | 48          |                 pha                  ; save caller's A
  23:180 | DONE ins | na  8 16 | 006051 | 08          |                 php                  
  23:181 | DONE ins | na  8 16 | 006052 | e2 20       |                 sep 20               
  23:182 | DONE ctl | na  8 16 |        |             |         .!a8
  23:183 | DONE ins | na  8 16 | 006054 | ad 48 df    |                 lda 00df48           ; read the status register
  23:184 | DONE ins | na  8 16 | 006057 | 28          |                 plp                  
  23:185 | DONE ins | na  8 16 | 006058 | 6a          |                 ror.a                ; shift hw_uart0r bit into carry
  23:186 | DONE ins | na  8 16 | 006059 | c2 20       |                 rep 20               
  23:187 | DONE ctl | na 16 16 |        |             |         .!a16
  23:188 | DONE ins | na 16 16 | 00605b | 68          |                 pla                  ; restore A
  23:189 | DONE ins | na 16 16 | 00605c | 60          |                 rts                  
  23:190 | DONE wsp | na 16 16 |        |             |
  23:191 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 00605d |             | a_cold                               
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 00605d | 4c 00 60    |                 jmp 006000           ; don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006060 |             | start                                
  41:000 | DONE ins | na 16 16 | 006060 | 18          |                 clc                  
  41:001 | DONE ins | na 16 16 | 006061 | fb          |                 xce                  
  41:002 | DONE ctl | na 16 16 |        |             |         .!native
  42:000 | DONE ins | na 16 16 | 006062 | c2 20       |                 rep 20               
  42:001 | DONE ctl | na 16 16 |        |             |         .!a16
  43:000 | DONE ins | na 16 16 | 006064 | c2 10       |                 rep 10               
  43:001 | DONE ctl | na 16 16 |        |             |         .!xy16
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  51:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  52:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  53:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  54:000 | DONE ins | na 16 16 | 006067 | a9 eb 67    |                 lda.# 0067eb         
  55:000 | DONE ins | na 16 16 | 00606a | 85 02       |                 sta.d 000202         
  56:000 | DONE wsp | na 16 16 |        |             |
  57:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  58:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  59:000 | DONE ins | na 16 16 | 00606c | a9 00 03    |                 lda.# 000300         
  60:000 | DONE ins | na 16 16 | 00606f | 85 00       |                 sta.d 000200         
  61:000 | DONE wsp | na 16 16 |        |             |
  62:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  63:000 | DONE ins | na 16 16 | 006071 | a9 00 7c    |                 lda.# 007c00         ; start with first input buffer
  64:000 | DONE ins | na 16 16 | 006074 | 85 0c       |                 sta.d 00020c         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE ins | na 16 16 | 006076 | 64 10       |                 stz.d 000210         ; previous input buffer is empty
  67:000 | DONE ins | na 16 16 | 006078 | 64 0a       |                 stz.d 00020a         ; SOURCE-ID is zero
  68:000 | DONE ins | na 16 16 | 00607a | 64 14       |                 stz.d 000214         ; STATE is zero (interpret)
  69:000 | DONE wsp | na 16 16 |        |             |
  70:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  71:000 | DONE ins | na 16 16 | 00607c | a0 00 00    |                 ldy.# 0000           
  72:000 | DONE ins | na 16 16 | 00607f | a2 f0 02    |                 ldx.# 0002f0         
  73:000 | DONE wsp | na 16 16 |        |             |
  74:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  75:000 | DONE ins | na 16 16 | 006082 | 20 f0 63    |                 jsr 0063f0           
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  78:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is rubbish, so we don't have to push it to the
  79:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  80:000 | DONE ins | na 16 16 | 006085 | ca          |                 dex                  
  81:000 | DONE ins | na 16 16 | 006086 | ca          |                 dex                  
  82:000 | DONE ins | na 16 16 | 006087 | ca          |                 dex                  
  83:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  84:000 | DONE ins | na 16 16 | 006089 | a9 70 68    |                 lda.# 006870         
  85:000 | DONE ins | na 16 16 | 00608c | 95 00       |                 sta.dx 00            ; Start address goes in NOS
  86:000 | DONE ins | na 16 16 | 00608e | a0 ca 00    |                 ldy.# 0000ca         ; length goes in TOS
  87:000 | DONE wsp | na 16 16 |        |             |
  88:000 | DONE ins | na 16 16 | 006091 | 20 27 63    |                 jsr 006327           
  89:000 | DONE wsp | na 16 16 |        |             |
  90:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to ABORT
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  93:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  94:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  95:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  96:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
  97:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
  98:000 | DONE lbl | na 16 16 | 006094 |             | a_abort                              
  99:000 | DONE ins | na 16 16 | 006094 | c2 20       |                 rep 20               
  99:001 | DONE ctl | na 16 16 |        |             |         .!a16
 100:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 101:000 | DONE ins | na 16 16 | 006096 | a0 00 00    |                 ldy.# 0000           
 102:000 | DONE ins | na 16 16 | 006099 | a2 f0 02    |                 ldx.# 0002f0         
 103:000 | DONE wsp | na 16 16 |        |             |
 104:000 | DONE wsp | na 16 16 |        |             |
 105:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 106:000 | DONE wsp | na 16 16 |        |             |
 107:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 108:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 109:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 110:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 111:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 112:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 113:000 | DONE lbl | na 16 16 | 00609c |             | a_quit                               
 114:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 115:000 | DONE ins | na 16 16 | 00609c | a9 ff 7f    |                 lda.# 007fff         
 116:000 | DONE ins | na 16 16 | 00609f | 1b          |                 tcs                  
 117:000 | DONE wsp | na 16 16 |        |             |
 118:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 119:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 120:000 | DONE ins | na 16 16 | 0060a0 | 9c 56 63    |                 stz 006356           
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 123:000 | DONE ins | na 16 16 | 0060a3 | 64 0a       |                 stz.d 00020a         
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 126:000 | DONE ins | na 16 16 | 0060a5 | 64 14       |                 stz.d 000214         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE lbl | na 16 16 | 0060a7 |             | quit_get_line                        
 129:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 130:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 131:000 | DONE ins | na 16 16 | 0060a7 | 64 0e       |                 stz.d 00020e         
 132:000 | DONE wsp | na 16 16 |        |             |
 133:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 134:000 | DONE ins | na 16 16 | 0060a9 | 20 62 64    |                 jsr 006462           ; ( -- f )
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE ins | na 16 16 | 0060ac | 98          |                 tya                  ; force flag test
 137:000 | DONE ins | na 16 16 | 0060ad | d0 06       |                 bne 0060b5           
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 140:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 141:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 142:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 143:000 | DONE ins | na 16 16 | 0060af | a9 04 6a    |                 lda.# 006a04         
 144:000 | DONE ins | na 16 16 | 0060b2 | 4c 36 68    |                 jmp 006836           
 145:000 | DONE wsp | na 16 16 |        |             |
 146:000 | DONE wsp | na 16 16 |        |             |
 147:000 | DONE lbl | na 16 16 | 0060b5 |             | quit_refill_successful               
 148:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 149:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 150:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 151:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 152:000 | DONE ins | na 16 16 | 0060b5 | b4 00       |                 ldy.dx 00            ; drop TOS
 153:000 | DONE ins | na 16 16 | 0060b7 | e8          |                 inx                  
 154:000 | DONE ins | na 16 16 | 0060b8 | e8          |                 inx                  
 155:000 | DONE wsp | na 16 16 |        |             |
 156:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 157:000 | DONE ins | na 16 16 | 0060b9 | 64 12       |                 stz.d 000212         
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 160:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 161:000 | DONE ins | na 16 16 | 0060bb | 20 0c 68    |                 jsr 00680c           
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 164:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 165:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 166:000 | DONE ins | na 16 16 | 0060be | e0 f1 02    |                 cpx.# 0002f1         
 167:000 | DONE ins | na 16 16 | 0060c1 | 90 06       |                 bcc 0060c9           ; DSP must always be smaller (!) than DSP0
 168:000 | DONE wsp | na 16 16 |        |             |
 169:000 | DONE ins | na 16 16 | 0060c3 | a9 52 6a    |                 lda.# 006a52         
 170:000 | DONE ins | na 16 16 | 0060c6 | 4c 36 68    |                 jmp 006836           
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE lbl | na 16 16 | 0060c9 |             | quit_ok                              
 173:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well
 174:000 | DONE ins | na 16 16 | 0060c9 | a9 3a 69    |                 lda.# 00693a         
 175:000 | DONE ins | na 16 16 | 0060cc | 20 3c 68    |                 jsr 00683c           
 176:000 | DONE wsp | na 16 16 |        |             |
 177:000 | DONE wsp | na 16 16 |        |             |
 178:000 | DONE cmt | na 16 16 |        |             |                 ; get next line
 179:000 | DONE ins | na 16 16 | 0060cf | 4c a7 60    |                 jmp 0060a7           
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE lbl | na 16 16 | 0060d2 |             | z_cold                               
 182:000 | DONE lbl | na 16 16 | 0060d2 |             | z_abort                              
 183:000 | DONE lbl | na 16 16 | 0060d2 |             | z_quit                               
 183:001 | DONE ins | na 16 16 | 0060d2 | ea          |                 nop                  ; dummy for compilation, TODO test if required
 184:000 | DONE wsp | na 16 16 |        |             |
 185:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 186:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 187:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 188:000 | DONE lbl | na 16 16 | 0060d3 |             | a_to-in                              
 189:000 | DONE ins | na 16 16 | 0060d3 | ca          |                 dex                  
 190:000 | DONE ins | na 16 16 | 0060d4 | ca          |                 dex                  
 191:000 | DONE ins | na 16 16 | 0060d5 | 94 00       |                 sty.dx 00            
 192:000 | DONE wsp | na 16 16 |        |             |
 193:000 | DONE ins | na 16 16 | 0060d7 | a0 12 02    |                 ldy.# 000212         ; >IN
 194:000 | DONE lbl | na 16 16 | 0060da |             | z_to-in                              
 194:001 | DONE ins | na 16 16 | 0060da | 60          |                 rts                  
 195:000 | DONE wsp | na 16 16 |        |             |
 196:000 | DONE wsp | na 16 16 |        |             |
 197:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 198:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 199:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 200:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 201:000 | DONE cmt | na 16 16 |        |             | ; aligned
 202:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 203:000 | DONE cmt | na 16 16 |        |             | ;               tya
 204:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 205:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 206:000 | DONE cmt | na 16 16 |        |             | ;               iny
 207:000 | DONE cmt | na 16 16 |        |             | ;               iny
 208:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 209:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 210:000 | DONE cmt | na 16 16 |        |             | ;               inx
 211:000 | DONE cmt | na 16 16 |        |             | ;               inx
 212:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 213:000 | DONE lbl | na 16 16 | 0060db |             | a_comma                              
 214:000 | DONE ins | na 16 16 | 0060db | 98          |                 tya                  
 215:000 | DONE ins | na 16 16 | 0060dc | 92 00       |                 sta.di 000200        ; STA (CP)
 216:000 | DONE ins | na 16 16 | 0060de | e6 00       |                 inc.d 000200         
 217:000 | DONE ins | na 16 16 | 0060e0 | e6 00       |                 inc.d 000200         
 218:000 | DONE wsp | na 16 16 |        |             |
 219:000 | DONE ins | na 16 16 | 0060e2 | b4 00       |                 ldy.dx 00            
 220:000 | DONE ins | na 16 16 | 0060e4 | e8          |                 inx                  
 221:000 | DONE ins | na 16 16 | 0060e5 | e8          |                 inx                  
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE lbl | na 16 16 | 0060e6 |             | z_comma                              
 223:001 | DONE ins | na 16 16 | 0060e6 | 60          |                 rts                  
 224:000 | DONE wsp | na 16 16 |        |             |
 225:000 | DONE wsp | na 16 16 |        |             |
 226:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 227:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 228:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 229:000 | DONE lbl | na 16 16 | 0060e7 |             | a_store                              
 230:000 | DONE ins | na 16 16 | 0060e7 | b5 00       |                 lda.dx 00            ; NOS has value
 231:000 | DONE ins | na 16 16 | 0060e9 | 99 00 00    |                 sta.y 0000           
 232:000 | DONE ins | na 16 16 | 0060ec | e8          |                 inx                  
 233:000 | DONE ins | na 16 16 | 0060ed | e8          |                 inx                  
 234:000 | DONE ins | na 16 16 | 0060ee | e8          |                 inx                  
 235:000 | DONE ins | na 16 16 | 0060ef | e8          |                 inx                  
 236:000 | DONE wsp | na 16 16 |        |             |
 237:000 | DONE lbl | na 16 16 | 0060f0 |             | z_store                              
 237:001 | DONE ins | na 16 16 | 0060f0 | 60          |                 rts                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE wsp | na 16 16 |        |             |
 240:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 241:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 242:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 243:000 | DONE lbl | na 16 16 | 0060f1 |             | a_fetch                              
 244:000 | DONE ins | na 16 16 | 0060f1 | b9 00 00    |                 lda.y 0000           
 245:000 | DONE ins | na 16 16 | 0060f4 | a8          |                 tay                  
 246:000 | DONE lbl | na 16 16 | 0060f5 |             | z_fetch                              
 246:001 | DONE ins | na 16 16 | 0060f5 | 60          |                 rts                  
 247:000 | DONE wsp | na 16 16 |        |             |
 248:000 | DONE wsp | na 16 16 |        |             |
 249:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 250:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 251:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 252:000 | DONE lbl | na 16 16 | 0060f6 |             | a_plus                               
 253:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 254:000 | DONE ins | na 16 16 | 0060f6 | 98          |                 tya                  
 255:000 | DONE ins | na 16 16 | 0060f7 | 18          |                 clc                  
 256:000 | DONE ins | na 16 16 | 0060f8 | 75 00       |                 adc.dx 00            
 257:000 | DONE ins | na 16 16 | 0060fa | a8          |                 tay                  
 258:000 | DONE ins | na 16 16 | 0060fb | e8          |                 inx                  
 259:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE lbl | na 16 16 | 0060fd |             | z_plus                               
 261:001 | DONE ins | na 16 16 | 0060fd | 60          |                 rts                  
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE wsp | na 16 16 |        |             |
 264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 265:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 266:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 267:000 | DONE lbl | na 16 16 | 0060fe |             | a_minus                              
 268:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 269:000 | DONE ins | na 16 16 | 0060fe | 98          |                 tya                  
 270:000 | DONE ins | na 16 16 | 0060ff | 49 ff ff    |                 eor.# 0ffff          
 271:000 | DONE wsp | na 16 16 |        |             |
 272:000 | DONE ins | na 16 16 | 006102 | 38          |                 sec                  ; not CLC
 273:000 | DONE ins | na 16 16 | 006103 | 75 00       |                 adc.dx 00            
 274:000 | DONE wsp | na 16 16 |        |             |
 275:000 | DONE ins | na 16 16 | 006105 | a8          |                 tay                  
 276:000 | DONE ins | na 16 16 | 006106 | e8          |                 inx                  
 277:000 | DONE ins | na 16 16 | 006107 | e8          |                 inx                  
 278:000 | DONE wsp | na 16 16 |        |             |
 279:000 | DONE lbl | na 16 16 | 006108 |             | z_minus                              
 279:001 | DONE ins | na 16 16 | 006108 | 60          |                 rts                  
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE wsp | na 16 16 |        |             |
 282:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 283:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 284:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 285:000 | DONE lbl | na 16 16 | 006109 |             | a_zero                               
 286:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 287:000 | DONE ins | na 16 16 | 006109 | ca          |                 dex                  
 288:000 | DONE ins | na 16 16 | 00610a | ca          |                 dex                  
 289:000 | DONE ins | na 16 16 | 00610b | 94 00       |                 sty.dx 00            
 290:000 | DONE ins | na 16 16 | 00610d | a0 00 00    |                 ldy.# 0000           
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE lbl | na 16 16 | 006110 |             | z_zero                               
 292:001 | DONE ins | na 16 16 | 006110 | 60          |                 rts                  
 293:000 | DONE wsp | na 16 16 |        |             |
 294:000 | DONE wsp | na 16 16 |        |             |
 295:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 296:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 297:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 298:000 | DONE lbl | na 16 16 | 006111 |             | a_one                                
 299:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 300:000 | DONE ins | na 16 16 | 006111 | ca          |                 dex                  
 301:000 | DONE ins | na 16 16 | 006112 | ca          |                 dex                  
 302:000 | DONE ins | na 16 16 | 006113 | 94 00       |                 sty.dx 00            
 303:000 | DONE ins | na 16 16 | 006115 | a0 01 00    |                 ldy.# 0001           
 304:000 | DONE wsp | na 16 16 |        |             |
 305:000 | DONE lbl | na 16 16 | 006118 |             | z_one                                
 305:001 | DONE ins | na 16 16 | 006118 | 60          |                 rts                  
 306:000 | DONE wsp | na 16 16 |        |             |
 307:000 | DONE wsp | na 16 16 |        |             |
 308:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 309:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 310:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 311:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 312:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 313:000 | DONE lbl | na 16 16 | 006119 |             | a_one-minus                          
 314:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 315:000 | DONE ins | na 16 16 | 006119 | 88          |                 dey                  
 316:000 | DONE lbl | na 16 16 | 00611a |             | z_one-minus                          
 316:001 | DONE ins | na 16 16 | 00611a | 60          |                 rts                  
 317:000 | DONE wsp | na 16 16 |        |             |
 318:000 | DONE wsp | na 16 16 |        |             |
 319:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 320:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 321:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 322:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 323:000 | DONE lbl | na 16 16 | 00611b |             | a_one-plus                           
 324:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 325:000 | DONE ins | na 16 16 | 00611b | c8          |                 iny                  
 326:000 | DONE lbl | na 16 16 | 00611c |             | z_one-plus                           
 326:001 | DONE ins | na 16 16 | 00611c | 60          |                 rts                  
 327:000 | DONE wsp | na 16 16 |        |             |
 328:000 | DONE wsp | na 16 16 |        |             |
 329:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 330:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 331:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 332:000 | DONE lbl | na 16 16 | 00611d |             | a_two                                
 333:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 334:000 | DONE ins | na 16 16 | 00611d | ca          |                 dex                  
 335:000 | DONE ins | na 16 16 | 00611e | ca          |                 dex                  
 336:000 | DONE ins | na 16 16 | 00611f | 94 00       |                 sty.dx 00            
 337:000 | DONE ins | na 16 16 | 006121 | a0 02 00    |                 ldy.# 0002           
 338:000 | DONE wsp | na 16 16 |        |             |
 339:000 | DONE lbl | na 16 16 | 006124 |             | z_two                                
 339:001 | DONE ins | na 16 16 | 006124 | 60          |                 rts                  
 340:000 | DONE wsp | na 16 16 |        |             |
 341:000 | DONE wsp | na 16 16 |        |             |
 342:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 343:000 | DONE cmt | na 16 16 |        |             | ; TWO-STAR ( n -- 2*n ) 3 bytes / 6 cycles
 344:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 345:000 | DONE lbl | na 16 16 | 006125 |             | a_two-star                           
 346:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 347:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 348:000 | DONE ins | na 16 16 | 006125 | 98          |                 tya                  
 349:000 | DONE ins | na 16 16 | 006126 | 0a          |                 asl.a                
 350:000 | DONE ins | na 16 16 | 006127 | a8          |                 tay                  
 351:000 | DONE wsp | na 16 16 |        |             |
 352:000 | DONE lbl | na 16 16 | 006128 |             | z_two-star                           
 352:001 | DONE ins | na 16 16 | 006128 | 60          |                 rts                  
 353:000 | DONE wsp | na 16 16 |        |             |
 354:000 | DONE wsp | na 16 16 |        |             |
 355:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 356:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 357:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 358:000 | DONE wsp | na 16 16 |        |             |
 359:000 | DONE lbl | na 16 16 | 006129 |             | a_2dup                               
 360:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 361:000 | DONE ins | na 16 16 | 006129 | ca          |                 dex                  
 362:000 | DONE ins | na 16 16 | 00612a | ca          |                 dex                  
 363:000 | DONE ins | na 16 16 | 00612b | ca          |                 dex                  
 364:000 | DONE ins | na 16 16 | 00612c | ca          |                 dex                  
 365:000 | DONE ins | na 16 16 | 00612d | 94 02       |                 sty.dx 02            
 366:000 | DONE ins | na 16 16 | 00612f | b5 04       |                 lda.dx 04            
 367:000 | DONE ins | na 16 16 | 006131 | 95 00       |                 sta.dx 00            
 368:000 | DONE wsp | na 16 16 |        |             |
 369:000 | DONE lbl | na 16 16 | 006133 |             | z_2dup                               
 369:001 | DONE ins | na 16 16 | 006133 | 60          |                 rts                  
 370:000 | DONE wsp | na 16 16 |        |             |
 371:000 | DONE wsp | na 16 16 |        |             |
 372:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 373:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 374:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 375:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 376:000 | DONE lbl | na 16 16 | 006134 |             | a_tick                               
 377:000 | DONE ins | na 16 16 | 006134 | 20 fd 63    |                 jsr 0063fd           ; ( -- addr u )
 378:000 | DONE wsp | na 16 16 |        |             |
 379:000 | DONE cmt | na 16 16 |        |             | 		; if we got a zero, complain and abort
 380:000 | DONE ins | na 16 16 | 006137 | d0 06       |                 bne 00613f           
 381:000 | DONE wsp | na 16 16 |        |             |
 382:000 | DONE ins | na 16 16 | 006139 | a9 dd 69    |                 lda.# 0069dd         
 383:000 | DONE ins | na 16 16 | 00613c | 4c 36 68    |                 jmp 006836           
 384:000 | DONE wsp | na 16 16 |        |             |
 385:000 | DONE lbl | na 16 16 | 00613f |             | tick_have_word                       
 386:000 | DONE ins | na 16 16 | 00613f | 20 69 63    |                 jsr 006369           ; ( addr u -- nt)
 387:000 | DONE wsp | na 16 16 |        |             |
 388:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 389:000 | DONE ins | na 16 16 | 006142 | d0 06       |                 bne 00614a           
 390:000 | DONE wsp | na 16 16 |        |             |
 391:000 | DONE ins | na 16 16 | 006144 | a9 62 6a    |                 lda.# 006a62         
 392:000 | DONE ins | na 16 16 | 006147 | 4c 36 68    |                 jmp 006836           
 393:000 | DONE wsp | na 16 16 |        |             |
 394:000 | DONE lbl | na 16 16 | 00614a |             | tick_have_nt                         
 395:000 | DONE ins | na 16 16 | 00614a | 20 c7 63    |                 jsr 0063c7           ; ( nt -- xt )
 396:000 | DONE wsp | na 16 16 |        |             |
 397:000 | DONE lbl | na 16 16 | 00614d |             | z_tick                               
 397:001 | DONE ins | na 16 16 | 00614d | 60          |                 rts                  
 398:000 | DONE wsp | na 16 16 |        |             |
 399:000 | DONE wsp | na 16 16 |        |             |
 400:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 401:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 402:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 403:000 | DONE lbl | na 16 16 | 00614e |             | a_abs                                
 404:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 405:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 406:000 | DONE ins | na 16 16 | 00614e | 98          |                 tya                  ; force flag test
 407:000 | DONE ins | na 16 16 | 00614f | 10 05       |                 bpl 006156           ; positive number is easy
 408:000 | DONE wsp | na 16 16 |        |             |
 409:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 410:000 | DONE ins | na 16 16 | 006151 | 49 ff ff    |                 eor.# 0ffff          
 411:000 | DONE ins | na 16 16 | 006154 | 1a          |                 inc.a                
 412:000 | DONE ins | na 16 16 | 006155 | a8          |                 tay                  
 413:000 | DONE wsp | na 16 16 |        |             |
 414:000 | DONE lbl | na 16 16 | 006156 |             | z_abs                                
 414:001 | DONE ins | na 16 16 | 006156 | 60          |                 rts                  
 415:000 | DONE wsp | na 16 16 |        |             |
 416:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 417:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 418:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 419:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 420:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 421:000 | DONE lbl | na 16 16 | 006157 |             | a_accept                             
 422:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 423:000 | DONE ins | na 16 16 | 006157 | 98          |                 tya                  ; force flag test
 424:000 | DONE ins | na 16 16 | 006158 | d0 03       |                 bne 00615d           
 425:000 | DONE wsp | na 16 16 |        |             |
 426:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 427:000 | DONE ins | na 16 16 | 00615a | e8          |                 inx                  ; NIP, TOS is zero which is also FALSE
 428:000 | DONE ins | na 16 16 | 00615b | e8          |                 inx                  
 429:000 | DONE wsp | na 16 16 |        |             |
 430:000 | DONE ins | na 16 16 | 00615c | 60          |                 rts                  
 431:000 | DONE wsp | na 16 16 |        |             |
 432:000 | DONE lbl | na 16 16 | 00615d |             | accept_nonzero                       
 433:000 | DONE ins | na 16 16 | 00615d | b5 00       |                 lda.dx 00            ; address of buffer is NOS
 434:000 | DONE ins | na 16 16 | 00615f | 85 16       |                 sta.d 000216         
 435:000 | DONE ins | na 16 16 | 006161 | e8          |                 inx                  ; NIP
 436:000 | DONE ins | na 16 16 | 006162 | e8          |                 inx                  
 437:000 | DONE wsp | na 16 16 |        |             |
 438:000 | DONE ins | na 16 16 | 006163 | 84 18       |                 sty.d 000218         ; Save max number of chars in tmp2
 439:000 | DONE ins | na 16 16 | 006165 | a0 00 00    |                 ldy.# 0000           ; Use Y as counter
 440:000 | DONE ins | na 16 16 | 006168 | e2 20       |                 sep 20               
 440:001 | DONE ctl | na  8 16 |        |             |         .!a8
 441:000 | DONE wsp | na  8 16 |        |             |
 442:000 | DONE lbl | na  8 16 | 00616a |             | accept_loop                          
 443:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 444:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
 445:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 446:000 | DONE ins | na  8 16 | 00616a | 20 41 60    |                 jsr 006041           
 447:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 448:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
 449:000 | DONE ins | na  8 16 | 00616d | c9 0a       |                 cmp.# AscLF          
 450:000 | DONE ins | na  8 16 | 00616f | f0 44       |                 beq 0061b5           
 451:000 | DONE ins | na  8 16 | 006171 | c9 0d       |                 cmp.# AscCR          
 452:000 | DONE ins | na  8 16 | 006173 | f0 40       |                 beq 0061b5           
 453:000 | DONE wsp | na  8 16 |        |             |
 454:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
 455:000 | DONE ins | na  8 16 | 006175 | c9 08       |                 cmp.# AscBS          
 456:000 | DONE ins | na  8 16 | 006177 | f0 44       |                 beq 0061bd           
 457:000 | DONE ins | na  8 16 | 006179 | c9 7f       |                 cmp.# AscDEL         
 458:000 | DONE ins | na  8 16 | 00617b | f0 40       |                 beq 0061bd           
 459:000 | DONE wsp | na  8 16 |        |             |
 460:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
 461:000 | DONE ins | na  8 16 | 00617d | c9 03       |                 cmp.# AscCC          
 462:000 | DONE ins | na  8 16 | 00617f | d0 03       |                 bne 006184           
 463:000 | DONE ins | na  8 16 | 006181 | 4c 94 60    |                 jmp 006094           
 464:000 | DONE lbl | na  8 16 | 006184 |             | @                                    
 465:000 | DONE ins | na  8 16 | 006184 | c9 1b       |                 cmp.# AscESC         
 466:000 | DONE ins | na  8 16 | 006186 | d0 03       |                 bne 00618b           
 467:000 | DONE ins | na  8 16 | 006188 | 4c 94 60    |                 jmp 006094           
 468:000 | DONE lbl | na  8 16 | 00618b |             | @                                    
 469:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
 470:000 | DONE ins | na  8 16 | 00618b | c9 10       |                 cmp.# AscCP          
 471:000 | DONE ins | na  8 16 | 00618d | d0 0c       |                 bne 00619b           
 472:000 | DONE ins | na  8 16 | 00618f | c2 20       |                 rep 20               
 472:001 | DONE ctl | na 16 16 |        |             |         .!a16
 473:000 | DONE ins | na 16 16 | 006191 | a9 7b 6a    |                 lda.# 006a7b         
 474:000 | DONE ins | na 16 16 | 006194 | 20 3c 68    |                 jsr 00683c           
 475:000 | DONE ins | na 16 16 | 006197 | e2 20       |                 sep 20               
 475:001 | DONE ctl | na  8 16 |        |             |         .!a8
 476:000 | DONE ins | na  8 16 | 006199 | 80 cf       |                 bra 00616a           
 477:000 | DONE lbl | na  8 16 | 00619b |             | @                                    
 478:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
 479:000 | DONE ins | na  8 16 | 00619b | c9 0e       |                 cmp.# AscCN          
 480:000 | DONE ins | na  8 16 | 00619d | d0 0c       |                 bne 0061ab           
 481:000 | DONE ins | na  8 16 | 00619f | c2 20       |                 rep 20               
 481:001 | DONE ctl | na 16 16 |        |             |         .!a16
 482:000 | DONE ins | na 16 16 | 0061a1 | a9 8e 6a    |                 lda.# 006a8e         
 483:000 | DONE ins | na 16 16 | 0061a4 | 20 3c 68    |                 jsr 00683c           
 484:000 | DONE ins | na 16 16 | 0061a7 | e2 20       |                 sep 20               
 484:001 | DONE ctl | na  8 16 |        |             |         .!a8
 485:000 | DONE ins | na  8 16 | 0061a9 | 80 bf       |                 bra 00616a           
 486:000 | DONE wsp | na  8 16 |        |             |
 487:000 | DONE lbl | na  8 16 | 0061ab |             | @                                    
 488:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
 489:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
 490:000 | DONE ins | na  8 16 | 0061ab | 20 30 60    |                 jsr 006030           ; echo character
 491:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 492:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 493:000 | DONE wsp | na  8 16 |        |             |
 494:000 | DONE ins | na  8 16 | 0061ae | 91 0c       |                 sta.diy 00020c       ; STA (CIB),Y
 495:000 | DONE ins | na  8 16 | 0061b0 | c8          |                 iny                  
 496:000 | DONE ins | na  8 16 | 0061b1 | c4 18       |                 cpy.d 000218         ; reached character limit?
 497:000 | DONE ins | na  8 16 | 0061b3 | d0 b5       |                 bne 00616a           ; fall thru if buffer limit reached
 498:000 | DONE wsp | na  8 16 |        |             |
 499:000 | DONE lbl | na  8 16 | 0061b5 |             | accept_eol                           
 500:000 | DONE ins | na  8 16 | 0061b5 | 84 0e       |                 sty.d 00020e         ; Y contains number of chars accepted already
 501:000 | DONE ins | na  8 16 | 0061b7 | c2 20       |                 rep 20               
 501:001 | DONE ctl | na 16 16 |        |             |         .!a16
 502:000 | DONE ins | na 16 16 | 0061b9 | 20 b2 64    |                 jsr 0064b2           ; print final space
 503:000 | DONE ins | na 16 16 | 0061bc | 60          |                 rts                  ; this is the actual return of the routine
 504:000 | DONE wsp | na 16 16 |        |             |
 505:000 | DONE lbl | na 16 16 | 0061bd |             | accept_bs                            
 506:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 507:000 | DONE ins | na  8 16 | 0061bd | c0 00 00    |                 cpy.# 0000           ; buffer empty?
 508:000 | DONE ins | na  8 16 | 0061c0 | d0 06       |                 bne 0061c8           
 509:000 | DONE wsp | na  8 16 |        |             |
 510:000 | DONE ins | na  8 16 | 0061c2 | a9 07       |                 lda.# AscBELL        ; complain and don't delete beyond the start of line
 511:000 | DONE ins | na  8 16 | 0061c4 | 20 30 60    |                 jsr 006030           
 512:000 | DONE ins | na  8 16 | 0061c7 | c8          |                 iny                  
 513:000 | DONE lbl | na  8 16 | 0061c8 |             | @                                    
 514:000 | DONE ins | na  8 16 | 0061c8 | 88          |                 dey                  
 515:000 | DONE ins | na  8 16 | 0061c9 | a9 08       |                 lda.# AscBS          ; move back one
 516:000 | DONE ins | na  8 16 | 0061cb | 20 30 60    |                 jsr 006030           
 517:000 | DONE ins | na  8 16 | 0061ce | a9 20       |                 lda.# AscSP          ; print a space (rubout)
 518:000 | DONE ins | na  8 16 | 0061d0 | 20 30 60    |                 jsr 006030           
 519:000 | DONE ins | na  8 16 | 0061d3 | a9 08       |                 lda.# AscBS          ; move back over space
 520:000 | DONE ins | na  8 16 | 0061d5 | 20 30 60    |                 jsr 006030           
 521:000 | DONE wsp | na  8 16 |        |             |
 522:000 | DONE ins | na  8 16 | 0061d8 | 80 90       |                 bra 00616a           
 523:000 | DONE wsp | na  8 16 |        |             |
 524:000 | DONE lbl | na  8 16 | 0061da |             | z_accept                             
 524:001 | DONE ins | na  8 16 | 0061da | 60          |                 rts                  
 525:000 | DONE wsp | na  8 16 |        |             |
 526:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 527:000 | DONE cmt | na  8 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
 528:000 | DONE cmt | na  8 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
 529:000 | DONE cmt | na  8 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
 530:000 | DONE cmt | na  8 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
 531:000 | DONE cmt | na  8 16 |        |             | ; past the Dictionary.
 532:000 | DONE cmt | na  8 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
 533:000 | DONE cmt | na  8 16 |        |             | ; TODO test negative values
 534:000 | DONE lbl | na  8 16 | 0061db |             | a_allot                              
 535:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 536:000 | DONE ins | na 16 16 | 0061db | 98          |                 tya                  ; force flag check
 537:000 | DONE ins | na 16 16 | 0061dc | f0 21       |                 beq 0061ff           ; zero bytes, don't do anything
 538:000 | DONE ins | na 16 16 | 0061de | 30 12       |                 bmi 0061f2           ; free memory instead of reserving it
 539:000 | DONE wsp | na 16 16 |        |             |
 540:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
 541:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
 542:000 | DONE ins | na 16 16 | 0061e0 | 18          |                 clc                  
 543:000 | DONE ins | na 16 16 | 0061e1 | 65 00       |                 adc.d 000200         ; create new CP
 544:000 | DONE ins | na 16 16 | 0061e3 | b0 07       |                 bcs 0061ec           ; oops, we've wrapped
 545:000 | DONE wsp | na 16 16 |        |             |
 546:000 | DONE ins | na 16 16 | 0061e5 | a8          |                 tay                  ; save copy of new CP
 547:000 | DONE wsp | na 16 16 |        |             |
 548:000 | DONE ins | na 16 16 | 0061e6 | 38          |                 sec                  
 549:000 | DONE ins | na 16 16 | 0061e7 | e9 ff 7b    |                 sbc.# 007bff         
 550:000 | DONE ins | na 16 16 | 0061ea | 30 11       |                 bmi 0061fd           ; oops, fall thru if beyond max RAM
 551:000 | DONE wsp | na 16 16 |        |             |
 552:000 | DONE lbl | na 16 16 | 0061ec |             | allot_error                          
 553:000 | DONE ins | na 16 16 | 0061ec | a9 3e 69    |                 lda.# 00693e         
 554:000 | DONE ins | na 16 16 | 0061ef | 4c 36 68    |                 jmp 006836           
 555:000 | DONE wsp | na 16 16 |        |             |
 556:000 | DONE lbl | na 16 16 | 0061f2 |             | allot_minus                          
 557:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
 558:000 | DONE ins | na 16 16 | 0061f2 | 38          |                 sec                  
 559:000 | DONE ins | na 16 16 | 0061f3 | e5 00       |                 sbc.d 000200         
 560:000 | DONE ins | na 16 16 | 0061f5 | 90 f5       |                 bcc 0061ec           ; oops, we've wrapped
 561:000 | DONE wsp | na 16 16 |        |             |
 562:000 | DONE ins | na 16 16 | 0061f7 | a8          |                 tay                  
 563:000 | DONE wsp | na 16 16 |        |             |
 564:000 | DONE ins | na 16 16 | 0061f8 | e9 00 03    |                 sbc.# 000300         ; Carry Flag must still be set
 565:000 | DONE ins | na 16 16 | 0061fb | 30 ef       |                 bmi 0061ec           ; oops, gone too far back
 566:000 | DONE wsp | na 16 16 |        |             |
 567:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
 568:000 | DONE lbl | na 16 16 | 0061fd |             | allot_done                           
 569:000 | DONE ins | na 16 16 | 0061fd | 84 00       |                 sty.d 000200         ; new compiler pointer
 570:000 | DONE lbl | na 16 16 | 0061ff |             | allot_real_gone                      
 571:000 | DONE ins | na 16 16 | 0061ff | b4 00       |                 ldy.dx 00            ; DROP
 572:000 | DONE ins | na 16 16 | 006201 | e8          |                 inx                  
 573:000 | DONE ins | na 16 16 | 006202 | e8          |                 inx                  
 574:000 | DONE wsp | na 16 16 |        |             |
 575:000 | DONE lbl | na 16 16 | 006203 |             | z_allot                              
 575:001 | DONE ins | na 16 16 | 006203 | 60          |                 rts                  
 576:000 | DONE wsp | na 16 16 |        |             |
 577:000 | DONE wsp | na 16 16 |        |             |
 578:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 579:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 580:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
 581:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 582:000 | DONE lbl | na 16 16 | 006204 |             | a_bell                               
 583:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 584:000 | DONE ins | na 16 16 | 006204 | a9 07 00    |                 lda.# AscBELL        
 585:000 | DONE ins | na 16 16 | 006207 | 20 30 60    |                 jsr 006030           
 586:000 | DONE wsp | na 16 16 |        |             |
 587:000 | DONE lbl | na 16 16 | 00620a |             | z_bell                               
 587:001 | DONE ins | na 16 16 | 00620a | 60          |                 rts                  
 588:000 | DONE wsp | na 16 16 |        |             |
 589:000 | DONE wsp | na 16 16 |        |             |
 590:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 591:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 592:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 593:000 | DONE lbl | na 16 16 | 00620b |             | a_bl                                 
 594:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 595:000 | DONE ins | na 16 16 | 00620b | ca          |                 dex                  
 596:000 | DONE ins | na 16 16 | 00620c | ca          |                 dex                  
 597:000 | DONE ins | na 16 16 | 00620d | 94 00       |                 sty.dx 00            
 598:000 | DONE ins | na 16 16 | 00620f | a0 20 00    |                 ldy.# AscSP          
 599:000 | DONE wsp | na 16 16 |        |             |
 600:000 | DONE lbl | na 16 16 | 006212 |             | z_bl                                 
 600:001 | DONE ins | na 16 16 | 006212 | 60          |                 rts                  
 601:000 | DONE wsp | na 16 16 |        |             |
 602:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 603:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 604:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 605:000 | DONE lbl | na 16 16 | 006213 |             | a_bye                                
 606:000 | DONE ins | na 16 16 | 006213 | 58          |                 cli                  
 607:000 | DONE ins | na 16 16 | 006214 | 00 00       |                 brk 00               ; status byte 00 required for assembler
 608:000 | DONE wsp | na 16 16 |        |             |
 609:000 | DONE lbl | na 16 16 | 006216 |             | z_bye                                
 609:001 | DONE ins | na 16 16 | 006216 | 60          |                 rts                  ; dummy for compiling, never reached
 610:000 | DONE wsp | na 16 16 |        |             |
 611:000 | DONE wsp | na 16 16 |        |             |
 612:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 613:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
 614:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
 615:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
 616:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
 617:000 | DONE wsp | na 16 16 |        |             |
 618:000 | DONE wsp | na 16 16 |        |             |
 619:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 620:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 621:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 622:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 623:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 624:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 625:000 | DONE lbl | na 16 16 | 006217 |             | a_count                              
 626:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 627:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 628:000 | DONE ins | na 16 16 | 006217 | 98          |                 tya                  
 629:000 | DONE ins | na 16 16 | 006218 | 1a          |                 inc.a                ; String address starts one char later
 630:000 | DONE wsp | na 16 16 |        |             |
 631:000 | DONE ins | na 16 16 | 006219 | ca          |                 dex                  
 632:000 | DONE ins | na 16 16 | 00621a | ca          |                 dex                  
 633:000 | DONE ins | na 16 16 | 00621b | 95 00       |                 sta.dx 00            ; NOS
 634:000 | DONE wsp | na 16 16 |        |             |
 635:000 | DONE ins | na 16 16 | 00621d | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y  first byte is length
 636:000 | DONE ins | na 16 16 | 006220 | eb          |                 xba                  ; move length to LSB
 637:000 | DONE ins | na 16 16 | 006221 | 29 ff 00    |                 and.# 00ff           ; get rid of whatever was MSB
 638:000 | DONE ins | na 16 16 | 006224 | a8          |                 tay                  ; TOS
 639:000 | DONE wsp | na 16 16 |        |             |
 640:000 | DONE lbl | na 16 16 | 006225 |             | z_count                              
 640:001 | DONE ins | na 16 16 | 006225 | 60          |                 rts                  
 641:000 | DONE wsp | na 16 16 |        |             |
 642:000 | DONE wsp | na 16 16 |        |             |
 643:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 644:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 645:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 646:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 647:000 | DONE lbl | na 16 16 | 006226 |             | a_cr                                 
 648:000 | DONE ins | na 16 16 | 006226 | a9 0a 00    |                 lda.# AscLF          ; test with AscCR for emulators
 649:000 | DONE ins | na 16 16 | 006229 | 20 30 60    |                 jsr 006030           
 650:000 | DONE wsp | na 16 16 |        |             |
 651:000 | DONE lbl | na 16 16 | 00622c |             | z_cr                                 
 651:001 | DONE ins | na 16 16 | 00622c | 60          |                 rts                  
 652:000 | DONE wsp | na 16 16 |        |             |
 653:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 654:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
 655:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
 656:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
 657:000 | DONE cmt | na 16 16 |        |             | ; address.
 658:000 | DONE lbl | na 16 16 | 00622d |             | a_create                             
 659:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 660:000 | DONE ins | na 16 16 | 00622d | 20 fd 63    |                 jsr 0063fd           ; ( -- addr u )
 661:000 | DONE ins | na 16 16 | 006230 | d0 06       |                 bne 006238           
 662:000 | DONE wsp | na 16 16 |        |             |
 663:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
 664:000 | DONE ins | na 16 16 | 006232 | a9 dd 69    |                 lda.# 0069dd         
 665:000 | DONE ins | na 16 16 | 006235 | 4c 36 68    |                 jmp 006836           
 666:000 | DONE wsp | na 16 16 |        |             |
 667:000 | DONE lbl | na 16 16 | 006238 |             | create_got_name                      
 668:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
 669:000 | DONE ins | na 16 16 | 006238 | 20 6f 68    |                 jsr 00686f           
 670:000 | DONE wsp | na 16 16 |        |             |
 671:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
 672:000 | DONE cmt | na 16 16 |        |             |                 ; word
 673:000 | DONE ins | na 16 16 | 00623b | a5 00       |                 lda.d 000200         
 674:000 | DONE ins | na 16 16 | 00623d | 85 16       |                 sta.d 000216         ; save start of new word
 675:000 | DONE wsp | na 16 16 |        |             |
 676:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
 677:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
 678:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
 679:000 | DONE ins | na 16 16 | 00623f | 98          |                 tya                  
 680:000 | DONE ins | na 16 16 | 006240 | 29 ff 00    |                 and.# 00ff           
 681:000 | DONE ins | na 16 16 | 006243 | 85 18       |                 sta.d 000218         ; save length of name string
 682:000 | DONE wsp | na 16 16 |        |             |
 683:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
 684:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
 685:000 | DONE cmt | na 16 16 |        |             |                 ; field (the a_ label) so we need to remember it. Otherwise, we
 686:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
 687:000 | DONE ins | na 16 16 | 006245 | 18          |                 clc                  
 688:000 | DONE ins | na 16 16 | 006246 | 69 08 00    |                 adc.# 0008           
 689:000 | DONE ins | na 16 16 | 006249 | 85 1a       |                 sta.d 00021a         ; total bytes required for header
 690:000 | DONE wsp | na 16 16 |        |             |
 691:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
 692:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
 693:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
 694:000 | DONE ins | na 16 16 | 00624b | 1a          |                 inc.a                
 695:000 | DONE ins | na 16 16 | 00624c | 1a          |                 inc.a                
 696:000 | DONE ins | na 16 16 | 00624d | 1a          |                 inc.a                
 697:000 | DONE wsp | na 16 16 |        |             |
 698:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
 699:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
 700:000 | DONE ins | na 16 16 | 00624e | 18          |                 clc                  
 701:000 | DONE ins | na 16 16 | 00624f | 65 00       |                 adc.d 000200         
 702:000 | DONE ins | na 16 16 | 006251 | 85 00       |                 sta.d 000200         
 703:000 | DONE wsp | na 16 16 |        |             |
 704:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
 705:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
 706:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
 707:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
 708:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
 709:000 | DONE ins | na 16 16 | 006253 | b5 00       |                 lda.dx 00            
 710:000 | DONE ins | na 16 16 | 006255 | 48          |                 pha                  
 711:000 | DONE wsp | na 16 16 |        |             |
 712:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
 713:000 | DONE ins | na 16 16 | 006256 | a0 00 00    |                 ldy.# 0000           ; Y is now an index, not TOS
 714:000 | DONE ins | na 16 16 | 006259 | a5 18       |                 lda.d 000218         ; get length byte
 715:000 | DONE ins | na 16 16 | 00625b | eb          |                 xba                  ; Length is MSB, flags (all zero here) LSB
 716:000 | DONE ins | na 16 16 | 00625c | 91 16       |                 sta.diy 000216       ; STA (TMP1),Y
 717:000 | DONE ins | na 16 16 | 00625e | c8          |                 iny                  
 718:000 | DONE ins | na 16 16 | 00625f | c8          |                 iny                  
 719:000 | DONE wsp | na 16 16 |        |             |
 720:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
 721:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
 722:000 | DONE ins | na 16 16 | 006260 | a5 02       |                 lda.d 000202         
 723:000 | DONE ins | na 16 16 | 006262 | 91 16       |                 sta.diy 000216       
 724:000 | DONE ins | na 16 16 | 006264 | c8          |                 iny                  
 725:000 | DONE ins | na 16 16 | 006265 | c8          |                 iny                  
 726:000 | DONE wsp | na 16 16 |        |             |
 727:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "a_" link)
 728:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
 729:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
 730:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
 731:000 | DONE ins | na 16 16 | 006266 | a5 16       |                 lda.d 000216         ; can't use CP, because we've allotted space
 732:000 | DONE ins | na 16 16 | 006268 | 85 02       |                 sta.d 000202         ; while we've got it, make old CP the new DP
 733:000 | DONE wsp | na 16 16 |        |             |
 734:000 | DONE ins | na 16 16 | 00626a | 18          |                 clc                  
 735:000 | DONE ins | na 16 16 | 00626b | 65 1a       |                 adc.d 00021a         ; total header length
 736:000 | DONE ins | na 16 16 | 00626d | 91 16       |                 sta.diy 000216       
 737:000 | DONE ins | na 16 16 | 00626f | c8          |                 iny                  
 738:000 | DONE ins | na 16 16 | 006270 | c8          |                 iny                  
 739:000 | DONE wsp | na 16 16 |        |             |
 740:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
 741:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
 742:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
 743:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
 744:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
 745:000 | DONE ins | na 16 16 | 006271 | 1a          |                 inc.a                
 746:000 | DONE ins | na 16 16 | 006272 | 1a          |                 inc.a                
 747:000 | DONE ins | na 16 16 | 006273 | 1a          |                 inc.a                
 748:000 | DONE ins | na 16 16 | 006274 | 1a          |                 inc.a                
 749:000 | DONE ins | na 16 16 | 006275 | 91 16       |                 sta.diy 000216       
 750:000 | DONE ins | na 16 16 | 006277 | c8          |                 iny                  
 751:000 | DONE ins | na 16 16 | 006278 | c8          |                 iny                  
 752:000 | DONE wsp | na 16 16 |        |             |
 753:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
 754:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
 755:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
 756:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
 757:000 | DONE ins | na 16 16 | 006279 | 68          |                 pla                  ; get back string address
 758:000 | DONE ins | na 16 16 | 00627a | 38          |                 sec                  
 759:000 | DONE ins | na 16 16 | 00627b | e9 08 00    |                 sbc.# 0008           
 760:000 | DONE ins | na 16 16 | 00627e | 85 1a       |                 sta.d 00021a         
 761:000 | DONE ins | na 16 16 | 006280 | e2 20       |                 sep 20               
 761:001 | DONE ctl | na  8 16 |        |             |         .!a8
 762:000 | DONE lbl | na  8 16 | 006282 |             | @                                    
 763:000 | DONE ins | na  8 16 | 006282 | b1 1a       |                 lda.diy 00021a       
 764:000 | DONE ins | na  8 16 | 006284 | 91 16       |                 sta.diy 000216       
 765:000 | DONE ins | na  8 16 | 006286 | c8          |                 iny                  
 766:000 | DONE ins | na  8 16 | 006287 | c6 18       |                 dec.d 000218         
 767:000 | DONE ins | na  8 16 | 006289 | d0 f7       |                 bne 006282           
 768:000 | DONE wsp | na  8 16 |        |             |
 769:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
 770:000 | DONE cmt | na  8 16 |        |             |                 ; is, the a_ label of the word) which is initially a jump to the
 771:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
 772:000 | DONE cmt | na  8 16 |        |             |                 ; good
 773:000 | DONE ins | na  8 16 | 00628b | a9 20       |                 lda.# 20             ; opcode of JSR
 774:000 | DONE ins | na  8 16 | 00628d | 91 16       |                 sta.diy 000216       
 775:000 | DONE ins | na  8 16 | 00628f | c8          |                 iny                  ; single increase only because we have 8-bit A
 776:000 | DONE wsp | na  8 16 |        |             |
 777:000 | DONE ins | na  8 16 | 006290 | a9 f7       |                 lda.# .lsb 0067f7    
 778:000 | DONE ins | na  8 16 | 006292 | 91 16       |                 sta.diy 000216       
 779:000 | DONE ins | na  8 16 | 006294 | c8          |                 iny                  
 780:000 | DONE wsp | na  8 16 |        |             |
 781:000 | DONE ins | na  8 16 | 006295 | a9 67       |                 lda.# .msb 0067f7    
 782:000 | DONE ins | na  8 16 | 006297 | 91 16       |                 sta.diy 000216       
 783:000 | DONE wsp | na  8 16 |        |             |
 784:000 | DONE ins | na  8 16 | 006299 | c2 20       |                 rep 20               
 784:001 | DONE ctl | na 16 16 |        |             |         .!a16
 785:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
 786:000 | DONE ins | na 16 16 | 00629b | b4 02       |                 ldy.dx 02            
 787:000 | DONE ins | na 16 16 | 00629d | e8          |                 inx                  
 788:000 | DONE ins | na 16 16 | 00629e | e8          |                 inx                  
 789:000 | DONE ins | na 16 16 | 00629f | e8          |                 inx                  
 790:000 | DONE ins | na 16 16 | 0062a0 | e8          |                 inx                  
 791:000 | DONE wsp | na 16 16 |        |             |
 792:000 | DONE lbl | na 16 16 | 0062a1 |             | z_create                             
 792:001 | DONE ins | na 16 16 | 0062a1 | 60          |                 rts                  
 793:000 | DONE wsp | na 16 16 |        |             |
 794:000 | DONE wsp | na 16 16 |        |             |
 795:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 796:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
 797:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
 798:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
 799:000 | DONE lbl | na 16 16 | 0062a2 |             | a_depth                              
 800:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 801:000 | DONE cmt | na 16 16 |        |             | 		; We've got zero entries when X is dsp0
 802:000 | DONE ins | na 16 16 | 0062a2 | 86 04       |                 stx.d 000204         
 803:000 | DONE ins | na 16 16 | 0062a4 | a9 f0 02    |                 lda.# 0002f0         
 804:000 | DONE ins | na 16 16 | 0062a7 | 38          |                 sec                  
 805:000 | DONE ins | na 16 16 | 0062a8 | e5 04       |                 sbc.d 000204         
 806:000 | DONE wsp | na 16 16 |        |             |
 807:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
 808:000 | DONE ins | na 16 16 | 0062aa | 4a          |                 lsr.a                
 809:000 | DONE wsp | na 16 16 |        |             |
 810:000 | DONE ins | na 16 16 | 0062ab | ca          |                 dex                  
 811:000 | DONE ins | na 16 16 | 0062ac | ca          |                 dex                  
 812:000 | DONE ins | na 16 16 | 0062ad | 94 00       |                 sty.dx 00            
 813:000 | DONE wsp | na 16 16 |        |             |
 814:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
 815:000 | DONE ins | na 16 16 | 0062af | a8          |                 tay                  
 816:000 | DONE wsp | na 16 16 |        |             |
 817:000 | DONE lbl | na 16 16 | 0062b0 |             | z_depth                              
 817:001 | DONE ins | na 16 16 | 0062b0 | 60          |                 rts                  
 818:000 | DONE wsp | na 16 16 |        |             |
 819:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 820:000 | DONE cmt | na 16 16 |        |             | ; DOT ( n -- ) X bytes / X cycles
 821:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
 822:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
 823:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 824:000 | DONE cmt | na 16 16 |        |             | ; focus on size
 825:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
 826:000 | DONE lbl | na 16 16 | 0062b1 |             | a_dot                                
 827:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 828:000 | DONE ins | na 16 16 | 0062b1 | 98          |                 tya                  
 829:000 | DONE ins | na 16 16 | 0062b2 | 29 00 ff    |                 and.# 0ff00          
 830:000 | DONE ins | na 16 16 | 0062b5 | eb          |                 xba                  
 831:000 | DONE ins | na 16 16 | 0062b6 | 20 54 68    |                 jsr 006854           
 832:000 | DONE ins | na 16 16 | 0062b9 | 98          |                 tya                  
 833:000 | DONE ins | na 16 16 | 0062ba | 29 ff 00    |                 and.# 00ff           
 834:000 | DONE ins | na 16 16 | 0062bd | 20 54 68    |                 jsr 006854           
 835:000 | DONE ins | na 16 16 | 0062c0 | 20 b2 64    |                 jsr 0064b2           
 836:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 837:000 | DONE wsp | na 16 16 |        |             |
 838:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
 839:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
 840:000 | DONE ins | na 16 16 | 0062c3 | 20 1d 63    |                 jsr 00631d           
 841:000 | DONE wsp | na 16 16 |        |             |
 842:000 | DONE lbl | na 16 16 | 0062c6 |             | z_dot                                
 842:001 | DONE ins | na 16 16 | 0062c6 | 60          |                 rts                  
 843:000 | DONE wsp | na 16 16 |        |             |
 844:000 | DONE wsp | na 16 16 |        |             |
 845:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 846:000 | DONE cmt | na 16 16 |        |             | ; DOTPAREN ( "string" -- ) 13 bytes / X cycles
 847:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 848:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 849:000 | DONE lbl | na 16 16 | 0062c7 |             | a_dotparen                           
 850:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 851:000 | DONE ins | na 16 16 | 0062c7 | ca          |                 dex                  
 852:000 | DONE ins | na 16 16 | 0062c8 | ca          |                 dex                  
 853:000 | DONE ins | na 16 16 | 0062c9 | 94 00       |                 sty.dx 00            
 854:000 | DONE ins | na 16 16 | 0062cb | a0 29 00    |                 ldy.# 29             
 855:000 | DONE wsp | na 16 16 |        |             |
 856:000 | DONE ins | na 16 16 | 0062ce | 20 2f 64    |                 jsr 00642f           ; ( -- addr u)
 857:000 | DONE ins | na 16 16 | 0062d1 | 20 e5 64    |                 jsr 0064e5           
 858:000 | DONE wsp | na 16 16 |        |             |
 859:000 | DONE lbl | na 16 16 | 0062d4 |             | z_dotparen                           
 859:001 | DONE ins | na 16 16 | 0062d4 | 60          |                 rts                  
 860:000 | DONE wsp | na 16 16 |        |             |
 861:000 | DONE wsp | na 16 16 |        |             |
 862:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 863:000 | DONE cmt | na 16 16 |        |             | ; DOTS ".S" ( -- ) X bytes / X cycles
 864:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 865:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 866:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 867:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 868:000 | DONE lbl | na 16 16 | 0062d5 |             | a_dots                               
 869:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 870:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 871:000 | DONE ins | na 16 16 | 0062d5 | 20 a2 62    |                 jsr 0062a2           ; ( -- u)
 872:000 | DONE wsp | na 16 16 |        |             |
 873:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 874:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 875:000 | DONE ins | na 16 16 | 0062d8 | a9 3c 00    |                 lda.# 3c             
 876:000 | DONE ins | na 16 16 | 0062db | 20 30 60    |                 jsr 006030           
 877:000 | DONE wsp | na 16 16 |        |             |
 878:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 879:000 | DONE ins | na 16 16 | 0062de | 98          |                 tya                  
 880:000 | DONE ins | na 16 16 | 0062df | 29 00 ff    |                 and.# 0ff00          
 881:000 | DONE ins | na 16 16 | 0062e2 | eb          |                 xba                  
 882:000 | DONE ins | na 16 16 | 0062e3 | 20 54 68    |                 jsr 006854           
 883:000 | DONE ins | na 16 16 | 0062e6 | 98          |                 tya                  
 884:000 | DONE ins | na 16 16 | 0062e7 | 29 ff 00    |                 and.# 00ff           
 885:000 | DONE ins | na 16 16 | 0062ea | 20 54 68    |                 jsr 006854           
 886:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 887:000 | DONE wsp | na 16 16 |        |             |
 888:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 889:000 | DONE ins | na 16 16 | 0062ed | a9 3e 00    |                 lda.# 3e             
 890:000 | DONE ins | na 16 16 | 0062f0 | 20 30 60    |                 jsr 006030           
 891:000 | DONE ins | na 16 16 | 0062f3 | 20 b2 64    |                 jsr 0064b2           
 892:000 | DONE wsp | na 16 16 |        |             |
 893:000 | DONE wsp | na 16 16 |        |             |
 894:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 895:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 896:000 | DONE ins | na 16 16 | 0062f6 | 98          |                 tya                  ; force flag test
 897:000 | DONE ins | na 16 16 | 0062f7 | f0 20       |                 beq 006319           
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE lbl | na 16 16 | 0062f9 |             | dots_not_empty                       
 900:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 901:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 902:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 903:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 904:000 | DONE wsp | na 16 16 |        |             |
 905:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 906:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 907:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 908:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 909:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
 910:000 | DONE ins | na 16 16 | 0062f9 | da          |                 phx                  
 911:000 | DONE wsp | na 16 16 |        |             |
 912:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 913:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
 914:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
 915:000 | DONE ins | na 16 16 | 0062fa | a2 f0 02    |                 ldx.# 0002f0         ; points to dsp0, which is garbage
 916:000 | DONE ins | na 16 16 | 0062fd | ca          |                 dex                  
 917:000 | DONE ins | na 16 16 | 0062fe | ca          |                 dex                  ; points to dsp0-2, which is more garbage
 918:000 | DONE wsp | na 16 16 |        |             |
 919:000 | DONE lbl | na 16 16 | 0062ff |             | dots_loop                            
 920:000 | DONE ins | na 16 16 | 0062ff | ca          |                 dex                  ; get next element on DS, initially dsp0-4
 921:000 | DONE ins | na 16 16 | 006300 | ca          |                 dex                  
 922:000 | DONE wsp | na 16 16 |        |             |
 923:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 924:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 925:000 | DONE ins | na 16 16 | 006301 | b5 00       |                 lda.dx 00            
 926:000 | DONE ins | na 16 16 | 006303 | 29 00 ff    |                 and.# 0ff00          
 927:000 | DONE ins | na 16 16 | 006306 | eb          |                 xba                  
 928:000 | DONE ins | na 16 16 | 006307 | 20 54 68    |                 jsr 006854           
 929:000 | DONE ins | na 16 16 | 00630a | b5 00       |                 lda.dx 00            
 930:000 | DONE ins | na 16 16 | 00630c | 29 ff 00    |                 and.# 00ff           
 931:000 | DONE ins | na 16 16 | 00630f | 20 54 68    |                 jsr 006854           
 932:000 | DONE ins | na 16 16 | 006312 | 20 b2 64    |                 jsr 0064b2           
 933:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 934:000 | DONE wsp | na 16 16 |        |             |
 935:000 | DONE ins | na 16 16 | 006315 | 88          |                 dey                  
 936:000 | DONE ins | na 16 16 | 006316 | d0 e7       |                 bne 0062ff           
 937:000 | DONE wsp | na 16 16 |        |             |
 938:000 | DONE ins | na 16 16 | 006318 | fa          |                 plx                  ; restore original DSP
 939:000 | DONE wsp | na 16 16 |        |             |
 940:000 | DONE lbl | na 16 16 | 006319 |             | dots_done                            
 941:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 942:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 943:000 | DONE ins | na 16 16 | 006319 | 20 1d 63    |                 jsr 00631d           
 944:000 | DONE wsp | na 16 16 |        |             |
 945:000 | DONE lbl | na 16 16 | 00631c |             | z_dots                               
 945:001 | DONE ins | na 16 16 | 00631c | 60          |                 rts                  
 946:000 | DONE wsp | na 16 16 |        |             |
 947:000 | DONE wsp | na 16 16 |        |             |
 948:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 949:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
 950:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
 951:000 | DONE wsp | na 16 16 |        |             |
 952:000 | DONE lbl | na 16 16 | 00631d |             | a_drop                               
 953:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 954:000 | DONE ins | na 16 16 | 00631d | b4 00       |                 ldy.dx 00            
 955:000 | DONE ins | na 16 16 | 00631f | e8          |                 inx                  
 956:000 | DONE ins | na 16 16 | 006320 | e8          |                 inx                  
 957:000 | DONE wsp | na 16 16 |        |             |
 958:000 | DONE lbl | na 16 16 | 006321 |             | z_drop                               
 958:001 | DONE ins | na 16 16 | 006321 | 60          |                 rts                  
 959:000 | DONE wsp | na 16 16 |        |             |
 960:000 | DONE wsp | na 16 16 |        |             |
 961:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 962:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
 963:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
 964:000 | DONE wsp | na 16 16 |        |             |
 965:000 | DONE lbl | na 16 16 | 006322 |             | a_dup                                
 966:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 967:000 | DONE ins | na 16 16 | 006322 | ca          |                 dex                  
 968:000 | DONE ins | na 16 16 | 006323 | ca          |                 dex                  
 969:000 | DONE ins | na 16 16 | 006324 | 94 00       |                 sty.dx 00            
 970:000 | DONE wsp | na 16 16 |        |             |
 971:000 | DONE lbl | na 16 16 | 006326 |             | z_dup                                
 971:001 | DONE ins | na 16 16 | 006326 | 60          |                 rts                  
 972:000 | DONE wsp | na 16 16 |        |             |
 973:000 | DONE wsp | na 16 16 |        |             |
 974:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 975:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
 976:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
 977:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
 978:000 | DONE lbl | na 16 16 | 006327 |             | a_evaluate                           
 979:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
 980:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
 981:000 | DONE ins | na 16 16 | 006327 | a5 12       |                 lda.d 000212         ; >IN
 982:000 | DONE ins | na 16 16 | 006329 | 48          |                 pha                  
 983:000 | DONE ins | na 16 16 | 00632a | a5 0a       |                 lda.d 00020a         ; Input Source (SOURCE-ID)
 984:000 | DONE ins | na 16 16 | 00632c | 48          |                 pha                  
 985:000 | DONE ins | na 16 16 | 00632d | a5 0c       |                 lda.d 00020c         
 986:000 | DONE ins | na 16 16 | 00632f | 48          |                 pha                  
 987:000 | DONE ins | na 16 16 | 006330 | a5 0e       |                 lda.d 00020e         
 988:000 | DONE ins | na 16 16 | 006332 | 48          |                 pha                  
 989:000 | DONE wsp | na 16 16 |        |             |
 990:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
 991:000 | DONE ins | na 16 16 | 006333 | a9 ff ff    |                 lda.# 0ffff          
 992:000 | DONE ins | na 16 16 | 006336 | 85 0a       |                 sta.d 00020a         
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
 995:000 | DONE ins | na 16 16 | 006338 | 64 12       |                 stz.d 000212         
 996:000 | DONE wsp | na 16 16 |        |             |
 997:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
 998:000 | DONE ins | na 16 16 | 00633a | 84 0e       |                 sty.d 00020e         
 999:000 | DONE ins | na 16 16 | 00633c | b5 00       |                 lda.dx 00            
1000:000 | DONE ins | na 16 16 | 00633e | 85 0c       |                 sta.d 00020c         
1001:000 | DONE wsp | na 16 16 |        |             |
1002:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1003:000 | DONE ins | na 16 16 | 006340 | b4 02       |                 ldy.dx 02            
1004:000 | DONE ins | na 16 16 | 006342 | e8          |                 inx                  
1005:000 | DONE ins | na 16 16 | 006343 | e8          |                 inx                  
1006:000 | DONE ins | na 16 16 | 006344 | e8          |                 inx                  
1007:000 | DONE ins | na 16 16 | 006345 | e8          |                 inx                  
1008:000 | DONE wsp | na 16 16 |        |             |
1009:000 | DONE ins | na 16 16 | 006346 | 20 0c 68    |                 jsr 00680c           
1010:000 | DONE wsp | na 16 16 |        |             |
1011:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1012:000 | DONE ins | na 16 16 | 006349 | 68          |                 pla                  
1013:000 | DONE ins | na 16 16 | 00634a | 85 0e       |                 sta.d 00020e         
1014:000 | DONE ins | na 16 16 | 00634c | 68          |                 pla                  
1015:000 | DONE ins | na 16 16 | 00634d | 85 0c       |                 sta.d 00020c         
1016:000 | DONE ins | na 16 16 | 00634f | 68          |                 pla                  
1017:000 | DONE ins | na 16 16 | 006350 | 85 0a       |                 sta.d 00020a         
1018:000 | DONE ins | na 16 16 | 006352 | 68          |                 pla                  
1019:000 | DONE ins | na 16 16 | 006353 | 85 12       |                 sta.d 000212         
1020:000 | DONE wsp | na 16 16 |        |             |
1021:000 | DONE lbl | na 16 16 | 006355 |             | z_evaluate                           
1021:001 | DONE ins | na 16 16 | 006355 | 60          |                 rts                  
1022:000 | DONE wsp | na 16 16 |        |             |
1023:000 | DONE wsp | na 16 16 |        |             |
1024:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1025:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1026:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1027:000 | DONE wsp | na 16 16 |        |             |
1028:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1029:000 | DONE cmt | na 16 16 |        |             | ; range
1030:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1031:000 | DONE lbl | na 16 16 | 006356 |             | execute_ip                           
1031:001 | DONE dir | na 16 16 | 006356 | (3 bytes)   |         .byte 00, 00, 00             
1031:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1032:000 | DONE wsp | na 16 16 |        |             |
1033:000 | DONE lbl | na 16 16 | 006359 |             | a_execute                            
1034:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1035:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
1036:000 | DONE ins | na 16 16 | 006359 | 8c 56 63    |                 sty 006356           
1037:000 | DONE ins | na 16 16 | 00635c | b4 00       |                 ldy.dx 00            
1038:000 | DONE ins | na 16 16 | 00635e | e8          |                 inx                  
1039:000 | DONE ins | na 16 16 | 00635f | e8          |                 inx                  
1040:000 | DONE wsp | na 16 16 |        |             |
1041:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need, and all the
1042:000 | DONE cmt | na 16 16 |        |             |                 ; Forth commands end with a RTS instruction. We fake the address
1043:000 | DONE cmt | na 16 16 |        |             |                 ; by saving it by hand to the stack
1044:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1045:000 | DONE ins | na 16 16 | 006360 | a9 67 63    |                 lda.# 006367         
1046:000 | DONE ins | na 16 16 | 006363 | 48          |                 pha                  
1047:000 | DONE ins | na 16 16 | 006364 | 6c 56 63    |                 jmp.i 006356         ; JMP (EXECUTE_IP)
1048:000 | DONE wsp | na 16 16 |        |             |
1049:000 | DONE lbl | na 16 16 | 006367 |             | execute_done                         ; keep the NOP here as the landing site for the indirect
1050:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine jump (easier and quicker than adjusting the
1051:000 | DONE cmt | na 16 16 |        |             |                 ; return address on the stack)
1052:000 | DONE ins | na 16 16 | 006367 | ea          |                 nop                  
1053:000 | DONE wsp | na 16 16 |        |             |
1054:000 | DONE lbl | na 16 16 | 006368 |             | z_execute                            
1054:001 | DONE ins | na 16 16 | 006368 | 60          |                 rts                  
1055:000 | DONE wsp | na 16 16 |        |             |
1056:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1057:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1058:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1059:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have a_zero/z_zero instead of
1060:000 | DONE cmt | na 16 16 |        |             | ; a_false/z_false
1061:000 | DONE wsp | na 16 16 |        |             |
1062:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1063:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1064:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1065:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1066:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1067:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1068:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1069:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1070:000 | DONE lbl | na 16 16 | 006369 |             | a_find-name                          
1071:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1072:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1073:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1074:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1075:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1076:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1077:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1078:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1079:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1080:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1081:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1082:000 | DONE ins | na 16 16 | 006369 | 84 06       |                 sty.d 000206         ; length of mystery string in tmptos, Y now free
1083:000 | DONE wsp | na 16 16 |        |             |
1084:000 | DONE ins | na 16 16 | 00636b | a4 02       |                 ldy.d 000202         
1085:000 | DONE ins | na 16 16 | 00636d | 84 16       |                 sty.d 000216         ; nt of first Dictionary word
1086:000 | DONE wsp | na 16 16 |        |             |
1087:000 | DONE ins | na 16 16 | 00636f | b4 00       |                 ldy.dx 00            
1088:000 | DONE ins | na 16 16 | 006371 | 84 18       |                 sty.d 000218         ; address of mystery string, was NOS
1089:000 | DONE wsp | na 16 16 |        |             |
1090:000 | DONE lbl | na 16 16 | 006373 |             | find-name_loop                       
1091:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1092:000 | DONE ins | na 16 16 | 006373 | b2 16       |                 lda.di 000216        ; LSB in first header word is length
1093:000 | DONE ins | na 16 16 | 006375 | 29 ff 00    |                 and.# 00ff           
1094:000 | DONE ins | na 16 16 | 006378 | c5 06       |                 cmp.d 000206         ; we test LSB
1095:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1096:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1097:000 | DONE cmt | na 16 16 |        |             |                 ; same
1098:000 | DONE ins | na 16 16 | 00637a | f0 0c       |                 beq 006388           
1099:000 | DONE wsp | na 16 16 |        |             |
1100:000 | DONE lbl | na 16 16 | 00637c |             | find-name_next_entry                 
1101:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1102:000 | DONE ins | na 16 16 | 00637c | e6 16       |                 inc.d 000216         
1103:000 | DONE ins | na 16 16 | 00637e | e6 16       |                 inc.d 000216         
1104:000 | DONE ins | na 16 16 | 006380 | b2 16       |                 lda.di 000216        ; LDA (TMP1)
1105:000 | DONE wsp | na 16 16 |        |             |
1106:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1107:000 | DONE ins | na 16 16 | 006382 | f0 36       |                 beq 0063ba           
1108:000 | DONE wsp | na 16 16 |        |             |
1109:000 | DONE ins | na 16 16 | 006384 | 85 16       |                 sta.d 000216         ; new header
1110:000 | DONE ins | na 16 16 | 006386 | 80 eb       |                 bra 006373           
1111:000 | DONE wsp | na 16 16 |        |             |
1112:000 | DONE lbl | na 16 16 | 006388 |             | find-name_chars                      
1113:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1114:000 | DONE wsp | na 16 16 |        |             |
1115:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1116:000 | DONE ins | na 16 16 | 006388 | e2 20       |                 sep 20               
1116:001 | DONE ctl | na  8 16 |        |             |         .!a8
1117:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1118:000 | DONE cmt | na  8 16 |        |             |                 ; header
1119:000 | DONE ins | na  8 16 | 00638a | a0 08 00    |                 ldy.# 0008           
1120:000 | DONE ins | na  8 16 | 00638d | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y - first char of entry
1121:000 | DONE ins | na  8 16 | 00638f | d2 18       |                 cmp.di 000218        ; CMP (TMP2) - first char of mystery string
1122:000 | DONE ins | na  8 16 | 006391 | f0 04       |                 beq 006397           
1123:000 | DONE wsp | na  8 16 |        |             |
1124:000 | DONE lbl | na  8 16 | 006393 |             | find-name_char_nomatch_8             
1125:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1126:000 | DONE ins | na  8 16 | 006393 | c2 20       |                 rep 20               
1126:001 | DONE ctl | na 16 16 |        |             |         .!a16
1127:000 | DONE ins | na 16 16 | 006395 | 80 e5       |                 bra 00637c           
1128:000 | DONE wsp | na 16 16 |        |             |
1129:000 | DONE lbl | na 16 16 | 006397 |             | find-name_all_chars                  
1130:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1131:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1132:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1133:000 | DONE ins | na  8 16 | 006397 | a4 06       |                 ldy.d 000206         
1134:000 | DONE ins | na  8 16 | 006399 | 88          |                 dey                  ; faster and shorter than CPY.# 01
1135:000 | DONE ins | na  8 16 | 00639a | f0 18       |                 beq 0063b4           
1136:000 | DONE wsp | na  8 16 |        |             |
1137:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1138:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1139:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1140:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1141:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1142:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1143:000 | DONE wsp | na  8 16 |        |             |
1144:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1145:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1146:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1147:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1148:000 | DONE ins | na  8 16 | 00639c | c2 20       |                 rep 20               
1148:001 | DONE ctl | na 16 16 |        |             |         .!a16
1149:000 | DONE ins | na 16 16 | 00639e | a5 16       |                 lda.d 000216         ; address of Dictionary string
1150:000 | DONE ins | na 16 16 | 0063a0 | 18          |                 clc                  
1151:000 | DONE ins | na 16 16 | 0063a1 | 69 08 00    |                 adc.# 0008           
1152:000 | DONE ins | na 16 16 | 0063a4 | 85 1a       |                 sta.d 00021a         
1153:000 | DONE ins | na 16 16 | 0063a6 | e2 20       |                 sep 20               
1153:001 | DONE ctl | na  8 16 |        |             |         .!a8
1154:000 | DONE ins | na  8 16 | 0063a8 | a4 06       |                 ldy.d 000206         ; get length of strings as loop index
1155:000 | DONE ins | na  8 16 | 0063aa | 88          |                 dey                  ; first index is length minus 1
1156:000 | DONE wsp | na  8 16 |        |             |
1157:000 | DONE lbl | na  8 16 | 0063ab |             | @                                    
1158:000 | DONE ins | na  8 16 | 0063ab | b1 18       |                 lda.diy 000218       ; LDA (TMP2),Y - last char of mystery string
1159:000 | DONE ins | na  8 16 | 0063ad | d1 1a       |                 cmp.diy 00021a       ; CMP (TMP1),Y - last char of DP string
1160:000 | DONE ins | na  8 16 | 0063af | d0 e2       |                 bne 006393           
1161:000 | DONE ins | na  8 16 | 0063b1 | 88          |                 dey                  ; start of string (Y=0) was already tested
1162:000 | DONE ins | na  8 16 | 0063b2 | d0 f7       |                 bne 0063ab           
1163:000 | DONE wsp | na  8 16 |        |             |
1164:000 | DONE lbl | na  8 16 | 0063b4 |             | find-name_success                    
1165:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1166:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1167:000 | DONE ins | na  8 16 | 0063b4 | c2 20       |                 rep 20               
1167:001 | DONE ctl | na 16 16 |        |             |         .!a16
1168:000 | DONE ins | na 16 16 | 0063b6 | a4 16       |                 ldy.d 000216         ; get the correct DP
1169:000 | DONE ins | na 16 16 | 0063b8 | 80 03       |                 bra 0063bd           
1170:000 | DONE wsp | na 16 16 |        |             |
1171:000 | DONE wsp | na 16 16 |        |             |
1172:000 | DONE lbl | na 16 16 | 0063ba |             | find-name_failure_16                 
1173:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1174:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1175:000 | DONE ins | na 16 16 | 0063ba | a0 00 00    |                 ldy.# 0000           ; fall thru
1176:000 | DONE wsp | na 16 16 |        |             |
1177:000 | DONE lbl | na 16 16 | 0063bd |             | find-name_done                       
1178:000 | DONE ins | na 16 16 | 0063bd | e8          |                 inx                  ; drop old address (NIP)
1179:000 | DONE ins | na 16 16 | 0063be | e8          |                 inx                  
1180:000 | DONE wsp | na 16 16 |        |             |
1181:000 | DONE lbl | na 16 16 | 0063bf |             | z_find-name                          
1181:001 | DONE ins | na 16 16 | 0063bf | 60          |                 rts                  
1182:000 | DONE wsp | na 16 16 |        |             |
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1185:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
1186:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
1187:000 | DONE lbl | na 16 16 | 0063c0 |             | a_here                               
1188:000 | DONE dir | na 16 16 |        |             |         .!a16                        ; paranoid
1189:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1190:000 | DONE ins | na 16 16 | 0063c0 | ca          |                 dex                  
1191:000 | DONE ins | na 16 16 | 0063c1 | ca          |                 dex                  
1192:000 | DONE ins | na 16 16 | 0063c2 | 94 00       |                 sty.dx 00            
1193:000 | DONE wsp | na 16 16 |        |             |
1194:000 | DONE ins | na 16 16 | 0063c4 | a4 00       |                 ldy.d 000200         
1195:000 | DONE wsp | na 16 16 |        |             |
1196:000 | DONE lbl | na 16 16 | 0063c6 |             | z_here                               
1196:001 | DONE ins | na 16 16 | 0063c6 | 60          |                 rts                  
1197:000 | DONE wsp | na 16 16 |        |             |
1198:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1199:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
1200:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
1201:000 | DONE lbl | na 16 16 | 0063c7 |             | a_name-int                           
1202:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1203:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1204:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
1205:000 | DONE ins | na 16 16 | 0063c7 | c8          |                 iny                  
1206:000 | DONE ins | na 16 16 | 0063c8 | c8          |                 iny                  
1207:000 | DONE ins | na 16 16 | 0063c9 | c8          |                 iny                  
1208:000 | DONE ins | na 16 16 | 0063ca | c8          |                 iny                  
1209:000 | DONE ins | na 16 16 | 0063cb | b9 00 00    |                 lda.y 0000           
1210:000 | DONE ins | na 16 16 | 0063ce | a8          |                 tay                  
1211:000 | DONE wsp | na 16 16 |        |             |
1212:000 | DONE lbl | na 16 16 | 0063cf |             | z_name-int                           
1212:001 | DONE ins | na 16 16 | 0063cf | 60          |                 rts                  
1213:000 | DONE wsp | na 16 16 |        |             |
1214:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1215:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
1216:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
1217:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
1218:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
1219:000 | DONE lbl | na 16 16 | 0063d0 |             | a_name-string                        
1220:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1221:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1222:000 | DONE ins | na 16 16 | 0063d0 | ca          |                 dex                  ; move NOS down one
1223:000 | DONE ins | na 16 16 | 0063d1 | ca          |                 dex                  
1224:000 | DONE wsp | na 16 16 |        |             |
1225:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
1226:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
1227:000 | DONE ins | na 16 16 | 0063d2 | 98          |                 tya                  
1228:000 | DONE ins | na 16 16 | 0063d3 | 18          |                 clc                  
1229:000 | DONE ins | na 16 16 | 0063d4 | 69 08 00    |                 adc.# 0008           
1230:000 | DONE ins | na 16 16 | 0063d7 | 95 00       |                 sta.dx 00            ; NOS
1231:000 | DONE wsp | na 16 16 |        |             |
1232:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
1233:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
1234:000 | DONE ins | na 16 16 | 0063d9 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1235:000 | DONE ins | na 16 16 | 0063dc | 29 ff 00    |                 and.# 00ff           ; mask all but length byte
1236:000 | DONE ins | na 16 16 | 0063df | a8          |                 tay                  
1237:000 | DONE wsp | na 16 16 |        |             |
1238:000 | DONE lbl | na 16 16 | 0063e0 |             | z_name-string                        
1238:001 | DONE ins | na 16 16 | 0063e0 | 60          |                 rts                  
1239:000 | DONE wsp | na 16 16 |        |             |
1240:000 | DONE wsp | na 16 16 |        |             |
1241:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1242:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
1243:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
1244:000 | DONE lbl | na 16 16 | 0063e1 |             | a_nip                                
1245:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1246:000 | DONE ins | na 16 16 | 0063e1 | e8          |                 inx                  
1247:000 | DONE ins | na 16 16 | 0063e2 | e8          |                 inx                  
1248:000 | DONE lbl | na 16 16 | 0063e3 |             | z_nip                                
1248:001 | DONE ins | na 16 16 | 0063e3 | 60          |                 rts                  
1249:000 | DONE wsp | na 16 16 |        |             |
1250:000 | DONE wsp | na 16 16 |        |             |
1251:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1252:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
1253:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
1254:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
1255:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
1256:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
1257:000 | DONE lbl | na 16 16 | 0063e4 |             | a_pad                                
1258:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1259:000 | DONE ins | na 16 16 | 0063e4 | ca          |                 dex                  
1260:000 | DONE ins | na 16 16 | 0063e5 | ca          |                 dex                  
1261:000 | DONE ins | na 16 16 | 0063e6 | 94 00       |                 sty.dx 00            
1262:000 | DONE wsp | na 16 16 |        |             |
1263:000 | DONE ins | na 16 16 | 0063e8 | a5 00       |                 lda.d 000200         
1264:000 | DONE ins | na 16 16 | 0063ea | 18          |                 clc                  
1265:000 | DONE ins | na 16 16 | 0063eb | 69 7f 00    |                 adc.# 00007f         
1266:000 | DONE ins | na 16 16 | 0063ee | a8          |                 tay                  
1267:000 | DONE wsp | na 16 16 |        |             |
1268:000 | DONE lbl | na 16 16 | 0063ef |             | z_pad                                
1268:001 | DONE ins | na 16 16 | 0063ef | 60          |                 rts                  
1269:000 | DONE wsp | na 16 16 |        |             |
1270:000 | DONE wsp | na 16 16 |        |             |
1271:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1272:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
1273:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
1274:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
1275:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
1276:000 | DONE lbl | na 16 16 | 0063f0 |             | a_page                               
1277:000 | DONE ins | na 16 16 | 0063f0 | a9 72 6a    |                 lda.# 006a72         
1278:000 | DONE ins | na 16 16 | 0063f3 | 20 3c 68    |                 jsr 00683c           
1279:000 | DONE wsp | na 16 16 |        |             |
1280:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
1281:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
1282:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
1283:000 | DONE ins | na 16 16 | 0063f6 | a9 77 6a    |                 lda.# 006a77         
1284:000 | DONE ins | na 16 16 | 0063f9 | 20 3c 68    |                 jsr 00683c           
1285:000 | DONE wsp | na 16 16 |        |             |
1286:000 | DONE lbl | na 16 16 | 0063fc |             | z_page                               
1286:001 | DONE ins | na 16 16 | 0063fc | 60          |                 rts                  
1287:000 | DONE wsp | na 16 16 |        |             |
1288:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1289:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
1290:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
1291:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
1292:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
1293:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
1294:000 | DONE lbl | na 16 16 | 0063fd |             | a_parse-name                         
1295:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1296:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1297:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
1298:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
1299:000 | DONE ins | na 16 16 | 0063fd | 5a          |                 phy                  ; save TOS for later use
1300:000 | DONE ins | na 16 16 | 0063fe | a4 12       |                 ldy.d 000212         ; >IN
1301:000 | DONE ins | na 16 16 | 006400 | e2 20       |                 sep 20               
1301:001 | DONE ctl | na  8 16 |        |             |         .!a8
1302:000 | DONE lbl | na  8 16 | 006402 |             | parse-name_loop                      
1303:000 | DONE ins | na  8 16 | 006402 | c4 0e       |                 cpy.d 00020e         ; end of line?
1304:000 | DONE ins | na  8 16 | 006404 | f0 09       |                 beq 00640f           
1305:000 | DONE wsp | na  8 16 |        |             |
1306:000 | DONE ins | na  8 16 | 006406 | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1307:000 | DONE ins | na  8 16 | 006408 | c9 20       |                 cmp.# AscSP          
1308:000 | DONE ins | na  8 16 | 00640a | d0 17       |                 bne 006423           
1309:000 | DONE ins | na  8 16 | 00640c | c8          |                 iny                  
1310:000 | DONE ins | na  8 16 | 00640d | 80 f3       |                 bra 006402           
1311:000 | DONE wsp | na  8 16 |        |             |
1312:000 | DONE lbl | na  8 16 | 00640f |             | parse-name_empty_line                
1313:000 | DONE ins | na  8 16 | 00640f | c2 20       |                 rep 20               
1313:001 | DONE ctl | na 16 16 |        |             |         .!a16
1314:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
1315:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
1316:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
1317:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
1318:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
1319:000 | DONE ins | na 16 16 | 006411 | ca          |                 dex                  
1320:000 | DONE ins | na 16 16 | 006412 | ca          |                 dex                  
1321:000 | DONE ins | na 16 16 | 006413 | ca          |                 dex                  
1322:000 | DONE ins | na 16 16 | 006414 | ca          |                 dex                  
1323:000 | DONE wsp | na 16 16 |        |             |
1324:000 | DONE ins | na 16 16 | 006415 | 7a          |                 ply                  ; restore old TOS as 3OS
1325:000 | DONE ins | na 16 16 | 006416 | 94 02       |                 sty.dx 02            
1326:000 | DONE wsp | na 16 16 |        |             |
1327:000 | DONE ins | na 16 16 | 006418 | a5 0c       |                 lda.d 00020c         
1328:000 | DONE ins | na 16 16 | 00641a | 18          |                 clc                  
1329:000 | DONE ins | na 16 16 | 00641b | 65 0e       |                 adc.d 00020e         
1330:000 | DONE ins | na 16 16 | 00641d | 95 00       |                 sta.dx 00            ; Address as NOS
1331:000 | DONE wsp | na 16 16 |        |             |
1332:000 | DONE ins | na 16 16 | 00641f | a0 00 00    |                 ldy.# 0000           ; TOS
1333:000 | DONE wsp | na 16 16 |        |             |
1334:000 | DONE ins | na 16 16 | 006422 | 60          |                 rts                  ; don't have to go through PARSE
1335:000 | DONE wsp | na 16 16 |        |             |
1336:000 | DONE lbl | na 16 16 | 006423 |             | parse-name_found                     
1337:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1338:000 | DONE ins | na 16 16 | 006423 | c2 20       |                 rep 20               
1338:001 | DONE ctl | na 16 16 |        |             |         .!a16
1339:000 | DONE ins | na 16 16 | 006425 | 84 12       |                 sty.d 000212         ; new >IN
1340:000 | DONE wsp | na 16 16 |        |             |
1341:000 | DONE ins | na 16 16 | 006427 | 7a          |                 ply                  ; recover TOS
1342:000 | DONE ins | na 16 16 | 006428 | ca          |                 dex                  
1343:000 | DONE ins | na 16 16 | 006429 | ca          |                 dex                  
1344:000 | DONE ins | na 16 16 | 00642a | 94 00       |                 sty.dx 00            
1345:000 | DONE wsp | na 16 16 |        |             |
1346:000 | DONE ins | na 16 16 | 00642c | a0 20 00    |                 ldy.# AscSP          ; put space on TOS for PARSE
1347:000 | DONE wsp | na 16 16 |        |             |
1348:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
1349:000 | DONE wsp | na 16 16 |        |             |
1350:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1351:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
1352:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
1353:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
1354:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
1355:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
1356:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
1357:000 | DONE cmt | na 16 16 |        |             | ;
1358:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
1359:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
1360:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
1361:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
1362:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
1363:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
1364:000 | DONE cmt | na 16 16 |        |             | ;
1365:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
1366:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
1367:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
1368:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
1369:000 | DONE lbl | na 16 16 | 00642f |             | a_parse                              
1370:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1371:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1372:000 | DONE ins | na 16 16 | 00642f | 84 16       |                 sty.d 000216         ; save delimiter, char is LSB
1373:000 | DONE wsp | na 16 16 |        |             |
1374:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
1375:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
1376:000 | DONE cmt | na 16 16 |        |             |                 ; return
1377:000 | DONE ins | na 16 16 | 006431 | a5 12       |                 lda.d 000212         
1378:000 | DONE ins | na 16 16 | 006433 | 85 1a       |                 sta.d 00021a         ; save >IN for later length calculation
1379:000 | DONE ins | na 16 16 | 006435 | 18          |                 clc                  
1380:000 | DONE ins | na 16 16 | 006436 | 65 0c       |                 adc.d 00020c         
1381:000 | DONE wsp | na 16 16 |        |             |
1382:000 | DONE ins | na 16 16 | 006438 | ca          |                 dex                  ; save addr as NOS
1383:000 | DONE ins | na 16 16 | 006439 | ca          |                 dex                  
1384:000 | DONE ins | na 16 16 | 00643a | 95 00       |                 sta.dx 00            
1385:000 | DONE wsp | na 16 16 |        |             |
1386:000 | DONE ins | na 16 16 | 00643c | 64 18       |                 stz.d 000218         ; offset for EOL/char found adjustment of >IN
1387:000 | DONE wsp | na 16 16 |        |             |
1388:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
1389:000 | DONE ins | na 16 16 | 00643e | a4 12       |                 ldy.d 000212         
1390:000 | DONE ins | na 16 16 | 006440 | e2 20       |                 sep 20               
1390:001 | DONE ctl | na  8 16 |        |             |         .!a8
1391:000 | DONE wsp | na  8 16 |        |             |
1392:000 | DONE lbl | na  8 16 | 006442 |             | parse_loop                           
1393:000 | DONE ins | na  8 16 | 006442 | c4 0e       |                 cpy.d 00020e         ; check for EOL first
1394:000 | DONE ins | na  8 16 | 006444 | f0 0d       |                 beq 006453           
1395:000 | DONE wsp | na  8 16 |        |             |
1396:000 | DONE ins | na  8 16 | 006446 | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1397:000 | DONE ins | na  8 16 | 006448 | c5 16       |                 cmp.d 000216         ; found delimiter?
1398:000 | DONE ins | na  8 16 | 00644a | f0 03       |                 beq 00644f           
1399:000 | DONE ins | na  8 16 | 00644c | c8          |                 iny                  
1400:000 | DONE ins | na  8 16 | 00644d | 80 f3       |                 bra 006442           
1401:000 | DONE wsp | na  8 16 |        |             |
1402:000 | DONE lbl | na  8 16 | 00644f |             | parse_found_delimiter                
1403:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
1404:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
1405:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
1406:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
1407:000 | DONE ins | na  8 16 | 00644f | c2 20       |                 rep 20               
1407:001 | DONE ctl | na 16 16 |        |             |         .!a16
1408:000 | DONE ins | na 16 16 | 006451 | e6 18       |                 inc.d 000218         
1409:000 | DONE wsp | na 16 16 |        |             |
1410:000 | DONE lbl | na 16 16 | 006453 |             | parse_reached_eol                    
1411:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
1412:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1413:000 | DONE ins | na 16 16 | 006453 | c2 20       |                 rep 20               
1413:001 | DONE ctl | na 16 16 |        |             |         .!a16
1414:000 | DONE ins | na 16 16 | 006455 | 98          |                 tya                  
1415:000 | DONE ins | na 16 16 | 006456 | 38          |                 sec                  
1416:000 | DONE ins | na 16 16 | 006457 | e5 1a       |                 sbc.d 00021a         ; original value for >IN / index of first char
1417:000 | DONE ins | na 16 16 | 006459 | 48          |                 pha                  ; save so we can manipulate Y
1418:000 | DONE wsp | na 16 16 |        |             |
1419:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
1420:000 | DONE ins | na 16 16 | 00645a | 98          |                 tya                  
1421:000 | DONE ins | na 16 16 | 00645b | 18          |                 clc                  
1422:000 | DONE ins | na 16 16 | 00645c | 65 18       |                 adc.d 000218         ; offset for EOL vs found delimiter
1423:000 | DONE ins | na 16 16 | 00645e | 85 12       |                 sta.d 000212         
1424:000 | DONE wsp | na 16 16 |        |             |
1425:000 | DONE ins | na 16 16 | 006460 | 7a          |                 ply                  ; length of string in TOS
1426:000 | DONE wsp | na 16 16 |        |             |
1427:000 | DONE lbl | na 16 16 | 006461 |             | z_parse-name                         
1428:000 | DONE lbl | na 16 16 | 006461 |             | z_parse                              
1428:001 | DONE ins | na 16 16 | 006461 | 60          |                 rts                  
1429:000 | DONE wsp | na 16 16 |        |             |
1430:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1431:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
1432:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
1433:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
1434:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
1435:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
1436:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
1437:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
1438:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
1439:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
1440:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
1441:000 | DONE lbl | na 16 16 | 006462 |             | a_refill                             
1442:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1443:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1444:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
1445:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
1446:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
1447:000 | DONE ins | na 16 16 | 006462 | a5 0c       |                 lda.d 00020c         
1448:000 | DONE ins | na 16 16 | 006464 | 49 00 01    |                 eor.# 0100           ; flip 07d00 / 07c00
1449:000 | DONE ins | na 16 16 | 006467 | 85 0c       |                 sta.d 00020c         
1450:000 | DONE wsp | na 16 16 |        |             |
1451:000 | DONE ins | na 16 16 | 006469 | a5 0e       |                 lda.d 00020e         ; current length is now previous length
1452:000 | DONE ins | na 16 16 | 00646b | 85 10       |                 sta.d 000210         
1453:000 | DONE wsp | na 16 16 |        |             |
1454:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
1455:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
1456:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
1457:000 | DONE ins | na 16 16 | 00646d | a5 0a       |                 lda.d 00020a         
1458:000 | DONE ins | na 16 16 | 00646f | d0 14       |                 bne 006485           
1459:000 | DONE wsp | na 16 16 |        |             |
1460:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
1461:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
1462:000 | DONE ins | na 16 16 | 006471 | ca          |                 dex                  ; push Data Stack down twice
1463:000 | DONE ins | na 16 16 | 006472 | ca          |                 dex                  
1464:000 | DONE ins | na 16 16 | 006473 | 94 00       |                 sty.dx 00            
1465:000 | DONE wsp | na 16 16 |        |             |
1466:000 | DONE ins | na 16 16 | 006475 | a5 0c       |                 lda.d 00020c         ; address of current input buffer NOS
1467:000 | DONE ins | na 16 16 | 006477 | ca          |                 dex                  
1468:000 | DONE ins | na 16 16 | 006478 | ca          |                 dex                  
1469:000 | DONE ins | na 16 16 | 006479 | 95 00       |                 sta.dx 00            
1470:000 | DONE wsp | na 16 16 |        |             |
1471:000 | DONE ins | na 16 16 | 00647b | a0 ff 00    |                 ldy.# 0000ff         
1472:000 | DONE wsp | na 16 16 |        |             |
1473:000 | DONE ins | na 16 16 | 00647e | 20 57 61    |                 jsr 006157           ; ( addr n1 -- n2)
1474:000 | DONE wsp | na 16 16 |        |             |
1475:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
1476:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
1477:000 | DONE ins | na 16 16 | 006481 | a0 ff ff    |                 ldy.# 0ffff          
1478:000 | DONE wsp | na 16 16 |        |             |
1479:000 | DONE ins | na 16 16 | 006484 | 60          |                 rts                  
1480:000 | DONE wsp | na 16 16 |        |             |
1481:000 | DONE lbl | na 16 16 | 006485 |             | refill_src_not_kbd                   
1482:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
1483:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
1484:000 | DONE ins | na 16 16 | 006485 | 1a          |                 inc.a                
1485:000 | DONE ins | na 16 16 | 006486 | d0 06       |                 bne 00648e           
1486:000 | DONE wsp | na 16 16 |        |             |
1487:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
1488:000 | DONE ins | na 16 16 | 006488 | ca          |                 dex                  
1489:000 | DONE ins | na 16 16 | 006489 | ca          |                 dex                  
1490:000 | DONE ins | na 16 16 | 00648a | 94 00       |                 sty.dx 00            
1491:000 | DONE ins | na 16 16 | 00648c | a8          |                 tay                  
1492:000 | DONE wsp | na 16 16 |        |             |
1493:000 | DONE ins | na 16 16 | 00648d | 60          |                 rts                  
1494:000 | DONE wsp | na 16 16 |        |             |
1495:000 | DONE lbl | na 16 16 | 00648e |             | refill_source_is_not_string          
1496:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
1497:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
1498:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
1499:000 | DONE ins | na 16 16 | 00648e | a9 32 6a    |                 lda.# 006a32         
1500:000 | DONE ins | na 16 16 | 006491 | 4c 36 68    |                 jmp 006836           
1501:000 | DONE wsp | na 16 16 |        |             |
1502:000 | DONE lbl | na 16 16 | 006494 |             | z_refill                             
1502:001 | DONE ins | na 16 16 | 006494 | 60          |                 rts                  ; dummy for compiling
1503:000 | DONE wsp | na 16 16 |        |             |
1504:000 | DONE wsp | na 16 16 |        |             |
1505:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1506:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
1507:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
1508:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
1509:000 | DONE lbl | na 16 16 | 006495 |             | a_rot                                
1510:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1511:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1512:000 | DONE ins | na 16 16 | 006495 | b5 00       |                 lda.dx 00            ; save b
1513:000 | DONE ins | na 16 16 | 006497 | 94 00       |                 sty.dx 00            ; move c to NOS
1514:000 | DONE ins | na 16 16 | 006499 | b4 02       |                 ldy.dx 02            ; move a to TOS
1515:000 | DONE ins | na 16 16 | 00649b | 95 02       |                 sta.dx 02            ; save b as 3OS
1516:000 | DONE wsp | na 16 16 |        |             |
1517:000 | DONE lbl | na 16 16 | 00649d |             | z_rot                                
1517:001 | DONE ins | na 16 16 | 00649d | 60          |                 rts                  
1518:000 | DONE wsp | na 16 16 |        |             |
1519:000 | DONE wsp | na 16 16 |        |             |
1520:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1521:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
1522:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
1523:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
1524:000 | DONE wsp | na 16 16 |        |             |
1525:000 | DONE lbl | na 16 16 | 00649e |             | a_source                             
1525:001 | DONE ins | na 16 16 | 00649e | ca          |                 dex                  ; make room on Data Stack
1526:000 | DONE ins | na 16 16 | 00649f | ca          |                 dex                  
1527:000 | DONE ins | na 16 16 | 0064a0 | ca          |                 dex                  
1528:000 | DONE ins | na 16 16 | 0064a1 | ca          |                 dex                  
1529:000 | DONE ins | na 16 16 | 0064a2 | 94 02       |                 sty.dx 02            
1530:000 | DONE wsp | na 16 16 |        |             |
1531:000 | DONE ins | na 16 16 | 0064a4 | a5 0c       |                 lda.d 00020c         ; address of current input buffer as NOS
1532:000 | DONE ins | na 16 16 | 0064a6 | 95 00       |                 sta.dx 00            
1533:000 | DONE wsp | na 16 16 |        |             |
1534:000 | DONE ins | na 16 16 | 0064a8 | a4 0e       |                 ldy.d 00020e         ; length of current input buffer as TOS
1535:000 | DONE wsp | na 16 16 |        |             |
1536:000 | DONE lbl | na 16 16 | 0064aa |             | z_source                             
1536:001 | DONE ins | na 16 16 | 0064aa | 60          |                 rts                  
1537:000 | DONE wsp | na 16 16 |        |             |
1538:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1539:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
1540:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
1541:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
1542:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
1543:000 | DONE wsp | na 16 16 |        |             |
1544:000 | DONE lbl | na 16 16 | 0064ab |             | a_source-id                          
1545:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1546:000 | DONE ins | na 16 16 | 0064ab | ca          |                 dex                  
1547:000 | DONE ins | na 16 16 | 0064ac | ca          |                 dex                  
1548:000 | DONE ins | na 16 16 | 0064ad | 94 00       |                 sty.dx 00            
1549:000 | DONE ins | na 16 16 | 0064af | a4 0a       |                 ldy.d 00020a         
1550:000 | DONE wsp | na 16 16 |        |             |
1551:000 | DONE lbl | na 16 16 | 0064b1 |             | z_source-id                          
1551:001 | DONE ins | na 16 16 | 0064b1 | 60          |                 rts                  
1552:000 | DONE wsp | na 16 16 |        |             |
1553:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1554:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
1555:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
1556:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
1557:000 | DONE lbl | na 16 16 | 0064b2 |             | a_space                              
1558:000 | DONE ins | na 16 16 | 0064b2 | a9 20 00    |                 lda.# AscSP          
1559:000 | DONE ins | na 16 16 | 0064b5 | 20 30 60    |                 jsr 006030           
1560:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1561:000 | DONE wsp | na 16 16 |        |             |
1562:000 | DONE lbl | na 16 16 | 0064b8 |             | z_space                              
1562:001 | DONE ins | na 16 16 | 0064b8 | 60          |                 rts                  
1563:000 | DONE wsp | na 16 16 |        |             |
1564:000 | DONE wsp | na 16 16 |        |             |
1565:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1566:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
1567:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
1568:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
1569:000 | DONE lbl | na 16 16 | 0064b9 |             | a_spaces                             
1570:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1571:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1572:000 | DONE lbl | na 16 16 | 0064b9 |             | @                                    
1573:000 | DONE ins | na 16 16 | 0064b9 | 88          |                 dey                  ; this also handles case u=0
1574:000 | DONE ins | na 16 16 | 0064ba | 30 05       |                 bmi 0064c1           
1575:000 | DONE wsp | na 16 16 |        |             |
1576:000 | DONE ins | na 16 16 | 0064bc | 20 b2 64    |                 jsr 0064b2           
1577:000 | DONE ins | na 16 16 | 0064bf | 80 f8       |                 bra 0064b9           
1578:000 | DONE wsp | na 16 16 |        |             |
1579:000 | DONE lbl | na 16 16 | 0064c1 |             | spaces_done                          
1580:000 | DONE ins | na 16 16 | 0064c1 | b4 00       |                 ldy.dx 00            ; DROP
1581:000 | DONE ins | na 16 16 | 0064c3 | e8          |                 inx                  
1582:000 | DONE ins | na 16 16 | 0064c4 | e8          |                 inx                  
1583:000 | DONE wsp | na 16 16 |        |             |
1584:000 | DONE lbl | na 16 16 | 0064c5 |             | z_spaces                             
1584:001 | DONE ins | na 16 16 | 0064c5 | 60          |                 rts                  
1585:000 | DONE wsp | na 16 16 |        |             |
1586:000 | DONE wsp | na 16 16 |        |             |
1587:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1588:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
1589:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
1590:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
1591:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
1592:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
1593:000 | DONE lbl | na 16 16 | 0064c6 |             | a_state                              
1594:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1595:000 | DONE ins | na 16 16 | 0064c6 | ca          |                 dex                  
1596:000 | DONE ins | na 16 16 | 0064c7 | ca          |                 dex                  
1597:000 | DONE ins | na 16 16 | 0064c8 | 94 00       |                 sty.dx 00            
1598:000 | DONE ins | na 16 16 | 0064ca | a0 14 02    |                 ldy.# 000214         
1599:000 | DONE wsp | na 16 16 |        |             |
1600:000 | DONE lbl | na 16 16 | 0064cd |             | z_state                              
1600:001 | DONE ins | na 16 16 | 0064cd | 60          |                 rts                  
1601:000 | DONE wsp | na 16 16 |        |             |
1602:000 | DONE wsp | na 16 16 |        |             |
1603:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1604:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
1605:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
1606:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
1607:000 | DONE lbl | na 16 16 | 0064ce |             | a_swap                               
1608:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1609:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1610:000 | DONE ins | na 16 16 | 0064ce | b5 00       |                 lda.dx 00            
1611:000 | DONE ins | na 16 16 | 0064d0 | 94 00       |                 sty.dx 00            
1612:000 | DONE ins | na 16 16 | 0064d2 | a8          |                 tay                  
1613:000 | DONE wsp | na 16 16 |        |             |
1614:000 | DONE lbl | na 16 16 | 0064d3 |             | z_swap                               
1614:001 | DONE ins | na 16 16 | 0064d3 | 60          |                 rts                  
1615:000 | DONE wsp | na 16 16 |        |             |
1616:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1617:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
1618:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
1619:000 | DONE lbl | na 16 16 | 0064d4 |             | a_true                               
1620:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1621:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1622:000 | DONE ins | na 16 16 | 0064d4 | ca          |                 dex                  
1623:000 | DONE ins | na 16 16 | 0064d5 | ca          |                 dex                  
1624:000 | DONE ins | na 16 16 | 0064d6 | 94 00       |                 sty.dx 00            
1625:000 | DONE ins | na 16 16 | 0064d8 | a0 ff ff    |                 ldy.# 0ffff          
1626:000 | DONE wsp | na 16 16 |        |             |
1627:000 | DONE lbl | na 16 16 | 0064db |             | z_true                               
1627:001 | DONE ins | na 16 16 | 0064db | 60          |                 rts                  
1628:000 | DONE wsp | na 16 16 |        |             |
1629:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1630:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
1631:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
1632:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
1633:000 | DONE lbl | na 16 16 | 0064dc |             | a_tuck                               
1634:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1635:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1636:000 | DONE ins | na 16 16 | 0064dc | ca          |                 dex                  
1637:000 | DONE ins | na 16 16 | 0064dd | ca          |                 dex                  
1638:000 | DONE ins | na 16 16 | 0064de | b5 02       |                 lda.dx 2             
1639:000 | DONE ins | na 16 16 | 0064e0 | 95 00       |                 sta.dx 0             
1640:000 | DONE ins | na 16 16 | 0064e2 | 94 02       |                 sty.dx 2             
1641:000 | DONE wsp | na 16 16 |        |             |
1642:000 | DONE lbl | na 16 16 | 0064e4 |             | z_tuck                               
1642:001 | DONE ins | na 16 16 | 0064e4 | 60          |                 rts                  
1643:000 | DONE wsp | na 16 16 |        |             |
1644:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1645:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
1646:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
1647:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
1648:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
1649:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
1650:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
1651:000 | DONE cmt | na 16 16 |        |             | ; running.
1652:000 | DONE lbl | na 16 16 | 0064e5 |             | a_type                               
1653:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1654:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1655:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
1656:000 | DONE ins | na 16 16 | 0064e5 | 98          |                 tya                  ; force flag check of TOS
1657:000 | DONE ins | na 16 16 | 0064e6 | f0 17       |                 beq 0064ff           
1658:000 | DONE wsp | na 16 16 |        |             |
1659:000 | DONE ins | na 16 16 | 0064e8 | b5 00       |                 lda.dx 00            ; get address from NOS
1660:000 | DONE ins | na 16 16 | 0064ea | 85 16       |                 sta.d 000216         
1661:000 | DONE ins | na 16 16 | 0064ec | 84 18       |                 sty.d 000218         ; number of chars is TOS
1662:000 | DONE ins | na 16 16 | 0064ee | a0 00 00    |                 ldy.# 0000           
1663:000 | DONE ins | na 16 16 | 0064f1 | e2 20       |                 sep 20               
1663:001 | DONE ctl | na  8 16 |        |             |         .!a8
1664:000 | DONE lbl | na  8 16 | 0064f3 |             | type_loop                            
1665:000 | DONE ins | na  8 16 | 0064f3 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
1666:000 | DONE ins | na  8 16 | 0064f5 | 20 30 60    |                 jsr 006030           
1667:000 | DONE ins | na  8 16 | 0064f8 | c8          |                 iny                  
1668:000 | DONE ins | na  8 16 | 0064f9 | c4 18       |                 cpy.d 000218         
1669:000 | DONE ins | na  8 16 | 0064fb | d0 f6       |                 bne 0064f3           
1670:000 | DONE wsp | na  8 16 |        |             |
1671:000 | DONE ins | na  8 16 | 0064fd | c2 20       |                 rep 20               
1671:001 | DONE ctl | na 16 16 |        |             |         .!a16
1672:000 | DONE lbl | na 16 16 | 0064ff |             | type_done                            
1673:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
1674:000 | DONE ins | na 16 16 | 0064ff | b4 02       |                 ldy.dx 02            
1675:000 | DONE ins | na 16 16 | 006501 | e8          |                 inx                  
1676:000 | DONE ins | na 16 16 | 006502 | e8          |                 inx                  
1677:000 | DONE ins | na 16 16 | 006503 | e8          |                 inx                  
1678:000 | DONE ins | na 16 16 | 006504 | e8          |                 inx                  
1679:000 | DONE wsp | na 16 16 |        |             |
1680:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
1681:000 | DONE wsp | na 16 16 |        |             |
1682:000 | DONE lbl | na 16 16 | 006505 |             | z_type                               
1682:001 | DONE ins | na 16 16 | 006505 | 60          |                 rts                  
1683:000 | DONE wsp | na 16 16 |        |             |
1684:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1685:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
1686:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
1687:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
1688:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
1689:000 | DONE lbl | na 16 16 | 006506 |             | a_unused                             
1690:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1691:000 | DONE ins | na 16 16 | 006506 | a9 ff 7b    |                 lda.# 007bff         
1692:000 | DONE ins | na 16 16 | 006509 | 38          |                 sec                  
1693:000 | DONE ins | na 16 16 | 00650a | e5 00       |                 sbc.d 000200         ; current compile pointer
1694:000 | DONE wsp | na 16 16 |        |             |
1695:000 | DONE ins | na 16 16 | 00650c | ca          |                 dex                  
1696:000 | DONE ins | na 16 16 | 00650d | ca          |                 dex                  
1697:000 | DONE ins | na 16 16 | 00650e | 94 00       |                 sty.dx 00            
1698:000 | DONE wsp | na 16 16 |        |             |
1699:000 | DONE ins | na 16 16 | 006510 | a8          |                 tay                  
1700:000 | DONE wsp | na 16 16 |        |             |
1701:000 | DONE lbl | na 16 16 | 006511 |             | z_unused                             
1701:001 | DONE ins | na 16 16 | 006511 | 60          |                 rts                  
1702:000 | DONE wsp | na 16 16 |        |             |
1703:000 | DONE wsp | na 16 16 |        |             |
1704:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1705:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
1706:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
1707:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
1708:000 | DONE lbl | na 16 16 | 006512 |             | a_words                              
1709:000 | DONE ins | na 16 16 | 006512 | 20 26 62    |                 jsr 006226           ; start on next line, this is a style choice
1710:000 | DONE wsp | na 16 16 |        |             |
1711:000 | DONE ins | na 16 16 | 006515 | a5 02       |                 lda.d 000202         ; nt of first entry in Dictionary (last added)
1712:000 | DONE ins | na 16 16 | 006517 | 48          |                 pha                  
1713:000 | DONE wsp | na 16 16 |        |             |
1714:000 | DONE ins | na 16 16 | 006518 | ca          |                 dex                  ; create room on TOS
1715:000 | DONE ins | na 16 16 | 006519 | ca          |                 dex                  
1716:000 | DONE ins | na 16 16 | 00651a | 94 00       |                 sty.dx 00            
1717:000 | DONE wsp | na 16 16 |        |             |
1718:000 | DONE lbl | na 16 16 | 00651c |             | words_loop                           
1719:000 | DONE ins | na 16 16 | 00651c | a8          |                 tay                  ; ( nt )
1720:000 | DONE wsp | na 16 16 |        |             |
1721:000 | DONE ins | na 16 16 | 00651d | 20 d0 63    |                 jsr 0063d0           ; ( nt -- addr u )
1722:000 | DONE ins | na 16 16 | 006520 | 20 e5 64    |                 jsr 0064e5           ; ( addr u -- )
1723:000 | DONE ins | na 16 16 | 006523 | 20 b2 64    |                 jsr 0064b2           
1724:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1725:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1726:000 | DONE ins | na 16 16 | 006526 | 68          |                 pla                  
1727:000 | DONE wsp | na 16 16 |        |             |
1728:000 | DONE cmt | na 16 16 |        |             |                 ; the next nt is two bytes below the nt of the current one in
1729:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
1730:000 | DONE cmt | na 16 16 |        |             |                 ;
1731:000 | DONE ins | na 16 16 | 006527 | 1a          |                 inc.a                
1732:000 | DONE ins | na 16 16 | 006528 | 1a          |                 inc.a                
1733:000 | DONE wsp | na 16 16 |        |             |
1734:000 | DONE ins | na 16 16 | 006529 | ca          |                 dex                  
1735:000 | DONE ins | na 16 16 | 00652a | ca          |                 dex                  
1736:000 | DONE ins | na 16 16 | 00652b | 94 00       |                 sty.dx 00            
1737:000 | DONE wsp | na 16 16 |        |             |
1738:000 | DONE ins | na 16 16 | 00652d | a8          |                 tay                  
1739:000 | DONE ins | na 16 16 | 00652e | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1740:000 | DONE ins | na 16 16 | 006531 | 48          |                 pha                  
1741:000 | DONE ins | na 16 16 | 006532 | d0 e8       |                 bne 00651c           ; zero entry signals end of Dictionary
1742:000 | DONE wsp | na 16 16 |        |             |
1743:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
1744:000 | DONE ins | na 16 16 | 006534 | 68          |                 pla                  ; balance MPU stack, value discarded
1745:000 | DONE wsp | na 16 16 |        |             |
1746:000 | DONE ins | na 16 16 | 006535 | b4 00       |                 ldy.dx 00            
1747:000 | DONE ins | na 16 16 | 006537 | e8          |                 inx                  
1748:000 | DONE ins | na 16 16 | 006538 | e8          |                 inx                  
1749:000 | DONE wsp | na 16 16 |        |             |
1750:000 | DONE lbl | na 16 16 | 006539 |             | z_words                              
1750:001 | DONE ins | na 16 16 | 006539 | 60          |                 rts                  
1751:000 | DONE wsp | na 16 16 |        |             |
1752:000 | DONE wsp | na 16 16 |        |             |
1753:000 | DONE wsp | na 16 16 |        |             |
1754:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1755:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
1756:000 | DONE wsp | na 16 16 |        |             |
1757:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
1757:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1757:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
1757:003 | DONE cmt | na 16 16 |        |             | ; This version: 12. Feb 2017
1757:004 | DONE wsp | na 16 16 |        |             |
1757:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
1757:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
1757:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
1757:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
1757:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
1757:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
1757:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "h_<WORD>" ("header") for the nt and "a_<WORD>" ("A" as the
1757:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
1757:013 | DONE cmt | na 16 16 |        |             | ;
1757:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
1757:015 | DONE cmt | na 16 16 |        |             | ;
1757:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
1757:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
1757:018 | DONE cmt | na 16 16 |        |             | ; h_word ->  +--------+--------+
1757:019 | DONE cmt | na 16 16 |        |             | ;            | Length | Status |
1757:020 | DONE cmt | na 16 16 |        |             | ;         +2 +--------+--------+
1757:021 | DONE cmt | na 16 16 |        |             | ;            | Next Header     | -> h_next (nt of next word)
1757:022 | DONE cmt | na 16 16 |        |             | ;         +4 +-----------------+
1757:023 | DONE cmt | na 16 16 |        |             | ;            | Start of Code   | -> a_word (xt of this word)
1757:024 | DONE cmt | na 16 16 |        |             | ;         +6 +-----------------+
1757:025 | DONE cmt | na 16 16 |        |             | ;            | End of Code     | -> z_word
1757:026 | DONE cmt | na 16 16 |        |             | ;         +8 +--------+--------+
1757:027 | DONE cmt | na 16 16 |        |             | ;            | Name   |        |
1757:028 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1757:029 | DONE cmt | na 16 16 |        |             | ;            |        |        |
1757:030 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1757:031 | DONE cmt | na 16 16 |        |             | ;            |        |  ...   | (name string does not end with a zero)
1757:032 | DONE cmt | na 16 16 |        |             | ;         +n +--------+--------+
1757:033 | DONE wsp | na 16 16 |        |             |
1757:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
1757:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
1757:036 | DONE cmt | na 16 16 |        |             | ;
1757:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
1757:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
1757:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
1757:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
1757:041 | DONE wsp | na 16 16 |        |             |
1757:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
1757:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
1757:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
1757:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
1757:046 | DONE wsp | na 16 16 |        |             |
1757:047 | DONE lbl | na 16 16 | 00653a |             | h_bye                                
1757:048 | DONE dir | na 16 16 | 00653a | (1 bytes)   |         .byte 03                     ; length of word string
1757:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
1757:049 | DONE dir | na 16 16 | 00653b | (1 bytes)   |         .byte { PW + NC }            ; status byte
1757:049 | DONE dir | na 16 16 |        |             |                 90                       --  .
1757:050 | DONE dir | na 16 16 | 00653c | (2 bytes)   |         .word 0000                   ; next word in dictionary, 0000 signals end
1757:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
1757:051 | DONE dir | na 16 16 | 00653e | (2 bytes)   |         .word 006213                 ; start of code, the xt of this word
1757:051 | DONE dir | na 16 16 |        |             |                 13 62                    --  . b
1757:052 | DONE dir | na 16 16 | 006540 | (2 bytes)   |         .word 006216                 ; end of code (points to RTS)
1757:052 | DONE dir | na 16 16 |        |             |                 16 62                    --  . b
1757:053 | DONE dir | na 16 16 | 006542 | (3 bytes)   |         .byte 62, 79, 65             ; word name, always lower case
1757:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
1757:054 | DONE wsp | na 16 16 |        |             |
1757:055 | DONE lbl | na 16 16 | 006545 |             | h_cold                               
1757:056 | DONE dir | na 16 16 | 006545 | (2 bytes)   |         .byte 4, 00                  
1757:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1757:057 | DONE dir | na 16 16 | 006547 | (6 bytes)   |         .word h_bye, a_cold, 0060d2  
1757:057 | DONE dir | na 16 16 |        |             |                 3a 65 5d 60 d2 60        --  : e ] ` . `
1757:058 | DONE dir | na 16 16 | 00654d | (4 bytes)   |         .byte 63, 6f, 6c, 64         
1757:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
1757:059 | DONE wsp | na 16 16 |        |             |
1757:060 | DONE lbl | na 16 16 | 006551 |             | h_words                              
1757:061 | DONE dir | na 16 16 | 006551 | (2 bytes)   |         .byte 5, { PW + NC }         
1757:061 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1757:062 | DONE dir | na 16 16 | 006553 | (6 bytes)   |         .word h_cold, a_words, 006539 
1757:062 | DONE dir | na 16 16 |        |             |                 45 65 12 65 39 65        --  E e . e 9 e
1757:063 | DONE dir | na 16 16 | 006559 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
1757:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
1757:064 | DONE wsp | na 16 16 |        |             |
1757:065 | DONE lbl | na 16 16 | 00655e |             | h_bell                               
1757:066 | DONE dir | na 16 16 | 00655e | (2 bytes)   |         .byte 4, { PW + NC }         
1757:066 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1757:067 | DONE dir | na 16 16 | 006560 | (6 bytes)   |         .word h_words, a_bell, 00620a 
1757:067 | DONE dir | na 16 16 |        |             |                 51 65 04 62 0a 62        --  Q e . b 
 b
1757:068 | DONE dir | na 16 16 | 006566 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
1757:068 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
1757:069 | DONE wsp | na 16 16 |        |             |
1757:070 | DONE lbl | na 16 16 | 00656a |             | h_unused                             
1757:071 | DONE dir | na 16 16 | 00656a | (2 bytes)   |         .byte 6, { PW + NC }         
1757:071 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1757:072 | DONE dir | na 16 16 | 00656c | (6 bytes)   |         .word h_bell, a_unused, 006511 
1757:072 | DONE dir | na 16 16 |        |             |                 5e 65 06 65 11 65        --  ^ e . e . e
1757:073 | DONE dir | na 16 16 | 006572 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
1757:073 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
1757:074 | DONE wsp | na 16 16 |        |             |
1757:075 | DONE lbl | na 16 16 | 006578 |             | h_page                               
1757:076 | DONE dir | na 16 16 | 006578 | (2 bytes)   |         .byte 4, { PW + NC }         
1757:076 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1757:077 | DONE dir | na 16 16 | 00657a | (6 bytes)   |         .word h_unused, a_page, 0063fc 
1757:077 | DONE dir | na 16 16 |        |             |                 6a 65 f0 63 fc 63        --  j e . c . c
1757:078 | DONE dir | na 16 16 | 006580 | (4 bytes)   |         .byte 70, 61, 67, 65         
1757:078 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
1757:079 | DONE wsp | na 16 16 |        |             |
1757:080 | DONE lbl | na 16 16 | 006584 |             | h_count                              
1757:081 | DONE dir | na 16 16 | 006584 | (2 bytes)   |         .byte 5, {NC + PW }          
1757:081 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1757:082 | DONE dir | na 16 16 | 006586 | (6 bytes)   |         .word h_page, a_count, 006225 
1757:082 | DONE dir | na 16 16 |        |             |                 78 65 17 62 25 62        --  x e . b % b
1757:083 | DONE dir | na 16 16 | 00658c | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
1757:083 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
1757:084 | DONE wsp | na 16 16 |        |             |
1757:085 | DONE lbl | na 16 16 | 006591 |             | h_abort                              
1757:086 | DONE dir | na 16 16 | 006591 | (2 bytes)   |         .byte 5, 00                  ; TODO check flags
1757:086 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1757:087 | DONE dir | na 16 16 | 006593 | (6 bytes)   |         .word h_count, a_abort, 0060d2 
1757:087 | DONE dir | na 16 16 |        |             |                 84 65 94 60 d2 60        --  . e . ` . `
1757:088 | DONE dir | na 16 16 | 006599 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
1757:088 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
1757:089 | DONE wsp | na 16 16 |        |             |
1757:090 | DONE lbl | na 16 16 | 00659e |             | h_parse                              
1757:091 | DONE dir | na 16 16 | 00659e | (2 bytes)   |         .byte 5, 00                  
1757:091 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1757:092 | DONE dir | na 16 16 | 0065a0 | (6 bytes)   |         .word h_abort, a_parse, 006461 
1757:092 | DONE dir | na 16 16 |        |             |                 91 65 2f 64 61 64        --  . e / d a d
1757:093 | DONE dir | na 16 16 | 0065a6 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
1757:093 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
1757:094 | DONE wsp | na 16 16 |        |             |
1757:095 | DONE lbl | na 16 16 | 0065ab |             | h_quit                               
1757:096 | DONE dir | na 16 16 | 0065ab | (2 bytes)   |         .byte 4, 00                  
1757:096 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1757:097 | DONE dir | na 16 16 | 0065ad | (6 bytes)   |         .word h_parse, a_quit, 0060d2 
1757:097 | DONE dir | na 16 16 |        |             |                 9e 65 9c 60 d2 60        --  . e . ` . `
1757:098 | DONE dir | na 16 16 | 0065b3 | (4 bytes)   |         .byte 71, 75, 69, 74         
1757:098 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
1757:099 | DONE wsp | na 16 16 |        |             |
1757:100 | DONE lbl | na 16 16 | 0065b7 |             | h_name-int                           
1757:101 | DONE dir | na 16 16 | 0065b7 | (2 bytes)   |         .byte 8, { PW + NC }         
1757:101 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1757:102 | DONE dir | na 16 16 | 0065b9 | (6 bytes)   |         .word h_quit, a_name-int, 0063cf 
1757:102 | DONE dir | na 16 16 |        |             |                 ab 65 c7 63 cf 63        --  . e . c . c
1757:103 | DONE dir | na 16 16 | 0065bf | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
1757:103 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
1757:103 | DONE dir | na 16 16 |        |             |                                          -- 
1757:104 | DONE wsp | na 16 16 |        |             |
1757:105 | DONE lbl | na 16 16 | 0065c7 |             | h_cr                                 
1757:106 | DONE dir | na 16 16 | 0065c7 | (2 bytes)   |         .byte 2, { PW + NC }         
1757:106 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1757:107 | DONE dir | na 16 16 | 0065c9 | (6 bytes)   |         .word h_name-int, a_cr, 00622c 
1757:107 | DONE dir | na 16 16 |        |             |                 b7 65 26 62 2c 62        --  . e & b , b
1757:108 | DONE dir | na 16 16 | 0065cf | (2 bytes)   |         .byte 63, 72                 
1757:108 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
1757:109 | DONE wsp | na 16 16 |        |             |
1757:110 | DONE lbl | na 16 16 | 0065d1 |             | h_bl                                 
1757:111 | DONE dir | na 16 16 | 0065d1 | (2 bytes)   |         .byte 2, { PW + NC }         
1757:111 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1757:112 | DONE dir | na 16 16 | 0065d3 | (6 bytes)   |         .word h_cr, a_bl, 006212     
1757:112 | DONE dir | na 16 16 |        |             |                 c7 65 0b 62 12 62        --  . e  b . b
1757:113 | DONE dir | na 16 16 | 0065d9 | (2 bytes)   |         .byte 62, 6c                 
1757:113 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
1757:114 | DONE wsp | na 16 16 |        |             |
1757:115 | DONE lbl | na 16 16 | 0065db |             | h_spaces                             
1757:116 | DONE dir | na 16 16 | 0065db | (2 bytes)   |         .byte 6, { PW + NC }         
1757:116 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1757:117 | DONE dir | na 16 16 | 0065dd | (6 bytes)   |         .word h_bl, a_spaces, 0064c5 
1757:117 | DONE dir | na 16 16 |        |             |                 d1 65 b9 64 c5 64        --  . e . d . d
1757:118 | DONE dir | na 16 16 | 0065e3 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
1757:118 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
1757:119 | DONE wsp | na 16 16 |        |             |
1757:120 | DONE lbl | na 16 16 | 0065e9 |             | h_space                              
1757:121 | DONE dir | na 16 16 | 0065e9 | (2 bytes)   |         .byte 5, { PW + NC }         
1757:121 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1757:122 | DONE dir | na 16 16 | 0065eb | (6 bytes)   |         .word h_spaces, a_space, 0064b8 
1757:122 | DONE dir | na 16 16 |        |             |                 db 65 b2 64 b8 64        --  . e . d . d
1757:123 | DONE dir | na 16 16 | 0065f1 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
1757:123 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
1757:124 | DONE wsp | na 16 16 |        |             |
1757:125 | DONE lbl | na 16 16 | 0065f6 |             | h_dots                               
1757:126 | DONE dir | na 16 16 | 0065f6 | (2 bytes)   |         .byte 2, { PW + NC }         
1757:126 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1757:127 | DONE dir | na 16 16 | 0065f8 | (6 bytes)   |         .word h_space, a_dots, 00631c 
1757:127 | DONE dir | na 16 16 |        |             |                 e9 65 d5 62 1c 63        --  . e . b . c
1757:128 | DONE dir | na 16 16 | 0065fe | (2 bytes)   |         .byte 2e, 73                 
1757:128 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
1757:129 | DONE wsp | na 16 16 |        |             |
1757:130 | DONE lbl | na 16 16 | 006600 |             | h_dotparen                           
1757:131 | DONE dir | na 16 16 | 006600 | (2 bytes)   |         .byte 2, { IM + NC}          
1757:131 | DONE dir | na 16 16 |        |             |                 02 30                    --  . 0
1757:132 | DONE dir | na 16 16 | 006602 | (6 bytes)   |         .word h_dots, a_dotparen, 0062d4 
1757:132 | DONE dir | na 16 16 |        |             |                 f6 65 c7 62 d4 62        --  . e . b . b
1757:133 | DONE dir | na 16 16 | 006608 | (2 bytes)   |         .byte 2e, 28                 
1757:133 | DONE dir | na 16 16 |        |             |                 2e 28                    --  . (
1757:134 | DONE wsp | na 16 16 |        |             |
1757:135 | DONE lbl | na 16 16 | 00660a |             | h_type                               
1757:136 | DONE dir | na 16 16 | 00660a | (2 bytes)   |         .byte 4, 0                   
1757:136 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1757:137 | DONE dir | na 16 16 | 00660c | (6 bytes)   |         .word h_dotparen, a_type, 006505 
1757:137 | DONE dir | na 16 16 |        |             |                 00 66 e5 64 05 65        --  . f . d . e
1757:138 | DONE dir | na 16 16 | 006612 | (4 bytes)   |         .byte 74, 79, 70, 65         
1757:138 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
1757:139 | DONE wsp | na 16 16 |        |             |
1757:140 | DONE lbl | na 16 16 | 006616 |             | h_dot                                
1757:141 | DONE dir | na 16 16 | 006616 | (2 bytes)   |         .byte 1, { PW + NC }         
1757:141 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1757:142 | DONE dir | na 16 16 | 006618 | (6 bytes)   |         .word h_type, a_dot, 0062c6  
1757:142 | DONE dir | na 16 16 |        |             |                 0a 66 b1 62 c6 62        --  
 f . b . b
1757:143 | DONE dir | na 16 16 | 00661e | (1 bytes)   |         .byte 2e                     
1757:143 | DONE dir | na 16 16 |        |             |                 2e                       --  .
1757:144 | DONE wsp | na 16 16 |        |             |
1757:145 | DONE lbl | na 16 16 | 00661f |             | h_pad                                
1757:146 | DONE dir | na 16 16 | 00661f | (2 bytes)   |         .byte 3, { PW + NC }         
1757:146 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1757:147 | DONE dir | na 16 16 | 006621 | (6 bytes)   |         .word h_dot, a_pad, 0063ef   
1757:147 | DONE dir | na 16 16 |        |             |                 16 66 e4 63 ef 63        --  . f . c . c
1757:148 | DONE dir | na 16 16 | 006627 | (3 bytes)   |         .byte 70, 61, 64             
1757:148 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
1757:149 | DONE wsp | na 16 16 |        |             |
1757:150 | DONE lbl | na 16 16 | 00662a |             | h_evaluate                           
1757:151 | DONE dir | na 16 16 | 00662a | (2 bytes)   |         .byte 8, { PW + NC }         
1757:151 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1757:152 | DONE dir | na 16 16 | 00662c | (6 bytes)   |         .word h_pad, a_evaluate, 006355 
1757:152 | DONE dir | na 16 16 |        |             |                 1f 66 27 63 55 63        --  . f ' c U c
1757:153 | DONE dir | na 16 16 | 006632 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
1757:153 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
1757:153 | DONE dir | na 16 16 |        |             |                                          -- 
1757:154 | DONE wsp | na 16 16 |        |             |
1757:155 | DONE lbl | na 16 16 | 00663a |             | h_cells                              
1757:156 | DONE dir | na 16 16 | 00663a | (2 bytes)   |         .byte 5, { PW + NC }         ; 2* because we have 16 bit stack
1757:156 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1757:157 | DONE dir | na 16 16 | 00663c | (6 bytes)   |         .word h_evaluate, a_two-star, 006128 
1757:157 | DONE dir | na 16 16 |        |             |                 2a 66 25 61 28 61        --  * f % a ( a
1757:158 | DONE dir | na 16 16 | 006642 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
1757:158 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
1757:159 | DONE wsp | na 16 16 |        |             |
1757:160 | DONE lbl | na 16 16 | 006647 |             | h_allot                              
1757:161 | DONE dir | na 16 16 | 006647 | (2 bytes)   |         .byte 5, { PW + NC }         
1757:161 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1757:162 | DONE dir | na 16 16 | 006649 | (6 bytes)   |         .word h_cells, a_allot, 006203 
1757:162 | DONE dir | na 16 16 |        |             |                 3a 66 db 61 03 62        --  : f . a . b
1757:163 | DONE dir | na 16 16 | 00664f | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
1757:163 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
1757:164 | DONE wsp | na 16 16 |        |             |
1757:165 | DONE lbl | na 16 16 | 006654 |             | h_create                             
1757:166 | DONE dir | na 16 16 | 006654 | (2 bytes)   |         .byte 6, { PW + NC }         
1757:166 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1757:167 | DONE dir | na 16 16 | 006656 | (6 bytes)   |         .word h_allot, a_create, 0062a1 
1757:167 | DONE dir | na 16 16 |        |             |                 47 66 2d 62 a1 62        --  G f - b . b
1757:168 | DONE dir | na 16 16 | 00665c | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
1757:168 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
1757:169 | DONE wsp | na 16 16 |        |             |
1757:170 | DONE lbl | na 16 16 | 006662 |             | h_name-string                        
1757:171 | DONE dir | na 16 16 | 006662 | (2 bytes)   |         .byte 0b, { PW + NC }        
1757:171 | DONE dir | na 16 16 |        |             |                 0b 90                    --   .
1757:172 | DONE dir | na 16 16 | 006664 | (6 bytes)   |         .word h_create, a_name-string, 0063e0 
1757:172 | DONE dir | na 16 16 |        |             |                 54 66 d0 63 e0 63        --  T f . c . c
1757:173 | DONE dir | na 16 16 | 00666a | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
1757:173 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
1757:173 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
1757:174 | DONE wsp | na 16 16 |        |             |
1757:175 | DONE lbl | na 16 16 | 006675 |             | h_2dup                               
1757:176 | DONE dir | na 16 16 | 006675 | (2 bytes)   |         .byte 4, { PW + NC }         
1757:176 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1757:177 | DONE dir | na 16 16 | 006677 | (6 bytes)   |         .word h_name-string, a_2dup, 006133 
1757:177 | DONE dir | na 16 16 |        |             |                 62 66 29 61 33 61        --  b f ) a 3 a
1757:178 | DONE dir | na 16 16 | 00667d | (4 bytes)   |         .byte 32, 64, 75, 70         
1757:178 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
1757:179 | DONE wsp | na 16 16 |        |             |
1757:180 | DONE lbl | na 16 16 | 006681 |             | h_abs                                
1757:181 | DONE dir | na 16 16 | 006681 | (2 bytes)   |         .byte 3, { PW + NC }         
1757:181 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1757:182 | DONE dir | na 16 16 | 006683 | (6 bytes)   |         .word h_2dup, a_abs, 006156  
1757:182 | DONE dir | na 16 16 |        |             |                 75 66 4e 61 56 61        --  u f N a V a
1757:183 | DONE dir | na 16 16 | 006689 | (3 bytes)   |         .byte 61, 62, 73             
1757:183 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
1757:184 | DONE wsp | na 16 16 |        |             |
1757:185 | DONE lbl | na 16 16 | 00668c |             | h_state                              
1757:186 | DONE dir | na 16 16 | 00668c | (2 bytes)   |         .byte 5, { PW + NC }         
1757:186 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1757:187 | DONE dir | na 16 16 | 00668e | (6 bytes)   |         .word h_abs, a_state, 0064cd 
1757:187 | DONE dir | na 16 16 |        |             |                 81 66 c6 64 cd 64        --  . f . d . d
1757:188 | DONE dir | na 16 16 | 006694 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
1757:188 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
1757:189 | DONE wsp | na 16 16 |        |             |
1757:190 | DONE lbl | na 16 16 | 006699 |             | h_to-in                              
1757:191 | DONE dir | na 16 16 | 006699 | (2 bytes)   |         .byte 3, { PW + NC }         
1757:191 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1757:192 | DONE dir | na 16 16 | 00669b | (6 bytes)   |         .word h_state, a_to-in, 0060da 
1757:192 | DONE dir | na 16 16 |        |             |                 8c 66 d3 60 da 60        --  . f . ` . `
1757:193 | DONE dir | na 16 16 | 0066a1 | (3 bytes)   |         .byte 3e, 69, 6e             
1757:193 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
1757:194 | DONE wsp | na 16 16 |        |             |
1757:195 | DONE lbl | na 16 16 | 0066a4 |             | h_source                             
1757:196 | DONE dir | na 16 16 | 0066a4 | (2 bytes)   |         .byte 6, { PW + NC }         
1757:196 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1757:197 | DONE dir | na 16 16 | 0066a6 | (6 bytes)   |         .word h_to-in, a_source, 0064aa 
1757:197 | DONE dir | na 16 16 |        |             |                 99 66 9e 64 aa 64        --  . f . d . d
1757:198 | DONE dir | na 16 16 | 0066ac | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
1757:198 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
1757:199 | DONE wsp | na 16 16 |        |             |
1757:200 | DONE lbl | na 16 16 | 0066b2 |             | h_depth                              
1757:201 | DONE dir | na 16 16 | 0066b2 | (2 bytes)   |         .byte 5, { PW + NC }         
1757:201 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1757:202 | DONE dir | na 16 16 | 0066b4 | (6 bytes)   |         .word h_source, a_depth, 0062b0 
1757:202 | DONE dir | na 16 16 |        |             |                 a4 66 a2 62 b0 62        --  . f . b . b
1757:203 | DONE dir | na 16 16 | 0066ba | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
1757:203 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
1757:204 | DONE wsp | na 16 16 |        |             |
1757:205 | DONE lbl | na 16 16 | 0066bf |             | h_tick                               
1757:206 | DONE dir | na 16 16 | 0066bf | (2 bytes)   |         .byte 1, { PW + NC }         
1757:206 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1757:207 | DONE dir | na 16 16 | 0066c1 | (6 bytes)   |         .word h_depth, a_tick, 00614d 
1757:207 | DONE dir | na 16 16 |        |             |                 b2 66 34 61 4d 61        --  . f 4 a M a
1757:208 | DONE dir | na 16 16 | 0066c7 | (1 bytes)   |         .byte 27                     ; hex for "'"
1757:208 | DONE dir | na 16 16 |        |             |                 27                       --  '
1757:209 | DONE wsp | na 16 16 |        |             |
1757:210 | DONE lbl | na 16 16 | 0066c8 |             | h_two-star                           
1757:211 | DONE dir | na 16 16 | 0066c8 | (2 bytes)   |         .byte 2, { PW + NC }         
1757:211 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1757:212 | DONE dir | na 16 16 | 0066ca | (6 bytes)   |         .word h_tick, a_two-star, 006128 
1757:212 | DONE dir | na 16 16 |        |             |                 bf 66 25 61 28 61        --  . f % a ( a
1757:213 | DONE dir | na 16 16 | 0066d0 | (2 bytes)   |         .byte 32, 2a                 
1757:213 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
1757:214 | DONE wsp | na 16 16 |        |             |
1757:215 | DONE lbl | na 16 16 | 0066d2 |             | h_minus                              
1757:216 | DONE dir | na 16 16 | 0066d2 | (2 bytes)   |         .byte 1, { PW + NC }         
1757:216 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1757:217 | DONE dir | na 16 16 | 0066d4 | (6 bytes)   |         .word h_two-star, a_minus, 006108 
1757:217 | DONE dir | na 16 16 |        |             |                 c8 66 fe 60 08 61        --  . f . ` . a
1757:218 | DONE dir | na 16 16 | 0066da | (1 bytes)   |         .byte 2d                     
1757:218 | DONE dir | na 16 16 |        |             |                 2d                       --  -
1757:219 | DONE wsp | na 16 16 |        |             |
1757:220 | DONE lbl | na 16 16 | 0066db |             | h_plus                               
1757:221 | DONE dir | na 16 16 | 0066db | (2 bytes)   |         .byte 1, { PW + NC }         
1757:221 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1757:222 | DONE dir | na 16 16 | 0066dd | (6 bytes)   |         .word h_minus, a_plus, 0060fd 
1757:222 | DONE dir | na 16 16 |        |             |                 d2 66 f6 60 fd 60        --  . f . ` . `
1757:223 | DONE dir | na 16 16 | 0066e3 | (1 bytes)   |         .byte 2b                     
1757:223 | DONE dir | na 16 16 |        |             |                 2b                       --  +
1757:224 | DONE wsp | na 16 16 |        |             |
1757:225 | DONE lbl | na 16 16 | 0066e4 |             | h_one-minus                          
1757:226 | DONE dir | na 16 16 | 0066e4 | (2 bytes)   |         .byte 2, { PW + NC }         
1757:226 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1757:227 | DONE dir | na 16 16 | 0066e6 | (6 bytes)   |         .word h_plus, a_one-minus, 00611a 
1757:227 | DONE dir | na 16 16 |        |             |                 db 66 19 61 1a 61        --  . f . a . a
1757:228 | DONE dir | na 16 16 | 0066ec | (2 bytes)   |         .byte 31, 2d                 
1757:228 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
1757:229 | DONE wsp | na 16 16 |        |             |
1757:230 | DONE lbl | na 16 16 | 0066ee |             | h_one-plus                           
1757:231 | DONE dir | na 16 16 | 0066ee | (2 bytes)   |         .byte 2, { PW + NC }         
1757:231 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1757:232 | DONE dir | na 16 16 | 0066f0 | (6 bytes)   |         .word h_one-minus, a_one-plus, 00611c 
1757:232 | DONE dir | na 16 16 |        |             |                 e4 66 1b 61 1c 61        --  . f . a . a
1757:233 | DONE dir | na 16 16 | 0066f6 | (2 bytes)   |         .byte 31, 2b                 
1757:233 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
1757:234 | DONE wsp | na 16 16 |        |             |
1757:235 | DONE lbl | na 16 16 | 0066f8 |             | h_false                              
1757:236 | DONE dir | na 16 16 | 0066f8 | (2 bytes)   |         .byte 5, { PW + NC }         
1757:236 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1757:237 | DONE dir | na 16 16 | 0066fa | (6 bytes)   |         .word h_one-plus, a_zero, 006110 
1757:237 | DONE dir | na 16 16 |        |             |                 ee 66 09 61 10 61        --  . f 	 a . a
1757:238 | DONE dir | na 16 16 | 006700 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
1757:238 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
1757:239 | DONE wsp | na 16 16 |        |             |
1757:240 | DONE lbl | na 16 16 | 006705 |             | h_true                               
1757:241 | DONE dir | na 16 16 | 006705 | (2 bytes)   |         .byte 4, { PW + NC }         
1757:241 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1757:242 | DONE dir | na 16 16 | 006707 | (6 bytes)   |         .word h_false, a_true, 0064db 
1757:242 | DONE dir | na 16 16 |        |             |                 f8 66 d4 64 db 64        --  . f . d . d
1757:243 | DONE dir | na 16 16 | 00670d | (4 bytes)   |         .byte 74, 72, 75, 65         
1757:243 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
1757:244 | DONE wsp | na 16 16 |        |             |
1757:245 | DONE lbl | na 16 16 | 006711 |             | h_two                                
1757:246 | DONE dir | na 16 16 | 006711 | (2 bytes)   |         .byte 1, { PW + NC }         
1757:246 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1757:247 | DONE dir | na 16 16 | 006713 | (6 bytes)   |         .word h_true, a_two, 006124  
1757:247 | DONE dir | na 16 16 |        |             |                 05 67 1d 61 24 61        --  . g . a $ a
1757:248 | DONE dir | na 16 16 | 006719 | (1 bytes)   |         .byte 32                     
1757:248 | DONE dir | na 16 16 |        |             |                 32                       --  2
1757:249 | DONE wsp | na 16 16 |        |             |
1757:250 | DONE lbl | na 16 16 | 00671a |             | h_one                                
1757:251 | DONE dir | na 16 16 | 00671a | (2 bytes)   |         .byte 1, { PW + NC }         
1757:251 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1757:252 | DONE dir | na 16 16 | 00671c | (6 bytes)   |         .word h_two, a_one, 006118   
1757:252 | DONE dir | na 16 16 |        |             |                 11 67 11 61 18 61        --  . g . a . a
1757:253 | DONE dir | na 16 16 | 006722 | (1 bytes)   |         .byte 31                     
1757:253 | DONE dir | na 16 16 |        |             |                 31                       --  1
1757:254 | DONE wsp | na 16 16 |        |             |
1757:255 | DONE lbl | na 16 16 | 006723 |             | h_zero                               
1757:256 | DONE dir | na 16 16 | 006723 | (2 bytes)   |         .byte 1, { PW + NC }         
1757:256 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1757:257 | DONE dir | na 16 16 | 006725 | (6 bytes)   |         .word h_one, a_zero, 006110  
1757:257 | DONE dir | na 16 16 |        |             |                 1a 67 09 61 10 61        --  . g 	 a . a
1757:258 | DONE dir | na 16 16 | 00672b | (1 bytes)   |         .byte 30                     
1757:258 | DONE dir | na 16 16 |        |             |                 30                       --  0
1757:259 | DONE wsp | na 16 16 |        |             |
1757:260 | DONE lbl | na 16 16 | 00672c |             | h_find-name                          
1757:261 | DONE dir | na 16 16 | 00672c | (2 bytes)   |         .byte 9, 0                   
1757:261 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
1757:262 | DONE dir | na 16 16 | 00672e | (6 bytes)   |         .word h_zero, a_find-name, 0063bf 
1757:262 | DONE dir | na 16 16 |        |             |                 23 67 69 63 bf 63        --  # g i c . c
1757:263 | DONE dir | na 16 16 | 006734 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
1757:263 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
1757:263 | DONE dir | na 16 16 |        |             |                 65                       --  e
1757:264 | DONE wsp | na 16 16 |        |             |
1757:265 | DONE lbl | na 16 16 | 00673d |             | h_refill                             
1757:266 | DONE dir | na 16 16 | 00673d | (2 bytes)   |         .byte 6, { PW }              ; TODO check flags
1757:266 | DONE dir | na 16 16 |        |             |                 06 80                    --  . .
1757:267 | DONE dir | na 16 16 | 00673f | (6 bytes)   |         .word h_find-name, a_refill, 006494 
1757:267 | DONE dir | na 16 16 |        |             |                 2c 67 62 64 94 64        --  , g b d . d
1757:268 | DONE dir | na 16 16 | 006745 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
1757:268 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
1757:269 | DONE wsp | na 16 16 |        |             |
1757:270 | DONE lbl | na 16 16 | 00674b |             | h_parse-name                         
1757:271 | DONE dir | na 16 16 | 00674b | (2 bytes)   |         .byte &10, 0                 
1757:271 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
1757:272 | DONE dir | na 16 16 | 00674d | (6 bytes)   |         .word h_refill, a_parse-name, 006461 
1757:272 | DONE dir | na 16 16 |        |             |                 3d 67 fd 63 61 64        --  = g . c a d
1757:273 | DONE dir | na 16 16 | 006753 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
1757:273 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
1757:273 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
1757:274 | DONE wsp | na 16 16 |        |             |
1757:275 | DONE lbl | na 16 16 | 00675d |             | h_source-id                          
1757:276 | DONE dir | na 16 16 | 00675d | (2 bytes)   |         .byte 9, { PW + NC }         
1757:276 | DONE dir | na 16 16 |        |             |                 09 90                    --  	 .
1757:277 | DONE dir | na 16 16 | 00675f | (6 bytes)   |         .word h_parse-name, a_source-id, 0064b1 
1757:277 | DONE dir | na 16 16 |        |             |                 4b 67 ab 64 b1 64        --  K g . d . d
1757:278 | DONE dir | na 16 16 | 006765 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
1757:278 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
1757:278 | DONE dir | na 16 16 |        |             |                 64                       --  d
1757:279 | DONE wsp | na 16 16 |        |             |
1757:280 | DONE lbl | na 16 16 | 00676e |             | h_comma                              
1757:281 | DONE dir | na 16 16 | 00676e | (2 bytes)   |         .byte 1, { PW + NC }         
1757:281 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1757:282 | DONE dir | na 16 16 | 006770 | (6 bytes)   |         .word h_source-id, a_comma, 0060e6 
1757:282 | DONE dir | na 16 16 |        |             |                 5d 67 db 60 e6 60        --  ] g . ` . `
1757:283 | DONE dir | na 16 16 | 006776 | (1 bytes)   |         .byte 2c                     
1757:283 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
1757:284 | DONE wsp | na 16 16 |        |             |
1757:285 | DONE lbl | na 16 16 | 006777 |             | h_accept                             
1757:286 | DONE dir | na 16 16 | 006777 | (2 bytes)   |         .byte 6, 00                  ; TODO check flags
1757:286 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
1757:287 | DONE dir | na 16 16 | 006779 | (6 bytes)   |         .word h_comma, a_accept, 0061da 
1757:287 | DONE dir | na 16 16 |        |             |                 6e 67 57 61 da 61        --  n g W a . a
1757:288 | DONE dir | na 16 16 | 00677f | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
1757:288 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
1757:289 | DONE wsp | na 16 16 |        |             |
1757:290 | DONE lbl | na 16 16 | 006785 |             | h_tuck                               
1757:291 | DONE dir | na 16 16 | 006785 | (2 bytes)   |         .byte 4, { PW + NC }         
1757:291 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1757:292 | DONE dir | na 16 16 | 006787 | (6 bytes)   |         .word h_accept, a_tuck, 0064e4 
1757:292 | DONE dir | na 16 16 |        |             |                 77 67 dc 64 e4 64        --  w g . d . d
1757:293 | DONE dir | na 16 16 | 00678d | (4 bytes)   |         .byte 74, 75, 63, 6b         
1757:293 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
1757:294 | DONE wsp | na 16 16 |        |             |
1757:295 | DONE lbl | na 16 16 | 006791 |             | h_nip                                
1757:296 | DONE dir | na 16 16 | 006791 | (2 bytes)   |         .byte 3, { PW + NC }         
1757:296 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1757:297 | DONE dir | na 16 16 | 006793 | (6 bytes)   |         .word h_tuck, a_nip, 0063e3  
1757:297 | DONE dir | na 16 16 |        |             |                 85 67 e1 63 e3 63        --  . g . c . c
1757:298 | DONE dir | na 16 16 | 006799 | (3 bytes)   |         .byte 6e, 69, 70             
1757:298 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
1757:299 | DONE wsp | na 16 16 |        |             |
1757:300 | DONE lbl | na 16 16 | 00679c |             | h_rot                                
1757:301 | DONE dir | na 16 16 | 00679c | (2 bytes)   |         .byte 3, { PW + NC }         
1757:301 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1757:302 | DONE dir | na 16 16 | 00679e | (6 bytes)   |         .word h_nip, a_rot, 00649d   
1757:302 | DONE dir | na 16 16 |        |             |                 91 67 95 64 9d 64        --  . g . d . d
1757:303 | DONE dir | na 16 16 | 0067a4 | (3 bytes)   |         .byte 72, 6f, 74             
1757:303 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
1757:304 | DONE wsp | na 16 16 |        |             |
1757:305 | DONE lbl | na 16 16 | 0067a7 |             | h_execute                            
1757:306 | DONE dir | na 16 16 | 0067a7 | (2 bytes)   |         .byte 7, { PW + NC }         
1757:306 | DONE dir | na 16 16 |        |             |                 07 90                    --  . .
1757:307 | DONE dir | na 16 16 | 0067a9 | (6 bytes)   |         .word h_rot, a_execute, 006368 
1757:307 | DONE dir | na 16 16 |        |             |                 9c 67 59 63 68 63        --  . g Y c h c
1757:308 | DONE dir | na 16 16 | 0067af | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
1757:308 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
1757:309 | DONE wsp | na 16 16 |        |             |
1757:310 | DONE lbl | na 16 16 | 0067b6 |             | h_here                               
1757:311 | DONE dir | na 16 16 | 0067b6 | (2 bytes)   |         .byte 4, { PW + NC }         
1757:311 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1757:312 | DONE dir | na 16 16 | 0067b8 | (6 bytes)   |         .word h_execute, a_here, 0063c6 
1757:312 | DONE dir | na 16 16 |        |             |                 a7 67 c0 63 c6 63        --  . g . c . c
1757:313 | DONE dir | na 16 16 | 0067be | (4 bytes)   |         .byte 68, 65, 72, 65         
1757:313 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
1757:314 | DONE wsp | na 16 16 |        |             |
1757:315 | DONE lbl | na 16 16 | 0067c2 |             | h_fetch                              
1757:316 | DONE dir | na 16 16 | 0067c2 | (2 bytes)   |         .byte 1, { PW + NC }         
1757:316 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1757:317 | DONE dir | na 16 16 | 0067c4 | (6 bytes)   |         .word h_here, a_fetch, 0060f5 
1757:317 | DONE dir | na 16 16 |        |             |                 b6 67 f1 60 f5 60        --  . g . ` . `
1757:318 | DONE dir | na 16 16 | 0067ca | (1 bytes)   |         .byte 40                     
1757:318 | DONE dir | na 16 16 |        |             |                 40                       --  @
1757:319 | DONE wsp | na 16 16 |        |             |
1757:320 | DONE lbl | na 16 16 | 0067cb |             | h_store                              
1757:321 | DONE dir | na 16 16 | 0067cb | (2 bytes)   |         .byte 1, { PW + NC }         
1757:321 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1757:322 | DONE dir | na 16 16 | 0067cd | (6 bytes)   |         .word h_fetch, a_store, 0060f0 
1757:322 | DONE dir | na 16 16 |        |             |                 c2 67 e7 60 f0 60        --  . g . ` . `
1757:323 | DONE dir | na 16 16 | 0067d3 | (1 bytes)   |         .byte 21                     
1757:323 | DONE dir | na 16 16 |        |             |                 21                       --  !
1757:324 | DONE wsp | na 16 16 |        |             |
1757:325 | DONE lbl | na 16 16 | 0067d4 |             | h_swap                               
1757:326 | DONE dir | na 16 16 | 0067d4 | (2 bytes)   |         .byte 4, { PW + NC }         
1757:326 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1757:327 | DONE dir | na 16 16 | 0067d6 | (6 bytes)   |         .word h_store, a_swap, 0064d3 
1757:327 | DONE dir | na 16 16 |        |             |                 cb 67 ce 64 d3 64        --  . g . d . d
1757:328 | DONE dir | na 16 16 | 0067dc | (4 bytes)   |         .byte 73, 77, 61, 70         
1757:328 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
1757:329 | DONE wsp | na 16 16 |        |             |
1757:330 | DONE lbl | na 16 16 | 0067e0 |             | h_dup                                
1757:331 | DONE dir | na 16 16 | 0067e0 | (2 bytes)   |         .byte 3, { PW + NC }         
1757:331 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1757:332 | DONE dir | na 16 16 | 0067e2 | (6 bytes)   |         .word h_swap, a_dup, 006326  
1757:332 | DONE dir | na 16 16 |        |             |                 d4 67 22 63 26 63        --  . g " c & c
1757:333 | DONE dir | na 16 16 | 0067e8 | (3 bytes)   |         .byte 64, 75, 70             
1757:333 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
1757:334 | DONE wsp | na 16 16 |        |             |
1757:335 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
1757:336 | DONE lbl | na 16 16 | 0067eb |             | h_drop                               
1757:337 | DONE dir | na 16 16 | 0067eb | (2 bytes)   |         .byte 4, { PW + NC }         
1757:337 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1757:338 | DONE dir | na 16 16 | 0067ed | (6 bytes)   |         .word h_dup, a_drop, 006321  
1757:338 | DONE dir | na 16 16 |        |             |                 e0 67 1d 63 21 63        --  . g . c ! c
1757:339 | DONE dir | na 16 16 | 0067f3 | (4 bytes)   |         .byte 64, 72, 6f, 70         
1757:339 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
1757:340 | DONE wsp | na 16 16 |        |             |
1757:341 | DONE cmt | na 16 16 |        |             | ; END
1758:000 | DONE wsp | na 16 16 |        |             |
1759:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1760:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
1761:000 | DONE wsp | na 16 16 |        |             |
1762:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1763:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
1764:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
1765:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
1766:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
1767:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
1768:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
1769:000 | DONE lbl | na 16 16 | 0067f7 |             | dovar                                
1770:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1771:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1772:000 | DONE ins | na 16 16 | 0067f7 | ca          |                 dex                  ; make room on Data Stack
1773:000 | DONE ins | na 16 16 | 0067f8 | ca          |                 dex                  
1774:000 | DONE ins | na 16 16 | 0067f9 | 94 00       |                 sty.dx 00            
1775:000 | DONE wsp | na 16 16 |        |             |
1776:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
1777:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
1778:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
1779:000 | DONE ins | na 16 16 | 0067fb | 7a          |                 ply                  ; value is now TOS
1780:000 | DONE ins | na 16 16 | 0067fc | c8          |                 iny                  ; add one because of 65816's address handling
1781:000 | DONE wsp | na 16 16 |        |             |
1782:000 | DONE ins | na 16 16 | 0067fd | 60          |                 rts                  ; takes us to original caller
1783:000 | DONE wsp | na 16 16 |        |             |
1784:000 | DONE wsp | na 16 16 |        |             |
1785:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1786:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
1787:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
1788:000 | DONE cmt | na 16 16 |        |             | ; the stack
1789:000 | DONE lbl | na 16 16 | 0067fe |             | doconst                              
1790:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1791:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1792:000 | DONE ins | na 16 16 | 0067fe | ca          |                 dex                  ; make room on Data Stack
1793:000 | DONE ins | na 16 16 | 0067ff | ca          |                 dex                  
1794:000 | DONE ins | na 16 16 | 006800 | 94 00       |                 sty.dx 00            
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
1797:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
1798:000 | DONE ins | na 16 16 | 006802 | 68          |                 pla                  ; get the return address
1799:000 | DONE ins | na 16 16 | 006803 | 85 16       |                 sta.d 000216         
1800:000 | DONE wsp | na 16 16 |        |             |
1801:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
1802:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
1803:000 | DONE ins | na 16 16 | 006805 | a0 01 00    |                 ldy.# 0001           
1804:000 | DONE ins | na 16 16 | 006808 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
1805:000 | DONE ins | na 16 16 | 00680a | a8          |                 tay                  
1806:000 | DONE wsp | na 16 16 |        |             |
1807:000 | DONE ins | na 16 16 | 00680b | 60          |                 rts                  ; takes us to original caller
1808:000 | DONE wsp | na 16 16 |        |             |
1809:000 | DONE wsp | na 16 16 |        |             |
1810:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1811:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
1812:000 | DONE wsp | na 16 16 |        |             |
1813:000 | DONE wsp | na 16 16 |        |             |
1814:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1815:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (INTERPRET)
1816:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
1817:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
1818:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen. Consider moving this up to QUIT once we know what we are
1819:000 | DONE cmt | na 16 16 |        |             | ; doing
1820:000 | DONE lbl | na 16 16 | 00680c |             | compex                               
1821:000 | DONE lbl | na 16 16 | 00680c |             | compex_loop                          
1822:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
1823:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
1824:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
1825:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
1826:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE does not do.
1827:000 | DONE ins | na 16 16 | 00680c | 20 fd 63    |                 jsr 0063fd           ; ( 'string' -- addr u )
1828:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1829:000 | DONE cmt | na 16 16 |        |             |                 ; if PARSE-NAME returns 0 (empty line), no characters were left
1830:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
1831:000 | DONE ins | na 16 16 | 00680f | 98          |                 tya                  ; force flag check
1832:000 | DONE ins | na 16 16 | 006810 | f0 1d       |                 beq 00682f           
1833:000 | DONE wsp | na 16 16 |        |             |
1834:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
1835:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
1836:000 | DONE ins | na 16 16 | 006812 | 20 6f 68    |                 jsr 00686f           ; returns ( addr u )
1837:000 | DONE wsp | na 16 16 |        |             |
1838:000 | DONE cmt | na 16 16 |        |             |                 ; If we got something that is not a zero, we go to FIND-NAME to
1839:000 | DONE cmt | na 16 16 |        |             |                 ; get the nt. Returns ( nt | 0 )
1840:000 | DONE ins | na 16 16 | 006815 | 20 69 63    |                 jsr 006369           
1841:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1842:000 | DONE wsp | na 16 16 |        |             |
1843:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
1844:000 | DONE ins | na 16 16 | 006818 | 98          |                 tya                  ; force flag check
1845:000 | DONE ins | na 16 16 | 006819 | d0 06       |                 bne 006821           
1846:000 | DONE wsp | na 16 16 |        |             |
1847:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
1848:000 | DONE wsp | na 16 16 |        |             |
1849:000 | DONE cmt | na 16 16 |        |             |                 ; Woe is us, all has failed
1850:000 | DONE ins | na 16 16 | 00681b | a9 62 6a    |                 lda.# 006a62         ; "Unknown word"
1851:000 | DONE ins | na 16 16 | 00681e | 4c 36 68    |                 jmp 006836           
1852:000 | DONE wsp | na 16 16 |        |             |
1853:000 | DONE lbl | na 16 16 | 006821 |             | compex_got_name_token                
1854:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if INTERPRETED OR COMPILED
1855:000 | DONE wsp | na 16 16 |        |             |
1856:000 | DONE cmt | na 16 16 |        |             |                 ; INTERPRET WORD
1857:000 | DONE cmt | na 16 16 |        |             |                 ; We arrive here with the nt as TOS. The xt of a word is
1858:000 | DONE cmt | na 16 16 |        |             |                 ; four bytes farther on, so this is a quick version of NAME>INT
1859:000 | DONE wsp | na 16 16 |        |             |
1860:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1861:000 | DONE ins | na 16 16 | 006821 | c8          |                 iny                  
1862:000 | DONE ins | na 16 16 | 006822 | c8          |                 iny                  
1863:000 | DONE ins | na 16 16 | 006823 | c8          |                 iny                  
1864:000 | DONE ins | na 16 16 | 006824 | c8          |                 iny                  
1865:000 | DONE ins | na 16 16 | 006825 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1866:000 | DONE ins | na 16 16 | 006828 | a8          |                 tay                  
1867:000 | DONE wsp | na 16 16 |        |             |
1868:000 | DONE ins | na 16 16 | 006829 | 20 59 63    |                 jsr 006359           
1869:000 | DONE wsp | na 16 16 |        |             |
1870:000 | DONE cmt | na 16 16 |        |             |                 ; that's quite enough for this word, let's get the next one
1871:000 | DONE ins | na 16 16 | 00682c | 4c 0c 68    |                 jmp 00680c           
1872:000 | DONE wsp | na 16 16 |        |             |
1873:000 | DONE lbl | na 16 16 | 00682f |             | compex_line_done                     
1874:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
1875:000 | DONE ins | na 16 16 | 00682f | b4 02       |                 ldy.dx 02            
1876:000 | DONE ins | na 16 16 | 006831 | e8          |                 inx                  
1877:000 | DONE ins | na 16 16 | 006832 | e8          |                 inx                  
1878:000 | DONE ins | na 16 16 | 006833 | e8          |                 inx                  
1879:000 | DONE ins | na 16 16 | 006834 | e8          |                 inx                  
1880:000 | DONE wsp | na 16 16 |        |             |
1881:000 | DONE ins | na 16 16 | 006835 | 60          |                 rts                  
1882:000 | DONE wsp | na 16 16 |        |             |
1883:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1884:000 | DONE cmt | na 16 16 |        |             | ; Fatal error encountered: Take address of error string from A, print it and
1885:000 | DONE cmt | na 16 16 |        |             | ; then call abort
1886:000 | DONE lbl | na 16 16 | 006836 |             | error                                
1887:000 | DONE ins | na 16 16 | 006836 | 20 3c 68    |                 jsr 00683c           
1888:000 | DONE ins | na 16 16 | 006839 | 4c 94 60    |                 jmp 006094           
1889:000 | DONE wsp | na 16 16 |        |             |
1890:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1891:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
1892:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
1893:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
1894:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
1895:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
1896:000 | DONE lbl | na 16 16 | 00683c |             | print_string                         
1897:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1898:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1899:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
1900:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
1901:000 | DONE ins | na 16 16 | 00683c | da          |                 phx                  
1902:000 | DONE ins | na 16 16 | 00683d | aa          |                 tax                  ; x16 contains address of string
1903:000 | DONE lbl | na 16 16 | 00683e |             | @                                    
1904:000 | DONE ins | na 16 16 | 00683e | e2 20       |                 sep 20               
1904:001 | DONE ctl | na  8 16 |        |             |         .!a8
1905:000 | DONE ins | na  8 16 | 006840 | bd 00 00    |                 lda.x 0000           ; LDA $0000,X
1906:000 | DONE ins | na  8 16 | 006843 | f0 06       |                 beq 00684b           
1907:000 | DONE ins | na  8 16 | 006845 | 20 30 60    |                 jsr 006030           
1908:000 | DONE ins | na  8 16 | 006848 | e8          |                 inx                  
1909:000 | DONE ins | na  8 16 | 006849 | 80 f3       |                 bra 00683e           
1910:000 | DONE wsp | na  8 16 |        |             |
1911:000 | DONE lbl | na  8 16 | 00684b |             | print_string_done                    
1912:000 | DONE ins | na  8 16 | 00684b | a9 0a       |                 lda.# AscLF          ; should be CR on some systems
1913:000 | DONE ins | na  8 16 | 00684d | 20 30 60    |                 jsr 006030           
1914:000 | DONE ins | na  8 16 | 006850 | c2 20       |                 rep 20               
1914:001 | DONE ctl | na 16 16 |        |             |         .!a16
1915:000 | DONE ins | na 16 16 | 006852 | fa          |                 plx                  
1916:000 | DONE ins | na 16 16 | 006853 | 60          |                 rts                  
1917:000 | DONE wsp | na 16 16 |        |             |
1918:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1919:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
1920:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
1921:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
1922:000 | DONE lbl | na 16 16 | 006854 |             | byte_to_ascii                        
1923:000 | DONE ins | na 16 16 | 006854 | 48          |                 pha                  
1924:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
1925:000 | DONE ins | na 16 16 | 006855 | 4a          |                 lsr.a                
1926:000 | DONE ins | na 16 16 | 006856 | 4a          |                 lsr.a                
1927:000 | DONE ins | na 16 16 | 006857 | 4a          |                 lsr.a                
1928:000 | DONE ins | na 16 16 | 006858 | 4a          |                 lsr.a                
1929:000 | DONE ins | na 16 16 | 006859 | 20 5d 68    |                 jsr 00685d           
1930:000 | DONE wsp | na 16 16 |        |             |
1931:000 | DONE ins | na 16 16 | 00685c | 68          |                 pla                  
1932:000 | DONE wsp | na 16 16 |        |             |
1933:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
1934:000 | DONE wsp | na 16 16 |        |             |
1935:000 | DONE wsp | na 16 16 |        |             |
1936:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1937:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
1938:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
1939:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
1940:000 | DONE lbl | na 16 16 | 00685d |             | nibble_to_ascii                      
1941:000 | DONE ins | na 16 16 | 00685d | 29 0f 00    |                 and.# 000f           
1942:000 | DONE ins | na 16 16 | 006860 | 09 30 00    |                 ora.# 30             
1943:000 | DONE ins | na 16 16 | 006863 | c9 3a 00    |                 cmp.# 003a           ; '9' + 1
1944:000 | DONE ins | na 16 16 | 006866 | 90 03       |                 bcc 00686b           
1945:000 | DONE ins | na 16 16 | 006868 | 69 06 00    |                 adc.# 0006           
1946:000 | DONE lbl | na 16 16 | 00686b |             | @                                    
1947:000 | DONE ins | na 16 16 | 00686b | 20 30 60    |                 jsr 006030           
1948:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1949:000 | DONE ins | na 16 16 | 00686e | 60          |                 rts                  
1950:000 | DONE wsp | na 16 16 |        |             |
1951:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1952:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
1953:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
1954:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
1955:000 | DONE lbl | na 16 16 | 00686f |             | string_to_lowercase                  
1956:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
1957:000 | DONE ins | na 16 16 | 00686f | 60          |                 rts                  
1958:000 | DONE wsp | na 16 16 |        |             |
1959:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1960:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
1961:000 | DONE wsp | na 16 16 |        |             |
1962:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
1963:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
1964:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
1965:000 | DONE lbl | na 16 16 | 006870 |             | hi-start                             
1966:000 | DONE dir | na 16 16 | 006870 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
1966:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
1966:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
1966:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
1966:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
1966:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
1967:000 | DONE dir | na 16 16 | 006893 | (36 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
1967:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
1967:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
1967:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
1967:000 | DONE dir | na 16 16 |        |             |                 39 2e 20 46 65 62 20 32  --  9 .   F e b   2
1967:000 | DONE dir | na 16 16 |        |             |                 30 31 37 29              --  0 1 7 )
1968:000 | DONE dir | na 16 16 | 0068b7 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
1968:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
1968:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
1968:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
1968:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
1968:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
1968:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
1968:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
1969:000 | DONE dir | na 16 16 | 0068ea | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
1969:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
1969:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
1969:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
1969:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
1969:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
1969:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
1969:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
1970:000 | DONE dir | na 16 16 | 00691e | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
1970:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
1970:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
1970:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
1970:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
1971:000 | DONE lbl | na 16 16 | 00693a |             | hi-end                               
1972:000 | DONE wsp | na 16 16 |        |             |
1973:000 | DONE wsp | na 16 16 |        |             |
1974:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1975:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
1976:000 | DONE wsp | na 16 16 |        |             |
1977:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
1977:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1977:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
1977:003 | DONE cmt | na 16 16 |        |             | ; This version:  12. Feb 2017
1977:004 | DONE wsp | na 16 16 |        |             |
1977:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
1977:006 | DONE wsp | na 16 16 |        |             |
1977:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1977:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
1977:009 | DONE wsp | na 16 16 |        |             |
1977:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
1977:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
1977:012 | DONE cmt | na 16 16 |        |             | ; character
1977:013 | DONE wsp | na 16 16 |        |             |
1977:014 | DONE lbl | na 16 16 | 00693a |             | s_ok                                 
1977:015 | DONE dir | na 16 16 | 00693a | (4 bytes)   |         .byte 20, 6f, 6b, 0          ; note space at beginning
1977:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
1977:016 | DONE wsp | na 16 16 |        |             |
1977:017 | DONE wsp | na 16 16 |        |             |
1977:018 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1977:019 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
1977:020 | DONE wsp | na 16 16 |        |             |
1977:021 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
1977:022 | DONE wsp | na 16 16 |        |             |
1977:023 | DONE lbl | na 16 16 | 00693e |             | es_allot                             
1977:024 | DONE dir | na 16 16 | 00693e | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
1977:024 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
1977:024 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
1977:024 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
1977:025 | DONE lbl | na 16 16 | 006952 |             | es_channel                           
1977:026 | DONE dir | na 16 16 | 006952 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
1977:026 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
1977:026 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
1977:026 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
1977:026 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
1977:027 | DONE lbl | na 16 16 | 00696c |             | es_componly                          
1977:028 | DONE dir | na 16 16 | 00696c | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
1977:028 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
1977:028 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
1977:028 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
1977:028 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
1977:028 | DONE dir | na 16 16 |        |             |                 00                       --  .
1977:029 | DONE lbl | na 16 16 | 00698d |             | es_defer                             
1977:030 | DONE dir | na 16 16 | 00698d | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
1977:030 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
1977:030 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
1977:030 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
1977:030 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
1977:031 | DONE lbl | na 16 16 | 0069aa |             | es_divzero                           
1977:032 | DONE dir | na 16 16 | 0069aa | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
1977:032 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
1977:032 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
1977:032 | DONE dir | na 16 16 |        |             |                 00                       --  .
1977:033 | DONE lbl | na 16 16 | 0069bb |             | es_error                             
1977:034 | DONE dir | na 16 16 | 0069bb | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
1977:034 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
1977:034 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
1977:035 | DONE lbl | na 16 16 | 0069c7 |             | es_intonly                           
1977:036 | DONE dir | na 16 16 | 0069c7 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
1977:036 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
1977:036 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
1977:036 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
1977:037 | DONE lbl | na 16 16 | 0069dd |             | es_noname                            
1977:038 | DONE dir | na 16 16 | 0069dd | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
1977:038 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
1977:038 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
1977:038 | DONE dir | na 16 16 |        |             |                                          -- 
1977:039 | DONE lbl | na 16 16 | 0069ed |             | es_radix                             
1977:040 | DONE dir | na 16 16 | 0069ed | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
1977:040 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
1977:040 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
1977:040 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
1977:041 | DONE lbl | na 16 16 | 006a04 |             | es_refill1                           
1977:042 | DONE dir | na 16 16 | 006a04 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
1977:042 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
1977:042 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
1977:042 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
1977:042 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
1977:042 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
1977:042 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
1977:043 | DONE lbl | na 16 16 | 006a32 |             | es_refill2                           
1977:044 | DONE dir | na 16 16 | 006a32 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
1977:044 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
1977:044 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
1977:044 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
1977:044 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
1977:044 | DONE dir | na 16 16 |        |             |                                          -- 
1977:045 | DONE lbl | na 16 16 | 006a52 |             | es_underflow                         
1977:046 | DONE dir | na 16 16 | 006a52 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
1977:046 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
1977:046 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
1977:046 | DONE dir | na 16 16 |        |             |                                          -- 
1977:047 | DONE lbl | na 16 16 | 006a62 |             | es_syntax                            
1977:048 | DONE dir | na 16 16 | 006a62 | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
1977:048 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
1977:048 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
1977:048 | DONE dir | na 16 16 |        |             |                                          -- 
1977:049 | DONE wsp | na 16 16 |        |             |
1977:050 | DONE wsp | na 16 16 |        |             |
1977:051 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1977:052 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
1977:053 | DONE wsp | na 16 16 |        |             |
1977:054 | DONE lbl | na 16 16 | 006a72 |             | vt100_page                           
1977:055 | DONE dir | na 16 16 | 006a72 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  ; clear screen
1977:055 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
1977:056 | DONE lbl | na 16 16 | 006a77 |             | vt100_home                           
1977:057 | DONE dir | na 16 16 | 006a77 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      ; cursor home
1977:057 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
1977:058 | DONE wsp | na 16 16 |        |             |
1977:059 | DONE wsp | na 16 16 |        |             |
1977:060 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1977:061 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
1977:062 | DONE wsp | na 16 16 |        |             |
1977:063 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
1977:064 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
1977:065 | DONE wsp | na 16 16 |        |             |
1977:066 | DONE lbl | na 16 16 | 006a7b |             | tests_prev_cmd                       
1977:067 | DONE dir | na 16 16 | 006a7b | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
1977:067 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
1977:067 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
1977:067 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
1977:068 | DONE lbl | na 16 16 | 006a8e |             | tests_next_cmd                       
1977:069 | DONE dir | na 16 16 | 006a8e | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
1977:069 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
1977:069 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
1977:070 | DONE wsp | na 16 16 |        |             |
1977:071 | DONE wsp | na 16 16 |        |             |
1977:072 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1977:073 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
1977:074 | DONE wsp | na 16 16 |        |             |
1977:075 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
1977:076 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
1977:077 | DONE wsp | na 16 16 |        |             |
1977:078 | DONE lbl | na 16 16 | 006a9d |             | alphastr                             
1977:079 | DONE dir | na 16 16 | 006a9d | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
1977:079 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
1977:079 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
1977:079 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
1977:079 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
1977:079 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
1978:000 | DONE wsp | na 16 16 |        |             |
1979:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1980:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
1981:000 | DONE wsp | na 16 16 |        |             |
1982:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
1983:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
1984:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
1985:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
1986:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
1987:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
1988:000 | DONE wsp | na 16 16 |        |             |
1989:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
1990:000 | DONE cmt | na 16 16 |        |             |                 ; tya
1991:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
1992:000 | DONE cmt | na 16 16 |        |             |                 ; xba
1993:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
1994:000 | DONE cmt | na 16 16 |        |             |                 ; tya
1995:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
1996:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
1997:000 | DONE cmt | na 16 16 |        |             |                 ; jsr a_cr
1998:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
1999:000 | DONE wsp | na 16 16 |        |             |
2000:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
2001:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
2002:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
2003:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2004:000 | DONE wsp | na 16 16 |        |             |
2005:000 | DONE wsp | na 16 16 |        |             |
2006:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2007:000 | DONE cmt | na 16 16 |        |             | ; END
2008:000 | DONE wsp | na 16 16 |        |             |
2009:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- a_2dup                      : 006129
- a_abort                     : 006094
- a_abs                       : 00614e
- a_accept                    : 006157
- a_allot                     : 0061db
- a_bell                      : 006204
- a_bl                        : 00620b
- a_bye                       : 006213
- a_cold                      : 00605d
- a_comma                     : 0060db
- a_count                     : 006217
- a_cr                        : 006226
- a_create                    : 00622d
- a_depth                     : 0062a2
- a_dot                       : 0062b1
- a_dotparen                  : 0062c7
- a_dots                      : 0062d5
- a_drop                      : 00631d
- a_dup                       : 006322
- a_evaluate                  : 006327
- a_execute                   : 006359
- a_fetch                     : 0060f1
- a_find-name                 : 006369
- a_here                      : 0063c0
- a_minus                     : 0060fe
- a_name-int                  : 0063c7
- a_name-string               : 0063d0
- a_nip                       : 0063e1
- a_one                       : 006111
- a_one-minus                 : 006119
- a_one-plus                  : 00611b
- a_pad                       : 0063e4
- a_page                      : 0063f0
- a_parse                     : 00642f
- a_parse-name                : 0063fd
- a_plus                      : 0060f6
- a_quit                      : 00609c
- a_refill                    : 006462
- a_rot                       : 006495
- a_source                    : 00649e
- a_source-id                 : 0064ab
- a_space                     : 0064b2
- a_spaces                    : 0064b9
- a_state                     : 0064c6
- a_store                     : 0060e7
- a_swap                      : 0064ce
- a_tick                      : 006134
- a_to-in                     : 0060d3
- a_true                      : 0064d4
- a_tuck                      : 0064dc
- a_two                       : 00611d
- a_two-star                  : 006125
- a_type                      : 0064e5
- a_unused                    : 006506
- a_words                     : 006512
- a_zero                      : 006109
- accept_bs                   : 0061bd
- accept_eol                  : 0061b5
- accept_loop                 : 00616a
- accept_nonzero              : 00615d
- allot_done                  : 0061fd
- allot_error                 : 0061ec
- allot_minus                 : 0061f2
- allot_real_gone             : 0061ff
- alphastr                    : 006a9d
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006854
- cib                         : 00020c
- ciblen                      : 00020e
- co                          : 000040
- compex                      : 00680c
- compex_got_name_token       : 006821
- compex_line_done            : 00682f
- compex_loop                 : 00680c
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006238
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 0067fe
- dots_done                   : 006319
- dots_loop                   : 0062ff
- dots_not_empty              : 0062f9
- dovar                       : 0067f7
- dp                          : 000202
- dsp0                        : 0002f0
- error                       : 006836
- es_allot                    : 00693e
- es_channel                  : 006952
- es_componly                 : 00696c
- es_defer                    : 00698d
- es_divzero                  : 0069aa
- es_error                    : 0069bb
- es_intonly                  : 0069c7
- es_noname                   : 0069dd
- es_radix                    : 0069ed
- es_refill1                  : 006a04
- es_refill2                  : 006a32
- es_syntax                   : 006a62
- es_underflow                : 006a52
- execute_done                : 006367
- execute_ip                  : 006356
- find-name_all_chars         : 006397
- find-name_char_nomatch_8    : 006393
- find-name_chars             : 006388
- find-name_done              : 0063bd
- find-name_failure_16        : 0063ba
- find-name_loop              : 006373
- find-name_next_entry        : 00637c
- find-name_success           : 0063b4
- get_chr                     : 006041
- get_chr_wait                : 006046
- h_2dup                      : 006675
- h_abort                     : 006591
- h_abs                       : 006681
- h_accept                    : 006777
- h_allot                     : 006647
- h_bell                      : 00655e
- h_bl                        : 0065d1
- h_bye                       : 00653a
- h_cells                     : 00663a
- h_cold                      : 006545
- h_comma                     : 00676e
- h_count                     : 006584
- h_cr                        : 0065c7
- h_create                    : 006654
- h_depth                     : 0066b2
- h_dot                       : 006616
- h_dotparen                  : 006600
- h_dots                      : 0065f6
- h_drop                      : 0067eb
- h_dup                       : 0067e0
- h_evaluate                  : 00662a
- h_execute                   : 0067a7
- h_false                     : 0066f8
- h_fetch                     : 0067c2
- h_find-name                 : 00672c
- h_here                      : 0067b6
- h_minus                     : 0066d2
- h_name-int                  : 0065b7
- h_name-string               : 006662
- h_nip                       : 006791
- h_one                       : 00671a
- h_one-minus                 : 0066e4
- h_one-plus                  : 0066ee
- h_pad                       : 00661f
- h_page                      : 006578
- h_parse                     : 00659e
- h_parse-name                : 00674b
- h_plus                      : 0066db
- h_quit                      : 0065ab
- h_refill                    : 00673d
- h_rot                       : 00679c
- h_source                    : 0066a4
- h_source-id                 : 00675d
- h_space                     : 0065e9
- h_spaces                    : 0065db
- h_state                     : 00668c
- h_store                     : 0067cb
- h_swap                      : 0067d4
- h_tick                      : 0066bf
- h_to-in                     : 006699
- h_true                      : 006705
- h_tuck                      : 006785
- h_two                       : 006711
- h_two-star                  : 0066c8
- h_type                      : 00660a
- h_unused                    : 00656a
- h_words                     : 006551
- h_zero                      : 006723
- have_chr?                   : 006050
- hi-end                      : 00693a
- hi-start                    : 006870
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000020
- insrc                       : 00020a
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- nc                          : 000010
- nibble_to_ascii             : 00685d
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 00640f
- parse-name_found            : 006423
- parse-name_loop             : 006402
- parse_found_delimiter       : 00644f
- parse_loop                  : 006442
- parse_reached_eol           : 006453
- physicalram                 : 007fff
- piblen                      : 000210
- print_string                : 00683c
- print_string_done           : 00684b
- put_chr                     : 006030
- put_chr_wait                : 006036
- pw                          : 000080
- quit_get_line               : 0060a7
- quit_ok                     : 0060c9
- quit_refill_successful      : 0060b5
- refill_source_is_not_string : 00648e
- refill_src_not_kbd          : 006485
- reset_hardware              : 006000
- s_ok                        : 00693a
- spaces_done                 : 0064c1
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006060
- state                       : 000214
- string_to_lowercase         : 00686f
- tests_next_cmd              : 006a8e
- tests_prev_cmd              : 006a7b
- tick_have_nt                : 00614a
- tick_have_word              : 00613f
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 0064ff
- type_loop                   : 0064f3
- vt100_home                  : 006a77
- vt100_page                  : 006a72
- words_loop                  : 00651c
- z_2dup                      : 006133
- z_abort                     : 0060d2
- z_abs                       : 006156
- z_accept                    : 0061da
- z_allot                     : 006203
- z_bell                      : 00620a
- z_bl                        : 006212
- z_bye                       : 006216
- z_cold                      : 0060d2
- z_comma                     : 0060e6
- z_count                     : 006225
- z_cr                        : 00622c
- z_create                    : 0062a1
- z_depth                     : 0062b0
- z_dot                       : 0062c6
- z_dotparen                  : 0062d4
- z_dots                      : 00631c
- z_drop                      : 006321
- z_dup                       : 006326
- z_evaluate                  : 006355
- z_execute                   : 006368
- z_fetch                     : 0060f5
- z_find-name                 : 0063bf
- z_here                      : 0063c6
- z_minus                     : 006108
- z_name-int                  : 0063cf
- z_name-string               : 0063e0
- z_nip                       : 0063e3
- z_one                       : 006118
- z_one-minus                 : 00611a
- z_one-plus                  : 00611c
- z_pad                       : 0063ef
- z_page                      : 0063fc
- z_parse                     : 006461
- z_parse-name                : 006461
- z_plus                      : 0060fd
- z_quit                      : 0060d2
- z_refill                    : 006494
- z_rot                       : 00649d
- z_source                    : 0064aa
- z_source-id                 : 0064b1
- z_space                     : 0064b8
- z_spaces                    : 0064c5
- z_state                     : 0064cd
- z_store                     : 0060f0
- z_swap                      : 0064d3
- z_tick                      : 00614d
- z_to-in                     : 0060da
- z_true                      : 0064db
- z_tuck                      : 0064e4
- z_two                       : 006124
- z_two-star                  : 006128
- z_type                      : 006505
- z_unused                    : 006511
- z_words                     : 006539
- z_zero                      : 006110
