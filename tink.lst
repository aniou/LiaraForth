A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 24. January 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Mon Feb  6 17:42:55 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.04586 seconds
Code origin: 006000
Bytes of machine code: 2277

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 06. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 ; start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 03. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate file kernel.tasm with symbols
  16:011 | DONE cmt | em  8  8 |        |             | ; prefixed with hw_ . No symbol with this prefix may be defined or used outside
  16:012 | DONE cmt | em  8  8 |        |             | ; of that file.
  16:013 | DONE wsp | em  8  8 |        |             |
  16:014 | DONE cmt | em  8  8 |        |             | ; The definitions for multitasking are preliminary and will probably
  16:015 | DONE cmt | em  8  8 |        |             | ; change
  16:016 | DONE wsp | em  8  8 |        |             |
  16:017 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:018 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:019 | DONE wsp | em  8  8 |        |             |
  16:020 | DONE dir | em  8  8 |        |             |         .equ ram0            0200    ; start of available RAM
  16:021 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   ; end of installed RAM
  16:022 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   ; end of available RAM (single task mode)
  16:023 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   ; end of available RAM (multitask mode)
  16:024 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           ; buffer area start
  16:025 | DONE wsp | em  8  8 |        |             |
  16:026 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:027 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:028 | DONE wsp | em  8  8 |        |             |
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffersize 00ff         ; maximum size for input buffers
  16:030 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         ; start of 256 byte input buffer 1
  16:031 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         ; start of 256 byte input buffer 2
  16:032 | DONE wsp | em  8  8 |        |             |
  16:033 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:034 | DONE wsp | em  8  8 |        |             |
  16:035 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 ; single task Direct Page (DP) start
  16:036 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 ; multitask Stack (S) area start
  16:037 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 ; multitask Direct Page (DP) area start
  16:038 | DONE wsp | em  8  8 |        |             |
  16:039 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:040 | DONE wsp | em  8  8 |        |             |
  16:041 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             ; single task Stack (S) start (bottom)
  16:042 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f0             ; initial Data Stack Pointer (X)
  16:043 | DONE wsp | em  8  8 |        |             |
  16:044 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:045 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:046 | DONE wsp | em  8  8 |        |             |
  16:047 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:048 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:049 | DONE wsp | em  8  8 |        |             |
  16:050 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      ; Compiler Pointer, 2 bytes
  16:051 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      ; Dictionary Pointer, 2 bytes
  16:052 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  ; Temporary DSP (X) storage, 2 bytes
  16:053 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  ; Temporary TOS (Y) storage, 2 bytes
  16:054 | DONE cmt | em  8  8 |        |             | ;       .equ         { directpage + &8 }  ; UNUSED
  16:055 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  ; Input Source for SOURCE-ID
  16:056 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    ; Current Input Buffer, 7c00 or 7d00
  16:057 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } ; Length of current input buffer
  16:058 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } ; Length of previous input buffer
  16:059 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   ; Pointer to CIB (>IN in Forth)
  16:060 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  ; STATE: 1 compile, 0 interpret
  16:061 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   ; Temporary storage, usually address
  16:062 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   ; Temporary storage, usually counter
  16:063 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   ; Temporary storage
  16:064 | DONE wsp | em  8  8 |        |             |
  16:065 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:066 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:067 | DONE wsp | em  8  8 |        |             |
  16:068 | DONE cmt | em  8  8 |        |             | ; ASCII character set
  16:069 | DONE wsp | em  8  8 |        |             |
  16:070 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              ; break (Control-C) ASCII character
  16:071 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ; ACSCII bell sound
  16:072 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              ; backspace ASCII character
  16:073 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              ; line feed ASCII character
  16:074 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              ; carriage return ASCII character
  16:075 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ; ASCII CNTR-n (for next command)
  16:076 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ; ASCII CNTR-p (for previous command)
  16:077 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              ; Escape ASCII character
  16:078 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              ; space ASCII character
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              ; DEL ASCII character
  16:080 | DONE wsp | em  8  8 |        |             |
  16:081 | DONE cmt | em  8  8 |        |             | ; Dictionary flags
  16:082 | DONE wsp | em  8  8 |        |             |
  16:083 | DONE dir | em  8  8 |        |             |         .equ PW %10000000            ; Primitive (Native) Word
  16:084 | DONE dir | em  8  8 |        |             |         .equ CO %01000000            ; Compile Only
  16:085 | DONE dir | em  8  8 |        |             |         .equ IM %00100000            ; Immediate Word
  16:086 | DONE dir | em  8  8 |        |             |         .equ NC %00010000            ; Native (inline) Compile
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 29. Jan 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           ; 19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           ; Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           ; Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           ; Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           ; Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           ; Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           ; Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           ; Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           ; Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           ; Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           ; Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           ; Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           ; Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           ; Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           ; Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           ; Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           ; Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           ; Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           ; System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           ; Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           ; Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           ; Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           ; Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           ; Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           ; Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           ; UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           ; UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           ; Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           ; Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           ; Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           ; Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           ; Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           ; Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           ; Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           ; Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           ; Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           ; Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           ; Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           ; Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           ; Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           ; Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           ; Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           ; Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          ; UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          ; UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          ; UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          ; UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          ; UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          ; UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          ; UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          ; UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:109 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:110 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:111 | DONE wsp | na  8 16 |        |             |
  23:112 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           ; UART Interrupt Enable Register (UIER)
  23:113 | DONE wsp | na  8 16 |        |             |
  23:114 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            ; Ensure A15/AMS are output
  23:115 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           ; Port 4 Data Direction Register (PDD4)
  23:116 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           ; Select bank 0 (Port 4 Data Register, PD4)
  23:117 | DONE wsp | na  8 16 |        |             |
  23:118 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      ; Set UART0 to use timer 3
  23:119 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           ; Timer Control Register (TCR)
  23:120 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    ; And set baud rate
  23:121 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           ; Timer 3 Counter Low (T3CL)
  23:122 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:123 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           ; Timer 3 Counter High (T3CH)
  23:124 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             ; Enable timer 3 (1<<3)
  23:125 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           ; Timer Enable Register (TER)
  23:126 | DONE wsp | na  8 16 |        |             |
  23:127 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      ; Set UART0 for 8-N-1
  23:128 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           ; UART 0 Control/Status Register (ACSR0)
  23:129 | DONE wsp | na  8 16 |        |             |
  23:130 | DONE ins | na  8 16 | 00602d | 4c 60 60    |                 jmp 006060           ; we return with A as 8 bits
  23:131 | DONE wsp | na  8 16 |        |             |
  23:132 | DONE wsp | na  8 16 |        |             |
  23:133 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:134 | DONE cmt | na  8 16 |        |             | ; PUT_CHR
  23:135 | DONE cmt | na  8 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:136 | DONE cmt | na  8 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:137 | DONE lbl | na  8 16 | 006030 |             | put_chr                              
  23:138 | DONE ins | na  8 16 | 006030 | 08          |                 php                  ; save register sizes
  23:139 | DONE ins | na  8 16 | 006031 | e2 20       |                 sep 20               
  23:140 | DONE ctl | na  8 16 |        |             |         .!a8
  23:141 | DONE ins | na  8 16 | 006033 | 48          |                 pha                  
  23:142 | DONE ins | na  8 16 | 006034 | a9 02       |                 lda.# 02             ; (1<<1)
  23:143 | DONE wsp | na  8 16 |        |             |
  23:144 | DONE lbl | na  8 16 | 006036 |             | put_chr_wait                         
  23:145 | DONE ins | na  8 16 | 006036 | 2c 48 df    |                 bit 00df48           ; timer finished?
  23:146 | DONE ins | na  8 16 | 006039 | f0 fb       |                 beq 006036           
  23:147 | DONE wsp | na  8 16 |        |             |
  23:148 | DONE ins | na  8 16 | 00603b | 68          |                 pla                  
  23:149 | DONE ins | na  8 16 | 00603c | 8d 71 df    |                 sta 00df71           ; transmit char
  23:150 | DONE ins | na  8 16 | 00603f | 28          |                 plp                  
  23:151 | DONE wsp | na  8 16 |        |             |
  23:152 | DONE ins | na  8 16 | 006040 | 60          |                 rts                  
  23:153 | DONE wsp | na  8 16 |        |             |
  23:154 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:155 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:156 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:157 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:158 | DONE lbl | na  8 16 | 006041 |             | get_chr                              
  23:159 | DONE ins | na  8 16 | 006041 | 08          |                 php                  ; Save register sizes
  23:160 | DONE ins | na  8 16 | 006042 | e2 20       |                 sep 20               
  23:161 | DONE ctl | na  8 16 |        |             |         .!a8
  23:162 | DONE ins | na  8 16 | 006044 | a9 01       |                 lda.# 01             ; (1<<0)
  23:163 | DONE wsp | na  8 16 |        |             |
  23:164 | DONE lbl | na  8 16 | 006046 |             | get_chr_wait                         
  23:165 | DONE ins | na  8 16 | 006046 | 2c 48 df    |                 bit 00df48           ; Any data in RX buffer?
  23:166 | DONE ins | na  8 16 | 006049 | f0 fb       |                 beq 006046           ; No, keep waiting
  23:167 | DONE ins | na  8 16 | 00604b | ad 71 df    |                 lda 00df71           ; Yes, read it
  23:168 | DONE ins | na  8 16 | 00604e | 28          |                 plp                  
  23:169 | DONE wsp | na  8 16 |        |             |
  23:170 | DONE ins | na  8 16 | 00604f | 60          |                 rts                  
  23:171 | DONE wsp | na  8 16 |        |             |
  23:172 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:173 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:174 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:175 | DONE cmt | na  8 16 |        |             | ; some.
  23:176 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:177 | DONE wsp | na  8 16 |        |             |
  23:178 | DONE lbl | na  8 16 | 006050 |             | have_chr?                            
  23:179 | DONE ins | na  8 16 | 006050 | 48          |                 pha                  ; save caller's A
  23:180 | DONE ins | na  8 16 | 006051 | 08          |                 php                  
  23:181 | DONE ins | na  8 16 | 006052 | e2 20       |                 sep 20               
  23:182 | DONE ctl | na  8 16 |        |             |         .!a8
  23:183 | DONE ins | na  8 16 | 006054 | ad 48 df    |                 lda 00df48           ; read the status register
  23:184 | DONE ins | na  8 16 | 006057 | 28          |                 plp                  
  23:185 | DONE ins | na  8 16 | 006058 | 6a          |                 ror.a                ; shift hw_uart0r bit into carry
  23:186 | DONE ins | na  8 16 | 006059 | c2 20       |                 rep 20               
  23:187 | DONE ctl | na 16 16 |        |             |         .!a16
  23:188 | DONE ins | na 16 16 | 00605b | 68          |                 pla                  ; restore A
  23:189 | DONE ins | na 16 16 | 00605c | 60          |                 rts                  
  23:190 | DONE wsp | na 16 16 |        |             |
  23:191 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system. TODO determine how to compile this word
  37:000 | DONE wsp | na 16 16 |        |             |
  38:000 | DONE lbl | na 16 16 | 00605d |             | a_cold                               
  39:000 | DONE wsp | na 16 16 |        |             |
  40:000 | DONE ins | na 16 16 | 00605d | 4c 00 60    |                 jmp 006000           ; don't use JSR, jump back to start
  41:000 | DONE lbl | na 16 16 | 006060 |             | start                                
  42:000 | DONE wsp | na 16 16 |        |             |
  43:000 | DONE ins | na 16 16 | 006060 | 18          |                 clc                  
  43:001 | DONE ins | na 16 16 | 006061 | fb          |                 xce                  
  43:002 | DONE ctl | na 16 16 |        |             |         .!native
  44:000 | DONE ins | na 16 16 | 006062 | c2 20       |                 rep 20               
  44:001 | DONE ctl | na 16 16 |        |             |         .!a16
  45:000 | DONE ins | na 16 16 | 006064 | c2 10       |                 rep 10               
  45:001 | DONE ctl | na 16 16 |        |             |         .!xy16
  46:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  47:000 | DONE wsp | na 16 16 |        |             |
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  49:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  50:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up CP
  51:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate PAD
  52:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  53:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate high-level words
  54:000 | DONE wsp | na 16 16 |        |             |
  55:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  56:000 | DONE cmt | na 16 16 |        |             |                 ; clean Dictionary, so we start off the Dictionary Pointer (DP)
  57:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  58:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  59:000 | DONE ins | na 16 16 | 006067 | a9 35 66    |                 lda.# 006635         
  60:000 | DONE ins | na 16 16 | 00606a | 85 02       |                 sta.d 000202         
  61:000 | DONE wsp | na 16 16 |        |             |
  62:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  63:000 | DONE ins | na 16 16 | 00606c | a9 00 7c    |                 lda.# 007c00         ; start with first input buffer
  64:000 | DONE ins | na 16 16 | 00606f | 85 0c       |                 sta.d 00020c         
  65:000 | DONE ins | na 16 16 | 006071 | 64 0e       |                 stz.d 00020e         ; current input buffer is empty
  66:000 | DONE ins | na 16 16 | 006073 | 64 10       |                 stz.d 000210         ; previous input buffer is empty
  67:000 | DONE wsp | na 16 16 |        |             |
  68:000 | DONE cmt | na 16 16 |        |             |                 ; print boot strings
  69:000 | DONE ins | na 16 16 | 006075 | a9 ac 66    |                 lda.# 0066ac         
  70:000 | DONE ins | na 16 16 | 006078 | 20 71 66    |                 jsr 006671           
  71:000 | DONE ins | na 16 16 | 00607b | a9 cc 66    |                 lda.# 0066cc         
  72:000 | DONE ins | na 16 16 | 00607e | 20 71 66    |                 jsr 006671           
  73:000 | DONE ins | na 16 16 | 006081 | a9 ea 66    |                 lda.# 0066ea         
  74:000 | DONE ins | na 16 16 | 006084 | 20 71 66    |                 jsr 006671           
  75:000 | DONE ins | na 16 16 | 006087 | a9 17 67    |                 lda.# 006717         
  76:000 | DONE ins | na 16 16 | 00608a | 20 71 66    |                 jsr 006671           
  77:000 | DONE ins | na 16 16 | 00608d | a9 45 67    |                 lda.# 006745         
  78:000 | DONE ins | na 16 16 | 006090 | 20 71 66    |                 jsr 006671           
  79:000 | DONE wsp | na 16 16 |        |             |
  80:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to QUIT
  81:000 | DONE wsp | na 16 16 |        |             |
  82:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  83:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 6+ bytes / 6+ cycles
  84:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  85:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  86:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
  87:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
  88:000 | DONE wsp | na 16 16 |        |             |
  89:000 | DONE lbl | na 16 16 | 006093 |             | a_abort                              
  90:000 | DONE ins | na 16 16 | 006093 | c2 20       |                 rep 20               
  90:001 | DONE ctl | na 16 16 |        |             |         .!a16
  91:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
  92:000 | DONE ins | na 16 16 | 006095 | a0 00 00    |                 ldy.# 0000           
  93:000 | DONE ins | na 16 16 | 006098 | a2 f0 02    |                 ldx.# 0002f0         
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE wsp | na 16 16 |        |             |
  96:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
  97:000 | DONE wsp | na 16 16 |        |             |
  98:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  99:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 100:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 101:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 102:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 103:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output.
 104:000 | DONE wsp | na 16 16 |        |             |
 105:000 | DONE lbl | na 16 16 | 00609b |             | a_quit                               ; clear Return Stack
 106:000 | DONE ins | na 16 16 | 00609b | a9 ff 7f    |                 lda.# 007fff         
 107:000 | DONE ins | na 16 16 | 00609e | 1b          |                 tcs                  
 108:000 | DONE wsp | na 16 16 |        |             |
 109:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 110:000 | DONE ins | na 16 16 | 00609f | 64 47       |                 stz.d 006247         
 111:000 | DONE wsp | na 16 16 |        |             |
 112:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 113:000 | DONE ins | na 16 16 | 0060a1 | 64 0a       |                 stz.d 00020a         
 114:000 | DONE wsp | na 16 16 |        |             |
 115:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 116:000 | DONE ins | na 16 16 | 0060a3 | 64 14       |                 stz.d 000214         
 117:000 | DONE wsp | na 16 16 |        |             |
 118:000 | DONE lbl | na 16 16 | 0060a5 |             | quit_get_line                        
 119:000 | DONE cmt | na 16 16 |        |             |                 ; empty current input buffer. Note the previous input line is
 120:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 121:000 | DONE ins | na 16 16 | 0060a5 | 64 0e       |                 stz.d 00020e         
 122:000 | DONE wsp | na 16 16 |        |             |
 123:000 | DONE cmt | na 16 16 |        |             |                 ; accept a line from the current input source
 124:000 | DONE ins | na 16 16 | 0060a7 | 20 47 63    |                 jsr 006347           ; ( -- f )
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE ins | na 16 16 | 0060aa | 98          |                 tya                  ; force flag test of TOS
 127:000 | DONE ins | na 16 16 | 0060ab | d0 06       |                 bne 0060b3           
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 130:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 131:000 | DONE cmt | na 16 16 |        |             |                 ; need to save A because we're going to clobber it anyway when we
 132:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 133:000 | DONE ins | na 16 16 | 0060ad | a9 17 68    |                 lda.# 006817         
 134:000 | DONE ins | na 16 16 | 0060b0 | 4c 6b 66    |                 jmp 00666b           
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE wsp | na 16 16 |        |             |
 137:000 | DONE lbl | na 16 16 | 0060b3 |             | quit_refill_successful               
 138:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 139:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 140:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 141:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 142:000 | DONE ins | na 16 16 | 0060b3 | b4 00       |                 ldy.dx 00            ; drop TOS
 143:000 | DONE ins | na 16 16 | 0060b5 | e8          |                 inx                  
 144:000 | DONE ins | na 16 16 | 0060b6 | e8          |                 inx                  
 145:000 | DONE wsp | na 16 16 |        |             |
 146:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 147:000 | DONE ins | na 16 16 | 0060b7 | 64 12       |                 stz.d 000212         
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 150:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 151:000 | DONE ins | na 16 16 | 0060b9 | 20 41 66    |                 jsr 006641           
 152:000 | DONE wsp | na 16 16 |        |             |
 153:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 154:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 155:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 156:000 | DONE ins | na 16 16 | 0060bc | 86 04       |                 stx.d 000204         
 157:000 | DONE ins | na 16 16 | 0060be | a9 f0 02    |                 lda.# 0002f0         
 158:000 | DONE ins | na 16 16 | 0060c1 | 38          |                 sec                  
 159:000 | DONE ins | na 16 16 | 0060c2 | e5 04       |                 sbc.d 000204         
 160:000 | DONE wsp | na 16 16 |        |             |
 161:000 | DONE ins | na 16 16 | 0060c4 | 10 06       |                 bpl 0060cc           
 162:000 | DONE ins | na 16 16 | 0060c6 | a9 65 68    |                 lda.# 006865         
 163:000 | DONE ins | na 16 16 | 0060c9 | 4c 6b 66    |                 jmp 00666b           
 164:000 | DONE wsp | na 16 16 |        |             |
 165:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 166:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well
 167:000 | DONE ins | na 16 16 | 0060cc | a9 58 67    |                 lda.# 006758         
 168:000 | DONE ins | na 16 16 | 0060cf | 20 71 66    |                 jsr 006671           
 169:000 | DONE wsp | na 16 16 |        |             |
 170:000 | DONE wsp | na 16 16 |        |             |
 171:000 | DONE cmt | na 16 16 |        |             |                 ; get next line
 172:000 | DONE ins | na 16 16 | 0060d2 | 4c a5 60    |                 jmp 0060a5           
 173:000 | DONE wsp | na 16 16 |        |             |
 174:000 | DONE lbl | na 16 16 | 0060d5 |             | z_cold                               
 175:000 | DONE lbl | na 16 16 | 0060d5 |             | z_abort                              
 176:000 | DONE lbl | na 16 16 | 0060d5 |             | z_quit                               
 176:001 | DONE ins | na 16 16 | 0060d5 | ea          |                 nop                  ; dummy for compilation, TODO test if required
 177:000 | DONE wsp | na 16 16 |        |             |
 178:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 179:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / X cycles
 180:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 181:000 | DONE wsp | na 16 16 |        |             |
 182:000 | DONE lbl | na 16 16 | 0060d6 |             | a_to-in                              
 182:001 | DONE ins | na 16 16 | 0060d6 | ca          |                 dex                  
 183:000 | DONE ins | na 16 16 | 0060d7 | ca          |                 dex                  
 184:000 | DONE ins | na 16 16 | 0060d8 | 94 00       |                 sty.dx 00            
 185:000 | DONE wsp | na 16 16 |        |             |
 186:000 | DONE ins | na 16 16 | 0060da | a0 12 02    |                 ldy.# 000212         ; >IN
 187:000 | DONE lbl | na 16 16 | 0060dd |             | z_to-in                              
 187:001 | DONE ins | na 16 16 | 0060dd | 60          |                 rts                  
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 190:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 191:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 192:000 | DONE wsp | na 16 16 |        |             |
 193:000 | DONE lbl | na 16 16 | 0060de |             | a_plus                               
 193:001 | DONE ins | na 16 16 | 0060de | 98          |                 tya                  
 194:000 | DONE ins | na 16 16 | 0060df | 18          |                 clc                  
 195:000 | DONE ins | na 16 16 | 0060e0 | 75 00       |                 adc.dx 00            
 196:000 | DONE ins | na 16 16 | 0060e2 | a8          |                 tay                  
 197:000 | DONE ins | na 16 16 | 0060e3 | e8          |                 inx                  
 198:000 | DONE ins | na 16 16 | 0060e4 | e8          |                 inx                  
 199:000 | DONE wsp | na 16 16 |        |             |
 200:000 | DONE lbl | na 16 16 | 0060e5 |             | z_plus                               
 200:001 | DONE ins | na 16 16 | 0060e5 | 60          |                 rts                  
 201:000 | DONE wsp | na 16 16 |        |             |
 202:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 203:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 204:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 205:000 | DONE wsp | na 16 16 |        |             |
 206:000 | DONE lbl | na 16 16 | 0060e6 |             | a_zero                               
 207:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 208:000 | DONE ins | na 16 16 | 0060e6 | ca          |                 dex                  
 209:000 | DONE ins | na 16 16 | 0060e7 | ca          |                 dex                  
 210:000 | DONE ins | na 16 16 | 0060e8 | 94 00       |                 sty.dx 00            
 211:000 | DONE ins | na 16 16 | 0060ea | a0 00 00    |                 ldy.# 0000           
 212:000 | DONE wsp | na 16 16 |        |             |
 213:000 | DONE lbl | na 16 16 | 0060ed |             | z_zero                               
 213:001 | DONE ins | na 16 16 | 0060ed | 60          |                 rts                  
 214:000 | DONE wsp | na 16 16 |        |             |
 215:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 216:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 217:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 218:000 | DONE wsp | na 16 16 |        |             |
 219:000 | DONE lbl | na 16 16 | 0060ee |             | a_one                                
 220:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 221:000 | DONE ins | na 16 16 | 0060ee | ca          |                 dex                  
 222:000 | DONE ins | na 16 16 | 0060ef | ca          |                 dex                  
 223:000 | DONE ins | na 16 16 | 0060f0 | 94 00       |                 sty.dx 00            
 224:000 | DONE ins | na 16 16 | 0060f2 | a0 01 00    |                 ldy.# 0001           
 225:000 | DONE wsp | na 16 16 |        |             |
 226:000 | DONE lbl | na 16 16 | 0060f5 |             | z_one                                
 226:001 | DONE ins | na 16 16 | 0060f5 | 60          |                 rts                  
 227:000 | DONE wsp | na 16 16 |        |             |
 228:000 | DONE wsp | na 16 16 |        |             |
 229:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 230:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 bytes / 2 cycles
 231:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 232:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty.
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE lbl | na 16 16 | 0060f6 |             | a_one-plus                           
 234:001 | DONE ins | na 16 16 | 0060f6 | c8          |                 iny                  
 235:000 | DONE lbl | na 16 16 | 0060f7 |             | z_one-plus                           
 235:001 | DONE ins | na 16 16 | 0060f7 | 60          |                 rts                  
 236:000 | DONE wsp | na 16 16 |        |             |
 237:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 238:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 239:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE lbl | na 16 16 | 0060f8 |             | a_two                                
 242:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 243:000 | DONE ins | na 16 16 | 0060f8 | ca          |                 dex                  
 244:000 | DONE ins | na 16 16 | 0060f9 | ca          |                 dex                  
 245:000 | DONE ins | na 16 16 | 0060fa | 94 00       |                 sty.dx 00            
 246:000 | DONE ins | na 16 16 | 0060fc | a0 02 00    |                 ldy.# 0002           
 247:000 | DONE wsp | na 16 16 |        |             |
 248:000 | DONE lbl | na 16 16 | 0060ff |             | z_two                                
 248:001 | DONE ins | na 16 16 | 0060ff | 60          |                 rts                  
 249:000 | DONE wsp | na 16 16 |        |             |
 250:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 251:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 252:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 253:000 | DONE wsp | na 16 16 |        |             |
 254:000 | DONE lbl | na 16 16 | 006100 |             | a_2dup                               
 255:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 256:000 | DONE ins | na 16 16 | 006100 | ca          |                 dex                  
 257:000 | DONE ins | na 16 16 | 006101 | ca          |                 dex                  
 258:000 | DONE ins | na 16 16 | 006102 | ca          |                 dex                  
 259:000 | DONE ins | na 16 16 | 006103 | ca          |                 dex                  
 260:000 | DONE ins | na 16 16 | 006104 | 94 02       |                 sty.dx 02            
 261:000 | DONE ins | na 16 16 | 006106 | b5 04       |                 lda.dx 04            
 262:000 | DONE ins | na 16 16 | 006108 | 95 00       |                 sta.dx 00            
 263:000 | DONE wsp | na 16 16 |        |             |
 264:000 | DONE lbl | na 16 16 | 00610a |             | z_2dup                               
 264:001 | DONE ins | na 16 16 | 00610a | 60          |                 rts                  
 265:000 | DONE wsp | na 16 16 |        |             |
 266:000 | DONE wsp | na 16 16 |        |             |
 267:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 268:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 12 bytes / X cycles
 269:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 270:000 | DONE lbl | na 16 16 | 00610b |             | a_abs                                
 271:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 272:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 273:000 | DONE ins | na 16 16 | 00610b | 98          |                 tya                  ; force flag test
 274:000 | DONE ins | na 16 16 | 00610c | 10 09       |                 bpl 006117           ; positive number is easy
 275:000 | DONE wsp | na 16 16 |        |             |
 276:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 277:000 | DONE ins | na 16 16 | 00610e | 84 16       |                 sty.d 000216         
 278:000 | DONE ins | na 16 16 | 006110 | a9 00 00    |                 lda.# 0000           
 279:000 | DONE wsp | na 16 16 |        |             |
 280:000 | DONE ins | na 16 16 | 006113 | 38          |                 sec                  
 281:000 | DONE ins | na 16 16 | 006114 | e5 16       |                 sbc.d 000216         
 282:000 | DONE ins | na 16 16 | 006116 | a8          |                 tay                  
 283:000 | DONE wsp | na 16 16 |        |             |
 284:000 | DONE lbl | na 16 16 | 006117 |             | z_abs                                
 284:001 | DONE ins | na 16 16 | 006117 | 60          |                 rts                  
 285:000 | DONE wsp | na 16 16 |        |             |
 286:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 287:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 288:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 289:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 290:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is normally called by REFILL these days.
 291:000 | DONE lbl | na 16 16 | 006118 |             | a_accept                             
 292:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 293:000 | DONE ins | na 16 16 | 006118 | 98          |                 tya                  ; max number of chars to accept is TOS
 294:000 | DONE ins | na 16 16 | 006119 | d0 03       |                 bne 00611e           
 295:000 | DONE wsp | na 16 16 |        |             |
 296:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 297:000 | DONE ins | na 16 16 | 00611b | e8          |                 inx                  ; NIP, TOS is zero which is also FALSE
 298:000 | DONE ins | na 16 16 | 00611c | e8          |                 inx                  
 299:000 | DONE wsp | na 16 16 |        |             |
 300:000 | DONE ins | na 16 16 | 00611d | 60          |                 rts                  
 301:000 | DONE wsp | na 16 16 |        |             |
 302:000 | DONE lbl | na 16 16 | 00611e |             | accept_nonzero                       
 303:000 | DONE ins | na 16 16 | 00611e | b5 00       |                 lda.dx 00            ; address of buffer is NOS
 304:000 | DONE ins | na 16 16 | 006120 | 85 16       |                 sta.d 000216         
 305:000 | DONE ins | na 16 16 | 006122 | e8          |                 inx                  ; NIP
 306:000 | DONE ins | na 16 16 | 006123 | e8          |                 inx                  
 307:000 | DONE wsp | na 16 16 |        |             |
 308:000 | DONE ins | na 16 16 | 006124 | 84 18       |                 sty.d 000218         ; Save max number of chars in tmp2
 309:000 | DONE ins | na 16 16 | 006126 | a0 00 00    |                 ldy.# 0000           ; Use Y as counter
 310:000 | DONE ins | na 16 16 | 006129 | e2 20       |                 sep 20               
 310:001 | DONE ctl | na  8 16 |        |             |         .!a8
 311:000 | DONE wsp | na  8 16 |        |             |
 312:000 | DONE lbl | na  8 16 | 00612b |             | accept_loop                          
 313:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 314:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because vt100 terminal
 315:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 316:000 | DONE ins | na  8 16 | 00612b | 20 41 60    |                 jsr 006041           
 317:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 318:000 | DONE ins | na  8 16 | 00612e | c9 0a       |                 cmp.# AscLF          ; we quit on both line feed and carriage return
 319:000 | DONE ins | na  8 16 | 006130 | f0 44       |                 beq 006176           
 320:000 | DONE ins | na  8 16 | 006132 | c9 0d       |                 cmp.# AscCR          
 321:000 | DONE ins | na  8 16 | 006134 | f0 40       |                 beq 006176           
 322:000 | DONE wsp | na  8 16 |        |             |
 323:000 | DONE ins | na  8 16 | 006136 | c9 08       |                 cmp.# AscBS          ; BS and DEL do the same thing for the moment
 324:000 | DONE ins | na  8 16 | 006138 | f0 44       |                 beq 00617e           
 325:000 | DONE ins | na  8 16 | 00613a | c9 7f       |                 cmp.# AscDEL         
 326:000 | DONE ins | na  8 16 | 00613c | f0 40       |                 beq 00617e           
 327:000 | DONE wsp | na  8 16 |        |             |
 328:000 | DONE ins | na  8 16 | 00613e | c9 03       |                 cmp.# AscCC          ; CTRL-c aborts (see if this is too harsh)
 329:000 | DONE ins | na  8 16 | 006140 | d0 03       |                 bne 006145           
 330:000 | DONE ins | na  8 16 | 006142 | 4c 93 60    |                 jmp 006093           ; ABORT switches back to 16-bit A
 331:000 | DONE lbl | na  8 16 | 006145 |             | @                                    
 332:000 | DONE ins | na  8 16 | 006145 | c9 1b       |                 cmp.# AscESC         ; ESC aborts (in this version)
 333:000 | DONE ins | na  8 16 | 006147 | d0 03       |                 bne 00614c           
 334:000 | DONE ins | na  8 16 | 006149 | 4c 93 60    |                 jmp 006093           ; ABORT switches back to 16-bit A
 335:000 | DONE lbl | na  8 16 | 00614c |             | @                                    
 336:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p, will be used for "previous cmd", TODO
 337:000 | DONE ins | na  8 16 | 00614c | c9 10       |                 cmp.# AscCP          
 338:000 | DONE ins | na  8 16 | 00614e | d0 0c       |                 bne 00615c           
 339:000 | DONE ins | na  8 16 | 006150 | c2 20       |                 rep 20               
 339:001 | DONE ctl | na 16 16 |        |             |         .!a16
 340:000 | DONE ins | na 16 16 | 006152 | a9 8e 68    |                 lda.# 00688e         
 341:000 | DONE ins | na 16 16 | 006155 | 20 71 66    |                 jsr 006671           
 342:000 | DONE ins | na 16 16 | 006158 | e2 20       |                 sep 20               
 342:001 | DONE ctl | na  8 16 |        |             |         .!a8
 343:000 | DONE ins | na  8 16 | 00615a | 80 cf       |                 bra 00612b           
 344:000 | DONE lbl | na  8 16 | 00615c |             | @                                    
 345:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n, will be used for "next cmd", TODO
 346:000 | DONE ins | na  8 16 | 00615c | c9 0e       |                 cmp.# AscCN          
 347:000 | DONE ins | na  8 16 | 00615e | d0 0c       |                 bne 00616c           
 348:000 | DONE ins | na  8 16 | 006160 | c2 20       |                 rep 20               
 348:001 | DONE ctl | na 16 16 |        |             |         .!a16
 349:000 | DONE ins | na 16 16 | 006162 | a9 a1 68    |                 lda.# 0068a1         
 350:000 | DONE ins | na 16 16 | 006165 | 20 71 66    |                 jsr 006671           
 351:000 | DONE ins | na 16 16 | 006168 | e2 20       |                 sep 20               
 351:001 | DONE ctl | na  8 16 |        |             |         .!a8
 352:000 | DONE ins | na  8 16 | 00616a | 80 bf       |                 bra 00612b           
 353:000 | DONE wsp | na  8 16 |        |             |
 354:000 | DONE lbl | na  8 16 | 00616c |             | @                                    
 355:000 | DONE cmt | na  8 16 |        |             |                 ; That's enough, echo character
 356:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
 357:000 | DONE ins | na  8 16 | 00616c | 20 30 60    |                 jsr 006030           ; echo character
 358:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 359:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 360:000 | DONE wsp | na  8 16 |        |             |
 361:000 | DONE ins | na  8 16 | 00616f | 91 0c       |                 sta.diy 00020c       ; STA (CIB),Y
 362:000 | DONE ins | na  8 16 | 006171 | c8          |                 iny                  
 363:000 | DONE ins | na  8 16 | 006172 | c4 18       |                 cpy.d 000218         ; reached character limit?
 364:000 | DONE ins | na  8 16 | 006174 | d0 b5       |                 bne 00612b           ; fall thru if buffer limit reached
 365:000 | DONE wsp | na  8 16 |        |             |
 366:000 | DONE lbl | na  8 16 | 006176 |             | accept_eol                           
 367:000 | DONE ins | na  8 16 | 006176 | 84 0e       |                 sty.d 00020e         ; Y contains number of chars accepted already
 368:000 | DONE ins | na  8 16 | 006178 | c2 20       |                 rep 20               
 368:001 | DONE ctl | na 16 16 |        |             |         .!a16
 369:000 | DONE ins | na 16 16 | 00617a | 20 9b 63    |                 jsr 00639b           ; print final space
 370:000 | DONE ins | na 16 16 | 00617d | 60          |                 rts                  ; this is the actual return of the routine
 371:000 | DONE wsp | na 16 16 |        |             |
 372:000 | DONE lbl | na 16 16 | 00617e |             | accept_bs                            
 373:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 374:000 | DONE ins | na  8 16 | 00617e | c0 00 00    |                 cpy.# 0000           ; buffer empty?
 375:000 | DONE ins | na  8 16 | 006181 | d0 06       |                 bne 006189           
 376:000 | DONE wsp | na  8 16 |        |             |
 377:000 | DONE ins | na  8 16 | 006183 | a9 07       |                 lda.# AscBELL        ; complain and don't delete beyond the start of line
 378:000 | DONE ins | na  8 16 | 006185 | 20 30 60    |                 jsr 006030           
 379:000 | DONE ins | na  8 16 | 006188 | c8          |                 iny                  
 380:000 | DONE lbl | na  8 16 | 006189 |             | @                                    
 381:000 | DONE ins | na  8 16 | 006189 | 88          |                 dey                  
 382:000 | DONE ins | na  8 16 | 00618a | a9 08       |                 lda.# AscBS          ; move back one
 383:000 | DONE ins | na  8 16 | 00618c | 20 30 60    |                 jsr 006030           
 384:000 | DONE ins | na  8 16 | 00618f | a9 20       |                 lda.# AscSP          ; print a space
 385:000 | DONE ins | na  8 16 | 006191 | 20 30 60    |                 jsr 006030           
 386:000 | DONE ins | na  8 16 | 006194 | a9 08       |                 lda.# AscBS          ; move back over space
 387:000 | DONE ins | na  8 16 | 006196 | 20 30 60    |                 jsr 006030           
 388:000 | DONE wsp | na  8 16 |        |             |
 389:000 | DONE ins | na  8 16 | 006199 | 80 90       |                 bra 00612b           
 390:000 | DONE wsp | na  8 16 |        |             |
 391:000 | DONE lbl | na  8 16 | 00619b |             | z_accept                             
 391:001 | DONE ins | na  8 16 | 00619b | 60          |                 rts                  
 392:000 | DONE wsp | na  8 16 |        |             |
 393:000 | DONE wsp | na  8 16 |        |             |
 394:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 395:000 | DONE cmt | na  8 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 396:000 | DONE cmt | na  8 16 |        |             | ; Trigger terminal bell
 397:000 | DONE wsp | na  8 16 |        |             |
 398:000 | DONE lbl | na  8 16 | 00619c |             | a_bell                               
 399:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 400:000 | DONE ins | na 16 16 | 00619c | a9 07 00    |                 lda.# AscBELL        
 401:000 | DONE ins | na 16 16 | 00619f | 20 30 60    |                 jsr 006030           
 402:000 | DONE wsp | na 16 16 |        |             |
 403:000 | DONE lbl | na 16 16 | 0061a2 |             | z_bell                               
 403:001 | DONE ins | na 16 16 | 0061a2 | 60          |                 rts                  
 404:000 | DONE wsp | na 16 16 |        |             |
 405:000 | DONE wsp | na 16 16 |        |             |
 406:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 407:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 408:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 409:000 | DONE wsp | na 16 16 |        |             |
 410:000 | DONE lbl | na 16 16 | 0061a3 |             | a_bl                                 
 411:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 412:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 413:000 | DONE ins | na 16 16 | 0061a3 | ca          |                 dex                  
 414:000 | DONE ins | na 16 16 | 0061a4 | ca          |                 dex                  
 415:000 | DONE ins | na 16 16 | 0061a5 | 94 00       |                 sty.dx 00            
 416:000 | DONE ins | na 16 16 | 0061a7 | a0 20 00    |                 ldy.# AscSP          
 417:000 | DONE wsp | na 16 16 |        |             |
 418:000 | DONE lbl | na 16 16 | 0061aa |             | z_bl                                 
 418:001 | DONE ins | na 16 16 | 0061aa | 60          |                 rts                  
 419:000 | DONE wsp | na 16 16 |        |             |
 420:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 421:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 422:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 423:000 | DONE wsp | na 16 16 |        |             |
 424:000 | DONE lbl | na 16 16 | 0061ab |             | a_bye                                
 424:001 | DONE ins | na 16 16 | 0061ab | 00 00       |                 brk 00               ; status byte 00 required for assembler
 425:000 | DONE lbl | na 16 16 | 0061ad |             | z_bye                                
 425:001 | DONE ins | na 16 16 | 0061ad | 60          |                 rts                  ; dummy for compiling, never reached
 426:000 | DONE wsp | na 16 16 |        |             |
 427:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 428:000 | DONE cmt | na 16 16 |        |             | ; COMMA "," ( n -- ) 11 bytes / 29 cycles
 429:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 430:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 431:000 | DONE cmt | na 16 16 |        |             | ; aligned
 432:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 433:000 | DONE cmt | na 16 16 |        |             | ;               tya
 434:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 435:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 436:000 | DONE cmt | na 16 16 |        |             | ;               iny
 437:000 | DONE cmt | na 16 16 |        |             | ;               iny
 438:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 439:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 440:000 | DONE cmt | na 16 16 |        |             | ;               inx
 441:000 | DONE cmt | na 16 16 |        |             | ;               inx
 442:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 443:000 | DONE wsp | na 16 16 |        |             |
 444:000 | DONE lbl | na 16 16 | 0061ae |             | a_comma                              
 444:001 | DONE ins | na 16 16 | 0061ae | 98          |                 tya                  
 445:000 | DONE ins | na 16 16 | 0061af | 92 00       |                 sta.di 000200        ; STA (CP)
 446:000 | DONE ins | na 16 16 | 0061b1 | e6 00       |                 inc.d 000200         
 447:000 | DONE ins | na 16 16 | 0061b3 | e6 00       |                 inc.d 000200         
 448:000 | DONE wsp | na 16 16 |        |             |
 449:000 | DONE ins | na 16 16 | 0061b5 | b4 00       |                 ldy.dx 00            
 450:000 | DONE ins | na 16 16 | 0061b7 | e8          |                 inx                  
 451:000 | DONE ins | na 16 16 | 0061b8 | e8          |                 inx                  
 452:000 | DONE wsp | na 16 16 |        |             |
 453:000 | DONE lbl | na 16 16 | 0061b9 |             | z_comma                              
 453:001 | DONE ins | na 16 16 | 0061b9 | 60          |                 rts                  
 454:000 | DONE wsp | na 16 16 |        |             |
 455:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 456:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 457:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 458:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 459:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 460:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 461:000 | DONE wsp | na 16 16 |        |             |
 462:000 | DONE lbl | na 16 16 | 0061ba |             | a_count                              
 463:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 464:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 465:000 | DONE ins | na 16 16 | 0061ba | 98          |                 tya                  
 466:000 | DONE ins | na 16 16 | 0061bb | 1a          |                 inc.a                ; String address starts one char later
 467:000 | DONE ins | na 16 16 | 0061bc | ca          |                 dex                  
 468:000 | DONE ins | na 16 16 | 0061bd | ca          |                 dex                  
 469:000 | DONE ins | na 16 16 | 0061be | 95 00       |                 sta.dx 00            ; NOS
 470:000 | DONE wsp | na 16 16 |        |             |
 471:000 | DONE ins | na 16 16 | 0061c0 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y  first byte is length
 472:000 | DONE ins | na 16 16 | 0061c3 | eb          |                 xba                  ; move length to LSB
 473:000 | DONE ins | na 16 16 | 0061c4 | 29 ff 00    |                 and.# 00ff           ; get rid of whatever was MSB
 474:000 | DONE ins | na 16 16 | 0061c7 | a8          |                 tay                  ; TOS
 475:000 | DONE wsp | na 16 16 |        |             |
 476:000 | DONE lbl | na 16 16 | 0061c8 |             | z_count                              
 476:001 | DONE ins | na 16 16 | 0061c8 | 60          |                 rts                  
 477:000 | DONE wsp | na 16 16 |        |             |
 478:000 | DONE wsp | na 16 16 |        |             |
 479:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 480:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 481:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 482:000 | DONE wsp | na 16 16 |        |             |
 483:000 | DONE lbl | na 16 16 | 0061c9 |             | a_cr                                 
 484:000 | DONE ins | na 16 16 | 0061c9 | a9 0a 00    |                 lda.# AscLF          ; test with AscCR for emulators
 485:000 | DONE ins | na 16 16 | 0061cc | 20 30 60    |                 jsr 006030           
 486:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 487:000 | DONE wsp | na 16 16 |        |             |
 488:000 | DONE lbl | na 16 16 | 0061cf |             | z_cr                                 
 488:001 | DONE ins | na 16 16 | 0061cf | 60          |                 rts                  
 489:000 | DONE wsp | na 16 16 |        |             |
 490:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 491:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
 492:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
 493:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
 494:000 | DONE lbl | na 16 16 | 0061d0 |             | a_depth                              
 495:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 496:000 | DONE cmt | na 16 16 |        |             | 		; We've got zero entries when X is dsp0
 497:000 | DONE ins | na 16 16 | 0061d0 | 86 04       |                 stx.d 000204         
 498:000 | DONE ins | na 16 16 | 0061d2 | a9 f0 02    |                 lda.# 0002f0         
 499:000 | DONE ins | na 16 16 | 0061d5 | 38          |                 sec                  
 500:000 | DONE ins | na 16 16 | 0061d6 | e5 04       |                 sbc.d 000204         
 501:000 | DONE wsp | na 16 16 |        |             |
 502:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
 503:000 | DONE ins | na 16 16 | 0061d8 | 4a          |                 lsr.a                
 504:000 | DONE wsp | na 16 16 |        |             |
 505:000 | DONE ins | na 16 16 | 0061d9 | ca          |                 dex                  
 506:000 | DONE ins | na 16 16 | 0061da | ca          |                 dex                  
 507:000 | DONE ins | na 16 16 | 0061db | 94 00       |                 sty.dx 00            
 508:000 | DONE wsp | na 16 16 |        |             |
 509:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
 510:000 | DONE ins | na 16 16 | 0061dd | a8          |                 tay                  
 511:000 | DONE wsp | na 16 16 |        |             |
 512:000 | DONE lbl | na 16 16 | 0061de |             | z_depth                              
 512:001 | DONE ins | na 16 16 | 0061de | 60          |                 rts                  
 513:000 | DONE wsp | na 16 16 |        |             |
 514:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 515:000 | DONE cmt | na 16 16 |        |             | ; DOT ( n -- ) X bytes / X cycles
 516:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
 517:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
 518:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 519:000 | DONE cmt | na 16 16 |        |             | ; focus on size
 520:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
 521:000 | DONE lbl | na 16 16 | 0061df |             | a_dot                                
 522:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 523:000 | DONE ins | na 16 16 | 0061df | 98          |                 tya                  
 524:000 | DONE ins | na 16 16 | 0061e0 | 29 00 ff    |                 and.# 0ff00          
 525:000 | DONE ins | na 16 16 | 0061e3 | eb          |                 xba                  
 526:000 | DONE ins | na 16 16 | 0061e4 | 20 89 66    |                 jsr 006689           
 527:000 | DONE ins | na 16 16 | 0061e7 | 98          |                 tya                  
 528:000 | DONE ins | na 16 16 | 0061e8 | 29 ff 00    |                 and.# 00ff           
 529:000 | DONE ins | na 16 16 | 0061eb | 20 89 66    |                 jsr 006689           
 530:000 | DONE ins | na 16 16 | 0061ee | 20 9b 63    |                 jsr 00639b           
 531:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 532:000 | DONE wsp | na 16 16 |        |             |
 533:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
 534:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
 535:000 | DONE ins | na 16 16 | 0061f1 | 20 3d 62    |                 jsr 00623d           
 536:000 | DONE wsp | na 16 16 |        |             |
 537:000 | DONE lbl | na 16 16 | 0061f4 |             | z_dot                                
 537:001 | DONE ins | na 16 16 | 0061f4 | 60          |                 rts                  
 538:000 | DONE wsp | na 16 16 |        |             |
 539:000 | DONE wsp | na 16 16 |        |             |
 540:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 541:000 | DONE cmt | na 16 16 |        |             | ; DOTS ".S" ( -- ) X bytes / X cycles
 542:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 543:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 544:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 545:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 546:000 | DONE lbl | na 16 16 | 0061f5 |             | a_dots                               
 547:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 548:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 549:000 | DONE ins | na 16 16 | 0061f5 | 20 d0 61    |                 jsr 0061d0           ; ( -- u)
 550:000 | DONE wsp | na 16 16 |        |             |
 551:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 552:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 553:000 | DONE ins | na 16 16 | 0061f8 | a9 3c 00    |                 lda.# 3c             
 554:000 | DONE ins | na 16 16 | 0061fb | 20 30 60    |                 jsr 006030           
 555:000 | DONE wsp | na 16 16 |        |             |
 556:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 557:000 | DONE ins | na 16 16 | 0061fe | 98          |                 tya                  
 558:000 | DONE ins | na 16 16 | 0061ff | 29 00 ff    |                 and.# 0ff00          
 559:000 | DONE ins | na 16 16 | 006202 | eb          |                 xba                  
 560:000 | DONE ins | na 16 16 | 006203 | 20 89 66    |                 jsr 006689           
 561:000 | DONE ins | na 16 16 | 006206 | 98          |                 tya                  
 562:000 | DONE ins | na 16 16 | 006207 | 29 ff 00    |                 and.# 00ff           
 563:000 | DONE ins | na 16 16 | 00620a | 20 89 66    |                 jsr 006689           
 564:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 565:000 | DONE wsp | na 16 16 |        |             |
 566:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 567:000 | DONE ins | na 16 16 | 00620d | a9 3e 00    |                 lda.# 3e             
 568:000 | DONE ins | na 16 16 | 006210 | 20 30 60    |                 jsr 006030           
 569:000 | DONE ins | na 16 16 | 006213 | 20 9b 63    |                 jsr 00639b           
 570:000 | DONE wsp | na 16 16 |        |             |
 571:000 | DONE wsp | na 16 16 |        |             |
 572:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 573:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 574:000 | DONE ins | na 16 16 | 006216 | 98          |                 tya                  ; force flag test
 575:000 | DONE ins | na 16 16 | 006217 | f0 20       |                 beq 006239           
 576:000 | DONE wsp | na 16 16 |        |             |
 577:000 | DONE lbl | na 16 16 | 006219 |             | dots_not_empty                       
 578:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 579:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 580:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 581:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 582:000 | DONE wsp | na 16 16 |        |             |
 583:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 584:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 585:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 586:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 587:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
 588:000 | DONE ins | na 16 16 | 006219 | da          |                 phx                  
 589:000 | DONE wsp | na 16 16 |        |             |
 590:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 591:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
 592:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
 593:000 | DONE ins | na 16 16 | 00621a | a2 f0 02    |                 ldx.# 0002f0         ; points to dsp0, which is garbage
 594:000 | DONE ins | na 16 16 | 00621d | ca          |                 dex                  
 595:000 | DONE ins | na 16 16 | 00621e | ca          |                 dex                  ; points to dsp0-2, which is more garbage
 596:000 | DONE wsp | na 16 16 |        |             |
 597:000 | DONE lbl | na 16 16 | 00621f |             | dots_loop                            
 598:000 | DONE ins | na 16 16 | 00621f | ca          |                 dex                  ; get next element on DS, initially dsp0-4
 599:000 | DONE ins | na 16 16 | 006220 | ca          |                 dex                  
 600:000 | DONE wsp | na 16 16 |        |             |
 601:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 602:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 603:000 | DONE ins | na 16 16 | 006221 | b5 00       |                 lda.dx 00            
 604:000 | DONE ins | na 16 16 | 006223 | 29 00 ff    |                 and.# 0ff00          
 605:000 | DONE ins | na 16 16 | 006226 | eb          |                 xba                  
 606:000 | DONE ins | na 16 16 | 006227 | 20 89 66    |                 jsr 006689           
 607:000 | DONE ins | na 16 16 | 00622a | b5 00       |                 lda.dx 00            
 608:000 | DONE ins | na 16 16 | 00622c | 29 ff 00    |                 and.# 00ff           
 609:000 | DONE ins | na 16 16 | 00622f | 20 89 66    |                 jsr 006689           
 610:000 | DONE ins | na 16 16 | 006232 | 20 9b 63    |                 jsr 00639b           
 611:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 612:000 | DONE wsp | na 16 16 |        |             |
 613:000 | DONE ins | na 16 16 | 006235 | 88          |                 dey                  
 614:000 | DONE ins | na 16 16 | 006236 | d0 e7       |                 bne 00621f           
 615:000 | DONE wsp | na 16 16 |        |             |
 616:000 | DONE ins | na 16 16 | 006238 | fa          |                 plx                  ; restore original DSP
 617:000 | DONE wsp | na 16 16 |        |             |
 618:000 | DONE lbl | na 16 16 | 006239 |             | dots_done                            
 619:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 620:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 621:000 | DONE ins | na 16 16 | 006239 | 20 3d 62    |                 jsr 00623d           
 622:000 | DONE wsp | na 16 16 |        |             |
 623:000 | DONE lbl | na 16 16 | 00623c |             | z_dots                               
 623:001 | DONE ins | na 16 16 | 00623c | 60          |                 rts                  
 624:000 | DONE wsp | na 16 16 |        |             |
 625:000 | DONE wsp | na 16 16 |        |             |
 626:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 627:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
 628:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
 629:000 | DONE wsp | na 16 16 |        |             |
 630:000 | DONE lbl | na 16 16 | 00623d |             | a_drop                               
 631:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 632:000 | DONE ins | na 16 16 | 00623d | b4 00       |                 ldy.dx 00            
 633:000 | DONE ins | na 16 16 | 00623f | e8          |                 inx                  
 634:000 | DONE ins | na 16 16 | 006240 | e8          |                 inx                  
 635:000 | DONE wsp | na 16 16 |        |             |
 636:000 | DONE lbl | na 16 16 | 006241 |             | z_drop                               
 636:001 | DONE ins | na 16 16 | 006241 | 60          |                 rts                  
 637:000 | DONE wsp | na 16 16 |        |             |
 638:000 | DONE wsp | na 16 16 |        |             |
 639:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 640:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
 641:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
 642:000 | DONE wsp | na 16 16 |        |             |
 643:000 | DONE lbl | na 16 16 | 006242 |             | a_dup                                
 644:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 645:000 | DONE ins | na 16 16 | 006242 | ca          |                 dex                  
 646:000 | DONE ins | na 16 16 | 006243 | ca          |                 dex                  
 647:000 | DONE ins | na 16 16 | 006244 | 94 00       |                 sty.dx 00            
 648:000 | DONE wsp | na 16 16 |        |             |
 649:000 | DONE lbl | na 16 16 | 006246 |             | z_dup                                
 649:001 | DONE ins | na 16 16 | 006246 | 60          |                 rts                  
 650:000 | DONE wsp | na 16 16 |        |             |
 651:000 | DONE wsp | na 16 16 |        |             |
 652:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 653:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
 654:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
 655:000 | DONE wsp | na 16 16 |        |             |
 656:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
 657:000 | DONE cmt | na 16 16 |        |             | ; range
 658:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
 659:000 | DONE lbl | na 16 16 | 006247 |             | execute_ip                           
 659:001 | DONE dir | na 16 16 | 006247 | (3 bytes)   |         .byte 00, 00, 00             
 659:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
 660:000 | DONE wsp | na 16 16 |        |             |
 661:000 | DONE lbl | na 16 16 | 00624a |             | a_execute                            
 662:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 663:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
 664:000 | DONE ins | na 16 16 | 00624a | 8c 47 62    |                 sty 006247           
 665:000 | DONE ins | na 16 16 | 00624d | b4 00       |                 ldy.dx 00            
 666:000 | DONE ins | na 16 16 | 00624f | e8          |                 inx                  
 667:000 | DONE ins | na 16 16 | 006250 | e8          |                 inx                  
 668:000 | DONE wsp | na 16 16 |        |             |
 669:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need, and all the
 670:000 | DONE cmt | na 16 16 |        |             |                 ; Forth commands end with a RTS instruction. We fake the address
 671:000 | DONE cmt | na 16 16 |        |             |                 ; by saving it by hand to the stack
 672:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 673:000 | DONE ins | na 16 16 | 006251 | a9 58 62    |                 lda.# 006258         
 674:000 | DONE ins | na 16 16 | 006254 | 48          |                 pha                  
 675:000 | DONE ins | na 16 16 | 006255 | 6c 47 62    |                 jmp.i 006247         ; JMP (EXECUTE_IP)
 676:000 | DONE wsp | na 16 16 |        |             |
 677:000 | DONE lbl | na 16 16 | 006258 |             | execute_done                         ; keep the NOP here as the landing site for the indirect
 678:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine jump (easier and quicker than adjusting the
 679:000 | DONE cmt | na 16 16 |        |             |                 ; return address on the stack)
 680:000 | DONE ins | na 16 16 | 006258 | ea          |                 nop                  
 681:000 | DONE wsp | na 16 16 |        |             |
 682:000 | DONE lbl | na 16 16 | 006259 |             | z_execute                            
 682:001 | DONE ins | na 16 16 | 006259 | 60          |                 rts                  
 683:000 | DONE wsp | na 16 16 |        |             |
 684:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 685:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
 686:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
 687:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have a_zero/z_zero instead of
 688:000 | DONE cmt | na 16 16 |        |             | ; a_false/z_false
 689:000 | DONE wsp | na 16 16 |        |             |
 690:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 691:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
 692:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
 693:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
 694:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
 695:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
 696:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
 697:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
 698:000 | DONE lbl | na 16 16 | 00625a |             | a_find-name                          
 699:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
 700:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
 701:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
 702:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
 703:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
 704:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
 705:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
 706:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
 707:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 708:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 709:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
 710:000 | DONE ins | na 16 16 | 00625a | 84 06       |                 sty.d 000206         ; length of mystery string in tmptos, Y now free
 711:000 | DONE wsp | na 16 16 |        |             |
 712:000 | DONE ins | na 16 16 | 00625c | a4 02       |                 ldy.d 000202         
 713:000 | DONE ins | na 16 16 | 00625e | 84 16       |                 sty.d 000216         ; nt of first Dictionary word
 714:000 | DONE wsp | na 16 16 |        |             |
 715:000 | DONE ins | na 16 16 | 006260 | b4 00       |                 ldy.dx 00            
 716:000 | DONE ins | na 16 16 | 006262 | 84 18       |                 sty.d 000218         ; address of mystery string, was NOS
 717:000 | DONE wsp | na 16 16 |        |             |
 718:000 | DONE lbl | na 16 16 | 006264 |             | find-name_loop                       
 719:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
 720:000 | DONE ins | na 16 16 | 006264 | b2 16       |                 lda.di 000216        ; LSB in first header word is length
 721:000 | DONE ins | na 16 16 | 006266 | 29 ff 00    |                 and.# 00ff           
 722:000 | DONE ins | na 16 16 | 006269 | c5 06       |                 cmp.d 000206         ; we test LSB
 723:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
 724:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
 725:000 | DONE cmt | na 16 16 |        |             |                 ; same
 726:000 | DONE ins | na 16 16 | 00626b | f0 0c       |                 beq 006279           
 727:000 | DONE wsp | na 16 16 |        |             |
 728:000 | DONE lbl | na 16 16 | 00626d |             | find-name_next_entry                 
 729:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
 730:000 | DONE ins | na 16 16 | 00626d | e6 16       |                 inc.d 000216         
 731:000 | DONE ins | na 16 16 | 00626f | e6 16       |                 inc.d 000216         
 732:000 | DONE ins | na 16 16 | 006271 | b2 16       |                 lda.di 000216        ; LDA (TMP1)
 733:000 | DONE wsp | na 16 16 |        |             |
 734:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
 735:000 | DONE ins | na 16 16 | 006273 | f0 36       |                 beq 0062ab           
 736:000 | DONE wsp | na 16 16 |        |             |
 737:000 | DONE ins | na 16 16 | 006275 | 85 16       |                 sta.d 000216         ; new header
 738:000 | DONE ins | na 16 16 | 006277 | 80 eb       |                 bra 006264           
 739:000 | DONE wsp | na 16 16 |        |             |
 740:000 | DONE lbl | na 16 16 | 006279 |             | find-name_chars                      
 741:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
 742:000 | DONE wsp | na 16 16 |        |             |
 743:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
 744:000 | DONE ins | na 16 16 | 006279 | e2 20       |                 sep 20               
 744:001 | DONE ctl | na  8 16 |        |             |         .!a8
 745:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
 746:000 | DONE cmt | na  8 16 |        |             |                 ; header
 747:000 | DONE ins | na  8 16 | 00627b | a0 08 00    |                 ldy.# 0008           
 748:000 | DONE ins | na  8 16 | 00627e | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y - first char of entry
 749:000 | DONE ins | na  8 16 | 006280 | d2 18       |                 cmp.di 000218        ; CMP (TMP2) - first char of mystery string
 750:000 | DONE ins | na  8 16 | 006282 | f0 04       |                 beq 006288           
 751:000 | DONE wsp | na  8 16 |        |             |
 752:000 | DONE lbl | na  8 16 | 006284 |             | find-name_char_nomatch_8             
 753:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
 754:000 | DONE ins | na  8 16 | 006284 | c2 20       |                 rep 20               
 754:001 | DONE ctl | na 16 16 |        |             |         .!a16
 755:000 | DONE ins | na 16 16 | 006286 | 80 e5       |                 bra 00626d           
 756:000 | DONE wsp | na 16 16 |        |             |
 757:000 | DONE lbl | na 16 16 | 006288 |             | find-name_all_chars                  
 758:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 759:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
 760:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
 761:000 | DONE ins | na  8 16 | 006288 | a4 06       |                 ldy.d 000206         
 762:000 | DONE ins | na  8 16 | 00628a | 88          |                 dey                  ; faster and shorter than CPY.# 01
 763:000 | DONE ins | na  8 16 | 00628b | f0 18       |                 beq 0062a5           
 764:000 | DONE wsp | na  8 16 |        |             |
 765:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
 766:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
 767:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
 768:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
 769:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
 770:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
 771:000 | DONE wsp | na  8 16 |        |             |
 772:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
 773:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
 774:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
 775:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
 776:000 | DONE ins | na  8 16 | 00628d | c2 20       |                 rep 20               
 776:001 | DONE ctl | na 16 16 |        |             |         .!a16
 777:000 | DONE ins | na 16 16 | 00628f | a5 16       |                 lda.d 000216         ; address of Dictionary string
 778:000 | DONE ins | na 16 16 | 006291 | 18          |                 clc                  
 779:000 | DONE ins | na 16 16 | 006292 | 69 08 00    |                 adc.# 0008           
 780:000 | DONE ins | na 16 16 | 006295 | 85 1a       |                 sta.d 00021a         
 781:000 | DONE ins | na 16 16 | 006297 | e2 20       |                 sep 20               
 781:001 | DONE ctl | na  8 16 |        |             |         .!a8
 782:000 | DONE ins | na  8 16 | 006299 | a4 06       |                 ldy.d 000206         ; get length of strings as loop index
 783:000 | DONE ins | na  8 16 | 00629b | 88          |                 dey                  ; first index is length minus 1
 784:000 | DONE wsp | na  8 16 |        |             |
 785:000 | DONE lbl | na  8 16 | 00629c |             | @                                    
 786:000 | DONE ins | na  8 16 | 00629c | b1 18       |                 lda.diy 000218       ; LDA (TMP2),Y - last char of mystery string
 787:000 | DONE ins | na  8 16 | 00629e | d1 1a       |                 cmp.diy 00021a       ; CMP (TMP1),Y - last char of DP string
 788:000 | DONE ins | na  8 16 | 0062a0 | d0 e2       |                 bne 006284           
 789:000 | DONE ins | na  8 16 | 0062a2 | 88          |                 dey                  ; start of string (Y=0) was already tested
 790:000 | DONE ins | na  8 16 | 0062a3 | d0 f7       |                 bne 00629c           
 791:000 | DONE wsp | na  8 16 |        |             |
 792:000 | DONE lbl | na  8 16 | 0062a5 |             | find-name_success                    
 793:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
 794:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
 795:000 | DONE ins | na  8 16 | 0062a5 | c2 20       |                 rep 20               
 795:001 | DONE ctl | na 16 16 |        |             |         .!a16
 796:000 | DONE ins | na 16 16 | 0062a7 | a4 16       |                 ldy.d 000216         ; get the correct DP
 797:000 | DONE ins | na 16 16 | 0062a9 | 80 03       |                 bra 0062ae           
 798:000 | DONE wsp | na 16 16 |        |             |
 799:000 | DONE wsp | na 16 16 |        |             |
 800:000 | DONE lbl | na 16 16 | 0062ab |             | find-name_failure_16                 
 801:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
 802:000 | DONE cmt | na 16 16 |        |             |                 ; bit
 803:000 | DONE ins | na 16 16 | 0062ab | a0 00 00    |                 ldy.# 0000           ; fall thru
 804:000 | DONE wsp | na 16 16 |        |             |
 805:000 | DONE lbl | na 16 16 | 0062ae |             | find-name_done                       
 806:000 | DONE ins | na 16 16 | 0062ae | e8          |                 inx                  ; drop old address (NIP)
 807:000 | DONE ins | na 16 16 | 0062af | e8          |                 inx                  
 808:000 | DONE wsp | na 16 16 |        |             |
 809:000 | DONE lbl | na 16 16 | 0062b0 |             | z_find-name                          
 809:001 | DONE ins | na 16 16 | 0062b0 | 60          |                 rts                  
 810:000 | DONE wsp | na 16 16 |        |             |
 811:000 | DONE wsp | na 16 16 |        |             |
 812:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 813:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
 814:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
 815:000 | DONE lbl | na 16 16 | 0062b1 |             | a_here                               
 816:000 | DONE dir | na 16 16 |        |             |         .!a16                        ; paranoid
 817:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 818:000 | DONE ins | na 16 16 | 0062b1 | ca          |                 dex                  
 819:000 | DONE ins | na 16 16 | 0062b2 | ca          |                 dex                  
 820:000 | DONE ins | na 16 16 | 0062b3 | 94 00       |                 sty.dx 00            
 821:000 | DONE wsp | na 16 16 |        |             |
 822:000 | DONE ins | na 16 16 | 0062b5 | a4 00       |                 ldy.d 000200         
 823:000 | DONE wsp | na 16 16 |        |             |
 824:000 | DONE lbl | na 16 16 | 0062b7 |             | z_here                               
 824:001 | DONE ins | na 16 16 | 0062b7 | 60          |                 rts                  
 825:000 | DONE wsp | na 16 16 |        |             |
 826:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 827:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
 828:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
 829:000 | DONE lbl | na 16 16 | 0062b8 |             | a_name>int                           
 830:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 831:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 832:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
 833:000 | DONE ins | na 16 16 | 0062b8 | c8          |                 iny                  
 834:000 | DONE ins | na 16 16 | 0062b9 | c8          |                 iny                  
 835:000 | DONE ins | na 16 16 | 0062ba | c8          |                 iny                  
 836:000 | DONE ins | na 16 16 | 0062bb | c8          |                 iny                  
 837:000 | DONE ins | na 16 16 | 0062bc | b9 00 00    |                 lda.y 0000           
 838:000 | DONE ins | na 16 16 | 0062bf | a8          |                 tay                  
 839:000 | DONE wsp | na 16 16 |        |             |
 840:000 | DONE lbl | na 16 16 | 0062c0 |             | z_name>int                           
 840:001 | DONE ins | na 16 16 | 0062c0 | 60          |                 rts                  
 841:000 | DONE wsp | na 16 16 |        |             |
 842:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 843:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
 844:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
 845:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
 846:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
 847:000 | DONE lbl | na 16 16 | 0062c1 |             | a_name>string                        
 848:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 849:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 850:000 | DONE ins | na 16 16 | 0062c1 | ca          |                 dex                  ; move NOS down one
 851:000 | DONE ins | na 16 16 | 0062c2 | ca          |                 dex                  
 852:000 | DONE wsp | na 16 16 |        |             |
 853:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
 854:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
 855:000 | DONE ins | na 16 16 | 0062c3 | 98          |                 tya                  
 856:000 | DONE ins | na 16 16 | 0062c4 | 18          |                 clc                  
 857:000 | DONE ins | na 16 16 | 0062c5 | 69 08 00    |                 adc.# 0008           
 858:000 | DONE ins | na 16 16 | 0062c8 | 95 00       |                 sta.dx 00            ; NOS
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
 861:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
 862:000 | DONE ins | na 16 16 | 0062ca | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
 863:000 | DONE ins | na 16 16 | 0062cd | 29 ff 00    |                 and.# 00ff           ; mask all but length byte
 864:000 | DONE ins | na 16 16 | 0062d0 | a8          |                 tay                  
 865:000 | DONE wsp | na 16 16 |        |             |
 866:000 | DONE lbl | na 16 16 | 0062d1 |             | z_name>string                        
 866:001 | DONE ins | na 16 16 | 0062d1 | 60          |                 rts                  
 867:000 | DONE wsp | na 16 16 |        |             |
 868:000 | DONE wsp | na 16 16 |        |             |
 869:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 870:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
 871:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
 872:000 | DONE lbl | na 16 16 | 0062d2 |             | a_nip                                
 873:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 874:000 | DONE ins | na 16 16 | 0062d2 | e8          |                 inx                  
 875:000 | DONE ins | na 16 16 | 0062d3 | e8          |                 inx                  
 876:000 | DONE lbl | na 16 16 | 0062d4 |             | z_nip                                
 876:001 | DONE ins | na 16 16 | 0062d4 | 60          |                 rts                  
 877:000 | DONE wsp | na 16 16 |        |             |
 878:000 | DONE wsp | na 16 16 |        |             |
 879:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 880:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
 881:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
 882:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
 883:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
 884:000 | DONE lbl | na 16 16 | 0062d5 |             | a_page                               
 885:000 | DONE ins | na 16 16 | 0062d5 | a9 85 68    |                 lda.# 006885         
 886:000 | DONE ins | na 16 16 | 0062d8 | 20 71 66    |                 jsr 006671           
 887:000 | DONE wsp | na 16 16 |        |             |
 888:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
 889:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
 890:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
 891:000 | DONE ins | na 16 16 | 0062db | a9 8a 68    |                 lda.# 00688a         
 892:000 | DONE ins | na 16 16 | 0062de | 20 71 66    |                 jsr 006671           
 893:000 | DONE wsp | na 16 16 |        |             |
 894:000 | DONE lbl | na 16 16 | 0062e1 |             | z_page                               
 894:001 | DONE ins | na 16 16 | 0062e1 | 60          |                 rts                  
 895:000 | DONE wsp | na 16 16 |        |             |
 896:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 897:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
 898:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
 899:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
 900:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
 901:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
 902:000 | DONE lbl | na 16 16 | 0062e2 |             | a_parse-name                         
 903:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 904:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 905:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
 906:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
 907:000 | DONE ins | na 16 16 | 0062e2 | 5a          |                 phy                  ; save TOS for later use
 908:000 | DONE ins | na 16 16 | 0062e3 | a4 12       |                 ldy.d 000212         ; >IN
 909:000 | DONE ins | na 16 16 | 0062e5 | e2 20       |                 sep 20               
 909:001 | DONE ctl | na  8 16 |        |             |         .!a8
 910:000 | DONE lbl | na  8 16 | 0062e7 |             | parse-name_loop                      
 911:000 | DONE ins | na  8 16 | 0062e7 | c4 0e       |                 cpy.d 00020e         ; end of line?
 912:000 | DONE ins | na  8 16 | 0062e9 | f0 09       |                 beq 0062f4           
 913:000 | DONE wsp | na  8 16 |        |             |
 914:000 | DONE ins | na  8 16 | 0062eb | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
 915:000 | DONE ins | na  8 16 | 0062ed | c9 20       |                 cmp.# AscSP          
 916:000 | DONE ins | na  8 16 | 0062ef | d0 17       |                 bne 006308           
 917:000 | DONE ins | na  8 16 | 0062f1 | c8          |                 iny                  
 918:000 | DONE ins | na  8 16 | 0062f2 | 80 f3       |                 bra 0062e7           
 919:000 | DONE wsp | na  8 16 |        |             |
 920:000 | DONE lbl | na  8 16 | 0062f4 |             | parse-name_empty_line                
 921:000 | DONE ins | na  8 16 | 0062f4 | c2 20       |                 rep 20               
 921:001 | DONE ctl | na 16 16 |        |             |         .!a16
 922:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
 923:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
 924:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
 925:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
 926:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
 927:000 | DONE ins | na 16 16 | 0062f6 | ca          |                 dex                  
 928:000 | DONE ins | na 16 16 | 0062f7 | ca          |                 dex                  
 929:000 | DONE ins | na 16 16 | 0062f8 | ca          |                 dex                  
 930:000 | DONE ins | na 16 16 | 0062f9 | ca          |                 dex                  
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE ins | na 16 16 | 0062fa | 7a          |                 ply                  ; restore old TOS as 3OS
 933:000 | DONE ins | na 16 16 | 0062fb | 94 02       |                 sty.dx 02            
 934:000 | DONE wsp | na 16 16 |        |             |
 935:000 | DONE ins | na 16 16 | 0062fd | a5 0c       |                 lda.d 00020c         
 936:000 | DONE ins | na 16 16 | 0062ff | 18          |                 clc                  
 937:000 | DONE ins | na 16 16 | 006300 | 65 0e       |                 adc.d 00020e         
 938:000 | DONE ins | na 16 16 | 006302 | 95 00       |                 sta.dx 00            ; Address as NOS
 939:000 | DONE wsp | na 16 16 |        |             |
 940:000 | DONE ins | na 16 16 | 006304 | a0 00 00    |                 ldy.# 0000           ; TOS
 941:000 | DONE wsp | na 16 16 |        |             |
 942:000 | DONE ins | na 16 16 | 006307 | 60          |                 rts                  ; don't have to go through PARSE
 943:000 | DONE wsp | na 16 16 |        |             |
 944:000 | DONE lbl | na 16 16 | 006308 |             | parse-name_found                     
 945:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 946:000 | DONE ins | na 16 16 | 006308 | c2 20       |                 rep 20               
 946:001 | DONE ctl | na 16 16 |        |             |         .!a16
 947:000 | DONE ins | na 16 16 | 00630a | 84 12       |                 sty.d 000212         ; new >IN
 948:000 | DONE wsp | na 16 16 |        |             |
 949:000 | DONE ins | na 16 16 | 00630c | 7a          |                 ply                  ; recover TOS
 950:000 | DONE ins | na 16 16 | 00630d | ca          |                 dex                  
 951:000 | DONE ins | na 16 16 | 00630e | ca          |                 dex                  
 952:000 | DONE ins | na 16 16 | 00630f | 94 00       |                 sty.dx 00            
 953:000 | DONE wsp | na 16 16 |        |             |
 954:000 | DONE ins | na 16 16 | 006311 | a0 20 00    |                 ldy.# AscSP          ; put space on TOS for PARSE
 955:000 | DONE wsp | na 16 16 |        |             |
 956:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
 957:000 | DONE wsp | na 16 16 |        |             |
 958:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 959:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
 960:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
 961:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
 962:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
 963:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
 964:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
 965:000 | DONE cmt | na 16 16 |        |             | ;
 966:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
 967:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
 968:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
 969:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
 970:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
 971:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
 972:000 | DONE cmt | na 16 16 |        |             | ;
 973:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
 974:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
 975:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
 976:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
 977:000 | DONE lbl | na 16 16 | 006314 |             | a_parse                              
 978:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 979:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 980:000 | DONE ins | na 16 16 | 006314 | 84 16       |                 sty.d 000216         ; save delimiter, char is LSB
 981:000 | DONE wsp | na 16 16 |        |             |
 982:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
 983:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
 984:000 | DONE cmt | na 16 16 |        |             |                 ; return
 985:000 | DONE ins | na 16 16 | 006316 | a5 12       |                 lda.d 000212         
 986:000 | DONE ins | na 16 16 | 006318 | 85 1a       |                 sta.d 00021a         ; save >IN for later length calculation
 987:000 | DONE ins | na 16 16 | 00631a | 18          |                 clc                  
 988:000 | DONE ins | na 16 16 | 00631b | 65 0c       |                 adc.d 00020c         
 989:000 | DONE wsp | na 16 16 |        |             |
 990:000 | DONE ins | na 16 16 | 00631d | ca          |                 dex                  ; save addr as NOS
 991:000 | DONE ins | na 16 16 | 00631e | ca          |                 dex                  
 992:000 | DONE ins | na 16 16 | 00631f | 95 00       |                 sta.dx 00            
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE ins | na 16 16 | 006321 | 64 18       |                 stz.d 000218         ; offset for EOL/char found adjustment of >IN
 995:000 | DONE wsp | na 16 16 |        |             |
 996:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
 997:000 | DONE ins | na 16 16 | 006323 | a4 12       |                 ldy.d 000212         
 998:000 | DONE ins | na 16 16 | 006325 | e2 20       |                 sep 20               
 998:001 | DONE ctl | na  8 16 |        |             |         .!a8
 999:000 | DONE wsp | na  8 16 |        |             |
1000:000 | DONE lbl | na  8 16 | 006327 |             | parse_loop                           
1001:000 | DONE ins | na  8 16 | 006327 | c4 0e       |                 cpy.d 00020e         ; check for EOL first
1002:000 | DONE ins | na  8 16 | 006329 | f0 0d       |                 beq 006338           
1003:000 | DONE wsp | na  8 16 |        |             |
1004:000 | DONE ins | na  8 16 | 00632b | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1005:000 | DONE ins | na  8 16 | 00632d | c5 16       |                 cmp.d 000216         ; found delimiter?
1006:000 | DONE ins | na  8 16 | 00632f | f0 03       |                 beq 006334           
1007:000 | DONE ins | na  8 16 | 006331 | c8          |                 iny                  
1008:000 | DONE ins | na  8 16 | 006332 | 80 f3       |                 bra 006327           
1009:000 | DONE wsp | na  8 16 |        |             |
1010:000 | DONE lbl | na  8 16 | 006334 |             | parse_found_delimiter                
1011:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
1012:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
1013:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
1014:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
1015:000 | DONE ins | na  8 16 | 006334 | c2 20       |                 rep 20               
1015:001 | DONE ctl | na 16 16 |        |             |         .!a16
1016:000 | DONE ins | na 16 16 | 006336 | e6 18       |                 inc.d 000218         
1017:000 | DONE wsp | na 16 16 |        |             |
1018:000 | DONE lbl | na 16 16 | 006338 |             | parse_reached_eol                    
1019:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
1020:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1021:000 | DONE ins | na 16 16 | 006338 | c2 20       |                 rep 20               
1021:001 | DONE ctl | na 16 16 |        |             |         .!a16
1022:000 | DONE ins | na 16 16 | 00633a | 98          |                 tya                  
1023:000 | DONE ins | na 16 16 | 00633b | 38          |                 sec                  
1024:000 | DONE ins | na 16 16 | 00633c | e5 1a       |                 sbc.d 00021a         ; original value for >IN / index of first char
1025:000 | DONE ins | na 16 16 | 00633e | 48          |                 pha                  ; save so we can manipulate Y
1026:000 | DONE wsp | na 16 16 |        |             |
1027:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
1028:000 | DONE ins | na 16 16 | 00633f | 98          |                 tya                  
1029:000 | DONE ins | na 16 16 | 006340 | 18          |                 clc                  
1030:000 | DONE ins | na 16 16 | 006341 | 65 18       |                 adc.d 000218         ; offset for EOL vs found delimiter
1031:000 | DONE ins | na 16 16 | 006343 | 85 12       |                 sta.d 000212         
1032:000 | DONE wsp | na 16 16 |        |             |
1033:000 | DONE ins | na 16 16 | 006345 | 7a          |                 ply                  ; length of string in TOS
1034:000 | DONE wsp | na 16 16 |        |             |
1035:000 | DONE lbl | na 16 16 | 006346 |             | z_parse-name                         
1036:000 | DONE lbl | na 16 16 | 006346 |             | z_parse                              
1036:001 | DONE ins | na 16 16 | 006346 | 60          |                 rts                  
1037:000 | DONE wsp | na 16 16 |        |             |
1038:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1039:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
1040:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
1041:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
1042:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
1043:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
1044:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
1045:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
1046:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
1047:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
1048:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
1049:000 | DONE lbl | na 16 16 | 006347 |             | a_refill                             
1050:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1051:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1052:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
1053:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
1054:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
1055:000 | DONE ins | na 16 16 | 006347 | a5 0c       |                 lda.d 00020c         
1056:000 | DONE ins | na 16 16 | 006349 | 49 00 01    |                 eor.# 0100           ; flip 07d00 / 07c00
1057:000 | DONE ins | na 16 16 | 00634c | 85 0c       |                 sta.d 00020c         
1058:000 | DONE wsp | na 16 16 |        |             |
1059:000 | DONE ins | na 16 16 | 00634e | a5 0e       |                 lda.d 00020e         ; current length is now previous length
1060:000 | DONE ins | na 16 16 | 006350 | 85 10       |                 sta.d 000210         
1061:000 | DONE wsp | na 16 16 |        |             |
1062:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
1063:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
1064:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
1065:000 | DONE ins | na 16 16 | 006352 | a5 0a       |                 lda.d 00020a         
1066:000 | DONE ins | na 16 16 | 006354 | d0 14       |                 bne 00636a           
1067:000 | DONE wsp | na 16 16 |        |             |
1068:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
1069:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
1070:000 | DONE ins | na 16 16 | 006356 | ca          |                 dex                  ; push Data Stack down twice
1071:000 | DONE ins | na 16 16 | 006357 | ca          |                 dex                  
1072:000 | DONE ins | na 16 16 | 006358 | 94 00       |                 sty.dx 00            
1073:000 | DONE wsp | na 16 16 |        |             |
1074:000 | DONE ins | na 16 16 | 00635a | a5 0c       |                 lda.d 00020c         ; address of current input buffer NOS
1075:000 | DONE ins | na 16 16 | 00635c | ca          |                 dex                  
1076:000 | DONE ins | na 16 16 | 00635d | ca          |                 dex                  
1077:000 | DONE ins | na 16 16 | 00635e | 95 00       |                 sta.dx 00            
1078:000 | DONE wsp | na 16 16 |        |             |
1079:000 | DONE ins | na 16 16 | 006360 | a0 ff 00    |                 ldy.# 0000ff         
1080:000 | DONE wsp | na 16 16 |        |             |
1081:000 | DONE ins | na 16 16 | 006363 | 20 18 61    |                 jsr 006118           ; ( addr n1 -- n2)
1082:000 | DONE wsp | na 16 16 |        |             |
1083:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
1084:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
1085:000 | DONE ins | na 16 16 | 006366 | a0 ff ff    |                 ldy.# 0ffff          
1086:000 | DONE wsp | na 16 16 |        |             |
1087:000 | DONE ins | na 16 16 | 006369 | 60          |                 rts                  
1088:000 | DONE wsp | na 16 16 |        |             |
1089:000 | DONE lbl | na 16 16 | 00636a |             | refill_src_not_kbd                   
1090:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
1091:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
1092:000 | DONE ins | na 16 16 | 00636a | c9 ff ff    |                 cmp.# 0ffff          
1093:000 | DONE ins | na 16 16 | 00636d | d0 08       |                 bne 006377           
1094:000 | DONE wsp | na 16 16 |        |             |
1095:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
1096:000 | DONE ins | na 16 16 | 00636f | ca          |                 dex                  
1097:000 | DONE ins | na 16 16 | 006370 | ca          |                 dex                  
1098:000 | DONE ins | na 16 16 | 006371 | 94 00       |                 sty.dx 00            
1099:000 | DONE ins | na 16 16 | 006373 | a0 00 00    |                 ldy.# 0000           
1100:000 | DONE wsp | na 16 16 |        |             |
1101:000 | DONE ins | na 16 16 | 006376 | 60          |                 rts                  
1102:000 | DONE wsp | na 16 16 |        |             |
1103:000 | DONE lbl | na 16 16 | 006377 |             | refill_source_is_not_string          
1104:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
1105:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
1106:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
1107:000 | DONE ins | na 16 16 | 006377 | a9 45 68    |                 lda.# 006845         
1108:000 | DONE ins | na 16 16 | 00637a | 4c 6b 66    |                 jmp 00666b           
1109:000 | DONE wsp | na 16 16 |        |             |
1110:000 | DONE lbl | na 16 16 | 00637d |             | z_refill                             
1110:001 | DONE ins | na 16 16 | 00637d | 60          |                 rts                  ; dummy for compiling
1111:000 | DONE wsp | na 16 16 |        |             |
1112:000 | DONE wsp | na 16 16 |        |             |
1113:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1114:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
1115:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
1116:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
1117:000 | DONE lbl | na 16 16 | 00637e |             | a_rot                                
1118:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1119:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1120:000 | DONE ins | na 16 16 | 00637e | b5 00       |                 lda.dx 00            ; save b
1121:000 | DONE ins | na 16 16 | 006380 | 94 00       |                 sty.dx 00            ; move c to NOS
1122:000 | DONE ins | na 16 16 | 006382 | b4 02       |                 ldy.dx 02            ; move a to TOS
1123:000 | DONE ins | na 16 16 | 006384 | 95 02       |                 sta.dx 02            ; save b as 3OS
1124:000 | DONE wsp | na 16 16 |        |             |
1125:000 | DONE lbl | na 16 16 | 006386 |             | z_rot                                
1125:001 | DONE ins | na 16 16 | 006386 | 60          |                 rts                  
1126:000 | DONE wsp | na 16 16 |        |             |
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1129:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
1130:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
1131:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
1132:000 | DONE wsp | na 16 16 |        |             |
1133:000 | DONE lbl | na 16 16 | 006387 |             | a_source                             
1133:001 | DONE ins | na 16 16 | 006387 | ca          |                 dex                  ; make room on Data Stack
1134:000 | DONE ins | na 16 16 | 006388 | ca          |                 dex                  
1135:000 | DONE ins | na 16 16 | 006389 | ca          |                 dex                  
1136:000 | DONE ins | na 16 16 | 00638a | ca          |                 dex                  
1137:000 | DONE ins | na 16 16 | 00638b | 94 02       |                 sty.dx 02            
1138:000 | DONE wsp | na 16 16 |        |             |
1139:000 | DONE ins | na 16 16 | 00638d | a5 0c       |                 lda.d 00020c         ; address of current input buffer as NOS
1140:000 | DONE ins | na 16 16 | 00638f | 95 00       |                 sta.dx 00            
1141:000 | DONE wsp | na 16 16 |        |             |
1142:000 | DONE ins | na 16 16 | 006391 | a4 0e       |                 ldy.d 00020e         ; length of current input buffer as TOS
1143:000 | DONE wsp | na 16 16 |        |             |
1144:000 | DONE lbl | na 16 16 | 006393 |             | z_source                             
1144:001 | DONE ins | na 16 16 | 006393 | 60          |                 rts                  
1145:000 | DONE wsp | na 16 16 |        |             |
1146:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1147:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
1148:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
1149:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
1150:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
1151:000 | DONE wsp | na 16 16 |        |             |
1152:000 | DONE lbl | na 16 16 | 006394 |             | a_source-id                          
1153:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1154:000 | DONE ins | na 16 16 | 006394 | ca          |                 dex                  
1155:000 | DONE ins | na 16 16 | 006395 | ca          |                 dex                  
1156:000 | DONE ins | na 16 16 | 006396 | 94 00       |                 sty.dx 00            
1157:000 | DONE ins | na 16 16 | 006398 | a4 0a       |                 ldy.d 00020a         
1158:000 | DONE wsp | na 16 16 |        |             |
1159:000 | DONE lbl | na 16 16 | 00639a |             | z_source-id                          
1159:001 | DONE ins | na 16 16 | 00639a | 60          |                 rts                  
1160:000 | DONE wsp | na 16 16 |        |             |
1161:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1162:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
1163:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
1164:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
1165:000 | DONE lbl | na 16 16 | 00639b |             | a_space                              
1166:000 | DONE ins | na 16 16 | 00639b | a9 20 00    |                 lda.# AscSP          
1167:000 | DONE ins | na 16 16 | 00639e | 20 30 60    |                 jsr 006030           
1168:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1169:000 | DONE wsp | na 16 16 |        |             |
1170:000 | DONE lbl | na 16 16 | 0063a1 |             | z_space                              
1170:001 | DONE ins | na 16 16 | 0063a1 | 60          |                 rts                  
1171:000 | DONE wsp | na 16 16 |        |             |
1172:000 | DONE wsp | na 16 16 |        |             |
1173:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1174:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
1175:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
1176:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
1177:000 | DONE lbl | na 16 16 | 0063a2 |             | a_spaces                             
1178:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1179:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1180:000 | DONE lbl | na 16 16 | 0063a2 |             | @                                    
1181:000 | DONE ins | na 16 16 | 0063a2 | 88          |                 dey                  ; this also handles case u=0
1182:000 | DONE ins | na 16 16 | 0063a3 | 30 05       |                 bmi 0063aa           
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE ins | na 16 16 | 0063a5 | 20 9b 63    |                 jsr 00639b           
1185:000 | DONE ins | na 16 16 | 0063a8 | 80 f8       |                 bra 0063a2           
1186:000 | DONE wsp | na 16 16 |        |             |
1187:000 | DONE lbl | na 16 16 | 0063aa |             | spaces_done                          
1188:000 | DONE ins | na 16 16 | 0063aa | b4 00       |                 ldy.dx 00            ; DROP
1189:000 | DONE ins | na 16 16 | 0063ac | e8          |                 inx                  
1190:000 | DONE ins | na 16 16 | 0063ad | e8          |                 inx                  
1191:000 | DONE wsp | na 16 16 |        |             |
1192:000 | DONE lbl | na 16 16 | 0063ae |             | z_spaces                             
1192:001 | DONE ins | na 16 16 | 0063ae | 60          |                 rts                  
1193:000 | DONE wsp | na 16 16 |        |             |
1194:000 | DONE wsp | na 16 16 |        |             |
1195:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1196:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
1197:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
1198:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
1199:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
1200:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
1201:000 | DONE lbl | na 16 16 | 0063af |             | a_state                              
1202:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1203:000 | DONE ins | na 16 16 | 0063af | ca          |                 dex                  
1204:000 | DONE ins | na 16 16 | 0063b0 | ca          |                 dex                  
1205:000 | DONE ins | na 16 16 | 0063b1 | 94 00       |                 sty.dx 00            
1206:000 | DONE ins | na 16 16 | 0063b3 | a0 14 02    |                 ldy.# 000214         
1207:000 | DONE wsp | na 16 16 |        |             |
1208:000 | DONE lbl | na 16 16 | 0063b6 |             | z_state                              
1208:001 | DONE ins | na 16 16 | 0063b6 | 60          |                 rts                  
1209:000 | DONE wsp | na 16 16 |        |             |
1210:000 | DONE wsp | na 16 16 |        |             |
1211:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1212:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
1213:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
1214:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
1215:000 | DONE lbl | na 16 16 | 0063b7 |             | a_swap                               
1216:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1217:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1218:000 | DONE ins | na 16 16 | 0063b7 | b5 00       |                 lda.dx 00            
1219:000 | DONE ins | na 16 16 | 0063b9 | 94 00       |                 sty.dx 00            
1220:000 | DONE ins | na 16 16 | 0063bb | a8          |                 tay                  
1221:000 | DONE wsp | na 16 16 |        |             |
1222:000 | DONE lbl | na 16 16 | 0063bc |             | z_swap                               
1222:001 | DONE ins | na 16 16 | 0063bc | 60          |                 rts                  
1223:000 | DONE wsp | na 16 16 |        |             |
1224:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1225:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
1226:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
1227:000 | DONE lbl | na 16 16 | 0063bd |             | a_true                               
1228:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1229:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1230:000 | DONE ins | na 16 16 | 0063bd | ca          |                 dex                  
1231:000 | DONE ins | na 16 16 | 0063be | ca          |                 dex                  
1232:000 | DONE ins | na 16 16 | 0063bf | 94 00       |                 sty.dx 00            
1233:000 | DONE ins | na 16 16 | 0063c1 | a0 ff ff    |                 ldy.# 0ffff          
1234:000 | DONE wsp | na 16 16 |        |             |
1235:000 | DONE lbl | na 16 16 | 0063c4 |             | z_true                               
1235:001 | DONE ins | na 16 16 | 0063c4 | 60          |                 rts                  
1236:000 | DONE wsp | na 16 16 |        |             |
1237:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1238:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
1239:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
1240:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
1241:000 | DONE lbl | na 16 16 | 0063c5 |             | a_tuck                               
1242:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1243:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1244:000 | DONE ins | na 16 16 | 0063c5 | ca          |                 dex                  
1245:000 | DONE ins | na 16 16 | 0063c6 | ca          |                 dex                  
1246:000 | DONE ins | na 16 16 | 0063c7 | b5 02       |                 lda.dx 2             
1247:000 | DONE ins | na 16 16 | 0063c9 | 95 00       |                 sta.dx 0             
1248:000 | DONE ins | na 16 16 | 0063cb | 94 02       |                 sty.dx 2             
1249:000 | DONE wsp | na 16 16 |        |             |
1250:000 | DONE lbl | na 16 16 | 0063cd |             | z_tuck                               
1250:001 | DONE ins | na 16 16 | 0063cd | 60          |                 rts                  
1251:000 | DONE wsp | na 16 16 |        |             |
1252:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1253:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
1254:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
1255:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
1256:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
1257:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
1258:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
1259:000 | DONE cmt | na 16 16 |        |             | ; running.
1260:000 | DONE lbl | na 16 16 | 0063ce |             | a_type                               
1261:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1262:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1263:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
1264:000 | DONE ins | na 16 16 | 0063ce | 98          |                 tya                  ; force flag check of TOS
1265:000 | DONE ins | na 16 16 | 0063cf | f0 17       |                 beq 0063e8           
1266:000 | DONE wsp | na 16 16 |        |             |
1267:000 | DONE ins | na 16 16 | 0063d1 | b5 00       |                 lda.dx 00            ; get address from NOS
1268:000 | DONE ins | na 16 16 | 0063d3 | 85 16       |                 sta.d 000216         
1269:000 | DONE ins | na 16 16 | 0063d5 | 84 18       |                 sty.d 000218         ; number of chars is TOS
1270:000 | DONE ins | na 16 16 | 0063d7 | a0 00 00    |                 ldy.# 0000           
1271:000 | DONE ins | na 16 16 | 0063da | e2 20       |                 sep 20               
1271:001 | DONE ctl | na  8 16 |        |             |         .!a8
1272:000 | DONE lbl | na  8 16 | 0063dc |             | type_loop                            
1273:000 | DONE ins | na  8 16 | 0063dc | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
1274:000 | DONE ins | na  8 16 | 0063de | 20 30 60    |                 jsr 006030           
1275:000 | DONE ins | na  8 16 | 0063e1 | c8          |                 iny                  
1276:000 | DONE ins | na  8 16 | 0063e2 | c4 18       |                 cpy.d 000218         
1277:000 | DONE ins | na  8 16 | 0063e4 | d0 f6       |                 bne 0063dc           
1278:000 | DONE wsp | na  8 16 |        |             |
1279:000 | DONE ins | na  8 16 | 0063e6 | c2 20       |                 rep 20               
1279:001 | DONE ctl | na 16 16 |        |             |         .!a16
1280:000 | DONE lbl | na 16 16 | 0063e8 |             | type_done                            
1281:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
1282:000 | DONE ins | na 16 16 | 0063e8 | b4 02       |                 ldy.dx 02            
1283:000 | DONE ins | na 16 16 | 0063ea | e8          |                 inx                  
1284:000 | DONE ins | na 16 16 | 0063eb | e8          |                 inx                  
1285:000 | DONE ins | na 16 16 | 0063ec | e8          |                 inx                  
1286:000 | DONE ins | na 16 16 | 0063ed | e8          |                 inx                  
1287:000 | DONE wsp | na 16 16 |        |             |
1288:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
1289:000 | DONE wsp | na 16 16 |        |             |
1290:000 | DONE lbl | na 16 16 | 0063ee |             | z_type                               
1290:001 | DONE ins | na 16 16 | 0063ee | 60          |                 rts                  
1291:000 | DONE wsp | na 16 16 |        |             |
1292:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1293:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
1294:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
1295:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
1296:000 | DONE lbl | na 16 16 | 0063ef |             | a_words                              
1297:000 | DONE ins | na 16 16 | 0063ef | 20 c9 61    |                 jsr 0061c9           ; start on next line, this is a style choice
1298:000 | DONE wsp | na 16 16 |        |             |
1299:000 | DONE ins | na 16 16 | 0063f2 | a5 02       |                 lda.d 000202         ; nt of first entry in Dictionary (last added)
1300:000 | DONE ins | na 16 16 | 0063f4 | 48          |                 pha                  
1301:000 | DONE wsp | na 16 16 |        |             |
1302:000 | DONE ins | na 16 16 | 0063f5 | ca          |                 dex                  ; create room on TOS
1303:000 | DONE ins | na 16 16 | 0063f6 | ca          |                 dex                  
1304:000 | DONE ins | na 16 16 | 0063f7 | 94 00       |                 sty.dx 00            
1305:000 | DONE wsp | na 16 16 |        |             |
1306:000 | DONE lbl | na 16 16 | 0063f9 |             | words_loop                           
1307:000 | DONE ins | na 16 16 | 0063f9 | a8          |                 tay                  ; ( nt )
1308:000 | DONE wsp | na 16 16 |        |             |
1309:000 | DONE ins | na 16 16 | 0063fa | 20 c1 62    |                 jsr 0062c1           ; ( nt -- addr u )
1310:000 | DONE ins | na 16 16 | 0063fd | 20 ce 63    |                 jsr 0063ce           ; ( addr u -- )
1311:000 | DONE ins | na 16 16 | 006400 | 20 9b 63    |                 jsr 00639b           
1312:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1313:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1314:000 | DONE ins | na 16 16 | 006403 | 68          |                 pla                  
1315:000 | DONE wsp | na 16 16 |        |             |
1316:000 | DONE cmt | na 16 16 |        |             |                 ; the next nt is two bytes below the nt of the current one in
1317:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
1318:000 | DONE cmt | na 16 16 |        |             |                 ;
1319:000 | DONE ins | na 16 16 | 006404 | 1a          |                 inc.a                
1320:000 | DONE ins | na 16 16 | 006405 | 1a          |                 inc.a                
1321:000 | DONE wsp | na 16 16 |        |             |
1322:000 | DONE ins | na 16 16 | 006406 | ca          |                 dex                  
1323:000 | DONE ins | na 16 16 | 006407 | ca          |                 dex                  
1324:000 | DONE ins | na 16 16 | 006408 | 94 00       |                 sty.dx 00            
1325:000 | DONE wsp | na 16 16 |        |             |
1326:000 | DONE ins | na 16 16 | 00640a | a8          |                 tay                  
1327:000 | DONE ins | na 16 16 | 00640b | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1328:000 | DONE ins | na 16 16 | 00640e | 48          |                 pha                  
1329:000 | DONE ins | na 16 16 | 00640f | d0 e8       |                 bne 0063f9           ; zero entry signals end of Dictionary
1330:000 | DONE wsp | na 16 16 |        |             |
1331:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
1332:000 | DONE ins | na 16 16 | 006411 | 68          |                 pla                  ; balance MPU stack, value discarded
1333:000 | DONE wsp | na 16 16 |        |             |
1334:000 | DONE ins | na 16 16 | 006412 | b4 00       |                 ldy.dx 00            
1335:000 | DONE ins | na 16 16 | 006414 | e8          |                 inx                  
1336:000 | DONE ins | na 16 16 | 006415 | e8          |                 inx                  
1337:000 | DONE wsp | na 16 16 |        |             |
1338:000 | DONE lbl | na 16 16 | 006416 |             | z_words                              
1338:001 | DONE ins | na 16 16 | 006416 | 60          |                 rts                  
1339:000 | DONE wsp | na 16 16 |        |             |
1340:000 | DONE wsp | na 16 16 |        |             |
1341:000 | DONE wsp | na 16 16 |        |             |
1342:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1343:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
1344:000 | DONE wsp | na 16 16 |        |             |
1345:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
1345:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1345:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
1345:003 | DONE cmt | na 16 16 |        |             | ; This version: 06. Feb 2017
1345:004 | DONE wsp | na 16 16 |        |             |
1345:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
1345:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
1345:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
1345:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
1345:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
1345:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
1345:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "h_<WORD>" ("header") for the nt and "a_<WORD>" ("A" as the
1345:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
1345:013 | DONE cmt | na 16 16 |        |             | ;
1345:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure for each header:
1345:015 | DONE wsp | na 16 16 |        |             |
1345:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
1345:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
1345:018 | DONE cmt | na 16 16 |        |             | ; h_word ->  +--------+--------+
1345:019 | DONE cmt | na 16 16 |        |             | ;            | Length | Status |
1345:020 | DONE cmt | na 16 16 |        |             | ;         +2 +--------+--------+
1345:021 | DONE cmt | na 16 16 |        |             | ;            | Next Header     | -> h_next (nt of next word)
1345:022 | DONE cmt | na 16 16 |        |             | ;         +4 +-----------------+
1345:023 | DONE cmt | na 16 16 |        |             | ;            | Start of Code   | -> a_word (xt of this word)
1345:024 | DONE cmt | na 16 16 |        |             | ;         +6 +-----------------+
1345:025 | DONE cmt | na 16 16 |        |             | ;            | End of Code     | -> z_word
1345:026 | DONE cmt | na 16 16 |        |             | ;         +8 +--------+--------+
1345:027 | DONE cmt | na 16 16 |        |             | ;            | Name   |        |
1345:028 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1345:029 | DONE cmt | na 16 16 |        |             | ;            |        |        |
1345:030 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1345:031 | DONE cmt | na 16 16 |        |             | ;            |        |  ...   | (name string does not end with a zero)
1345:032 | DONE cmt | na 16 16 |        |             | ;         +n +--------+--------+
1345:033 | DONE wsp | na 16 16 |        |             |
1345:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
1345:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
1345:036 | DONE cmt | na 16 16 |        |             | ;
1345:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
1345:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
1345:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
1345:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
1345:041 | DONE wsp | na 16 16 |        |             |
1345:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
1345:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
1345:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
1345:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
1345:046 | DONE wsp | na 16 16 |        |             |
1345:047 | DONE lbl | na 16 16 | 006417 |             | h_bye                                
1345:048 | DONE dir | na 16 16 | 006417 | (1 bytes)   |         .byte 03                     ; length of word string
1345:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
1345:049 | DONE dir | na 16 16 | 006418 | (1 bytes)   |         .byte { PW + NC }            ; status byte
1345:049 | DONE dir | na 16 16 |        |             |                 90                       --  .
1345:050 | DONE dir | na 16 16 | 006419 | (2 bytes)   |         .word 0000                   ; next word in dictionary, 0000 signals end
1345:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
1345:051 | DONE dir | na 16 16 | 00641b | (2 bytes)   |         .word 0061ab                 ; start of code, the xt of this word
1345:051 | DONE dir | na 16 16 |        |             |                 ab 61                    --  . a
1345:052 | DONE dir | na 16 16 | 00641d | (2 bytes)   |         .word 0061ad                 ; end of code (points to RTS)
1345:052 | DONE dir | na 16 16 |        |             |                 ad 61                    --  . a
1345:053 | DONE dir | na 16 16 | 00641f | (3 bytes)   |         .byte 62, 79, 65             ; lowercase word name
1345:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
1345:054 | DONE wsp | na 16 16 |        |             |
1345:055 | DONE lbl | na 16 16 | 006422 |             | h_cold                               
1345:056 | DONE dir | na 16 16 | 006422 | (2 bytes)   |         .byte 4, 00                  
1345:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1345:057 | DONE dir | na 16 16 | 006424 | (6 bytes)   |         .word h_bye, a_cold, 0060d5  
1345:057 | DONE dir | na 16 16 |        |             |                 17 64 5d 60 d5 60        --  . d ] ` . `
1345:058 | DONE dir | na 16 16 | 00642a | (4 bytes)   |         .byte 63, 6f, 6c, 64         
1345:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
1345:059 | DONE wsp | na 16 16 |        |             |
1345:060 | DONE lbl | na 16 16 | 00642e |             | h_words                              
1345:061 | DONE dir | na 16 16 | 00642e | (2 bytes)   |         .byte 5, { PW + NC }         
1345:061 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1345:062 | DONE dir | na 16 16 | 006430 | (6 bytes)   |         .word h_cold, a_words, 006416 
1345:062 | DONE dir | na 16 16 |        |             |                 22 64 ef 63 16 64        --  " d . c . d
1345:063 | DONE dir | na 16 16 | 006436 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
1345:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
1345:064 | DONE wsp | na 16 16 |        |             |
1345:065 | DONE lbl | na 16 16 | 00643b |             | h_bell                               
1345:066 | DONE dir | na 16 16 | 00643b | (2 bytes)   |         .byte 4, { PW + NC }         
1345:066 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1345:067 | DONE dir | na 16 16 | 00643d | (6 bytes)   |         .word h_words, a_bell, 0061a2 
1345:067 | DONE dir | na 16 16 |        |             |                 2e 64 9c 61 a2 61        --  . d . a . a
1345:068 | DONE dir | na 16 16 | 006443 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
1345:068 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
1345:069 | DONE wsp | na 16 16 |        |             |
1345:070 | DONE lbl | na 16 16 | 006447 |             | h_page                               
1345:071 | DONE dir | na 16 16 | 006447 | (2 bytes)   |         .byte 4, { PW + NC }         
1345:071 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1345:072 | DONE dir | na 16 16 | 006449 | (6 bytes)   |         .word h_bell, a_page, 0062e1 
1345:072 | DONE dir | na 16 16 |        |             |                 3b 64 d5 62 e1 62        --  ; d . b . b
1345:073 | DONE dir | na 16 16 | 00644f | (4 bytes)   |         .byte 70, 61, 67, 65         
1345:073 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
1345:074 | DONE wsp | na 16 16 |        |             |
1345:075 | DONE lbl | na 16 16 | 006453 |             | h_count                              
1345:076 | DONE dir | na 16 16 | 006453 | (2 bytes)   |         .byte 5, {NC + PW }          
1345:076 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1345:077 | DONE dir | na 16 16 | 006455 | (6 bytes)   |         .word h_page, a_count, 0061c8 
1345:077 | DONE dir | na 16 16 |        |             |                 47 64 ba 61 c8 61        --  G d . a . a
1345:078 | DONE dir | na 16 16 | 00645b | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
1345:078 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
1345:079 | DONE wsp | na 16 16 |        |             |
1345:080 | DONE lbl | na 16 16 | 006460 |             | h_abort                              
1345:081 | DONE dir | na 16 16 | 006460 | (2 bytes)   |         .byte 5, 00                  ; TODO check flags
1345:081 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1345:082 | DONE dir | na 16 16 | 006462 | (6 bytes)   |         .word h_count, a_abort, 0060d5 
1345:082 | DONE dir | na 16 16 |        |             |                 53 64 93 60 d5 60        --  S d . ` . `
1345:083 | DONE dir | na 16 16 | 006468 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
1345:083 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
1345:084 | DONE wsp | na 16 16 |        |             |
1345:085 | DONE lbl | na 16 16 | 00646d |             | h_parse                              
1345:086 | DONE dir | na 16 16 | 00646d | (2 bytes)   |         .byte 5, 00                  
1345:086 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1345:087 | DONE dir | na 16 16 | 00646f | (6 bytes)   |         .word h_abort, a_parse, 006346 
1345:087 | DONE dir | na 16 16 |        |             |                 60 64 14 63 46 63        --  ` d . c F c
1345:088 | DONE dir | na 16 16 | 006475 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
1345:088 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
1345:089 | DONE wsp | na 16 16 |        |             |
1345:090 | DONE lbl | na 16 16 | 00647a |             | h_quit                               
1345:091 | DONE dir | na 16 16 | 00647a | (2 bytes)   |         .byte 4, 00                  
1345:091 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1345:092 | DONE dir | na 16 16 | 00647c | (6 bytes)   |         .word h_parse, a_quit, 0060d5 
1345:092 | DONE dir | na 16 16 |        |             |                 6d 64 9b 60 d5 60        --  m d . ` . `
1345:093 | DONE dir | na 16 16 | 006482 | (4 bytes)   |         .byte 71, 75, 69, 74         
1345:093 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
1345:094 | DONE wsp | na 16 16 |        |             |
1345:095 | DONE lbl | na 16 16 | 006486 |             | h_name>int                           
1345:096 | DONE dir | na 16 16 | 006486 | (2 bytes)   |         .byte 8, { PW + NC }         
1345:096 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1345:097 | DONE dir | na 16 16 | 006488 | (6 bytes)   |         .word h_quit, a_name>int, 0062c0 
1345:097 | DONE dir | na 16 16 |        |             |                 7a 64 b8 62 c0 62        --  z d . b . b
1345:098 | DONE dir | na 16 16 | 00648e | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
1345:098 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
1345:098 | DONE dir | na 16 16 |        |             |                                          -- 
1345:099 | DONE wsp | na 16 16 |        |             |
1345:100 | DONE lbl | na 16 16 | 006496 |             | h_cr                                 
1345:101 | DONE dir | na 16 16 | 006496 | (2 bytes)   |         .byte 2, { PW + NC }         
1345:101 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1345:102 | DONE dir | na 16 16 | 006498 | (6 bytes)   |         .word h_name>int, a_cr, 0061cf 
1345:102 | DONE dir | na 16 16 |        |             |                 86 64 c9 61 cf 61        --  . d . a . a
1345:103 | DONE dir | na 16 16 | 00649e | (2 bytes)   |         .byte 63, 72                 
1345:103 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
1345:104 | DONE wsp | na 16 16 |        |             |
1345:105 | DONE lbl | na 16 16 | 0064a0 |             | h_bl                                 
1345:106 | DONE dir | na 16 16 | 0064a0 | (2 bytes)   |         .byte 2, { PW + NC }         
1345:106 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1345:107 | DONE dir | na 16 16 | 0064a2 | (6 bytes)   |         .word h_cr, a_bl, 0061aa     
1345:107 | DONE dir | na 16 16 |        |             |                 96 64 a3 61 aa 61        --  . d . a . a
1345:108 | DONE dir | na 16 16 | 0064a8 | (2 bytes)   |         .byte 62, 6c                 
1345:108 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
1345:109 | DONE wsp | na 16 16 |        |             |
1345:110 | DONE lbl | na 16 16 | 0064aa |             | h_spaces                             
1345:111 | DONE dir | na 16 16 | 0064aa | (2 bytes)   |         .byte 6, { PW + NC }         
1345:111 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1345:112 | DONE dir | na 16 16 | 0064ac | (6 bytes)   |         .word h_bl, a_spaces, 0063ae 
1345:112 | DONE dir | na 16 16 |        |             |                 a0 64 a2 63 ae 63        --  . d . c . c
1345:113 | DONE dir | na 16 16 | 0064b2 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
1345:113 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
1345:114 | DONE wsp | na 16 16 |        |             |
1345:115 | DONE lbl | na 16 16 | 0064b8 |             | h_space                              
1345:116 | DONE dir | na 16 16 | 0064b8 | (2 bytes)   |         .byte 5, { PW + NC }         
1345:116 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1345:117 | DONE dir | na 16 16 | 0064ba | (6 bytes)   |         .word h_spaces, a_space, 0063a1 
1345:117 | DONE dir | na 16 16 |        |             |                 aa 64 9b 63 a1 63        --  . d . c . c
1345:118 | DONE dir | na 16 16 | 0064c0 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
1345:118 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
1345:119 | DONE wsp | na 16 16 |        |             |
1345:120 | DONE lbl | na 16 16 | 0064c5 |             | h_dots                               
1345:121 | DONE dir | na 16 16 | 0064c5 | (2 bytes)   |         .byte 2, { PW + NC }         
1345:121 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1345:122 | DONE dir | na 16 16 | 0064c7 | (6 bytes)   |         .word h_space, a_dots, 00623c 
1345:122 | DONE dir | na 16 16 |        |             |                 b8 64 f5 61 3c 62        --  . d . a < b
1345:123 | DONE dir | na 16 16 | 0064cd | (2 bytes)   |         .byte 2e, 73                 
1345:123 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
1345:124 | DONE wsp | na 16 16 |        |             |
1345:125 | DONE lbl | na 16 16 | 0064cf |             | h_type                               
1345:126 | DONE dir | na 16 16 | 0064cf | (2 bytes)   |         .byte 4, 0                   
1345:126 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1345:127 | DONE dir | na 16 16 | 0064d1 | (6 bytes)   |         .word h_dots, a_type, 0063ee 
1345:127 | DONE dir | na 16 16 |        |             |                 c5 64 ce 63 ee 63        --  . d . c . c
1345:128 | DONE dir | na 16 16 | 0064d7 | (4 bytes)   |         .byte 74, 79, 70, 65         
1345:128 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
1345:129 | DONE wsp | na 16 16 |        |             |
1345:130 | DONE lbl | na 16 16 | 0064db |             | h_dot                                
1345:131 | DONE dir | na 16 16 | 0064db | (2 bytes)   |         .byte 1, { PW + NC }         
1345:131 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1345:132 | DONE dir | na 16 16 | 0064dd | (6 bytes)   |         .word h_type, a_dot, 0061f4  
1345:132 | DONE dir | na 16 16 |        |             |                 cf 64 df 61 f4 61        --  . d . a . a
1345:133 | DONE dir | na 16 16 | 0064e3 | (1 bytes)   |         .byte 2e                     
1345:133 | DONE dir | na 16 16 |        |             |                 2e                       --  .
1345:134 | DONE wsp | na 16 16 |        |             |
1345:135 | DONE lbl | na 16 16 | 0064e4 |             | h_name>string                        
1345:136 | DONE dir | na 16 16 | 0064e4 | (2 bytes)   |         .byte 0b, { PW + NC }        
1345:136 | DONE dir | na 16 16 |        |             |                 0b 90                    --   .
1345:137 | DONE dir | na 16 16 | 0064e6 | (6 bytes)   |         .word h_dot, a_name>string, 0062d1 
1345:137 | DONE dir | na 16 16 |        |             |                 db 64 c1 62 d1 62        --  . d . b . b
1345:138 | DONE dir | na 16 16 | 0064ec | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
1345:138 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
1345:138 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
1345:139 | DONE wsp | na 16 16 |        |             |
1345:140 | DONE lbl | na 16 16 | 0064f7 |             | h_2dup                               
1345:141 | DONE dir | na 16 16 | 0064f7 | (2 bytes)   |         .byte 4, { PW + NC }         
1345:141 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1345:142 | DONE dir | na 16 16 | 0064f9 | (6 bytes)   |         .word h_name>string, a_2dup, 00610a 
1345:142 | DONE dir | na 16 16 |        |             |                 e4 64 00 61 0a 61        --  . d . a 
 a
1345:143 | DONE dir | na 16 16 | 0064ff | (4 bytes)   |         .byte 32, 64, 75, 70         
1345:143 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
1345:144 | DONE wsp | na 16 16 |        |             |
1345:145 | DONE lbl | na 16 16 | 006503 |             | h_abs                                
1345:146 | DONE dir | na 16 16 | 006503 | (2 bytes)   |         .byte 3, { PW + NC }         
1345:146 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1345:147 | DONE dir | na 16 16 | 006505 | (6 bytes)   |         .word h_2dup, a_abs, 006117  
1345:147 | DONE dir | na 16 16 |        |             |                 f7 64 0b 61 17 61        --  . d  a . a
1345:148 | DONE dir | na 16 16 | 00650b | (3 bytes)   |         .byte 61, 62, 73             
1345:148 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
1345:149 | DONE wsp | na 16 16 |        |             |
1345:150 | DONE lbl | na 16 16 | 00650e |             | h_state                              
1345:151 | DONE dir | na 16 16 | 00650e | (2 bytes)   |         .byte 5, { PW + NC }         
1345:151 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1345:152 | DONE dir | na 16 16 | 006510 | (6 bytes)   |         .word h_abs, a_state, 0063b6 
1345:152 | DONE dir | na 16 16 |        |             |                 03 65 af 63 b6 63        --  . e . c . c
1345:153 | DONE dir | na 16 16 | 006516 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
1345:153 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
1345:154 | DONE wsp | na 16 16 |        |             |
1345:155 | DONE lbl | na 16 16 | 00651b |             | h_to-in                              
1345:156 | DONE dir | na 16 16 | 00651b | (2 bytes)   |         .byte 3, { PW + NC }         
1345:156 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1345:157 | DONE dir | na 16 16 | 00651d | (6 bytes)   |         .word h_state, a_to-in, 0060dd 
1345:157 | DONE dir | na 16 16 |        |             |                 0e 65 d6 60 dd 60        --  . e . ` . `
1345:158 | DONE dir | na 16 16 | 006523 | (3 bytes)   |         .byte 3e, 69, 6e             
1345:158 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
1345:159 | DONE wsp | na 16 16 |        |             |
1345:160 | DONE lbl | na 16 16 | 006526 |             | h_source                             
1345:161 | DONE dir | na 16 16 | 006526 | (2 bytes)   |         .byte 6, { PW + NC }         
1345:161 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1345:162 | DONE dir | na 16 16 | 006528 | (6 bytes)   |         .word h_to-in, a_source, 006393 
1345:162 | DONE dir | na 16 16 |        |             |                 1b 65 87 63 93 63        --  . e . c . c
1345:163 | DONE dir | na 16 16 | 00652e | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
1345:163 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
1345:164 | DONE wsp | na 16 16 |        |             |
1345:165 | DONE lbl | na 16 16 | 006534 |             | h_depth                              
1345:166 | DONE dir | na 16 16 | 006534 | (2 bytes)   |         .byte 5, { PW + NC }         
1345:166 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1345:167 | DONE dir | na 16 16 | 006536 | (6 bytes)   |         .word h_source, a_depth, 0061de 
1345:167 | DONE dir | na 16 16 |        |             |                 26 65 d0 61 de 61        --  & e . a . a
1345:168 | DONE dir | na 16 16 | 00653c | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
1345:168 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
1345:169 | DONE wsp | na 16 16 |        |             |
1345:170 | DONE lbl | na 16 16 | 006541 |             | h_plus                               
1345:171 | DONE dir | na 16 16 | 006541 | (2 bytes)   |         .byte 1, { PW + NC }         
1345:171 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1345:172 | DONE dir | na 16 16 | 006543 | (6 bytes)   |         .word h_depth, a_plus, 0060e5 
1345:172 | DONE dir | na 16 16 |        |             |                 34 65 de 60 e5 60        --  4 e . ` . `
1345:173 | DONE dir | na 16 16 | 006549 | (1 bytes)   |         .byte 2b                     
1345:173 | DONE dir | na 16 16 |        |             |                 2b                       --  +
1345:174 | DONE wsp | na 16 16 |        |             |
1345:175 | DONE lbl | na 16 16 | 00654a |             | h_one-plus                           
1345:176 | DONE dir | na 16 16 | 00654a | (2 bytes)   |         .byte 2, { PW + NC }         
1345:176 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1345:177 | DONE dir | na 16 16 | 00654c | (6 bytes)   |         .word h_plus, a_one-plus, 0060f7 
1345:177 | DONE dir | na 16 16 |        |             |                 41 65 f6 60 f7 60        --  A e . ` . `
1345:178 | DONE dir | na 16 16 | 006552 | (2 bytes)   |         .byte 31, 2b                 
1345:178 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
1345:179 | DONE wsp | na 16 16 |        |             |
1345:180 | DONE lbl | na 16 16 | 006554 |             | h_false                              
1345:181 | DONE dir | na 16 16 | 006554 | (2 bytes)   |         .byte 5, { PW + NC }         
1345:181 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1345:182 | DONE dir | na 16 16 | 006556 | (6 bytes)   |         .word h_one-plus, a_zero, 0060ed 
1345:182 | DONE dir | na 16 16 |        |             |                 4a 65 e6 60 ed 60        --  J e . ` . `
1345:183 | DONE dir | na 16 16 | 00655c | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
1345:183 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
1345:184 | DONE wsp | na 16 16 |        |             |
1345:185 | DONE lbl | na 16 16 | 006561 |             | h_true                               
1345:186 | DONE dir | na 16 16 | 006561 | (2 bytes)   |         .byte 4, { PW + NC }         
1345:186 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1345:187 | DONE dir | na 16 16 | 006563 | (6 bytes)   |         .word h_false, a_true, 0063c4 
1345:187 | DONE dir | na 16 16 |        |             |                 54 65 bd 63 c4 63        --  T e . c . c
1345:188 | DONE dir | na 16 16 | 006569 | (4 bytes)   |         .byte 74, 72, 75, 65         
1345:188 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
1345:189 | DONE wsp | na 16 16 |        |             |
1345:190 | DONE lbl | na 16 16 | 00656d |             | h_two                                
1345:191 | DONE dir | na 16 16 | 00656d | (2 bytes)   |         .byte 1, { PW + NC }         
1345:191 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1345:192 | DONE dir | na 16 16 | 00656f | (6 bytes)   |         .word h_true, a_two, 0060ff  
1345:192 | DONE dir | na 16 16 |        |             |                 61 65 f8 60 ff 60        --  a e . ` . `
1345:193 | DONE dir | na 16 16 | 006575 | (1 bytes)   |         .byte 32                     
1345:193 | DONE dir | na 16 16 |        |             |                 32                       --  2
1345:194 | DONE wsp | na 16 16 |        |             |
1345:195 | DONE lbl | na 16 16 | 006576 |             | h_one                                
1345:196 | DONE dir | na 16 16 | 006576 | (2 bytes)   |         .byte 1, { PW + NC }         
1345:196 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1345:197 | DONE dir | na 16 16 | 006578 | (6 bytes)   |         .word h_two, a_one, 0060f5   
1345:197 | DONE dir | na 16 16 |        |             |                 6d 65 ee 60 f5 60        --  m e . ` . `
1345:198 | DONE dir | na 16 16 | 00657e | (1 bytes)   |         .byte 31                     
1345:198 | DONE dir | na 16 16 |        |             |                 31                       --  1
1345:199 | DONE wsp | na 16 16 |        |             |
1345:200 | DONE lbl | na 16 16 | 00657f |             | h_zero                               
1345:201 | DONE dir | na 16 16 | 00657f | (2 bytes)   |         .byte 1, { PW + NC }         
1345:201 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1345:202 | DONE dir | na 16 16 | 006581 | (6 bytes)   |         .word h_one, a_zero, 0060ed  
1345:202 | DONE dir | na 16 16 |        |             |                 76 65 e6 60 ed 60        --  v e . ` . `
1345:203 | DONE dir | na 16 16 | 006587 | (1 bytes)   |         .byte 30                     
1345:203 | DONE dir | na 16 16 |        |             |                 30                       --  0
1345:204 | DONE wsp | na 16 16 |        |             |
1345:205 | DONE lbl | na 16 16 | 006588 |             | h_find-name                          
1345:206 | DONE dir | na 16 16 | 006588 | (2 bytes)   |         .byte 9, 0                   
1345:206 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
1345:207 | DONE dir | na 16 16 | 00658a | (6 bytes)   |         .word h_zero, a_find-name, 0062b0 
1345:207 | DONE dir | na 16 16 |        |             |                 7f 65 5a 62 b0 62        --  . e Z b . b
1345:208 | DONE dir | na 16 16 | 006590 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
1345:208 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
1345:208 | DONE dir | na 16 16 |        |             |                 65                       --  e
1345:209 | DONE wsp | na 16 16 |        |             |
1345:210 | DONE lbl | na 16 16 | 006599 |             | h_refill                             
1345:211 | DONE dir | na 16 16 | 006599 | (2 bytes)   |         .byte 6, { PW }              ; TODO check flags
1345:211 | DONE dir | na 16 16 |        |             |                 06 80                    --  . .
1345:212 | DONE dir | na 16 16 | 00659b | (6 bytes)   |         .word h_find-name, a_refill, 00637d 
1345:212 | DONE dir | na 16 16 |        |             |                 88 65 47 63 7d 63        --  . e G c } c
1345:213 | DONE dir | na 16 16 | 0065a1 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
1345:213 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
1345:214 | DONE wsp | na 16 16 |        |             |
1345:215 | DONE lbl | na 16 16 | 0065a7 |             | h_parse-name                         
1345:216 | DONE dir | na 16 16 | 0065a7 | (2 bytes)   |         .byte &10, 0                 
1345:216 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
1345:217 | DONE dir | na 16 16 | 0065a9 | (6 bytes)   |         .word h_refill, a_parse-name, 006346 
1345:217 | DONE dir | na 16 16 |        |             |                 99 65 e2 62 46 63        --  . e . b F c
1345:218 | DONE dir | na 16 16 | 0065af | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
1345:218 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
1345:218 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
1345:219 | DONE wsp | na 16 16 |        |             |
1345:220 | DONE lbl | na 16 16 | 0065b9 |             | h_source-id                          
1345:221 | DONE dir | na 16 16 | 0065b9 | (2 bytes)   |         .byte 9, { PW + NC }         
1345:221 | DONE dir | na 16 16 |        |             |                 09 90                    --  	 .
1345:222 | DONE dir | na 16 16 | 0065bb | (6 bytes)   |         .word h_parse-name, a_source-id, 00639a 
1345:222 | DONE dir | na 16 16 |        |             |                 a7 65 94 63 9a 63        --  . e . c . c
1345:223 | DONE dir | na 16 16 | 0065c1 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
1345:223 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
1345:223 | DONE dir | na 16 16 |        |             |                 64                       --  d
1345:224 | DONE wsp | na 16 16 |        |             |
1345:225 | DONE lbl | na 16 16 | 0065ca |             | h_comma                              
1345:226 | DONE dir | na 16 16 | 0065ca | (2 bytes)   |         .byte 1, { PW + NC }         
1345:226 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1345:227 | DONE dir | na 16 16 | 0065cc | (6 bytes)   |         .word h_source-id, a_comma, 0061b9 
1345:227 | DONE dir | na 16 16 |        |             |                 b9 65 ae 61 b9 61        --  . e . a . a
1345:228 | DONE dir | na 16 16 | 0065d2 | (1 bytes)   |         .byte 2c                     
1345:228 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
1345:229 | DONE wsp | na 16 16 |        |             |
1345:230 | DONE lbl | na 16 16 | 0065d3 |             | h_accept                             
1345:231 | DONE dir | na 16 16 | 0065d3 | (2 bytes)   |         .byte 6, 00                  ; TODO check flags
1345:231 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
1345:232 | DONE dir | na 16 16 | 0065d5 | (6 bytes)   |         .word h_comma, a_accept, 00619b 
1345:232 | DONE dir | na 16 16 |        |             |                 ca 65 18 61 9b 61        --  . e . a . a
1345:233 | DONE dir | na 16 16 | 0065db | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
1345:233 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
1345:234 | DONE wsp | na 16 16 |        |             |
1345:235 | DONE lbl | na 16 16 | 0065e1 |             | h_tuck                               
1345:236 | DONE dir | na 16 16 | 0065e1 | (2 bytes)   |         .byte 4, { PW + NC }         
1345:236 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1345:237 | DONE dir | na 16 16 | 0065e3 | (6 bytes)   |         .word h_accept, a_tuck, 0063cd 
1345:237 | DONE dir | na 16 16 |        |             |                 d3 65 c5 63 cd 63        --  . e . c . c
1345:238 | DONE dir | na 16 16 | 0065e9 | (4 bytes)   |         .byte 74, 75, 63, 6b         
1345:238 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
1345:239 | DONE wsp | na 16 16 |        |             |
1345:240 | DONE lbl | na 16 16 | 0065ed |             | h_nip                                
1345:241 | DONE dir | na 16 16 | 0065ed | (2 bytes)   |         .byte 3, { PW + NC }         
1345:241 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1345:242 | DONE dir | na 16 16 | 0065ef | (6 bytes)   |         .word h_tuck, a_nip, 0062d4  
1345:242 | DONE dir | na 16 16 |        |             |                 e1 65 d2 62 d4 62        --  . e . b . b
1345:243 | DONE dir | na 16 16 | 0065f5 | (3 bytes)   |         .byte 6e, 69, 70             
1345:243 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
1345:244 | DONE wsp | na 16 16 |        |             |
1345:245 | DONE lbl | na 16 16 | 0065f8 |             | h_rot                                
1345:246 | DONE dir | na 16 16 | 0065f8 | (2 bytes)   |         .byte 3, { PW + NC }         
1345:246 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1345:247 | DONE dir | na 16 16 | 0065fa | (6 bytes)   |         .word h_nip, a_rot, 006386   
1345:247 | DONE dir | na 16 16 |        |             |                 ed 65 7e 63 86 63        --  . e ~ c . c
1345:248 | DONE dir | na 16 16 | 006600 | (3 bytes)   |         .byte 72, 6f, 74             
1345:248 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
1345:249 | DONE wsp | na 16 16 |        |             |
1345:250 | DONE lbl | na 16 16 | 006603 |             | h_execute                            
1345:251 | DONE dir | na 16 16 | 006603 | (2 bytes)   |         .byte 7, { PW + NC }         
1345:251 | DONE dir | na 16 16 |        |             |                 07 90                    --  . .
1345:252 | DONE dir | na 16 16 | 006605 | (6 bytes)   |         .word h_rot, a_execute, 006259 
1345:252 | DONE dir | na 16 16 |        |             |                 f8 65 4a 62 59 62        --  . e J b Y b
1345:253 | DONE dir | na 16 16 | 00660b | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
1345:253 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
1345:254 | DONE wsp | na 16 16 |        |             |
1345:255 | DONE lbl | na 16 16 | 006612 |             | h_here                               
1345:256 | DONE dir | na 16 16 | 006612 | (2 bytes)   |         .byte 4, { PW + NC }         
1345:256 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1345:257 | DONE dir | na 16 16 | 006614 | (6 bytes)   |         .word h_execute, a_here, 0062b7 
1345:257 | DONE dir | na 16 16 |        |             |                 03 66 b1 62 b7 62        --  . f . b . b
1345:258 | DONE dir | na 16 16 | 00661a | (4 bytes)   |         .byte 68, 65, 72, 65         
1345:258 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
1345:259 | DONE wsp | na 16 16 |        |             |
1345:260 | DONE lbl | na 16 16 | 00661e |             | h_swap                               
1345:261 | DONE dir | na 16 16 | 00661e | (2 bytes)   |         .byte 4, { PW + NC }         
1345:261 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1345:262 | DONE dir | na 16 16 | 006620 | (6 bytes)   |         .word h_here, a_swap, 0063bc 
1345:262 | DONE dir | na 16 16 |        |             |                 12 66 b7 63 bc 63        --  . f . c . c
1345:263 | DONE dir | na 16 16 | 006626 | (4 bytes)   |         .byte 73, 77, 61, 70         
1345:263 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
1345:264 | DONE wsp | na 16 16 |        |             |
1345:265 | DONE lbl | na 16 16 | 00662a |             | h_dup                                
1345:266 | DONE dir | na 16 16 | 00662a | (2 bytes)   |         .byte 3, { PW + NC }         
1345:266 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1345:267 | DONE dir | na 16 16 | 00662c | (6 bytes)   |         .word h_swap, a_dup, 006246  
1345:267 | DONE dir | na 16 16 |        |             |                 1e 66 42 62 46 62        --  . f B b F b
1345:268 | DONE dir | na 16 16 | 006632 | (3 bytes)   |         .byte 64, 75, 70             
1345:268 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
1345:269 | DONE wsp | na 16 16 |        |             |
1345:270 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
1345:271 | DONE lbl | na 16 16 | 006635 |             | h_drop                               
1345:272 | DONE dir | na 16 16 | 006635 | (2 bytes)   |         .byte 4, { PW + NC }         
1345:272 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1345:273 | DONE dir | na 16 16 | 006637 | (6 bytes)   |         .word h_dup, a_drop, 006241  
1345:273 | DONE dir | na 16 16 |        |             |                 2a 66 3d 62 41 62        --  * f = b A b
1345:274 | DONE dir | na 16 16 | 00663d | (4 bytes)   |         .byte 64, 72, 6f, 70         
1345:274 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
1345:275 | DONE wsp | na 16 16 |        |             |
1345:276 | DONE cmt | na 16 16 |        |             | ; END
1346:000 | DONE wsp | na 16 16 |        |             |
1347:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1348:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
1349:000 | DONE wsp | na 16 16 |        |             |
1350:000 | DONE wsp | na 16 16 |        |             |
1351:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1352:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE
1353:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
1354:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
1355:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen. Consider moving this up to QUIT once we know what we are
1356:000 | DONE cmt | na 16 16 |        |             | ; doing
1357:000 | DONE lbl | na 16 16 | 006641 |             | compex                               
1358:000 | DONE lbl | na 16 16 | 006641 |             | compex_loop                          
1359:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
1360:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
1361:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
1362:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
1363:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE does not do.
1364:000 | DONE ins | na 16 16 | 006641 | 20 e2 62    |                 jsr 0062e2           ; ( 'string' -- addr u )
1365:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1366:000 | DONE cmt | na 16 16 |        |             |                 ; if PARSE-NAME returns 0 (empty line), no characters were left
1367:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
1368:000 | DONE ins | na 16 16 | 006644 | 98          |                 tya                  ; force flag check
1369:000 | DONE ins | na 16 16 | 006645 | f0 1d       |                 beq 006664           
1370:000 | DONE wsp | na 16 16 |        |             |
1371:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
1372:000 | DONE cmt | na 16 16 |        |             |                  ; internally (sorry, Garth).
1373:000 | DONE ins | na 16 16 | 006647 | 20 ab 66    |                 jsr 0066ab           ; returns ( addr u )
1374:000 | DONE wsp | na 16 16 |        |             |
1375:000 | DONE cmt | na 16 16 |        |             |                 ; If we got something that is not a zero, we go to FIND-NAME to
1376:000 | DONE cmt | na 16 16 |        |             |                 ; get the nt. Returns ( nt | 0 )
1377:000 | DONE ins | na 16 16 | 00664a | 20 5a 62    |                 jsr 00625a           
1378:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1379:000 | DONE wsp | na 16 16 |        |             |
1380:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
1381:000 | DONE ins | na 16 16 | 00664d | 98          |                 tya                  ; force flag check
1382:000 | DONE ins | na 16 16 | 00664e | d0 06       |                 bne 006656           
1383:000 | DONE wsp | na 16 16 |        |             |
1384:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
1385:000 | DONE wsp | na 16 16 |        |             |
1386:000 | DONE cmt | na 16 16 |        |             |                 ; Woe is us, all has failed
1387:000 | DONE ins | na 16 16 | 006650 | a9 75 68    |                 lda.# 006875         ; "Unknown word"
1388:000 | DONE ins | na 16 16 | 006653 | 4c 6b 66    |                 jmp 00666b           
1389:000 | DONE wsp | na 16 16 |        |             |
1390:000 | DONE lbl | na 16 16 | 006656 |             | compex_got_name_token                
1391:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if INTERPRETED OR COMPILED
1392:000 | DONE wsp | na 16 16 |        |             |
1393:000 | DONE cmt | na 16 16 |        |             |                 ; INTERPRET WORD
1394:000 | DONE cmt | na 16 16 |        |             |                 ; We arrive here with the nt as TOS. The xt of a word is
1395:000 | DONE cmt | na 16 16 |        |             |                 ; four bytes farther on, so this is a quick version of NAME>INT
1396:000 | DONE wsp | na 16 16 |        |             |
1397:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1398:000 | DONE ins | na 16 16 | 006656 | c8          |                 iny                  
1399:000 | DONE ins | na 16 16 | 006657 | c8          |                 iny                  
1400:000 | DONE ins | na 16 16 | 006658 | c8          |                 iny                  
1401:000 | DONE ins | na 16 16 | 006659 | c8          |                 iny                  
1402:000 | DONE ins | na 16 16 | 00665a | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1403:000 | DONE ins | na 16 16 | 00665d | a8          |                 tay                  
1404:000 | DONE wsp | na 16 16 |        |             |
1405:000 | DONE ins | na 16 16 | 00665e | 20 4a 62    |                 jsr 00624a           
1406:000 | DONE wsp | na 16 16 |        |             |
1407:000 | DONE cmt | na 16 16 |        |             |                 ; that's quite enough for this word, let's get the next one
1408:000 | DONE ins | na 16 16 | 006661 | 4c 41 66    |                 jmp 006641           
1409:000 | DONE wsp | na 16 16 |        |             |
1410:000 | DONE lbl | na 16 16 | 006664 |             | compex_line_done                     
1411:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
1412:000 | DONE ins | na 16 16 | 006664 | b4 02       |                 ldy.dx 02            
1413:000 | DONE ins | na 16 16 | 006666 | e8          |                 inx                  
1414:000 | DONE ins | na 16 16 | 006667 | e8          |                 inx                  
1415:000 | DONE ins | na 16 16 | 006668 | e8          |                 inx                  
1416:000 | DONE ins | na 16 16 | 006669 | e8          |                 inx                  
1417:000 | DONE wsp | na 16 16 |        |             |
1418:000 | DONE ins | na 16 16 | 00666a | 60          |                 rts                  
1419:000 | DONE wsp | na 16 16 |        |             |
1420:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1421:000 | DONE cmt | na 16 16 |        |             | ; Fatal error encountered: Take address of error string from A, print it and
1422:000 | DONE cmt | na 16 16 |        |             | ; then call abort
1423:000 | DONE lbl | na 16 16 | 00666b |             | error                                
1424:000 | DONE ins | na 16 16 | 00666b | 20 71 66    |                 jsr 006671           
1425:000 | DONE ins | na 16 16 | 00666e | 4c 93 60    |                 jmp 006093           
1426:000 | DONE wsp | na 16 16 |        |             |
1427:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1428:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
1429:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
1430:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
1431:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
1432:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
1433:000 | DONE lbl | na 16 16 | 006671 |             | print_string                         
1434:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1435:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1436:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
1437:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
1438:000 | DONE ins | na 16 16 | 006671 | da          |                 phx                  
1439:000 | DONE ins | na 16 16 | 006672 | aa          |                 tax                  ; x16 contains address of string
1440:000 | DONE lbl | na 16 16 | 006673 |             | @                                    
1441:000 | DONE ins | na 16 16 | 006673 | e2 20       |                 sep 20               
1441:001 | DONE ctl | na  8 16 |        |             |         .!a8
1442:000 | DONE ins | na  8 16 | 006675 | bd 00 00    |                 lda.x 0000           ; LDA $0000,X
1443:000 | DONE ins | na  8 16 | 006678 | f0 06       |                 beq 006680           
1444:000 | DONE ins | na  8 16 | 00667a | 20 30 60    |                 jsr 006030           
1445:000 | DONE ins | na  8 16 | 00667d | e8          |                 inx                  
1446:000 | DONE ins | na  8 16 | 00667e | 80 f3       |                 bra 006673           
1447:000 | DONE wsp | na  8 16 |        |             |
1448:000 | DONE lbl | na  8 16 | 006680 |             | print_string_done                    
1449:000 | DONE ins | na  8 16 | 006680 | a9 0a       |                 lda.# AscLF          ; should be CR on some systems
1450:000 | DONE ins | na  8 16 | 006682 | 20 30 60    |                 jsr 006030           
1451:000 | DONE ins | na  8 16 | 006685 | c2 20       |                 rep 20               
1451:001 | DONE ctl | na 16 16 |        |             |         .!a16
1452:000 | DONE ins | na 16 16 | 006687 | fa          |                 plx                  
1453:000 | DONE ins | na 16 16 | 006688 | 60          |                 rts                  
1454:000 | DONE wsp | na 16 16 |        |             |
1455:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1456:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
1457:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
1458:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
1459:000 | DONE lbl | na 16 16 | 006689 |             | byte_to_ascii                        
1460:000 | DONE ins | na 16 16 | 006689 | 29 ff 00    |                 and.# 00ff           
1461:000 | DONE ins | na 16 16 | 00668c | 48          |                 pha                  
1462:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
1463:000 | DONE ins | na 16 16 | 00668d | 4a          |                 lsr.a                
1464:000 | DONE ins | na 16 16 | 00668e | 4a          |                 lsr.a                
1465:000 | DONE ins | na 16 16 | 00668f | 4a          |                 lsr.a                
1466:000 | DONE ins | na 16 16 | 006690 | 4a          |                 lsr.a                
1467:000 | DONE ins | na 16 16 | 006691 | 20 99 66    |                 jsr 006699           
1468:000 | DONE wsp | na 16 16 |        |             |
1469:000 | DONE ins | na 16 16 | 006694 | 68          |                 pla                  
1470:000 | DONE ins | na 16 16 | 006695 | 20 99 66    |                 jsr 006699           
1471:000 | DONE wsp | na 16 16 |        |             |
1472:000 | DONE ins | na 16 16 | 006698 | 60          |                 rts                  
1473:000 | DONE wsp | na 16 16 |        |             |
1474:000 | DONE wsp | na 16 16 |        |             |
1475:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1476:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
1477:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
1478:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
1479:000 | DONE lbl | na 16 16 | 006699 |             | nibble_to_ascii                      
1480:000 | DONE ins | na 16 16 | 006699 | 29 0f 00    |                 and.# 000f           
1481:000 | DONE ins | na 16 16 | 00669c | 09 30 00    |                 ora.# 30             
1482:000 | DONE ins | na 16 16 | 00669f | c9 3a 00    |                 cmp.# 003a           ; '9' + 1
1483:000 | DONE ins | na 16 16 | 0066a2 | 90 03       |                 bcc 0066a7           
1484:000 | DONE ins | na 16 16 | 0066a4 | 69 06 00    |                 adc.# 0006           
1485:000 | DONE lbl | na 16 16 | 0066a7 |             | @                                    
1486:000 | DONE ins | na 16 16 | 0066a7 | 20 30 60    |                 jsr 006030           
1487:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1488:000 | DONE ins | na 16 16 | 0066aa | 60          |                 rts                  
1489:000 | DONE wsp | na 16 16 |        |             |
1490:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1491:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to upper case in place. Since we have to
1492:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
1493:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
1494:000 | DONE lbl | na 16 16 | 0066ab |             | string_to_uppercase                  
1495:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
1496:000 | DONE ins | na 16 16 | 0066ab | 60          |                 rts                  
1497:000 | DONE wsp | na 16 16 |        |             |
1498:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1499:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
1500:000 | DONE wsp | na 16 16 |        |             |
1501:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
1501:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1501:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
1501:003 | DONE cmt | na 16 16 |        |             | ; This version:  06. Feb 2017
1501:004 | DONE wsp | na 16 16 |        |             |
1501:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
1501:006 | DONE wsp | na 16 16 |        |             |
1501:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1501:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
1501:009 | DONE wsp | na 16 16 |        |             |
1501:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
1501:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
1501:012 | DONE cmt | na 16 16 |        |             | ; character
1501:013 | DONE wsp | na 16 16 |        |             |
1501:014 | DONE lbl | na 16 16 | 0066ac |             | s_title                              
1501:015 | DONE dir | na 16 16 | 0066ac | (32 bytes)  |         .byte AscLF, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, 68,  (...) 
1501:015 | DONE dir | na 16 16 |        |             |                 0a 4c 69 61 72 61 20 46  --  
 L i a r a   F
1501:015 | DONE dir | na 16 16 |        |             |                 6f 72 74 68 20 66 6f 72  --  o r t h   f o r
1501:015 | DONE dir | na 16 16 |        |             |                 20 74 68 65 20 57 36 35  --    t h e   W 6 5
1501:015 | DONE dir | na 16 16 |        |             |                 43 32 36 35 53 58 42 00  --  C 2 6 5 S X B .
1501:015 | DONE dir | na 16 16 |        |             |                                          -- 
1501:016 | DONE lbl | na 16 16 | 0066cc |             | s_version                            
1501:017 | DONE dir | na 16 16 | 0066cc | (30 bytes)  |         .byte 56, 65, 72, 73, 69, 6f, 6e, 20, 50, 52, 45, 2d, 41, (...) 
1501:017 | DONE dir | na 16 16 |        |             |                 56 65 72 73 69 6f 6e 20  --  V e r s i o n  
1501:017 | DONE dir | na 16 16 |        |             |                 50 52 45 2d 41 4c 50 48  --  P R E - A L P H
1501:017 | DONE dir | na 16 16 |        |             |                 41 20 36 2e 20 46 65 62  --  A   6 .   F e b
1501:017 | DONE dir | na 16 16 |        |             |                 20 32 30 31 37 00        --    2 0 1 7 .
1501:018 | DONE lbl | na 16 16 | 0066ea |             | s_author                             
1501:019 | DONE dir | na 16 16 | 0066ea | (45 bytes)  |         .byte 53, 63, 6f, 74, 20, 57, 2e, 20, 53, 74, 65, 76, 65, (...) 
1501:019 | DONE dir | na 16 16 |        |             |                 53 63 6f 74 20 57 2e 20  --  S c o t   W .  
1501:019 | DONE dir | na 16 16 |        |             |                 53 74 65 76 65 6e 73 6f  --  S t e v e n s o
1501:019 | DONE dir | na 16 16 |        |             |                 6e 20 3c 73 63 6f 74 2e  --  n   < s c o t .
1501:019 | DONE dir | na 16 16 |        |             |                 73 74 65 76 65 6e 73 6f  --  s t e v e n s o
1501:019 | DONE dir | na 16 16 |        |             |                 6e 40 67 6d 61 69 6c 2e  --  n @ g m a i l .
1501:019 | DONE dir | na 16 16 |        |             |                 63 6f 6d 3e 00           --  c o m > .
1501:020 | DONE lbl | na 16 16 | 006717 |             | s_disclaimer                         
1501:021 | DONE dir | na 16 16 | 006717 | (46 bytes)  |         .byte 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, 68, 20, 63, (...) 
1501:021 | DONE dir | na 16 16 |        |             |                 4c 69 61 72 61 20 46 6f  --  L i a r a   F o
1501:021 | DONE dir | na 16 16 |        |             |                 72 74 68 20 63 6f 6d 65  --  r t h   c o m e
1501:021 | DONE dir | na 16 16 |        |             |                 73 20 77 69 74 68 20 61  --  s   w i t h   a
1501:021 | DONE dir | na 16 16 |        |             |                 62 73 6f 6c 75 74 65 6c  --  b s o l u t e l
1501:021 | DONE dir | na 16 16 |        |             |                 79 20 4e 4f 20 57 41 52  --  y   N O   W A R
1501:021 | DONE dir | na 16 16 |        |             |                 52 41 4e 54 59 00        --  R A N T Y .
1501:022 | DONE lbl | na 16 16 | 006745 |             | s_typebye                            
1501:023 | DONE dir | na 16 16 | 006745 | (19 bytes)  |         .byte 54, 79, 70, 65, 20, 27, 62, 79, 65, 27, 20, 74, 6f, (...) 
1501:023 | DONE dir | na 16 16 |        |             |                 54 79 70 65 20 27 62 79  --  T y p e   ' b y
1501:023 | DONE dir | na 16 16 |        |             |                 65 27 20 74 6f 20 65 78  --  e '   t o   e x
1501:023 | DONE dir | na 16 16 |        |             |                 69 74 00                 --  i t .
1501:024 | DONE lbl | na 16 16 | 006758 |             | s_ok                                 
1501:025 | DONE dir | na 16 16 | 006758 | (4 bytes)   |         .byte 20, 6f, 6b, 0          ; note empty space at beginning
1501:025 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
1501:026 | DONE wsp | na 16 16 |        |             |
1501:027 | DONE wsp | na 16 16 |        |             |
1501:028 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1501:029 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
1501:030 | DONE wsp | na 16 16 |        |             |
1501:031 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
1501:032 | DONE cmt | na 16 16 |        |             | ; These are currently the same error strings as in Tali Forth
1501:033 | DONE wsp | na 16 16 |        |             |
1501:034 | DONE lbl | na 16 16 | 00675c |             | es_channel                           
1501:035 | DONE dir | na 16 16 | 00675c | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
1501:035 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
1501:035 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
1501:035 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
1501:035 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
1501:036 | DONE lbl | na 16 16 | 006776 |             | es_componly                          
1501:037 | DONE dir | na 16 16 | 006776 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
1501:037 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
1501:037 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
1501:037 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
1501:037 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
1501:037 | DONE dir | na 16 16 |        |             |                 00                       --  .
1501:038 | DONE lbl | na 16 16 | 006797 |             | es_defer                             
1501:039 | DONE dir | na 16 16 | 006797 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
1501:039 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
1501:039 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
1501:039 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
1501:039 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
1501:040 | DONE lbl | na 16 16 | 0067b4 |             | es_divzero                           
1501:041 | DONE dir | na 16 16 | 0067b4 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
1501:041 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
1501:041 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
1501:041 | DONE dir | na 16 16 |        |             |                 00                       --  .
1501:042 | DONE lbl | na 16 16 | 0067c5 |             | es_empty                             
1501:043 | DONE dir | na 16 16 | 0067c5 | (9 bytes)   |         .byte 20, 28, 65, 6d, 70, 74, 79, 29, 0 
1501:043 | DONE dir | na 16 16 |        |             |                 20 28 65 6d 70 74 79 29  --    ( e m p t y )
1501:043 | DONE dir | na 16 16 |        |             |                 00                       --  .
1501:044 | DONE lbl | na 16 16 | 0067ce |             | es_error                             
1501:045 | DONE dir | na 16 16 | 0067ce | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
1501:045 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
1501:045 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
1501:046 | DONE lbl | na 16 16 | 0067da |             | es_intonly                           
1501:047 | DONE dir | na 16 16 | 0067da | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
1501:047 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
1501:047 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
1501:047 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
1501:048 | DONE lbl | na 16 16 | 0067f0 |             | es_noname                            
1501:049 | DONE dir | na 16 16 | 0067f0 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
1501:049 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
1501:049 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
1501:049 | DONE dir | na 16 16 |        |             |                                          -- 
1501:050 | DONE lbl | na 16 16 | 006800 |             | es_radix                             
1501:051 | DONE dir | na 16 16 | 006800 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
1501:051 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
1501:051 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
1501:051 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
1501:052 | DONE lbl | na 16 16 | 006817 |             | es_refill1                           
1501:053 | DONE dir | na 16 16 | 006817 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
1501:053 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
1501:053 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
1501:053 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
1501:053 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
1501:053 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
1501:053 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
1501:054 | DONE lbl | na 16 16 | 006845 |             | es_refill2                           
1501:055 | DONE dir | na 16 16 | 006845 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
1501:055 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
1501:055 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
1501:055 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
1501:055 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
1501:055 | DONE dir | na 16 16 |        |             |                                          -- 
1501:056 | DONE lbl | na 16 16 | 006865 |             | es_underflow                         
1501:057 | DONE dir | na 16 16 | 006865 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
1501:057 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
1501:057 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
1501:057 | DONE dir | na 16 16 |        |             |                                          -- 
1501:058 | DONE lbl | na 16 16 | 006875 |             | es_syntax                            
1501:059 | DONE dir | na 16 16 | 006875 | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
1501:059 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
1501:059 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
1501:059 | DONE dir | na 16 16 |        |             |                                          -- 
1501:060 | DONE wsp | na 16 16 |        |             |
1501:061 | DONE wsp | na 16 16 |        |             |
1501:062 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1501:063 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
1501:064 | DONE wsp | na 16 16 |        |             |
1501:065 | DONE lbl | na 16 16 | 006885 |             | vt100_page                           
1501:066 | DONE dir | na 16 16 | 006885 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  ; clear screen
1501:066 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
1501:067 | DONE lbl | na 16 16 | 00688a |             | vt100_home                           
1501:068 | DONE dir | na 16 16 | 00688a | (4 bytes)   |         .byte AscESC, 5b, 48, 0      ; cursor home
1501:068 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
1501:069 | DONE wsp | na 16 16 |        |             |
1501:070 | DONE wsp | na 16 16 |        |             |
1501:071 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1501:072 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
1501:073 | DONE wsp | na 16 16 |        |             |
1501:074 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
1501:075 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
1501:076 | DONE wsp | na 16 16 |        |             |
1501:077 | DONE lbl | na 16 16 | 00688e |             | tests_prev_cmd                       
1501:078 | DONE dir | na 16 16 | 00688e | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
1501:078 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
1501:078 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
1501:078 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
1501:079 | DONE lbl | na 16 16 | 0068a1 |             | tests_next_cmd                       
1501:080 | DONE dir | na 16 16 | 0068a1 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
1501:080 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
1501:080 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
1501:081 | DONE wsp | na 16 16 |        |             |
1501:082 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1501:083 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
1501:084 | DONE wsp | na 16 16 |        |             |
1501:085 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
1501:086 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
1501:087 | DONE wsp | na 16 16 |        |             |
1501:088 | DONE lbl | na 16 16 | 0068b0 |             | alphastr                             
1501:089 | DONE dir | na 16 16 | 0068b0 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
1501:089 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
1501:089 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
1501:089 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
1501:089 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
1501:089 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
1502:000 | DONE wsp | na 16 16 |        |             |
1503:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1504:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
1505:000 | DONE wsp | na 16 16 |        |             |
1506:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
1507:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
1508:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
1509:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
1510:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
1511:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
1512:000 | DONE wsp | na 16 16 |        |             |
1513:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
1514:000 | DONE cmt | na 16 16 |        |             |                 ; tya
1515:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
1516:000 | DONE cmt | na 16 16 |        |             |                 ; xba
1517:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
1518:000 | DONE cmt | na 16 16 |        |             |                 ; tya
1519:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
1520:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
1521:000 | DONE cmt | na 16 16 |        |             |                 ; jsr a_cr
1522:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
1523:000 | DONE wsp | na 16 16 |        |             |
1524:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
1525:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
1526:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
1527:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
1528:000 | DONE wsp | na 16 16 |        |             |
1529:000 | DONE cmt | na 16 16 |        |             | ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1530:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
1531:000 | DONE ins | na 16 16 | 0068d3 | 98          |                 tya                  
1532:000 | DONE ins | na 16 16 | 0068d4 | 29 00 ff    |                 and.# 0ff00          
1533:000 | DONE ins | na 16 16 | 0068d7 | eb          |                 xba                  
1534:000 | DONE ins | na 16 16 | 0068d8 | 20 89 66    |                 jsr 006689           
1535:000 | DONE ins | na 16 16 | 0068db | 98          |                 tya                  
1536:000 | DONE ins | na 16 16 | 0068dc | 29 ff 00    |                 and.# 00ff           
1537:000 | DONE ins | na 16 16 | 0068df | 20 89 66    |                 jsr 006689           
1538:000 | DONE ins | na 16 16 | 0068e2 | 20 c9 61    |                 jsr 0061c9           
1539:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
1540:000 | DONE wsp | na 16 16 |        |             |
1541:000 | DONE wsp | na 16 16 |        |             |
1542:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1543:000 | DONE cmt | na 16 16 |        |             | ; END
1544:000 | DONE wsp | na 16 16 |        |             |
1545:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- a_2dup                      : 006100
- a_abort                     : 006093
- a_abs                       : 00610b
- a_accept                    : 006118
- a_bell                      : 00619c
- a_bl                        : 0061a3
- a_bye                       : 0061ab
- a_cold                      : 00605d
- a_comma                     : 0061ae
- a_count                     : 0061ba
- a_cr                        : 0061c9
- a_depth                     : 0061d0
- a_dot                       : 0061df
- a_dots                      : 0061f5
- a_drop                      : 00623d
- a_dup                       : 006242
- a_execute                   : 00624a
- a_find-name                 : 00625a
- a_here                      : 0062b1
- a_name>int                  : 0062b8
- a_name>string               : 0062c1
- a_nip                       : 0062d2
- a_one                       : 0060ee
- a_one-plus                  : 0060f6
- a_page                      : 0062d5
- a_parse                     : 006314
- a_parse-name                : 0062e2
- a_plus                      : 0060de
- a_quit                      : 00609b
- a_refill                    : 006347
- a_rot                       : 00637e
- a_source                    : 006387
- a_source-id                 : 006394
- a_space                     : 00639b
- a_spaces                    : 0063a2
- a_state                     : 0063af
- a_swap                      : 0063b7
- a_to-in                     : 0060d6
- a_true                      : 0063bd
- a_tuck                      : 0063c5
- a_two                       : 0060f8
- a_type                      : 0063ce
- a_words                     : 0063ef
- a_zero                      : 0060e6
- accept_bs                   : 00617e
- accept_eol                  : 006176
- accept_loop                 : 00612b
- accept_nonzero              : 00611e
- alphastr                    : 0068b0
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006689
- cib                         : 00020c
- ciblen                      : 00020e
- co                          : 000040
- compex                      : 006641
- compex_got_name_token       : 006656
- compex_line_done            : 006664
- compex_loop                 : 006641
- cp                          : 000200
- directpage                  : 000200
- directpage-multiple         : 007400
- dots_done                   : 006239
- dots_loop                   : 00621f
- dots_not_empty              : 006219
- dp                          : 000202
- dsp0                        : 0002f0
- error                       : 00666b
- es_channel                  : 00675c
- es_componly                 : 006776
- es_defer                    : 006797
- es_divzero                  : 0067b4
- es_empty                    : 0067c5
- es_error                    : 0067ce
- es_intonly                  : 0067da
- es_noname                   : 0067f0
- es_radix                    : 006800
- es_refill1                  : 006817
- es_refill2                  : 006845
- es_syntax                   : 006875
- es_underflow                : 006865
- execute_done                : 006258
- execute_ip                  : 006247
- find-name_all_chars         : 006288
- find-name_char_nomatch_8    : 006284
- find-name_chars             : 006279
- find-name_done              : 0062ae
- find-name_failure_16        : 0062ab
- find-name_loop              : 006264
- find-name_next_entry        : 00626d
- find-name_success           : 0062a5
- get_chr                     : 006041
- get_chr_wait                : 006046
- h_2dup                      : 0064f7
- h_abort                     : 006460
- h_abs                       : 006503
- h_accept                    : 0065d3
- h_bell                      : 00643b
- h_bl                        : 0064a0
- h_bye                       : 006417
- h_cold                      : 006422
- h_comma                     : 0065ca
- h_count                     : 006453
- h_cr                        : 006496
- h_depth                     : 006534
- h_dot                       : 0064db
- h_dots                      : 0064c5
- h_drop                      : 006635
- h_dup                       : 00662a
- h_execute                   : 006603
- h_false                     : 006554
- h_find-name                 : 006588
- h_here                      : 006612
- h_name>int                  : 006486
- h_name>string               : 0064e4
- h_nip                       : 0065ed
- h_one                       : 006576
- h_one-plus                  : 00654a
- h_page                      : 006447
- h_parse                     : 00646d
- h_parse-name                : 0065a7
- h_plus                      : 006541
- h_quit                      : 00647a
- h_refill                    : 006599
- h_rot                       : 0065f8
- h_source                    : 006526
- h_source-id                 : 0065b9
- h_space                     : 0064b8
- h_spaces                    : 0064aa
- h_state                     : 00650e
- h_swap                      : 00661e
- h_to-in                     : 00651b
- h_true                      : 006561
- h_tuck                      : 0065e1
- h_two                       : 00656d
- h_type                      : 0064cf
- h_words                     : 00642e
- h_zero                      : 00657f
- have_chr?                   : 006050
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000020
- insrc                       : 00020a
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- nc                          : 000010
- nibble_to_ascii             : 006699
- parse-name_empty_line       : 0062f4
- parse-name_found            : 006308
- parse-name_loop             : 0062e7
- parse_found_delimiter       : 006334
- parse_loop                  : 006327
- parse_reached_eol           : 006338
- physicalram                 : 007fff
- piblen                      : 000210
- print_string                : 006671
- print_string_done           : 006680
- put_chr                     : 006030
- put_chr_wait                : 006036
- pw                          : 000080
- quit_get_line               : 0060a5
- quit_ok                     : 0060cc
- quit_refill_successful      : 0060b3
- ram0                        : 000200
- refill_source_is_not_string : 006377
- refill_src_not_kbd          : 00636a
- reset_hardware              : 006000
- s_author                    : 0066ea
- s_disclaimer                : 006717
- s_ok                        : 006758
- s_title                     : 0066ac
- s_typebye                   : 006745
- s_version                   : 0066cc
- spaces_done                 : 0063aa
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006060
- state                       : 000214
- string_to_uppercase         : 0066ab
- tests_next_cmd              : 0068a1
- tests_prev_cmd              : 00688e
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 0063e8
- type_loop                   : 0063dc
- vt100_home                  : 00688a
- vt100_page                  : 006885
- words_loop                  : 0063f9
- z_2dup                      : 00610a
- z_abort                     : 0060d5
- z_abs                       : 006117
- z_accept                    : 00619b
- z_bell                      : 0061a2
- z_bl                        : 0061aa
- z_bye                       : 0061ad
- z_cold                      : 0060d5
- z_comma                     : 0061b9
- z_count                     : 0061c8
- z_cr                        : 0061cf
- z_depth                     : 0061de
- z_dot                       : 0061f4
- z_dots                      : 00623c
- z_drop                      : 006241
- z_dup                       : 006246
- z_execute                   : 006259
- z_find-name                 : 0062b0
- z_here                      : 0062b7
- z_name>int                  : 0062c0
- z_name>string               : 0062d1
- z_nip                       : 0062d4
- z_one                       : 0060f5
- z_one-plus                  : 0060f7
- z_page                      : 0062e1
- z_parse                     : 006346
- z_parse-name                : 006346
- z_plus                      : 0060e5
- z_quit                      : 0060d5
- z_refill                    : 00637d
- z_rot                       : 006386
- z_source                    : 006393
- z_source-id                 : 00639a
- z_space                     : 0063a1
- z_spaces                    : 0063ae
- z_state                     : 0063b6
- z_swap                      : 0063bc
- z_to-in                     : 0060dd
- z_true                      : 0063c4
- z_tuck                      : 0063cd
- z_two                       : 0060ff
- z_type                      : 0063ee
- z_words                     : 006416
- z_zero                      : 0060ed
