A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Fri Feb 17 17:39:07 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.08794 seconds
Code origin: 006000
Bytes of machine code: 3981

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 17. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: 1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE wsp | em  8  8 |        |             |
  16:074 | DONE wsp | em  8  8 |        |             |
  16:075 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:076 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:077 | DONE wsp | em  8  8 |        |             |
  16:078 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:080 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:089 | DONE wsp | em  8  8 |        |             |
  16:090 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:091 | DONE dir | em  8  8 |        |             |         .equ PW 0008                 Primitive (Native) Word
  16:092 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:093 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:094 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native (inline) Compile
  16:095 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             | 		; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 8e 63    |                 jsr 00638e           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  57:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  58:000 | DONE ins | na 16 16 | 00606a | a9 c4 6b    |                 lda.# 006bc4         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE wsp | na 16 16 |        |             |
  70:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  71:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  72:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  73:000 | DONE wsp | na 16 16 |        |             |
  74:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  75:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  76:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  77:000 | DONE wsp | na 16 16 |        |             |
  78:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  79:000 | DONE ins | na 16 16 | 006085 | 20 96 65    |                 jsr 006596           
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  82:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is rubbish, so we don't have to push it to the
  83:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  84:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  88:000 | DONE ins | na 16 16 | 00608c | a9 9e 6c    |                 lda.# 006c9e         
  89:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  90:000 | DONE ins | na 16 16 | 006091 | a0 47 01    |                 ldy.# 000147         length goes in TOS
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE ins | na 16 16 | 006094 | 20 63 64    |                 jsr 006463           
  93:000 | DONE wsp | na 16 16 |        |             |
  94:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to ABORT
  95:000 | DONE wsp | na 16 16 |        |             |
  96:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  97:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  98:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  99:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 100:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 101:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 102:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 103:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 103:001 | DONE ctl | na 16 16 |        |             |         .!a16
 104:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 105:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 106:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE wsp | na 16 16 |        |             |
 109:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 110:000 | DONE wsp | na 16 16 |        |             |
 111:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 112:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 113:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 114:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 115:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 116:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 117:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 118:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 119:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 120:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 123:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 124:000 | DONE ins | na 16 16 | 0060a3 | 9c 92 64    |                 stz 006492           
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 127:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 130:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 131:000 | DONE wsp | na 16 16 |        |             |
 132:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 133:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 134:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 135:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 136:000 | DONE wsp | na 16 16 |        |             |
 137:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 138:000 | DONE ins | na 16 16 | 0060ac | 20 3d 66    |                 jsr 00663d           ( -- f )
 139:000 | DONE wsp | na 16 16 |        |             |
 140:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 141:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 142:000 | DONE wsp | na 16 16 |        |             |
 143:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 145:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 146:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 147:000 | DONE ins | na 16 16 | 0060b2 | a9 b9 6e    |                 lda.# 006eb9         
 148:000 | DONE ins | na 16 16 | 0060b5 | 4c 64 6c    |                 jmp 006c64           
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE wsp | na 16 16 |        |             |
 151:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 152:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 153:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 154:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 155:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 156:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 157:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 158:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 159:000 | DONE wsp | na 16 16 |        |             |
 160:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 161:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 164:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 165:000 | DONE ins | na 16 16 | 0060be | 20 f2 6b    |                 jsr 006bf2           
 166:000 | DONE wsp | na 16 16 |        |             |
 167:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 168:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 169:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 170:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 171:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 172:000 | DONE wsp | na 16 16 |        |             |
 173:000 | DONE ins | na 16 16 | 0060c6 | a9 1f 6f    |                 lda.# 006f1f         
 174:000 | DONE ins | na 16 16 | 0060c9 | 4c 64 6c    |                 jmp 006c64           
 175:000 | DONE wsp | na 16 16 |        |             |
 176:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 177:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 178:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 179:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 180:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 181:000 | DONE wsp | na 16 16 |        |             |
 182:000 | DONE ins | na 16 16 | 0060d0 | a9 e5 6d    |                 lda.# 006de5         
 183:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 184:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 185:000 | DONE ins | na 16 16 | 0060d5 | a9 e9 6d    |                 lda.# 006de9         fall through to quit_print
 186:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 187:000 | DONE ins | na 16 16 | 0060d8 | 20 6a 6c    |                 jsr 006c6a           
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, guys. Now get the next one
 190:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 191:000 | DONE wsp | na 16 16 |        |             |
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 194:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 194:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 195:000 | DONE wsp | na 16 16 |        |             |
 196:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 197:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 198:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 199:000 | DONE lbl | na 16 16 | 0060df |             | xt_to-in                             
 200:000 | DONE ins | na 16 16 | 0060df | ca          |                 dex                  
 201:000 | DONE ins | na 16 16 | 0060e0 | ca          |                 dex                  
 202:000 | DONE ins | na 16 16 | 0060e1 | 94 00       |                 sty.dx 00            
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | a0 12 02    |                 ldy.# 000212         >IN
 205:000 | DONE lbl | na 16 16 | 0060e6 |             | z_to-in                              
 205:001 | DONE ins | na 16 16 | 0060e6 | 60          |                 rts                  
 206:000 | DONE wsp | na 16 16 |        |             |
 207:000 | DONE wsp | na 16 16 |        |             |
 208:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 209:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 210:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 211:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 212:000 | DONE cmt | na 16 16 |        |             | ; aligned
 213:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 214:000 | DONE cmt | na 16 16 |        |             | ;               tya
 215:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 216:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 217:000 | DONE cmt | na 16 16 |        |             | ;               iny
 218:000 | DONE cmt | na 16 16 |        |             | ;               iny
 219:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 220:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 221:000 | DONE cmt | na 16 16 |        |             | ;               inx
 222:000 | DONE cmt | na 16 16 |        |             | ;               inx
 223:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 224:000 | DONE lbl | na 16 16 | 0060e7 |             | xt_comma                             
 225:000 | DONE ins | na 16 16 | 0060e7 | 98          |                 tya                  
 226:000 | DONE ins | na 16 16 | 0060e8 | 92 00       |                 sta.di 000200        STA (CP)
 227:000 | DONE ins | na 16 16 | 0060ea | e6 00       |                 inc.d 000200         
 228:000 | DONE ins | na 16 16 | 0060ec | e6 00       |                 inc.d 000200         
 229:000 | DONE wsp | na 16 16 |        |             |
 230:000 | DONE ins | na 16 16 | 0060ee | b4 00       |                 ldy.dx 00            
 231:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 232:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE lbl | na 16 16 | 0060f2 |             | z_comma                              
 234:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 235:000 | DONE wsp | na 16 16 |        |             |
 236:000 | DONE wsp | na 16 16 |        |             |
 237:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 238:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 239:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 240:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 241:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_colon                             
 242:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 243:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 244:000 | DONE ins | na 16 16 | 0060f3 | a5 14       |                 lda.d 000214         
 245:000 | DONE ins | na 16 16 | 0060f5 | f0 06       |                 beq 0060fd           
 246:000 | DONE wsp | na 16 16 |        |             |
 247:000 | DONE ins | na 16 16 | 0060f7 | a9 07 6f    |                 lda.# 006f07         
 248:000 | DONE ins | na 16 16 | 0060fa | 4c 64 6c    |                 jmp 006c64           
 249:000 | DONE lbl | na 16 16 | 0060fd |             | @                                    
 250:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 251:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 252:000 | DONE ins | na 16 16 | 0060fd | e6 14       |                 inc.d 000214         
 253:000 | DONE wsp | na 16 16 |        |             |
 254:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 255:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 256:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 257:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 258:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 259:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 260:000 | DONE ins | na 16 16 | 0060ff | a5 02       |                 lda.d 000202         
 261:000 | DONE ins | na 16 16 | 006101 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE ins | na 16 16 | 006102 | 20 1b 63    |                 jsr 00631b           
 264:000 | DONE wsp | na 16 16 |        |             |
 265:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 266:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 267:000 | DONE ins | na 16 16 | 006105 | a5 02       |                 lda.d 000202         
 268:000 | DONE ins | na 16 16 | 006107 | 85 1e       |                 sta.d 00021e         
 269:000 | DONE ins | na 16 16 | 006109 | 68          |                 pla                  
 270:000 | DONE ins | na 16 16 | 00610a | 85 02       |                 sta.d 000202         
 271:000 | DONE wsp | na 16 16 |        |             |
 272:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 273:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 274:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 275:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 276:000 | DONE ins | na 16 16 | 00610c | a5 00       |                 lda.d 000200         
 277:000 | DONE ins | na 16 16 | 00610e | 38          |                 sec                  
 278:000 | DONE ins | na 16 16 | 00610f | e9 03 00    |                 sbc.# 0003           
 279:000 | DONE ins | na 16 16 | 006112 | 85 00       |                 sta.d 000200         
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE lbl | na 16 16 | 006114 |             | z_colon                              
 281:001 | DONE ins | na 16 16 | 006114 | 60          |                 rts                  
 282:000 | DONE wsp | na 16 16 |        |             |
 283:000 | DONE wsp | na 16 16 |        |             |
 284:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 285:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 286:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 287:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 288:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 289:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 290:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 291:000 | DONE lbl | na 16 16 | 006115 |             | xt_semicolon                         
 292:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 293:000 | DONE ins | na 16 16 | 006115 | 84 06       |                 sty.d 000206         
 294:000 | DONE wsp | na 16 16 |        |             |
 295:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 296:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 297:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 298:000 | DONE ins | na 16 16 | 006117 | a0 06 00    |                 ldy.# 0006           
 299:000 | DONE ins | na 16 16 | 00611a | a5 00       |                 lda.d 000200         
 300:000 | DONE ins | na 16 16 | 00611c | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 301:000 | DONE wsp | na 16 16 |        |             |
 302:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 303:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 304:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 305:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 306:000 | DONE ins | na 16 16 | 00611e | a9 60 00    |                 lda.# 60             opcode for RTS
 307:000 | DONE ins | na 16 16 | 006121 | 92 00       |                 sta.di 000200        STA (CP)
 308:000 | DONE ins | na 16 16 | 006123 | e6 00       |                 inc.d 000200         MSB will be overwritten
 309:000 | DONE wsp | na 16 16 |        |             |
 310:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 311:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 312:000 | DONE ins | na 16 16 | 006125 | a5 1e       |                 lda.d 00021e         
 313:000 | DONE ins | na 16 16 | 006127 | 85 02       |                 sta.d 000202         
 314:000 | DONE wsp | na 16 16 |        |             |
 315:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 316:000 | DONE ins | na 16 16 | 006129 | a4 06       |                 ldy.d 000206         
 317:000 | DONE wsp | na 16 16 |        |             |
 318:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 319:000 | DONE ins | na 16 16 | 00612b | 64 14       |                 stz.d 000214         
 320:000 | DONE wsp | na 16 16 |        |             |
 321:000 | DONE lbl | na 16 16 | 00612d |             | z_semicolon                          
 321:001 | DONE ins | na 16 16 | 00612d | 60          |                 rts                  
 322:000 | DONE wsp | na 16 16 |        |             |
 323:000 | DONE wsp | na 16 16 |        |             |
 324:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 325:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 326:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and so can be pretty
 327:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 328:000 | DONE lbl | na 16 16 | 00612e |             | xt_question                          
 329:000 | DONE ins | na 16 16 | 00612e | 20 3f 61    |                 jsr 00613f           
 330:000 | DONE ins | na 16 16 | 006131 | 20 c6 63    |                 jsr 0063c6           
 331:000 | DONE wsp | na 16 16 |        |             |
 332:000 | DONE lbl | na 16 16 | 006134 |             | z_question                           
 332:001 | DONE ins | na 16 16 | 006134 | 60          |                 rts                  
 333:000 | DONE wsp | na 16 16 |        |             |
 334:000 | DONE wsp | na 16 16 |        |             |
 335:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 336:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 337:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 338:000 | DONE lbl | na 16 16 | 006135 |             | xt_store                             
 339:000 | DONE ins | na 16 16 | 006135 | b5 00       |                 lda.dx 00            NOS has value
 340:000 | DONE ins | na 16 16 | 006137 | 99 00 00    |                 sta.y 0000           
 341:000 | DONE ins | na 16 16 | 00613a | e8          |                 inx                  
 342:000 | DONE ins | na 16 16 | 00613b | e8          |                 inx                  
 343:000 | DONE ins | na 16 16 | 00613c | e8          |                 inx                  
 344:000 | DONE ins | na 16 16 | 00613d | e8          |                 inx                  
 345:000 | DONE wsp | na 16 16 |        |             |
 346:000 | DONE lbl | na 16 16 | 00613e |             | z_store                              
 346:001 | DONE ins | na 16 16 | 00613e | 60          |                 rts                  
 347:000 | DONE wsp | na 16 16 |        |             |
 348:000 | DONE wsp | na 16 16 |        |             |
 349:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 350:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 351:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 352:000 | DONE lbl | na 16 16 | 00613f |             | xt_fetch                             
 353:000 | DONE ins | na 16 16 | 00613f | b9 00 00    |                 lda.y 0000           
 354:000 | DONE ins | na 16 16 | 006142 | a8          |                 tay                  
 355:000 | DONE wsp | na 16 16 |        |             |
 356:000 | DONE lbl | na 16 16 | 006143 |             | z_fetch                              
 356:001 | DONE ins | na 16 16 | 006143 | 60          |                 rts                  
 357:000 | DONE wsp | na 16 16 |        |             |
 358:000 | DONE wsp | na 16 16 |        |             |
 359:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 360:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( -- ) X bytes / X cycles
 361:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 362:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word
 363:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 364:000 | DONE lbl | na 16 16 | 006144 |             | xt_bracket-char                      
 365:000 | DONE ins | na 16 16 | 006144 | 20 b7 62    |                 jsr 0062b7           
 366:000 | DONE ins | na 16 16 | 006147 | 20 13 65    |                 jsr 006513           
 367:000 | DONE wsp | na 16 16 |        |             |
 368:000 | DONE lbl | na 16 16 | 00614a |             | z_bracket-char                       
 368:001 | DONE ins | na 16 16 | 00614a | 60          |                 rts                  
 369:000 | DONE wsp | na 16 16 |        |             |
 370:000 | DONE wsp | na 16 16 |        |             |
 371:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 372:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 373:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 374:000 | DONE lbl | na 16 16 | 00614b |             | xt_leftbracket                       
 375:000 | DONE ins | na 16 16 | 00614b | 64 14       |                 stz.d 000214         
 376:000 | DONE lbl | na 16 16 | 00614d |             | z_leftbracket                        
 376:001 | DONE ins | na 16 16 | 00614d | 60          |                 rts                  
 377:000 | DONE wsp | na 16 16 |        |             |
 378:000 | DONE wsp | na 16 16 |        |             |
 379:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 380:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 381:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 382:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 383:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 384:000 | DONE lbl | na 16 16 | 00614e |             | xt_rightbracket                      
 385:000 | DONE ins | na 16 16 | 00614e | a9 01 00    |                 lda.# 0001           
 386:000 | DONE ins | na 16 16 | 006151 | 85 14       |                 sta.d 000214         
 387:000 | DONE wsp | na 16 16 |        |             |
 388:000 | DONE lbl | na 16 16 | 006153 |             | z_rightbracket                       
 388:001 | DONE ins | na 16 16 | 006153 | 60          |                 rts                  
 389:000 | DONE wsp | na 16 16 |        |             |
 390:000 | DONE wsp | na 16 16 |        |             |
 391:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 392:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 393:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 394:000 | DONE lbl | na 16 16 | 006154 |             | xt_plus                              
 395:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 396:000 | DONE ins | na 16 16 | 006154 | 98          |                 tya                  
 397:000 | DONE ins | na 16 16 | 006155 | 18          |                 clc                  
 398:000 | DONE ins | na 16 16 | 006156 | 75 00       |                 adc.dx 00            
 399:000 | DONE ins | na 16 16 | 006158 | a8          |                 tay                  
 400:000 | DONE ins | na 16 16 | 006159 | e8          |                 inx                  
 401:000 | DONE ins | na 16 16 | 00615a | e8          |                 inx                  
 402:000 | DONE wsp | na 16 16 |        |             |
 403:000 | DONE lbl | na 16 16 | 00615b |             | z_plus                               
 403:001 | DONE ins | na 16 16 | 00615b | 60          |                 rts                  
 404:000 | DONE wsp | na 16 16 |        |             |
 405:000 | DONE wsp | na 16 16 |        |             |
 406:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 407:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 408:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 409:000 | DONE lbl | na 16 16 | 00615c |             | xt_minus                             
 410:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 411:000 | DONE ins | na 16 16 | 00615c | 98          |                 tya                  
 412:000 | DONE ins | na 16 16 | 00615d | 49 ff ff    |                 eor.# 0ffff          
 413:000 | DONE wsp | na 16 16 |        |             |
 414:000 | DONE ins | na 16 16 | 006160 | 38          |                 sec                  not CLC
 415:000 | DONE ins | na 16 16 | 006161 | 75 00       |                 adc.dx 00            
 416:000 | DONE wsp | na 16 16 |        |             |
 417:000 | DONE ins | na 16 16 | 006163 | a8          |                 tay                  
 418:000 | DONE ins | na 16 16 | 006164 | e8          |                 inx                  
 419:000 | DONE ins | na 16 16 | 006165 | e8          |                 inx                  
 420:000 | DONE wsp | na 16 16 |        |             |
 421:000 | DONE lbl | na 16 16 | 006166 |             | z_minus                              
 421:001 | DONE ins | na 16 16 | 006166 | 60          |                 rts                  
 422:000 | DONE wsp | na 16 16 |        |             |
 423:000 | DONE wsp | na 16 16 |        |             |
 424:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 425:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 426:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 427:000 | DONE lbl | na 16 16 | 006167 |             | xt_zero                              
 428:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 429:000 | DONE ins | na 16 16 | 006167 | ca          |                 dex                  
 430:000 | DONE ins | na 16 16 | 006168 | ca          |                 dex                  
 431:000 | DONE ins | na 16 16 | 006169 | 94 00       |                 sty.dx 00            
 432:000 | DONE ins | na 16 16 | 00616b | a0 00 00    |                 ldy.# 0000           
 433:000 | DONE wsp | na 16 16 |        |             |
 434:000 | DONE lbl | na 16 16 | 00616e |             | z_zero                               
 434:001 | DONE ins | na 16 16 | 00616e | 60          |                 rts                  
 435:000 | DONE wsp | na 16 16 |        |             |
 436:000 | DONE wsp | na 16 16 |        |             |
 437:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 438:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 439:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 440:000 | DONE lbl | na 16 16 | 00616f |             | xt_one                               
 441:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 442:000 | DONE ins | na 16 16 | 00616f | ca          |                 dex                  
 443:000 | DONE ins | na 16 16 | 006170 | ca          |                 dex                  
 444:000 | DONE ins | na 16 16 | 006171 | 94 00       |                 sty.dx 00            
 445:000 | DONE ins | na 16 16 | 006173 | a0 01 00    |                 ldy.# 0001           
 446:000 | DONE wsp | na 16 16 |        |             |
 447:000 | DONE lbl | na 16 16 | 006176 |             | z_one                                
 447:001 | DONE ins | na 16 16 | 006176 | 60          |                 rts                  
 448:000 | DONE wsp | na 16 16 |        |             |
 449:000 | DONE wsp | na 16 16 |        |             |
 450:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 451:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 452:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 453:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 454:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 455:000 | DONE lbl | na 16 16 | 006177 |             | xt_one-minus                         
 456:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 457:000 | DONE ins | na 16 16 | 006177 | 88          |                 dey                  
 458:000 | DONE lbl | na 16 16 | 006178 |             | z_one-minus                          
 458:001 | DONE ins | na 16 16 | 006178 | 60          |                 rts                  
 459:000 | DONE wsp | na 16 16 |        |             |
 460:000 | DONE wsp | na 16 16 |        |             |
 461:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 462:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 463:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 464:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 465:000 | DONE lbl | na 16 16 | 006179 |             | xt_one-plus                          
 466:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 467:000 | DONE ins | na 16 16 | 006179 | c8          |                 iny                  
 468:000 | DONE lbl | na 16 16 | 00617a |             | z_one-plus                           
 468:001 | DONE ins | na 16 16 | 00617a | 60          |                 rts                  
 469:000 | DONE wsp | na 16 16 |        |             |
 470:000 | DONE wsp | na 16 16 |        |             |
 471:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 472:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 473:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 474:000 | DONE lbl | na 16 16 | 00617b |             | xt_two                               
 475:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 476:000 | DONE ins | na 16 16 | 00617b | ca          |                 dex                  
 477:000 | DONE ins | na 16 16 | 00617c | ca          |                 dex                  
 478:000 | DONE ins | na 16 16 | 00617d | 94 00       |                 sty.dx 00            
 479:000 | DONE ins | na 16 16 | 00617f | a0 02 00    |                 ldy.# 0002           
 480:000 | DONE wsp | na 16 16 |        |             |
 481:000 | DONE lbl | na 16 16 | 006182 |             | z_two                                
 481:001 | DONE ins | na 16 16 | 006182 | 60          |                 rts                  
 482:000 | DONE wsp | na 16 16 |        |             |
 483:000 | DONE wsp | na 16 16 |        |             |
 484:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 485:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 486:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 487:000 | DONE lbl | na 16 16 | 006183 |             | xt_two-star                          
 488:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 489:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 490:000 | DONE ins | na 16 16 | 006183 | 98          |                 tya                  
 491:000 | DONE ins | na 16 16 | 006184 | 0a          |                 asl.a                
 492:000 | DONE ins | na 16 16 | 006185 | a8          |                 tay                  
 493:000 | DONE wsp | na 16 16 |        |             |
 494:000 | DONE lbl | na 16 16 | 006186 |             | z_two-star                           
 494:001 | DONE ins | na 16 16 | 006186 | 60          |                 rts                  
 495:000 | DONE wsp | na 16 16 |        |             |
 496:000 | DONE wsp | na 16 16 |        |             |
 497:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 498:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
 499:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
 500:000 | DONE lbl | na 16 16 | 006187 |             | xt_2drop                             
 501:000 | DONE ins | na 16 16 | 006187 | b4 02       |                 ldy.dx 02            
 502:000 | DONE ins | na 16 16 | 006189 | e8          |                 inx                  
 503:000 | DONE ins | na 16 16 | 00618a | e8          |                 inx                  
 504:000 | DONE ins | na 16 16 | 00618b | e8          |                 inx                  
 505:000 | DONE ins | na 16 16 | 00618c | e8          |                 inx                  
 506:000 | DONE wsp | na 16 16 |        |             |
 507:000 | DONE lbl | na 16 16 | 00618d |             | z_2drop                              
 507:001 | DONE ins | na 16 16 | 00618d | 60          |                 rts                  
 508:000 | DONE wsp | na 16 16 |        |             |
 509:000 | DONE wsp | na 16 16 |        |             |
 510:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 511:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 512:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 513:000 | DONE wsp | na 16 16 |        |             |
 514:000 | DONE lbl | na 16 16 | 00618e |             | xt_2dup                              
 515:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 516:000 | DONE ins | na 16 16 | 00618e | ca          |                 dex                  
 517:000 | DONE ins | na 16 16 | 00618f | ca          |                 dex                  
 518:000 | DONE ins | na 16 16 | 006190 | ca          |                 dex                  
 519:000 | DONE ins | na 16 16 | 006191 | ca          |                 dex                  
 520:000 | DONE ins | na 16 16 | 006192 | 94 02       |                 sty.dx 02            
 521:000 | DONE ins | na 16 16 | 006194 | b5 04       |                 lda.dx 04            
 522:000 | DONE ins | na 16 16 | 006196 | 95 00       |                 sta.dx 00            
 523:000 | DONE wsp | na 16 16 |        |             |
 524:000 | DONE lbl | na 16 16 | 006198 |             | z_2dup                               
 524:001 | DONE ins | na 16 16 | 006198 | 60          |                 rts                  
 525:000 | DONE wsp | na 16 16 |        |             |
 526:000 | DONE wsp | na 16 16 |        |             |
 527:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 528:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 529:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 530:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 531:000 | DONE lbl | na 16 16 | 006199 |             | xt_tick                              
 532:000 | DONE ins | na 16 16 | 006199 | 20 a3 65    |                 jsr 0065a3           ( -- addr u )
 533:000 | DONE wsp | na 16 16 |        |             |
 534:000 | DONE cmt | na 16 16 |        |             | 		; if we got a zero, complain and abort
 535:000 | DONE ins | na 16 16 | 00619c | 98          |                 tya                  force flag check
 536:000 | DONE ins | na 16 16 | 00619d | d0 06       |                 bne 0061a5           
 537:000 | DONE wsp | na 16 16 |        |             |
 538:000 | DONE ins | na 16 16 | 00619f | a9 92 6e    |                 lda.# 006e92         
 539:000 | DONE ins | na 16 16 | 0061a2 | 4c 64 6c    |                 jmp 006c64           
 540:000 | DONE wsp | na 16 16 |        |             |
 541:000 | DONE lbl | na 16 16 | 0061a5 |             | tick_have_word                       
 542:000 | DONE ins | na 16 16 | 0061a5 | 20 a0 64    |                 jsr 0064a0           ( addr u -- nt)
 543:000 | DONE ins | na 16 16 | 0061a8 | 98          |                 tya                  force flag check
 544:000 | DONE wsp | na 16 16 |        |             |
 545:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 546:000 | DONE ins | na 16 16 | 0061a9 | d0 06       |                 bne 0061b1           
 547:000 | DONE wsp | na 16 16 |        |             |
 548:000 | DONE ins | na 16 16 | 0061ab | a9 2f 6f    |                 lda.# 006f2f         
 549:000 | DONE ins | na 16 16 | 0061ae | 4c 64 6c    |                 jmp 006c64           
 550:000 | DONE wsp | na 16 16 |        |             |
 551:000 | DONE lbl | na 16 16 | 0061b1 |             | tick_have_nt                         
 552:000 | DONE ins | na 16 16 | 0061b1 | 20 58 65    |                 jsr 006558           ( nt -- xt )
 553:000 | DONE wsp | na 16 16 |        |             |
 554:000 | DONE lbl | na 16 16 | 0061b4 |             | z_tick                               
 554:001 | DONE ins | na 16 16 | 0061b4 | 60          |                 rts                  
 555:000 | DONE wsp | na 16 16 |        |             |
 556:000 | DONE wsp | na 16 16 |        |             |
 557:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 558:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 559:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 560:000 | DONE lbl | na 16 16 | 0061b5 |             | xt_abs                               
 561:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 562:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 563:000 | DONE ins | na 16 16 | 0061b5 | 98          |                 tya                  force flag test
 564:000 | DONE ins | na 16 16 | 0061b6 | 10 05       |                 bpl 0061bd           positive number is easy
 565:000 | DONE wsp | na 16 16 |        |             |
 566:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 567:000 | DONE ins | na 16 16 | 0061b8 | 49 ff ff    |                 eor.# 0ffff          
 568:000 | DONE ins | na 16 16 | 0061bb | 1a          |                 inc.a                
 569:000 | DONE ins | na 16 16 | 0061bc | a8          |                 tay                  
 570:000 | DONE wsp | na 16 16 |        |             |
 571:000 | DONE lbl | na 16 16 | 0061bd |             | z_abs                                
 571:001 | DONE ins | na 16 16 | 0061bd | 60          |                 rts                  
 572:000 | DONE wsp | na 16 16 |        |             |
 573:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 574:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 575:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 576:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 577:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 578:000 | DONE lbl | na 16 16 | 0061be |             | xt_accept                            
 579:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 580:000 | DONE ins | na 16 16 | 0061be | 98          |                 tya                  force flag test
 581:000 | DONE ins | na 16 16 | 0061bf | d0 03       |                 bne 0061c4           
 582:000 | DONE wsp | na 16 16 |        |             |
 583:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 584:000 | DONE ins | na 16 16 | 0061c1 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
 585:000 | DONE ins | na 16 16 | 0061c2 | e8          |                 inx                  
 586:000 | DONE wsp | na 16 16 |        |             |
 587:000 | DONE ins | na 16 16 | 0061c3 | 60          |                 rts                  
 588:000 | DONE wsp | na 16 16 |        |             |
 589:000 | DONE lbl | na 16 16 | 0061c4 |             | accept_nonzero                       
 590:000 | DONE ins | na 16 16 | 0061c4 | b5 00       |                 lda.dx 00            address of buffer is NOS
 591:000 | DONE ins | na 16 16 | 0061c6 | 85 16       |                 sta.d 000216         
 592:000 | DONE ins | na 16 16 | 0061c8 | e8          |                 inx                  NIP
 593:000 | DONE ins | na 16 16 | 0061c9 | e8          |                 inx                  
 594:000 | DONE wsp | na 16 16 |        |             |
 595:000 | DONE ins | na 16 16 | 0061ca | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
 596:000 | DONE ins | na 16 16 | 0061cc | a0 00 00    |                 ldy.# 0000           Use Y as counter
 597:000 | DONE ins | na 16 16 | 0061cf | e2 20       |                 sep 20               
 597:001 | DONE ctl | na  8 16 |        |             |         .!a8
 598:000 | DONE wsp | na  8 16 |        |             |
 599:000 | DONE lbl | na  8 16 | 0061d1 |             | accept_loop                          
 600:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 601:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
 602:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 603:000 | DONE ins | na  8 16 | 0061d1 | 20 47 60    |                 jsr 006047           
 604:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 605:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
 606:000 | DONE ins | na  8 16 | 0061d4 | c9 0a       |                 cmp.# AscLF          
 607:000 | DONE ins | na  8 16 | 0061d6 | f0 44       |                 beq 00621c           
 608:000 | DONE ins | na  8 16 | 0061d8 | c9 0d       |                 cmp.# AscCR          
 609:000 | DONE ins | na  8 16 | 0061da | f0 40       |                 beq 00621c           
 610:000 | DONE wsp | na  8 16 |        |             |
 611:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
 612:000 | DONE ins | na  8 16 | 0061dc | c9 08       |                 cmp.# AscBS          
 613:000 | DONE ins | na  8 16 | 0061de | f0 44       |                 beq 006224           
 614:000 | DONE ins | na  8 16 | 0061e0 | c9 7f       |                 cmp.# AscDEL         
 615:000 | DONE ins | na  8 16 | 0061e2 | f0 40       |                 beq 006224           
 616:000 | DONE wsp | na  8 16 |        |             |
 617:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
 618:000 | DONE ins | na  8 16 | 0061e4 | c9 03       |                 cmp.# AscCC          
 619:000 | DONE ins | na  8 16 | 0061e6 | d0 03       |                 bne 0061eb           
 620:000 | DONE ins | na  8 16 | 0061e8 | 4c 97 60    |                 jmp 006097           
 621:000 | DONE lbl | na  8 16 | 0061eb |             | @                                    
 622:000 | DONE ins | na  8 16 | 0061eb | c9 1b       |                 cmp.# AscESC         
 623:000 | DONE ins | na  8 16 | 0061ed | d0 03       |                 bne 0061f2           
 624:000 | DONE ins | na  8 16 | 0061ef | 4c 97 60    |                 jmp 006097           
 625:000 | DONE lbl | na  8 16 | 0061f2 |             | @                                    
 626:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
 627:000 | DONE ins | na  8 16 | 0061f2 | c9 10       |                 cmp.# AscCP          
 628:000 | DONE ins | na  8 16 | 0061f4 | d0 0c       |                 bne 006202           
 629:000 | DONE ins | na  8 16 | 0061f6 | c2 20       |                 rep 20               
 629:001 | DONE ctl | na 16 16 |        |             |         .!a16
 630:000 | DONE ins | na 16 16 | 0061f8 | a9 48 6f    |                 lda.# 006f48         
 631:000 | DONE ins | na 16 16 | 0061fb | 20 6a 6c    |                 jsr 006c6a           
 632:000 | DONE ins | na 16 16 | 0061fe | e2 20       |                 sep 20               
 632:001 | DONE ctl | na  8 16 |        |             |         .!a8
 633:000 | DONE ins | na  8 16 | 006200 | 80 cf       |                 bra 0061d1           
 634:000 | DONE lbl | na  8 16 | 006202 |             | @                                    
 635:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
 636:000 | DONE ins | na  8 16 | 006202 | c9 0e       |                 cmp.# AscCN          
 637:000 | DONE ins | na  8 16 | 006204 | d0 0c       |                 bne 006212           
 638:000 | DONE ins | na  8 16 | 006206 | c2 20       |                 rep 20               
 638:001 | DONE ctl | na 16 16 |        |             |         .!a16
 639:000 | DONE ins | na 16 16 | 006208 | a9 5b 6f    |                 lda.# 006f5b         
 640:000 | DONE ins | na 16 16 | 00620b | 20 6a 6c    |                 jsr 006c6a           
 641:000 | DONE ins | na 16 16 | 00620e | e2 20       |                 sep 20               
 641:001 | DONE ctl | na  8 16 |        |             |         .!a8
 642:000 | DONE ins | na  8 16 | 006210 | 80 bf       |                 bra 0061d1           
 643:000 | DONE wsp | na  8 16 |        |             |
 644:000 | DONE lbl | na  8 16 | 006212 |             | @                                    
 645:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
 646:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
 647:000 | DONE ins | na  8 16 | 006212 | 20 36 60    |                 jsr 006036           echo character
 648:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 649:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 650:000 | DONE wsp | na  8 16 |        |             |
 651:000 | DONE ins | na  8 16 | 006215 | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
 652:000 | DONE ins | na  8 16 | 006217 | c8          |                 iny                  
 653:000 | DONE ins | na  8 16 | 006218 | c4 18       |                 cpy.d 000218         reached character limit?
 654:000 | DONE ins | na  8 16 | 00621a | d0 b5       |                 bne 0061d1           fall thru if buffer limit reached
 655:000 | DONE wsp | na  8 16 |        |             |
 656:000 | DONE lbl | na  8 16 | 00621c |             | accept_eol                           
 657:000 | DONE ins | na  8 16 | 00621c | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
 658:000 | DONE ins | na  8 16 | 00621e | c2 20       |                 rep 20               
 658:001 | DONE ctl | na 16 16 |        |             |         .!a16
 659:000 | DONE ins | na 16 16 | 006220 | 20 ee 66    |                 jsr 0066ee           print final space
 660:000 | DONE ins | na 16 16 | 006223 | 60          |                 rts                  this is the actual return of the routine
 661:000 | DONE wsp | na 16 16 |        |             |
 662:000 | DONE lbl | na 16 16 | 006224 |             | accept_bs                            
 663:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 664:000 | DONE ins | na  8 16 | 006224 | c0 00 00    |                 cpy.# 0000           buffer empty?
 665:000 | DONE ins | na  8 16 | 006227 | d0 06       |                 bne 00622f           
 666:000 | DONE wsp | na  8 16 |        |             |
 667:000 | DONE ins | na  8 16 | 006229 | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
 668:000 | DONE ins | na  8 16 | 00622b | 20 36 60    |                 jsr 006036           
 669:000 | DONE ins | na  8 16 | 00622e | c8          |                 iny                  
 670:000 | DONE lbl | na  8 16 | 00622f |             | @                                    
 671:000 | DONE ins | na  8 16 | 00622f | 88          |                 dey                  
 672:000 | DONE ins | na  8 16 | 006230 | a9 08       |                 lda.# AscBS          move back one
 673:000 | DONE ins | na  8 16 | 006232 | 20 36 60    |                 jsr 006036           
 674:000 | DONE ins | na  8 16 | 006235 | a9 20       |                 lda.# AscSP          print a space (rubout)
 675:000 | DONE ins | na  8 16 | 006237 | 20 36 60    |                 jsr 006036           
 676:000 | DONE ins | na  8 16 | 00623a | a9 08       |                 lda.# AscBS          move back over space
 677:000 | DONE ins | na  8 16 | 00623c | 20 36 60    |                 jsr 006036           
 678:000 | DONE wsp | na  8 16 |        |             |
 679:000 | DONE ins | na  8 16 | 00623f | 80 90       |                 bra 0061d1           
 680:000 | DONE wsp | na  8 16 |        |             |
 681:000 | DONE lbl | na  8 16 | 006241 |             | z_accept                             
 681:001 | DONE ins | na  8 16 | 006241 | 60          |                 rts                  
 682:000 | DONE wsp | na  8 16 |        |             |
 683:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 684:000 | DONE cmt | na  8 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
 685:000 | DONE cmt | na  8 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
 686:000 | DONE cmt | na  8 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
 687:000 | DONE cmt | na  8 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
 688:000 | DONE cmt | na  8 16 |        |             | ; past the Dictionary.
 689:000 | DONE cmt | na  8 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
 690:000 | DONE cmt | na  8 16 |        |             | ; TODO test negative values
 691:000 | DONE lbl | na  8 16 | 006242 |             | xt_allot                             
 692:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 693:000 | DONE ins | na 16 16 | 006242 | 98          |                 tya                  force flag check
 694:000 | DONE ins | na 16 16 | 006243 | f0 21       |                 beq 006266           zero bytes, don't do anything
 695:000 | DONE ins | na 16 16 | 006245 | 30 12       |                 bmi 006259           free memory instead of reserving it
 696:000 | DONE wsp | na 16 16 |        |             |
 697:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
 698:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
 699:000 | DONE ins | na 16 16 | 006247 | 18          |                 clc                  
 700:000 | DONE ins | na 16 16 | 006248 | 65 00       |                 adc.d 000200         create new CP
 701:000 | DONE ins | na 16 16 | 00624a | b0 07       |                 bcs 006253           oops, we've wrapped
 702:000 | DONE wsp | na 16 16 |        |             |
 703:000 | DONE ins | na 16 16 | 00624c | a8          |                 tay                  save copy of new CP
 704:000 | DONE wsp | na 16 16 |        |             |
 705:000 | DONE ins | na 16 16 | 00624d | 38          |                 sec                  
 706:000 | DONE ins | na 16 16 | 00624e | e9 ff 7b    |                 sbc.# 007bff         
 707:000 | DONE ins | na 16 16 | 006251 | 30 11       |                 bmi 006264           oops, fall thru if beyond max RAM
 708:000 | DONE wsp | na 16 16 |        |             |
 709:000 | DONE lbl | na 16 16 | 006253 |             | allot_error                          
 710:000 | DONE ins | na 16 16 | 006253 | a9 f3 6d    |                 lda.# 006df3         
 711:000 | DONE ins | na 16 16 | 006256 | 4c 64 6c    |                 jmp 006c64           
 712:000 | DONE wsp | na 16 16 |        |             |
 713:000 | DONE lbl | na 16 16 | 006259 |             | allot_minus                          
 714:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
 715:000 | DONE ins | na 16 16 | 006259 | 38          |                 sec                  
 716:000 | DONE ins | na 16 16 | 00625a | e5 00       |                 sbc.d 000200         
 717:000 | DONE ins | na 16 16 | 00625c | 90 f5       |                 bcc 006253           oops, we've wrapped
 718:000 | DONE wsp | na 16 16 |        |             |
 719:000 | DONE ins | na 16 16 | 00625e | a8          |                 tay                  
 720:000 | DONE wsp | na 16 16 |        |             |
 721:000 | DONE ins | na 16 16 | 00625f | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
 722:000 | DONE ins | na 16 16 | 006262 | 30 ef       |                 bmi 006253           oops, gone too far back
 723:000 | DONE wsp | na 16 16 |        |             |
 724:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
 725:000 | DONE lbl | na 16 16 | 006264 |             | allot_done                           
 726:000 | DONE ins | na 16 16 | 006264 | 84 00       |                 sty.d 000200         new compiler pointer
 727:000 | DONE lbl | na 16 16 | 006266 |             | allot_real_gone                      
 728:000 | DONE ins | na 16 16 | 006266 | b4 00       |                 ldy.dx 00            DROP
 729:000 | DONE ins | na 16 16 | 006268 | e8          |                 inx                  
 730:000 | DONE ins | na 16 16 | 006269 | e8          |                 inx                  
 731:000 | DONE wsp | na 16 16 |        |             |
 732:000 | DONE lbl | na 16 16 | 00626a |             | z_allot                              
 732:001 | DONE ins | na 16 16 | 00626a | 60          |                 rts                  
 733:000 | DONE wsp | na 16 16 |        |             |
 734:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 735:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
 736:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
 737:000 | DONE lbl | na 16 16 | 00626b |             | xt_and                               
 738:000 | DONE ins | na 16 16 | 00626b | 98          |                 tya                  
 739:000 | DONE ins | na 16 16 | 00626c | 35 00       |                 and.dx 00            
 740:000 | DONE ins | na 16 16 | 00626e | a8          |                 tay                  
 741:000 | DONE wsp | na 16 16 |        |             |
 742:000 | DONE ins | na 16 16 | 00626f | e8          |                 inx                  NIP
 743:000 | DONE ins | na 16 16 | 006270 | e8          |                 inx                  
 744:000 | DONE wsp | na 16 16 |        |             |
 745:000 | DONE lbl | na 16 16 | 006271 |             | z_and                                
 745:001 | DONE ins | na 16 16 | 006271 | 60          |                 rts                  
 746:000 | DONE wsp | na 16 16 |        |             |
 747:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 748:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
 749:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
 750:000 | DONE lbl | na 16 16 | 006272 |             | xt_base                              
 751:000 | DONE ins | na 16 16 | 006272 | ca          |                 dex                  
 752:000 | DONE ins | na 16 16 | 006273 | ca          |                 dex                  
 753:000 | DONE ins | na 16 16 | 006274 | 94 00       |                 sty.dx 00            
 754:000 | DONE wsp | na 16 16 |        |             |
 755:000 | DONE ins | na 16 16 | 006276 | a0 1c 02    |                 ldy.# 00021c         
 756:000 | DONE wsp | na 16 16 |        |             |
 757:000 | DONE lbl | na 16 16 | 006279 |             | z_base                               
 757:001 | DONE ins | na 16 16 | 006279 | 60          |                 rts                  
 758:000 | DONE wsp | na 16 16 |        |             |
 759:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 760:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 761:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
 762:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 763:000 | DONE lbl | na 16 16 | 00627a |             | xt_bell                              
 764:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 765:000 | DONE ins | na 16 16 | 00627a | a9 07 00    |                 lda.# AscBELL        
 766:000 | DONE ins | na 16 16 | 00627d | 20 36 60    |                 jsr 006036           
 767:000 | DONE wsp | na 16 16 |        |             |
 768:000 | DONE lbl | na 16 16 | 006280 |             | z_bell                               
 768:001 | DONE ins | na 16 16 | 006280 | 60          |                 rts                  
 769:000 | DONE wsp | na 16 16 |        |             |
 770:000 | DONE wsp | na 16 16 |        |             |
 771:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 772:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 773:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 774:000 | DONE lbl | na 16 16 | 006281 |             | xt_bl                                
 775:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 776:000 | DONE ins | na 16 16 | 006281 | ca          |                 dex                  
 777:000 | DONE ins | na 16 16 | 006282 | ca          |                 dex                  
 778:000 | DONE ins | na 16 16 | 006283 | 94 00       |                 sty.dx 00            
 779:000 | DONE ins | na 16 16 | 006285 | a0 20 00    |                 ldy.# AscSP          
 780:000 | DONE wsp | na 16 16 |        |             |
 781:000 | DONE lbl | na 16 16 | 006288 |             | z_bl                                 
 781:001 | DONE ins | na 16 16 | 006288 | 60          |                 rts                  
 782:000 | DONE wsp | na 16 16 |        |             |
 783:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 784:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 785:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 786:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
 787:000 | DONE lbl | na 16 16 | 006289 |             | xt_bye                               
 788:000 | DONE ins | na 16 16 | 006289 | 58          |                 cli                  
 789:000 | DONE ins | na 16 16 | 00628a | 00 00       |                 brk 00               status byte 00 required for assembler
 790:000 | DONE wsp | na 16 16 |        |             |
 791:000 | DONE lbl | na 16 16 | 00628c |             | z_bye                                
 791:001 | DONE ins | na 16 16 | 00628c | 60          |                 rts                  dummy for compiling, never reached
 792:000 | DONE wsp | na 16 16 |        |             |
 793:000 | DONE wsp | na 16 16 |        |             |
 794:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 795:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
 796:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
 797:000 | DONE lbl | na 16 16 | 00628d |             | xt_c-comma                           
 798:000 | DONE ins | na 16 16 | 00628d | 98          |                 tya                  
 799:000 | DONE ins | na 16 16 | 00628e | e2 20       |                 sep 20               
 799:001 | DONE ctl | na  8 16 |        |             |         .!a8
 800:000 | DONE ins | na  8 16 | 006290 | 92 00       |                 sta.di 000200        STA (CP)
 801:000 | DONE ins | na  8 16 | 006292 | c2 20       |                 rep 20               
 801:001 | DONE ctl | na 16 16 |        |             |         .!a16
 802:000 | DONE ins | na 16 16 | 006294 | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
 803:000 | DONE wsp | na 16 16 |        |             |
 804:000 | DONE ins | na 16 16 | 006296 | b4 00       |                 ldy.dx 00            
 805:000 | DONE ins | na 16 16 | 006298 | e8          |                 inx                  
 806:000 | DONE ins | na 16 16 | 006299 | e8          |                 inx                  
 807:000 | DONE wsp | na 16 16 |        |             |
 808:000 | DONE lbl | na 16 16 | 00629a |             | z_c-comma                            
 808:001 | DONE ins | na 16 16 | 00629a | 60          |                 rts                  
 809:000 | DONE wsp | na 16 16 |        |             |
 810:000 | DONE wsp | na 16 16 |        |             |
 811:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 812:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
 813:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
 814:000 | DONE lbl | na 16 16 | 00629b |             | xt_c-fetch                           
 815:000 | DONE ins | na 16 16 | 00629b | e2 20       |                 sep 20               
 815:001 | DONE ctl | na  8 16 |        |             |         .!a8
 816:000 | DONE ins | na  8 16 | 00629d | b9 00 00    |                 lda.y 0000           
 817:000 | DONE ins | na  8 16 | 0062a0 | c2 20       |                 rep 20               
 817:001 | DONE ctl | na 16 16 |        |             |         .!a16
 818:000 | DONE ins | na 16 16 | 0062a2 | 29 ff 00    |                 and.# 00ff           
 819:000 | DONE ins | na 16 16 | 0062a5 | a8          |                 tay                  
 820:000 | DONE wsp | na 16 16 |        |             |
 821:000 | DONE lbl | na 16 16 | 0062a6 |             | z_c-fetch                            
 821:001 | DONE ins | na 16 16 | 0062a6 | 60          |                 rts                  
 822:000 | DONE wsp | na 16 16 |        |             |
 823:000 | DONE wsp | na 16 16 |        |             |
 824:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 825:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
 826:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
 827:000 | DONE lbl | na 16 16 | 0062a7 |             | xt_c-store                           
 828:000 | DONE ins | na 16 16 | 0062a7 | b5 00       |                 lda.dx 00            
 829:000 | DONE ins | na 16 16 | 0062a9 | e2 20       |                 sep 20               
 829:001 | DONE ctl | na  8 16 |        |             |         .!a8
 830:000 | DONE ins | na  8 16 | 0062ab | 99 00 00    |                 sta.y 0000           
 831:000 | DONE ins | na  8 16 | 0062ae | c2 20       |                 rep 20               
 831:001 | DONE ctl | na 16 16 |        |             |         .!a16
 832:000 | DONE ins | na 16 16 | 0062b0 | b4 02       |                 ldy.dx 02            
 833:000 | DONE ins | na 16 16 | 0062b2 | e8          |                 inx                  
 834:000 | DONE ins | na 16 16 | 0062b3 | e8          |                 inx                  
 835:000 | DONE ins | na 16 16 | 0062b4 | e8          |                 inx                  
 836:000 | DONE ins | na 16 16 | 0062b5 | e8          |                 inx                  
 837:000 | DONE wsp | na 16 16 |        |             |
 838:000 | DONE lbl | na 16 16 | 0062b6 |             | z_c-store                            
 838:001 | DONE ins | na 16 16 | 0062b6 | 60          |                 rts                  
 839:000 | DONE wsp | na 16 16 |        |             |
 840:000 | DONE wsp | na 16 16 |        |             |
 841:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 842:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
 843:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
 844:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
 845:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
 846:000 | DONE wsp | na 16 16 |        |             |
 847:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 848:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
 849:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
 850:000 | DONE lbl | na 16 16 | 0062b7 |             | xt_char                              
 851:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 852:000 | DONE ins | na 16 16 | 0062b7 | 20 a3 65    |                 jsr 0065a3           ( -- addr u )
 853:000 | DONE wsp | na 16 16 |        |             |
 854:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
 855:000 | DONE ins | na 16 16 | 0062ba | 98          |                 tya                  force flag check
 856:000 | DONE ins | na 16 16 | 0062bb | d0 06       |                 bne 0062c3           
 857:000 | DONE wsp | na 16 16 |        |             |
 858:000 | DONE ins | na 16 16 | 0062bd | a9 92 6e    |                 lda.# 006e92         
 859:000 | DONE ins | na 16 16 | 0062c0 | 4c 64 6c    |                 jmp 006c64           
 860:000 | DONE wsp | na 16 16 |        |             |
 861:000 | DONE lbl | na 16 16 | 0062c3 |             | char_got_char                        
 862:000 | DONE ins | na 16 16 | 0062c3 | b4 00       |                 ldy.dx 00            get addr from NOS
 863:000 | DONE ins | na 16 16 | 0062c5 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
 864:000 | DONE ins | na 16 16 | 0062c8 | 29 ff 00    |                 and.# 00ff           
 865:000 | DONE ins | na 16 16 | 0062cb | a8          |                 tay                  
 866:000 | DONE wsp | na 16 16 |        |             |
 867:000 | DONE ins | na 16 16 | 0062cc | e8          |                 inx                  
 868:000 | DONE ins | na 16 16 | 0062cd | e8          |                 inx                  
 869:000 | DONE wsp | na 16 16 |        |             |
 870:000 | DONE lbl | na 16 16 | 0062ce |             | z_char                               
 870:001 | DONE ins | na 16 16 | 0062ce | 60          |                 rts                  
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE wsp | na 16 16 |        |             |
 873:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 874:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
 875:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
 876:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
 877:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
 878:000 | DONE lbl | na 16 16 | 0062cf |             | xt_compile-only                      
 879:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 880:000 | DONE ins | na 16 16 | 0062cf | a9 04 00    |                 lda.# CO             
 881:000 | DONE ins | na 16 16 | 0062d2 | eb          |                 xba                  flags are MSB
 882:000 | DONE ins | na 16 16 | 0062d3 | 12 02       |                 ora.di 000202        ORA (DP)
 883:000 | DONE ins | na 16 16 | 0062d5 | 92 02       |                 sta.di 000202        
 884:000 | DONE wsp | na 16 16 |        |             |
 885:000 | DONE lbl | na 16 16 | 0062d7 |             | z_compile-only                       
 885:001 | DONE ins | na 16 16 | 0062d7 | 60          |                 rts                  
 886:000 | DONE wsp | na 16 16 |        |             |
 887:000 | DONE wsp | na 16 16 |        |             |
 888:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 889:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
 890:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
 891:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
 892:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
 893:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
 894:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
 895:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
 896:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
 897:000 | DONE lbl | na 16 16 | 0062d8 |             | xt_compilecomma                      
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE lbl | na 16 16 | 0062d8 |             | compile_as_code                      
 900:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
 901:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
 902:000 | DONE cmt | na 16 16 |        |             |                 ; TODO currently just compiles subroutine jumps
 903:000 | DONE wsp | na 16 16 |        |             |
 904:000 | DONE lbl | na 16 16 | 0062d8 |             | compile_as_jump                      
 905:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
 906:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
 907:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
 908:000 | DONE cmt | na 16 16 |        |             |                 ; win!
 909:000 | DONE ins | na 16 16 | 0062d8 | a9 20 00    |                 lda.# 20             opcode for JSR
 910:000 | DONE ins | na 16 16 | 0062db | 92 00       |                 sta.di 000200        STA (CP)
 911:000 | DONE ins | na 16 16 | 0062dd | e6 00       |                 inc.d 000200         
 912:000 | DONE wsp | na 16 16 |        |             |
 913:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
 914:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
 915:000 | DONE ins | na 16 16 | 0062df | 98          |                 tya                  
 916:000 | DONE ins | na 16 16 | 0062e0 | 92 00       |                 sta.di 000200        
 917:000 | DONE ins | na 16 16 | 0062e2 | e6 00       |                 inc.d 000200         
 918:000 | DONE ins | na 16 16 | 0062e4 | e6 00       |                 inc.d 000200         
 919:000 | DONE wsp | na 16 16 |        |             |
 920:000 | DONE ins | na 16 16 | 0062e6 | b4 00       |                 ldy.dx 00            
 921:000 | DONE ins | na 16 16 | 0062e8 | e8          |                 inx                  
 922:000 | DONE ins | na 16 16 | 0062e9 | e8          |                 inx                  
 923:000 | DONE wsp | na 16 16 |        |             |
 924:000 | DONE lbl | na 16 16 | 0062ea |             | z_compilecomma                       
 924:001 | DONE ins | na 16 16 | 0062ea | 60          |                 rts                  
 925:000 | DONE wsp | na 16 16 |        |             |
 926:000 | DONE wsp | na 16 16 |        |             |
 927:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 928:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
 929:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
 930:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
 931:000 | DONE cmt | na 16 16 |        |             | ; lifting.
 932:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
 933:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
 934:000 | DONE lbl | na 16 16 | 0062eb |             | xt_constant                          
 935:000 | DONE ins | na 16 16 | 0062eb | 20 1b 63    |                 jsr 00631b           
 936:000 | DONE wsp | na 16 16 |        |             |
 937:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
 938:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
 939:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
 940:000 | DONE ins | na 16 16 | 0062ee | a5 00       |                 lda.d 000200         
 941:000 | DONE ins | na 16 16 | 0062f0 | 3a          |                 dec.a                
 942:000 | DONE ins | na 16 16 | 0062f1 | 3a          |                 dec.a                
 943:000 | DONE ins | na 16 16 | 0062f2 | 85 16       |                 sta.d 000216         
 944:000 | DONE wsp | na 16 16 |        |             |
 945:000 | DONE ins | na 16 16 | 0062f4 | a9 d0 6b    |                 lda.# 006bd0         
 946:000 | DONE ins | na 16 16 | 0062f7 | 92 16       |                 sta.di 000216        STA (TMP1)
 947:000 | DONE wsp | na 16 16 |        |             |
 948:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
 949:000 | DONE ins | na 16 16 | 0062f9 | 98          |                 tya                  there is no "sty.di cp"
 950:000 | DONE ins | na 16 16 | 0062fa | 92 00       |                 sta.di 000200        
 951:000 | DONE ins | na 16 16 | 0062fc | e6 00       |                 inc.d 000200         
 952:000 | DONE ins | na 16 16 | 0062fe | e6 00       |                 inc.d 000200         
 953:000 | DONE wsp | na 16 16 |        |             |
 954:000 | DONE ins | na 16 16 | 006300 | b4 00       |                 ldy.dx 00            DROP
 955:000 | DONE ins | na 16 16 | 006302 | e8          |                 inx                  
 956:000 | DONE ins | na 16 16 | 006303 | e8          |                 inx                  
 957:000 | DONE wsp | na 16 16 |        |             |
 958:000 | DONE lbl | na 16 16 | 006304 |             | z_constant                           
 958:001 | DONE ins | na 16 16 | 006304 | 60          |                 rts                  
 959:000 | DONE wsp | na 16 16 |        |             |
 960:000 | DONE wsp | na 16 16 |        |             |
 961:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 962:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 963:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 964:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 965:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 966:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 967:000 | DONE lbl | na 16 16 | 006305 |             | xt_count                             
 968:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 969:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 970:000 | DONE ins | na 16 16 | 006305 | 98          |                 tya                  
 971:000 | DONE ins | na 16 16 | 006306 | 1a          |                 inc.a                String address starts one char later
 972:000 | DONE wsp | na 16 16 |        |             |
 973:000 | DONE ins | na 16 16 | 006307 | ca          |                 dex                  
 974:000 | DONE ins | na 16 16 | 006308 | ca          |                 dex                  
 975:000 | DONE ins | na 16 16 | 006309 | 95 00       |                 sta.dx 00            NOS
 976:000 | DONE wsp | na 16 16 |        |             |
 977:000 | DONE ins | na 16 16 | 00630b | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
 978:000 | DONE ins | na 16 16 | 00630e | eb          |                 xba                  move length to LSB
 979:000 | DONE ins | na 16 16 | 00630f | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
 980:000 | DONE ins | na 16 16 | 006312 | a8          |                 tay                  TOS
 981:000 | DONE wsp | na 16 16 |        |             |
 982:000 | DONE lbl | na 16 16 | 006313 |             | z_count                              
 982:001 | DONE ins | na 16 16 | 006313 | 60          |                 rts                  
 983:000 | DONE wsp | na 16 16 |        |             |
 984:000 | DONE wsp | na 16 16 |        |             |
 985:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 986:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 987:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 988:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 989:000 | DONE lbl | na 16 16 | 006314 |             | xt_cr                                
 990:000 | DONE ins | na 16 16 | 006314 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
 991:000 | DONE ins | na 16 16 | 006317 | 20 36 60    |                 jsr 006036           
 992:000 | DONE wsp | na 16 16 |        |             |
 993:000 | DONE lbl | na 16 16 | 00631a |             | z_cr                                 
 993:001 | DONE ins | na 16 16 | 00631a | 60          |                 rts                  
 994:000 | DONE wsp | na 16 16 |        |             |
 995:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 996:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
 997:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
 998:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
 999:000 | DONE cmt | na 16 16 |        |             | ; address.
1000:000 | DONE lbl | na 16 16 | 00631b |             | xt_create                            
1001:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1002:000 | DONE ins | na 16 16 | 00631b | 20 a3 65    |                 jsr 0065a3           ( -- addr u )
1003:000 | DONE ins | na 16 16 | 00631e | d0 06       |                 bne 006326           
1004:000 | DONE wsp | na 16 16 |        |             |
1005:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1006:000 | DONE ins | na 16 16 | 006320 | a9 92 6e    |                 lda.# 006e92         
1007:000 | DONE ins | na 16 16 | 006323 | 4c 64 6c    |                 jmp 006c64           
1008:000 | DONE wsp | na 16 16 |        |             |
1009:000 | DONE lbl | na 16 16 | 006326 |             | create_got_name                      
1010:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1011:000 | DONE ins | na 16 16 | 006326 | 20 9d 6c    |                 jsr 006c9d           
1012:000 | DONE wsp | na 16 16 |        |             |
1013:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1014:000 | DONE cmt | na 16 16 |        |             |                 ; word
1015:000 | DONE ins | na 16 16 | 006329 | a5 00       |                 lda.d 000200         
1016:000 | DONE ins | na 16 16 | 00632b | 85 16       |                 sta.d 000216         save start of new word
1017:000 | DONE wsp | na 16 16 |        |             |
1018:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1019:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1020:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1021:000 | DONE ins | na 16 16 | 00632d | 98          |                 tya                  
1022:000 | DONE ins | na 16 16 | 00632e | 29 ff 00    |                 and.# 00ff           
1023:000 | DONE ins | na 16 16 | 006331 | 85 18       |                 sta.d 000218         save length of name string
1024:000 | DONE wsp | na 16 16 |        |             |
1025:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1026:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1027:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1028:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1029:000 | DONE ins | na 16 16 | 006333 | 18          |                 clc                  
1030:000 | DONE ins | na 16 16 | 006334 | 69 08 00    |                 adc.# 0008           
1031:000 | DONE ins | na 16 16 | 006337 | 85 1a       |                 sta.d 00021a         total bytes required for header
1032:000 | DONE wsp | na 16 16 |        |             |
1033:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1034:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1035:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1036:000 | DONE ins | na 16 16 | 006339 | 1a          |                 inc.a                
1037:000 | DONE ins | na 16 16 | 00633a | 1a          |                 inc.a                
1038:000 | DONE ins | na 16 16 | 00633b | 1a          |                 inc.a                
1039:000 | DONE wsp | na 16 16 |        |             |
1040:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1041:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1042:000 | DONE ins | na 16 16 | 00633c | 18          |                 clc                  
1043:000 | DONE ins | na 16 16 | 00633d | 65 00       |                 adc.d 000200         
1044:000 | DONE ins | na 16 16 | 00633f | 85 00       |                 sta.d 000200         
1045:000 | DONE wsp | na 16 16 |        |             |
1046:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1047:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1048:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1049:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1050:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1051:000 | DONE ins | na 16 16 | 006341 | b5 00       |                 lda.dx 00            
1052:000 | DONE ins | na 16 16 | 006343 | 48          |                 pha                  
1053:000 | DONE wsp | na 16 16 |        |             |
1054:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1055:000 | DONE ins | na 16 16 | 006344 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1056:000 | DONE ins | na 16 16 | 006347 | a5 18       |                 lda.d 000218         get length byte
1057:000 | DONE ins | na 16 16 | 006349 | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1058:000 | DONE ins | na 16 16 | 00634b | c8          |                 iny                  
1059:000 | DONE ins | na 16 16 | 00634c | c8          |                 iny                  
1060:000 | DONE wsp | na 16 16 |        |             |
1061:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1062:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1063:000 | DONE ins | na 16 16 | 00634d | a5 02       |                 lda.d 000202         
1064:000 | DONE ins | na 16 16 | 00634f | 91 16       |                 sta.diy 000216       
1065:000 | DONE ins | na 16 16 | 006351 | c8          |                 iny                  
1066:000 | DONE ins | na 16 16 | 006352 | c8          |                 iny                  
1067:000 | DONE wsp | na 16 16 |        |             |
1068:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1069:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1070:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1071:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1072:000 | DONE ins | na 16 16 | 006353 | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1073:000 | DONE ins | na 16 16 | 006355 | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1074:000 | DONE wsp | na 16 16 |        |             |
1075:000 | DONE ins | na 16 16 | 006357 | 18          |                 clc                  
1076:000 | DONE ins | na 16 16 | 006358 | 65 1a       |                 adc.d 00021a         total header length
1077:000 | DONE ins | na 16 16 | 00635a | 91 16       |                 sta.diy 000216       
1078:000 | DONE ins | na 16 16 | 00635c | c8          |                 iny                  
1079:000 | DONE ins | na 16 16 | 00635d | c8          |                 iny                  
1080:000 | DONE wsp | na 16 16 |        |             |
1081:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1082:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1083:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1084:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1085:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1086:000 | DONE ins | na 16 16 | 00635e | 1a          |                 inc.a                
1087:000 | DONE ins | na 16 16 | 00635f | 1a          |                 inc.a                
1088:000 | DONE ins | na 16 16 | 006360 | 1a          |                 inc.a                
1089:000 | DONE ins | na 16 16 | 006361 | 91 16       |                 sta.diy 000216       
1090:000 | DONE ins | na 16 16 | 006363 | c8          |                 iny                  
1091:000 | DONE ins | na 16 16 | 006364 | c8          |                 iny                  
1092:000 | DONE wsp | na 16 16 |        |             |
1093:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1094:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1095:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1096:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1097:000 | DONE ins | na 16 16 | 006365 | 68          |                 pla                  get back string address
1098:000 | DONE ins | na 16 16 | 006366 | 38          |                 sec                  
1099:000 | DONE ins | na 16 16 | 006367 | e9 08 00    |                 sbc.# 0008           
1100:000 | DONE ins | na 16 16 | 00636a | 85 1a       |                 sta.d 00021a         
1101:000 | DONE ins | na 16 16 | 00636c | e2 20       |                 sep 20               
1101:001 | DONE ctl | na  8 16 |        |             |         .!a8
1102:000 | DONE lbl | na  8 16 | 00636e |             | @                                    
1103:000 | DONE ins | na  8 16 | 00636e | b1 1a       |                 lda.diy 00021a       
1104:000 | DONE ins | na  8 16 | 006370 | 91 16       |                 sta.diy 000216       
1105:000 | DONE ins | na  8 16 | 006372 | c8          |                 iny                  
1106:000 | DONE ins | na  8 16 | 006373 | c6 18       |                 dec.d 000218         
1107:000 | DONE ins | na  8 16 | 006375 | d0 f7       |                 bne 00636e           
1108:000 | DONE wsp | na  8 16 |        |             |
1109:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1110:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1111:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1112:000 | DONE cmt | na  8 16 |        |             |                 ; good
1113:000 | DONE ins | na  8 16 | 006377 | a9 20       |                 lda.# 20             opcode of JSR
1114:000 | DONE ins | na  8 16 | 006379 | 91 16       |                 sta.diy 000216       
1115:000 | DONE ins | na  8 16 | 00637b | c8          |                 iny                  single increase only because we have 8-bit A
1116:000 | DONE wsp | na  8 16 |        |             |
1117:000 | DONE ins | na  8 16 | 00637c | a9 eb       |                 lda.# .lsb 006beb    
1118:000 | DONE ins | na  8 16 | 00637e | 91 16       |                 sta.diy 000216       
1119:000 | DONE ins | na  8 16 | 006380 | c8          |                 iny                  
1120:000 | DONE wsp | na  8 16 |        |             |
1121:000 | DONE ins | na  8 16 | 006381 | a9 6b       |                 lda.# .msb 006beb    
1122:000 | DONE ins | na  8 16 | 006383 | 91 16       |                 sta.diy 000216       
1123:000 | DONE wsp | na  8 16 |        |             |
1124:000 | DONE ins | na  8 16 | 006385 | c2 20       |                 rep 20               
1124:001 | DONE ctl | na 16 16 |        |             |         .!a16
1125:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1126:000 | DONE ins | na 16 16 | 006387 | b4 02       |                 ldy.dx 02            
1127:000 | DONE ins | na 16 16 | 006389 | e8          |                 inx                  
1128:000 | DONE ins | na 16 16 | 00638a | e8          |                 inx                  
1129:000 | DONE ins | na 16 16 | 00638b | e8          |                 inx                  
1130:000 | DONE ins | na 16 16 | 00638c | e8          |                 inx                  
1131:000 | DONE wsp | na 16 16 |        |             |
1132:000 | DONE lbl | na 16 16 | 00638d |             | z_create                             
1132:001 | DONE ins | na 16 16 | 00638d | 60          |                 rts                  
1133:000 | DONE wsp | na 16 16 |        |             |
1134:000 | DONE wsp | na 16 16 |        |             |
1135:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1136:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1137:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1138:000 | DONE lbl | na 16 16 | 00638e |             | xt_decimal                           
1139:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1140:000 | DONE ins | na 16 16 | 00638e | a9 0a 00    |                 lda.# 000a           
1141:000 | DONE ins | na 16 16 | 006391 | 85 1c       |                 sta.d 00021c         
1142:000 | DONE wsp | na 16 16 |        |             |
1143:000 | DONE lbl | na 16 16 | 006393 |             | z_decimal                            
1143:001 | DONE ins | na 16 16 | 006393 | 60          |                 rts                  
1144:000 | DONE wsp | na 16 16 |        |             |
1145:000 | DONE wsp | na 16 16 |        |             |
1146:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1147:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1148:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1149:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1150:000 | DONE lbl | na 16 16 | 006394 |             | xt_depth                             
1151:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1152:000 | DONE cmt | na 16 16 |        |             | 		; We've got zero entries when X is dsp0
1153:000 | DONE ins | na 16 16 | 006394 | 86 04       |                 stx.d 000204         
1154:000 | DONE ins | na 16 16 | 006396 | a9 f8 02    |                 lda.# 0002f8         
1155:000 | DONE ins | na 16 16 | 006399 | 38          |                 sec                  
1156:000 | DONE ins | na 16 16 | 00639a | e5 04       |                 sbc.d 000204         
1157:000 | DONE wsp | na 16 16 |        |             |
1158:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
1159:000 | DONE ins | na 16 16 | 00639c | 4a          |                 lsr.a                
1160:000 | DONE wsp | na 16 16 |        |             |
1161:000 | DONE ins | na 16 16 | 00639d | ca          |                 dex                  
1162:000 | DONE ins | na 16 16 | 00639e | ca          |                 dex                  
1163:000 | DONE ins | na 16 16 | 00639f | 94 00       |                 sty.dx 00            
1164:000 | DONE wsp | na 16 16 |        |             |
1165:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
1166:000 | DONE ins | na 16 16 | 0063a1 | a8          |                 tay                  
1167:000 | DONE wsp | na 16 16 |        |             |
1168:000 | DONE lbl | na 16 16 | 0063a2 |             | z_depth                              
1168:001 | DONE ins | na 16 16 | 0063a2 | 60          |                 rts                  
1169:000 | DONE wsp | na 16 16 |        |             |
1170:000 | DONE wsp | na 16 16 |        |             |
1171:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1172:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
1173:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
1174:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
1175:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
1176:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
1177:000 | DONE lbl | na 16 16 | 0063a3 |             | xt_does                              
1178:000 | DONE cmt | na 16 16 |        |             | 		; compile a subroutine jump to the runtime of DOES>
1179:000 | DONE ins | na 16 16 | 0063a3 | f4 b0 63    |                 phe.# 0063b0         
1180:000 | DONE ins | na 16 16 | 0063a6 | 20 43 6c    |                 jsr 006c43           
1181:000 | DONE wsp | na 16 16 |        |             |
1182:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
1183:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
1184:000 | DONE ins | na 16 16 | 0063a9 | f4 de 6b    |                 phe.# 006bde         
1185:000 | DONE ins | na 16 16 | 0063ac | 20 43 6c    |                 jsr 006c43           
1186:000 | DONE wsp | na 16 16 |        |             |
1187:000 | DONE lbl | na 16 16 | 0063af |             | z_does                               
1187:001 | DONE ins | na 16 16 | 0063af | 60          |                 rts                  
1188:000 | DONE wsp | na 16 16 |        |             |
1189:000 | DONE lbl | na 16 16 | 0063b0 |             | does_rt                              
1190:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
1191:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
1192:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
1193:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
1194:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
1195:000 | DONE ins | na 16 16 | 0063b0 | 68          |                 pla                  
1196:000 | DONE ins | na 16 16 | 0063b1 | 1a          |                 inc.a                increase by one because of RTS mechanics
1197:000 | DONE ins | na 16 16 | 0063b2 | 85 16       |                 sta.d 000216         
1198:000 | DONE wsp | na 16 16 |        |             |
1199:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
1200:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
1201:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
1202:000 | DONE cmt | na 16 16 |        |             |                 ; now.
1203:000 | DONE ins | na 16 16 | 0063b4 | a5 02       |                 lda.d 000202         
1204:000 | DONE wsp | na 16 16 |        |             |
1205:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
1206:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
1207:000 | DONE ins | na 16 16 | 0063b6 | 18          |                 clc                  
1208:000 | DONE ins | na 16 16 | 0063b7 | 69 04 00    |                 adc.# 0004           
1209:000 | DONE ins | na 16 16 | 0063ba | 85 18       |                 sta.d 000218         
1210:000 | DONE wsp | na 16 16 |        |             |
1211:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
1212:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
1213:000 | DONE ins | na 16 16 | 0063bc | b2 18       |                 lda.di 000218        LDA (TMP2)
1214:000 | DONE ins | na 16 16 | 0063be | 1a          |                 inc.a                
1215:000 | DONE ins | na 16 16 | 0063bf | 85 18       |                 sta.d 000218         Points to address to be replaced
1216:000 | DONE wsp | na 16 16 |        |             |
1217:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
1218:000 | DONE ins | na 16 16 | 0063c1 | a5 16       |                 lda.d 000216         
1219:000 | DONE ins | na 16 16 | 0063c3 | 92 18       |                 sta.di 000218        STA (TMP2)
1220:000 | DONE wsp | na 16 16 |        |             |
1221:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
1222:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
1223:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
1224:000 | DONE ins | na 16 16 | 0063c5 | 60          |                 rts                  
1225:000 | DONE wsp | na 16 16 |        |             |
1226:000 | DONE wsp | na 16 16 |        |             |
1227:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1228:000 | DONE cmt | na 16 16 |        |             | ; DOT ( n -- ) X bytes / X cycles
1229:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
1230:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
1231:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
1232:000 | DONE cmt | na 16 16 |        |             | ; focus on size
1233:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
1234:000 | DONE lbl | na 16 16 | 0063c6 |             | xt_dot                               
1235:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1236:000 | DONE ins | na 16 16 | 0063c6 | 98          |                 tya                  
1237:000 | DONE ins | na 16 16 | 0063c7 | 29 00 ff    |                 and.# 0ff00          
1238:000 | DONE ins | na 16 16 | 0063ca | eb          |                 xba                  
1239:000 | DONE ins | na 16 16 | 0063cb | 20 82 6c    |                 jsr 006c82           
1240:000 | DONE ins | na 16 16 | 0063ce | 98          |                 tya                  
1241:000 | DONE ins | na 16 16 | 0063cf | 29 ff 00    |                 and.# 00ff           
1242:000 | DONE ins | na 16 16 | 0063d2 | 20 82 6c    |                 jsr 006c82           
1243:000 | DONE ins | na 16 16 | 0063d5 | 20 ee 66    |                 jsr 0066ee           
1244:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1245:000 | DONE wsp | na 16 16 |        |             |
1246:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
1247:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
1248:000 | DONE ins | na 16 16 | 0063d8 | 20 32 64    |                 jsr 006432           
1249:000 | DONE wsp | na 16 16 |        |             |
1250:000 | DONE lbl | na 16 16 | 0063db |             | z_dot                                
1250:001 | DONE ins | na 16 16 | 0063db | 60          |                 rts                  
1251:000 | DONE wsp | na 16 16 |        |             |
1252:000 | DONE wsp | na 16 16 |        |             |
1253:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1254:000 | DONE cmt | na 16 16 |        |             | ; DOTPAREN ( "string" -- ) 13 bytes / X cycles
1255:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
1256:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
1257:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
1258:000 | DONE lbl | na 16 16 | 0063dc |             | xt_dotparen                          
1259:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
1260:000 | DONE ins | na 16 16 | 0063dc | ca          |                 dex                  
1261:000 | DONE ins | na 16 16 | 0063dd | ca          |                 dex                  
1262:000 | DONE ins | na 16 16 | 0063de | 94 00       |                 sty.dx 00            
1263:000 | DONE ins | na 16 16 | 0063e0 | a0 29 00    |                 ldy.# 29             
1264:000 | DONE wsp | na 16 16 |        |             |
1265:000 | DONE ins | na 16 16 | 0063e3 | 20 d5 65    |                 jsr 0065d5           ( -- addr u)
1266:000 | DONE ins | na 16 16 | 0063e6 | 20 21 67    |                 jsr 006721           
1267:000 | DONE wsp | na 16 16 |        |             |
1268:000 | DONE lbl | na 16 16 | 0063e9 |             | z_dotparen                           
1268:001 | DONE ins | na 16 16 | 0063e9 | 60          |                 rts                  
1269:000 | DONE wsp | na 16 16 |        |             |
1270:000 | DONE wsp | na 16 16 |        |             |
1271:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1272:000 | DONE cmt | na 16 16 |        |             | ; DOTS ".S" ( -- ) X bytes / X cycles
1273:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
1274:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
1275:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
1276:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
1277:000 | DONE lbl | na 16 16 | 0063ea |             | xt_dots                              
1278:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1279:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1280:000 | DONE ins | na 16 16 | 0063ea | 20 94 63    |                 jsr 006394           ( -- u)
1281:000 | DONE wsp | na 16 16 |        |             |
1282:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
1283:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
1284:000 | DONE ins | na 16 16 | 0063ed | a9 3c 00    |                 lda.# 3c             
1285:000 | DONE ins | na 16 16 | 0063f0 | 20 36 60    |                 jsr 006036           
1286:000 | DONE wsp | na 16 16 |        |             |
1287:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1288:000 | DONE ins | na 16 16 | 0063f3 | 98          |                 tya                  
1289:000 | DONE ins | na 16 16 | 0063f4 | 29 00 ff    |                 and.# 0ff00          
1290:000 | DONE ins | na 16 16 | 0063f7 | eb          |                 xba                  
1291:000 | DONE ins | na 16 16 | 0063f8 | 20 82 6c    |                 jsr 006c82           
1292:000 | DONE ins | na 16 16 | 0063fb | 98          |                 tya                  
1293:000 | DONE ins | na 16 16 | 0063fc | 29 ff 00    |                 and.# 00ff           
1294:000 | DONE ins | na 16 16 | 0063ff | 20 82 6c    |                 jsr 006c82           
1295:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1296:000 | DONE wsp | na 16 16 |        |             |
1297:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
1298:000 | DONE ins | na 16 16 | 006402 | a9 3e 00    |                 lda.# 3e             
1299:000 | DONE ins | na 16 16 | 006405 | 20 36 60    |                 jsr 006036           
1300:000 | DONE ins | na 16 16 | 006408 | 20 ee 66    |                 jsr 0066ee           
1301:000 | DONE wsp | na 16 16 |        |             |
1302:000 | DONE wsp | na 16 16 |        |             |
1303:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
1304:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
1305:000 | DONE ins | na 16 16 | 00640b | 98          |                 tya                  force flag test
1306:000 | DONE ins | na 16 16 | 00640c | f0 20       |                 beq 00642e           
1307:000 | DONE wsp | na 16 16 |        |             |
1308:000 | DONE lbl | na 16 16 | 00640e |             | dots_not_empty                       
1309:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
1310:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
1311:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
1312:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
1313:000 | DONE wsp | na 16 16 |        |             |
1314:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
1315:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
1316:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
1317:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
1318:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
1319:000 | DONE ins | na 16 16 | 00640e | da          |                 phx                  
1320:000 | DONE wsp | na 16 16 |        |             |
1321:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
1322:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
1323:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
1324:000 | DONE ins | na 16 16 | 00640f | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
1325:000 | DONE ins | na 16 16 | 006412 | ca          |                 dex                  
1326:000 | DONE ins | na 16 16 | 006413 | ca          |                 dex                  points to dsp0-2, which is more garbage
1327:000 | DONE wsp | na 16 16 |        |             |
1328:000 | DONE lbl | na 16 16 | 006414 |             | dots_loop                            
1329:000 | DONE ins | na 16 16 | 006414 | ca          |                 dex                  get next element on DS, initially dsp0-4
1330:000 | DONE ins | na 16 16 | 006415 | ca          |                 dex                  
1331:000 | DONE wsp | na 16 16 |        |             |
1332:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1333:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
1334:000 | DONE ins | na 16 16 | 006416 | b5 00       |                 lda.dx 00            
1335:000 | DONE ins | na 16 16 | 006418 | 29 00 ff    |                 and.# 0ff00          
1336:000 | DONE ins | na 16 16 | 00641b | eb          |                 xba                  
1337:000 | DONE ins | na 16 16 | 00641c | 20 82 6c    |                 jsr 006c82           
1338:000 | DONE ins | na 16 16 | 00641f | b5 00       |                 lda.dx 00            
1339:000 | DONE ins | na 16 16 | 006421 | 29 ff 00    |                 and.# 00ff           
1340:000 | DONE ins | na 16 16 | 006424 | 20 82 6c    |                 jsr 006c82           
1341:000 | DONE ins | na 16 16 | 006427 | 20 ee 66    |                 jsr 0066ee           
1342:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1343:000 | DONE wsp | na 16 16 |        |             |
1344:000 | DONE ins | na 16 16 | 00642a | 88          |                 dey                  
1345:000 | DONE ins | na 16 16 | 00642b | d0 e7       |                 bne 006414           
1346:000 | DONE wsp | na 16 16 |        |             |
1347:000 | DONE ins | na 16 16 | 00642d | fa          |                 plx                  restore original DSP
1348:000 | DONE wsp | na 16 16 |        |             |
1349:000 | DONE lbl | na 16 16 | 00642e |             | dots_done                            
1350:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
1351:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
1352:000 | DONE ins | na 16 16 | 00642e | 20 32 64    |                 jsr 006432           
1353:000 | DONE wsp | na 16 16 |        |             |
1354:000 | DONE lbl | na 16 16 | 006431 |             | z_dots                               
1354:001 | DONE ins | na 16 16 | 006431 | 60          |                 rts                  
1355:000 | DONE wsp | na 16 16 |        |             |
1356:000 | DONE wsp | na 16 16 |        |             |
1357:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1358:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1359:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1360:000 | DONE wsp | na 16 16 |        |             |
1361:000 | DONE lbl | na 16 16 | 006432 |             | xt_drop                              
1362:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1363:000 | DONE ins | na 16 16 | 006432 | b4 00       |                 ldy.dx 00            
1364:000 | DONE ins | na 16 16 | 006434 | e8          |                 inx                  
1365:000 | DONE ins | na 16 16 | 006435 | e8          |                 inx                  
1366:000 | DONE wsp | na 16 16 |        |             |
1367:000 | DONE lbl | na 16 16 | 006436 |             | z_drop                               
1367:001 | DONE ins | na 16 16 | 006436 | 60          |                 rts                  
1368:000 | DONE wsp | na 16 16 |        |             |
1369:000 | DONE wsp | na 16 16 |        |             |
1370:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1371:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1372:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1373:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1374:000 | DONE lbl | na 16 16 | 006437 |             | xt_dump                              
1375:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1376:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1377:000 | DONE ins | na 16 16 | 006437 | 84 16       |                 sty.d 000216         
1378:000 | DONE wsp | na 16 16 |        |             |
1379:000 | DONE lbl | na 16 16 | 006439 |             | dump_line_loop                       
1380:000 | DONE ins | na 16 16 | 006439 | 20 14 63    |                 jsr 006314           
1381:000 | DONE wsp | na 16 16 |        |             |
1382:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1383:000 | DONE ins | na 16 16 | 00643c | a0 10 00    |                 ldy.# 0010           
1384:000 | DONE lbl | na 16 16 | 00643f |             | dump_byte_loop                       
1385:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1386:000 | DONE ins | na 16 16 | 00643f | a5 16       |                 lda.d 000216         
1387:000 | DONE ins | na 16 16 | 006441 | f0 11       |                 beq 006454           
1388:000 | DONE wsp | na 16 16 |        |             |
1389:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1390:000 | DONE ins | na 16 16 | 006443 | a1 00       |                 lda.dxi 00           
1391:000 | DONE ins | na 16 16 | 006445 | 20 82 6c    |                 jsr 006c82           TODO replace by EMIT
1392:000 | DONE ins | na 16 16 | 006448 | 20 ee 66    |                 jsr 0066ee           
1393:000 | DONE wsp | na 16 16 |        |             |
1394:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1395:000 | DONE ins | na 16 16 | 00644b | f6 00       |                 inc.dx 00            
1396:000 | DONE wsp | na 16 16 |        |             |
1397:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1398:000 | DONE ins | na 16 16 | 00644d | c6 16       |                 dec.d 000216         
1399:000 | DONE ins | na 16 16 | 00644f | 88          |                 dey                  
1400:000 | DONE ins | na 16 16 | 006450 | d0 ed       |                 bne 00643f           
1401:000 | DONE ins | na 16 16 | 006452 | 80 e5       |                 bra 006439           
1402:000 | DONE wsp | na 16 16 |        |             |
1403:000 | DONE lbl | na 16 16 | 006454 |             | dump_done                            
1404:000 | DONE ins | na 16 16 | 006454 | 20 14 63    |                 jsr 006314           
1405:000 | DONE wsp | na 16 16 |        |             |
1406:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1407:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1408:000 | DONE ins | na 16 16 | 006457 | b4 02       |                 ldy.dx 02            
1409:000 | DONE ins | na 16 16 | 006459 | e8          |                 inx                  
1410:000 | DONE ins | na 16 16 | 00645a | e8          |                 inx                  
1411:000 | DONE ins | na 16 16 | 00645b | e8          |                 inx                  
1412:000 | DONE ins | na 16 16 | 00645c | e8          |                 inx                  
1413:000 | DONE wsp | na 16 16 |        |             |
1414:000 | DONE lbl | na 16 16 | 00645d |             | z_dump                               
1414:001 | DONE ins | na 16 16 | 00645d | 60          |                 rts                  
1415:000 | DONE wsp | na 16 16 |        |             |
1416:000 | DONE wsp | na 16 16 |        |             |
1417:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1418:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1419:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1420:000 | DONE wsp | na 16 16 |        |             |
1421:000 | DONE lbl | na 16 16 | 00645e |             | xt_dup                               
1422:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1423:000 | DONE ins | na 16 16 | 00645e | ca          |                 dex                  
1424:000 | DONE ins | na 16 16 | 00645f | ca          |                 dex                  
1425:000 | DONE ins | na 16 16 | 006460 | 94 00       |                 sty.dx 00            
1426:000 | DONE wsp | na 16 16 |        |             |
1427:000 | DONE lbl | na 16 16 | 006462 |             | z_dup                                
1427:001 | DONE ins | na 16 16 | 006462 | 60          |                 rts                  
1428:000 | DONE wsp | na 16 16 |        |             |
1429:000 | DONE wsp | na 16 16 |        |             |
1430:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1431:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1432:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1433:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1434:000 | DONE lbl | na 16 16 | 006463 |             | xt_evaluate                          
1435:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1436:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1437:000 | DONE ins | na 16 16 | 006463 | a5 12       |                 lda.d 000212         >IN
1438:000 | DONE ins | na 16 16 | 006465 | 48          |                 pha                  
1439:000 | DONE ins | na 16 16 | 006466 | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
1440:000 | DONE ins | na 16 16 | 006468 | 48          |                 pha                  
1441:000 | DONE ins | na 16 16 | 006469 | a5 0c       |                 lda.d 00020c         
1442:000 | DONE ins | na 16 16 | 00646b | 48          |                 pha                  
1443:000 | DONE ins | na 16 16 | 00646c | a5 0e       |                 lda.d 00020e         
1444:000 | DONE ins | na 16 16 | 00646e | 48          |                 pha                  
1445:000 | DONE wsp | na 16 16 |        |             |
1446:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
1447:000 | DONE ins | na 16 16 | 00646f | a9 ff ff    |                 lda.# 0ffff          
1448:000 | DONE ins | na 16 16 | 006472 | 85 0a       |                 sta.d 00020a         
1449:000 | DONE wsp | na 16 16 |        |             |
1450:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
1451:000 | DONE ins | na 16 16 | 006474 | 64 12       |                 stz.d 000212         
1452:000 | DONE wsp | na 16 16 |        |             |
1453:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
1454:000 | DONE ins | na 16 16 | 006476 | 84 0e       |                 sty.d 00020e         
1455:000 | DONE ins | na 16 16 | 006478 | b5 00       |                 lda.dx 00            
1456:000 | DONE ins | na 16 16 | 00647a | 85 0c       |                 sta.d 00020c         
1457:000 | DONE wsp | na 16 16 |        |             |
1458:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1459:000 | DONE ins | na 16 16 | 00647c | b4 02       |                 ldy.dx 02            
1460:000 | DONE ins | na 16 16 | 00647e | e8          |                 inx                  
1461:000 | DONE ins | na 16 16 | 00647f | e8          |                 inx                  
1462:000 | DONE ins | na 16 16 | 006480 | e8          |                 inx                  
1463:000 | DONE ins | na 16 16 | 006481 | e8          |                 inx                  
1464:000 | DONE wsp | na 16 16 |        |             |
1465:000 | DONE ins | na 16 16 | 006482 | 20 f2 6b    |                 jsr 006bf2           
1466:000 | DONE wsp | na 16 16 |        |             |
1467:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1468:000 | DONE ins | na 16 16 | 006485 | 68          |                 pla                  
1469:000 | DONE ins | na 16 16 | 006486 | 85 0e       |                 sta.d 00020e         
1470:000 | DONE ins | na 16 16 | 006488 | 68          |                 pla                  
1471:000 | DONE ins | na 16 16 | 006489 | 85 0c       |                 sta.d 00020c         
1472:000 | DONE ins | na 16 16 | 00648b | 68          |                 pla                  
1473:000 | DONE ins | na 16 16 | 00648c | 85 0a       |                 sta.d 00020a         
1474:000 | DONE ins | na 16 16 | 00648e | 68          |                 pla                  
1475:000 | DONE ins | na 16 16 | 00648f | 85 12       |                 sta.d 000212         
1476:000 | DONE wsp | na 16 16 |        |             |
1477:000 | DONE lbl | na 16 16 | 006491 |             | z_evaluate                           
1477:001 | DONE ins | na 16 16 | 006491 | 60          |                 rts                  
1478:000 | DONE wsp | na 16 16 |        |             |
1479:000 | DONE wsp | na 16 16 |        |             |
1480:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1481:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1482:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1483:000 | DONE wsp | na 16 16 |        |             |
1484:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1485:000 | DONE cmt | na 16 16 |        |             | ; range
1486:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1487:000 | DONE lbl | na 16 16 | 006492 |             | execute_ip                           
1487:001 | DONE dir | na 16 16 | 006492 | (3 bytes)   |         .byte 00, 00, 00             
1487:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1488:000 | DONE wsp | na 16 16 |        |             |
1489:000 | DONE lbl | na 16 16 | 006495 |             | xt_execute                           
1490:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1491:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1492:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
1493:000 | DONE ins | na 16 16 | 006495 | 8c 92 64    |                 sty 006492           
1494:000 | DONE ins | na 16 16 | 006498 | b4 00       |                 ldy.dx 00            
1495:000 | DONE ins | na 16 16 | 00649a | e8          |                 inx                  
1496:000 | DONE ins | na 16 16 | 00649b | e8          |                 inx                  
1497:000 | DONE wsp | na 16 16 |        |             |
1498:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
1499:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
1500:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
1501:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
1502:000 | DONE ins | na 16 16 | 00649c | 6c 92 64    |                 jmp.i 006492         JMP (EXECUTE_IP)
1503:000 | DONE wsp | na 16 16 |        |             |
1504:000 | DONE lbl | na 16 16 | 00649f |             | z_execute                            
1504:001 | DONE ins | na 16 16 | 00649f | ea          |                 nop                  Never reached, see if we need the NOP
1505:000 | DONE wsp | na 16 16 |        |             |
1506:000 | DONE wsp | na 16 16 |        |             |
1507:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1508:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1509:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1510:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
1511:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
1512:000 | DONE wsp | na 16 16 |        |             |
1513:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1514:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1515:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1516:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1517:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1518:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1519:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1520:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1521:000 | DONE lbl | na 16 16 | 0064a0 |             | xt_find-name                         
1522:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1523:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1524:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1525:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1526:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1527:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1528:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1529:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1530:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1531:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1532:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1533:000 | DONE ins | na 16 16 | 0064a0 | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
1534:000 | DONE wsp | na 16 16 |        |             |
1535:000 | DONE ins | na 16 16 | 0064a2 | a4 02       |                 ldy.d 000202         
1536:000 | DONE ins | na 16 16 | 0064a4 | 84 16       |                 sty.d 000216         nt of first Dictionary word
1537:000 | DONE wsp | na 16 16 |        |             |
1538:000 | DONE ins | na 16 16 | 0064a6 | b4 00       |                 ldy.dx 00            
1539:000 | DONE ins | na 16 16 | 0064a8 | 84 18       |                 sty.d 000218         address of mystery string, was NOS
1540:000 | DONE wsp | na 16 16 |        |             |
1541:000 | DONE lbl | na 16 16 | 0064aa |             | find-name_loop                       
1542:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1543:000 | DONE ins | na 16 16 | 0064aa | b2 16       |                 lda.di 000216        LSB in first header word is length
1544:000 | DONE ins | na 16 16 | 0064ac | 29 ff 00    |                 and.# 00ff           
1545:000 | DONE ins | na 16 16 | 0064af | c5 06       |                 cmp.d 000206         we test LSB
1546:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1547:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1548:000 | DONE cmt | na 16 16 |        |             |                 ; same
1549:000 | DONE ins | na 16 16 | 0064b1 | f0 0c       |                 beq 0064bf           
1550:000 | DONE wsp | na 16 16 |        |             |
1551:000 | DONE lbl | na 16 16 | 0064b3 |             | find-name_next_entry                 
1552:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1553:000 | DONE ins | na 16 16 | 0064b3 | e6 16       |                 inc.d 000216         
1554:000 | DONE ins | na 16 16 | 0064b5 | e6 16       |                 inc.d 000216         
1555:000 | DONE ins | na 16 16 | 0064b7 | b2 16       |                 lda.di 000216        LDA (TMP1)
1556:000 | DONE wsp | na 16 16 |        |             |
1557:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1558:000 | DONE ins | na 16 16 | 0064b9 | f0 36       |                 beq 0064f1           
1559:000 | DONE wsp | na 16 16 |        |             |
1560:000 | DONE ins | na 16 16 | 0064bb | 85 16       |                 sta.d 000216         new header
1561:000 | DONE ins | na 16 16 | 0064bd | 80 eb       |                 bra 0064aa           
1562:000 | DONE wsp | na 16 16 |        |             |
1563:000 | DONE lbl | na 16 16 | 0064bf |             | find-name_chars                      
1564:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1565:000 | DONE wsp | na 16 16 |        |             |
1566:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1567:000 | DONE ins | na 16 16 | 0064bf | e2 20       |                 sep 20               
1567:001 | DONE ctl | na  8 16 |        |             |         .!a8
1568:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1569:000 | DONE cmt | na  8 16 |        |             |                 ; header
1570:000 | DONE ins | na  8 16 | 0064c1 | a0 08 00    |                 ldy.# 0008           
1571:000 | DONE ins | na  8 16 | 0064c4 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
1572:000 | DONE ins | na  8 16 | 0064c6 | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
1573:000 | DONE ins | na  8 16 | 0064c8 | f0 04       |                 beq 0064ce           
1574:000 | DONE wsp | na  8 16 |        |             |
1575:000 | DONE lbl | na  8 16 | 0064ca |             | find-name_char_nomatcnt_8            
1576:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1577:000 | DONE ins | na  8 16 | 0064ca | c2 20       |                 rep 20               
1577:001 | DONE ctl | na 16 16 |        |             |         .!a16
1578:000 | DONE ins | na 16 16 | 0064cc | 80 e5       |                 bra 0064b3           
1579:000 | DONE wsp | na 16 16 |        |             |
1580:000 | DONE lbl | na 16 16 | 0064ce |             | find-name_all_chars                  
1581:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1582:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1583:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1584:000 | DONE ins | na  8 16 | 0064ce | a4 06       |                 ldy.d 000206         
1585:000 | DONE ins | na  8 16 | 0064d0 | 88          |                 dey                  faster and shorter than CPY.# 01
1586:000 | DONE ins | na  8 16 | 0064d1 | f0 18       |                 beq 0064eb           
1587:000 | DONE wsp | na  8 16 |        |             |
1588:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1589:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1590:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1591:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1592:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1593:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1594:000 | DONE wsp | na  8 16 |        |             |
1595:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1596:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1597:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1598:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1599:000 | DONE ins | na  8 16 | 0064d3 | c2 20       |                 rep 20               
1599:001 | DONE ctl | na 16 16 |        |             |         .!a16
1600:000 | DONE ins | na 16 16 | 0064d5 | a5 16       |                 lda.d 000216         address of Dictionary string
1601:000 | DONE ins | na 16 16 | 0064d7 | 18          |                 clc                  
1602:000 | DONE ins | na 16 16 | 0064d8 | 69 08 00    |                 adc.# 0008           
1603:000 | DONE ins | na 16 16 | 0064db | 85 1a       |                 sta.d 00021a         
1604:000 | DONE ins | na 16 16 | 0064dd | e2 20       |                 sep 20               
1604:001 | DONE ctl | na  8 16 |        |             |         .!a8
1605:000 | DONE ins | na  8 16 | 0064df | a4 06       |                 ldy.d 000206         get length of strings as loop index
1606:000 | DONE ins | na  8 16 | 0064e1 | 88          |                 dey                  first index is length minus 1
1607:000 | DONE wsp | na  8 16 |        |             |
1608:000 | DONE lbl | na  8 16 | 0064e2 |             | @                                    
1609:000 | DONE ins | na  8 16 | 0064e2 | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
1610:000 | DONE ins | na  8 16 | 0064e4 | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
1611:000 | DONE ins | na  8 16 | 0064e6 | d0 e2       |                 bne 0064ca           
1612:000 | DONE ins | na  8 16 | 0064e8 | 88          |                 dey                  start of string (Y=0) was already tested
1613:000 | DONE ins | na  8 16 | 0064e9 | d0 f7       |                 bne 0064e2           
1614:000 | DONE wsp | na  8 16 |        |             |
1615:000 | DONE lbl | na  8 16 | 0064eb |             | find-name_success                    
1616:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1617:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1618:000 | DONE ins | na  8 16 | 0064eb | c2 20       |                 rep 20               
1618:001 | DONE ctl | na 16 16 |        |             |         .!a16
1619:000 | DONE ins | na 16 16 | 0064ed | a4 16       |                 ldy.d 000216         get the correct DP
1620:000 | DONE ins | na 16 16 | 0064ef | 80 03       |                 bra 0064f4           
1621:000 | DONE wsp | na 16 16 |        |             |
1622:000 | DONE wsp | na 16 16 |        |             |
1623:000 | DONE lbl | na 16 16 | 0064f1 |             | find-name_failure_16                 
1624:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1625:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1626:000 | DONE ins | na 16 16 | 0064f1 | a0 00 00    |                 ldy.# 0000           fall thru
1627:000 | DONE wsp | na 16 16 |        |             |
1628:000 | DONE lbl | na 16 16 | 0064f4 |             | find-name_done                       
1629:000 | DONE ins | na 16 16 | 0064f4 | e8          |                 inx                  drop old address (NIP)
1630:000 | DONE ins | na 16 16 | 0064f5 | e8          |                 inx                  
1631:000 | DONE wsp | na 16 16 |        |             |
1632:000 | DONE lbl | na 16 16 | 0064f6 |             | z_find-name                          
1632:001 | DONE ins | na 16 16 | 0064f6 | 60          |                 rts                  
1633:000 | DONE wsp | na 16 16 |        |             |
1634:000 | DONE wsp | na 16 16 |        |             |
1635:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1636:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
1637:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
1638:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
1639:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
1640:000 | DONE lbl | na 16 16 | 0064f7 |             | xt_immediate                         
1641:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1642:000 | DONE ins | na 16 16 | 0064f7 | a9 02 00    |                 lda.# IM             Immediate flag
1643:000 | DONE ins | na 16 16 | 0064fa | eb          |                 xba                  flags are MSB
1644:000 | DONE ins | na 16 16 | 0064fb | 12 02       |                 ora.di 000202        ORA (DP)
1645:000 | DONE ins | na 16 16 | 0064fd | 92 02       |                 sta.di 000202        
1646:000 | DONE wsp | na 16 16 |        |             |
1647:000 | DONE lbl | na 16 16 | 0064ff |             | z_immediate                          
1647:001 | DONE ins | na 16 16 | 0064ff | 60          |                 rts                  
1648:000 | DONE wsp | na 16 16 |        |             |
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1651:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
1652:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
1653:000 | DONE lbl | na 16 16 | 006500 |             | xt_invert                            
1654:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1655:000 | DONE ins | na 16 16 | 006500 | 98          |                 tya                  
1656:000 | DONE ins | na 16 16 | 006501 | 49 ff ff    |                 eor.# 0ffff          
1657:000 | DONE ins | na 16 16 | 006504 | a8          |                 tay                  
1658:000 | DONE wsp | na 16 16 |        |             |
1659:000 | DONE lbl | na 16 16 | 006505 |             | z_invert                             
1659:001 | DONE ins | na 16 16 | 006505 | 60          |                 rts                  
1660:000 | DONE wsp | na 16 16 |        |             |
1661:000 | DONE wsp | na 16 16 |        |             |
1662:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1663:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
1664:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
1665:000 | DONE lbl | na 16 16 | 006506 |             | xt_here                              
1666:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1667:000 | DONE ins | na 16 16 | 006506 | ca          |                 dex                  
1668:000 | DONE ins | na 16 16 | 006507 | ca          |                 dex                  
1669:000 | DONE ins | na 16 16 | 006508 | 94 00       |                 sty.dx 00            
1670:000 | DONE wsp | na 16 16 |        |             |
1671:000 | DONE ins | na 16 16 | 00650a | a4 00       |                 ldy.d 000200         
1672:000 | DONE wsp | na 16 16 |        |             |
1673:000 | DONE lbl | na 16 16 | 00650c |             | z_here                               
1673:001 | DONE ins | na 16 16 | 00650c | 60          |                 rts                  
1674:000 | DONE wsp | na 16 16 |        |             |
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1677:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
1678:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
1679:000 | DONE lbl | na 16 16 | 00650d |             | xt_hex                               
1680:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1681:000 | DONE ins | na 16 16 | 00650d | a9 10 00    |                 lda.# 0010           
1682:000 | DONE ins | na 16 16 | 006510 | 85 1c       |                 sta.d 00021c         
1683:000 | DONE wsp | na 16 16 |        |             |
1684:000 | DONE lbl | na 16 16 | 006512 |             | z_hex                                
1684:001 | DONE ins | na 16 16 | 006512 | 60          |                 rts                  
1685:000 | DONE wsp | na 16 16 |        |             |
1686:000 | DONE wsp | na 16 16 |        |             |
1687:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1688:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
1689:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
1690:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
1691:000 | DONE cmt | na 16 16 |        |             | ; for instance
1692:000 | DONE lbl | na 16 16 | 006513 |             | xt_literal                           
1693:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
1694:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
1695:000 | DONE ins | na 16 16 | 006513 | f4 25 65    |                 phe.# 006525         PEA LITERAL_RT
1696:000 | DONE ins | na 16 16 | 006516 | 20 43 6c    |                 jsr 006c43           
1697:000 | DONE wsp | na 16 16 |        |             |
1698:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
1699:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
1700:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
1701:000 | DONE ins | na 16 16 | 006519 | 98          |                 tya                  
1702:000 | DONE ins | na 16 16 | 00651a | 92 00       |                 sta.di 000200        
1703:000 | DONE ins | na 16 16 | 00651c | e6 00       |                 inc.d 000200         
1704:000 | DONE ins | na 16 16 | 00651e | e6 00       |                 inc.d 000200         
1705:000 | DONE wsp | na 16 16 |        |             |
1706:000 | DONE ins | na 16 16 | 006520 | b4 00       |                 ldy.dx 00            DROP
1707:000 | DONE ins | na 16 16 | 006522 | e8          |                 inx                  
1708:000 | DONE ins | na 16 16 | 006523 | e8          |                 inx                  
1709:000 | DONE wsp | na 16 16 |        |             |
1710:000 | DONE lbl | na 16 16 | 006524 |             | z_literal                            
1710:001 | DONE ins | na 16 16 | 006524 | 60          |                 rts                  
1711:000 | DONE wsp | na 16 16 |        |             |
1712:000 | DONE lbl | na 16 16 | 006525 |             | literal_rt                           
1713:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
1714:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
1715:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
1716:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
1717:000 | DONE wsp | na 16 16 |        |             |
1718:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
1719:000 | DONE ins | na 16 16 | 006525 | ca          |                 dex                  
1720:000 | DONE ins | na 16 16 | 006526 | ca          |                 dex                  
1721:000 | DONE ins | na 16 16 | 006527 | 94 00       |                 sty.dx 00            
1722:000 | DONE wsp | na 16 16 |        |             |
1723:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
1724:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
1725:000 | DONE ins | na 16 16 | 006529 | 7a          |                 ply                  
1726:000 | DONE ins | na 16 16 | 00652a | c8          |                 iny                  
1727:000 | DONE ins | na 16 16 | 00652b | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
1728:000 | DONE wsp | na 16 16 |        |             |
1729:000 | DONE ins | na 16 16 | 00652e | c8          |                 iny                  move return address past data and restore
1730:000 | DONE ins | na 16 16 | 00652f | 5a          |                 phy                  so we can get back home
1731:000 | DONE wsp | na 16 16 |        |             |
1732:000 | DONE ins | na 16 16 | 006530 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
1733:000 | DONE wsp | na 16 16 |        |             |
1734:000 | DONE ins | na 16 16 | 006531 | 60          |                 rts                  
1735:000 | DONE wsp | na 16 16 |        |             |
1736:000 | DONE wsp | na 16 16 |        |             |
1737:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1738:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
1739:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
1740:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1741:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1742:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1743:000 | DONE lbl | na 16 16 | 006532 |             | xt_max                               
1744:000 | DONE ins | na 16 16 | 006532 | 98          |                 tya                  
1745:000 | DONE ins | na 16 16 | 006533 | d5 00       |                 cmp.dx 00            
1746:000 | DONE wsp | na 16 16 |        |             |
1747:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1748:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1749:000 | DONE ins | na 16 16 | 006535 | f0 0b       |                 beq 006542           Faster than DROP because TOS is in Y
1750:000 | DONE wsp | na 16 16 |        |             |
1751:000 | DONE ins | na 16 16 | 006537 | f5 00       |                 sbc.dx 00            
1752:000 | DONE ins | na 16 16 | 006539 | 50 03       |                 bvc 00653e           no overflow, skip ahead
1753:000 | DONE wsp | na 16 16 |        |             |
1754:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1755:000 | DONE ins | na 16 16 | 00653b | 49 00 80    |                 eor.# 8000           compliment negative flag
1756:000 | DONE wsp | na 16 16 |        |             |
1757:000 | DONE lbl | na 16 16 | 00653e |             | max_no_ov                            
1758:000 | DONE ins | na 16 16 | 00653e | 10 02       |                 bpl 006542           keep TOS
1759:000 | DONE lbl | na 16 16 | 006540 |             | max_drop                             
1760:000 | DONE ins | na 16 16 | 006540 | b4 00       |                 ldy.dx 00            DROP so NOS is result
1761:000 | DONE lbl | na 16 16 | 006542 |             | max_nip                              
1762:000 | DONE ins | na 16 16 | 006542 | e8          |                 inx                  
1763:000 | DONE ins | na 16 16 | 006543 | e8          |                 inx                  
1764:000 | DONE wsp | na 16 16 |        |             |
1765:000 | DONE lbl | na 16 16 | 006544 |             | z_max                                
1765:001 | DONE ins | na 16 16 | 006544 | 60          |                 rts                  
1766:000 | DONE wsp | na 16 16 |        |             |
1767:000 | DONE wsp | na 16 16 |        |             |
1768:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1769:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
1770:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
1771:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1772:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1773:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1774:000 | DONE lbl | na 16 16 | 006545 |             | xt_min                               
1775:000 | DONE ins | na 16 16 | 006545 | 98          |                 tya                  
1776:000 | DONE ins | na 16 16 | 006546 | d5 00       |                 cmp.dx 00            
1777:000 | DONE wsp | na 16 16 |        |             |
1778:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1779:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1780:000 | DONE ins | na 16 16 | 006548 | f0 0b       |                 beq 006555           Faster than DROP because TOS is in Y
1781:000 | DONE wsp | na 16 16 |        |             |
1782:000 | DONE ins | na 16 16 | 00654a | f5 00       |                 sbc.dx 00            
1783:000 | DONE ins | na 16 16 | 00654c | 50 03       |                 bvc 006551           no overflow, skip ahead
1784:000 | DONE wsp | na 16 16 |        |             |
1785:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1786:000 | DONE ins | na 16 16 | 00654e | 49 00 80    |                 eor.# 8000           compliment negative flag
1787:000 | DONE wsp | na 16 16 |        |             |
1788:000 | DONE lbl | na 16 16 | 006551 |             | min_no_ov                            
1789:000 | DONE ins | na 16 16 | 006551 | 30 02       |                 bmi 006555           keep TOS
1790:000 | DONE lbl | na 16 16 | 006553 |             | min_drop                             
1791:000 | DONE ins | na 16 16 | 006553 | b4 00       |                 ldy.dx 00            DROP so NOS is result
1792:000 | DONE lbl | na 16 16 | 006555 |             | min_nip                              
1793:000 | DONE ins | na 16 16 | 006555 | e8          |                 inx                  
1794:000 | DONE ins | na 16 16 | 006556 | e8          |                 inx                  
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE lbl | na 16 16 | 006557 |             | z_min                                
1796:001 | DONE ins | na 16 16 | 006557 | 60          |                 rts                  
1797:000 | DONE wsp | na 16 16 |        |             |
1798:000 | DONE wsp | na 16 16 |        |             |
1799:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1800:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
1801:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
1802:000 | DONE lbl | na 16 16 | 006558 |             | xt_name-int                          
1803:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1804:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1805:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
1806:000 | DONE ins | na 16 16 | 006558 | c8          |                 iny                  
1807:000 | DONE ins | na 16 16 | 006559 | c8          |                 iny                  
1808:000 | DONE ins | na 16 16 | 00655a | c8          |                 iny                  
1809:000 | DONE ins | na 16 16 | 00655b | c8          |                 iny                  
1810:000 | DONE ins | na 16 16 | 00655c | b9 00 00    |                 lda.y 0000           
1811:000 | DONE ins | na 16 16 | 00655f | a8          |                 tay                  
1812:000 | DONE wsp | na 16 16 |        |             |
1813:000 | DONE lbl | na 16 16 | 006560 |             | z_name-int                           
1813:001 | DONE ins | na 16 16 | 006560 | 60          |                 rts                  
1814:000 | DONE wsp | na 16 16 |        |             |
1815:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1816:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
1817:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
1818:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
1819:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
1820:000 | DONE lbl | na 16 16 | 006561 |             | xt_name-string                       
1821:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1822:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1823:000 | DONE ins | na 16 16 | 006561 | ca          |                 dex                  move NOS down one
1824:000 | DONE ins | na 16 16 | 006562 | ca          |                 dex                  
1825:000 | DONE wsp | na 16 16 |        |             |
1826:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
1827:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
1828:000 | DONE ins | na 16 16 | 006563 | 98          |                 tya                  
1829:000 | DONE ins | na 16 16 | 006564 | 18          |                 clc                  
1830:000 | DONE ins | na 16 16 | 006565 | 69 08 00    |                 adc.# 0008           
1831:000 | DONE ins | na 16 16 | 006568 | 95 00       |                 sta.dx 00            NOS
1832:000 | DONE wsp | na 16 16 |        |             |
1833:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
1834:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
1835:000 | DONE ins | na 16 16 | 00656a | b9 00 00    |                 lda.y 0000           LDA $0000,Y
1836:000 | DONE ins | na 16 16 | 00656d | 29 ff 00    |                 and.# 00ff           mask all but length byte
1837:000 | DONE ins | na 16 16 | 006570 | a8          |                 tay                  
1838:000 | DONE wsp | na 16 16 |        |             |
1839:000 | DONE lbl | na 16 16 | 006571 |             | z_name-string                        
1839:001 | DONE ins | na 16 16 | 006571 | 60          |                 rts                  
1840:000 | DONE wsp | na 16 16 |        |             |
1841:000 | DONE wsp | na 16 16 |        |             |
1842:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1843:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
1844:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
1845:000 | DONE lbl | na 16 16 | 006572 |             | xt_negate                            
1846:000 | DONE ins | na 16 16 | 006572 | 98          |                 tya                  
1847:000 | DONE ins | na 16 16 | 006573 | 49 ff ff    |                 eor.# 0ffff          
1848:000 | DONE ins | na 16 16 | 006576 | 1a          |                 inc.a                
1849:000 | DONE ins | na 16 16 | 006577 | a8          |                 tay                  
1850:000 | DONE wsp | na 16 16 |        |             |
1851:000 | DONE lbl | na 16 16 | 006578 |             | z_negate                             
1851:001 | DONE ins | na 16 16 | 006578 | 60          |                 rts                  
1852:000 | DONE wsp | na 16 16 |        |             |
1853:000 | DONE wsp | na 16 16 |        |             |
1854:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1855:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
1856:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
1857:000 | DONE lbl | na 16 16 | 006579 |             | xt_nip                               
1858:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1859:000 | DONE ins | na 16 16 | 006579 | e8          |                 inx                  
1860:000 | DONE ins | na 16 16 | 00657a | e8          |                 inx                  
1861:000 | DONE lbl | na 16 16 | 00657b |             | z_nip                                
1861:001 | DONE ins | na 16 16 | 00657b | 60          |                 rts                  
1862:000 | DONE wsp | na 16 16 |        |             |
1863:000 | DONE wsp | na 16 16 |        |             |
1864:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1865:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
1866:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
1867:000 | DONE lbl | na 16 16 | 00657c |             | xt_or                                
1868:000 | DONE ins | na 16 16 | 00657c | 98          |                 tya                  
1869:000 | DONE ins | na 16 16 | 00657d | 15 00       |                 ora.dx 00            
1870:000 | DONE ins | na 16 16 | 00657f | a8          |                 tay                  
1871:000 | DONE wsp | na 16 16 |        |             |
1872:000 | DONE ins | na 16 16 | 006580 | e8          |                 inx                  
1873:000 | DONE ins | na 16 16 | 006581 | e8          |                 inx                  
1874:000 | DONE wsp | na 16 16 |        |             |
1875:000 | DONE lbl | na 16 16 | 006582 |             | z_or                                 
1875:001 | DONE ins | na 16 16 | 006582 | 60          |                 rts                  
1876:000 | DONE wsp | na 16 16 |        |             |
1877:000 | DONE wsp | na 16 16 |        |             |
1878:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1879:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
1880:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
1881:000 | DONE lbl | na 16 16 | 006583 |             | xt_over                              
1882:000 | DONE ins | na 16 16 | 006583 | ca          |                 dex                  
1883:000 | DONE ins | na 16 16 | 006584 | ca          |                 dex                  
1884:000 | DONE ins | na 16 16 | 006585 | 94 00       |                 sty.dx 00            
1885:000 | DONE ins | na 16 16 | 006587 | b4 02       |                 ldy.dx 02            
1886:000 | DONE wsp | na 16 16 |        |             |
1887:000 | DONE lbl | na 16 16 | 006589 |             | z_over                               
1887:001 | DONE ins | na 16 16 | 006589 | 60          |                 rts                  
1888:000 | DONE wsp | na 16 16 |        |             |
1889:000 | DONE wsp | na 16 16 |        |             |
1890:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1891:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
1892:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
1893:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
1894:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
1895:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
1896:000 | DONE lbl | na 16 16 | 00658a |             | xt_pad                               
1897:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1898:000 | DONE ins | na 16 16 | 00658a | ca          |                 dex                  
1899:000 | DONE ins | na 16 16 | 00658b | ca          |                 dex                  
1900:000 | DONE ins | na 16 16 | 00658c | 94 00       |                 sty.dx 00            
1901:000 | DONE wsp | na 16 16 |        |             |
1902:000 | DONE ins | na 16 16 | 00658e | a5 00       |                 lda.d 000200         
1903:000 | DONE ins | na 16 16 | 006590 | 18          |                 clc                  
1904:000 | DONE ins | na 16 16 | 006591 | 69 7f 00    |                 adc.# 00007f         
1905:000 | DONE ins | na 16 16 | 006594 | a8          |                 tay                  
1906:000 | DONE wsp | na 16 16 |        |             |
1907:000 | DONE lbl | na 16 16 | 006595 |             | z_pad                                
1907:001 | DONE ins | na 16 16 | 006595 | 60          |                 rts                  
1908:000 | DONE wsp | na 16 16 |        |             |
1909:000 | DONE wsp | na 16 16 |        |             |
1910:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1911:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
1912:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
1913:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
1914:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
1915:000 | DONE lbl | na 16 16 | 006596 |             | xt_page                              
1916:000 | DONE ins | na 16 16 | 006596 | a9 3f 6f    |                 lda.# 006f3f         
1917:000 | DONE ins | na 16 16 | 006599 | 20 6a 6c    |                 jsr 006c6a           
1918:000 | DONE wsp | na 16 16 |        |             |
1919:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
1920:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
1921:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
1922:000 | DONE ins | na 16 16 | 00659c | a9 44 6f    |                 lda.# 006f44         
1923:000 | DONE ins | na 16 16 | 00659f | 20 6a 6c    |                 jsr 006c6a           
1924:000 | DONE wsp | na 16 16 |        |             |
1925:000 | DONE lbl | na 16 16 | 0065a2 |             | z_page                               
1925:001 | DONE ins | na 16 16 | 0065a2 | 60          |                 rts                  
1926:000 | DONE wsp | na 16 16 |        |             |
1927:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1928:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
1929:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
1930:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
1931:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
1932:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
1933:000 | DONE lbl | na 16 16 | 0065a3 |             | xt_parse-name                        
1934:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1935:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1936:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
1937:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
1938:000 | DONE ins | na 16 16 | 0065a3 | 5a          |                 phy                  save TOS for later use
1939:000 | DONE ins | na 16 16 | 0065a4 | a4 12       |                 ldy.d 000212         >IN
1940:000 | DONE ins | na 16 16 | 0065a6 | e2 20       |                 sep 20               
1940:001 | DONE ctl | na  8 16 |        |             |         .!a8
1941:000 | DONE lbl | na  8 16 | 0065a8 |             | parse-name_loop                      
1942:000 | DONE ins | na  8 16 | 0065a8 | c4 0e       |                 cpy.d 00020e         end of line?
1943:000 | DONE ins | na  8 16 | 0065aa | f0 09       |                 beq 0065b5           
1944:000 | DONE wsp | na  8 16 |        |             |
1945:000 | DONE ins | na  8 16 | 0065ac | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
1946:000 | DONE ins | na  8 16 | 0065ae | c9 20       |                 cmp.# AscSP          
1947:000 | DONE ins | na  8 16 | 0065b0 | d0 17       |                 bne 0065c9           
1948:000 | DONE ins | na  8 16 | 0065b2 | c8          |                 iny                  
1949:000 | DONE ins | na  8 16 | 0065b3 | 80 f3       |                 bra 0065a8           
1950:000 | DONE wsp | na  8 16 |        |             |
1951:000 | DONE lbl | na  8 16 | 0065b5 |             | parse-name_empty_line                
1952:000 | DONE ins | na  8 16 | 0065b5 | c2 20       |                 rep 20               
1952:001 | DONE ctl | na 16 16 |        |             |         .!a16
1953:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
1954:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
1955:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
1956:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
1957:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
1958:000 | DONE ins | na 16 16 | 0065b7 | ca          |                 dex                  
1959:000 | DONE ins | na 16 16 | 0065b8 | ca          |                 dex                  
1960:000 | DONE ins | na 16 16 | 0065b9 | ca          |                 dex                  
1961:000 | DONE ins | na 16 16 | 0065ba | ca          |                 dex                  
1962:000 | DONE wsp | na 16 16 |        |             |
1963:000 | DONE ins | na 16 16 | 0065bb | 7a          |                 ply                  restore old TOS as 3OS
1964:000 | DONE ins | na 16 16 | 0065bc | 94 02       |                 sty.dx 02            
1965:000 | DONE wsp | na 16 16 |        |             |
1966:000 | DONE ins | na 16 16 | 0065be | a5 0c       |                 lda.d 00020c         
1967:000 | DONE ins | na 16 16 | 0065c0 | 18          |                 clc                  
1968:000 | DONE ins | na 16 16 | 0065c1 | 65 0e       |                 adc.d 00020e         
1969:000 | DONE ins | na 16 16 | 0065c3 | 95 00       |                 sta.dx 00            Address as NOS
1970:000 | DONE wsp | na 16 16 |        |             |
1971:000 | DONE ins | na 16 16 | 0065c5 | a0 00 00    |                 ldy.# 0000           TOS
1972:000 | DONE wsp | na 16 16 |        |             |
1973:000 | DONE ins | na 16 16 | 0065c8 | 60          |                 rts                  don't have to go through PARSE
1974:000 | DONE wsp | na 16 16 |        |             |
1975:000 | DONE lbl | na 16 16 | 0065c9 |             | parse-name_found                     
1976:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1977:000 | DONE ins | na 16 16 | 0065c9 | c2 20       |                 rep 20               
1977:001 | DONE ctl | na 16 16 |        |             |         .!a16
1978:000 | DONE ins | na 16 16 | 0065cb | 84 12       |                 sty.d 000212         new >IN
1979:000 | DONE wsp | na 16 16 |        |             |
1980:000 | DONE ins | na 16 16 | 0065cd | 7a          |                 ply                  recover TOS
1981:000 | DONE ins | na 16 16 | 0065ce | ca          |                 dex                  
1982:000 | DONE ins | na 16 16 | 0065cf | ca          |                 dex                  
1983:000 | DONE ins | na 16 16 | 0065d0 | 94 00       |                 sty.dx 00            
1984:000 | DONE wsp | na 16 16 |        |             |
1985:000 | DONE ins | na 16 16 | 0065d2 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
1986:000 | DONE wsp | na 16 16 |        |             |
1987:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
1988:000 | DONE wsp | na 16 16 |        |             |
1989:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1990:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
1991:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
1992:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
1993:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
1994:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
1995:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
1996:000 | DONE cmt | na 16 16 |        |             | ;
1997:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
1998:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
1999:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
2000:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
2001:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
2002:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
2003:000 | DONE cmt | na 16 16 |        |             | ;
2004:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
2005:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
2006:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
2007:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
2008:000 | DONE lbl | na 16 16 | 0065d5 |             | xt_parse                             
2009:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2010:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2011:000 | DONE ins | na 16 16 | 0065d5 | 84 16       |                 sty.d 000216         save delimiter, char is LSB
2012:000 | DONE wsp | na 16 16 |        |             |
2013:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
2014:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
2015:000 | DONE cmt | na 16 16 |        |             |                 ; return
2016:000 | DONE ins | na 16 16 | 0065d7 | a5 12       |                 lda.d 000212         
2017:000 | DONE ins | na 16 16 | 0065d9 | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
2018:000 | DONE ins | na 16 16 | 0065db | 18          |                 clc                  
2019:000 | DONE ins | na 16 16 | 0065dc | 65 0c       |                 adc.d 00020c         
2020:000 | DONE wsp | na 16 16 |        |             |
2021:000 | DONE ins | na 16 16 | 0065de | ca          |                 dex                  save addr as NOS
2022:000 | DONE ins | na 16 16 | 0065df | ca          |                 dex                  
2023:000 | DONE ins | na 16 16 | 0065e0 | 95 00       |                 sta.dx 00            
2024:000 | DONE wsp | na 16 16 |        |             |
2025:000 | DONE ins | na 16 16 | 0065e2 | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
2026:000 | DONE wsp | na 16 16 |        |             |
2027:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
2028:000 | DONE ins | na 16 16 | 0065e4 | a4 12       |                 ldy.d 000212         
2029:000 | DONE ins | na 16 16 | 0065e6 | e2 20       |                 sep 20               
2029:001 | DONE ctl | na  8 16 |        |             |         .!a8
2030:000 | DONE wsp | na  8 16 |        |             |
2031:000 | DONE lbl | na  8 16 | 0065e8 |             | parse_loop                           
2032:000 | DONE ins | na  8 16 | 0065e8 | c4 0e       |                 cpy.d 00020e         check for EOL first
2033:000 | DONE ins | na  8 16 | 0065ea | f0 0d       |                 beq 0065f9           
2034:000 | DONE wsp | na  8 16 |        |             |
2035:000 | DONE ins | na  8 16 | 0065ec | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2036:000 | DONE ins | na  8 16 | 0065ee | c5 16       |                 cmp.d 000216         found delimiter?
2037:000 | DONE ins | na  8 16 | 0065f0 | f0 03       |                 beq 0065f5           
2038:000 | DONE ins | na  8 16 | 0065f2 | c8          |                 iny                  
2039:000 | DONE ins | na  8 16 | 0065f3 | 80 f3       |                 bra 0065e8           
2040:000 | DONE wsp | na  8 16 |        |             |
2041:000 | DONE lbl | na  8 16 | 0065f5 |             | parse_found_delimiter                
2042:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
2043:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
2044:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
2045:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
2046:000 | DONE ins | na  8 16 | 0065f5 | c2 20       |                 rep 20               
2046:001 | DONE ctl | na 16 16 |        |             |         .!a16
2047:000 | DONE ins | na 16 16 | 0065f7 | e6 18       |                 inc.d 000218         
2048:000 | DONE wsp | na 16 16 |        |             |
2049:000 | DONE lbl | na 16 16 | 0065f9 |             | parse_reached_eol                    
2050:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
2051:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2052:000 | DONE ins | na 16 16 | 0065f9 | c2 20       |                 rep 20               
2052:001 | DONE ctl | na 16 16 |        |             |         .!a16
2053:000 | DONE ins | na 16 16 | 0065fb | 98          |                 tya                  
2054:000 | DONE ins | na 16 16 | 0065fc | 38          |                 sec                  
2055:000 | DONE ins | na 16 16 | 0065fd | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
2056:000 | DONE ins | na 16 16 | 0065ff | 48          |                 pha                  save so we can manipulate Y
2057:000 | DONE wsp | na 16 16 |        |             |
2058:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
2059:000 | DONE ins | na 16 16 | 006600 | 98          |                 tya                  
2060:000 | DONE ins | na 16 16 | 006601 | 18          |                 clc                  
2061:000 | DONE ins | na 16 16 | 006602 | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
2062:000 | DONE ins | na 16 16 | 006604 | 85 12       |                 sta.d 000212         
2063:000 | DONE wsp | na 16 16 |        |             |
2064:000 | DONE ins | na 16 16 | 006606 | 7a          |                 ply                  length of string in TOS
2065:000 | DONE wsp | na 16 16 |        |             |
2066:000 | DONE lbl | na 16 16 | 006607 |             | z_parse-name                         
2067:000 | DONE lbl | na 16 16 | 006607 |             | z_parse                              
2067:001 | DONE ins | na 16 16 | 006607 | 60          |                 rts                  
2068:000 | DONE wsp | na 16 16 |        |             |
2069:000 | DONE wsp | na 16 16 |        |             |
2070:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2071:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
2072:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
2073:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
2074:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
2075:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
2076:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
2077:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
2078:000 | DONE lbl | na 16 16 | 006608 |             | xt_postpone                          
2079:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
2080:000 | DONE ins | na 16 16 | 006608 | 20 a3 65    |                 jsr 0065a3           ( addr n )
2081:000 | DONE wsp | na 16 16 |        |             |
2082:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
2083:000 | DONE ins | na 16 16 | 00660b | d0 06       |                 bne 006613           
2084:000 | DONE ins | na 16 16 | 00660d | a9 92 6e    |                 lda.# 006e92         
2085:000 | DONE ins | na 16 16 | 006610 | 4c 64 6c    |                 jmp 006c64           
2086:000 | DONE wsp | na 16 16 |        |             |
2087:000 | DONE lbl | na 16 16 | 006613 |             | pp_got_word                          
2088:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
2089:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
2090:000 | DONE ins | na 16 16 | 006613 | 20 9d 6c    |                 jsr 006c9d           
2091:000 | DONE wsp | na 16 16 |        |             |
2092:000 | DONE ins | na 16 16 | 006616 | 20 a0 64    |                 jsr 0064a0           ( nt | 0 )
2093:000 | DONE wsp | na 16 16 |        |             |
2094:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
2095:000 | DONE ins | na 16 16 | 006619 | d0 03       |                 bne 00661e           
2096:000 | DONE ins | na 16 16 | 00661b | a9 2f 6f    |                 lda.# 006f2f         
2097:000 | DONE wsp | na 16 16 |        |             |
2098:000 | DONE lbl | na 16 16 | 00661e |             | pp_got_nt                            
2099:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
2100:000 | DONE ins | na 16 16 | 00661e | 84 16       |                 sty.d 000216         
2101:000 | DONE wsp | na 16 16 |        |             |
2102:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
2103:000 | DONE ins | na 16 16 | 006620 | 20 58 65    |                 jsr 006558           ( xt )
2104:000 | DONE wsp | na 16 16 |        |             |
2105:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
2106:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
2107:000 | DONE ins | na 16 16 | 006623 | b2 16       |                 lda.di 000216        LDA (TMP1) - get status byte of word
2108:000 | DONE ins | na 16 16 | 006625 | eb          |                 xba                  flags are MSB
2109:000 | DONE ins | na 16 16 | 006626 | 29 02 00    |                 and.# IM             mask everything but Immediate bit
2110:000 | DONE ins | na 16 16 | 006629 | f0 03       |                 beq 00662e           
2111:000 | DONE wsp | na 16 16 |        |             |
2112:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
2113:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
2114:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
2115:000 | DONE ins | na 16 16 | 00662b | 4c d8 62    |                 jmp 0062d8           JSR/RTS
2116:000 | DONE wsp | na 16 16 |        |             |
2117:000 | DONE lbl | na 16 16 | 00662e |             | pp_not_immediate                     
2118:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deffered
2119:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
2120:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
2121:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
2122:000 | DONE ins | na 16 16 | 00662e | f4 25 65    |                 phe.# 006525         PEA LITERAL_RT
2123:000 | DONE ins | na 16 16 | 006631 | 20 43 6c    |                 jsr 006c43           
2124:000 | DONE wsp | na 16 16 |        |             |
2125:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
2126:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
2127:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
2128:000 | DONE ins | na 16 16 | 006634 | 20 e7 60    |                 jsr 0060e7           
2129:000 | DONE wsp | na 16 16 |        |             |
2130:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
2131:000 | DONE ins | na 16 16 | 006637 | f4 d8 62    |                 phe.# 0062d8         
2132:000 | DONE ins | na 16 16 | 00663a | 4c 43 6c    |                 jmp 006c43           JSR/RTS
2133:000 | DONE wsp | na 16 16 |        |             |
2134:000 | DONE lbl | na 16 16 | 00663d |             | z_postpone                           ; never reached
2135:000 | DONE wsp | na 16 16 |        |             |
2136:000 | DONE wsp | na 16 16 |        |             |
2137:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2138:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
2139:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
2140:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
2141:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
2142:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
2143:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
2144:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
2145:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
2146:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
2147:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
2148:000 | DONE lbl | na 16 16 | 00663d |             | xt_refill                            
2149:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2150:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2151:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
2152:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
2153:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
2154:000 | DONE ins | na 16 16 | 00663d | a5 0c       |                 lda.d 00020c         
2155:000 | DONE ins | na 16 16 | 00663f | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
2156:000 | DONE ins | na 16 16 | 006642 | 85 0c       |                 sta.d 00020c         
2157:000 | DONE wsp | na 16 16 |        |             |
2158:000 | DONE ins | na 16 16 | 006644 | a5 0e       |                 lda.d 00020e         current length is now previous length
2159:000 | DONE ins | na 16 16 | 006646 | 85 10       |                 sta.d 000210         
2160:000 | DONE wsp | na 16 16 |        |             |
2161:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
2162:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
2163:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
2164:000 | DONE ins | na 16 16 | 006648 | a5 0a       |                 lda.d 00020a         
2165:000 | DONE ins | na 16 16 | 00664a | d0 14       |                 bne 006660           
2166:000 | DONE wsp | na 16 16 |        |             |
2167:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
2168:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
2169:000 | DONE ins | na 16 16 | 00664c | ca          |                 dex                  push Data Stack down twice
2170:000 | DONE ins | na 16 16 | 00664d | ca          |                 dex                  
2171:000 | DONE ins | na 16 16 | 00664e | 94 00       |                 sty.dx 00            
2172:000 | DONE wsp | na 16 16 |        |             |
2173:000 | DONE ins | na 16 16 | 006650 | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
2174:000 | DONE ins | na 16 16 | 006652 | ca          |                 dex                  
2175:000 | DONE ins | na 16 16 | 006653 | ca          |                 dex                  
2176:000 | DONE ins | na 16 16 | 006654 | 95 00       |                 sta.dx 00            
2177:000 | DONE wsp | na 16 16 |        |             |
2178:000 | DONE ins | na 16 16 | 006656 | a0 ff 00    |                 ldy.# 0000ff         
2179:000 | DONE wsp | na 16 16 |        |             |
2180:000 | DONE ins | na 16 16 | 006659 | 20 be 61    |                 jsr 0061be           ( addr n1 -- n2)
2181:000 | DONE wsp | na 16 16 |        |             |
2182:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
2183:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
2184:000 | DONE ins | na 16 16 | 00665c | a0 ff ff    |                 ldy.# 0ffff          
2185:000 | DONE wsp | na 16 16 |        |             |
2186:000 | DONE ins | na 16 16 | 00665f | 60          |                 rts                  
2187:000 | DONE wsp | na 16 16 |        |             |
2188:000 | DONE lbl | na 16 16 | 006660 |             | refill_src_not_kbd                   
2189:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
2190:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
2191:000 | DONE ins | na 16 16 | 006660 | 1a          |                 inc.a                
2192:000 | DONE ins | na 16 16 | 006661 | d0 06       |                 bne 006669           
2193:000 | DONE wsp | na 16 16 |        |             |
2194:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
2195:000 | DONE ins | na 16 16 | 006663 | ca          |                 dex                  
2196:000 | DONE ins | na 16 16 | 006664 | ca          |                 dex                  
2197:000 | DONE ins | na 16 16 | 006665 | 94 00       |                 sty.dx 00            
2198:000 | DONE ins | na 16 16 | 006667 | a8          |                 tay                  
2199:000 | DONE wsp | na 16 16 |        |             |
2200:000 | DONE ins | na 16 16 | 006668 | 60          |                 rts                  
2201:000 | DONE wsp | na 16 16 |        |             |
2202:000 | DONE lbl | na 16 16 | 006669 |             | refill_source_is_not_string          
2203:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
2204:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
2205:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
2206:000 | DONE ins | na 16 16 | 006669 | a9 e7 6e    |                 lda.# 006ee7         
2207:000 | DONE ins | na 16 16 | 00666c | 4c 64 6c    |                 jmp 006c64           
2208:000 | DONE wsp | na 16 16 |        |             |
2209:000 | DONE lbl | na 16 16 | 00666f |             | z_refill                             
2209:001 | DONE ins | na 16 16 | 00666f | 60          |                 rts                  dummy for compiling
2210:000 | DONE wsp | na 16 16 |        |             |
2211:000 | DONE wsp | na 16 16 |        |             |
2212:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2213:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
2214:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
2215:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
2216:000 | DONE lbl | na 16 16 | 006670 |             | xt_rot                               
2217:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2218:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2219:000 | DONE ins | na 16 16 | 006670 | b5 00       |                 lda.dx 00            save b
2220:000 | DONE ins | na 16 16 | 006672 | 94 00       |                 sty.dx 00            move c to NOS
2221:000 | DONE ins | na 16 16 | 006674 | b4 02       |                 ldy.dx 02            move a to TOS
2222:000 | DONE ins | na 16 16 | 006676 | 95 02       |                 sta.dx 02            save b as 3OS
2223:000 | DONE wsp | na 16 16 |        |             |
2224:000 | DONE lbl | na 16 16 | 006678 |             | z_rot                                
2224:001 | DONE ins | na 16 16 | 006678 | 60          |                 rts                  
2225:000 | DONE wsp | na 16 16 |        |             |
2226:000 | DONE wsp | na 16 16 |        |             |
2227:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2228:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
2229:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
2230:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
2231:000 | DONE cmt | na 16 16 |        |             | ; tmp2
2232:000 | DONE lbl | na 16 16 | 006679 |             | xt_sliteral                          
2233:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2234:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
2235:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
2236:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
2237:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
2238:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
2239:000 | DONE ins | na 16 16 | 006679 | b5 00       |                 lda.dx 00            Address of string is NOS
2240:000 | DONE ins | na 16 16 | 00667b | 85 16       |                 sta.d 000216         
2241:000 | DONE ins | na 16 16 | 00667d | 84 18       |                 sty.d 000218         keep copy of string length
2242:000 | DONE wsp | na 16 16 |        |             |
2243:000 | DONE ins | na 16 16 | 00667f | e2 20       |                 sep 20               
2243:001 | DONE ctl | na  8 16 |        |             |         .!a8
2244:000 | DONE ins | na  8 16 | 006681 | a9 4c       |                 lda.# 04c            opcode for JMP
2245:000 | DONE ins | na  8 16 | 006683 | 92 00       |                 sta.di 000200        STA (CP)
2246:000 | DONE ins | na  8 16 | 006685 | c2 20       |                 rep 20               
2246:001 | DONE ctl | na 16 16 |        |             |         .!a16
2247:000 | DONE ins | na 16 16 | 006687 | e6 00       |                 inc.d 000200         
2248:000 | DONE wsp | na 16 16 |        |             |
2249:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
2250:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
2251:000 | DONE ins | na 16 16 | 006689 | a5 18       |                 lda.d 000218         string length
2252:000 | DONE ins | na 16 16 | 00668b | 1a          |                 inc.a                
2253:000 | DONE ins | na 16 16 | 00668c | 1a          |                 inc.a                
2254:000 | DONE wsp | na 16 16 |        |             |
2255:000 | DONE ins | na 16 16 | 00668d | 18          |                 clc                  
2256:000 | DONE ins | na 16 16 | 00668e | 65 00       |                 adc.d 000200         current address
2257:000 | DONE ins | na 16 16 | 006690 | 92 00       |                 sta.di 000200        store jump target
2258:000 | DONE wsp | na 16 16 |        |             |
2259:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
2260:000 | DONE ins | na 16 16 | 006692 | e6 00       |                 inc.d 000200         
2261:000 | DONE ins | na 16 16 | 006694 | e6 00       |                 inc.d 000200         
2262:000 | DONE wsp | na 16 16 |        |             |
2263:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
2264:000 | DONE ins | na 16 16 | 006696 | 88          |                 dey                  last offset is one less than length
2265:000 | DONE ins | na 16 16 | 006697 | e2 20       |                 sep 20               
2265:001 | DONE ctl | na  8 16 |        |             |         .!a8
2266:000 | DONE lbl | na  8 16 | 006699 |             | sl_loop                              
2267:000 | DONE ins | na  8 16 | 006699 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2268:000 | DONE ins | na  8 16 | 00669b | 91 00       |                 sta.diy 000200       STA (CP),Y
2269:000 | DONE ins | na  8 16 | 00669d | 88          |                 dey                  
2270:000 | DONE ins | na  8 16 | 00669e | 10 f9       |                 bpl 006699           
2271:000 | DONE wsp | na  8 16 |        |             |
2272:000 | DONE ins | na  8 16 | 0066a0 | c2 20       |                 rep 20               
2272:001 | DONE ctl | na 16 16 |        |             |         .!a16
2273:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
2274:000 | DONE ins | na 16 16 | 0066a2 | a5 00       |                 lda.d 000200         
2275:000 | DONE ins | na 16 16 | 0066a4 | 85 16       |                 sta.d 000216         overwrites original address
2276:000 | DONE wsp | na 16 16 |        |             |
2277:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
2278:000 | DONE ins | na 16 16 | 0066a6 | 18          |                 clc                  
2279:000 | DONE ins | na 16 16 | 0066a7 | 65 18       |                 adc.d 000218         length of string
2280:000 | DONE ins | na 16 16 | 0066a9 | 85 00       |                 sta.d 000200         
2281:000 | DONE wsp | na 16 16 |        |             |
2282:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
2283:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
2284:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
2285:000 | DONE cmt | na 16 16 |        |             |                 ;
2286:000 | DONE cmt | na 16 16 |        |             |                 ;       jsr sliteral_rt
2287:000 | DONE cmt | na 16 16 |        |             |                 ;       <string address>
2288:000 | DONE cmt | na 16 16 |        |             |                 ;       <string length>
2289:000 | DONE cmt | na 16 16 |        |             |                 ;
2290:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
2291:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
2292:000 | DONE ins | na 16 16 | 0066ab | f4 c4 66    |                 phe.# 0066c4         
2293:000 | DONE ins | na 16 16 | 0066ae | 20 43 6c    |                 jsr 006c43           
2294:000 | DONE wsp | na 16 16 |        |             |
2295:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
2296:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
2297:000 | DONE ins | na 16 16 | 0066b1 | a5 16       |                 lda.d 000216         new address of string
2298:000 | DONE ins | na 16 16 | 0066b3 | 48          |                 pha                  
2299:000 | DONE ins | na 16 16 | 0066b4 | 20 3e 6c    |                 jsr 006c3e           
2300:000 | DONE wsp | na 16 16 |        |             |
2301:000 | DONE ins | na 16 16 | 0066b7 | a5 18       |                 lda.d 000218         
2302:000 | DONE ins | na 16 16 | 0066b9 | 48          |                 pha                  
2303:000 | DONE ins | na 16 16 | 0066ba | 20 3e 6c    |                 jsr 006c3e           
2304:000 | DONE wsp | na 16 16 |        |             |
2305:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
2306:000 | DONE ins | na 16 16 | 0066bd | b4 02       |                 ldy.dx 02            2DROP
2307:000 | DONE ins | na 16 16 | 0066bf | e8          |                 inx                  
2308:000 | DONE ins | na 16 16 | 0066c0 | e8          |                 inx                  
2309:000 | DONE ins | na 16 16 | 0066c1 | e8          |                 inx                  
2310:000 | DONE ins | na 16 16 | 0066c2 | e8          |                 inx                  
2311:000 | DONE wsp | na 16 16 |        |             |
2312:000 | DONE lbl | na 16 16 | 0066c3 |             | z_sliteral                           
2312:001 | DONE ins | na 16 16 | 0066c3 | 60          |                 rts                  
2313:000 | DONE wsp | na 16 16 |        |             |
2314:000 | DONE lbl | na 16 16 | 0066c4 |             | sliteral_rt                          
2315:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
2316:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
2317:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
2318:000 | DONE wsp | na 16 16 |        |             |
2319:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
2320:000 | DONE ins | na 16 16 | 0066c4 | ca          |                 dex                  
2321:000 | DONE ins | na 16 16 | 0066c5 | ca          |                 dex                  
2322:000 | DONE ins | na 16 16 | 0066c6 | ca          |                 dex                  
2323:000 | DONE ins | na 16 16 | 0066c7 | ca          |                 dex                  
2324:000 | DONE ins | na 16 16 | 0066c8 | 94 02       |                 sty.dx 02            
2325:000 | DONE wsp | na 16 16 |        |             |
2326:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
2327:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
2328:000 | DONE ins | na 16 16 | 0066ca | 7a          |                 ply                  
2329:000 | DONE ins | na 16 16 | 0066cb | c8          |                 iny                  
2330:000 | DONE wsp | na 16 16 |        |             |
2331:000 | DONE ins | na 16 16 | 0066cc | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2332:000 | DONE ins | na 16 16 | 0066cf | 95 00       |                 sta.dx 00            save string address as NOS
2333:000 | DONE ins | na 16 16 | 0066d1 | c8          |                 iny                  
2334:000 | DONE ins | na 16 16 | 0066d2 | c8          |                 iny                  
2335:000 | DONE ins | na 16 16 | 0066d3 | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
2336:000 | DONE wsp | na 16 16 |        |             |
2337:000 | DONE ins | na 16 16 | 0066d6 | c8          |                 iny                  ... first, though, repair return jump
2338:000 | DONE ins | na 16 16 | 0066d7 | 5a          |                 phy                  
2339:000 | DONE wsp | na 16 16 |        |             |
2340:000 | DONE ins | na 16 16 | 0066d8 | a8          |                 tay                  TOS is now length of string
2341:000 | DONE wsp | na 16 16 |        |             |
2342:000 | DONE ins | na 16 16 | 0066d9 | 60          |                 rts                  
2343:000 | DONE wsp | na 16 16 |        |             |
2344:000 | DONE wsp | na 16 16 |        |             |
2345:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2346:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
2347:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
2348:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
2349:000 | DONE wsp | na 16 16 |        |             |
2350:000 | DONE lbl | na 16 16 | 0066da |             | xt_source                            
2351:000 | DONE ins | na 16 16 | 0066da | ca          |                 dex                  make room on Data Stack
2352:000 | DONE ins | na 16 16 | 0066db | ca          |                 dex                  
2353:000 | DONE ins | na 16 16 | 0066dc | ca          |                 dex                  
2354:000 | DONE ins | na 16 16 | 0066dd | ca          |                 dex                  
2355:000 | DONE ins | na 16 16 | 0066de | 94 02       |                 sty.dx 02            
2356:000 | DONE wsp | na 16 16 |        |             |
2357:000 | DONE ins | na 16 16 | 0066e0 | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
2358:000 | DONE ins | na 16 16 | 0066e2 | 95 00       |                 sta.dx 00            
2359:000 | DONE wsp | na 16 16 |        |             |
2360:000 | DONE ins | na 16 16 | 0066e4 | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
2361:000 | DONE wsp | na 16 16 |        |             |
2362:000 | DONE lbl | na 16 16 | 0066e6 |             | z_source                             
2362:001 | DONE ins | na 16 16 | 0066e6 | 60          |                 rts                  
2363:000 | DONE wsp | na 16 16 |        |             |
2364:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2365:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
2366:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
2367:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
2368:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
2369:000 | DONE lbl | na 16 16 | 0066e7 |             | xt_source-id                         
2370:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2371:000 | DONE ins | na 16 16 | 0066e7 | ca          |                 dex                  
2372:000 | DONE ins | na 16 16 | 0066e8 | ca          |                 dex                  
2373:000 | DONE ins | na 16 16 | 0066e9 | 94 00       |                 sty.dx 00            
2374:000 | DONE ins | na 16 16 | 0066eb | a4 0a       |                 ldy.d 00020a         
2375:000 | DONE wsp | na 16 16 |        |             |
2376:000 | DONE lbl | na 16 16 | 0066ed |             | z_source-id                          
2376:001 | DONE ins | na 16 16 | 0066ed | 60          |                 rts                  
2377:000 | DONE wsp | na 16 16 |        |             |
2378:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2379:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
2380:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
2381:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
2382:000 | DONE lbl | na 16 16 | 0066ee |             | xt_space                             
2383:000 | DONE ins | na 16 16 | 0066ee | a9 20 00    |                 lda.# AscSP          
2384:000 | DONE ins | na 16 16 | 0066f1 | 20 36 60    |                 jsr 006036           
2385:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2386:000 | DONE wsp | na 16 16 |        |             |
2387:000 | DONE lbl | na 16 16 | 0066f4 |             | z_space                              
2387:001 | DONE ins | na 16 16 | 0066f4 | 60          |                 rts                  
2388:000 | DONE wsp | na 16 16 |        |             |
2389:000 | DONE wsp | na 16 16 |        |             |
2390:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2391:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
2392:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
2393:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
2394:000 | DONE lbl | na 16 16 | 0066f5 |             | xt_spaces                            
2395:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2396:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2397:000 | DONE lbl | na 16 16 | 0066f5 |             | @                                    
2398:000 | DONE ins | na 16 16 | 0066f5 | 88          |                 dey                  this also handles case u=0
2399:000 | DONE ins | na 16 16 | 0066f6 | 30 05       |                 bmi 0066fd           
2400:000 | DONE wsp | na 16 16 |        |             |
2401:000 | DONE ins | na 16 16 | 0066f8 | 20 ee 66    |                 jsr 0066ee           
2402:000 | DONE ins | na 16 16 | 0066fb | 80 f8       |                 bra 0066f5           
2403:000 | DONE wsp | na 16 16 |        |             |
2404:000 | DONE lbl | na 16 16 | 0066fd |             | spaces_done                          
2405:000 | DONE ins | na 16 16 | 0066fd | b4 00       |                 ldy.dx 00            DROP
2406:000 | DONE ins | na 16 16 | 0066ff | e8          |                 inx                  
2407:000 | DONE ins | na 16 16 | 006700 | e8          |                 inx                  
2408:000 | DONE wsp | na 16 16 |        |             |
2409:000 | DONE lbl | na 16 16 | 006701 |             | z_spaces                             
2409:001 | DONE ins | na 16 16 | 006701 | 60          |                 rts                  
2410:000 | DONE wsp | na 16 16 |        |             |
2411:000 | DONE wsp | na 16 16 |        |             |
2412:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2413:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
2414:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
2415:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
2416:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
2417:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
2418:000 | DONE lbl | na 16 16 | 006702 |             | xt_state                             
2419:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2420:000 | DONE ins | na 16 16 | 006702 | ca          |                 dex                  
2421:000 | DONE ins | na 16 16 | 006703 | ca          |                 dex                  
2422:000 | DONE ins | na 16 16 | 006704 | 94 00       |                 sty.dx 00            
2423:000 | DONE ins | na 16 16 | 006706 | a0 14 02    |                 ldy.# 000214         
2424:000 | DONE wsp | na 16 16 |        |             |
2425:000 | DONE lbl | na 16 16 | 006709 |             | z_state                              
2425:001 | DONE ins | na 16 16 | 006709 | 60          |                 rts                  
2426:000 | DONE wsp | na 16 16 |        |             |
2427:000 | DONE wsp | na 16 16 |        |             |
2428:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2429:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
2430:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
2431:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
2432:000 | DONE lbl | na 16 16 | 00670a |             | xt_swap                              
2433:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2434:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2435:000 | DONE ins | na 16 16 | 00670a | b5 00       |                 lda.dx 00            
2436:000 | DONE ins | na 16 16 | 00670c | 94 00       |                 sty.dx 00            
2437:000 | DONE ins | na 16 16 | 00670e | a8          |                 tay                  
2438:000 | DONE wsp | na 16 16 |        |             |
2439:000 | DONE lbl | na 16 16 | 00670f |             | z_swap                               
2439:001 | DONE ins | na 16 16 | 00670f | 60          |                 rts                  
2440:000 | DONE wsp | na 16 16 |        |             |
2441:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2442:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
2443:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
2444:000 | DONE lbl | na 16 16 | 006710 |             | xt_true                              
2445:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2446:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2447:000 | DONE ins | na 16 16 | 006710 | ca          |                 dex                  
2448:000 | DONE ins | na 16 16 | 006711 | ca          |                 dex                  
2449:000 | DONE ins | na 16 16 | 006712 | 94 00       |                 sty.dx 00            
2450:000 | DONE ins | na 16 16 | 006714 | a0 ff ff    |                 ldy.# 0ffff          
2451:000 | DONE wsp | na 16 16 |        |             |
2452:000 | DONE lbl | na 16 16 | 006717 |             | z_true                               
2452:001 | DONE ins | na 16 16 | 006717 | 60          |                 rts                  
2453:000 | DONE wsp | na 16 16 |        |             |
2454:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2455:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
2456:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
2457:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
2458:000 | DONE lbl | na 16 16 | 006718 |             | xt_tuck                              
2459:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2460:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2461:000 | DONE ins | na 16 16 | 006718 | ca          |                 dex                  
2462:000 | DONE ins | na 16 16 | 006719 | ca          |                 dex                  
2463:000 | DONE ins | na 16 16 | 00671a | b5 02       |                 lda.dx 2             
2464:000 | DONE ins | na 16 16 | 00671c | 95 00       |                 sta.dx 0             
2465:000 | DONE ins | na 16 16 | 00671e | 94 02       |                 sty.dx 2             
2466:000 | DONE wsp | na 16 16 |        |             |
2467:000 | DONE lbl | na 16 16 | 006720 |             | z_tuck                               
2467:001 | DONE ins | na 16 16 | 006720 | 60          |                 rts                  
2468:000 | DONE wsp | na 16 16 |        |             |
2469:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2470:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
2471:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
2472:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
2473:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
2474:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
2475:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
2476:000 | DONE cmt | na 16 16 |        |             | ; running.
2477:000 | DONE lbl | na 16 16 | 006721 |             | xt_type                              
2478:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2479:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2480:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
2481:000 | DONE ins | na 16 16 | 006721 | 98          |                 tya                  force flag check of TOS
2482:000 | DONE ins | na 16 16 | 006722 | f0 17       |                 beq 00673b           
2483:000 | DONE wsp | na 16 16 |        |             |
2484:000 | DONE ins | na 16 16 | 006724 | b5 00       |                 lda.dx 00            get address from NOS
2485:000 | DONE ins | na 16 16 | 006726 | 85 16       |                 sta.d 000216         
2486:000 | DONE ins | na 16 16 | 006728 | 84 18       |                 sty.d 000218         number of chars is TOS
2487:000 | DONE ins | na 16 16 | 00672a | a0 00 00    |                 ldy.# 0000           
2488:000 | DONE ins | na 16 16 | 00672d | e2 20       |                 sep 20               
2488:001 | DONE ctl | na  8 16 |        |             |         .!a8
2489:000 | DONE lbl | na  8 16 | 00672f |             | type_loop                            
2490:000 | DONE ins | na  8 16 | 00672f | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2491:000 | DONE ins | na  8 16 | 006731 | 20 36 60    |                 jsr 006036           
2492:000 | DONE ins | na  8 16 | 006734 | c8          |                 iny                  
2493:000 | DONE ins | na  8 16 | 006735 | c4 18       |                 cpy.d 000218         
2494:000 | DONE ins | na  8 16 | 006737 | d0 f6       |                 bne 00672f           
2495:000 | DONE wsp | na  8 16 |        |             |
2496:000 | DONE ins | na  8 16 | 006739 | c2 20       |                 rep 20               
2496:001 | DONE ctl | na 16 16 |        |             |         .!a16
2497:000 | DONE lbl | na 16 16 | 00673b |             | type_done                            
2498:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
2499:000 | DONE ins | na 16 16 | 00673b | b4 02       |                 ldy.dx 02            
2500:000 | DONE ins | na 16 16 | 00673d | e8          |                 inx                  
2501:000 | DONE ins | na 16 16 | 00673e | e8          |                 inx                  
2502:000 | DONE ins | na 16 16 | 00673f | e8          |                 inx                  
2503:000 | DONE ins | na 16 16 | 006740 | e8          |                 inx                  
2504:000 | DONE wsp | na 16 16 |        |             |
2505:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
2506:000 | DONE wsp | na 16 16 |        |             |
2507:000 | DONE lbl | na 16 16 | 006741 |             | z_type                               
2507:001 | DONE ins | na 16 16 | 006741 | 60          |                 rts                  
2508:000 | DONE wsp | na 16 16 |        |             |
2509:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2510:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
2511:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
2512:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
2513:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
2514:000 | DONE lbl | na 16 16 | 006742 |             | xt_unused                            
2515:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2516:000 | DONE ins | na 16 16 | 006742 | a9 ff 7b    |                 lda.# 007bff         
2517:000 | DONE ins | na 16 16 | 006745 | 38          |                 sec                  
2518:000 | DONE ins | na 16 16 | 006746 | e5 00       |                 sbc.d 000200         current compile pointer
2519:000 | DONE wsp | na 16 16 |        |             |
2520:000 | DONE ins | na 16 16 | 006748 | ca          |                 dex                  
2521:000 | DONE ins | na 16 16 | 006749 | ca          |                 dex                  
2522:000 | DONE ins | na 16 16 | 00674a | 94 00       |                 sty.dx 00            
2523:000 | DONE wsp | na 16 16 |        |             |
2524:000 | DONE ins | na 16 16 | 00674c | a8          |                 tay                  
2525:000 | DONE wsp | na 16 16 |        |             |
2526:000 | DONE lbl | na 16 16 | 00674d |             | z_unused                             
2526:001 | DONE ins | na 16 16 | 00674d | 60          |                 rts                  
2527:000 | DONE wsp | na 16 16 |        |             |
2528:000 | DONE wsp | na 16 16 |        |             |
2529:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2530:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
2531:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
2532:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
2533:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
2534:000 | DONE lbl | na 16 16 | 00674e |             | xt_variable                          
2535:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
2536:000 | DONE ins | na 16 16 | 00674e | 20 1b 63    |                 jsr 00631b           
2537:000 | DONE wsp | na 16 16 |        |             |
2538:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
2539:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
2540:000 | DONE ins | na 16 16 | 006751 | a9 00 00    |                 lda.# 0000           
2541:000 | DONE ins | na 16 16 | 006754 | 92 00       |                 sta.di 000200        STA (CP)
2542:000 | DONE wsp | na 16 16 |        |             |
2543:000 | DONE ins | na 16 16 | 006756 | e6 00       |                 inc.d 000200         direct COMMA
2544:000 | DONE ins | na 16 16 | 006758 | e6 00       |                 inc.d 000200         
2545:000 | DONE wsp | na 16 16 |        |             |
2546:000 | DONE lbl | na 16 16 | 00675a |             | z_variable                           
2546:001 | DONE ins | na 16 16 | 00675a | 60          |                 rts                  
2547:000 | DONE wsp | na 16 16 |        |             |
2548:000 | DONE wsp | na 16 16 |        |             |
2549:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2550:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
2551:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
2552:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
2553:000 | DONE lbl | na 16 16 | 00675b |             | xt_words                             
2554:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2555:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2556:000 | DONE ins | na 16 16 | 00675b | 20 14 63    |                 jsr 006314           start on next line, this is a style choice
2557:000 | DONE wsp | na 16 16 |        |             |
2558:000 | DONE ins | na 16 16 | 00675e | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
2559:000 | DONE ins | na 16 16 | 006760 | 48          |                 pha                  
2560:000 | DONE wsp | na 16 16 |        |             |
2561:000 | DONE ins | na 16 16 | 006761 | ca          |                 dex                  create room on TOS
2562:000 | DONE ins | na 16 16 | 006762 | ca          |                 dex                  
2563:000 | DONE ins | na 16 16 | 006763 | 94 00       |                 sty.dx 00            
2564:000 | DONE wsp | na 16 16 |        |             |
2565:000 | DONE lbl | na 16 16 | 006765 |             | words_loop                           
2566:000 | DONE ins | na 16 16 | 006765 | a8          |                 tay                  ( nt )
2567:000 | DONE ins | na 16 16 | 006766 | 20 61 65    |                 jsr 006561           ( nt -- addr u )
2568:000 | DONE ins | na 16 16 | 006769 | 20 21 67    |                 jsr 006721           ( addr u -- )
2569:000 | DONE ins | na 16 16 | 00676c | 20 ee 66    |                 jsr 0066ee           
2570:000 | DONE wsp | na 16 16 |        |             |
2571:000 | DONE ins | na 16 16 | 00676f | 68          |                 pla                  get back first entry in Dictionary
2572:000 | DONE wsp | na 16 16 |        |             |
2573:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
2574:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
2575:000 | DONE ins | na 16 16 | 006770 | 1a          |                 inc.a                
2576:000 | DONE ins | na 16 16 | 006771 | 1a          |                 inc.a                
2577:000 | DONE wsp | na 16 16 |        |             |
2578:000 | DONE ins | na 16 16 | 006772 | ca          |                 dex                  
2579:000 | DONE ins | na 16 16 | 006773 | ca          |                 dex                  
2580:000 | DONE ins | na 16 16 | 006774 | 94 00       |                 sty.dx 00            
2581:000 | DONE wsp | na 16 16 |        |             |
2582:000 | DONE ins | na 16 16 | 006776 | a8          |                 tay                  
2583:000 | DONE ins | na 16 16 | 006777 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2584:000 | DONE ins | na 16 16 | 00677a | 48          |                 pha                  
2585:000 | DONE ins | na 16 16 | 00677b | d0 e8       |                 bne 006765           zero entry signals end of Dictionary
2586:000 | DONE wsp | na 16 16 |        |             |
2587:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
2588:000 | DONE ins | na 16 16 | 00677d | 68          |                 pla                  balance MPU stack, value discarded
2589:000 | DONE wsp | na 16 16 |        |             |
2590:000 | DONE ins | na 16 16 | 00677e | b4 00       |                 ldy.dx 00            
2591:000 | DONE ins | na 16 16 | 006780 | e8          |                 inx                  
2592:000 | DONE ins | na 16 16 | 006781 | e8          |                 inx                  
2593:000 | DONE wsp | na 16 16 |        |             |
2594:000 | DONE lbl | na 16 16 | 006782 |             | z_words                              
2594:001 | DONE ins | na 16 16 | 006782 | 60          |                 rts                  
2595:000 | DONE wsp | na 16 16 |        |             |
2596:000 | DONE wsp | na 16 16 |        |             |
2597:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2598:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
2599:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
2600:000 | DONE lbl | na 16 16 | 006783 |             | xt_xor                               
2601:000 | DONE ins | na 16 16 | 006783 | 98          |                 tya                  
2602:000 | DONE ins | na 16 16 | 006784 | 55 00       |                 eor.dx 00            
2603:000 | DONE ins | na 16 16 | 006786 | a8          |                 tay                  
2604:000 | DONE wsp | na 16 16 |        |             |
2605:000 | DONE ins | na 16 16 | 006787 | e8          |                 inx                  
2606:000 | DONE ins | na 16 16 | 006788 | e8          |                 inx                  
2607:000 | DONE wsp | na 16 16 |        |             |
2608:000 | DONE lbl | na 16 16 | 006789 |             | z_xor                                
2608:001 | DONE ins | na 16 16 | 006789 | 60          |                 rts                  
2609:000 | DONE wsp | na 16 16 |        |             |
2610:000 | DONE wsp | na 16 16 |        |             |
2611:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2612:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
2613:000 | DONE wsp | na 16 16 |        |             |
2614:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
2614:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2614:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
2614:003 | DONE cmt | na 16 16 |        |             | ; This version: 17. Feb 2017
2614:004 | DONE wsp | na 16 16 |        |             |
2614:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
2614:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
2614:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
2614:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
2614:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
2614:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
2614:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
2614:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
2614:013 | DONE cmt | na 16 16 |        |             | ;
2614:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
2614:015 | DONE cmt | na 16 16 |        |             | ;
2614:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
2614:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
2614:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
2614:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
2614:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
2614:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
2614:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
2614:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
2614:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
2614:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
2614:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
2614:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
2614:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2614:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
2614:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2614:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
2614:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
2614:033 | DONE wsp | na 16 16 |        |             |
2614:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
2614:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
2614:036 | DONE cmt | na 16 16 |        |             | ;
2614:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
2614:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
2614:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
2614:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
2614:041 | DONE wsp | na 16 16 |        |             |
2614:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
2614:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
2614:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
2614:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
2614:046 | DONE wsp | na 16 16 |        |             |
2614:047 | DONE lbl | na 16 16 | 00678a |             | nt_bye                               
2614:048 | DONE dir | na 16 16 | 00678a | (1 bytes)   |         .byte 03                     length of word string
2614:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
2614:049 | DONE dir | na 16 16 | 00678b | (1 bytes)   |         .byte { PW + NC }            status byte
2614:049 | DONE dir | na 16 16 |        |             |                 09                       --  	
2614:050 | DONE dir | na 16 16 | 00678c | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
2614:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
2614:051 | DONE dir | na 16 16 | 00678e | (2 bytes)   |         .word 006289                 start of code, the xt of this word
2614:051 | DONE dir | na 16 16 |        |             |                 89 62                    --  . b
2614:052 | DONE dir | na 16 16 | 006790 | (2 bytes)   |         .word 00628c                 end of code (points to RTS)
2614:052 | DONE dir | na 16 16 |        |             |                 8c 62                    --  . b
2614:053 | DONE dir | na 16 16 | 006792 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
2614:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
2614:054 | DONE wsp | na 16 16 |        |             |
2614:055 | DONE lbl | na 16 16 | 006795 |             | nt_cold                              
2614:056 | DONE dir | na 16 16 | 006795 | (2 bytes)   |         .byte 4, 00                  
2614:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2614:057 | DONE dir | na 16 16 | 006797 | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
2614:057 | DONE dir | na 16 16 |        |             |                 8a 67 63 60 de 60        --  . g c ` . `
2614:058 | DONE dir | na 16 16 | 00679d | (4 bytes)   |         .byte 63, 6f, 6c, 64         
2614:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
2614:059 | DONE wsp | na 16 16 |        |             |
2614:060 | DONE lbl | na 16 16 | 0067a1 |             | nt_words                             
2614:061 | DONE dir | na 16 16 | 0067a1 | (2 bytes)   |         .byte 5, { PW + NC }         
2614:061 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2614:062 | DONE dir | na 16 16 | 0067a3 | (6 bytes)   |         .word nt_cold, xt_words, 006782 
2614:062 | DONE dir | na 16 16 |        |             |                 95 67 5b 67 82 67        --  . g [ g . g
2614:063 | DONE dir | na 16 16 | 0067a9 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
2614:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
2614:064 | DONE wsp | na 16 16 |        |             |
2614:065 | DONE lbl | na 16 16 | 0067ae |             | nt_dump                              
2614:066 | DONE dir | na 16 16 | 0067ae | (2 bytes)   |         .byte 4, { PW + NC }         
2614:066 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:067 | DONE dir | na 16 16 | 0067b0 | (6 bytes)   |         .word nt_words, xt_dump, 00645d 
2614:067 | DONE dir | na 16 16 |        |             |                 a1 67 37 64 5d 64        --  . g 7 d ] d
2614:068 | DONE dir | na 16 16 | 0067b6 | (4 bytes)   |         .byte 64, 75, 6d, 70         
2614:068 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
2614:069 | DONE wsp | na 16 16 |        |             |
2614:070 | DONE lbl | na 16 16 | 0067ba |             | nt_bell                              
2614:071 | DONE dir | na 16 16 | 0067ba | (2 bytes)   |         .byte 4, { PW + NC }         
2614:071 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:072 | DONE dir | na 16 16 | 0067bc | (6 bytes)   |         .word nt_dump, xt_bell, 006280 
2614:072 | DONE dir | na 16 16 |        |             |                 ae 67 7a 62 80 62        --  . g z b . b
2614:073 | DONE dir | na 16 16 | 0067c2 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
2614:073 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
2614:074 | DONE wsp | na 16 16 |        |             |
2614:075 | DONE lbl | na 16 16 | 0067c6 |             | nt_decimal                           
2614:076 | DONE dir | na 16 16 | 0067c6 | (2 bytes)   |         .byte 7, { PW + NC }         
2614:076 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2614:077 | DONE dir | na 16 16 | 0067c8 | (6 bytes)   |         .word nt_bell, xt_decimal, 006393 
2614:077 | DONE dir | na 16 16 |        |             |                 ba 67 8e 63 93 63        --  . g . c . c
2614:078 | DONE dir | na 16 16 | 0067ce | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
2614:078 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
2614:079 | DONE wsp | na 16 16 |        |             |
2614:080 | DONE lbl | na 16 16 | 0067d5 |             | nt_hex                               
2614:081 | DONE dir | na 16 16 | 0067d5 | (2 bytes)   |         .byte 3, { PW + NC }         
2614:081 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2614:082 | DONE dir | na 16 16 | 0067d7 | (6 bytes)   |         .word nt_decimal, xt_hex, 006512 
2614:082 | DONE dir | na 16 16 |        |             |                 c6 67 0d 65 12 65        --  . g  e . e
2614:083 | DONE dir | na 16 16 | 0067dd | (3 bytes)   |         .byte 68, 65, 78             
2614:083 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
2614:084 | DONE wsp | na 16 16 |        |             |
2614:085 | DONE lbl | na 16 16 | 0067e0 |             | nt_unused                            
2614:086 | DONE dir | na 16 16 | 0067e0 | (2 bytes)   |         .byte 6, { PW + NC }         
2614:086 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2614:087 | DONE dir | na 16 16 | 0067e2 | (6 bytes)   |         .word nt_hex, xt_unused, 00674d 
2614:087 | DONE dir | na 16 16 |        |             |                 d5 67 42 67 4d 67        --  . g B g M g
2614:088 | DONE dir | na 16 16 | 0067e8 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
2614:088 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
2614:089 | DONE wsp | na 16 16 |        |             |
2614:090 | DONE lbl | na 16 16 | 0067ee |             | nt_page                              
2614:091 | DONE dir | na 16 16 | 0067ee | (2 bytes)   |         .byte 4, { PW + NC }         
2614:091 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:092 | DONE dir | na 16 16 | 0067f0 | (6 bytes)   |         .word nt_unused, xt_page, 0065a2 
2614:092 | DONE dir | na 16 16 |        |             |                 e0 67 96 65 a2 65        --  . g . e . e
2614:093 | DONE dir | na 16 16 | 0067f6 | (4 bytes)   |         .byte 70, 61, 67, 65         
2614:093 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
2614:094 | DONE wsp | na 16 16 |        |             |
2614:095 | DONE lbl | na 16 16 | 0067fa |             | nt_count                             
2614:096 | DONE dir | na 16 16 | 0067fa | (2 bytes)   |         .byte 5, { NC + PW }         
2614:096 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2614:097 | DONE dir | na 16 16 | 0067fc | (6 bytes)   |         .word nt_page, xt_count, 006313 
2614:097 | DONE dir | na 16 16 |        |             |                 ee 67 05 63 13 63        --  . g . c . c
2614:098 | DONE dir | na 16 16 | 006802 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
2614:098 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
2614:099 | DONE wsp | na 16 16 |        |             |
2614:100 | DONE lbl | na 16 16 | 006807 |             | nt_abort                             
2614:101 | DONE dir | na 16 16 | 006807 | (2 bytes)   |         .byte 5, 00                  TODO check flags
2614:101 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2614:102 | DONE dir | na 16 16 | 006809 | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
2614:102 | DONE dir | na 16 16 |        |             |                 fa 67 97 60 de 60        --  . g . ` . `
2614:103 | DONE dir | na 16 16 | 00680f | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
2614:103 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
2614:104 | DONE wsp | na 16 16 |        |             |
2614:105 | DONE lbl | na 16 16 | 006814 |             | nt_parse                             
2614:106 | DONE dir | na 16 16 | 006814 | (2 bytes)   |         .byte 5, 00                  
2614:106 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2614:107 | DONE dir | na 16 16 | 006816 | (6 bytes)   |         .word nt_abort, xt_parse, 006607 
2614:107 | DONE dir | na 16 16 |        |             |                 07 68 d5 65 07 66        --  . h . e . f
2614:108 | DONE dir | na 16 16 | 00681c | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
2614:108 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
2614:109 | DONE wsp | na 16 16 |        |             |
2614:110 | DONE lbl | na 16 16 | 006821 |             | nt_quit                              
2614:111 | DONE dir | na 16 16 | 006821 | (2 bytes)   |         .byte 4, 00                  
2614:111 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2614:112 | DONE dir | na 16 16 | 006823 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
2614:112 | DONE dir | na 16 16 |        |             |                 14 68 9f 60 de 60        --  . h . ` . `
2614:113 | DONE dir | na 16 16 | 006829 | (4 bytes)   |         .byte 71, 75, 69, 74         
2614:113 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
2614:114 | DONE wsp | na 16 16 |        |             |
2614:115 | DONE lbl | na 16 16 | 00682d |             | nt_question                          
2614:116 | DONE dir | na 16 16 | 00682d | (2 bytes)   |         .byte 1, { PW + NC }         
2614:116 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:117 | DONE dir | na 16 16 | 00682f | (6 bytes)   |         .word nt_quit, xt_question, 006134 
2614:117 | DONE dir | na 16 16 |        |             |                 21 68 2e 61 34 61        --  ! h . a 4 a
2614:118 | DONE dir | na 16 16 | 006835 | (1 bytes)   |         .byte 3f                     
2614:118 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
2614:119 | DONE wsp | na 16 16 |        |             |
2614:120 | DONE lbl | na 16 16 | 006836 |             | nt_name-int                          
2614:121 | DONE dir | na 16 16 | 006836 | (2 bytes)   |         .byte 8, { PW + NC }         
2614:121 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2614:122 | DONE dir | na 16 16 | 006838 | (6 bytes)   |         .word nt_question, xt_name-int, 006560 
2614:122 | DONE dir | na 16 16 |        |             |                 2d 68 58 65 60 65        --  - h X e ` e
2614:123 | DONE dir | na 16 16 | 00683e | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
2614:123 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
2614:123 | DONE dir | na 16 16 |        |             |                                          -- 
2614:124 | DONE wsp | na 16 16 |        |             |
2614:125 | DONE lbl | na 16 16 | 006846 |             | nt_cr                                
2614:126 | DONE dir | na 16 16 | 006846 | (2 bytes)   |         .byte 2, { PW + NC }         
2614:126 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2614:127 | DONE dir | na 16 16 | 006848 | (6 bytes)   |         .word nt_name-int, xt_cr, 00631a 
2614:127 | DONE dir | na 16 16 |        |             |                 36 68 14 63 1a 63        --  6 h . c . c
2614:128 | DONE dir | na 16 16 | 00684e | (2 bytes)   |         .byte 63, 72                 
2614:128 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
2614:129 | DONE wsp | na 16 16 |        |             |
2614:130 | DONE lbl | na 16 16 | 006850 |             | nt_bl                                
2614:131 | DONE dir | na 16 16 | 006850 | (2 bytes)   |         .byte 2, { PW + NC }         
2614:131 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2614:132 | DONE dir | na 16 16 | 006852 | (6 bytes)   |         .word nt_cr, xt_bl, 006288   
2614:132 | DONE dir | na 16 16 |        |             |                 46 68 81 62 88 62        --  F h . b . b
2614:133 | DONE dir | na 16 16 | 006858 | (2 bytes)   |         .byte 62, 6c                 
2614:133 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
2614:134 | DONE wsp | na 16 16 |        |             |
2614:135 | DONE lbl | na 16 16 | 00685a |             | nt_spaces                            
2614:136 | DONE dir | na 16 16 | 00685a | (2 bytes)   |         .byte 6, { PW + NC }         
2614:136 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2614:137 | DONE dir | na 16 16 | 00685c | (6 bytes)   |         .word nt_bl, xt_spaces, 006701 
2614:137 | DONE dir | na 16 16 |        |             |                 50 68 f5 66 01 67        --  P h . f . g
2614:138 | DONE dir | na 16 16 | 006862 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
2614:138 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
2614:139 | DONE wsp | na 16 16 |        |             |
2614:140 | DONE lbl | na 16 16 | 006868 |             | nt_space                             
2614:141 | DONE dir | na 16 16 | 006868 | (2 bytes)   |         .byte 5, { PW + NC }         
2614:141 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2614:142 | DONE dir | na 16 16 | 00686a | (6 bytes)   |         .word nt_spaces, xt_space, 0066f4 
2614:142 | DONE dir | na 16 16 |        |             |                 5a 68 ee 66 f4 66        --  Z h . f . f
2614:143 | DONE dir | na 16 16 | 006870 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
2614:143 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
2614:144 | DONE wsp | na 16 16 |        |             |
2614:145 | DONE lbl | na 16 16 | 006875 |             | nt_dots                              
2614:146 | DONE dir | na 16 16 | 006875 | (2 bytes)   |         .byte 2, { PW + NC }         
2614:146 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2614:147 | DONE dir | na 16 16 | 006877 | (6 bytes)   |         .word nt_space, xt_dots, 006431 
2614:147 | DONE dir | na 16 16 |        |             |                 68 68 ea 63 31 64        --  h h . c 1 d
2614:148 | DONE dir | na 16 16 | 00687d | (2 bytes)   |         .byte 2e, 73                 
2614:148 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
2614:149 | DONE wsp | na 16 16 |        |             |
2614:150 | DONE lbl | na 16 16 | 00687f |             | nt_type                              
2614:151 | DONE dir | na 16 16 | 00687f | (2 bytes)   |         .byte 4, 0                   
2614:151 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2614:152 | DONE dir | na 16 16 | 006881 | (6 bytes)   |         .word nt_dots, xt_type, 006741 
2614:152 | DONE dir | na 16 16 |        |             |                 75 68 21 67 41 67        --  u h ! g A g
2614:153 | DONE dir | na 16 16 | 006887 | (4 bytes)   |         .byte 74, 79, 70, 65         
2614:153 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
2614:154 | DONE wsp | na 16 16 |        |             |
2614:155 | DONE lbl | na 16 16 | 00688b |             | nt_dot                               
2614:156 | DONE dir | na 16 16 | 00688b | (2 bytes)   |         .byte 1, { PW + NC }         
2614:156 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:157 | DONE dir | na 16 16 | 00688d | (6 bytes)   |         .word nt_type, xt_dot, 0063db 
2614:157 | DONE dir | na 16 16 |        |             |                 7f 68 c6 63 db 63        --  . h . c . c
2614:158 | DONE dir | na 16 16 | 006893 | (1 bytes)   |         .byte 2e                     
2614:158 | DONE dir | na 16 16 |        |             |                 2e                       --  .
2614:159 | DONE wsp | na 16 16 |        |             |
2614:160 | DONE lbl | na 16 16 | 006894 |             | nt_pad                               
2614:161 | DONE dir | na 16 16 | 006894 | (2 bytes)   |         .byte 3, { PW + NC }         
2614:161 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2614:162 | DONE dir | na 16 16 | 006896 | (6 bytes)   |         .word nt_dot, xt_pad, 006595 
2614:162 | DONE dir | na 16 16 |        |             |                 8b 68 8a 65 95 65        --  . h . e . e
2614:163 | DONE dir | na 16 16 | 00689c | (3 bytes)   |         .byte 70, 61, 64             
2614:163 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
2614:164 | DONE wsp | na 16 16 |        |             |
2614:165 | DONE lbl | na 16 16 | 00689f |             | nt_base                              
2614:166 | DONE dir | na 16 16 | 00689f | (2 bytes)   |         .byte 4, { PW + NC }         
2614:166 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:167 | DONE dir | na 16 16 | 0068a1 | (6 bytes)   |         .word nt_pad, xt_base, 006279 
2614:167 | DONE dir | na 16 16 |        |             |                 94 68 72 62 79 62        --  . h r b y b
2614:168 | DONE dir | na 16 16 | 0068a7 | (4 bytes)   |         .byte 62, 61, 73, 65         
2614:168 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
2614:169 | DONE wsp | na 16 16 |        |             |
2614:170 | DONE lbl | na 16 16 | 0068ab |             | nt_evaluate                          
2614:171 | DONE dir | na 16 16 | 0068ab | (2 bytes)   |         .byte 8, { PW + NC }         
2614:171 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2614:172 | DONE dir | na 16 16 | 0068ad | (6 bytes)   |         .word nt_base, xt_evaluate, 006491 
2614:172 | DONE dir | na 16 16 |        |             |                 9f 68 63 64 91 64        --  . h c d . d
2614:173 | DONE dir | na 16 16 | 0068b3 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
2614:173 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
2614:173 | DONE dir | na 16 16 |        |             |                                          -- 
2614:174 | DONE wsp | na 16 16 |        |             |
2614:175 | DONE lbl | na 16 16 | 0068bb |             | nt_cells                             
2614:176 | DONE dir | na 16 16 | 0068bb | (2 bytes)   |         .byte 5, { PW + NC }         2* because we have 16 bit stack
2614:176 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2614:177 | DONE dir | na 16 16 | 0068bd | (6 bytes)   |         .word nt_evaluate, xt_two-star, 006186 
2614:177 | DONE dir | na 16 16 |        |             |                 ab 68 83 61 86 61        --  . h . a . a
2614:178 | DONE dir | na 16 16 | 0068c3 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
2614:178 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
2614:179 | DONE wsp | na 16 16 |        |             |
2614:180 | DONE lbl | na 16 16 | 0068c8 |             | nt_sliteral                          
2614:181 | DONE dir | na 16 16 | 0068c8 | (2 bytes)   |         .byte 8, { IM + CO }         
2614:181 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
2614:182 | DONE dir | na 16 16 | 0068ca | (6 bytes)   |         .word nt_cells, xt_sliteral, 0066c3 
2614:182 | DONE dir | na 16 16 |        |             |                 bb 68 79 66 c3 66        --  . h y f . f
2614:183 | DONE dir | na 16 16 | 0068d0 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
2614:183 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
2614:183 | DONE dir | na 16 16 |        |             |                                          -- 
2614:184 | DONE wsp | na 16 16 |        |             |
2614:185 | DONE lbl | na 16 16 | 0068d8 |             | nt_bracket-char                      
2614:186 | DONE dir | na 16 16 | 0068d8 | (2 bytes)   |         .byte 6, { IM + CO }         
2614:186 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
2614:187 | DONE dir | na 16 16 | 0068da | (6 bytes)   |         .word nt_sliteral, xt_bracket-char, 00614a 
2614:187 | DONE dir | na 16 16 |        |             |                 c8 68 44 61 4a 61        --  . h D a J a
2614:188 | DONE dir | na 16 16 | 0068e0 | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
2614:188 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
2614:189 | DONE wsp | na 16 16 |        |             |
2614:190 | DONE lbl | na 16 16 | 0068e6 |             | nt_literal                           
2614:191 | DONE dir | na 16 16 | 0068e6 | (2 bytes)   |         .byte 7, { IM + CO }         
2614:191 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
2614:192 | DONE dir | na 16 16 | 0068e8 | (6 bytes)   |         .word nt_bracket-char, xt_literal, 006524 
2614:192 | DONE dir | na 16 16 |        |             |                 d8 68 13 65 24 65        --  . h . e $ e
2614:193 | DONE dir | na 16 16 | 0068ee | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
2614:193 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
2614:194 | DONE wsp | na 16 16 |        |             |
2614:195 | DONE lbl | na 16 16 | 0068f5 |             | nt_compile-only                      
2614:196 | DONE dir | na 16 16 | 0068f5 | (2 bytes)   |         .byte 0c, { PW + NC }        
2614:196 | DONE dir | na 16 16 |        |             |                 0c 09                    --   	
2614:197 | DONE dir | na 16 16 | 0068f7 | (6 bytes)   |         .word nt_literal, xt_compile-only, 0062d7 
2614:197 | DONE dir | na 16 16 |        |             |                 e6 68 cf 62 d7 62        --  . h . b . b
2614:198 | DONE dir | na 16 16 | 0068fd | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
2614:198 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
2614:198 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
2614:199 | DONE wsp | na 16 16 |        |             |
2614:200 | DONE lbl | na 16 16 | 006909 |             | nt_immediate                         
2614:201 | DONE dir | na 16 16 | 006909 | (2 bytes)   |         .byte 9, { PW + NC }         
2614:201 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2614:202 | DONE dir | na 16 16 | 00690b | (6 bytes)   |         .word nt_compile-only, xt_immediate, 0064ff 
2614:202 | DONE dir | na 16 16 |        |             |                 f5 68 f7 64 ff 64        --  . h . d . d
2614:203 | DONE dir | na 16 16 | 006911 | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
2614:203 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
2614:203 | DONE dir | na 16 16 |        |             |                 65                       --  e
2614:204 | DONE wsp | na 16 16 |        |             |
2614:205 | DONE lbl | na 16 16 | 00691a |             | nt_postpone                          
2614:206 | DONE dir | na 16 16 | 00691a | (2 bytes)   |         .byte 8, { IM + CO }         
2614:206 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
2614:207 | DONE dir | na 16 16 | 00691c | (6 bytes)   |         .word nt_immediate, xt_postpone, 00663d 
2614:207 | DONE dir | na 16 16 |        |             |                 09 69 08 66 3d 66        --  	 i . f = f
2614:208 | DONE dir | na 16 16 | 006922 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
2614:208 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
2614:208 | DONE dir | na 16 16 |        |             |                                          -- 
2614:209 | DONE wsp | na 16 16 |        |             |
2614:210 | DONE lbl | na 16 16 | 00692a |             | nt_rightbracket                      
2614:211 | DONE dir | na 16 16 | 00692a | (2 bytes)   |         .byte 1, { PW + NC }         
2614:211 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:212 | DONE dir | na 16 16 | 00692c | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 006153 
2614:212 | DONE dir | na 16 16 |        |             |                 1a 69 4e 61 53 61        --  . i N a S a
2614:213 | DONE dir | na 16 16 | 006932 | (1 bytes)   |         .byte 5d                     
2614:213 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
2614:214 | DONE wsp | na 16 16 |        |             |
2614:215 | DONE lbl | na 16 16 | 006933 |             | nt_leftbracket                       
2614:216 | DONE dir | na 16 16 | 006933 | (2 bytes)   |         .byte 1, { IM + CO }         
2614:216 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2614:217 | DONE dir | na 16 16 | 006935 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 00614d 
2614:217 | DONE dir | na 16 16 |        |             |                 2a 69 4b 61 4d 61        --  * i K a M a
2614:218 | DONE dir | na 16 16 | 00693b | (1 bytes)   |         .byte 5b                     
2614:218 | DONE dir | na 16 16 |        |             |                 5b                       --  [
2614:219 | DONE wsp | na 16 16 |        |             |
2614:220 | DONE lbl | na 16 16 | 00693c |             | nt_compilecomma                      
2614:221 | DONE dir | na 16 16 | 00693c | (2 bytes)   |         .byte 08, { CO }             
2614:221 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
2614:222 | DONE dir | na 16 16 | 00693e | (6 bytes)   |         .word nt_leftbracket, xt_compilecomma, 0062ea 
2614:222 | DONE dir | na 16 16 |        |             |                 33 69 d8 62 ea 62        --  3 i . b . b
2614:223 | DONE dir | na 16 16 | 006944 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
2614:223 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
2614:223 | DONE dir | na 16 16 |        |             |                                          -- 
2614:224 | DONE wsp | na 16 16 |        |             |
2614:225 | DONE lbl | na 16 16 | 00694c |             | nt_semicolon                         
2614:226 | DONE dir | na 16 16 | 00694c | (2 bytes)   |         .byte 1, { CO + IM }         
2614:226 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2614:227 | DONE dir | na 16 16 | 00694e | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 00612d 
2614:227 | DONE dir | na 16 16 |        |             |                 3c 69 15 61 2d 61        --  < i . a - a
2614:228 | DONE dir | na 16 16 | 006954 | (1 bytes)   |         .byte 3b                     
2614:228 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
2614:229 | DONE wsp | na 16 16 |        |             |
2614:230 | DONE lbl | na 16 16 | 006955 |             | nt_colon                             
2614:231 | DONE dir | na 16 16 | 006955 | (2 bytes)   |         .byte 1, { NC }              
2614:231 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
2614:232 | DONE dir | na 16 16 | 006957 | (6 bytes)   |         .word nt_semicolon, xt_colon, 006114 
2614:232 | DONE dir | na 16 16 |        |             |                 4c 69 f3 60 14 61        --  L i . ` . a
2614:233 | DONE dir | na 16 16 | 00695d | (1 bytes)   |         .byte 3a                     
2614:233 | DONE dir | na 16 16 |        |             |                 3a                       --  :
2614:234 | DONE wsp | na 16 16 |        |             |
2614:235 | DONE lbl | na 16 16 | 00695e |             | nt_allot                             
2614:236 | DONE dir | na 16 16 | 00695e | (2 bytes)   |         .byte 5, { PW + NC }         
2614:236 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2614:237 | DONE dir | na 16 16 | 006960 | (6 bytes)   |         .word nt_colon, xt_allot, 00626a 
2614:237 | DONE dir | na 16 16 |        |             |                 55 69 42 62 6a 62        --  U i B b j b
2614:238 | DONE dir | na 16 16 | 006966 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
2614:238 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
2614:239 | DONE wsp | na 16 16 |        |             |
2614:240 | DONE lbl | na 16 16 | 00696b |             | nt_does                              
2614:241 | DONE dir | na 16 16 | 00696b | (2 bytes)   |         .byte 5, { IM + CO }         
2614:241 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
2614:242 | DONE dir | na 16 16 | 00696d | (6 bytes)   |         .word nt_allot, xt_does, 0063af 
2614:242 | DONE dir | na 16 16 |        |             |                 5e 69 a3 63 af 63        --  ^ i . c . c
2614:243 | DONE dir | na 16 16 | 006973 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
2614:243 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
2614:244 | DONE wsp | na 16 16 |        |             |
2614:245 | DONE lbl | na 16 16 | 006978 |             | nt_create                            
2614:246 | DONE dir | na 16 16 | 006978 | (2 bytes)   |         .byte 6, { PW + NC }         
2614:246 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2614:247 | DONE dir | na 16 16 | 00697a | (6 bytes)   |         .word nt_does, xt_create, 00638d 
2614:247 | DONE dir | na 16 16 |        |             |                 6b 69 1b 63 8d 63        --  k i . c . c
2614:248 | DONE dir | na 16 16 | 006980 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
2614:248 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
2614:249 | DONE wsp | na 16 16 |        |             |
2614:250 | DONE lbl | na 16 16 | 006986 |             | nt_name-string                       
2614:251 | DONE dir | na 16 16 | 006986 | (2 bytes)   |         .byte 0b, { PW + NC }        
2614:251 | DONE dir | na 16 16 |        |             |                 0b 09                    --   	
2614:252 | DONE dir | na 16 16 | 006988 | (6 bytes)   |         .word nt_create, xt_name-string, 006571 
2614:252 | DONE dir | na 16 16 |        |             |                 78 69 61 65 71 65        --  x i a e q e
2614:253 | DONE dir | na 16 16 | 00698e | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
2614:253 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
2614:253 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
2614:254 | DONE wsp | na 16 16 |        |             |
2614:255 | DONE lbl | na 16 16 | 006999 |             | nt_2dup                              
2614:256 | DONE dir | na 16 16 | 006999 | (2 bytes)   |         .byte 4, { PW + NC }         
2614:256 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:257 | DONE dir | na 16 16 | 00699b | (6 bytes)   |         .word nt_name-string, xt_2dup, 006198 
2614:257 | DONE dir | na 16 16 |        |             |                 86 69 8e 61 98 61        --  . i . a . a
2614:258 | DONE dir | na 16 16 | 0069a1 | (4 bytes)   |         .byte 32, 64, 75, 70         
2614:258 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
2614:259 | DONE wsp | na 16 16 |        |             |
2614:260 | DONE lbl | na 16 16 | 0069a5 |             | nt_abs                               
2614:261 | DONE dir | na 16 16 | 0069a5 | (2 bytes)   |         .byte 3, { PW + NC }         
2614:261 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2614:262 | DONE dir | na 16 16 | 0069a7 | (6 bytes)   |         .word nt_2dup, xt_abs, 0061bd 
2614:262 | DONE dir | na 16 16 |        |             |                 99 69 b5 61 bd 61        --  . i . a . a
2614:263 | DONE dir | na 16 16 | 0069ad | (3 bytes)   |         .byte 61, 62, 73             
2614:263 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
2614:264 | DONE wsp | na 16 16 |        |             |
2614:265 | DONE lbl | na 16 16 | 0069b0 |             | nt_state                             
2614:266 | DONE dir | na 16 16 | 0069b0 | (2 bytes)   |         .byte 5, { PW + NC }         
2614:266 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2614:267 | DONE dir | na 16 16 | 0069b2 | (6 bytes)   |         .word nt_abs, xt_state, 006709 
2614:267 | DONE dir | na 16 16 |        |             |                 a5 69 02 67 09 67        --  . i . g 	 g
2614:268 | DONE dir | na 16 16 | 0069b8 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
2614:268 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
2614:269 | DONE wsp | na 16 16 |        |             |
2614:270 | DONE lbl | na 16 16 | 0069bd |             | nt_to-in                             
2614:271 | DONE dir | na 16 16 | 0069bd | (2 bytes)   |         .byte 3, { PW + NC }         
2614:271 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2614:272 | DONE dir | na 16 16 | 0069bf | (6 bytes)   |         .word nt_state, xt_to-in, 0060e6 
2614:272 | DONE dir | na 16 16 |        |             |                 b0 69 df 60 e6 60        --  . i . ` . `
2614:273 | DONE dir | na 16 16 | 0069c5 | (3 bytes)   |         .byte 3e, 69, 6e             
2614:273 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
2614:274 | DONE wsp | na 16 16 |        |             |
2614:275 | DONE lbl | na 16 16 | 0069c8 |             | nt_source                            
2614:276 | DONE dir | na 16 16 | 0069c8 | (2 bytes)   |         .byte 6, { PW + NC }         
2614:276 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2614:277 | DONE dir | na 16 16 | 0069ca | (6 bytes)   |         .word nt_to-in, xt_source, 0066e6 
2614:277 | DONE dir | na 16 16 |        |             |                 bd 69 da 66 e6 66        --  . i . f . f
2614:278 | DONE dir | na 16 16 | 0069d0 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
2614:278 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
2614:279 | DONE wsp | na 16 16 |        |             |
2614:280 | DONE lbl | na 16 16 | 0069d6 |             | nt_depth                             
2614:281 | DONE dir | na 16 16 | 0069d6 | (2 bytes)   |         .byte 5, { PW + NC }         
2614:281 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2614:282 | DONE dir | na 16 16 | 0069d8 | (6 bytes)   |         .word nt_source, xt_depth, 0063a2 
2614:282 | DONE dir | na 16 16 |        |             |                 c8 69 94 63 a2 63        --  . i . c . c
2614:283 | DONE dir | na 16 16 | 0069de | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
2614:283 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
2614:284 | DONE wsp | na 16 16 |        |             |
2614:285 | DONE lbl | na 16 16 | 0069e3 |             | nt_constant                          
2614:286 | DONE dir | na 16 16 | 0069e3 | (2 bytes)   |         .byte 8, { PW + NC }         
2614:286 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2614:287 | DONE dir | na 16 16 | 0069e5 | (6 bytes)   |         .word nt_depth, xt_constant, 006304 
2614:287 | DONE dir | na 16 16 |        |             |                 d6 69 eb 62 04 63        --  . i . b . c
2614:288 | DONE dir | na 16 16 | 0069eb | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
2614:288 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
2614:288 | DONE dir | na 16 16 |        |             |                                          -- 
2614:289 | DONE wsp | na 16 16 |        |             |
2614:290 | DONE lbl | na 16 16 | 0069f3 |             | nt_variable                          
2614:291 | DONE dir | na 16 16 | 0069f3 | (2 bytes)   |         .byte 8, { PW + NC }         
2614:291 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2614:292 | DONE dir | na 16 16 | 0069f5 | (6 bytes)   |         .word nt_constant, xt_variable, 00675a 
2614:292 | DONE dir | na 16 16 |        |             |                 e3 69 4e 67 5a 67        --  . i N g Z g
2614:293 | DONE dir | na 16 16 | 0069fb | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
2614:293 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
2614:293 | DONE dir | na 16 16 |        |             |                                          -- 
2614:294 | DONE wsp | na 16 16 |        |             |
2614:295 | DONE lbl | na 16 16 | 006a03 |             | nt_tick                              
2614:296 | DONE dir | na 16 16 | 006a03 | (2 bytes)   |         .byte 1, { PW + NC }         
2614:296 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:297 | DONE dir | na 16 16 | 006a05 | (6 bytes)   |         .word nt_variable, xt_tick, 0061b4 
2614:297 | DONE dir | na 16 16 |        |             |                 f3 69 99 61 b4 61        --  . i . a . a
2614:298 | DONE dir | na 16 16 | 006a0b | (1 bytes)   |         .byte 27                     hex for "'"
2614:298 | DONE dir | na 16 16 |        |             |                 27                       --  '
2614:299 | DONE wsp | na 16 16 |        |             |
2614:300 | DONE lbl | na 16 16 | 006a0c |             | nt_min                               
2614:301 | DONE dir | na 16 16 | 006a0c | (2 bytes)   |         .byte 3, { PW + NC }         
2614:301 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2614:302 | DONE dir | na 16 16 | 006a0e | (6 bytes)   |         .word nt_tick, xt_min, 006557 
2614:302 | DONE dir | na 16 16 |        |             |                 03 6a 45 65 57 65        --  . j E e W e
2614:303 | DONE dir | na 16 16 | 006a14 | (3 bytes)   |         .byte 6d, 69, 6e             
2614:303 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
2614:304 | DONE wsp | na 16 16 |        |             |
2614:305 | DONE lbl | na 16 16 | 006a17 |             | nt_max                               
2614:306 | DONE dir | na 16 16 | 006a17 | (2 bytes)   |         .byte 3, { PW + NC }         
2614:306 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2614:307 | DONE dir | na 16 16 | 006a19 | (6 bytes)   |         .word nt_min, xt_max, 006544 
2614:307 | DONE dir | na 16 16 |        |             |                 0c 6a 32 65 44 65        --   j 2 e D e
2614:308 | DONE dir | na 16 16 | 006a1f | (3 bytes)   |         .byte 6d, 61, 78             
2614:308 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
2614:309 | DONE wsp | na 16 16 |        |             |
2614:310 | DONE lbl | na 16 16 | 006a22 |             | nt_negate                            
2614:311 | DONE dir | na 16 16 | 006a22 | (2 bytes)   |         .byte 6, { PW + NC }         
2614:311 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2614:312 | DONE dir | na 16 16 | 006a24 | (6 bytes)   |         .word nt_max, xt_negate, 006578 
2614:312 | DONE dir | na 16 16 |        |             |                 17 6a 72 65 78 65        --  . j r e x e
2614:313 | DONE dir | na 16 16 | 006a2a | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
2614:313 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
2614:314 | DONE wsp | na 16 16 |        |             |
2614:315 | DONE lbl | na 16 16 | 006a30 |             | nt_invert                            
2614:316 | DONE dir | na 16 16 | 006a30 | (2 bytes)   |         .byte 6, { PW + NC }         
2614:316 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2614:317 | DONE dir | na 16 16 | 006a32 | (6 bytes)   |         .word nt_negate, xt_invert, 006505 
2614:317 | DONE dir | na 16 16 |        |             |                 22 6a 00 65 05 65        --  " j . e . e
2614:318 | DONE dir | na 16 16 | 006a38 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
2614:318 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
2614:319 | DONE wsp | na 16 16 |        |             |
2614:320 | DONE lbl | na 16 16 | 006a3e |             | nt_char                              
2614:321 | DONE dir | na 16 16 | 006a3e | (2 bytes)   |         .byte 4, { PW + NC }         
2614:321 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:322 | DONE dir | na 16 16 | 006a40 | (6 bytes)   |         .word nt_invert, xt_char, 0062ce 
2614:322 | DONE dir | na 16 16 |        |             |                 30 6a b7 62 ce 62        --  0 j . b . b
2614:323 | DONE dir | na 16 16 | 006a46 | (4 bytes)   |         .byte 63, 68, 61, 72         
2614:323 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
2614:324 | DONE wsp | na 16 16 |        |             |
2614:325 | DONE lbl | na 16 16 | 006a4a |             | nt_xor                               
2614:326 | DONE dir | na 16 16 | 006a4a | (2 bytes)   |         .byte 3, { PW + NC }         
2614:326 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2614:327 | DONE dir | na 16 16 | 006a4c | (6 bytes)   |         .word nt_char, xt_xor, 006789 
2614:327 | DONE dir | na 16 16 |        |             |                 3e 6a 83 67 89 67        --  > j . g . g
2614:328 | DONE dir | na 16 16 | 006a52 | (3 bytes)   |         .byte 78, 6f, 72             
2614:328 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
2614:329 | DONE wsp | na 16 16 |        |             |
2614:330 | DONE lbl | na 16 16 | 006a55 |             | nt_or                                
2614:331 | DONE dir | na 16 16 | 006a55 | (2 bytes)   |         .byte 2, { PW + NC }         
2614:331 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2614:332 | DONE dir | na 16 16 | 006a57 | (6 bytes)   |         .word nt_xor, xt_or, 006582  
2614:332 | DONE dir | na 16 16 |        |             |                 4a 6a 7c 65 82 65        --  J j | e . e
2614:333 | DONE dir | na 16 16 | 006a5d | (2 bytes)   |         .byte 6f, 72                 
2614:333 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
2614:334 | DONE wsp | na 16 16 |        |             |
2614:335 | DONE lbl | na 16 16 | 006a5f |             | nt_and                               
2614:336 | DONE dir | na 16 16 | 006a5f | (2 bytes)   |         .byte 3, { PW + NC }         
2614:336 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2614:337 | DONE dir | na 16 16 | 006a61 | (6 bytes)   |         .word nt_or, xt_and, 006271  
2614:337 | DONE dir | na 16 16 |        |             |                 55 6a 6b 62 71 62        --  U j k b q b
2614:338 | DONE dir | na 16 16 | 006a67 | (3 bytes)   |         .byte 61, 6e, 64             
2614:338 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
2614:339 | DONE wsp | na 16 16 |        |             |
2614:340 | DONE lbl | na 16 16 | 006a6a |             | nt_c-comma                           
2614:341 | DONE dir | na 16 16 | 006a6a | (2 bytes)   |         .byte 2, { PW + NC }         
2614:341 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2614:342 | DONE dir | na 16 16 | 006a6c | (6 bytes)   |         .word nt_and, xt_c-comma, 00629a 
2614:342 | DONE dir | na 16 16 |        |             |                 5f 6a 8d 62 9a 62        --  _ j . b . b
2614:343 | DONE dir | na 16 16 | 006a72 | (2 bytes)   |         .byte 63, 2c                 
2614:343 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
2614:344 | DONE wsp | na 16 16 |        |             |
2614:345 | DONE lbl | na 16 16 | 006a74 |             | nt_c-fetch                           
2614:346 | DONE dir | na 16 16 | 006a74 | (2 bytes)   |         .byte 2, { PW + NC }         
2614:346 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2614:347 | DONE dir | na 16 16 | 006a76 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 0062a6 
2614:347 | DONE dir | na 16 16 |        |             |                 6a 6a 9b 62 a6 62        --  j j . b . b
2614:348 | DONE dir | na 16 16 | 006a7c | (2 bytes)   |         .byte 63, 40                 
2614:348 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
2614:349 | DONE wsp | na 16 16 |        |             |
2614:350 | DONE lbl | na 16 16 | 006a7e |             | nt_c-store                           
2614:351 | DONE dir | na 16 16 | 006a7e | (2 bytes)   |         .byte 2, { PW + NC }         
2614:351 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2614:352 | DONE dir | na 16 16 | 006a80 | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0062b6 
2614:352 | DONE dir | na 16 16 |        |             |                 74 6a a7 62 b6 62        --  t j . b . b
2614:353 | DONE dir | na 16 16 | 006a86 | (2 bytes)   |         .byte 63, 21                 
2614:353 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
2614:354 | DONE wsp | na 16 16 |        |             |
2614:355 | DONE lbl | na 16 16 | 006a88 |             | nt_two-star                          
2614:356 | DONE dir | na 16 16 | 006a88 | (2 bytes)   |         .byte 2, { PW + NC }         
2614:356 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2614:357 | DONE dir | na 16 16 | 006a8a | (6 bytes)   |         .word nt_c-store, xt_two-star, 006186 
2614:357 | DONE dir | na 16 16 |        |             |                 7e 6a 83 61 86 61        --  ~ j . a . a
2614:358 | DONE dir | na 16 16 | 006a90 | (2 bytes)   |         .byte 32, 2a                 
2614:358 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
2614:359 | DONE wsp | na 16 16 |        |             |
2614:360 | DONE lbl | na 16 16 | 006a92 |             | nt_minus                             
2614:361 | DONE dir | na 16 16 | 006a92 | (2 bytes)   |         .byte 1, { PW + NC }         
2614:361 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:362 | DONE dir | na 16 16 | 006a94 | (6 bytes)   |         .word nt_two-star, xt_minus, 006166 
2614:362 | DONE dir | na 16 16 |        |             |                 88 6a 5c 61 66 61        --  . j \ a f a
2614:363 | DONE dir | na 16 16 | 006a9a | (1 bytes)   |         .byte 2d                     
2614:363 | DONE dir | na 16 16 |        |             |                 2d                       --  -
2614:364 | DONE wsp | na 16 16 |        |             |
2614:365 | DONE lbl | na 16 16 | 006a9b |             | nt_plus                              
2614:366 | DONE dir | na 16 16 | 006a9b | (2 bytes)   |         .byte 1, { PW + NC }         
2614:366 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:367 | DONE dir | na 16 16 | 006a9d | (6 bytes)   |         .word nt_minus, xt_plus, 00615b 
2614:367 | DONE dir | na 16 16 |        |             |                 92 6a 54 61 5b 61        --  . j T a [ a
2614:368 | DONE dir | na 16 16 | 006aa3 | (1 bytes)   |         .byte 2b                     
2614:368 | DONE dir | na 16 16 |        |             |                 2b                       --  +
2614:369 | DONE wsp | na 16 16 |        |             |
2614:370 | DONE lbl | na 16 16 | 006aa4 |             | nt_one-minus                         
2614:371 | DONE dir | na 16 16 | 006aa4 | (2 bytes)   |         .byte 2, { PW + NC }         
2614:371 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2614:372 | DONE dir | na 16 16 | 006aa6 | (6 bytes)   |         .word nt_plus, xt_one-minus, 006178 
2614:372 | DONE dir | na 16 16 |        |             |                 9b 6a 77 61 78 61        --  . j w a x a
2614:373 | DONE dir | na 16 16 | 006aac | (2 bytes)   |         .byte 31, 2d                 
2614:373 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
2614:374 | DONE wsp | na 16 16 |        |             |
2614:375 | DONE lbl | na 16 16 | 006aae |             | nt_one-plus                          
2614:376 | DONE dir | na 16 16 | 006aae | (2 bytes)   |         .byte 2, { PW + NC }         
2614:376 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2614:377 | DONE dir | na 16 16 | 006ab0 | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 00617a 
2614:377 | DONE dir | na 16 16 |        |             |                 a4 6a 79 61 7a 61        --  . j y a z a
2614:378 | DONE dir | na 16 16 | 006ab6 | (2 bytes)   |         .byte 31, 2b                 
2614:378 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
2614:379 | DONE wsp | na 16 16 |        |             |
2614:380 | DONE lbl | na 16 16 | 006ab8 |             | nt_false                             
2614:381 | DONE dir | na 16 16 | 006ab8 | (2 bytes)   |         .byte 5, { PW + NC }         
2614:381 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2614:382 | DONE dir | na 16 16 | 006aba | (6 bytes)   |         .word nt_one-plus, xt_zero, 00616e 
2614:382 | DONE dir | na 16 16 |        |             |                 ae 6a 67 61 6e 61        --  . j g a n a
2614:383 | DONE dir | na 16 16 | 006ac0 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
2614:383 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
2614:384 | DONE wsp | na 16 16 |        |             |
2614:385 | DONE lbl | na 16 16 | 006ac5 |             | nt_true                              
2614:386 | DONE dir | na 16 16 | 006ac5 | (2 bytes)   |         .byte 4, { PW + NC }         
2614:386 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:387 | DONE dir | na 16 16 | 006ac7 | (6 bytes)   |         .word nt_false, xt_true, 006717 
2614:387 | DONE dir | na 16 16 |        |             |                 b8 6a 10 67 17 67        --  . j . g . g
2614:388 | DONE dir | na 16 16 | 006acd | (4 bytes)   |         .byte 74, 72, 75, 65         
2614:388 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
2614:389 | DONE wsp | na 16 16 |        |             |
2614:390 | DONE lbl | na 16 16 | 006ad1 |             | nt_two                               
2614:391 | DONE dir | na 16 16 | 006ad1 | (2 bytes)   |         .byte 1, { PW + NC }         
2614:391 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:392 | DONE dir | na 16 16 | 006ad3 | (6 bytes)   |         .word nt_true, xt_two, 006182 
2614:392 | DONE dir | na 16 16 |        |             |                 c5 6a 7b 61 82 61        --  . j { a . a
2614:393 | DONE dir | na 16 16 | 006ad9 | (1 bytes)   |         .byte 32                     
2614:393 | DONE dir | na 16 16 |        |             |                 32                       --  2
2614:394 | DONE wsp | na 16 16 |        |             |
2614:395 | DONE lbl | na 16 16 | 006ada |             | nt_one                               
2614:396 | DONE dir | na 16 16 | 006ada | (2 bytes)   |         .byte 1, { PW + NC }         
2614:396 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:397 | DONE dir | na 16 16 | 006adc | (6 bytes)   |         .word nt_two, xt_one, 006176 
2614:397 | DONE dir | na 16 16 |        |             |                 d1 6a 6f 61 76 61        --  . j o a v a
2614:398 | DONE dir | na 16 16 | 006ae2 | (1 bytes)   |         .byte 31                     
2614:398 | DONE dir | na 16 16 |        |             |                 31                       --  1
2614:399 | DONE wsp | na 16 16 |        |             |
2614:400 | DONE lbl | na 16 16 | 006ae3 |             | nt_zero                              
2614:401 | DONE dir | na 16 16 | 006ae3 | (2 bytes)   |         .byte 1, { PW + NC }         
2614:401 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:402 | DONE dir | na 16 16 | 006ae5 | (6 bytes)   |         .word nt_one, xt_zero, 00616e 
2614:402 | DONE dir | na 16 16 |        |             |                 da 6a 67 61 6e 61        --  . j g a n a
2614:403 | DONE dir | na 16 16 | 006aeb | (1 bytes)   |         .byte 30                     
2614:403 | DONE dir | na 16 16 |        |             |                 30                       --  0
2614:404 | DONE wsp | na 16 16 |        |             |
2614:405 | DONE lbl | na 16 16 | 006aec |             | nt_find-name                         
2614:406 | DONE dir | na 16 16 | 006aec | (2 bytes)   |         .byte 9, 0                   
2614:406 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
2614:407 | DONE dir | na 16 16 | 006aee | (6 bytes)   |         .word nt_zero, xt_find-name, 0064f6 
2614:407 | DONE dir | na 16 16 |        |             |                 e3 6a a0 64 f6 64        --  . j . d . d
2614:408 | DONE dir | na 16 16 | 006af4 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
2614:408 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
2614:408 | DONE dir | na 16 16 |        |             |                 65                       --  e
2614:409 | DONE wsp | na 16 16 |        |             |
2614:410 | DONE lbl | na 16 16 | 006afd |             | nt_refill                            
2614:411 | DONE dir | na 16 16 | 006afd | (2 bytes)   |         .byte 6, { PW }              TODO check flags
2614:411 | DONE dir | na 16 16 |        |             |                 06 08                    --  . .
2614:412 | DONE dir | na 16 16 | 006aff | (6 bytes)   |         .word nt_find-name, xt_refill, 00666f 
2614:412 | DONE dir | na 16 16 |        |             |                 ec 6a 3d 66 6f 66        --  . j = f o f
2614:413 | DONE dir | na 16 16 | 006b05 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
2614:413 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
2614:414 | DONE wsp | na 16 16 |        |             |
2614:415 | DONE lbl | na 16 16 | 006b0b |             | nt_parse-name                        
2614:416 | DONE dir | na 16 16 | 006b0b | (2 bytes)   |         .byte &10, 0                 
2614:416 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
2614:417 | DONE dir | na 16 16 | 006b0d | (6 bytes)   |         .word nt_refill, xt_parse-name, 006607 
2614:417 | DONE dir | na 16 16 |        |             |                 fd 6a a3 65 07 66        --  . j . e . f
2614:418 | DONE dir | na 16 16 | 006b13 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
2614:418 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
2614:418 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
2614:419 | DONE wsp | na 16 16 |        |             |
2614:420 | DONE lbl | na 16 16 | 006b1d |             | nt_source-id                         
2614:421 | DONE dir | na 16 16 | 006b1d | (2 bytes)   |         .byte 9, { PW + NC }         
2614:421 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2614:422 | DONE dir | na 16 16 | 006b1f | (6 bytes)   |         .word nt_parse-name, xt_source-id, 0066ed 
2614:422 | DONE dir | na 16 16 |        |             |                 0b 6b e7 66 ed 66        --   k . f . f
2614:423 | DONE dir | na 16 16 | 006b25 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
2614:423 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
2614:423 | DONE dir | na 16 16 |        |             |                 64                       --  d
2614:424 | DONE wsp | na 16 16 |        |             |
2614:425 | DONE lbl | na 16 16 | 006b2e |             | nt_comma                             
2614:426 | DONE dir | na 16 16 | 006b2e | (2 bytes)   |         .byte 1, { PW + NC }         
2614:426 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:427 | DONE dir | na 16 16 | 006b30 | (6 bytes)   |         .word nt_source-id, xt_comma, 0060f2 
2614:427 | DONE dir | na 16 16 |        |             |                 1d 6b e7 60 f2 60        --  . k . ` . `
2614:428 | DONE dir | na 16 16 | 006b36 | (1 bytes)   |         .byte 2c                     
2614:428 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
2614:429 | DONE wsp | na 16 16 |        |             |
2614:430 | DONE lbl | na 16 16 | 006b37 |             | nt_accept                            
2614:431 | DONE dir | na 16 16 | 006b37 | (2 bytes)   |         .byte 6, 00                  TODO check flags
2614:431 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
2614:432 | DONE dir | na 16 16 | 006b39 | (6 bytes)   |         .word nt_comma, xt_accept, 006241 
2614:432 | DONE dir | na 16 16 |        |             |                 2e 6b be 61 41 62        --  . k . a A b
2614:433 | DONE dir | na 16 16 | 006b3f | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
2614:433 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
2614:434 | DONE wsp | na 16 16 |        |             |
2614:435 | DONE lbl | na 16 16 | 006b45 |             | nt_tuck                              
2614:436 | DONE dir | na 16 16 | 006b45 | (2 bytes)   |         .byte 4, { PW + NC }         
2614:436 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:437 | DONE dir | na 16 16 | 006b47 | (6 bytes)   |         .word nt_accept, xt_tuck, 006720 
2614:437 | DONE dir | na 16 16 |        |             |                 37 6b 18 67 20 67        --  7 k . g   g
2614:438 | DONE dir | na 16 16 | 006b4d | (4 bytes)   |         .byte 74, 75, 63, 6b         
2614:438 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
2614:439 | DONE wsp | na 16 16 |        |             |
2614:440 | DONE lbl | na 16 16 | 006b51 |             | nt_nip                               
2614:441 | DONE dir | na 16 16 | 006b51 | (2 bytes)   |         .byte 3, { PW + NC }         
2614:441 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2614:442 | DONE dir | na 16 16 | 006b53 | (6 bytes)   |         .word nt_tuck, xt_nip, 00657b 
2614:442 | DONE dir | na 16 16 |        |             |                 45 6b 79 65 7b 65        --  E k y e { e
2614:443 | DONE dir | na 16 16 | 006b59 | (3 bytes)   |         .byte 6e, 69, 70             
2614:443 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
2614:444 | DONE wsp | na 16 16 |        |             |
2614:445 | DONE lbl | na 16 16 | 006b5c |             | nt_rot                               
2614:446 | DONE dir | na 16 16 | 006b5c | (2 bytes)   |         .byte 3, { PW + NC }         
2614:446 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2614:447 | DONE dir | na 16 16 | 006b5e | (6 bytes)   |         .word nt_nip, xt_rot, 006678 
2614:447 | DONE dir | na 16 16 |        |             |                 51 6b 70 66 78 66        --  Q k p f x f
2614:448 | DONE dir | na 16 16 | 006b64 | (3 bytes)   |         .byte 72, 6f, 74             
2614:448 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
2614:449 | DONE wsp | na 16 16 |        |             |
2614:450 | DONE lbl | na 16 16 | 006b67 |             | nt_execute                           
2614:451 | DONE dir | na 16 16 | 006b67 | (2 bytes)   |         .byte 7, { PW + NC }         
2614:451 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2614:452 | DONE dir | na 16 16 | 006b69 | (6 bytes)   |         .word nt_rot, xt_execute, 00649f 
2614:452 | DONE dir | na 16 16 |        |             |                 5c 6b 95 64 9f 64        --  \ k . d . d
2614:453 | DONE dir | na 16 16 | 006b6f | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
2614:453 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
2614:454 | DONE wsp | na 16 16 |        |             |
2614:455 | DONE lbl | na 16 16 | 006b76 |             | nt_here                              
2614:456 | DONE dir | na 16 16 | 006b76 | (2 bytes)   |         .byte 4, { PW + NC }         
2614:456 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:457 | DONE dir | na 16 16 | 006b78 | (6 bytes)   |         .word nt_execute, xt_here, 00650c 
2614:457 | DONE dir | na 16 16 |        |             |                 67 6b 06 65 0c 65        --  g k . e  e
2614:458 | DONE dir | na 16 16 | 006b7e | (4 bytes)   |         .byte 68, 65, 72, 65         
2614:458 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
2614:459 | DONE wsp | na 16 16 |        |             |
2614:460 | DONE lbl | na 16 16 | 006b82 |             | nt_2drop                             
2614:461 | DONE dir | na 16 16 | 006b82 | (2 bytes)   |         .byte 5, { PW + NC }         
2614:461 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2614:462 | DONE dir | na 16 16 | 006b84 | (6 bytes)   |         .word nt_here, xt_2drop, 00618d 
2614:462 | DONE dir | na 16 16 |        |             |                 76 6b 87 61 8d 61        --  v k . a . a
2614:463 | DONE dir | na 16 16 | 006b8a | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
2614:463 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
2614:464 | DONE wsp | na 16 16 |        |             |
2614:465 | DONE lbl | na 16 16 | 006b8f |             | nt_over                              
2614:466 | DONE dir | na 16 16 | 006b8f | (2 bytes)   |         .byte 4, { PW + NC }         
2614:466 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:467 | DONE dir | na 16 16 | 006b91 | (6 bytes)   |         .word nt_2drop, xt_over, 006589 
2614:467 | DONE dir | na 16 16 |        |             |                 82 6b 83 65 89 65        --  . k . e . e
2614:468 | DONE dir | na 16 16 | 006b97 | (4 bytes)   |         .byte 6f, 76, 65, 72         
2614:468 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
2614:469 | DONE wsp | na 16 16 |        |             |
2614:470 | DONE lbl | na 16 16 | 006b9b |             | nt_fetch                             
2614:471 | DONE dir | na 16 16 | 006b9b | (2 bytes)   |         .byte 1, { PW + NC }         
2614:471 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:472 | DONE dir | na 16 16 | 006b9d | (6 bytes)   |         .word nt_over, xt_fetch, 006143 
2614:472 | DONE dir | na 16 16 |        |             |                 8f 6b 3f 61 43 61        --  . k ? a C a
2614:473 | DONE dir | na 16 16 | 006ba3 | (1 bytes)   |         .byte 40                     
2614:473 | DONE dir | na 16 16 |        |             |                 40                       --  @
2614:474 | DONE wsp | na 16 16 |        |             |
2614:475 | DONE lbl | na 16 16 | 006ba4 |             | nt_store                             
2614:476 | DONE dir | na 16 16 | 006ba4 | (2 bytes)   |         .byte 1, { PW + NC }         
2614:476 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2614:477 | DONE dir | na 16 16 | 006ba6 | (6 bytes)   |         .word nt_fetch, xt_store, 00613e 
2614:477 | DONE dir | na 16 16 |        |             |                 9b 6b 35 61 3e 61        --  . k 5 a > a
2614:478 | DONE dir | na 16 16 | 006bac | (1 bytes)   |         .byte 21                     
2614:478 | DONE dir | na 16 16 |        |             |                 21                       --  !
2614:479 | DONE wsp | na 16 16 |        |             |
2614:480 | DONE lbl | na 16 16 | 006bad |             | nt_swap                              
2614:481 | DONE dir | na 16 16 | 006bad | (2 bytes)   |         .byte 4, { PW + NC }         
2614:481 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:482 | DONE dir | na 16 16 | 006baf | (6 bytes)   |         .word nt_store, xt_swap, 00670f 
2614:482 | DONE dir | na 16 16 |        |             |                 a4 6b 0a 67 0f 67        --  . k 
 g . g
2614:483 | DONE dir | na 16 16 | 006bb5 | (4 bytes)   |         .byte 73, 77, 61, 70         
2614:483 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
2614:484 | DONE wsp | na 16 16 |        |             |
2614:485 | DONE lbl | na 16 16 | 006bb9 |             | nt_dup                               
2614:486 | DONE dir | na 16 16 | 006bb9 | (2 bytes)   |         .byte 3, { PW + NC }         
2614:486 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2614:487 | DONE dir | na 16 16 | 006bbb | (6 bytes)   |         .word nt_swap, xt_dup, 006462 
2614:487 | DONE dir | na 16 16 |        |             |                 ad 6b 5e 64 62 64        --  . k ^ d b d
2614:488 | DONE dir | na 16 16 | 006bc1 | (3 bytes)   |         .byte 64, 75, 70             
2614:488 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
2614:489 | DONE wsp | na 16 16 |        |             |
2614:490 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
2614:491 | DONE lbl | na 16 16 | 006bc4 |             | nt_drop                              
2614:492 | DONE dir | na 16 16 | 006bc4 | (2 bytes)   |         .byte 4, { PW + NC }         
2614:492 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2614:493 | DONE dir | na 16 16 | 006bc6 | (6 bytes)   |         .word nt_dup, xt_drop, 006436 
2614:493 | DONE dir | na 16 16 |        |             |                 b9 6b 32 64 36 64        --  . k 2 d 6 d
2614:494 | DONE dir | na 16 16 | 006bcc | (4 bytes)   |         .byte 64, 72, 6f, 70         
2614:494 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
2614:495 | DONE wsp | na 16 16 |        |             |
2614:496 | DONE cmt | na 16 16 |        |             | ; END
2615:000 | DONE wsp | na 16 16 |        |             |
2616:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2617:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
2618:000 | DONE wsp | na 16 16 |        |             |
2619:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2620:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
2621:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
2622:000 | DONE cmt | na 16 16 |        |             | ; the stack
2623:000 | DONE lbl | na 16 16 | 006bd0 |             | doconst                              
2624:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2625:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2626:000 | DONE ins | na 16 16 | 006bd0 | ca          |                 dex                  make room on Data Stack
2627:000 | DONE ins | na 16 16 | 006bd1 | ca          |                 dex                  
2628:000 | DONE ins | na 16 16 | 006bd2 | 94 00       |                 sty.dx 00            
2629:000 | DONE wsp | na 16 16 |        |             |
2630:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
2631:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
2632:000 | DONE ins | na 16 16 | 006bd4 | 68          |                 pla                  get the return address
2633:000 | DONE ins | na 16 16 | 006bd5 | 85 16       |                 sta.d 000216         
2634:000 | DONE wsp | na 16 16 |        |             |
2635:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
2636:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
2637:000 | DONE ins | na 16 16 | 006bd7 | a0 01 00    |                 ldy.# 0001           
2638:000 | DONE ins | na 16 16 | 006bda | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2639:000 | DONE ins | na 16 16 | 006bdc | a8          |                 tay                  
2640:000 | DONE wsp | na 16 16 |        |             |
2641:000 | DONE ins | na 16 16 | 006bdd | 60          |                 rts                  takes us to original caller
2642:000 | DONE wsp | na 16 16 |        |             |
2643:000 | DONE wsp | na 16 16 |        |             |
2644:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2645:000 | DONE cmt | na 16 16 |        |             | ; DODOES
2646:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
2647:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
2648:000 | DONE lbl | na 16 16 | 006bde |             | dodoes                               
2649:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
2650:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
2651:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
2652:000 | DONE cmt | na 16 16 |        |             |                 ; works
2653:000 | DONE ins | na 16 16 | 006bde | 68          |                 pla                  
2654:000 | DONE ins | na 16 16 | 006bdf | 1a          |                 inc.a                
2655:000 | DONE ins | na 16 16 | 006be0 | 85 1a       |                 sta.d 00021a         
2656:000 | DONE wsp | na 16 16 |        |             |
2657:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
2658:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
2659:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
2660:000 | DONE ins | na 16 16 | 006be2 | ca          |                 dex                  
2661:000 | DONE ins | na 16 16 | 006be3 | ca          |                 dex                  
2662:000 | DONE ins | na 16 16 | 006be4 | 94 00       |                 sty.dx 00            
2663:000 | DONE wsp | na 16 16 |        |             |
2664:000 | DONE ins | na 16 16 | 006be6 | 7a          |                 ply                  
2665:000 | DONE ins | na 16 16 | 006be7 | c8          |                 iny                  
2666:000 | DONE wsp | na 16 16 |        |             |
2667:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
2668:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
2669:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
2670:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
2671:000 | DONE ins | na 16 16 | 006be8 | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
2672:000 | DONE wsp | na 16 16 |        |             |
2673:000 | DONE wsp | na 16 16 |        |             |
2674:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2675:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
2676:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
2677:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
2678:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
2679:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
2680:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
2681:000 | DONE lbl | na 16 16 | 006beb |             | dovar                                
2682:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2683:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2684:000 | DONE ins | na 16 16 | 006beb | ca          |                 dex                  make room on Data Stack
2685:000 | DONE ins | na 16 16 | 006bec | ca          |                 dex                  
2686:000 | DONE ins | na 16 16 | 006bed | 94 00       |                 sty.dx 00            
2687:000 | DONE wsp | na 16 16 |        |             |
2688:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
2689:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
2690:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
2691:000 | DONE ins | na 16 16 | 006bef | 7a          |                 ply                  value is now TOS
2692:000 | DONE ins | na 16 16 | 006bf0 | c8          |                 iny                  add one because of 65816's address handling
2693:000 | DONE wsp | na 16 16 |        |             |
2694:000 | DONE ins | na 16 16 | 006bf1 | 60          |                 rts                  takes us to original caller
2695:000 | DONE wsp | na 16 16 |        |             |
2696:000 | DONE wsp | na 16 16 |        |             |
2697:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2698:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
2699:000 | DONE wsp | na 16 16 |        |             |
2700:000 | DONE wsp | na 16 16 |        |             |
2701:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2702:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (AKA INTERPRET)
2703:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
2704:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
2705:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
2706:000 | DONE lbl | na 16 16 | 006bf2 |             | compex                               
2707:000 | DONE lbl | na 16 16 | 006bf2 |             | compex_loop                          
2708:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2709:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2710:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
2711:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
2712:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
2713:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
2714:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
2715:000 | DONE ins | na 16 16 | 006bf2 | 20 a3 65    |                 jsr 0065a3           ( "string" -- addr u )
2716:000 | DONE wsp | na 16 16 |        |             |
2717:000 | DONE cmt | na 16 16 |        |             |                 ; TODO decide if we want to make a copy of the string here so
2718:000 | DONE cmt | na 16 16 |        |             |                 ; that we can provide a better error message
2719:000 | DONE wsp | na 16 16 |        |             |
2720:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
2721:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
2722:000 | DONE ins | na 16 16 | 006bf5 | 98          |                 tya                  force flag check
2723:000 | DONE ins | na 16 16 | 006bf6 | f0 3f       |                 beq 006c37           
2724:000 | DONE wsp | na 16 16 |        |             |
2725:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
2726:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
2727:000 | DONE ins | na 16 16 | 006bf8 | 20 9d 6c    |                 jsr 006c9d           
2728:000 | DONE wsp | na 16 16 |        |             |
2729:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know
2730:000 | DONE ins | na 16 16 | 006bfb | 20 a0 64    |                 jsr 0064a0           ( addr u -- nt | 0 )
2731:000 | DONE wsp | na 16 16 |        |             |
2732:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
2733:000 | DONE ins | na 16 16 | 006bfe | 98          |                 tya                  
2734:000 | DONE ins | na 16 16 | 006bff | d0 06       |                 bne 006c07           
2735:000 | DONE wsp | na 16 16 |        |             |
2736:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
2737:000 | DONE wsp | na 16 16 |        |             |
2738:000 | DONE cmt | na 16 16 |        |             |                 ; Number conversion has failed, which means the user screwed up,
2739:000 | DONE cmt | na 16 16 |        |             |                 ; so complain and abort
2740:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print the offending string first
2741:000 | DONE ins | na 16 16 | 006c01 | a9 2f 6f    |                 lda.# 006f2f         "Unknown word"
2742:000 | DONE ins | na 16 16 | 006c04 | 4c 64 6c    |                 jmp 006c64           
2743:000 | DONE wsp | na 16 16 |        |             |
2744:000 | DONE lbl | na 16 16 | 006c07 |             | compex_got_name_token                
2745:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
2746:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down. This is a quicker
2747:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
2748:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
2749:000 | DONE ins | na 16 16 | 006c07 | 84 16       |                 sty.d 000216         
2750:000 | DONE ins | na 16 16 | 006c09 | c8          |                 iny                  
2751:000 | DONE ins | na 16 16 | 006c0a | c8          |                 iny                  
2752:000 | DONE ins | na 16 16 | 006c0b | c8          |                 iny                  
2753:000 | DONE ins | na 16 16 | 006c0c | c8          |                 iny                  
2754:000 | DONE ins | na 16 16 | 006c0d | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2755:000 | DONE ins | na 16 16 | 006c10 | a8          |                 tay                  xt is TOS
2756:000 | DONE wsp | na 16 16 |        |             |
2757:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
2758:000 | DONE ins | na 16 16 | 006c11 | a5 14       |                 lda.d 000214         
2759:000 | DONE ins | na 16 16 | 006c13 | d0 14       |                 bne 006c29           
2760:000 | DONE wsp | na 16 16 |        |             |
2761:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
2762:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
2763:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
2764:000 | DONE ins | na 16 16 | 006c15 | b2 16       |                 lda.di 000216        
2765:000 | DONE ins | na 16 16 | 006c17 | eb          |                 xba                  flags are MSB
2766:000 | DONE ins | na 16 16 | 006c18 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
2767:000 | DONE ins | na 16 16 | 006c1b | f0 06       |                 beq 006c23           
2768:000 | DONE wsp | na 16 16 |        |             |
2769:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
2770:000 | DONE ins | na 16 16 | 006c1d | a9 21 6e    |                 lda.# 006e21         
2771:000 | DONE ins | na 16 16 | 006c20 | 4c 64 6c    |                 jmp 006c64           
2772:000 | DONE wsp | na 16 16 |        |             |
2773:000 | DONE lbl | na 16 16 | 006c23 |             | compex_interpret                     
2774:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
2775:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
2776:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
2777:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
2778:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
2779:000 | DONE ins | na 16 16 | 006c23 | 20 95 64    |                 jsr 006495           
2780:000 | DONE wsp | na 16 16 |        |             |
2781:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
2782:000 | DONE ins | na 16 16 | 006c26 | 4c f2 6b    |                 jmp 006bf2           
2783:000 | DONE wsp | na 16 16 |        |             |
2784:000 | DONE lbl | na 16 16 | 006c29 |             | compex_compile                       
2785:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
2786:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
2787:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
2788:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
2789:000 | DONE ins | na 16 16 | 006c29 | b2 16       |                 lda.di 000216        
2790:000 | DONE ins | na 16 16 | 006c2b | eb          |                 xba                  flags are MSB
2791:000 | DONE ins | na 16 16 | 006c2c | 29 02 00    |                 and.# IM             Mask all but IM bit
2792:000 | DONE ins | na 16 16 | 006c2f | d0 f2       |                 bne 006c23           IMMEDIATE word, execute right now
2793:000 | DONE wsp | na 16 16 |        |             |
2794:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
2795:000 | DONE ins | na 16 16 | 006c31 | 20 d8 62    |                 jsr 0062d8           
2796:000 | DONE wsp | na 16 16 |        |             |
2797:000 | DONE ins | na 16 16 | 006c34 | 4c f2 6b    |                 jmp 006bf2           
2798:000 | DONE wsp | na 16 16 |        |             |
2799:000 | DONE lbl | na 16 16 | 006c37 |             | compex_line_done                     
2800:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
2801:000 | DONE ins | na 16 16 | 006c37 | b4 02       |                 ldy.dx 02            
2802:000 | DONE ins | na 16 16 | 006c39 | e8          |                 inx                  
2803:000 | DONE ins | na 16 16 | 006c3a | e8          |                 inx                  
2804:000 | DONE ins | na 16 16 | 006c3b | e8          |                 inx                  
2805:000 | DONE ins | na 16 16 | 006c3c | e8          |                 inx                  
2806:000 | DONE wsp | na 16 16 |        |             |
2807:000 | DONE ins | na 16 16 | 006c3d | 60          |                 rts                  
2808:000 | DONE wsp | na 16 16 |        |             |
2809:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2810:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
2811:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
2812:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
2813:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
2814:000 | DONE cmt | na 16 16 |        |             | ;
2815:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
2816:000 | DONE cmt | na 16 16 |        |             | ;
2817:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
2818:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
2819:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos
2820:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
2821:000 | DONE wsp | na 16 16 |        |             |
2822:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
2823:000 | DONE lbl | na 16 16 | 006c3e |             | cmpl_word                            
2824:000 | DONE ins | na 16 16 | 006c3e | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
2825:000 | DONE ins | na 16 16 | 006c41 | 80 08       |                 bra 006c4b           
2826:000 | DONE lbl | na 16 16 | 006c43 |             | cmpl_subroutine                      
2827:000 | DONE ins | na 16 16 | 006c43 | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
2828:000 | DONE ins | na 16 16 | 006c46 | 80 03       |                 bra 006c4b           
2829:000 | DONE lbl | na 16 16 | 006c48 |             | cmpl_jump                            
2830:000 | DONE ins | na 16 16 | 006c48 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
2831:000 | DONE lbl | na 16 16 | 006c4b |             | cmpl_common                          
2832:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
2833:000 | DONE ins | na 16 16 | 006c4b | 84 06       |                 sty.d 000206         
2834:000 | DONE wsp | na 16 16 |        |             |
2835:000 | DONE ins | na 16 16 | 006c4d | a8          |                 tay                  force flag check
2836:000 | DONE ins | na 16 16 | 006c4e | f0 08       |                 beq 006c58           came in through cmpl_word, just compile body
2837:000 | DONE wsp | na 16 16 |        |             |
2838:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
2839:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
2840:000 | DONE ins | na 16 16 | 006c50 | e2 20       |                 sep 20               
2840:001 | DONE ctl | na  8 16 |        |             |         .!a8
2841:000 | DONE ins | na  8 16 | 006c52 | 92 00       |                 sta.di 000200        STA (CP)
2842:000 | DONE ins | na  8 16 | 006c54 | c2 20       |                 rep 20               
2842:001 | DONE ctl | na 16 16 |        |             |         .!a16
2843:000 | DONE ins | na 16 16 | 006c56 | e6 00       |                 inc.d 000200         fall through to cmpl_body
2844:000 | DONE lbl | na 16 16 | 006c58 |             | cmpl_body                            
2845:000 | DONE ins | na 16 16 | 006c58 | 7a          |                 ply                  the return address we'll need later
2846:000 | DONE wsp | na 16 16 |        |             |
2847:000 | DONE ins | na 16 16 | 006c59 | 68          |                 pla                  next value on stack is the word to compile
2848:000 | DONE ins | na 16 16 | 006c5a | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
2849:000 | DONE ins | na 16 16 | 006c5c | e6 00       |                 inc.d 000200         
2850:000 | DONE ins | na 16 16 | 006c5e | e6 00       |                 inc.d 000200         
2851:000 | DONE wsp | na 16 16 |        |             |
2852:000 | DONE ins | na 16 16 | 006c60 | 5a          |                 phy                  make sure we can get back home
2853:000 | DONE wsp | na 16 16 |        |             |
2854:000 | DONE ins | na 16 16 | 006c61 | a4 06       |                 ldy.d 000206         restore Data Stack
2855:000 | DONE wsp | na 16 16 |        |             |
2856:000 | DONE ins | na 16 16 | 006c63 | 60          |                 rts                  
2857:000 | DONE wsp | na 16 16 |        |             |
2858:000 | DONE wsp | na 16 16 |        |             |
2859:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2860:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
2861:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
2862:000 | DONE lbl | na 16 16 | 006c64 |             | error                                
2863:000 | DONE ins | na 16 16 | 006c64 | 20 6a 6c    |                 jsr 006c6a           
2864:000 | DONE ins | na 16 16 | 006c67 | 4c 97 60    |                 jmp 006097           
2865:000 | DONE wsp | na 16 16 |        |             |
2866:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2867:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
2868:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
2869:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
2870:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
2871:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
2872:000 | DONE lbl | na 16 16 | 006c6a |             | print_string                         
2873:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2874:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2875:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
2876:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
2877:000 | DONE ins | na 16 16 | 006c6a | da          |                 phx                  
2878:000 | DONE ins | na 16 16 | 006c6b | aa          |                 tax                  x16 contains address of string
2879:000 | DONE lbl | na 16 16 | 006c6c |             | @                                    
2880:000 | DONE ins | na 16 16 | 006c6c | e2 20       |                 sep 20               
2880:001 | DONE ctl | na  8 16 |        |             |         .!a8
2881:000 | DONE ins | na  8 16 | 006c6e | bd 00 00    |                 lda.x 0000           LDA $0000,X
2882:000 | DONE ins | na  8 16 | 006c71 | f0 06       |                 beq 006c79           
2883:000 | DONE ins | na  8 16 | 006c73 | 20 36 60    |                 jsr 006036           
2884:000 | DONE ins | na  8 16 | 006c76 | e8          |                 inx                  
2885:000 | DONE ins | na  8 16 | 006c77 | 80 f3       |                 bra 006c6c           
2886:000 | DONE wsp | na  8 16 |        |             |
2887:000 | DONE lbl | na  8 16 | 006c79 |             | print_string_done                    
2888:000 | DONE ins | na  8 16 | 006c79 | a9 0a       |                 lda.# AscLF          should be CR on some systems
2889:000 | DONE ins | na  8 16 | 006c7b | 20 36 60    |                 jsr 006036           
2890:000 | DONE ins | na  8 16 | 006c7e | c2 20       |                 rep 20               
2890:001 | DONE ctl | na 16 16 |        |             |         .!a16
2891:000 | DONE ins | na 16 16 | 006c80 | fa          |                 plx                  
2892:000 | DONE ins | na 16 16 | 006c81 | 60          |                 rts                  
2893:000 | DONE wsp | na 16 16 |        |             |
2894:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2895:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
2896:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
2897:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
2898:000 | DONE lbl | na 16 16 | 006c82 |             | byte_to_ascii                        
2899:000 | DONE ins | na 16 16 | 006c82 | 48          |                 pha                  
2900:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
2901:000 | DONE ins | na 16 16 | 006c83 | 4a          |                 lsr.a                
2902:000 | DONE ins | na 16 16 | 006c84 | 4a          |                 lsr.a                
2903:000 | DONE ins | na 16 16 | 006c85 | 4a          |                 lsr.a                
2904:000 | DONE ins | na 16 16 | 006c86 | 4a          |                 lsr.a                
2905:000 | DONE ins | na 16 16 | 006c87 | 20 8b 6c    |                 jsr 006c8b           
2906:000 | DONE wsp | na 16 16 |        |             |
2907:000 | DONE ins | na 16 16 | 006c8a | 68          |                 pla                  
2908:000 | DONE wsp | na 16 16 |        |             |
2909:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
2910:000 | DONE wsp | na 16 16 |        |             |
2911:000 | DONE wsp | na 16 16 |        |             |
2912:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2913:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
2914:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
2915:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
2916:000 | DONE lbl | na 16 16 | 006c8b |             | nibble_to_ascii                      
2917:000 | DONE ins | na 16 16 | 006c8b | 29 0f 00    |                 and.# 000f           
2918:000 | DONE ins | na 16 16 | 006c8e | 09 30 00    |                 ora.# 30             
2919:000 | DONE ins | na 16 16 | 006c91 | c9 3a 00    |                 cmp.# 003a           '9' + 1
2920:000 | DONE ins | na 16 16 | 006c94 | 90 03       |                 bcc 006c99           
2921:000 | DONE ins | na 16 16 | 006c96 | 69 06 00    |                 adc.# 0006           
2922:000 | DONE lbl | na 16 16 | 006c99 |             | @                                    
2923:000 | DONE ins | na 16 16 | 006c99 | 20 36 60    |                 jsr 006036           
2924:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2925:000 | DONE ins | na 16 16 | 006c9c | 60          |                 rts                  
2926:000 | DONE wsp | na 16 16 |        |             |
2927:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2928:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
2929:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
2930:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
2931:000 | DONE lbl | na 16 16 | 006c9d |             | string_to_lowercase                  
2932:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
2933:000 | DONE ins | na 16 16 | 006c9d | 60          |                 rts                  
2934:000 | DONE wsp | na 16 16 |        |             |
2935:000 | DONE wsp | na 16 16 |        |             |
2936:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2937:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
2938:000 | DONE wsp | na 16 16 |        |             |
2939:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
2940:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
2941:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
2942:000 | DONE lbl | na 16 16 | 006c9e |             | hi-start                             
2943:000 | DONE cmt | na 16 16 |        |             |         ; High level definitions
2944:000 | DONE dir | na 16 16 | 006c9e | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) ( "parens"
2944:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
2944:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
2944:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
2944:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
2944:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
2945:000 | DONE dir | na 16 16 | 006cc3 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) .( "dotparens"
2945:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
2945:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
2945:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
2945:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
2945:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
2946:000 | DONE dir | na 16 16 | 006ce8 | (50 bytes)  |         .byte 3a, 20, 73, &34, 20, 5b, 63, 68, 61, 72, 5d, 20, &3 (...) s"
2946:000 | DONE dir | na 16 16 |        |             |                 3a 20 73 22 20 5b 63 68  --  :   s "   [ c h
2946:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 22 20 70 61  --  a r ]   "   p a
2946:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 70 6f 73 74  --  r s e   p o s t
2946:000 | DONE dir | na 16 16 |        |             |                 70 6f 6e 65 20 73 6c 69  --  p o n e   s l i
2946:000 | DONE dir | na 16 16 |        |             |                 74 65 72 61 6c 20 3b 20  --  t e r a l   ;  
2946:000 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
2946:000 | DONE dir | na 16 16 |        |             |                 65 20                    --  e  
2947:000 | DONE wsp | na 16 16 |        |             |
2948:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings
2949:000 | DONE dir | na 16 16 | 006d1a | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
2949:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
2949:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
2949:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
2949:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
2949:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
2950:000 | DONE dir | na 16 16 | 006d3d | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
2950:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
2950:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
2950:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
2950:000 | DONE dir | na 16 16 |        |             |                 31 37 2e 20 46 65 62 20  --  1 7 .   F e b  
2950:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
2951:000 | DONE dir | na 16 16 | 006d62 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
2951:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
2951:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
2951:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
2951:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
2951:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
2951:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
2951:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
2952:000 | DONE dir | na 16 16 | 006d95 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
2952:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
2952:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
2952:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
2952:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
2952:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
2952:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
2952:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
2953:000 | DONE dir | na 16 16 | 006dc9 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
2953:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
2953:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
2953:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
2953:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
2954:000 | DONE lbl | na 16 16 | 006de5 |             | hi-end                               
2955:000 | DONE wsp | na 16 16 |        |             |
2956:000 | DONE wsp | na 16 16 |        |             |
2957:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2958:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
2959:000 | DONE wsp | na 16 16 |        |             |
2960:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
2960:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2960:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
2960:003 | DONE cmt | na 16 16 |        |             | ; This version:  15. Feb 2017
2960:004 | DONE wsp | na 16 16 |        |             |
2960:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
2960:006 | DONE wsp | na 16 16 |        |             |
2960:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2960:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
2960:009 | DONE wsp | na 16 16 |        |             |
2960:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
2960:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
2960:012 | DONE cmt | na 16 16 |        |             | ; character
2960:013 | DONE wsp | na 16 16 |        |             |
2960:014 | DONE lbl | na 16 16 | 006de5 |             | s_ok                                 
2960:015 | DONE dir | na 16 16 | 006de5 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
2960:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
2960:016 | DONE lbl | na 16 16 | 006de9 |             | s_compiled                           
2960:017 | DONE dir | na 16 16 | 006de9 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
2960:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
2960:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
2960:018 | DONE wsp | na 16 16 |        |             |
2960:019 | DONE wsp | na 16 16 |        |             |
2960:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2960:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
2960:022 | DONE wsp | na 16 16 |        |             |
2960:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
2960:024 | DONE wsp | na 16 16 |        |             |
2960:025 | DONE lbl | na 16 16 | 006df3 |             | es_allot                             
2960:026 | DONE dir | na 16 16 | 006df3 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
2960:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
2960:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
2960:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
2960:027 | DONE lbl | na 16 16 | 006e07 |             | es_channel                           
2960:028 | DONE dir | na 16 16 | 006e07 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
2960:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
2960:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
2960:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
2960:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
2960:029 | DONE lbl | na 16 16 | 006e21 |             | es_componly                          
2960:030 | DONE dir | na 16 16 | 006e21 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
2960:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
2960:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
2960:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
2960:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
2960:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
2960:031 | DONE lbl | na 16 16 | 006e42 |             | es_defer                             
2960:032 | DONE dir | na 16 16 | 006e42 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
2960:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
2960:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
2960:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
2960:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
2960:033 | DONE lbl | na 16 16 | 006e5f |             | es_divzero                           
2960:034 | DONE dir | na 16 16 | 006e5f | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
2960:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
2960:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
2960:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
2960:035 | DONE lbl | na 16 16 | 006e70 |             | es_error                             
2960:036 | DONE dir | na 16 16 | 006e70 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
2960:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
2960:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
2960:037 | DONE lbl | na 16 16 | 006e7c |             | es_intonly                           
2960:038 | DONE dir | na 16 16 | 006e7c | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
2960:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
2960:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
2960:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
2960:039 | DONE lbl | na 16 16 | 006e92 |             | es_noname                            
2960:040 | DONE dir | na 16 16 | 006e92 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
2960:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
2960:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
2960:040 | DONE dir | na 16 16 |        |             |                                          -- 
2960:041 | DONE lbl | na 16 16 | 006ea2 |             | es_radix                             
2960:042 | DONE dir | na 16 16 | 006ea2 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
2960:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
2960:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
2960:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
2960:043 | DONE lbl | na 16 16 | 006eb9 |             | es_refill1                           
2960:044 | DONE dir | na 16 16 | 006eb9 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
2960:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
2960:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
2960:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
2960:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
2960:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
2960:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
2960:045 | DONE lbl | na 16 16 | 006ee7 |             | es_refill2                           
2960:046 | DONE dir | na 16 16 | 006ee7 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
2960:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
2960:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
2960:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
2960:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
2960:046 | DONE dir | na 16 16 |        |             |                                          -- 
2960:047 | DONE lbl | na 16 16 | 006f07 |             | es_state                             
2960:048 | DONE dir | na 16 16 | 006f07 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
2960:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
2960:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
2960:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
2960:048 | DONE dir | na 16 16 |        |             |                                          -- 
2960:049 | DONE lbl | na 16 16 | 006f1f |             | es_underflow                         
2960:050 | DONE dir | na 16 16 | 006f1f | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
2960:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
2960:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
2960:050 | DONE dir | na 16 16 |        |             |                                          -- 
2960:051 | DONE lbl | na 16 16 | 006f2f |             | es_syntax                            
2960:052 | DONE dir | na 16 16 | 006f2f | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
2960:052 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
2960:052 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
2960:052 | DONE dir | na 16 16 |        |             |                                          -- 
2960:053 | DONE wsp | na 16 16 |        |             |
2960:054 | DONE wsp | na 16 16 |        |             |
2960:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2960:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
2960:057 | DONE wsp | na 16 16 |        |             |
2960:058 | DONE lbl | na 16 16 | 006f3f |             | vt100_page                           
2960:059 | DONE dir | na 16 16 | 006f3f | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
2960:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
2960:060 | DONE lbl | na 16 16 | 006f44 |             | vt100_home                           
2960:061 | DONE dir | na 16 16 | 006f44 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
2960:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
2960:062 | DONE wsp | na 16 16 |        |             |
2960:063 | DONE wsp | na 16 16 |        |             |
2960:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2960:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
2960:066 | DONE wsp | na 16 16 |        |             |
2960:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
2960:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
2960:069 | DONE wsp | na 16 16 |        |             |
2960:070 | DONE lbl | na 16 16 | 006f48 |             | tests_prev_cmd                       
2960:071 | DONE dir | na 16 16 | 006f48 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
2960:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
2960:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
2960:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
2960:072 | DONE lbl | na 16 16 | 006f5b |             | tests_next_cmd                       
2960:073 | DONE dir | na 16 16 | 006f5b | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
2960:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
2960:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
2960:074 | DONE wsp | na 16 16 |        |             |
2960:075 | DONE wsp | na 16 16 |        |             |
2960:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2960:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
2960:078 | DONE wsp | na 16 16 |        |             |
2960:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
2960:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
2960:081 | DONE wsp | na 16 16 |        |             |
2960:082 | DONE lbl | na 16 16 | 006f6a |             | alphastr                             
2960:083 | DONE dir | na 16 16 | 006f6a | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
2960:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
2960:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
2960:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
2960:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
2960:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
2961:000 | DONE wsp | na 16 16 |        |             |
2962:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2963:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
2964:000 | DONE wsp | na 16 16 |        |             |
2965:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
2966:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
2967:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
2968:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
2969:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
2970:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2971:000 | DONE wsp | na 16 16 |        |             |
2972:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
2973:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2974:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
2975:000 | DONE cmt | na 16 16 |        |             |                 ; xba
2976:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2977:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2978:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
2979:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2980:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
2981:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
2982:000 | DONE wsp | na 16 16 |        |             |
2983:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
2984:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
2985:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
2986:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2987:000 | DONE wsp | na 16 16 |        |             |
2988:000 | DONE wsp | na 16 16 |        |             |
2989:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2990:000 | DONE cmt | na 16 16 |        |             | ; END
2991:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 006224
- accept_eol                  : 00621c
- accept_loop                 : 0061d1
- accept_nonzero              : 0061c4
- allot_done                  : 006264
- allot_error                 : 006253
- allot_minus                 : 006259
- allot_real_gone             : 006266
- alphastr                    : 006f6a
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006c82
- char_got_char               : 0062c3
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 006c58
- cmpl_common                 : 006c4b
- cmpl_jump                   : 006c48
- cmpl_subroutine             : 006c43
- cmpl_word                   : 006c3e
- co                          : 000004
- compex                      : 006bf2
- compex_compile              : 006c29
- compex_got_name_token       : 006c07
- compex_interpret            : 006c23
- compex_line_done            : 006c37
- compex_loop                 : 006bf2
- compile_as_code             : 0062d8
- compile_as_jump             : 0062d8
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006326
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 006bd0
- dodoes                      : 006bde
- does_rt                     : 0063b0
- dots_done                   : 00642e
- dots_loop                   : 006414
- dots_not_empty              : 00640e
- dovar                       : 006beb
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 00643f
- dump_done                   : 006454
- dump_line_loop              : 006439
- error                       : 006c64
- es_allot                    : 006df3
- es_channel                  : 006e07
- es_componly                 : 006e21
- es_defer                    : 006e42
- es_divzero                  : 006e5f
- es_error                    : 006e70
- es_intonly                  : 006e7c
- es_noname                   : 006e92
- es_radix                    : 006ea2
- es_refill1                  : 006eb9
- es_refill2                  : 006ee7
- es_state                    : 006f07
- es_syntax                   : 006f2f
- es_underflow                : 006f1f
- execute_ip                  : 006492
- find-name_all_chars         : 0064ce
- find-name_char_nomatcnt_8   : 0064ca
- find-name_chars             : 0064bf
- find-name_done              : 0064f4
- find-name_failure_16        : 0064f1
- find-name_loop              : 0064aa
- find-name_next_entry        : 0064b3
- find-name_success           : 0064eb
- get_chr                     : 006047
- get_chr_wait                : 00604c
- have_chr?                   : 006056
- hi-end                      : 006de5
- hi-start                    : 006c9e
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- literal_rt                  : 006525
- max_drop                    : 006540
- max_nip                     : 006542
- max_no_ov                   : 00653e
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 006553
- min_nip                     : 006555
- min_no_ov                   : 006551
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 006c8b
- nt_2drop                    : 006b82
- nt_2dup                     : 006999
- nt_abort                    : 006807
- nt_abs                      : 0069a5
- nt_accept                   : 006b37
- nt_allot                    : 00695e
- nt_and                      : 006a5f
- nt_base                     : 00689f
- nt_bell                     : 0067ba
- nt_bl                       : 006850
- nt_bracket-char             : 0068d8
- nt_bye                      : 00678a
- nt_c-comma                  : 006a6a
- nt_c-fetch                  : 006a74
- nt_c-store                  : 006a7e
- nt_cells                    : 0068bb
- nt_char                     : 006a3e
- nt_cold                     : 006795
- nt_colon                    : 006955
- nt_comma                    : 006b2e
- nt_compile-only             : 0068f5
- nt_compilecomma             : 00693c
- nt_constant                 : 0069e3
- nt_count                    : 0067fa
- nt_cr                       : 006846
- nt_create                   : 006978
- nt_decimal                  : 0067c6
- nt_depth                    : 0069d6
- nt_does                     : 00696b
- nt_dot                      : 00688b
- nt_dots                     : 006875
- nt_drop                     : 006bc4
- nt_dump                     : 0067ae
- nt_dup                      : 006bb9
- nt_evaluate                 : 0068ab
- nt_execute                  : 006b67
- nt_false                    : 006ab8
- nt_fetch                    : 006b9b
- nt_find-name                : 006aec
- nt_here                     : 006b76
- nt_hex                      : 0067d5
- nt_immediate                : 006909
- nt_invert                   : 006a30
- nt_leftbracket              : 006933
- nt_literal                  : 0068e6
- nt_max                      : 006a17
- nt_min                      : 006a0c
- nt_minus                    : 006a92
- nt_name-int                 : 006836
- nt_name-string              : 006986
- nt_negate                   : 006a22
- nt_nip                      : 006b51
- nt_one                      : 006ada
- nt_one-minus                : 006aa4
- nt_one-plus                 : 006aae
- nt_or                       : 006a55
- nt_over                     : 006b8f
- nt_pad                      : 006894
- nt_page                     : 0067ee
- nt_parse                    : 006814
- nt_parse-name               : 006b0b
- nt_plus                     : 006a9b
- nt_postpone                 : 00691a
- nt_question                 : 00682d
- nt_quit                     : 006821
- nt_refill                   : 006afd
- nt_rightbracket             : 00692a
- nt_rot                      : 006b5c
- nt_semicolon                : 00694c
- nt_sliteral                 : 0068c8
- nt_source                   : 0069c8
- nt_source-id                : 006b1d
- nt_space                    : 006868
- nt_spaces                   : 00685a
- nt_state                    : 0069b0
- nt_store                    : 006ba4
- nt_swap                     : 006bad
- nt_tick                     : 006a03
- nt_to-in                    : 0069bd
- nt_true                     : 006ac5
- nt_tuck                     : 006b45
- nt_two                      : 006ad1
- nt_two-star                 : 006a88
- nt_type                     : 00687f
- nt_unused                   : 0067e0
- nt_variable                 : 0069f3
- nt_words                    : 0067a1
- nt_xor                      : 006a4a
- nt_zero                     : 006ae3
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 0065b5
- parse-name_found            : 0065c9
- parse-name_loop             : 0065a8
- parse_found_delimiter       : 0065f5
- parse_loop                  : 0065e8
- parse_reached_eol           : 0065f9
- physicalram                 : 007fff
- piblen                      : 000210
- pp_got_nt                   : 00661e
- pp_got_word                 : 006613
- pp_not_immediate            : 00662e
- print_string                : 006c6a
- print_string_done           : 006c79
- put_chr                     : 006036
- put_chr_wait                : 00603c
- pw                          : 000008
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 006669
- refill_src_not_kbd          : 006660
- reset_hardware              : 006000
- s_compiled                  : 006de9
- s_ok                        : 006de5
- sl_loop                     : 006699
- sliteral_rt                 : 0066c4
- spaces_done                 : 0066fd
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- string_to_lowercase         : 006c9d
- tests_next_cmd              : 006f5b
- tests_prev_cmd              : 006f48
- tick_have_nt                : 0061b1
- tick_have_word              : 0061a5
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 00673b
- type_loop                   : 00672f
- vt100_home                  : 006f44
- vt100_page                  : 006f3f
- words_loop                  : 006765
- workword                    : 00021e
- xt_2drop                    : 006187
- xt_2dup                     : 00618e
- xt_abort                    : 006097
- xt_abs                      : 0061b5
- xt_accept                   : 0061be
- xt_allot                    : 006242
- xt_and                      : 00626b
- xt_base                     : 006272
- xt_bell                     : 00627a
- xt_bl                       : 006281
- xt_bracket-char             : 006144
- xt_bye                      : 006289
- xt_c-comma                  : 00628d
- xt_c-fetch                  : 00629b
- xt_c-store                  : 0062a7
- xt_char                     : 0062b7
- xt_cold                     : 006063
- xt_colon                    : 0060f3
- xt_comma                    : 0060e7
- xt_compile-only             : 0062cf
- xt_compilecomma             : 0062d8
- xt_constant                 : 0062eb
- xt_count                    : 006305
- xt_cr                       : 006314
- xt_create                   : 00631b
- xt_decimal                  : 00638e
- xt_depth                    : 006394
- xt_does                     : 0063a3
- xt_dot                      : 0063c6
- xt_dotparen                 : 0063dc
- xt_dots                     : 0063ea
- xt_drop                     : 006432
- xt_dump                     : 006437
- xt_dup                      : 00645e
- xt_evaluate                 : 006463
- xt_execute                  : 006495
- xt_fetch                    : 00613f
- xt_find-name                : 0064a0
- xt_here                     : 006506
- xt_hex                      : 00650d
- xt_immediate                : 0064f7
- xt_invert                   : 006500
- xt_leftbracket              : 00614b
- xt_literal                  : 006513
- xt_max                      : 006532
- xt_min                      : 006545
- xt_minus                    : 00615c
- xt_name-int                 : 006558
- xt_name-string              : 006561
- xt_negate                   : 006572
- xt_nip                      : 006579
- xt_one                      : 00616f
- xt_one-minus                : 006177
- xt_one-plus                 : 006179
- xt_or                       : 00657c
- xt_over                     : 006583
- xt_pad                      : 00658a
- xt_page                     : 006596
- xt_parse                    : 0065d5
- xt_parse-name               : 0065a3
- xt_plus                     : 006154
- xt_postpone                 : 006608
- xt_question                 : 00612e
- xt_quit                     : 00609f
- xt_refill                   : 00663d
- xt_rightbracket             : 00614e
- xt_rot                      : 006670
- xt_semicolon                : 006115
- xt_sliteral                 : 006679
- xt_source                   : 0066da
- xt_source-id                : 0066e7
- xt_space                    : 0066ee
- xt_spaces                   : 0066f5
- xt_state                    : 006702
- xt_store                    : 006135
- xt_swap                     : 00670a
- xt_tick                     : 006199
- xt_to-in                    : 0060df
- xt_true                     : 006710
- xt_tuck                     : 006718
- xt_two                      : 00617b
- xt_two-star                 : 006183
- xt_type                     : 006721
- xt_unused                   : 006742
- xt_variable                 : 00674e
- xt_words                    : 00675b
- xt_xor                      : 006783
- xt_zero                     : 006167
- z_2drop                     : 00618d
- z_2dup                      : 006198
- z_abort                     : 0060de
- z_abs                       : 0061bd
- z_accept                    : 006241
- z_allot                     : 00626a
- z_and                       : 006271
- z_base                      : 006279
- z_bell                      : 006280
- z_bl                        : 006288
- z_bracket-char              : 00614a
- z_bye                       : 00628c
- z_c-comma                   : 00629a
- z_c-fetch                   : 0062a6
- z_c-store                   : 0062b6
- z_char                      : 0062ce
- z_cold                      : 0060de
- z_colon                     : 006114
- z_comma                     : 0060f2
- z_compile-only              : 0062d7
- z_compilecomma              : 0062ea
- z_constant                  : 006304
- z_count                     : 006313
- z_cr                        : 00631a
- z_create                    : 00638d
- z_decimal                   : 006393
- z_depth                     : 0063a2
- z_does                      : 0063af
- z_dot                       : 0063db
- z_dotparen                  : 0063e9
- z_dots                      : 006431
- z_drop                      : 006436
- z_dump                      : 00645d
- z_dup                       : 006462
- z_evaluate                  : 006491
- z_execute                   : 00649f
- z_fetch                     : 006143
- z_find-name                 : 0064f6
- z_here                      : 00650c
- z_hex                       : 006512
- z_immediate                 : 0064ff
- z_invert                    : 006505
- z_leftbracket               : 00614d
- z_literal                   : 006524
- z_max                       : 006544
- z_min                       : 006557
- z_minus                     : 006166
- z_name-int                  : 006560
- z_name-string               : 006571
- z_negate                    : 006578
- z_nip                       : 00657b
- z_one                       : 006176
- z_one-minus                 : 006178
- z_one-plus                  : 00617a
- z_or                        : 006582
- z_over                      : 006589
- z_pad                       : 006595
- z_page                      : 0065a2
- z_parse                     : 006607
- z_parse-name                : 006607
- z_plus                      : 00615b
- z_postpone                  : 00663d
- z_question                  : 006134
- z_quit                      : 0060de
- z_refill                    : 00666f
- z_rightbracket              : 006153
- z_rot                       : 006678
- z_semicolon                 : 00612d
- z_sliteral                  : 0066c3
- z_source                    : 0066e6
- z_source-id                 : 0066ed
- z_space                     : 0066f4
- z_spaces                    : 006701
- z_state                     : 006709
- z_store                     : 00613e
- z_swap                      : 00670f
- z_tick                      : 0061b4
- z_to-in                     : 0060e6
- z_true                      : 006717
- z_tuck                      : 006720
- z_two                       : 006182
- z_two-star                  : 006186
- z_type                      : 006741
- z_unused                    : 00674d
- z_variable                  : 00675a
- z_words                     : 006782
- z_xor                       : 006789
- z_zero                      : 00616e
