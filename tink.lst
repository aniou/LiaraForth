A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sat Feb 18 18:06:32 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.14634 seconds
Code origin: 006000
Bytes of machine code: 4679

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 18. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: 1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE wsp | em  8  8 |        |             |
  16:074 | DONE wsp | em  8  8 |        |             |
  16:075 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:076 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:077 | DONE wsp | em  8  8 |        |             |
  16:078 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:080 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:089 | DONE wsp | em  8  8 |        |             |
  16:090 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:091 | DONE dir | em  8  8 |        |             |         .equ PW 0008                 Primitive (Native) Word
  16:092 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:093 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:094 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native (inline) Compile
  16:095 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 d7 64    |                 jsr 0064d7           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  57:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  58:000 | DONE ins | na 16 16 | 00606a | a9 57 6d    |                 lda.# 006d57         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE wsp | na 16 16 |        |             |
  70:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  71:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  72:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  73:000 | DONE wsp | na 16 16 |        |             |
  74:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  75:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  76:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  77:000 | DONE wsp | na 16 16 |        |             |
  78:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  79:000 | DONE ins | na 16 16 | 006085 | 20 73 66    |                 jsr 006673           
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  82:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is rubbish, so we don't have to push it to the
  83:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  84:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  88:000 | DONE ins | na 16 16 | 00608c | a9 31 6e    |                 lda.# 006e31         
  89:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  90:000 | DONE ins | na 16 16 | 006091 | a0 6e 02    |                 ldy.# 00026e         length goes in TOS
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE ins | na 16 16 | 006094 | 20 40 65    |                 jsr 006540           
  93:000 | DONE wsp | na 16 16 |        |             |
  94:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to ABORT
  95:000 | DONE wsp | na 16 16 |        |             |
  96:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  97:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  98:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  99:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 100:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 101:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 102:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 103:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 103:001 | DONE ctl | na 16 16 |        |             |         .!a16
 104:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 105:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 106:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE wsp | na 16 16 |        |             |
 109:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 110:000 | DONE wsp | na 16 16 |        |             |
 111:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 112:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 113:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 114:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 115:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 116:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 117:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 118:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 119:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 120:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 123:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 124:000 | DONE ins | na 16 16 | 0060a3 | 9c 6f 65    |                 stz 00656f           
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 127:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 130:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 131:000 | DONE wsp | na 16 16 |        |             |
 132:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 133:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 134:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 135:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 136:000 | DONE wsp | na 16 16 |        |             |
 137:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 138:000 | DONE ins | na 16 16 | 0060ac | 20 1a 67    |                 jsr 00671a           ( -- f )
 139:000 | DONE wsp | na 16 16 |        |             |
 140:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 141:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 142:000 | DONE wsp | na 16 16 |        |             |
 143:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 145:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 146:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 147:000 | DONE ins | na 16 16 | 0060b2 | a9 73 71    |                 lda.# 007173         
 148:000 | DONE ins | na 16 16 | 0060b5 | 4c f7 6d    |                 jmp 006df7           
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE wsp | na 16 16 |        |             |
 151:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 152:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 153:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 154:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 155:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 156:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 157:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 158:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 159:000 | DONE wsp | na 16 16 |        |             |
 160:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 161:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 164:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 165:000 | DONE ins | na 16 16 | 0060be | 20 85 6d    |                 jsr 006d85           
 166:000 | DONE wsp | na 16 16 |        |             |
 167:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 168:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 169:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 170:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 171:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 172:000 | DONE wsp | na 16 16 |        |             |
 173:000 | DONE ins | na 16 16 | 0060c6 | a9 d9 71    |                 lda.# 0071d9         
 174:000 | DONE ins | na 16 16 | 0060c9 | 4c f7 6d    |                 jmp 006df7           
 175:000 | DONE wsp | na 16 16 |        |             |
 176:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 177:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 178:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 179:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 180:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 181:000 | DONE wsp | na 16 16 |        |             |
 182:000 | DONE ins | na 16 16 | 0060d0 | a9 9f 70    |                 lda.# 00709f         
 183:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 184:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 185:000 | DONE ins | na 16 16 | 0060d5 | a9 a3 70    |                 lda.# 0070a3         fall through to quit_print
 186:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 187:000 | DONE ins | na 16 16 | 0060d8 | 20 fd 6d    |                 jsr 006dfd           
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, guys. Now get the next one
 190:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 191:000 | DONE wsp | na 16 16 |        |             |
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 194:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 194:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 195:000 | DONE wsp | na 16 16 |        |             |
 196:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 197:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 198:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 199:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 200:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 201:000 | DONE lbl | na 16 16 | 0060df |             | xt_less                              
 202:000 | DONE ins | na 16 16 | 0060df | 98          |                 tya                  
 203:000 | DONE ins | na 16 16 | 0060e0 | a0 00 00    |                 ldy.# 0000           default is false
 204:000 | DONE wsp | na 16 16 |        |             |
 205:000 | DONE ins | na 16 16 | 0060e3 | 38          |                 sec                  
 206:000 | DONE ins | na 16 16 | 0060e4 | f5 00       |                 sbc.dx 00            
 207:000 | DONE ins | na 16 16 | 0060e6 | f0 08       |                 beq 0060f0           the same is not greater
 208:000 | DONE ins | na 16 16 | 0060e8 | 50 03       |                 bvc 0060ed           no overflow, skip ahead
 209:000 | DONE wsp | na 16 16 |        |             |
 210:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 211:000 | DONE ins | na 16 16 | 0060ea | 49 00 80    |                 eor.# 8000           compliment negative flag
 212:000 | DONE wsp | na 16 16 |        |             |
 213:000 | DONE lbl | na 16 16 | 0060ed |             | xt_less_no_ov                        
 214:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 215:000 | DONE ins | na 16 16 | 0060ed | 30 01       |                 bmi 0060f0           
 216:000 | DONE ins | na 16 16 | 0060ef | 88          |                 dey                  
 217:000 | DONE lbl | na 16 16 | 0060f0 |             | xt_less_nip                          
 218:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 219:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 220:000 | DONE wsp | na 16 16 |        |             |
 221:000 | DONE lbl | na 16 16 | 0060f2 |             | z_less                               
 221:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE wsp | na 16 16 |        |             |
 224:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 225:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 226:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 227:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 228:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_not-equal                         
 229:000 | DONE ins | na 16 16 | 0060f3 | 98          |                 tya                  
 230:000 | DONE ins | na 16 16 | 0060f4 | a0 00 00    |                 ldy.# 0000           default value is false
 231:000 | DONE wsp | na 16 16 |        |             |
 232:000 | DONE ins | na 16 16 | 0060f7 | d5 00       |                 cmp.dx 00            
 233:000 | DONE ins | na 16 16 | 0060f9 | f0 01       |                 beq 0060fc           
 234:000 | DONE ins | na 16 16 | 0060fb | 88          |                 dey                  wraps to 0FFFF (true)
 235:000 | DONE wsp | na 16 16 |        |             |
 236:000 | DONE lbl | na 16 16 | 0060fc |             | not-equal_equal                      ; yes, this is a silly name
 237:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 238:000 | DONE ins | na 16 16 | 0060fd | e8          |                 inx                  
 239:000 | DONE wsp | na 16 16 |        |             |
 240:000 | DONE lbl | na 16 16 | 0060fe |             | z_not-equal                          
 240:001 | DONE ins | na 16 16 | 0060fe | 60          |                 rts                  
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE wsp | na 16 16 |        |             |
 243:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 244:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 245:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 246:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 247:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 248:000 | DONE lbl | na 16 16 | 0060ff |             | xt_greater                           
 249:000 | DONE ins | na 16 16 | 0060ff | 98          |                 tya                  
 250:000 | DONE ins | na 16 16 | 006100 | a0 00 00    |                 ldy.# 0000           default is false
 251:000 | DONE wsp | na 16 16 |        |             |
 252:000 | DONE ins | na 16 16 | 006103 | 38          |                 sec                  
 253:000 | DONE ins | na 16 16 | 006104 | f5 00       |                 sbc.dx 00            
 254:000 | DONE ins | na 16 16 | 006106 | f0 08       |                 beq 006110           the same is not greater
 255:000 | DONE ins | na 16 16 | 006108 | 50 03       |                 bvc 00610d           no overflow, skip ahead
 256:000 | DONE wsp | na 16 16 |        |             |
 257:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 258:000 | DONE ins | na 16 16 | 00610a | 49 00 80    |                 eor.# 8000           compliment negative flag
 259:000 | DONE wsp | na 16 16 |        |             |
 260:000 | DONE lbl | na 16 16 | 00610d |             | xt_greater_no_ov                     
 261:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 262:000 | DONE ins | na 16 16 | 00610d | 10 01       |                 bpl 006110           
 263:000 | DONE ins | na 16 16 | 00610f | 88          |                 dey                  
 264:000 | DONE lbl | na 16 16 | 006110 |             | xt_greater_nip                       
 265:000 | DONE ins | na 16 16 | 006110 | e8          |                 inx                  
 266:000 | DONE ins | na 16 16 | 006111 | e8          |                 inx                  
 267:000 | DONE wsp | na 16 16 |        |             |
 268:000 | DONE lbl | na 16 16 | 006112 |             | z_greater                            
 268:001 | DONE ins | na 16 16 | 006112 | 60          |                 rts                  
 269:000 | DONE wsp | na 16 16 |        |             |
 270:000 | DONE wsp | na 16 16 |        |             |
 271:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 272:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 273:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 274:000 | DONE lbl | na 16 16 | 006113 |             | xt_to-in                             
 275:000 | DONE ins | na 16 16 | 006113 | ca          |                 dex                  
 276:000 | DONE ins | na 16 16 | 006114 | ca          |                 dex                  
 277:000 | DONE ins | na 16 16 | 006115 | 94 00       |                 sty.dx 00            
 278:000 | DONE wsp | na 16 16 |        |             |
 279:000 | DONE ins | na 16 16 | 006117 | a0 12 02    |                 ldy.# 000212         >IN
 280:000 | DONE lbl | na 16 16 | 00611a |             | z_to-in                              
 280:001 | DONE ins | na 16 16 | 00611a | 60          |                 rts                  
 281:000 | DONE wsp | na 16 16 |        |             |
 282:000 | DONE wsp | na 16 16 |        |             |
 283:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 284:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 285:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
 286:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
 287:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 288:000 | DONE cmt | na 16 16 |        |             | ; focus on size
 289:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
 290:000 | DONE lbl | na 16 16 | 00611b |             | xt_dot                               
 291:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 292:000 | DONE ins | na 16 16 | 00611b | 98          |                 tya                  
 293:000 | DONE ins | na 16 16 | 00611c | 29 00 ff    |                 and.# 0ff00          
 294:000 | DONE ins | na 16 16 | 00611f | eb          |                 xba                  
 295:000 | DONE ins | na 16 16 | 006120 | 20 15 6e    |                 jsr 006e15           
 296:000 | DONE ins | na 16 16 | 006123 | 98          |                 tya                  
 297:000 | DONE ins | na 16 16 | 006124 | 29 ff 00    |                 and.# 00ff           
 298:000 | DONE ins | na 16 16 | 006127 | 20 15 6e    |                 jsr 006e15           
 299:000 | DONE ins | na 16 16 | 00612a | 20 dd 67    |                 jsr 0067dd           
 300:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 301:000 | DONE wsp | na 16 16 |        |             |
 302:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
 303:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
 304:000 | DONE ins | na 16 16 | 00612d | 20 0f 65    |                 jsr 00650f           
 305:000 | DONE wsp | na 16 16 |        |             |
 306:000 | DONE lbl | na 16 16 | 006130 |             | z_dot                                
 306:001 | DONE ins | na 16 16 | 006130 | 60          |                 rts                  
 307:000 | DONE wsp | na 16 16 |        |             |
 308:000 | DONE wsp | na 16 16 |        |             |
 309:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 310:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 311:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 312:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 313:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 314:000 | DONE lbl | na 16 16 | 006131 |             | xt_dotparen                          
 315:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 316:000 | DONE ins | na 16 16 | 006131 | ca          |                 dex                  
 317:000 | DONE ins | na 16 16 | 006132 | ca          |                 dex                  
 318:000 | DONE ins | na 16 16 | 006133 | 94 00       |                 sty.dx 00            
 319:000 | DONE ins | na 16 16 | 006135 | a0 29 00    |                 ldy.# 29             
 320:000 | DONE wsp | na 16 16 |        |             |
 321:000 | DONE ins | na 16 16 | 006138 | 20 b2 66    |                 jsr 0066b2           ( -- addr u)
 322:000 | DONE ins | na 16 16 | 00613b | 20 10 68    |                 jsr 006810           
 323:000 | DONE wsp | na 16 16 |        |             |
 324:000 | DONE lbl | na 16 16 | 00613e |             | z_dotparen                           
 324:001 | DONE ins | na 16 16 | 00613e | 60          |                 rts                  
 325:000 | DONE wsp | na 16 16 |        |             |
 326:000 | DONE wsp | na 16 16 |        |             |
 327:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 328:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 329:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 330:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 331:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 332:000 | DONE lbl | na 16 16 | 00613f |             | xt_dotquote                          
 333:000 | DONE ins | na 16 16 | 00613f | ca          |                 dex                  
 334:000 | DONE ins | na 16 16 | 006140 | ca          |                 dex                  
 335:000 | DONE ins | na 16 16 | 006141 | 94 00       |                 sty.dx 00            
 336:000 | DONE ins | na 16 16 | 006143 | a0 22 00    |                 ldy.# 0022           ASCII for "
 337:000 | DONE wsp | na 16 16 |        |             |
 338:000 | DONE ins | na 16 16 | 006146 | 20 b2 66    |                 jsr 0066b2           
 339:000 | DONE ins | na 16 16 | 006149 | 20 68 67    |                 jsr 006768           
 340:000 | DONE wsp | na 16 16 |        |             |
 341:000 | DONE ins | na 16 16 | 00614c | f4 10 68    |                 phe.# 006810         
 342:000 | DONE ins | na 16 16 | 00614f | 20 d6 6d    |                 jsr 006dd6           
 343:000 | DONE wsp | na 16 16 |        |             |
 344:000 | DONE ins | na 16 16 | 006152 | 60          |                 rts                  
 345:000 | DONE lbl | na 16 16 | 006153 |             | z_dotquote                           
 346:000 | DONE wsp | na 16 16 |        |             |
 347:000 | DONE wsp | na 16 16 |        |             |
 348:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 349:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 350:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 351:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 352:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 353:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 354:000 | DONE lbl | na 16 16 | 006153 |             | xt_dots                              
 355:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 356:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 357:000 | DONE ins | na 16 16 | 006153 | 20 dd 64    |                 jsr 0064dd           ( -- u)
 358:000 | DONE wsp | na 16 16 |        |             |
 359:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 360:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 361:000 | DONE ins | na 16 16 | 006156 | a9 3c 00    |                 lda.# 3c             
 362:000 | DONE ins | na 16 16 | 006159 | 20 36 60    |                 jsr 006036           
 363:000 | DONE wsp | na 16 16 |        |             |
 364:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 365:000 | DONE ins | na 16 16 | 00615c | 98          |                 tya                  
 366:000 | DONE ins | na 16 16 | 00615d | 29 00 ff    |                 and.# 0ff00          
 367:000 | DONE ins | na 16 16 | 006160 | eb          |                 xba                  
 368:000 | DONE ins | na 16 16 | 006161 | 20 15 6e    |                 jsr 006e15           
 369:000 | DONE ins | na 16 16 | 006164 | 98          |                 tya                  
 370:000 | DONE ins | na 16 16 | 006165 | 29 ff 00    |                 and.# 00ff           
 371:000 | DONE ins | na 16 16 | 006168 | 20 15 6e    |                 jsr 006e15           
 372:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 373:000 | DONE wsp | na 16 16 |        |             |
 374:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 375:000 | DONE ins | na 16 16 | 00616b | a9 3e 00    |                 lda.# 3e             
 376:000 | DONE ins | na 16 16 | 00616e | 20 36 60    |                 jsr 006036           
 377:000 | DONE ins | na 16 16 | 006171 | 20 dd 67    |                 jsr 0067dd           
 378:000 | DONE wsp | na 16 16 |        |             |
 379:000 | DONE wsp | na 16 16 |        |             |
 380:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 381:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 382:000 | DONE ins | na 16 16 | 006174 | 98          |                 tya                  force flag test
 383:000 | DONE ins | na 16 16 | 006175 | f0 20       |                 beq 006197           
 384:000 | DONE wsp | na 16 16 |        |             |
 385:000 | DONE lbl | na 16 16 | 006177 |             | dots_not_empty                       
 386:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 387:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 388:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 389:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 390:000 | DONE wsp | na 16 16 |        |             |
 391:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 392:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 393:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 394:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 395:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
 396:000 | DONE ins | na 16 16 | 006177 | da          |                 phx                  
 397:000 | DONE wsp | na 16 16 |        |             |
 398:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 399:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
 400:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
 401:000 | DONE ins | na 16 16 | 006178 | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
 402:000 | DONE ins | na 16 16 | 00617b | ca          |                 dex                  
 403:000 | DONE ins | na 16 16 | 00617c | ca          |                 dex                  points to dsp0-2, which is more garbage
 404:000 | DONE wsp | na 16 16 |        |             |
 405:000 | DONE lbl | na 16 16 | 00617d |             | dots_loop                            
 406:000 | DONE ins | na 16 16 | 00617d | ca          |                 dex                  get next element on DS, initially dsp0-4
 407:000 | DONE ins | na 16 16 | 00617e | ca          |                 dex                  
 408:000 | DONE wsp | na 16 16 |        |             |
 409:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 410:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 411:000 | DONE ins | na 16 16 | 00617f | b5 00       |                 lda.dx 00            
 412:000 | DONE ins | na 16 16 | 006181 | 29 00 ff    |                 and.# 0ff00          
 413:000 | DONE ins | na 16 16 | 006184 | eb          |                 xba                  
 414:000 | DONE ins | na 16 16 | 006185 | 20 15 6e    |                 jsr 006e15           
 415:000 | DONE ins | na 16 16 | 006188 | b5 00       |                 lda.dx 00            
 416:000 | DONE ins | na 16 16 | 00618a | 29 ff 00    |                 and.# 00ff           
 417:000 | DONE ins | na 16 16 | 00618d | 20 15 6e    |                 jsr 006e15           
 418:000 | DONE ins | na 16 16 | 006190 | 20 dd 67    |                 jsr 0067dd           
 419:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 420:000 | DONE wsp | na 16 16 |        |             |
 421:000 | DONE ins | na 16 16 | 006193 | 88          |                 dey                  
 422:000 | DONE ins | na 16 16 | 006194 | d0 e7       |                 bne 00617d           
 423:000 | DONE wsp | na 16 16 |        |             |
 424:000 | DONE ins | na 16 16 | 006196 | fa          |                 plx                  restore original DSP
 425:000 | DONE wsp | na 16 16 |        |             |
 426:000 | DONE lbl | na 16 16 | 006197 |             | dots_done                            
 427:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 428:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 429:000 | DONE ins | na 16 16 | 006197 | 20 0f 65    |                 jsr 00650f           
 430:000 | DONE wsp | na 16 16 |        |             |
 431:000 | DONE lbl | na 16 16 | 00619a |             | z_dots                               
 431:001 | DONE ins | na 16 16 | 00619a | 60          |                 rts                  
 432:000 | DONE wsp | na 16 16 |        |             |
 433:000 | DONE wsp | na 16 16 |        |             |
 434:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 435:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 436:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 437:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 438:000 | DONE cmt | na 16 16 |        |             | ; aligned
 439:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 440:000 | DONE cmt | na 16 16 |        |             | ;               tya
 441:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 442:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 443:000 | DONE cmt | na 16 16 |        |             | ;               iny
 444:000 | DONE cmt | na 16 16 |        |             | ;               iny
 445:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 446:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 447:000 | DONE cmt | na 16 16 |        |             | ;               inx
 448:000 | DONE cmt | na 16 16 |        |             | ;               inx
 449:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 450:000 | DONE lbl | na 16 16 | 00619b |             | xt_comma                             
 451:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 452:000 | DONE ins | na 16 16 | 00619b | 98          |                 tya                  
 453:000 | DONE ins | na 16 16 | 00619c | 92 00       |                 sta.di 000200        STA (CP)
 454:000 | DONE ins | na 16 16 | 00619e | e6 00       |                 inc.d 000200         
 455:000 | DONE ins | na 16 16 | 0061a0 | e6 00       |                 inc.d 000200         
 456:000 | DONE wsp | na 16 16 |        |             |
 457:000 | DONE ins | na 16 16 | 0061a2 | b4 00       |                 ldy.dx 00            
 458:000 | DONE ins | na 16 16 | 0061a4 | e8          |                 inx                  
 459:000 | DONE ins | na 16 16 | 0061a5 | e8          |                 inx                  
 460:000 | DONE wsp | na 16 16 |        |             |
 461:000 | DONE lbl | na 16 16 | 0061a6 |             | z_comma                              
 461:001 | DONE ins | na 16 16 | 0061a6 | 60          |                 rts                  
 462:000 | DONE wsp | na 16 16 |        |             |
 463:000 | DONE wsp | na 16 16 |        |             |
 464:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 465:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 466:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 467:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 468:000 | DONE lbl | na 16 16 | 0061a7 |             | xt_colon                             
 469:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 470:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 471:000 | DONE ins | na 16 16 | 0061a7 | a5 14       |                 lda.d 000214         
 472:000 | DONE ins | na 16 16 | 0061a9 | f0 06       |                 beq 0061b1           
 473:000 | DONE wsp | na 16 16 |        |             |
 474:000 | DONE ins | na 16 16 | 0061ab | a9 c1 71    |                 lda.# 0071c1         
 475:000 | DONE ins | na 16 16 | 0061ae | 4c f7 6d    |                 jmp 006df7           
 476:000 | DONE lbl | na 16 16 | 0061b1 |             | @                                    
 477:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 478:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 479:000 | DONE ins | na 16 16 | 0061b1 | e6 14       |                 inc.d 000214         
 480:000 | DONE wsp | na 16 16 |        |             |
 481:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 482:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 483:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 484:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 485:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 486:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 487:000 | DONE ins | na 16 16 | 0061b3 | a5 02       |                 lda.d 000202         
 488:000 | DONE ins | na 16 16 | 0061b5 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 489:000 | DONE wsp | na 16 16 |        |             |
 490:000 | DONE ins | na 16 16 | 0061b6 | 20 64 64    |                 jsr 006464           
 491:000 | DONE wsp | na 16 16 |        |             |
 492:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 493:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 494:000 | DONE ins | na 16 16 | 0061b9 | a5 02       |                 lda.d 000202         
 495:000 | DONE ins | na 16 16 | 0061bb | 85 1e       |                 sta.d 00021e         
 496:000 | DONE ins | na 16 16 | 0061bd | 68          |                 pla                  
 497:000 | DONE ins | na 16 16 | 0061be | 85 02       |                 sta.d 000202         
 498:000 | DONE wsp | na 16 16 |        |             |
 499:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 500:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 501:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 502:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 503:000 | DONE ins | na 16 16 | 0061c0 | a5 00       |                 lda.d 000200         
 504:000 | DONE ins | na 16 16 | 0061c2 | 38          |                 sec                  
 505:000 | DONE ins | na 16 16 | 0061c3 | e9 03 00    |                 sbc.# 0003           
 506:000 | DONE ins | na 16 16 | 0061c6 | 85 00       |                 sta.d 000200         
 507:000 | DONE wsp | na 16 16 |        |             |
 508:000 | DONE lbl | na 16 16 | 0061c8 |             | z_colon                              
 508:001 | DONE ins | na 16 16 | 0061c8 | 60          |                 rts                  
 509:000 | DONE wsp | na 16 16 |        |             |
 510:000 | DONE wsp | na 16 16 |        |             |
 511:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 512:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 513:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 514:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 515:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 516:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 517:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 518:000 | DONE lbl | na 16 16 | 0061c9 |             | xt_semicolon                         
 519:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 520:000 | DONE ins | na 16 16 | 0061c9 | 84 06       |                 sty.d 000206         
 521:000 | DONE wsp | na 16 16 |        |             |
 522:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 523:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 524:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 525:000 | DONE ins | na 16 16 | 0061cb | a0 06 00    |                 ldy.# 0006           
 526:000 | DONE ins | na 16 16 | 0061ce | a5 00       |                 lda.d 000200         
 527:000 | DONE ins | na 16 16 | 0061d0 | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 528:000 | DONE wsp | na 16 16 |        |             |
 529:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 530:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 531:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 532:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 533:000 | DONE ins | na 16 16 | 0061d2 | a9 60 00    |                 lda.# 60             opcode for RTS
 534:000 | DONE ins | na 16 16 | 0061d5 | 92 00       |                 sta.di 000200        STA (CP)
 535:000 | DONE ins | na 16 16 | 0061d7 | e6 00       |                 inc.d 000200         MSB will be overwritten
 536:000 | DONE wsp | na 16 16 |        |             |
 537:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 538:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 539:000 | DONE ins | na 16 16 | 0061d9 | a5 1e       |                 lda.d 00021e         
 540:000 | DONE ins | na 16 16 | 0061db | 85 02       |                 sta.d 000202         
 541:000 | DONE wsp | na 16 16 |        |             |
 542:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 543:000 | DONE ins | na 16 16 | 0061dd | a4 06       |                 ldy.d 000206         
 544:000 | DONE wsp | na 16 16 |        |             |
 545:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 546:000 | DONE ins | na 16 16 | 0061df | 64 14       |                 stz.d 000214         
 547:000 | DONE wsp | na 16 16 |        |             |
 548:000 | DONE lbl | na 16 16 | 0061e1 |             | z_semicolon                          
 548:001 | DONE ins | na 16 16 | 0061e1 | 60          |                 rts                  
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE wsp | na 16 16 |        |             |
 551:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 552:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 553:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and so can be pretty
 554:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 555:000 | DONE lbl | na 16 16 | 0061e2 |             | xt_question                          
 556:000 | DONE ins | na 16 16 | 0061e2 | 20 f5 61    |                 jsr 0061f5           
 557:000 | DONE ins | na 16 16 | 0061e5 | 20 1b 61    |                 jsr 00611b           
 558:000 | DONE wsp | na 16 16 |        |             |
 559:000 | DONE lbl | na 16 16 | 0061e8 |             | z_question                           
 559:001 | DONE ins | na 16 16 | 0061e8 | 60          |                 rts                  
 560:000 | DONE wsp | na 16 16 |        |             |
 561:000 | DONE wsp | na 16 16 |        |             |
 562:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 563:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 564:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 565:000 | DONE lbl | na 16 16 | 0061e9 |             | xt_store                             
 566:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 567:000 | DONE ins | na 16 16 | 0061e9 | b5 00       |                 lda.dx 00            NOS has value
 568:000 | DONE ins | na 16 16 | 0061eb | 99 00 00    |                 sta.y 0000           
 569:000 | DONE wsp | na 16 16 |        |             |
 570:000 | DONE ins | na 16 16 | 0061ee | b4 02       |                 ldy.dx 02            
 571:000 | DONE ins | na 16 16 | 0061f0 | e8          |                 inx                  
 572:000 | DONE ins | na 16 16 | 0061f1 | e8          |                 inx                  
 573:000 | DONE ins | na 16 16 | 0061f2 | e8          |                 inx                  
 574:000 | DONE ins | na 16 16 | 0061f3 | e8          |                 inx                  
 575:000 | DONE wsp | na 16 16 |        |             |
 576:000 | DONE lbl | na 16 16 | 0061f4 |             | z_store                              
 576:001 | DONE ins | na 16 16 | 0061f4 | 60          |                 rts                  
 577:000 | DONE wsp | na 16 16 |        |             |
 578:000 | DONE wsp | na 16 16 |        |             |
 579:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 580:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 581:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 582:000 | DONE lbl | na 16 16 | 0061f5 |             | xt_fetch                             
 583:000 | DONE ins | na 16 16 | 0061f5 | b9 00 00    |                 lda.y 0000           
 584:000 | DONE ins | na 16 16 | 0061f8 | a8          |                 tay                  
 585:000 | DONE wsp | na 16 16 |        |             |
 586:000 | DONE lbl | na 16 16 | 0061f9 |             | z_fetch                              
 586:001 | DONE ins | na 16 16 | 0061f9 | 60          |                 rts                  
 587:000 | DONE wsp | na 16 16 |        |             |
 588:000 | DONE wsp | na 16 16 |        |             |
 589:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 590:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 591:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 592:000 | DONE lbl | na 16 16 | 0061fa |             | xt_brackettick                       
 593:000 | DONE ins | na 16 16 | 0061fa | 20 af 62    |                 jsr 0062af           
 594:000 | DONE ins | na 16 16 | 0061fd | 4c f0 65    |                 jmp 0065f0           JSR/RTS
 595:000 | DONE lbl | na 16 16 | 006200 |             | z_brackettick                        
 596:000 | DONE wsp | na 16 16 |        |             |
 597:000 | DONE wsp | na 16 16 |        |             |
 598:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 599:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 600:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 601:000 | DONE lbl | na 16 16 | 006200 |             | xt_leftbracket                       
 602:000 | DONE ins | na 16 16 | 006200 | 64 14       |                 stz.d 000214         
 603:000 | DONE lbl | na 16 16 | 006202 |             | z_leftbracket                        
 603:001 | DONE ins | na 16 16 | 006202 | 60          |                 rts                  
 604:000 | DONE wsp | na 16 16 |        |             |
 605:000 | DONE wsp | na 16 16 |        |             |
 606:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 607:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 608:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 609:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 610:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 611:000 | DONE lbl | na 16 16 | 006203 |             | xt_rightbracket                      
 612:000 | DONE ins | na 16 16 | 006203 | a9 01 00    |                 lda.# 0001           
 613:000 | DONE ins | na 16 16 | 006206 | 85 14       |                 sta.d 000214         
 614:000 | DONE wsp | na 16 16 |        |             |
 615:000 | DONE lbl | na 16 16 | 006208 |             | z_rightbracket                       
 615:001 | DONE ins | na 16 16 | 006208 | 60          |                 rts                  
 616:000 | DONE wsp | na 16 16 |        |             |
 617:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 618:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( -- ) X bytes / X cycles
 619:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 620:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word
 621:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 622:000 | DONE lbl | na 16 16 | 006209 |             | xt_bracketchar                       
 623:000 | DONE ins | na 16 16 | 006209 | 20 00 64    |                 jsr 006400           
 624:000 | DONE ins | na 16 16 | 00620c | 20 f0 65    |                 jsr 0065f0           
 625:000 | DONE wsp | na 16 16 |        |             |
 626:000 | DONE lbl | na 16 16 | 00620f |             | z_bracketchar                        
 626:001 | DONE ins | na 16 16 | 00620f | 60          |                 rts                  
 627:000 | DONE wsp | na 16 16 |        |             |
 628:000 | DONE wsp | na 16 16 |        |             |
 629:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 630:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 631:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 632:000 | DONE lbl | na 16 16 | 006210 |             | xt_plus                              
 633:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 634:000 | DONE ins | na 16 16 | 006210 | 98          |                 tya                  
 635:000 | DONE ins | na 16 16 | 006211 | 18          |                 clc                  
 636:000 | DONE ins | na 16 16 | 006212 | 75 00       |                 adc.dx 00            
 637:000 | DONE ins | na 16 16 | 006214 | a8          |                 tay                  
 638:000 | DONE ins | na 16 16 | 006215 | e8          |                 inx                  
 639:000 | DONE ins | na 16 16 | 006216 | e8          |                 inx                  
 640:000 | DONE wsp | na 16 16 |        |             |
 641:000 | DONE lbl | na 16 16 | 006217 |             | z_plus                               
 641:001 | DONE ins | na 16 16 | 006217 | 60          |                 rts                  
 642:000 | DONE wsp | na 16 16 |        |             |
 643:000 | DONE wsp | na 16 16 |        |             |
 644:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 645:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 646:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 647:000 | DONE lbl | na 16 16 | 006218 |             | xt_minus                             
 648:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 649:000 | DONE ins | na 16 16 | 006218 | 98          |                 tya                  
 650:000 | DONE ins | na 16 16 | 006219 | 49 ff ff    |                 eor.# 0ffff          
 651:000 | DONE wsp | na 16 16 |        |             |
 652:000 | DONE ins | na 16 16 | 00621c | 38          |                 sec                  not CLC
 653:000 | DONE ins | na 16 16 | 00621d | 75 00       |                 adc.dx 00            
 654:000 | DONE wsp | na 16 16 |        |             |
 655:000 | DONE ins | na 16 16 | 00621f | a8          |                 tay                  
 656:000 | DONE ins | na 16 16 | 006220 | e8          |                 inx                  
 657:000 | DONE ins | na 16 16 | 006221 | e8          |                 inx                  
 658:000 | DONE wsp | na 16 16 |        |             |
 659:000 | DONE lbl | na 16 16 | 006222 |             | z_minus                              
 659:001 | DONE ins | na 16 16 | 006222 | 60          |                 rts                  
 660:000 | DONE wsp | na 16 16 |        |             |
 661:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 662:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
 663:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
 664:000 | DONE lbl | na 16 16 | 006223 |             | xt_equal                             
 665:000 | DONE ins | na 16 16 | 006223 | 98          |                 tya                  
 666:000 | DONE ins | na 16 16 | 006224 | a0 00 00    |                 ldy.# 0000           default value is false
 667:000 | DONE wsp | na 16 16 |        |             |
 668:000 | DONE ins | na 16 16 | 006227 | d5 00       |                 cmp.dx 00            
 669:000 | DONE ins | na 16 16 | 006229 | d0 01       |                 bne 00622c           
 670:000 | DONE ins | na 16 16 | 00622b | 88          |                 dey                  wraps to 0FFFF (true)
 671:000 | DONE wsp | na 16 16 |        |             |
 672:000 | DONE lbl | na 16 16 | 00622c |             | equal_not                            
 673:000 | DONE ins | na 16 16 | 00622c | e8          |                 inx                  
 674:000 | DONE ins | na 16 16 | 00622d | e8          |                 inx                  
 675:000 | DONE wsp | na 16 16 |        |             |
 676:000 | DONE lbl | na 16 16 | 00622e |             | z_equal                              
 676:001 | DONE ins | na 16 16 | 00622e | 60          |                 rts                  
 677:000 | DONE wsp | na 16 16 |        |             |
 678:000 | DONE wsp | na 16 16 |        |             |
 679:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 680:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 681:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 682:000 | DONE lbl | na 16 16 | 00622f |             | xt_zero                              
 683:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 684:000 | DONE ins | na 16 16 | 00622f | ca          |                 dex                  
 685:000 | DONE ins | na 16 16 | 006230 | ca          |                 dex                  
 686:000 | DONE ins | na 16 16 | 006231 | 94 00       |                 sty.dx 00            
 687:000 | DONE ins | na 16 16 | 006233 | a0 00 00    |                 ldy.# 0000           
 688:000 | DONE wsp | na 16 16 |        |             |
 689:000 | DONE lbl | na 16 16 | 006236 |             | z_zero                               
 689:001 | DONE ins | na 16 16 | 006236 | 60          |                 rts                  
 690:000 | DONE wsp | na 16 16 |        |             |
 691:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 692:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
 693:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
 694:000 | DONE lbl | na 16 16 | 006237 |             | xt_zero-equal                        
 695:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 696:000 | DONE ins | na 16 16 | 006237 | 98          |                 tya                  force flag check
 697:000 | DONE ins | na 16 16 | 006238 | d0 05       |                 bne 00623f           
 698:000 | DONE wsp | na 16 16 |        |             |
 699:000 | DONE ins | na 16 16 | 00623a | a0 ff 0f    |                 ldy.# 0fff           
 700:000 | DONE ins | na 16 16 | 00623d | 80 03       |                 bra 006242           
 701:000 | DONE lbl | na 16 16 | 00623f |             | ze_not_zero                          
 702:000 | DONE ins | na 16 16 | 00623f | a0 00 00    |                 ldy.# 0000           
 703:000 | DONE wsp | na 16 16 |        |             |
 704:000 | DONE lbl | na 16 16 | 006242 |             | z_zero-equal                         
 704:001 | DONE ins | na 16 16 | 006242 | 60          |                 rts                  
 705:000 | DONE wsp | na 16 16 |        |             |
 706:000 | DONE wsp | na 16 16 |        |             |
 707:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 708:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
 709:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
 710:000 | DONE lbl | na 16 16 | 006243 |             | xt_zero-less                         
 711:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 712:000 | DONE ins | na 16 16 | 006243 | 98          |                 tya                  force flag check
 713:000 | DONE ins | na 16 16 | 006244 | 30 05       |                 bmi 00624b           
 714:000 | DONE wsp | na 16 16 |        |             |
 715:000 | DONE ins | na 16 16 | 006246 | a0 00 00    |                 ldy.# 0000           
 716:000 | DONE ins | na 16 16 | 006249 | 80 03       |                 bra 00624e           
 717:000 | DONE wsp | na 16 16 |        |             |
 718:000 | DONE lbl | na 16 16 | 00624b |             | zero-less-is-less                    
 719:000 | DONE ins | na 16 16 | 00624b | a0 ff ff    |                 ldy.# 0ffff          
 720:000 | DONE wsp | na 16 16 |        |             |
 721:000 | DONE lbl | na 16 16 | 00624e |             | z_zero-less                          
 721:001 | DONE ins | na 16 16 | 00624e | 60          |                 rts                  
 722:000 | DONE wsp | na 16 16 |        |             |
 723:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 724:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
 725:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
 726:000 | DONE lbl | na 16 16 | 00624f |             | xt_zero-notequal                     
 727:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 728:000 | DONE ins | na 16 16 | 00624f | 98          |                 tya                  force flag check
 729:000 | DONE ins | na 16 16 | 006250 | f0 05       |                 beq 006257           
 730:000 | DONE ins | na 16 16 | 006252 | a0 ff ff    |                 ldy.# 0ffff          
 731:000 | DONE ins | na 16 16 | 006255 | 80 03       |                 bra 00625a           
 732:000 | DONE lbl | na 16 16 | 006257 |             | zne_is_zero                          
 733:000 | DONE ins | na 16 16 | 006257 | a0 00 00    |                 ldy.# 0000           
 734:000 | DONE lbl | na 16 16 | 00625a |             | z_zero-notequal                      
 735:000 | DONE ins | na 16 16 | 00625a | 60          |                 rts                  
 736:000 | DONE wsp | na 16 16 |        |             |
 737:000 | DONE wsp | na 16 16 |        |             |
 738:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 739:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
 740:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
 741:000 | DONE lbl | na 16 16 | 00625b |             | xt_zero-more                         
 742:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 743:000 | DONE ins | na 16 16 | 00625b | a9 00 00    |                 lda.# 0000           default is false
 744:000 | DONE wsp | na 16 16 |        |             |
 745:000 | DONE ins | na 16 16 | 00625e | 88          |                 dey                  
 746:000 | DONE ins | na 16 16 | 00625f | 10 02       |                 bpl 006263           was at least 1
 747:000 | DONE wsp | na 16 16 |        |             |
 748:000 | DONE ins | na 16 16 | 006261 | 80 01       |                 bra 006264           nope, stays false
 749:000 | DONE wsp | na 16 16 |        |             |
 750:000 | DONE lbl | na 16 16 | 006263 |             | zero-more_true                       
 751:000 | DONE ins | na 16 16 | 006263 | 3a          |                 dec.a                wraps to 0ffff, true
 752:000 | DONE lbl | na 16 16 | 006264 |             | zero-more_done                       
 753:000 | DONE ins | na 16 16 | 006264 | a8          |                 tay                  
 754:000 | DONE wsp | na 16 16 |        |             |
 755:000 | DONE lbl | na 16 16 | 006265 |             | z_zero-more                          
 755:001 | DONE ins | na 16 16 | 006265 | 60          |                 rts                  
 756:000 | DONE wsp | na 16 16 |        |             |
 757:000 | DONE wsp | na 16 16 |        |             |
 758:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 759:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
 760:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
 761:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
 762:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
 763:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmp1
 764:000 | DONE lbl | na 16 16 | 006266 |             | xt_zbranch                           
 765:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 766:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
 767:000 | DONE ins | na 16 16 | 006266 | f4 6d 62    |                 phe.# 00626d         
 768:000 | DONE ins | na 16 16 | 006269 | 20 d6 6d    |                 jsr 006dd6           
 769:000 | DONE wsp | na 16 16 |        |             |
 770:000 | DONE lbl | na 16 16 | 00626c |             | z_zbranch                            
 770:001 | DONE ins | na 16 16 | 00626c | 60          |                 rts                  
 771:000 | DONE wsp | na 16 16 |        |             |
 772:000 | DONE lbl | na 16 16 | 00626d |             | zbranch_rt                           
 773:000 | DONE cmt | na 16 16 |        |             |                 ; Compiled component. Use the address on the Return Stack to
 774:000 | DONE cmt | na 16 16 |        |             |                 ; decide where we want to return to
 775:000 | DONE ins | na 16 16 | 00626d | 68          |                 pla                  
 776:000 | DONE ins | na 16 16 | 00626e | 85 16       |                 sta.d 000216         
 777:000 | DONE wsp | na 16 16 |        |             |
 778:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
 779:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
 780:000 | DONE ins | na 16 16 | 006270 | 98          |                 tya                  force flag check
 781:000 | DONE ins | na 16 16 | 006271 | f0 06       |                 beq 006279           flag is false (zero), so we branch
 782:000 | DONE wsp | na 16 16 |        |             |
 783:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
 784:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
 785:000 | DONE ins | na 16 16 | 006273 | a5 16       |                 lda.d 000216         
 786:000 | DONE ins | na 16 16 | 006275 | 1a          |                 inc.a                
 787:000 | DONE ins | na 16 16 | 006276 | 1a          |                 inc.a                
 788:000 | DONE wsp | na 16 16 |        |             |
 789:000 | DONE ins | na 16 16 | 006277 | 80 06       |                 bra 00627f           
 790:000 | DONE wsp | na 16 16 |        |             |
 791:000 | DONE lbl | na 16 16 | 006279 |             | zb_zero                              
 792:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
 793:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
 794:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
 795:000 | DONE ins | na 16 16 | 006279 | a0 01 00    |                 ldy.# 0001           
 796:000 | DONE ins | na 16 16 | 00627c | b1 16       |                 lda.diy 000216       
 797:000 | DONE wsp | na 16 16 |        |             |
 798:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
 799:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
 800:000 | DONE ins | na 16 16 | 00627e | 3a          |                 dec.a                
 801:000 | DONE wsp | na 16 16 |        |             |
 802:000 | DONE lbl | na 16 16 | 00627f |             | zb_done                              
 803:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
 804:000 | DONE ins | na 16 16 | 00627f | 48          |                 pha                  
 805:000 | DONE wsp | na 16 16 |        |             |
 806:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
 807:000 | DONE ins | na 16 16 | 006280 | b4 00       |                 ldy.dx 00            
 808:000 | DONE ins | na 16 16 | 006282 | e8          |                 inx                  
 809:000 | DONE ins | na 16 16 | 006283 | e8          |                 inx                  
 810:000 | DONE wsp | na 16 16 |        |             |
 811:000 | DONE ins | na 16 16 | 006284 | 60          |                 rts                  
 812:000 | DONE wsp | na 16 16 |        |             |
 813:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 814:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 815:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 816:000 | DONE lbl | na 16 16 | 006285 |             | xt_one                               
 817:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 818:000 | DONE ins | na 16 16 | 006285 | ca          |                 dex                  
 819:000 | DONE ins | na 16 16 | 006286 | ca          |                 dex                  
 820:000 | DONE ins | na 16 16 | 006287 | 94 00       |                 sty.dx 00            
 821:000 | DONE ins | na 16 16 | 006289 | a0 01 00    |                 ldy.# 0001           
 822:000 | DONE wsp | na 16 16 |        |             |
 823:000 | DONE lbl | na 16 16 | 00628c |             | z_one                                
 823:001 | DONE ins | na 16 16 | 00628c | 60          |                 rts                  
 824:000 | DONE wsp | na 16 16 |        |             |
 825:000 | DONE wsp | na 16 16 |        |             |
 826:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 827:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 828:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 829:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 830:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 831:000 | DONE lbl | na 16 16 | 00628d |             | xt_one-minus                         
 832:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 833:000 | DONE ins | na 16 16 | 00628d | 88          |                 dey                  
 834:000 | DONE lbl | na 16 16 | 00628e |             | z_one-minus                          
 834:001 | DONE ins | na 16 16 | 00628e | 60          |                 rts                  
 835:000 | DONE wsp | na 16 16 |        |             |
 836:000 | DONE wsp | na 16 16 |        |             |
 837:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 838:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 839:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 840:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 841:000 | DONE lbl | na 16 16 | 00628f |             | xt_one-plus                          
 842:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 843:000 | DONE ins | na 16 16 | 00628f | c8          |                 iny                  
 844:000 | DONE lbl | na 16 16 | 006290 |             | z_one-plus                           
 844:001 | DONE ins | na 16 16 | 006290 | 60          |                 rts                  
 845:000 | DONE wsp | na 16 16 |        |             |
 846:000 | DONE wsp | na 16 16 |        |             |
 847:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 848:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 849:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 850:000 | DONE lbl | na 16 16 | 006291 |             | xt_two                               
 851:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 852:000 | DONE ins | na 16 16 | 006291 | ca          |                 dex                  
 853:000 | DONE ins | na 16 16 | 006292 | ca          |                 dex                  
 854:000 | DONE ins | na 16 16 | 006293 | 94 00       |                 sty.dx 00            
 855:000 | DONE ins | na 16 16 | 006295 | a0 02 00    |                 ldy.# 0002           
 856:000 | DONE wsp | na 16 16 |        |             |
 857:000 | DONE lbl | na 16 16 | 006298 |             | z_two                                
 857:001 | DONE ins | na 16 16 | 006298 | 60          |                 rts                  
 858:000 | DONE wsp | na 16 16 |        |             |
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 861:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 862:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 863:000 | DONE lbl | na 16 16 | 006299 |             | xt_two-star                          
 864:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 865:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 866:000 | DONE ins | na 16 16 | 006299 | 98          |                 tya                  
 867:000 | DONE ins | na 16 16 | 00629a | 0a          |                 asl.a                
 868:000 | DONE ins | na 16 16 | 00629b | a8          |                 tay                  
 869:000 | DONE wsp | na 16 16 |        |             |
 870:000 | DONE lbl | na 16 16 | 00629c |             | z_two-star                           
 870:001 | DONE ins | na 16 16 | 00629c | 60          |                 rts                  
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE wsp | na 16 16 |        |             |
 873:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 874:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
 875:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
 876:000 | DONE lbl | na 16 16 | 00629d |             | xt_2drop                             
 877:000 | DONE ins | na 16 16 | 00629d | b4 02       |                 ldy.dx 02            
 878:000 | DONE ins | na 16 16 | 00629f | e8          |                 inx                  
 879:000 | DONE ins | na 16 16 | 0062a0 | e8          |                 inx                  
 880:000 | DONE ins | na 16 16 | 0062a1 | e8          |                 inx                  
 881:000 | DONE ins | na 16 16 | 0062a2 | e8          |                 inx                  
 882:000 | DONE wsp | na 16 16 |        |             |
 883:000 | DONE lbl | na 16 16 | 0062a3 |             | z_2drop                              
 883:001 | DONE ins | na 16 16 | 0062a3 | 60          |                 rts                  
 884:000 | DONE wsp | na 16 16 |        |             |
 885:000 | DONE wsp | na 16 16 |        |             |
 886:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 887:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 888:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 889:000 | DONE wsp | na 16 16 |        |             |
 890:000 | DONE lbl | na 16 16 | 0062a4 |             | xt_2dup                              
 891:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 892:000 | DONE ins | na 16 16 | 0062a4 | ca          |                 dex                  
 893:000 | DONE ins | na 16 16 | 0062a5 | ca          |                 dex                  
 894:000 | DONE ins | na 16 16 | 0062a6 | ca          |                 dex                  
 895:000 | DONE ins | na 16 16 | 0062a7 | ca          |                 dex                  
 896:000 | DONE ins | na 16 16 | 0062a8 | 94 02       |                 sty.dx 02            
 897:000 | DONE ins | na 16 16 | 0062aa | b5 04       |                 lda.dx 04            
 898:000 | DONE ins | na 16 16 | 0062ac | 95 00       |                 sta.dx 00            
 899:000 | DONE wsp | na 16 16 |        |             |
 900:000 | DONE lbl | na 16 16 | 0062ae |             | z_2dup                               
 900:001 | DONE ins | na 16 16 | 0062ae | 60          |                 rts                  
 901:000 | DONE wsp | na 16 16 |        |             |
 902:000 | DONE wsp | na 16 16 |        |             |
 903:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 904:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 905:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 906:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 907:000 | DONE lbl | na 16 16 | 0062af |             | xt_tick                              
 908:000 | DONE ins | na 16 16 | 0062af | 20 80 66    |                 jsr 006680           ( -- addr u )
 909:000 | DONE wsp | na 16 16 |        |             |
 910:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
 911:000 | DONE ins | na 16 16 | 0062b2 | 98          |                 tya                  force flag check
 912:000 | DONE ins | na 16 16 | 0062b3 | d0 06       |                 bne 0062bb           
 913:000 | DONE wsp | na 16 16 |        |             |
 914:000 | DONE ins | na 16 16 | 0062b5 | a9 4c 71    |                 lda.# 00714c         
 915:000 | DONE ins | na 16 16 | 0062b8 | 4c f7 6d    |                 jmp 006df7           
 916:000 | DONE wsp | na 16 16 |        |             |
 917:000 | DONE lbl | na 16 16 | 0062bb |             | tick_have_word                       
 918:000 | DONE ins | na 16 16 | 0062bb | 20 7d 65    |                 jsr 00657d           ( addr u -- nt)
 919:000 | DONE ins | na 16 16 | 0062be | 98          |                 tya                  force flag check
 920:000 | DONE wsp | na 16 16 |        |             |
 921:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 922:000 | DONE ins | na 16 16 | 0062bf | d0 06       |                 bne 0062c7           
 923:000 | DONE wsp | na 16 16 |        |             |
 924:000 | DONE ins | na 16 16 | 0062c1 | a9 e9 71    |                 lda.# 0071e9         
 925:000 | DONE ins | na 16 16 | 0062c4 | 4c f7 6d    |                 jmp 006df7           
 926:000 | DONE wsp | na 16 16 |        |             |
 927:000 | DONE lbl | na 16 16 | 0062c7 |             | tick_have_nt                         
 928:000 | DONE ins | na 16 16 | 0062c7 | 20 35 66    |                 jsr 006635           ( nt -- xt )
 929:000 | DONE wsp | na 16 16 |        |             |
 930:000 | DONE lbl | na 16 16 | 0062ca |             | z_tick                               
 930:001 | DONE ins | na 16 16 | 0062ca | 60          |                 rts                  
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE wsp | na 16 16 |        |             |
 933:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 934:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 935:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 936:000 | DONE lbl | na 16 16 | 0062cb |             | xt_abs                               
 937:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 938:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 939:000 | DONE ins | na 16 16 | 0062cb | 98          |                 tya                  force flag test
 940:000 | DONE ins | na 16 16 | 0062cc | 10 05       |                 bpl 0062d3           positive number is easy
 941:000 | DONE wsp | na 16 16 |        |             |
 942:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 943:000 | DONE ins | na 16 16 | 0062ce | 49 ff ff    |                 eor.# 0ffff          
 944:000 | DONE ins | na 16 16 | 0062d1 | 1a          |                 inc.a                
 945:000 | DONE ins | na 16 16 | 0062d2 | a8          |                 tay                  
 946:000 | DONE wsp | na 16 16 |        |             |
 947:000 | DONE lbl | na 16 16 | 0062d3 |             | z_abs                                
 947:001 | DONE ins | na 16 16 | 0062d3 | 60          |                 rts                  
 948:000 | DONE wsp | na 16 16 |        |             |
 949:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 950:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 951:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 952:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 953:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 954:000 | DONE lbl | na 16 16 | 0062d4 |             | xt_accept                            
 955:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 956:000 | DONE ins | na 16 16 | 0062d4 | 98          |                 tya                  force flag test
 957:000 | DONE ins | na 16 16 | 0062d5 | d0 03       |                 bne 0062da           
 958:000 | DONE wsp | na 16 16 |        |             |
 959:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 960:000 | DONE ins | na 16 16 | 0062d7 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
 961:000 | DONE ins | na 16 16 | 0062d8 | e8          |                 inx                  
 962:000 | DONE wsp | na 16 16 |        |             |
 963:000 | DONE ins | na 16 16 | 0062d9 | 60          |                 rts                  
 964:000 | DONE wsp | na 16 16 |        |             |
 965:000 | DONE lbl | na 16 16 | 0062da |             | accept_nonzero                       
 966:000 | DONE ins | na 16 16 | 0062da | b5 00       |                 lda.dx 00            address of buffer is NOS
 967:000 | DONE ins | na 16 16 | 0062dc | 85 16       |                 sta.d 000216         
 968:000 | DONE ins | na 16 16 | 0062de | e8          |                 inx                  NIP
 969:000 | DONE ins | na 16 16 | 0062df | e8          |                 inx                  
 970:000 | DONE wsp | na 16 16 |        |             |
 971:000 | DONE ins | na 16 16 | 0062e0 | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
 972:000 | DONE ins | na 16 16 | 0062e2 | a0 00 00    |                 ldy.# 0000           Use Y as counter
 973:000 | DONE ins | na 16 16 | 0062e5 | e2 20       |                 sep 20               
 973:001 | DONE ctl | na  8 16 |        |             |         .!a8
 974:000 | DONE wsp | na  8 16 |        |             |
 975:000 | DONE lbl | na  8 16 | 0062e7 |             | accept_loop                          
 976:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 977:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
 978:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 979:000 | DONE ins | na  8 16 | 0062e7 | 20 47 60    |                 jsr 006047           
 980:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 981:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
 982:000 | DONE ins | na  8 16 | 0062ea | c9 0a       |                 cmp.# AscLF          
 983:000 | DONE ins | na  8 16 | 0062ec | f0 44       |                 beq 006332           
 984:000 | DONE ins | na  8 16 | 0062ee | c9 0d       |                 cmp.# AscCR          
 985:000 | DONE ins | na  8 16 | 0062f0 | f0 40       |                 beq 006332           
 986:000 | DONE wsp | na  8 16 |        |             |
 987:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
 988:000 | DONE ins | na  8 16 | 0062f2 | c9 08       |                 cmp.# AscBS          
 989:000 | DONE ins | na  8 16 | 0062f4 | f0 44       |                 beq 00633a           
 990:000 | DONE ins | na  8 16 | 0062f6 | c9 7f       |                 cmp.# AscDEL         
 991:000 | DONE ins | na  8 16 | 0062f8 | f0 40       |                 beq 00633a           
 992:000 | DONE wsp | na  8 16 |        |             |
 993:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
 994:000 | DONE ins | na  8 16 | 0062fa | c9 03       |                 cmp.# AscCC          
 995:000 | DONE ins | na  8 16 | 0062fc | d0 03       |                 bne 006301           
 996:000 | DONE ins | na  8 16 | 0062fe | 4c 97 60    |                 jmp 006097           
 997:000 | DONE lbl | na  8 16 | 006301 |             | @                                    
 998:000 | DONE ins | na  8 16 | 006301 | c9 1b       |                 cmp.# AscESC         
 999:000 | DONE ins | na  8 16 | 006303 | d0 03       |                 bne 006308           
1000:000 | DONE ins | na  8 16 | 006305 | 4c 97 60    |                 jmp 006097           
1001:000 | DONE lbl | na  8 16 | 006308 |             | @                                    
1002:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1003:000 | DONE ins | na  8 16 | 006308 | c9 10       |                 cmp.# AscCP          
1004:000 | DONE ins | na  8 16 | 00630a | d0 0c       |                 bne 006318           
1005:000 | DONE ins | na  8 16 | 00630c | c2 20       |                 rep 20               
1005:001 | DONE ctl | na 16 16 |        |             |         .!a16
1006:000 | DONE ins | na 16 16 | 00630e | a9 02 72    |                 lda.# 007202         
1007:000 | DONE ins | na 16 16 | 006311 | 20 fd 6d    |                 jsr 006dfd           
1008:000 | DONE ins | na 16 16 | 006314 | e2 20       |                 sep 20               
1008:001 | DONE ctl | na  8 16 |        |             |         .!a8
1009:000 | DONE ins | na  8 16 | 006316 | 80 cf       |                 bra 0062e7           
1010:000 | DONE lbl | na  8 16 | 006318 |             | @                                    
1011:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1012:000 | DONE ins | na  8 16 | 006318 | c9 0e       |                 cmp.# AscCN          
1013:000 | DONE ins | na  8 16 | 00631a | d0 0c       |                 bne 006328           
1014:000 | DONE ins | na  8 16 | 00631c | c2 20       |                 rep 20               
1014:001 | DONE ctl | na 16 16 |        |             |         .!a16
1015:000 | DONE ins | na 16 16 | 00631e | a9 15 72    |                 lda.# 007215         
1016:000 | DONE ins | na 16 16 | 006321 | 20 fd 6d    |                 jsr 006dfd           
1017:000 | DONE ins | na 16 16 | 006324 | e2 20       |                 sep 20               
1017:001 | DONE ctl | na  8 16 |        |             |         .!a8
1018:000 | DONE ins | na  8 16 | 006326 | 80 bf       |                 bra 0062e7           
1019:000 | DONE wsp | na  8 16 |        |             |
1020:000 | DONE lbl | na  8 16 | 006328 |             | @                                    
1021:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
1022:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
1023:000 | DONE ins | na  8 16 | 006328 | 20 36 60    |                 jsr 006036           echo character
1024:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1025:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
1026:000 | DONE wsp | na  8 16 |        |             |
1027:000 | DONE ins | na  8 16 | 00632b | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
1028:000 | DONE ins | na  8 16 | 00632d | c8          |                 iny                  
1029:000 | DONE ins | na  8 16 | 00632e | c4 18       |                 cpy.d 000218         reached character limit?
1030:000 | DONE ins | na  8 16 | 006330 | d0 b5       |                 bne 0062e7           fall thru if buffer limit reached
1031:000 | DONE wsp | na  8 16 |        |             |
1032:000 | DONE lbl | na  8 16 | 006332 |             | accept_eol                           
1033:000 | DONE ins | na  8 16 | 006332 | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
1034:000 | DONE ins | na  8 16 | 006334 | c2 20       |                 rep 20               
1034:001 | DONE ctl | na 16 16 |        |             |         .!a16
1035:000 | DONE ins | na 16 16 | 006336 | 20 dd 67    |                 jsr 0067dd           print final space
1036:000 | DONE ins | na 16 16 | 006339 | 60          |                 rts                  this is the actual return of the routine
1037:000 | DONE wsp | na 16 16 |        |             |
1038:000 | DONE lbl | na 16 16 | 00633a |             | accept_bs                            
1039:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1040:000 | DONE ins | na  8 16 | 00633a | c0 00 00    |                 cpy.# 0000           buffer empty?
1041:000 | DONE ins | na  8 16 | 00633d | d0 06       |                 bne 006345           
1042:000 | DONE wsp | na  8 16 |        |             |
1043:000 | DONE ins | na  8 16 | 00633f | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
1044:000 | DONE ins | na  8 16 | 006341 | 20 36 60    |                 jsr 006036           
1045:000 | DONE ins | na  8 16 | 006344 | c8          |                 iny                  
1046:000 | DONE lbl | na  8 16 | 006345 |             | @                                    
1047:000 | DONE ins | na  8 16 | 006345 | 88          |                 dey                  
1048:000 | DONE ins | na  8 16 | 006346 | a9 08       |                 lda.# AscBS          move back one
1049:000 | DONE ins | na  8 16 | 006348 | 20 36 60    |                 jsr 006036           
1050:000 | DONE ins | na  8 16 | 00634b | a9 20       |                 lda.# AscSP          print a space (rubout)
1051:000 | DONE ins | na  8 16 | 00634d | 20 36 60    |                 jsr 006036           
1052:000 | DONE ins | na  8 16 | 006350 | a9 08       |                 lda.# AscBS          move back over space
1053:000 | DONE ins | na  8 16 | 006352 | 20 36 60    |                 jsr 006036           
1054:000 | DONE wsp | na  8 16 |        |             |
1055:000 | DONE ins | na  8 16 | 006355 | 80 90       |                 bra 0062e7           
1056:000 | DONE wsp | na  8 16 |        |             |
1057:000 | DONE lbl | na  8 16 | 006357 |             | z_accept                             
1057:001 | DONE ins | na  8 16 | 006357 | 60          |                 rts                  
1058:000 | DONE wsp | na  8 16 |        |             |
1059:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1060:000 | DONE cmt | na  8 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1061:000 | DONE cmt | na  8 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1062:000 | DONE cmt | na  8 16 |        |             | ; instead of BRA to make sure we have the range.
1063:000 | DONE cmt | na  8 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1064:000 | DONE lbl | na  8 16 | 006358 |             | xt_again                             
1065:000 | DONE wsp | na  8 16 |        |             |
1066:000 | DONE cmt | na  8 16 |        |             |                 ; Add the opcode for a JMP
1067:000 | DONE ins | na  8 16 | 006358 | e2 20       |                 sep 20               
1067:001 | DONE ctl | na  8 16 |        |             |         .!a8
1068:000 | DONE ins | na  8 16 | 00635a | a9 4c       |                 lda.# 4c             
1069:000 | DONE ins | na  8 16 | 00635c | 92 00       |                 sta.di 000200        STA (CP)
1070:000 | DONE ins | na  8 16 | 00635e | c2 20       |                 rep 20               
1070:001 | DONE ctl | na 16 16 |        |             |         .!a16
1071:000 | DONE ins | na 16 16 | 006360 | e6 00       |                 inc.d 000200         
1072:000 | DONE wsp | na 16 16 |        |             |
1073:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1074:000 | DONE ins | na 16 16 | 006362 | 98          |                 tya                  
1075:000 | DONE ins | na 16 16 | 006363 | 92 00       |                 sta.di 000200        
1076:000 | DONE ins | na 16 16 | 006365 | e6 00       |                 inc.d 000200         
1077:000 | DONE ins | na 16 16 | 006367 | e6 00       |                 inc.d 000200         
1078:000 | DONE wsp | na 16 16 |        |             |
1079:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1080:000 | DONE ins | na 16 16 | 006369 | b4 00       |                 ldy.dx 00            
1081:000 | DONE ins | na 16 16 | 00636b | e8          |                 inx                  
1082:000 | DONE ins | na 16 16 | 00636c | e8          |                 inx                  
1083:000 | DONE wsp | na 16 16 |        |             |
1084:000 | DONE lbl | na 16 16 | 00636d |             | z_again                              
1084:001 | DONE ins | na 16 16 | 00636d | 60          |                 rts                  
1085:000 | DONE wsp | na 16 16 |        |             |
1086:000 | DONE wsp | na 16 16 |        |             |
1087:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1088:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1089:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1090:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1091:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1092:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1093:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1094:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1095:000 | DONE lbl | na 16 16 | 00636e |             | xt_allot                             
1096:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1097:000 | DONE ins | na 16 16 | 00636e | 98          |                 tya                  force flag check
1098:000 | DONE ins | na 16 16 | 00636f | f0 21       |                 beq 006392           zero bytes, don't do anything
1099:000 | DONE ins | na 16 16 | 006371 | 30 12       |                 bmi 006385           free memory instead of reserving it
1100:000 | DONE wsp | na 16 16 |        |             |
1101:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1102:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1103:000 | DONE ins | na 16 16 | 006373 | 18          |                 clc                  
1104:000 | DONE ins | na 16 16 | 006374 | 65 00       |                 adc.d 000200         create new CP
1105:000 | DONE ins | na 16 16 | 006376 | b0 07       |                 bcs 00637f           oops, we've wrapped
1106:000 | DONE wsp | na 16 16 |        |             |
1107:000 | DONE ins | na 16 16 | 006378 | a8          |                 tay                  save copy of new CP
1108:000 | DONE wsp | na 16 16 |        |             |
1109:000 | DONE ins | na 16 16 | 006379 | 38          |                 sec                  
1110:000 | DONE ins | na 16 16 | 00637a | e9 ff 7b    |                 sbc.# 007bff         
1111:000 | DONE ins | na 16 16 | 00637d | 30 11       |                 bmi 006390           oops, fall thru if beyond max RAM
1112:000 | DONE wsp | na 16 16 |        |             |
1113:000 | DONE lbl | na 16 16 | 00637f |             | allot_error                          
1114:000 | DONE ins | na 16 16 | 00637f | a9 ad 70    |                 lda.# 0070ad         
1115:000 | DONE ins | na 16 16 | 006382 | 4c f7 6d    |                 jmp 006df7           
1116:000 | DONE wsp | na 16 16 |        |             |
1117:000 | DONE lbl | na 16 16 | 006385 |             | allot_minus                          
1118:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1119:000 | DONE ins | na 16 16 | 006385 | 38          |                 sec                  
1120:000 | DONE ins | na 16 16 | 006386 | e5 00       |                 sbc.d 000200         
1121:000 | DONE ins | na 16 16 | 006388 | 90 f5       |                 bcc 00637f           oops, we've wrapped
1122:000 | DONE wsp | na 16 16 |        |             |
1123:000 | DONE ins | na 16 16 | 00638a | a8          |                 tay                  
1124:000 | DONE wsp | na 16 16 |        |             |
1125:000 | DONE ins | na 16 16 | 00638b | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1126:000 | DONE ins | na 16 16 | 00638e | 30 ef       |                 bmi 00637f           oops, gone too far back
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1129:000 | DONE lbl | na 16 16 | 006390 |             | allot_done                           
1130:000 | DONE ins | na 16 16 | 006390 | 84 00       |                 sty.d 000200         new compiler pointer
1131:000 | DONE lbl | na 16 16 | 006392 |             | allot_real_gone                      
1132:000 | DONE ins | na 16 16 | 006392 | b4 00       |                 ldy.dx 00            DROP
1133:000 | DONE ins | na 16 16 | 006394 | e8          |                 inx                  
1134:000 | DONE ins | na 16 16 | 006395 | e8          |                 inx                  
1135:000 | DONE wsp | na 16 16 |        |             |
1136:000 | DONE lbl | na 16 16 | 006396 |             | z_allot                              
1136:001 | DONE ins | na 16 16 | 006396 | 60          |                 rts                  
1137:000 | DONE wsp | na 16 16 |        |             |
1138:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1139:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1140:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1141:000 | DONE lbl | na 16 16 | 006397 |             | xt_and                               
1142:000 | DONE ins | na 16 16 | 006397 | 98          |                 tya                  
1143:000 | DONE ins | na 16 16 | 006398 | 35 00       |                 and.dx 00            
1144:000 | DONE ins | na 16 16 | 00639a | a8          |                 tay                  
1145:000 | DONE wsp | na 16 16 |        |             |
1146:000 | DONE ins | na 16 16 | 00639b | e8          |                 inx                  NIP
1147:000 | DONE ins | na 16 16 | 00639c | e8          |                 inx                  
1148:000 | DONE wsp | na 16 16 |        |             |
1149:000 | DONE lbl | na 16 16 | 00639d |             | z_and                                
1149:001 | DONE ins | na 16 16 | 00639d | 60          |                 rts                  
1150:000 | DONE wsp | na 16 16 |        |             |
1151:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1152:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1153:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1154:000 | DONE lbl | na 16 16 | 00639e |             | xt_base                              
1155:000 | DONE ins | na 16 16 | 00639e | ca          |                 dex                  
1156:000 | DONE ins | na 16 16 | 00639f | ca          |                 dex                  
1157:000 | DONE ins | na 16 16 | 0063a0 | 94 00       |                 sty.dx 00            
1158:000 | DONE wsp | na 16 16 |        |             |
1159:000 | DONE ins | na 16 16 | 0063a2 | a0 1c 02    |                 ldy.# 00021c         
1160:000 | DONE wsp | na 16 16 |        |             |
1161:000 | DONE lbl | na 16 16 | 0063a5 |             | z_base                               
1161:001 | DONE ins | na 16 16 | 0063a5 | 60          |                 rts                  
1162:000 | DONE wsp | na 16 16 |        |             |
1163:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1164:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1165:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1166:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1167:000 | DONE lbl | na 16 16 | 0063a6 |             | xt_bell                              
1168:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1169:000 | DONE ins | na 16 16 | 0063a6 | a9 07 00    |                 lda.# AscBELL        
1170:000 | DONE ins | na 16 16 | 0063a9 | 20 36 60    |                 jsr 006036           
1171:000 | DONE wsp | na 16 16 |        |             |
1172:000 | DONE lbl | na 16 16 | 0063ac |             | z_bell                               
1172:001 | DONE ins | na 16 16 | 0063ac | 60          |                 rts                  
1173:000 | DONE wsp | na 16 16 |        |             |
1174:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1175:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1176:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1177:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1178:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1179:000 | DONE lbl | na 16 16 | 0063ad |             | xt_begin                             
1180:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1181:000 | DONE ins | na 16 16 | 0063ad | ca          |                 dex                  
1182:000 | DONE ins | na 16 16 | 0063ae | ca          |                 dex                  
1183:000 | DONE ins | na 16 16 | 0063af | 94 00       |                 sty.dx 00            
1184:000 | DONE wsp | na 16 16 |        |             |
1185:000 | DONE ins | na 16 16 | 0063b1 | a4 00       |                 ldy.d 000200         
1186:000 | DONE wsp | na 16 16 |        |             |
1187:000 | DONE lbl | na 16 16 | 0063b3 |             | z_begin                              
1187:001 | DONE ins | na 16 16 | 0063b3 | 60          |                 rts                  
1188:000 | DONE wsp | na 16 16 |        |             |
1189:000 | DONE wsp | na 16 16 |        |             |
1190:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1191:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1192:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1193:000 | DONE lbl | na 16 16 | 0063b4 |             | xt_bl                                
1194:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1195:000 | DONE ins | na 16 16 | 0063b4 | ca          |                 dex                  
1196:000 | DONE ins | na 16 16 | 0063b5 | ca          |                 dex                  
1197:000 | DONE ins | na 16 16 | 0063b6 | 94 00       |                 sty.dx 00            
1198:000 | DONE ins | na 16 16 | 0063b8 | a0 20 00    |                 ldy.# AscSP          
1199:000 | DONE wsp | na 16 16 |        |             |
1200:000 | DONE lbl | na 16 16 | 0063bb |             | z_bl                                 
1200:001 | DONE ins | na 16 16 | 0063bb | 60          |                 rts                  
1201:000 | DONE wsp | na 16 16 |        |             |
1202:000 | DONE wsp | na 16 16 |        |             |
1203:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1204:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1205:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. Uses tmp3 and tmptos
1206:000 | DONE lbl | na 16 16 | 0063bc |             | xt_branch                            
1207:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1208:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1209:000 | DONE ins | na 16 16 | 0063bc | f4 c3 63    |                 phe.# 0063c3         
1210:000 | DONE ins | na 16 16 | 0063bf | 20 d6 6d    |                 jsr 006dd6           
1211:000 | DONE wsp | na 16 16 |        |             |
1212:000 | DONE lbl | na 16 16 | 0063c2 |             | z_branch                             
1212:001 | DONE ins | na 16 16 | 0063c2 | 60          |                 rts                  
1213:000 | DONE wsp | na 16 16 |        |             |
1214:000 | DONE lbl | na 16 16 | 0063c3 |             | branch_rt                            
1215:000 | DONE ins | na 16 16 | 0063c3 | 84 06       |                 sty.d 000206         
1216:000 | DONE wsp | na 16 16 |        |             |
1217:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1218:000 | DONE ins | na 16 16 | 0063c5 | 68          |                 pla                  
1219:000 | DONE ins | na 16 16 | 0063c6 | 85 1a       |                 sta.d 00021a         
1220:000 | DONE ins | na 16 16 | 0063c8 | a0 01 00    |                 ldy.# 0001           
1221:000 | DONE ins | na 16 16 | 0063cb | b1 1a       |                 lda.diy 00021a       LDA (TMP1),Y ; get address we're pointing to
1222:000 | DONE ins | na 16 16 | 0063cd | 3a          |                 dec.a                
1223:000 | DONE ins | na 16 16 | 0063ce | 48          |                 pha                  put target address back on Return Stack
1224:000 | DONE wsp | na 16 16 |        |             |
1225:000 | DONE ins | na 16 16 | 0063cf | a4 06       |                 ldy.d 000206         
1226:000 | DONE wsp | na 16 16 |        |             |
1227:000 | DONE ins | na 16 16 | 0063d1 | 60          |                 rts                  
1228:000 | DONE wsp | na 16 16 |        |             |
1229:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1230:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1231:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1232:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
1233:000 | DONE lbl | na 16 16 | 0063d2 |             | xt_bye                               
1234:000 | DONE ins | na 16 16 | 0063d2 | 58          |                 cli                  
1235:000 | DONE ins | na 16 16 | 0063d3 | 00 00       |                 brk 00               status byte 00 required for assembler
1236:000 | DONE wsp | na 16 16 |        |             |
1237:000 | DONE lbl | na 16 16 | 0063d5 |             | z_bye                                
1237:001 | DONE ins | na 16 16 | 0063d5 | 60          |                 rts                  dummy for compiling, never reached
1238:000 | DONE wsp | na 16 16 |        |             |
1239:000 | DONE wsp | na 16 16 |        |             |
1240:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1241:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1242:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
1243:000 | DONE lbl | na 16 16 | 0063d6 |             | xt_c-comma                           
1244:000 | DONE ins | na 16 16 | 0063d6 | 98          |                 tya                  
1245:000 | DONE ins | na 16 16 | 0063d7 | e2 20       |                 sep 20               
1245:001 | DONE ctl | na  8 16 |        |             |         .!a8
1246:000 | DONE ins | na  8 16 | 0063d9 | 92 00       |                 sta.di 000200        STA (CP)
1247:000 | DONE ins | na  8 16 | 0063db | c2 20       |                 rep 20               
1247:001 | DONE ctl | na 16 16 |        |             |         .!a16
1248:000 | DONE ins | na 16 16 | 0063dd | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
1249:000 | DONE wsp | na 16 16 |        |             |
1250:000 | DONE ins | na 16 16 | 0063df | b4 00       |                 ldy.dx 00            
1251:000 | DONE ins | na 16 16 | 0063e1 | e8          |                 inx                  
1252:000 | DONE ins | na 16 16 | 0063e2 | e8          |                 inx                  
1253:000 | DONE wsp | na 16 16 |        |             |
1254:000 | DONE lbl | na 16 16 | 0063e3 |             | z_c-comma                            
1254:001 | DONE ins | na 16 16 | 0063e3 | 60          |                 rts                  
1255:000 | DONE wsp | na 16 16 |        |             |
1256:000 | DONE wsp | na 16 16 |        |             |
1257:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1258:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1259:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
1260:000 | DONE lbl | na 16 16 | 0063e4 |             | xt_c-fetch                           
1261:000 | DONE ins | na 16 16 | 0063e4 | e2 20       |                 sep 20               
1261:001 | DONE ctl | na  8 16 |        |             |         .!a8
1262:000 | DONE ins | na  8 16 | 0063e6 | b9 00 00    |                 lda.y 0000           
1263:000 | DONE ins | na  8 16 | 0063e9 | c2 20       |                 rep 20               
1263:001 | DONE ctl | na 16 16 |        |             |         .!a16
1264:000 | DONE ins | na 16 16 | 0063eb | 29 ff 00    |                 and.# 00ff           
1265:000 | DONE ins | na 16 16 | 0063ee | a8          |                 tay                  
1266:000 | DONE wsp | na 16 16 |        |             |
1267:000 | DONE lbl | na 16 16 | 0063ef |             | z_c-fetch                            
1267:001 | DONE ins | na 16 16 | 0063ef | 60          |                 rts                  
1268:000 | DONE wsp | na 16 16 |        |             |
1269:000 | DONE wsp | na 16 16 |        |             |
1270:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1271:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1272:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
1273:000 | DONE lbl | na 16 16 | 0063f0 |             | xt_c-store                           
1274:000 | DONE ins | na 16 16 | 0063f0 | b5 00       |                 lda.dx 00            
1275:000 | DONE ins | na 16 16 | 0063f2 | e2 20       |                 sep 20               
1275:001 | DONE ctl | na  8 16 |        |             |         .!a8
1276:000 | DONE ins | na  8 16 | 0063f4 | 99 00 00    |                 sta.y 0000           
1277:000 | DONE ins | na  8 16 | 0063f7 | c2 20       |                 rep 20               
1277:001 | DONE ctl | na 16 16 |        |             |         .!a16
1278:000 | DONE ins | na 16 16 | 0063f9 | b4 02       |                 ldy.dx 02            
1279:000 | DONE ins | na 16 16 | 0063fb | e8          |                 inx                  
1280:000 | DONE ins | na 16 16 | 0063fc | e8          |                 inx                  
1281:000 | DONE ins | na 16 16 | 0063fd | e8          |                 inx                  
1282:000 | DONE ins | na 16 16 | 0063fe | e8          |                 inx                  
1283:000 | DONE wsp | na 16 16 |        |             |
1284:000 | DONE lbl | na 16 16 | 0063ff |             | z_c-store                            
1284:001 | DONE ins | na 16 16 | 0063ff | 60          |                 rts                  
1285:000 | DONE wsp | na 16 16 |        |             |
1286:000 | DONE wsp | na 16 16 |        |             |
1287:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1288:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1289:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1290:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1291:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
1292:000 | DONE wsp | na 16 16 |        |             |
1293:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1294:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1295:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
1296:000 | DONE lbl | na 16 16 | 006400 |             | xt_char                              
1297:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1298:000 | DONE ins | na 16 16 | 006400 | 20 80 66    |                 jsr 006680           ( -- addr u )
1299:000 | DONE wsp | na 16 16 |        |             |
1300:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
1301:000 | DONE ins | na 16 16 | 006403 | 98          |                 tya                  force flag check
1302:000 | DONE ins | na 16 16 | 006404 | d0 06       |                 bne 00640c           
1303:000 | DONE wsp | na 16 16 |        |             |
1304:000 | DONE ins | na 16 16 | 006406 | a9 4c 71    |                 lda.# 00714c         
1305:000 | DONE ins | na 16 16 | 006409 | 4c f7 6d    |                 jmp 006df7           
1306:000 | DONE wsp | na 16 16 |        |             |
1307:000 | DONE lbl | na 16 16 | 00640c |             | char_got_char                        
1308:000 | DONE ins | na 16 16 | 00640c | b4 00       |                 ldy.dx 00            get addr from NOS
1309:000 | DONE ins | na 16 16 | 00640e | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1310:000 | DONE ins | na 16 16 | 006411 | 29 ff 00    |                 and.# 00ff           
1311:000 | DONE ins | na 16 16 | 006414 | a8          |                 tay                  
1312:000 | DONE wsp | na 16 16 |        |             |
1313:000 | DONE ins | na 16 16 | 006415 | e8          |                 inx                  
1314:000 | DONE ins | na 16 16 | 006416 | e8          |                 inx                  
1315:000 | DONE wsp | na 16 16 |        |             |
1316:000 | DONE lbl | na 16 16 | 006417 |             | z_char                               
1316:001 | DONE ins | na 16 16 | 006417 | 60          |                 rts                  
1317:000 | DONE wsp | na 16 16 |        |             |
1318:000 | DONE wsp | na 16 16 |        |             |
1319:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1320:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1321:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1322:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1323:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1324:000 | DONE lbl | na 16 16 | 006418 |             | xt_compile-only                      
1325:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1326:000 | DONE ins | na 16 16 | 006418 | a9 04 00    |                 lda.# CO             
1327:000 | DONE ins | na 16 16 | 00641b | eb          |                 xba                  flags are MSB
1328:000 | DONE ins | na 16 16 | 00641c | 12 02       |                 ora.di 000202        ORA (DP)
1329:000 | DONE ins | na 16 16 | 00641e | 92 02       |                 sta.di 000202        
1330:000 | DONE wsp | na 16 16 |        |             |
1331:000 | DONE lbl | na 16 16 | 006420 |             | z_compile-only                       
1331:001 | DONE ins | na 16 16 | 006420 | 60          |                 rts                  
1332:000 | DONE wsp | na 16 16 |        |             |
1333:000 | DONE wsp | na 16 16 |        |             |
1334:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1335:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1336:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1337:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1338:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1339:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1340:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1341:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1342:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1343:000 | DONE lbl | na 16 16 | 006421 |             | xt_compilecomma                      
1344:000 | DONE wsp | na 16 16 |        |             |
1345:000 | DONE lbl | na 16 16 | 006421 |             | compile_as_code                      
1346:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1347:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1348:000 | DONE cmt | na 16 16 |        |             |                 ; TODO currently just compiles subroutine jumps
1349:000 | DONE wsp | na 16 16 |        |             |
1350:000 | DONE lbl | na 16 16 | 006421 |             | compile_as_jump                      
1351:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
1352:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
1353:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
1354:000 | DONE cmt | na 16 16 |        |             |                 ; win!
1355:000 | DONE ins | na 16 16 | 006421 | a9 20 00    |                 lda.# 20             opcode for JSR
1356:000 | DONE ins | na 16 16 | 006424 | 92 00       |                 sta.di 000200        STA (CP)
1357:000 | DONE ins | na 16 16 | 006426 | e6 00       |                 inc.d 000200         
1358:000 | DONE wsp | na 16 16 |        |             |
1359:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1360:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1361:000 | DONE ins | na 16 16 | 006428 | 98          |                 tya                  
1362:000 | DONE ins | na 16 16 | 006429 | 92 00       |                 sta.di 000200        
1363:000 | DONE ins | na 16 16 | 00642b | e6 00       |                 inc.d 000200         
1364:000 | DONE ins | na 16 16 | 00642d | e6 00       |                 inc.d 000200         
1365:000 | DONE wsp | na 16 16 |        |             |
1366:000 | DONE ins | na 16 16 | 00642f | b4 00       |                 ldy.dx 00            
1367:000 | DONE ins | na 16 16 | 006431 | e8          |                 inx                  
1368:000 | DONE ins | na 16 16 | 006432 | e8          |                 inx                  
1369:000 | DONE wsp | na 16 16 |        |             |
1370:000 | DONE lbl | na 16 16 | 006433 |             | z_compilecomma                       
1370:001 | DONE ins | na 16 16 | 006433 | 60          |                 rts                  
1371:000 | DONE wsp | na 16 16 |        |             |
1372:000 | DONE wsp | na 16 16 |        |             |
1373:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1374:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1375:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1376:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1377:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1378:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1379:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1380:000 | DONE lbl | na 16 16 | 006434 |             | xt_constant                          
1381:000 | DONE ins | na 16 16 | 006434 | 20 64 64    |                 jsr 006464           
1382:000 | DONE wsp | na 16 16 |        |             |
1383:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1384:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1385:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1386:000 | DONE ins | na 16 16 | 006437 | a5 00       |                 lda.d 000200         
1387:000 | DONE ins | na 16 16 | 006439 | 3a          |                 dec.a                
1388:000 | DONE ins | na 16 16 | 00643a | 3a          |                 dec.a                
1389:000 | DONE ins | na 16 16 | 00643b | 85 16       |                 sta.d 000216         
1390:000 | DONE wsp | na 16 16 |        |             |
1391:000 | DONE ins | na 16 16 | 00643d | a9 63 6d    |                 lda.# 006d63         
1392:000 | DONE ins | na 16 16 | 006440 | 92 16       |                 sta.di 000216        STA (TMP1)
1393:000 | DONE wsp | na 16 16 |        |             |
1394:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1395:000 | DONE ins | na 16 16 | 006442 | 98          |                 tya                  there is no "sty.di cp"
1396:000 | DONE ins | na 16 16 | 006443 | 92 00       |                 sta.di 000200        
1397:000 | DONE ins | na 16 16 | 006445 | e6 00       |                 inc.d 000200         
1398:000 | DONE ins | na 16 16 | 006447 | e6 00       |                 inc.d 000200         
1399:000 | DONE wsp | na 16 16 |        |             |
1400:000 | DONE ins | na 16 16 | 006449 | b4 00       |                 ldy.dx 00            DROP
1401:000 | DONE ins | na 16 16 | 00644b | e8          |                 inx                  
1402:000 | DONE ins | na 16 16 | 00644c | e8          |                 inx                  
1403:000 | DONE wsp | na 16 16 |        |             |
1404:000 | DONE lbl | na 16 16 | 00644d |             | z_constant                           
1404:001 | DONE ins | na 16 16 | 00644d | 60          |                 rts                  
1405:000 | DONE wsp | na 16 16 |        |             |
1406:000 | DONE wsp | na 16 16 |        |             |
1407:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1408:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1409:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1410:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
1411:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
1412:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
1413:000 | DONE lbl | na 16 16 | 00644e |             | xt_count                             
1414:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1415:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1416:000 | DONE ins | na 16 16 | 00644e | 98          |                 tya                  
1417:000 | DONE ins | na 16 16 | 00644f | 1a          |                 inc.a                String address starts one char later
1418:000 | DONE wsp | na 16 16 |        |             |
1419:000 | DONE ins | na 16 16 | 006450 | ca          |                 dex                  
1420:000 | DONE ins | na 16 16 | 006451 | ca          |                 dex                  
1421:000 | DONE ins | na 16 16 | 006452 | 95 00       |                 sta.dx 00            NOS
1422:000 | DONE wsp | na 16 16 |        |             |
1423:000 | DONE ins | na 16 16 | 006454 | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
1424:000 | DONE ins | na 16 16 | 006457 | eb          |                 xba                  move length to LSB
1425:000 | DONE ins | na 16 16 | 006458 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
1426:000 | DONE ins | na 16 16 | 00645b | a8          |                 tay                  TOS
1427:000 | DONE wsp | na 16 16 |        |             |
1428:000 | DONE lbl | na 16 16 | 00645c |             | z_count                              
1428:001 | DONE ins | na 16 16 | 00645c | 60          |                 rts                  
1429:000 | DONE wsp | na 16 16 |        |             |
1430:000 | DONE wsp | na 16 16 |        |             |
1431:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1432:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
1433:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
1434:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1435:000 | DONE lbl | na 16 16 | 00645d |             | xt_cr                                
1436:000 | DONE ins | na 16 16 | 00645d | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
1437:000 | DONE ins | na 16 16 | 006460 | 20 36 60    |                 jsr 006036           
1438:000 | DONE wsp | na 16 16 |        |             |
1439:000 | DONE lbl | na 16 16 | 006463 |             | z_cr                                 
1439:001 | DONE ins | na 16 16 | 006463 | 60          |                 rts                  
1440:000 | DONE wsp | na 16 16 |        |             |
1441:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1442:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
1443:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
1444:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
1445:000 | DONE cmt | na 16 16 |        |             | ; address.
1446:000 | DONE lbl | na 16 16 | 006464 |             | xt_create                            
1447:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1448:000 | DONE ins | na 16 16 | 006464 | 20 80 66    |                 jsr 006680           ( -- addr u )
1449:000 | DONE ins | na 16 16 | 006467 | d0 06       |                 bne 00646f           
1450:000 | DONE wsp | na 16 16 |        |             |
1451:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1452:000 | DONE ins | na 16 16 | 006469 | a9 4c 71    |                 lda.# 00714c         
1453:000 | DONE ins | na 16 16 | 00646c | 4c f7 6d    |                 jmp 006df7           
1454:000 | DONE wsp | na 16 16 |        |             |
1455:000 | DONE lbl | na 16 16 | 00646f |             | create_got_name                      
1456:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1457:000 | DONE ins | na 16 16 | 00646f | 20 30 6e    |                 jsr 006e30           
1458:000 | DONE wsp | na 16 16 |        |             |
1459:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1460:000 | DONE cmt | na 16 16 |        |             |                 ; word
1461:000 | DONE ins | na 16 16 | 006472 | a5 00       |                 lda.d 000200         
1462:000 | DONE ins | na 16 16 | 006474 | 85 16       |                 sta.d 000216         save start of new word
1463:000 | DONE wsp | na 16 16 |        |             |
1464:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1465:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1466:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1467:000 | DONE ins | na 16 16 | 006476 | 98          |                 tya                  
1468:000 | DONE ins | na 16 16 | 006477 | 29 ff 00    |                 and.# 00ff           
1469:000 | DONE ins | na 16 16 | 00647a | 85 18       |                 sta.d 000218         save length of name string
1470:000 | DONE wsp | na 16 16 |        |             |
1471:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1472:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1473:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1474:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1475:000 | DONE ins | na 16 16 | 00647c | 18          |                 clc                  
1476:000 | DONE ins | na 16 16 | 00647d | 69 08 00    |                 adc.# 0008           
1477:000 | DONE ins | na 16 16 | 006480 | 85 1a       |                 sta.d 00021a         total bytes required for header
1478:000 | DONE wsp | na 16 16 |        |             |
1479:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1480:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1481:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1482:000 | DONE ins | na 16 16 | 006482 | 1a          |                 inc.a                
1483:000 | DONE ins | na 16 16 | 006483 | 1a          |                 inc.a                
1484:000 | DONE ins | na 16 16 | 006484 | 1a          |                 inc.a                
1485:000 | DONE wsp | na 16 16 |        |             |
1486:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1487:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1488:000 | DONE ins | na 16 16 | 006485 | 18          |                 clc                  
1489:000 | DONE ins | na 16 16 | 006486 | 65 00       |                 adc.d 000200         
1490:000 | DONE ins | na 16 16 | 006488 | 85 00       |                 sta.d 000200         
1491:000 | DONE wsp | na 16 16 |        |             |
1492:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1493:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1494:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1495:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1496:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1497:000 | DONE ins | na 16 16 | 00648a | b5 00       |                 lda.dx 00            
1498:000 | DONE ins | na 16 16 | 00648c | 48          |                 pha                  
1499:000 | DONE wsp | na 16 16 |        |             |
1500:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1501:000 | DONE ins | na 16 16 | 00648d | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1502:000 | DONE ins | na 16 16 | 006490 | a5 18       |                 lda.d 000218         get length byte
1503:000 | DONE ins | na 16 16 | 006492 | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1504:000 | DONE ins | na 16 16 | 006494 | c8          |                 iny                  
1505:000 | DONE ins | na 16 16 | 006495 | c8          |                 iny                  
1506:000 | DONE wsp | na 16 16 |        |             |
1507:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1508:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1509:000 | DONE ins | na 16 16 | 006496 | a5 02       |                 lda.d 000202         
1510:000 | DONE ins | na 16 16 | 006498 | 91 16       |                 sta.diy 000216       
1511:000 | DONE ins | na 16 16 | 00649a | c8          |                 iny                  
1512:000 | DONE ins | na 16 16 | 00649b | c8          |                 iny                  
1513:000 | DONE wsp | na 16 16 |        |             |
1514:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1515:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1516:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1517:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1518:000 | DONE ins | na 16 16 | 00649c | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1519:000 | DONE ins | na 16 16 | 00649e | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1520:000 | DONE wsp | na 16 16 |        |             |
1521:000 | DONE ins | na 16 16 | 0064a0 | 18          |                 clc                  
1522:000 | DONE ins | na 16 16 | 0064a1 | 65 1a       |                 adc.d 00021a         total header length
1523:000 | DONE ins | na 16 16 | 0064a3 | 91 16       |                 sta.diy 000216       
1524:000 | DONE ins | na 16 16 | 0064a5 | c8          |                 iny                  
1525:000 | DONE ins | na 16 16 | 0064a6 | c8          |                 iny                  
1526:000 | DONE wsp | na 16 16 |        |             |
1527:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1528:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1529:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1530:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1531:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1532:000 | DONE ins | na 16 16 | 0064a7 | 1a          |                 inc.a                
1533:000 | DONE ins | na 16 16 | 0064a8 | 1a          |                 inc.a                
1534:000 | DONE ins | na 16 16 | 0064a9 | 1a          |                 inc.a                
1535:000 | DONE ins | na 16 16 | 0064aa | 91 16       |                 sta.diy 000216       
1536:000 | DONE ins | na 16 16 | 0064ac | c8          |                 iny                  
1537:000 | DONE ins | na 16 16 | 0064ad | c8          |                 iny                  
1538:000 | DONE wsp | na 16 16 |        |             |
1539:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1540:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1541:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1542:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1543:000 | DONE ins | na 16 16 | 0064ae | 68          |                 pla                  get back string address
1544:000 | DONE ins | na 16 16 | 0064af | 38          |                 sec                  
1545:000 | DONE ins | na 16 16 | 0064b0 | e9 08 00    |                 sbc.# 0008           
1546:000 | DONE ins | na 16 16 | 0064b3 | 85 1a       |                 sta.d 00021a         
1547:000 | DONE ins | na 16 16 | 0064b5 | e2 20       |                 sep 20               
1547:001 | DONE ctl | na  8 16 |        |             |         .!a8
1548:000 | DONE lbl | na  8 16 | 0064b7 |             | @                                    
1549:000 | DONE ins | na  8 16 | 0064b7 | b1 1a       |                 lda.diy 00021a       
1550:000 | DONE ins | na  8 16 | 0064b9 | 91 16       |                 sta.diy 000216       
1551:000 | DONE ins | na  8 16 | 0064bb | c8          |                 iny                  
1552:000 | DONE ins | na  8 16 | 0064bc | c6 18       |                 dec.d 000218         
1553:000 | DONE ins | na  8 16 | 0064be | d0 f7       |                 bne 0064b7           
1554:000 | DONE wsp | na  8 16 |        |             |
1555:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1556:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1557:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1558:000 | DONE cmt | na  8 16 |        |             |                 ; good
1559:000 | DONE ins | na  8 16 | 0064c0 | a9 20       |                 lda.# 20             opcode of JSR
1560:000 | DONE ins | na  8 16 | 0064c2 | 91 16       |                 sta.diy 000216       
1561:000 | DONE ins | na  8 16 | 0064c4 | c8          |                 iny                  single increase only because we have 8-bit A
1562:000 | DONE wsp | na  8 16 |        |             |
1563:000 | DONE ins | na  8 16 | 0064c5 | a9 7e       |                 lda.# .lsb 006d7e    
1564:000 | DONE ins | na  8 16 | 0064c7 | 91 16       |                 sta.diy 000216       
1565:000 | DONE ins | na  8 16 | 0064c9 | c8          |                 iny                  
1566:000 | DONE wsp | na  8 16 |        |             |
1567:000 | DONE ins | na  8 16 | 0064ca | a9 6d       |                 lda.# .msb 006d7e    
1568:000 | DONE ins | na  8 16 | 0064cc | 91 16       |                 sta.diy 000216       
1569:000 | DONE wsp | na  8 16 |        |             |
1570:000 | DONE ins | na  8 16 | 0064ce | c2 20       |                 rep 20               
1570:001 | DONE ctl | na 16 16 |        |             |         .!a16
1571:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1572:000 | DONE ins | na 16 16 | 0064d0 | b4 02       |                 ldy.dx 02            
1573:000 | DONE ins | na 16 16 | 0064d2 | e8          |                 inx                  
1574:000 | DONE ins | na 16 16 | 0064d3 | e8          |                 inx                  
1575:000 | DONE ins | na 16 16 | 0064d4 | e8          |                 inx                  
1576:000 | DONE ins | na 16 16 | 0064d5 | e8          |                 inx                  
1577:000 | DONE wsp | na 16 16 |        |             |
1578:000 | DONE lbl | na 16 16 | 0064d6 |             | z_create                             
1578:001 | DONE ins | na 16 16 | 0064d6 | 60          |                 rts                  
1579:000 | DONE wsp | na 16 16 |        |             |
1580:000 | DONE wsp | na 16 16 |        |             |
1581:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1582:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1583:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1584:000 | DONE lbl | na 16 16 | 0064d7 |             | xt_decimal                           
1585:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1586:000 | DONE ins | na 16 16 | 0064d7 | a9 0a 00    |                 lda.# 000a           
1587:000 | DONE ins | na 16 16 | 0064da | 85 1c       |                 sta.d 00021c         
1588:000 | DONE wsp | na 16 16 |        |             |
1589:000 | DONE lbl | na 16 16 | 0064dc |             | z_decimal                            
1589:001 | DONE ins | na 16 16 | 0064dc | 60          |                 rts                  
1590:000 | DONE wsp | na 16 16 |        |             |
1591:000 | DONE wsp | na 16 16 |        |             |
1592:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1593:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1594:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1595:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1596:000 | DONE lbl | na 16 16 | 0064dd |             | xt_depth                             
1597:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1598:000 | DONE cmt | na 16 16 |        |             |                 ; We've got zero entries when X is dsp0
1599:000 | DONE ins | na 16 16 | 0064dd | 86 04       |                 stx.d 000204         
1600:000 | DONE ins | na 16 16 | 0064df | a9 f8 02    |                 lda.# 0002f8         
1601:000 | DONE ins | na 16 16 | 0064e2 | 38          |                 sec                  
1602:000 | DONE ins | na 16 16 | 0064e3 | e5 04       |                 sbc.d 000204         
1603:000 | DONE wsp | na 16 16 |        |             |
1604:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
1605:000 | DONE ins | na 16 16 | 0064e5 | 4a          |                 lsr.a                
1606:000 | DONE wsp | na 16 16 |        |             |
1607:000 | DONE ins | na 16 16 | 0064e6 | ca          |                 dex                  
1608:000 | DONE ins | na 16 16 | 0064e7 | ca          |                 dex                  
1609:000 | DONE ins | na 16 16 | 0064e8 | 94 00       |                 sty.dx 00            
1610:000 | DONE wsp | na 16 16 |        |             |
1611:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
1612:000 | DONE ins | na 16 16 | 0064ea | a8          |                 tay                  
1613:000 | DONE wsp | na 16 16 |        |             |
1614:000 | DONE lbl | na 16 16 | 0064eb |             | z_depth                              
1614:001 | DONE ins | na 16 16 | 0064eb | 60          |                 rts                  
1615:000 | DONE wsp | na 16 16 |        |             |
1616:000 | DONE wsp | na 16 16 |        |             |
1617:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1618:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
1619:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
1620:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
1621:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
1622:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
1623:000 | DONE lbl | na 16 16 | 0064ec |             | xt_does                              
1624:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
1625:000 | DONE ins | na 16 16 | 0064ec | f4 f9 64    |                 phe.# 0064f9         
1626:000 | DONE ins | na 16 16 | 0064ef | 20 d6 6d    |                 jsr 006dd6           
1627:000 | DONE wsp | na 16 16 |        |             |
1628:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
1629:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
1630:000 | DONE ins | na 16 16 | 0064f2 | f4 71 6d    |                 phe.# 006d71         
1631:000 | DONE ins | na 16 16 | 0064f5 | 20 d6 6d    |                 jsr 006dd6           
1632:000 | DONE wsp | na 16 16 |        |             |
1633:000 | DONE lbl | na 16 16 | 0064f8 |             | z_does                               
1633:001 | DONE ins | na 16 16 | 0064f8 | 60          |                 rts                  
1634:000 | DONE wsp | na 16 16 |        |             |
1635:000 | DONE lbl | na 16 16 | 0064f9 |             | does_rt                              
1636:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
1637:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
1638:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
1639:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
1640:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
1641:000 | DONE ins | na 16 16 | 0064f9 | 68          |                 pla                  
1642:000 | DONE ins | na 16 16 | 0064fa | 1a          |                 inc.a                increase by one because of RTS mechanics
1643:000 | DONE ins | na 16 16 | 0064fb | 85 16       |                 sta.d 000216         
1644:000 | DONE wsp | na 16 16 |        |             |
1645:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
1646:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
1647:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
1648:000 | DONE cmt | na 16 16 |        |             |                 ; now.
1649:000 | DONE ins | na 16 16 | 0064fd | a5 02       |                 lda.d 000202         
1650:000 | DONE wsp | na 16 16 |        |             |
1651:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
1652:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
1653:000 | DONE ins | na 16 16 | 0064ff | 18          |                 clc                  
1654:000 | DONE ins | na 16 16 | 006500 | 69 04 00    |                 adc.# 0004           
1655:000 | DONE ins | na 16 16 | 006503 | 85 18       |                 sta.d 000218         
1656:000 | DONE wsp | na 16 16 |        |             |
1657:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
1658:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
1659:000 | DONE ins | na 16 16 | 006505 | b2 18       |                 lda.di 000218        LDA (TMP2)
1660:000 | DONE ins | na 16 16 | 006507 | 1a          |                 inc.a                
1661:000 | DONE ins | na 16 16 | 006508 | 85 18       |                 sta.d 000218         Points to address to be replaced
1662:000 | DONE wsp | na 16 16 |        |             |
1663:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
1664:000 | DONE ins | na 16 16 | 00650a | a5 16       |                 lda.d 000216         
1665:000 | DONE ins | na 16 16 | 00650c | 92 18       |                 sta.di 000218        STA (TMP2)
1666:000 | DONE wsp | na 16 16 |        |             |
1667:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
1668:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
1669:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
1670:000 | DONE ins | na 16 16 | 00650e | 60          |                 rts                  
1671:000 | DONE wsp | na 16 16 |        |             |
1672:000 | DONE wsp | na 16 16 |        |             |
1673:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1674:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1675:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1676:000 | DONE wsp | na 16 16 |        |             |
1677:000 | DONE lbl | na 16 16 | 00650f |             | xt_drop                              
1678:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1679:000 | DONE ins | na 16 16 | 00650f | b4 00       |                 ldy.dx 00            
1680:000 | DONE ins | na 16 16 | 006511 | e8          |                 inx                  
1681:000 | DONE ins | na 16 16 | 006512 | e8          |                 inx                  
1682:000 | DONE wsp | na 16 16 |        |             |
1683:000 | DONE lbl | na 16 16 | 006513 |             | z_drop                               
1683:001 | DONE ins | na 16 16 | 006513 | 60          |                 rts                  
1684:000 | DONE wsp | na 16 16 |        |             |
1685:000 | DONE wsp | na 16 16 |        |             |
1686:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1687:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1688:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1689:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1690:000 | DONE lbl | na 16 16 | 006514 |             | xt_dump                              
1691:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1692:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1693:000 | DONE ins | na 16 16 | 006514 | 84 16       |                 sty.d 000216         
1694:000 | DONE wsp | na 16 16 |        |             |
1695:000 | DONE lbl | na 16 16 | 006516 |             | dump_line_loop                       
1696:000 | DONE ins | na 16 16 | 006516 | 20 5d 64    |                 jsr 00645d           
1697:000 | DONE wsp | na 16 16 |        |             |
1698:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1699:000 | DONE ins | na 16 16 | 006519 | a0 10 00    |                 ldy.# 0010           
1700:000 | DONE lbl | na 16 16 | 00651c |             | dump_byte_loop                       
1701:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1702:000 | DONE ins | na 16 16 | 00651c | a5 16       |                 lda.d 000216         
1703:000 | DONE ins | na 16 16 | 00651e | f0 11       |                 beq 006531           
1704:000 | DONE wsp | na 16 16 |        |             |
1705:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1706:000 | DONE ins | na 16 16 | 006520 | a1 00       |                 lda.dxi 00           
1707:000 | DONE ins | na 16 16 | 006522 | 20 15 6e    |                 jsr 006e15           TODO replace by EMIT
1708:000 | DONE ins | na 16 16 | 006525 | 20 dd 67    |                 jsr 0067dd           
1709:000 | DONE wsp | na 16 16 |        |             |
1710:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1711:000 | DONE ins | na 16 16 | 006528 | f6 00       |                 inc.dx 00            
1712:000 | DONE wsp | na 16 16 |        |             |
1713:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1714:000 | DONE ins | na 16 16 | 00652a | c6 16       |                 dec.d 000216         
1715:000 | DONE ins | na 16 16 | 00652c | 88          |                 dey                  
1716:000 | DONE ins | na 16 16 | 00652d | d0 ed       |                 bne 00651c           
1717:000 | DONE ins | na 16 16 | 00652f | 80 e5       |                 bra 006516           
1718:000 | DONE wsp | na 16 16 |        |             |
1719:000 | DONE lbl | na 16 16 | 006531 |             | dump_done                            
1720:000 | DONE ins | na 16 16 | 006531 | 20 5d 64    |                 jsr 00645d           
1721:000 | DONE wsp | na 16 16 |        |             |
1722:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1723:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1724:000 | DONE ins | na 16 16 | 006534 | b4 02       |                 ldy.dx 02            
1725:000 | DONE ins | na 16 16 | 006536 | e8          |                 inx                  
1726:000 | DONE ins | na 16 16 | 006537 | e8          |                 inx                  
1727:000 | DONE ins | na 16 16 | 006538 | e8          |                 inx                  
1728:000 | DONE ins | na 16 16 | 006539 | e8          |                 inx                  
1729:000 | DONE wsp | na 16 16 |        |             |
1730:000 | DONE lbl | na 16 16 | 00653a |             | z_dump                               
1730:001 | DONE ins | na 16 16 | 00653a | 60          |                 rts                  
1731:000 | DONE wsp | na 16 16 |        |             |
1732:000 | DONE wsp | na 16 16 |        |             |
1733:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1734:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1735:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1736:000 | DONE wsp | na 16 16 |        |             |
1737:000 | DONE lbl | na 16 16 | 00653b |             | xt_dup                               
1738:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1739:000 | DONE ins | na 16 16 | 00653b | ca          |                 dex                  
1740:000 | DONE ins | na 16 16 | 00653c | ca          |                 dex                  
1741:000 | DONE ins | na 16 16 | 00653d | 94 00       |                 sty.dx 00            
1742:000 | DONE wsp | na 16 16 |        |             |
1743:000 | DONE lbl | na 16 16 | 00653f |             | z_dup                                
1743:001 | DONE ins | na 16 16 | 00653f | 60          |                 rts                  
1744:000 | DONE wsp | na 16 16 |        |             |
1745:000 | DONE wsp | na 16 16 |        |             |
1746:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1747:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1748:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1749:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1750:000 | DONE lbl | na 16 16 | 006540 |             | xt_evaluate                          
1751:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1752:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1753:000 | DONE ins | na 16 16 | 006540 | a5 12       |                 lda.d 000212         >IN
1754:000 | DONE ins | na 16 16 | 006542 | 48          |                 pha                  
1755:000 | DONE ins | na 16 16 | 006543 | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
1756:000 | DONE ins | na 16 16 | 006545 | 48          |                 pha                  
1757:000 | DONE ins | na 16 16 | 006546 | a5 0c       |                 lda.d 00020c         
1758:000 | DONE ins | na 16 16 | 006548 | 48          |                 pha                  
1759:000 | DONE ins | na 16 16 | 006549 | a5 0e       |                 lda.d 00020e         
1760:000 | DONE ins | na 16 16 | 00654b | 48          |                 pha                  
1761:000 | DONE wsp | na 16 16 |        |             |
1762:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
1763:000 | DONE ins | na 16 16 | 00654c | a9 ff ff    |                 lda.# 0ffff          
1764:000 | DONE ins | na 16 16 | 00654f | 85 0a       |                 sta.d 00020a         
1765:000 | DONE wsp | na 16 16 |        |             |
1766:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
1767:000 | DONE ins | na 16 16 | 006551 | 64 12       |                 stz.d 000212         
1768:000 | DONE wsp | na 16 16 |        |             |
1769:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
1770:000 | DONE ins | na 16 16 | 006553 | 84 0e       |                 sty.d 00020e         
1771:000 | DONE ins | na 16 16 | 006555 | b5 00       |                 lda.dx 00            
1772:000 | DONE ins | na 16 16 | 006557 | 85 0c       |                 sta.d 00020c         
1773:000 | DONE wsp | na 16 16 |        |             |
1774:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1775:000 | DONE ins | na 16 16 | 006559 | b4 02       |                 ldy.dx 02            
1776:000 | DONE ins | na 16 16 | 00655b | e8          |                 inx                  
1777:000 | DONE ins | na 16 16 | 00655c | e8          |                 inx                  
1778:000 | DONE ins | na 16 16 | 00655d | e8          |                 inx                  
1779:000 | DONE ins | na 16 16 | 00655e | e8          |                 inx                  
1780:000 | DONE wsp | na 16 16 |        |             |
1781:000 | DONE ins | na 16 16 | 00655f | 20 85 6d    |                 jsr 006d85           
1782:000 | DONE wsp | na 16 16 |        |             |
1783:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1784:000 | DONE ins | na 16 16 | 006562 | 68          |                 pla                  
1785:000 | DONE ins | na 16 16 | 006563 | 85 0e       |                 sta.d 00020e         
1786:000 | DONE ins | na 16 16 | 006565 | 68          |                 pla                  
1787:000 | DONE ins | na 16 16 | 006566 | 85 0c       |                 sta.d 00020c         
1788:000 | DONE ins | na 16 16 | 006568 | 68          |                 pla                  
1789:000 | DONE ins | na 16 16 | 006569 | 85 0a       |                 sta.d 00020a         
1790:000 | DONE ins | na 16 16 | 00656b | 68          |                 pla                  
1791:000 | DONE ins | na 16 16 | 00656c | 85 12       |                 sta.d 000212         
1792:000 | DONE wsp | na 16 16 |        |             |
1793:000 | DONE lbl | na 16 16 | 00656e |             | z_evaluate                           
1793:001 | DONE ins | na 16 16 | 00656e | 60          |                 rts                  
1794:000 | DONE wsp | na 16 16 |        |             |
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1797:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1798:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1799:000 | DONE wsp | na 16 16 |        |             |
1800:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1801:000 | DONE cmt | na 16 16 |        |             | ; range
1802:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1803:000 | DONE lbl | na 16 16 | 00656f |             | execute_ip                           
1803:001 | DONE dir | na 16 16 | 00656f | (3 bytes)   |         .byte 00, 00, 00             
1803:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1804:000 | DONE wsp | na 16 16 |        |             |
1805:000 | DONE lbl | na 16 16 | 006572 |             | xt_execute                           
1806:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1807:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1808:000 | DONE cmt | na 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
1809:000 | DONE ins | na 16 16 | 006572 | 8c 6f 65    |                 sty 00656f           
1810:000 | DONE ins | na 16 16 | 006575 | b4 00       |                 ldy.dx 00            
1811:000 | DONE ins | na 16 16 | 006577 | e8          |                 inx                  
1812:000 | DONE ins | na 16 16 | 006578 | e8          |                 inx                  
1813:000 | DONE wsp | na 16 16 |        |             |
1814:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
1815:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
1816:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
1817:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
1818:000 | DONE ins | na 16 16 | 006579 | 6c 6f 65    |                 jmp.i 00656f         JMP (EXECUTE_IP)
1819:000 | DONE wsp | na 16 16 |        |             |
1820:000 | DONE lbl | na 16 16 | 00657c |             | z_execute                            
1820:001 | DONE ins | na 16 16 | 00657c | ea          |                 nop                  Never reached, see if we need the NOP
1821:000 | DONE wsp | na 16 16 |        |             |
1822:000 | DONE wsp | na 16 16 |        |             |
1823:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1824:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1825:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1826:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
1827:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
1828:000 | DONE wsp | na 16 16 |        |             |
1829:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1830:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1831:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1832:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1833:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1834:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1835:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1836:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1837:000 | DONE lbl | na 16 16 | 00657d |             | xt_find-name                         
1838:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1839:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1840:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1841:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1842:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1843:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1844:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1845:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1846:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1847:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1848:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1849:000 | DONE ins | na 16 16 | 00657d | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
1850:000 | DONE wsp | na 16 16 |        |             |
1851:000 | DONE ins | na 16 16 | 00657f | a4 02       |                 ldy.d 000202         
1852:000 | DONE ins | na 16 16 | 006581 | 84 16       |                 sty.d 000216         nt of first Dictionary word
1853:000 | DONE wsp | na 16 16 |        |             |
1854:000 | DONE ins | na 16 16 | 006583 | b4 00       |                 ldy.dx 00            
1855:000 | DONE ins | na 16 16 | 006585 | 84 18       |                 sty.d 000218         address of mystery string, was NOS
1856:000 | DONE wsp | na 16 16 |        |             |
1857:000 | DONE lbl | na 16 16 | 006587 |             | find-name_loop                       
1858:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1859:000 | DONE ins | na 16 16 | 006587 | b2 16       |                 lda.di 000216        LSB in first header word is length
1860:000 | DONE ins | na 16 16 | 006589 | 29 ff 00    |                 and.# 00ff           
1861:000 | DONE ins | na 16 16 | 00658c | c5 06       |                 cmp.d 000206         we test LSB
1862:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1863:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1864:000 | DONE cmt | na 16 16 |        |             |                 ; same
1865:000 | DONE ins | na 16 16 | 00658e | f0 0c       |                 beq 00659c           
1866:000 | DONE wsp | na 16 16 |        |             |
1867:000 | DONE lbl | na 16 16 | 006590 |             | find-name_next_entry                 
1868:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1869:000 | DONE ins | na 16 16 | 006590 | e6 16       |                 inc.d 000216         
1870:000 | DONE ins | na 16 16 | 006592 | e6 16       |                 inc.d 000216         
1871:000 | DONE ins | na 16 16 | 006594 | b2 16       |                 lda.di 000216        LDA (TMP1)
1872:000 | DONE wsp | na 16 16 |        |             |
1873:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1874:000 | DONE ins | na 16 16 | 006596 | f0 36       |                 beq 0065ce           
1875:000 | DONE wsp | na 16 16 |        |             |
1876:000 | DONE ins | na 16 16 | 006598 | 85 16       |                 sta.d 000216         new header
1877:000 | DONE ins | na 16 16 | 00659a | 80 eb       |                 bra 006587           
1878:000 | DONE wsp | na 16 16 |        |             |
1879:000 | DONE lbl | na 16 16 | 00659c |             | find-name_chars                      
1880:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1881:000 | DONE wsp | na 16 16 |        |             |
1882:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1883:000 | DONE ins | na 16 16 | 00659c | e2 20       |                 sep 20               
1883:001 | DONE ctl | na  8 16 |        |             |         .!a8
1884:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1885:000 | DONE cmt | na  8 16 |        |             |                 ; header
1886:000 | DONE ins | na  8 16 | 00659e | a0 08 00    |                 ldy.# 0008           
1887:000 | DONE ins | na  8 16 | 0065a1 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
1888:000 | DONE ins | na  8 16 | 0065a3 | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
1889:000 | DONE ins | na  8 16 | 0065a5 | f0 04       |                 beq 0065ab           
1890:000 | DONE wsp | na  8 16 |        |             |
1891:000 | DONE lbl | na  8 16 | 0065a7 |             | find-name_char_nomatcnt_8            
1892:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1893:000 | DONE ins | na  8 16 | 0065a7 | c2 20       |                 rep 20               
1893:001 | DONE ctl | na 16 16 |        |             |         .!a16
1894:000 | DONE ins | na 16 16 | 0065a9 | 80 e5       |                 bra 006590           
1895:000 | DONE wsp | na 16 16 |        |             |
1896:000 | DONE lbl | na 16 16 | 0065ab |             | find-name_all_chars                  
1897:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1898:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1899:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1900:000 | DONE ins | na  8 16 | 0065ab | a4 06       |                 ldy.d 000206         
1901:000 | DONE ins | na  8 16 | 0065ad | 88          |                 dey                  faster and shorter than CPY.# 01
1902:000 | DONE ins | na  8 16 | 0065ae | f0 18       |                 beq 0065c8           
1903:000 | DONE wsp | na  8 16 |        |             |
1904:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1905:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1906:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1907:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1908:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1909:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1910:000 | DONE wsp | na  8 16 |        |             |
1911:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1912:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1913:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1914:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1915:000 | DONE ins | na  8 16 | 0065b0 | c2 20       |                 rep 20               
1915:001 | DONE ctl | na 16 16 |        |             |         .!a16
1916:000 | DONE ins | na 16 16 | 0065b2 | a5 16       |                 lda.d 000216         address of Dictionary string
1917:000 | DONE ins | na 16 16 | 0065b4 | 18          |                 clc                  
1918:000 | DONE ins | na 16 16 | 0065b5 | 69 08 00    |                 adc.# 0008           
1919:000 | DONE ins | na 16 16 | 0065b8 | 85 1a       |                 sta.d 00021a         
1920:000 | DONE ins | na 16 16 | 0065ba | e2 20       |                 sep 20               
1920:001 | DONE ctl | na  8 16 |        |             |         .!a8
1921:000 | DONE ins | na  8 16 | 0065bc | a4 06       |                 ldy.d 000206         get length of strings as loop index
1922:000 | DONE ins | na  8 16 | 0065be | 88          |                 dey                  first index is length minus 1
1923:000 | DONE wsp | na  8 16 |        |             |
1924:000 | DONE lbl | na  8 16 | 0065bf |             | @                                    
1925:000 | DONE ins | na  8 16 | 0065bf | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
1926:000 | DONE ins | na  8 16 | 0065c1 | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
1927:000 | DONE ins | na  8 16 | 0065c3 | d0 e2       |                 bne 0065a7           
1928:000 | DONE ins | na  8 16 | 0065c5 | 88          |                 dey                  start of string (Y=0) was already tested
1929:000 | DONE ins | na  8 16 | 0065c6 | d0 f7       |                 bne 0065bf           
1930:000 | DONE wsp | na  8 16 |        |             |
1931:000 | DONE lbl | na  8 16 | 0065c8 |             | find-name_success                    
1932:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1933:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1934:000 | DONE ins | na  8 16 | 0065c8 | c2 20       |                 rep 20               
1934:001 | DONE ctl | na 16 16 |        |             |         .!a16
1935:000 | DONE ins | na 16 16 | 0065ca | a4 16       |                 ldy.d 000216         get the correct DP
1936:000 | DONE ins | na 16 16 | 0065cc | 80 03       |                 bra 0065d1           
1937:000 | DONE wsp | na 16 16 |        |             |
1938:000 | DONE wsp | na 16 16 |        |             |
1939:000 | DONE lbl | na 16 16 | 0065ce |             | find-name_failure_16                 
1940:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1941:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1942:000 | DONE ins | na 16 16 | 0065ce | a0 00 00    |                 ldy.# 0000           fall thru
1943:000 | DONE wsp | na 16 16 |        |             |
1944:000 | DONE lbl | na 16 16 | 0065d1 |             | find-name_done                       
1945:000 | DONE ins | na 16 16 | 0065d1 | e8          |                 inx                  drop old address (NIP)
1946:000 | DONE ins | na 16 16 | 0065d2 | e8          |                 inx                  
1947:000 | DONE wsp | na 16 16 |        |             |
1948:000 | DONE lbl | na 16 16 | 0065d3 |             | z_find-name                          
1948:001 | DONE ins | na 16 16 | 0065d3 | 60          |                 rts                  
1949:000 | DONE wsp | na 16 16 |        |             |
1950:000 | DONE wsp | na 16 16 |        |             |
1951:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1952:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
1953:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
1954:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
1955:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
1956:000 | DONE lbl | na 16 16 | 0065d4 |             | xt_immediate                         
1957:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1958:000 | DONE ins | na 16 16 | 0065d4 | a9 02 00    |                 lda.# IM             Immediate flag
1959:000 | DONE ins | na 16 16 | 0065d7 | eb          |                 xba                  flags are MSB
1960:000 | DONE ins | na 16 16 | 0065d8 | 12 02       |                 ora.di 000202        ORA (DP)
1961:000 | DONE ins | na 16 16 | 0065da | 92 02       |                 sta.di 000202        
1962:000 | DONE wsp | na 16 16 |        |             |
1963:000 | DONE lbl | na 16 16 | 0065dc |             | z_immediate                          
1963:001 | DONE ins | na 16 16 | 0065dc | 60          |                 rts                  
1964:000 | DONE wsp | na 16 16 |        |             |
1965:000 | DONE wsp | na 16 16 |        |             |
1966:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1967:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
1968:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
1969:000 | DONE lbl | na 16 16 | 0065dd |             | xt_invert                            
1970:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1971:000 | DONE ins | na 16 16 | 0065dd | 98          |                 tya                  
1972:000 | DONE ins | na 16 16 | 0065de | 49 ff ff    |                 eor.# 0ffff          
1973:000 | DONE ins | na 16 16 | 0065e1 | a8          |                 tay                  
1974:000 | DONE wsp | na 16 16 |        |             |
1975:000 | DONE lbl | na 16 16 | 0065e2 |             | z_invert                             
1975:001 | DONE ins | na 16 16 | 0065e2 | 60          |                 rts                  
1976:000 | DONE wsp | na 16 16 |        |             |
1977:000 | DONE wsp | na 16 16 |        |             |
1978:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1979:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
1980:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
1981:000 | DONE lbl | na 16 16 | 0065e3 |             | xt_here                              
1982:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1983:000 | DONE ins | na 16 16 | 0065e3 | ca          |                 dex                  
1984:000 | DONE ins | na 16 16 | 0065e4 | ca          |                 dex                  
1985:000 | DONE ins | na 16 16 | 0065e5 | 94 00       |                 sty.dx 00            
1986:000 | DONE wsp | na 16 16 |        |             |
1987:000 | DONE ins | na 16 16 | 0065e7 | a4 00       |                 ldy.d 000200         
1988:000 | DONE wsp | na 16 16 |        |             |
1989:000 | DONE lbl | na 16 16 | 0065e9 |             | z_here                               
1989:001 | DONE ins | na 16 16 | 0065e9 | 60          |                 rts                  
1990:000 | DONE wsp | na 16 16 |        |             |
1991:000 | DONE wsp | na 16 16 |        |             |
1992:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1993:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
1994:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
1995:000 | DONE lbl | na 16 16 | 0065ea |             | xt_hex                               
1996:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1997:000 | DONE ins | na 16 16 | 0065ea | a9 10 00    |                 lda.# 0010           
1998:000 | DONE ins | na 16 16 | 0065ed | 85 1c       |                 sta.d 00021c         
1999:000 | DONE wsp | na 16 16 |        |             |
2000:000 | DONE lbl | na 16 16 | 0065ef |             | z_hex                                
2000:001 | DONE ins | na 16 16 | 0065ef | 60          |                 rts                  
2001:000 | DONE wsp | na 16 16 |        |             |
2002:000 | DONE wsp | na 16 16 |        |             |
2003:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2004:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
2005:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
2006:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
2007:000 | DONE cmt | na 16 16 |        |             | ; for instance
2008:000 | DONE lbl | na 16 16 | 0065f0 |             | xt_literal                           
2009:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
2010:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
2011:000 | DONE ins | na 16 16 | 0065f0 | f4 02 66    |                 phe.# 006602         PEA LITERAL_RT
2012:000 | DONE ins | na 16 16 | 0065f3 | 20 d6 6d    |                 jsr 006dd6           
2013:000 | DONE wsp | na 16 16 |        |             |
2014:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
2015:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
2016:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
2017:000 | DONE ins | na 16 16 | 0065f6 | 98          |                 tya                  
2018:000 | DONE ins | na 16 16 | 0065f7 | 92 00       |                 sta.di 000200        
2019:000 | DONE ins | na 16 16 | 0065f9 | e6 00       |                 inc.d 000200         
2020:000 | DONE ins | na 16 16 | 0065fb | e6 00       |                 inc.d 000200         
2021:000 | DONE wsp | na 16 16 |        |             |
2022:000 | DONE ins | na 16 16 | 0065fd | b4 00       |                 ldy.dx 00            DROP
2023:000 | DONE ins | na 16 16 | 0065ff | e8          |                 inx                  
2024:000 | DONE ins | na 16 16 | 006600 | e8          |                 inx                  
2025:000 | DONE wsp | na 16 16 |        |             |
2026:000 | DONE lbl | na 16 16 | 006601 |             | z_literal                            
2026:001 | DONE ins | na 16 16 | 006601 | 60          |                 rts                  
2027:000 | DONE wsp | na 16 16 |        |             |
2028:000 | DONE lbl | na 16 16 | 006602 |             | literal_rt                           
2029:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
2030:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
2031:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
2032:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
2033:000 | DONE wsp | na 16 16 |        |             |
2034:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
2035:000 | DONE ins | na 16 16 | 006602 | ca          |                 dex                  
2036:000 | DONE ins | na 16 16 | 006603 | ca          |                 dex                  
2037:000 | DONE ins | na 16 16 | 006604 | 94 00       |                 sty.dx 00            
2038:000 | DONE wsp | na 16 16 |        |             |
2039:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
2040:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
2041:000 | DONE ins | na 16 16 | 006606 | 7a          |                 ply                  
2042:000 | DONE ins | na 16 16 | 006607 | c8          |                 iny                  
2043:000 | DONE ins | na 16 16 | 006608 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
2044:000 | DONE wsp | na 16 16 |        |             |
2045:000 | DONE ins | na 16 16 | 00660b | c8          |                 iny                  move return address past data and restore
2046:000 | DONE ins | na 16 16 | 00660c | 5a          |                 phy                  so we can get back home
2047:000 | DONE wsp | na 16 16 |        |             |
2048:000 | DONE ins | na 16 16 | 00660d | a8          |                 tay                  Value is now on the Data Stack ( -- n )
2049:000 | DONE wsp | na 16 16 |        |             |
2050:000 | DONE ins | na 16 16 | 00660e | 60          |                 rts                  
2051:000 | DONE wsp | na 16 16 |        |             |
2052:000 | DONE wsp | na 16 16 |        |             |
2053:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2054:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
2055:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
2056:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2057:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2058:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2059:000 | DONE lbl | na 16 16 | 00660f |             | xt_max                               
2060:000 | DONE ins | na 16 16 | 00660f | 98          |                 tya                  
2061:000 | DONE ins | na 16 16 | 006610 | d5 00       |                 cmp.dx 00            
2062:000 | DONE wsp | na 16 16 |        |             |
2063:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2064:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2065:000 | DONE ins | na 16 16 | 006612 | f0 0b       |                 beq 00661f           Faster than DROP because TOS is in Y
2066:000 | DONE wsp | na 16 16 |        |             |
2067:000 | DONE ins | na 16 16 | 006614 | f5 00       |                 sbc.dx 00            
2068:000 | DONE ins | na 16 16 | 006616 | 50 03       |                 bvc 00661b           no overflow, skip ahead
2069:000 | DONE wsp | na 16 16 |        |             |
2070:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2071:000 | DONE ins | na 16 16 | 006618 | 49 00 80    |                 eor.# 8000           compliment negative flag
2072:000 | DONE wsp | na 16 16 |        |             |
2073:000 | DONE lbl | na 16 16 | 00661b |             | max_no_ov                            
2074:000 | DONE ins | na 16 16 | 00661b | 10 02       |                 bpl 00661f           keep TOS
2075:000 | DONE lbl | na 16 16 | 00661d |             | max_drop                             
2076:000 | DONE ins | na 16 16 | 00661d | b4 00       |                 ldy.dx 00            DROP so NOS is result
2077:000 | DONE lbl | na 16 16 | 00661f |             | max_nip                              
2078:000 | DONE ins | na 16 16 | 00661f | e8          |                 inx                  
2079:000 | DONE ins | na 16 16 | 006620 | e8          |                 inx                  
2080:000 | DONE wsp | na 16 16 |        |             |
2081:000 | DONE lbl | na 16 16 | 006621 |             | z_max                                
2081:001 | DONE ins | na 16 16 | 006621 | 60          |                 rts                  
2082:000 | DONE wsp | na 16 16 |        |             |
2083:000 | DONE wsp | na 16 16 |        |             |
2084:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2085:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
2086:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
2087:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2088:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2089:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2090:000 | DONE lbl | na 16 16 | 006622 |             | xt_min                               
2091:000 | DONE ins | na 16 16 | 006622 | 98          |                 tya                  
2092:000 | DONE ins | na 16 16 | 006623 | d5 00       |                 cmp.dx 00            
2093:000 | DONE wsp | na 16 16 |        |             |
2094:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2095:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2096:000 | DONE ins | na 16 16 | 006625 | f0 0b       |                 beq 006632           Faster than DROP because TOS is in Y
2097:000 | DONE wsp | na 16 16 |        |             |
2098:000 | DONE ins | na 16 16 | 006627 | f5 00       |                 sbc.dx 00            
2099:000 | DONE ins | na 16 16 | 006629 | 50 03       |                 bvc 00662e           no overflow, skip ahead
2100:000 | DONE wsp | na 16 16 |        |             |
2101:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2102:000 | DONE ins | na 16 16 | 00662b | 49 00 80    |                 eor.# 8000           compliment negative flag
2103:000 | DONE wsp | na 16 16 |        |             |
2104:000 | DONE lbl | na 16 16 | 00662e |             | min_no_ov                            
2105:000 | DONE ins | na 16 16 | 00662e | 30 02       |                 bmi 006632           keep TOS
2106:000 | DONE lbl | na 16 16 | 006630 |             | min_drop                             
2107:000 | DONE ins | na 16 16 | 006630 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2108:000 | DONE lbl | na 16 16 | 006632 |             | min_nip                              
2109:000 | DONE ins | na 16 16 | 006632 | e8          |                 inx                  
2110:000 | DONE ins | na 16 16 | 006633 | e8          |                 inx                  
2111:000 | DONE wsp | na 16 16 |        |             |
2112:000 | DONE lbl | na 16 16 | 006634 |             | z_min                                
2112:001 | DONE ins | na 16 16 | 006634 | 60          |                 rts                  
2113:000 | DONE wsp | na 16 16 |        |             |
2114:000 | DONE wsp | na 16 16 |        |             |
2115:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2116:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
2117:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
2118:000 | DONE lbl | na 16 16 | 006635 |             | xt_name-int                          
2119:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2120:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2121:000 | DONE cmt | na 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
2122:000 | DONE ins | na 16 16 | 006635 | c8          |                 iny                  
2123:000 | DONE ins | na 16 16 | 006636 | c8          |                 iny                  
2124:000 | DONE ins | na 16 16 | 006637 | c8          |                 iny                  
2125:000 | DONE ins | na 16 16 | 006638 | c8          |                 iny                  
2126:000 | DONE ins | na 16 16 | 006639 | b9 00 00    |                 lda.y 0000           
2127:000 | DONE ins | na 16 16 | 00663c | a8          |                 tay                  
2128:000 | DONE wsp | na 16 16 |        |             |
2129:000 | DONE lbl | na 16 16 | 00663d |             | z_name-int                           
2129:001 | DONE ins | na 16 16 | 00663d | 60          |                 rts                  
2130:000 | DONE wsp | na 16 16 |        |             |
2131:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2132:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
2133:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
2134:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
2135:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
2136:000 | DONE lbl | na 16 16 | 00663e |             | xt_name-string                       
2137:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2138:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2139:000 | DONE ins | na 16 16 | 00663e | ca          |                 dex                  move NOS down one
2140:000 | DONE ins | na 16 16 | 00663f | ca          |                 dex                  
2141:000 | DONE wsp | na 16 16 |        |             |
2142:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
2143:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
2144:000 | DONE ins | na 16 16 | 006640 | 98          |                 tya                  
2145:000 | DONE ins | na 16 16 | 006641 | 18          |                 clc                  
2146:000 | DONE ins | na 16 16 | 006642 | 69 08 00    |                 adc.# 0008           
2147:000 | DONE ins | na 16 16 | 006645 | 95 00       |                 sta.dx 00            NOS
2148:000 | DONE wsp | na 16 16 |        |             |
2149:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
2150:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
2151:000 | DONE ins | na 16 16 | 006647 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2152:000 | DONE ins | na 16 16 | 00664a | 29 ff 00    |                 and.# 00ff           mask all but length byte
2153:000 | DONE ins | na 16 16 | 00664d | a8          |                 tay                  
2154:000 | DONE wsp | na 16 16 |        |             |
2155:000 | DONE lbl | na 16 16 | 00664e |             | z_name-string                        
2155:001 | DONE ins | na 16 16 | 00664e | 60          |                 rts                  
2156:000 | DONE wsp | na 16 16 |        |             |
2157:000 | DONE wsp | na 16 16 |        |             |
2158:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2159:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
2160:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
2161:000 | DONE lbl | na 16 16 | 00664f |             | xt_negate                            
2162:000 | DONE ins | na 16 16 | 00664f | 98          |                 tya                  
2163:000 | DONE ins | na 16 16 | 006650 | 49 ff ff    |                 eor.# 0ffff          
2164:000 | DONE ins | na 16 16 | 006653 | 1a          |                 inc.a                
2165:000 | DONE ins | na 16 16 | 006654 | a8          |                 tay                  
2166:000 | DONE wsp | na 16 16 |        |             |
2167:000 | DONE lbl | na 16 16 | 006655 |             | z_negate                             
2167:001 | DONE ins | na 16 16 | 006655 | 60          |                 rts                  
2168:000 | DONE wsp | na 16 16 |        |             |
2169:000 | DONE wsp | na 16 16 |        |             |
2170:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2171:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
2172:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
2173:000 | DONE lbl | na 16 16 | 006656 |             | xt_nip                               
2174:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2175:000 | DONE ins | na 16 16 | 006656 | e8          |                 inx                  
2176:000 | DONE ins | na 16 16 | 006657 | e8          |                 inx                  
2177:000 | DONE lbl | na 16 16 | 006658 |             | z_nip                                
2177:001 | DONE ins | na 16 16 | 006658 | 60          |                 rts                  
2178:000 | DONE wsp | na 16 16 |        |             |
2179:000 | DONE wsp | na 16 16 |        |             |
2180:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2181:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
2182:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
2183:000 | DONE lbl | na 16 16 | 006659 |             | xt_or                                
2184:000 | DONE ins | na 16 16 | 006659 | 98          |                 tya                  
2185:000 | DONE ins | na 16 16 | 00665a | 15 00       |                 ora.dx 00            
2186:000 | DONE ins | na 16 16 | 00665c | a8          |                 tay                  
2187:000 | DONE wsp | na 16 16 |        |             |
2188:000 | DONE ins | na 16 16 | 00665d | e8          |                 inx                  
2189:000 | DONE ins | na 16 16 | 00665e | e8          |                 inx                  
2190:000 | DONE wsp | na 16 16 |        |             |
2191:000 | DONE lbl | na 16 16 | 00665f |             | z_or                                 
2191:001 | DONE ins | na 16 16 | 00665f | 60          |                 rts                  
2192:000 | DONE wsp | na 16 16 |        |             |
2193:000 | DONE wsp | na 16 16 |        |             |
2194:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2195:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
2196:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
2197:000 | DONE lbl | na 16 16 | 006660 |             | xt_over                              
2198:000 | DONE ins | na 16 16 | 006660 | ca          |                 dex                  
2199:000 | DONE ins | na 16 16 | 006661 | ca          |                 dex                  
2200:000 | DONE ins | na 16 16 | 006662 | 94 00       |                 sty.dx 00            
2201:000 | DONE ins | na 16 16 | 006664 | b4 02       |                 ldy.dx 02            
2202:000 | DONE wsp | na 16 16 |        |             |
2203:000 | DONE lbl | na 16 16 | 006666 |             | z_over                               
2203:001 | DONE ins | na 16 16 | 006666 | 60          |                 rts                  
2204:000 | DONE wsp | na 16 16 |        |             |
2205:000 | DONE wsp | na 16 16 |        |             |
2206:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2207:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
2208:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
2209:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
2210:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
2211:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
2212:000 | DONE lbl | na 16 16 | 006667 |             | xt_pad                               
2213:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2214:000 | DONE ins | na 16 16 | 006667 | ca          |                 dex                  
2215:000 | DONE ins | na 16 16 | 006668 | ca          |                 dex                  
2216:000 | DONE ins | na 16 16 | 006669 | 94 00       |                 sty.dx 00            
2217:000 | DONE wsp | na 16 16 |        |             |
2218:000 | DONE ins | na 16 16 | 00666b | a5 00       |                 lda.d 000200         
2219:000 | DONE ins | na 16 16 | 00666d | 18          |                 clc                  
2220:000 | DONE ins | na 16 16 | 00666e | 69 7f 00    |                 adc.# 00007f         
2221:000 | DONE ins | na 16 16 | 006671 | a8          |                 tay                  
2222:000 | DONE wsp | na 16 16 |        |             |
2223:000 | DONE lbl | na 16 16 | 006672 |             | z_pad                                
2223:001 | DONE ins | na 16 16 | 006672 | 60          |                 rts                  
2224:000 | DONE wsp | na 16 16 |        |             |
2225:000 | DONE wsp | na 16 16 |        |             |
2226:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2227:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
2228:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
2229:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
2230:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
2231:000 | DONE lbl | na 16 16 | 006673 |             | xt_page                              
2232:000 | DONE ins | na 16 16 | 006673 | a9 f9 71    |                 lda.# 0071f9         
2233:000 | DONE ins | na 16 16 | 006676 | 20 fd 6d    |                 jsr 006dfd           
2234:000 | DONE wsp | na 16 16 |        |             |
2235:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
2236:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
2237:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
2238:000 | DONE ins | na 16 16 | 006679 | a9 fe 71    |                 lda.# 0071fe         
2239:000 | DONE ins | na 16 16 | 00667c | 20 fd 6d    |                 jsr 006dfd           
2240:000 | DONE wsp | na 16 16 |        |             |
2241:000 | DONE lbl | na 16 16 | 00667f |             | z_page                               
2241:001 | DONE ins | na 16 16 | 00667f | 60          |                 rts                  
2242:000 | DONE wsp | na 16 16 |        |             |
2243:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2244:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
2245:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
2246:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
2247:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
2248:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
2249:000 | DONE lbl | na 16 16 | 006680 |             | xt_parse-name                        
2250:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2251:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2252:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
2253:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
2254:000 | DONE ins | na 16 16 | 006680 | 5a          |                 phy                  save TOS for later use
2255:000 | DONE ins | na 16 16 | 006681 | a4 12       |                 ldy.d 000212         >IN
2256:000 | DONE ins | na 16 16 | 006683 | e2 20       |                 sep 20               
2256:001 | DONE ctl | na  8 16 |        |             |         .!a8
2257:000 | DONE lbl | na  8 16 | 006685 |             | parse-name_loop                      
2258:000 | DONE ins | na  8 16 | 006685 | c4 0e       |                 cpy.d 00020e         end of line?
2259:000 | DONE ins | na  8 16 | 006687 | f0 09       |                 beq 006692           
2260:000 | DONE wsp | na  8 16 |        |             |
2261:000 | DONE ins | na  8 16 | 006689 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2262:000 | DONE ins | na  8 16 | 00668b | c9 20       |                 cmp.# AscSP          
2263:000 | DONE ins | na  8 16 | 00668d | d0 17       |                 bne 0066a6           
2264:000 | DONE ins | na  8 16 | 00668f | c8          |                 iny                  
2265:000 | DONE ins | na  8 16 | 006690 | 80 f3       |                 bra 006685           
2266:000 | DONE wsp | na  8 16 |        |             |
2267:000 | DONE lbl | na  8 16 | 006692 |             | parse-name_empty_line                
2268:000 | DONE ins | na  8 16 | 006692 | c2 20       |                 rep 20               
2268:001 | DONE ctl | na 16 16 |        |             |         .!a16
2269:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
2270:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
2271:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
2272:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
2273:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
2274:000 | DONE ins | na 16 16 | 006694 | ca          |                 dex                  
2275:000 | DONE ins | na 16 16 | 006695 | ca          |                 dex                  
2276:000 | DONE ins | na 16 16 | 006696 | ca          |                 dex                  
2277:000 | DONE ins | na 16 16 | 006697 | ca          |                 dex                  
2278:000 | DONE wsp | na 16 16 |        |             |
2279:000 | DONE ins | na 16 16 | 006698 | 7a          |                 ply                  restore old TOS as 3OS
2280:000 | DONE ins | na 16 16 | 006699 | 94 02       |                 sty.dx 02            
2281:000 | DONE wsp | na 16 16 |        |             |
2282:000 | DONE ins | na 16 16 | 00669b | a5 0c       |                 lda.d 00020c         
2283:000 | DONE ins | na 16 16 | 00669d | 18          |                 clc                  
2284:000 | DONE ins | na 16 16 | 00669e | 65 0e       |                 adc.d 00020e         
2285:000 | DONE ins | na 16 16 | 0066a0 | 95 00       |                 sta.dx 00            Address as NOS
2286:000 | DONE wsp | na 16 16 |        |             |
2287:000 | DONE ins | na 16 16 | 0066a2 | a0 00 00    |                 ldy.# 0000           TOS
2288:000 | DONE wsp | na 16 16 |        |             |
2289:000 | DONE ins | na 16 16 | 0066a5 | 60          |                 rts                  don't have to go through PARSE
2290:000 | DONE wsp | na 16 16 |        |             |
2291:000 | DONE lbl | na 16 16 | 0066a6 |             | parse-name_found                     
2292:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2293:000 | DONE ins | na 16 16 | 0066a6 | c2 20       |                 rep 20               
2293:001 | DONE ctl | na 16 16 |        |             |         .!a16
2294:000 | DONE ins | na 16 16 | 0066a8 | 84 12       |                 sty.d 000212         new >IN
2295:000 | DONE wsp | na 16 16 |        |             |
2296:000 | DONE ins | na 16 16 | 0066aa | 7a          |                 ply                  recover TOS
2297:000 | DONE ins | na 16 16 | 0066ab | ca          |                 dex                  
2298:000 | DONE ins | na 16 16 | 0066ac | ca          |                 dex                  
2299:000 | DONE ins | na 16 16 | 0066ad | 94 00       |                 sty.dx 00            
2300:000 | DONE wsp | na 16 16 |        |             |
2301:000 | DONE ins | na 16 16 | 0066af | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
2302:000 | DONE wsp | na 16 16 |        |             |
2303:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
2304:000 | DONE wsp | na 16 16 |        |             |
2305:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2306:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
2307:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
2308:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
2309:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
2310:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
2311:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
2312:000 | DONE cmt | na 16 16 |        |             | ;
2313:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
2314:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
2315:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
2316:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
2317:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
2318:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
2319:000 | DONE cmt | na 16 16 |        |             | ;
2320:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
2321:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
2322:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
2323:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
2324:000 | DONE lbl | na 16 16 | 0066b2 |             | xt_parse                             
2325:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2326:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2327:000 | DONE ins | na 16 16 | 0066b2 | 84 16       |                 sty.d 000216         save delimiter, char is LSB
2328:000 | DONE wsp | na 16 16 |        |             |
2329:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
2330:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
2331:000 | DONE cmt | na 16 16 |        |             |                 ; return
2332:000 | DONE ins | na 16 16 | 0066b4 | a5 12       |                 lda.d 000212         
2333:000 | DONE ins | na 16 16 | 0066b6 | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
2334:000 | DONE ins | na 16 16 | 0066b8 | 18          |                 clc                  
2335:000 | DONE ins | na 16 16 | 0066b9 | 65 0c       |                 adc.d 00020c         
2336:000 | DONE wsp | na 16 16 |        |             |
2337:000 | DONE ins | na 16 16 | 0066bb | ca          |                 dex                  save addr as NOS
2338:000 | DONE ins | na 16 16 | 0066bc | ca          |                 dex                  
2339:000 | DONE ins | na 16 16 | 0066bd | 95 00       |                 sta.dx 00            
2340:000 | DONE wsp | na 16 16 |        |             |
2341:000 | DONE ins | na 16 16 | 0066bf | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
2342:000 | DONE wsp | na 16 16 |        |             |
2343:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
2344:000 | DONE ins | na 16 16 | 0066c1 | a4 12       |                 ldy.d 000212         
2345:000 | DONE ins | na 16 16 | 0066c3 | e2 20       |                 sep 20               
2345:001 | DONE ctl | na  8 16 |        |             |         .!a8
2346:000 | DONE wsp | na  8 16 |        |             |
2347:000 | DONE lbl | na  8 16 | 0066c5 |             | parse_loop                           
2348:000 | DONE ins | na  8 16 | 0066c5 | c4 0e       |                 cpy.d 00020e         check for EOL first
2349:000 | DONE ins | na  8 16 | 0066c7 | f0 0d       |                 beq 0066d6           
2350:000 | DONE wsp | na  8 16 |        |             |
2351:000 | DONE ins | na  8 16 | 0066c9 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2352:000 | DONE ins | na  8 16 | 0066cb | c5 16       |                 cmp.d 000216         found delimiter?
2353:000 | DONE ins | na  8 16 | 0066cd | f0 03       |                 beq 0066d2           
2354:000 | DONE ins | na  8 16 | 0066cf | c8          |                 iny                  
2355:000 | DONE ins | na  8 16 | 0066d0 | 80 f3       |                 bra 0066c5           
2356:000 | DONE wsp | na  8 16 |        |             |
2357:000 | DONE lbl | na  8 16 | 0066d2 |             | parse_found_delimiter                
2358:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
2359:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
2360:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
2361:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
2362:000 | DONE ins | na  8 16 | 0066d2 | c2 20       |                 rep 20               
2362:001 | DONE ctl | na 16 16 |        |             |         .!a16
2363:000 | DONE ins | na 16 16 | 0066d4 | e6 18       |                 inc.d 000218         
2364:000 | DONE wsp | na 16 16 |        |             |
2365:000 | DONE lbl | na 16 16 | 0066d6 |             | parse_reached_eol                    
2366:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
2367:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2368:000 | DONE ins | na 16 16 | 0066d6 | c2 20       |                 rep 20               
2368:001 | DONE ctl | na 16 16 |        |             |         .!a16
2369:000 | DONE ins | na 16 16 | 0066d8 | 98          |                 tya                  
2370:000 | DONE ins | na 16 16 | 0066d9 | 38          |                 sec                  
2371:000 | DONE ins | na 16 16 | 0066da | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
2372:000 | DONE ins | na 16 16 | 0066dc | 48          |                 pha                  save so we can manipulate Y
2373:000 | DONE wsp | na 16 16 |        |             |
2374:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
2375:000 | DONE ins | na 16 16 | 0066dd | 98          |                 tya                  
2376:000 | DONE ins | na 16 16 | 0066de | 18          |                 clc                  
2377:000 | DONE ins | na 16 16 | 0066df | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
2378:000 | DONE ins | na 16 16 | 0066e1 | 85 12       |                 sta.d 000212         
2379:000 | DONE wsp | na 16 16 |        |             |
2380:000 | DONE ins | na 16 16 | 0066e3 | 7a          |                 ply                  length of string in TOS
2381:000 | DONE wsp | na 16 16 |        |             |
2382:000 | DONE lbl | na 16 16 | 0066e4 |             | z_parse-name                         
2383:000 | DONE lbl | na 16 16 | 0066e4 |             | z_parse                              
2383:001 | DONE ins | na 16 16 | 0066e4 | 60          |                 rts                  
2384:000 | DONE wsp | na 16 16 |        |             |
2385:000 | DONE wsp | na 16 16 |        |             |
2386:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2387:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
2388:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
2389:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
2390:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
2391:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
2392:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
2393:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
2394:000 | DONE lbl | na 16 16 | 0066e5 |             | xt_postpone                          
2395:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
2396:000 | DONE ins | na 16 16 | 0066e5 | 20 80 66    |                 jsr 006680           ( addr n )
2397:000 | DONE wsp | na 16 16 |        |             |
2398:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
2399:000 | DONE ins | na 16 16 | 0066e8 | d0 06       |                 bne 0066f0           
2400:000 | DONE ins | na 16 16 | 0066ea | a9 4c 71    |                 lda.# 00714c         
2401:000 | DONE ins | na 16 16 | 0066ed | 4c f7 6d    |                 jmp 006df7           
2402:000 | DONE wsp | na 16 16 |        |             |
2403:000 | DONE lbl | na 16 16 | 0066f0 |             | pp_got_word                          
2404:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
2405:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
2406:000 | DONE ins | na 16 16 | 0066f0 | 20 30 6e    |                 jsr 006e30           
2407:000 | DONE wsp | na 16 16 |        |             |
2408:000 | DONE ins | na 16 16 | 0066f3 | 20 7d 65    |                 jsr 00657d           ( nt | 0 )
2409:000 | DONE wsp | na 16 16 |        |             |
2410:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
2411:000 | DONE ins | na 16 16 | 0066f6 | d0 03       |                 bne 0066fb           
2412:000 | DONE ins | na 16 16 | 0066f8 | a9 e9 71    |                 lda.# 0071e9         
2413:000 | DONE wsp | na 16 16 |        |             |
2414:000 | DONE lbl | na 16 16 | 0066fb |             | pp_got_nt                            
2415:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
2416:000 | DONE ins | na 16 16 | 0066fb | 84 16       |                 sty.d 000216         
2417:000 | DONE wsp | na 16 16 |        |             |
2418:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
2419:000 | DONE ins | na 16 16 | 0066fd | 20 35 66    |                 jsr 006635           ( xt )
2420:000 | DONE wsp | na 16 16 |        |             |
2421:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
2422:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
2423:000 | DONE ins | na 16 16 | 006700 | b2 16       |                 lda.di 000216        LDA (TMP1) - get status byte of word
2424:000 | DONE ins | na 16 16 | 006702 | eb          |                 xba                  flags are MSB
2425:000 | DONE ins | na 16 16 | 006703 | 29 02 00    |                 and.# IM             mask everything but Immediate bit
2426:000 | DONE ins | na 16 16 | 006706 | f0 03       |                 beq 00670b           
2427:000 | DONE wsp | na 16 16 |        |             |
2428:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
2429:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
2430:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
2431:000 | DONE ins | na 16 16 | 006708 | 4c 21 64    |                 jmp 006421           JSR/RTS
2432:000 | DONE wsp | na 16 16 |        |             |
2433:000 | DONE lbl | na 16 16 | 00670b |             | pp_not_immediate                     
2434:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deffered
2435:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
2436:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
2437:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
2438:000 | DONE ins | na 16 16 | 00670b | f4 02 66    |                 phe.# 006602         PEA LITERAL_RT
2439:000 | DONE ins | na 16 16 | 00670e | 20 d6 6d    |                 jsr 006dd6           
2440:000 | DONE wsp | na 16 16 |        |             |
2441:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
2442:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
2443:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
2444:000 | DONE ins | na 16 16 | 006711 | 20 9b 61    |                 jsr 00619b           
2445:000 | DONE wsp | na 16 16 |        |             |
2446:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
2447:000 | DONE ins | na 16 16 | 006714 | f4 21 64    |                 phe.# 006421         
2448:000 | DONE ins | na 16 16 | 006717 | 4c d6 6d    |                 jmp 006dd6           JSR/RTS
2449:000 | DONE wsp | na 16 16 |        |             |
2450:000 | DONE lbl | na 16 16 | 00671a |             | z_postpone                           ; never reached
2451:000 | DONE wsp | na 16 16 |        |             |
2452:000 | DONE wsp | na 16 16 |        |             |
2453:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2454:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
2455:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
2456:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
2457:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
2458:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
2459:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
2460:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
2461:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
2462:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
2463:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
2464:000 | DONE lbl | na 16 16 | 00671a |             | xt_refill                            
2465:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2466:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2467:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
2468:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
2469:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
2470:000 | DONE ins | na 16 16 | 00671a | a5 0c       |                 lda.d 00020c         
2471:000 | DONE ins | na 16 16 | 00671c | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
2472:000 | DONE ins | na 16 16 | 00671f | 85 0c       |                 sta.d 00020c         
2473:000 | DONE wsp | na 16 16 |        |             |
2474:000 | DONE ins | na 16 16 | 006721 | a5 0e       |                 lda.d 00020e         current length is now previous length
2475:000 | DONE ins | na 16 16 | 006723 | 85 10       |                 sta.d 000210         
2476:000 | DONE wsp | na 16 16 |        |             |
2477:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
2478:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
2479:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
2480:000 | DONE ins | na 16 16 | 006725 | a5 0a       |                 lda.d 00020a         
2481:000 | DONE ins | na 16 16 | 006727 | d0 14       |                 bne 00673d           
2482:000 | DONE wsp | na 16 16 |        |             |
2483:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
2484:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
2485:000 | DONE ins | na 16 16 | 006729 | ca          |                 dex                  push Data Stack down twice
2486:000 | DONE ins | na 16 16 | 00672a | ca          |                 dex                  
2487:000 | DONE ins | na 16 16 | 00672b | 94 00       |                 sty.dx 00            
2488:000 | DONE wsp | na 16 16 |        |             |
2489:000 | DONE ins | na 16 16 | 00672d | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
2490:000 | DONE ins | na 16 16 | 00672f | ca          |                 dex                  
2491:000 | DONE ins | na 16 16 | 006730 | ca          |                 dex                  
2492:000 | DONE ins | na 16 16 | 006731 | 95 00       |                 sta.dx 00            
2493:000 | DONE wsp | na 16 16 |        |             |
2494:000 | DONE ins | na 16 16 | 006733 | a0 ff 00    |                 ldy.# 0000ff         
2495:000 | DONE wsp | na 16 16 |        |             |
2496:000 | DONE ins | na 16 16 | 006736 | 20 d4 62    |                 jsr 0062d4           ( addr n1 -- n2)
2497:000 | DONE wsp | na 16 16 |        |             |
2498:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
2499:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
2500:000 | DONE ins | na 16 16 | 006739 | a0 ff ff    |                 ldy.# 0ffff          
2501:000 | DONE wsp | na 16 16 |        |             |
2502:000 | DONE ins | na 16 16 | 00673c | 60          |                 rts                  
2503:000 | DONE wsp | na 16 16 |        |             |
2504:000 | DONE lbl | na 16 16 | 00673d |             | refill_src_not_kbd                   
2505:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
2506:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
2507:000 | DONE ins | na 16 16 | 00673d | 1a          |                 inc.a                
2508:000 | DONE ins | na 16 16 | 00673e | d0 06       |                 bne 006746           
2509:000 | DONE wsp | na 16 16 |        |             |
2510:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
2511:000 | DONE ins | na 16 16 | 006740 | ca          |                 dex                  
2512:000 | DONE ins | na 16 16 | 006741 | ca          |                 dex                  
2513:000 | DONE ins | na 16 16 | 006742 | 94 00       |                 sty.dx 00            
2514:000 | DONE ins | na 16 16 | 006744 | a8          |                 tay                  
2515:000 | DONE wsp | na 16 16 |        |             |
2516:000 | DONE ins | na 16 16 | 006745 | 60          |                 rts                  
2517:000 | DONE wsp | na 16 16 |        |             |
2518:000 | DONE lbl | na 16 16 | 006746 |             | refill_source_is_not_string          
2519:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
2520:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
2521:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
2522:000 | DONE ins | na 16 16 | 006746 | a9 a1 71    |                 lda.# 0071a1         
2523:000 | DONE ins | na 16 16 | 006749 | 4c f7 6d    |                 jmp 006df7           
2524:000 | DONE wsp | na 16 16 |        |             |
2525:000 | DONE lbl | na 16 16 | 00674c |             | z_refill                             
2525:001 | DONE ins | na 16 16 | 00674c | 60          |                 rts                  dummy for compiling
2526:000 | DONE wsp | na 16 16 |        |             |
2527:000 | DONE wsp | na 16 16 |        |             |
2528:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2529:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
2530:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
2531:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
2532:000 | DONE lbl | na 16 16 | 00674d |             | xt_rot                               
2533:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2534:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2535:000 | DONE ins | na 16 16 | 00674d | b5 00       |                 lda.dx 00            save b
2536:000 | DONE ins | na 16 16 | 00674f | 94 00       |                 sty.dx 00            move c to NOS
2537:000 | DONE ins | na 16 16 | 006751 | b4 02       |                 ldy.dx 02            move a to TOS
2538:000 | DONE ins | na 16 16 | 006753 | 95 02       |                 sta.dx 02            save b as 3OS
2539:000 | DONE wsp | na 16 16 |        |             |
2540:000 | DONE lbl | na 16 16 | 006755 |             | z_rot                                
2540:001 | DONE ins | na 16 16 | 006755 | 60          |                 rts                  
2541:000 | DONE wsp | na 16 16 |        |             |
2542:000 | DONE wsp | na 16 16 |        |             |
2543:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2544:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
2545:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
2546:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
2547:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
2548:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
2549:000 | DONE cmt | na 16 16 |        |             | ; want it in code
2550:000 | DONE lbl | na 16 16 | 006756 |             | xt_squote                            
2551:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
2552:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
2553:000 | DONE ins | na 16 16 | 006756 | ca          |                 dex                  
2554:000 | DONE ins | na 16 16 | 006757 | ca          |                 dex                  
2555:000 | DONE ins | na 16 16 | 006758 | 94 00       |                 sty.dx 00            
2556:000 | DONE wsp | na 16 16 |        |             |
2557:000 | DONE ins | na 16 16 | 00675a | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
2558:000 | DONE ins | na 16 16 | 00675d | 20 b2 66    |                 jsr 0066b2           Returns ( addr u ) of string
2559:000 | DONE wsp | na 16 16 |        |             |
2560:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
2561:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
2562:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
2563:000 | DONE ins | na 16 16 | 006760 | a5 14       |                 lda.d 000214         
2564:000 | DONE ins | na 16 16 | 006762 | f0 03       |                 beq 006767           if we're interpreting, we're done
2565:000 | DONE wsp | na 16 16 |        |             |
2566:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
2567:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
2568:000 | DONE ins | na 16 16 | 006764 | 4c 68 67    |                 jmp 006768           JSR/RTS
2569:000 | DONE wsp | na 16 16 |        |             |
2570:000 | DONE lbl | na 16 16 | 006767 |             | z_squote                             
2570:001 | DONE ins | na 16 16 | 006767 | 60          |                 rts                  
2571:000 | DONE wsp | na 16 16 |        |             |
2572:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2573:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
2574:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
2575:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
2576:000 | DONE cmt | na 16 16 |        |             | ; tmp2
2577:000 | DONE lbl | na 16 16 | 006768 |             | xt_sliteral                          
2578:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2579:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
2580:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
2581:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
2582:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
2583:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
2584:000 | DONE ins | na 16 16 | 006768 | b5 00       |                 lda.dx 00            Address of string is NOS
2585:000 | DONE ins | na 16 16 | 00676a | 85 16       |                 sta.d 000216         
2586:000 | DONE ins | na 16 16 | 00676c | 84 18       |                 sty.d 000218         keep copy of string length
2587:000 | DONE wsp | na 16 16 |        |             |
2588:000 | DONE ins | na 16 16 | 00676e | e2 20       |                 sep 20               
2588:001 | DONE ctl | na  8 16 |        |             |         .!a8
2589:000 | DONE ins | na  8 16 | 006770 | a9 4c       |                 lda.# 04c            opcode for JMP
2590:000 | DONE ins | na  8 16 | 006772 | 92 00       |                 sta.di 000200        STA (CP)
2591:000 | DONE ins | na  8 16 | 006774 | c2 20       |                 rep 20               
2591:001 | DONE ctl | na 16 16 |        |             |         .!a16
2592:000 | DONE ins | na 16 16 | 006776 | e6 00       |                 inc.d 000200         
2593:000 | DONE wsp | na 16 16 |        |             |
2594:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
2595:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
2596:000 | DONE ins | na 16 16 | 006778 | a5 18       |                 lda.d 000218         string length
2597:000 | DONE ins | na 16 16 | 00677a | 1a          |                 inc.a                
2598:000 | DONE ins | na 16 16 | 00677b | 1a          |                 inc.a                
2599:000 | DONE wsp | na 16 16 |        |             |
2600:000 | DONE ins | na 16 16 | 00677c | 18          |                 clc                  
2601:000 | DONE ins | na 16 16 | 00677d | 65 00       |                 adc.d 000200         current address
2602:000 | DONE ins | na 16 16 | 00677f | 92 00       |                 sta.di 000200        store jump target
2603:000 | DONE wsp | na 16 16 |        |             |
2604:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
2605:000 | DONE ins | na 16 16 | 006781 | e6 00       |                 inc.d 000200         
2606:000 | DONE ins | na 16 16 | 006783 | e6 00       |                 inc.d 000200         
2607:000 | DONE wsp | na 16 16 |        |             |
2608:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
2609:000 | DONE ins | na 16 16 | 006785 | 88          |                 dey                  last offset is one less than length
2610:000 | DONE ins | na 16 16 | 006786 | e2 20       |                 sep 20               
2610:001 | DONE ctl | na  8 16 |        |             |         .!a8
2611:000 | DONE lbl | na  8 16 | 006788 |             | sl_loop                              
2612:000 | DONE ins | na  8 16 | 006788 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2613:000 | DONE ins | na  8 16 | 00678a | 91 00       |                 sta.diy 000200       STA (CP),Y
2614:000 | DONE ins | na  8 16 | 00678c | 88          |                 dey                  
2615:000 | DONE ins | na  8 16 | 00678d | 10 f9       |                 bpl 006788           
2616:000 | DONE wsp | na  8 16 |        |             |
2617:000 | DONE ins | na  8 16 | 00678f | c2 20       |                 rep 20               
2617:001 | DONE ctl | na 16 16 |        |             |         .!a16
2618:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
2619:000 | DONE ins | na 16 16 | 006791 | a5 00       |                 lda.d 000200         
2620:000 | DONE ins | na 16 16 | 006793 | 85 16       |                 sta.d 000216         overwrites original address
2621:000 | DONE wsp | na 16 16 |        |             |
2622:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
2623:000 | DONE ins | na 16 16 | 006795 | 18          |                 clc                  
2624:000 | DONE ins | na 16 16 | 006796 | 65 18       |                 adc.d 000218         length of string
2625:000 | DONE ins | na 16 16 | 006798 | 85 00       |                 sta.d 000200         
2626:000 | DONE wsp | na 16 16 |        |             |
2627:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
2628:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
2629:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
2630:000 | DONE cmt | na 16 16 |        |             |                 ;
2631:000 | DONE cmt | na 16 16 |        |             |                 ; xt -->    jmp a
2632:000 | DONE cmt | na 16 16 |        |             |                 ;           <string data bytes>
2633:000 | DONE cmt | na 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
2634:000 | DONE cmt | na 16 16 |        |             |                 ;           <string address>
2635:000 | DONE cmt | na 16 16 |        |             |                 ;           <string length>
2636:000 | DONE cmt | na 16 16 |        |             |                 ; rts -->
2637:000 | DONE cmt | na 16 16 |        |             |                 ;
2638:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
2639:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
2640:000 | DONE ins | na 16 16 | 00679a | f4 b3 67    |                 phe.# 0067b3         
2641:000 | DONE ins | na 16 16 | 00679d | 20 d6 6d    |                 jsr 006dd6           
2642:000 | DONE wsp | na 16 16 |        |             |
2643:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
2644:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
2645:000 | DONE ins | na 16 16 | 0067a0 | a5 16       |                 lda.d 000216         new address of string
2646:000 | DONE ins | na 16 16 | 0067a2 | 48          |                 pha                  
2647:000 | DONE ins | na 16 16 | 0067a3 | 20 d1 6d    |                 jsr 006dd1           
2648:000 | DONE wsp | na 16 16 |        |             |
2649:000 | DONE ins | na 16 16 | 0067a6 | a5 18       |                 lda.d 000218         
2650:000 | DONE ins | na 16 16 | 0067a8 | 48          |                 pha                  
2651:000 | DONE ins | na 16 16 | 0067a9 | 20 d1 6d    |                 jsr 006dd1           
2652:000 | DONE wsp | na 16 16 |        |             |
2653:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
2654:000 | DONE ins | na 16 16 | 0067ac | b4 02       |                 ldy.dx 02            2DROP
2655:000 | DONE ins | na 16 16 | 0067ae | e8          |                 inx                  
2656:000 | DONE ins | na 16 16 | 0067af | e8          |                 inx                  
2657:000 | DONE ins | na 16 16 | 0067b0 | e8          |                 inx                  
2658:000 | DONE ins | na 16 16 | 0067b1 | e8          |                 inx                  
2659:000 | DONE wsp | na 16 16 |        |             |
2660:000 | DONE lbl | na 16 16 | 0067b2 |             | z_sliteral                           
2660:001 | DONE ins | na 16 16 | 0067b2 | 60          |                 rts                  
2661:000 | DONE wsp | na 16 16 |        |             |
2662:000 | DONE lbl | na 16 16 | 0067b3 |             | sliteral_rt                          
2663:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
2664:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
2665:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
2666:000 | DONE wsp | na 16 16 |        |             |
2667:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
2668:000 | DONE ins | na 16 16 | 0067b3 | ca          |                 dex                  
2669:000 | DONE ins | na 16 16 | 0067b4 | ca          |                 dex                  
2670:000 | DONE ins | na 16 16 | 0067b5 | ca          |                 dex                  
2671:000 | DONE ins | na 16 16 | 0067b6 | ca          |                 dex                  
2672:000 | DONE ins | na 16 16 | 0067b7 | 94 02       |                 sty.dx 02            
2673:000 | DONE wsp | na 16 16 |        |             |
2674:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
2675:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
2676:000 | DONE ins | na 16 16 | 0067b9 | 7a          |                 ply                  
2677:000 | DONE ins | na 16 16 | 0067ba | c8          |                 iny                  
2678:000 | DONE wsp | na 16 16 |        |             |
2679:000 | DONE ins | na 16 16 | 0067bb | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2680:000 | DONE ins | na 16 16 | 0067be | 95 00       |                 sta.dx 00            save string address as NOS
2681:000 | DONE ins | na 16 16 | 0067c0 | c8          |                 iny                  
2682:000 | DONE ins | na 16 16 | 0067c1 | c8          |                 iny                  
2683:000 | DONE ins | na 16 16 | 0067c2 | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
2684:000 | DONE wsp | na 16 16 |        |             |
2685:000 | DONE ins | na 16 16 | 0067c5 | c8          |                 iny                  ... first, though, repair return jump
2686:000 | DONE ins | na 16 16 | 0067c6 | 5a          |                 phy                  
2687:000 | DONE wsp | na 16 16 |        |             |
2688:000 | DONE ins | na 16 16 | 0067c7 | a8          |                 tay                  TOS is now length of string
2689:000 | DONE wsp | na 16 16 |        |             |
2690:000 | DONE ins | na 16 16 | 0067c8 | 60          |                 rts                  
2691:000 | DONE wsp | na 16 16 |        |             |
2692:000 | DONE wsp | na 16 16 |        |             |
2693:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2694:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
2695:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
2696:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
2697:000 | DONE wsp | na 16 16 |        |             |
2698:000 | DONE lbl | na 16 16 | 0067c9 |             | xt_source                            
2699:000 | DONE ins | na 16 16 | 0067c9 | ca          |                 dex                  make room on Data Stack
2700:000 | DONE ins | na 16 16 | 0067ca | ca          |                 dex                  
2701:000 | DONE ins | na 16 16 | 0067cb | ca          |                 dex                  
2702:000 | DONE ins | na 16 16 | 0067cc | ca          |                 dex                  
2703:000 | DONE ins | na 16 16 | 0067cd | 94 02       |                 sty.dx 02            
2704:000 | DONE wsp | na 16 16 |        |             |
2705:000 | DONE ins | na 16 16 | 0067cf | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
2706:000 | DONE ins | na 16 16 | 0067d1 | 95 00       |                 sta.dx 00            
2707:000 | DONE wsp | na 16 16 |        |             |
2708:000 | DONE ins | na 16 16 | 0067d3 | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
2709:000 | DONE wsp | na 16 16 |        |             |
2710:000 | DONE lbl | na 16 16 | 0067d5 |             | z_source                             
2710:001 | DONE ins | na 16 16 | 0067d5 | 60          |                 rts                  
2711:000 | DONE wsp | na 16 16 |        |             |
2712:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2713:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
2714:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
2715:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
2716:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
2717:000 | DONE lbl | na 16 16 | 0067d6 |             | xt_source-id                         
2718:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2719:000 | DONE ins | na 16 16 | 0067d6 | ca          |                 dex                  
2720:000 | DONE ins | na 16 16 | 0067d7 | ca          |                 dex                  
2721:000 | DONE ins | na 16 16 | 0067d8 | 94 00       |                 sty.dx 00            
2722:000 | DONE ins | na 16 16 | 0067da | a4 0a       |                 ldy.d 00020a         
2723:000 | DONE wsp | na 16 16 |        |             |
2724:000 | DONE lbl | na 16 16 | 0067dc |             | z_source-id                          
2724:001 | DONE ins | na 16 16 | 0067dc | 60          |                 rts                  
2725:000 | DONE wsp | na 16 16 |        |             |
2726:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2727:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
2728:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
2729:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
2730:000 | DONE lbl | na 16 16 | 0067dd |             | xt_space                             
2731:000 | DONE ins | na 16 16 | 0067dd | a9 20 00    |                 lda.# AscSP          
2732:000 | DONE ins | na 16 16 | 0067e0 | 20 36 60    |                 jsr 006036           
2733:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2734:000 | DONE wsp | na 16 16 |        |             |
2735:000 | DONE lbl | na 16 16 | 0067e3 |             | z_space                              
2735:001 | DONE ins | na 16 16 | 0067e3 | 60          |                 rts                  
2736:000 | DONE wsp | na 16 16 |        |             |
2737:000 | DONE wsp | na 16 16 |        |             |
2738:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2739:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
2740:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
2741:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
2742:000 | DONE lbl | na 16 16 | 0067e4 |             | xt_spaces                            
2743:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2744:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2745:000 | DONE lbl | na 16 16 | 0067e4 |             | @                                    
2746:000 | DONE ins | na 16 16 | 0067e4 | 88          |                 dey                  this also handles case u=0
2747:000 | DONE ins | na 16 16 | 0067e5 | 30 05       |                 bmi 0067ec           
2748:000 | DONE wsp | na 16 16 |        |             |
2749:000 | DONE ins | na 16 16 | 0067e7 | 20 dd 67    |                 jsr 0067dd           
2750:000 | DONE ins | na 16 16 | 0067ea | 80 f8       |                 bra 0067e4           
2751:000 | DONE wsp | na 16 16 |        |             |
2752:000 | DONE lbl | na 16 16 | 0067ec |             | spaces_done                          
2753:000 | DONE ins | na 16 16 | 0067ec | b4 00       |                 ldy.dx 00            DROP
2754:000 | DONE ins | na 16 16 | 0067ee | e8          |                 inx                  
2755:000 | DONE ins | na 16 16 | 0067ef | e8          |                 inx                  
2756:000 | DONE wsp | na 16 16 |        |             |
2757:000 | DONE lbl | na 16 16 | 0067f0 |             | z_spaces                             
2757:001 | DONE ins | na 16 16 | 0067f0 | 60          |                 rts                  
2758:000 | DONE wsp | na 16 16 |        |             |
2759:000 | DONE wsp | na 16 16 |        |             |
2760:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2761:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
2762:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
2763:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
2764:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
2765:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
2766:000 | DONE lbl | na 16 16 | 0067f1 |             | xt_state                             
2767:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2768:000 | DONE ins | na 16 16 | 0067f1 | ca          |                 dex                  
2769:000 | DONE ins | na 16 16 | 0067f2 | ca          |                 dex                  
2770:000 | DONE ins | na 16 16 | 0067f3 | 94 00       |                 sty.dx 00            
2771:000 | DONE ins | na 16 16 | 0067f5 | a0 14 02    |                 ldy.# 000214         
2772:000 | DONE wsp | na 16 16 |        |             |
2773:000 | DONE lbl | na 16 16 | 0067f8 |             | z_state                              
2773:001 | DONE ins | na 16 16 | 0067f8 | 60          |                 rts                  
2774:000 | DONE wsp | na 16 16 |        |             |
2775:000 | DONE wsp | na 16 16 |        |             |
2776:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2777:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
2778:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
2779:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
2780:000 | DONE lbl | na 16 16 | 0067f9 |             | xt_swap                              
2781:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2782:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2783:000 | DONE ins | na 16 16 | 0067f9 | b5 00       |                 lda.dx 00            
2784:000 | DONE ins | na 16 16 | 0067fb | 94 00       |                 sty.dx 00            
2785:000 | DONE ins | na 16 16 | 0067fd | a8          |                 tay                  
2786:000 | DONE wsp | na 16 16 |        |             |
2787:000 | DONE lbl | na 16 16 | 0067fe |             | z_swap                               
2787:001 | DONE ins | na 16 16 | 0067fe | 60          |                 rts                  
2788:000 | DONE wsp | na 16 16 |        |             |
2789:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2790:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
2791:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
2792:000 | DONE lbl | na 16 16 | 0067ff |             | xt_true                              
2793:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2794:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2795:000 | DONE ins | na 16 16 | 0067ff | ca          |                 dex                  
2796:000 | DONE ins | na 16 16 | 006800 | ca          |                 dex                  
2797:000 | DONE ins | na 16 16 | 006801 | 94 00       |                 sty.dx 00            
2798:000 | DONE ins | na 16 16 | 006803 | a0 ff ff    |                 ldy.# 0ffff          
2799:000 | DONE wsp | na 16 16 |        |             |
2800:000 | DONE lbl | na 16 16 | 006806 |             | z_true                               
2800:001 | DONE ins | na 16 16 | 006806 | 60          |                 rts                  
2801:000 | DONE wsp | na 16 16 |        |             |
2802:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2803:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
2804:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
2805:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
2806:000 | DONE lbl | na 16 16 | 006807 |             | xt_tuck                              
2807:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2808:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2809:000 | DONE ins | na 16 16 | 006807 | ca          |                 dex                  
2810:000 | DONE ins | na 16 16 | 006808 | ca          |                 dex                  
2811:000 | DONE ins | na 16 16 | 006809 | b5 02       |                 lda.dx 2             
2812:000 | DONE ins | na 16 16 | 00680b | 95 00       |                 sta.dx 0             
2813:000 | DONE ins | na 16 16 | 00680d | 94 02       |                 sty.dx 2             
2814:000 | DONE wsp | na 16 16 |        |             |
2815:000 | DONE lbl | na 16 16 | 00680f |             | z_tuck                               
2815:001 | DONE ins | na 16 16 | 00680f | 60          |                 rts                  
2816:000 | DONE wsp | na 16 16 |        |             |
2817:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2818:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
2819:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
2820:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
2821:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
2822:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
2823:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
2824:000 | DONE cmt | na 16 16 |        |             | ; running.
2825:000 | DONE lbl | na 16 16 | 006810 |             | xt_type                              
2826:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2827:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2828:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
2829:000 | DONE ins | na 16 16 | 006810 | 98          |                 tya                  force flag check of TOS
2830:000 | DONE ins | na 16 16 | 006811 | f0 17       |                 beq 00682a           
2831:000 | DONE wsp | na 16 16 |        |             |
2832:000 | DONE ins | na 16 16 | 006813 | b5 00       |                 lda.dx 00            get address from NOS
2833:000 | DONE ins | na 16 16 | 006815 | 85 16       |                 sta.d 000216         
2834:000 | DONE ins | na 16 16 | 006817 | 84 18       |                 sty.d 000218         number of chars is TOS
2835:000 | DONE ins | na 16 16 | 006819 | a0 00 00    |                 ldy.# 0000           
2836:000 | DONE ins | na 16 16 | 00681c | e2 20       |                 sep 20               
2836:001 | DONE ctl | na  8 16 |        |             |         .!a8
2837:000 | DONE lbl | na  8 16 | 00681e |             | type_loop                            
2838:000 | DONE ins | na  8 16 | 00681e | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2839:000 | DONE ins | na  8 16 | 006820 | 20 36 60    |                 jsr 006036           
2840:000 | DONE ins | na  8 16 | 006823 | c8          |                 iny                  
2841:000 | DONE ins | na  8 16 | 006824 | c4 18       |                 cpy.d 000218         
2842:000 | DONE ins | na  8 16 | 006826 | d0 f6       |                 bne 00681e           
2843:000 | DONE wsp | na  8 16 |        |             |
2844:000 | DONE ins | na  8 16 | 006828 | c2 20       |                 rep 20               
2844:001 | DONE ctl | na 16 16 |        |             |         .!a16
2845:000 | DONE lbl | na 16 16 | 00682a |             | type_done                            
2846:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
2847:000 | DONE ins | na 16 16 | 00682a | b4 02       |                 ldy.dx 02            
2848:000 | DONE ins | na 16 16 | 00682c | e8          |                 inx                  
2849:000 | DONE ins | na 16 16 | 00682d | e8          |                 inx                  
2850:000 | DONE ins | na 16 16 | 00682e | e8          |                 inx                  
2851:000 | DONE ins | na 16 16 | 00682f | e8          |                 inx                  
2852:000 | DONE wsp | na 16 16 |        |             |
2853:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
2854:000 | DONE wsp | na 16 16 |        |             |
2855:000 | DONE lbl | na 16 16 | 006830 |             | z_type                               
2855:001 | DONE ins | na 16 16 | 006830 | 60          |                 rts                  
2856:000 | DONE wsp | na 16 16 |        |             |
2857:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2858:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
2859:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
2860:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
2861:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
2862:000 | DONE lbl | na 16 16 | 006831 |             | xt_unused                            
2863:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2864:000 | DONE ins | na 16 16 | 006831 | a9 ff 7b    |                 lda.# 007bff         
2865:000 | DONE ins | na 16 16 | 006834 | 38          |                 sec                  
2866:000 | DONE ins | na 16 16 | 006835 | e5 00       |                 sbc.d 000200         current compile pointer
2867:000 | DONE wsp | na 16 16 |        |             |
2868:000 | DONE ins | na 16 16 | 006837 | ca          |                 dex                  
2869:000 | DONE ins | na 16 16 | 006838 | ca          |                 dex                  
2870:000 | DONE ins | na 16 16 | 006839 | 94 00       |                 sty.dx 00            
2871:000 | DONE wsp | na 16 16 |        |             |
2872:000 | DONE ins | na 16 16 | 00683b | a8          |                 tay                  
2873:000 | DONE wsp | na 16 16 |        |             |
2874:000 | DONE lbl | na 16 16 | 00683c |             | z_unused                             
2874:001 | DONE ins | na 16 16 | 00683c | 60          |                 rts                  
2875:000 | DONE wsp | na 16 16 |        |             |
2876:000 | DONE wsp | na 16 16 |        |             |
2877:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2878:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
2879:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
2880:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
2881:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
2882:000 | DONE lbl | na 16 16 | 00683d |             | xt_variable                          
2883:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
2884:000 | DONE ins | na 16 16 | 00683d | 20 64 64    |                 jsr 006464           
2885:000 | DONE wsp | na 16 16 |        |             |
2886:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
2887:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
2888:000 | DONE ins | na 16 16 | 006840 | a9 00 00    |                 lda.# 0000           
2889:000 | DONE ins | na 16 16 | 006843 | 92 00       |                 sta.di 000200        STA (CP)
2890:000 | DONE wsp | na 16 16 |        |             |
2891:000 | DONE ins | na 16 16 | 006845 | e6 00       |                 inc.d 000200         direct COMMA
2892:000 | DONE ins | na 16 16 | 006847 | e6 00       |                 inc.d 000200         
2893:000 | DONE wsp | na 16 16 |        |             |
2894:000 | DONE lbl | na 16 16 | 006849 |             | z_variable                           
2894:001 | DONE ins | na 16 16 | 006849 | 60          |                 rts                  
2895:000 | DONE wsp | na 16 16 |        |             |
2896:000 | DONE wsp | na 16 16 |        |             |
2897:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2898:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
2899:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
2900:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
2901:000 | DONE lbl | na 16 16 | 00684a |             | xt_words                             
2902:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2903:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2904:000 | DONE ins | na 16 16 | 00684a | 20 5d 64    |                 jsr 00645d           start on next line, this is a style choice
2905:000 | DONE wsp | na 16 16 |        |             |
2906:000 | DONE ins | na 16 16 | 00684d | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
2907:000 | DONE ins | na 16 16 | 00684f | 48          |                 pha                  
2908:000 | DONE wsp | na 16 16 |        |             |
2909:000 | DONE ins | na 16 16 | 006850 | ca          |                 dex                  create room on TOS
2910:000 | DONE ins | na 16 16 | 006851 | ca          |                 dex                  
2911:000 | DONE ins | na 16 16 | 006852 | 94 00       |                 sty.dx 00            
2912:000 | DONE wsp | na 16 16 |        |             |
2913:000 | DONE lbl | na 16 16 | 006854 |             | words_loop                           
2914:000 | DONE ins | na 16 16 | 006854 | a8          |                 tay                  ( nt )
2915:000 | DONE ins | na 16 16 | 006855 | 20 3e 66    |                 jsr 00663e           ( nt -- addr u )
2916:000 | DONE ins | na 16 16 | 006858 | 20 10 68    |                 jsr 006810           ( addr u -- )
2917:000 | DONE ins | na 16 16 | 00685b | 20 dd 67    |                 jsr 0067dd           
2918:000 | DONE wsp | na 16 16 |        |             |
2919:000 | DONE ins | na 16 16 | 00685e | 68          |                 pla                  get back first entry in Dictionary
2920:000 | DONE wsp | na 16 16 |        |             |
2921:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
2922:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
2923:000 | DONE ins | na 16 16 | 00685f | 1a          |                 inc.a                
2924:000 | DONE ins | na 16 16 | 006860 | 1a          |                 inc.a                
2925:000 | DONE wsp | na 16 16 |        |             |
2926:000 | DONE ins | na 16 16 | 006861 | ca          |                 dex                  
2927:000 | DONE ins | na 16 16 | 006862 | ca          |                 dex                  
2928:000 | DONE ins | na 16 16 | 006863 | 94 00       |                 sty.dx 00            
2929:000 | DONE wsp | na 16 16 |        |             |
2930:000 | DONE ins | na 16 16 | 006865 | a8          |                 tay                  
2931:000 | DONE ins | na 16 16 | 006866 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2932:000 | DONE ins | na 16 16 | 006869 | 48          |                 pha                  
2933:000 | DONE ins | na 16 16 | 00686a | d0 e8       |                 bne 006854           zero entry signals end of Dictionary
2934:000 | DONE wsp | na 16 16 |        |             |
2935:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
2936:000 | DONE ins | na 16 16 | 00686c | 68          |                 pla                  balance MPU stack, value discarded
2937:000 | DONE wsp | na 16 16 |        |             |
2938:000 | DONE ins | na 16 16 | 00686d | b4 00       |                 ldy.dx 00            
2939:000 | DONE ins | na 16 16 | 00686f | e8          |                 inx                  
2940:000 | DONE ins | na 16 16 | 006870 | e8          |                 inx                  
2941:000 | DONE wsp | na 16 16 |        |             |
2942:000 | DONE lbl | na 16 16 | 006871 |             | z_words                              
2942:001 | DONE ins | na 16 16 | 006871 | 60          |                 rts                  
2943:000 | DONE wsp | na 16 16 |        |             |
2944:000 | DONE wsp | na 16 16 |        |             |
2945:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2946:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
2947:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
2948:000 | DONE lbl | na 16 16 | 006872 |             | xt_xor                               
2949:000 | DONE ins | na 16 16 | 006872 | 98          |                 tya                  
2950:000 | DONE ins | na 16 16 | 006873 | 55 00       |                 eor.dx 00            
2951:000 | DONE ins | na 16 16 | 006875 | a8          |                 tay                  
2952:000 | DONE wsp | na 16 16 |        |             |
2953:000 | DONE ins | na 16 16 | 006876 | e8          |                 inx                  
2954:000 | DONE ins | na 16 16 | 006877 | e8          |                 inx                  
2955:000 | DONE wsp | na 16 16 |        |             |
2956:000 | DONE lbl | na 16 16 | 006878 |             | z_xor                                
2956:001 | DONE ins | na 16 16 | 006878 | 60          |                 rts                  
2957:000 | DONE wsp | na 16 16 |        |             |
2958:000 | DONE wsp | na 16 16 |        |             |
2959:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2960:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
2961:000 | DONE wsp | na 16 16 |        |             |
2962:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
2962:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2962:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
2962:003 | DONE cmt | na 16 16 |        |             | ; This version: 18. Feb 2017
2962:004 | DONE wsp | na 16 16 |        |             |
2962:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
2962:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
2962:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
2962:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
2962:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
2962:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
2962:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
2962:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
2962:013 | DONE cmt | na 16 16 |        |             | ;
2962:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
2962:015 | DONE cmt | na 16 16 |        |             | ;
2962:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
2962:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
2962:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
2962:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
2962:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
2962:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
2962:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
2962:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
2962:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
2962:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
2962:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
2962:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
2962:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2962:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
2962:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2962:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
2962:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
2962:033 | DONE wsp | na 16 16 |        |             |
2962:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
2962:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
2962:036 | DONE cmt | na 16 16 |        |             | ;
2962:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
2962:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
2962:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
2962:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
2962:041 | DONE wsp | na 16 16 |        |             |
2962:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
2962:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
2962:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
2962:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
2962:046 | DONE wsp | na 16 16 |        |             |
2962:047 | DONE lbl | na 16 16 | 006879 |             | nt_bye                               
2962:048 | DONE dir | na 16 16 | 006879 | (1 bytes)   |         .byte 03                     length of word string
2962:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
2962:049 | DONE dir | na 16 16 | 00687a | (1 bytes)   |         .byte { PW + NC }            status byte
2962:049 | DONE dir | na 16 16 |        |             |                 09                       --  	
2962:050 | DONE dir | na 16 16 | 00687b | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
2962:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
2962:051 | DONE dir | na 16 16 | 00687d | (2 bytes)   |         .word 0063d2                 start of code, the xt of this word
2962:051 | DONE dir | na 16 16 |        |             |                 d2 63                    --  . c
2962:052 | DONE dir | na 16 16 | 00687f | (2 bytes)   |         .word 0063d5                 end of code (points to RTS)
2962:052 | DONE dir | na 16 16 |        |             |                 d5 63                    --  . c
2962:053 | DONE dir | na 16 16 | 006881 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
2962:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
2962:054 | DONE wsp | na 16 16 |        |             |
2962:055 | DONE lbl | na 16 16 | 006884 |             | nt_cold                              
2962:056 | DONE dir | na 16 16 | 006884 | (2 bytes)   |         .byte 4, 00                  
2962:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2962:057 | DONE dir | na 16 16 | 006886 | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
2962:057 | DONE dir | na 16 16 |        |             |                 79 68 63 60 de 60        --  y h c ` . `
2962:058 | DONE dir | na 16 16 | 00688c | (4 bytes)   |         .byte 63, 6f, 6c, 64         
2962:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
2962:059 | DONE wsp | na 16 16 |        |             |
2962:060 | DONE lbl | na 16 16 | 006890 |             | nt_words                             
2962:061 | DONE dir | na 16 16 | 006890 | (2 bytes)   |         .byte 5, { PW + NC }         
2962:061 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2962:062 | DONE dir | na 16 16 | 006892 | (6 bytes)   |         .word nt_cold, xt_words, 006871 
2962:062 | DONE dir | na 16 16 |        |             |                 84 68 4a 68 71 68        --  . h J h q h
2962:063 | DONE dir | na 16 16 | 006898 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
2962:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
2962:064 | DONE wsp | na 16 16 |        |             |
2962:065 | DONE lbl | na 16 16 | 00689d |             | nt_dump                              
2962:066 | DONE dir | na 16 16 | 00689d | (2 bytes)   |         .byte 4, { PW + NC }         
2962:066 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:067 | DONE dir | na 16 16 | 00689f | (6 bytes)   |         .word nt_words, xt_dump, 00653a 
2962:067 | DONE dir | na 16 16 |        |             |                 90 68 14 65 3a 65        --  . h . e : e
2962:068 | DONE dir | na 16 16 | 0068a5 | (4 bytes)   |         .byte 64, 75, 6d, 70         
2962:068 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
2962:069 | DONE wsp | na 16 16 |        |             |
2962:070 | DONE lbl | na 16 16 | 0068a9 |             | nt_bell                              
2962:071 | DONE dir | na 16 16 | 0068a9 | (2 bytes)   |         .byte 4, { PW + NC }         
2962:071 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:072 | DONE dir | na 16 16 | 0068ab | (6 bytes)   |         .word nt_dump, xt_bell, 0063ac 
2962:072 | DONE dir | na 16 16 |        |             |                 9d 68 a6 63 ac 63        --  . h . c . c
2962:073 | DONE dir | na 16 16 | 0068b1 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
2962:073 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
2962:074 | DONE wsp | na 16 16 |        |             |
2962:075 | DONE lbl | na 16 16 | 0068b5 |             | nt_decimal                           
2962:076 | DONE dir | na 16 16 | 0068b5 | (2 bytes)   |         .byte 7, { PW + NC }         
2962:076 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2962:077 | DONE dir | na 16 16 | 0068b7 | (6 bytes)   |         .word nt_bell, xt_decimal, 0064dc 
2962:077 | DONE dir | na 16 16 |        |             |                 a9 68 d7 64 dc 64        --  . h . d . d
2962:078 | DONE dir | na 16 16 | 0068bd | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
2962:078 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
2962:079 | DONE wsp | na 16 16 |        |             |
2962:080 | DONE lbl | na 16 16 | 0068c4 |             | nt_hex                               
2962:081 | DONE dir | na 16 16 | 0068c4 | (2 bytes)   |         .byte 3, { PW + NC }         
2962:081 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2962:082 | DONE dir | na 16 16 | 0068c6 | (6 bytes)   |         .word nt_decimal, xt_hex, 0065ef 
2962:082 | DONE dir | na 16 16 |        |             |                 b5 68 ea 65 ef 65        --  . h . e . e
2962:083 | DONE dir | na 16 16 | 0068cc | (3 bytes)   |         .byte 68, 65, 78             
2962:083 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
2962:084 | DONE wsp | na 16 16 |        |             |
2962:085 | DONE lbl | na 16 16 | 0068cf |             | nt_unused                            
2962:086 | DONE dir | na 16 16 | 0068cf | (2 bytes)   |         .byte 6, { PW + NC }         
2962:086 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2962:087 | DONE dir | na 16 16 | 0068d1 | (6 bytes)   |         .word nt_hex, xt_unused, 00683c 
2962:087 | DONE dir | na 16 16 |        |             |                 c4 68 31 68 3c 68        --  . h 1 h < h
2962:088 | DONE dir | na 16 16 | 0068d7 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
2962:088 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
2962:089 | DONE wsp | na 16 16 |        |             |
2962:090 | DONE lbl | na 16 16 | 0068dd |             | nt_page                              
2962:091 | DONE dir | na 16 16 | 0068dd | (2 bytes)   |         .byte 4, { PW + NC }         
2962:091 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:092 | DONE dir | na 16 16 | 0068df | (6 bytes)   |         .word nt_unused, xt_page, 00667f 
2962:092 | DONE dir | na 16 16 |        |             |                 cf 68 73 66 7f 66        --  . h s f . f
2962:093 | DONE dir | na 16 16 | 0068e5 | (4 bytes)   |         .byte 70, 61, 67, 65         
2962:093 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
2962:094 | DONE wsp | na 16 16 |        |             |
2962:095 | DONE lbl | na 16 16 | 0068e9 |             | nt_count                             
2962:096 | DONE dir | na 16 16 | 0068e9 | (2 bytes)   |         .byte 5, { NC + PW }         
2962:096 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2962:097 | DONE dir | na 16 16 | 0068eb | (6 bytes)   |         .word nt_page, xt_count, 00645c 
2962:097 | DONE dir | na 16 16 |        |             |                 dd 68 4e 64 5c 64        --  . h N d \ d
2962:098 | DONE dir | na 16 16 | 0068f1 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
2962:098 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
2962:099 | DONE wsp | na 16 16 |        |             |
2962:100 | DONE lbl | na 16 16 | 0068f6 |             | nt_abort                             
2962:101 | DONE dir | na 16 16 | 0068f6 | (2 bytes)   |         .byte 5, 00                  TODO check flags
2962:101 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2962:102 | DONE dir | na 16 16 | 0068f8 | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
2962:102 | DONE dir | na 16 16 |        |             |                 e9 68 97 60 de 60        --  . h . ` . `
2962:103 | DONE dir | na 16 16 | 0068fe | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
2962:103 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
2962:104 | DONE wsp | na 16 16 |        |             |
2962:105 | DONE lbl | na 16 16 | 006903 |             | nt_parse                             
2962:106 | DONE dir | na 16 16 | 006903 | (2 bytes)   |         .byte 5, 00                  
2962:106 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2962:107 | DONE dir | na 16 16 | 006905 | (6 bytes)   |         .word nt_abort, xt_parse, 0066e4 
2962:107 | DONE dir | na 16 16 |        |             |                 f6 68 b2 66 e4 66        --  . h . f . f
2962:108 | DONE dir | na 16 16 | 00690b | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
2962:108 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
2962:109 | DONE wsp | na 16 16 |        |             |
2962:110 | DONE lbl | na 16 16 | 006910 |             | nt_quit                              
2962:111 | DONE dir | na 16 16 | 006910 | (2 bytes)   |         .byte 4, 00                  
2962:111 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2962:112 | DONE dir | na 16 16 | 006912 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
2962:112 | DONE dir | na 16 16 |        |             |                 03 69 9f 60 de 60        --  . i . ` . `
2962:113 | DONE dir | na 16 16 | 006918 | (4 bytes)   |         .byte 71, 75, 69, 74         
2962:113 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
2962:114 | DONE wsp | na 16 16 |        |             |
2962:115 | DONE lbl | na 16 16 | 00691c |             | nt_question                          
2962:116 | DONE dir | na 16 16 | 00691c | (2 bytes)   |         .byte 1, { PW + NC }         
2962:116 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:117 | DONE dir | na 16 16 | 00691e | (6 bytes)   |         .word nt_quit, xt_question, 0061e8 
2962:117 | DONE dir | na 16 16 |        |             |                 10 69 e2 61 e8 61        --  . i . a . a
2962:118 | DONE dir | na 16 16 | 006924 | (1 bytes)   |         .byte 3f                     
2962:118 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
2962:119 | DONE wsp | na 16 16 |        |             |
2962:120 | DONE lbl | na 16 16 | 006925 |             | nt_name-int                          
2962:121 | DONE dir | na 16 16 | 006925 | (2 bytes)   |         .byte 8, { PW + NC }         
2962:121 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2962:122 | DONE dir | na 16 16 | 006927 | (6 bytes)   |         .word nt_question, xt_name-int, 00663d 
2962:122 | DONE dir | na 16 16 |        |             |                 1c 69 35 66 3d 66        --  . i 5 f = f
2962:123 | DONE dir | na 16 16 | 00692d | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
2962:123 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
2962:123 | DONE dir | na 16 16 |        |             |                                          -- 
2962:124 | DONE wsp | na 16 16 |        |             |
2962:125 | DONE lbl | na 16 16 | 006935 |             | nt_cr                                
2962:126 | DONE dir | na 16 16 | 006935 | (2 bytes)   |         .byte 2, { PW + NC }         
2962:126 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2962:127 | DONE dir | na 16 16 | 006937 | (6 bytes)   |         .word nt_name-int, xt_cr, 006463 
2962:127 | DONE dir | na 16 16 |        |             |                 25 69 5d 64 63 64        --  % i ] d c d
2962:128 | DONE dir | na 16 16 | 00693d | (2 bytes)   |         .byte 63, 72                 
2962:128 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
2962:129 | DONE wsp | na 16 16 |        |             |
2962:130 | DONE lbl | na 16 16 | 00693f |             | nt_bl                                
2962:131 | DONE dir | na 16 16 | 00693f | (2 bytes)   |         .byte 2, { PW + NC }         
2962:131 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2962:132 | DONE dir | na 16 16 | 006941 | (6 bytes)   |         .word nt_cr, xt_bl, 0063bb   
2962:132 | DONE dir | na 16 16 |        |             |                 35 69 b4 63 bb 63        --  5 i . c . c
2962:133 | DONE dir | na 16 16 | 006947 | (2 bytes)   |         .byte 62, 6c                 
2962:133 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
2962:134 | DONE wsp | na 16 16 |        |             |
2962:135 | DONE lbl | na 16 16 | 006949 |             | nt_spaces                            
2962:136 | DONE dir | na 16 16 | 006949 | (2 bytes)   |         .byte 6, { PW + NC }         
2962:136 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2962:137 | DONE dir | na 16 16 | 00694b | (6 bytes)   |         .word nt_bl, xt_spaces, 0067f0 
2962:137 | DONE dir | na 16 16 |        |             |                 3f 69 e4 67 f0 67        --  ? i . g . g
2962:138 | DONE dir | na 16 16 | 006951 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
2962:138 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
2962:139 | DONE wsp | na 16 16 |        |             |
2962:140 | DONE lbl | na 16 16 | 006957 |             | nt_space                             
2962:141 | DONE dir | na 16 16 | 006957 | (2 bytes)   |         .byte 5, { PW + NC }         
2962:141 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2962:142 | DONE dir | na 16 16 | 006959 | (6 bytes)   |         .word nt_spaces, xt_space, 0067e3 
2962:142 | DONE dir | na 16 16 |        |             |                 49 69 dd 67 e3 67        --  I i . g . g
2962:143 | DONE dir | na 16 16 | 00695f | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
2962:143 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
2962:144 | DONE wsp | na 16 16 |        |             |
2962:145 | DONE lbl | na 16 16 | 006964 |             | nt_dots                              
2962:146 | DONE dir | na 16 16 | 006964 | (2 bytes)   |         .byte 2, { PW + NC }         
2962:146 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2962:147 | DONE dir | na 16 16 | 006966 | (6 bytes)   |         .word nt_space, xt_dots, 00619a 
2962:147 | DONE dir | na 16 16 |        |             |                 57 69 53 61 9a 61        --  W i S a . a
2962:148 | DONE dir | na 16 16 | 00696c | (2 bytes)   |         .byte 2e, 73                 
2962:148 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
2962:149 | DONE wsp | na 16 16 |        |             |
2962:150 | DONE lbl | na 16 16 | 00696e |             | nt_type                              
2962:151 | DONE dir | na 16 16 | 00696e | (2 bytes)   |         .byte 4, 0                   
2962:151 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2962:152 | DONE dir | na 16 16 | 006970 | (6 bytes)   |         .word nt_dots, xt_type, 006830 
2962:152 | DONE dir | na 16 16 |        |             |                 64 69 10 68 30 68        --  d i . h 0 h
2962:153 | DONE dir | na 16 16 | 006976 | (4 bytes)   |         .byte 74, 79, 70, 65         
2962:153 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
2962:154 | DONE wsp | na 16 16 |        |             |
2962:155 | DONE lbl | na 16 16 | 00697a |             | nt_dot                               
2962:156 | DONE dir | na 16 16 | 00697a | (2 bytes)   |         .byte 1, { PW + NC }         
2962:156 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:157 | DONE dir | na 16 16 | 00697c | (6 bytes)   |         .word nt_type, xt_dot, 006130 
2962:157 | DONE dir | na 16 16 |        |             |                 6e 69 1b 61 30 61        --  n i . a 0 a
2962:158 | DONE dir | na 16 16 | 006982 | (1 bytes)   |         .byte 2e                     
2962:158 | DONE dir | na 16 16 |        |             |                 2e                       --  .
2962:159 | DONE wsp | na 16 16 |        |             |
2962:160 | DONE lbl | na 16 16 | 006983 |             | nt_pad                               
2962:161 | DONE dir | na 16 16 | 006983 | (2 bytes)   |         .byte 3, { PW + NC }         
2962:161 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2962:162 | DONE dir | na 16 16 | 006985 | (6 bytes)   |         .word nt_dot, xt_pad, 006672 
2962:162 | DONE dir | na 16 16 |        |             |                 7a 69 67 66 72 66        --  z i g f r f
2962:163 | DONE dir | na 16 16 | 00698b | (3 bytes)   |         .byte 70, 61, 64             
2962:163 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
2962:164 | DONE wsp | na 16 16 |        |             |
2962:165 | DONE lbl | na 16 16 | 00698e |             | nt_base                              
2962:166 | DONE dir | na 16 16 | 00698e | (2 bytes)   |         .byte 4, { PW + NC }         
2962:166 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:167 | DONE dir | na 16 16 | 006990 | (6 bytes)   |         .word nt_pad, xt_base, 0063a5 
2962:167 | DONE dir | na 16 16 |        |             |                 83 69 9e 63 a5 63        --  . i . c . c
2962:168 | DONE dir | na 16 16 | 006996 | (4 bytes)   |         .byte 62, 61, 73, 65         
2962:168 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
2962:169 | DONE wsp | na 16 16 |        |             |
2962:170 | DONE lbl | na 16 16 | 00699a |             | nt_evaluate                          
2962:171 | DONE dir | na 16 16 | 00699a | (2 bytes)   |         .byte 8, { PW + NC }         
2962:171 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2962:172 | DONE dir | na 16 16 | 00699c | (6 bytes)   |         .word nt_base, xt_evaluate, 00656e 
2962:172 | DONE dir | na 16 16 |        |             |                 8e 69 40 65 6e 65        --  . i @ e n e
2962:173 | DONE dir | na 16 16 | 0069a2 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
2962:173 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
2962:173 | DONE dir | na 16 16 |        |             |                                          -- 
2962:174 | DONE wsp | na 16 16 |        |             |
2962:175 | DONE lbl | na 16 16 | 0069aa |             | nt_cells                             
2962:176 | DONE dir | na 16 16 | 0069aa | (2 bytes)   |         .byte 5, { PW + NC }         2* because we have 16 bit stack
2962:176 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2962:177 | DONE dir | na 16 16 | 0069ac | (6 bytes)   |         .word nt_evaluate, xt_two-star, 00629c 
2962:177 | DONE dir | na 16 16 |        |             |                 9a 69 99 62 9c 62        --  . i . b . b
2962:178 | DONE dir | na 16 16 | 0069b2 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
2962:178 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
2962:179 | DONE wsp | na 16 16 |        |             |
2962:180 | DONE lbl | na 16 16 | 0069b7 |             | nt_dotquote                          
2962:181 | DONE dir | na 16 16 | 0069b7 | (2 bytes)   |         .byte 2, { CO + NC + IM }    
2962:181 | DONE dir | na 16 16 |        |             |                 02 07                    --  . .
2962:182 | DONE dir | na 16 16 | 0069b9 | (6 bytes)   |         .word nt_cells, xt_dotquote, 006153 
2962:182 | DONE dir | na 16 16 |        |             |                 aa 69 3f 61 53 61        --  . i ? a S a
2962:183 | DONE dir | na 16 16 | 0069bf | (2 bytes)   |         .byte 2e, &34                
2962:183 | DONE dir | na 16 16 |        |             |                 2e 22                    --  . "
2962:184 | DONE wsp | na 16 16 |        |             |
2962:185 | DONE lbl | na 16 16 | 0069c1 |             | nt_squote                            
2962:186 | DONE dir | na 16 16 | 0069c1 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
2962:186 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
2962:187 | DONE dir | na 16 16 | 0069c3 | (6 bytes)   |         .word nt_dotquote, xt_squote, 006767 
2962:187 | DONE dir | na 16 16 |        |             |                 b7 69 56 67 67 67        --  . i V g g g
2962:188 | DONE dir | na 16 16 | 0069c9 | (2 bytes)   |         .byte 73, &34                
2962:188 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
2962:189 | DONE wsp | na 16 16 |        |             |
2962:190 | DONE lbl | na 16 16 | 0069cb |             | nt_sliteral                          
2962:191 | DONE dir | na 16 16 | 0069cb | (2 bytes)   |         .byte 8, { IM + CO }         
2962:191 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
2962:192 | DONE dir | na 16 16 | 0069cd | (6 bytes)   |         .word nt_squote, xt_sliteral, 0067b2 
2962:192 | DONE dir | na 16 16 |        |             |                 c1 69 68 67 b2 67        --  . i h g . g
2962:193 | DONE dir | na 16 16 | 0069d3 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
2962:193 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
2962:193 | DONE dir | na 16 16 |        |             |                                          -- 
2962:194 | DONE wsp | na 16 16 |        |             |
2962:195 | DONE lbl | na 16 16 | 0069db |             | nt_brackettick                       
2962:196 | DONE dir | na 16 16 | 0069db | (2 bytes)   |         .byte 3, { IM + CO }         
2962:196 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
2962:197 | DONE dir | na 16 16 | 0069dd | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 006200 
2962:197 | DONE dir | na 16 16 |        |             |                 cb 69 fa 61 00 62        --  . i . a . b
2962:198 | DONE dir | na 16 16 | 0069e3 | (3 bytes)   |         .byte 5b, 27, 5d             
2962:198 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
2962:199 | DONE wsp | na 16 16 |        |             |
2962:200 | DONE lbl | na 16 16 | 0069e6 |             | nt_bracketchar                       
2962:201 | DONE dir | na 16 16 | 0069e6 | (2 bytes)   |         .byte 6, { IM + CO }         
2962:201 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
2962:202 | DONE dir | na 16 16 | 0069e8 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 00620f 
2962:202 | DONE dir | na 16 16 |        |             |                 db 69 09 62 0f 62        --  . i 	 b . b
2962:203 | DONE dir | na 16 16 | 0069ee | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
2962:203 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
2962:204 | DONE wsp | na 16 16 |        |             |
2962:205 | DONE lbl | na 16 16 | 0069f4 |             | nt_literal                           
2962:206 | DONE dir | na 16 16 | 0069f4 | (2 bytes)   |         .byte 7, { IM + CO }         
2962:206 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
2962:207 | DONE dir | na 16 16 | 0069f6 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 006601 
2962:207 | DONE dir | na 16 16 |        |             |                 e6 69 f0 65 01 66        --  . i . e . f
2962:208 | DONE dir | na 16 16 | 0069fc | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
2962:208 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
2962:209 | DONE wsp | na 16 16 |        |             |
2962:210 | DONE lbl | na 16 16 | 006a03 |             | nt_compile-only                      
2962:211 | DONE dir | na 16 16 | 006a03 | (2 bytes)   |         .byte 0c, { PW + NC }        
2962:211 | DONE dir | na 16 16 |        |             |                 0c 09                    --   	
2962:212 | DONE dir | na 16 16 | 006a05 | (6 bytes)   |         .word nt_literal, xt_compile-only, 006420 
2962:212 | DONE dir | na 16 16 |        |             |                 f4 69 18 64 20 64        --  . i . d   d
2962:213 | DONE dir | na 16 16 | 006a0b | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
2962:213 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
2962:213 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
2962:214 | DONE wsp | na 16 16 |        |             |
2962:215 | DONE lbl | na 16 16 | 006a17 |             | nt_immediate                         
2962:216 | DONE dir | na 16 16 | 006a17 | (2 bytes)   |         .byte 9, { PW + NC }         
2962:216 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2962:217 | DONE dir | na 16 16 | 006a19 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 0065dc 
2962:217 | DONE dir | na 16 16 |        |             |                 03 6a d4 65 dc 65        --  . j . e . e
2962:218 | DONE dir | na 16 16 | 006a1f | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
2962:218 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
2962:218 | DONE dir | na 16 16 |        |             |                 65                       --  e
2962:219 | DONE wsp | na 16 16 |        |             |
2962:220 | DONE lbl | na 16 16 | 006a28 |             | nt_postpone                          
2962:221 | DONE dir | na 16 16 | 006a28 | (2 bytes)   |         .byte 8, { IM + CO }         
2962:221 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
2962:222 | DONE dir | na 16 16 | 006a2a | (6 bytes)   |         .word nt_immediate, xt_postpone, 00671a 
2962:222 | DONE dir | na 16 16 |        |             |                 17 6a e5 66 1a 67        --  . j . f . g
2962:223 | DONE dir | na 16 16 | 006a30 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
2962:223 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
2962:223 | DONE dir | na 16 16 |        |             |                                          -- 
2962:224 | DONE wsp | na 16 16 |        |             |
2962:225 | DONE lbl | na 16 16 | 006a38 |             | nt_rightbracket                      
2962:226 | DONE dir | na 16 16 | 006a38 | (2 bytes)   |         .byte 1, { PW + NC }         
2962:226 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:227 | DONE dir | na 16 16 | 006a3a | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 006208 
2962:227 | DONE dir | na 16 16 |        |             |                 28 6a 03 62 08 62        --  ( j . b . b
2962:228 | DONE dir | na 16 16 | 006a40 | (1 bytes)   |         .byte 5d                     
2962:228 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
2962:229 | DONE wsp | na 16 16 |        |             |
2962:230 | DONE lbl | na 16 16 | 006a41 |             | nt_leftbracket                       
2962:231 | DONE dir | na 16 16 | 006a41 | (2 bytes)   |         .byte 1, { IM + CO }         
2962:231 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2962:232 | DONE dir | na 16 16 | 006a43 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 006202 
2962:232 | DONE dir | na 16 16 |        |             |                 38 6a 00 62 02 62        --  8 j . b . b
2962:233 | DONE dir | na 16 16 | 006a49 | (1 bytes)   |         .byte 5b                     
2962:233 | DONE dir | na 16 16 |        |             |                 5b                       --  [
2962:234 | DONE wsp | na 16 16 |        |             |
2962:235 | DONE lbl | na 16 16 | 006a4a |             | nt_zbranch                           
2962:236 | DONE dir | na 16 16 | 006a4a | (2 bytes)   |         .byte 7, { IM + CO }         
2962:236 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
2962:237 | DONE dir | na 16 16 | 006a4c | (6 bytes)   |         .word nt_leftbracket, xt_zbranch, 00626c 
2962:237 | DONE dir | na 16 16 |        |             |                 41 6a 66 62 6c 62        --  A j f b l b
2962:238 | DONE dir | na 16 16 | 006a52 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
2962:238 | DONE dir | na 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
2962:239 | DONE wsp | na 16 16 |        |             |
2962:240 | DONE lbl | na 16 16 | 006a59 |             | nt_branch                            
2962:241 | DONE dir | na 16 16 | 006a59 | (2 bytes)   |         .byte 6, { IM + CO }         
2962:241 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
2962:242 | DONE dir | na 16 16 | 006a5b | (6 bytes)   |         .word nt_zbranch, xt_branch, 0063c2 
2962:242 | DONE dir | na 16 16 |        |             |                 4a 6a bc 63 c2 63        --  J j . c . c
2962:243 | DONE dir | na 16 16 | 006a61 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
2962:243 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
2962:244 | DONE wsp | na 16 16 |        |             |
2962:245 | DONE lbl | na 16 16 | 006a67 |             | nt_again                             
2962:246 | DONE dir | na 16 16 | 006a67 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
2962:246 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
2962:247 | DONE dir | na 16 16 | 006a69 | (6 bytes)   |         .word nt_branch, xt_again, 00636d 
2962:247 | DONE dir | na 16 16 |        |             |                 59 6a 58 63 6d 63        --  Y j X c m c
2962:248 | DONE dir | na 16 16 | 006a6f | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
2962:248 | DONE dir | na 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
2962:249 | DONE wsp | na 16 16 |        |             |
2962:250 | DONE lbl | na 16 16 | 006a74 |             | nt_begin                             
2962:251 | DONE dir | na 16 16 | 006a74 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
2962:251 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
2962:252 | DONE dir | na 16 16 | 006a76 | (6 bytes)   |         .word nt_again, xt_begin, 0063b3 
2962:252 | DONE dir | na 16 16 |        |             |                 67 6a ad 63 b3 63        --  g j . c . c
2962:253 | DONE dir | na 16 16 | 006a7c | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
2962:253 | DONE dir | na 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
2962:254 | DONE wsp | na 16 16 |        |             |
2962:255 | DONE lbl | na 16 16 | 006a81 |             | nt_compilecomma                      
2962:256 | DONE dir | na 16 16 | 006a81 | (2 bytes)   |         .byte 08, { CO }             
2962:256 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
2962:257 | DONE dir | na 16 16 | 006a83 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 006433 
2962:257 | DONE dir | na 16 16 |        |             |                 74 6a 21 64 33 64        --  t j ! d 3 d
2962:258 | DONE dir | na 16 16 | 006a89 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
2962:258 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
2962:258 | DONE dir | na 16 16 |        |             |                                          -- 
2962:259 | DONE wsp | na 16 16 |        |             |
2962:260 | DONE lbl | na 16 16 | 006a91 |             | nt_semicolon                         
2962:261 | DONE dir | na 16 16 | 006a91 | (2 bytes)   |         .byte 1, { CO + IM }         
2962:261 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2962:262 | DONE dir | na 16 16 | 006a93 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 0061e1 
2962:262 | DONE dir | na 16 16 |        |             |                 81 6a c9 61 e1 61        --  . j . a . a
2962:263 | DONE dir | na 16 16 | 006a99 | (1 bytes)   |         .byte 3b                     
2962:263 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
2962:264 | DONE wsp | na 16 16 |        |             |
2962:265 | DONE lbl | na 16 16 | 006a9a |             | nt_colon                             
2962:266 | DONE dir | na 16 16 | 006a9a | (2 bytes)   |         .byte 1, { NC }              
2962:266 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
2962:267 | DONE dir | na 16 16 | 006a9c | (6 bytes)   |         .word nt_semicolon, xt_colon, 0061c8 
2962:267 | DONE dir | na 16 16 |        |             |                 91 6a a7 61 c8 61        --  . j . a . a
2962:268 | DONE dir | na 16 16 | 006aa2 | (1 bytes)   |         .byte 3a                     
2962:268 | DONE dir | na 16 16 |        |             |                 3a                       --  :
2962:269 | DONE wsp | na 16 16 |        |             |
2962:270 | DONE lbl | na 16 16 | 006aa3 |             | nt_allot                             
2962:271 | DONE dir | na 16 16 | 006aa3 | (2 bytes)   |         .byte 5, { PW + NC }         
2962:271 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2962:272 | DONE dir | na 16 16 | 006aa5 | (6 bytes)   |         .word nt_colon, xt_allot, 006396 
2962:272 | DONE dir | na 16 16 |        |             |                 9a 6a 6e 63 96 63        --  . j n c . c
2962:273 | DONE dir | na 16 16 | 006aab | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
2962:273 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
2962:274 | DONE wsp | na 16 16 |        |             |
2962:275 | DONE lbl | na 16 16 | 006ab0 |             | nt_does                              
2962:276 | DONE dir | na 16 16 | 006ab0 | (2 bytes)   |         .byte 5, { IM + CO }         
2962:276 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
2962:277 | DONE dir | na 16 16 | 006ab2 | (6 bytes)   |         .word nt_allot, xt_does, 0064f8 
2962:277 | DONE dir | na 16 16 |        |             |                 a3 6a ec 64 f8 64        --  . j . d . d
2962:278 | DONE dir | na 16 16 | 006ab8 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
2962:278 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
2962:279 | DONE wsp | na 16 16 |        |             |
2962:280 | DONE lbl | na 16 16 | 006abd |             | nt_create                            
2962:281 | DONE dir | na 16 16 | 006abd | (2 bytes)   |         .byte 6, { PW + NC }         
2962:281 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2962:282 | DONE dir | na 16 16 | 006abf | (6 bytes)   |         .word nt_does, xt_create, 0064d6 
2962:282 | DONE dir | na 16 16 |        |             |                 b0 6a 64 64 d6 64        --  . j d d . d
2962:283 | DONE dir | na 16 16 | 006ac5 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
2962:283 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
2962:284 | DONE wsp | na 16 16 |        |             |
2962:285 | DONE lbl | na 16 16 | 006acb |             | nt_name-string                       
2962:286 | DONE dir | na 16 16 | 006acb | (2 bytes)   |         .byte 0b, { PW + NC }        
2962:286 | DONE dir | na 16 16 |        |             |                 0b 09                    --   	
2962:287 | DONE dir | na 16 16 | 006acd | (6 bytes)   |         .word nt_create, xt_name-string, 00664e 
2962:287 | DONE dir | na 16 16 |        |             |                 bd 6a 3e 66 4e 66        --  . j > f N f
2962:288 | DONE dir | na 16 16 | 006ad3 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
2962:288 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
2962:288 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
2962:289 | DONE wsp | na 16 16 |        |             |
2962:290 | DONE lbl | na 16 16 | 006ade |             | nt_2dup                              
2962:291 | DONE dir | na 16 16 | 006ade | (2 bytes)   |         .byte 4, { PW + NC }         
2962:291 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:292 | DONE dir | na 16 16 | 006ae0 | (6 bytes)   |         .word nt_name-string, xt_2dup, 0062ae 
2962:292 | DONE dir | na 16 16 |        |             |                 cb 6a a4 62 ae 62        --  . j . b . b
2962:293 | DONE dir | na 16 16 | 006ae6 | (4 bytes)   |         .byte 32, 64, 75, 70         
2962:293 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
2962:294 | DONE wsp | na 16 16 |        |             |
2962:295 | DONE lbl | na 16 16 | 006aea |             | nt_abs                               
2962:296 | DONE dir | na 16 16 | 006aea | (2 bytes)   |         .byte 3, { PW + NC }         
2962:296 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2962:297 | DONE dir | na 16 16 | 006aec | (6 bytes)   |         .word nt_2dup, xt_abs, 0062d3 
2962:297 | DONE dir | na 16 16 |        |             |                 de 6a cb 62 d3 62        --  . j . b . b
2962:298 | DONE dir | na 16 16 | 006af2 | (3 bytes)   |         .byte 61, 62, 73             
2962:298 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
2962:299 | DONE wsp | na 16 16 |        |             |
2962:300 | DONE lbl | na 16 16 | 006af5 |             | nt_state                             
2962:301 | DONE dir | na 16 16 | 006af5 | (2 bytes)   |         .byte 5, { PW + NC }         
2962:301 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2962:302 | DONE dir | na 16 16 | 006af7 | (6 bytes)   |         .word nt_abs, xt_state, 0067f8 
2962:302 | DONE dir | na 16 16 |        |             |                 ea 6a f1 67 f8 67        --  . j . g . g
2962:303 | DONE dir | na 16 16 | 006afd | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
2962:303 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
2962:304 | DONE wsp | na 16 16 |        |             |
2962:305 | DONE lbl | na 16 16 | 006b02 |             | nt_to-in                             
2962:306 | DONE dir | na 16 16 | 006b02 | (2 bytes)   |         .byte 3, { PW + NC }         
2962:306 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2962:307 | DONE dir | na 16 16 | 006b04 | (6 bytes)   |         .word nt_state, xt_to-in, 00611a 
2962:307 | DONE dir | na 16 16 |        |             |                 f5 6a 13 61 1a 61        --  . j . a . a
2962:308 | DONE dir | na 16 16 | 006b0a | (3 bytes)   |         .byte 3e, 69, 6e             
2962:308 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
2962:309 | DONE wsp | na 16 16 |        |             |
2962:310 | DONE lbl | na 16 16 | 006b0d |             | nt_source                            
2962:311 | DONE dir | na 16 16 | 006b0d | (2 bytes)   |         .byte 6, { PW + NC }         
2962:311 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2962:312 | DONE dir | na 16 16 | 006b0f | (6 bytes)   |         .word nt_to-in, xt_source, 0067d5 
2962:312 | DONE dir | na 16 16 |        |             |                 02 6b c9 67 d5 67        --  . k . g . g
2962:313 | DONE dir | na 16 16 | 006b15 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
2962:313 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
2962:314 | DONE wsp | na 16 16 |        |             |
2962:315 | DONE lbl | na 16 16 | 006b1b |             | nt_depth                             
2962:316 | DONE dir | na 16 16 | 006b1b | (2 bytes)   |         .byte 5, { PW + NC }         
2962:316 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2962:317 | DONE dir | na 16 16 | 006b1d | (6 bytes)   |         .word nt_source, xt_depth, 0064eb 
2962:317 | DONE dir | na 16 16 |        |             |                 0d 6b dd 64 eb 64        --   k . d . d
2962:318 | DONE dir | na 16 16 | 006b23 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
2962:318 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
2962:319 | DONE wsp | na 16 16 |        |             |
2962:320 | DONE lbl | na 16 16 | 006b28 |             | nt_constant                          
2962:321 | DONE dir | na 16 16 | 006b28 | (2 bytes)   |         .byte 8, { PW + NC }         
2962:321 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2962:322 | DONE dir | na 16 16 | 006b2a | (6 bytes)   |         .word nt_depth, xt_constant, 00644d 
2962:322 | DONE dir | na 16 16 |        |             |                 1b 6b 34 64 4d 64        --  . k 4 d M d
2962:323 | DONE dir | na 16 16 | 006b30 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
2962:323 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
2962:323 | DONE dir | na 16 16 |        |             |                                          -- 
2962:324 | DONE wsp | na 16 16 |        |             |
2962:325 | DONE lbl | na 16 16 | 006b38 |             | nt_variable                          
2962:326 | DONE dir | na 16 16 | 006b38 | (2 bytes)   |         .byte 8, { PW + NC }         
2962:326 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2962:327 | DONE dir | na 16 16 | 006b3a | (6 bytes)   |         .word nt_constant, xt_variable, 006849 
2962:327 | DONE dir | na 16 16 |        |             |                 28 6b 3d 68 49 68        --  ( k = h I h
2962:328 | DONE dir | na 16 16 | 006b40 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
2962:328 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
2962:328 | DONE dir | na 16 16 |        |             |                                          -- 
2962:329 | DONE wsp | na 16 16 |        |             |
2962:330 | DONE lbl | na 16 16 | 006b48 |             | nt_tick                              
2962:331 | DONE dir | na 16 16 | 006b48 | (2 bytes)   |         .byte 1, { PW + NC }         
2962:331 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:332 | DONE dir | na 16 16 | 006b4a | (6 bytes)   |         .word nt_variable, xt_tick, 0062ca 
2962:332 | DONE dir | na 16 16 |        |             |                 38 6b af 62 ca 62        --  8 k . b . b
2962:333 | DONE dir | na 16 16 | 006b50 | (1 bytes)   |         .byte 27                     hex for "'"
2962:333 | DONE dir | na 16 16 |        |             |                 27                       --  '
2962:334 | DONE wsp | na 16 16 |        |             |
2962:335 | DONE lbl | na 16 16 | 006b51 |             | nt_min                               
2962:336 | DONE dir | na 16 16 | 006b51 | (2 bytes)   |         .byte 3, { PW + NC }         
2962:336 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2962:337 | DONE dir | na 16 16 | 006b53 | (6 bytes)   |         .word nt_tick, xt_min, 006634 
2962:337 | DONE dir | na 16 16 |        |             |                 48 6b 22 66 34 66        --  H k " f 4 f
2962:338 | DONE dir | na 16 16 | 006b59 | (3 bytes)   |         .byte 6d, 69, 6e             
2962:338 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
2962:339 | DONE wsp | na 16 16 |        |             |
2962:340 | DONE lbl | na 16 16 | 006b5c |             | nt_max                               
2962:341 | DONE dir | na 16 16 | 006b5c | (2 bytes)   |         .byte 3, { PW + NC }         
2962:341 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2962:342 | DONE dir | na 16 16 | 006b5e | (6 bytes)   |         .word nt_min, xt_max, 006621 
2962:342 | DONE dir | na 16 16 |        |             |                 51 6b 0f 66 21 66        --  Q k . f ! f
2962:343 | DONE dir | na 16 16 | 006b64 | (3 bytes)   |         .byte 6d, 61, 78             
2962:343 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
2962:344 | DONE wsp | na 16 16 |        |             |
2962:345 | DONE lbl | na 16 16 | 006b67 |             | nt_negate                            
2962:346 | DONE dir | na 16 16 | 006b67 | (2 bytes)   |         .byte 6, { PW + NC }         
2962:346 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2962:347 | DONE dir | na 16 16 | 006b69 | (6 bytes)   |         .word nt_max, xt_negate, 006655 
2962:347 | DONE dir | na 16 16 |        |             |                 5c 6b 4f 66 55 66        --  \ k O f U f
2962:348 | DONE dir | na 16 16 | 006b6f | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
2962:348 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
2962:349 | DONE wsp | na 16 16 |        |             |
2962:350 | DONE lbl | na 16 16 | 006b75 |             | nt_invert                            
2962:351 | DONE dir | na 16 16 | 006b75 | (2 bytes)   |         .byte 6, { PW + NC }         
2962:351 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2962:352 | DONE dir | na 16 16 | 006b77 | (6 bytes)   |         .word nt_negate, xt_invert, 0065e2 
2962:352 | DONE dir | na 16 16 |        |             |                 67 6b dd 65 e2 65        --  g k . e . e
2962:353 | DONE dir | na 16 16 | 006b7d | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
2962:353 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
2962:354 | DONE wsp | na 16 16 |        |             |
2962:355 | DONE lbl | na 16 16 | 006b83 |             | nt_char                              
2962:356 | DONE dir | na 16 16 | 006b83 | (2 bytes)   |         .byte 4, { PW + NC }         
2962:356 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:357 | DONE dir | na 16 16 | 006b85 | (6 bytes)   |         .word nt_invert, xt_char, 006417 
2962:357 | DONE dir | na 16 16 |        |             |                 75 6b 00 64 17 64        --  u k . d . d
2962:358 | DONE dir | na 16 16 | 006b8b | (4 bytes)   |         .byte 63, 68, 61, 72         
2962:358 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
2962:359 | DONE wsp | na 16 16 |        |             |
2962:360 | DONE lbl | na 16 16 | 006b8f |             | nt_xor                               
2962:361 | DONE dir | na 16 16 | 006b8f | (2 bytes)   |         .byte 3, { PW + NC }         
2962:361 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2962:362 | DONE dir | na 16 16 | 006b91 | (6 bytes)   |         .word nt_char, xt_xor, 006878 
2962:362 | DONE dir | na 16 16 |        |             |                 83 6b 72 68 78 68        --  . k r h x h
2962:363 | DONE dir | na 16 16 | 006b97 | (3 bytes)   |         .byte 78, 6f, 72             
2962:363 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
2962:364 | DONE wsp | na 16 16 |        |             |
2962:365 | DONE lbl | na 16 16 | 006b9a |             | nt_or                                
2962:366 | DONE dir | na 16 16 | 006b9a | (2 bytes)   |         .byte 2, { PW + NC }         
2962:366 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2962:367 | DONE dir | na 16 16 | 006b9c | (6 bytes)   |         .word nt_xor, xt_or, 00665f  
2962:367 | DONE dir | na 16 16 |        |             |                 8f 6b 59 66 5f 66        --  . k Y f _ f
2962:368 | DONE dir | na 16 16 | 006ba2 | (2 bytes)   |         .byte 6f, 72                 
2962:368 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
2962:369 | DONE wsp | na 16 16 |        |             |
2962:370 | DONE lbl | na 16 16 | 006ba4 |             | nt_and                               
2962:371 | DONE dir | na 16 16 | 006ba4 | (2 bytes)   |         .byte 3, { PW + NC }         
2962:371 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2962:372 | DONE dir | na 16 16 | 006ba6 | (6 bytes)   |         .word nt_or, xt_and, 00639d  
2962:372 | DONE dir | na 16 16 |        |             |                 9a 6b 97 63 9d 63        --  . k . c . c
2962:373 | DONE dir | na 16 16 | 006bac | (3 bytes)   |         .byte 61, 6e, 64             
2962:373 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
2962:374 | DONE wsp | na 16 16 |        |             |
2962:375 | DONE lbl | na 16 16 | 006baf |             | nt_c-comma                           
2962:376 | DONE dir | na 16 16 | 006baf | (2 bytes)   |         .byte 2, { PW + NC }         
2962:376 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2962:377 | DONE dir | na 16 16 | 006bb1 | (6 bytes)   |         .word nt_and, xt_c-comma, 0063e3 
2962:377 | DONE dir | na 16 16 |        |             |                 a4 6b d6 63 e3 63        --  . k . c . c
2962:378 | DONE dir | na 16 16 | 006bb7 | (2 bytes)   |         .byte 63, 2c                 
2962:378 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
2962:379 | DONE wsp | na 16 16 |        |             |
2962:380 | DONE lbl | na 16 16 | 006bb9 |             | nt_c-fetch                           
2962:381 | DONE dir | na 16 16 | 006bb9 | (2 bytes)   |         .byte 2, { PW + NC }         
2962:381 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2962:382 | DONE dir | na 16 16 | 006bbb | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 0063ef 
2962:382 | DONE dir | na 16 16 |        |             |                 af 6b e4 63 ef 63        --  . k . c . c
2962:383 | DONE dir | na 16 16 | 006bc1 | (2 bytes)   |         .byte 63, 40                 
2962:383 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
2962:384 | DONE wsp | na 16 16 |        |             |
2962:385 | DONE lbl | na 16 16 | 006bc3 |             | nt_c-store                           
2962:386 | DONE dir | na 16 16 | 006bc3 | (2 bytes)   |         .byte 2, { PW + NC }         
2962:386 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2962:387 | DONE dir | na 16 16 | 006bc5 | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0063ff 
2962:387 | DONE dir | na 16 16 |        |             |                 b9 6b f0 63 ff 63        --  . k . c . c
2962:388 | DONE dir | na 16 16 | 006bcb | (2 bytes)   |         .byte 63, 21                 
2962:388 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
2962:389 | DONE wsp | na 16 16 |        |             |
2962:390 | DONE lbl | na 16 16 | 006bcd |             | nt_two-star                          
2962:391 | DONE dir | na 16 16 | 006bcd | (2 bytes)   |         .byte 2, { PW + NC }         
2962:391 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2962:392 | DONE dir | na 16 16 | 006bcf | (6 bytes)   |         .word nt_c-store, xt_two-star, 00629c 
2962:392 | DONE dir | na 16 16 |        |             |                 c3 6b 99 62 9c 62        --  . k . b . b
2962:393 | DONE dir | na 16 16 | 006bd5 | (2 bytes)   |         .byte 32, 2a                 
2962:393 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
2962:394 | DONE wsp | na 16 16 |        |             |
2962:395 | DONE lbl | na 16 16 | 006bd7 |             | nt_minus                             
2962:396 | DONE dir | na 16 16 | 006bd7 | (2 bytes)   |         .byte 1, { PW + NC }         
2962:396 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:397 | DONE dir | na 16 16 | 006bd9 | (6 bytes)   |         .word nt_two-star, xt_minus, 006222 
2962:397 | DONE dir | na 16 16 |        |             |                 cd 6b 18 62 22 62        --  . k . b " b
2962:398 | DONE dir | na 16 16 | 006bdf | (1 bytes)   |         .byte 2d                     
2962:398 | DONE dir | na 16 16 |        |             |                 2d                       --  -
2962:399 | DONE wsp | na 16 16 |        |             |
2962:400 | DONE lbl | na 16 16 | 006be0 |             | nt_plus                              
2962:401 | DONE dir | na 16 16 | 006be0 | (2 bytes)   |         .byte 1, { PW + NC }         
2962:401 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:402 | DONE dir | na 16 16 | 006be2 | (6 bytes)   |         .word nt_minus, xt_plus, 006217 
2962:402 | DONE dir | na 16 16 |        |             |                 d7 6b 10 62 17 62        --  . k . b . b
2962:403 | DONE dir | na 16 16 | 006be8 | (1 bytes)   |         .byte 2b                     
2962:403 | DONE dir | na 16 16 |        |             |                 2b                       --  +
2962:404 | DONE wsp | na 16 16 |        |             |
2962:405 | DONE lbl | na 16 16 | 006be9 |             | nt_one-minus                         
2962:406 | DONE dir | na 16 16 | 006be9 | (2 bytes)   |         .byte 2, { PW + NC }         
2962:406 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2962:407 | DONE dir | na 16 16 | 006beb | (6 bytes)   |         .word nt_plus, xt_one-minus, 00628e 
2962:407 | DONE dir | na 16 16 |        |             |                 e0 6b 8d 62 8e 62        --  . k . b . b
2962:408 | DONE dir | na 16 16 | 006bf1 | (2 bytes)   |         .byte 31, 2d                 
2962:408 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
2962:409 | DONE wsp | na 16 16 |        |             |
2962:410 | DONE lbl | na 16 16 | 006bf3 |             | nt_one-plus                          
2962:411 | DONE dir | na 16 16 | 006bf3 | (2 bytes)   |         .byte 2, { PW + NC }         
2962:411 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2962:412 | DONE dir | na 16 16 | 006bf5 | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 006290 
2962:412 | DONE dir | na 16 16 |        |             |                 e9 6b 8f 62 90 62        --  . k . b . b
2962:413 | DONE dir | na 16 16 | 006bfb | (2 bytes)   |         .byte 31, 2b                 
2962:413 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
2962:414 | DONE wsp | na 16 16 |        |             |
2962:415 | DONE lbl | na 16 16 | 006bfd |             | nt_zero-notequal                     
2962:416 | DONE dir | na 16 16 | 006bfd | (2 bytes)   |         .byte 3, { NC }              
2962:416 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
2962:417 | DONE dir | na 16 16 | 006bff | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 00625a 
2962:417 | DONE dir | na 16 16 |        |             |                 f3 6b 4f 62 5a 62        --  . k O b Z b
2962:418 | DONE dir | na 16 16 | 006c05 | (3 bytes)   |         .byte 30, 3c, 3e             
2962:418 | DONE dir | na 16 16 |        |             |                 30 3c 3e                 --  0 < >
2962:419 | DONE wsp | na 16 16 |        |             |
2962:420 | DONE lbl | na 16 16 | 006c08 |             | nt_zero-more                         
2962:421 | DONE dir | na 16 16 | 006c08 | (2 bytes)   |         .byte 2, { NC }              
2962:421 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
2962:422 | DONE dir | na 16 16 | 006c0a | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 006265 
2962:422 | DONE dir | na 16 16 |        |             |                 fd 6b 5b 62 65 62        --  . k [ b e b
2962:423 | DONE dir | na 16 16 | 006c10 | (2 bytes)   |         .byte 30, 3e                 
2962:423 | DONE dir | na 16 16 |        |             |                 30 3e                    --  0 >
2962:424 | DONE wsp | na 16 16 |        |             |
2962:425 | DONE lbl | na 16 16 | 006c12 |             | nt_zero-less                         
2962:426 | DONE dir | na 16 16 | 006c12 | (2 bytes)   |         .byte 2, { NC }              
2962:426 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
2962:427 | DONE dir | na 16 16 | 006c14 | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 00624e 
2962:427 | DONE dir | na 16 16 |        |             |                 08 6c 43 62 4e 62        --  . l C b N b
2962:428 | DONE dir | na 16 16 | 006c1a | (2 bytes)   |         .byte 30, 3c                 
2962:428 | DONE dir | na 16 16 |        |             |                 30 3c                    --  0 <
2962:429 | DONE wsp | na 16 16 |        |             |
2962:430 | DONE lbl | na 16 16 | 006c1c |             | nt_greater                           
2962:431 | DONE dir | na 16 16 | 006c1c | (2 bytes)   |         .byte 1, { NC }              
2962:431 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
2962:432 | DONE dir | na 16 16 | 006c1e | (6 bytes)   |         .word nt_zero-less, xt_greater, 006112 
2962:432 | DONE dir | na 16 16 |        |             |                 12 6c ff 60 12 61        --  . l . ` . a
2962:433 | DONE dir | na 16 16 | 006c24 | (1 bytes)   |         .byte 3e                     
2962:433 | DONE dir | na 16 16 |        |             |                 3e                       --  >
2962:434 | DONE wsp | na 16 16 |        |             |
2962:435 | DONE lbl | na 16 16 | 006c25 |             | nt_less                              
2962:436 | DONE dir | na 16 16 | 006c25 | (2 bytes)   |         .byte 1, { NC }              
2962:436 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
2962:437 | DONE dir | na 16 16 | 006c27 | (6 bytes)   |         .word nt_greater, xt_less, 0060f2 
2962:437 | DONE dir | na 16 16 |        |             |                 1c 6c df 60 f2 60        --  . l . ` . `
2962:438 | DONE dir | na 16 16 | 006c2d | (1 bytes)   |         .byte 3c                     
2962:438 | DONE dir | na 16 16 |        |             |                 3c                       --  <
2962:439 | DONE wsp | na 16 16 |        |             |
2962:440 | DONE lbl | na 16 16 | 006c2e |             | nt_zero-equal                        
2962:441 | DONE dir | na 16 16 | 006c2e | (2 bytes)   |         .byte 2, { NC }              
2962:441 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
2962:442 | DONE dir | na 16 16 | 006c30 | (6 bytes)   |         .word nt_less, xt_zero-equal, 006242 
2962:442 | DONE dir | na 16 16 |        |             |                 25 6c 37 62 42 62        --  % l 7 b B b
2962:443 | DONE dir | na 16 16 | 006c36 | (2 bytes)   |         .byte 30, 3d                 
2962:443 | DONE dir | na 16 16 |        |             |                 30 3d                    --  0 =
2962:444 | DONE wsp | na 16 16 |        |             |
2962:445 | DONE lbl | na 16 16 | 006c38 |             | nt_not-equal                         
2962:446 | DONE dir | na 16 16 | 006c38 | (2 bytes)   |         .byte 2, { NC }              
2962:446 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
2962:447 | DONE dir | na 16 16 | 006c3a | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 0060fe 
2962:447 | DONE dir | na 16 16 |        |             |                 2e 6c f3 60 fe 60        --  . l . ` . `
2962:448 | DONE dir | na 16 16 | 006c40 | (2 bytes)   |         .byte 3c, 3e                 
2962:448 | DONE dir | na 16 16 |        |             |                 3c 3e                    --  < >
2962:449 | DONE wsp | na 16 16 |        |             |
2962:450 | DONE lbl | na 16 16 | 006c42 |             | nt_equal                             
2962:451 | DONE dir | na 16 16 | 006c42 | (2 bytes)   |         .byte 1, { NC }              
2962:451 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
2962:452 | DONE dir | na 16 16 | 006c44 | (6 bytes)   |         .word nt_not-equal, xt_equal, 00622e 
2962:452 | DONE dir | na 16 16 |        |             |                 38 6c 23 62 2e 62        --  8 l # b . b
2962:453 | DONE dir | na 16 16 | 006c4a | (1 bytes)   |         .byte 3d                     
2962:453 | DONE dir | na 16 16 |        |             |                 3d                       --  =
2962:454 | DONE wsp | na 16 16 |        |             |
2962:455 | DONE lbl | na 16 16 | 006c4b |             | nt_false                             
2962:456 | DONE dir | na 16 16 | 006c4b | (2 bytes)   |         .byte 5, { PW + NC }         
2962:456 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2962:457 | DONE dir | na 16 16 | 006c4d | (6 bytes)   |         .word nt_equal, xt_zero, 006236 
2962:457 | DONE dir | na 16 16 |        |             |                 42 6c 2f 62 36 62        --  B l / b 6 b
2962:458 | DONE dir | na 16 16 | 006c53 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
2962:458 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
2962:459 | DONE wsp | na 16 16 |        |             |
2962:460 | DONE lbl | na 16 16 | 006c58 |             | nt_true                              
2962:461 | DONE dir | na 16 16 | 006c58 | (2 bytes)   |         .byte 4, { PW + NC }         
2962:461 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:462 | DONE dir | na 16 16 | 006c5a | (6 bytes)   |         .word nt_false, xt_true, 006806 
2962:462 | DONE dir | na 16 16 |        |             |                 4b 6c ff 67 06 68        --  K l . g . h
2962:463 | DONE dir | na 16 16 | 006c60 | (4 bytes)   |         .byte 74, 72, 75, 65         
2962:463 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
2962:464 | DONE wsp | na 16 16 |        |             |
2962:465 | DONE lbl | na 16 16 | 006c64 |             | nt_two                               
2962:466 | DONE dir | na 16 16 | 006c64 | (2 bytes)   |         .byte 1, { PW + NC }         
2962:466 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:467 | DONE dir | na 16 16 | 006c66 | (6 bytes)   |         .word nt_true, xt_two, 006298 
2962:467 | DONE dir | na 16 16 |        |             |                 58 6c 91 62 98 62        --  X l . b . b
2962:468 | DONE dir | na 16 16 | 006c6c | (1 bytes)   |         .byte 32                     
2962:468 | DONE dir | na 16 16 |        |             |                 32                       --  2
2962:469 | DONE wsp | na 16 16 |        |             |
2962:470 | DONE lbl | na 16 16 | 006c6d |             | nt_one                               
2962:471 | DONE dir | na 16 16 | 006c6d | (2 bytes)   |         .byte 1, { PW + NC }         
2962:471 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:472 | DONE dir | na 16 16 | 006c6f | (6 bytes)   |         .word nt_two, xt_one, 00628c 
2962:472 | DONE dir | na 16 16 |        |             |                 64 6c 85 62 8c 62        --  d l . b . b
2962:473 | DONE dir | na 16 16 | 006c75 | (1 bytes)   |         .byte 31                     
2962:473 | DONE dir | na 16 16 |        |             |                 31                       --  1
2962:474 | DONE wsp | na 16 16 |        |             |
2962:475 | DONE lbl | na 16 16 | 006c76 |             | nt_zero                              
2962:476 | DONE dir | na 16 16 | 006c76 | (2 bytes)   |         .byte 1, { PW + NC }         
2962:476 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:477 | DONE dir | na 16 16 | 006c78 | (6 bytes)   |         .word nt_one, xt_zero, 006236 
2962:477 | DONE dir | na 16 16 |        |             |                 6d 6c 2f 62 36 62        --  m l / b 6 b
2962:478 | DONE dir | na 16 16 | 006c7e | (1 bytes)   |         .byte 30                     
2962:478 | DONE dir | na 16 16 |        |             |                 30                       --  0
2962:479 | DONE wsp | na 16 16 |        |             |
2962:480 | DONE lbl | na 16 16 | 006c7f |             | nt_find-name                         
2962:481 | DONE dir | na 16 16 | 006c7f | (2 bytes)   |         .byte 9, 0                   
2962:481 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
2962:482 | DONE dir | na 16 16 | 006c81 | (6 bytes)   |         .word nt_zero, xt_find-name, 0065d3 
2962:482 | DONE dir | na 16 16 |        |             |                 76 6c 7d 65 d3 65        --  v l } e . e
2962:483 | DONE dir | na 16 16 | 006c87 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
2962:483 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
2962:483 | DONE dir | na 16 16 |        |             |                 65                       --  e
2962:484 | DONE wsp | na 16 16 |        |             |
2962:485 | DONE lbl | na 16 16 | 006c90 |             | nt_refill                            
2962:486 | DONE dir | na 16 16 | 006c90 | (2 bytes)   |         .byte 6, { PW }              TODO check flags
2962:486 | DONE dir | na 16 16 |        |             |                 06 08                    --  . .
2962:487 | DONE dir | na 16 16 | 006c92 | (6 bytes)   |         .word nt_find-name, xt_refill, 00674c 
2962:487 | DONE dir | na 16 16 |        |             |                 7f 6c 1a 67 4c 67        --  . l . g L g
2962:488 | DONE dir | na 16 16 | 006c98 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
2962:488 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
2962:489 | DONE wsp | na 16 16 |        |             |
2962:490 | DONE lbl | na 16 16 | 006c9e |             | nt_parse-name                        
2962:491 | DONE dir | na 16 16 | 006c9e | (2 bytes)   |         .byte &10, 0                 
2962:491 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
2962:492 | DONE dir | na 16 16 | 006ca0 | (6 bytes)   |         .word nt_refill, xt_parse-name, 0066e4 
2962:492 | DONE dir | na 16 16 |        |             |                 90 6c 80 66 e4 66        --  . l . f . f
2962:493 | DONE dir | na 16 16 | 006ca6 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
2962:493 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
2962:493 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
2962:494 | DONE wsp | na 16 16 |        |             |
2962:495 | DONE lbl | na 16 16 | 006cb0 |             | nt_source-id                         
2962:496 | DONE dir | na 16 16 | 006cb0 | (2 bytes)   |         .byte 9, { PW + NC }         
2962:496 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2962:497 | DONE dir | na 16 16 | 006cb2 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 0067dc 
2962:497 | DONE dir | na 16 16 |        |             |                 9e 6c d6 67 dc 67        --  . l . g . g
2962:498 | DONE dir | na 16 16 | 006cb8 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
2962:498 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
2962:498 | DONE dir | na 16 16 |        |             |                 64                       --  d
2962:499 | DONE wsp | na 16 16 |        |             |
2962:500 | DONE lbl | na 16 16 | 006cc1 |             | nt_comma                             
2962:501 | DONE dir | na 16 16 | 006cc1 | (2 bytes)   |         .byte 1, { PW + NC }         
2962:501 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:502 | DONE dir | na 16 16 | 006cc3 | (6 bytes)   |         .word nt_source-id, xt_comma, 0061a6 
2962:502 | DONE dir | na 16 16 |        |             |                 b0 6c 9b 61 a6 61        --  . l . a . a
2962:503 | DONE dir | na 16 16 | 006cc9 | (1 bytes)   |         .byte 2c                     
2962:503 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
2962:504 | DONE wsp | na 16 16 |        |             |
2962:505 | DONE lbl | na 16 16 | 006cca |             | nt_accept                            
2962:506 | DONE dir | na 16 16 | 006cca | (2 bytes)   |         .byte 6, 00                  TODO check flags
2962:506 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
2962:507 | DONE dir | na 16 16 | 006ccc | (6 bytes)   |         .word nt_comma, xt_accept, 006357 
2962:507 | DONE dir | na 16 16 |        |             |                 c1 6c d4 62 57 63        --  . l . b W c
2962:508 | DONE dir | na 16 16 | 006cd2 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
2962:508 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
2962:509 | DONE wsp | na 16 16 |        |             |
2962:510 | DONE lbl | na 16 16 | 006cd8 |             | nt_tuck                              
2962:511 | DONE dir | na 16 16 | 006cd8 | (2 bytes)   |         .byte 4, { PW + NC }         
2962:511 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:512 | DONE dir | na 16 16 | 006cda | (6 bytes)   |         .word nt_accept, xt_tuck, 00680f 
2962:512 | DONE dir | na 16 16 |        |             |                 ca 6c 07 68 0f 68        --  . l . h . h
2962:513 | DONE dir | na 16 16 | 006ce0 | (4 bytes)   |         .byte 74, 75, 63, 6b         
2962:513 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
2962:514 | DONE wsp | na 16 16 |        |             |
2962:515 | DONE lbl | na 16 16 | 006ce4 |             | nt_nip                               
2962:516 | DONE dir | na 16 16 | 006ce4 | (2 bytes)   |         .byte 3, { PW + NC }         
2962:516 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2962:517 | DONE dir | na 16 16 | 006ce6 | (6 bytes)   |         .word nt_tuck, xt_nip, 006658 
2962:517 | DONE dir | na 16 16 |        |             |                 d8 6c 56 66 58 66        --  . l V f X f
2962:518 | DONE dir | na 16 16 | 006cec | (3 bytes)   |         .byte 6e, 69, 70             
2962:518 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
2962:519 | DONE wsp | na 16 16 |        |             |
2962:520 | DONE lbl | na 16 16 | 006cef |             | nt_rot                               
2962:521 | DONE dir | na 16 16 | 006cef | (2 bytes)   |         .byte 3, { PW + NC }         
2962:521 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2962:522 | DONE dir | na 16 16 | 006cf1 | (6 bytes)   |         .word nt_nip, xt_rot, 006755 
2962:522 | DONE dir | na 16 16 |        |             |                 e4 6c 4d 67 55 67        --  . l M g U g
2962:523 | DONE dir | na 16 16 | 006cf7 | (3 bytes)   |         .byte 72, 6f, 74             
2962:523 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
2962:524 | DONE wsp | na 16 16 |        |             |
2962:525 | DONE lbl | na 16 16 | 006cfa |             | nt_execute                           
2962:526 | DONE dir | na 16 16 | 006cfa | (2 bytes)   |         .byte 7, { PW + NC }         
2962:526 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2962:527 | DONE dir | na 16 16 | 006cfc | (6 bytes)   |         .word nt_rot, xt_execute, 00657c 
2962:527 | DONE dir | na 16 16 |        |             |                 ef 6c 72 65 7c 65        --  . l r e | e
2962:528 | DONE dir | na 16 16 | 006d02 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
2962:528 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
2962:529 | DONE wsp | na 16 16 |        |             |
2962:530 | DONE lbl | na 16 16 | 006d09 |             | nt_here                              
2962:531 | DONE dir | na 16 16 | 006d09 | (2 bytes)   |         .byte 4, { PW + NC }         
2962:531 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:532 | DONE dir | na 16 16 | 006d0b | (6 bytes)   |         .word nt_execute, xt_here, 0065e9 
2962:532 | DONE dir | na 16 16 |        |             |                 fa 6c e3 65 e9 65        --  . l . e . e
2962:533 | DONE dir | na 16 16 | 006d11 | (4 bytes)   |         .byte 68, 65, 72, 65         
2962:533 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
2962:534 | DONE wsp | na 16 16 |        |             |
2962:535 | DONE lbl | na 16 16 | 006d15 |             | nt_2drop                             
2962:536 | DONE dir | na 16 16 | 006d15 | (2 bytes)   |         .byte 5, { PW + NC }         
2962:536 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2962:537 | DONE dir | na 16 16 | 006d17 | (6 bytes)   |         .word nt_here, xt_2drop, 0062a3 
2962:537 | DONE dir | na 16 16 |        |             |                 09 6d 9d 62 a3 62        --  	 m . b . b
2962:538 | DONE dir | na 16 16 | 006d1d | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
2962:538 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
2962:539 | DONE wsp | na 16 16 |        |             |
2962:540 | DONE lbl | na 16 16 | 006d22 |             | nt_over                              
2962:541 | DONE dir | na 16 16 | 006d22 | (2 bytes)   |         .byte 4, { PW + NC }         
2962:541 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:542 | DONE dir | na 16 16 | 006d24 | (6 bytes)   |         .word nt_2drop, xt_over, 006666 
2962:542 | DONE dir | na 16 16 |        |             |                 15 6d 60 66 66 66        --  . m ` f f f
2962:543 | DONE dir | na 16 16 | 006d2a | (4 bytes)   |         .byte 6f, 76, 65, 72         
2962:543 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
2962:544 | DONE wsp | na 16 16 |        |             |
2962:545 | DONE lbl | na 16 16 | 006d2e |             | nt_fetch                             
2962:546 | DONE dir | na 16 16 | 006d2e | (2 bytes)   |         .byte 1, { PW + NC }         
2962:546 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:547 | DONE dir | na 16 16 | 006d30 | (6 bytes)   |         .word nt_over, xt_fetch, 0061f9 
2962:547 | DONE dir | na 16 16 |        |             |                 22 6d f5 61 f9 61        --  " m . a . a
2962:548 | DONE dir | na 16 16 | 006d36 | (1 bytes)   |         .byte 40                     
2962:548 | DONE dir | na 16 16 |        |             |                 40                       --  @
2962:549 | DONE wsp | na 16 16 |        |             |
2962:550 | DONE lbl | na 16 16 | 006d37 |             | nt_store                             
2962:551 | DONE dir | na 16 16 | 006d37 | (2 bytes)   |         .byte 1, { PW + NC }         
2962:551 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2962:552 | DONE dir | na 16 16 | 006d39 | (6 bytes)   |         .word nt_fetch, xt_store, 0061f4 
2962:552 | DONE dir | na 16 16 |        |             |                 2e 6d e9 61 f4 61        --  . m . a . a
2962:553 | DONE dir | na 16 16 | 006d3f | (1 bytes)   |         .byte 21                     
2962:553 | DONE dir | na 16 16 |        |             |                 21                       --  !
2962:554 | DONE wsp | na 16 16 |        |             |
2962:555 | DONE lbl | na 16 16 | 006d40 |             | nt_swap                              
2962:556 | DONE dir | na 16 16 | 006d40 | (2 bytes)   |         .byte 4, { PW + NC }         
2962:556 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:557 | DONE dir | na 16 16 | 006d42 | (6 bytes)   |         .word nt_store, xt_swap, 0067fe 
2962:557 | DONE dir | na 16 16 |        |             |                 37 6d f9 67 fe 67        --  7 m . g . g
2962:558 | DONE dir | na 16 16 | 006d48 | (4 bytes)   |         .byte 73, 77, 61, 70         
2962:558 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
2962:559 | DONE wsp | na 16 16 |        |             |
2962:560 | DONE lbl | na 16 16 | 006d4c |             | nt_dup                               
2962:561 | DONE dir | na 16 16 | 006d4c | (2 bytes)   |         .byte 3, { PW + NC }         
2962:561 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2962:562 | DONE dir | na 16 16 | 006d4e | (6 bytes)   |         .word nt_swap, xt_dup, 00653f 
2962:562 | DONE dir | na 16 16 |        |             |                 40 6d 3b 65 3f 65        --  @ m ; e ? e
2962:563 | DONE dir | na 16 16 | 006d54 | (3 bytes)   |         .byte 64, 75, 70             
2962:563 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
2962:564 | DONE wsp | na 16 16 |        |             |
2962:565 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
2962:566 | DONE lbl | na 16 16 | 006d57 |             | nt_drop                              
2962:567 | DONE dir | na 16 16 | 006d57 | (2 bytes)   |         .byte 4, { PW + NC }         
2962:567 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2962:568 | DONE dir | na 16 16 | 006d59 | (6 bytes)   |         .word nt_dup, xt_drop, 006513 
2962:568 | DONE dir | na 16 16 |        |             |                 4c 6d 0f 65 13 65        --  L m . e . e
2962:569 | DONE dir | na 16 16 | 006d5f | (4 bytes)   |         .byte 64, 72, 6f, 70         
2962:569 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
2962:570 | DONE wsp | na 16 16 |        |             |
2962:571 | DONE cmt | na 16 16 |        |             | ; END
2963:000 | DONE wsp | na 16 16 |        |             |
2964:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2965:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
2966:000 | DONE wsp | na 16 16 |        |             |
2967:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2968:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
2969:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
2970:000 | DONE cmt | na 16 16 |        |             | ; the stack
2971:000 | DONE lbl | na 16 16 | 006d63 |             | doconst                              
2972:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2973:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2974:000 | DONE ins | na 16 16 | 006d63 | ca          |                 dex                  make room on Data Stack
2975:000 | DONE ins | na 16 16 | 006d64 | ca          |                 dex                  
2976:000 | DONE ins | na 16 16 | 006d65 | 94 00       |                 sty.dx 00            
2977:000 | DONE wsp | na 16 16 |        |             |
2978:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
2979:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
2980:000 | DONE ins | na 16 16 | 006d67 | 68          |                 pla                  get the return address
2981:000 | DONE ins | na 16 16 | 006d68 | 85 16       |                 sta.d 000216         
2982:000 | DONE wsp | na 16 16 |        |             |
2983:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
2984:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
2985:000 | DONE ins | na 16 16 | 006d6a | a0 01 00    |                 ldy.# 0001           
2986:000 | DONE ins | na 16 16 | 006d6d | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2987:000 | DONE ins | na 16 16 | 006d6f | a8          |                 tay                  
2988:000 | DONE wsp | na 16 16 |        |             |
2989:000 | DONE ins | na 16 16 | 006d70 | 60          |                 rts                  takes us to original caller
2990:000 | DONE wsp | na 16 16 |        |             |
2991:000 | DONE wsp | na 16 16 |        |             |
2992:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2993:000 | DONE cmt | na 16 16 |        |             | ; DODOES
2994:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
2995:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
2996:000 | DONE lbl | na 16 16 | 006d71 |             | dodoes                               
2997:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
2998:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
2999:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
3000:000 | DONE cmt | na 16 16 |        |             |                 ; works
3001:000 | DONE ins | na 16 16 | 006d71 | 68          |                 pla                  
3002:000 | DONE ins | na 16 16 | 006d72 | 1a          |                 inc.a                
3003:000 | DONE ins | na 16 16 | 006d73 | 85 1a       |                 sta.d 00021a         
3004:000 | DONE wsp | na 16 16 |        |             |
3005:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
3006:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
3007:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
3008:000 | DONE ins | na 16 16 | 006d75 | ca          |                 dex                  
3009:000 | DONE ins | na 16 16 | 006d76 | ca          |                 dex                  
3010:000 | DONE ins | na 16 16 | 006d77 | 94 00       |                 sty.dx 00            
3011:000 | DONE wsp | na 16 16 |        |             |
3012:000 | DONE ins | na 16 16 | 006d79 | 7a          |                 ply                  
3013:000 | DONE ins | na 16 16 | 006d7a | c8          |                 iny                  
3014:000 | DONE wsp | na 16 16 |        |             |
3015:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
3016:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
3017:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
3018:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
3019:000 | DONE ins | na 16 16 | 006d7b | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
3020:000 | DONE wsp | na 16 16 |        |             |
3021:000 | DONE wsp | na 16 16 |        |             |
3022:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3023:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
3024:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
3025:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
3026:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
3027:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
3028:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
3029:000 | DONE lbl | na 16 16 | 006d7e |             | dovar                                
3030:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3031:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3032:000 | DONE ins | na 16 16 | 006d7e | ca          |                 dex                  make room on Data Stack
3033:000 | DONE ins | na 16 16 | 006d7f | ca          |                 dex                  
3034:000 | DONE ins | na 16 16 | 006d80 | 94 00       |                 sty.dx 00            
3035:000 | DONE wsp | na 16 16 |        |             |
3036:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
3037:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
3038:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
3039:000 | DONE ins | na 16 16 | 006d82 | 7a          |                 ply                  value is now TOS
3040:000 | DONE ins | na 16 16 | 006d83 | c8          |                 iny                  add one because of 65816's address handling
3041:000 | DONE wsp | na 16 16 |        |             |
3042:000 | DONE ins | na 16 16 | 006d84 | 60          |                 rts                  takes us to original caller
3043:000 | DONE wsp | na 16 16 |        |             |
3044:000 | DONE wsp | na 16 16 |        |             |
3045:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3046:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
3047:000 | DONE wsp | na 16 16 |        |             |
3048:000 | DONE wsp | na 16 16 |        |             |
3049:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3050:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (AKA INTERPRET)
3051:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
3052:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
3053:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
3054:000 | DONE lbl | na 16 16 | 006d85 |             | compex                               
3055:000 | DONE lbl | na 16 16 | 006d85 |             | compex_loop                          
3056:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3057:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3058:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
3059:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
3060:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
3061:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
3062:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
3063:000 | DONE ins | na 16 16 | 006d85 | 20 80 66    |                 jsr 006680           ( "string" -- addr u )
3064:000 | DONE wsp | na 16 16 |        |             |
3065:000 | DONE cmt | na 16 16 |        |             |                 ; TODO decide if we want to make a copy of the string here so
3066:000 | DONE cmt | na 16 16 |        |             |                 ; that we can provide a better error message
3067:000 | DONE wsp | na 16 16 |        |             |
3068:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
3069:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
3070:000 | DONE ins | na 16 16 | 006d88 | 98          |                 tya                  force flag check
3071:000 | DONE ins | na 16 16 | 006d89 | f0 3f       |                 beq 006dca           
3072:000 | DONE wsp | na 16 16 |        |             |
3073:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
3074:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
3075:000 | DONE ins | na 16 16 | 006d8b | 20 30 6e    |                 jsr 006e30           
3076:000 | DONE wsp | na 16 16 |        |             |
3077:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know
3078:000 | DONE ins | na 16 16 | 006d8e | 20 7d 65    |                 jsr 00657d           ( addr u -- nt | 0 )
3079:000 | DONE wsp | na 16 16 |        |             |
3080:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
3081:000 | DONE ins | na 16 16 | 006d91 | 98          |                 tya                  
3082:000 | DONE ins | na 16 16 | 006d92 | d0 06       |                 bne 006d9a           
3083:000 | DONE wsp | na 16 16 |        |             |
3084:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
3085:000 | DONE wsp | na 16 16 |        |             |
3086:000 | DONE cmt | na 16 16 |        |             |                 ; Number conversion has failed, which means the user screwed up,
3087:000 | DONE cmt | na 16 16 |        |             |                 ; so complain and abort
3088:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print the offending string first
3089:000 | DONE ins | na 16 16 | 006d94 | a9 e9 71    |                 lda.# 0071e9         "Unknown word"
3090:000 | DONE ins | na 16 16 | 006d97 | 4c f7 6d    |                 jmp 006df7           
3091:000 | DONE wsp | na 16 16 |        |             |
3092:000 | DONE lbl | na 16 16 | 006d9a |             | compex_got_name_token                
3093:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
3094:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down. This is a quicker
3095:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
3096:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
3097:000 | DONE ins | na 16 16 | 006d9a | 84 16       |                 sty.d 000216         
3098:000 | DONE ins | na 16 16 | 006d9c | c8          |                 iny                  
3099:000 | DONE ins | na 16 16 | 006d9d | c8          |                 iny                  
3100:000 | DONE ins | na 16 16 | 006d9e | c8          |                 iny                  
3101:000 | DONE ins | na 16 16 | 006d9f | c8          |                 iny                  
3102:000 | DONE ins | na 16 16 | 006da0 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3103:000 | DONE ins | na 16 16 | 006da3 | a8          |                 tay                  xt is TOS
3104:000 | DONE wsp | na 16 16 |        |             |
3105:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
3106:000 | DONE ins | na 16 16 | 006da4 | a5 14       |                 lda.d 000214         
3107:000 | DONE ins | na 16 16 | 006da6 | d0 14       |                 bne 006dbc           
3108:000 | DONE wsp | na 16 16 |        |             |
3109:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
3110:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
3111:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
3112:000 | DONE ins | na 16 16 | 006da8 | b2 16       |                 lda.di 000216        
3113:000 | DONE ins | na 16 16 | 006daa | eb          |                 xba                  flags are MSB
3114:000 | DONE ins | na 16 16 | 006dab | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
3115:000 | DONE ins | na 16 16 | 006dae | f0 06       |                 beq 006db6           
3116:000 | DONE wsp | na 16 16 |        |             |
3117:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
3118:000 | DONE ins | na 16 16 | 006db0 | a9 db 70    |                 lda.# 0070db         
3119:000 | DONE ins | na 16 16 | 006db3 | 4c f7 6d    |                 jmp 006df7           
3120:000 | DONE wsp | na 16 16 |        |             |
3121:000 | DONE lbl | na 16 16 | 006db6 |             | compex_interpret                     
3122:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
3123:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
3124:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
3125:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
3126:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
3127:000 | DONE ins | na 16 16 | 006db6 | 20 72 65    |                 jsr 006572           
3128:000 | DONE wsp | na 16 16 |        |             |
3129:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
3130:000 | DONE ins | na 16 16 | 006db9 | 4c 85 6d    |                 jmp 006d85           
3131:000 | DONE wsp | na 16 16 |        |             |
3132:000 | DONE lbl | na 16 16 | 006dbc |             | compex_compile                       
3133:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
3134:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
3135:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
3136:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
3137:000 | DONE ins | na 16 16 | 006dbc | b2 16       |                 lda.di 000216        
3138:000 | DONE ins | na 16 16 | 006dbe | eb          |                 xba                  flags are MSB
3139:000 | DONE ins | na 16 16 | 006dbf | 29 02 00    |                 and.# IM             Mask all but IM bit
3140:000 | DONE ins | na 16 16 | 006dc2 | d0 f2       |                 bne 006db6           IMMEDIATE word, execute right now
3141:000 | DONE wsp | na 16 16 |        |             |
3142:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
3143:000 | DONE ins | na 16 16 | 006dc4 | 20 21 64    |                 jsr 006421           
3144:000 | DONE wsp | na 16 16 |        |             |
3145:000 | DONE ins | na 16 16 | 006dc7 | 4c 85 6d    |                 jmp 006d85           
3146:000 | DONE wsp | na 16 16 |        |             |
3147:000 | DONE lbl | na 16 16 | 006dca |             | compex_line_done                     
3148:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
3149:000 | DONE ins | na 16 16 | 006dca | b4 02       |                 ldy.dx 02            
3150:000 | DONE ins | na 16 16 | 006dcc | e8          |                 inx                  
3151:000 | DONE ins | na 16 16 | 006dcd | e8          |                 inx                  
3152:000 | DONE ins | na 16 16 | 006dce | e8          |                 inx                  
3153:000 | DONE ins | na 16 16 | 006dcf | e8          |                 inx                  
3154:000 | DONE wsp | na 16 16 |        |             |
3155:000 | DONE ins | na 16 16 | 006dd0 | 60          |                 rts                  
3156:000 | DONE wsp | na 16 16 |        |             |
3157:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3158:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
3159:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
3160:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
3161:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
3162:000 | DONE cmt | na 16 16 |        |             | ;
3163:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
3164:000 | DONE cmt | na 16 16 |        |             | ;
3165:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
3166:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
3167:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
3168:000 | DONE cmt | na 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
3169:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
3170:000 | DONE wsp | na 16 16 |        |             |
3171:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
3172:000 | DONE lbl | na 16 16 | 006dd1 |             | cmpl_word                            
3173:000 | DONE ins | na 16 16 | 006dd1 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
3174:000 | DONE ins | na 16 16 | 006dd4 | 80 08       |                 bra 006dde           
3175:000 | DONE lbl | na 16 16 | 006dd6 |             | cmpl_subroutine                      
3176:000 | DONE ins | na 16 16 | 006dd6 | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
3177:000 | DONE ins | na 16 16 | 006dd9 | 80 03       |                 bra 006dde           
3178:000 | DONE lbl | na 16 16 | 006ddb |             | cmpl_jump                            
3179:000 | DONE ins | na 16 16 | 006ddb | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
3180:000 | DONE lbl | na 16 16 | 006dde |             | cmpl_common                          
3181:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
3182:000 | DONE ins | na 16 16 | 006dde | 84 06       |                 sty.d 000206         
3183:000 | DONE wsp | na 16 16 |        |             |
3184:000 | DONE ins | na 16 16 | 006de0 | a8          |                 tay                  force flag check
3185:000 | DONE ins | na 16 16 | 006de1 | f0 08       |                 beq 006deb           came in through cmpl_word, just compile body
3186:000 | DONE wsp | na 16 16 |        |             |
3187:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
3188:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
3189:000 | DONE ins | na 16 16 | 006de3 | e2 20       |                 sep 20               
3189:001 | DONE ctl | na  8 16 |        |             |         .!a8
3190:000 | DONE ins | na  8 16 | 006de5 | 92 00       |                 sta.di 000200        STA (CP)
3191:000 | DONE ins | na  8 16 | 006de7 | c2 20       |                 rep 20               
3191:001 | DONE ctl | na 16 16 |        |             |         .!a16
3192:000 | DONE ins | na 16 16 | 006de9 | e6 00       |                 inc.d 000200         fall through to cmpl_body
3193:000 | DONE lbl | na 16 16 | 006deb |             | cmpl_body                            
3194:000 | DONE ins | na 16 16 | 006deb | 7a          |                 ply                  the return address we'll need later
3195:000 | DONE wsp | na 16 16 |        |             |
3196:000 | DONE ins | na 16 16 | 006dec | 68          |                 pla                  next value on stack is the word to compile
3197:000 | DONE ins | na 16 16 | 006ded | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
3198:000 | DONE ins | na 16 16 | 006def | e6 00       |                 inc.d 000200         
3199:000 | DONE ins | na 16 16 | 006df1 | e6 00       |                 inc.d 000200         
3200:000 | DONE wsp | na 16 16 |        |             |
3201:000 | DONE ins | na 16 16 | 006df3 | 5a          |                 phy                  make sure we can get back home
3202:000 | DONE wsp | na 16 16 |        |             |
3203:000 | DONE ins | na 16 16 | 006df4 | a4 06       |                 ldy.d 000206         restore Data Stack
3204:000 | DONE wsp | na 16 16 |        |             |
3205:000 | DONE ins | na 16 16 | 006df6 | 60          |                 rts                  
3206:000 | DONE wsp | na 16 16 |        |             |
3207:000 | DONE wsp | na 16 16 |        |             |
3208:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3209:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
3210:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
3211:000 | DONE lbl | na 16 16 | 006df7 |             | error                                
3212:000 | DONE ins | na 16 16 | 006df7 | 20 fd 6d    |                 jsr 006dfd           
3213:000 | DONE ins | na 16 16 | 006dfa | 4c 97 60    |                 jmp 006097           
3214:000 | DONE wsp | na 16 16 |        |             |
3215:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3216:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
3217:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
3218:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
3219:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
3220:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
3221:000 | DONE lbl | na 16 16 | 006dfd |             | print_string                         
3222:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3223:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3224:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
3225:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
3226:000 | DONE ins | na 16 16 | 006dfd | da          |                 phx                  
3227:000 | DONE ins | na 16 16 | 006dfe | aa          |                 tax                  x16 contains address of string
3228:000 | DONE lbl | na 16 16 | 006dff |             | @                                    
3229:000 | DONE ins | na 16 16 | 006dff | e2 20       |                 sep 20               
3229:001 | DONE ctl | na  8 16 |        |             |         .!a8
3230:000 | DONE ins | na  8 16 | 006e01 | bd 00 00    |                 lda.x 0000           LDA $0000,X
3231:000 | DONE ins | na  8 16 | 006e04 | f0 06       |                 beq 006e0c           
3232:000 | DONE ins | na  8 16 | 006e06 | 20 36 60    |                 jsr 006036           
3233:000 | DONE ins | na  8 16 | 006e09 | e8          |                 inx                  
3234:000 | DONE ins | na  8 16 | 006e0a | 80 f3       |                 bra 006dff           
3235:000 | DONE wsp | na  8 16 |        |             |
3236:000 | DONE lbl | na  8 16 | 006e0c |             | print_string_done                    
3237:000 | DONE ins | na  8 16 | 006e0c | a9 0a       |                 lda.# AscLF          should be CR on some systems
3238:000 | DONE ins | na  8 16 | 006e0e | 20 36 60    |                 jsr 006036           
3239:000 | DONE ins | na  8 16 | 006e11 | c2 20       |                 rep 20               
3239:001 | DONE ctl | na 16 16 |        |             |         .!a16
3240:000 | DONE ins | na 16 16 | 006e13 | fa          |                 plx                  
3241:000 | DONE ins | na 16 16 | 006e14 | 60          |                 rts                  
3242:000 | DONE wsp | na 16 16 |        |             |
3243:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3244:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
3245:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
3246:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
3247:000 | DONE lbl | na 16 16 | 006e15 |             | byte_to_ascii                        
3248:000 | DONE ins | na 16 16 | 006e15 | 48          |                 pha                  
3249:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
3250:000 | DONE ins | na 16 16 | 006e16 | 4a          |                 lsr.a                
3251:000 | DONE ins | na 16 16 | 006e17 | 4a          |                 lsr.a                
3252:000 | DONE ins | na 16 16 | 006e18 | 4a          |                 lsr.a                
3253:000 | DONE ins | na 16 16 | 006e19 | 4a          |                 lsr.a                
3254:000 | DONE ins | na 16 16 | 006e1a | 20 1e 6e    |                 jsr 006e1e           
3255:000 | DONE wsp | na 16 16 |        |             |
3256:000 | DONE ins | na 16 16 | 006e1d | 68          |                 pla                  
3257:000 | DONE wsp | na 16 16 |        |             |
3258:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
3259:000 | DONE wsp | na 16 16 |        |             |
3260:000 | DONE wsp | na 16 16 |        |             |
3261:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3262:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
3263:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
3264:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
3265:000 | DONE lbl | na 16 16 | 006e1e |             | nibble_to_ascii                      
3266:000 | DONE ins | na 16 16 | 006e1e | 29 0f 00    |                 and.# 000f           
3267:000 | DONE ins | na 16 16 | 006e21 | 09 30 00    |                 ora.# 30             
3268:000 | DONE ins | na 16 16 | 006e24 | c9 3a 00    |                 cmp.# 003a           '9' + 1
3269:000 | DONE ins | na 16 16 | 006e27 | 90 03       |                 bcc 006e2c           
3270:000 | DONE ins | na 16 16 | 006e29 | 69 06 00    |                 adc.# 0006           
3271:000 | DONE lbl | na 16 16 | 006e2c |             | @                                    
3272:000 | DONE ins | na 16 16 | 006e2c | 20 36 60    |                 jsr 006036           
3273:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3274:000 | DONE ins | na 16 16 | 006e2f | 60          |                 rts                  
3275:000 | DONE wsp | na 16 16 |        |             |
3276:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3277:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
3278:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
3279:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
3280:000 | DONE lbl | na 16 16 | 006e30 |             | string_to_lowercase                  
3281:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
3282:000 | DONE ins | na 16 16 | 006e30 | 60          |                 rts                  
3283:000 | DONE wsp | na 16 16 |        |             |
3284:000 | DONE wsp | na 16 16 |        |             |
3285:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3286:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
3287:000 | DONE wsp | na 16 16 |        |             |
3288:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
3289:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
3290:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
3291:000 | DONE lbl | na 16 16 | 006e31 |             | hi-start                             
3292:000 | DONE cmt | na 16 16 |        |             |         ; High level definitions
3293:000 | DONE dir | na 16 16 | 006e31 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) ( "parens"
3293:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
3293:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
3293:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
3293:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
3293:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
3294:000 | DONE dir | na 16 16 | 006e56 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) .( "dotparens"
3294:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
3294:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
3294:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
3294:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
3294:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
3295:000 | DONE dir | na 16 16 | 006e7b | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) IF
3295:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
3295:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
3295:000 | DONE dir | na 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
3295:000 | DONE dir | na 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
3295:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
3295:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
3295:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
3295:000 | DONE dir | na 16 16 |        |             |                                          -- 
3296:000 | DONE dir | na 16 16 | 006eb3 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) THEN
3296:000 | DONE dir | na 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
3296:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
3296:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
3296:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3296:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3296:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3297:000 | DONE dir | na 16 16 | 006edf | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) ELSE
3297:000 | DONE dir | na 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
3297:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
3297:000 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
3297:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
3297:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
3297:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
3297:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3297:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3297:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3298:000 | DONE dir | na 16 16 | 006f23 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) REPEAT
3298:000 | DONE dir | na 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
3298:000 | DONE dir | na 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
3298:000 | DONE dir | na 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
3298:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
3298:000 | DONE dir | na 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
3298:000 | DONE dir | na 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
3298:000 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
3298:000 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
3299:000 | DONE dir | na 16 16 | 006f60 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) UNTIL
3299:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
3299:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3299:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
3299:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
3299:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3299:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3299:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3300:000 | DONE dir | na 16 16 | 006f94 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) WHILE
3300:000 | DONE dir | na 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
3300:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3300:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
3300:000 | DONE dir | na 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
3300:000 | DONE dir | na 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
3300:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
3300:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
3300:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
3300:000 | DONE dir | na 16 16 |        |             |                                          -- 
3301:000 | DONE wsp | na 16 16 |        |             |
3302:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings
3303:000 | DONE dir | na 16 16 | 006fd4 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
3303:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
3303:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
3303:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
3303:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
3303:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
3304:000 | DONE dir | na 16 16 | 006ff7 | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
3304:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
3304:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
3304:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
3304:000 | DONE dir | na 16 16 |        |             |                 31 38 2e 20 46 65 62 20  --  1 8 .   F e b  
3304:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
3305:000 | DONE dir | na 16 16 | 00701c | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
3305:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
3305:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
3305:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
3305:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
3305:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
3305:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
3305:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
3306:000 | DONE dir | na 16 16 | 00704f | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
3306:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
3306:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
3306:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
3306:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
3306:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
3306:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
3306:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
3307:000 | DONE dir | na 16 16 | 007083 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
3307:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
3307:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
3307:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
3307:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
3308:000 | DONE lbl | na 16 16 | 00709f |             | hi-end                               
3309:000 | DONE wsp | na 16 16 |        |             |
3310:000 | DONE wsp | na 16 16 |        |             |
3311:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3312:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
3313:000 | DONE wsp | na 16 16 |        |             |
3314:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
3314:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
3314:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
3314:003 | DONE cmt | na 16 16 |        |             | ; This version:  15. Feb 2017
3314:004 | DONE wsp | na 16 16 |        |             |
3314:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
3314:006 | DONE wsp | na 16 16 |        |             |
3314:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3314:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
3314:009 | DONE wsp | na 16 16 |        |             |
3314:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
3314:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
3314:012 | DONE cmt | na 16 16 |        |             | ; character
3314:013 | DONE wsp | na 16 16 |        |             |
3314:014 | DONE lbl | na 16 16 | 00709f |             | s_ok                                 
3314:015 | DONE dir | na 16 16 | 00709f | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
3314:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
3314:016 | DONE lbl | na 16 16 | 0070a3 |             | s_compiled                           
3314:017 | DONE dir | na 16 16 | 0070a3 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
3314:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
3314:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
3314:018 | DONE wsp | na 16 16 |        |             |
3314:019 | DONE wsp | na 16 16 |        |             |
3314:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3314:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
3314:022 | DONE wsp | na 16 16 |        |             |
3314:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
3314:024 | DONE wsp | na 16 16 |        |             |
3314:025 | DONE lbl | na 16 16 | 0070ad |             | es_allot                             
3314:026 | DONE dir | na 16 16 | 0070ad | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
3314:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
3314:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
3314:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
3314:027 | DONE lbl | na 16 16 | 0070c1 |             | es_channel                           
3314:028 | DONE dir | na 16 16 | 0070c1 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
3314:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
3314:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
3314:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
3314:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
3314:029 | DONE lbl | na 16 16 | 0070db |             | es_componly                          
3314:030 | DONE dir | na 16 16 | 0070db | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
3314:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
3314:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
3314:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3314:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
3314:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
3314:031 | DONE lbl | na 16 16 | 0070fc |             | es_defer                             
3314:032 | DONE dir | na 16 16 | 0070fc | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
3314:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
3314:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
3314:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
3314:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
3314:033 | DONE lbl | na 16 16 | 007119 |             | es_divzero                           
3314:034 | DONE dir | na 16 16 | 007119 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
3314:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
3314:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
3314:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
3314:035 | DONE lbl | na 16 16 | 00712a |             | es_error                             
3314:036 | DONE dir | na 16 16 | 00712a | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
3314:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
3314:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
3314:037 | DONE lbl | na 16 16 | 007136 |             | es_intonly                           
3314:038 | DONE dir | na 16 16 | 007136 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
3314:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
3314:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
3314:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
3314:039 | DONE lbl | na 16 16 | 00714c |             | es_noname                            
3314:040 | DONE dir | na 16 16 | 00714c | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
3314:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
3314:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
3314:040 | DONE dir | na 16 16 |        |             |                                          -- 
3314:041 | DONE lbl | na 16 16 | 00715c |             | es_radix                             
3314:042 | DONE dir | na 16 16 | 00715c | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
3314:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
3314:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
3314:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
3314:043 | DONE lbl | na 16 16 | 007173 |             | es_refill1                           
3314:044 | DONE dir | na 16 16 | 007173 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
3314:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
3314:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
3314:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
3314:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
3314:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
3314:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
3314:045 | DONE lbl | na 16 16 | 0071a1 |             | es_refill2                           
3314:046 | DONE dir | na 16 16 | 0071a1 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
3314:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
3314:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
3314:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
3314:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
3314:046 | DONE dir | na 16 16 |        |             |                                          -- 
3314:047 | DONE lbl | na 16 16 | 0071c1 |             | es_state                             
3314:048 | DONE dir | na 16 16 | 0071c1 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
3314:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
3314:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
3314:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
3314:048 | DONE dir | na 16 16 |        |             |                                          -- 
3314:049 | DONE lbl | na 16 16 | 0071d9 |             | es_underflow                         
3314:050 | DONE dir | na 16 16 | 0071d9 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
3314:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
3314:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
3314:050 | DONE dir | na 16 16 |        |             |                                          -- 
3314:051 | DONE lbl | na 16 16 | 0071e9 |             | es_syntax                            
3314:052 | DONE dir | na 16 16 | 0071e9 | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
3314:052 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
3314:052 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
3314:052 | DONE dir | na 16 16 |        |             |                                          -- 
3314:053 | DONE wsp | na 16 16 |        |             |
3314:054 | DONE wsp | na 16 16 |        |             |
3314:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3314:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
3314:057 | DONE wsp | na 16 16 |        |             |
3314:058 | DONE lbl | na 16 16 | 0071f9 |             | vt100_page                           
3314:059 | DONE dir | na 16 16 | 0071f9 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
3314:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
3314:060 | DONE lbl | na 16 16 | 0071fe |             | vt100_home                           
3314:061 | DONE dir | na 16 16 | 0071fe | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
3314:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
3314:062 | DONE wsp | na 16 16 |        |             |
3314:063 | DONE wsp | na 16 16 |        |             |
3314:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3314:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
3314:066 | DONE wsp | na 16 16 |        |             |
3314:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
3314:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
3314:069 | DONE wsp | na 16 16 |        |             |
3314:070 | DONE lbl | na 16 16 | 007202 |             | tests_prev_cmd                       
3314:071 | DONE dir | na 16 16 | 007202 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
3314:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
3314:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
3314:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
3314:072 | DONE lbl | na 16 16 | 007215 |             | tests_next_cmd                       
3314:073 | DONE dir | na 16 16 | 007215 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
3314:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
3314:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
3314:074 | DONE wsp | na 16 16 |        |             |
3314:075 | DONE wsp | na 16 16 |        |             |
3314:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3314:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
3314:078 | DONE wsp | na 16 16 |        |             |
3314:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
3314:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
3314:081 | DONE wsp | na 16 16 |        |             |
3314:082 | DONE lbl | na 16 16 | 007224 |             | alphastr                             
3314:083 | DONE dir | na 16 16 | 007224 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
3314:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
3314:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
3314:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
3314:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
3314:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
3315:000 | DONE wsp | na 16 16 |        |             |
3316:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3317:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
3318:000 | DONE wsp | na 16 16 |        |             |
3319:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
3320:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
3321:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
3322:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
3323:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
3324:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
3325:000 | DONE wsp | na 16 16 |        |             |
3326:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
3327:000 | DONE cmt | na 16 16 |        |             |                 ; tya
3328:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
3329:000 | DONE cmt | na 16 16 |        |             |                 ; xba
3330:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
3331:000 | DONE cmt | na 16 16 |        |             |                 ; tya
3332:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
3333:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
3334:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
3335:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
3336:000 | DONE wsp | na 16 16 |        |             |
3337:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
3338:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
3339:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
3340:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
3341:000 | DONE wsp | na 16 16 |        |             |
3342:000 | DONE wsp | na 16 16 |        |             |
3343:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3344:000 | DONE cmt | na 16 16 |        |             | ; END
3345:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 00633a
- accept_eol                  : 006332
- accept_loop                 : 0062e7
- accept_nonzero              : 0062da
- allot_done                  : 006390
- allot_error                 : 00637f
- allot_minus                 : 006385
- allot_real_gone             : 006392
- alphastr                    : 007224
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- branch_rt                   : 0063c3
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006e15
- char_got_char               : 00640c
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 006deb
- cmpl_common                 : 006dde
- cmpl_jump                   : 006ddb
- cmpl_subroutine             : 006dd6
- cmpl_word                   : 006dd1
- co                          : 000004
- compex                      : 006d85
- compex_compile              : 006dbc
- compex_got_name_token       : 006d9a
- compex_interpret            : 006db6
- compex_line_done            : 006dca
- compex_loop                 : 006d85
- compile_as_code             : 006421
- compile_as_jump             : 006421
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 00646f
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 006d63
- dodoes                      : 006d71
- does_rt                     : 0064f9
- dots_done                   : 006197
- dots_loop                   : 00617d
- dots_not_empty              : 006177
- dovar                       : 006d7e
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 00651c
- dump_done                   : 006531
- dump_line_loop              : 006516
- equal_not                   : 00622c
- error                       : 006df7
- es_allot                    : 0070ad
- es_channel                  : 0070c1
- es_componly                 : 0070db
- es_defer                    : 0070fc
- es_divzero                  : 007119
- es_error                    : 00712a
- es_intonly                  : 007136
- es_noname                   : 00714c
- es_radix                    : 00715c
- es_refill1                  : 007173
- es_refill2                  : 0071a1
- es_state                    : 0071c1
- es_syntax                   : 0071e9
- es_underflow                : 0071d9
- execute_ip                  : 00656f
- find-name_all_chars         : 0065ab
- find-name_char_nomatcnt_8   : 0065a7
- find-name_chars             : 00659c
- find-name_done              : 0065d1
- find-name_failure_16        : 0065ce
- find-name_loop              : 006587
- find-name_next_entry        : 006590
- find-name_success           : 0065c8
- get_chr                     : 006047
- get_chr_wait                : 00604c
- have_chr?                   : 006056
- hi-end                      : 00709f
- hi-start                    : 006e31
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- literal_rt                  : 006602
- max_drop                    : 00661d
- max_nip                     : 00661f
- max_no_ov                   : 00661b
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 006630
- min_nip                     : 006632
- min_no_ov                   : 00662e
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 006e1e
- not-equal_equal             : 0060fc
- nt_2drop                    : 006d15
- nt_2dup                     : 006ade
- nt_abort                    : 0068f6
- nt_abs                      : 006aea
- nt_accept                   : 006cca
- nt_again                    : 006a67
- nt_allot                    : 006aa3
- nt_and                      : 006ba4
- nt_base                     : 00698e
- nt_begin                    : 006a74
- nt_bell                     : 0068a9
- nt_bl                       : 00693f
- nt_bracketchar              : 0069e6
- nt_brackettick              : 0069db
- nt_branch                   : 006a59
- nt_bye                      : 006879
- nt_c-comma                  : 006baf
- nt_c-fetch                  : 006bb9
- nt_c-store                  : 006bc3
- nt_cells                    : 0069aa
- nt_char                     : 006b83
- nt_cold                     : 006884
- nt_colon                    : 006a9a
- nt_comma                    : 006cc1
- nt_compile-only             : 006a03
- nt_compilecomma             : 006a81
- nt_constant                 : 006b28
- nt_count                    : 0068e9
- nt_cr                       : 006935
- nt_create                   : 006abd
- nt_decimal                  : 0068b5
- nt_depth                    : 006b1b
- nt_does                     : 006ab0
- nt_dot                      : 00697a
- nt_dotquote                 : 0069b7
- nt_dots                     : 006964
- nt_drop                     : 006d57
- nt_dump                     : 00689d
- nt_dup                      : 006d4c
- nt_equal                    : 006c42
- nt_evaluate                 : 00699a
- nt_execute                  : 006cfa
- nt_false                    : 006c4b
- nt_fetch                    : 006d2e
- nt_find-name                : 006c7f
- nt_greater                  : 006c1c
- nt_here                     : 006d09
- nt_hex                      : 0068c4
- nt_immediate                : 006a17
- nt_invert                   : 006b75
- nt_leftbracket              : 006a41
- nt_less                     : 006c25
- nt_literal                  : 0069f4
- nt_max                      : 006b5c
- nt_min                      : 006b51
- nt_minus                    : 006bd7
- nt_name-int                 : 006925
- nt_name-string              : 006acb
- nt_negate                   : 006b67
- nt_nip                      : 006ce4
- nt_not-equal                : 006c38
- nt_one                      : 006c6d
- nt_one-minus                : 006be9
- nt_one-plus                 : 006bf3
- nt_or                       : 006b9a
- nt_over                     : 006d22
- nt_pad                      : 006983
- nt_page                     : 0068dd
- nt_parse                    : 006903
- nt_parse-name               : 006c9e
- nt_plus                     : 006be0
- nt_postpone                 : 006a28
- nt_question                 : 00691c
- nt_quit                     : 006910
- nt_refill                   : 006c90
- nt_rightbracket             : 006a38
- nt_rot                      : 006cef
- nt_semicolon                : 006a91
- nt_sliteral                 : 0069cb
- nt_source                   : 006b0d
- nt_source-id                : 006cb0
- nt_space                    : 006957
- nt_spaces                   : 006949
- nt_squote                   : 0069c1
- nt_state                    : 006af5
- nt_store                    : 006d37
- nt_swap                     : 006d40
- nt_tick                     : 006b48
- nt_to-in                    : 006b02
- nt_true                     : 006c58
- nt_tuck                     : 006cd8
- nt_two                      : 006c64
- nt_two-star                 : 006bcd
- nt_type                     : 00696e
- nt_unused                   : 0068cf
- nt_variable                 : 006b38
- nt_words                    : 006890
- nt_xor                      : 006b8f
- nt_zbranch                  : 006a4a
- nt_zero                     : 006c76
- nt_zero-equal               : 006c2e
- nt_zero-less                : 006c12
- nt_zero-more                : 006c08
- nt_zero-notequal            : 006bfd
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 006692
- parse-name_found            : 0066a6
- parse-name_loop             : 006685
- parse_found_delimiter       : 0066d2
- parse_loop                  : 0066c5
- parse_reached_eol           : 0066d6
- physicalram                 : 007fff
- piblen                      : 000210
- pp_got_nt                   : 0066fb
- pp_got_word                 : 0066f0
- pp_not_immediate            : 00670b
- print_string                : 006dfd
- print_string_done           : 006e0c
- put_chr                     : 006036
- put_chr_wait                : 00603c
- pw                          : 000008
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 006746
- refill_src_not_kbd          : 00673d
- reset_hardware              : 006000
- s_compiled                  : 0070a3
- s_ok                        : 00709f
- sl_loop                     : 006788
- sliteral_rt                 : 0067b3
- spaces_done                 : 0067ec
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- string_to_lowercase         : 006e30
- tests_next_cmd              : 007215
- tests_prev_cmd              : 007202
- tick_have_nt                : 0062c7
- tick_have_word              : 0062bb
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 00682a
- type_loop                   : 00681e
- vt100_home                  : 0071fe
- vt100_page                  : 0071f9
- words_loop                  : 006854
- workword                    : 00021e
- xt_2drop                    : 00629d
- xt_2dup                     : 0062a4
- xt_abort                    : 006097
- xt_abs                      : 0062cb
- xt_accept                   : 0062d4
- xt_again                    : 006358
- xt_allot                    : 00636e
- xt_and                      : 006397
- xt_base                     : 00639e
- xt_begin                    : 0063ad
- xt_bell                     : 0063a6
- xt_bl                       : 0063b4
- xt_bracketchar              : 006209
- xt_brackettick              : 0061fa
- xt_branch                   : 0063bc
- xt_bye                      : 0063d2
- xt_c-comma                  : 0063d6
- xt_c-fetch                  : 0063e4
- xt_c-store                  : 0063f0
- xt_char                     : 006400
- xt_cold                     : 006063
- xt_colon                    : 0061a7
- xt_comma                    : 00619b
- xt_compile-only             : 006418
- xt_compilecomma             : 006421
- xt_constant                 : 006434
- xt_count                    : 00644e
- xt_cr                       : 00645d
- xt_create                   : 006464
- xt_decimal                  : 0064d7
- xt_depth                    : 0064dd
- xt_does                     : 0064ec
- xt_dot                      : 00611b
- xt_dotparen                 : 006131
- xt_dotquote                 : 00613f
- xt_dots                     : 006153
- xt_drop                     : 00650f
- xt_dump                     : 006514
- xt_dup                      : 00653b
- xt_equal                    : 006223
- xt_evaluate                 : 006540
- xt_execute                  : 006572
- xt_fetch                    : 0061f5
- xt_find-name                : 00657d
- xt_greater                  : 0060ff
- xt_greater_nip              : 006110
- xt_greater_no_ov            : 00610d
- xt_here                     : 0065e3
- xt_hex                      : 0065ea
- xt_immediate                : 0065d4
- xt_invert                   : 0065dd
- xt_leftbracket              : 006200
- xt_less                     : 0060df
- xt_less_nip                 : 0060f0
- xt_less_no_ov               : 0060ed
- xt_literal                  : 0065f0
- xt_max                      : 00660f
- xt_min                      : 006622
- xt_minus                    : 006218
- xt_name-int                 : 006635
- xt_name-string              : 00663e
- xt_negate                   : 00664f
- xt_nip                      : 006656
- xt_not-equal                : 0060f3
- xt_one                      : 006285
- xt_one-minus                : 00628d
- xt_one-plus                 : 00628f
- xt_or                       : 006659
- xt_over                     : 006660
- xt_pad                      : 006667
- xt_page                     : 006673
- xt_parse                    : 0066b2
- xt_parse-name               : 006680
- xt_plus                     : 006210
- xt_postpone                 : 0066e5
- xt_question                 : 0061e2
- xt_quit                     : 00609f
- xt_refill                   : 00671a
- xt_rightbracket             : 006203
- xt_rot                      : 00674d
- xt_semicolon                : 0061c9
- xt_sliteral                 : 006768
- xt_source                   : 0067c9
- xt_source-id                : 0067d6
- xt_space                    : 0067dd
- xt_spaces                   : 0067e4
- xt_squote                   : 006756
- xt_state                    : 0067f1
- xt_store                    : 0061e9
- xt_swap                     : 0067f9
- xt_tick                     : 0062af
- xt_to-in                    : 006113
- xt_true                     : 0067ff
- xt_tuck                     : 006807
- xt_two                      : 006291
- xt_two-star                 : 006299
- xt_type                     : 006810
- xt_unused                   : 006831
- xt_variable                 : 00683d
- xt_words                    : 00684a
- xt_xor                      : 006872
- xt_zbranch                  : 006266
- xt_zero                     : 00622f
- xt_zero-equal               : 006237
- xt_zero-less                : 006243
- xt_zero-more                : 00625b
- xt_zero-notequal            : 00624f
- z_2drop                     : 0062a3
- z_2dup                      : 0062ae
- z_abort                     : 0060de
- z_abs                       : 0062d3
- z_accept                    : 006357
- z_again                     : 00636d
- z_allot                     : 006396
- z_and                       : 00639d
- z_base                      : 0063a5
- z_begin                     : 0063b3
- z_bell                      : 0063ac
- z_bl                        : 0063bb
- z_bracketchar               : 00620f
- z_brackettick               : 006200
- z_branch                    : 0063c2
- z_bye                       : 0063d5
- z_c-comma                   : 0063e3
- z_c-fetch                   : 0063ef
- z_c-store                   : 0063ff
- z_char                      : 006417
- z_cold                      : 0060de
- z_colon                     : 0061c8
- z_comma                     : 0061a6
- z_compile-only              : 006420
- z_compilecomma              : 006433
- z_constant                  : 00644d
- z_count                     : 00645c
- z_cr                        : 006463
- z_create                    : 0064d6
- z_decimal                   : 0064dc
- z_depth                     : 0064eb
- z_does                      : 0064f8
- z_dot                       : 006130
- z_dotparen                  : 00613e
- z_dotquote                  : 006153
- z_dots                      : 00619a
- z_drop                      : 006513
- z_dump                      : 00653a
- z_dup                       : 00653f
- z_equal                     : 00622e
- z_evaluate                  : 00656e
- z_execute                   : 00657c
- z_fetch                     : 0061f9
- z_find-name                 : 0065d3
- z_greater                   : 006112
- z_here                      : 0065e9
- z_hex                       : 0065ef
- z_immediate                 : 0065dc
- z_invert                    : 0065e2
- z_leftbracket               : 006202
- z_less                      : 0060f2
- z_literal                   : 006601
- z_max                       : 006621
- z_min                       : 006634
- z_minus                     : 006222
- z_name-int                  : 00663d
- z_name-string               : 00664e
- z_negate                    : 006655
- z_nip                       : 006658
- z_not-equal                 : 0060fe
- z_one                       : 00628c
- z_one-minus                 : 00628e
- z_one-plus                  : 006290
- z_or                        : 00665f
- z_over                      : 006666
- z_pad                       : 006672
- z_page                      : 00667f
- z_parse                     : 0066e4
- z_parse-name                : 0066e4
- z_plus                      : 006217
- z_postpone                  : 00671a
- z_question                  : 0061e8
- z_quit                      : 0060de
- z_refill                    : 00674c
- z_rightbracket              : 006208
- z_rot                       : 006755
- z_semicolon                 : 0061e1
- z_sliteral                  : 0067b2
- z_source                    : 0067d5
- z_source-id                 : 0067dc
- z_space                     : 0067e3
- z_spaces                    : 0067f0
- z_squote                    : 006767
- z_state                     : 0067f8
- z_store                     : 0061f4
- z_swap                      : 0067fe
- z_tick                      : 0062ca
- z_to-in                     : 00611a
- z_true                      : 006806
- z_tuck                      : 00680f
- z_two                       : 006298
- z_two-star                  : 00629c
- z_type                      : 006830
- z_unused                    : 00683c
- z_variable                  : 006849
- z_words                     : 006871
- z_xor                       : 006878
- z_zbranch                   : 00626c
- z_zero                      : 006236
- z_zero-equal                : 006242
- z_zero-less                 : 00624e
- z_zero-more                 : 006265
- z_zero-notequal             : 00625a
- zb_done                     : 00627f
- zb_zero                     : 006279
- zbranch_rt                  : 00626d
- ze_not_zero                 : 00623f
- zero-less-is-less           : 00624b
- zero-more_done              : 006264
- zero-more_true              : 006263
- zne_is_zero                 : 006257
