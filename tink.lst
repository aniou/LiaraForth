A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 19. January 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sun Jan 22 15:11:32 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 11
Assembly time: 0.04035 seconds
Code origin: 006000
Bytes of machine code: 1998

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 22. Jan 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 ; start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 04. Jan 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate file kernel.tasm with symbols
  16:011 | DONE cmt | em  8  8 |        |             | ; prefixed with hw_ . No symbol with this prefix may be defined or used outside
  16:012 | DONE cmt | em  8  8 |        |             | ; of that file.
  16:013 | DONE wsp | em  8  8 |        |             |
  16:014 | DONE cmt | em  8  8 |        |             | ; The definitions for multitasking are preliminary and will probably
  16:015 | DONE cmt | em  8  8 |        |             | ; change
  16:016 | DONE wsp | em  8  8 |        |             |
  16:017 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:018 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:019 | DONE wsp | em  8  8 |        |             |
  16:020 | DONE dir | em  8  8 |        |             |         .equ ram0            0200    ; start of available RAM
  16:021 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   ; end of installed RAM
  16:022 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   ; end of available RAM (single task mode)
  16:023 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   ; end of available RAM (multitask mode)
  16:024 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           ; buffer area start
  16:025 | DONE wsp | em  8  8 |        |             |
  16:026 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:027 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:028 | DONE wsp | em  8  8 |        |             |
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffersize 00ff         ; maximum size for input buffers
  16:030 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         ; start of 256 byte input buffer 1
  16:031 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         ; start of 256 byte input buffer 2
  16:032 | DONE wsp | em  8  8 |        |             |
  16:033 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:034 | DONE wsp | em  8  8 |        |             |
  16:035 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 ; single task Direct Page (DP) start
  16:036 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 ; multitask Stack (S) area start
  16:037 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 ; multitask Direct Page (DP) area start
  16:038 | DONE wsp | em  8  8 |        |             |
  16:039 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:040 | DONE wsp | em  8  8 |        |             |
  16:041 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             ; single task Stack (S) start (bottom)
  16:042 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f0             ; initial Data Stack Pointer (X)
  16:043 | DONE wsp | em  8  8 |        |             |
  16:044 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:045 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:046 | DONE wsp | em  8  8 |        |             |
  16:047 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:048 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:049 | DONE wsp | em  8  8 |        |             |
  16:050 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      ; Compiler Pointer, 2 bytes
  16:051 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      ; Dictionary Pointer, 2 bytes
  16:052 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  ; Temporary DSP (X) storage, 2 bytes
  16:053 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  ; Temporary TOS (Y) storage, 2 bytes
  16:054 | DONE dir | em  8  8 |        |             |         .equ ip { 000200 + &8 }      ; Instruction Pointer for EXECUTE
  16:055 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  ; Input Source for SOURCE-ID
  16:056 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    ; Current Input Buffer, 7c00 or 7d00
  16:057 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } ; Length of current input buffer
  16:058 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } ; Length of previous input buffer
  16:059 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   ; Pointer to CIB (>IN in Forth)
  16:060 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  ; STATE: 1 compile, 0 interpret
  16:061 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   ; Temporary storage, usually address
  16:062 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   ; Temporary storage, usually counter
  16:063 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   ; Temporary storage
  16:064 | DONE wsp | em  8  8 |        |             |
  16:065 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:066 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:067 | DONE wsp | em  8  8 |        |             |
  16:068 | DONE cmt | em  8  8 |        |             | ; ASCII character set
  16:069 | DONE wsp | em  8  8 |        |             |
  16:070 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              ; break (Control-C) ASCII character
  16:071 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ; ACSCII bell sound
  16:072 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              ; backspace ASCII character
  16:073 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              ; line feed ASCII character
  16:074 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              ; carriage return ASCII character
  16:075 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ; ASCII CNTR-n (for next command)
  16:076 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ; ASCII CNTR-p (for previous command)
  16:077 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              ; Escape ASCII character
  16:078 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              ; space ASCII character
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              ; DEL ASCII character
  16:080 | DONE wsp | em  8  8 |        |             |
  16:081 | DONE cmt | em  8  8 |        |             | ; Dictionary flags
  16:082 | DONE wsp | em  8  8 |        |             |
  16:083 | DONE dir | em  8  8 |        |             |         .equ PW %10000000            ; Primitive (Native) Word
  16:084 | DONE dir | em  8  8 |        |             |         .equ CO %01000000            ; Compile Only
  16:085 | DONE dir | em  8  8 |        |             |         .equ IM %00100000            ; Immediate Word
  16:086 | DONE dir | em  8  8 |        |             |         .equ NC %00010000            ; Native (inline) Compile
  17:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth
  17:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  17:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  17:003 | DONE cmt | em  8  8 |        |             | ; This version: 04. Jan 2017
  17:004 | DONE wsp | em  8  8 |        |             |
  17:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  17:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  17:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  17:008 | DONE wsp | em  8  8 |        |             |
  17:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  17:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  17:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  17:012 | DONE cmt | em  8  8 |        |             | ; following license:
  17:013 | DONE cmt | em  8  8 |        |             | ;
  17:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  17:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  17:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  17:017 | DONE cmt | em  8  8 |        |             | ;
  17:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  17:019 | DONE wsp | em  8  8 |        |             |
  17:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  17:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  17:022 | DONE wsp | em  8  8 |        |             |
  17:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:024 | DONE cmt | em  8  8 |        |             | ; EMULATOR HOOKS
  17:025 | DONE cmt | em  8  8 |        |             | ; Liara Forth only uses two hardware routines to make porting the code to
  17:026 | DONE cmt | em  8  8 |        |             | ; other systems easier: put_chr and get_chr. The system is currently set up
  17:027 | DONE cmt | em  8  8 |        |             | ; to directly access the hardware. For emulators, uncomment the following lines
  17:028 | DONE cmt | em  8  8 |        |             | ; and comment out the routines below.
  17:029 | DONE wsp | em  8  8 |        |             |
  17:030 | DONE cmt | em  8  8 |        |             | ;       .equ get_chr 0e036  ; Get character: Returns ASCII in A8. Blocks.
  17:031 | DONE cmt | em  8  8 |        |             | ;       .equ put_chr 0e04b  ; Put character: ASCII of character -> A8
  17:032 | DONE wsp | em  8  8 |        |             |
  17:033 | DONE wsp | em  8  8 |        |             |
  17:034 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:035 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  17:036 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  17:037 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  17:038 | DONE wsp | em  8  8 |        |             |
  17:039 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  17:040 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  17:041 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  17:042 | DONE cmt | em  8  8 |        |             | ;
  17:043 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  17:044 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  17:045 | DONE wsp | em  8  8 |        |             |
  17:046 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  17:047 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  17:048 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  17:049 | DONE wsp | em  8  8 |        |             |
  17:050 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           ; 19200 baud
  17:051 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  17:052 | DONE wsp | em  8  8 |        |             |
  17:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           ; Port 0 Data Register
  17:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           ; Port 1 Data Register
  17:055 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           ; Port 2 Data Register
  17:056 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           ; Port 3 Data Register
  17:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           ; Port 0 Data Direction Register
  17:058 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           ; Port 1 Data Direction Register
  17:059 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           ; Port 2 Data Direction Register
  17:060 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           ; Port 3 Data Direction Register
  17:061 | DONE wsp | em  8  8 |        |             |
  17:062 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           ; Port 4 Data Register
  17:063 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           ; Port 5 Data Register
  17:064 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           ; Port 6 Data Register
  17:065 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           ; Port 7 Data Register
  17:066 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           ; Port 4 Data Direction Register
  17:067 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           ; Port 5 Data Direction Register
  17:068 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           ; Port 6 Data Direction Register
  17:069 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           ; Port 7 Chip Select
  17:070 | DONE wsp | em  8  8 |        |             |
  17:071 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           ; Bus Control Register
  17:072 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           ; System Speed Control Register
  17:073 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           ; Timer Control Register
  17:074 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           ; Timer Enable Register
  17:075 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           ; Timer Interrupt Flag Register
  17:076 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           ; Edge Interrupt Flag Register
  17:077 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           ; Timer Interrupt Enable Register
  17:078 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           ; Edge Interrupt Enable Register
  17:079 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           ; UART Interrupt Flag Register
  17:080 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           ; UART Interrupt Enable Register
  17:081 | DONE wsp | em  8  8 |        |             |
  17:082 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           ; Timer 0 Counter Low
  17:083 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           ; Timer 0 Counter High
  17:084 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           ; Timer 1 Counter Low
  17:085 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           ; Timer 1 Counter High
  17:086 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           ; Timer 2 Counter Low
  17:087 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           ; Timer 2 Counter High
  17:088 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           ; Timer 3 Counter Low
  17:089 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           ; Timer 3 Counter High
  17:090 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           ; Timer 4 Counter Low
  17:091 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           ; Timer 4 Counter High
  17:092 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           ; Timer 5 Counter Low
  17:093 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           ; Timer 5 Counter High
  17:094 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           ; Timer 6 Counter Low
  17:095 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           ; Timer 6 Counter High
  17:096 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           ; Timer 7 Counter Low
  17:097 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           ; Timer 7 Counter High
  17:098 | DONE wsp | em  8  8 |        |             |
  17:099 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          ; UART 0 Control/Status Register
  17:100 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          ; UART 0 Data Register
  17:101 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          ; UART 1 Control/Status Register
  17:102 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          ; UART 1 Data Register
  17:103 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          ; UART 2 Control/Status Register
  17:104 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          ; UART 2 Data Register
  17:105 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          ; UART 3 Control/Status Register
  17:106 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          ; UART 3 Data Register
  17:107 | DONE wsp | em  8  8 |        |             |
  17:108 | DONE wsp | em  8  8 |        |             |
  17:109 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:110 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  17:111 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  17:112 | DONE wsp | em  8  8 |        |             |
  17:113 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  17:114 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  17:115 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  17:116 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  17:117 | DONE ctl | na  8  8 |        |             |         .!native
  17:118 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  17:119 | DONE ctl | na  8 16 |        |             |         .!xy16
  17:120 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  17:121 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  17:122 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  17:123 | DONE wsp | na  8 16 |        |             |
  17:124 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           ; UART Interrupt Enable Register (UIER)
  17:125 | DONE wsp | na  8 16 |        |             |
  17:126 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            ; Ensure A15/AMS are output
  17:127 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           ; Port 4 Data Direction Register (PDD4)
  17:128 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           ; Select bank 0 (Port 4 Data Register, PD4)
  17:129 | DONE wsp | na  8 16 |        |             |
  17:130 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      ; Set UART0 to use timer 3
  17:131 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           ; Timer Control Register (TCR)
  17:132 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    ; And set baud rate
  17:133 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           ; Timer 3 Counter Low (T3CL)
  17:134 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  17:135 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           ; Timer 3 Counter High (T3CH)
  17:136 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             ; Enable timer 3 (1<<3)
  17:137 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           ; Timer Enable Register (TER)
  17:138 | DONE wsp | na  8 16 |        |             |
  17:139 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      ; Set UART0 for 8-N-1
  17:140 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           ; UART 0 Control/Status Register (ACSR0)
  17:141 | DONE wsp | na  8 16 |        |             |
  17:142 | DONE ins | na  8 16 | 00602d | 4c 62 60    |                 jmp 006062           ; we return with A as 8 bits
  17:143 | DONE wsp | na  8 16 |        |             |
  17:144 | DONE wsp | na  8 16 |        |             |
  17:145 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  17:146 | DONE cmt | na  8 16 |        |             | ; PUT_CHR
  17:147 | DONE cmt | na  8 16 |        |             | ; Wait until the last transmission has been completed then send the character
  17:148 | DONE cmt | na  8 16 |        |             | ; in A.
  17:149 | DONE lbl | na  8 16 | 006030 |             | put_chr                              
  17:150 | DONE ins | na  8 16 | 006030 | 48          |                 pha                  ; save the character
  17:151 | DONE ins | na  8 16 | 006031 | 08          |                 php                  ; save register sizes
  17:152 | DONE ins | na  8 16 | 006032 | e2 20       |                 sep 20               
  17:153 | DONE ctl | na  8 16 |        |             |         .!a8
  17:154 | DONE ins | na  8 16 | 006034 | 48          |                 pha                  
  17:155 | DONE ins | na  8 16 | 006035 | a9 02       |                 lda.# 02             ; (1<<1)
  17:156 | DONE wsp | na  8 16 |        |             |
  17:157 | DONE lbl | na  8 16 | 006037 |             | put_chr_wait                         
  17:158 | DONE ins | na  8 16 | 006037 | 2c 48 df    |                 bit 00df48           ; timer finished?
  17:159 | DONE ins | na  8 16 | 00603a | f0 fb       |                 beq 006037           
  17:160 | DONE wsp | na  8 16 |        |             |
  17:161 | DONE ins | na  8 16 | 00603c | 68          |                 pla                  
  17:162 | DONE ins | na  8 16 | 00603d | 8d 71 df    |                 sta 00df71           ; transmit char
  17:163 | DONE ins | na  8 16 | 006040 | 28          |                 plp                  
  17:164 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  ; restore A register content
  17:165 | DONE wsp | na  8 16 |        |             |
  17:166 | DONE ins | na  8 16 | 006042 | 60          |                 rts                  
  17:167 | DONE wsp | na  8 16 |        |             |
  17:168 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  17:169 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  17:170 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  17:171 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  17:172 | DONE lbl | na  8 16 | 006043 |             | get_chr                              
  17:173 | DONE ins | na  8 16 | 006043 | 08          |                 php                  ; Save register sizes
  17:174 | DONE ins | na  8 16 | 006044 | e2 20       |                 sep 20               
  17:175 | DONE ctl | na  8 16 |        |             |         .!a8
  17:176 | DONE ins | na  8 16 | 006046 | a9 01       |                 lda.# 01             ; (1<<0)
  17:177 | DONE wsp | na  8 16 |        |             |
  17:178 | DONE lbl | na  8 16 | 006048 |             | get_chr_wait                         
  17:179 | DONE ins | na  8 16 | 006048 | 2c 48 df    |                 bit 00df48           ; Any data in RX buffer?
  17:180 | DONE ins | na  8 16 | 00604b | f0 fb       |                 beq 006048           ; No, keep waiting
  17:181 | DONE ins | na  8 16 | 00604d | ad 71 df    |                 lda 00df71           ; Yes, read it
  17:182 | DONE ins | na  8 16 | 006050 | 28          |                 plp                  
  17:183 | DONE wsp | na  8 16 |        |             |
  17:184 | DONE ins | na  8 16 | 006051 | 60          |                 rts                  
  17:185 | DONE wsp | na  8 16 |        |             |
  17:186 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  17:187 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  17:188 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  17:189 | DONE cmt | na  8 16 |        |             | ; some.
  17:190 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  17:191 | DONE wsp | na  8 16 |        |             |
  17:192 | DONE lbl | na  8 16 | 006052 |             | have_chr?                            
  17:193 | DONE ins | na  8 16 | 006052 | 48          |                 pha                  ; save caller's A
  17:194 | DONE ins | na  8 16 | 006053 | 08          |                 php                  
  17:195 | DONE ins | na  8 16 | 006054 | e2 20       |                 sep 20               
  17:196 | DONE ctl | na  8 16 |        |             |         .!a8
  17:197 | DONE ins | na  8 16 | 006056 | ad 48 df    |                 lda 00df48           ; read the status register
  17:198 | DONE ins | na  8 16 | 006059 | 28          |                 plp                  
  17:199 | DONE ins | na  8 16 | 00605a | 6a          |                 ror.a                ; shift hw_uart0r bit into carry
  17:200 | DONE ins | na  8 16 | 00605b | c2 20       |                 rep 20               
  17:201 | DONE ctl | na 16 16 |        |             |         .!a16
  17:202 | DONE ins | na 16 16 | 00605d | 68          |                 pla                  ; restore A
  17:203 | DONE ins | na 16 16 | 00605e | 60          |                 rts                  
  17:204 | DONE wsp | na 16 16 |        |             |
  17:205 | DONE cmt | na 16 16 |        |             | ; END
  18:000 | DONE wsp | na 16 16 |        |             |
  19:000 | DONE wsp | na 16 16 |        |             |
  20:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  21:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  22:000 | DONE wsp | na 16 16 |        |             |
  23:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  24:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  25:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  26:000 | DONE wsp | na 16 16 |        |             |
  27:000 | DONE wsp | na 16 16 |        |             |
  28:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  29:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  30:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system. TODO determine how to compile this word
  31:000 | DONE wsp | na 16 16 |        |             |
  32:000 | DONE lbl | na 16 16 | 00605f |             | a_cold                               
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE ins | na 16 16 | 00605f | 4c 00 60    |                 jmp 006000           ; don't use JSR, jump back to start
  35:000 | DONE lbl | na 16 16 | 006062 |             | start                                
  36:000 | DONE wsp | na 16 16 |        |             |
  37:000 | DONE ins | na 16 16 | 006062 | 18          |                 clc                  
  37:001 | DONE ins | na 16 16 | 006063 | fb          |                 xce                  
  37:002 | DONE ctl | na 16 16 |        |             |         .!native
  38:000 | DONE ins | na 16 16 | 006064 | c2 30       |                 rep 30               
  38:001 | DONE ctl | na 16 16 |        |             |         .!a16
  38:002 | DONE ctl | na 16 16 |        |             |         .!xy16
  39:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  40:000 | DONE wsp | na 16 16 |        |             |
  41:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  42:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  43:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up CP
  44:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate PAD
  45:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate high-level words
  47:000 | DONE wsp | na 16 16 |        |             |
  48:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  49:000 | DONE cmt | na 16 16 |        |             |                 ; clean Dictionary, so we start off the Dictionary Pointer (DP)
  50:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  51:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  52:000 | DONE ins | na 16 16 | 006067 | a9 3d 65    |                 lda.# 00653d         
  53:000 | DONE ins | na 16 16 | 00606a | 85 02       |                 sta.d 000202         
  54:000 | DONE wsp | na 16 16 |        |             |
  55:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  56:000 | DONE ins | na 16 16 | 00606c | a9 00 7c    |                 lda.# 007c00         ; start with first input buffer
  57:000 | DONE ins | na 16 16 | 00606f | 85 0c       |                 sta.d 00020c         
  58:000 | DONE ins | na 16 16 | 006071 | 64 0e       |                 stz.d 00020e         ; current input buffer is empty
  59:000 | DONE ins | na 16 16 | 006073 | 64 10       |                 stz.d 000210         ; previous input buffer is empty
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; print boot strings
  62:000 | DONE ins | na 16 16 | 006075 | a9 a9 65    |                 lda.# 0065a9         
  63:000 | DONE ins | na 16 16 | 006078 | 20 75 65    |                 jsr 006575           
  64:000 | DONE ins | na 16 16 | 00607b | a9 c9 65    |                 lda.# 0065c9         
  65:000 | DONE ins | na 16 16 | 00607e | 20 75 65    |                 jsr 006575           
  66:000 | DONE ins | na 16 16 | 006081 | a9 e8 65    |                 lda.# 0065e8         
  67:000 | DONE ins | na 16 16 | 006084 | 20 75 65    |                 jsr 006575           
  68:000 | DONE ins | na 16 16 | 006087 | a9 15 66    |                 lda.# 006615         
  69:000 | DONE ins | na 16 16 | 00608a | 20 75 65    |                 jsr 006575           
  70:000 | DONE ins | na 16 16 | 00608d | a9 43 66    |                 lda.# 006643         
  71:000 | DONE ins | na 16 16 | 006090 | 20 75 65    |                 jsr 006575           
  72:000 | DONE wsp | na 16 16 |        |             |
  73:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to QUIT
  74:000 | DONE wsp | na 16 16 |        |             |
  75:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  76:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 6+ bytes / 6+ cycles
  77:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  78:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  79:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
  80:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
  81:000 | DONE wsp | na 16 16 |        |             |
  82:000 | DONE lbl | na 16 16 | 006093 |             | a_abort                              
  83:000 | DONE ins | na 16 16 | 006093 | 18          |                 clc                  
  83:001 | DONE ins | na 16 16 | 006094 | fb          |                 xce                  
  83:002 | DONE ctl | na 16 16 |        |             |         .!native
  84:000 | DONE ins | na 16 16 | 006095 | c2 20       |                 rep 20               
  84:001 | DONE ctl | na 16 16 |        |             |         .!a16
  85:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
  86:000 | DONE ins | na 16 16 | 006097 | a0 00 00    |                 ldy.# 0000           
  87:000 | DONE ins | na 16 16 | 00609a | a2 f0 02    |                 ldx.# 0002f0         
  88:000 | DONE wsp | na 16 16 |        |             |
  89:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
  90:000 | DONE wsp | na 16 16 |        |             |
  91:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  92:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
  93:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
  94:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
  95:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
  96:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output.
  97:000 | DONE wsp | na 16 16 |        |             |
  98:000 | DONE lbl | na 16 16 | 00609d |             | a_quit                               ; clear Return Stack
  99:000 | DONE ins | na 16 16 | 00609d | a9 ff 7f    |                 lda.# 007fff         
 100:000 | DONE ins | na 16 16 | 0060a0 | 1b          |                 tcs                  
 101:000 | DONE wsp | na 16 16 |        |             |
 102:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 103:000 | DONE ins | na 16 16 | 0060a1 | 64 08       |                 stz.d 000208         
 104:000 | DONE wsp | na 16 16 |        |             |
 105:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 106:000 | DONE ins | na 16 16 | 0060a3 | 64 0a       |                 stz.d 00020a         
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 109:000 | DONE ins | na 16 16 | 0060a5 | 64 14       |                 stz.d 000214         
 110:000 | DONE wsp | na 16 16 |        |             |
 111:000 | DONE cmt | na 16 16 |        |             |                 ; TEST TODO REMOVE ONCE WE HAVE FIND-NAME ETC WORKING
 112:000 | DONE ins | na 16 16 | 0060a7 | 20 4e 63    |                 jsr 00634e           
 113:000 | DONE ins | na 16 16 | 0060aa | 20 b0 61    |                 jsr 0061b0           
 114:000 | DONE wsp | na 16 16 |        |             |
 115:000 | DONE lbl | na 16 16 | 0060ad |             | quit_get_line                        
 116:000 | DONE cmt | na 16 16 |        |             |                 ; empty current input buffer. Note the previous input line is
 117:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 118:000 | DONE ins | na 16 16 | 0060ad | 64 0e       |                 stz.d 00020e         
 119:000 | DONE wsp | na 16 16 |        |             |
 120:000 | DONE cmt | na 16 16 |        |             |                 ; accept a line from the current input source
 121:000 | DONE ins | na 16 16 | 0060af | 20 b5 62    |                 jsr 0062b5           
 122:000 | DONE wsp | na 16 16 |        |             |
 123:000 | DONE ins | na 16 16 | 0060b2 | 98          |                 tya                  ; force flag test of TOS
 124:000 | DONE ins | na 16 16 | 0060b3 | d0 06       |                 bne 0060bb           
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 127:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 128:000 | DONE cmt | na 16 16 |        |             |                 ; need to save A because we're going to clober it anyway when we
 129:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 130:000 | DONE ins | na 16 16 | 0060b5 | a9 15 67    |                 lda.# 006715         
 131:000 | DONE ins | na 16 16 | 0060b8 | 4c 6f 65    |                 jmp 00656f           
 132:000 | DONE wsp | na 16 16 |        |             |
 133:000 | DONE wsp | na 16 16 |        |             |
 134:000 | DONE lbl | na 16 16 | 0060bb |             | quit_refill_successful               
 135:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 136:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 137:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 138:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 139:000 | DONE ins | na 16 16 | 0060bb | b4 00       |                 ldy.dx 00            ; drop TOS
 140:000 | DONE ins | na 16 16 | 0060bd | e8          |                 inx                  
 141:000 | DONE ins | na 16 16 | 0060be | e8          |                 inx                  
 142:000 | DONE wsp | na 16 16 |        |             |
 143:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 144:000 | DONE ins | na 16 16 | 0060bf | 64 12       |                 stz.d 000212         
 145:000 | DONE wsp | na 16 16 |        |             |
 146:000 | DONE cmt | na 16 16 |        |             |                 ; TESTING TALI FORTH F_COMPEXE BEGINS HERE
 147:000 | DONE ins | na 16 16 | 0060c1 | 20 49 65    |                 jsr 006549           
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE cmt | na 16 16 |        |             |                 ; TODO testing
 150:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well
 151:000 | DONE ins | na 16 16 | 0060c4 | a9 56 66    |                 lda.# 006656         
 152:000 | DONE ins | na 16 16 | 0060c7 | 20 75 65    |                 jsr 006575           
 153:000 | DONE wsp | na 16 16 |        |             |
 154:000 | DONE cmt | na 16 16 |        |             |                 ; get next line
 155:000 | DONE ins | na 16 16 | 0060ca | 4c ad 60    |                 jmp 0060ad           
 156:000 | DONE wsp | na 16 16 |        |             |
 157:000 | DONE lbl | na 16 16 | 0060cd |             | z_cold                               
 158:000 | DONE lbl | na 16 16 | 0060cd |             | z_abort                              
 159:000 | DONE lbl | na 16 16 | 0060cd |             | z_quit                               
 159:001 | DONE ins | na 16 16 | 0060cd | ea          |                 nop                  ; dummy for compilation, TODO test if required
 160:000 | DONE wsp | na 16 16 |        |             |
 161:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 162:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / X cycles
 163:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 164:000 | DONE wsp | na 16 16 |        |             |
 165:000 | DONE lbl | na 16 16 | 0060ce |             | a_to-in                              
 165:001 | DONE ins | na 16 16 | 0060ce | ca          |                 dex                  
 166:000 | DONE ins | na 16 16 | 0060cf | ca          |                 dex                  
 167:000 | DONE ins | na 16 16 | 0060d0 | 94 00       |                 sty.dx 00            
 168:000 | DONE wsp | na 16 16 |        |             |
 169:000 | DONE ins | na 16 16 | 0060d2 | a0 12 02    |                 ldy.# 000212         ; >IN
 170:000 | DONE lbl | na 16 16 | 0060d5 |             | z_to-in                              
 170:001 | DONE ins | na 16 16 | 0060d5 | 60          |                 rts                  
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 173:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 174:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 175:000 | DONE wsp | na 16 16 |        |             |
 176:000 | DONE lbl | na 16 16 | 0060d6 |             | a_plus                               
 176:001 | DONE ins | na 16 16 | 0060d6 | 98          |                 tya                  
 177:000 | DONE ins | na 16 16 | 0060d7 | 18          |                 clc                  
 178:000 | DONE ins | na 16 16 | 0060d8 | 75 00       |                 adc.dx 00            
 179:000 | DONE ins | na 16 16 | 0060da | a8          |                 tay                  
 180:000 | DONE ins | na 16 16 | 0060db | e8          |                 inx                  
 181:000 | DONE ins | na 16 16 | 0060dc | e8          |                 inx                  
 182:000 | DONE wsp | na 16 16 |        |             |
 183:000 | DONE lbl | na 16 16 | 0060dd |             | z_plus                               
 183:001 | DONE ins | na 16 16 | 0060dd | 60          |                 rts                  
 184:000 | DONE wsp | na 16 16 |        |             |
 185:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 186:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 187:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE lbl | na 16 16 | 0060de |             | a_zero                               
 190:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 191:000 | DONE ins | na 16 16 | 0060de | ca          |                 dex                  
 192:000 | DONE ins | na 16 16 | 0060df | ca          |                 dex                  
 193:000 | DONE ins | na 16 16 | 0060e0 | 94 00       |                 sty.dx 00            
 194:000 | DONE ins | na 16 16 | 0060e2 | a0 00 00    |                 ldy.# 0000           
 195:000 | DONE wsp | na 16 16 |        |             |
 196:000 | DONE lbl | na 16 16 | 0060e5 |             | z_zero                               
 196:001 | DONE ins | na 16 16 | 0060e5 | 60          |                 rts                  
 197:000 | DONE wsp | na 16 16 |        |             |
 198:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 199:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 200:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 201:000 | DONE wsp | na 16 16 |        |             |
 202:000 | DONE lbl | na 16 16 | 0060e6 |             | a_one                                
 203:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 204:000 | DONE ins | na 16 16 | 0060e6 | ca          |                 dex                  
 205:000 | DONE ins | na 16 16 | 0060e7 | ca          |                 dex                  
 206:000 | DONE ins | na 16 16 | 0060e8 | 94 00       |                 sty.dx 00            
 207:000 | DONE ins | na 16 16 | 0060ea | a0 01 00    |                 ldy.# 0001           
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE lbl | na 16 16 | 0060ed |             | z_one                                
 209:001 | DONE ins | na 16 16 | 0060ed | 60          |                 rts                  
 210:000 | DONE wsp | na 16 16 |        |             |
 211:000 | DONE wsp | na 16 16 |        |             |
 212:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 213:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 bytes / 2 cycles
 214:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 215:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty.
 216:000 | DONE wsp | na 16 16 |        |             |
 217:000 | DONE lbl | na 16 16 | 0060ee |             | a_one-plus                           
 217:001 | DONE ins | na 16 16 | 0060ee | c8          |                 iny                  
 218:000 | DONE lbl | na 16 16 | 0060ef |             | z_one-plus                           
 218:001 | DONE ins | na 16 16 | 0060ef | 60          |                 rts                  
 219:000 | DONE wsp | na 16 16 |        |             |
 220:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 221:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 222:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 223:000 | DONE wsp | na 16 16 |        |             |
 224:000 | DONE lbl | na 16 16 | 0060f0 |             | a_two                                
 225:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 226:000 | DONE ins | na 16 16 | 0060f0 | ca          |                 dex                  
 227:000 | DONE ins | na 16 16 | 0060f1 | ca          |                 dex                  
 228:000 | DONE ins | na 16 16 | 0060f2 | 94 00       |                 sty.dx 00            
 229:000 | DONE ins | na 16 16 | 0060f4 | a0 02 00    |                 ldy.# 0002           
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE lbl | na 16 16 | 0060f7 |             | z_two                                
 231:001 | DONE ins | na 16 16 | 0060f7 | 60          |                 rts                  
 232:000 | DONE wsp | na 16 16 |        |             |
 233:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 234:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 235:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 236:000 | DONE wsp | na 16 16 |        |             |
 237:000 | DONE lbl | na 16 16 | 0060f8 |             | a_2dup                               
 238:000 | DONE ins | na 16 16 | 0060f8 | ca          |                 dex                  
 239:000 | DONE ins | na 16 16 | 0060f9 | ca          |                 dex                  
 240:000 | DONE ins | na 16 16 | 0060fa | ca          |                 dex                  
 241:000 | DONE ins | na 16 16 | 0060fb | ca          |                 dex                  
 242:000 | DONE ins | na 16 16 | 0060fc | 94 02       |                 sty.dx 02            
 243:000 | DONE ins | na 16 16 | 0060fe | b5 04       |                 lda.dx 04            
 244:000 | DONE ins | na 16 16 | 006100 | 95 00       |                 sta.dx 00            
 245:000 | DONE wsp | na 16 16 |        |             |
 246:000 | DONE lbl | na 16 16 | 006102 |             | z_2dup                               
 246:001 | DONE ins | na 16 16 | 006102 | 60          |                 rts                  
 247:000 | DONE wsp | na 16 16 |        |             |
 248:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 249:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 250:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 251:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received
 252:000 | DONE wsp | na 16 16 |        |             |
 253:000 | DONE lbl | na 16 16 | 006103 |             | a_accept                             
 254:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 255:000 | DONE ins | na 16 16 | 006103 | b5 00       |                 lda.dx 00            ; max number of chars to accept is NOS
 256:000 | DONE ins | na 16 16 | 006105 | d0 04       |                 bne 00610b           
 257:000 | DONE wsp | na 16 16 |        |             |
 258:000 | DONE ins | na 16 16 | 006107 | a8          |                 tay                  ; if we were told to get zero chars, just quit TODO TEST
 259:000 | DONE ins | na 16 16 | 006108 | e8          |                 inx                  
 260:000 | DONE ins | na 16 16 | 006109 | e8          |                 inx                  
 261:000 | DONE ins | na 16 16 | 00610a | 60          |                 rts                  
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE lbl | na 16 16 | 00610b |             | accept_nonzero                       
 264:000 | DONE ins | na 16 16 | 00610b | 85 18       |                 sta.d 000218         ; non-zero number of chars requested, save in tmp2
 265:000 | DONE ins | na 16 16 | 00610d | 84 16       |                 sty.d 000216         ; address of buffer to use in tmp1
 266:000 | DONE ins | na 16 16 | 00610f | a0 00 00    |                 ldy.# 0000           ; TOS is dropped anyway, so don't save Y
 267:000 | DONE ins | na 16 16 | 006112 | e2 20       |                 sep 20               
 267:001 | DONE ctl | na  8 16 |        |             |         .!a8
 268:000 | DONE wsp | na  8 16 |        |             |
 269:000 | DONE lbl | na  8 16 | 006114 |             | accept_loop                          
 270:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 271:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because vt100 terminal
 272:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 273:000 | DONE ins | na  8 16 | 006114 | 20 43 60    |                 jsr 006043           
 274:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 275:000 | DONE ins | na  8 16 | 006117 | c9 0a       |                 cmp.# AscLF          ; we quit on both line feed and carriage return
 276:000 | DONE ins | na  8 16 | 006119 | f0 44       |                 beq 00615f           
 277:000 | DONE ins | na  8 16 | 00611b | c9 0d       |                 cmp.# AscCR          
 278:000 | DONE ins | na  8 16 | 00611d | f0 40       |                 beq 00615f           
 279:000 | DONE wsp | na  8 16 |        |             |
 280:000 | DONE ins | na  8 16 | 00611f | c9 08       |                 cmp.# AscBS          ; BS and DEL do the same thing for the moment
 281:000 | DONE ins | na  8 16 | 006121 | f0 43       |                 beq 006166           
 282:000 | DONE ins | na  8 16 | 006123 | c9 7f       |                 cmp.# AscDEL         
 283:000 | DONE ins | na  8 16 | 006125 | f0 3f       |                 beq 006166           
 284:000 | DONE wsp | na  8 16 |        |             |
 285:000 | DONE ins | na  8 16 | 006127 | c9 03       |                 cmp.# AscCC          ; CTRL-c aborts (see if this is too harsh)
 286:000 | DONE ins | na  8 16 | 006129 | d0 03       |                 bne 00612e           
 287:000 | DONE ins | na  8 16 | 00612b | 4c 93 60    |                 jmp 006093           ; ABORT switches back to 16-bit A
 288:000 | DONE lbl | na  8 16 | 00612e |             | @                                    
 289:000 | DONE ins | na  8 16 | 00612e | c9 1b       |                 cmp.# AscESC         ; ESC aborts (in this version)
 290:000 | DONE ins | na  8 16 | 006130 | d0 03       |                 bne 006135           
 291:000 | DONE ins | na  8 16 | 006132 | 4c 93 60    |                 jmp 006093           ; ABORT switches back to 16-bit A
 292:000 | DONE lbl | na  8 16 | 006135 |             | @                                    
 293:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p, will be used for "previous cmd", TODO
 294:000 | DONE ins | na  8 16 | 006135 | c9 10       |                 cmp.# AscCP          
 295:000 | DONE ins | na  8 16 | 006137 | d0 0c       |                 bne 006145           
 296:000 | DONE ins | na  8 16 | 006139 | c2 20       |                 rep 20               
 296:001 | DONE ctl | na 16 16 |        |             |         .!a16
 297:000 | DONE ins | na 16 16 | 00613b | a9 89 67    |                 lda.# 006789         
 298:000 | DONE ins | na 16 16 | 00613e | 20 75 65    |                 jsr 006575           
 299:000 | DONE ins | na 16 16 | 006141 | e2 20       |                 sep 20               
 299:001 | DONE ctl | na  8 16 |        |             |         .!a8
 300:000 | DONE ins | na  8 16 | 006143 | 80 cf       |                 bra 006114           
 301:000 | DONE wsp | na  8 16 |        |             |
 302:000 | DONE lbl | na  8 16 | 006145 |             | @                                    
 303:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n, will be used for "next cmd", TODO
 304:000 | DONE ins | na  8 16 | 006145 | c9 0e       |                 cmp.# AscCN          
 305:000 | DONE ins | na  8 16 | 006147 | d0 0c       |                 bne 006155           
 306:000 | DONE ins | na  8 16 | 006149 | c2 20       |                 rep 20               
 306:001 | DONE ctl | na 16 16 |        |             |         .!a16
 307:000 | DONE ins | na 16 16 | 00614b | a9 9c 67    |                 lda.# 00679c         
 308:000 | DONE ins | na 16 16 | 00614e | 20 75 65    |                 jsr 006575           
 309:000 | DONE ins | na 16 16 | 006151 | e2 20       |                 sep 20               
 309:001 | DONE ctl | na  8 16 |        |             |         .!a8
 310:000 | DONE ins | na  8 16 | 006153 | 80 bf       |                 bra 006114           
 311:000 | DONE wsp | na  8 16 |        |             |
 312:000 | DONE lbl | na  8 16 | 006155 |             | @                                    
 313:000 | DONE cmt | na  8 16 |        |             |                 ; That's enough, echo character (TODO change to EMIT)
 314:000 | DONE ins | na  8 16 | 006155 | 20 30 60    |                 jsr 006030           ; echo character
 315:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 316:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here or in EMIT
 317:000 | DONE wsp | na  8 16 |        |             |
 318:000 | DONE ins | na  8 16 | 006158 | 91 0c       |                 sta.diy 00020c       ; STA (CIB),Y
 319:000 | DONE ins | na  8 16 | 00615a | c8          |                 iny                  
 320:000 | DONE ins | na  8 16 | 00615b | c4 18       |                 cpy.d 000218         ; reached character limit?
 321:000 | DONE ins | na  8 16 | 00615d | d0 b5       |                 bne 006114           ; fall thru if buffer limit reached
 322:000 | DONE wsp | na  8 16 |        |             |
 323:000 | DONE lbl | na  8 16 | 00615f |             | accept_eol                           
 324:000 | DONE ins | na  8 16 | 00615f | 84 0e       |                 sty.d 00020e         ; Y contains number of chars accepted already
 325:000 | DONE ins | na  8 16 | 006161 | e8          |                 inx                  
 326:000 | DONE ins | na  8 16 | 006162 | e8          |                 inx                  
 327:000 | DONE ins | na  8 16 | 006163 | c2 20       |                 rep 20               
 327:001 | DONE ctl | na 16 16 |        |             |         .!a16
 328:000 | DONE ins | na 16 16 | 006165 | 60          |                 rts                  ; this is the actual return of the routine
 329:000 | DONE wsp | na 16 16 |        |             |
 330:000 | DONE lbl | na 16 16 | 006166 |             | accept_bs                            
 331:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 332:000 | DONE ins | na  8 16 | 006166 | c0 00 00    |                 cpy.# 00             ; buffer empty?
 333:000 | DONE ins | na  8 16 | 006169 | d0 06       |                 bne 006171           
 334:000 | DONE wsp | na  8 16 |        |             |
 335:000 | DONE ins | na  8 16 | 00616b | a9 07       |                 lda.# AscBELL        ; complain and don't delete beyond the start of line
 336:000 | DONE ins | na  8 16 | 00616d | 20 30 60    |                 jsr 006030           
 337:000 | DONE ins | na  8 16 | 006170 | c8          |                 iny                  
 338:000 | DONE lbl | na  8 16 | 006171 |             | @                                    
 339:000 | DONE ins | na  8 16 | 006171 | 88          |                 dey                  
 340:000 | DONE ins | na  8 16 | 006172 | a9 08       |                 lda.# AscBS          ; move back one
 341:000 | DONE ins | na  8 16 | 006174 | 20 30 60    |                 jsr 006030           
 342:000 | DONE ins | na  8 16 | 006177 | a9 20       |                 lda.# AscSP          ; print a space
 343:000 | DONE ins | na  8 16 | 006179 | 20 30 60    |                 jsr 006030           
 344:000 | DONE ins | na  8 16 | 00617c | a9 08       |                 lda.# AscBS          ; move back over space
 345:000 | DONE ins | na  8 16 | 00617e | 20 30 60    |                 jsr 006030           
 346:000 | DONE wsp | na  8 16 |        |             |
 347:000 | DONE ins | na  8 16 | 006181 | 80 91       |                 bra 006114           
 348:000 | DONE wsp | na  8 16 |        |             |
 349:000 | DONE wsp | na  8 16 |        |             |
 350:000 | DONE lbl | na  8 16 | 006183 |             | z_accept                             
 350:001 | DONE ins | na  8 16 | 006183 | 60          |                 rts                  
 351:000 | DONE wsp | na  8 16 |        |             |
 352:000 | DONE wsp | na  8 16 |        |             |
 353:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 354:000 | DONE cmt | na  8 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 355:000 | DONE cmt | na  8 16 |        |             | ; Trigger terminal bell
 356:000 | DONE wsp | na  8 16 |        |             |
 357:000 | DONE lbl | na  8 16 | 006184 |             | a_bell                               
 358:000 | DONE ins | na  8 16 | 006184 | a9 07       |                 lda.# AscBELL        
 359:000 | DONE ins | na  8 16 | 006186 | 20 30 60    |                 jsr 006030           
 360:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 361:000 | DONE lbl | na 16 16 | 006189 |             | z_bell                               
 361:001 | DONE ins | na 16 16 | 006189 | 60          |                 rts                  
 362:000 | DONE wsp | na 16 16 |        |             |
 363:000 | DONE wsp | na 16 16 |        |             |
 364:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 365:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 366:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 367:000 | DONE wsp | na 16 16 |        |             |
 368:000 | DONE lbl | na 16 16 | 00618a |             | a_bl                                 
 368:001 | DONE ins | na 16 16 | 00618a | ca          |                 dex                  
 369:000 | DONE ins | na 16 16 | 00618b | ca          |                 dex                  
 370:000 | DONE ins | na 16 16 | 00618c | 94 00       |                 sty.dx 00            
 371:000 | DONE ins | na 16 16 | 00618e | a0 20 00    |                 ldy.# AscSP          
 372:000 | DONE wsp | na 16 16 |        |             |
 373:000 | DONE lbl | na 16 16 | 006191 |             | z_bl                                 
 373:001 | DONE ins | na 16 16 | 006191 | 60          |                 rts                  
 374:000 | DONE wsp | na 16 16 |        |             |
 375:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 376:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 377:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 378:000 | DONE wsp | na 16 16 |        |             |
 379:000 | DONE lbl | na 16 16 | 006192 |             | a_bye                                
 379:001 | DONE ins | na 16 16 | 006192 | 00 00       |                 brk 00               ; status byte 00 required for assembler
 380:000 | DONE lbl | na 16 16 | 006194 |             | z_bye                                
 380:001 | DONE ins | na 16 16 | 006194 | 60          |                 rts                  ; dummy for compiling, never reached
 381:000 | DONE wsp | na 16 16 |        |             |
 382:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 383:000 | DONE cmt | na 16 16 |        |             | ; COMMA "," ( n -- ) 11 bytes / 29 cycles
 384:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 385:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 386:000 | DONE cmt | na 16 16 |        |             | ; aligned
 387:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 388:000 | DONE cmt | na 16 16 |        |             | ;               tya
 389:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 390:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 391:000 | DONE cmt | na 16 16 |        |             | ;               iny
 392:000 | DONE cmt | na 16 16 |        |             | ;               iny
 393:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 394:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 395:000 | DONE cmt | na 16 16 |        |             | ;               inx
 396:000 | DONE cmt | na 16 16 |        |             | ;               inx
 397:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 398:000 | DONE wsp | na 16 16 |        |             |
 399:000 | DONE lbl | na 16 16 | 006195 |             | a_comma                              
 399:001 | DONE ins | na 16 16 | 006195 | 98          |                 tya                  
 400:000 | DONE ins | na 16 16 | 006196 | 92 00       |                 sta.di 000200        ; STA (CP)
 401:000 | DONE ins | na 16 16 | 006198 | e6 00       |                 inc.d 000200         
 402:000 | DONE ins | na 16 16 | 00619a | e6 00       |                 inc.d 000200         
 403:000 | DONE wsp | na 16 16 |        |             |
 404:000 | DONE ins | na 16 16 | 00619c | b4 00       |                 ldy.dx 00            
 405:000 | DONE ins | na 16 16 | 00619e | e8          |                 inx                  
 406:000 | DONE ins | na 16 16 | 00619f | e8          |                 inx                  
 407:000 | DONE wsp | na 16 16 |        |             |
 408:000 | DONE lbl | na 16 16 | 0061a0 |             | z_comma                              
 408:001 | DONE ins | na 16 16 | 0061a0 | 60          |                 rts                  
 409:000 | DONE wsp | na 16 16 |        |             |
 410:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 411:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 412:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 413:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 414:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 415:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 416:000 | DONE wsp | na 16 16 |        |             |
 417:000 | DONE lbl | na 16 16 | 0061a1 |             | a_count                              
 417:001 | DONE ins | na 16 16 | 0061a1 | 98          |                 tya                  
 418:000 | DONE ins | na 16 16 | 0061a2 | 1a          |                 inc.a                ; String address starts one char later
 419:000 | DONE ins | na 16 16 | 0061a3 | ca          |                 dex                  
 420:000 | DONE ins | na 16 16 | 0061a4 | ca          |                 dex                  
 421:000 | DONE ins | na 16 16 | 0061a5 | 95 00       |                 sta.dx 00            ; NOS
 422:000 | DONE wsp | na 16 16 |        |             |
 423:000 | DONE ins | na 16 16 | 0061a7 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y  first byte is length
 424:000 | DONE ins | na 16 16 | 0061aa | eb          |                 xba                  ; move length to LSB
 425:000 | DONE ins | na 16 16 | 0061ab | 29 ff 00    |                 and.# 00ff           ; get rid of whatever was MSB
 426:000 | DONE ins | na 16 16 | 0061ae | a8          |                 tay                  ; TOS
 427:000 | DONE wsp | na 16 16 |        |             |
 428:000 | DONE lbl | na 16 16 | 0061af |             | z_count                              
 428:001 | DONE ins | na 16 16 | 0061af | 60          |                 rts                  
 429:000 | DONE wsp | na 16 16 |        |             |
 430:000 | DONE wsp | na 16 16 |        |             |
 431:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 432:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 433:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 434:000 | DONE wsp | na 16 16 |        |             |
 435:000 | DONE lbl | na 16 16 | 0061b0 |             | a_cr                                 
 436:000 | DONE ins | na 16 16 | 0061b0 | a9 0a 00    |                 lda.# AscLF          ; test with AscCR for emulators
 437:000 | DONE ins | na 16 16 | 0061b3 | 20 30 60    |                 jsr 006030           
 438:000 | DONE ins | na 16 16 | 0061b6 | c2 20       |                 rep 20               
 438:001 | DONE ctl | na 16 16 |        |             |         .!a16
 439:000 | DONE wsp | na 16 16 |        |             |
 440:000 | DONE lbl | na 16 16 | 0061b8 |             | z_cr                                 
 440:001 | DONE ins | na 16 16 | 0061b8 | 60          |                 rts                  
 441:000 | DONE wsp | na 16 16 |        |             |
 442:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 443:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
 444:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
 445:000 | DONE wsp | na 16 16 |        |             |
 446:000 | DONE lbl | na 16 16 | 0061b9 |             | a_drop                               
 447:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 448:000 | DONE ins | na 16 16 | 0061b9 | b4 00       |                 ldy.dx 00            
 449:000 | DONE ins | na 16 16 | 0061bb | e8          |                 inx                  
 450:000 | DONE ins | na 16 16 | 0061bc | e8          |                 inx                  
 451:000 | DONE wsp | na 16 16 |        |             |
 452:000 | DONE lbl | na 16 16 | 0061bd |             | z_drop                               
 452:001 | DONE ins | na 16 16 | 0061bd | 60          |                 rts                  
 453:000 | DONE wsp | na 16 16 |        |             |
 454:000 | DONE wsp | na 16 16 |        |             |
 455:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 456:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
 457:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
 458:000 | DONE wsp | na 16 16 |        |             |
 459:000 | DONE lbl | na 16 16 | 0061be |             | a_dup                                
 460:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 461:000 | DONE ins | na 16 16 | 0061be | ca          |                 dex                  
 462:000 | DONE ins | na 16 16 | 0061bf | ca          |                 dex                  
 463:000 | DONE ins | na 16 16 | 0061c0 | 94 00       |                 sty.dx 00            
 464:000 | DONE wsp | na 16 16 |        |             |
 465:000 | DONE lbl | na 16 16 | 0061c2 |             | z_dup                                
 465:001 | DONE ins | na 16 16 | 0061c2 | 60          |                 rts                  
 466:000 | DONE wsp | na 16 16 |        |             |
 467:000 | DONE wsp | na 16 16 |        |             |
 468:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 469:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
 470:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
 471:000 | DONE wsp | na 16 16 |        |             |
 472:000 | DONE lbl | na 16 16 | 0061c3 |             | a_execute                            
 473:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 474:000 | DONE cmt | na 16 16 |        |             | 		; Store the address we're calling
 475:000 | DONE ins | na 16 16 | 0061c3 | 8c 08 02    |                 sty 000208           
 476:000 | DONE wsp | na 16 16 |        |             |
 477:000 | DONE ins | na 16 16 | 0061c6 | b4 00       |                 ldy.dx 00            
 478:000 | DONE ins | na 16 16 | 0061c8 | e8          |                 inx                  
 479:000 | DONE ins | na 16 16 | 0061c9 | e8          |                 inx                  
 480:000 | DONE wsp | na 16 16 |        |             |
 481:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need, and all the
 482:000 | DONE cmt | na 16 16 |        |             |                 ; Forth commands end with a RTS instruction. We fake the address
 483:000 | DONE cmt | na 16 16 |        |             |                 ; by saving it by hand to the stack
 484:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 485:000 | DONE ins | na 16 16 | 0061ca | a9 d1 61    |                 lda.# 0061d1         
 486:000 | DONE ins | na 16 16 | 0061cd | 48          |                 pha                  
 487:000 | DONE wsp | na 16 16 |        |             |
 488:000 | DONE ins | na 16 16 | 0061ce | 6c 08 02    |                 jmp.i 000208         ; JMP (IP)
 489:000 | DONE wsp | na 16 16 |        |             |
 490:000 | DONE wsp | na 16 16 |        |             |
 491:000 | DONE lbl | na 16 16 | 0061d1 |             | execute_done                         ; keep the NOP here as the landing site for the indirect
 492:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine jump (easier and quicker than adjusting the
 493:000 | DONE cmt | na 16 16 |        |             |                 ; return address on the stack)
 494:000 | DONE ins | na 16 16 | 0061d1 | ea          |                 nop                  
 495:000 | DONE wsp | na 16 16 |        |             |
 496:000 | DONE lbl | na 16 16 | 0061d2 |             | z_execute                            
 496:001 | DONE ins | na 16 16 | 0061d2 | 60          |                 rts                  
 497:000 | DONE wsp | na 16 16 |        |             |
 498:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 499:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
 500:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
 501:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have a_zero/z_zero instead of
 502:000 | DONE cmt | na 16 16 |        |             | ; a_false/z_false
 503:000 | DONE wsp | na 16 16 |        |             |
 504:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 505:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
 506:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
 507:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
 508:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
 509:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
 510:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
 511:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
 512:000 | DONE wsp | na 16 16 |        |             |
 513:000 | DONE lbl | na 16 16 | 0061d3 |             | a_find-name                          
 514:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
 515:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
 516:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
 517:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
 518:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
 519:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
 520:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
 521:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
 522:000 | DONE wsp | na 16 16 |        |             |
 523:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
 524:000 | DONE ins | na 16 16 | 0061d3 | 84 16       |                 sty.d 000216         ; length of mystery string in tmp1, Y now free
 525:000 | DONE ins | na 16 16 | 0061d5 | b4 00       |                 ldy.dx 00            
 526:000 | DONE ins | na 16 16 | 0061d7 | 84 18       |                 sty.d 000218         ; address of mystery string in tmp2, was NOS
 527:000 | DONE ins | na 16 16 | 0061d9 | a4 02       |                 ldy.d 000202         
 528:000 | DONE ins | na 16 16 | 0061db | 84 1a       |                 sty.d 00021a         ; nt of first Dictionary word is in tmp3
 529:000 | DONE ins | na 16 16 | 0061dd | e2 20       |                 sep 20               
 529:001 | DONE ctl | na  8 16 |        |             |         .!a8
 530:000 | DONE wsp | na  8 16 |        |             |
 531:000 | DONE lbl | na  8 16 | 0061df |             | find-name_loop                       
 532:000 | DONE cmt | na  8 16 |        |             |                 ; First quick test: Are strings the same length?
 533:000 | DONE ins | na  8 16 | 0061df | b2 1a       |                 lda.di 00021a        ; LSB byte in first header word is length
 534:000 | DONE ins | na  8 16 | 0061e1 | c5 16       |                 cmp.d 000216         ; we test LSB
 535:000 | DONE ins | na  8 16 | 0061e3 | d0 35       |                 bne 00621a           
 536:000 | DONE wsp | na  8 16 |        |             |
 537:000 | DONE cmt | na  8 16 |        |             |                 ; Strings are same length, so second quick test: Is the first
 538:000 | DONE cmt | na  8 16 |        |             |                 ; char the same?
 539:000 | DONE ins | na  8 16 | 0061e5 | a0 08 00    |                 ldy.# 0008           ; name string starts eight bytes from top
 540:000 | DONE ins | na  8 16 | 0061e8 | b1 1a       |                 lda.diy 00021a       ; LDA (TMP3),Y
 541:000 | DONE ins | na  8 16 | 0061ea | d2 18       |                 cmp.di 000218        ; CMP (TMP2)
 542:000 | DONE ins | na  8 16 | 0061ec | d0 2c       |                 bne 00621a           
 543:000 | DONE wsp | na  8 16 |        |             |
 544:000 | DONE cmt | na  8 16 |        |             |                 ; Save original address of Dictionary entry
 545:000 | DONE ins | na  8 16 | 0061ee | a4 1a       |                 ldy.d 00021a         
 546:000 | DONE ins | na  8 16 | 0061f0 | 5a          |                 phy                  
 547:000 | DONE wsp | na  8 16 |        |             |
 548:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
 549:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
 550:000 | DONE ins | na  8 16 | 0061f1 | a5 16       |                 lda.d 000216         ; put a copy of length into TOS just in case
 551:000 | DONE ins | na  8 16 | 0061f3 | 3a          |                 dec.a                ; faster and shorter than CMP.# 01
 552:000 | DONE ins | na  8 16 | 0061f4 | f0 1c       |                 beq 006212           
 553:000 | DONE wsp | na  8 16 |        |             |
 554:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
 555:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long, so
 556:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
 557:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
 558:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
 559:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
 560:000 | DONE wsp | na  8 16 |        |             |
 561:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
 562:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
 563:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit, and
 564:000 | DONE cmt | na  8 16 |        |             |                 ; switching back for the sum uses 12 bytes and 18 cycles.
 565:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A would use 13 bytes and 18
 566:000 | DONE cmt | na  8 16 |        |             |                 ; cycles.
 567:000 | DONE cmt | na  8 16 |        |             |                 ;       lda.d tmp3              ; LSB
 568:000 | DONE cmt | na  8 16 |        |             |                 ;       clc
 569:000 | DONE cmt | na  8 16 |        |             |                 ;       adc.# 08
 570:000 | DONE cmt | na  8 16 |        |             |                 ;       sta.d tmp3
 571:000 | DONE cmt | na  8 16 |        |             |                 ;       lda.d { tmp3 + 1 }      ; MSB
 572:000 | DONE cmt | na  8 16 |        |             |                 ;       adc.# 00                ; we only need the carry
 573:000 | DONE cmt | na  8 16 |        |             |                 ;       sta.d { tmp3 + 1 }
 574:000 | DONE cmt | na  8 16 |        |             |                 ; Any which way, this is frustrating.
 575:000 | DONE ins | na  8 16 | 0061f6 | c2 20       |                 rep 20               
 575:001 | DONE ctl | na 16 16 |        |             |         .!a16
 576:000 | DONE ins | na 16 16 | 0061f8 | a5 1a       |                 lda.d 00021a         
 577:000 | DONE ins | na 16 16 | 0061fa | 18          |                 clc                  
 578:000 | DONE ins | na 16 16 | 0061fb | 69 08 00    |                 adc.# 0008           
 579:000 | DONE ins | na 16 16 | 0061fe | 85 1a       |                 sta.d 00021a         
 580:000 | DONE wsp | na 16 16 |        |             |
 581:000 | DONE ins | na 16 16 | 006200 | a5 16       |                 lda.d 000216         ; get length of strings as loop index
 582:000 | DONE ins | na 16 16 | 006202 | 29 ff 00    |                 and.# 00ff           ; paranoid
 583:000 | DONE ins | na 16 16 | 006205 | 3a          |                 dec.a                ; first index is length minus 1
 584:000 | DONE ins | na 16 16 | 006206 | a8          |                 tay                  
 585:000 | DONE ins | na 16 16 | 006207 | e2 20       |                 sep 20               
 585:001 | DONE ctl | na  8 16 |        |             |         .!a8
 586:000 | DONE wsp | na  8 16 |        |             |
 587:000 | DONE lbl | na  8 16 | 006209 |             | find-name_char_loop                  
 588:000 | DONE ins | na  8 16 | 006209 | b1 18       |                 lda.diy 000218       ; LDA (TMP2),Y last char of mystery string
 589:000 | DONE ins | na  8 16 | 00620b | d1 1a       |                 cmp.diy 00021a       ; CMP (TMP3),Y last char of word string
 590:000 | DONE ins | na  8 16 | 00620d | d0 08       |                 bne 006217           
 591:000 | DONE ins | na  8 16 | 00620f | 88          |                 dey                  ; start of string (Y=0) was already tested
 592:000 | DONE ins | na  8 16 | 006210 | d0 f7       |                 bne 006209           
 593:000 | DONE wsp | na  8 16 |        |             |
 594:000 | DONE cmt | na  8 16 |        |             |                 ; if we reach here, the strings are the same and we have a match
 595:000 | DONE lbl | na  8 16 | 006212 |             | find-name_success                    
 596:000 | DONE ins | na  8 16 | 006212 | 7a          |                 ply                  ; header address (nt) of the found word in TOS
 597:000 | DONE ins | na  8 16 | 006213 | e8          |                 inx                  ; drop the address from NOS (this is NIP)
 598:000 | DONE ins | na  8 16 | 006214 | e8          |                 inx                  
 599:000 | DONE ins | na  8 16 | 006215 | 80 18       |                 bra 00622f           
 600:000 | DONE wsp | na  8 16 |        |             |
 601:000 | DONE lbl | na  8 16 | 006217 |             | find-name_char_mismatch              
 602:000 | DONE ins | na  8 16 | 006217 | 7a          |                 ply                  ; original address of dictionary word
 603:000 | DONE ins | na  8 16 | 006218 | 84 1a       |                 sty.d 00021a         ; put it back in tmp3, fall thru
 604:000 | DONE wsp | na  8 16 |        |             |
 605:000 | DONE lbl | na  8 16 | 00621a |             | find-name_next_word                  
 606:000 | DONE cmt | na  8 16 |        |             |                 ; the address of the next word is two bytes below the current
 607:000 | DONE cmt | na  8 16 |        |             |                 ; nt, which we have saved in tmp3. There is no LDY (TMP3), so we
 608:000 | DONE cmt | na  8 16 |        |             |                 ; have to do this the hard way
 609:000 | DONE ins | na  8 16 | 00621a | e6 1a       |                 inc.d 00021a         
 610:000 | DONE ins | na  8 16 | 00621c | e6 1a       |                 inc.d 00021a         
 611:000 | DONE ins | na  8 16 | 00621e | c2 20       |                 rep 20               
 611:001 | DONE ctl | na 16 16 |        |             |         .!a16
 612:000 | DONE ins | na 16 16 | 006220 | b2 1a       |                 lda.di 00021a        
 613:000 | DONE ins | na 16 16 | 006222 | f0 06       |                 beq 00622a           ; zero nt marks end of Dictionary
 614:000 | DONE ins | na 16 16 | 006224 | 85 1a       |                 sta.d 00021a         
 615:000 | DONE ins | na 16 16 | 006226 | e2 20       |                 sep 20               
 615:001 | DONE ctl | na  8 16 |        |             |         .!a8
 616:000 | DONE ins | na  8 16 | 006228 | 80 b5       |                 bra 0061df           
 617:000 | DONE wsp | na  8 16 |        |             |
 618:000 | DONE lbl | na  8 16 | 00622a |             | find-name_failure                    
 619:000 | DONE ins | na  8 16 | 00622a | e8          |                 inx                  
 620:000 | DONE ins | na  8 16 | 00622b | e8          |                 inx                  
 621:000 | DONE ins | na  8 16 | 00622c | a0 00 00    |                 ldy.# 0000           ; return zero, fall thru
 622:000 | DONE wsp | na  8 16 |        |             |
 623:000 | DONE lbl | na  8 16 | 00622f |             | find-name_done                       
 624:000 | DONE ins | na  8 16 | 00622f | c2 20       |                 rep 20               
 624:001 | DONE ctl | na 16 16 |        |             |         .!a16
 625:000 | DONE lbl | na 16 16 | 006231 |             | z_find-name                          
 625:001 | DONE ins | na 16 16 | 006231 | 60          |                 rts                  
 626:000 | DONE wsp | na 16 16 |        |             |
 627:000 | DONE wsp | na 16 16 |        |             |
 628:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 629:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
 630:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
 631:000 | DONE wsp | na 16 16 |        |             |
 632:000 | DONE lbl | na 16 16 | 006232 |             | a_here                               
 633:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 634:000 | DONE ins | na 16 16 | 006232 | ca          |                 dex                  
 635:000 | DONE ins | na 16 16 | 006233 | ca          |                 dex                  
 636:000 | DONE ins | na 16 16 | 006234 | 94 00       |                 sty.dx 00            
 637:000 | DONE wsp | na 16 16 |        |             |
 638:000 | DONE ins | na 16 16 | 006236 | a4 00       |                 ldy.d 000200         
 639:000 | DONE wsp | na 16 16 |        |             |
 640:000 | DONE lbl | na 16 16 | 006238 |             | z_here                               
 640:001 | DONE ins | na 16 16 | 006238 | 60          |                 rts                  
 641:000 | DONE wsp | na 16 16 |        |             |
 642:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 643:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
 644:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
 645:000 | DONE wsp | na 16 16 |        |             |
 646:000 | DONE lbl | na 16 16 | 006239 |             | a_name>int                           
 647:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 648:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
 649:000 | DONE ins | na 16 16 | 006239 | c8          |                 iny                  
 650:000 | DONE ins | na 16 16 | 00623a | c8          |                 iny                  
 651:000 | DONE ins | na 16 16 | 00623b | c8          |                 iny                  
 652:000 | DONE ins | na 16 16 | 00623c | c8          |                 iny                  
 653:000 | DONE wsp | na 16 16 |        |             |
 654:000 | DONE lbl | na 16 16 | 00623d |             | z_name>int                           
 654:001 | DONE ins | na 16 16 | 00623d | 60          |                 rts                  
 655:000 | DONE wsp | na 16 16 |        |             |
 656:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 657:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
 658:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
 659:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
 660:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
 661:000 | DONE lbl | na 16 16 | 00623e |             | a_name>string                        
 662:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 663:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 664:000 | DONE ins | na 16 16 | 00623e | ca          |                 dex                  ; move NOS down one
 665:000 | DONE ins | na 16 16 | 00623f | ca          |                 dex                  
 666:000 | DONE wsp | na 16 16 |        |             |
 667:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
 668:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
 669:000 | DONE ins | na 16 16 | 006240 | 98          |                 tya                  
 670:000 | DONE ins | na 16 16 | 006241 | 18          |                 clc                  
 671:000 | DONE ins | na 16 16 | 006242 | 69 08 00    |                 adc.# 0008           
 672:000 | DONE ins | na 16 16 | 006245 | 95 00       |                 sta.dx 00            ; NOS
 673:000 | DONE wsp | na 16 16 |        |             |
 674:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
 675:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
 676:000 | DONE ins | na 16 16 | 006247 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
 677:000 | DONE ins | na 16 16 | 00624a | 29 ff 00    |                 and.# 00ff           ; mask all but length byte
 678:000 | DONE ins | na 16 16 | 00624d | a8          |                 tay                  
 679:000 | DONE wsp | na 16 16 |        |             |
 680:000 | DONE lbl | na 16 16 | 00624e |             | z_name>string                        
 680:001 | DONE ins | na 16 16 | 00624e | 60          |                 rts                  
 681:000 | DONE wsp | na 16 16 |        |             |
 682:000 | DONE wsp | na 16 16 |        |             |
 683:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 684:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
 685:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
 686:000 | DONE wsp | na 16 16 |        |             |
 687:000 | DONE lbl | na 16 16 | 00624f |             | a_nip                                
 688:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 689:000 | DONE ins | na 16 16 | 00624f | e8          |                 inx                  
 690:000 | DONE ins | na 16 16 | 006250 | e8          |                 inx                  
 691:000 | DONE lbl | na 16 16 | 006251 |             | z_nip                                
 691:001 | DONE ins | na 16 16 | 006251 | 60          |                 rts                  
 692:000 | DONE wsp | na 16 16 |        |             |
 693:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 694:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
 695:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
 696:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
 697:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
 698:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
 699:000 | DONE wsp | na 16 16 |        |             |
 700:000 | DONE lbl | na 16 16 | 006252 |             | a_parse-name                         
 701:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 702:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 703:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
 704:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
 705:000 | DONE ins | na 16 16 | 006252 | 5a          |                 phy                  
 706:000 | DONE ins | na 16 16 | 006253 | a4 12       |                 ldy.d 000212         ; >IN
 707:000 | DONE ins | na 16 16 | 006255 | e2 20       |                 sep 20               
 707:001 | DONE ctl | na  8 16 |        |             |         .!a8
 708:000 | DONE lbl | na  8 16 | 006257 |             | parse-name_loop                      
 709:000 | DONE ins | na  8 16 | 006257 | c4 0e       |                 cpy.d 00020e         ; end of line?
 710:000 | DONE ins | na  8 16 | 006259 | f0 09       |                 beq 006264           
 711:000 | DONE wsp | na  8 16 |        |             |
 712:000 | DONE ins | na  8 16 | 00625b | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
 713:000 | DONE ins | na  8 16 | 00625d | c9 20       |                 cmp.# AscSP          
 714:000 | DONE ins | na  8 16 | 00625f | d0 17       |                 bne 006278           
 715:000 | DONE ins | na  8 16 | 006261 | c8          |                 iny                  
 716:000 | DONE ins | na  8 16 | 006262 | 80 f3       |                 bra 006257           
 717:000 | DONE wsp | na  8 16 |        |             |
 718:000 | DONE lbl | na  8 16 | 006264 |             | parse-name_empty_line                
 719:000 | DONE ins | na  8 16 | 006264 | c2 20       |                 rep 20               
 719:001 | DONE ctl | na 16 16 |        |             |         .!a16
 720:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
 721:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
 722:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
 723:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
 724:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
 725:000 | DONE ins | na 16 16 | 006266 | ca          |                 dex                  
 726:000 | DONE ins | na 16 16 | 006267 | ca          |                 dex                  
 727:000 | DONE ins | na 16 16 | 006268 | ca          |                 dex                  
 728:000 | DONE ins | na 16 16 | 006269 | ca          |                 dex                  
 729:000 | DONE ins | na 16 16 | 00626a | 7a          |                 ply                  
 730:000 | DONE ins | na 16 16 | 00626b | 94 00       |                 sty.dx 00            
 731:000 | DONE wsp | na 16 16 |        |             |
 732:000 | DONE ins | na 16 16 | 00626d | a5 0c       |                 lda.d 00020c         
 733:000 | DONE ins | na 16 16 | 00626f | 18          |                 clc                  
 734:000 | DONE ins | na 16 16 | 006270 | 65 0e       |                 adc.d 00020e         
 735:000 | DONE ins | na 16 16 | 006272 | 95 00       |                 sta.dx 00            ; NOS address
 736:000 | DONE wsp | na 16 16 |        |             |
 737:000 | DONE ins | na 16 16 | 006274 | a0 00 00    |                 ldy.# 0000           ; TOS
 738:000 | DONE wsp | na 16 16 |        |             |
 739:000 | DONE ins | na 16 16 | 006277 | 60          |                 rts                  ; don't have to go through PARSE
 740:000 | DONE wsp | na 16 16 |        |             |
 741:000 | DONE lbl | na 16 16 | 006278 |             | parse-name_found                     
 742:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 743:000 | DONE ins | na 16 16 | 006278 | c2 20       |                 rep 20               
 743:001 | DONE ctl | na 16 16 |        |             |         .!a16
 744:000 | DONE ins | na 16 16 | 00627a | 84 12       |                 sty.d 000212         ; new >IN
 745:000 | DONE wsp | na 16 16 |        |             |
 746:000 | DONE ins | na 16 16 | 00627c | ca          |                 dex                  
 747:000 | DONE ins | na 16 16 | 00627d | ca          |                 dex                  
 748:000 | DONE ins | na 16 16 | 00627e | 7a          |                 ply                  
 749:000 | DONE ins | na 16 16 | 00627f | 84 00       |                 sty.d 00             
 750:000 | DONE wsp | na 16 16 |        |             |
 751:000 | DONE ins | na 16 16 | 006281 | a0 20 00    |                 ldy.# AscSP          ; put space in TOS for PARSE
 752:000 | DONE wsp | na 16 16 |        |             |
 753:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
 754:000 | DONE wsp | na 16 16 |        |             |
 755:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 756:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
 757:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
 758:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
 759:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
 760:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
 761:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
 762:000 | DONE cmt | na 16 16 |        |             | ;
 763:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
 764:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
 765:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
 766:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
 767:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
 768:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
 769:000 | DONE cmt | na 16 16 |        |             | ;
 770:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
 771:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
 772:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
 773:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
 774:000 | DONE wsp | na 16 16 |        |             |
 775:000 | DONE lbl | na 16 16 | 006284 |             | a_parse                              
 776:000 | DONE ins | na 16 16 | 006284 | 84 16       |                 sty.d 000216         ; save delimiter, char is LSB
 777:000 | DONE wsp | na 16 16 |        |             |
 778:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
 779:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway
 780:000 | DONE ins | na 16 16 | 006286 | ca          |                 dex                  
 781:000 | DONE ins | na 16 16 | 006287 | ca          |                 dex                  
 782:000 | DONE wsp | na 16 16 |        |             |
 783:000 | DONE ins | na 16 16 | 006288 | a5 12       |                 lda.d 000212         
 784:000 | DONE ins | na 16 16 | 00628a | 85 1a       |                 sta.d 00021a         ; save >IN for later length calculation
 785:000 | DONE ins | na 16 16 | 00628c | 18          |                 clc                  
 786:000 | DONE ins | na 16 16 | 00628d | 65 0c       |                 adc.d 00020c         
 787:000 | DONE ins | na 16 16 | 00628f | 95 00       |                 sta.dx 00            
 788:000 | DONE wsp | na 16 16 |        |             |
 789:000 | DONE ins | na 16 16 | 006291 | 64 18       |                 stz.d 000218         ; offset for EOL/char found adjustment of >IN
 790:000 | DONE wsp | na 16 16 |        |             |
 791:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop
 792:000 | DONE ins | na 16 16 | 006293 | a4 12       |                 ldy.d 000212         
 793:000 | DONE ins | na 16 16 | 006295 | e2 20       |                 sep 20               
 793:001 | DONE ctl | na  8 16 |        |             |         .!a8
 794:000 | DONE wsp | na  8 16 |        |             |
 795:000 | DONE lbl | na  8 16 | 006297 |             | parse_loop                           
 796:000 | DONE ins | na  8 16 | 006297 | c4 0e       |                 cpy.d 00020e         ; check for EOL first
 797:000 | DONE ins | na  8 16 | 006299 | f0 0b       |                 beq 0062a6           
 798:000 | DONE wsp | na  8 16 |        |             |
 799:000 | DONE ins | na  8 16 | 00629b | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
 800:000 | DONE ins | na  8 16 | 00629d | c5 16       |                 cmp.d 000216         ; found delimiter?
 801:000 | DONE ins | na  8 16 | 00629f | f0 03       |                 beq 0062a4           
 802:000 | DONE ins | na  8 16 | 0062a1 | c8          |                 iny                  
 803:000 | DONE ins | na  8 16 | 0062a2 | 80 f3       |                 bra 006297           
 804:000 | DONE wsp | na  8 16 |        |             |
 805:000 | DONE lbl | na  8 16 | 0062a4 |             | parse_found_delimiter                
 806:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
 807:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
 808:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
 809:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
 810:000 | DONE ins | na  8 16 | 0062a4 | e6 18       |                 inc.d 000218         
 811:000 | DONE wsp | na  8 16 |        |             |
 812:000 | DONE lbl | na  8 16 | 0062a6 |             | parse_reached_eol                    
 813:000 | DONE cmt | na  8 16 |        |             |                 ; calculate length of string found (see ascii drawing)
 814:000 | DONE ins | na  8 16 | 0062a6 | c2 20       |                 rep 20               
 814:001 | DONE ctl | na 16 16 |        |             |         .!a16
 815:000 | DONE ins | na 16 16 | 0062a8 | 98          |                 tya                  
 816:000 | DONE ins | na 16 16 | 0062a9 | 38          |                 sec                  
 817:000 | DONE ins | na 16 16 | 0062aa | e5 1a       |                 sbc.d 00021a         ; original value for >IN / index of first char
 818:000 | DONE ins | na 16 16 | 0062ac | 48          |                 pha                  ; save so we can manipulate Y
 819:000 | DONE wsp | na 16 16 |        |             |
 820:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
 821:000 | DONE ins | na 16 16 | 0062ad | 98          |                 tya                  
 822:000 | DONE ins | na 16 16 | 0062ae | 18          |                 clc                  
 823:000 | DONE ins | na 16 16 | 0062af | 65 18       |                 adc.d 000218         ; offset for EOL vs found delimiter
 824:000 | DONE ins | na 16 16 | 0062b1 | 85 12       |                 sta.d 000212         
 825:000 | DONE wsp | na 16 16 |        |             |
 826:000 | DONE ins | na 16 16 | 0062b3 | 7a          |                 ply                  ; length of string in TOS
 827:000 | DONE wsp | na 16 16 |        |             |
 828:000 | DONE lbl | na 16 16 | 0062b4 |             | z_parse-name                         
 829:000 | DONE lbl | na 16 16 | 0062b4 |             | z_parse                              
 829:001 | DONE ins | na 16 16 | 0062b4 | 60          |                 rts                  
 830:000 | DONE wsp | na 16 16 |        |             |
 831:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 832:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
 833:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
 834:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
 835:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
 836:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
 837:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
 838:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
 839:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
 840:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
 841:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
 842:000 | DONE lbl | na 16 16 | 0062b5 |             | a_refill                             
 843:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
 844:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
 845:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
 846:000 | DONE ins | na 16 16 | 0062b5 | a5 0c       |                 lda.d 00020c         
 847:000 | DONE ins | na 16 16 | 0062b7 | 49 00 01    |                 eor.# 0100           ; flip 07d00 / 07c00
 848:000 | DONE ins | na 16 16 | 0062ba | 85 0c       |                 sta.d 00020c         
 849:000 | DONE wsp | na 16 16 |        |             |
 850:000 | DONE ins | na 16 16 | 0062bc | a5 0e       |                 lda.d 00020e         
 851:000 | DONE ins | na 16 16 | 0062be | 85 10       |                 sta.d 000210         
 852:000 | DONE wsp | na 16 16 |        |             |
 853:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
 854:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
 855:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
 856:000 | DONE ins | na 16 16 | 0062c0 | a5 0a       |                 lda.d 00020a         
 857:000 | DONE ins | na 16 16 | 0062c2 | d0 18       |                 bne 0062dc           
 858:000 | DONE wsp | na 16 16 |        |             |
 859:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
 860:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
 861:000 | DONE ins | na 16 16 | 0062c4 | ca          |                 dex                  ; push Data Stack down twice
 862:000 | DONE ins | na 16 16 | 0062c5 | ca          |                 dex                  
 863:000 | DONE ins | na 16 16 | 0062c6 | ca          |                 dex                  
 864:000 | DONE ins | na 16 16 | 0062c7 | ca          |                 dex                  
 865:000 | DONE ins | na 16 16 | 0062c8 | 94 02       |                 sty.dx 02            
 866:000 | DONE wsp | na 16 16 |        |             |
 867:000 | DONE ins | na 16 16 | 0062ca | a9 ff 00    |                 lda.# 0000ff         ; 256 chars, ANSI demands at least 80 as NOS
 868:000 | DONE ins | na 16 16 | 0062cd | 95 00       |                 sta.dx 00            
 869:000 | DONE wsp | na 16 16 |        |             |
 870:000 | DONE ins | na 16 16 | 0062cf | a4 0c       |                 ldy.d 00020c         ; address of current input buffer TOS
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE ins | na 16 16 | 0062d1 | 20 03 61    |                 jsr 006103           
 873:000 | DONE wsp | na 16 16 |        |             |
 874:000 | DONE cmt | na 16 16 |        |             |                 ; Add success flag TRUE
 875:000 | DONE ins | na 16 16 | 0062d4 | ca          |                 dex                  
 876:000 | DONE ins | na 16 16 | 0062d5 | ca          |                 dex                  
 877:000 | DONE ins | na 16 16 | 0062d6 | 94 00       |                 sty.dx 00            
 878:000 | DONE ins | na 16 16 | 0062d8 | a0 ff ff    |                 ldy.# 0ffff          
 879:000 | DONE wsp | na 16 16 |        |             |
 880:000 | DONE cmt | na 16 16 |        |             |                 ; TESTING
 881:000 | DONE ins | na 16 16 | 0062db | 60          |                 rts                  
 882:000 | DONE wsp | na 16 16 |        |             |
 883:000 | DONE lbl | na 16 16 | 0062dc |             | refill_source_is_not_keyboard        
 884:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
 885:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
 886:000 | DONE ins | na 16 16 | 0062dc | c9 ff ff    |                 cmp.# 0ffff          
 887:000 | DONE ins | na 16 16 | 0062df | d0 08       |                 bne 0062e9           
 888:000 | DONE wsp | na 16 16 |        |             |
 889:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
 890:000 | DONE ins | na 16 16 | 0062e1 | ca          |                 dex                  
 891:000 | DONE ins | na 16 16 | 0062e2 | ca          |                 dex                  
 892:000 | DONE ins | na 16 16 | 0062e3 | 94 00       |                 sty.dx 00            
 893:000 | DONE ins | na 16 16 | 0062e5 | a0 00 00    |                 ldy.# 0000           
 894:000 | DONE ins | na 16 16 | 0062e8 | 60          |                 rts                  
 895:000 | DONE wsp | na 16 16 |        |             |
 896:000 | DONE lbl | na 16 16 | 0062e9 |             | refill_source_is_not_string          
 897:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
 898:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
 899:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
 900:000 | DONE ins | na 16 16 | 0062e9 | a9 43 67    |                 lda.# 006743         
 901:000 | DONE ins | na 16 16 | 0062ec | 4c 6f 65    |                 jmp 00656f           
 902:000 | DONE wsp | na 16 16 |        |             |
 903:000 | DONE lbl | na 16 16 | 0062ef |             | z_refill                             
 903:001 | DONE ins | na 16 16 | 0062ef | 60          |                 rts                  ; dummy for compiling
 904:000 | DONE wsp | na 16 16 |        |             |
 905:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 906:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
 907:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
 908:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
 909:000 | DONE wsp | na 16 16 |        |             |
 910:000 | DONE lbl | na 16 16 | 0062f0 |             | a_source                             
 910:001 | DONE ins | na 16 16 | 0062f0 | ca          |                 dex                  ; make room on Data Stack
 911:000 | DONE ins | na 16 16 | 0062f1 | ca          |                 dex                  
 912:000 | DONE ins | na 16 16 | 0062f2 | ca          |                 dex                  
 913:000 | DONE ins | na 16 16 | 0062f3 | ca          |                 dex                  
 914:000 | DONE ins | na 16 16 | 0062f4 | 94 02       |                 sty.dx 02            
 915:000 | DONE wsp | na 16 16 |        |             |
 916:000 | DONE ins | na 16 16 | 0062f6 | a5 0c       |                 lda.d 00020c         ; address of current input buffer as NOS
 917:000 | DONE ins | na 16 16 | 0062f8 | 95 00       |                 sta.dx 00            
 918:000 | DONE wsp | na 16 16 |        |             |
 919:000 | DONE ins | na 16 16 | 0062fa | a4 0e       |                 ldy.d 00020e         ; length of current input buffer as TOS
 920:000 | DONE wsp | na 16 16 |        |             |
 921:000 | DONE lbl | na 16 16 | 0062fc |             | z_source                             
 921:001 | DONE ins | na 16 16 | 0062fc | 60          |                 rts                  
 922:000 | DONE wsp | na 16 16 |        |             |
 923:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 924:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
 925:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
 926:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
 927:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
 928:000 | DONE wsp | na 16 16 |        |             |
 929:000 | DONE lbl | na 16 16 | 0062fd |             | a_source-id                          
 930:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 931:000 | DONE ins | na 16 16 | 0062fd | ca          |                 dex                  
 932:000 | DONE ins | na 16 16 | 0062fe | ca          |                 dex                  
 933:000 | DONE ins | na 16 16 | 0062ff | 94 00       |                 sty.dx 00            
 934:000 | DONE ins | na 16 16 | 006301 | a4 0a       |                 ldy.d 00020a         
 935:000 | DONE wsp | na 16 16 |        |             |
 936:000 | DONE lbl | na 16 16 | 006303 |             | z_source-id                          
 936:001 | DONE ins | na 16 16 | 006303 | 60          |                 rts                  
 937:000 | DONE wsp | na 16 16 |        |             |
 938:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 939:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
 940:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
 941:000 | DONE wsp | na 16 16 |        |             |
 942:000 | DONE lbl | na 16 16 | 006304 |             | a_space                              
 943:000 | DONE ins | na 16 16 | 006304 | e2 20       |                 sep 20               
 943:001 | DONE ctl | na  8 16 |        |             |         .!a8
 944:000 | DONE ins | na  8 16 | 006306 | a9 20       |                 lda.# AscSP          
 945:000 | DONE ins | na  8 16 | 006308 | 20 30 60    |                 jsr 006030           
 946:000 | DONE ins | na  8 16 | 00630b | c2 20       |                 rep 20               
 946:001 | DONE ctl | na 16 16 |        |             |         .!a16
 947:000 | DONE wsp | na 16 16 |        |             |
 948:000 | DONE lbl | na 16 16 | 00630d |             | z_space                              
 948:001 | DONE ins | na 16 16 | 00630d | 60          |                 rts                  
 949:000 | DONE wsp | na 16 16 |        |             |
 950:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 951:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
 952:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
 953:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should be changed
 954:000 | DONE cmt | na 16 16 |        |             | ; directly by the user; see
 955:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
 956:000 | DONE wsp | na 16 16 |        |             |
 957:000 | DONE lbl | na 16 16 | 00630e |             | a_state                              
 958:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 959:000 | DONE ins | na 16 16 | 00630e | ca          |                 dex                  
 960:000 | DONE ins | na 16 16 | 00630f | ca          |                 dex                  
 961:000 | DONE ins | na 16 16 | 006310 | 94 00       |                 sty.dx 00            
 962:000 | DONE ins | na 16 16 | 006312 | a0 14 02    |                 ldy.# 000214         
 963:000 | DONE wsp | na 16 16 |        |             |
 964:000 | DONE lbl | na 16 16 | 006315 |             | z_state                              
 964:001 | DONE ins | na 16 16 | 006315 | 60          |                 rts                  
 965:000 | DONE wsp | na 16 16 |        |             |
 966:000 | DONE wsp | na 16 16 |        |             |
 967:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 968:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
 969:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS, destroys Y
 970:000 | DONE wsp | na 16 16 |        |             |
 971:000 | DONE lbl | na 16 16 | 006316 |             | a_swap                               
 972:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 973:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 974:000 | DONE ins | na 16 16 | 006316 | b5 00       |                 lda.dx 00            
 975:000 | DONE ins | na 16 16 | 006318 | 94 00       |                 sty.dx 00            
 976:000 | DONE ins | na 16 16 | 00631a | a8          |                 tay                  
 977:000 | DONE wsp | na 16 16 |        |             |
 978:000 | DONE lbl | na 16 16 | 00631b |             | z_swap                               
 978:001 | DONE ins | na 16 16 | 00631b | 60          |                 rts                  
 979:000 | DONE wsp | na 16 16 |        |             |
 980:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 981:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
 982:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
 983:000 | DONE wsp | na 16 16 |        |             |
 984:000 | DONE lbl | na 16 16 | 00631c |             | a_true                               
 985:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 986:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 987:000 | DONE ins | na 16 16 | 00631c | ca          |                 dex                  
 988:000 | DONE ins | na 16 16 | 00631d | ca          |                 dex                  
 989:000 | DONE ins | na 16 16 | 00631e | 94 00       |                 sty.dx 00            
 990:000 | DONE ins | na 16 16 | 006320 | a0 ff ff    |                 ldy.# 0ffff          
 991:000 | DONE wsp | na 16 16 |        |             |
 992:000 | DONE lbl | na 16 16 | 006323 |             | z_true                               
 992:001 | DONE ins | na 16 16 | 006323 | 60          |                 rts                  
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 995:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
 996:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS
 997:000 | DONE wsp | na 16 16 |        |             |
 998:000 | DONE lbl | na 16 16 | 006324 |             | a_tuck                               
 999:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1000:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1001:000 | DONE ins | na 16 16 | 006324 | ca          |                 dex                  
1002:000 | DONE ins | na 16 16 | 006325 | ca          |                 dex                  
1003:000 | DONE ins | na 16 16 | 006326 | b5 02       |                 lda.dx 2             
1004:000 | DONE ins | na 16 16 | 006328 | 95 00       |                 sta.dx 0             
1005:000 | DONE ins | na 16 16 | 00632a | 94 02       |                 sty.dx 2             
1006:000 | DONE wsp | na 16 16 |        |             |
1007:000 | DONE lbl | na 16 16 | 00632c |             | z_tuck                               
1007:001 | DONE ins | na 16 16 | 00632c | 60          |                 rts                  
1008:000 | DONE wsp | na 16 16 |        |             |
1009:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1010:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
1011:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
1012:000 | DONE cmt | na 16 16 |        |             | ; get-chr to make porting easier.  We call put_chr here directly instead of
1013:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
1014:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
1015:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
1016:000 | DONE cmt | na 16 16 |        |             | ; running.
1017:000 | DONE wsp | na 16 16 |        |             |
1018:000 | DONE lbl | na 16 16 | 00632d |             | a_type                               
1019:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1020:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1021:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
1022:000 | DONE ins | na 16 16 | 00632d | 98          |                 tya                  ; force flag check of TOS
1023:000 | DONE ins | na 16 16 | 00632e | f0 17       |                 beq 006347           
1024:000 | DONE wsp | na 16 16 |        |             |
1025:000 | DONE ins | na 16 16 | 006330 | b5 00       |                 lda.dx 00            ; get address from NOS
1026:000 | DONE ins | na 16 16 | 006332 | 85 16       |                 sta.d 000216         
1027:000 | DONE ins | na 16 16 | 006334 | 84 18       |                 sty.d 000218         ; number of chars is TOS
1028:000 | DONE ins | na 16 16 | 006336 | a0 00 00    |                 ldy.# 0000           
1029:000 | DONE ins | na 16 16 | 006339 | e2 20       |                 sep 20               
1029:001 | DONE ctl | na  8 16 |        |             |         .!a8
1030:000 | DONE lbl | na  8 16 | 00633b |             | type_loop                            
1031:000 | DONE ins | na  8 16 | 00633b | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
1032:000 | DONE ins | na  8 16 | 00633d | 20 30 60    |                 jsr 006030           
1033:000 | DONE ins | na  8 16 | 006340 | c8          |                 iny                  
1034:000 | DONE ins | na  8 16 | 006341 | c4 18       |                 cpy.d 000218         
1035:000 | DONE ins | na  8 16 | 006343 | d0 f6       |                 bne 00633b           
1036:000 | DONE wsp | na  8 16 |        |             |
1037:000 | DONE ins | na  8 16 | 006345 | c2 20       |                 rep 20               
1037:001 | DONE ctl | na 16 16 |        |             |         .!a16
1038:000 | DONE lbl | na 16 16 | 006347 |             | type_done                            
1039:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
1040:000 | DONE ins | na 16 16 | 006347 | b4 02       |                 ldy.dx 02            
1041:000 | DONE ins | na 16 16 | 006349 | e8          |                 inx                  
1042:000 | DONE ins | na 16 16 | 00634a | e8          |                 inx                  
1043:000 | DONE ins | na 16 16 | 00634b | e8          |                 inx                  
1044:000 | DONE ins | na 16 16 | 00634c | e8          |                 inx                  
1045:000 | DONE wsp | na 16 16 |        |             |
1046:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
1047:000 | DONE wsp | na 16 16 |        |             |
1048:000 | DONE lbl | na 16 16 | 00634d |             | z_type                               
1048:001 | DONE ins | na 16 16 | 00634d | 60          |                 rts                  
1049:000 | DONE wsp | na 16 16 |        |             |
1050:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1051:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
1052:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available
1053:000 | DONE cmt | na 16 16 |        |             | ;
1054:000 | DONE lbl | na 16 16 | 00634e |             | a_words                              
1055:000 | DONE ins | na 16 16 | 00634e | a5 02       |                 lda.d 000202         ; nt first entry in Dictionary (last added)
1056:000 | DONE ins | na 16 16 | 006350 | 48          |                 pha                  
1057:000 | DONE wsp | na 16 16 |        |             |
1058:000 | DONE ins | na 16 16 | 006351 | ca          |                 dex                  
1059:000 | DONE ins | na 16 16 | 006352 | ca          |                 dex                  
1060:000 | DONE ins | na 16 16 | 006353 | 94 00       |                 sty.dx 00            
1061:000 | DONE wsp | na 16 16 |        |             |
1062:000 | DONE lbl | na 16 16 | 006355 |             | words_loop                           
1063:000 | DONE ins | na 16 16 | 006355 | a8          |                 tay                  
1064:000 | DONE wsp | na 16 16 |        |             |
1065:000 | DONE ins | na 16 16 | 006356 | 20 3e 62    |                 jsr 00623e           ; ( nt -- addr u )
1066:000 | DONE ins | na 16 16 | 006359 | 20 2d 63    |                 jsr 00632d           ; ( addr u -- )
1067:000 | DONE ins | na 16 16 | 00635c | 20 04 63    |                 jsr 006304           
1068:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1069:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1070:000 | DONE ins | na 16 16 | 00635f | 68          |                 pla                  
1071:000 | DONE wsp | na 16 16 |        |             |
1072:000 | DONE cmt | na 16 16 |        |             |                 ; the next nt is two bytes below the nt of the current one in
1073:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
1074:000 | DONE cmt | na 16 16 |        |             |                 ;
1075:000 | DONE ins | na 16 16 | 006360 | 1a          |                 inc.a                
1076:000 | DONE ins | na 16 16 | 006361 | 1a          |                 inc.a                
1077:000 | DONE wsp | na 16 16 |        |             |
1078:000 | DONE ins | na 16 16 | 006362 | ca          |                 dex                  
1079:000 | DONE ins | na 16 16 | 006363 | ca          |                 dex                  
1080:000 | DONE ins | na 16 16 | 006364 | 94 00       |                 sty.dx 00            
1081:000 | DONE wsp | na 16 16 |        |             |
1082:000 | DONE ins | na 16 16 | 006366 | a8          |                 tay                  
1083:000 | DONE ins | na 16 16 | 006367 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1084:000 | DONE ins | na 16 16 | 00636a | 48          |                 pha                  
1085:000 | DONE ins | na 16 16 | 00636b | d0 e8       |                 bne 006355           
1086:000 | DONE wsp | na 16 16 |        |             |
1087:000 | DONE ins | na 16 16 | 00636d | 68          |                 pla                  
1088:000 | DONE wsp | na 16 16 |        |             |
1089:000 | DONE wsp | na 16 16 |        |             |
1090:000 | DONE lbl | na 16 16 | 00636e |             | z_words                              
1090:001 | DONE ins | na 16 16 | 00636e | 60          |                 rts                  
1091:000 | DONE wsp | na 16 16 |        |             |
1092:000 | DONE wsp | na 16 16 |        |             |
1093:000 | DONE wsp | na 16 16 |        |             |
1094:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1095:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
1096:000 | DONE wsp | na 16 16 |        |             |
1097:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
1097:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1097:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
1097:003 | DONE cmt | na 16 16 |        |             | ; This version: 04. Jan 2017
1097:004 | DONE wsp | na 16 16 |        |             |
1097:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
1097:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
1097:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
1097:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
1097:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
1097:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
1097:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "h_<WORD>" ("header") for the nt and "a_<WORD>" ("A" as the
1097:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
1097:013 | DONE cmt | na 16 16 |        |             | ;
1097:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure for each header:
1097:015 | DONE wsp | na 16 16 |        |             |
1097:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
1097:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
1097:018 | DONE cmt | na 16 16 |        |             | ; h_word ->  +--------+--------+
1097:019 | DONE cmt | na 16 16 |        |             | ;            | Length | Status |
1097:020 | DONE cmt | na 16 16 |        |             | ;         +2 +--------+--------+
1097:021 | DONE cmt | na 16 16 |        |             | ;            | Next Header     | -> h_next (nt of next word)
1097:022 | DONE cmt | na 16 16 |        |             | ;         +4 +-----------------+
1097:023 | DONE cmt | na 16 16 |        |             | ;            | Start of Code   | -> a_word (xt of this word)
1097:024 | DONE cmt | na 16 16 |        |             | ;         +6 +-----------------+
1097:025 | DONE cmt | na 16 16 |        |             | ;            | End of Code     | -> z_word
1097:026 | DONE cmt | na 16 16 |        |             | ;         +8 +--------+--------+
1097:027 | DONE cmt | na 16 16 |        |             | ;            | Name   |        |
1097:028 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1097:029 | DONE cmt | na 16 16 |        |             | ;            |        |        |
1097:030 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1097:031 | DONE cmt | na 16 16 |        |             | ;            |        |  ...   | (name string does not end with a zero)
1097:032 | DONE cmt | na 16 16 |        |             | ;         +n +--------+--------+
1097:033 | DONE wsp | na 16 16 |        |             |
1097:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
1097:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
1097:036 | DONE cmt | na 16 16 |        |             | ;
1097:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
1097:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
1097:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
1097:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
1097:041 | DONE wsp | na 16 16 |        |             |
1097:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
1097:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
1097:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
1097:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
1097:046 | DONE wsp | na 16 16 |        |             |
1097:047 | DONE lbl | na 16 16 | 00636f |             | h_bye                                
1097:048 | DONE dir | na 16 16 | 00636f | (1 bytes)   |         .byte 03                     ; length of word string
1097:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
1097:049 | DONE dir | na 16 16 | 006370 | (1 bytes)   |         .byte { PW + NC }            ; status byte
1097:049 | DONE dir | na 16 16 |        |             |                 90                       --  .
1097:050 | DONE dir | na 16 16 | 006371 | (2 bytes)   |         .word 0000                   ; next word in dictionary, 0000 signals end
1097:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
1097:051 | DONE dir | na 16 16 | 006373 | (2 bytes)   |         .word 006192                 ; start of code, the xt of this word
1097:051 | DONE dir | na 16 16 |        |             |                 92 61                    --  . a
1097:052 | DONE dir | na 16 16 | 006375 | (2 bytes)   |         .word 006194                 ; end of code (points to RTS)
1097:052 | DONE dir | na 16 16 |        |             |                 94 61                    --  . a
1097:053 | DONE dir | na 16 16 | 006377 | (3 bytes)   |         .byte 62, 79, 65             ; lowercase word name
1097:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
1097:054 | DONE wsp | na 16 16 |        |             |
1097:055 | DONE lbl | na 16 16 | 00637a |             | h_cold                               
1097:056 | DONE dir | na 16 16 | 00637a | (2 bytes)   |         .byte 4, 00                  
1097:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1097:057 | DONE dir | na 16 16 | 00637c | (6 bytes)   |         .word h_bye, a_cold, 0060cd  
1097:057 | DONE dir | na 16 16 |        |             |                 6f 63 5f 60 cd 60        --  o c _ ` . `
1097:058 | DONE dir | na 16 16 | 006382 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
1097:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
1097:059 | DONE wsp | na 16 16 |        |             |
1097:060 | DONE lbl | na 16 16 | 006386 |             | h_words                              
1097:061 | DONE dir | na 16 16 | 006386 | (2 bytes)   |         .byte 5, { PW + NC }         
1097:061 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1097:062 | DONE dir | na 16 16 | 006388 | (6 bytes)   |         .word h_cold, a_words, 00636e 
1097:062 | DONE dir | na 16 16 |        |             |                 7a 63 4e 63 6e 63        --  z c N c n c
1097:063 | DONE dir | na 16 16 | 00638e | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
1097:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
1097:064 | DONE wsp | na 16 16 |        |             |
1097:065 | DONE lbl | na 16 16 | 006393 |             | h_bell                               
1097:066 | DONE dir | na 16 16 | 006393 | (2 bytes)   |         .byte 4, { PW + NC }         
1097:066 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1097:067 | DONE dir | na 16 16 | 006395 | (6 bytes)   |         .word h_words, a_bell, 006189 
1097:067 | DONE dir | na 16 16 |        |             |                 86 63 84 61 89 61        --  . c . a . a
1097:068 | DONE dir | na 16 16 | 00639b | (4 bytes)   |         .byte 62, 65, 6c, 6c         
1097:068 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
1097:069 | DONE wsp | na 16 16 |        |             |
1097:070 | DONE lbl | na 16 16 | 00639f |             | h_count                              
1097:071 | DONE dir | na 16 16 | 00639f | (2 bytes)   |         .byte 5, {NC + PW }          
1097:071 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1097:072 | DONE dir | na 16 16 | 0063a1 | (6 bytes)   |         .word h_bell, a_count, 0061af 
1097:072 | DONE dir | na 16 16 |        |             |                 93 63 a1 61 af 61        --  . c . a . a
1097:073 | DONE dir | na 16 16 | 0063a7 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
1097:073 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
1097:074 | DONE wsp | na 16 16 |        |             |
1097:075 | DONE lbl | na 16 16 | 0063ac |             | h_abort                              
1097:076 | DONE dir | na 16 16 | 0063ac | (2 bytes)   |         .byte 5, 00                  ; TODO check flags
1097:076 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1097:077 | DONE dir | na 16 16 | 0063ae | (6 bytes)   |         .word h_count, a_abort, 0060cd 
1097:077 | DONE dir | na 16 16 |        |             |                 9f 63 93 60 cd 60        --  . c . ` . `
1097:078 | DONE dir | na 16 16 | 0063b4 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
1097:078 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
1097:079 | DONE wsp | na 16 16 |        |             |
1097:080 | DONE lbl | na 16 16 | 0063b9 |             | h_parse                              
1097:081 | DONE dir | na 16 16 | 0063b9 | (2 bytes)   |         .byte 5, 00                  
1097:081 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1097:082 | DONE dir | na 16 16 | 0063bb | (6 bytes)   |         .word h_abort, a_parse, 0062b4 
1097:082 | DONE dir | na 16 16 |        |             |                 ac 63 84 62 b4 62        --  . c . b . b
1097:083 | DONE dir | na 16 16 | 0063c1 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
1097:083 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
1097:084 | DONE wsp | na 16 16 |        |             |
1097:085 | DONE lbl | na 16 16 | 0063c6 |             | h_quit                               
1097:086 | DONE dir | na 16 16 | 0063c6 | (2 bytes)   |         .byte 4, 00                  
1097:086 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1097:087 | DONE dir | na 16 16 | 0063c8 | (6 bytes)   |         .word h_parse, a_quit, 0060cd 
1097:087 | DONE dir | na 16 16 |        |             |                 b9 63 9d 60 cd 60        --  . c . ` . `
1097:088 | DONE dir | na 16 16 | 0063ce | (4 bytes)   |         .byte 71, 75, 69, 74         
1097:088 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
1097:089 | DONE wsp | na 16 16 |        |             |
1097:090 | DONE lbl | na 16 16 | 0063d2 |             | h_name>int                           
1097:091 | DONE dir | na 16 16 | 0063d2 | (2 bytes)   |         .byte 8, { PW + NC }         
1097:091 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1097:092 | DONE dir | na 16 16 | 0063d4 | (6 bytes)   |         .word h_quit, a_name>int, 00623d 
1097:092 | DONE dir | na 16 16 |        |             |                 c6 63 39 62 3d 62        --  . c 9 b = b
1097:093 | DONE dir | na 16 16 | 0063da | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
1097:093 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
1097:093 | DONE dir | na 16 16 |        |             |                                          -- 
1097:094 | DONE wsp | na 16 16 |        |             |
1097:095 | DONE lbl | na 16 16 | 0063e2 |             | h_cr                                 
1097:096 | DONE dir | na 16 16 | 0063e2 | (2 bytes)   |         .byte 2, { PW + NC }         
1097:096 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1097:097 | DONE dir | na 16 16 | 0063e4 | (6 bytes)   |         .word h_name>int, a_cr, 0061b8 
1097:097 | DONE dir | na 16 16 |        |             |                 d2 63 b0 61 b8 61        --  . c . a . a
1097:098 | DONE dir | na 16 16 | 0063ea | (2 bytes)   |         .byte 63, 72                 
1097:098 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
1097:099 | DONE wsp | na 16 16 |        |             |
1097:100 | DONE lbl | na 16 16 | 0063ec |             | h_bl                                 
1097:101 | DONE dir | na 16 16 | 0063ec | (2 bytes)   |         .byte 2, { PW + NC }         
1097:101 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1097:102 | DONE dir | na 16 16 | 0063ee | (6 bytes)   |         .word h_cr, a_bl, 006191     
1097:102 | DONE dir | na 16 16 |        |             |                 e2 63 8a 61 91 61        --  . c . a . a
1097:103 | DONE dir | na 16 16 | 0063f4 | (2 bytes)   |         .byte 62, 6c                 
1097:103 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
1097:104 | DONE wsp | na 16 16 |        |             |
1097:105 | DONE lbl | na 16 16 | 0063f6 |             | h_space                              
1097:106 | DONE dir | na 16 16 | 0063f6 | (2 bytes)   |         .byte 5, { PW + NC }         
1097:106 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1097:107 | DONE dir | na 16 16 | 0063f8 | (6 bytes)   |         .word h_bl, a_space, 00630d  
1097:107 | DONE dir | na 16 16 |        |             |                 ec 63 04 63 0d 63        --  . c . c  c
1097:108 | DONE dir | na 16 16 | 0063fe | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
1097:108 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
1097:109 | DONE wsp | na 16 16 |        |             |
1097:110 | DONE lbl | na 16 16 | 006403 |             | h_type                               
1097:111 | DONE dir | na 16 16 | 006403 | (2 bytes)   |         .byte 4, 0                   
1097:111 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1097:112 | DONE dir | na 16 16 | 006405 | (6 bytes)   |         .word h_space, a_type, 00634d 
1097:112 | DONE dir | na 16 16 |        |             |                 f6 63 2d 63 4d 63        --  . c - c M c
1097:113 | DONE dir | na 16 16 | 00640b | (4 bytes)   |         .byte 74, 79, 70, 65         
1097:113 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
1097:114 | DONE wsp | na 16 16 |        |             |
1097:115 | DONE lbl | na 16 16 | 00640f |             | h_name>string                        
1097:116 | DONE dir | na 16 16 | 00640f | (2 bytes)   |         .byte 0b, { PW + NC }        
1097:116 | DONE dir | na 16 16 |        |             |                 0b 90                    --   .
1097:117 | DONE dir | na 16 16 | 006411 | (6 bytes)   |         .word h_type, a_name>string, 00624e 
1097:117 | DONE dir | na 16 16 |        |             |                 03 64 3e 62 4e 62        --  . d > b N b
1097:118 | DONE dir | na 16 16 | 006417 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
1097:118 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
1097:118 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
1097:119 | DONE wsp | na 16 16 |        |             |
1097:120 | DONE lbl | na 16 16 | 006422 |             | h_2dup                               
1097:121 | DONE dir | na 16 16 | 006422 | (2 bytes)   |         .byte 4, { PW + NC }         
1097:121 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1097:122 | DONE dir | na 16 16 | 006424 | (6 bytes)   |         .word h_name>string, a_2dup, 006102 
1097:122 | DONE dir | na 16 16 |        |             |                 0f 64 f8 60 02 61        --  . d . ` . a
1097:123 | DONE dir | na 16 16 | 00642a | (4 bytes)   |         .byte 32, 64, 75, 70         
1097:123 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
1097:124 | DONE wsp | na 16 16 |        |             |
1097:125 | DONE lbl | na 16 16 | 00642e |             | h_state                              
1097:126 | DONE dir | na 16 16 | 00642e | (2 bytes)   |         .byte 5, { PW + NC }         
1097:126 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1097:127 | DONE dir | na 16 16 | 006430 | (6 bytes)   |         .word h_2dup, a_state, 006315 
1097:127 | DONE dir | na 16 16 |        |             |                 22 64 0e 63 15 63        --  " d . c . c
1097:128 | DONE dir | na 16 16 | 006436 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
1097:128 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
1097:129 | DONE wsp | na 16 16 |        |             |
1097:130 | DONE lbl | na 16 16 | 00643b |             | h_to-in                              
1097:131 | DONE dir | na 16 16 | 00643b | (2 bytes)   |         .byte 3, { PW + NC }         
1097:131 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1097:132 | DONE dir | na 16 16 | 00643d | (6 bytes)   |         .word h_state, a_to-in, 0060d5 
1097:132 | DONE dir | na 16 16 |        |             |                 2e 64 ce 60 d5 60        --  . d . ` . `
1097:133 | DONE dir | na 16 16 | 006443 | (3 bytes)   |         .byte 3e, 69, 6e             
1097:133 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
1097:134 | DONE wsp | na 16 16 |        |             |
1097:135 | DONE lbl | na 16 16 | 006446 |             | h_source                             
1097:136 | DONE dir | na 16 16 | 006446 | (2 bytes)   |         .byte 6, { PW + NC }         
1097:136 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1097:137 | DONE dir | na 16 16 | 006448 | (6 bytes)   |         .word h_to-in, a_source, 0062fc 
1097:137 | DONE dir | na 16 16 |        |             |                 3b 64 f0 62 fc 62        --  ; d . b . b
1097:138 | DONE dir | na 16 16 | 00644e | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
1097:138 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
1097:139 | DONE wsp | na 16 16 |        |             |
1097:140 | DONE lbl | na 16 16 | 006454 |             | h_plus                               
1097:141 | DONE dir | na 16 16 | 006454 | (2 bytes)   |         .byte 1, { PW + NC }         
1097:141 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1097:142 | DONE dir | na 16 16 | 006456 | (6 bytes)   |         .word h_source, a_plus, 0060dd 
1097:142 | DONE dir | na 16 16 |        |             |                 46 64 d6 60 dd 60        --  F d . ` . `
1097:143 | DONE dir | na 16 16 | 00645c | (1 bytes)   |         .byte 2b                     
1097:143 | DONE dir | na 16 16 |        |             |                 2b                       --  +
1097:144 | DONE wsp | na 16 16 |        |             |
1097:145 | DONE lbl | na 16 16 | 00645d |             | h_one-plus                           
1097:146 | DONE dir | na 16 16 | 00645d | (2 bytes)   |         .byte 2, { PW + NC }         
1097:146 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1097:147 | DONE dir | na 16 16 | 00645f | (6 bytes)   |         .word h_plus, a_one-plus, 0060ef 
1097:147 | DONE dir | na 16 16 |        |             |                 54 64 ee 60 ef 60        --  T d . ` . `
1097:148 | DONE dir | na 16 16 | 006465 | (2 bytes)   |         .byte 31, 2b                 
1097:148 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
1097:149 | DONE wsp | na 16 16 |        |             |
1097:150 | DONE lbl | na 16 16 | 006467 |             | h_false                              
1097:151 | DONE dir | na 16 16 | 006467 | (2 bytes)   |         .byte 5, { PW + NC }         
1097:151 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1097:152 | DONE dir | na 16 16 | 006469 | (6 bytes)   |         .word h_one-plus, a_zero, 0060e5 
1097:152 | DONE dir | na 16 16 |        |             |                 5d 64 de 60 e5 60        --  ] d . ` . `
1097:153 | DONE dir | na 16 16 | 00646f | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
1097:153 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
1097:154 | DONE wsp | na 16 16 |        |             |
1097:155 | DONE lbl | na 16 16 | 006474 |             | h_true                               
1097:156 | DONE dir | na 16 16 | 006474 | (2 bytes)   |         .byte 4, { PW + NC }         
1097:156 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1097:157 | DONE dir | na 16 16 | 006476 | (6 bytes)   |         .word h_false, a_true, 006323 
1097:157 | DONE dir | na 16 16 |        |             |                 67 64 1c 63 23 63        --  g d . c # c
1097:158 | DONE dir | na 16 16 | 00647c | (4 bytes)   |         .byte 74, 72, 75, 65         
1097:158 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
1097:159 | DONE wsp | na 16 16 |        |             |
1097:160 | DONE lbl | na 16 16 | 006480 |             | h_two                                
1097:161 | DONE dir | na 16 16 | 006480 | (2 bytes)   |         .byte 1, { PW + NC }         
1097:161 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1097:162 | DONE dir | na 16 16 | 006482 | (6 bytes)   |         .word h_true, a_two, 0060f7  
1097:162 | DONE dir | na 16 16 |        |             |                 74 64 f0 60 f7 60        --  t d . ` . `
1097:163 | DONE dir | na 16 16 | 006488 | (1 bytes)   |         .byte 32                     
1097:163 | DONE dir | na 16 16 |        |             |                 32                       --  2
1097:164 | DONE wsp | na 16 16 |        |             |
1097:165 | DONE lbl | na 16 16 | 006489 |             | h_one                                
1097:166 | DONE dir | na 16 16 | 006489 | (2 bytes)   |         .byte 1, { PW + NC }         
1097:166 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1097:167 | DONE dir | na 16 16 | 00648b | (6 bytes)   |         .word h_two, a_one, 0060ed   
1097:167 | DONE dir | na 16 16 |        |             |                 80 64 e6 60 ed 60        --  . d . ` . `
1097:168 | DONE dir | na 16 16 | 006491 | (1 bytes)   |         .byte 31                     
1097:168 | DONE dir | na 16 16 |        |             |                 31                       --  1
1097:169 | DONE wsp | na 16 16 |        |             |
1097:170 | DONE lbl | na 16 16 | 006492 |             | h_zero                               
1097:171 | DONE dir | na 16 16 | 006492 | (2 bytes)   |         .byte 1, { PW + NC }         
1097:171 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1097:172 | DONE dir | na 16 16 | 006494 | (6 bytes)   |         .word h_one, a_zero, 0060e5  
1097:172 | DONE dir | na 16 16 |        |             |                 89 64 de 60 e5 60        --  . d . ` . `
1097:173 | DONE dir | na 16 16 | 00649a | (1 bytes)   |         .byte 30                     
1097:173 | DONE dir | na 16 16 |        |             |                 30                       --  0
1097:174 | DONE wsp | na 16 16 |        |             |
1097:175 | DONE lbl | na 16 16 | 00649b |             | h_find-name                          
1097:176 | DONE dir | na 16 16 | 00649b | (2 bytes)   |         .byte 9, 0                   
1097:176 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
1097:177 | DONE dir | na 16 16 | 00649d | (6 bytes)   |         .word h_zero, a_find-name, 006231 
1097:177 | DONE dir | na 16 16 |        |             |                 92 64 d3 61 31 62        --  . d . a 1 b
1097:178 | DONE dir | na 16 16 | 0064a3 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
1097:178 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
1097:178 | DONE dir | na 16 16 |        |             |                 65                       --  e
1097:179 | DONE wsp | na 16 16 |        |             |
1097:180 | DONE lbl | na 16 16 | 0064ac |             | h_refill                             
1097:181 | DONE dir | na 16 16 | 0064ac | (2 bytes)   |         .byte 6, { PW }              ; TODO check flags
1097:181 | DONE dir | na 16 16 |        |             |                 06 80                    --  . .
1097:182 | DONE dir | na 16 16 | 0064ae | (6 bytes)   |         .word h_find-name, a_refill, 0062ef 
1097:182 | DONE dir | na 16 16 |        |             |                 9b 64 b5 62 ef 62        --  . d . b . b
1097:183 | DONE dir | na 16 16 | 0064b4 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
1097:183 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
1097:184 | DONE wsp | na 16 16 |        |             |
1097:185 | DONE lbl | na 16 16 | 0064ba |             | h_parse-name                         
1097:186 | DONE dir | na 16 16 | 0064ba | (2 bytes)   |         .byte &10, 0                 
1097:186 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
1097:187 | DONE dir | na 16 16 | 0064bc | (6 bytes)   |         .word h_refill, a_parse-name, 0062b4 
1097:187 | DONE dir | na 16 16 |        |             |                 ac 64 52 62 b4 62        --  . d R b . b
1097:188 | DONE dir | na 16 16 | 0064c2 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
1097:188 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
1097:188 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
1097:189 | DONE wsp | na 16 16 |        |             |
1097:190 | DONE lbl | na 16 16 | 0064cc |             | h_source-id                          
1097:191 | DONE dir | na 16 16 | 0064cc | (2 bytes)   |         .byte 9, { PW + NC }         
1097:191 | DONE dir | na 16 16 |        |             |                 09 90                    --  	 .
1097:192 | DONE dir | na 16 16 | 0064ce | (6 bytes)   |         .word h_parse-name, a_source-id, 006303 
1097:192 | DONE dir | na 16 16 |        |             |                 ba 64 fd 62 03 63        --  . d . b . c
1097:193 | DONE dir | na 16 16 | 0064d4 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
1097:193 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
1097:193 | DONE dir | na 16 16 |        |             |                 64                       --  d
1097:194 | DONE wsp | na 16 16 |        |             |
1097:195 | DONE lbl | na 16 16 | 0064dd |             | h_comma                              
1097:196 | DONE dir | na 16 16 | 0064dd | (2 bytes)   |         .byte 1, { PW + NC }         
1097:196 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1097:197 | DONE dir | na 16 16 | 0064df | (6 bytes)   |         .word h_source-id, a_comma, 0061a0 
1097:197 | DONE dir | na 16 16 |        |             |                 cc 64 95 61 a0 61        --  . d . a . a
1097:198 | DONE dir | na 16 16 | 0064e5 | (1 bytes)   |         .byte 2c                     
1097:198 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
1097:199 | DONE wsp | na 16 16 |        |             |
1097:200 | DONE lbl | na 16 16 | 0064e6 |             | h_accept                             
1097:201 | DONE dir | na 16 16 | 0064e6 | (2 bytes)   |         .byte 6, 00                  ; TODO check flags
1097:201 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
1097:202 | DONE dir | na 16 16 | 0064e8 | (6 bytes)   |         .word h_comma, a_accept, 006183 
1097:202 | DONE dir | na 16 16 |        |             |                 dd 64 03 61 83 61        --  . d . a . a
1097:203 | DONE dir | na 16 16 | 0064ee | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
1097:203 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
1097:204 | DONE wsp | na 16 16 |        |             |
1097:205 | DONE lbl | na 16 16 | 0064f4 |             | h_tuck                               
1097:206 | DONE dir | na 16 16 | 0064f4 | (2 bytes)   |         .byte 4, { PW + NC }         
1097:206 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1097:207 | DONE dir | na 16 16 | 0064f6 | (6 bytes)   |         .word h_accept, a_tuck, 00632c 
1097:207 | DONE dir | na 16 16 |        |             |                 e6 64 24 63 2c 63        --  . d $ c , c
1097:208 | DONE dir | na 16 16 | 0064fc | (4 bytes)   |         .byte 74, 75, 63, 6b         
1097:208 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
1097:209 | DONE wsp | na 16 16 |        |             |
1097:210 | DONE lbl | na 16 16 | 006500 |             | h_nip                                
1097:211 | DONE dir | na 16 16 | 006500 | (2 bytes)   |         .byte 3, { PW + NC }         
1097:211 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1097:212 | DONE dir | na 16 16 | 006502 | (6 bytes)   |         .word h_tuck, a_nip, 006251  
1097:212 | DONE dir | na 16 16 |        |             |                 f4 64 4f 62 51 62        --  . d O b Q b
1097:213 | DONE dir | na 16 16 | 006508 | (3 bytes)   |         .byte 6e, 69, 70             
1097:213 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
1097:214 | DONE wsp | na 16 16 |        |             |
1097:215 | DONE lbl | na 16 16 | 00650b |             | h_execute                            
1097:216 | DONE dir | na 16 16 | 00650b | (2 bytes)   |         .byte 7, { PW + NC }         
1097:216 | DONE dir | na 16 16 |        |             |                 07 90                    --  . .
1097:217 | DONE dir | na 16 16 | 00650d | (6 bytes)   |         .word h_nip, a_execute, 0061d2 
1097:217 | DONE dir | na 16 16 |        |             |                 00 65 c3 61 d2 61        --  . e . a . a
1097:218 | DONE dir | na 16 16 | 006513 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
1097:218 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
1097:219 | DONE wsp | na 16 16 |        |             |
1097:220 | DONE lbl | na 16 16 | 00651a |             | h_here                               
1097:221 | DONE dir | na 16 16 | 00651a | (2 bytes)   |         .byte 4, { PW + NC }         
1097:221 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1097:222 | DONE dir | na 16 16 | 00651c | (6 bytes)   |         .word h_execute, a_here, 006238 
1097:222 | DONE dir | na 16 16 |        |             |                 0b 65 32 62 38 62        --   e 2 b 8 b
1097:223 | DONE dir | na 16 16 | 006522 | (4 bytes)   |         .byte 68, 65, 72, 65         
1097:223 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
1097:224 | DONE wsp | na 16 16 |        |             |
1097:225 | DONE lbl | na 16 16 | 006526 |             | h_swap                               
1097:226 | DONE dir | na 16 16 | 006526 | (2 bytes)   |         .byte 4, { PW + NC }         
1097:226 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1097:227 | DONE dir | na 16 16 | 006528 | (6 bytes)   |         .word h_here, a_swap, 00631b 
1097:227 | DONE dir | na 16 16 |        |             |                 1a 65 16 63 1b 63        --  . e . c . c
1097:228 | DONE dir | na 16 16 | 00652e | (4 bytes)   |         .byte 73, 77, 61, 70         
1097:228 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
1097:229 | DONE wsp | na 16 16 |        |             |
1097:230 | DONE lbl | na 16 16 | 006532 |             | h_dup                                
1097:231 | DONE dir | na 16 16 | 006532 | (2 bytes)   |         .byte 3, { PW + NC }         
1097:231 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1097:232 | DONE dir | na 16 16 | 006534 | (6 bytes)   |         .word h_swap, a_dup, 0061c2  
1097:232 | DONE dir | na 16 16 |        |             |                 26 65 be 61 c2 61        --  & e . a . a
1097:233 | DONE dir | na 16 16 | 00653a | (3 bytes)   |         .byte 64, 75, 70             
1097:233 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
1097:234 | DONE wsp | na 16 16 |        |             |
1097:235 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
1097:236 | DONE lbl | na 16 16 | 00653d |             | h_drop                               
1097:237 | DONE dir | na 16 16 | 00653d | (2 bytes)   |         .byte 4, { PW + NC }         
1097:237 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1097:238 | DONE dir | na 16 16 | 00653f | (6 bytes)   |         .word h_dup, a_drop, 0061bd  
1097:238 | DONE dir | na 16 16 |        |             |                 32 65 b9 61 bd 61        --  2 e . a . a
1097:239 | DONE dir | na 16 16 | 006545 | (4 bytes)   |         .byte 64, 72, 6f, 70         
1097:239 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
1097:240 | DONE wsp | na 16 16 |        |             |
1097:241 | DONE cmt | na 16 16 |        |             | ; END
1098:000 | DONE wsp | na 16 16 |        |             |
1099:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1100:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
1101:000 | DONE wsp | na 16 16 |        |             |
1102:000 | DONE wsp | na 16 16 |        |             |
1103:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1104:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE
1105:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
1106:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
1107:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
1108:000 | DONE lbl | na 16 16 | 006549 |             | compile/execute                      
1109:000 | DONE lbl | na 16 16 | 006549 |             | compex_loop                          
1110:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
1111:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
1112:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
1113:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
1114:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE does not do.
1115:000 | DONE ins | na 16 16 | 006549 | 20 52 62    |                 jsr 006252           ; ( addr u )
1116:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1117:000 | DONE wsp | na 16 16 |        |             |
1118:000 | DONE cmt | na 16 16 |        |             |                 ; if PARSE-NAME returns 0 (empty line), no characters were left
1119:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
1120:000 | DONE ins | na 16 16 | 00654c | 98          |                 tya                  ; force flag check
1121:000 | DONE ins | na 16 16 | 00654d | f0 19       |                 beq 006568           
1122:000 | DONE wsp | na 16 16 |        |             |
1123:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
1124:000 | DONE cmt | na 16 16 |        |             |                 ; internally. Sorry, Garth.
1125:000 | DONE ins | na 16 16 | 00654f | 20 a8 65    |                 jsr 0065a8           ; returns ( addr u )
1126:000 | DONE wsp | na 16 16 |        |             |
1127:000 | DONE cmt | na 16 16 |        |             |                 ; If we got something that is not a zero, we go to FIND-NAME to
1128:000 | DONE cmt | na 16 16 |        |             |                 ; get the nt. Returns ( nt | 0 )
1129:000 | DONE ins | na 16 16 | 006552 | 20 d3 61    |                 jsr 0061d3           
1130:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1131:000 | DONE wsp | na 16 16 |        |             |
1132:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
1133:000 | DONE ins | na 16 16 | 006555 | 98          |                 tya                  ; force flag check of TOS
1134:000 | DONE ins | na 16 16 | 006556 | d0 06       |                 bne 00655e           
1135:000 | DONE wsp | na 16 16 |        |             |
1136:000 | DONE cmt | na 16 16 |        |             |                 ; TODO Attempt NUMBER CONVERSION
1137:000 | DONE wsp | na 16 16 |        |             |
1138:000 | DONE ins | na 16 16 | 006558 | a9 7c 67    |                 lda.# 00677c         ; "Unknown word"
1139:000 | DONE ins | na 16 16 | 00655b | 4c 6f 65    |                 jmp 00656f           
1140:000 | DONE wsp | na 16 16 |        |             |
1141:000 | DONE lbl | na 16 16 | 00655e |             | compex_got_name_token                
1142:000 | DONE wsp | na 16 16 |        |             |
1143:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if INTERPRETED OR COMPILED
1144:000 | DONE wsp | na 16 16 |        |             |
1145:000 | DONE cmt | na 16 16 |        |             |                 ; the xt of a word is four bytes below its nt. This is a quick
1146:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT
1147:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1148:000 | DONE ins | na 16 16 | 00655e | c8          |                 iny                  
1149:000 | DONE ins | na 16 16 | 00655f | c8          |                 iny                  
1150:000 | DONE ins | na 16 16 | 006560 | c8          |                 iny                  
1151:000 | DONE ins | na 16 16 | 006561 | c8          |                 iny                  ; ( -- xt )
1152:000 | DONE wsp | na 16 16 |        |             |
1153:000 | DONE wsp | na 16 16 |        |             |
1154:000 | DONE cmt | na 16 16 |        |             |                 ; TODO Decide between INTERPRET or COMPILE
1155:000 | DONE wsp | na 16 16 |        |             |
1156:000 | DONE cmt | na 16 16 |        |             |                 ; TESTING for now we just execute all the things
1157:000 | DONE ins | na 16 16 | 006562 | 20 c3 61    |                 jsr 0061c3           
1158:000 | DONE wsp | na 16 16 |        |             |
1159:000 | DONE cmt | na 16 16 |        |             |                 ; that's quite enough for this word, let's get the next one
1160:000 | DONE ins | na 16 16 | 006565 | 4c 49 65    |                 jmp 006549           
1161:000 | DONE wsp | na 16 16 |        |             |
1162:000 | DONE lbl | na 16 16 | 006568 |             | compex_line_done                     
1163:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
1164:000 | DONE ins | na 16 16 | 006568 | b4 02       |                 ldy.dx 02            
1165:000 | DONE ins | na 16 16 | 00656a | e8          |                 inx                  
1166:000 | DONE ins | na 16 16 | 00656b | e8          |                 inx                  
1167:000 | DONE ins | na 16 16 | 00656c | e8          |                 inx                  
1168:000 | DONE ins | na 16 16 | 00656d | e8          |                 inx                  
1169:000 | DONE wsp | na 16 16 |        |             |
1170:000 | DONE ins | na 16 16 | 00656e | 60          |                 rts                  
1171:000 | DONE wsp | na 16 16 |        |             |
1172:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1173:000 | DONE cmt | na 16 16 |        |             | ; Fatal error encountered: Take address of error string from A, print it and
1174:000 | DONE cmt | na 16 16 |        |             | ; then call abort
1175:000 | DONE lbl | na 16 16 | 00656f |             | error                                
1176:000 | DONE ins | na 16 16 | 00656f | 20 75 65    |                 jsr 006575           
1177:000 | DONE ins | na 16 16 | 006572 | 4c 93 60    |                 jmp 006093           
1178:000 | DONE wsp | na 16 16 |        |             |
1179:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1180:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
1181:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
1182:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
1183:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
1184:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
1185:000 | DONE wsp | na 16 16 |        |             |
1186:000 | DONE lbl | na 16 16 | 006575 |             | print_string                         
1187:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
1188:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
1189:000 | DONE ins | na 16 16 | 006575 | da          |                 phx                  
1190:000 | DONE ins | na 16 16 | 006576 | aa          |                 tax                  ; x16 contains address of string
1191:000 | DONE lbl | na 16 16 | 006577 |             | @                                    
1192:000 | DONE ins | na 16 16 | 006577 | e2 20       |                 sep 20               
1192:001 | DONE ctl | na  8 16 |        |             |         .!a8
1193:000 | DONE ins | na  8 16 | 006579 | bd 00 00    |                 lda.x 0000           ; LDA $0000,X
1194:000 | DONE ins | na  8 16 | 00657c | f0 06       |                 beq 006584           
1195:000 | DONE ins | na  8 16 | 00657e | 20 30 60    |                 jsr 006030           
1196:000 | DONE ins | na  8 16 | 006581 | e8          |                 inx                  
1197:000 | DONE ins | na  8 16 | 006582 | 80 f3       |                 bra 006577           
1198:000 | DONE wsp | na  8 16 |        |             |
1199:000 | DONE lbl | na  8 16 | 006584 |             | print_string_done                    
1200:000 | DONE ins | na  8 16 | 006584 | a9 0a       |                 lda.# AscLF          ; should be CR on some systems
1201:000 | DONE ins | na  8 16 | 006586 | 20 30 60    |                 jsr 006030           
1202:000 | DONE ins | na  8 16 | 006589 | c2 20       |                 rep 20               
1202:001 | DONE ctl | na 16 16 |        |             |         .!a16
1203:000 | DONE ins | na 16 16 | 00658b | fa          |                 plx                  
1204:000 | DONE ins | na 16 16 | 00658c | 60          |                 rts                  
1205:000 | DONE wsp | na 16 16 |        |             |
1206:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1207:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
1208:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
1209:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
1210:000 | DONE lbl | na 16 16 | 00658d |             | byte_to_ascii                        
1211:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1212:000 | DONE ins | na  8 16 | 00658d | 48          |                 pha                  
1213:000 | DONE cmt | na  8 16 |        |             |                 ; convert high nibble first
1214:000 | DONE ins | na  8 16 | 00658e | 4a          |                 lsr.a                
1215:000 | DONE ins | na  8 16 | 00658f | 4a          |                 lsr.a                
1216:000 | DONE ins | na  8 16 | 006590 | 4a          |                 lsr.a                
1217:000 | DONE ins | na  8 16 | 006591 | 4a          |                 lsr.a                
1218:000 | DONE ins | na  8 16 | 006592 | 20 9a 65    |                 jsr 00659a           
1219:000 | DONE wsp | na  8 16 |        |             |
1220:000 | DONE ins | na  8 16 | 006595 | 68          |                 pla                  
1221:000 | DONE ins | na  8 16 | 006596 | 20 9a 65    |                 jsr 00659a           
1222:000 | DONE wsp | na  8 16 |        |             |
1223:000 | DONE ins | na  8 16 | 006599 | 60          |                 rts                  
1224:000 | DONE wsp | na  8 16 |        |             |
1225:000 | DONE wsp | na  8 16 |        |             |
1226:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1227:000 | DONE cmt | na  8 16 |        |             | ; CONVERT NIBBLE TO ASCII
1228:000 | DONE cmt | na  8 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
1229:000 | DONE cmt | na  8 16 |        |             | ; number, then prints it. Assumes A is 8 bit
1230:000 | DONE lbl | na  8 16 | 00659a |             | nibble_to_ascii                      
1231:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1232:000 | DONE ins | na  8 16 | 00659a | 29 0f       |                 and.# 0f             
1233:000 | DONE ins | na  8 16 | 00659c | 09 30       |                 ora.# 30             
1234:000 | DONE ins | na  8 16 | 00659e | c9 3a       |                 cmp.# 3a             ; '9' + 1
1235:000 | DONE ins | na  8 16 | 0065a0 | 90 02       |                 bcc 0065a4           
1236:000 | DONE ins | na  8 16 | 0065a2 | 69 06       |                 adc.# 06             
1237:000 | DONE lbl | na  8 16 | 0065a4 |             | @                                    
1238:000 | DONE ins | na  8 16 | 0065a4 | 20 30 60    |                 jsr 006030           
1239:000 | DONE wsp | na  8 16 |        |             |
1240:000 | DONE ins | na  8 16 | 0065a7 | 60          |                 rts                  
1241:000 | DONE wsp | na  8 16 |        |             |
1242:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1243:000 | DONE cmt | na  8 16 |        |             | ; Convert a string given by ( addr u ) to upper case in place. Since we have to
1244:000 | DONE cmt | na  8 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
1245:000 | DONE cmt | na  8 16 |        |             | ; string somewhere and then return the new address and length
1246:000 | DONE lbl | na  8 16 | 0065a8 |             | string_to_uppercase                  
1247:000 | DONE cmt | na  8 16 |        |             |                 ; TODO CODE THIS
1248:000 | DONE ins | na  8 16 | 0065a8 | 60          |                 rts                  
1249:000 | DONE wsp | na  8 16 |        |             |
1250:000 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1251:000 | DONE cmt | na  8 16 |        |             | ; BOTTOM INCLUDES
1252:000 | DONE wsp | na  8 16 |        |             |
1253:000 | DONE cmt | na  8 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
1253:001 | DONE cmt | na  8 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1253:002 | DONE cmt | na  8 16 |        |             | ; First version: 01. Apr 2016
1253:003 | DONE cmt | na  8 16 |        |             | ; This version:  04. Jan 2017
1253:004 | DONE wsp | na  8 16 |        |             |
1253:005 | DONE cmt | na  8 16 |        |             | ; This file is included by liaraforth.tasm
1253:006 | DONE wsp | na  8 16 |        |             |
1253:007 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1253:008 | DONE cmt | na  8 16 |        |             | ; GENERAL
1253:009 | DONE wsp | na  8 16 |        |             |
1253:010 | DONE cmt | na  8 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
1253:011 | DONE cmt | na  8 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
1253:012 | DONE cmt | na  8 16 |        |             | ; character
1253:013 | DONE wsp | na  8 16 |        |             |
1253:014 | DONE lbl | na  8 16 | 0065a9 |             | s_title                              
1253:015 | DONE dir | na  8 16 | 0065a9 | (32 bytes)  |         .byte AscLF, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, 68,  (...) 
1253:015 | DONE dir | na  8 16 |        |             |                 0a 4c 69 61 72 61 20 46  --  
 L i a r a   F
1253:015 | DONE dir | na  8 16 |        |             |                 6f 72 74 68 20 66 6f 72  --  o r t h   f o r
1253:015 | DONE dir | na  8 16 |        |             |                 20 74 68 65 20 57 36 35  --    t h e   W 6 5
1253:015 | DONE dir | na  8 16 |        |             |                 43 32 36 35 53 58 42 00  --  C 2 6 5 S X B .
1253:015 | DONE dir | na  8 16 |        |             |                                          -- 
1253:016 | DONE lbl | na  8 16 | 0065c9 |             | s_version                            
1253:017 | DONE dir | na  8 16 | 0065c9 | (31 bytes)  |         .byte 56, 65, 72, 73, 69, 6f, 6e, 20, 50, 52, 45, 2d, 41, (...) 
1253:017 | DONE dir | na  8 16 |        |             |                 56 65 72 73 69 6f 6e 20  --  V e r s i o n  
1253:017 | DONE dir | na  8 16 |        |             |                 50 52 45 2d 41 4c 50 48  --  P R E - A L P H
1253:017 | DONE dir | na  8 16 |        |             |                 41 20 30 34 2e 20 4a 61  --  A   0 4 .   J a
1253:017 | DONE dir | na  8 16 |        |             |                 6e 20 32 30 31 37 00     --  n   2 0 1 7 .
1253:018 | DONE lbl | na  8 16 | 0065e8 |             | s_author                             
1253:019 | DONE dir | na  8 16 | 0065e8 | (45 bytes)  |         .byte 53, 63, 6f, 74, 20, 57, 2e, 20, 53, 74, 65, 76, 65, (...) 
1253:019 | DONE dir | na  8 16 |        |             |                 53 63 6f 74 20 57 2e 20  --  S c o t   W .  
1253:019 | DONE dir | na  8 16 |        |             |                 53 74 65 76 65 6e 73 6f  --  S t e v e n s o
1253:019 | DONE dir | na  8 16 |        |             |                 6e 20 3c 73 63 6f 74 2e  --  n   < s c o t .
1253:019 | DONE dir | na  8 16 |        |             |                 73 74 65 76 65 6e 73 6f  --  s t e v e n s o
1253:019 | DONE dir | na  8 16 |        |             |                 6e 40 67 6d 61 69 6c 2e  --  n @ g m a i l .
1253:019 | DONE dir | na  8 16 |        |             |                 63 6f 6d 3e 00           --  c o m > .
1253:020 | DONE lbl | na  8 16 | 006615 |             | s_disclaimer                         
1253:021 | DONE dir | na  8 16 | 006615 | (46 bytes)  |         .byte 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, 68, 20, 63, (...) 
1253:021 | DONE dir | na  8 16 |        |             |                 4c 69 61 72 61 20 46 6f  --  L i a r a   F o
1253:021 | DONE dir | na  8 16 |        |             |                 72 74 68 20 63 6f 6d 65  --  r t h   c o m e
1253:021 | DONE dir | na  8 16 |        |             |                 73 20 77 69 74 68 20 61  --  s   w i t h   a
1253:021 | DONE dir | na  8 16 |        |             |                 62 73 6f 6c 75 74 65 6c  --  b s o l u t e l
1253:021 | DONE dir | na  8 16 |        |             |                 79 20 4e 4f 20 57 41 52  --  y   N O   W A R
1253:021 | DONE dir | na  8 16 |        |             |                 52 41 4e 54 59 00        --  R A N T Y .
1253:022 | DONE lbl | na  8 16 | 006643 |             | s_typebye                            
1253:023 | DONE dir | na  8 16 | 006643 | (19 bytes)  |         .byte 54, 79, 70, 65, 20, 27, 62, 79, 65, 27, 20, 74, 6f, (...) 
1253:023 | DONE dir | na  8 16 |        |             |                 54 79 70 65 20 27 62 79  --  T y p e   ' b y
1253:023 | DONE dir | na  8 16 |        |             |                 65 27 20 74 6f 20 65 78  --  e '   t o   e x
1253:023 | DONE dir | na  8 16 |        |             |                 69 74 00                 --  i t .
1253:024 | DONE lbl | na  8 16 | 006656 |             | s_ok                                 
1253:025 | DONE dir | na  8 16 | 006656 | (4 bytes)   |         .byte 20, 6f, 6b, 0          ; note empty space at beginning
1253:025 | DONE dir | na  8 16 |        |             |                 20 6f 6b 00              --    o k .
1253:026 | DONE wsp | na  8 16 |        |             |
1253:027 | DONE wsp | na  8 16 |        |             |
1253:028 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1253:029 | DONE cmt | na  8 16 |        |             | ; ERROR STRINGS
1253:030 | DONE wsp | na  8 16 |        |             |
1253:031 | DONE cmt | na  8 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
1253:032 | DONE cmt | na  8 16 |        |             | ; These are currently the same error strings as in Tali Forth
1253:033 | DONE wsp | na  8 16 |        |             |
1253:034 | DONE lbl | na  8 16 | 00665a |             | es_channel                           
1253:035 | DONE dir | na  8 16 | 00665a | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
1253:035 | DONE dir | na  8 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
1253:035 | DONE dir | na  8 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
1253:035 | DONE dir | na  8 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
1253:035 | DONE dir | na  8 16 |        |             |                 6c 00                    --  l .
1253:036 | DONE lbl | na  8 16 | 006674 |             | es_componly                          
1253:037 | DONE dir | na  8 16 | 006674 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
1253:037 | DONE dir | na  8 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
1253:037 | DONE dir | na  8 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
1253:037 | DONE dir | na  8 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
1253:037 | DONE dir | na  8 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
1253:037 | DONE dir | na  8 16 |        |             |                 00                       --  .
1253:038 | DONE lbl | na  8 16 | 006695 |             | es_defer                             
1253:039 | DONE dir | na  8 16 | 006695 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
1253:039 | DONE dir | na  8 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
1253:039 | DONE dir | na  8 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
1253:039 | DONE dir | na  8 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
1253:039 | DONE dir | na  8 16 |        |             |                 20 79 65 74 00           --    y e t .
1253:040 | DONE lbl | na  8 16 | 0066b2 |             | es_divzero                           
1253:041 | DONE dir | na  8 16 | 0066b2 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
1253:041 | DONE dir | na  8 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
1253:041 | DONE dir | na  8 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
1253:041 | DONE dir | na  8 16 |        |             |                 00                       --  .
1253:042 | DONE lbl | na  8 16 | 0066c3 |             | es_empty                             
1253:043 | DONE dir | na  8 16 | 0066c3 | (9 bytes)   |         .byte 20, 28, 65, 6d, 70, 74, 79, 29, 0 
1253:043 | DONE dir | na  8 16 |        |             |                 20 28 65 6d 70 74 79 29  --    ( e m p t y )
1253:043 | DONE dir | na  8 16 |        |             |                 00                       --  .
1253:044 | DONE lbl | na  8 16 | 0066cc |             | es_error                             
1253:045 | DONE dir | na  8 16 | 0066cc | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
1253:045 | DONE dir | na  8 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
1253:045 | DONE dir | na  8 16 |        |             |                 3c 3c 3c 00              --  < < < .
1253:046 | DONE lbl | na  8 16 | 0066d8 |             | es_intonly                           
1253:047 | DONE dir | na  8 16 | 0066d8 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
1253:047 | DONE dir | na  8 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
1253:047 | DONE dir | na  8 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
1253:047 | DONE dir | na  8 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
1253:048 | DONE lbl | na  8 16 | 0066ee |             | es_noname                            
1253:049 | DONE dir | na  8 16 | 0066ee | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
1253:049 | DONE dir | na  8 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
1253:049 | DONE dir | na  8 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
1253:049 | DONE dir | na  8 16 |        |             |                                          -- 
1253:050 | DONE lbl | na  8 16 | 0066fe |             | es_radix                             
1253:051 | DONE dir | na  8 16 | 0066fe | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
1253:051 | DONE dir | na  8 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
1253:051 | DONE dir | na  8 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
1253:051 | DONE dir | na  8 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
1253:052 | DONE lbl | na  8 16 | 006715 |             | es_refill1                           
1253:053 | DONE dir | na  8 16 | 006715 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
1253:053 | DONE dir | na  8 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
1253:053 | DONE dir | na  8 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
1253:053 | DONE dir | na  8 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
1253:053 | DONE dir | na  8 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
1253:053 | DONE dir | na  8 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
1253:053 | DONE dir | na  8 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
1253:054 | DONE lbl | na  8 16 | 006743 |             | es_refill2                           
1253:055 | DONE dir | na  8 16 | 006743 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
1253:055 | DONE dir | na  8 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
1253:055 | DONE dir | na  8 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
1253:055 | DONE dir | na  8 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
1253:055 | DONE dir | na  8 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
1253:055 | DONE dir | na  8 16 |        |             |                                          -- 
1253:056 | DONE lbl | na  8 16 | 006763 |             | es_stack                             
1253:057 | DONE dir | na  8 16 | 006763 | (25 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 6f, 76, 65, 72, 2d, 20, 6f, (...) 
1253:057 | DONE dir | na  8 16 |        |             |                 53 74 61 63 6b 20 6f 76  --  S t a c k   o v
1253:057 | DONE dir | na  8 16 |        |             |                 65 72 2d 20 6f 72 20 75  --  e r -   o r   u
1253:057 | DONE dir | na  8 16 |        |             |                 6e 64 65 72 66 6c 6f 77  --  n d e r f l o w
1253:057 | DONE dir | na  8 16 |        |             |                 00                       --  .
1253:058 | DONE lbl | na  8 16 | 00677c |             | es_syntax                            
1253:059 | DONE dir | na  8 16 | 00677c | (13 bytes)  |         .byte 55, 6e, 6b, 6e, 6f, 77, 6e, 20, 77, 6f, 72, 64, 0 
1253:059 | DONE dir | na  8 16 |        |             |                 55 6e 6b 6e 6f 77 6e 20  --  U n k n o w n  
1253:059 | DONE dir | na  8 16 |        |             |                 77 6f 72 64 00           --  w o r d .
1253:060 | DONE wsp | na  8 16 |        |             |
1253:061 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1253:062 | DONE cmt | na  8 16 |        |             | ; TESTING STRINGS
1253:063 | DONE wsp | na  8 16 |        |             |
1253:064 | DONE cmt | na  8 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
1253:065 | DONE cmt | na  8 16 |        |             | ; developed. All start with "tests_"
1253:066 | DONE wsp | na  8 16 |        |             |
1253:067 | DONE lbl | na  8 16 | 006789 |             | tests_prev_cmd                       
1253:068 | DONE dir | na  8 16 | 006789 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
1253:068 | DONE dir | na  8 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
1253:068 | DONE dir | na  8 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
1253:068 | DONE dir | na  8 16 |        |             |                 64 29 00                 --  d ) .
1253:069 | DONE lbl | na  8 16 | 00679c |             | tests_next_cmd                       
1253:070 | DONE dir | na  8 16 | 00679c | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
1253:070 | DONE dir | na  8 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
1253:070 | DONE dir | na  8 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
1253:071 | DONE wsp | na  8 16 |        |             |
1253:072 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1253:073 | DONE cmt | na  8 16 |        |             | ; ALPHABET STRINGS
1253:074 | DONE wsp | na  8 16 |        |             |
1253:075 | DONE cmt | na  8 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
1253:076 | DONE cmt | na  8 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
1253:077 | DONE wsp | na  8 16 |        |             |
1253:078 | DONE lbl | na  8 16 | 0067ab |             | alphastr                             
1253:079 | DONE dir | na  8 16 | 0067ab | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
1253:079 | DONE dir | na  8 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
1253:079 | DONE dir | na  8 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
1253:079 | DONE dir | na  8 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
1253:079 | DONE dir | na  8 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
1253:079 | DONE dir | na  8 16 |        |             |                 77 79 7a                 --  w y z
1254:000 | DONE wsp | na  8 16 |        |             |
1255:000 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1256:000 | DONE cmt | na  8 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
1257:000 | DONE wsp | na  8 16 |        |             |
1258:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
1259:000 | DONE cmt | na  8 16 |        |             |                 ; lda.# 61
1260:000 | DONE cmt | na  8 16 |        |             |                 ; jsr put_chr
1261:000 | DONE cmt | na  8 16 |        |             |                 ; .!a16
1262:000 | DONE cmt | na  8 16 |        |             |                 ; brk 00
1263:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING ---
1264:000 | DONE wsp | na  8 16 |        |             |
1265:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
1266:000 | DONE cmt | na  8 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
1267:000 | DONE cmt | na  8 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
1268:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING ---
1269:000 | DONE wsp | na  8 16 |        |             |
1270:000 | DONE cmt | na  8 16 |        |             | ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1271:000 | DONE wsp | na  8 16 |        |             |
1272:000 | DONE wsp | na  8 16 |        |             |
1273:000 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1274:000 | DONE cmt | na  8 16 |        |             | ; END
1275:000 | DONE wsp | na  8 16 |        |             |
1276:000 | DONE dir | na  8 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- a_2dup                        : 0060f8
- a_abort                       : 006093
- a_accept                      : 006103
- a_bell                        : 006184
- a_bl                          : 00618a
- a_bye                         : 006192
- a_cold                        : 00605f
- a_comma                       : 006195
- a_count                       : 0061a1
- a_cr                          : 0061b0
- a_drop                        : 0061b9
- a_dup                         : 0061be
- a_execute                     : 0061c3
- a_find-name                   : 0061d3
- a_here                        : 006232
- a_name>int                    : 006239
- a_name>string                 : 00623e
- a_nip                         : 00624f
- a_one                         : 0060e6
- a_one-plus                    : 0060ee
- a_parse                       : 006284
- a_parse-name                  : 006252
- a_plus                        : 0060d6
- a_quit                        : 00609d
- a_refill                      : 0062b5
- a_source                      : 0062f0
- a_source-id                   : 0062fd
- a_space                       : 006304
- a_state                       : 00630e
- a_swap                        : 006316
- a_to-in                       : 0060ce
- a_true                        : 00631c
- a_tuck                        : 006324
- a_two                         : 0060f0
- a_type                        : 00632d
- a_words                       : 00634e
- a_zero                        : 0060de
- accept_bs                     : 006166
- accept_eol                    : 00615f
- accept_loop                   : 006114
- accept_nonzero                : 00610b
- alphastr                      : 0067ab
- ascbell                       : 000007
- ascbs                         : 000008
- asccc                         : 000003
- asccn                         : 00000e
- asccp                         : 000010
- asccr                         : 00000d
- ascdel                        : 00007f
- ascesc                        : 00001b
- asclf                         : 00000a
- ascsp                         : 000020
- brg_value                     : 00000b
- buffers                       : 007c00
- buffersize                    : 0000ff
- byte_to_ascii                 : 00658d
- cib                           : 00020c
- ciblen                        : 00020e
- co                            : 000040
- compex_got_name_token         : 00655e
- compex_line_done              : 006568
- compex_loop                   : 006549
- compile/execute               : 006549
- cp                            : 000200
- directpage                    : 000200
- directpage-multiple           : 007400
- dp                            : 000202
- dsp0                          : 0002f0
- error                         : 00656f
- es_channel                    : 00665a
- es_componly                   : 006674
- es_defer                      : 006695
- es_divzero                    : 0066b2
- es_empty                      : 0066c3
- es_error                      : 0066cc
- es_intonly                    : 0066d8
- es_noname                     : 0066ee
- es_radix                      : 0066fe
- es_refill1                    : 006715
- es_refill2                    : 006743
- es_stack                      : 006763
- es_syntax                     : 00677c
- execute_done                  : 0061d1
- find-name_char_loop           : 006209
- find-name_char_mismatch       : 006217
- find-name_done                : 00622f
- find-name_failure             : 00622a
- find-name_loop                : 0061df
- find-name_next_word           : 00621a
- find-name_success             : 006212
- get_chr                       : 006043
- get_chr_wait                  : 006048
- h_2dup                        : 006422
- h_abort                       : 0063ac
- h_accept                      : 0064e6
- h_bell                        : 006393
- h_bl                          : 0063ec
- h_bye                         : 00636f
- h_cold                        : 00637a
- h_comma                       : 0064dd
- h_count                       : 00639f
- h_cr                          : 0063e2
- h_drop                        : 00653d
- h_dup                         : 006532
- h_execute                     : 00650b
- h_false                       : 006467
- h_find-name                   : 00649b
- h_here                        : 00651a
- h_name>int                    : 0063d2
- h_name>string                 : 00640f
- h_nip                         : 006500
- h_one                         : 006489
- h_one-plus                    : 00645d
- h_parse                       : 0063b9
- h_parse-name                  : 0064ba
- h_plus                        : 006454
- h_quit                        : 0063c6
- h_refill                      : 0064ac
- h_source                      : 006446
- h_source-id                   : 0064cc
- h_space                       : 0063f6
- h_state                       : 00642e
- h_swap                        : 006526
- h_to-in                       : 00643b
- h_true                        : 006474
- h_tuck                        : 0064f4
- h_two                         : 006480
- h_type                        : 006403
- h_words                       : 006386
- h_zero                        : 006492
- have_chr?                     : 006052
- hw_acsr0                      : 00df70
- hw_acsr1                      : 00df72
- hw_acsr2                      : 00df74
- hw_acsr3                      : 00df76
- hw_artd0                      : 00df71
- hw_artd1                      : 00df73
- hw_artd2                      : 00df75
- hw_artd3                      : 00df77
- hw_bcr                        : 00df40
- hw_eier                       : 00df47
- hw_eifr                       : 00df45
- hw_pcs7                       : 00df27
- hw_pd0                        : 00df00
- hw_pd1                        : 00df01
- hw_pd2                        : 00df02
- hw_pd3                        : 00df03
- hw_pd4                        : 00df20
- hw_pd5                        : 00df21
- hw_pd6                        : 00df22
- hw_pd7                        : 00df23
- hw_pdd0                       : 00df04
- hw_pdd1                       : 00df05
- hw_pdd2                       : 00df06
- hw_pdd3                       : 00df07
- hw_pdd4                       : 00df24
- hw_pdd5                       : 00df25
- hw_pdd6                       : 00df26
- hw_sscr                       : 00df41
- hw_t0ch                       : 00df61
- hw_t0cl                       : 00df60
- hw_t1ch                       : 00df63
- hw_t1cl                       : 00df62
- hw_t2ch                       : 00df65
- hw_t2cl                       : 00df64
- hw_t3ch                       : 00df67
- hw_t3cl                       : 00df66
- hw_t4ch                       : 00df69
- hw_t4cl                       : 00df68
- hw_t5ch                       : 00df6b
- hw_t5cl                       : 00df6a
- hw_t6ch                       : 00df6d
- hw_t6cl                       : 00df6c
- hw_t7ch                       : 00df6f
- hw_t7cl                       : 00df6e
- hw_tcr                        : 00df42
- hw_ter                        : 00df43
- hw_tier                       : 00df46
- hw_tifr                       : 00df44
- hw_uier                       : 00df49
- hw_uifr                       : 00df48
- ibuffer1                      : 007c00
- ibuffer2                      : 007d00
- im                            : 000020
- insrc                         : 00020a
- ip                            : 000208
- maxram-multiple               : 006fff
- maxram-single                 : 007bff
- nc                            : 000010
- nibble_to_ascii               : 00659a
- parse-name_empty_line         : 006264
- parse-name_found              : 006278
- parse-name_loop               : 006257
- parse_found_delimiter         : 0062a4
- parse_loop                    : 006297
- parse_reached_eol             : 0062a6
- physicalram                   : 007fff
- piblen                        : 000210
- print_string                  : 006575
- print_string_done             : 006584
- put_chr                       : 006030
- put_chr_wait                  : 006037
- pw                            : 000080
- quit_get_line                 : 0060ad
- quit_refill_successful        : 0060bb
- ram0                          : 000200
- refill_source_is_not_keyboard : 0062dc
- refill_source_is_not_string   : 0062e9
- reset_hardware                : 006000
- s_author                      : 0065e8
- s_disclaimer                  : 006615
- s_ok                          : 006656
- s_title                       : 0065a9
- s_typebye                     : 006643
- s_version                     : 0065c9
- stack-multiple                : 007000
- stack0                        : 007fff
- start                         : 006062
- state                         : 000214
- string_to_uppercase           : 0065a8
- tests_next_cmd                : 00679c
- tests_prev_cmd                : 006789
- tmp1                          : 000216
- tmp2                          : 000218
- tmp3                          : 00021a
- tmpdsp                        : 000204
- tmptos                        : 000206
- toin                          : 000212
- type_done                     : 006347
- type_loop                     : 00633b
- words_loop                    : 006355
- z_2dup                        : 006102
- z_abort                       : 0060cd
- z_accept                      : 006183
- z_bell                        : 006189
- z_bl                          : 006191
- z_bye                         : 006194
- z_cold                        : 0060cd
- z_comma                       : 0061a0
- z_count                       : 0061af
- z_cr                          : 0061b8
- z_drop                        : 0061bd
- z_dup                         : 0061c2
- z_execute                     : 0061d2
- z_find-name                   : 006231
- z_here                        : 006238
- z_name>int                    : 00623d
- z_name>string                 : 00624e
- z_nip                         : 006251
- z_one                         : 0060ed
- z_one-plus                    : 0060ef
- z_parse                       : 0062b4
- z_parse-name                  : 0062b4
- z_plus                        : 0060dd
- z_quit                        : 0060cd
- z_refill                      : 0062ef
- z_source                      : 0062fc
- z_source-id                   : 006303
- z_space                       : 00630d
- z_state                       : 006315
- z_swap                        : 00631b
- z_to-in                       : 0060d5
- z_true                        : 006323
- z_tuck                        : 00632c
- z_two                         : 0060f7
- z_type                        : 00634d
- z_words                       : 00636e
- z_zero                        : 0060e5
