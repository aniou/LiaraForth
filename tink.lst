A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Fri Feb 17 02:02:41 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.08735 seconds
Code origin: 006000
Bytes of machine code: 3749

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 16. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: 1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE wsp | em  8  8 |        |             |
  16:074 | DONE wsp | em  8  8 |        |             |
  16:075 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:076 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:077 | DONE wsp | em  8  8 |        |             |
  16:078 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:080 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:089 | DONE wsp | em  8  8 |        |             |
  16:090 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:091 | DONE dir | em  8  8 |        |             |         .equ PW 0008                 Primitive (Native) Word
  16:092 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:093 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:094 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native (inline) Compile
  16:095 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             | 		; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 8e 63    |                 jsr 00638e           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  57:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  58:000 | DONE ins | na 16 16 | 00606a | a9 0e 6b    |                 lda.# 006b0e         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE wsp | na 16 16 |        |             |
  70:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  71:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  72:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  73:000 | DONE wsp | na 16 16 |        |             |
  74:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  75:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  76:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  77:000 | DONE wsp | na 16 16 |        |             |
  78:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  79:000 | DONE ins | na 16 16 | 006085 | 20 96 65    |                 jsr 006596           
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  82:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is rubbish, so we don't have to push it to the
  83:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  84:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  88:000 | DONE ins | na 16 16 | 00608c | a9 e8 6b    |                 lda.# 006be8         
  89:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  90:000 | DONE ins | na 16 16 | 006091 | a0 15 01    |                 ldy.# 000115         length goes in TOS
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE ins | na 16 16 | 006094 | 20 63 64    |                 jsr 006463           
  93:000 | DONE wsp | na 16 16 |        |             |
  94:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to ABORT
  95:000 | DONE wsp | na 16 16 |        |             |
  96:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  97:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  98:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  99:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 100:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 101:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 102:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 103:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 103:001 | DONE ctl | na 16 16 |        |             |         .!a16
 104:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 105:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 106:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE wsp | na 16 16 |        |             |
 109:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 110:000 | DONE wsp | na 16 16 |        |             |
 111:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 112:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 113:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 114:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 115:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 116:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 117:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 118:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 119:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 120:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 123:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 124:000 | DONE ins | na 16 16 | 0060a3 | 9c 92 64    |                 stz 006492           
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 127:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 130:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 131:000 | DONE wsp | na 16 16 |        |             |
 132:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 133:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 134:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 135:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 136:000 | DONE wsp | na 16 16 |        |             |
 137:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 138:000 | DONE ins | na 16 16 | 0060ac | 20 08 66    |                 jsr 006608           ( -- f )
 139:000 | DONE wsp | na 16 16 |        |             |
 140:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 141:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 142:000 | DONE wsp | na 16 16 |        |             |
 143:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 145:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 146:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 147:000 | DONE ins | na 16 16 | 0060b2 | a9 d1 6d    |                 lda.# 006dd1         
 148:000 | DONE ins | na 16 16 | 0060b5 | 4c ae 6b    |                 jmp 006bae           
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE wsp | na 16 16 |        |             |
 151:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 152:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 153:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 154:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 155:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 156:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 157:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 158:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 159:000 | DONE wsp | na 16 16 |        |             |
 160:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 161:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 164:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 165:000 | DONE ins | na 16 16 | 0060be | 20 3c 6b    |                 jsr 006b3c           
 166:000 | DONE wsp | na 16 16 |        |             |
 167:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 168:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 169:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 170:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 171:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 172:000 | DONE wsp | na 16 16 |        |             |
 173:000 | DONE ins | na 16 16 | 0060c6 | a9 37 6e    |                 lda.# 006e37         
 174:000 | DONE ins | na 16 16 | 0060c9 | 4c ae 6b    |                 jmp 006bae           
 175:000 | DONE wsp | na 16 16 |        |             |
 176:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 177:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 178:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 179:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 180:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 181:000 | DONE wsp | na 16 16 |        |             |
 182:000 | DONE ins | na 16 16 | 0060d0 | a9 fd 6c    |                 lda.# 006cfd         
 183:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 184:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 185:000 | DONE ins | na 16 16 | 0060d5 | a9 01 6d    |                 lda.# 006d01         fall through to quit_print
 186:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 187:000 | DONE ins | na 16 16 | 0060d8 | 20 b4 6b    |                 jsr 006bb4           
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, guys. Now get the next one
 190:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 191:000 | DONE wsp | na 16 16 |        |             |
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 194:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 194:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 195:000 | DONE wsp | na 16 16 |        |             |
 196:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 197:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 198:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 199:000 | DONE lbl | na 16 16 | 0060df |             | xt_to-in                             
 200:000 | DONE ins | na 16 16 | 0060df | ca          |                 dex                  
 201:000 | DONE ins | na 16 16 | 0060e0 | ca          |                 dex                  
 202:000 | DONE ins | na 16 16 | 0060e1 | 94 00       |                 sty.dx 00            
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | a0 12 02    |                 ldy.# 000212         >IN
 205:000 | DONE lbl | na 16 16 | 0060e6 |             | z_to-in                              
 205:001 | DONE ins | na 16 16 | 0060e6 | 60          |                 rts                  
 206:000 | DONE wsp | na 16 16 |        |             |
 207:000 | DONE wsp | na 16 16 |        |             |
 208:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 209:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 210:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 211:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 212:000 | DONE cmt | na 16 16 |        |             | ; aligned
 213:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 214:000 | DONE cmt | na 16 16 |        |             | ;               tya
 215:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 216:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 217:000 | DONE cmt | na 16 16 |        |             | ;               iny
 218:000 | DONE cmt | na 16 16 |        |             | ;               iny
 219:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 220:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 221:000 | DONE cmt | na 16 16 |        |             | ;               inx
 222:000 | DONE cmt | na 16 16 |        |             | ;               inx
 223:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 224:000 | DONE lbl | na 16 16 | 0060e7 |             | xt_comma                             
 225:000 | DONE ins | na 16 16 | 0060e7 | 98          |                 tya                  
 226:000 | DONE ins | na 16 16 | 0060e8 | 92 00       |                 sta.di 000200        STA (CP)
 227:000 | DONE ins | na 16 16 | 0060ea | e6 00       |                 inc.d 000200         
 228:000 | DONE ins | na 16 16 | 0060ec | e6 00       |                 inc.d 000200         
 229:000 | DONE wsp | na 16 16 |        |             |
 230:000 | DONE ins | na 16 16 | 0060ee | b4 00       |                 ldy.dx 00            
 231:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 232:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE lbl | na 16 16 | 0060f2 |             | z_comma                              
 234:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 235:000 | DONE wsp | na 16 16 |        |             |
 236:000 | DONE wsp | na 16 16 |        |             |
 237:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 238:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 239:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 240:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 241:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_colon                             
 242:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 243:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 244:000 | DONE ins | na 16 16 | 0060f3 | a5 14       |                 lda.d 000214         
 245:000 | DONE ins | na 16 16 | 0060f5 | f0 06       |                 beq 0060fd           
 246:000 | DONE wsp | na 16 16 |        |             |
 247:000 | DONE ins | na 16 16 | 0060f7 | a9 1f 6e    |                 lda.# 006e1f         
 248:000 | DONE ins | na 16 16 | 0060fa | 4c ae 6b    |                 jmp 006bae           
 249:000 | DONE lbl | na 16 16 | 0060fd |             | @                                    
 250:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 251:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 252:000 | DONE ins | na 16 16 | 0060fd | e6 14       |                 inc.d 000214         
 253:000 | DONE wsp | na 16 16 |        |             |
 254:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 255:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 256:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 257:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 258:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 259:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 260:000 | DONE ins | na 16 16 | 0060ff | a5 02       |                 lda.d 000202         
 261:000 | DONE ins | na 16 16 | 006101 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE ins | na 16 16 | 006102 | 20 1b 63    |                 jsr 00631b           
 264:000 | DONE wsp | na 16 16 |        |             |
 265:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 266:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 267:000 | DONE ins | na 16 16 | 006105 | a5 02       |                 lda.d 000202         
 268:000 | DONE ins | na 16 16 | 006107 | 85 1e       |                 sta.d 00021e         
 269:000 | DONE ins | na 16 16 | 006109 | 68          |                 pla                  
 270:000 | DONE ins | na 16 16 | 00610a | 85 02       |                 sta.d 000202         
 271:000 | DONE wsp | na 16 16 |        |             |
 272:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 273:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 274:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 275:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 276:000 | DONE ins | na 16 16 | 00610c | a5 00       |                 lda.d 000200         
 277:000 | DONE ins | na 16 16 | 00610e | 38          |                 sec                  
 278:000 | DONE ins | na 16 16 | 00610f | e9 03 00    |                 sbc.# 0003           
 279:000 | DONE ins | na 16 16 | 006112 | 85 00       |                 sta.d 000200         
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE lbl | na 16 16 | 006114 |             | z_colon                              
 281:001 | DONE ins | na 16 16 | 006114 | 60          |                 rts                  
 282:000 | DONE wsp | na 16 16 |        |             |
 283:000 | DONE wsp | na 16 16 |        |             |
 284:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 285:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 286:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 287:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 288:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free
 289:000 | DONE cmt | na 16 16 |        |             | ; byte.
 290:000 | DONE lbl | na 16 16 | 006115 |             | xt_semicolon                         
 291:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 292:000 | DONE ins | na 16 16 | 006115 | 84 06       |                 sty.d 000206         
 293:000 | DONE wsp | na 16 16 |        |             |
 294:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 295:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 296:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 297:000 | DONE ins | na 16 16 | 006117 | a0 06 00    |                 ldy.# 0006           
 298:000 | DONE ins | na 16 16 | 00611a | a5 00       |                 lda.d 000200         
 299:000 | DONE ins | na 16 16 | 00611c | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 300:000 | DONE wsp | na 16 16 |        |             |
 301:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 302:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 303:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 304:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 305:000 | DONE ins | na 16 16 | 00611e | a9 60 00    |                 lda.# 60             opcode for RTS
 306:000 | DONE ins | na 16 16 | 006121 | 92 00       |                 sta.di 000200        STA (CP)
 307:000 | DONE ins | na 16 16 | 006123 | e6 00       |                 inc.d 000200         MSB will be overwritten
 308:000 | DONE wsp | na 16 16 |        |             |
 309:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 310:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 311:000 | DONE ins | na 16 16 | 006125 | a5 1e       |                 lda.d 00021e         
 312:000 | DONE ins | na 16 16 | 006127 | 85 02       |                 sta.d 000202         
 313:000 | DONE wsp | na 16 16 |        |             |
 314:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 315:000 | DONE ins | na 16 16 | 006129 | a4 06       |                 ldy.d 000206         
 316:000 | DONE wsp | na 16 16 |        |             |
 317:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 318:000 | DONE ins | na 16 16 | 00612b | 64 14       |                 stz.d 000214         
 319:000 | DONE wsp | na 16 16 |        |             |
 320:000 | DONE lbl | na 16 16 | 00612d |             | z_semicolon                          
 320:001 | DONE ins | na 16 16 | 00612d | 60          |                 rts                  
 321:000 | DONE wsp | na 16 16 |        |             |
 322:000 | DONE wsp | na 16 16 |        |             |
 323:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 324:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 325:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and so can be pretty
 326:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 327:000 | DONE lbl | na 16 16 | 00612e |             | xt_question                          
 328:000 | DONE ins | na 16 16 | 00612e | 20 3f 61    |                 jsr 00613f           
 329:000 | DONE ins | na 16 16 | 006131 | 20 c6 63    |                 jsr 0063c6           
 330:000 | DONE wsp | na 16 16 |        |             |
 331:000 | DONE lbl | na 16 16 | 006134 |             | z_question                           
 331:001 | DONE ins | na 16 16 | 006134 | 60          |                 rts                  
 332:000 | DONE wsp | na 16 16 |        |             |
 333:000 | DONE wsp | na 16 16 |        |             |
 334:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 335:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 336:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 337:000 | DONE lbl | na 16 16 | 006135 |             | xt_store                             
 338:000 | DONE ins | na 16 16 | 006135 | b5 00       |                 lda.dx 00            NOS has value
 339:000 | DONE ins | na 16 16 | 006137 | 99 00 00    |                 sta.y 0000           
 340:000 | DONE ins | na 16 16 | 00613a | e8          |                 inx                  
 341:000 | DONE ins | na 16 16 | 00613b | e8          |                 inx                  
 342:000 | DONE ins | na 16 16 | 00613c | e8          |                 inx                  
 343:000 | DONE ins | na 16 16 | 00613d | e8          |                 inx                  
 344:000 | DONE wsp | na 16 16 |        |             |
 345:000 | DONE lbl | na 16 16 | 00613e |             | z_store                              
 345:001 | DONE ins | na 16 16 | 00613e | 60          |                 rts                  
 346:000 | DONE wsp | na 16 16 |        |             |
 347:000 | DONE wsp | na 16 16 |        |             |
 348:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 349:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 350:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 351:000 | DONE lbl | na 16 16 | 00613f |             | xt_fetch                             
 352:000 | DONE ins | na 16 16 | 00613f | b9 00 00    |                 lda.y 0000           
 353:000 | DONE ins | na 16 16 | 006142 | a8          |                 tay                  
 354:000 | DONE wsp | na 16 16 |        |             |
 355:000 | DONE lbl | na 16 16 | 006143 |             | z_fetch                              
 355:001 | DONE ins | na 16 16 | 006143 | 60          |                 rts                  
 356:000 | DONE wsp | na 16 16 |        |             |
 357:000 | DONE wsp | na 16 16 |        |             |
 358:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 359:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( -- ) X bytes / X cycles
 360:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 361:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word
 362:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 363:000 | DONE lbl | na 16 16 | 006144 |             | xt_bracket-char                      
 364:000 | DONE ins | na 16 16 | 006144 | 20 b7 62    |                 jsr 0062b7           
 365:000 | DONE ins | na 16 16 | 006147 | 20 13 65    |                 jsr 006513           
 366:000 | DONE wsp | na 16 16 |        |             |
 367:000 | DONE lbl | na 16 16 | 00614a |             | z_bracket-char                       
 367:001 | DONE ins | na 16 16 | 00614a | 60          |                 rts                  
 368:000 | DONE wsp | na 16 16 |        |             |
 369:000 | DONE wsp | na 16 16 |        |             |
 370:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 371:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 372:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 373:000 | DONE lbl | na 16 16 | 00614b |             | xt_leftbracket                       
 374:000 | DONE ins | na 16 16 | 00614b | 64 14       |                 stz.d 000214         
 375:000 | DONE lbl | na 16 16 | 00614d |             | z_leftbracket                        
 375:001 | DONE ins | na 16 16 | 00614d | 60          |                 rts                  
 376:000 | DONE wsp | na 16 16 |        |             |
 377:000 | DONE wsp | na 16 16 |        |             |
 378:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 379:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 380:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 381:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 382:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 383:000 | DONE lbl | na 16 16 | 00614e |             | xt_rightbracket                      
 384:000 | DONE ins | na 16 16 | 00614e | a9 01 00    |                 lda.# 0001           
 385:000 | DONE ins | na 16 16 | 006151 | 85 14       |                 sta.d 000214         
 386:000 | DONE wsp | na 16 16 |        |             |
 387:000 | DONE lbl | na 16 16 | 006153 |             | z_rightbracket                       
 387:001 | DONE ins | na 16 16 | 006153 | 60          |                 rts                  
 388:000 | DONE wsp | na 16 16 |        |             |
 389:000 | DONE wsp | na 16 16 |        |             |
 390:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 391:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 392:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 393:000 | DONE lbl | na 16 16 | 006154 |             | xt_plus                              
 394:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 395:000 | DONE ins | na 16 16 | 006154 | 98          |                 tya                  
 396:000 | DONE ins | na 16 16 | 006155 | 18          |                 clc                  
 397:000 | DONE ins | na 16 16 | 006156 | 75 00       |                 adc.dx 00            
 398:000 | DONE ins | na 16 16 | 006158 | a8          |                 tay                  
 399:000 | DONE ins | na 16 16 | 006159 | e8          |                 inx                  
 400:000 | DONE ins | na 16 16 | 00615a | e8          |                 inx                  
 401:000 | DONE wsp | na 16 16 |        |             |
 402:000 | DONE lbl | na 16 16 | 00615b |             | z_plus                               
 402:001 | DONE ins | na 16 16 | 00615b | 60          |                 rts                  
 403:000 | DONE wsp | na 16 16 |        |             |
 404:000 | DONE wsp | na 16 16 |        |             |
 405:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 406:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 407:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 408:000 | DONE lbl | na 16 16 | 00615c |             | xt_minus                             
 409:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 410:000 | DONE ins | na 16 16 | 00615c | 98          |                 tya                  
 411:000 | DONE ins | na 16 16 | 00615d | 49 ff ff    |                 eor.# 0ffff          
 412:000 | DONE wsp | na 16 16 |        |             |
 413:000 | DONE ins | na 16 16 | 006160 | 38          |                 sec                  not CLC
 414:000 | DONE ins | na 16 16 | 006161 | 75 00       |                 adc.dx 00            
 415:000 | DONE wsp | na 16 16 |        |             |
 416:000 | DONE ins | na 16 16 | 006163 | a8          |                 tay                  
 417:000 | DONE ins | na 16 16 | 006164 | e8          |                 inx                  
 418:000 | DONE ins | na 16 16 | 006165 | e8          |                 inx                  
 419:000 | DONE wsp | na 16 16 |        |             |
 420:000 | DONE lbl | na 16 16 | 006166 |             | z_minus                              
 420:001 | DONE ins | na 16 16 | 006166 | 60          |                 rts                  
 421:000 | DONE wsp | na 16 16 |        |             |
 422:000 | DONE wsp | na 16 16 |        |             |
 423:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 424:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 425:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 426:000 | DONE lbl | na 16 16 | 006167 |             | xt_zero                              
 427:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 428:000 | DONE ins | na 16 16 | 006167 | ca          |                 dex                  
 429:000 | DONE ins | na 16 16 | 006168 | ca          |                 dex                  
 430:000 | DONE ins | na 16 16 | 006169 | 94 00       |                 sty.dx 00            
 431:000 | DONE ins | na 16 16 | 00616b | a0 00 00    |                 ldy.# 0000           
 432:000 | DONE wsp | na 16 16 |        |             |
 433:000 | DONE lbl | na 16 16 | 00616e |             | z_zero                               
 433:001 | DONE ins | na 16 16 | 00616e | 60          |                 rts                  
 434:000 | DONE wsp | na 16 16 |        |             |
 435:000 | DONE wsp | na 16 16 |        |             |
 436:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 437:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 438:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 439:000 | DONE lbl | na 16 16 | 00616f |             | xt_one                               
 440:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 441:000 | DONE ins | na 16 16 | 00616f | ca          |                 dex                  
 442:000 | DONE ins | na 16 16 | 006170 | ca          |                 dex                  
 443:000 | DONE ins | na 16 16 | 006171 | 94 00       |                 sty.dx 00            
 444:000 | DONE ins | na 16 16 | 006173 | a0 01 00    |                 ldy.# 0001           
 445:000 | DONE wsp | na 16 16 |        |             |
 446:000 | DONE lbl | na 16 16 | 006176 |             | z_one                                
 446:001 | DONE ins | na 16 16 | 006176 | 60          |                 rts                  
 447:000 | DONE wsp | na 16 16 |        |             |
 448:000 | DONE wsp | na 16 16 |        |             |
 449:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 450:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 451:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 452:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 453:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 454:000 | DONE lbl | na 16 16 | 006177 |             | xt_one-minus                         
 455:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 456:000 | DONE ins | na 16 16 | 006177 | 88          |                 dey                  
 457:000 | DONE lbl | na 16 16 | 006178 |             | z_one-minus                          
 457:001 | DONE ins | na 16 16 | 006178 | 60          |                 rts                  
 458:000 | DONE wsp | na 16 16 |        |             |
 459:000 | DONE wsp | na 16 16 |        |             |
 460:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 461:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 462:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 463:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 464:000 | DONE lbl | na 16 16 | 006179 |             | xt_one-plus                          
 465:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 466:000 | DONE ins | na 16 16 | 006179 | c8          |                 iny                  
 467:000 | DONE lbl | na 16 16 | 00617a |             | z_one-plus                           
 467:001 | DONE ins | na 16 16 | 00617a | 60          |                 rts                  
 468:000 | DONE wsp | na 16 16 |        |             |
 469:000 | DONE wsp | na 16 16 |        |             |
 470:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 471:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 472:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 473:000 | DONE lbl | na 16 16 | 00617b |             | xt_two                               
 474:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 475:000 | DONE ins | na 16 16 | 00617b | ca          |                 dex                  
 476:000 | DONE ins | na 16 16 | 00617c | ca          |                 dex                  
 477:000 | DONE ins | na 16 16 | 00617d | 94 00       |                 sty.dx 00            
 478:000 | DONE ins | na 16 16 | 00617f | a0 02 00    |                 ldy.# 0002           
 479:000 | DONE wsp | na 16 16 |        |             |
 480:000 | DONE lbl | na 16 16 | 006182 |             | z_two                                
 480:001 | DONE ins | na 16 16 | 006182 | 60          |                 rts                  
 481:000 | DONE wsp | na 16 16 |        |             |
 482:000 | DONE wsp | na 16 16 |        |             |
 483:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 484:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 485:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 486:000 | DONE lbl | na 16 16 | 006183 |             | xt_two-star                          
 487:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 488:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 489:000 | DONE ins | na 16 16 | 006183 | 98          |                 tya                  
 490:000 | DONE ins | na 16 16 | 006184 | 0a          |                 asl.a                
 491:000 | DONE ins | na 16 16 | 006185 | a8          |                 tay                  
 492:000 | DONE wsp | na 16 16 |        |             |
 493:000 | DONE lbl | na 16 16 | 006186 |             | z_two-star                           
 493:001 | DONE ins | na 16 16 | 006186 | 60          |                 rts                  
 494:000 | DONE wsp | na 16 16 |        |             |
 495:000 | DONE wsp | na 16 16 |        |             |
 496:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 497:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
 498:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
 499:000 | DONE lbl | na 16 16 | 006187 |             | xt_2drop                             
 500:000 | DONE ins | na 16 16 | 006187 | b4 02       |                 ldy.dx 02            
 501:000 | DONE ins | na 16 16 | 006189 | e8          |                 inx                  
 502:000 | DONE ins | na 16 16 | 00618a | e8          |                 inx                  
 503:000 | DONE ins | na 16 16 | 00618b | e8          |                 inx                  
 504:000 | DONE ins | na 16 16 | 00618c | e8          |                 inx                  
 505:000 | DONE wsp | na 16 16 |        |             |
 506:000 | DONE lbl | na 16 16 | 00618d |             | z_2drop                              
 506:001 | DONE ins | na 16 16 | 00618d | 60          |                 rts                  
 507:000 | DONE wsp | na 16 16 |        |             |
 508:000 | DONE wsp | na 16 16 |        |             |
 509:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 510:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 511:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 512:000 | DONE wsp | na 16 16 |        |             |
 513:000 | DONE lbl | na 16 16 | 00618e |             | xt_2dup                              
 514:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 515:000 | DONE ins | na 16 16 | 00618e | ca          |                 dex                  
 516:000 | DONE ins | na 16 16 | 00618f | ca          |                 dex                  
 517:000 | DONE ins | na 16 16 | 006190 | ca          |                 dex                  
 518:000 | DONE ins | na 16 16 | 006191 | ca          |                 dex                  
 519:000 | DONE ins | na 16 16 | 006192 | 94 02       |                 sty.dx 02            
 520:000 | DONE ins | na 16 16 | 006194 | b5 04       |                 lda.dx 04            
 521:000 | DONE ins | na 16 16 | 006196 | 95 00       |                 sta.dx 00            
 522:000 | DONE wsp | na 16 16 |        |             |
 523:000 | DONE lbl | na 16 16 | 006198 |             | z_2dup                               
 523:001 | DONE ins | na 16 16 | 006198 | 60          |                 rts                  
 524:000 | DONE wsp | na 16 16 |        |             |
 525:000 | DONE wsp | na 16 16 |        |             |
 526:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 527:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 528:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 529:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 530:000 | DONE lbl | na 16 16 | 006199 |             | xt_tick                              
 531:000 | DONE ins | na 16 16 | 006199 | 20 a3 65    |                 jsr 0065a3           ( -- addr u )
 532:000 | DONE wsp | na 16 16 |        |             |
 533:000 | DONE cmt | na 16 16 |        |             | 		; if we got a zero, complain and abort
 534:000 | DONE ins | na 16 16 | 00619c | 98          |                 tya                  force flag check
 535:000 | DONE ins | na 16 16 | 00619d | d0 06       |                 bne 0061a5           
 536:000 | DONE wsp | na 16 16 |        |             |
 537:000 | DONE ins | na 16 16 | 00619f | a9 aa 6d    |                 lda.# 006daa         
 538:000 | DONE ins | na 16 16 | 0061a2 | 4c ae 6b    |                 jmp 006bae           
 539:000 | DONE wsp | na 16 16 |        |             |
 540:000 | DONE lbl | na 16 16 | 0061a5 |             | tick_have_word                       
 541:000 | DONE ins | na 16 16 | 0061a5 | 20 a0 64    |                 jsr 0064a0           ( addr u -- nt)
 542:000 | DONE ins | na 16 16 | 0061a8 | 98          |                 tya                  force flag check
 543:000 | DONE wsp | na 16 16 |        |             |
 544:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 545:000 | DONE ins | na 16 16 | 0061a9 | d0 06       |                 bne 0061b1           
 546:000 | DONE wsp | na 16 16 |        |             |
 547:000 | DONE ins | na 16 16 | 0061ab | a9 47 6e    |                 lda.# 006e47         
 548:000 | DONE ins | na 16 16 | 0061ae | 4c ae 6b    |                 jmp 006bae           
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE lbl | na 16 16 | 0061b1 |             | tick_have_nt                         
 551:000 | DONE ins | na 16 16 | 0061b1 | 20 58 65    |                 jsr 006558           ( nt -- xt )
 552:000 | DONE wsp | na 16 16 |        |             |
 553:000 | DONE lbl | na 16 16 | 0061b4 |             | z_tick                               
 553:001 | DONE ins | na 16 16 | 0061b4 | 60          |                 rts                  
 554:000 | DONE wsp | na 16 16 |        |             |
 555:000 | DONE wsp | na 16 16 |        |             |
 556:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 557:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 558:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 559:000 | DONE lbl | na 16 16 | 0061b5 |             | xt_abs                               
 560:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 561:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 562:000 | DONE ins | na 16 16 | 0061b5 | 98          |                 tya                  force flag test
 563:000 | DONE ins | na 16 16 | 0061b6 | 10 05       |                 bpl 0061bd           positive number is easy
 564:000 | DONE wsp | na 16 16 |        |             |
 565:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 566:000 | DONE ins | na 16 16 | 0061b8 | 49 ff ff    |                 eor.# 0ffff          
 567:000 | DONE ins | na 16 16 | 0061bb | 1a          |                 inc.a                
 568:000 | DONE ins | na 16 16 | 0061bc | a8          |                 tay                  
 569:000 | DONE wsp | na 16 16 |        |             |
 570:000 | DONE lbl | na 16 16 | 0061bd |             | z_abs                                
 570:001 | DONE ins | na 16 16 | 0061bd | 60          |                 rts                  
 571:000 | DONE wsp | na 16 16 |        |             |
 572:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 573:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 574:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 575:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 576:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 577:000 | DONE lbl | na 16 16 | 0061be |             | xt_accept                            
 578:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 579:000 | DONE ins | na 16 16 | 0061be | 98          |                 tya                  force flag test
 580:000 | DONE ins | na 16 16 | 0061bf | d0 03       |                 bne 0061c4           
 581:000 | DONE wsp | na 16 16 |        |             |
 582:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 583:000 | DONE ins | na 16 16 | 0061c1 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
 584:000 | DONE ins | na 16 16 | 0061c2 | e8          |                 inx                  
 585:000 | DONE wsp | na 16 16 |        |             |
 586:000 | DONE ins | na 16 16 | 0061c3 | 60          |                 rts                  
 587:000 | DONE wsp | na 16 16 |        |             |
 588:000 | DONE lbl | na 16 16 | 0061c4 |             | accept_nonzero                       
 589:000 | DONE ins | na 16 16 | 0061c4 | b5 00       |                 lda.dx 00            address of buffer is NOS
 590:000 | DONE ins | na 16 16 | 0061c6 | 85 16       |                 sta.d 000216         
 591:000 | DONE ins | na 16 16 | 0061c8 | e8          |                 inx                  NIP
 592:000 | DONE ins | na 16 16 | 0061c9 | e8          |                 inx                  
 593:000 | DONE wsp | na 16 16 |        |             |
 594:000 | DONE ins | na 16 16 | 0061ca | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
 595:000 | DONE ins | na 16 16 | 0061cc | a0 00 00    |                 ldy.# 0000           Use Y as counter
 596:000 | DONE ins | na 16 16 | 0061cf | e2 20       |                 sep 20               
 596:001 | DONE ctl | na  8 16 |        |             |         .!a8
 597:000 | DONE wsp | na  8 16 |        |             |
 598:000 | DONE lbl | na  8 16 | 0061d1 |             | accept_loop                          
 599:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 600:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
 601:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 602:000 | DONE ins | na  8 16 | 0061d1 | 20 47 60    |                 jsr 006047           
 603:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 604:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
 605:000 | DONE ins | na  8 16 | 0061d4 | c9 0a       |                 cmp.# AscLF          
 606:000 | DONE ins | na  8 16 | 0061d6 | f0 44       |                 beq 00621c           
 607:000 | DONE ins | na  8 16 | 0061d8 | c9 0d       |                 cmp.# AscCR          
 608:000 | DONE ins | na  8 16 | 0061da | f0 40       |                 beq 00621c           
 609:000 | DONE wsp | na  8 16 |        |             |
 610:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
 611:000 | DONE ins | na  8 16 | 0061dc | c9 08       |                 cmp.# AscBS          
 612:000 | DONE ins | na  8 16 | 0061de | f0 44       |                 beq 006224           
 613:000 | DONE ins | na  8 16 | 0061e0 | c9 7f       |                 cmp.# AscDEL         
 614:000 | DONE ins | na  8 16 | 0061e2 | f0 40       |                 beq 006224           
 615:000 | DONE wsp | na  8 16 |        |             |
 616:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
 617:000 | DONE ins | na  8 16 | 0061e4 | c9 03       |                 cmp.# AscCC          
 618:000 | DONE ins | na  8 16 | 0061e6 | d0 03       |                 bne 0061eb           
 619:000 | DONE ins | na  8 16 | 0061e8 | 4c 97 60    |                 jmp 006097           
 620:000 | DONE lbl | na  8 16 | 0061eb |             | @                                    
 621:000 | DONE ins | na  8 16 | 0061eb | c9 1b       |                 cmp.# AscESC         
 622:000 | DONE ins | na  8 16 | 0061ed | d0 03       |                 bne 0061f2           
 623:000 | DONE ins | na  8 16 | 0061ef | 4c 97 60    |                 jmp 006097           
 624:000 | DONE lbl | na  8 16 | 0061f2 |             | @                                    
 625:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
 626:000 | DONE ins | na  8 16 | 0061f2 | c9 10       |                 cmp.# AscCP          
 627:000 | DONE ins | na  8 16 | 0061f4 | d0 0c       |                 bne 006202           
 628:000 | DONE ins | na  8 16 | 0061f6 | c2 20       |                 rep 20               
 628:001 | DONE ctl | na 16 16 |        |             |         .!a16
 629:000 | DONE ins | na 16 16 | 0061f8 | a9 60 6e    |                 lda.# 006e60         
 630:000 | DONE ins | na 16 16 | 0061fb | 20 b4 6b    |                 jsr 006bb4           
 631:000 | DONE ins | na 16 16 | 0061fe | e2 20       |                 sep 20               
 631:001 | DONE ctl | na  8 16 |        |             |         .!a8
 632:000 | DONE ins | na  8 16 | 006200 | 80 cf       |                 bra 0061d1           
 633:000 | DONE lbl | na  8 16 | 006202 |             | @                                    
 634:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
 635:000 | DONE ins | na  8 16 | 006202 | c9 0e       |                 cmp.# AscCN          
 636:000 | DONE ins | na  8 16 | 006204 | d0 0c       |                 bne 006212           
 637:000 | DONE ins | na  8 16 | 006206 | c2 20       |                 rep 20               
 637:001 | DONE ctl | na 16 16 |        |             |         .!a16
 638:000 | DONE ins | na 16 16 | 006208 | a9 73 6e    |                 lda.# 006e73         
 639:000 | DONE ins | na 16 16 | 00620b | 20 b4 6b    |                 jsr 006bb4           
 640:000 | DONE ins | na 16 16 | 00620e | e2 20       |                 sep 20               
 640:001 | DONE ctl | na  8 16 |        |             |         .!a8
 641:000 | DONE ins | na  8 16 | 006210 | 80 bf       |                 bra 0061d1           
 642:000 | DONE wsp | na  8 16 |        |             |
 643:000 | DONE lbl | na  8 16 | 006212 |             | @                                    
 644:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
 645:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
 646:000 | DONE ins | na  8 16 | 006212 | 20 36 60    |                 jsr 006036           echo character
 647:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 648:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 649:000 | DONE wsp | na  8 16 |        |             |
 650:000 | DONE ins | na  8 16 | 006215 | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
 651:000 | DONE ins | na  8 16 | 006217 | c8          |                 iny                  
 652:000 | DONE ins | na  8 16 | 006218 | c4 18       |                 cpy.d 000218         reached character limit?
 653:000 | DONE ins | na  8 16 | 00621a | d0 b5       |                 bne 0061d1           fall thru if buffer limit reached
 654:000 | DONE wsp | na  8 16 |        |             |
 655:000 | DONE lbl | na  8 16 | 00621c |             | accept_eol                           
 656:000 | DONE ins | na  8 16 | 00621c | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
 657:000 | DONE ins | na  8 16 | 00621e | c2 20       |                 rep 20               
 657:001 | DONE ctl | na 16 16 |        |             |         .!a16
 658:000 | DONE ins | na 16 16 | 006220 | 20 58 66    |                 jsr 006658           print final space
 659:000 | DONE ins | na 16 16 | 006223 | 60          |                 rts                  this is the actual return of the routine
 660:000 | DONE wsp | na 16 16 |        |             |
 661:000 | DONE lbl | na 16 16 | 006224 |             | accept_bs                            
 662:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 663:000 | DONE ins | na  8 16 | 006224 | c0 00 00    |                 cpy.# 0000           buffer empty?
 664:000 | DONE ins | na  8 16 | 006227 | d0 06       |                 bne 00622f           
 665:000 | DONE wsp | na  8 16 |        |             |
 666:000 | DONE ins | na  8 16 | 006229 | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
 667:000 | DONE ins | na  8 16 | 00622b | 20 36 60    |                 jsr 006036           
 668:000 | DONE ins | na  8 16 | 00622e | c8          |                 iny                  
 669:000 | DONE lbl | na  8 16 | 00622f |             | @                                    
 670:000 | DONE ins | na  8 16 | 00622f | 88          |                 dey                  
 671:000 | DONE ins | na  8 16 | 006230 | a9 08       |                 lda.# AscBS          move back one
 672:000 | DONE ins | na  8 16 | 006232 | 20 36 60    |                 jsr 006036           
 673:000 | DONE ins | na  8 16 | 006235 | a9 20       |                 lda.# AscSP          print a space (rubout)
 674:000 | DONE ins | na  8 16 | 006237 | 20 36 60    |                 jsr 006036           
 675:000 | DONE ins | na  8 16 | 00623a | a9 08       |                 lda.# AscBS          move back over space
 676:000 | DONE ins | na  8 16 | 00623c | 20 36 60    |                 jsr 006036           
 677:000 | DONE wsp | na  8 16 |        |             |
 678:000 | DONE ins | na  8 16 | 00623f | 80 90       |                 bra 0061d1           
 679:000 | DONE wsp | na  8 16 |        |             |
 680:000 | DONE lbl | na  8 16 | 006241 |             | z_accept                             
 680:001 | DONE ins | na  8 16 | 006241 | 60          |                 rts                  
 681:000 | DONE wsp | na  8 16 |        |             |
 682:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 683:000 | DONE cmt | na  8 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
 684:000 | DONE cmt | na  8 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
 685:000 | DONE cmt | na  8 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
 686:000 | DONE cmt | na  8 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
 687:000 | DONE cmt | na  8 16 |        |             | ; past the Dictionary.
 688:000 | DONE cmt | na  8 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
 689:000 | DONE cmt | na  8 16 |        |             | ; TODO test negative values
 690:000 | DONE lbl | na  8 16 | 006242 |             | xt_allot                             
 691:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 692:000 | DONE ins | na 16 16 | 006242 | 98          |                 tya                  force flag check
 693:000 | DONE ins | na 16 16 | 006243 | f0 21       |                 beq 006266           zero bytes, don't do anything
 694:000 | DONE ins | na 16 16 | 006245 | 30 12       |                 bmi 006259           free memory instead of reserving it
 695:000 | DONE wsp | na 16 16 |        |             |
 696:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
 697:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
 698:000 | DONE ins | na 16 16 | 006247 | 18          |                 clc                  
 699:000 | DONE ins | na 16 16 | 006248 | 65 00       |                 adc.d 000200         create new CP
 700:000 | DONE ins | na 16 16 | 00624a | b0 07       |                 bcs 006253           oops, we've wrapped
 701:000 | DONE wsp | na 16 16 |        |             |
 702:000 | DONE ins | na 16 16 | 00624c | a8          |                 tay                  save copy of new CP
 703:000 | DONE wsp | na 16 16 |        |             |
 704:000 | DONE ins | na 16 16 | 00624d | 38          |                 sec                  
 705:000 | DONE ins | na 16 16 | 00624e | e9 ff 7b    |                 sbc.# 007bff         
 706:000 | DONE ins | na 16 16 | 006251 | 30 11       |                 bmi 006264           oops, fall thru if beyond max RAM
 707:000 | DONE wsp | na 16 16 |        |             |
 708:000 | DONE lbl | na 16 16 | 006253 |             | allot_error                          
 709:000 | DONE ins | na 16 16 | 006253 | a9 0b 6d    |                 lda.# 006d0b         
 710:000 | DONE ins | na 16 16 | 006256 | 4c ae 6b    |                 jmp 006bae           
 711:000 | DONE wsp | na 16 16 |        |             |
 712:000 | DONE lbl | na 16 16 | 006259 |             | allot_minus                          
 713:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
 714:000 | DONE ins | na 16 16 | 006259 | 38          |                 sec                  
 715:000 | DONE ins | na 16 16 | 00625a | e5 00       |                 sbc.d 000200         
 716:000 | DONE ins | na 16 16 | 00625c | 90 f5       |                 bcc 006253           oops, we've wrapped
 717:000 | DONE wsp | na 16 16 |        |             |
 718:000 | DONE ins | na 16 16 | 00625e | a8          |                 tay                  
 719:000 | DONE wsp | na 16 16 |        |             |
 720:000 | DONE ins | na 16 16 | 00625f | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
 721:000 | DONE ins | na 16 16 | 006262 | 30 ef       |                 bmi 006253           oops, gone too far back
 722:000 | DONE wsp | na 16 16 |        |             |
 723:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
 724:000 | DONE lbl | na 16 16 | 006264 |             | allot_done                           
 725:000 | DONE ins | na 16 16 | 006264 | 84 00       |                 sty.d 000200         new compiler pointer
 726:000 | DONE lbl | na 16 16 | 006266 |             | allot_real_gone                      
 727:000 | DONE ins | na 16 16 | 006266 | b4 00       |                 ldy.dx 00            DROP
 728:000 | DONE ins | na 16 16 | 006268 | e8          |                 inx                  
 729:000 | DONE ins | na 16 16 | 006269 | e8          |                 inx                  
 730:000 | DONE wsp | na 16 16 |        |             |
 731:000 | DONE lbl | na 16 16 | 00626a |             | z_allot                              
 731:001 | DONE ins | na 16 16 | 00626a | 60          |                 rts                  
 732:000 | DONE wsp | na 16 16 |        |             |
 733:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 734:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
 735:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
 736:000 | DONE lbl | na 16 16 | 00626b |             | xt_and                               
 737:000 | DONE ins | na 16 16 | 00626b | 98          |                 tya                  
 738:000 | DONE ins | na 16 16 | 00626c | 35 00       |                 and.dx 00            
 739:000 | DONE ins | na 16 16 | 00626e | a8          |                 tay                  
 740:000 | DONE wsp | na 16 16 |        |             |
 741:000 | DONE ins | na 16 16 | 00626f | e8          |                 inx                  NIP
 742:000 | DONE ins | na 16 16 | 006270 | e8          |                 inx                  
 743:000 | DONE wsp | na 16 16 |        |             |
 744:000 | DONE lbl | na 16 16 | 006271 |             | z_and                                
 744:001 | DONE ins | na 16 16 | 006271 | 60          |                 rts                  
 745:000 | DONE wsp | na 16 16 |        |             |
 746:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 747:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
 748:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
 749:000 | DONE lbl | na 16 16 | 006272 |             | xt_base                              
 750:000 | DONE ins | na 16 16 | 006272 | ca          |                 dex                  
 751:000 | DONE ins | na 16 16 | 006273 | ca          |                 dex                  
 752:000 | DONE ins | na 16 16 | 006274 | 94 00       |                 sty.dx 00            
 753:000 | DONE wsp | na 16 16 |        |             |
 754:000 | DONE ins | na 16 16 | 006276 | a0 1c 02    |                 ldy.# 00021c         
 755:000 | DONE wsp | na 16 16 |        |             |
 756:000 | DONE lbl | na 16 16 | 006279 |             | z_base                               
 756:001 | DONE ins | na 16 16 | 006279 | 60          |                 rts                  
 757:000 | DONE wsp | na 16 16 |        |             |
 758:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 759:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 760:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
 761:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 762:000 | DONE lbl | na 16 16 | 00627a |             | xt_bell                              
 763:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 764:000 | DONE ins | na 16 16 | 00627a | a9 07 00    |                 lda.# AscBELL        
 765:000 | DONE ins | na 16 16 | 00627d | 20 36 60    |                 jsr 006036           
 766:000 | DONE wsp | na 16 16 |        |             |
 767:000 | DONE lbl | na 16 16 | 006280 |             | z_bell                               
 767:001 | DONE ins | na 16 16 | 006280 | 60          |                 rts                  
 768:000 | DONE wsp | na 16 16 |        |             |
 769:000 | DONE wsp | na 16 16 |        |             |
 770:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 771:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 772:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 773:000 | DONE lbl | na 16 16 | 006281 |             | xt_bl                                
 774:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 775:000 | DONE ins | na 16 16 | 006281 | ca          |                 dex                  
 776:000 | DONE ins | na 16 16 | 006282 | ca          |                 dex                  
 777:000 | DONE ins | na 16 16 | 006283 | 94 00       |                 sty.dx 00            
 778:000 | DONE ins | na 16 16 | 006285 | a0 20 00    |                 ldy.# AscSP          
 779:000 | DONE wsp | na 16 16 |        |             |
 780:000 | DONE lbl | na 16 16 | 006288 |             | z_bl                                 
 780:001 | DONE ins | na 16 16 | 006288 | 60          |                 rts                  
 781:000 | DONE wsp | na 16 16 |        |             |
 782:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 783:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 784:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 785:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
 786:000 | DONE lbl | na 16 16 | 006289 |             | xt_bye                               
 787:000 | DONE ins | na 16 16 | 006289 | 58          |                 cli                  
 788:000 | DONE ins | na 16 16 | 00628a | 00 00       |                 brk 00               status byte 00 required for assembler
 789:000 | DONE wsp | na 16 16 |        |             |
 790:000 | DONE lbl | na 16 16 | 00628c |             | z_bye                                
 790:001 | DONE ins | na 16 16 | 00628c | 60          |                 rts                  dummy for compiling, never reached
 791:000 | DONE wsp | na 16 16 |        |             |
 792:000 | DONE wsp | na 16 16 |        |             |
 793:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 794:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
 795:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
 796:000 | DONE lbl | na 16 16 | 00628d |             | xt_c-comma                           
 797:000 | DONE ins | na 16 16 | 00628d | 98          |                 tya                  
 798:000 | DONE ins | na 16 16 | 00628e | e2 20       |                 sep 20               
 798:001 | DONE ctl | na  8 16 |        |             |         .!a8
 799:000 | DONE ins | na  8 16 | 006290 | 92 00       |                 sta.di 000200        STA (CP)
 800:000 | DONE ins | na  8 16 | 006292 | c2 20       |                 rep 20               
 800:001 | DONE ctl | na 16 16 |        |             |         .!a16
 801:000 | DONE ins | na 16 16 | 006294 | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
 802:000 | DONE wsp | na 16 16 |        |             |
 803:000 | DONE ins | na 16 16 | 006296 | b4 00       |                 ldy.dx 00            
 804:000 | DONE ins | na 16 16 | 006298 | e8          |                 inx                  
 805:000 | DONE ins | na 16 16 | 006299 | e8          |                 inx                  
 806:000 | DONE wsp | na 16 16 |        |             |
 807:000 | DONE lbl | na 16 16 | 00629a |             | z_c-comma                            
 807:001 | DONE ins | na 16 16 | 00629a | 60          |                 rts                  
 808:000 | DONE wsp | na 16 16 |        |             |
 809:000 | DONE wsp | na 16 16 |        |             |
 810:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 811:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
 812:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
 813:000 | DONE lbl | na 16 16 | 00629b |             | xt_c-fetch                           
 814:000 | DONE ins | na 16 16 | 00629b | e2 20       |                 sep 20               
 814:001 | DONE ctl | na  8 16 |        |             |         .!a8
 815:000 | DONE ins | na  8 16 | 00629d | b9 00 00    |                 lda.y 0000           
 816:000 | DONE ins | na  8 16 | 0062a0 | c2 20       |                 rep 20               
 816:001 | DONE ctl | na 16 16 |        |             |         .!a16
 817:000 | DONE ins | na 16 16 | 0062a2 | 29 ff 00    |                 and.# 00ff           
 818:000 | DONE ins | na 16 16 | 0062a5 | a8          |                 tay                  
 819:000 | DONE wsp | na 16 16 |        |             |
 820:000 | DONE lbl | na 16 16 | 0062a6 |             | z_c-fetch                            
 820:001 | DONE ins | na 16 16 | 0062a6 | 60          |                 rts                  
 821:000 | DONE wsp | na 16 16 |        |             |
 822:000 | DONE wsp | na 16 16 |        |             |
 823:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 824:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
 825:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
 826:000 | DONE lbl | na 16 16 | 0062a7 |             | xt_c-store                           
 827:000 | DONE ins | na 16 16 | 0062a7 | b5 00       |                 lda.dx 00            
 828:000 | DONE ins | na 16 16 | 0062a9 | e2 20       |                 sep 20               
 828:001 | DONE ctl | na  8 16 |        |             |         .!a8
 829:000 | DONE ins | na  8 16 | 0062ab | 99 00 00    |                 sta.y 0000           
 830:000 | DONE ins | na  8 16 | 0062ae | c2 20       |                 rep 20               
 830:001 | DONE ctl | na 16 16 |        |             |         .!a16
 831:000 | DONE ins | na 16 16 | 0062b0 | b4 02       |                 ldy.dx 02            
 832:000 | DONE ins | na 16 16 | 0062b2 | e8          |                 inx                  
 833:000 | DONE ins | na 16 16 | 0062b3 | e8          |                 inx                  
 834:000 | DONE ins | na 16 16 | 0062b4 | e8          |                 inx                  
 835:000 | DONE ins | na 16 16 | 0062b5 | e8          |                 inx                  
 836:000 | DONE wsp | na 16 16 |        |             |
 837:000 | DONE lbl | na 16 16 | 0062b6 |             | z_c-store                            
 837:001 | DONE ins | na 16 16 | 0062b6 | 60          |                 rts                  
 838:000 | DONE wsp | na 16 16 |        |             |
 839:000 | DONE wsp | na 16 16 |        |             |
 840:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 841:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
 842:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
 843:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
 844:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
 845:000 | DONE wsp | na 16 16 |        |             |
 846:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 847:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
 848:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
 849:000 | DONE lbl | na 16 16 | 0062b7 |             | xt_char                              
 850:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 851:000 | DONE ins | na 16 16 | 0062b7 | 20 a3 65    |                 jsr 0065a3           ( -- addr u )
 852:000 | DONE wsp | na 16 16 |        |             |
 853:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
 854:000 | DONE ins | na 16 16 | 0062ba | 98          |                 tya                  force flag check
 855:000 | DONE ins | na 16 16 | 0062bb | d0 06       |                 bne 0062c3           
 856:000 | DONE wsp | na 16 16 |        |             |
 857:000 | DONE ins | na 16 16 | 0062bd | a9 aa 6d    |                 lda.# 006daa         
 858:000 | DONE ins | na 16 16 | 0062c0 | 4c ae 6b    |                 jmp 006bae           
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE lbl | na 16 16 | 0062c3 |             | char_got_char                        
 861:000 | DONE ins | na 16 16 | 0062c3 | b4 00       |                 ldy.dx 00            get addr from NOS
 862:000 | DONE ins | na 16 16 | 0062c5 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
 863:000 | DONE ins | na 16 16 | 0062c8 | 29 ff 00    |                 and.# 00ff           
 864:000 | DONE ins | na 16 16 | 0062cb | a8          |                 tay                  
 865:000 | DONE wsp | na 16 16 |        |             |
 866:000 | DONE ins | na 16 16 | 0062cc | e8          |                 inx                  
 867:000 | DONE ins | na 16 16 | 0062cd | e8          |                 inx                  
 868:000 | DONE wsp | na 16 16 |        |             |
 869:000 | DONE lbl | na 16 16 | 0062ce |             | z_char                               
 869:001 | DONE ins | na 16 16 | 0062ce | 60          |                 rts                  
 870:000 | DONE wsp | na 16 16 |        |             |
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 873:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
 874:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
 875:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
 876:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
 877:000 | DONE lbl | na 16 16 | 0062cf |             | xt_compile-only                      
 878:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 879:000 | DONE ins | na 16 16 | 0062cf | a9 04 00    |                 lda.# CO             
 880:000 | DONE ins | na 16 16 | 0062d2 | eb          |                 xba                  flags are MSB
 881:000 | DONE ins | na 16 16 | 0062d3 | 12 02       |                 ora.di 000202        ORA (DP)
 882:000 | DONE ins | na 16 16 | 0062d5 | 92 02       |                 sta.di 000202        
 883:000 | DONE wsp | na 16 16 |        |             |
 884:000 | DONE lbl | na 16 16 | 0062d7 |             | z_compile-only                       
 884:001 | DONE ins | na 16 16 | 0062d7 | 60          |                 rts                  
 885:000 | DONE wsp | na 16 16 |        |             |
 886:000 | DONE wsp | na 16 16 |        |             |
 887:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 888:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
 889:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
 890:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
 891:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
 892:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
 893:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
 894:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
 895:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
 896:000 | DONE lbl | na 16 16 | 0062d8 |             | xt_compilecomma                      
 897:000 | DONE wsp | na 16 16 |        |             |
 898:000 | DONE lbl | na 16 16 | 0062d8 |             | compile_as_code                      
 899:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
 900:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
 901:000 | DONE cmt | na 16 16 |        |             |                 ; TODO currently just compiles subroutine jumps
 902:000 | DONE wsp | na 16 16 |        |             |
 903:000 | DONE lbl | na 16 16 | 0062d8 |             | compile_as_jump                      
 904:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
 905:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
 906:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
 907:000 | DONE cmt | na 16 16 |        |             |                 ; win!
 908:000 | DONE ins | na 16 16 | 0062d8 | a9 20 00    |                 lda.# 20             opcode for JSR
 909:000 | DONE ins | na 16 16 | 0062db | 92 00       |                 sta.di 000200        STA (CP)
 910:000 | DONE ins | na 16 16 | 0062dd | e6 00       |                 inc.d 000200         
 911:000 | DONE wsp | na 16 16 |        |             |
 912:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
 913:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
 914:000 | DONE ins | na 16 16 | 0062df | 98          |                 tya                  
 915:000 | DONE ins | na 16 16 | 0062e0 | 92 00       |                 sta.di 000200        
 916:000 | DONE ins | na 16 16 | 0062e2 | e6 00       |                 inc.d 000200         
 917:000 | DONE ins | na 16 16 | 0062e4 | e6 00       |                 inc.d 000200         
 918:000 | DONE wsp | na 16 16 |        |             |
 919:000 | DONE ins | na 16 16 | 0062e6 | b4 00       |                 ldy.dx 00            
 920:000 | DONE ins | na 16 16 | 0062e8 | e8          |                 inx                  
 921:000 | DONE ins | na 16 16 | 0062e9 | e8          |                 inx                  
 922:000 | DONE wsp | na 16 16 |        |             |
 923:000 | DONE lbl | na 16 16 | 0062ea |             | z_compilecomma                       
 923:001 | DONE ins | na 16 16 | 0062ea | 60          |                 rts                  
 924:000 | DONE wsp | na 16 16 |        |             |
 925:000 | DONE wsp | na 16 16 |        |             |
 926:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 927:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
 928:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
 929:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
 930:000 | DONE cmt | na 16 16 |        |             | ; lifting.
 931:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
 932:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
 933:000 | DONE lbl | na 16 16 | 0062eb |             | xt_constant                          
 934:000 | DONE ins | na 16 16 | 0062eb | 20 1b 63    |                 jsr 00631b           
 935:000 | DONE wsp | na 16 16 |        |             |
 936:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
 937:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
 938:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
 939:000 | DONE ins | na 16 16 | 0062ee | a5 00       |                 lda.d 000200         
 940:000 | DONE ins | na 16 16 | 0062f0 | 3a          |                 dec.a                
 941:000 | DONE ins | na 16 16 | 0062f1 | 3a          |                 dec.a                
 942:000 | DONE ins | na 16 16 | 0062f2 | 85 16       |                 sta.d 000216         
 943:000 | DONE wsp | na 16 16 |        |             |
 944:000 | DONE ins | na 16 16 | 0062f4 | a9 1a 6b    |                 lda.# 006b1a         
 945:000 | DONE ins | na 16 16 | 0062f7 | 92 16       |                 sta.di 000216        STA (TMP1)
 946:000 | DONE wsp | na 16 16 |        |             |
 947:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
 948:000 | DONE ins | na 16 16 | 0062f9 | 98          |                 tya                  there is no "sty.di cp"
 949:000 | DONE ins | na 16 16 | 0062fa | 92 00       |                 sta.di 000200        
 950:000 | DONE ins | na 16 16 | 0062fc | e6 00       |                 inc.d 000200         
 951:000 | DONE ins | na 16 16 | 0062fe | e6 00       |                 inc.d 000200         
 952:000 | DONE wsp | na 16 16 |        |             |
 953:000 | DONE ins | na 16 16 | 006300 | b4 00       |                 ldy.dx 00            DROP
 954:000 | DONE ins | na 16 16 | 006302 | e8          |                 inx                  
 955:000 | DONE ins | na 16 16 | 006303 | e8          |                 inx                  
 956:000 | DONE wsp | na 16 16 |        |             |
 957:000 | DONE lbl | na 16 16 | 006304 |             | z_constant                           
 957:001 | DONE ins | na 16 16 | 006304 | 60          |                 rts                  
 958:000 | DONE wsp | na 16 16 |        |             |
 959:000 | DONE wsp | na 16 16 |        |             |
 960:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 961:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 962:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 963:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 964:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 965:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 966:000 | DONE lbl | na 16 16 | 006305 |             | xt_count                             
 967:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 968:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 969:000 | DONE ins | na 16 16 | 006305 | 98          |                 tya                  
 970:000 | DONE ins | na 16 16 | 006306 | 1a          |                 inc.a                String address starts one char later
 971:000 | DONE wsp | na 16 16 |        |             |
 972:000 | DONE ins | na 16 16 | 006307 | ca          |                 dex                  
 973:000 | DONE ins | na 16 16 | 006308 | ca          |                 dex                  
 974:000 | DONE ins | na 16 16 | 006309 | 95 00       |                 sta.dx 00            NOS
 975:000 | DONE wsp | na 16 16 |        |             |
 976:000 | DONE ins | na 16 16 | 00630b | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
 977:000 | DONE ins | na 16 16 | 00630e | eb          |                 xba                  move length to LSB
 978:000 | DONE ins | na 16 16 | 00630f | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
 979:000 | DONE ins | na 16 16 | 006312 | a8          |                 tay                  TOS
 980:000 | DONE wsp | na 16 16 |        |             |
 981:000 | DONE lbl | na 16 16 | 006313 |             | z_count                              
 981:001 | DONE ins | na 16 16 | 006313 | 60          |                 rts                  
 982:000 | DONE wsp | na 16 16 |        |             |
 983:000 | DONE wsp | na 16 16 |        |             |
 984:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 985:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 986:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 987:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 988:000 | DONE lbl | na 16 16 | 006314 |             | xt_cr                                
 989:000 | DONE ins | na 16 16 | 006314 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
 990:000 | DONE ins | na 16 16 | 006317 | 20 36 60    |                 jsr 006036           
 991:000 | DONE wsp | na 16 16 |        |             |
 992:000 | DONE lbl | na 16 16 | 00631a |             | z_cr                                 
 992:001 | DONE ins | na 16 16 | 00631a | 60          |                 rts                  
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 995:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
 996:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
 997:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
 998:000 | DONE cmt | na 16 16 |        |             | ; address.
 999:000 | DONE lbl | na 16 16 | 00631b |             | xt_create                            
1000:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1001:000 | DONE ins | na 16 16 | 00631b | 20 a3 65    |                 jsr 0065a3           ( -- addr u )
1002:000 | DONE ins | na 16 16 | 00631e | d0 06       |                 bne 006326           
1003:000 | DONE wsp | na 16 16 |        |             |
1004:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1005:000 | DONE ins | na 16 16 | 006320 | a9 aa 6d    |                 lda.# 006daa         
1006:000 | DONE ins | na 16 16 | 006323 | 4c ae 6b    |                 jmp 006bae           
1007:000 | DONE wsp | na 16 16 |        |             |
1008:000 | DONE lbl | na 16 16 | 006326 |             | create_got_name                      
1009:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1010:000 | DONE ins | na 16 16 | 006326 | 20 e7 6b    |                 jsr 006be7           
1011:000 | DONE wsp | na 16 16 |        |             |
1012:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1013:000 | DONE cmt | na 16 16 |        |             |                 ; word
1014:000 | DONE ins | na 16 16 | 006329 | a5 00       |                 lda.d 000200         
1015:000 | DONE ins | na 16 16 | 00632b | 85 16       |                 sta.d 000216         save start of new word
1016:000 | DONE wsp | na 16 16 |        |             |
1017:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1018:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1019:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1020:000 | DONE ins | na 16 16 | 00632d | 98          |                 tya                  
1021:000 | DONE ins | na 16 16 | 00632e | 29 ff 00    |                 and.# 00ff           
1022:000 | DONE ins | na 16 16 | 006331 | 85 18       |                 sta.d 000218         save length of name string
1023:000 | DONE wsp | na 16 16 |        |             |
1024:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1025:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1026:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1027:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1028:000 | DONE ins | na 16 16 | 006333 | 18          |                 clc                  
1029:000 | DONE ins | na 16 16 | 006334 | 69 08 00    |                 adc.# 0008           
1030:000 | DONE ins | na 16 16 | 006337 | 85 1a       |                 sta.d 00021a         total bytes required for header
1031:000 | DONE wsp | na 16 16 |        |             |
1032:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1033:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1034:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1035:000 | DONE ins | na 16 16 | 006339 | 1a          |                 inc.a                
1036:000 | DONE ins | na 16 16 | 00633a | 1a          |                 inc.a                
1037:000 | DONE ins | na 16 16 | 00633b | 1a          |                 inc.a                
1038:000 | DONE wsp | na 16 16 |        |             |
1039:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1040:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1041:000 | DONE ins | na 16 16 | 00633c | 18          |                 clc                  
1042:000 | DONE ins | na 16 16 | 00633d | 65 00       |                 adc.d 000200         
1043:000 | DONE ins | na 16 16 | 00633f | 85 00       |                 sta.d 000200         
1044:000 | DONE wsp | na 16 16 |        |             |
1045:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1046:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1047:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1048:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1049:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1050:000 | DONE ins | na 16 16 | 006341 | b5 00       |                 lda.dx 00            
1051:000 | DONE ins | na 16 16 | 006343 | 48          |                 pha                  
1052:000 | DONE wsp | na 16 16 |        |             |
1053:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1054:000 | DONE ins | na 16 16 | 006344 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1055:000 | DONE ins | na 16 16 | 006347 | a5 18       |                 lda.d 000218         get length byte
1056:000 | DONE ins | na 16 16 | 006349 | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1057:000 | DONE ins | na 16 16 | 00634b | c8          |                 iny                  
1058:000 | DONE ins | na 16 16 | 00634c | c8          |                 iny                  
1059:000 | DONE wsp | na 16 16 |        |             |
1060:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1061:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1062:000 | DONE ins | na 16 16 | 00634d | a5 02       |                 lda.d 000202         
1063:000 | DONE ins | na 16 16 | 00634f | 91 16       |                 sta.diy 000216       
1064:000 | DONE ins | na 16 16 | 006351 | c8          |                 iny                  
1065:000 | DONE ins | na 16 16 | 006352 | c8          |                 iny                  
1066:000 | DONE wsp | na 16 16 |        |             |
1067:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1068:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1069:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1070:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1071:000 | DONE ins | na 16 16 | 006353 | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1072:000 | DONE ins | na 16 16 | 006355 | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1073:000 | DONE wsp | na 16 16 |        |             |
1074:000 | DONE ins | na 16 16 | 006357 | 18          |                 clc                  
1075:000 | DONE ins | na 16 16 | 006358 | 65 1a       |                 adc.d 00021a         total header length
1076:000 | DONE ins | na 16 16 | 00635a | 91 16       |                 sta.diy 000216       
1077:000 | DONE ins | na 16 16 | 00635c | c8          |                 iny                  
1078:000 | DONE ins | na 16 16 | 00635d | c8          |                 iny                  
1079:000 | DONE wsp | na 16 16 |        |             |
1080:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1081:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1082:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1083:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1084:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1085:000 | DONE ins | na 16 16 | 00635e | 1a          |                 inc.a                
1086:000 | DONE ins | na 16 16 | 00635f | 1a          |                 inc.a                
1087:000 | DONE ins | na 16 16 | 006360 | 1a          |                 inc.a                
1088:000 | DONE ins | na 16 16 | 006361 | 91 16       |                 sta.diy 000216       
1089:000 | DONE ins | na 16 16 | 006363 | c8          |                 iny                  
1090:000 | DONE ins | na 16 16 | 006364 | c8          |                 iny                  
1091:000 | DONE wsp | na 16 16 |        |             |
1092:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1093:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1094:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1095:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1096:000 | DONE ins | na 16 16 | 006365 | 68          |                 pla                  get back string address
1097:000 | DONE ins | na 16 16 | 006366 | 38          |                 sec                  
1098:000 | DONE ins | na 16 16 | 006367 | e9 08 00    |                 sbc.# 0008           
1099:000 | DONE ins | na 16 16 | 00636a | 85 1a       |                 sta.d 00021a         
1100:000 | DONE ins | na 16 16 | 00636c | e2 20       |                 sep 20               
1100:001 | DONE ctl | na  8 16 |        |             |         .!a8
1101:000 | DONE lbl | na  8 16 | 00636e |             | @                                    
1102:000 | DONE ins | na  8 16 | 00636e | b1 1a       |                 lda.diy 00021a       
1103:000 | DONE ins | na  8 16 | 006370 | 91 16       |                 sta.diy 000216       
1104:000 | DONE ins | na  8 16 | 006372 | c8          |                 iny                  
1105:000 | DONE ins | na  8 16 | 006373 | c6 18       |                 dec.d 000218         
1106:000 | DONE ins | na  8 16 | 006375 | d0 f7       |                 bne 00636e           
1107:000 | DONE wsp | na  8 16 |        |             |
1108:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1109:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1110:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1111:000 | DONE cmt | na  8 16 |        |             |                 ; good
1112:000 | DONE ins | na  8 16 | 006377 | a9 20       |                 lda.# 20             opcode of JSR
1113:000 | DONE ins | na  8 16 | 006379 | 91 16       |                 sta.diy 000216       
1114:000 | DONE ins | na  8 16 | 00637b | c8          |                 iny                  single increase only because we have 8-bit A
1115:000 | DONE wsp | na  8 16 |        |             |
1116:000 | DONE ins | na  8 16 | 00637c | a9 35       |                 lda.# .lsb 006b35    
1117:000 | DONE ins | na  8 16 | 00637e | 91 16       |                 sta.diy 000216       
1118:000 | DONE ins | na  8 16 | 006380 | c8          |                 iny                  
1119:000 | DONE wsp | na  8 16 |        |             |
1120:000 | DONE ins | na  8 16 | 006381 | a9 6b       |                 lda.# .msb 006b35    
1121:000 | DONE ins | na  8 16 | 006383 | 91 16       |                 sta.diy 000216       
1122:000 | DONE wsp | na  8 16 |        |             |
1123:000 | DONE ins | na  8 16 | 006385 | c2 20       |                 rep 20               
1123:001 | DONE ctl | na 16 16 |        |             |         .!a16
1124:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1125:000 | DONE ins | na 16 16 | 006387 | b4 02       |                 ldy.dx 02            
1126:000 | DONE ins | na 16 16 | 006389 | e8          |                 inx                  
1127:000 | DONE ins | na 16 16 | 00638a | e8          |                 inx                  
1128:000 | DONE ins | na 16 16 | 00638b | e8          |                 inx                  
1129:000 | DONE ins | na 16 16 | 00638c | e8          |                 inx                  
1130:000 | DONE wsp | na 16 16 |        |             |
1131:000 | DONE lbl | na 16 16 | 00638d |             | z_create                             
1131:001 | DONE ins | na 16 16 | 00638d | 60          |                 rts                  
1132:000 | DONE wsp | na 16 16 |        |             |
1133:000 | DONE wsp | na 16 16 |        |             |
1134:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1135:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1136:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1137:000 | DONE lbl | na 16 16 | 00638e |             | xt_decimal                           
1138:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1139:000 | DONE ins | na 16 16 | 00638e | a9 0a 00    |                 lda.# 000a           
1140:000 | DONE ins | na 16 16 | 006391 | 85 1c       |                 sta.d 00021c         
1141:000 | DONE wsp | na 16 16 |        |             |
1142:000 | DONE lbl | na 16 16 | 006393 |             | z_decimal                            
1142:001 | DONE ins | na 16 16 | 006393 | 60          |                 rts                  
1143:000 | DONE wsp | na 16 16 |        |             |
1144:000 | DONE wsp | na 16 16 |        |             |
1145:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1146:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1147:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1148:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1149:000 | DONE lbl | na 16 16 | 006394 |             | xt_depth                             
1150:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1151:000 | DONE cmt | na 16 16 |        |             | 		; We've got zero entries when X is dsp0
1152:000 | DONE ins | na 16 16 | 006394 | 86 04       |                 stx.d 000204         
1153:000 | DONE ins | na 16 16 | 006396 | a9 f8 02    |                 lda.# 0002f8         
1154:000 | DONE ins | na 16 16 | 006399 | 38          |                 sec                  
1155:000 | DONE ins | na 16 16 | 00639a | e5 04       |                 sbc.d 000204         
1156:000 | DONE wsp | na 16 16 |        |             |
1157:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
1158:000 | DONE ins | na 16 16 | 00639c | 4a          |                 lsr.a                
1159:000 | DONE wsp | na 16 16 |        |             |
1160:000 | DONE ins | na 16 16 | 00639d | ca          |                 dex                  
1161:000 | DONE ins | na 16 16 | 00639e | ca          |                 dex                  
1162:000 | DONE ins | na 16 16 | 00639f | 94 00       |                 sty.dx 00            
1163:000 | DONE wsp | na 16 16 |        |             |
1164:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
1165:000 | DONE ins | na 16 16 | 0063a1 | a8          |                 tay                  
1166:000 | DONE wsp | na 16 16 |        |             |
1167:000 | DONE lbl | na 16 16 | 0063a2 |             | z_depth                              
1167:001 | DONE ins | na 16 16 | 0063a2 | 60          |                 rts                  
1168:000 | DONE wsp | na 16 16 |        |             |
1169:000 | DONE wsp | na 16 16 |        |             |
1170:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1171:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
1172:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
1173:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
1174:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
1175:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
1176:000 | DONE lbl | na 16 16 | 0063a3 |             | xt_does                              
1177:000 | DONE cmt | na 16 16 |        |             | 		; compile a subroutine jump to the runtime of DOES>
1178:000 | DONE ins | na 16 16 | 0063a3 | f4 b0 63    |                 phe.# 0063b0         
1179:000 | DONE ins | na 16 16 | 0063a6 | 20 8d 6b    |                 jsr 006b8d           
1180:000 | DONE wsp | na 16 16 |        |             |
1181:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
1182:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
1183:000 | DONE ins | na 16 16 | 0063a9 | f4 28 6b    |                 phe.# 006b28         
1184:000 | DONE ins | na 16 16 | 0063ac | 20 8d 6b    |                 jsr 006b8d           
1185:000 | DONE wsp | na 16 16 |        |             |
1186:000 | DONE lbl | na 16 16 | 0063af |             | z_does                               
1186:001 | DONE ins | na 16 16 | 0063af | 60          |                 rts                  
1187:000 | DONE wsp | na 16 16 |        |             |
1188:000 | DONE lbl | na 16 16 | 0063b0 |             | does_rt                              
1189:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rearrange this for optimal use of tmp1/tmp2
1190:000 | DONE wsp | na 16 16 |        |             |
1191:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
1192:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
1193:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
1194:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
1195:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
1196:000 | DONE ins | na 16 16 | 0063b0 | 68          |                 pla                  
1197:000 | DONE ins | na 16 16 | 0063b1 | 1a          |                 inc.a                increase by one because of RTS mechanics
1198:000 | DONE ins | na 16 16 | 0063b2 | 85 16       |                 sta.d 000216         
1199:000 | DONE wsp | na 16 16 |        |             |
1200:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
1201:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
1202:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
1203:000 | DONE cmt | na 16 16 |        |             |                 ; now.
1204:000 | DONE ins | na 16 16 | 0063b4 | a5 02       |                 lda.d 000202         
1205:000 | DONE wsp | na 16 16 |        |             |
1206:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
1207:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
1208:000 | DONE ins | na 16 16 | 0063b6 | 18          |                 clc                  
1209:000 | DONE ins | na 16 16 | 0063b7 | 69 04 00    |                 adc.# 0004           
1210:000 | DONE ins | na 16 16 | 0063ba | 85 18       |                 sta.d 000218         
1211:000 | DONE wsp | na 16 16 |        |             |
1212:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
1213:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
1214:000 | DONE ins | na 16 16 | 0063bc | b2 18       |                 lda.di 000218        LDA (TMP2)
1215:000 | DONE ins | na 16 16 | 0063be | 1a          |                 inc.a                
1216:000 | DONE ins | na 16 16 | 0063bf | 85 18       |                 sta.d 000218         Points to address to be replaced
1217:000 | DONE wsp | na 16 16 |        |             |
1218:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
1219:000 | DONE ins | na 16 16 | 0063c1 | a5 16       |                 lda.d 000216         
1220:000 | DONE ins | na 16 16 | 0063c3 | 92 18       |                 sta.di 000218        STA (TMP2)
1221:000 | DONE wsp | na 16 16 |        |             |
1222:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
1223:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
1224:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
1225:000 | DONE ins | na 16 16 | 0063c5 | 60          |                 rts                  
1226:000 | DONE wsp | na 16 16 |        |             |
1227:000 | DONE wsp | na 16 16 |        |             |
1228:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1229:000 | DONE cmt | na 16 16 |        |             | ; DOT ( n -- ) X bytes / X cycles
1230:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
1231:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
1232:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
1233:000 | DONE cmt | na 16 16 |        |             | ; focus on size
1234:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
1235:000 | DONE lbl | na 16 16 | 0063c6 |             | xt_dot                               
1236:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1237:000 | DONE ins | na 16 16 | 0063c6 | 98          |                 tya                  
1238:000 | DONE ins | na 16 16 | 0063c7 | 29 00 ff    |                 and.# 0ff00          
1239:000 | DONE ins | na 16 16 | 0063ca | eb          |                 xba                  
1240:000 | DONE ins | na 16 16 | 0063cb | 20 cc 6b    |                 jsr 006bcc           
1241:000 | DONE ins | na 16 16 | 0063ce | 98          |                 tya                  
1242:000 | DONE ins | na 16 16 | 0063cf | 29 ff 00    |                 and.# 00ff           
1243:000 | DONE ins | na 16 16 | 0063d2 | 20 cc 6b    |                 jsr 006bcc           
1244:000 | DONE ins | na 16 16 | 0063d5 | 20 58 66    |                 jsr 006658           
1245:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1246:000 | DONE wsp | na 16 16 |        |             |
1247:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
1248:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
1249:000 | DONE ins | na 16 16 | 0063d8 | 20 32 64    |                 jsr 006432           
1250:000 | DONE wsp | na 16 16 |        |             |
1251:000 | DONE lbl | na 16 16 | 0063db |             | z_dot                                
1251:001 | DONE ins | na 16 16 | 0063db | 60          |                 rts                  
1252:000 | DONE wsp | na 16 16 |        |             |
1253:000 | DONE wsp | na 16 16 |        |             |
1254:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1255:000 | DONE cmt | na 16 16 |        |             | ; DOTPAREN ( "string" -- ) 13 bytes / X cycles
1256:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
1257:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
1258:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
1259:000 | DONE lbl | na 16 16 | 0063dc |             | xt_dotparen                          
1260:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
1261:000 | DONE ins | na 16 16 | 0063dc | ca          |                 dex                  
1262:000 | DONE ins | na 16 16 | 0063dd | ca          |                 dex                  
1263:000 | DONE ins | na 16 16 | 0063de | 94 00       |                 sty.dx 00            
1264:000 | DONE ins | na 16 16 | 0063e0 | a0 29 00    |                 ldy.# 29             
1265:000 | DONE wsp | na 16 16 |        |             |
1266:000 | DONE ins | na 16 16 | 0063e3 | 20 d5 65    |                 jsr 0065d5           ( -- addr u)
1267:000 | DONE ins | na 16 16 | 0063e6 | 20 8b 66    |                 jsr 00668b           
1268:000 | DONE wsp | na 16 16 |        |             |
1269:000 | DONE lbl | na 16 16 | 0063e9 |             | z_dotparen                           
1269:001 | DONE ins | na 16 16 | 0063e9 | 60          |                 rts                  
1270:000 | DONE wsp | na 16 16 |        |             |
1271:000 | DONE wsp | na 16 16 |        |             |
1272:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1273:000 | DONE cmt | na 16 16 |        |             | ; DOTS ".S" ( -- ) X bytes / X cycles
1274:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
1275:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
1276:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
1277:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
1278:000 | DONE lbl | na 16 16 | 0063ea |             | xt_dots                              
1279:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1280:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1281:000 | DONE ins | na 16 16 | 0063ea | 20 94 63    |                 jsr 006394           ( -- u)
1282:000 | DONE wsp | na 16 16 |        |             |
1283:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
1284:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
1285:000 | DONE ins | na 16 16 | 0063ed | a9 3c 00    |                 lda.# 3c             
1286:000 | DONE ins | na 16 16 | 0063f0 | 20 36 60    |                 jsr 006036           
1287:000 | DONE wsp | na 16 16 |        |             |
1288:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1289:000 | DONE ins | na 16 16 | 0063f3 | 98          |                 tya                  
1290:000 | DONE ins | na 16 16 | 0063f4 | 29 00 ff    |                 and.# 0ff00          
1291:000 | DONE ins | na 16 16 | 0063f7 | eb          |                 xba                  
1292:000 | DONE ins | na 16 16 | 0063f8 | 20 cc 6b    |                 jsr 006bcc           
1293:000 | DONE ins | na 16 16 | 0063fb | 98          |                 tya                  
1294:000 | DONE ins | na 16 16 | 0063fc | 29 ff 00    |                 and.# 00ff           
1295:000 | DONE ins | na 16 16 | 0063ff | 20 cc 6b    |                 jsr 006bcc           
1296:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1297:000 | DONE wsp | na 16 16 |        |             |
1298:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
1299:000 | DONE ins | na 16 16 | 006402 | a9 3e 00    |                 lda.# 3e             
1300:000 | DONE ins | na 16 16 | 006405 | 20 36 60    |                 jsr 006036           
1301:000 | DONE ins | na 16 16 | 006408 | 20 58 66    |                 jsr 006658           
1302:000 | DONE wsp | na 16 16 |        |             |
1303:000 | DONE wsp | na 16 16 |        |             |
1304:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
1305:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
1306:000 | DONE ins | na 16 16 | 00640b | 98          |                 tya                  force flag test
1307:000 | DONE ins | na 16 16 | 00640c | f0 20       |                 beq 00642e           
1308:000 | DONE wsp | na 16 16 |        |             |
1309:000 | DONE lbl | na 16 16 | 00640e |             | dots_not_empty                       
1310:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
1311:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
1312:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
1313:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
1314:000 | DONE wsp | na 16 16 |        |             |
1315:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
1316:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
1317:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
1318:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
1319:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
1320:000 | DONE ins | na 16 16 | 00640e | da          |                 phx                  
1321:000 | DONE wsp | na 16 16 |        |             |
1322:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
1323:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
1324:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
1325:000 | DONE ins | na 16 16 | 00640f | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
1326:000 | DONE ins | na 16 16 | 006412 | ca          |                 dex                  
1327:000 | DONE ins | na 16 16 | 006413 | ca          |                 dex                  points to dsp0-2, which is more garbage
1328:000 | DONE wsp | na 16 16 |        |             |
1329:000 | DONE lbl | na 16 16 | 006414 |             | dots_loop                            
1330:000 | DONE ins | na 16 16 | 006414 | ca          |                 dex                  get next element on DS, initially dsp0-4
1331:000 | DONE ins | na 16 16 | 006415 | ca          |                 dex                  
1332:000 | DONE wsp | na 16 16 |        |             |
1333:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1334:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
1335:000 | DONE ins | na 16 16 | 006416 | b5 00       |                 lda.dx 00            
1336:000 | DONE ins | na 16 16 | 006418 | 29 00 ff    |                 and.# 0ff00          
1337:000 | DONE ins | na 16 16 | 00641b | eb          |                 xba                  
1338:000 | DONE ins | na 16 16 | 00641c | 20 cc 6b    |                 jsr 006bcc           
1339:000 | DONE ins | na 16 16 | 00641f | b5 00       |                 lda.dx 00            
1340:000 | DONE ins | na 16 16 | 006421 | 29 ff 00    |                 and.# 00ff           
1341:000 | DONE ins | na 16 16 | 006424 | 20 cc 6b    |                 jsr 006bcc           
1342:000 | DONE ins | na 16 16 | 006427 | 20 58 66    |                 jsr 006658           
1343:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
1344:000 | DONE wsp | na 16 16 |        |             |
1345:000 | DONE ins | na 16 16 | 00642a | 88          |                 dey                  
1346:000 | DONE ins | na 16 16 | 00642b | d0 e7       |                 bne 006414           
1347:000 | DONE wsp | na 16 16 |        |             |
1348:000 | DONE ins | na 16 16 | 00642d | fa          |                 plx                  restore original DSP
1349:000 | DONE wsp | na 16 16 |        |             |
1350:000 | DONE lbl | na 16 16 | 00642e |             | dots_done                            
1351:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
1352:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
1353:000 | DONE ins | na 16 16 | 00642e | 20 32 64    |                 jsr 006432           
1354:000 | DONE wsp | na 16 16 |        |             |
1355:000 | DONE lbl | na 16 16 | 006431 |             | z_dots                               
1355:001 | DONE ins | na 16 16 | 006431 | 60          |                 rts                  
1356:000 | DONE wsp | na 16 16 |        |             |
1357:000 | DONE wsp | na 16 16 |        |             |
1358:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1359:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1360:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1361:000 | DONE wsp | na 16 16 |        |             |
1362:000 | DONE lbl | na 16 16 | 006432 |             | xt_drop                              
1363:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1364:000 | DONE ins | na 16 16 | 006432 | b4 00       |                 ldy.dx 00            
1365:000 | DONE ins | na 16 16 | 006434 | e8          |                 inx                  
1366:000 | DONE ins | na 16 16 | 006435 | e8          |                 inx                  
1367:000 | DONE wsp | na 16 16 |        |             |
1368:000 | DONE lbl | na 16 16 | 006436 |             | z_drop                               
1368:001 | DONE ins | na 16 16 | 006436 | 60          |                 rts                  
1369:000 | DONE wsp | na 16 16 |        |             |
1370:000 | DONE wsp | na 16 16 |        |             |
1371:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1372:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1373:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1374:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1375:000 | DONE lbl | na 16 16 | 006437 |             | xt_dump                              
1376:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1377:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1378:000 | DONE ins | na 16 16 | 006437 | 84 16       |                 sty.d 000216         
1379:000 | DONE wsp | na 16 16 |        |             |
1380:000 | DONE lbl | na 16 16 | 006439 |             | dump_line_loop                       
1381:000 | DONE ins | na 16 16 | 006439 | 20 14 63    |                 jsr 006314           
1382:000 | DONE wsp | na 16 16 |        |             |
1383:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1384:000 | DONE ins | na 16 16 | 00643c | a0 10 00    |                 ldy.# 0010           
1385:000 | DONE lbl | na 16 16 | 00643f |             | dump_byte_loop                       
1386:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1387:000 | DONE ins | na 16 16 | 00643f | a5 16       |                 lda.d 000216         
1388:000 | DONE ins | na 16 16 | 006441 | f0 11       |                 beq 006454           
1389:000 | DONE wsp | na 16 16 |        |             |
1390:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1391:000 | DONE ins | na 16 16 | 006443 | a1 00       |                 lda.dxi 00           
1392:000 | DONE ins | na 16 16 | 006445 | 20 cc 6b    |                 jsr 006bcc           TODO replace by EMIT
1393:000 | DONE ins | na 16 16 | 006448 | 20 58 66    |                 jsr 006658           
1394:000 | DONE wsp | na 16 16 |        |             |
1395:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1396:000 | DONE ins | na 16 16 | 00644b | f6 00       |                 inc.dx 00            
1397:000 | DONE wsp | na 16 16 |        |             |
1398:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1399:000 | DONE ins | na 16 16 | 00644d | c6 16       |                 dec.d 000216         
1400:000 | DONE ins | na 16 16 | 00644f | 88          |                 dey                  
1401:000 | DONE ins | na 16 16 | 006450 | d0 ed       |                 bne 00643f           
1402:000 | DONE ins | na 16 16 | 006452 | 80 e5       |                 bra 006439           
1403:000 | DONE wsp | na 16 16 |        |             |
1404:000 | DONE lbl | na 16 16 | 006454 |             | dump_done                            
1405:000 | DONE ins | na 16 16 | 006454 | 20 14 63    |                 jsr 006314           
1406:000 | DONE wsp | na 16 16 |        |             |
1407:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1408:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1409:000 | DONE ins | na 16 16 | 006457 | b4 02       |                 ldy.dx 02            
1410:000 | DONE ins | na 16 16 | 006459 | e8          |                 inx                  
1411:000 | DONE ins | na 16 16 | 00645a | e8          |                 inx                  
1412:000 | DONE ins | na 16 16 | 00645b | e8          |                 inx                  
1413:000 | DONE ins | na 16 16 | 00645c | e8          |                 inx                  
1414:000 | DONE wsp | na 16 16 |        |             |
1415:000 | DONE lbl | na 16 16 | 00645d |             | z_dump                               
1415:001 | DONE ins | na 16 16 | 00645d | 60          |                 rts                  
1416:000 | DONE wsp | na 16 16 |        |             |
1417:000 | DONE wsp | na 16 16 |        |             |
1418:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1419:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1420:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1421:000 | DONE wsp | na 16 16 |        |             |
1422:000 | DONE lbl | na 16 16 | 00645e |             | xt_dup                               
1423:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1424:000 | DONE ins | na 16 16 | 00645e | ca          |                 dex                  
1425:000 | DONE ins | na 16 16 | 00645f | ca          |                 dex                  
1426:000 | DONE ins | na 16 16 | 006460 | 94 00       |                 sty.dx 00            
1427:000 | DONE wsp | na 16 16 |        |             |
1428:000 | DONE lbl | na 16 16 | 006462 |             | z_dup                                
1428:001 | DONE ins | na 16 16 | 006462 | 60          |                 rts                  
1429:000 | DONE wsp | na 16 16 |        |             |
1430:000 | DONE wsp | na 16 16 |        |             |
1431:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1432:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1433:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1434:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1435:000 | DONE lbl | na 16 16 | 006463 |             | xt_evaluate                          
1436:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1437:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1438:000 | DONE ins | na 16 16 | 006463 | a5 12       |                 lda.d 000212         >IN
1439:000 | DONE ins | na 16 16 | 006465 | 48          |                 pha                  
1440:000 | DONE ins | na 16 16 | 006466 | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
1441:000 | DONE ins | na 16 16 | 006468 | 48          |                 pha                  
1442:000 | DONE ins | na 16 16 | 006469 | a5 0c       |                 lda.d 00020c         
1443:000 | DONE ins | na 16 16 | 00646b | 48          |                 pha                  
1444:000 | DONE ins | na 16 16 | 00646c | a5 0e       |                 lda.d 00020e         
1445:000 | DONE ins | na 16 16 | 00646e | 48          |                 pha                  
1446:000 | DONE wsp | na 16 16 |        |             |
1447:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
1448:000 | DONE ins | na 16 16 | 00646f | a9 ff ff    |                 lda.# 0ffff          
1449:000 | DONE ins | na 16 16 | 006472 | 85 0a       |                 sta.d 00020a         
1450:000 | DONE wsp | na 16 16 |        |             |
1451:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
1452:000 | DONE ins | na 16 16 | 006474 | 64 12       |                 stz.d 000212         
1453:000 | DONE wsp | na 16 16 |        |             |
1454:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
1455:000 | DONE ins | na 16 16 | 006476 | 84 0e       |                 sty.d 00020e         
1456:000 | DONE ins | na 16 16 | 006478 | b5 00       |                 lda.dx 00            
1457:000 | DONE ins | na 16 16 | 00647a | 85 0c       |                 sta.d 00020c         
1458:000 | DONE wsp | na 16 16 |        |             |
1459:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1460:000 | DONE ins | na 16 16 | 00647c | b4 02       |                 ldy.dx 02            
1461:000 | DONE ins | na 16 16 | 00647e | e8          |                 inx                  
1462:000 | DONE ins | na 16 16 | 00647f | e8          |                 inx                  
1463:000 | DONE ins | na 16 16 | 006480 | e8          |                 inx                  
1464:000 | DONE ins | na 16 16 | 006481 | e8          |                 inx                  
1465:000 | DONE wsp | na 16 16 |        |             |
1466:000 | DONE ins | na 16 16 | 006482 | 20 3c 6b    |                 jsr 006b3c           
1467:000 | DONE wsp | na 16 16 |        |             |
1468:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1469:000 | DONE ins | na 16 16 | 006485 | 68          |                 pla                  
1470:000 | DONE ins | na 16 16 | 006486 | 85 0e       |                 sta.d 00020e         
1471:000 | DONE ins | na 16 16 | 006488 | 68          |                 pla                  
1472:000 | DONE ins | na 16 16 | 006489 | 85 0c       |                 sta.d 00020c         
1473:000 | DONE ins | na 16 16 | 00648b | 68          |                 pla                  
1474:000 | DONE ins | na 16 16 | 00648c | 85 0a       |                 sta.d 00020a         
1475:000 | DONE ins | na 16 16 | 00648e | 68          |                 pla                  
1476:000 | DONE ins | na 16 16 | 00648f | 85 12       |                 sta.d 000212         
1477:000 | DONE wsp | na 16 16 |        |             |
1478:000 | DONE lbl | na 16 16 | 006491 |             | z_evaluate                           
1478:001 | DONE ins | na 16 16 | 006491 | 60          |                 rts                  
1479:000 | DONE wsp | na 16 16 |        |             |
1480:000 | DONE wsp | na 16 16 |        |             |
1481:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1482:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1483:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1484:000 | DONE wsp | na 16 16 |        |             |
1485:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1486:000 | DONE cmt | na 16 16 |        |             | ; range
1487:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1488:000 | DONE lbl | na 16 16 | 006492 |             | execute_ip                           
1488:001 | DONE dir | na 16 16 | 006492 | (3 bytes)   |         .byte 00, 00, 00             
1488:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1489:000 | DONE wsp | na 16 16 |        |             |
1490:000 | DONE lbl | na 16 16 | 006495 |             | xt_execute                           
1491:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1492:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1493:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
1494:000 | DONE ins | na 16 16 | 006495 | 8c 92 64    |                 sty 006492           
1495:000 | DONE ins | na 16 16 | 006498 | b4 00       |                 ldy.dx 00            
1496:000 | DONE ins | na 16 16 | 00649a | e8          |                 inx                  
1497:000 | DONE ins | na 16 16 | 00649b | e8          |                 inx                  
1498:000 | DONE wsp | na 16 16 |        |             |
1499:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
1500:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
1501:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
1502:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
1503:000 | DONE ins | na 16 16 | 00649c | 6c 92 64    |                 jmp.i 006492         JMP (EXECUTE_IP)
1504:000 | DONE wsp | na 16 16 |        |             |
1505:000 | DONE lbl | na 16 16 | 00649f |             | z_execute                            
1505:001 | DONE ins | na 16 16 | 00649f | ea          |                 nop                  Never reached, see if we need the NOP
1506:000 | DONE wsp | na 16 16 |        |             |
1507:000 | DONE wsp | na 16 16 |        |             |
1508:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1509:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1510:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1511:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
1512:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
1513:000 | DONE wsp | na 16 16 |        |             |
1514:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1515:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1516:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1517:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1518:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1519:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1520:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1521:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1522:000 | DONE lbl | na 16 16 | 0064a0 |             | xt_find-name                         
1523:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1524:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1525:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1526:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1527:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1528:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1529:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1530:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1531:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1532:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1533:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1534:000 | DONE ins | na 16 16 | 0064a0 | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
1535:000 | DONE wsp | na 16 16 |        |             |
1536:000 | DONE ins | na 16 16 | 0064a2 | a4 02       |                 ldy.d 000202         
1537:000 | DONE ins | na 16 16 | 0064a4 | 84 16       |                 sty.d 000216         nt of first Dictionary word
1538:000 | DONE wsp | na 16 16 |        |             |
1539:000 | DONE ins | na 16 16 | 0064a6 | b4 00       |                 ldy.dx 00            
1540:000 | DONE ins | na 16 16 | 0064a8 | 84 18       |                 sty.d 000218         address of mystery string, was NOS
1541:000 | DONE wsp | na 16 16 |        |             |
1542:000 | DONE lbl | na 16 16 | 0064aa |             | find-name_loop                       
1543:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1544:000 | DONE ins | na 16 16 | 0064aa | b2 16       |                 lda.di 000216        LSB in first header word is length
1545:000 | DONE ins | na 16 16 | 0064ac | 29 ff 00    |                 and.# 00ff           
1546:000 | DONE ins | na 16 16 | 0064af | c5 06       |                 cmp.d 000206         we test LSB
1547:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1548:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1549:000 | DONE cmt | na 16 16 |        |             |                 ; same
1550:000 | DONE ins | na 16 16 | 0064b1 | f0 0c       |                 beq 0064bf           
1551:000 | DONE wsp | na 16 16 |        |             |
1552:000 | DONE lbl | na 16 16 | 0064b3 |             | find-name_next_entry                 
1553:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1554:000 | DONE ins | na 16 16 | 0064b3 | e6 16       |                 inc.d 000216         
1555:000 | DONE ins | na 16 16 | 0064b5 | e6 16       |                 inc.d 000216         
1556:000 | DONE ins | na 16 16 | 0064b7 | b2 16       |                 lda.di 000216        LDA (TMP1)
1557:000 | DONE wsp | na 16 16 |        |             |
1558:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1559:000 | DONE ins | na 16 16 | 0064b9 | f0 36       |                 beq 0064f1           
1560:000 | DONE wsp | na 16 16 |        |             |
1561:000 | DONE ins | na 16 16 | 0064bb | 85 16       |                 sta.d 000216         new header
1562:000 | DONE ins | na 16 16 | 0064bd | 80 eb       |                 bra 0064aa           
1563:000 | DONE wsp | na 16 16 |        |             |
1564:000 | DONE lbl | na 16 16 | 0064bf |             | find-name_chars                      
1565:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1566:000 | DONE wsp | na 16 16 |        |             |
1567:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1568:000 | DONE ins | na 16 16 | 0064bf | e2 20       |                 sep 20               
1568:001 | DONE ctl | na  8 16 |        |             |         .!a8
1569:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1570:000 | DONE cmt | na  8 16 |        |             |                 ; header
1571:000 | DONE ins | na  8 16 | 0064c1 | a0 08 00    |                 ldy.# 0008           
1572:000 | DONE ins | na  8 16 | 0064c4 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
1573:000 | DONE ins | na  8 16 | 0064c6 | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
1574:000 | DONE ins | na  8 16 | 0064c8 | f0 04       |                 beq 0064ce           
1575:000 | DONE wsp | na  8 16 |        |             |
1576:000 | DONE lbl | na  8 16 | 0064ca |             | find-name_char_nomatcnt_8            
1577:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1578:000 | DONE ins | na  8 16 | 0064ca | c2 20       |                 rep 20               
1578:001 | DONE ctl | na 16 16 |        |             |         .!a16
1579:000 | DONE ins | na 16 16 | 0064cc | 80 e5       |                 bra 0064b3           
1580:000 | DONE wsp | na 16 16 |        |             |
1581:000 | DONE lbl | na 16 16 | 0064ce |             | find-name_all_chars                  
1582:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1583:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1584:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1585:000 | DONE ins | na  8 16 | 0064ce | a4 06       |                 ldy.d 000206         
1586:000 | DONE ins | na  8 16 | 0064d0 | 88          |                 dey                  faster and shorter than CPY.# 01
1587:000 | DONE ins | na  8 16 | 0064d1 | f0 18       |                 beq 0064eb           
1588:000 | DONE wsp | na  8 16 |        |             |
1589:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1590:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1591:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1592:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1593:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1594:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1595:000 | DONE wsp | na  8 16 |        |             |
1596:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1597:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1598:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1599:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1600:000 | DONE ins | na  8 16 | 0064d3 | c2 20       |                 rep 20               
1600:001 | DONE ctl | na 16 16 |        |             |         .!a16
1601:000 | DONE ins | na 16 16 | 0064d5 | a5 16       |                 lda.d 000216         address of Dictionary string
1602:000 | DONE ins | na 16 16 | 0064d7 | 18          |                 clc                  
1603:000 | DONE ins | na 16 16 | 0064d8 | 69 08 00    |                 adc.# 0008           
1604:000 | DONE ins | na 16 16 | 0064db | 85 1a       |                 sta.d 00021a         
1605:000 | DONE ins | na 16 16 | 0064dd | e2 20       |                 sep 20               
1605:001 | DONE ctl | na  8 16 |        |             |         .!a8
1606:000 | DONE ins | na  8 16 | 0064df | a4 06       |                 ldy.d 000206         get length of strings as loop index
1607:000 | DONE ins | na  8 16 | 0064e1 | 88          |                 dey                  first index is length minus 1
1608:000 | DONE wsp | na  8 16 |        |             |
1609:000 | DONE lbl | na  8 16 | 0064e2 |             | @                                    
1610:000 | DONE ins | na  8 16 | 0064e2 | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
1611:000 | DONE ins | na  8 16 | 0064e4 | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
1612:000 | DONE ins | na  8 16 | 0064e6 | d0 e2       |                 bne 0064ca           
1613:000 | DONE ins | na  8 16 | 0064e8 | 88          |                 dey                  start of string (Y=0) was already tested
1614:000 | DONE ins | na  8 16 | 0064e9 | d0 f7       |                 bne 0064e2           
1615:000 | DONE wsp | na  8 16 |        |             |
1616:000 | DONE lbl | na  8 16 | 0064eb |             | find-name_success                    
1617:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1618:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1619:000 | DONE ins | na  8 16 | 0064eb | c2 20       |                 rep 20               
1619:001 | DONE ctl | na 16 16 |        |             |         .!a16
1620:000 | DONE ins | na 16 16 | 0064ed | a4 16       |                 ldy.d 000216         get the correct DP
1621:000 | DONE ins | na 16 16 | 0064ef | 80 03       |                 bra 0064f4           
1622:000 | DONE wsp | na 16 16 |        |             |
1623:000 | DONE wsp | na 16 16 |        |             |
1624:000 | DONE lbl | na 16 16 | 0064f1 |             | find-name_failure_16                 
1625:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1626:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1627:000 | DONE ins | na 16 16 | 0064f1 | a0 00 00    |                 ldy.# 0000           fall thru
1628:000 | DONE wsp | na 16 16 |        |             |
1629:000 | DONE lbl | na 16 16 | 0064f4 |             | find-name_done                       
1630:000 | DONE ins | na 16 16 | 0064f4 | e8          |                 inx                  drop old address (NIP)
1631:000 | DONE ins | na 16 16 | 0064f5 | e8          |                 inx                  
1632:000 | DONE wsp | na 16 16 |        |             |
1633:000 | DONE lbl | na 16 16 | 0064f6 |             | z_find-name                          
1633:001 | DONE ins | na 16 16 | 0064f6 | 60          |                 rts                  
1634:000 | DONE wsp | na 16 16 |        |             |
1635:000 | DONE wsp | na 16 16 |        |             |
1636:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1637:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
1638:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
1639:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
1640:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
1641:000 | DONE lbl | na 16 16 | 0064f7 |             | xt_immediate                         
1642:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1643:000 | DONE ins | na 16 16 | 0064f7 | a9 02 00    |                 lda.# IM             Immediate flag
1644:000 | DONE ins | na 16 16 | 0064fa | eb          |                 xba                  flags are MSB
1645:000 | DONE ins | na 16 16 | 0064fb | 12 02       |                 ora.di 000202        ORA (DP)
1646:000 | DONE ins | na 16 16 | 0064fd | 92 02       |                 sta.di 000202        
1647:000 | DONE wsp | na 16 16 |        |             |
1648:000 | DONE lbl | na 16 16 | 0064ff |             | z_immediate                          
1648:001 | DONE ins | na 16 16 | 0064ff | 60          |                 rts                  
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE wsp | na 16 16 |        |             |
1651:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1652:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
1653:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
1654:000 | DONE lbl | na 16 16 | 006500 |             | xt_invert                            
1655:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1656:000 | DONE ins | na 16 16 | 006500 | 98          |                 tya                  
1657:000 | DONE ins | na 16 16 | 006501 | 49 ff ff    |                 eor.# 0ffff          
1658:000 | DONE ins | na 16 16 | 006504 | a8          |                 tay                  
1659:000 | DONE wsp | na 16 16 |        |             |
1660:000 | DONE lbl | na 16 16 | 006505 |             | z_invert                             
1660:001 | DONE ins | na 16 16 | 006505 | 60          |                 rts                  
1661:000 | DONE wsp | na 16 16 |        |             |
1662:000 | DONE wsp | na 16 16 |        |             |
1663:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1664:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
1665:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
1666:000 | DONE lbl | na 16 16 | 006506 |             | xt_here                              
1667:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1668:000 | DONE ins | na 16 16 | 006506 | ca          |                 dex                  
1669:000 | DONE ins | na 16 16 | 006507 | ca          |                 dex                  
1670:000 | DONE ins | na 16 16 | 006508 | 94 00       |                 sty.dx 00            
1671:000 | DONE wsp | na 16 16 |        |             |
1672:000 | DONE ins | na 16 16 | 00650a | a4 00       |                 ldy.d 000200         
1673:000 | DONE wsp | na 16 16 |        |             |
1674:000 | DONE lbl | na 16 16 | 00650c |             | z_here                               
1674:001 | DONE ins | na 16 16 | 00650c | 60          |                 rts                  
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE wsp | na 16 16 |        |             |
1677:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1678:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
1679:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
1680:000 | DONE lbl | na 16 16 | 00650d |             | xt_hex                               
1681:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1682:000 | DONE ins | na 16 16 | 00650d | a9 10 00    |                 lda.# 0010           
1683:000 | DONE ins | na 16 16 | 006510 | 85 1c       |                 sta.d 00021c         
1684:000 | DONE wsp | na 16 16 |        |             |
1685:000 | DONE lbl | na 16 16 | 006512 |             | z_hex                                
1685:001 | DONE ins | na 16 16 | 006512 | 60          |                 rts                  
1686:000 | DONE wsp | na 16 16 |        |             |
1687:000 | DONE wsp | na 16 16 |        |             |
1688:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1689:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
1690:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
1691:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
1692:000 | DONE cmt | na 16 16 |        |             | ; for instance
1693:000 | DONE lbl | na 16 16 | 006513 |             | xt_literal                           
1694:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
1695:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
1696:000 | DONE ins | na 16 16 | 006513 | f4 25 65    |                 phe.# 006525         PEA LIT_RT_START
1697:000 | DONE ins | na 16 16 | 006516 | 20 8d 6b    |                 jsr 006b8d           
1698:000 | DONE wsp | na 16 16 |        |             |
1699:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
1700:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
1701:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
1702:000 | DONE ins | na 16 16 | 006519 | 98          |                 tya                  
1703:000 | DONE ins | na 16 16 | 00651a | 92 00       |                 sta.di 000200        
1704:000 | DONE ins | na 16 16 | 00651c | e6 00       |                 inc.d 000200         
1705:000 | DONE ins | na 16 16 | 00651e | e6 00       |                 inc.d 000200         
1706:000 | DONE wsp | na 16 16 |        |             |
1707:000 | DONE ins | na 16 16 | 006520 | b4 00       |                 ldy.dx 00            DROP
1708:000 | DONE ins | na 16 16 | 006522 | e8          |                 inx                  
1709:000 | DONE ins | na 16 16 | 006523 | e8          |                 inx                  
1710:000 | DONE wsp | na 16 16 |        |             |
1711:000 | DONE lbl | na 16 16 | 006524 |             | z_literal                            
1711:001 | DONE ins | na 16 16 | 006524 | 60          |                 rts                  
1712:000 | DONE wsp | na 16 16 |        |             |
1713:000 | DONE lbl | na 16 16 | 006525 |             | literal_rt                           
1714:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
1715:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
1716:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
1717:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
1718:000 | DONE wsp | na 16 16 |        |             |
1719:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
1720:000 | DONE ins | na 16 16 | 006525 | ca          |                 dex                  
1721:000 | DONE ins | na 16 16 | 006526 | ca          |                 dex                  
1722:000 | DONE ins | na 16 16 | 006527 | 94 00       |                 sty.dx 00            
1723:000 | DONE wsp | na 16 16 |        |             |
1724:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
1725:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
1726:000 | DONE ins | na 16 16 | 006529 | 7a          |                 ply                  
1727:000 | DONE ins | na 16 16 | 00652a | c8          |                 iny                  
1728:000 | DONE ins | na 16 16 | 00652b | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
1729:000 | DONE wsp | na 16 16 |        |             |
1730:000 | DONE ins | na 16 16 | 00652e | c8          |                 iny                  move return address past data and restore
1731:000 | DONE ins | na 16 16 | 00652f | 5a          |                 phy                  so we can get back home
1732:000 | DONE wsp | na 16 16 |        |             |
1733:000 | DONE ins | na 16 16 | 006530 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
1734:000 | DONE wsp | na 16 16 |        |             |
1735:000 | DONE ins | na 16 16 | 006531 | 60          |                 rts                  
1736:000 | DONE wsp | na 16 16 |        |             |
1737:000 | DONE wsp | na 16 16 |        |             |
1738:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1739:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
1740:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
1741:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1742:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1743:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1744:000 | DONE lbl | na 16 16 | 006532 |             | xt_max                               
1745:000 | DONE ins | na 16 16 | 006532 | 98          |                 tya                  
1746:000 | DONE ins | na 16 16 | 006533 | d5 00       |                 cmp.dx 00            
1747:000 | DONE wsp | na 16 16 |        |             |
1748:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1749:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1750:000 | DONE ins | na 16 16 | 006535 | f0 0b       |                 beq 006542           Faster than DROP because TOS is in Y
1751:000 | DONE wsp | na 16 16 |        |             |
1752:000 | DONE ins | na 16 16 | 006537 | f5 00       |                 sbc.dx 00            
1753:000 | DONE ins | na 16 16 | 006539 | 50 03       |                 bvc 00653e           no overflow, skip ahead
1754:000 | DONE wsp | na 16 16 |        |             |
1755:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1756:000 | DONE ins | na 16 16 | 00653b | 49 00 80    |                 eor.# 8000           compliment negative flag
1757:000 | DONE wsp | na 16 16 |        |             |
1758:000 | DONE lbl | na 16 16 | 00653e |             | max_no_ov                            
1759:000 | DONE ins | na 16 16 | 00653e | 10 02       |                 bpl 006542           keep TOS
1760:000 | DONE lbl | na 16 16 | 006540 |             | max_drop                             
1761:000 | DONE ins | na 16 16 | 006540 | b4 00       |                 ldy.dx 00            DROP so NOS is result
1762:000 | DONE lbl | na 16 16 | 006542 |             | max_nip                              
1763:000 | DONE ins | na 16 16 | 006542 | e8          |                 inx                  
1764:000 | DONE ins | na 16 16 | 006543 | e8          |                 inx                  
1765:000 | DONE wsp | na 16 16 |        |             |
1766:000 | DONE lbl | na 16 16 | 006544 |             | z_max                                
1766:001 | DONE ins | na 16 16 | 006544 | 60          |                 rts                  
1767:000 | DONE wsp | na 16 16 |        |             |
1768:000 | DONE wsp | na 16 16 |        |             |
1769:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1770:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
1771:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
1772:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1773:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1774:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1775:000 | DONE lbl | na 16 16 | 006545 |             | xt_min                               
1776:000 | DONE ins | na 16 16 | 006545 | 98          |                 tya                  
1777:000 | DONE ins | na 16 16 | 006546 | d5 00       |                 cmp.dx 00            
1778:000 | DONE wsp | na 16 16 |        |             |
1779:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1780:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1781:000 | DONE ins | na 16 16 | 006548 | f0 0b       |                 beq 006555           Faster than DROP because TOS is in Y
1782:000 | DONE wsp | na 16 16 |        |             |
1783:000 | DONE ins | na 16 16 | 00654a | f5 00       |                 sbc.dx 00            
1784:000 | DONE ins | na 16 16 | 00654c | 50 03       |                 bvc 006551           no overflow, skip ahead
1785:000 | DONE wsp | na 16 16 |        |             |
1786:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1787:000 | DONE ins | na 16 16 | 00654e | 49 00 80    |                 eor.# 8000           compliment negative flag
1788:000 | DONE wsp | na 16 16 |        |             |
1789:000 | DONE lbl | na 16 16 | 006551 |             | min_no_ov                            
1790:000 | DONE ins | na 16 16 | 006551 | 30 02       |                 bmi 006555           keep TOS
1791:000 | DONE lbl | na 16 16 | 006553 |             | min_drop                             
1792:000 | DONE ins | na 16 16 | 006553 | b4 00       |                 ldy.dx 00            DROP so NOS is result
1793:000 | DONE lbl | na 16 16 | 006555 |             | min_nip                              
1794:000 | DONE ins | na 16 16 | 006555 | e8          |                 inx                  
1795:000 | DONE ins | na 16 16 | 006556 | e8          |                 inx                  
1796:000 | DONE wsp | na 16 16 |        |             |
1797:000 | DONE lbl | na 16 16 | 006557 |             | z_min                                
1797:001 | DONE ins | na 16 16 | 006557 | 60          |                 rts                  
1798:000 | DONE wsp | na 16 16 |        |             |
1799:000 | DONE wsp | na 16 16 |        |             |
1800:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1801:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
1802:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
1803:000 | DONE lbl | na 16 16 | 006558 |             | xt_name-int                          
1804:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1805:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1806:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
1807:000 | DONE ins | na 16 16 | 006558 | c8          |                 iny                  
1808:000 | DONE ins | na 16 16 | 006559 | c8          |                 iny                  
1809:000 | DONE ins | na 16 16 | 00655a | c8          |                 iny                  
1810:000 | DONE ins | na 16 16 | 00655b | c8          |                 iny                  
1811:000 | DONE ins | na 16 16 | 00655c | b9 00 00    |                 lda.y 0000           
1812:000 | DONE ins | na 16 16 | 00655f | a8          |                 tay                  
1813:000 | DONE wsp | na 16 16 |        |             |
1814:000 | DONE lbl | na 16 16 | 006560 |             | z_name-int                           
1814:001 | DONE ins | na 16 16 | 006560 | 60          |                 rts                  
1815:000 | DONE wsp | na 16 16 |        |             |
1816:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1817:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
1818:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
1819:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
1820:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
1821:000 | DONE lbl | na 16 16 | 006561 |             | xt_name-string                       
1822:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1823:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1824:000 | DONE ins | na 16 16 | 006561 | ca          |                 dex                  move NOS down one
1825:000 | DONE ins | na 16 16 | 006562 | ca          |                 dex                  
1826:000 | DONE wsp | na 16 16 |        |             |
1827:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
1828:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
1829:000 | DONE ins | na 16 16 | 006563 | 98          |                 tya                  
1830:000 | DONE ins | na 16 16 | 006564 | 18          |                 clc                  
1831:000 | DONE ins | na 16 16 | 006565 | 69 08 00    |                 adc.# 0008           
1832:000 | DONE ins | na 16 16 | 006568 | 95 00       |                 sta.dx 00            NOS
1833:000 | DONE wsp | na 16 16 |        |             |
1834:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
1835:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
1836:000 | DONE ins | na 16 16 | 00656a | b9 00 00    |                 lda.y 0000           LDA $0000,Y
1837:000 | DONE ins | na 16 16 | 00656d | 29 ff 00    |                 and.# 00ff           mask all but length byte
1838:000 | DONE ins | na 16 16 | 006570 | a8          |                 tay                  
1839:000 | DONE wsp | na 16 16 |        |             |
1840:000 | DONE lbl | na 16 16 | 006571 |             | z_name-string                        
1840:001 | DONE ins | na 16 16 | 006571 | 60          |                 rts                  
1841:000 | DONE wsp | na 16 16 |        |             |
1842:000 | DONE wsp | na 16 16 |        |             |
1843:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1844:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
1845:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
1846:000 | DONE lbl | na 16 16 | 006572 |             | xt_negate                            
1847:000 | DONE ins | na 16 16 | 006572 | 98          |                 tya                  
1848:000 | DONE ins | na 16 16 | 006573 | 49 ff ff    |                 eor.# 0ffff          
1849:000 | DONE ins | na 16 16 | 006576 | 1a          |                 inc.a                
1850:000 | DONE ins | na 16 16 | 006577 | a8          |                 tay                  
1851:000 | DONE wsp | na 16 16 |        |             |
1852:000 | DONE lbl | na 16 16 | 006578 |             | z_negate                             
1852:001 | DONE ins | na 16 16 | 006578 | 60          |                 rts                  
1853:000 | DONE wsp | na 16 16 |        |             |
1854:000 | DONE wsp | na 16 16 |        |             |
1855:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1856:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
1857:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
1858:000 | DONE lbl | na 16 16 | 006579 |             | xt_nip                               
1859:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1860:000 | DONE ins | na 16 16 | 006579 | e8          |                 inx                  
1861:000 | DONE ins | na 16 16 | 00657a | e8          |                 inx                  
1862:000 | DONE lbl | na 16 16 | 00657b |             | z_nip                                
1862:001 | DONE ins | na 16 16 | 00657b | 60          |                 rts                  
1863:000 | DONE wsp | na 16 16 |        |             |
1864:000 | DONE wsp | na 16 16 |        |             |
1865:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1866:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
1867:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
1868:000 | DONE lbl | na 16 16 | 00657c |             | xt_or                                
1869:000 | DONE ins | na 16 16 | 00657c | 98          |                 tya                  
1870:000 | DONE ins | na 16 16 | 00657d | 15 00       |                 ora.dx 00            
1871:000 | DONE ins | na 16 16 | 00657f | a8          |                 tay                  
1872:000 | DONE wsp | na 16 16 |        |             |
1873:000 | DONE ins | na 16 16 | 006580 | e8          |                 inx                  
1874:000 | DONE ins | na 16 16 | 006581 | e8          |                 inx                  
1875:000 | DONE wsp | na 16 16 |        |             |
1876:000 | DONE lbl | na 16 16 | 006582 |             | z_or                                 
1876:001 | DONE ins | na 16 16 | 006582 | 60          |                 rts                  
1877:000 | DONE wsp | na 16 16 |        |             |
1878:000 | DONE wsp | na 16 16 |        |             |
1879:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1880:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
1881:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
1882:000 | DONE lbl | na 16 16 | 006583 |             | xt_over                              
1883:000 | DONE ins | na 16 16 | 006583 | ca          |                 dex                  
1884:000 | DONE ins | na 16 16 | 006584 | ca          |                 dex                  
1885:000 | DONE ins | na 16 16 | 006585 | 94 00       |                 sty.dx 00            
1886:000 | DONE ins | na 16 16 | 006587 | b4 02       |                 ldy.dx 02            
1887:000 | DONE wsp | na 16 16 |        |             |
1888:000 | DONE lbl | na 16 16 | 006589 |             | z_over                               
1888:001 | DONE ins | na 16 16 | 006589 | 60          |                 rts                  
1889:000 | DONE wsp | na 16 16 |        |             |
1890:000 | DONE wsp | na 16 16 |        |             |
1891:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1892:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
1893:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
1894:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
1895:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
1896:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
1897:000 | DONE lbl | na 16 16 | 00658a |             | xt_pad                               
1898:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1899:000 | DONE ins | na 16 16 | 00658a | ca          |                 dex                  
1900:000 | DONE ins | na 16 16 | 00658b | ca          |                 dex                  
1901:000 | DONE ins | na 16 16 | 00658c | 94 00       |                 sty.dx 00            
1902:000 | DONE wsp | na 16 16 |        |             |
1903:000 | DONE ins | na 16 16 | 00658e | a5 00       |                 lda.d 000200         
1904:000 | DONE ins | na 16 16 | 006590 | 18          |                 clc                  
1905:000 | DONE ins | na 16 16 | 006591 | 69 7f 00    |                 adc.# 00007f         
1906:000 | DONE ins | na 16 16 | 006594 | a8          |                 tay                  
1907:000 | DONE wsp | na 16 16 |        |             |
1908:000 | DONE lbl | na 16 16 | 006595 |             | z_pad                                
1908:001 | DONE ins | na 16 16 | 006595 | 60          |                 rts                  
1909:000 | DONE wsp | na 16 16 |        |             |
1910:000 | DONE wsp | na 16 16 |        |             |
1911:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1912:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
1913:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
1914:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
1915:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
1916:000 | DONE lbl | na 16 16 | 006596 |             | xt_page                              
1917:000 | DONE ins | na 16 16 | 006596 | a9 57 6e    |                 lda.# 006e57         
1918:000 | DONE ins | na 16 16 | 006599 | 20 b4 6b    |                 jsr 006bb4           
1919:000 | DONE wsp | na 16 16 |        |             |
1920:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
1921:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
1922:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
1923:000 | DONE ins | na 16 16 | 00659c | a9 5c 6e    |                 lda.# 006e5c         
1924:000 | DONE ins | na 16 16 | 00659f | 20 b4 6b    |                 jsr 006bb4           
1925:000 | DONE wsp | na 16 16 |        |             |
1926:000 | DONE lbl | na 16 16 | 0065a2 |             | z_page                               
1926:001 | DONE ins | na 16 16 | 0065a2 | 60          |                 rts                  
1927:000 | DONE wsp | na 16 16 |        |             |
1928:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1929:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
1930:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
1931:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
1932:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
1933:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
1934:000 | DONE lbl | na 16 16 | 0065a3 |             | xt_parse-name                        
1935:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1936:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1937:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
1938:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
1939:000 | DONE ins | na 16 16 | 0065a3 | 5a          |                 phy                  save TOS for later use
1940:000 | DONE ins | na 16 16 | 0065a4 | a4 12       |                 ldy.d 000212         >IN
1941:000 | DONE ins | na 16 16 | 0065a6 | e2 20       |                 sep 20               
1941:001 | DONE ctl | na  8 16 |        |             |         .!a8
1942:000 | DONE lbl | na  8 16 | 0065a8 |             | parse-name_loop                      
1943:000 | DONE ins | na  8 16 | 0065a8 | c4 0e       |                 cpy.d 00020e         end of line?
1944:000 | DONE ins | na  8 16 | 0065aa | f0 09       |                 beq 0065b5           
1945:000 | DONE wsp | na  8 16 |        |             |
1946:000 | DONE ins | na  8 16 | 0065ac | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
1947:000 | DONE ins | na  8 16 | 0065ae | c9 20       |                 cmp.# AscSP          
1948:000 | DONE ins | na  8 16 | 0065b0 | d0 17       |                 bne 0065c9           
1949:000 | DONE ins | na  8 16 | 0065b2 | c8          |                 iny                  
1950:000 | DONE ins | na  8 16 | 0065b3 | 80 f3       |                 bra 0065a8           
1951:000 | DONE wsp | na  8 16 |        |             |
1952:000 | DONE lbl | na  8 16 | 0065b5 |             | parse-name_empty_line                
1953:000 | DONE ins | na  8 16 | 0065b5 | c2 20       |                 rep 20               
1953:001 | DONE ctl | na 16 16 |        |             |         .!a16
1954:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
1955:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
1956:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
1957:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
1958:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
1959:000 | DONE ins | na 16 16 | 0065b7 | ca          |                 dex                  
1960:000 | DONE ins | na 16 16 | 0065b8 | ca          |                 dex                  
1961:000 | DONE ins | na 16 16 | 0065b9 | ca          |                 dex                  
1962:000 | DONE ins | na 16 16 | 0065ba | ca          |                 dex                  
1963:000 | DONE wsp | na 16 16 |        |             |
1964:000 | DONE ins | na 16 16 | 0065bb | 7a          |                 ply                  restore old TOS as 3OS
1965:000 | DONE ins | na 16 16 | 0065bc | 94 02       |                 sty.dx 02            
1966:000 | DONE wsp | na 16 16 |        |             |
1967:000 | DONE ins | na 16 16 | 0065be | a5 0c       |                 lda.d 00020c         
1968:000 | DONE ins | na 16 16 | 0065c0 | 18          |                 clc                  
1969:000 | DONE ins | na 16 16 | 0065c1 | 65 0e       |                 adc.d 00020e         
1970:000 | DONE ins | na 16 16 | 0065c3 | 95 00       |                 sta.dx 00            Address as NOS
1971:000 | DONE wsp | na 16 16 |        |             |
1972:000 | DONE ins | na 16 16 | 0065c5 | a0 00 00    |                 ldy.# 0000           TOS
1973:000 | DONE wsp | na 16 16 |        |             |
1974:000 | DONE ins | na 16 16 | 0065c8 | 60          |                 rts                  don't have to go through PARSE
1975:000 | DONE wsp | na 16 16 |        |             |
1976:000 | DONE lbl | na 16 16 | 0065c9 |             | parse-name_found                     
1977:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1978:000 | DONE ins | na 16 16 | 0065c9 | c2 20       |                 rep 20               
1978:001 | DONE ctl | na 16 16 |        |             |         .!a16
1979:000 | DONE ins | na 16 16 | 0065cb | 84 12       |                 sty.d 000212         new >IN
1980:000 | DONE wsp | na 16 16 |        |             |
1981:000 | DONE ins | na 16 16 | 0065cd | 7a          |                 ply                  recover TOS
1982:000 | DONE ins | na 16 16 | 0065ce | ca          |                 dex                  
1983:000 | DONE ins | na 16 16 | 0065cf | ca          |                 dex                  
1984:000 | DONE ins | na 16 16 | 0065d0 | 94 00       |                 sty.dx 00            
1985:000 | DONE wsp | na 16 16 |        |             |
1986:000 | DONE ins | na 16 16 | 0065d2 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
1987:000 | DONE wsp | na 16 16 |        |             |
1988:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
1989:000 | DONE wsp | na 16 16 |        |             |
1990:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1991:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
1992:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
1993:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
1994:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
1995:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
1996:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
1997:000 | DONE cmt | na 16 16 |        |             | ;
1998:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
1999:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
2000:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
2001:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
2002:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
2003:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
2004:000 | DONE cmt | na 16 16 |        |             | ;
2005:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
2006:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
2007:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
2008:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
2009:000 | DONE lbl | na 16 16 | 0065d5 |             | xt_parse                             
2010:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2011:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2012:000 | DONE ins | na 16 16 | 0065d5 | 84 16       |                 sty.d 000216         save delimiter, char is LSB
2013:000 | DONE wsp | na 16 16 |        |             |
2014:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
2015:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
2016:000 | DONE cmt | na 16 16 |        |             |                 ; return
2017:000 | DONE ins | na 16 16 | 0065d7 | a5 12       |                 lda.d 000212         
2018:000 | DONE ins | na 16 16 | 0065d9 | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
2019:000 | DONE ins | na 16 16 | 0065db | 18          |                 clc                  
2020:000 | DONE ins | na 16 16 | 0065dc | 65 0c       |                 adc.d 00020c         
2021:000 | DONE wsp | na 16 16 |        |             |
2022:000 | DONE ins | na 16 16 | 0065de | ca          |                 dex                  save addr as NOS
2023:000 | DONE ins | na 16 16 | 0065df | ca          |                 dex                  
2024:000 | DONE ins | na 16 16 | 0065e0 | 95 00       |                 sta.dx 00            
2025:000 | DONE wsp | na 16 16 |        |             |
2026:000 | DONE ins | na 16 16 | 0065e2 | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
2027:000 | DONE wsp | na 16 16 |        |             |
2028:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
2029:000 | DONE ins | na 16 16 | 0065e4 | a4 12       |                 ldy.d 000212         
2030:000 | DONE ins | na 16 16 | 0065e6 | e2 20       |                 sep 20               
2030:001 | DONE ctl | na  8 16 |        |             |         .!a8
2031:000 | DONE wsp | na  8 16 |        |             |
2032:000 | DONE lbl | na  8 16 | 0065e8 |             | parse_loop                           
2033:000 | DONE ins | na  8 16 | 0065e8 | c4 0e       |                 cpy.d 00020e         check for EOL first
2034:000 | DONE ins | na  8 16 | 0065ea | f0 0d       |                 beq 0065f9           
2035:000 | DONE wsp | na  8 16 |        |             |
2036:000 | DONE ins | na  8 16 | 0065ec | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2037:000 | DONE ins | na  8 16 | 0065ee | c5 16       |                 cmp.d 000216         found delimiter?
2038:000 | DONE ins | na  8 16 | 0065f0 | f0 03       |                 beq 0065f5           
2039:000 | DONE ins | na  8 16 | 0065f2 | c8          |                 iny                  
2040:000 | DONE ins | na  8 16 | 0065f3 | 80 f3       |                 bra 0065e8           
2041:000 | DONE wsp | na  8 16 |        |             |
2042:000 | DONE lbl | na  8 16 | 0065f5 |             | parse_found_delimiter                
2043:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
2044:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
2045:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
2046:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
2047:000 | DONE ins | na  8 16 | 0065f5 | c2 20       |                 rep 20               
2047:001 | DONE ctl | na 16 16 |        |             |         .!a16
2048:000 | DONE ins | na 16 16 | 0065f7 | e6 18       |                 inc.d 000218         
2049:000 | DONE wsp | na 16 16 |        |             |
2050:000 | DONE lbl | na 16 16 | 0065f9 |             | parse_reached_eol                    
2051:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
2052:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2053:000 | DONE ins | na 16 16 | 0065f9 | c2 20       |                 rep 20               
2053:001 | DONE ctl | na 16 16 |        |             |         .!a16
2054:000 | DONE ins | na 16 16 | 0065fb | 98          |                 tya                  
2055:000 | DONE ins | na 16 16 | 0065fc | 38          |                 sec                  
2056:000 | DONE ins | na 16 16 | 0065fd | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
2057:000 | DONE ins | na 16 16 | 0065ff | 48          |                 pha                  save so we can manipulate Y
2058:000 | DONE wsp | na 16 16 |        |             |
2059:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
2060:000 | DONE ins | na 16 16 | 006600 | 98          |                 tya                  
2061:000 | DONE ins | na 16 16 | 006601 | 18          |                 clc                  
2062:000 | DONE ins | na 16 16 | 006602 | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
2063:000 | DONE ins | na 16 16 | 006604 | 85 12       |                 sta.d 000212         
2064:000 | DONE wsp | na 16 16 |        |             |
2065:000 | DONE ins | na 16 16 | 006606 | 7a          |                 ply                  length of string in TOS
2066:000 | DONE wsp | na 16 16 |        |             |
2067:000 | DONE lbl | na 16 16 | 006607 |             | z_parse-name                         
2068:000 | DONE lbl | na 16 16 | 006607 |             | z_parse                              
2068:001 | DONE ins | na 16 16 | 006607 | 60          |                 rts                  
2069:000 | DONE wsp | na 16 16 |        |             |
2070:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2071:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
2072:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
2073:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
2074:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
2075:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
2076:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
2077:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
2078:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
2079:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
2080:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
2081:000 | DONE lbl | na 16 16 | 006608 |             | xt_refill                            
2082:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2083:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2084:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
2085:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
2086:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
2087:000 | DONE ins | na 16 16 | 006608 | a5 0c       |                 lda.d 00020c         
2088:000 | DONE ins | na 16 16 | 00660a | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
2089:000 | DONE ins | na 16 16 | 00660d | 85 0c       |                 sta.d 00020c         
2090:000 | DONE wsp | na 16 16 |        |             |
2091:000 | DONE ins | na 16 16 | 00660f | a5 0e       |                 lda.d 00020e         current length is now previous length
2092:000 | DONE ins | na 16 16 | 006611 | 85 10       |                 sta.d 000210         
2093:000 | DONE wsp | na 16 16 |        |             |
2094:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
2095:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
2096:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
2097:000 | DONE ins | na 16 16 | 006613 | a5 0a       |                 lda.d 00020a         
2098:000 | DONE ins | na 16 16 | 006615 | d0 14       |                 bne 00662b           
2099:000 | DONE wsp | na 16 16 |        |             |
2100:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
2101:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
2102:000 | DONE ins | na 16 16 | 006617 | ca          |                 dex                  push Data Stack down twice
2103:000 | DONE ins | na 16 16 | 006618 | ca          |                 dex                  
2104:000 | DONE ins | na 16 16 | 006619 | 94 00       |                 sty.dx 00            
2105:000 | DONE wsp | na 16 16 |        |             |
2106:000 | DONE ins | na 16 16 | 00661b | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
2107:000 | DONE ins | na 16 16 | 00661d | ca          |                 dex                  
2108:000 | DONE ins | na 16 16 | 00661e | ca          |                 dex                  
2109:000 | DONE ins | na 16 16 | 00661f | 95 00       |                 sta.dx 00            
2110:000 | DONE wsp | na 16 16 |        |             |
2111:000 | DONE ins | na 16 16 | 006621 | a0 ff 00    |                 ldy.# 0000ff         
2112:000 | DONE wsp | na 16 16 |        |             |
2113:000 | DONE ins | na 16 16 | 006624 | 20 be 61    |                 jsr 0061be           ( addr n1 -- n2)
2114:000 | DONE wsp | na 16 16 |        |             |
2115:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
2116:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
2117:000 | DONE ins | na 16 16 | 006627 | a0 ff ff    |                 ldy.# 0ffff          
2118:000 | DONE wsp | na 16 16 |        |             |
2119:000 | DONE ins | na 16 16 | 00662a | 60          |                 rts                  
2120:000 | DONE wsp | na 16 16 |        |             |
2121:000 | DONE lbl | na 16 16 | 00662b |             | refill_src_not_kbd                   
2122:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
2123:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
2124:000 | DONE ins | na 16 16 | 00662b | 1a          |                 inc.a                
2125:000 | DONE ins | na 16 16 | 00662c | d0 06       |                 bne 006634           
2126:000 | DONE wsp | na 16 16 |        |             |
2127:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
2128:000 | DONE ins | na 16 16 | 00662e | ca          |                 dex                  
2129:000 | DONE ins | na 16 16 | 00662f | ca          |                 dex                  
2130:000 | DONE ins | na 16 16 | 006630 | 94 00       |                 sty.dx 00            
2131:000 | DONE ins | na 16 16 | 006632 | a8          |                 tay                  
2132:000 | DONE wsp | na 16 16 |        |             |
2133:000 | DONE ins | na 16 16 | 006633 | 60          |                 rts                  
2134:000 | DONE wsp | na 16 16 |        |             |
2135:000 | DONE lbl | na 16 16 | 006634 |             | refill_source_is_not_string          
2136:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
2137:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
2138:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
2139:000 | DONE ins | na 16 16 | 006634 | a9 ff 6d    |                 lda.# 006dff         
2140:000 | DONE ins | na 16 16 | 006637 | 4c ae 6b    |                 jmp 006bae           
2141:000 | DONE wsp | na 16 16 |        |             |
2142:000 | DONE lbl | na 16 16 | 00663a |             | z_refill                             
2142:001 | DONE ins | na 16 16 | 00663a | 60          |                 rts                  dummy for compiling
2143:000 | DONE wsp | na 16 16 |        |             |
2144:000 | DONE wsp | na 16 16 |        |             |
2145:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2146:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
2147:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
2148:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
2149:000 | DONE lbl | na 16 16 | 00663b |             | xt_rot                               
2150:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2151:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2152:000 | DONE ins | na 16 16 | 00663b | b5 00       |                 lda.dx 00            save b
2153:000 | DONE ins | na 16 16 | 00663d | 94 00       |                 sty.dx 00            move c to NOS
2154:000 | DONE ins | na 16 16 | 00663f | b4 02       |                 ldy.dx 02            move a to TOS
2155:000 | DONE ins | na 16 16 | 006641 | 95 02       |                 sta.dx 02            save b as 3OS
2156:000 | DONE wsp | na 16 16 |        |             |
2157:000 | DONE lbl | na 16 16 | 006643 |             | z_rot                                
2157:001 | DONE ins | na 16 16 | 006643 | 60          |                 rts                  
2158:000 | DONE wsp | na 16 16 |        |             |
2159:000 | DONE wsp | na 16 16 |        |             |
2160:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2161:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
2162:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
2163:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
2164:000 | DONE wsp | na 16 16 |        |             |
2165:000 | DONE lbl | na 16 16 | 006644 |             | xt_source                            
2166:000 | DONE ins | na 16 16 | 006644 | ca          |                 dex                  make room on Data Stack
2167:000 | DONE ins | na 16 16 | 006645 | ca          |                 dex                  
2168:000 | DONE ins | na 16 16 | 006646 | ca          |                 dex                  
2169:000 | DONE ins | na 16 16 | 006647 | ca          |                 dex                  
2170:000 | DONE ins | na 16 16 | 006648 | 94 02       |                 sty.dx 02            
2171:000 | DONE wsp | na 16 16 |        |             |
2172:000 | DONE ins | na 16 16 | 00664a | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
2173:000 | DONE ins | na 16 16 | 00664c | 95 00       |                 sta.dx 00            
2174:000 | DONE wsp | na 16 16 |        |             |
2175:000 | DONE ins | na 16 16 | 00664e | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
2176:000 | DONE wsp | na 16 16 |        |             |
2177:000 | DONE lbl | na 16 16 | 006650 |             | z_source                             
2177:001 | DONE ins | na 16 16 | 006650 | 60          |                 rts                  
2178:000 | DONE wsp | na 16 16 |        |             |
2179:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2180:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
2181:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
2182:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
2183:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
2184:000 | DONE lbl | na 16 16 | 006651 |             | xt_source-id                         
2185:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2186:000 | DONE ins | na 16 16 | 006651 | ca          |                 dex                  
2187:000 | DONE ins | na 16 16 | 006652 | ca          |                 dex                  
2188:000 | DONE ins | na 16 16 | 006653 | 94 00       |                 sty.dx 00            
2189:000 | DONE ins | na 16 16 | 006655 | a4 0a       |                 ldy.d 00020a         
2190:000 | DONE wsp | na 16 16 |        |             |
2191:000 | DONE lbl | na 16 16 | 006657 |             | z_source-id                          
2191:001 | DONE ins | na 16 16 | 006657 | 60          |                 rts                  
2192:000 | DONE wsp | na 16 16 |        |             |
2193:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2194:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
2195:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
2196:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
2197:000 | DONE lbl | na 16 16 | 006658 |             | xt_space                             
2198:000 | DONE ins | na 16 16 | 006658 | a9 20 00    |                 lda.# AscSP          
2199:000 | DONE ins | na 16 16 | 00665b | 20 36 60    |                 jsr 006036           
2200:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2201:000 | DONE wsp | na 16 16 |        |             |
2202:000 | DONE lbl | na 16 16 | 00665e |             | z_space                              
2202:001 | DONE ins | na 16 16 | 00665e | 60          |                 rts                  
2203:000 | DONE wsp | na 16 16 |        |             |
2204:000 | DONE wsp | na 16 16 |        |             |
2205:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2206:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
2207:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
2208:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
2209:000 | DONE lbl | na 16 16 | 00665f |             | xt_spaces                            
2210:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2211:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2212:000 | DONE lbl | na 16 16 | 00665f |             | @                                    
2213:000 | DONE ins | na 16 16 | 00665f | 88          |                 dey                  this also handles case u=0
2214:000 | DONE ins | na 16 16 | 006660 | 30 05       |                 bmi 006667           
2215:000 | DONE wsp | na 16 16 |        |             |
2216:000 | DONE ins | na 16 16 | 006662 | 20 58 66    |                 jsr 006658           
2217:000 | DONE ins | na 16 16 | 006665 | 80 f8       |                 bra 00665f           
2218:000 | DONE wsp | na 16 16 |        |             |
2219:000 | DONE lbl | na 16 16 | 006667 |             | spaces_done                          
2220:000 | DONE ins | na 16 16 | 006667 | b4 00       |                 ldy.dx 00            DROP
2221:000 | DONE ins | na 16 16 | 006669 | e8          |                 inx                  
2222:000 | DONE ins | na 16 16 | 00666a | e8          |                 inx                  
2223:000 | DONE wsp | na 16 16 |        |             |
2224:000 | DONE lbl | na 16 16 | 00666b |             | z_spaces                             
2224:001 | DONE ins | na 16 16 | 00666b | 60          |                 rts                  
2225:000 | DONE wsp | na 16 16 |        |             |
2226:000 | DONE wsp | na 16 16 |        |             |
2227:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2228:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
2229:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
2230:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
2231:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
2232:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
2233:000 | DONE lbl | na 16 16 | 00666c |             | xt_state                             
2234:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2235:000 | DONE ins | na 16 16 | 00666c | ca          |                 dex                  
2236:000 | DONE ins | na 16 16 | 00666d | ca          |                 dex                  
2237:000 | DONE ins | na 16 16 | 00666e | 94 00       |                 sty.dx 00            
2238:000 | DONE ins | na 16 16 | 006670 | a0 14 02    |                 ldy.# 000214         
2239:000 | DONE wsp | na 16 16 |        |             |
2240:000 | DONE lbl | na 16 16 | 006673 |             | z_state                              
2240:001 | DONE ins | na 16 16 | 006673 | 60          |                 rts                  
2241:000 | DONE wsp | na 16 16 |        |             |
2242:000 | DONE wsp | na 16 16 |        |             |
2243:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2244:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
2245:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
2246:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
2247:000 | DONE lbl | na 16 16 | 006674 |             | xt_swap                              
2248:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2249:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2250:000 | DONE ins | na 16 16 | 006674 | b5 00       |                 lda.dx 00            
2251:000 | DONE ins | na 16 16 | 006676 | 94 00       |                 sty.dx 00            
2252:000 | DONE ins | na 16 16 | 006678 | a8          |                 tay                  
2253:000 | DONE wsp | na 16 16 |        |             |
2254:000 | DONE lbl | na 16 16 | 006679 |             | z_swap                               
2254:001 | DONE ins | na 16 16 | 006679 | 60          |                 rts                  
2255:000 | DONE wsp | na 16 16 |        |             |
2256:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2257:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
2258:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
2259:000 | DONE lbl | na 16 16 | 00667a |             | xt_true                              
2260:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2261:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2262:000 | DONE ins | na 16 16 | 00667a | ca          |                 dex                  
2263:000 | DONE ins | na 16 16 | 00667b | ca          |                 dex                  
2264:000 | DONE ins | na 16 16 | 00667c | 94 00       |                 sty.dx 00            
2265:000 | DONE ins | na 16 16 | 00667e | a0 ff ff    |                 ldy.# 0ffff          
2266:000 | DONE wsp | na 16 16 |        |             |
2267:000 | DONE lbl | na 16 16 | 006681 |             | z_true                               
2267:001 | DONE ins | na 16 16 | 006681 | 60          |                 rts                  
2268:000 | DONE wsp | na 16 16 |        |             |
2269:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2270:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
2271:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
2272:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
2273:000 | DONE lbl | na 16 16 | 006682 |             | xt_tuck                              
2274:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2275:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2276:000 | DONE ins | na 16 16 | 006682 | ca          |                 dex                  
2277:000 | DONE ins | na 16 16 | 006683 | ca          |                 dex                  
2278:000 | DONE ins | na 16 16 | 006684 | b5 02       |                 lda.dx 2             
2279:000 | DONE ins | na 16 16 | 006686 | 95 00       |                 sta.dx 0             
2280:000 | DONE ins | na 16 16 | 006688 | 94 02       |                 sty.dx 2             
2281:000 | DONE wsp | na 16 16 |        |             |
2282:000 | DONE lbl | na 16 16 | 00668a |             | z_tuck                               
2282:001 | DONE ins | na 16 16 | 00668a | 60          |                 rts                  
2283:000 | DONE wsp | na 16 16 |        |             |
2284:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2285:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
2286:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
2287:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
2288:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
2289:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
2290:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
2291:000 | DONE cmt | na 16 16 |        |             | ; running.
2292:000 | DONE lbl | na 16 16 | 00668b |             | xt_type                              
2293:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2294:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2295:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
2296:000 | DONE ins | na 16 16 | 00668b | 98          |                 tya                  force flag check of TOS
2297:000 | DONE ins | na 16 16 | 00668c | f0 17       |                 beq 0066a5           
2298:000 | DONE wsp | na 16 16 |        |             |
2299:000 | DONE ins | na 16 16 | 00668e | b5 00       |                 lda.dx 00            get address from NOS
2300:000 | DONE ins | na 16 16 | 006690 | 85 16       |                 sta.d 000216         
2301:000 | DONE ins | na 16 16 | 006692 | 84 18       |                 sty.d 000218         number of chars is TOS
2302:000 | DONE ins | na 16 16 | 006694 | a0 00 00    |                 ldy.# 0000           
2303:000 | DONE ins | na 16 16 | 006697 | e2 20       |                 sep 20               
2303:001 | DONE ctl | na  8 16 |        |             |         .!a8
2304:000 | DONE lbl | na  8 16 | 006699 |             | type_loop                            
2305:000 | DONE ins | na  8 16 | 006699 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2306:000 | DONE ins | na  8 16 | 00669b | 20 36 60    |                 jsr 006036           
2307:000 | DONE ins | na  8 16 | 00669e | c8          |                 iny                  
2308:000 | DONE ins | na  8 16 | 00669f | c4 18       |                 cpy.d 000218         
2309:000 | DONE ins | na  8 16 | 0066a1 | d0 f6       |                 bne 006699           
2310:000 | DONE wsp | na  8 16 |        |             |
2311:000 | DONE ins | na  8 16 | 0066a3 | c2 20       |                 rep 20               
2311:001 | DONE ctl | na 16 16 |        |             |         .!a16
2312:000 | DONE lbl | na 16 16 | 0066a5 |             | type_done                            
2313:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
2314:000 | DONE ins | na 16 16 | 0066a5 | b4 02       |                 ldy.dx 02            
2315:000 | DONE ins | na 16 16 | 0066a7 | e8          |                 inx                  
2316:000 | DONE ins | na 16 16 | 0066a8 | e8          |                 inx                  
2317:000 | DONE ins | na 16 16 | 0066a9 | e8          |                 inx                  
2318:000 | DONE ins | na 16 16 | 0066aa | e8          |                 inx                  
2319:000 | DONE wsp | na 16 16 |        |             |
2320:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
2321:000 | DONE wsp | na 16 16 |        |             |
2322:000 | DONE lbl | na 16 16 | 0066ab |             | z_type                               
2322:001 | DONE ins | na 16 16 | 0066ab | 60          |                 rts                  
2323:000 | DONE wsp | na 16 16 |        |             |
2324:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2325:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
2326:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
2327:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
2328:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
2329:000 | DONE lbl | na 16 16 | 0066ac |             | xt_unused                            
2330:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2331:000 | DONE ins | na 16 16 | 0066ac | a9 ff 7b    |                 lda.# 007bff         
2332:000 | DONE ins | na 16 16 | 0066af | 38          |                 sec                  
2333:000 | DONE ins | na 16 16 | 0066b0 | e5 00       |                 sbc.d 000200         current compile pointer
2334:000 | DONE wsp | na 16 16 |        |             |
2335:000 | DONE ins | na 16 16 | 0066b2 | ca          |                 dex                  
2336:000 | DONE ins | na 16 16 | 0066b3 | ca          |                 dex                  
2337:000 | DONE ins | na 16 16 | 0066b4 | 94 00       |                 sty.dx 00            
2338:000 | DONE wsp | na 16 16 |        |             |
2339:000 | DONE ins | na 16 16 | 0066b6 | a8          |                 tay                  
2340:000 | DONE wsp | na 16 16 |        |             |
2341:000 | DONE lbl | na 16 16 | 0066b7 |             | z_unused                             
2341:001 | DONE ins | na 16 16 | 0066b7 | 60          |                 rts                  
2342:000 | DONE wsp | na 16 16 |        |             |
2343:000 | DONE wsp | na 16 16 |        |             |
2344:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2345:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
2346:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
2347:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
2348:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
2349:000 | DONE lbl | na 16 16 | 0066b8 |             | xt_variable                          
2350:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
2351:000 | DONE ins | na 16 16 | 0066b8 | 20 1b 63    |                 jsr 00631b           
2352:000 | DONE wsp | na 16 16 |        |             |
2353:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
2354:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
2355:000 | DONE ins | na 16 16 | 0066bb | a9 00 00    |                 lda.# 0000           
2356:000 | DONE ins | na 16 16 | 0066be | 92 00       |                 sta.di 000200        STA (CP)
2357:000 | DONE wsp | na 16 16 |        |             |
2358:000 | DONE ins | na 16 16 | 0066c0 | e6 00       |                 inc.d 000200         direct COMMA
2359:000 | DONE ins | na 16 16 | 0066c2 | e6 00       |                 inc.d 000200         
2360:000 | DONE wsp | na 16 16 |        |             |
2361:000 | DONE lbl | na 16 16 | 0066c4 |             | z_variable                           
2361:001 | DONE ins | na 16 16 | 0066c4 | 60          |                 rts                  
2362:000 | DONE wsp | na 16 16 |        |             |
2363:000 | DONE wsp | na 16 16 |        |             |
2364:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2365:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
2366:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
2367:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
2368:000 | DONE lbl | na 16 16 | 0066c5 |             | xt_words                             
2369:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2370:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2371:000 | DONE ins | na 16 16 | 0066c5 | 20 14 63    |                 jsr 006314           start on next line, this is a style choice
2372:000 | DONE wsp | na 16 16 |        |             |
2373:000 | DONE ins | na 16 16 | 0066c8 | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
2374:000 | DONE ins | na 16 16 | 0066ca | 48          |                 pha                  
2375:000 | DONE wsp | na 16 16 |        |             |
2376:000 | DONE ins | na 16 16 | 0066cb | ca          |                 dex                  create room on TOS
2377:000 | DONE ins | na 16 16 | 0066cc | ca          |                 dex                  
2378:000 | DONE ins | na 16 16 | 0066cd | 94 00       |                 sty.dx 00            
2379:000 | DONE wsp | na 16 16 |        |             |
2380:000 | DONE lbl | na 16 16 | 0066cf |             | words_loop                           
2381:000 | DONE ins | na 16 16 | 0066cf | a8          |                 tay                  ( nt )
2382:000 | DONE ins | na 16 16 | 0066d0 | 20 61 65    |                 jsr 006561           ( nt -- addr u )
2383:000 | DONE ins | na 16 16 | 0066d3 | 20 8b 66    |                 jsr 00668b           ( addr u -- )
2384:000 | DONE ins | na 16 16 | 0066d6 | 20 58 66    |                 jsr 006658           
2385:000 | DONE wsp | na 16 16 |        |             |
2386:000 | DONE ins | na 16 16 | 0066d9 | 68          |                 pla                  get back first entry in Dictionary
2387:000 | DONE wsp | na 16 16 |        |             |
2388:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
2389:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
2390:000 | DONE ins | na 16 16 | 0066da | 1a          |                 inc.a                
2391:000 | DONE ins | na 16 16 | 0066db | 1a          |                 inc.a                
2392:000 | DONE wsp | na 16 16 |        |             |
2393:000 | DONE ins | na 16 16 | 0066dc | ca          |                 dex                  
2394:000 | DONE ins | na 16 16 | 0066dd | ca          |                 dex                  
2395:000 | DONE ins | na 16 16 | 0066de | 94 00       |                 sty.dx 00            
2396:000 | DONE wsp | na 16 16 |        |             |
2397:000 | DONE ins | na 16 16 | 0066e0 | a8          |                 tay                  
2398:000 | DONE ins | na 16 16 | 0066e1 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2399:000 | DONE ins | na 16 16 | 0066e4 | 48          |                 pha                  
2400:000 | DONE ins | na 16 16 | 0066e5 | d0 e8       |                 bne 0066cf           zero entry signals end of Dictionary
2401:000 | DONE wsp | na 16 16 |        |             |
2402:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
2403:000 | DONE ins | na 16 16 | 0066e7 | 68          |                 pla                  balance MPU stack, value discarded
2404:000 | DONE wsp | na 16 16 |        |             |
2405:000 | DONE ins | na 16 16 | 0066e8 | b4 00       |                 ldy.dx 00            
2406:000 | DONE ins | na 16 16 | 0066ea | e8          |                 inx                  
2407:000 | DONE ins | na 16 16 | 0066eb | e8          |                 inx                  
2408:000 | DONE wsp | na 16 16 |        |             |
2409:000 | DONE lbl | na 16 16 | 0066ec |             | z_words                              
2409:001 | DONE ins | na 16 16 | 0066ec | 60          |                 rts                  
2410:000 | DONE wsp | na 16 16 |        |             |
2411:000 | DONE wsp | na 16 16 |        |             |
2412:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2413:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
2414:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
2415:000 | DONE lbl | na 16 16 | 0066ed |             | xt_xor                               
2416:000 | DONE ins | na 16 16 | 0066ed | 98          |                 tya                  
2417:000 | DONE ins | na 16 16 | 0066ee | 55 00       |                 eor.dx 00            
2418:000 | DONE ins | na 16 16 | 0066f0 | a8          |                 tay                  
2419:000 | DONE wsp | na 16 16 |        |             |
2420:000 | DONE ins | na 16 16 | 0066f1 | e8          |                 inx                  
2421:000 | DONE ins | na 16 16 | 0066f2 | e8          |                 inx                  
2422:000 | DONE wsp | na 16 16 |        |             |
2423:000 | DONE lbl | na 16 16 | 0066f3 |             | z_xor                                
2423:001 | DONE ins | na 16 16 | 0066f3 | 60          |                 rts                  
2424:000 | DONE wsp | na 16 16 |        |             |
2425:000 | DONE wsp | na 16 16 |        |             |
2426:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2427:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
2428:000 | DONE wsp | na 16 16 |        |             |
2429:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
2429:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2429:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
2429:003 | DONE cmt | na 16 16 |        |             | ; This version: 17. Feb 2017
2429:004 | DONE wsp | na 16 16 |        |             |
2429:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
2429:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
2429:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
2429:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
2429:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
2429:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
2429:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
2429:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
2429:013 | DONE cmt | na 16 16 |        |             | ;
2429:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
2429:015 | DONE cmt | na 16 16 |        |             | ;
2429:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
2429:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
2429:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
2429:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
2429:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
2429:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
2429:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
2429:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
2429:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
2429:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
2429:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
2429:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
2429:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2429:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
2429:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2429:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
2429:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
2429:033 | DONE wsp | na 16 16 |        |             |
2429:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
2429:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
2429:036 | DONE cmt | na 16 16 |        |             | ;
2429:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
2429:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
2429:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
2429:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
2429:041 | DONE wsp | na 16 16 |        |             |
2429:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
2429:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
2429:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
2429:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
2429:046 | DONE wsp | na 16 16 |        |             |
2429:047 | DONE lbl | na 16 16 | 0066f4 |             | nt_bye                               
2429:048 | DONE dir | na 16 16 | 0066f4 | (1 bytes)   |         .byte 03                     length of word string
2429:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
2429:049 | DONE dir | na 16 16 | 0066f5 | (1 bytes)   |         .byte { PW + NC }            status byte
2429:049 | DONE dir | na 16 16 |        |             |                 09                       --  	
2429:050 | DONE dir | na 16 16 | 0066f6 | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
2429:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
2429:051 | DONE dir | na 16 16 | 0066f8 | (2 bytes)   |         .word 006289                 start of code, the xt of this word
2429:051 | DONE dir | na 16 16 |        |             |                 89 62                    --  . b
2429:052 | DONE dir | na 16 16 | 0066fa | (2 bytes)   |         .word 00628c                 end of code (points to RTS)
2429:052 | DONE dir | na 16 16 |        |             |                 8c 62                    --  . b
2429:053 | DONE dir | na 16 16 | 0066fc | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
2429:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
2429:054 | DONE wsp | na 16 16 |        |             |
2429:055 | DONE lbl | na 16 16 | 0066ff |             | nt_cold                              
2429:056 | DONE dir | na 16 16 | 0066ff | (2 bytes)   |         .byte 4, 00                  
2429:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2429:057 | DONE dir | na 16 16 | 006701 | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
2429:057 | DONE dir | na 16 16 |        |             |                 f4 66 63 60 de 60        --  . f c ` . `
2429:058 | DONE dir | na 16 16 | 006707 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
2429:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
2429:059 | DONE wsp | na 16 16 |        |             |
2429:060 | DONE lbl | na 16 16 | 00670b |             | nt_words                             
2429:061 | DONE dir | na 16 16 | 00670b | (2 bytes)   |         .byte 5, { PW + NC }         
2429:061 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2429:062 | DONE dir | na 16 16 | 00670d | (6 bytes)   |         .word nt_cold, xt_words, 0066ec 
2429:062 | DONE dir | na 16 16 |        |             |                 ff 66 c5 66 ec 66        --  . f . f . f
2429:063 | DONE dir | na 16 16 | 006713 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
2429:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
2429:064 | DONE wsp | na 16 16 |        |             |
2429:065 | DONE lbl | na 16 16 | 006718 |             | nt_dump                              
2429:066 | DONE dir | na 16 16 | 006718 | (2 bytes)   |         .byte 4, { PW + NC }         
2429:066 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:067 | DONE dir | na 16 16 | 00671a | (6 bytes)   |         .word nt_words, xt_dump, 00645d 
2429:067 | DONE dir | na 16 16 |        |             |                 0b 67 37 64 5d 64        --   g 7 d ] d
2429:068 | DONE dir | na 16 16 | 006720 | (4 bytes)   |         .byte 64, 75, 6d, 70         
2429:068 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
2429:069 | DONE wsp | na 16 16 |        |             |
2429:070 | DONE lbl | na 16 16 | 006724 |             | nt_bell                              
2429:071 | DONE dir | na 16 16 | 006724 | (2 bytes)   |         .byte 4, { PW + NC }         
2429:071 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:072 | DONE dir | na 16 16 | 006726 | (6 bytes)   |         .word nt_dump, xt_bell, 006280 
2429:072 | DONE dir | na 16 16 |        |             |                 18 67 7a 62 80 62        --  . g z b . b
2429:073 | DONE dir | na 16 16 | 00672c | (4 bytes)   |         .byte 62, 65, 6c, 6c         
2429:073 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
2429:074 | DONE wsp | na 16 16 |        |             |
2429:075 | DONE lbl | na 16 16 | 006730 |             | nt_decimal                           
2429:076 | DONE dir | na 16 16 | 006730 | (2 bytes)   |         .byte 7, { PW + NC }         
2429:076 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2429:077 | DONE dir | na 16 16 | 006732 | (6 bytes)   |         .word nt_bell, xt_decimal, 006393 
2429:077 | DONE dir | na 16 16 |        |             |                 24 67 8e 63 93 63        --  $ g . c . c
2429:078 | DONE dir | na 16 16 | 006738 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
2429:078 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
2429:079 | DONE wsp | na 16 16 |        |             |
2429:080 | DONE lbl | na 16 16 | 00673f |             | nt_hex                               
2429:081 | DONE dir | na 16 16 | 00673f | (2 bytes)   |         .byte 3, { PW + NC }         
2429:081 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2429:082 | DONE dir | na 16 16 | 006741 | (6 bytes)   |         .word nt_decimal, xt_hex, 006512 
2429:082 | DONE dir | na 16 16 |        |             |                 30 67 0d 65 12 65        --  0 g  e . e
2429:083 | DONE dir | na 16 16 | 006747 | (3 bytes)   |         .byte 68, 65, 78             
2429:083 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
2429:084 | DONE wsp | na 16 16 |        |             |
2429:085 | DONE lbl | na 16 16 | 00674a |             | nt_unused                            
2429:086 | DONE dir | na 16 16 | 00674a | (2 bytes)   |         .byte 6, { PW + NC }         
2429:086 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2429:087 | DONE dir | na 16 16 | 00674c | (6 bytes)   |         .word nt_hex, xt_unused, 0066b7 
2429:087 | DONE dir | na 16 16 |        |             |                 3f 67 ac 66 b7 66        --  ? g . f . f
2429:088 | DONE dir | na 16 16 | 006752 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
2429:088 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
2429:089 | DONE wsp | na 16 16 |        |             |
2429:090 | DONE lbl | na 16 16 | 006758 |             | nt_page                              
2429:091 | DONE dir | na 16 16 | 006758 | (2 bytes)   |         .byte 4, { PW + NC }         
2429:091 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:092 | DONE dir | na 16 16 | 00675a | (6 bytes)   |         .word nt_unused, xt_page, 0065a2 
2429:092 | DONE dir | na 16 16 |        |             |                 4a 67 96 65 a2 65        --  J g . e . e
2429:093 | DONE dir | na 16 16 | 006760 | (4 bytes)   |         .byte 70, 61, 67, 65         
2429:093 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
2429:094 | DONE wsp | na 16 16 |        |             |
2429:095 | DONE lbl | na 16 16 | 006764 |             | nt_count                             
2429:096 | DONE dir | na 16 16 | 006764 | (2 bytes)   |         .byte 5, { NC + PW }         
2429:096 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2429:097 | DONE dir | na 16 16 | 006766 | (6 bytes)   |         .word nt_page, xt_count, 006313 
2429:097 | DONE dir | na 16 16 |        |             |                 58 67 05 63 13 63        --  X g . c . c
2429:098 | DONE dir | na 16 16 | 00676c | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
2429:098 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
2429:099 | DONE wsp | na 16 16 |        |             |
2429:100 | DONE lbl | na 16 16 | 006771 |             | nt_abort                             
2429:101 | DONE dir | na 16 16 | 006771 | (2 bytes)   |         .byte 5, 00                  TODO check flags
2429:101 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2429:102 | DONE dir | na 16 16 | 006773 | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
2429:102 | DONE dir | na 16 16 |        |             |                 64 67 97 60 de 60        --  d g . ` . `
2429:103 | DONE dir | na 16 16 | 006779 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
2429:103 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
2429:104 | DONE wsp | na 16 16 |        |             |
2429:105 | DONE lbl | na 16 16 | 00677e |             | nt_parse                             
2429:106 | DONE dir | na 16 16 | 00677e | (2 bytes)   |         .byte 5, 00                  
2429:106 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2429:107 | DONE dir | na 16 16 | 006780 | (6 bytes)   |         .word nt_abort, xt_parse, 006607 
2429:107 | DONE dir | na 16 16 |        |             |                 71 67 d5 65 07 66        --  q g . e . f
2429:108 | DONE dir | na 16 16 | 006786 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
2429:108 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
2429:109 | DONE wsp | na 16 16 |        |             |
2429:110 | DONE lbl | na 16 16 | 00678b |             | nt_quit                              
2429:111 | DONE dir | na 16 16 | 00678b | (2 bytes)   |         .byte 4, 00                  
2429:111 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2429:112 | DONE dir | na 16 16 | 00678d | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
2429:112 | DONE dir | na 16 16 |        |             |                 7e 67 9f 60 de 60        --  ~ g . ` . `
2429:113 | DONE dir | na 16 16 | 006793 | (4 bytes)   |         .byte 71, 75, 69, 74         
2429:113 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
2429:114 | DONE wsp | na 16 16 |        |             |
2429:115 | DONE lbl | na 16 16 | 006797 |             | nt_question                          
2429:116 | DONE dir | na 16 16 | 006797 | (2 bytes)   |         .byte 1, { PW + NC }         
2429:116 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:117 | DONE dir | na 16 16 | 006799 | (6 bytes)   |         .word nt_quit, xt_question, 006134 
2429:117 | DONE dir | na 16 16 |        |             |                 8b 67 2e 61 34 61        --  . g . a 4 a
2429:118 | DONE dir | na 16 16 | 00679f | (1 bytes)   |         .byte 3f                     
2429:118 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
2429:119 | DONE wsp | na 16 16 |        |             |
2429:120 | DONE lbl | na 16 16 | 0067a0 |             | nt_name-int                          
2429:121 | DONE dir | na 16 16 | 0067a0 | (2 bytes)   |         .byte 8, { PW + NC }         
2429:121 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2429:122 | DONE dir | na 16 16 | 0067a2 | (6 bytes)   |         .word nt_question, xt_name-int, 006560 
2429:122 | DONE dir | na 16 16 |        |             |                 97 67 58 65 60 65        --  . g X e ` e
2429:123 | DONE dir | na 16 16 | 0067a8 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
2429:123 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
2429:123 | DONE dir | na 16 16 |        |             |                                          -- 
2429:124 | DONE wsp | na 16 16 |        |             |
2429:125 | DONE lbl | na 16 16 | 0067b0 |             | nt_cr                                
2429:126 | DONE dir | na 16 16 | 0067b0 | (2 bytes)   |         .byte 2, { PW + NC }         
2429:126 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2429:127 | DONE dir | na 16 16 | 0067b2 | (6 bytes)   |         .word nt_name-int, xt_cr, 00631a 
2429:127 | DONE dir | na 16 16 |        |             |                 a0 67 14 63 1a 63        --  . g . c . c
2429:128 | DONE dir | na 16 16 | 0067b8 | (2 bytes)   |         .byte 63, 72                 
2429:128 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
2429:129 | DONE wsp | na 16 16 |        |             |
2429:130 | DONE lbl | na 16 16 | 0067ba |             | nt_bl                                
2429:131 | DONE dir | na 16 16 | 0067ba | (2 bytes)   |         .byte 2, { PW + NC }         
2429:131 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2429:132 | DONE dir | na 16 16 | 0067bc | (6 bytes)   |         .word nt_cr, xt_bl, 006288   
2429:132 | DONE dir | na 16 16 |        |             |                 b0 67 81 62 88 62        --  . g . b . b
2429:133 | DONE dir | na 16 16 | 0067c2 | (2 bytes)   |         .byte 62, 6c                 
2429:133 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
2429:134 | DONE wsp | na 16 16 |        |             |
2429:135 | DONE lbl | na 16 16 | 0067c4 |             | nt_spaces                            
2429:136 | DONE dir | na 16 16 | 0067c4 | (2 bytes)   |         .byte 6, { PW + NC }         
2429:136 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2429:137 | DONE dir | na 16 16 | 0067c6 | (6 bytes)   |         .word nt_bl, xt_spaces, 00666b 
2429:137 | DONE dir | na 16 16 |        |             |                 ba 67 5f 66 6b 66        --  . g _ f k f
2429:138 | DONE dir | na 16 16 | 0067cc | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
2429:138 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
2429:139 | DONE wsp | na 16 16 |        |             |
2429:140 | DONE lbl | na 16 16 | 0067d2 |             | nt_space                             
2429:141 | DONE dir | na 16 16 | 0067d2 | (2 bytes)   |         .byte 5, { PW + NC }         
2429:141 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2429:142 | DONE dir | na 16 16 | 0067d4 | (6 bytes)   |         .word nt_spaces, xt_space, 00665e 
2429:142 | DONE dir | na 16 16 |        |             |                 c4 67 58 66 5e 66        --  . g X f ^ f
2429:143 | DONE dir | na 16 16 | 0067da | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
2429:143 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
2429:144 | DONE wsp | na 16 16 |        |             |
2429:145 | DONE lbl | na 16 16 | 0067df |             | nt_dots                              
2429:146 | DONE dir | na 16 16 | 0067df | (2 bytes)   |         .byte 2, { PW + NC }         
2429:146 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2429:147 | DONE dir | na 16 16 | 0067e1 | (6 bytes)   |         .word nt_space, xt_dots, 006431 
2429:147 | DONE dir | na 16 16 |        |             |                 d2 67 ea 63 31 64        --  . g . c 1 d
2429:148 | DONE dir | na 16 16 | 0067e7 | (2 bytes)   |         .byte 2e, 73                 
2429:148 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
2429:149 | DONE wsp | na 16 16 |        |             |
2429:150 | DONE lbl | na 16 16 | 0067e9 |             | nt_type                              
2429:151 | DONE dir | na 16 16 | 0067e9 | (2 bytes)   |         .byte 4, 0                   
2429:151 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2429:152 | DONE dir | na 16 16 | 0067eb | (6 bytes)   |         .word nt_dots, xt_type, 0066ab 
2429:152 | DONE dir | na 16 16 |        |             |                 df 67 8b 66 ab 66        --  . g . f . f
2429:153 | DONE dir | na 16 16 | 0067f1 | (4 bytes)   |         .byte 74, 79, 70, 65         
2429:153 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
2429:154 | DONE wsp | na 16 16 |        |             |
2429:155 | DONE lbl | na 16 16 | 0067f5 |             | nt_dot                               
2429:156 | DONE dir | na 16 16 | 0067f5 | (2 bytes)   |         .byte 1, { PW + NC }         
2429:156 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:157 | DONE dir | na 16 16 | 0067f7 | (6 bytes)   |         .word nt_type, xt_dot, 0063db 
2429:157 | DONE dir | na 16 16 |        |             |                 e9 67 c6 63 db 63        --  . g . c . c
2429:158 | DONE dir | na 16 16 | 0067fd | (1 bytes)   |         .byte 2e                     
2429:158 | DONE dir | na 16 16 |        |             |                 2e                       --  .
2429:159 | DONE wsp | na 16 16 |        |             |
2429:160 | DONE lbl | na 16 16 | 0067fe |             | nt_pad                               
2429:161 | DONE dir | na 16 16 | 0067fe | (2 bytes)   |         .byte 3, { PW + NC }         
2429:161 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2429:162 | DONE dir | na 16 16 | 006800 | (6 bytes)   |         .word nt_dot, xt_pad, 006595 
2429:162 | DONE dir | na 16 16 |        |             |                 f5 67 8a 65 95 65        --  . g . e . e
2429:163 | DONE dir | na 16 16 | 006806 | (3 bytes)   |         .byte 70, 61, 64             
2429:163 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
2429:164 | DONE wsp | na 16 16 |        |             |
2429:165 | DONE lbl | na 16 16 | 006809 |             | nt_base                              
2429:166 | DONE dir | na 16 16 | 006809 | (2 bytes)   |         .byte 4, { PW + NC }         
2429:166 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:167 | DONE dir | na 16 16 | 00680b | (6 bytes)   |         .word nt_pad, xt_base, 006279 
2429:167 | DONE dir | na 16 16 |        |             |                 fe 67 72 62 79 62        --  . g r b y b
2429:168 | DONE dir | na 16 16 | 006811 | (4 bytes)   |         .byte 62, 61, 73, 65         
2429:168 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
2429:169 | DONE wsp | na 16 16 |        |             |
2429:170 | DONE lbl | na 16 16 | 006815 |             | nt_evaluate                          
2429:171 | DONE dir | na 16 16 | 006815 | (2 bytes)   |         .byte 8, { PW + NC }         
2429:171 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2429:172 | DONE dir | na 16 16 | 006817 | (6 bytes)   |         .word nt_base, xt_evaluate, 006491 
2429:172 | DONE dir | na 16 16 |        |             |                 09 68 63 64 91 64        --  	 h c d . d
2429:173 | DONE dir | na 16 16 | 00681d | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
2429:173 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
2429:173 | DONE dir | na 16 16 |        |             |                                          -- 
2429:174 | DONE wsp | na 16 16 |        |             |
2429:175 | DONE lbl | na 16 16 | 006825 |             | nt_cells                             
2429:176 | DONE dir | na 16 16 | 006825 | (2 bytes)   |         .byte 5, { PW + NC }         2* because we have 16 bit stack
2429:176 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2429:177 | DONE dir | na 16 16 | 006827 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 006186 
2429:177 | DONE dir | na 16 16 |        |             |                 15 68 83 61 86 61        --  . h . a . a
2429:178 | DONE dir | na 16 16 | 00682d | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
2429:178 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
2429:179 | DONE wsp | na 16 16 |        |             |
2429:180 | DONE lbl | na 16 16 | 006832 |             | nt_bracket-char                      
2429:181 | DONE dir | na 16 16 | 006832 | (2 bytes)   |         .byte 6, { IM + CO }         
2429:181 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
2429:182 | DONE dir | na 16 16 | 006834 | (6 bytes)   |         .word nt_cells, xt_bracket-char, 00614a 
2429:182 | DONE dir | na 16 16 |        |             |                 25 68 44 61 4a 61        --  % h D a J a
2429:183 | DONE dir | na 16 16 | 00683a | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
2429:183 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
2429:184 | DONE wsp | na 16 16 |        |             |
2429:185 | DONE lbl | na 16 16 | 006840 |             | nt_literal                           
2429:186 | DONE dir | na 16 16 | 006840 | (2 bytes)   |         .byte 7, { IM + CO }         
2429:186 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
2429:187 | DONE dir | na 16 16 | 006842 | (6 bytes)   |         .word nt_bracket-char, xt_literal, 006524 
2429:187 | DONE dir | na 16 16 |        |             |                 32 68 13 65 24 65        --  2 h . e $ e
2429:188 | DONE dir | na 16 16 | 006848 | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
2429:188 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
2429:189 | DONE wsp | na 16 16 |        |             |
2429:190 | DONE lbl | na 16 16 | 00684f |             | nt_compile-only                      
2429:191 | DONE dir | na 16 16 | 00684f | (2 bytes)   |         .byte 0c, { PW + NC }        
2429:191 | DONE dir | na 16 16 |        |             |                 0c 09                    --   	
2429:192 | DONE dir | na 16 16 | 006851 | (6 bytes)   |         .word nt_literal, xt_compile-only, 0062d7 
2429:192 | DONE dir | na 16 16 |        |             |                 40 68 cf 62 d7 62        --  @ h . b . b
2429:193 | DONE dir | na 16 16 | 006857 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
2429:193 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
2429:193 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
2429:194 | DONE wsp | na 16 16 |        |             |
2429:195 | DONE lbl | na 16 16 | 006863 |             | nt_immediate                         
2429:196 | DONE dir | na 16 16 | 006863 | (2 bytes)   |         .byte 9, { PW + NC }         
2429:196 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2429:197 | DONE dir | na 16 16 | 006865 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 0064ff 
2429:197 | DONE dir | na 16 16 |        |             |                 4f 68 f7 64 ff 64        --  O h . d . d
2429:198 | DONE dir | na 16 16 | 00686b | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
2429:198 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
2429:198 | DONE dir | na 16 16 |        |             |                 65                       --  e
2429:199 | DONE wsp | na 16 16 |        |             |
2429:200 | DONE lbl | na 16 16 | 006874 |             | nt_rightbracket                      
2429:201 | DONE dir | na 16 16 | 006874 | (2 bytes)   |         .byte 1, { PW + NC }         
2429:201 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:202 | DONE dir | na 16 16 | 006876 | (6 bytes)   |         .word nt_immediate, xt_rightbracket, 006153 
2429:202 | DONE dir | na 16 16 |        |             |                 63 68 4e 61 53 61        --  c h N a S a
2429:203 | DONE dir | na 16 16 | 00687c | (1 bytes)   |         .byte 5d                     
2429:203 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
2429:204 | DONE wsp | na 16 16 |        |             |
2429:205 | DONE lbl | na 16 16 | 00687d |             | nt_leftbracket                       
2429:206 | DONE dir | na 16 16 | 00687d | (2 bytes)   |         .byte 1, { IM + CO }         
2429:206 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2429:207 | DONE dir | na 16 16 | 00687f | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 00614d 
2429:207 | DONE dir | na 16 16 |        |             |                 74 68 4b 61 4d 61        --  t h K a M a
2429:208 | DONE dir | na 16 16 | 006885 | (1 bytes)   |         .byte 5b                     
2429:208 | DONE dir | na 16 16 |        |             |                 5b                       --  [
2429:209 | DONE wsp | na 16 16 |        |             |
2429:210 | DONE lbl | na 16 16 | 006886 |             | nt_compilecomma                      
2429:211 | DONE dir | na 16 16 | 006886 | (2 bytes)   |         .byte 08, { CO }             
2429:211 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
2429:212 | DONE dir | na 16 16 | 006888 | (6 bytes)   |         .word nt_leftbracket, xt_compilecomma, 0062ea 
2429:212 | DONE dir | na 16 16 |        |             |                 7d 68 d8 62 ea 62        --  } h . b . b
2429:213 | DONE dir | na 16 16 | 00688e | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
2429:213 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
2429:213 | DONE dir | na 16 16 |        |             |                                          -- 
2429:214 | DONE wsp | na 16 16 |        |             |
2429:215 | DONE lbl | na 16 16 | 006896 |             | nt_semicolon                         
2429:216 | DONE dir | na 16 16 | 006896 | (2 bytes)   |         .byte 1, { CO + IM }         
2429:216 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2429:217 | DONE dir | na 16 16 | 006898 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 00612d 
2429:217 | DONE dir | na 16 16 |        |             |                 86 68 15 61 2d 61        --  . h . a - a
2429:218 | DONE dir | na 16 16 | 00689e | (1 bytes)   |         .byte 3b                     
2429:218 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
2429:219 | DONE wsp | na 16 16 |        |             |
2429:220 | DONE lbl | na 16 16 | 00689f |             | nt_colon                             
2429:221 | DONE dir | na 16 16 | 00689f | (2 bytes)   |         .byte 1, { NC }              
2429:221 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
2429:222 | DONE dir | na 16 16 | 0068a1 | (6 bytes)   |         .word nt_semicolon, xt_colon, 006114 
2429:222 | DONE dir | na 16 16 |        |             |                 96 68 f3 60 14 61        --  . h . ` . a
2429:223 | DONE dir | na 16 16 | 0068a7 | (1 bytes)   |         .byte 3a                     
2429:223 | DONE dir | na 16 16 |        |             |                 3a                       --  :
2429:224 | DONE wsp | na 16 16 |        |             |
2429:225 | DONE lbl | na 16 16 | 0068a8 |             | nt_allot                             
2429:226 | DONE dir | na 16 16 | 0068a8 | (2 bytes)   |         .byte 5, { PW + NC }         
2429:226 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2429:227 | DONE dir | na 16 16 | 0068aa | (6 bytes)   |         .word nt_colon, xt_allot, 00626a 
2429:227 | DONE dir | na 16 16 |        |             |                 9f 68 42 62 6a 62        --  . h B b j b
2429:228 | DONE dir | na 16 16 | 0068b0 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
2429:228 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
2429:229 | DONE wsp | na 16 16 |        |             |
2429:230 | DONE lbl | na 16 16 | 0068b5 |             | nt_does                              
2429:231 | DONE dir | na 16 16 | 0068b5 | (2 bytes)   |         .byte 5, { IM + CO }         
2429:231 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
2429:232 | DONE dir | na 16 16 | 0068b7 | (6 bytes)   |         .word nt_allot, xt_does, 0063af 
2429:232 | DONE dir | na 16 16 |        |             |                 a8 68 a3 63 af 63        --  . h . c . c
2429:233 | DONE dir | na 16 16 | 0068bd | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
2429:233 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
2429:234 | DONE wsp | na 16 16 |        |             |
2429:235 | DONE lbl | na 16 16 | 0068c2 |             | nt_create                            
2429:236 | DONE dir | na 16 16 | 0068c2 | (2 bytes)   |         .byte 6, { PW + NC }         
2429:236 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2429:237 | DONE dir | na 16 16 | 0068c4 | (6 bytes)   |         .word nt_does, xt_create, 00638d 
2429:237 | DONE dir | na 16 16 |        |             |                 b5 68 1b 63 8d 63        --  . h . c . c
2429:238 | DONE dir | na 16 16 | 0068ca | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
2429:238 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
2429:239 | DONE wsp | na 16 16 |        |             |
2429:240 | DONE lbl | na 16 16 | 0068d0 |             | nt_name-string                       
2429:241 | DONE dir | na 16 16 | 0068d0 | (2 bytes)   |         .byte 0b, { PW + NC }        
2429:241 | DONE dir | na 16 16 |        |             |                 0b 09                    --   	
2429:242 | DONE dir | na 16 16 | 0068d2 | (6 bytes)   |         .word nt_create, xt_name-string, 006571 
2429:242 | DONE dir | na 16 16 |        |             |                 c2 68 61 65 71 65        --  . h a e q e
2429:243 | DONE dir | na 16 16 | 0068d8 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
2429:243 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
2429:243 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
2429:244 | DONE wsp | na 16 16 |        |             |
2429:245 | DONE lbl | na 16 16 | 0068e3 |             | nt_2dup                              
2429:246 | DONE dir | na 16 16 | 0068e3 | (2 bytes)   |         .byte 4, { PW + NC }         
2429:246 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:247 | DONE dir | na 16 16 | 0068e5 | (6 bytes)   |         .word nt_name-string, xt_2dup, 006198 
2429:247 | DONE dir | na 16 16 |        |             |                 d0 68 8e 61 98 61        --  . h . a . a
2429:248 | DONE dir | na 16 16 | 0068eb | (4 bytes)   |         .byte 32, 64, 75, 70         
2429:248 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
2429:249 | DONE wsp | na 16 16 |        |             |
2429:250 | DONE lbl | na 16 16 | 0068ef |             | nt_abs                               
2429:251 | DONE dir | na 16 16 | 0068ef | (2 bytes)   |         .byte 3, { PW + NC }         
2429:251 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2429:252 | DONE dir | na 16 16 | 0068f1 | (6 bytes)   |         .word nt_2dup, xt_abs, 0061bd 
2429:252 | DONE dir | na 16 16 |        |             |                 e3 68 b5 61 bd 61        --  . h . a . a
2429:253 | DONE dir | na 16 16 | 0068f7 | (3 bytes)   |         .byte 61, 62, 73             
2429:253 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
2429:254 | DONE wsp | na 16 16 |        |             |
2429:255 | DONE lbl | na 16 16 | 0068fa |             | nt_state                             
2429:256 | DONE dir | na 16 16 | 0068fa | (2 bytes)   |         .byte 5, { PW + NC }         
2429:256 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2429:257 | DONE dir | na 16 16 | 0068fc | (6 bytes)   |         .word nt_abs, xt_state, 006673 
2429:257 | DONE dir | na 16 16 |        |             |                 ef 68 6c 66 73 66        --  . h l f s f
2429:258 | DONE dir | na 16 16 | 006902 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
2429:258 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
2429:259 | DONE wsp | na 16 16 |        |             |
2429:260 | DONE lbl | na 16 16 | 006907 |             | nt_to-in                             
2429:261 | DONE dir | na 16 16 | 006907 | (2 bytes)   |         .byte 3, { PW + NC }         
2429:261 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2429:262 | DONE dir | na 16 16 | 006909 | (6 bytes)   |         .word nt_state, xt_to-in, 0060e6 
2429:262 | DONE dir | na 16 16 |        |             |                 fa 68 df 60 e6 60        --  . h . ` . `
2429:263 | DONE dir | na 16 16 | 00690f | (3 bytes)   |         .byte 3e, 69, 6e             
2429:263 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
2429:264 | DONE wsp | na 16 16 |        |             |
2429:265 | DONE lbl | na 16 16 | 006912 |             | nt_source                            
2429:266 | DONE dir | na 16 16 | 006912 | (2 bytes)   |         .byte 6, { PW + NC }         
2429:266 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2429:267 | DONE dir | na 16 16 | 006914 | (6 bytes)   |         .word nt_to-in, xt_source, 006650 
2429:267 | DONE dir | na 16 16 |        |             |                 07 69 44 66 50 66        --  . i D f P f
2429:268 | DONE dir | na 16 16 | 00691a | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
2429:268 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
2429:269 | DONE wsp | na 16 16 |        |             |
2429:270 | DONE lbl | na 16 16 | 006920 |             | nt_depth                             
2429:271 | DONE dir | na 16 16 | 006920 | (2 bytes)   |         .byte 5, { PW + NC }         
2429:271 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2429:272 | DONE dir | na 16 16 | 006922 | (6 bytes)   |         .word nt_source, xt_depth, 0063a2 
2429:272 | DONE dir | na 16 16 |        |             |                 12 69 94 63 a2 63        --  . i . c . c
2429:273 | DONE dir | na 16 16 | 006928 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
2429:273 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
2429:274 | DONE wsp | na 16 16 |        |             |
2429:275 | DONE lbl | na 16 16 | 00692d |             | nt_constant                          
2429:276 | DONE dir | na 16 16 | 00692d | (2 bytes)   |         .byte 8, { PW + NC }         
2429:276 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2429:277 | DONE dir | na 16 16 | 00692f | (6 bytes)   |         .word nt_depth, xt_constant, 006304 
2429:277 | DONE dir | na 16 16 |        |             |                 20 69 eb 62 04 63        --    i . b . c
2429:278 | DONE dir | na 16 16 | 006935 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
2429:278 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
2429:278 | DONE dir | na 16 16 |        |             |                                          -- 
2429:279 | DONE wsp | na 16 16 |        |             |
2429:280 | DONE lbl | na 16 16 | 00693d |             | nt_variable                          
2429:281 | DONE dir | na 16 16 | 00693d | (2 bytes)   |         .byte 8, { PW + NC }         
2429:281 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2429:282 | DONE dir | na 16 16 | 00693f | (6 bytes)   |         .word nt_constant, xt_variable, 0066c4 
2429:282 | DONE dir | na 16 16 |        |             |                 2d 69 b8 66 c4 66        --  - i . f . f
2429:283 | DONE dir | na 16 16 | 006945 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
2429:283 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
2429:283 | DONE dir | na 16 16 |        |             |                                          -- 
2429:284 | DONE wsp | na 16 16 |        |             |
2429:285 | DONE lbl | na 16 16 | 00694d |             | nt_tick                              
2429:286 | DONE dir | na 16 16 | 00694d | (2 bytes)   |         .byte 1, { PW + NC }         
2429:286 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:287 | DONE dir | na 16 16 | 00694f | (6 bytes)   |         .word nt_variable, xt_tick, 0061b4 
2429:287 | DONE dir | na 16 16 |        |             |                 3d 69 99 61 b4 61        --  = i . a . a
2429:288 | DONE dir | na 16 16 | 006955 | (1 bytes)   |         .byte 27                     hex for "'"
2429:288 | DONE dir | na 16 16 |        |             |                 27                       --  '
2429:289 | DONE wsp | na 16 16 |        |             |
2429:290 | DONE lbl | na 16 16 | 006956 |             | nt_min                               
2429:291 | DONE dir | na 16 16 | 006956 | (2 bytes)   |         .byte 3, { PW + NC }         
2429:291 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2429:292 | DONE dir | na 16 16 | 006958 | (6 bytes)   |         .word nt_tick, xt_min, 006557 
2429:292 | DONE dir | na 16 16 |        |             |                 4d 69 45 65 57 65        --  M i E e W e
2429:293 | DONE dir | na 16 16 | 00695e | (3 bytes)   |         .byte 6d, 69, 6e             
2429:293 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
2429:294 | DONE wsp | na 16 16 |        |             |
2429:295 | DONE lbl | na 16 16 | 006961 |             | nt_max                               
2429:296 | DONE dir | na 16 16 | 006961 | (2 bytes)   |         .byte 3, { PW + NC }         
2429:296 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2429:297 | DONE dir | na 16 16 | 006963 | (6 bytes)   |         .word nt_min, xt_max, 006544 
2429:297 | DONE dir | na 16 16 |        |             |                 56 69 32 65 44 65        --  V i 2 e D e
2429:298 | DONE dir | na 16 16 | 006969 | (3 bytes)   |         .byte 6d, 61, 78             
2429:298 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
2429:299 | DONE wsp | na 16 16 |        |             |
2429:300 | DONE lbl | na 16 16 | 00696c |             | nt_negate                            
2429:301 | DONE dir | na 16 16 | 00696c | (2 bytes)   |         .byte 6, { PW + NC }         
2429:301 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2429:302 | DONE dir | na 16 16 | 00696e | (6 bytes)   |         .word nt_max, xt_negate, 006578 
2429:302 | DONE dir | na 16 16 |        |             |                 61 69 72 65 78 65        --  a i r e x e
2429:303 | DONE dir | na 16 16 | 006974 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
2429:303 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
2429:304 | DONE wsp | na 16 16 |        |             |
2429:305 | DONE lbl | na 16 16 | 00697a |             | nt_invert                            
2429:306 | DONE dir | na 16 16 | 00697a | (2 bytes)   |         .byte 6, { PW + NC }         
2429:306 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2429:307 | DONE dir | na 16 16 | 00697c | (6 bytes)   |         .word nt_negate, xt_invert, 006505 
2429:307 | DONE dir | na 16 16 |        |             |                 6c 69 00 65 05 65        --  l i . e . e
2429:308 | DONE dir | na 16 16 | 006982 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
2429:308 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
2429:309 | DONE wsp | na 16 16 |        |             |
2429:310 | DONE lbl | na 16 16 | 006988 |             | nt_char                              
2429:311 | DONE dir | na 16 16 | 006988 | (2 bytes)   |         .byte 4, { PW + NC }         
2429:311 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:312 | DONE dir | na 16 16 | 00698a | (6 bytes)   |         .word nt_invert, xt_char, 0062ce 
2429:312 | DONE dir | na 16 16 |        |             |                 7a 69 b7 62 ce 62        --  z i . b . b
2429:313 | DONE dir | na 16 16 | 006990 | (4 bytes)   |         .byte 63, 68, 61, 72         
2429:313 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
2429:314 | DONE wsp | na 16 16 |        |             |
2429:315 | DONE lbl | na 16 16 | 006994 |             | nt_xor                               
2429:316 | DONE dir | na 16 16 | 006994 | (2 bytes)   |         .byte 3, { PW + NC }         
2429:316 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2429:317 | DONE dir | na 16 16 | 006996 | (6 bytes)   |         .word nt_char, xt_xor, 0066f3 
2429:317 | DONE dir | na 16 16 |        |             |                 88 69 ed 66 f3 66        --  . i . f . f
2429:318 | DONE dir | na 16 16 | 00699c | (3 bytes)   |         .byte 78, 6f, 72             
2429:318 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
2429:319 | DONE wsp | na 16 16 |        |             |
2429:320 | DONE lbl | na 16 16 | 00699f |             | nt_or                                
2429:321 | DONE dir | na 16 16 | 00699f | (2 bytes)   |         .byte 2, { PW + NC }         
2429:321 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2429:322 | DONE dir | na 16 16 | 0069a1 | (6 bytes)   |         .word nt_xor, xt_or, 006582  
2429:322 | DONE dir | na 16 16 |        |             |                 94 69 7c 65 82 65        --  . i | e . e
2429:323 | DONE dir | na 16 16 | 0069a7 | (2 bytes)   |         .byte 6f, 72                 
2429:323 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
2429:324 | DONE wsp | na 16 16 |        |             |
2429:325 | DONE lbl | na 16 16 | 0069a9 |             | nt_and                               
2429:326 | DONE dir | na 16 16 | 0069a9 | (2 bytes)   |         .byte 3, { PW + NC }         
2429:326 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2429:327 | DONE dir | na 16 16 | 0069ab | (6 bytes)   |         .word nt_or, xt_and, 006271  
2429:327 | DONE dir | na 16 16 |        |             |                 9f 69 6b 62 71 62        --  . i k b q b
2429:328 | DONE dir | na 16 16 | 0069b1 | (3 bytes)   |         .byte 61, 6e, 64             
2429:328 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
2429:329 | DONE wsp | na 16 16 |        |             |
2429:330 | DONE lbl | na 16 16 | 0069b4 |             | nt_c-comma                           
2429:331 | DONE dir | na 16 16 | 0069b4 | (2 bytes)   |         .byte 2, { PW + NC }         
2429:331 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2429:332 | DONE dir | na 16 16 | 0069b6 | (6 bytes)   |         .word nt_and, xt_c-comma, 00629a 
2429:332 | DONE dir | na 16 16 |        |             |                 a9 69 8d 62 9a 62        --  . i . b . b
2429:333 | DONE dir | na 16 16 | 0069bc | (2 bytes)   |         .byte 63, 2c                 
2429:333 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
2429:334 | DONE wsp | na 16 16 |        |             |
2429:335 | DONE lbl | na 16 16 | 0069be |             | nt_c-fetch                           
2429:336 | DONE dir | na 16 16 | 0069be | (2 bytes)   |         .byte 2, { PW + NC }         
2429:336 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2429:337 | DONE dir | na 16 16 | 0069c0 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 0062a6 
2429:337 | DONE dir | na 16 16 |        |             |                 b4 69 9b 62 a6 62        --  . i . b . b
2429:338 | DONE dir | na 16 16 | 0069c6 | (2 bytes)   |         .byte 63, 40                 
2429:338 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
2429:339 | DONE wsp | na 16 16 |        |             |
2429:340 | DONE lbl | na 16 16 | 0069c8 |             | nt_c-store                           
2429:341 | DONE dir | na 16 16 | 0069c8 | (2 bytes)   |         .byte 2, { PW + NC }         
2429:341 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2429:342 | DONE dir | na 16 16 | 0069ca | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0062b6 
2429:342 | DONE dir | na 16 16 |        |             |                 be 69 a7 62 b6 62        --  . i . b . b
2429:343 | DONE dir | na 16 16 | 0069d0 | (2 bytes)   |         .byte 63, 21                 
2429:343 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
2429:344 | DONE wsp | na 16 16 |        |             |
2429:345 | DONE lbl | na 16 16 | 0069d2 |             | nt_two-star                          
2429:346 | DONE dir | na 16 16 | 0069d2 | (2 bytes)   |         .byte 2, { PW + NC }         
2429:346 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2429:347 | DONE dir | na 16 16 | 0069d4 | (6 bytes)   |         .word nt_c-store, xt_two-star, 006186 
2429:347 | DONE dir | na 16 16 |        |             |                 c8 69 83 61 86 61        --  . i . a . a
2429:348 | DONE dir | na 16 16 | 0069da | (2 bytes)   |         .byte 32, 2a                 
2429:348 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
2429:349 | DONE wsp | na 16 16 |        |             |
2429:350 | DONE lbl | na 16 16 | 0069dc |             | nt_minus                             
2429:351 | DONE dir | na 16 16 | 0069dc | (2 bytes)   |         .byte 1, { PW + NC }         
2429:351 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:352 | DONE dir | na 16 16 | 0069de | (6 bytes)   |         .word nt_two-star, xt_minus, 006166 
2429:352 | DONE dir | na 16 16 |        |             |                 d2 69 5c 61 66 61        --  . i \ a f a
2429:353 | DONE dir | na 16 16 | 0069e4 | (1 bytes)   |         .byte 2d                     
2429:353 | DONE dir | na 16 16 |        |             |                 2d                       --  -
2429:354 | DONE wsp | na 16 16 |        |             |
2429:355 | DONE lbl | na 16 16 | 0069e5 |             | nt_plus                              
2429:356 | DONE dir | na 16 16 | 0069e5 | (2 bytes)   |         .byte 1, { PW + NC }         
2429:356 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:357 | DONE dir | na 16 16 | 0069e7 | (6 bytes)   |         .word nt_minus, xt_plus, 00615b 
2429:357 | DONE dir | na 16 16 |        |             |                 dc 69 54 61 5b 61        --  . i T a [ a
2429:358 | DONE dir | na 16 16 | 0069ed | (1 bytes)   |         .byte 2b                     
2429:358 | DONE dir | na 16 16 |        |             |                 2b                       --  +
2429:359 | DONE wsp | na 16 16 |        |             |
2429:360 | DONE lbl | na 16 16 | 0069ee |             | nt_one-minus                         
2429:361 | DONE dir | na 16 16 | 0069ee | (2 bytes)   |         .byte 2, { PW + NC }         
2429:361 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2429:362 | DONE dir | na 16 16 | 0069f0 | (6 bytes)   |         .word nt_plus, xt_one-minus, 006178 
2429:362 | DONE dir | na 16 16 |        |             |                 e5 69 77 61 78 61        --  . i w a x a
2429:363 | DONE dir | na 16 16 | 0069f6 | (2 bytes)   |         .byte 31, 2d                 
2429:363 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
2429:364 | DONE wsp | na 16 16 |        |             |
2429:365 | DONE lbl | na 16 16 | 0069f8 |             | nt_one-plus                          
2429:366 | DONE dir | na 16 16 | 0069f8 | (2 bytes)   |         .byte 2, { PW + NC }         
2429:366 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2429:367 | DONE dir | na 16 16 | 0069fa | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 00617a 
2429:367 | DONE dir | na 16 16 |        |             |                 ee 69 79 61 7a 61        --  . i y a z a
2429:368 | DONE dir | na 16 16 | 006a00 | (2 bytes)   |         .byte 31, 2b                 
2429:368 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
2429:369 | DONE wsp | na 16 16 |        |             |
2429:370 | DONE lbl | na 16 16 | 006a02 |             | nt_false                             
2429:371 | DONE dir | na 16 16 | 006a02 | (2 bytes)   |         .byte 5, { PW + NC }         
2429:371 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2429:372 | DONE dir | na 16 16 | 006a04 | (6 bytes)   |         .word nt_one-plus, xt_zero, 00616e 
2429:372 | DONE dir | na 16 16 |        |             |                 f8 69 67 61 6e 61        --  . i g a n a
2429:373 | DONE dir | na 16 16 | 006a0a | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
2429:373 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
2429:374 | DONE wsp | na 16 16 |        |             |
2429:375 | DONE lbl | na 16 16 | 006a0f |             | nt_true                              
2429:376 | DONE dir | na 16 16 | 006a0f | (2 bytes)   |         .byte 4, { PW + NC }         
2429:376 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:377 | DONE dir | na 16 16 | 006a11 | (6 bytes)   |         .word nt_false, xt_true, 006681 
2429:377 | DONE dir | na 16 16 |        |             |                 02 6a 7a 66 81 66        --  . j z f . f
2429:378 | DONE dir | na 16 16 | 006a17 | (4 bytes)   |         .byte 74, 72, 75, 65         
2429:378 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
2429:379 | DONE wsp | na 16 16 |        |             |
2429:380 | DONE lbl | na 16 16 | 006a1b |             | nt_two                               
2429:381 | DONE dir | na 16 16 | 006a1b | (2 bytes)   |         .byte 1, { PW + NC }         
2429:381 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:382 | DONE dir | na 16 16 | 006a1d | (6 bytes)   |         .word nt_true, xt_two, 006182 
2429:382 | DONE dir | na 16 16 |        |             |                 0f 6a 7b 61 82 61        --  . j { a . a
2429:383 | DONE dir | na 16 16 | 006a23 | (1 bytes)   |         .byte 32                     
2429:383 | DONE dir | na 16 16 |        |             |                 32                       --  2
2429:384 | DONE wsp | na 16 16 |        |             |
2429:385 | DONE lbl | na 16 16 | 006a24 |             | nt_one                               
2429:386 | DONE dir | na 16 16 | 006a24 | (2 bytes)   |         .byte 1, { PW + NC }         
2429:386 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:387 | DONE dir | na 16 16 | 006a26 | (6 bytes)   |         .word nt_two, xt_one, 006176 
2429:387 | DONE dir | na 16 16 |        |             |                 1b 6a 6f 61 76 61        --  . j o a v a
2429:388 | DONE dir | na 16 16 | 006a2c | (1 bytes)   |         .byte 31                     
2429:388 | DONE dir | na 16 16 |        |             |                 31                       --  1
2429:389 | DONE wsp | na 16 16 |        |             |
2429:390 | DONE lbl | na 16 16 | 006a2d |             | nt_zero                              
2429:391 | DONE dir | na 16 16 | 006a2d | (2 bytes)   |         .byte 1, { PW + NC }         
2429:391 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:392 | DONE dir | na 16 16 | 006a2f | (6 bytes)   |         .word nt_one, xt_zero, 00616e 
2429:392 | DONE dir | na 16 16 |        |             |                 24 6a 67 61 6e 61        --  $ j g a n a
2429:393 | DONE dir | na 16 16 | 006a35 | (1 bytes)   |         .byte 30                     
2429:393 | DONE dir | na 16 16 |        |             |                 30                       --  0
2429:394 | DONE wsp | na 16 16 |        |             |
2429:395 | DONE lbl | na 16 16 | 006a36 |             | nt_find-name                         
2429:396 | DONE dir | na 16 16 | 006a36 | (2 bytes)   |         .byte 9, 0                   
2429:396 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
2429:397 | DONE dir | na 16 16 | 006a38 | (6 bytes)   |         .word nt_zero, xt_find-name, 0064f6 
2429:397 | DONE dir | na 16 16 |        |             |                 2d 6a a0 64 f6 64        --  - j . d . d
2429:398 | DONE dir | na 16 16 | 006a3e | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
2429:398 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
2429:398 | DONE dir | na 16 16 |        |             |                 65                       --  e
2429:399 | DONE wsp | na 16 16 |        |             |
2429:400 | DONE lbl | na 16 16 | 006a47 |             | nt_refill                            
2429:401 | DONE dir | na 16 16 | 006a47 | (2 bytes)   |         .byte 6, { PW }              TODO check flags
2429:401 | DONE dir | na 16 16 |        |             |                 06 08                    --  . .
2429:402 | DONE dir | na 16 16 | 006a49 | (6 bytes)   |         .word nt_find-name, xt_refill, 00663a 
2429:402 | DONE dir | na 16 16 |        |             |                 36 6a 08 66 3a 66        --  6 j . f : f
2429:403 | DONE dir | na 16 16 | 006a4f | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
2429:403 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
2429:404 | DONE wsp | na 16 16 |        |             |
2429:405 | DONE lbl | na 16 16 | 006a55 |             | nt_parse-name                        
2429:406 | DONE dir | na 16 16 | 006a55 | (2 bytes)   |         .byte &10, 0                 
2429:406 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
2429:407 | DONE dir | na 16 16 | 006a57 | (6 bytes)   |         .word nt_refill, xt_parse-name, 006607 
2429:407 | DONE dir | na 16 16 |        |             |                 47 6a a3 65 07 66        --  G j . e . f
2429:408 | DONE dir | na 16 16 | 006a5d | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
2429:408 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
2429:408 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
2429:409 | DONE wsp | na 16 16 |        |             |
2429:410 | DONE lbl | na 16 16 | 006a67 |             | nt_source-id                         
2429:411 | DONE dir | na 16 16 | 006a67 | (2 bytes)   |         .byte 9, { PW + NC }         
2429:411 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2429:412 | DONE dir | na 16 16 | 006a69 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 006657 
2429:412 | DONE dir | na 16 16 |        |             |                 55 6a 51 66 57 66        --  U j Q f W f
2429:413 | DONE dir | na 16 16 | 006a6f | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
2429:413 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
2429:413 | DONE dir | na 16 16 |        |             |                 64                       --  d
2429:414 | DONE wsp | na 16 16 |        |             |
2429:415 | DONE lbl | na 16 16 | 006a78 |             | nt_comma                             
2429:416 | DONE dir | na 16 16 | 006a78 | (2 bytes)   |         .byte 1, { PW + NC }         
2429:416 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:417 | DONE dir | na 16 16 | 006a7a | (6 bytes)   |         .word nt_source-id, xt_comma, 0060f2 
2429:417 | DONE dir | na 16 16 |        |             |                 67 6a e7 60 f2 60        --  g j . ` . `
2429:418 | DONE dir | na 16 16 | 006a80 | (1 bytes)   |         .byte 2c                     
2429:418 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
2429:419 | DONE wsp | na 16 16 |        |             |
2429:420 | DONE lbl | na 16 16 | 006a81 |             | nt_accept                            
2429:421 | DONE dir | na 16 16 | 006a81 | (2 bytes)   |         .byte 6, 00                  TODO check flags
2429:421 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
2429:422 | DONE dir | na 16 16 | 006a83 | (6 bytes)   |         .word nt_comma, xt_accept, 006241 
2429:422 | DONE dir | na 16 16 |        |             |                 78 6a be 61 41 62        --  x j . a A b
2429:423 | DONE dir | na 16 16 | 006a89 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
2429:423 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
2429:424 | DONE wsp | na 16 16 |        |             |
2429:425 | DONE lbl | na 16 16 | 006a8f |             | nt_tuck                              
2429:426 | DONE dir | na 16 16 | 006a8f | (2 bytes)   |         .byte 4, { PW + NC }         
2429:426 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:427 | DONE dir | na 16 16 | 006a91 | (6 bytes)   |         .word nt_accept, xt_tuck, 00668a 
2429:427 | DONE dir | na 16 16 |        |             |                 81 6a 82 66 8a 66        --  . j . f . f
2429:428 | DONE dir | na 16 16 | 006a97 | (4 bytes)   |         .byte 74, 75, 63, 6b         
2429:428 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
2429:429 | DONE wsp | na 16 16 |        |             |
2429:430 | DONE lbl | na 16 16 | 006a9b |             | nt_nip                               
2429:431 | DONE dir | na 16 16 | 006a9b | (2 bytes)   |         .byte 3, { PW + NC }         
2429:431 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2429:432 | DONE dir | na 16 16 | 006a9d | (6 bytes)   |         .word nt_tuck, xt_nip, 00657b 
2429:432 | DONE dir | na 16 16 |        |             |                 8f 6a 79 65 7b 65        --  . j y e { e
2429:433 | DONE dir | na 16 16 | 006aa3 | (3 bytes)   |         .byte 6e, 69, 70             
2429:433 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
2429:434 | DONE wsp | na 16 16 |        |             |
2429:435 | DONE lbl | na 16 16 | 006aa6 |             | nt_rot                               
2429:436 | DONE dir | na 16 16 | 006aa6 | (2 bytes)   |         .byte 3, { PW + NC }         
2429:436 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2429:437 | DONE dir | na 16 16 | 006aa8 | (6 bytes)   |         .word nt_nip, xt_rot, 006643 
2429:437 | DONE dir | na 16 16 |        |             |                 9b 6a 3b 66 43 66        --  . j ; f C f
2429:438 | DONE dir | na 16 16 | 006aae | (3 bytes)   |         .byte 72, 6f, 74             
2429:438 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
2429:439 | DONE wsp | na 16 16 |        |             |
2429:440 | DONE lbl | na 16 16 | 006ab1 |             | nt_execute                           
2429:441 | DONE dir | na 16 16 | 006ab1 | (2 bytes)   |         .byte 7, { PW + NC }         
2429:441 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2429:442 | DONE dir | na 16 16 | 006ab3 | (6 bytes)   |         .word nt_rot, xt_execute, 00649f 
2429:442 | DONE dir | na 16 16 |        |             |                 a6 6a 95 64 9f 64        --  . j . d . d
2429:443 | DONE dir | na 16 16 | 006ab9 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
2429:443 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
2429:444 | DONE wsp | na 16 16 |        |             |
2429:445 | DONE lbl | na 16 16 | 006ac0 |             | nt_here                              
2429:446 | DONE dir | na 16 16 | 006ac0 | (2 bytes)   |         .byte 4, { PW + NC }         
2429:446 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:447 | DONE dir | na 16 16 | 006ac2 | (6 bytes)   |         .word nt_execute, xt_here, 00650c 
2429:447 | DONE dir | na 16 16 |        |             |                 b1 6a 06 65 0c 65        --  . j . e  e
2429:448 | DONE dir | na 16 16 | 006ac8 | (4 bytes)   |         .byte 68, 65, 72, 65         
2429:448 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
2429:449 | DONE wsp | na 16 16 |        |             |
2429:450 | DONE lbl | na 16 16 | 006acc |             | nt_2drop                             
2429:451 | DONE dir | na 16 16 | 006acc | (2 bytes)   |         .byte 5, { PW + NC }         
2429:451 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2429:452 | DONE dir | na 16 16 | 006ace | (6 bytes)   |         .word nt_here, xt_2drop, 00618d 
2429:452 | DONE dir | na 16 16 |        |             |                 c0 6a 87 61 8d 61        --  . j . a . a
2429:453 | DONE dir | na 16 16 | 006ad4 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
2429:453 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
2429:454 | DONE wsp | na 16 16 |        |             |
2429:455 | DONE lbl | na 16 16 | 006ad9 |             | nt_over                              
2429:456 | DONE dir | na 16 16 | 006ad9 | (2 bytes)   |         .byte 4, { PW + NC }         
2429:456 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:457 | DONE dir | na 16 16 | 006adb | (6 bytes)   |         .word nt_2drop, xt_over, 006589 
2429:457 | DONE dir | na 16 16 |        |             |                 cc 6a 83 65 89 65        --  . j . e . e
2429:458 | DONE dir | na 16 16 | 006ae1 | (4 bytes)   |         .byte 6f, 76, 65, 72         
2429:458 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
2429:459 | DONE wsp | na 16 16 |        |             |
2429:460 | DONE lbl | na 16 16 | 006ae5 |             | nt_fetch                             
2429:461 | DONE dir | na 16 16 | 006ae5 | (2 bytes)   |         .byte 1, { PW + NC }         
2429:461 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:462 | DONE dir | na 16 16 | 006ae7 | (6 bytes)   |         .word nt_over, xt_fetch, 006143 
2429:462 | DONE dir | na 16 16 |        |             |                 d9 6a 3f 61 43 61        --  . j ? a C a
2429:463 | DONE dir | na 16 16 | 006aed | (1 bytes)   |         .byte 40                     
2429:463 | DONE dir | na 16 16 |        |             |                 40                       --  @
2429:464 | DONE wsp | na 16 16 |        |             |
2429:465 | DONE lbl | na 16 16 | 006aee |             | nt_store                             
2429:466 | DONE dir | na 16 16 | 006aee | (2 bytes)   |         .byte 1, { PW + NC }         
2429:466 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2429:467 | DONE dir | na 16 16 | 006af0 | (6 bytes)   |         .word nt_fetch, xt_store, 00613e 
2429:467 | DONE dir | na 16 16 |        |             |                 e5 6a 35 61 3e 61        --  . j 5 a > a
2429:468 | DONE dir | na 16 16 | 006af6 | (1 bytes)   |         .byte 21                     
2429:468 | DONE dir | na 16 16 |        |             |                 21                       --  !
2429:469 | DONE wsp | na 16 16 |        |             |
2429:470 | DONE lbl | na 16 16 | 006af7 |             | nt_swap                              
2429:471 | DONE dir | na 16 16 | 006af7 | (2 bytes)   |         .byte 4, { PW + NC }         
2429:471 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:472 | DONE dir | na 16 16 | 006af9 | (6 bytes)   |         .word nt_store, xt_swap, 006679 
2429:472 | DONE dir | na 16 16 |        |             |                 ee 6a 74 66 79 66        --  . j t f y f
2429:473 | DONE dir | na 16 16 | 006aff | (4 bytes)   |         .byte 73, 77, 61, 70         
2429:473 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
2429:474 | DONE wsp | na 16 16 |        |             |
2429:475 | DONE lbl | na 16 16 | 006b03 |             | nt_dup                               
2429:476 | DONE dir | na 16 16 | 006b03 | (2 bytes)   |         .byte 3, { PW + NC }         
2429:476 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2429:477 | DONE dir | na 16 16 | 006b05 | (6 bytes)   |         .word nt_swap, xt_dup, 006462 
2429:477 | DONE dir | na 16 16 |        |             |                 f7 6a 5e 64 62 64        --  . j ^ d b d
2429:478 | DONE dir | na 16 16 | 006b0b | (3 bytes)   |         .byte 64, 75, 70             
2429:478 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
2429:479 | DONE wsp | na 16 16 |        |             |
2429:480 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
2429:481 | DONE lbl | na 16 16 | 006b0e |             | nt_drop                              
2429:482 | DONE dir | na 16 16 | 006b0e | (2 bytes)   |         .byte 4, { PW + NC }         
2429:482 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2429:483 | DONE dir | na 16 16 | 006b10 | (6 bytes)   |         .word nt_dup, xt_drop, 006436 
2429:483 | DONE dir | na 16 16 |        |             |                 03 6b 32 64 36 64        --  . k 2 d 6 d
2429:484 | DONE dir | na 16 16 | 006b16 | (4 bytes)   |         .byte 64, 72, 6f, 70         
2429:484 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
2429:485 | DONE wsp | na 16 16 |        |             |
2429:486 | DONE cmt | na 16 16 |        |             | ; END
2430:000 | DONE wsp | na 16 16 |        |             |
2431:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2432:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
2433:000 | DONE wsp | na 16 16 |        |             |
2434:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2435:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
2436:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
2437:000 | DONE cmt | na 16 16 |        |             | ; the stack
2438:000 | DONE lbl | na 16 16 | 006b1a |             | doconst                              
2439:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2440:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2441:000 | DONE ins | na 16 16 | 006b1a | ca          |                 dex                  make room on Data Stack
2442:000 | DONE ins | na 16 16 | 006b1b | ca          |                 dex                  
2443:000 | DONE ins | na 16 16 | 006b1c | 94 00       |                 sty.dx 00            
2444:000 | DONE wsp | na 16 16 |        |             |
2445:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
2446:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
2447:000 | DONE ins | na 16 16 | 006b1e | 68          |                 pla                  get the return address
2448:000 | DONE ins | na 16 16 | 006b1f | 85 16       |                 sta.d 000216         
2449:000 | DONE wsp | na 16 16 |        |             |
2450:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
2451:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
2452:000 | DONE ins | na 16 16 | 006b21 | a0 01 00    |                 ldy.# 0001           
2453:000 | DONE ins | na 16 16 | 006b24 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2454:000 | DONE ins | na 16 16 | 006b26 | a8          |                 tay                  
2455:000 | DONE wsp | na 16 16 |        |             |
2456:000 | DONE ins | na 16 16 | 006b27 | 60          |                 rts                  takes us to original caller
2457:000 | DONE wsp | na 16 16 |        |             |
2458:000 | DONE wsp | na 16 16 |        |             |
2459:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2460:000 | DONE cmt | na 16 16 |        |             | ; DODOES
2461:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
2462:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
2463:000 | DONE lbl | na 16 16 | 006b28 |             | dodoes                               
2464:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
2465:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
2466:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
2467:000 | DONE cmt | na 16 16 |        |             |                 ; works
2468:000 | DONE ins | na 16 16 | 006b28 | 68          |                 pla                  
2469:000 | DONE ins | na 16 16 | 006b29 | 1a          |                 inc.a                
2470:000 | DONE ins | na 16 16 | 006b2a | 85 1a       |                 sta.d 00021a         
2471:000 | DONE wsp | na 16 16 |        |             |
2472:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
2473:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
2474:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
2475:000 | DONE ins | na 16 16 | 006b2c | ca          |                 dex                  
2476:000 | DONE ins | na 16 16 | 006b2d | ca          |                 dex                  
2477:000 | DONE ins | na 16 16 | 006b2e | 94 00       |                 sty.dx 00            
2478:000 | DONE wsp | na 16 16 |        |             |
2479:000 | DONE ins | na 16 16 | 006b30 | 7a          |                 ply                  
2480:000 | DONE ins | na 16 16 | 006b31 | c8          |                 iny                  
2481:000 | DONE wsp | na 16 16 |        |             |
2482:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
2483:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
2484:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
2485:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
2486:000 | DONE ins | na 16 16 | 006b32 | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
2487:000 | DONE wsp | na 16 16 |        |             |
2488:000 | DONE wsp | na 16 16 |        |             |
2489:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2490:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
2491:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
2492:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
2493:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
2494:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
2495:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
2496:000 | DONE lbl | na 16 16 | 006b35 |             | dovar                                
2497:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2498:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2499:000 | DONE ins | na 16 16 | 006b35 | ca          |                 dex                  make room on Data Stack
2500:000 | DONE ins | na 16 16 | 006b36 | ca          |                 dex                  
2501:000 | DONE ins | na 16 16 | 006b37 | 94 00       |                 sty.dx 00            
2502:000 | DONE wsp | na 16 16 |        |             |
2503:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
2504:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
2505:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
2506:000 | DONE ins | na 16 16 | 006b39 | 7a          |                 ply                  value is now TOS
2507:000 | DONE ins | na 16 16 | 006b3a | c8          |                 iny                  add one because of 65816's address handling
2508:000 | DONE wsp | na 16 16 |        |             |
2509:000 | DONE ins | na 16 16 | 006b3b | 60          |                 rts                  takes us to original caller
2510:000 | DONE wsp | na 16 16 |        |             |
2511:000 | DONE wsp | na 16 16 |        |             |
2512:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2513:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
2514:000 | DONE wsp | na 16 16 |        |             |
2515:000 | DONE wsp | na 16 16 |        |             |
2516:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2517:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (AKA INTERPRET)
2518:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
2519:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
2520:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
2521:000 | DONE lbl | na 16 16 | 006b3c |             | compex                               
2522:000 | DONE lbl | na 16 16 | 006b3c |             | compex_loop                          
2523:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2524:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2525:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
2526:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
2527:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
2528:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
2529:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
2530:000 | DONE ins | na 16 16 | 006b3c | 20 a3 65    |                 jsr 0065a3           ( "string" -- addr u )
2531:000 | DONE wsp | na 16 16 |        |             |
2532:000 | DONE cmt | na 16 16 |        |             |                 ; TODO decide if we want to make a copy of the string here so
2533:000 | DONE cmt | na 16 16 |        |             |                 ; that we can provide a better error message
2534:000 | DONE wsp | na 16 16 |        |             |
2535:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
2536:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
2537:000 | DONE ins | na 16 16 | 006b3f | 98          |                 tya                  force flag check
2538:000 | DONE ins | na 16 16 | 006b40 | f0 3f       |                 beq 006b81           
2539:000 | DONE wsp | na 16 16 |        |             |
2540:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
2541:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
2542:000 | DONE ins | na 16 16 | 006b42 | 20 e7 6b    |                 jsr 006be7           
2543:000 | DONE wsp | na 16 16 |        |             |
2544:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know
2545:000 | DONE ins | na 16 16 | 006b45 | 20 a0 64    |                 jsr 0064a0           ( addr u -- nt | 0 )
2546:000 | DONE wsp | na 16 16 |        |             |
2547:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
2548:000 | DONE ins | na 16 16 | 006b48 | 98          |                 tya                  
2549:000 | DONE ins | na 16 16 | 006b49 | d0 06       |                 bne 006b51           
2550:000 | DONE wsp | na 16 16 |        |             |
2551:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
2552:000 | DONE wsp | na 16 16 |        |             |
2553:000 | DONE cmt | na 16 16 |        |             |                 ; Number conversion has failed, which means the user screwed up,
2554:000 | DONE cmt | na 16 16 |        |             |                 ; so complain and abort
2555:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print the offending string first
2556:000 | DONE ins | na 16 16 | 006b4b | a9 47 6e    |                 lda.# 006e47         "Unknown word"
2557:000 | DONE ins | na 16 16 | 006b4e | 4c ae 6b    |                 jmp 006bae           
2558:000 | DONE wsp | na 16 16 |        |             |
2559:000 | DONE lbl | na 16 16 | 006b51 |             | compex_got_name_token                
2560:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
2561:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down. This is a quicker
2562:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
2563:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
2564:000 | DONE ins | na 16 16 | 006b51 | 84 16       |                 sty.d 000216         
2565:000 | DONE ins | na 16 16 | 006b53 | c8          |                 iny                  
2566:000 | DONE ins | na 16 16 | 006b54 | c8          |                 iny                  
2567:000 | DONE ins | na 16 16 | 006b55 | c8          |                 iny                  
2568:000 | DONE ins | na 16 16 | 006b56 | c8          |                 iny                  
2569:000 | DONE ins | na 16 16 | 006b57 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2570:000 | DONE ins | na 16 16 | 006b5a | a8          |                 tay                  xt is TOS
2571:000 | DONE wsp | na 16 16 |        |             |
2572:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
2573:000 | DONE ins | na 16 16 | 006b5b | a5 14       |                 lda.d 000214         
2574:000 | DONE ins | na 16 16 | 006b5d | d0 14       |                 bne 006b73           
2575:000 | DONE wsp | na 16 16 |        |             |
2576:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
2577:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
2578:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
2579:000 | DONE ins | na 16 16 | 006b5f | b2 16       |                 lda.di 000216        
2580:000 | DONE ins | na 16 16 | 006b61 | eb          |                 xba                  flags are MSB
2581:000 | DONE ins | na 16 16 | 006b62 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
2582:000 | DONE ins | na 16 16 | 006b65 | f0 06       |                 beq 006b6d           
2583:000 | DONE wsp | na 16 16 |        |             |
2584:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
2585:000 | DONE ins | na 16 16 | 006b67 | a9 39 6d    |                 lda.# 006d39         
2586:000 | DONE ins | na 16 16 | 006b6a | 4c ae 6b    |                 jmp 006bae           
2587:000 | DONE wsp | na 16 16 |        |             |
2588:000 | DONE lbl | na 16 16 | 006b6d |             | compex_interpret                     
2589:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
2590:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
2591:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
2592:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
2593:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
2594:000 | DONE ins | na 16 16 | 006b6d | 20 95 64    |                 jsr 006495           
2595:000 | DONE wsp | na 16 16 |        |             |
2596:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
2597:000 | DONE ins | na 16 16 | 006b70 | 4c 3c 6b    |                 jmp 006b3c           
2598:000 | DONE wsp | na 16 16 |        |             |
2599:000 | DONE lbl | na 16 16 | 006b73 |             | compex_compile                       
2600:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
2601:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
2602:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
2603:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
2604:000 | DONE ins | na 16 16 | 006b73 | b2 16       |                 lda.di 000216        
2605:000 | DONE ins | na 16 16 | 006b75 | eb          |                 xba                  flags are MSB
2606:000 | DONE ins | na 16 16 | 006b76 | 29 02 00    |                 and.# IM             Mask all but IM bit
2607:000 | DONE ins | na 16 16 | 006b79 | d0 f2       |                 bne 006b6d           IMMEDIATE word, execute right now
2608:000 | DONE wsp | na 16 16 |        |             |
2609:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
2610:000 | DONE ins | na 16 16 | 006b7b | 20 d8 62    |                 jsr 0062d8           
2611:000 | DONE wsp | na 16 16 |        |             |
2612:000 | DONE ins | na 16 16 | 006b7e | 4c 3c 6b    |                 jmp 006b3c           
2613:000 | DONE wsp | na 16 16 |        |             |
2614:000 | DONE lbl | na 16 16 | 006b81 |             | compex_line_done                     
2615:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
2616:000 | DONE ins | na 16 16 | 006b81 | b4 02       |                 ldy.dx 02            
2617:000 | DONE ins | na 16 16 | 006b83 | e8          |                 inx                  
2618:000 | DONE ins | na 16 16 | 006b84 | e8          |                 inx                  
2619:000 | DONE ins | na 16 16 | 006b85 | e8          |                 inx                  
2620:000 | DONE ins | na 16 16 | 006b86 | e8          |                 inx                  
2621:000 | DONE wsp | na 16 16 |        |             |
2622:000 | DONE ins | na 16 16 | 006b87 | 60          |                 rts                  
2623:000 | DONE wsp | na 16 16 |        |             |
2624:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2625:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
2626:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
2627:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
2628:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
2629:000 | DONE cmt | na 16 16 |        |             | ;
2630:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
2631:000 | DONE cmt | na 16 16 |        |             | ;
2632:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
2633:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
2634:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos
2635:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
2636:000 | DONE wsp | na 16 16 |        |             |
2637:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
2638:000 | DONE lbl | na 16 16 | 006b88 |             | cmpl_word                            
2639:000 | DONE ins | na 16 16 | 006b88 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
2640:000 | DONE ins | na 16 16 | 006b8b | 80 08       |                 bra 006b95           
2641:000 | DONE lbl | na 16 16 | 006b8d |             | cmpl_subroutine                      
2642:000 | DONE ins | na 16 16 | 006b8d | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
2643:000 | DONE ins | na 16 16 | 006b90 | 80 03       |                 bra 006b95           
2644:000 | DONE lbl | na 16 16 | 006b92 |             | cmpl_jump                            
2645:000 | DONE ins | na 16 16 | 006b92 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
2646:000 | DONE lbl | na 16 16 | 006b95 |             | cmpl_common                          
2647:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
2648:000 | DONE ins | na 16 16 | 006b95 | 84 06       |                 sty.d 000206         
2649:000 | DONE wsp | na 16 16 |        |             |
2650:000 | DONE ins | na 16 16 | 006b97 | a8          |                 tay                  force flag check
2651:000 | DONE ins | na 16 16 | 006b98 | f0 08       |                 beq 006ba2           came in through cmpl_word, just compile body
2652:000 | DONE wsp | na 16 16 |        |             |
2653:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
2654:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
2655:000 | DONE ins | na 16 16 | 006b9a | e2 20       |                 sep 20               
2655:001 | DONE ctl | na  8 16 |        |             |         .!a8
2656:000 | DONE ins | na  8 16 | 006b9c | 92 00       |                 sta.di 000200        STA (CP)
2657:000 | DONE ins | na  8 16 | 006b9e | c2 20       |                 rep 20               
2657:001 | DONE ctl | na 16 16 |        |             |         .!a16
2658:000 | DONE ins | na 16 16 | 006ba0 | e6 00       |                 inc.d 000200         fall through to cmpl_body
2659:000 | DONE lbl | na 16 16 | 006ba2 |             | cmpl_body                            
2660:000 | DONE ins | na 16 16 | 006ba2 | 7a          |                 ply                  the return address we'll need later
2661:000 | DONE wsp | na 16 16 |        |             |
2662:000 | DONE ins | na 16 16 | 006ba3 | 68          |                 pla                  next value on stack is the word to compile
2663:000 | DONE ins | na 16 16 | 006ba4 | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
2664:000 | DONE ins | na 16 16 | 006ba6 | e6 00       |                 inc.d 000200         
2665:000 | DONE ins | na 16 16 | 006ba8 | e6 00       |                 inc.d 000200         
2666:000 | DONE wsp | na 16 16 |        |             |
2667:000 | DONE ins | na 16 16 | 006baa | 5a          |                 phy                  make sure we can get back home
2668:000 | DONE wsp | na 16 16 |        |             |
2669:000 | DONE ins | na 16 16 | 006bab | a4 06       |                 ldy.d 000206         restore Data Stack
2670:000 | DONE wsp | na 16 16 |        |             |
2671:000 | DONE ins | na 16 16 | 006bad | 60          |                 rts                  
2672:000 | DONE wsp | na 16 16 |        |             |
2673:000 | DONE wsp | na 16 16 |        |             |
2674:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2675:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
2676:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
2677:000 | DONE lbl | na 16 16 | 006bae |             | error                                
2678:000 | DONE ins | na 16 16 | 006bae | 20 b4 6b    |                 jsr 006bb4           
2679:000 | DONE ins | na 16 16 | 006bb1 | 4c 97 60    |                 jmp 006097           
2680:000 | DONE wsp | na 16 16 |        |             |
2681:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2682:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
2683:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
2684:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
2685:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
2686:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
2687:000 | DONE lbl | na 16 16 | 006bb4 |             | print_string                         
2688:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2689:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2690:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
2691:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
2692:000 | DONE ins | na 16 16 | 006bb4 | da          |                 phx                  
2693:000 | DONE ins | na 16 16 | 006bb5 | aa          |                 tax                  x16 contains address of string
2694:000 | DONE lbl | na 16 16 | 006bb6 |             | @                                    
2695:000 | DONE ins | na 16 16 | 006bb6 | e2 20       |                 sep 20               
2695:001 | DONE ctl | na  8 16 |        |             |         .!a8
2696:000 | DONE ins | na  8 16 | 006bb8 | bd 00 00    |                 lda.x 0000           LDA $0000,X
2697:000 | DONE ins | na  8 16 | 006bbb | f0 06       |                 beq 006bc3           
2698:000 | DONE ins | na  8 16 | 006bbd | 20 36 60    |                 jsr 006036           
2699:000 | DONE ins | na  8 16 | 006bc0 | e8          |                 inx                  
2700:000 | DONE ins | na  8 16 | 006bc1 | 80 f3       |                 bra 006bb6           
2701:000 | DONE wsp | na  8 16 |        |             |
2702:000 | DONE lbl | na  8 16 | 006bc3 |             | print_string_done                    
2703:000 | DONE ins | na  8 16 | 006bc3 | a9 0a       |                 lda.# AscLF          should be CR on some systems
2704:000 | DONE ins | na  8 16 | 006bc5 | 20 36 60    |                 jsr 006036           
2705:000 | DONE ins | na  8 16 | 006bc8 | c2 20       |                 rep 20               
2705:001 | DONE ctl | na 16 16 |        |             |         .!a16
2706:000 | DONE ins | na 16 16 | 006bca | fa          |                 plx                  
2707:000 | DONE ins | na 16 16 | 006bcb | 60          |                 rts                  
2708:000 | DONE wsp | na 16 16 |        |             |
2709:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2710:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
2711:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
2712:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
2713:000 | DONE lbl | na 16 16 | 006bcc |             | byte_to_ascii                        
2714:000 | DONE ins | na 16 16 | 006bcc | 48          |                 pha                  
2715:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
2716:000 | DONE ins | na 16 16 | 006bcd | 4a          |                 lsr.a                
2717:000 | DONE ins | na 16 16 | 006bce | 4a          |                 lsr.a                
2718:000 | DONE ins | na 16 16 | 006bcf | 4a          |                 lsr.a                
2719:000 | DONE ins | na 16 16 | 006bd0 | 4a          |                 lsr.a                
2720:000 | DONE ins | na 16 16 | 006bd1 | 20 d5 6b    |                 jsr 006bd5           
2721:000 | DONE wsp | na 16 16 |        |             |
2722:000 | DONE ins | na 16 16 | 006bd4 | 68          |                 pla                  
2723:000 | DONE wsp | na 16 16 |        |             |
2724:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
2725:000 | DONE wsp | na 16 16 |        |             |
2726:000 | DONE wsp | na 16 16 |        |             |
2727:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2728:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
2729:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
2730:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
2731:000 | DONE lbl | na 16 16 | 006bd5 |             | nibble_to_ascii                      
2732:000 | DONE ins | na 16 16 | 006bd5 | 29 0f 00    |                 and.# 000f           
2733:000 | DONE ins | na 16 16 | 006bd8 | 09 30 00    |                 ora.# 30             
2734:000 | DONE ins | na 16 16 | 006bdb | c9 3a 00    |                 cmp.# 003a           '9' + 1
2735:000 | DONE ins | na 16 16 | 006bde | 90 03       |                 bcc 006be3           
2736:000 | DONE ins | na 16 16 | 006be0 | 69 06 00    |                 adc.# 0006           
2737:000 | DONE lbl | na 16 16 | 006be3 |             | @                                    
2738:000 | DONE ins | na 16 16 | 006be3 | 20 36 60    |                 jsr 006036           
2739:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2740:000 | DONE ins | na 16 16 | 006be6 | 60          |                 rts                  
2741:000 | DONE wsp | na 16 16 |        |             |
2742:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2743:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
2744:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
2745:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
2746:000 | DONE lbl | na 16 16 | 006be7 |             | string_to_lowercase                  
2747:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
2748:000 | DONE ins | na 16 16 | 006be7 | 60          |                 rts                  
2749:000 | DONE wsp | na 16 16 |        |             |
2750:000 | DONE wsp | na 16 16 |        |             |
2751:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2752:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
2753:000 | DONE wsp | na 16 16 |        |             |
2754:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
2755:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
2756:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
2757:000 | DONE lbl | na 16 16 | 006be8 |             | hi-start                             
2758:000 | DONE cmt | na 16 16 |        |             |         ; High level definitions.
2759:000 | DONE dir | na 16 16 | 006be8 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) ( "PARENS"
2759:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
2759:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
2759:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
2759:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
2759:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
2760:000 | DONE dir | na 16 16 | 006c0d | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) .( "DOTPARENS"
2760:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
2760:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
2760:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
2760:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
2760:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
2761:000 | DONE wsp | na 16 16 |        |             |
2762:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings
2763:000 | DONE dir | na 16 16 | 006c32 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
2763:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
2763:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
2763:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
2763:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
2763:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
2764:000 | DONE dir | na 16 16 | 006c55 | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
2764:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
2764:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
2764:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
2764:000 | DONE dir | na 16 16 |        |             |                 31 37 2e 20 46 65 62 20  --  1 7 .   F e b  
2764:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
2765:000 | DONE dir | na 16 16 | 006c7a | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
2765:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
2765:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
2765:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
2765:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
2765:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
2765:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
2765:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
2766:000 | DONE dir | na 16 16 | 006cad | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
2766:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
2766:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
2766:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
2766:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
2766:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
2766:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
2766:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
2767:000 | DONE dir | na 16 16 | 006ce1 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
2767:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
2767:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
2767:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
2767:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
2768:000 | DONE lbl | na 16 16 | 006cfd |             | hi-end                               
2769:000 | DONE wsp | na 16 16 |        |             |
2770:000 | DONE wsp | na 16 16 |        |             |
2771:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2772:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
2773:000 | DONE wsp | na 16 16 |        |             |
2774:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
2774:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2774:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
2774:003 | DONE cmt | na 16 16 |        |             | ; This version:  15. Feb 2017
2774:004 | DONE wsp | na 16 16 |        |             |
2774:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
2774:006 | DONE wsp | na 16 16 |        |             |
2774:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2774:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
2774:009 | DONE wsp | na 16 16 |        |             |
2774:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
2774:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
2774:012 | DONE cmt | na 16 16 |        |             | ; character
2774:013 | DONE wsp | na 16 16 |        |             |
2774:014 | DONE lbl | na 16 16 | 006cfd |             | s_ok                                 
2774:015 | DONE dir | na 16 16 | 006cfd | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
2774:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
2774:016 | DONE lbl | na 16 16 | 006d01 |             | s_compiled                           
2774:017 | DONE dir | na 16 16 | 006d01 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
2774:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
2774:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
2774:018 | DONE wsp | na 16 16 |        |             |
2774:019 | DONE wsp | na 16 16 |        |             |
2774:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2774:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
2774:022 | DONE wsp | na 16 16 |        |             |
2774:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
2774:024 | DONE wsp | na 16 16 |        |             |
2774:025 | DONE lbl | na 16 16 | 006d0b |             | es_allot                             
2774:026 | DONE dir | na 16 16 | 006d0b | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
2774:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
2774:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
2774:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
2774:027 | DONE lbl | na 16 16 | 006d1f |             | es_channel                           
2774:028 | DONE dir | na 16 16 | 006d1f | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
2774:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
2774:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
2774:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
2774:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
2774:029 | DONE lbl | na 16 16 | 006d39 |             | es_componly                          
2774:030 | DONE dir | na 16 16 | 006d39 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
2774:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
2774:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
2774:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
2774:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
2774:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
2774:031 | DONE lbl | na 16 16 | 006d5a |             | es_defer                             
2774:032 | DONE dir | na 16 16 | 006d5a | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
2774:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
2774:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
2774:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
2774:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
2774:033 | DONE lbl | na 16 16 | 006d77 |             | es_divzero                           
2774:034 | DONE dir | na 16 16 | 006d77 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
2774:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
2774:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
2774:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
2774:035 | DONE lbl | na 16 16 | 006d88 |             | es_error                             
2774:036 | DONE dir | na 16 16 | 006d88 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
2774:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
2774:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
2774:037 | DONE lbl | na 16 16 | 006d94 |             | es_intonly                           
2774:038 | DONE dir | na 16 16 | 006d94 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
2774:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
2774:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
2774:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
2774:039 | DONE lbl | na 16 16 | 006daa |             | es_noname                            
2774:040 | DONE dir | na 16 16 | 006daa | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
2774:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
2774:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
2774:040 | DONE dir | na 16 16 |        |             |                                          -- 
2774:041 | DONE lbl | na 16 16 | 006dba |             | es_radix                             
2774:042 | DONE dir | na 16 16 | 006dba | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
2774:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
2774:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
2774:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
2774:043 | DONE lbl | na 16 16 | 006dd1 |             | es_refill1                           
2774:044 | DONE dir | na 16 16 | 006dd1 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
2774:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
2774:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
2774:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
2774:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
2774:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
2774:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
2774:045 | DONE lbl | na 16 16 | 006dff |             | es_refill2                           
2774:046 | DONE dir | na 16 16 | 006dff | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
2774:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
2774:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
2774:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
2774:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
2774:046 | DONE dir | na 16 16 |        |             |                                          -- 
2774:047 | DONE lbl | na 16 16 | 006e1f |             | es_state                             
2774:048 | DONE dir | na 16 16 | 006e1f | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
2774:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
2774:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
2774:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
2774:048 | DONE dir | na 16 16 |        |             |                                          -- 
2774:049 | DONE lbl | na 16 16 | 006e37 |             | es_underflow                         
2774:050 | DONE dir | na 16 16 | 006e37 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
2774:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
2774:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
2774:050 | DONE dir | na 16 16 |        |             |                                          -- 
2774:051 | DONE lbl | na 16 16 | 006e47 |             | es_syntax                            
2774:052 | DONE dir | na 16 16 | 006e47 | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
2774:052 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
2774:052 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
2774:052 | DONE dir | na 16 16 |        |             |                                          -- 
2774:053 | DONE wsp | na 16 16 |        |             |
2774:054 | DONE wsp | na 16 16 |        |             |
2774:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2774:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
2774:057 | DONE wsp | na 16 16 |        |             |
2774:058 | DONE lbl | na 16 16 | 006e57 |             | vt100_page                           
2774:059 | DONE dir | na 16 16 | 006e57 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
2774:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
2774:060 | DONE lbl | na 16 16 | 006e5c |             | vt100_home                           
2774:061 | DONE dir | na 16 16 | 006e5c | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
2774:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
2774:062 | DONE wsp | na 16 16 |        |             |
2774:063 | DONE wsp | na 16 16 |        |             |
2774:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2774:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
2774:066 | DONE wsp | na 16 16 |        |             |
2774:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
2774:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
2774:069 | DONE wsp | na 16 16 |        |             |
2774:070 | DONE lbl | na 16 16 | 006e60 |             | tests_prev_cmd                       
2774:071 | DONE dir | na 16 16 | 006e60 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
2774:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
2774:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
2774:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
2774:072 | DONE lbl | na 16 16 | 006e73 |             | tests_next_cmd                       
2774:073 | DONE dir | na 16 16 | 006e73 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
2774:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
2774:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
2774:074 | DONE wsp | na 16 16 |        |             |
2774:075 | DONE wsp | na 16 16 |        |             |
2774:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2774:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
2774:078 | DONE wsp | na 16 16 |        |             |
2774:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
2774:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
2774:081 | DONE wsp | na 16 16 |        |             |
2774:082 | DONE lbl | na 16 16 | 006e82 |             | alphastr                             
2774:083 | DONE dir | na 16 16 | 006e82 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
2774:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
2774:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
2774:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
2774:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
2774:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
2775:000 | DONE wsp | na 16 16 |        |             |
2776:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2777:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
2778:000 | DONE wsp | na 16 16 |        |             |
2779:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
2780:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
2781:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
2782:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
2783:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
2784:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2785:000 | DONE wsp | na 16 16 |        |             |
2786:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
2787:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2788:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
2789:000 | DONE cmt | na 16 16 |        |             |                 ; xba
2790:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2791:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2792:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
2793:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2794:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
2795:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
2796:000 | DONE wsp | na 16 16 |        |             |
2797:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
2798:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
2799:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
2800:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2801:000 | DONE wsp | na 16 16 |        |             |
2802:000 | DONE wsp | na 16 16 |        |             |
2803:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2804:000 | DONE cmt | na 16 16 |        |             | ; END
2805:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 006224
- accept_eol                  : 00621c
- accept_loop                 : 0061d1
- accept_nonzero              : 0061c4
- allot_done                  : 006264
- allot_error                 : 006253
- allot_minus                 : 006259
- allot_real_gone             : 006266
- alphastr                    : 006e82
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006bcc
- char_got_char               : 0062c3
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 006ba2
- cmpl_common                 : 006b95
- cmpl_jump                   : 006b92
- cmpl_subroutine             : 006b8d
- cmpl_word                   : 006b88
- co                          : 000004
- compex                      : 006b3c
- compex_compile              : 006b73
- compex_got_name_token       : 006b51
- compex_interpret            : 006b6d
- compex_line_done            : 006b81
- compex_loop                 : 006b3c
- compile_as_code             : 0062d8
- compile_as_jump             : 0062d8
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006326
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 006b1a
- dodoes                      : 006b28
- does_rt                     : 0063b0
- dots_done                   : 00642e
- dots_loop                   : 006414
- dots_not_empty              : 00640e
- dovar                       : 006b35
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 00643f
- dump_done                   : 006454
- dump_line_loop              : 006439
- error                       : 006bae
- es_allot                    : 006d0b
- es_channel                  : 006d1f
- es_componly                 : 006d39
- es_defer                    : 006d5a
- es_divzero                  : 006d77
- es_error                    : 006d88
- es_intonly                  : 006d94
- es_noname                   : 006daa
- es_radix                    : 006dba
- es_refill1                  : 006dd1
- es_refill2                  : 006dff
- es_state                    : 006e1f
- es_syntax                   : 006e47
- es_underflow                : 006e37
- execute_ip                  : 006492
- find-name_all_chars         : 0064ce
- find-name_char_nomatcnt_8   : 0064ca
- find-name_chars             : 0064bf
- find-name_done              : 0064f4
- find-name_failure_16        : 0064f1
- find-name_loop              : 0064aa
- find-name_next_entry        : 0064b3
- find-name_success           : 0064eb
- get_chr                     : 006047
- get_chr_wait                : 00604c
- have_chr?                   : 006056
- hi-end                      : 006cfd
- hi-start                    : 006be8
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- literal_rt                  : 006525
- max_drop                    : 006540
- max_nip                     : 006542
- max_no_ov                   : 00653e
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 006553
- min_nip                     : 006555
- min_no_ov                   : 006551
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 006bd5
- nt_2drop                    : 006acc
- nt_2dup                     : 0068e3
- nt_abort                    : 006771
- nt_abs                      : 0068ef
- nt_accept                   : 006a81
- nt_allot                    : 0068a8
- nt_and                      : 0069a9
- nt_base                     : 006809
- nt_bell                     : 006724
- nt_bl                       : 0067ba
- nt_bracket-char             : 006832
- nt_bye                      : 0066f4
- nt_c-comma                  : 0069b4
- nt_c-fetch                  : 0069be
- nt_c-store                  : 0069c8
- nt_cells                    : 006825
- nt_char                     : 006988
- nt_cold                     : 0066ff
- nt_colon                    : 00689f
- nt_comma                    : 006a78
- nt_compile-only             : 00684f
- nt_compilecomma             : 006886
- nt_constant                 : 00692d
- nt_count                    : 006764
- nt_cr                       : 0067b0
- nt_create                   : 0068c2
- nt_decimal                  : 006730
- nt_depth                    : 006920
- nt_does                     : 0068b5
- nt_dot                      : 0067f5
- nt_dots                     : 0067df
- nt_drop                     : 006b0e
- nt_dump                     : 006718
- nt_dup                      : 006b03
- nt_evaluate                 : 006815
- nt_execute                  : 006ab1
- nt_false                    : 006a02
- nt_fetch                    : 006ae5
- nt_find-name                : 006a36
- nt_here                     : 006ac0
- nt_hex                      : 00673f
- nt_immediate                : 006863
- nt_invert                   : 00697a
- nt_leftbracket              : 00687d
- nt_literal                  : 006840
- nt_max                      : 006961
- nt_min                      : 006956
- nt_minus                    : 0069dc
- nt_name-int                 : 0067a0
- nt_name-string              : 0068d0
- nt_negate                   : 00696c
- nt_nip                      : 006a9b
- nt_one                      : 006a24
- nt_one-minus                : 0069ee
- nt_one-plus                 : 0069f8
- nt_or                       : 00699f
- nt_over                     : 006ad9
- nt_pad                      : 0067fe
- nt_page                     : 006758
- nt_parse                    : 00677e
- nt_parse-name               : 006a55
- nt_plus                     : 0069e5
- nt_question                 : 006797
- nt_quit                     : 00678b
- nt_refill                   : 006a47
- nt_rightbracket             : 006874
- nt_rot                      : 006aa6
- nt_semicolon                : 006896
- nt_source                   : 006912
- nt_source-id                : 006a67
- nt_space                    : 0067d2
- nt_spaces                   : 0067c4
- nt_state                    : 0068fa
- nt_store                    : 006aee
- nt_swap                     : 006af7
- nt_tick                     : 00694d
- nt_to-in                    : 006907
- nt_true                     : 006a0f
- nt_tuck                     : 006a8f
- nt_two                      : 006a1b
- nt_two-star                 : 0069d2
- nt_type                     : 0067e9
- nt_unused                   : 00674a
- nt_variable                 : 00693d
- nt_words                    : 00670b
- nt_xor                      : 006994
- nt_zero                     : 006a2d
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 0065b5
- parse-name_found            : 0065c9
- parse-name_loop             : 0065a8
- parse_found_delimiter       : 0065f5
- parse_loop                  : 0065e8
- parse_reached_eol           : 0065f9
- physicalram                 : 007fff
- piblen                      : 000210
- print_string                : 006bb4
- print_string_done           : 006bc3
- put_chr                     : 006036
- put_chr_wait                : 00603c
- pw                          : 000008
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 006634
- refill_src_not_kbd          : 00662b
- reset_hardware              : 006000
- s_compiled                  : 006d01
- s_ok                        : 006cfd
- spaces_done                 : 006667
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- string_to_lowercase         : 006be7
- tests_next_cmd              : 006e73
- tests_prev_cmd              : 006e60
- tick_have_nt                : 0061b1
- tick_have_word              : 0061a5
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 0066a5
- type_loop                   : 006699
- vt100_home                  : 006e5c
- vt100_page                  : 006e57
- words_loop                  : 0066cf
- workword                    : 00021e
- xt_2drop                    : 006187
- xt_2dup                     : 00618e
- xt_abort                    : 006097
- xt_abs                      : 0061b5
- xt_accept                   : 0061be
- xt_allot                    : 006242
- xt_and                      : 00626b
- xt_base                     : 006272
- xt_bell                     : 00627a
- xt_bl                       : 006281
- xt_bracket-char             : 006144
- xt_bye                      : 006289
- xt_c-comma                  : 00628d
- xt_c-fetch                  : 00629b
- xt_c-store                  : 0062a7
- xt_char                     : 0062b7
- xt_cold                     : 006063
- xt_colon                    : 0060f3
- xt_comma                    : 0060e7
- xt_compile-only             : 0062cf
- xt_compilecomma             : 0062d8
- xt_constant                 : 0062eb
- xt_count                    : 006305
- xt_cr                       : 006314
- xt_create                   : 00631b
- xt_decimal                  : 00638e
- xt_depth                    : 006394
- xt_does                     : 0063a3
- xt_dot                      : 0063c6
- xt_dotparen                 : 0063dc
- xt_dots                     : 0063ea
- xt_drop                     : 006432
- xt_dump                     : 006437
- xt_dup                      : 00645e
- xt_evaluate                 : 006463
- xt_execute                  : 006495
- xt_fetch                    : 00613f
- xt_find-name                : 0064a0
- xt_here                     : 006506
- xt_hex                      : 00650d
- xt_immediate                : 0064f7
- xt_invert                   : 006500
- xt_leftbracket              : 00614b
- xt_literal                  : 006513
- xt_max                      : 006532
- xt_min                      : 006545
- xt_minus                    : 00615c
- xt_name-int                 : 006558
- xt_name-string              : 006561
- xt_negate                   : 006572
- xt_nip                      : 006579
- xt_one                      : 00616f
- xt_one-minus                : 006177
- xt_one-plus                 : 006179
- xt_or                       : 00657c
- xt_over                     : 006583
- xt_pad                      : 00658a
- xt_page                     : 006596
- xt_parse                    : 0065d5
- xt_parse-name               : 0065a3
- xt_plus                     : 006154
- xt_question                 : 00612e
- xt_quit                     : 00609f
- xt_refill                   : 006608
- xt_rightbracket             : 00614e
- xt_rot                      : 00663b
- xt_semicolon                : 006115
- xt_source                   : 006644
- xt_source-id                : 006651
- xt_space                    : 006658
- xt_spaces                   : 00665f
- xt_state                    : 00666c
- xt_store                    : 006135
- xt_swap                     : 006674
- xt_tick                     : 006199
- xt_to-in                    : 0060df
- xt_true                     : 00667a
- xt_tuck                     : 006682
- xt_two                      : 00617b
- xt_two-star                 : 006183
- xt_type                     : 00668b
- xt_unused                   : 0066ac
- xt_variable                 : 0066b8
- xt_words                    : 0066c5
- xt_xor                      : 0066ed
- xt_zero                     : 006167
- z_2drop                     : 00618d
- z_2dup                      : 006198
- z_abort                     : 0060de
- z_abs                       : 0061bd
- z_accept                    : 006241
- z_allot                     : 00626a
- z_and                       : 006271
- z_base                      : 006279
- z_bell                      : 006280
- z_bl                        : 006288
- z_bracket-char              : 00614a
- z_bye                       : 00628c
- z_c-comma                   : 00629a
- z_c-fetch                   : 0062a6
- z_c-store                   : 0062b6
- z_char                      : 0062ce
- z_cold                      : 0060de
- z_colon                     : 006114
- z_comma                     : 0060f2
- z_compile-only              : 0062d7
- z_compilecomma              : 0062ea
- z_constant                  : 006304
- z_count                     : 006313
- z_cr                        : 00631a
- z_create                    : 00638d
- z_decimal                   : 006393
- z_depth                     : 0063a2
- z_does                      : 0063af
- z_dot                       : 0063db
- z_dotparen                  : 0063e9
- z_dots                      : 006431
- z_drop                      : 006436
- z_dump                      : 00645d
- z_dup                       : 006462
- z_evaluate                  : 006491
- z_execute                   : 00649f
- z_fetch                     : 006143
- z_find-name                 : 0064f6
- z_here                      : 00650c
- z_hex                       : 006512
- z_immediate                 : 0064ff
- z_invert                    : 006505
- z_leftbracket               : 00614d
- z_literal                   : 006524
- z_max                       : 006544
- z_min                       : 006557
- z_minus                     : 006166
- z_name-int                  : 006560
- z_name-string               : 006571
- z_negate                    : 006578
- z_nip                       : 00657b
- z_one                       : 006176
- z_one-minus                 : 006178
- z_one-plus                  : 00617a
- z_or                        : 006582
- z_over                      : 006589
- z_pad                       : 006595
- z_page                      : 0065a2
- z_parse                     : 006607
- z_parse-name                : 006607
- z_plus                      : 00615b
- z_question                  : 006134
- z_quit                      : 0060de
- z_refill                    : 00663a
- z_rightbracket              : 006153
- z_rot                       : 006643
- z_semicolon                 : 00612d
- z_source                    : 006650
- z_source-id                 : 006657
- z_space                     : 00665e
- z_spaces                    : 00666b
- z_state                     : 006673
- z_store                     : 00613e
- z_swap                      : 006679
- z_tick                      : 0061b4
- z_to-in                     : 0060e6
- z_true                      : 006681
- z_tuck                      : 00668a
- z_two                       : 006182
- z_two-star                  : 006186
- z_type                      : 0066ab
- z_unused                    : 0066b7
- z_variable                  : 0066c4
- z_words                     : 0066ec
- z_xor                       : 0066f3
- z_zero                      : 00616e
